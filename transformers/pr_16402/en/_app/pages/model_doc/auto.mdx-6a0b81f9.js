import{S as Uwt,i as Jwt,s as Ywt,e as a,k as l,w as F,t as o,M as Kwt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as Zwt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as Iqr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function eAt(A){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,GA,gf,Ne,ze,ci,An,OA,yn,Ln,VA,fi,xn,XA,mi,hf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),li=a("code"),mf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),ii=a("code"),di=o('"new-model"'),GA=o(")."),gf=l(),Ne=a("p"),ze=o("Likewise, if your "),ci=a("code"),An=o("NewModel"),OA=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),VA=o(`, make sure its
`),fi=a("code"),xn=o("config_class"),XA=o(` attribute is set to the same class you use when registering the model (here
`),mi=a("code"),hf=o("NewModelConfig"),Ma=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var i$=s(p);m=r(i$,"NewModelConfig"),i$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var gi=s(d);h=r(gi,"PretrainedConfig"),gi.forEach(t),Mo=r(Ae,`, make sure its
`),li=n(Ae,"CODE",{});var d$=s(li);mf=r(d$,"model_type"),d$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),ii=n(Ae,"CODE",{});var c$=s(ii);di=r(c$,'"new-model"'),c$.forEach(t),GA=r(Ae,")."),Ae.forEach(t),gf=i(Qe),Ne=n(Qe,"P",{});var Eo=s(Ne);ze=r(Eo,"Likewise, if your "),ci=n(Eo,"CODE",{});var Ea=s(ci);An=r(Ea,"NewModel"),Ea.forEach(t),OA=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var f$=s(yn);Ln=r(f$,"PreTrainedModel"),f$.forEach(t),VA=r(Eo,`, make sure its
`),fi=n(Eo,"CODE",{});var pf=s(fi);xn=r(pf,"config_class"),pf.forEach(t),XA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),mi=n(Eo,"CODE",{});var m$=s(mi);hf=r(m$,"NewModelConfig"),m$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,li),e(li,mf),e(g,et),e(g,ii),e(ii,di),e(g,GA),b(Qe,gf,Ae),b(Qe,Ne,Ae),e(Ne,ze),e(Ne,ci),e(ci,An),e(Ne,OA),e(Ne,yn),e(yn,Ln),e(Ne,VA),e(Ne,fi),e(fi,xn),e(Ne,XA),e(Ne,mi),e(mi,hf),e(Ne,Ma)},d(Qe){Qe&&t(g),Qe&&t(gf),Qe&&t(Ne)}}}function oAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tAt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function aAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nAt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function sAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _At(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $At(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ryt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ayt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function syt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function myt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _yt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function byt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Myt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ayt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $yt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Syt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ryt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Byt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yyt(A){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,GA,gf,Ne,ze,ci,An,OA,yn,Ln,VA,fi,xn,XA,mi,hf,Ma,Qe,Ae,i$,gi,d$,c$,Eo,Ea,f$,pf,m$,$je,vPe,hi,uf,VZ,zA,kje,XZ,Sje,FPe,$n,Rje,zZ,Bje,Pje,QZ,Ije,qje,TPe,QA,MPe,g$,Nje,EPe,_f,CPe,pi,bf,WZ,WA,jje,HZ,Dje,wPe,Co,HA,Gje,UA,Oje,h$,Vje,Xje,zje,JA,Qje,UZ,Wje,Hje,Uje,Er,YA,Jje,JZ,Yje,Kje,ui,Zje,YZ,eDe,oDe,KZ,rDe,tDe,aDe,y,vf,ZZ,nDe,sDe,p$,lDe,iDe,dDe,Ff,eee,cDe,fDe,u$,mDe,gDe,hDe,Tf,oee,pDe,uDe,_$,_De,bDe,vDe,Mf,ree,FDe,TDe,b$,MDe,EDe,CDe,Ef,tee,wDe,ADe,v$,yDe,LDe,xDe,Cf,aee,$De,kDe,F$,SDe,RDe,BDe,wf,nee,PDe,IDe,T$,qDe,NDe,jDe,Af,see,DDe,GDe,M$,ODe,VDe,XDe,yf,lee,zDe,QDe,E$,WDe,HDe,UDe,Lf,iee,JDe,YDe,C$,KDe,ZDe,eGe,xf,dee,oGe,rGe,w$,tGe,aGe,nGe,$f,cee,sGe,lGe,A$,iGe,dGe,cGe,kf,fee,fGe,mGe,y$,gGe,hGe,pGe,Sf,mee,uGe,_Ge,L$,bGe,vGe,FGe,Rf,gee,TGe,MGe,x$,EGe,CGe,wGe,Bf,hee,AGe,yGe,$$,LGe,xGe,$Ge,Pf,pee,kGe,SGe,k$,RGe,BGe,PGe,If,uee,IGe,qGe,S$,NGe,jGe,DGe,qf,_ee,GGe,OGe,R$,VGe,XGe,zGe,Nf,bee,QGe,WGe,B$,HGe,UGe,JGe,jf,vee,YGe,KGe,P$,ZGe,eOe,oOe,Df,Fee,rOe,tOe,I$,aOe,nOe,sOe,Gf,Tee,lOe,iOe,q$,dOe,cOe,fOe,Of,Mee,mOe,gOe,N$,hOe,pOe,uOe,Vf,Eee,_Oe,bOe,j$,vOe,FOe,TOe,Xf,Cee,MOe,EOe,D$,COe,wOe,AOe,zf,wee,yOe,LOe,G$,xOe,$Oe,kOe,Qf,Aee,SOe,ROe,O$,BOe,POe,IOe,Wf,yee,qOe,NOe,V$,jOe,DOe,GOe,Hf,Lee,OOe,VOe,X$,XOe,zOe,QOe,Uf,xee,WOe,HOe,z$,UOe,JOe,YOe,Jf,$ee,KOe,ZOe,Q$,eVe,oVe,rVe,Yf,kee,tVe,aVe,W$,nVe,sVe,lVe,Kf,See,iVe,dVe,H$,cVe,fVe,mVe,Zf,Ree,gVe,hVe,U$,pVe,uVe,_Ve,em,Bee,bVe,vVe,J$,FVe,TVe,MVe,om,Pee,EVe,CVe,Y$,wVe,AVe,yVe,rm,Iee,LVe,xVe,K$,$Ve,kVe,SVe,tm,qee,RVe,BVe,Z$,PVe,IVe,qVe,am,Nee,NVe,jVe,ek,DVe,GVe,OVe,nm,jee,VVe,XVe,ok,zVe,QVe,WVe,sm,Dee,HVe,UVe,rk,JVe,YVe,KVe,lm,Gee,ZVe,eXe,tk,oXe,rXe,tXe,im,Oee,aXe,nXe,ak,sXe,lXe,iXe,dm,Vee,dXe,cXe,nk,fXe,mXe,gXe,cm,Xee,hXe,pXe,sk,uXe,_Xe,bXe,fm,zee,vXe,FXe,lk,TXe,MXe,EXe,mm,Qee,CXe,wXe,ik,AXe,yXe,LXe,gm,Wee,xXe,$Xe,dk,kXe,SXe,RXe,hm,Hee,BXe,PXe,ck,IXe,qXe,NXe,pm,Uee,jXe,DXe,fk,GXe,OXe,VXe,um,Jee,XXe,zXe,mk,QXe,WXe,HXe,_m,Yee,UXe,JXe,gk,YXe,KXe,ZXe,bm,Kee,eze,oze,hk,rze,tze,aze,vm,Zee,nze,sze,pk,lze,ize,dze,Fm,eoe,cze,fze,uk,mze,gze,hze,Tm,ooe,pze,uze,_k,_ze,bze,vze,Mm,roe,Fze,Tze,bk,Mze,Eze,Cze,Em,toe,wze,Aze,vk,yze,Lze,xze,Cm,aoe,$ze,kze,Fk,Sze,Rze,Bze,wm,noe,Pze,Ize,Tk,qze,Nze,jze,Am,soe,Dze,Gze,Mk,Oze,Vze,Xze,ym,loe,zze,Qze,Ek,Wze,Hze,Uze,Lm,ioe,Jze,Yze,Ck,Kze,Zze,eQe,xm,doe,oQe,rQe,wk,tQe,aQe,nQe,$m,coe,sQe,lQe,Ak,iQe,dQe,cQe,km,foe,fQe,mQe,yk,gQe,hQe,pQe,Sm,moe,uQe,_Qe,Lk,bQe,vQe,FQe,Rm,goe,TQe,MQe,xk,EQe,CQe,wQe,Bm,hoe,AQe,yQe,$k,LQe,xQe,$Qe,Pm,poe,kQe,SQe,kk,RQe,BQe,PQe,Im,uoe,IQe,qQe,Sk,NQe,jQe,DQe,qm,_oe,GQe,OQe,Rk,VQe,XQe,zQe,Nm,boe,QQe,WQe,Bk,HQe,UQe,JQe,jm,voe,YQe,KQe,Pk,ZQe,eWe,oWe,Dm,Foe,rWe,tWe,Ik,aWe,nWe,sWe,Gm,Toe,lWe,iWe,qk,dWe,cWe,fWe,Om,Moe,mWe,gWe,Nk,hWe,pWe,uWe,Vm,Eoe,_We,bWe,jk,vWe,FWe,TWe,Xm,Coe,MWe,EWe,Dk,CWe,wWe,AWe,zm,woe,yWe,LWe,Gk,xWe,$We,kWe,Qm,Aoe,SWe,RWe,Ok,BWe,PWe,IWe,Wm,yoe,qWe,NWe,Vk,jWe,DWe,GWe,Hm,Loe,OWe,VWe,Xk,XWe,zWe,QWe,Um,xoe,WWe,HWe,zk,UWe,JWe,YWe,Jm,$oe,KWe,ZWe,Qk,eHe,oHe,rHe,Ym,koe,tHe,aHe,Wk,nHe,sHe,lHe,Km,Soe,iHe,dHe,Hk,cHe,fHe,mHe,Zm,Roe,gHe,hHe,Uk,pHe,uHe,_He,eg,Boe,bHe,vHe,Jk,FHe,THe,MHe,og,Poe,EHe,CHe,Yk,wHe,AHe,yHe,rg,Ioe,LHe,xHe,Kk,$He,kHe,SHe,tg,qoe,RHe,BHe,Zk,PHe,IHe,qHe,ag,Noe,NHe,jHe,eS,DHe,GHe,OHe,ng,joe,VHe,XHe,oS,zHe,QHe,WHe,sg,Doe,HHe,UHe,rS,JHe,YHe,KHe,lg,Goe,ZHe,eUe,tS,oUe,rUe,tUe,ig,Ooe,aUe,nUe,aS,sUe,lUe,iUe,dg,Voe,dUe,cUe,nS,fUe,mUe,gUe,cg,Xoe,hUe,pUe,sS,uUe,_Ue,bUe,fg,zoe,vUe,FUe,lS,TUe,MUe,EUe,mg,Qoe,CUe,wUe,iS,AUe,yUe,LUe,gg,Woe,xUe,$Ue,dS,kUe,SUe,RUe,hg,Hoe,BUe,PUe,cS,IUe,qUe,NUe,pg,jUe,ug,KA,DUe,Uoe,GUe,APe,_i,_g,Joe,ZA,OUe,Yoe,VUe,yPe,wo,ey,XUe,oy,zUe,fS,QUe,WUe,HUe,ry,UUe,Koe,JUe,YUe,KUe,Cr,ty,ZUe,Zoe,eJe,oJe,Ca,rJe,ere,tJe,aJe,ore,nJe,sJe,rre,lJe,iJe,dJe,k,kn,tre,cJe,fJe,mS,mJe,gJe,gS,hJe,pJe,uJe,Sn,are,_Je,bJe,hS,vJe,FJe,pS,TJe,MJe,EJe,Rn,nre,CJe,wJe,uS,AJe,yJe,_S,LJe,xJe,$Je,bg,sre,kJe,SJe,bS,RJe,BJe,PJe,Bn,lre,IJe,qJe,vS,NJe,jJe,FS,DJe,GJe,OJe,vg,ire,VJe,XJe,TS,zJe,QJe,WJe,Fg,dre,HJe,UJe,MS,JJe,YJe,KJe,Tg,cre,ZJe,eYe,ES,oYe,rYe,tYe,Pn,fre,aYe,nYe,CS,sYe,lYe,wS,iYe,dYe,cYe,In,mre,fYe,mYe,AS,gYe,hYe,yS,pYe,uYe,_Ye,qn,gre,bYe,vYe,LS,FYe,TYe,xS,MYe,EYe,CYe,Mg,hre,wYe,AYe,$S,yYe,LYe,xYe,Eg,pre,$Ye,kYe,kS,SYe,RYe,BYe,Nn,ure,PYe,IYe,SS,qYe,NYe,RS,jYe,DYe,GYe,Cg,_re,OYe,VYe,BS,XYe,zYe,QYe,jn,bre,WYe,HYe,PS,UYe,JYe,IS,YYe,KYe,ZYe,Dn,vre,eKe,oKe,qS,rKe,tKe,NS,aKe,nKe,sKe,Gn,Fre,lKe,iKe,jS,dKe,cKe,DS,fKe,mKe,gKe,wg,Tre,hKe,pKe,GS,uKe,_Ke,bKe,On,Mre,vKe,FKe,OS,TKe,MKe,VS,EKe,CKe,wKe,Vn,Ere,AKe,yKe,XS,LKe,xKe,zS,$Ke,kKe,SKe,Xn,Cre,RKe,BKe,QS,PKe,IKe,WS,qKe,NKe,jKe,zn,wre,DKe,GKe,HS,OKe,VKe,US,XKe,zKe,QKe,Qn,Are,WKe,HKe,JS,UKe,JKe,YS,YKe,KKe,ZKe,Wn,yre,eZe,oZe,KS,rZe,tZe,ZS,aZe,nZe,sZe,Ag,Lre,lZe,iZe,eR,dZe,cZe,fZe,Hn,xre,mZe,gZe,oR,hZe,pZe,rR,uZe,_Ze,bZe,yg,$re,vZe,FZe,tR,TZe,MZe,EZe,Un,kre,CZe,wZe,aR,AZe,yZe,nR,LZe,xZe,$Ze,Jn,Sre,kZe,SZe,sR,RZe,BZe,lR,PZe,IZe,qZe,Yn,Rre,NZe,jZe,iR,DZe,GZe,dR,OZe,VZe,XZe,Kn,Bre,zZe,QZe,cR,WZe,HZe,fR,UZe,JZe,YZe,Zn,Pre,KZe,ZZe,mR,eeo,oeo,gR,reo,teo,aeo,Lg,Ire,neo,seo,hR,leo,ieo,deo,es,qre,ceo,feo,pR,meo,geo,uR,heo,peo,ueo,os,Nre,_eo,beo,_R,veo,Feo,bR,Teo,Meo,Eeo,rs,jre,Ceo,weo,vR,Aeo,yeo,FR,Leo,xeo,$eo,ts,Dre,keo,Seo,TR,Reo,Beo,MR,Peo,Ieo,qeo,as,Gre,Neo,jeo,ER,Deo,Geo,CR,Oeo,Veo,Xeo,ns,Ore,zeo,Qeo,wR,Weo,Heo,AR,Ueo,Jeo,Yeo,xg,Vre,Keo,Zeo,yR,eoo,ooo,roo,ss,Xre,too,aoo,LR,noo,soo,xR,loo,ioo,doo,$g,zre,coo,foo,$R,moo,goo,hoo,kg,Qre,poo,uoo,kR,_oo,boo,voo,ls,Wre,Foo,Too,SR,Moo,Eoo,RR,Coo,woo,Aoo,is,Hre,yoo,Loo,BR,xoo,$oo,PR,koo,Soo,Roo,ds,Ure,Boo,Poo,IR,Ioo,qoo,qR,Noo,joo,Doo,Sg,Jre,Goo,Ooo,NR,Voo,Xoo,zoo,cs,Yre,Qoo,Woo,jR,Hoo,Uoo,DR,Joo,Yoo,Koo,fs,Kre,Zoo,ero,GR,oro,rro,OR,tro,aro,nro,ms,Zre,sro,lro,VR,iro,dro,XR,cro,fro,mro,gs,ete,gro,hro,zR,pro,uro,QR,_ro,bro,vro,hs,ote,Fro,Tro,WR,Mro,Ero,HR,Cro,wro,Aro,ps,rte,yro,Lro,UR,xro,$ro,JR,kro,Sro,Rro,Rg,tte,Bro,Pro,YR,Iro,qro,Nro,Bg,ate,jro,Dro,KR,Gro,Oro,Vro,Pg,nte,Xro,zro,ZR,Qro,Wro,Hro,Ig,ste,Uro,Jro,eB,Yro,Kro,Zro,us,lte,eto,oto,oB,rto,tto,rB,ato,nto,sto,qg,ite,lto,ito,tB,dto,cto,fto,_s,dte,mto,gto,aB,hto,pto,nB,uto,_to,bto,bs,cte,vto,Fto,sB,Tto,Mto,lB,Eto,Cto,wto,vs,fte,Ato,yto,iB,Lto,xto,dB,$to,kto,Sto,Fs,mte,Rto,Bto,cB,Pto,Ito,fB,qto,Nto,jto,Ts,gte,Dto,Gto,mB,Oto,Vto,gB,Xto,zto,Qto,Ms,hte,Wto,Hto,hB,Uto,Jto,pB,Yto,Kto,Zto,Ng,pte,eao,oao,uB,rao,tao,aao,jg,ute,nao,sao,_B,lao,iao,dao,Es,_te,cao,fao,bB,mao,gao,vB,hao,pao,uao,Cs,bte,_ao,bao,FB,vao,Fao,TB,Tao,Mao,Eao,ws,vte,Cao,wao,MB,Aao,yao,EB,Lao,xao,$ao,Dg,Fte,kao,Sao,CB,Rao,Bao,Pao,Gg,Tte,Iao,qao,wB,Nao,jao,Dao,Og,Mte,Gao,Oao,AB,Vao,Xao,zao,As,Ete,Qao,Wao,yB,Hao,Uao,LB,Jao,Yao,Kao,Vg,Cte,Zao,eno,xB,ono,rno,tno,Xg,wte,ano,nno,$B,sno,lno,ino,ys,Ate,dno,cno,kB,fno,mno,SB,gno,hno,pno,zg,yte,uno,_no,RB,bno,vno,Fno,Qg,Lte,Tno,Mno,BB,Eno,Cno,wno,Ls,xte,Ano,yno,PB,Lno,xno,IB,$no,kno,Sno,xs,$te,Rno,Bno,qB,Pno,Ino,NB,qno,Nno,jno,$s,kte,Dno,Gno,jB,Ono,Vno,DB,Xno,zno,Qno,ks,Ste,Wno,Hno,GB,Uno,Jno,OB,Yno,Kno,Zno,Wg,eso,Hg,ay,oso,Rte,rso,LPe,bi,Ug,Bte,ny,tso,Pte,aso,xPe,Ao,sy,nso,ly,sso,VB,lso,iso,dso,iy,cso,Ite,fso,mso,gso,We,dy,hso,qte,pso,uso,wa,_so,Nte,bso,vso,jte,Fso,Tso,Dte,Mso,Eso,Cso,oe,Jg,Gte,wso,Aso,XB,yso,Lso,xso,Yg,Ote,$so,kso,zB,Sso,Rso,Bso,Kg,Vte,Pso,Iso,QB,qso,Nso,jso,Zg,Xte,Dso,Gso,WB,Oso,Vso,Xso,eh,zte,zso,Qso,HB,Wso,Hso,Uso,oh,Qte,Jso,Yso,UB,Kso,Zso,elo,rh,Wte,olo,rlo,JB,tlo,alo,nlo,th,Hte,slo,llo,YB,ilo,dlo,clo,ah,Ute,flo,mlo,KB,glo,hlo,plo,nh,Jte,ulo,_lo,ZB,blo,vlo,Flo,sh,Yte,Tlo,Mlo,eP,Elo,Clo,wlo,lh,Kte,Alo,ylo,oP,Llo,xlo,$lo,ih,Zte,klo,Slo,rP,Rlo,Blo,Plo,dh,eae,Ilo,qlo,tP,Nlo,jlo,Dlo,ch,oae,Glo,Olo,aP,Vlo,Xlo,zlo,fh,rae,Qlo,Wlo,nP,Hlo,Ulo,Jlo,mh,tae,Ylo,Klo,sP,Zlo,eio,oio,gh,aae,rio,tio,lP,aio,nio,sio,hh,nae,lio,iio,iP,dio,cio,fio,ph,sae,mio,gio,dP,hio,pio,uio,uh,lae,_io,bio,cP,vio,Fio,Tio,_h,iae,Mio,Eio,fP,Cio,wio,Aio,bh,dae,yio,Lio,mP,xio,$io,kio,vh,cae,Sio,Rio,gP,Bio,Pio,Iio,Fh,fae,qio,Nio,hP,jio,Dio,Gio,Th,Oio,Mh,Vio,Eh,cy,Xio,mae,zio,$Pe,vi,Ch,gae,fy,Qio,hae,Wio,kPe,yo,my,Hio,gy,Uio,pP,Jio,Yio,Kio,hy,Zio,pae,edo,odo,rdo,He,py,tdo,uae,ado,ndo,Fi,sdo,_ae,ldo,ido,bae,ddo,cdo,fdo,be,wh,vae,mdo,gdo,uP,hdo,pdo,udo,Ah,Fae,_do,bdo,_P,vdo,Fdo,Tdo,yh,Tae,Mdo,Edo,bP,Cdo,wdo,Ado,Lh,Mae,ydo,Ldo,vP,xdo,$do,kdo,xh,Eae,Sdo,Rdo,FP,Bdo,Pdo,Ido,$h,Cae,qdo,Ndo,TP,jdo,Ddo,Gdo,kh,wae,Odo,Vdo,MP,Xdo,zdo,Qdo,Sh,Aae,Wdo,Hdo,EP,Udo,Jdo,Ydo,Rh,yae,Kdo,Zdo,CP,eco,oco,rco,Bh,Lae,tco,aco,wP,nco,sco,lco,Ph,xae,ico,dco,AP,cco,fco,mco,Ih,$ae,gco,hco,yP,pco,uco,_co,qh,kae,bco,vco,LP,Fco,Tco,Mco,Nh,Sae,Eco,Cco,xP,wco,Aco,yco,jh,Lco,Dh,xco,Gh,uy,$co,Rae,kco,SPe,Ti,Oh,Bae,_y,Sco,Pae,Rco,RPe,Lo,by,Bco,Mi,Pco,$P,Ico,qco,kP,Nco,jco,Dco,vy,Gco,Iae,Oco,Vco,Xco,ot,Fy,zco,qae,Qco,Wco,Ei,Hco,Nae,Uco,Jco,SP,Yco,Kco,Zco,Vh,efo,Ue,Ty,ofo,jae,rfo,tfo,Aa,afo,Dae,nfo,sfo,Gae,lfo,ifo,Oae,dfo,cfo,ffo,x,Xh,Vae,mfo,gfo,RP,hfo,pfo,ufo,zh,Xae,_fo,bfo,BP,vfo,Ffo,Tfo,Qh,zae,Mfo,Efo,PP,Cfo,wfo,Afo,Wh,Qae,yfo,Lfo,IP,xfo,$fo,kfo,Hh,Wae,Sfo,Rfo,qP,Bfo,Pfo,Ifo,Uh,Hae,qfo,Nfo,NP,jfo,Dfo,Gfo,Jh,Uae,Ofo,Vfo,jP,Xfo,zfo,Qfo,Yh,Jae,Wfo,Hfo,DP,Ufo,Jfo,Yfo,Kh,Yae,Kfo,Zfo,GP,emo,omo,rmo,Zh,Kae,tmo,amo,OP,nmo,smo,lmo,ep,Zae,imo,dmo,VP,cmo,fmo,mmo,op,ene,gmo,hmo,XP,pmo,umo,_mo,rp,one,bmo,vmo,zP,Fmo,Tmo,Mmo,tp,rne,Emo,Cmo,QP,wmo,Amo,ymo,ap,tne,Lmo,xmo,WP,$mo,kmo,Smo,np,ane,Rmo,Bmo,HP,Pmo,Imo,qmo,sp,nne,Nmo,jmo,UP,Dmo,Gmo,Omo,lp,sne,Vmo,Xmo,JP,zmo,Qmo,Wmo,ip,lne,Hmo,Umo,YP,Jmo,Ymo,Kmo,dp,ine,Zmo,ego,KP,ogo,rgo,tgo,cp,dne,ago,ngo,ZP,sgo,lgo,igo,fp,cne,dgo,cgo,eI,fgo,mgo,ggo,mp,fne,hgo,pgo,oI,ugo,_go,bgo,gp,mne,vgo,Fgo,rI,Tgo,Mgo,Ego,hp,gne,Cgo,wgo,tI,Ago,ygo,Lgo,pp,hne,xgo,$go,aI,kgo,Sgo,Rgo,up,pne,Bgo,Pgo,nI,Igo,qgo,Ngo,_p,une,jgo,Dgo,sI,Ggo,Ogo,Vgo,bp,_ne,Xgo,zgo,lI,Qgo,Wgo,Hgo,vp,bne,Ugo,Jgo,iI,Ygo,Kgo,Zgo,Ss,vne,eho,oho,dI,rho,tho,cI,aho,nho,sho,Fp,Fne,lho,iho,fI,dho,cho,fho,Tp,Tne,mho,gho,mI,hho,pho,uho,Mp,Mne,_ho,bho,gI,vho,Fho,Tho,Ep,Ene,Mho,Eho,hI,Cho,who,Aho,Cp,Cne,yho,Lho,pI,xho,$ho,kho,wp,wne,Sho,Rho,uI,Bho,Pho,Iho,Ap,Ane,qho,Nho,_I,jho,Dho,Gho,yp,yne,Oho,Vho,bI,Xho,zho,Qho,Lp,Lne,Who,Hho,vI,Uho,Jho,Yho,xp,xne,Kho,Zho,FI,epo,opo,rpo,$p,$ne,tpo,apo,TI,npo,spo,lpo,kp,kne,ipo,dpo,MI,cpo,fpo,mpo,Sp,Sne,gpo,hpo,EI,ppo,upo,_po,Rp,Rne,bpo,vpo,CI,Fpo,Tpo,Mpo,Bp,Bne,Epo,Cpo,wI,wpo,Apo,ypo,Pp,Pne,Lpo,xpo,AI,$po,kpo,Spo,Ip,Ine,Rpo,Bpo,yI,Ppo,Ipo,qpo,qp,qne,Npo,jpo,LI,Dpo,Gpo,Opo,Np,Nne,Vpo,Xpo,xI,zpo,Qpo,Wpo,jp,jne,Hpo,Upo,$I,Jpo,Ypo,Kpo,Dp,Dne,Zpo,euo,kI,ouo,ruo,tuo,Gp,Gne,auo,nuo,SI,suo,luo,iuo,Op,One,duo,cuo,RI,fuo,muo,guo,Vp,Vne,huo,puo,BI,uuo,_uo,buo,Xp,Xne,vuo,Fuo,PI,Tuo,Muo,Euo,zp,zne,Cuo,wuo,II,Auo,yuo,Luo,Qp,Qne,xuo,$uo,qI,kuo,Suo,Ruo,Wp,Wne,Buo,Puo,NI,Iuo,quo,Nuo,Hp,Hne,juo,Duo,jI,Guo,Ouo,Vuo,Up,Une,Xuo,zuo,DI,Quo,Wuo,Huo,Jp,Jne,Uuo,Juo,GI,Yuo,Kuo,Zuo,Yp,Yne,e_o,o_o,OI,r_o,t_o,a_o,Kp,Kne,n_o,s_o,VI,l_o,i_o,d_o,Zp,Zne,c_o,f_o,XI,m_o,g_o,h_o,eu,ese,p_o,u_o,zI,__o,b_o,v_o,ou,ose,F_o,T_o,QI,M_o,E_o,C_o,ru,rse,w_o,A_o,WI,y_o,L_o,x_o,tu,tse,$_o,k_o,HI,S_o,R_o,B_o,au,ase,P_o,I_o,UI,q_o,N_o,j_o,nu,nse,D_o,G_o,JI,O_o,V_o,X_o,su,sse,z_o,Q_o,YI,W_o,H_o,U_o,lu,lse,J_o,Y_o,KI,K_o,Z_o,e2o,iu,ise,o2o,r2o,ZI,t2o,a2o,n2o,du,dse,s2o,l2o,eq,i2o,d2o,c2o,cu,cse,f2o,m2o,oq,g2o,h2o,p2o,fu,fse,u2o,_2o,rq,b2o,v2o,F2o,mu,mse,T2o,M2o,tq,E2o,C2o,w2o,gu,gse,A2o,y2o,aq,L2o,x2o,$2o,hu,hse,k2o,S2o,nq,R2o,B2o,P2o,pu,pse,I2o,q2o,sq,N2o,j2o,D2o,uu,use,G2o,O2o,lq,V2o,X2o,z2o,_u,_se,Q2o,W2o,iq,H2o,U2o,J2o,bu,bse,Y2o,K2o,dq,Z2o,e1o,o1o,vu,vse,r1o,t1o,cq,a1o,n1o,s1o,Fu,Fse,l1o,i1o,fq,d1o,c1o,f1o,Tu,Tse,m1o,g1o,mq,h1o,p1o,u1o,Mu,Mse,_1o,b1o,gq,v1o,F1o,T1o,Eu,Ese,M1o,E1o,hq,C1o,w1o,A1o,Cu,Cse,y1o,L1o,pq,x1o,$1o,k1o,wu,wse,S1o,R1o,uq,B1o,P1o,I1o,Au,Ase,q1o,N1o,_q,j1o,D1o,G1o,yu,yse,O1o,V1o,bq,X1o,z1o,Q1o,Lu,Lse,W1o,H1o,vq,U1o,J1o,Y1o,xu,xse,K1o,Z1o,Fq,ebo,obo,rbo,$u,$se,tbo,abo,Tq,nbo,sbo,lbo,ku,ibo,kse,dbo,cbo,Sse,fbo,mbo,Su,BPe,Ci,Ru,Rse,My,gbo,Bse,hbo,PPe,xo,Ey,pbo,wi,ubo,Mq,_bo,bbo,Eq,vbo,Fbo,Tbo,Cy,Mbo,Pse,Ebo,Cbo,wbo,rt,wy,Abo,Ise,ybo,Lbo,Ai,xbo,qse,$bo,kbo,Cq,Sbo,Rbo,Bbo,Bu,Pbo,Je,Ay,Ibo,Nse,qbo,Nbo,ya,jbo,jse,Dbo,Gbo,Dse,Obo,Vbo,Gse,Xbo,zbo,Qbo,G,Pu,Ose,Wbo,Hbo,wq,Ubo,Jbo,Ybo,Iu,Vse,Kbo,Zbo,Aq,e4o,o4o,r4o,qu,Xse,t4o,a4o,yq,n4o,s4o,l4o,Nu,zse,i4o,d4o,Lq,c4o,f4o,m4o,ju,Qse,g4o,h4o,xq,p4o,u4o,_4o,Du,Wse,b4o,v4o,$q,F4o,T4o,M4o,Gu,Hse,E4o,C4o,kq,w4o,A4o,y4o,Ou,Use,L4o,x4o,Sq,$4o,k4o,S4o,Vu,Jse,R4o,B4o,Rq,P4o,I4o,q4o,Xu,Yse,N4o,j4o,Bq,D4o,G4o,O4o,zu,Kse,V4o,X4o,Pq,z4o,Q4o,W4o,Qu,Zse,H4o,U4o,Iq,J4o,Y4o,K4o,Wu,ele,Z4o,evo,qq,ovo,rvo,tvo,Hu,ole,avo,nvo,Nq,svo,lvo,ivo,Uu,rle,dvo,cvo,jq,fvo,mvo,gvo,Ju,tle,hvo,pvo,Dq,uvo,_vo,bvo,Yu,ale,vvo,Fvo,Gq,Tvo,Mvo,Evo,Ku,nle,Cvo,wvo,Oq,Avo,yvo,Lvo,Zu,sle,xvo,$vo,Vq,kvo,Svo,Rvo,e_,lle,Bvo,Pvo,Xq,Ivo,qvo,Nvo,o_,ile,jvo,Dvo,zq,Gvo,Ovo,Vvo,r_,dle,Xvo,zvo,Qq,Qvo,Wvo,Hvo,t_,cle,Uvo,Jvo,Wq,Yvo,Kvo,Zvo,a_,fle,eFo,oFo,Hq,rFo,tFo,aFo,n_,mle,nFo,sFo,Uq,lFo,iFo,dFo,s_,gle,cFo,fFo,Jq,mFo,gFo,hFo,l_,hle,pFo,uFo,Yq,_Fo,bFo,vFo,i_,ple,FFo,TFo,Kq,MFo,EFo,CFo,d_,ule,wFo,AFo,Zq,yFo,LFo,xFo,c_,_le,$Fo,kFo,eN,SFo,RFo,BFo,f_,ble,PFo,IFo,oN,qFo,NFo,jFo,m_,vle,DFo,GFo,rN,OFo,VFo,XFo,g_,Fle,zFo,QFo,tN,WFo,HFo,UFo,h_,Tle,JFo,YFo,aN,KFo,ZFo,e0o,p_,Mle,o0o,r0o,nN,t0o,a0o,n0o,u_,Ele,s0o,l0o,sN,i0o,d0o,c0o,__,Cle,f0o,m0o,lN,g0o,h0o,p0o,b_,wle,u0o,_0o,iN,b0o,v0o,F0o,v_,Ale,T0o,M0o,dN,E0o,C0o,w0o,F_,A0o,yle,y0o,L0o,Lle,x0o,$0o,T_,IPe,yi,M_,xle,yy,k0o,$le,S0o,qPe,$o,Ly,R0o,Li,B0o,cN,P0o,I0o,fN,q0o,N0o,j0o,xy,D0o,kle,G0o,O0o,V0o,tt,$y,X0o,Sle,z0o,Q0o,xi,W0o,Rle,H0o,U0o,mN,J0o,Y0o,K0o,E_,Z0o,Ye,ky,e6o,Ble,o6o,r6o,La,t6o,Ple,a6o,n6o,Ile,s6o,l6o,qle,i6o,d6o,c6o,z,C_,Nle,f6o,m6o,gN,g6o,h6o,p6o,w_,jle,u6o,_6o,hN,b6o,v6o,F6o,A_,Dle,T6o,M6o,pN,E6o,C6o,w6o,y_,Gle,A6o,y6o,uN,L6o,x6o,$6o,L_,Ole,k6o,S6o,_N,R6o,B6o,P6o,x_,Vle,I6o,q6o,bN,N6o,j6o,D6o,$_,Xle,G6o,O6o,vN,V6o,X6o,z6o,k_,zle,Q6o,W6o,FN,H6o,U6o,J6o,S_,Qle,Y6o,K6o,TN,Z6o,eTo,oTo,R_,Wle,rTo,tTo,MN,aTo,nTo,sTo,B_,Hle,lTo,iTo,EN,dTo,cTo,fTo,P_,Ule,mTo,gTo,CN,hTo,pTo,uTo,I_,Jle,_To,bTo,wN,vTo,FTo,TTo,q_,Yle,MTo,ETo,AN,CTo,wTo,ATo,N_,Kle,yTo,LTo,yN,xTo,$To,kTo,j_,Zle,STo,RTo,LN,BTo,PTo,ITo,D_,eie,qTo,NTo,xN,jTo,DTo,GTo,G_,oie,OTo,VTo,$N,XTo,zTo,QTo,O_,rie,WTo,HTo,kN,UTo,JTo,YTo,V_,tie,KTo,ZTo,SN,eMo,oMo,rMo,X_,aie,tMo,aMo,RN,nMo,sMo,lMo,z_,nie,iMo,dMo,BN,cMo,fMo,mMo,Q_,sie,gMo,hMo,PN,pMo,uMo,_Mo,W_,lie,bMo,vMo,IN,FMo,TMo,MMo,H_,iie,EMo,CMo,qN,wMo,AMo,yMo,U_,die,LMo,xMo,NN,$Mo,kMo,SMo,J_,cie,RMo,BMo,jN,PMo,IMo,qMo,Y_,fie,NMo,jMo,DN,DMo,GMo,OMo,K_,mie,VMo,XMo,GN,zMo,QMo,WMo,Z_,gie,HMo,UMo,ON,JMo,YMo,KMo,e2,hie,ZMo,eEo,VN,oEo,rEo,tEo,o2,pie,aEo,nEo,XN,sEo,lEo,iEo,r2,uie,dEo,cEo,zN,fEo,mEo,gEo,t2,_ie,hEo,pEo,QN,uEo,_Eo,bEo,a2,bie,vEo,FEo,WN,TEo,MEo,EEo,n2,CEo,vie,wEo,AEo,Fie,yEo,LEo,s2,NPe,$i,l2,Tie,Sy,xEo,Mie,$Eo,jPe,ko,Ry,kEo,ki,SEo,HN,REo,BEo,UN,PEo,IEo,qEo,By,NEo,Eie,jEo,DEo,GEo,at,Py,OEo,Cie,VEo,XEo,Si,zEo,wie,QEo,WEo,JN,HEo,UEo,JEo,i2,YEo,Ke,Iy,KEo,Aie,ZEo,eCo,xa,oCo,yie,rCo,tCo,Lie,aCo,nCo,xie,sCo,lCo,iCo,Q,d2,$ie,dCo,cCo,YN,fCo,mCo,gCo,c2,kie,hCo,pCo,KN,uCo,_Co,bCo,f2,Sie,vCo,FCo,ZN,TCo,MCo,ECo,m2,Rie,CCo,wCo,ej,ACo,yCo,LCo,g2,Bie,xCo,$Co,oj,kCo,SCo,RCo,h2,Pie,BCo,PCo,rj,ICo,qCo,NCo,p2,Iie,jCo,DCo,tj,GCo,OCo,VCo,u2,qie,XCo,zCo,aj,QCo,WCo,HCo,_2,Nie,UCo,JCo,nj,YCo,KCo,ZCo,b2,jie,e5o,o5o,sj,r5o,t5o,a5o,v2,Die,n5o,s5o,lj,l5o,i5o,d5o,F2,Gie,c5o,f5o,ij,m5o,g5o,h5o,T2,Oie,p5o,u5o,dj,_5o,b5o,v5o,M2,Vie,F5o,T5o,cj,M5o,E5o,C5o,E2,Xie,w5o,A5o,fj,y5o,L5o,x5o,C2,zie,$5o,k5o,mj,S5o,R5o,B5o,w2,Qie,P5o,I5o,gj,q5o,N5o,j5o,A2,Wie,D5o,G5o,hj,O5o,V5o,X5o,y2,Hie,z5o,Q5o,pj,W5o,H5o,U5o,L2,Uie,J5o,Y5o,uj,K5o,Z5o,e3o,x2,Jie,o3o,r3o,_j,t3o,a3o,n3o,$2,Yie,s3o,l3o,bj,i3o,d3o,c3o,k2,Kie,f3o,m3o,vj,g3o,h3o,p3o,S2,Zie,u3o,_3o,Fj,b3o,v3o,F3o,R2,ede,T3o,M3o,Tj,E3o,C3o,w3o,B2,ode,A3o,y3o,Mj,L3o,x3o,$3o,P2,rde,k3o,S3o,Ej,R3o,B3o,P3o,I2,tde,I3o,q3o,Cj,N3o,j3o,D3o,q2,ade,G3o,O3o,wj,V3o,X3o,z3o,N2,nde,Q3o,W3o,Aj,H3o,U3o,J3o,j2,sde,Y3o,K3o,lde,Z3o,ewo,owo,D2,ide,rwo,two,yj,awo,nwo,swo,G2,dde,lwo,iwo,Lj,dwo,cwo,fwo,O2,cde,mwo,gwo,xj,hwo,pwo,uwo,V2,fde,_wo,bwo,$j,vwo,Fwo,Two,X2,Mwo,mde,Ewo,Cwo,gde,wwo,Awo,z2,DPe,Ri,Q2,hde,qy,ywo,pde,Lwo,GPe,So,Ny,xwo,Bi,$wo,kj,kwo,Swo,Sj,Rwo,Bwo,Pwo,jy,Iwo,ude,qwo,Nwo,jwo,nt,Dy,Dwo,_de,Gwo,Owo,Pi,Vwo,bde,Xwo,zwo,Rj,Qwo,Wwo,Hwo,W2,Uwo,Ze,Gy,Jwo,vde,Ywo,Kwo,$a,Zwo,Fde,eAo,oAo,Tde,rAo,tAo,Mde,aAo,nAo,sAo,he,H2,Ede,lAo,iAo,Bj,dAo,cAo,fAo,U2,Cde,mAo,gAo,Pj,hAo,pAo,uAo,J2,wde,_Ao,bAo,Ij,vAo,FAo,TAo,Y2,Ade,MAo,EAo,qj,CAo,wAo,AAo,K2,yde,yAo,LAo,Nj,xAo,$Ao,kAo,Z2,Lde,SAo,RAo,jj,BAo,PAo,IAo,e1,xde,qAo,NAo,Dj,jAo,DAo,GAo,o1,$de,OAo,VAo,Gj,XAo,zAo,QAo,r1,kde,WAo,HAo,Oj,UAo,JAo,YAo,t1,Sde,KAo,ZAo,Vj,eyo,oyo,ryo,a1,Rde,tyo,ayo,Xj,nyo,syo,lyo,n1,Bde,iyo,dyo,zj,cyo,fyo,myo,s1,Pde,gyo,hyo,Qj,pyo,uyo,_yo,l1,Ide,byo,vyo,Wj,Fyo,Tyo,Myo,i1,qde,Eyo,Cyo,Hj,wyo,Ayo,yyo,d1,Nde,Lyo,xyo,Uj,$yo,kyo,Syo,c1,jde,Ryo,Byo,Jj,Pyo,Iyo,qyo,f1,Nyo,Dde,jyo,Dyo,Gde,Gyo,Oyo,m1,OPe,Ii,g1,Ode,Oy,Vyo,Vde,Xyo,VPe,Ro,Vy,zyo,qi,Qyo,Yj,Wyo,Hyo,Kj,Uyo,Jyo,Yyo,Xy,Kyo,Xde,Zyo,eLo,oLo,st,zy,rLo,zde,tLo,aLo,Ni,nLo,Qde,sLo,lLo,Zj,iLo,dLo,cLo,h1,fLo,eo,Qy,mLo,Wde,gLo,hLo,ka,pLo,Hde,uLo,_Lo,Ude,bLo,vLo,Jde,FLo,TLo,MLo,q,p1,Yde,ELo,CLo,eD,wLo,ALo,yLo,u1,Kde,LLo,xLo,oD,$Lo,kLo,SLo,_1,Zde,RLo,BLo,rD,PLo,ILo,qLo,b1,ece,NLo,jLo,tD,DLo,GLo,OLo,v1,oce,VLo,XLo,aD,zLo,QLo,WLo,F1,rce,HLo,ULo,nD,JLo,YLo,KLo,T1,tce,ZLo,e8o,sD,o8o,r8o,t8o,M1,ace,a8o,n8o,lD,s8o,l8o,i8o,E1,nce,d8o,c8o,iD,f8o,m8o,g8o,C1,sce,h8o,p8o,dD,u8o,_8o,b8o,w1,lce,v8o,F8o,cD,T8o,M8o,E8o,A1,ice,C8o,w8o,fD,A8o,y8o,L8o,y1,dce,x8o,$8o,mD,k8o,S8o,R8o,L1,cce,B8o,P8o,gD,I8o,q8o,N8o,x1,fce,j8o,D8o,hD,G8o,O8o,V8o,$1,mce,X8o,z8o,pD,Q8o,W8o,H8o,k1,gce,U8o,J8o,uD,Y8o,K8o,Z8o,S1,hce,exo,oxo,_D,rxo,txo,axo,R1,pce,nxo,sxo,bD,lxo,ixo,dxo,B1,uce,cxo,fxo,vD,mxo,gxo,hxo,P1,_ce,pxo,uxo,FD,_xo,bxo,vxo,I1,bce,Fxo,Txo,TD,Mxo,Exo,Cxo,q1,vce,wxo,Axo,MD,yxo,Lxo,xxo,N1,Fce,$xo,kxo,ED,Sxo,Rxo,Bxo,j1,Tce,Pxo,Ixo,CD,qxo,Nxo,jxo,D1,Mce,Dxo,Gxo,wD,Oxo,Vxo,Xxo,G1,Ece,zxo,Qxo,AD,Wxo,Hxo,Uxo,O1,Cce,Jxo,Yxo,yD,Kxo,Zxo,e7o,V1,wce,o7o,r7o,LD,t7o,a7o,n7o,X1,Ace,s7o,l7o,xD,i7o,d7o,c7o,z1,yce,f7o,m7o,$D,g7o,h7o,p7o,Q1,Lce,u7o,_7o,kD,b7o,v7o,F7o,W1,xce,T7o,M7o,SD,E7o,C7o,w7o,H1,$ce,A7o,y7o,RD,L7o,x7o,$7o,U1,kce,k7o,S7o,BD,R7o,B7o,P7o,J1,Sce,I7o,q7o,PD,N7o,j7o,D7o,Y1,Rce,G7o,O7o,ID,V7o,X7o,z7o,K1,Bce,Q7o,W7o,qD,H7o,U7o,J7o,Z1,Pce,Y7o,K7o,ND,Z7o,e9o,o9o,eb,Ice,r9o,t9o,jD,a9o,n9o,s9o,ob,qce,l9o,i9o,DD,d9o,c9o,f9o,rb,Nce,m9o,g9o,GD,h9o,p9o,u9o,tb,jce,_9o,b9o,OD,v9o,F9o,T9o,ab,Dce,M9o,E9o,VD,C9o,w9o,A9o,nb,Gce,y9o,L9o,XD,x9o,$9o,k9o,sb,Oce,S9o,R9o,zD,B9o,P9o,I9o,lb,Vce,q9o,N9o,QD,j9o,D9o,G9o,ib,O9o,Xce,V9o,X9o,zce,z9o,Q9o,db,XPe,ji,cb,Qce,Wy,W9o,Wce,H9o,zPe,Bo,Hy,U9o,Di,J9o,WD,Y9o,K9o,HD,Z9o,e$o,o$o,Uy,r$o,Hce,t$o,a$o,n$o,lt,Jy,s$o,Uce,l$o,i$o,Gi,d$o,Jce,c$o,f$o,UD,m$o,g$o,h$o,fb,p$o,oo,Yy,u$o,Yce,_$o,b$o,Sa,v$o,Kce,F$o,T$o,Zce,M$o,E$o,efe,C$o,w$o,A$o,Y,mb,ofe,y$o,L$o,JD,x$o,$$o,k$o,gb,rfe,S$o,R$o,YD,B$o,P$o,I$o,hb,tfe,q$o,N$o,KD,j$o,D$o,G$o,pb,afe,O$o,V$o,ZD,X$o,z$o,Q$o,ub,nfe,W$o,H$o,eG,U$o,J$o,Y$o,_b,sfe,K$o,Z$o,oG,eko,oko,rko,bb,lfe,tko,ako,rG,nko,sko,lko,vb,ife,iko,dko,tG,cko,fko,mko,Fb,dfe,gko,hko,aG,pko,uko,_ko,Tb,cfe,bko,vko,nG,Fko,Tko,Mko,Mb,ffe,Eko,Cko,sG,wko,Ako,yko,Eb,mfe,Lko,xko,lG,$ko,kko,Sko,Cb,gfe,Rko,Bko,iG,Pko,Iko,qko,wb,hfe,Nko,jko,dG,Dko,Gko,Oko,Ab,pfe,Vko,Xko,cG,zko,Qko,Wko,yb,ufe,Hko,Uko,fG,Jko,Yko,Kko,Lb,_fe,Zko,eSo,mG,oSo,rSo,tSo,xb,bfe,aSo,nSo,gG,sSo,lSo,iSo,$b,vfe,dSo,cSo,hG,fSo,mSo,gSo,kb,Ffe,hSo,pSo,pG,uSo,_So,bSo,Sb,Tfe,vSo,FSo,uG,TSo,MSo,ESo,Rb,Mfe,CSo,wSo,_G,ASo,ySo,LSo,Bb,Efe,xSo,$So,bG,kSo,SSo,RSo,Pb,Cfe,BSo,PSo,vG,ISo,qSo,NSo,Ib,wfe,jSo,DSo,FG,GSo,OSo,VSo,qb,Afe,XSo,zSo,TG,QSo,WSo,HSo,Nb,yfe,USo,JSo,MG,YSo,KSo,ZSo,jb,Lfe,eRo,oRo,EG,rRo,tRo,aRo,Db,nRo,xfe,sRo,lRo,$fe,iRo,dRo,Gb,QPe,Oi,Ob,kfe,Ky,cRo,Sfe,fRo,WPe,Po,Zy,mRo,Vi,gRo,CG,hRo,pRo,wG,uRo,_Ro,bRo,eL,vRo,Rfe,FRo,TRo,MRo,it,oL,ERo,Bfe,CRo,wRo,Xi,ARo,Pfe,yRo,LRo,AG,xRo,$Ro,kRo,Vb,SRo,ro,rL,RRo,Ife,BRo,PRo,Ra,IRo,qfe,qRo,NRo,Nfe,jRo,DRo,jfe,GRo,ORo,VRo,Yr,Xb,Dfe,XRo,zRo,yG,QRo,WRo,HRo,zb,Gfe,URo,JRo,LG,YRo,KRo,ZRo,Qb,Ofe,eBo,oBo,xG,rBo,tBo,aBo,Wb,Vfe,nBo,sBo,$G,lBo,iBo,dBo,Hb,Xfe,cBo,fBo,kG,mBo,gBo,hBo,Ub,pBo,zfe,uBo,_Bo,Qfe,bBo,vBo,Jb,HPe,zi,Yb,Wfe,tL,FBo,Hfe,TBo,UPe,Io,aL,MBo,Qi,EBo,SG,CBo,wBo,RG,ABo,yBo,LBo,nL,xBo,Ufe,$Bo,kBo,SBo,dt,sL,RBo,Jfe,BBo,PBo,Wi,IBo,Yfe,qBo,NBo,BG,jBo,DBo,GBo,Kb,OBo,to,lL,VBo,Kfe,XBo,zBo,Ba,QBo,Zfe,WBo,HBo,eme,UBo,JBo,ome,YBo,KBo,ZBo,U,Zb,rme,ePo,oPo,PG,rPo,tPo,aPo,e4,tme,nPo,sPo,IG,lPo,iPo,dPo,o4,ame,cPo,fPo,qG,mPo,gPo,hPo,r4,nme,pPo,uPo,NG,_Po,bPo,vPo,t4,sme,FPo,TPo,jG,MPo,EPo,CPo,a4,lme,wPo,APo,DG,yPo,LPo,xPo,n4,ime,$Po,kPo,GG,SPo,RPo,BPo,s4,dme,PPo,IPo,OG,qPo,NPo,jPo,l4,cme,DPo,GPo,VG,OPo,VPo,XPo,i4,fme,zPo,QPo,XG,WPo,HPo,UPo,d4,mme,JPo,YPo,zG,KPo,ZPo,eIo,c4,gme,oIo,rIo,QG,tIo,aIo,nIo,f4,hme,sIo,lIo,WG,iIo,dIo,cIo,m4,pme,fIo,mIo,HG,gIo,hIo,pIo,g4,ume,uIo,_Io,UG,bIo,vIo,FIo,h4,_me,TIo,MIo,JG,EIo,CIo,wIo,p4,bme,AIo,yIo,YG,LIo,xIo,$Io,u4,vme,kIo,SIo,KG,RIo,BIo,PIo,_4,Fme,IIo,qIo,ZG,NIo,jIo,DIo,b4,Tme,GIo,OIo,eO,VIo,XIo,zIo,v4,Mme,QIo,WIo,oO,HIo,UIo,JIo,F4,Eme,YIo,KIo,rO,ZIo,eqo,oqo,T4,Cme,rqo,tqo,tO,aqo,nqo,sqo,M4,wme,lqo,iqo,aO,dqo,cqo,fqo,E4,Ame,mqo,gqo,nO,hqo,pqo,uqo,C4,yme,_qo,bqo,sO,vqo,Fqo,Tqo,w4,Lme,Mqo,Eqo,lO,Cqo,wqo,Aqo,A4,xme,yqo,Lqo,iO,xqo,$qo,kqo,y4,$me,Sqo,Rqo,dO,Bqo,Pqo,Iqo,L4,kme,qqo,Nqo,cO,jqo,Dqo,Gqo,x4,Sme,Oqo,Vqo,fO,Xqo,zqo,Qqo,$4,Rme,Wqo,Hqo,mO,Uqo,Jqo,Yqo,k4,Bme,Kqo,Zqo,gO,eNo,oNo,rNo,S4,tNo,Pme,aNo,nNo,Ime,sNo,lNo,R4,JPe,Hi,B4,qme,iL,iNo,Nme,dNo,YPe,qo,dL,cNo,Ui,fNo,hO,mNo,gNo,pO,hNo,pNo,uNo,cL,_No,jme,bNo,vNo,FNo,ct,fL,TNo,Dme,MNo,ENo,Ji,CNo,Gme,wNo,ANo,uO,yNo,LNo,xNo,P4,$No,ao,mL,kNo,Ome,SNo,RNo,Pa,BNo,Vme,PNo,INo,Xme,qNo,NNo,zme,jNo,DNo,GNo,O,I4,Qme,ONo,VNo,_O,XNo,zNo,QNo,q4,Wme,WNo,HNo,bO,UNo,JNo,YNo,N4,Hme,KNo,ZNo,vO,ejo,ojo,rjo,j4,Ume,tjo,ajo,FO,njo,sjo,ljo,D4,Jme,ijo,djo,TO,cjo,fjo,mjo,G4,Yme,gjo,hjo,MO,pjo,ujo,_jo,O4,Kme,bjo,vjo,EO,Fjo,Tjo,Mjo,V4,Zme,Ejo,Cjo,CO,wjo,Ajo,yjo,X4,ege,Ljo,xjo,wO,$jo,kjo,Sjo,z4,oge,Rjo,Bjo,AO,Pjo,Ijo,qjo,Q4,rge,Njo,jjo,yO,Djo,Gjo,Ojo,W4,tge,Vjo,Xjo,LO,zjo,Qjo,Wjo,H4,age,Hjo,Ujo,xO,Jjo,Yjo,Kjo,U4,nge,Zjo,eDo,$O,oDo,rDo,tDo,J4,sge,aDo,nDo,kO,sDo,lDo,iDo,Y4,lge,dDo,cDo,SO,fDo,mDo,gDo,K4,ige,hDo,pDo,RO,uDo,_Do,bDo,Z4,dge,vDo,FDo,BO,TDo,MDo,EDo,ev,cge,CDo,wDo,PO,ADo,yDo,LDo,ov,fge,xDo,$Do,IO,kDo,SDo,RDo,rv,mge,BDo,PDo,qO,IDo,qDo,NDo,tv,gge,jDo,DDo,NO,GDo,ODo,VDo,av,hge,XDo,zDo,jO,QDo,WDo,HDo,nv,pge,UDo,JDo,DO,YDo,KDo,ZDo,sv,uge,eGo,oGo,GO,rGo,tGo,aGo,lv,_ge,nGo,sGo,OO,lGo,iGo,dGo,iv,bge,cGo,fGo,VO,mGo,gGo,hGo,dv,vge,pGo,uGo,XO,_Go,bGo,vGo,cv,Fge,FGo,TGo,zO,MGo,EGo,CGo,fv,Tge,wGo,AGo,QO,yGo,LGo,xGo,mv,Mge,$Go,kGo,WO,SGo,RGo,BGo,gv,Ege,PGo,IGo,HO,qGo,NGo,jGo,hv,Cge,DGo,GGo,UO,OGo,VGo,XGo,pv,wge,zGo,QGo,JO,WGo,HGo,UGo,uv,Age,JGo,YGo,YO,KGo,ZGo,eOo,_v,yge,oOo,rOo,KO,tOo,aOo,nOo,bv,Lge,sOo,lOo,ZO,iOo,dOo,cOo,vv,xge,fOo,mOo,eV,gOo,hOo,pOo,Fv,$ge,uOo,_Oo,oV,bOo,vOo,FOo,Tv,TOo,kge,MOo,EOo,Sge,COo,wOo,Mv,KPe,Yi,Ev,Rge,gL,AOo,Bge,yOo,ZPe,No,hL,LOo,Ki,xOo,rV,$Oo,kOo,tV,SOo,ROo,BOo,pL,POo,Pge,IOo,qOo,NOo,ft,uL,jOo,Ige,DOo,GOo,Zi,OOo,qge,VOo,XOo,aV,zOo,QOo,WOo,Cv,HOo,no,_L,UOo,Nge,JOo,YOo,Ia,KOo,jge,ZOo,eVo,Dge,oVo,rVo,Gge,tVo,aVo,nVo,Oge,wv,Vge,sVo,lVo,nV,iVo,dVo,cVo,Av,fVo,Xge,mVo,gVo,zge,hVo,pVo,yv,eIe,ed,Lv,Qge,bL,uVo,Wge,_Vo,oIe,jo,vL,bVo,od,vVo,sV,FVo,TVo,lV,MVo,EVo,CVo,FL,wVo,Hge,AVo,yVo,LVo,mt,TL,xVo,Uge,$Vo,kVo,rd,SVo,Jge,RVo,BVo,iV,PVo,IVo,qVo,xv,NVo,so,ML,jVo,Yge,DVo,GVo,qa,OVo,Kge,VVo,XVo,Zge,zVo,QVo,ehe,WVo,HVo,UVo,ve,$v,ohe,JVo,YVo,dV,KVo,ZVo,eXo,kv,rhe,oXo,rXo,cV,tXo,aXo,nXo,Sv,the,sXo,lXo,fV,iXo,dXo,cXo,Rs,ahe,fXo,mXo,mV,gXo,hXo,gV,pXo,uXo,_Xo,Rv,nhe,bXo,vXo,hV,FXo,TXo,MXo,gt,she,EXo,CXo,pV,wXo,AXo,uV,yXo,LXo,_V,xXo,$Xo,kXo,Bv,lhe,SXo,RXo,bV,BXo,PXo,IXo,Pv,ihe,qXo,NXo,vV,jXo,DXo,GXo,Iv,dhe,OXo,VXo,FV,XXo,zXo,QXo,qv,che,WXo,HXo,TV,UXo,JXo,YXo,Nv,fhe,KXo,ZXo,MV,ezo,ozo,rzo,jv,mhe,tzo,azo,EV,nzo,szo,lzo,Dv,ghe,izo,dzo,CV,czo,fzo,mzo,Gv,gzo,hhe,hzo,pzo,phe,uzo,_zo,Ov,rIe,td,Vv,uhe,EL,bzo,_he,vzo,tIe,Do,CL,Fzo,ad,Tzo,wV,Mzo,Ezo,AV,Czo,wzo,Azo,wL,yzo,bhe,Lzo,xzo,$zo,ht,AL,kzo,vhe,Szo,Rzo,nd,Bzo,Fhe,Pzo,Izo,yV,qzo,Nzo,jzo,Xv,Dzo,lo,yL,Gzo,The,Ozo,Vzo,Na,Xzo,Mhe,zzo,Qzo,Ehe,Wzo,Hzo,Che,Uzo,Jzo,Yzo,whe,zv,Ahe,Kzo,Zzo,LV,eQo,oQo,rQo,Qv,tQo,yhe,aQo,nQo,Lhe,sQo,lQo,Wv,aIe,sd,Hv,xhe,LL,iQo,$he,dQo,nIe,Go,xL,cQo,ld,fQo,xV,mQo,gQo,$V,hQo,pQo,uQo,$L,_Qo,khe,bQo,vQo,FQo,pt,kL,TQo,She,MQo,EQo,id,CQo,Rhe,wQo,AQo,kV,yQo,LQo,xQo,Uv,$Qo,io,SL,kQo,Bhe,SQo,RQo,ja,BQo,Phe,PQo,IQo,Ihe,qQo,NQo,qhe,jQo,DQo,GQo,je,Jv,Nhe,OQo,VQo,SV,XQo,zQo,QQo,Yv,jhe,WQo,HQo,RV,UQo,JQo,YQo,Kv,Dhe,KQo,ZQo,BV,eWo,oWo,rWo,Zv,Ghe,tWo,aWo,PV,nWo,sWo,lWo,eF,Ohe,iWo,dWo,IV,cWo,fWo,mWo,oF,Vhe,gWo,hWo,qV,pWo,uWo,_Wo,rF,Xhe,bWo,vWo,NV,FWo,TWo,MWo,tF,zhe,EWo,CWo,jV,wWo,AWo,yWo,aF,LWo,Qhe,xWo,$Wo,Whe,kWo,SWo,nF,sIe,dd,sF,Hhe,RL,RWo,Uhe,BWo,lIe,Oo,BL,PWo,cd,IWo,DV,qWo,NWo,GV,jWo,DWo,GWo,PL,OWo,Jhe,VWo,XWo,zWo,ut,IL,QWo,Yhe,WWo,HWo,fd,UWo,Khe,JWo,YWo,OV,KWo,ZWo,eHo,lF,oHo,co,qL,rHo,Zhe,tHo,aHo,Da,nHo,epe,sHo,lHo,ope,iHo,dHo,rpe,cHo,fHo,mHo,Ga,iF,tpe,gHo,hHo,VV,pHo,uHo,_Ho,dF,ape,bHo,vHo,XV,FHo,THo,MHo,cF,npe,EHo,CHo,zV,wHo,AHo,yHo,fF,spe,LHo,xHo,QV,$Ho,kHo,SHo,mF,RHo,lpe,BHo,PHo,ipe,IHo,qHo,gF,iIe,md,hF,dpe,NL,NHo,cpe,jHo,dIe,Vo,jL,DHo,gd,GHo,WV,OHo,VHo,HV,XHo,zHo,QHo,DL,WHo,fpe,HHo,UHo,JHo,_t,GL,YHo,mpe,KHo,ZHo,hd,eUo,gpe,oUo,rUo,UV,tUo,aUo,nUo,pF,sUo,fo,OL,lUo,hpe,iUo,dUo,Oa,cUo,ppe,fUo,mUo,upe,gUo,hUo,_pe,pUo,uUo,_Uo,ke,uF,bpe,bUo,vUo,JV,FUo,TUo,MUo,_F,vpe,EUo,CUo,YV,wUo,AUo,yUo,bF,Fpe,LUo,xUo,KV,$Uo,kUo,SUo,vF,Tpe,RUo,BUo,ZV,PUo,IUo,qUo,FF,Mpe,NUo,jUo,eX,DUo,GUo,OUo,TF,Epe,VUo,XUo,oX,zUo,QUo,WUo,MF,Cpe,HUo,UUo,rX,JUo,YUo,KUo,EF,wpe,ZUo,eJo,tX,oJo,rJo,tJo,CF,Ape,aJo,nJo,aX,sJo,lJo,iJo,wF,dJo,ype,cJo,fJo,Lpe,mJo,gJo,AF,cIe,pd,yF,xpe,VL,hJo,$pe,pJo,fIe,Xo,XL,uJo,ud,_Jo,nX,bJo,vJo,sX,FJo,TJo,MJo,zL,EJo,kpe,CJo,wJo,AJo,bt,QL,yJo,Spe,LJo,xJo,_d,$Jo,Rpe,kJo,SJo,lX,RJo,BJo,PJo,LF,IJo,mo,WL,qJo,Bpe,NJo,jJo,Va,DJo,Ppe,GJo,OJo,Ipe,VJo,XJo,qpe,zJo,QJo,WJo,HL,xF,Npe,HJo,UJo,iX,JJo,YJo,KJo,$F,jpe,ZJo,eYo,dX,oYo,rYo,tYo,kF,aYo,Dpe,nYo,sYo,Gpe,lYo,iYo,SF,mIe,bd,RF,Ope,UL,dYo,Vpe,cYo,gIe,zo,JL,fYo,vd,mYo,cX,gYo,hYo,fX,pYo,uYo,_Yo,YL,bYo,Xpe,vYo,FYo,TYo,vt,KL,MYo,zpe,EYo,CYo,Fd,wYo,Qpe,AYo,yYo,mX,LYo,xYo,$Yo,BF,kYo,go,ZL,SYo,Wpe,RYo,BYo,Xa,PYo,Hpe,IYo,qYo,Upe,NYo,jYo,Jpe,DYo,GYo,OYo,za,PF,Ype,VYo,XYo,gX,zYo,QYo,WYo,IF,Kpe,HYo,UYo,hX,JYo,YYo,KYo,qF,Zpe,ZYo,eKo,pX,oKo,rKo,tKo,NF,eue,aKo,nKo,uX,sKo,lKo,iKo,jF,dKo,oue,cKo,fKo,rue,mKo,gKo,DF,hIe,Td,GF,tue,e8,hKo,aue,pKo,pIe,Qo,o8,uKo,Md,_Ko,_X,bKo,vKo,bX,FKo,TKo,MKo,r8,EKo,nue,CKo,wKo,AKo,Ft,t8,yKo,sue,LKo,xKo,Ed,$Ko,lue,kKo,SKo,vX,RKo,BKo,PKo,OF,IKo,ho,a8,qKo,iue,NKo,jKo,Qa,DKo,due,GKo,OKo,cue,VKo,XKo,fue,zKo,QKo,WKo,Cd,VF,mue,HKo,UKo,FX,JKo,YKo,KKo,XF,gue,ZKo,eZo,TX,oZo,rZo,tZo,zF,hue,aZo,nZo,MX,sZo,lZo,iZo,QF,dZo,pue,cZo,fZo,uue,mZo,gZo,WF,uIe,wd,HF,_ue,n8,hZo,bue,pZo,_Ie,Wo,s8,uZo,Ad,_Zo,EX,bZo,vZo,CX,FZo,TZo,MZo,l8,EZo,vue,CZo,wZo,AZo,Tt,i8,yZo,Fue,LZo,xZo,yd,$Zo,Tue,kZo,SZo,wX,RZo,BZo,PZo,UF,IZo,po,d8,qZo,Mue,NZo,jZo,Wa,DZo,Eue,GZo,OZo,Cue,VZo,XZo,wue,zZo,QZo,WZo,c8,JF,Aue,HZo,UZo,AX,JZo,YZo,KZo,YF,yue,ZZo,eer,yX,oer,rer,ter,KF,aer,Lue,ner,ser,xue,ler,ier,ZF,bIe,Ld,e0,$ue,f8,der,kue,cer,vIe,Ho,m8,fer,xd,mer,LX,ger,her,xX,per,uer,_er,g8,ber,Sue,ver,Fer,Ter,Mt,h8,Mer,Rue,Eer,Cer,$d,wer,Bue,Aer,yer,$X,Ler,xer,$er,o0,ker,uo,p8,Ser,Pue,Rer,Ber,Ha,Per,Iue,Ier,qer,que,Ner,jer,Nue,Der,Ger,Oer,jue,r0,Due,Ver,Xer,kX,zer,Qer,Wer,t0,Her,Gue,Uer,Jer,Oue,Yer,Ker,a0,FIe,kd,n0,Vue,u8,Zer,Xue,eor,TIe,Uo,_8,oor,Sd,ror,SX,tor,aor,RX,nor,sor,lor,b8,ior,zue,dor,cor,mor,Et,v8,gor,Que,hor,por,Rd,uor,Wue,_or,bor,BX,vor,For,Tor,s0,Mor,_o,F8,Eor,Hue,Cor,wor,Ua,Aor,Uue,yor,Lor,Jue,xor,$or,Yue,kor,Sor,Ror,Ja,l0,Kue,Bor,Por,PX,Ior,qor,Nor,i0,Zue,jor,Dor,IX,Gor,Oor,Vor,d0,e_e,Xor,zor,qX,Qor,Wor,Hor,c0,o_e,Uor,Jor,NX,Yor,Kor,Zor,f0,err,r_e,orr,rrr,t_e,trr,arr,m0,MIe,Bd,g0,a_e,T8,nrr,n_e,srr,EIe,Jo,M8,lrr,Pd,irr,jX,drr,crr,DX,frr,mrr,grr,E8,hrr,s_e,prr,urr,_rr,Ct,C8,brr,l_e,vrr,Frr,Id,Trr,i_e,Mrr,Err,GX,Crr,wrr,Arr,h0,yrr,bo,w8,Lrr,d_e,xrr,$rr,Ya,krr,c_e,Srr,Rrr,f_e,Brr,Prr,m_e,Irr,qrr,Nrr,g_e,p0,h_e,jrr,Drr,OX,Grr,Orr,Vrr,u0,Xrr,p_e,zrr,Qrr,u_e,Wrr,Hrr,_0,CIe,qd,b0,__e,A8,Urr,b_e,Jrr,wIe,Yo,y8,Yrr,Nd,Krr,VX,Zrr,etr,XX,otr,rtr,ttr,L8,atr,v_e,ntr,str,ltr,wt,x8,itr,F_e,dtr,ctr,jd,ftr,T_e,mtr,gtr,zX,htr,ptr,utr,v0,_tr,wr,$8,btr,M_e,vtr,Ftr,Ka,Ttr,E_e,Mtr,Etr,C_e,Ctr,wtr,w_e,Atr,ytr,Ltr,j,F0,A_e,xtr,$tr,QX,ktr,Str,Rtr,T0,y_e,Btr,Ptr,WX,Itr,qtr,Ntr,M0,L_e,jtr,Dtr,HX,Gtr,Otr,Vtr,E0,x_e,Xtr,ztr,UX,Qtr,Wtr,Htr,C0,$_e,Utr,Jtr,JX,Ytr,Ktr,Ztr,w0,k_e,ear,oar,YX,rar,tar,aar,A0,S_e,nar,sar,KX,lar,iar,dar,y0,R_e,car,far,ZX,mar,gar,har,L0,B_e,par,uar,ez,_ar,bar,Far,x0,P_e,Tar,Mar,oz,Ear,Car,war,$0,I_e,Aar,yar,rz,Lar,xar,$ar,k0,q_e,kar,Sar,tz,Rar,Bar,Par,S0,N_e,Iar,qar,az,Nar,jar,Dar,R0,j_e,Gar,Oar,nz,Var,Xar,zar,B0,D_e,Qar,War,sz,Har,Uar,Jar,P0,G_e,Yar,Kar,lz,Zar,enr,onr,I0,O_e,rnr,tnr,iz,anr,nnr,snr,Bs,V_e,lnr,inr,dz,dnr,cnr,cz,fnr,mnr,gnr,q0,X_e,hnr,pnr,fz,unr,_nr,bnr,N0,z_e,vnr,Fnr,mz,Tnr,Mnr,Enr,j0,Q_e,Cnr,wnr,gz,Anr,ynr,Lnr,D0,W_e,xnr,$nr,hz,knr,Snr,Rnr,G0,H_e,Bnr,Pnr,pz,Inr,qnr,Nnr,O0,U_e,jnr,Dnr,uz,Gnr,Onr,Vnr,V0,J_e,Xnr,znr,_z,Qnr,Wnr,Hnr,X0,Y_e,Unr,Jnr,bz,Ynr,Knr,Znr,z0,K_e,esr,osr,vz,rsr,tsr,asr,Q0,Z_e,nsr,ssr,Fz,lsr,isr,dsr,W0,e2e,csr,fsr,Tz,msr,gsr,hsr,H0,o2e,psr,usr,Mz,_sr,bsr,vsr,U0,r2e,Fsr,Tsr,Ez,Msr,Esr,Csr,J0,t2e,wsr,Asr,Cz,ysr,Lsr,xsr,Y0,a2e,$sr,ksr,wz,Ssr,Rsr,Bsr,K0,n2e,Psr,Isr,Az,qsr,Nsr,jsr,Z0,s2e,Dsr,Gsr,yz,Osr,Vsr,Xsr,e6,l2e,zsr,Qsr,Lz,Wsr,Hsr,Usr,o6,i2e,Jsr,Ysr,xz,Ksr,Zsr,elr,r6,d2e,olr,rlr,$z,tlr,alr,nlr,t6,c2e,slr,llr,kz,ilr,dlr,clr,a6,f2e,flr,mlr,Sz,glr,hlr,plr,n6,m2e,ulr,_lr,Rz,blr,vlr,Flr,s6,g2e,Tlr,Mlr,Bz,Elr,Clr,wlr,l6,h2e,Alr,ylr,Pz,Llr,xlr,$lr,i6,p2e,klr,Slr,Iz,Rlr,Blr,Plr,d6,u2e,Ilr,qlr,qz,Nlr,jlr,Dlr,c6,AIe,Dd,f6,_2e,k8,Glr,b2e,Olr,yIe,Ko,S8,Vlr,Gd,Xlr,Nz,zlr,Qlr,jz,Wlr,Hlr,Ulr,R8,Jlr,v2e,Ylr,Klr,Zlr,At,B8,eir,F2e,oir,rir,Od,tir,T2e,air,nir,Dz,sir,lir,iir,m6,dir,Ar,P8,cir,M2e,fir,mir,Za,gir,E2e,hir,pir,C2e,uir,_ir,w2e,bir,vir,Fir,se,g6,A2e,Tir,Mir,Gz,Eir,Cir,wir,h6,y2e,Air,yir,Oz,Lir,xir,$ir,p6,L2e,kir,Sir,Vz,Rir,Bir,Pir,u6,x2e,Iir,qir,Xz,Nir,jir,Dir,_6,$2e,Gir,Oir,zz,Vir,Xir,zir,b6,k2e,Qir,Wir,Qz,Hir,Uir,Jir,v6,S2e,Yir,Kir,Wz,Zir,edr,odr,F6,R2e,rdr,tdr,Hz,adr,ndr,sdr,T6,B2e,ldr,idr,Uz,ddr,cdr,fdr,M6,P2e,mdr,gdr,Jz,hdr,pdr,udr,E6,I2e,_dr,bdr,Yz,vdr,Fdr,Tdr,C6,q2e,Mdr,Edr,Kz,Cdr,wdr,Adr,w6,N2e,ydr,Ldr,Zz,xdr,$dr,kdr,A6,j2e,Sdr,Rdr,eQ,Bdr,Pdr,Idr,y6,D2e,qdr,Ndr,oQ,jdr,Ddr,Gdr,L6,G2e,Odr,Vdr,rQ,Xdr,zdr,Qdr,x6,O2e,Wdr,Hdr,tQ,Udr,Jdr,Ydr,$6,V2e,Kdr,Zdr,aQ,ecr,ocr,rcr,k6,X2e,tcr,acr,nQ,ncr,scr,lcr,S6,z2e,icr,dcr,sQ,ccr,fcr,mcr,R6,Q2e,gcr,hcr,lQ,pcr,ucr,_cr,B6,W2e,bcr,vcr,iQ,Fcr,Tcr,Mcr,P6,H2e,Ecr,Ccr,dQ,wcr,Acr,ycr,I6,LIe,Vd,q6,U2e,I8,Lcr,J2e,xcr,xIe,Zo,q8,$cr,Xd,kcr,cQ,Scr,Rcr,fQ,Bcr,Pcr,Icr,N8,qcr,Y2e,Ncr,jcr,Dcr,yt,j8,Gcr,K2e,Ocr,Vcr,zd,Xcr,Z2e,zcr,Qcr,mQ,Wcr,Hcr,Ucr,N6,Jcr,yr,D8,Ycr,e1e,Kcr,Zcr,en,efr,o1e,ofr,rfr,r1e,tfr,afr,t1e,nfr,sfr,lfr,Te,j6,a1e,ifr,dfr,gQ,cfr,ffr,mfr,D6,n1e,gfr,hfr,hQ,pfr,ufr,_fr,G6,s1e,bfr,vfr,pQ,Ffr,Tfr,Mfr,O6,l1e,Efr,Cfr,uQ,wfr,Afr,yfr,V6,i1e,Lfr,xfr,_Q,$fr,kfr,Sfr,X6,d1e,Rfr,Bfr,bQ,Pfr,Ifr,qfr,z6,c1e,Nfr,jfr,vQ,Dfr,Gfr,Ofr,Q6,f1e,Vfr,Xfr,FQ,zfr,Qfr,Wfr,W6,m1e,Hfr,Ufr,TQ,Jfr,Yfr,Kfr,H6,g1e,Zfr,emr,MQ,omr,rmr,tmr,U6,h1e,amr,nmr,EQ,smr,lmr,imr,J6,p1e,dmr,cmr,CQ,fmr,mmr,gmr,Y6,$Ie,Qd,K6,u1e,G8,hmr,_1e,pmr,kIe,er,O8,umr,Wd,_mr,wQ,bmr,vmr,AQ,Fmr,Tmr,Mmr,V8,Emr,b1e,Cmr,wmr,Amr,Lt,X8,ymr,v1e,Lmr,xmr,Hd,$mr,F1e,kmr,Smr,yQ,Rmr,Bmr,Pmr,Z6,Imr,Lr,z8,qmr,T1e,Nmr,jmr,on,Dmr,M1e,Gmr,Omr,E1e,Vmr,Xmr,C1e,zmr,Qmr,Wmr,Ud,eT,w1e,Hmr,Umr,LQ,Jmr,Ymr,Kmr,oT,A1e,Zmr,egr,xQ,ogr,rgr,tgr,rT,y1e,agr,ngr,$Q,sgr,lgr,igr,tT,SIe,Jd,aT,L1e,Q8,dgr,x1e,cgr,RIe,or,W8,fgr,Yd,mgr,kQ,ggr,hgr,SQ,pgr,ugr,_gr,H8,bgr,$1e,vgr,Fgr,Tgr,xt,U8,Mgr,k1e,Egr,Cgr,Kd,wgr,S1e,Agr,ygr,RQ,Lgr,xgr,$gr,nT,kgr,xr,J8,Sgr,R1e,Rgr,Bgr,rn,Pgr,B1e,Igr,qgr,P1e,Ngr,jgr,I1e,Dgr,Ggr,Ogr,ie,sT,q1e,Vgr,Xgr,BQ,zgr,Qgr,Wgr,lT,N1e,Hgr,Ugr,PQ,Jgr,Ygr,Kgr,iT,j1e,Zgr,ehr,IQ,ohr,rhr,thr,dT,D1e,ahr,nhr,qQ,shr,lhr,ihr,cT,G1e,dhr,chr,NQ,fhr,mhr,ghr,fT,O1e,hhr,phr,jQ,uhr,_hr,bhr,mT,V1e,vhr,Fhr,DQ,Thr,Mhr,Ehr,gT,X1e,Chr,whr,GQ,Ahr,yhr,Lhr,hT,z1e,xhr,$hr,OQ,khr,Shr,Rhr,pT,Q1e,Bhr,Phr,VQ,Ihr,qhr,Nhr,uT,W1e,jhr,Dhr,XQ,Ghr,Ohr,Vhr,_T,H1e,Xhr,zhr,zQ,Qhr,Whr,Hhr,bT,U1e,Uhr,Jhr,QQ,Yhr,Khr,Zhr,vT,J1e,epr,opr,WQ,rpr,tpr,apr,FT,Y1e,npr,spr,HQ,lpr,ipr,dpr,TT,K1e,cpr,fpr,UQ,mpr,gpr,hpr,MT,Z1e,ppr,upr,JQ,_pr,bpr,vpr,ET,ebe,Fpr,Tpr,YQ,Mpr,Epr,Cpr,CT,obe,wpr,Apr,KQ,ypr,Lpr,xpr,wT,rbe,$pr,kpr,ZQ,Spr,Rpr,Bpr,AT,BIe,Zd,yT,tbe,Y8,Ppr,abe,Ipr,PIe,rr,K8,qpr,ec,Npr,eW,jpr,Dpr,oW,Gpr,Opr,Vpr,Z8,Xpr,nbe,zpr,Qpr,Wpr,$t,ex,Hpr,sbe,Upr,Jpr,oc,Ypr,lbe,Kpr,Zpr,rW,eur,our,rur,LT,tur,$r,ox,aur,ibe,nur,sur,tn,lur,dbe,iur,dur,cbe,cur,fur,fbe,mur,gur,hur,ye,xT,mbe,pur,uur,tW,_ur,bur,vur,$T,gbe,Fur,Tur,aW,Mur,Eur,Cur,kT,hbe,wur,Aur,nW,yur,Lur,xur,ST,pbe,$ur,kur,sW,Sur,Rur,Bur,RT,ube,Pur,Iur,lW,qur,Nur,jur,BT,_be,Dur,Gur,iW,Our,Vur,Xur,PT,bbe,zur,Qur,dW,Wur,Hur,Uur,IT,vbe,Jur,Yur,cW,Kur,Zur,e_r,qT,Fbe,o_r,r_r,fW,t_r,a_r,n_r,NT,Tbe,s_r,l_r,mW,i_r,d_r,c_r,jT,IIe,rc,DT,Mbe,rx,f_r,Ebe,m_r,qIe,tr,tx,g_r,tc,h_r,gW,p_r,u_r,hW,__r,b_r,v_r,ax,F_r,Cbe,T_r,M_r,E_r,kt,nx,C_r,wbe,w_r,A_r,ac,y_r,Abe,L_r,x_r,pW,$_r,k_r,S_r,GT,R_r,kr,sx,B_r,ybe,P_r,I_r,an,q_r,Lbe,N_r,j_r,xbe,D_r,G_r,$be,O_r,V_r,X_r,Z,OT,kbe,z_r,Q_r,uW,W_r,H_r,U_r,VT,Sbe,J_r,Y_r,_W,K_r,Z_r,e2r,XT,Rbe,o2r,r2r,bW,t2r,a2r,n2r,zT,Bbe,s2r,l2r,vW,i2r,d2r,c2r,QT,Pbe,f2r,m2r,FW,g2r,h2r,p2r,WT,Ibe,u2r,_2r,TW,b2r,v2r,F2r,HT,qbe,T2r,M2r,MW,E2r,C2r,w2r,UT,Nbe,A2r,y2r,EW,L2r,x2r,$2r,JT,jbe,k2r,S2r,CW,R2r,B2r,P2r,YT,Dbe,I2r,q2r,wW,N2r,j2r,D2r,KT,Gbe,G2r,O2r,AW,V2r,X2r,z2r,ZT,Obe,Q2r,W2r,yW,H2r,U2r,J2r,eM,Vbe,Y2r,K2r,LW,Z2r,e1r,o1r,oM,Xbe,r1r,t1r,xW,a1r,n1r,s1r,rM,zbe,l1r,i1r,$W,d1r,c1r,f1r,tM,Qbe,m1r,g1r,kW,h1r,p1r,u1r,aM,Wbe,_1r,b1r,SW,v1r,F1r,T1r,nM,Hbe,M1r,E1r,RW,C1r,w1r,A1r,sM,Ube,y1r,L1r,BW,x1r,$1r,k1r,lM,Jbe,S1r,R1r,PW,B1r,P1r,I1r,iM,Ybe,q1r,N1r,IW,j1r,D1r,G1r,dM,Kbe,O1r,V1r,qW,X1r,z1r,Q1r,cM,Zbe,W1r,H1r,NW,U1r,J1r,Y1r,fM,e4e,K1r,Z1r,jW,ebr,obr,rbr,mM,o4e,tbr,abr,DW,nbr,sbr,lbr,gM,r4e,ibr,dbr,GW,cbr,fbr,mbr,hM,NIe,nc,pM,t4e,lx,gbr,a4e,hbr,jIe,ar,ix,pbr,sc,ubr,OW,_br,bbr,VW,vbr,Fbr,Tbr,dx,Mbr,n4e,Ebr,Cbr,wbr,St,cx,Abr,s4e,ybr,Lbr,lc,xbr,l4e,$br,kbr,XW,Sbr,Rbr,Bbr,uM,Pbr,Sr,fx,Ibr,i4e,qbr,Nbr,nn,jbr,d4e,Dbr,Gbr,c4e,Obr,Vbr,f4e,Xbr,zbr,Qbr,pe,_M,m4e,Wbr,Hbr,zW,Ubr,Jbr,Ybr,bM,g4e,Kbr,Zbr,QW,e4r,o4r,r4r,vM,h4e,t4r,a4r,WW,n4r,s4r,l4r,FM,p4e,i4r,d4r,HW,c4r,f4r,m4r,TM,u4e,g4r,h4r,UW,p4r,u4r,_4r,MM,_4e,b4r,v4r,JW,F4r,T4r,M4r,EM,b4e,E4r,C4r,YW,w4r,A4r,y4r,CM,v4e,L4r,x4r,KW,$4r,k4r,S4r,wM,F4e,R4r,B4r,ZW,P4r,I4r,q4r,AM,T4e,N4r,j4r,eH,D4r,G4r,O4r,yM,M4e,V4r,X4r,oH,z4r,Q4r,W4r,LM,E4e,H4r,U4r,rH,J4r,Y4r,K4r,xM,C4e,Z4r,evr,tH,ovr,rvr,tvr,$M,w4e,avr,nvr,aH,svr,lvr,ivr,kM,A4e,dvr,cvr,nH,fvr,mvr,gvr,SM,y4e,hvr,pvr,sH,uvr,_vr,bvr,RM,L4e,vvr,Fvr,lH,Tvr,Mvr,Evr,BM,DIe,ic,PM,x4e,mx,Cvr,$4e,wvr,GIe,nr,gx,Avr,dc,yvr,iH,Lvr,xvr,dH,$vr,kvr,Svr,hx,Rvr,k4e,Bvr,Pvr,Ivr,Rt,px,qvr,S4e,Nvr,jvr,cc,Dvr,R4e,Gvr,Ovr,cH,Vvr,Xvr,zvr,IM,Qvr,Rr,ux,Wvr,B4e,Hvr,Uvr,sn,Jvr,P4e,Yvr,Kvr,I4e,Zvr,eFr,q4e,oFr,rFr,tFr,_x,qM,N4e,aFr,nFr,fH,sFr,lFr,iFr,NM,j4e,dFr,cFr,mH,fFr,mFr,gFr,jM,OIe,fc,DM,D4e,bx,hFr,G4e,pFr,VIe,sr,vx,uFr,mc,_Fr,gH,bFr,vFr,hH,FFr,TFr,MFr,Fx,EFr,O4e,CFr,wFr,AFr,Bt,Tx,yFr,V4e,LFr,xFr,gc,$Fr,X4e,kFr,SFr,pH,RFr,BFr,PFr,GM,IFr,Br,Mx,qFr,z4e,NFr,jFr,ln,DFr,Q4e,GFr,OFr,W4e,VFr,XFr,H4e,zFr,QFr,WFr,U4e,OM,J4e,HFr,UFr,uH,JFr,YFr,KFr,VM,XIe,hc,XM,Y4e,Ex,ZFr,K4e,e0r,zIe,lr,Cx,o0r,pc,r0r,_H,t0r,a0r,bH,n0r,s0r,l0r,wx,i0r,Z4e,d0r,c0r,f0r,Pt,Ax,m0r,eve,g0r,h0r,uc,p0r,ove,u0r,_0r,vH,b0r,v0r,F0r,zM,T0r,Pr,yx,M0r,rve,E0r,C0r,dn,w0r,tve,A0r,y0r,ave,L0r,x0r,nve,$0r,k0r,S0r,de,QM,sve,R0r,B0r,FH,P0r,I0r,q0r,WM,lve,N0r,j0r,TH,D0r,G0r,O0r,HM,ive,V0r,X0r,MH,z0r,Q0r,W0r,UM,dve,H0r,U0r,EH,J0r,Y0r,K0r,JM,cve,Z0r,e6r,CH,o6r,r6r,t6r,YM,fve,a6r,n6r,wH,s6r,l6r,i6r,KM,mve,d6r,c6r,AH,f6r,m6r,g6r,ZM,gve,h6r,p6r,yH,u6r,_6r,b6r,eE,hve,v6r,F6r,LH,T6r,M6r,E6r,oE,pve,C6r,w6r,xH,A6r,y6r,L6r,rE,uve,x6r,$6r,$H,k6r,S6r,R6r,tE,_ve,B6r,P6r,kH,I6r,q6r,N6r,aE,bve,j6r,D6r,SH,G6r,O6r,V6r,nE,vve,X6r,z6r,RH,Q6r,W6r,H6r,sE,Fve,U6r,J6r,BH,Y6r,K6r,Z6r,lE,Tve,eTr,oTr,PH,rTr,tTr,aTr,iE,Mve,nTr,sTr,IH,lTr,iTr,dTr,dE,Eve,cTr,fTr,qH,mTr,gTr,hTr,cE,Cve,pTr,uTr,NH,_Tr,bTr,vTr,fE,wve,FTr,TTr,jH,MTr,ETr,CTr,mE,QIe,_c,gE,Ave,Lx,wTr,yve,ATr,WIe,ir,xx,yTr,bc,LTr,DH,xTr,$Tr,GH,kTr,STr,RTr,$x,BTr,Lve,PTr,ITr,qTr,It,kx,NTr,xve,jTr,DTr,vc,GTr,$ve,OTr,VTr,OH,XTr,zTr,QTr,hE,WTr,Ir,Sx,HTr,kve,UTr,JTr,cn,YTr,Sve,KTr,ZTr,Rve,eMr,oMr,Bve,rMr,tMr,aMr,ce,pE,Pve,nMr,sMr,VH,lMr,iMr,dMr,uE,Ive,cMr,fMr,XH,mMr,gMr,hMr,_E,qve,pMr,uMr,zH,_Mr,bMr,vMr,bE,Nve,FMr,TMr,QH,MMr,EMr,CMr,vE,jve,wMr,AMr,WH,yMr,LMr,xMr,FE,Dve,$Mr,kMr,HH,SMr,RMr,BMr,TE,Gve,PMr,IMr,UH,qMr,NMr,jMr,ME,Ove,DMr,GMr,JH,OMr,VMr,XMr,EE,Vve,zMr,QMr,YH,WMr,HMr,UMr,CE,Xve,JMr,YMr,KH,KMr,ZMr,eEr,wE,zve,oEr,rEr,ZH,tEr,aEr,nEr,AE,Qve,sEr,lEr,eU,iEr,dEr,cEr,yE,Wve,fEr,mEr,oU,gEr,hEr,pEr,LE,Hve,uEr,_Er,rU,bEr,vEr,FEr,xE,Uve,TEr,MEr,tU,EEr,CEr,wEr,$E,Jve,AEr,yEr,aU,LEr,xEr,$Er,kE,Yve,kEr,SEr,nU,REr,BEr,PEr,SE,Kve,IEr,qEr,sU,NEr,jEr,DEr,RE,Zve,GEr,OEr,lU,VEr,XEr,zEr,BE,eFe,QEr,WEr,iU,HEr,UEr,JEr,PE,HIe,Fc,IE,oFe,Rx,YEr,rFe,KEr,UIe,dr,Bx,ZEr,Tc,eCr,dU,oCr,rCr,cU,tCr,aCr,nCr,Px,sCr,tFe,lCr,iCr,dCr,qt,Ix,cCr,aFe,fCr,mCr,Mc,gCr,nFe,hCr,pCr,fU,uCr,_Cr,bCr,qE,vCr,qr,qx,FCr,sFe,TCr,MCr,fn,ECr,lFe,CCr,wCr,iFe,ACr,yCr,dFe,LCr,xCr,$Cr,cFe,NE,fFe,kCr,SCr,mU,RCr,BCr,PCr,jE,JIe,Ec,DE,mFe,Nx,ICr,gFe,qCr,YIe,cr,jx,NCr,Cc,jCr,gU,DCr,GCr,hU,OCr,VCr,XCr,Dx,zCr,hFe,QCr,WCr,HCr,Nt,Gx,UCr,pFe,JCr,YCr,wc,KCr,uFe,ZCr,e5r,pU,o5r,r5r,t5r,GE,a5r,Nr,Ox,n5r,_Fe,s5r,l5r,mn,i5r,bFe,d5r,c5r,vFe,f5r,m5r,FFe,g5r,h5r,p5r,TFe,OE,MFe,u5r,_5r,uU,b5r,v5r,F5r,VE,KIe,Ac,XE,EFe,Vx,T5r,CFe,M5r,ZIe,fr,Xx,E5r,yc,C5r,_U,w5r,A5r,bU,y5r,L5r,x5r,zx,$5r,wFe,k5r,S5r,R5r,jt,Qx,B5r,AFe,P5r,I5r,Lc,q5r,yFe,N5r,j5r,vU,D5r,G5r,O5r,zE,V5r,jr,Wx,X5r,LFe,z5r,Q5r,gn,W5r,xFe,H5r,U5r,$Fe,J5r,Y5r,kFe,K5r,Z5r,e3r,re,QE,SFe,o3r,r3r,FU,t3r,a3r,n3r,WE,RFe,s3r,l3r,TU,i3r,d3r,c3r,HE,BFe,f3r,m3r,MU,g3r,h3r,p3r,UE,PFe,u3r,_3r,EU,b3r,v3r,F3r,JE,IFe,T3r,M3r,CU,E3r,C3r,w3r,YE,qFe,A3r,y3r,wU,L3r,x3r,$3r,KE,NFe,k3r,S3r,AU,R3r,B3r,P3r,ZE,jFe,I3r,q3r,yU,N3r,j3r,D3r,eC,DFe,G3r,O3r,LU,V3r,X3r,z3r,oC,GFe,Q3r,W3r,xU,H3r,U3r,J3r,rC,OFe,Y3r,K3r,$U,Z3r,ewr,owr,tC,VFe,rwr,twr,kU,awr,nwr,swr,aC,XFe,lwr,iwr,SU,dwr,cwr,fwr,nC,zFe,mwr,gwr,RU,hwr,pwr,uwr,sC,QFe,_wr,bwr,BU,vwr,Fwr,Twr,lC,WFe,Mwr,Ewr,PU,Cwr,wwr,Awr,iC,HFe,ywr,Lwr,IU,xwr,$wr,kwr,dC,UFe,Swr,Rwr,qU,Bwr,Pwr,Iwr,cC,JFe,qwr,Nwr,NU,jwr,Dwr,Gwr,fC,YFe,Owr,Vwr,jU,Xwr,zwr,Qwr,mC,KFe,Wwr,Hwr,DU,Uwr,Jwr,Ywr,gC,ZFe,Kwr,Zwr,GU,eAr,oAr,rAr,hC,e0e,tAr,aAr,OU,nAr,sAr,lAr,pC,o0e,iAr,dAr,VU,cAr,fAr,mAr,uC,r0e,gAr,hAr,XU,pAr,uAr,_Ar,_C,eqe,xc,bC,t0e,Hx,bAr,a0e,vAr,oqe,mr,Ux,FAr,$c,TAr,zU,MAr,EAr,QU,CAr,wAr,AAr,Jx,yAr,n0e,LAr,xAr,$Ar,Dt,Yx,kAr,s0e,SAr,RAr,kc,BAr,l0e,PAr,IAr,WU,qAr,NAr,jAr,vC,DAr,Dr,Kx,GAr,i0e,OAr,VAr,hn,XAr,d0e,zAr,QAr,c0e,WAr,HAr,f0e,UAr,JAr,YAr,Se,FC,m0e,KAr,ZAr,HU,eyr,oyr,ryr,TC,g0e,tyr,ayr,UU,nyr,syr,lyr,MC,h0e,iyr,dyr,JU,cyr,fyr,myr,EC,p0e,gyr,hyr,YU,pyr,uyr,_yr,CC,u0e,byr,vyr,KU,Fyr,Tyr,Myr,wC,_0e,Eyr,Cyr,ZU,wyr,Ayr,yyr,AC,b0e,Lyr,xyr,eJ,$yr,kyr,Syr,yC,v0e,Ryr,Byr,oJ,Pyr,Iyr,qyr,LC,F0e,Nyr,jyr,rJ,Dyr,Gyr,Oyr,xC,rqe,Sc,$C,T0e,Zx,Vyr,M0e,Xyr,tqe,gr,e7,zyr,Rc,Qyr,tJ,Wyr,Hyr,aJ,Uyr,Jyr,Yyr,o7,Kyr,E0e,Zyr,eLr,oLr,Gt,r7,rLr,C0e,tLr,aLr,Bc,nLr,w0e,sLr,lLr,nJ,iLr,dLr,cLr,kC,fLr,Gr,t7,mLr,A0e,gLr,hLr,pn,pLr,y0e,uLr,_Lr,L0e,bLr,vLr,x0e,FLr,TLr,MLr,Me,SC,$0e,ELr,CLr,sJ,wLr,ALr,yLr,RC,k0e,LLr,xLr,lJ,$Lr,kLr,SLr,BC,S0e,RLr,BLr,iJ,PLr,ILr,qLr,PC,R0e,NLr,jLr,dJ,DLr,GLr,OLr,IC,B0e,VLr,XLr,cJ,zLr,QLr,WLr,qC,P0e,HLr,ULr,fJ,JLr,YLr,KLr,NC,I0e,ZLr,e8r,mJ,o8r,r8r,t8r,jC,q0e,a8r,n8r,gJ,s8r,l8r,i8r,DC,N0e,d8r,c8r,hJ,f8r,m8r,g8r,GC,j0e,h8r,p8r,pJ,u8r,_8r,b8r,OC,D0e,v8r,F8r,uJ,T8r,M8r,E8r,VC,G0e,C8r,w8r,_J,A8r,y8r,L8r,XC,aqe,Pc,zC,O0e,a7,x8r,V0e,$8r,nqe,hr,n7,k8r,Ic,S8r,bJ,R8r,B8r,vJ,P8r,I8r,q8r,s7,N8r,X0e,j8r,D8r,G8r,Ot,l7,O8r,z0e,V8r,X8r,qc,z8r,Q0e,Q8r,W8r,FJ,H8r,U8r,J8r,QC,Y8r,Or,i7,K8r,W0e,Z8r,exr,un,oxr,H0e,rxr,txr,U0e,axr,nxr,J0e,sxr,lxr,ixr,Le,WC,Y0e,dxr,cxr,TJ,fxr,mxr,gxr,HC,K0e,hxr,pxr,MJ,uxr,_xr,bxr,UC,Z0e,vxr,Fxr,EJ,Txr,Mxr,Exr,JC,e6e,Cxr,wxr,CJ,Axr,yxr,Lxr,YC,o6e,xxr,$xr,wJ,kxr,Sxr,Rxr,KC,r6e,Bxr,Pxr,AJ,Ixr,qxr,Nxr,ZC,t6e,jxr,Dxr,yJ,Gxr,Oxr,Vxr,e5,a6e,Xxr,zxr,LJ,Qxr,Wxr,Hxr,o5,n6e,Uxr,Jxr,xJ,Yxr,Kxr,Zxr,r5,s6e,e7r,o7r,$J,r7r,t7r,a7r,t5,sqe,Nc,a5,l6e,d7,n7r,i6e,s7r,lqe,pr,c7,l7r,jc,i7r,kJ,d7r,c7r,SJ,f7r,m7r,g7r,f7,h7r,d6e,p7r,u7r,_7r,Vt,m7,b7r,c6e,v7r,F7r,Dc,T7r,f6e,M7r,E7r,RJ,C7r,w7r,A7r,n5,y7r,Vr,g7,L7r,m6e,x7r,$7r,_n,k7r,g6e,S7r,R7r,h6e,B7r,P7r,p6e,I7r,q7r,N7r,Re,s5,u6e,j7r,D7r,BJ,G7r,O7r,V7r,l5,_6e,X7r,z7r,PJ,Q7r,W7r,H7r,i5,b6e,U7r,J7r,IJ,Y7r,K7r,Z7r,d5,v6e,e9r,o9r,qJ,r9r,t9r,a9r,c5,F6e,n9r,s9r,NJ,l9r,i9r,d9r,f5,T6e,c9r,f9r,jJ,m9r,g9r,h9r,m5,M6e,p9r,u9r,DJ,_9r,b9r,v9r,g5,E6e,F9r,T9r,GJ,M9r,E9r,C9r,h5,C6e,w9r,A9r,OJ,y9r,L9r,x9r,p5,iqe,Gc,u5,w6e,h7,$9r,A6e,k9r,dqe,ur,p7,S9r,Oc,R9r,VJ,B9r,P9r,XJ,I9r,q9r,N9r,u7,j9r,y6e,D9r,G9r,O9r,Xt,_7,V9r,L6e,X9r,z9r,Vc,Q9r,x6e,W9r,H9r,zJ,U9r,J9r,Y9r,_5,K9r,Xr,b7,Z9r,$6e,e$r,o$r,bn,r$r,k6e,t$r,a$r,S6e,n$r,s$r,R6e,l$r,i$r,d$r,xe,b5,B6e,c$r,f$r,QJ,m$r,g$r,h$r,v5,P6e,p$r,u$r,WJ,_$r,b$r,v$r,F5,I6e,F$r,T$r,HJ,M$r,E$r,C$r,T5,q6e,w$r,A$r,UJ,y$r,L$r,x$r,M5,N6e,$$r,k$r,JJ,S$r,R$r,B$r,E5,j6e,P$r,I$r,YJ,q$r,N$r,j$r,C5,D6e,D$r,G$r,KJ,O$r,V$r,X$r,w5,G6e,z$r,Q$r,ZJ,W$r,H$r,U$r,A5,O6e,J$r,Y$r,eY,K$r,Z$r,ekr,y5,V6e,okr,rkr,oY,tkr,akr,nkr,L5,cqe,Xc,x5,X6e,v7,skr,z6e,lkr,fqe,_r,F7,ikr,zc,dkr,rY,ckr,fkr,tY,mkr,gkr,hkr,T7,pkr,Q6e,ukr,_kr,bkr,zt,M7,vkr,W6e,Fkr,Tkr,Qc,Mkr,H6e,Ekr,Ckr,aY,wkr,Akr,ykr,$5,Lkr,zr,E7,xkr,U6e,$kr,kkr,vn,Skr,J6e,Rkr,Bkr,Y6e,Pkr,Ikr,K6e,qkr,Nkr,jkr,$e,k5,Z6e,Dkr,Gkr,nY,Okr,Vkr,Xkr,S5,eTe,zkr,Qkr,sY,Wkr,Hkr,Ukr,R5,oTe,Jkr,Ykr,lY,Kkr,Zkr,eSr,B5,rTe,oSr,rSr,iY,tSr,aSr,nSr,P5,tTe,sSr,lSr,dY,iSr,dSr,cSr,I5,aTe,fSr,mSr,cY,gSr,hSr,pSr,q5,nTe,uSr,_Sr,fY,bSr,vSr,FSr,N5,sTe,TSr,MSr,mY,ESr,CSr,wSr,j5,lTe,ASr,ySr,gY,LSr,xSr,$Sr,D5,iTe,kSr,SSr,hY,RSr,BSr,PSr,G5,mqe,Wc,O5,dTe,C7,ISr,cTe,qSr,gqe,br,w7,NSr,Hc,jSr,pY,DSr,GSr,uY,OSr,VSr,XSr,A7,zSr,fTe,QSr,WSr,HSr,Qt,y7,USr,mTe,JSr,YSr,Uc,KSr,gTe,ZSr,eRr,_Y,oRr,rRr,tRr,V5,aRr,Qr,L7,nRr,hTe,sRr,lRr,Fn,iRr,pTe,dRr,cRr,uTe,fRr,mRr,_Te,gRr,hRr,pRr,De,X5,bTe,uRr,_Rr,bY,bRr,vRr,FRr,z5,vTe,TRr,MRr,vY,ERr,CRr,wRr,Q5,FTe,ARr,yRr,FY,LRr,xRr,$Rr,W5,TTe,kRr,SRr,TY,RRr,BRr,PRr,H5,MTe,IRr,qRr,MY,NRr,jRr,DRr,U5,ETe,GRr,ORr,EY,VRr,XRr,zRr,J5,CTe,QRr,WRr,CY,HRr,URr,JRr,Y5,wTe,YRr,KRr,wY,ZRr,eBr,oBr,K5,hqe,Jc,Z5,ATe,x7,rBr,yTe,tBr,pqe,vr,$7,aBr,Yc,nBr,AY,sBr,lBr,yY,iBr,dBr,cBr,k7,fBr,LTe,mBr,gBr,hBr,Wt,S7,pBr,xTe,uBr,_Br,Kc,bBr,$Te,vBr,FBr,LY,TBr,MBr,EBr,e3,CBr,Wr,R7,wBr,kTe,ABr,yBr,Tn,LBr,STe,xBr,$Br,RTe,kBr,SBr,BTe,RBr,BBr,PBr,Ge,o3,PTe,IBr,qBr,xY,NBr,jBr,DBr,r3,ITe,GBr,OBr,$Y,VBr,XBr,zBr,t3,qTe,QBr,WBr,kY,HBr,UBr,JBr,a3,NTe,YBr,KBr,SY,ZBr,ePr,oPr,n3,jTe,rPr,tPr,RY,aPr,nPr,sPr,s3,DTe,lPr,iPr,BY,dPr,cPr,fPr,l3,GTe,mPr,gPr,PY,hPr,pPr,uPr,i3,OTe,_Pr,bPr,IY,vPr,FPr,TPr,d3,uqe,Zc,c3,VTe,B7,MPr,XTe,EPr,_qe,Fr,P7,CPr,ef,wPr,qY,APr,yPr,NY,LPr,xPr,$Pr,I7,kPr,zTe,SPr,RPr,BPr,Ht,q7,PPr,QTe,IPr,qPr,of,NPr,WTe,jPr,DPr,jY,GPr,OPr,VPr,f3,XPr,Hr,N7,zPr,HTe,QPr,WPr,Mn,HPr,UTe,UPr,JPr,JTe,YPr,KPr,YTe,ZPr,eIr,oIr,KTe,m3,ZTe,rIr,tIr,DY,aIr,nIr,sIr,g3,bqe,rf,h3,eMe,j7,lIr,oMe,iIr,vqe,Tr,D7,dIr,tf,cIr,GY,fIr,mIr,OY,gIr,hIr,pIr,G7,uIr,rMe,_Ir,bIr,vIr,Ut,O7,FIr,tMe,TIr,MIr,af,EIr,aMe,CIr,wIr,VY,AIr,yIr,LIr,p3,xIr,Ur,V7,$Ir,nMe,kIr,SIr,En,RIr,sMe,BIr,PIr,lMe,IIr,qIr,iMe,NIr,jIr,DIr,X7,u3,dMe,GIr,OIr,XY,VIr,XIr,zIr,_3,cMe,QIr,WIr,zY,HIr,UIr,JIr,b3,Fqe,nf,v3,fMe,z7,YIr,mMe,KIr,Tqe,Mr,Q7,ZIr,sf,eqr,QY,oqr,rqr,WY,tqr,aqr,nqr,W7,sqr,gMe,lqr,iqr,dqr,Jt,H7,cqr,hMe,fqr,mqr,lf,gqr,pMe,hqr,pqr,HY,uqr,_qr,bqr,F3,vqr,Jr,U7,Fqr,uMe,Tqr,Mqr,Cn,Eqr,_Me,Cqr,wqr,bMe,Aqr,yqr,vMe,Lqr,xqr,$qr,FMe,T3,TMe,kqr,Sqr,UY,Rqr,Bqr,Pqr,M3,Mqe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),zA=new ee({}),QA=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),_f=new Iqr({props:{warning:!0,$$slots:{default:[eAt]},$$scope:{ctx:A}}}),WA=new ee({}),HA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/configuration_auto.py#L566"}}),YA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/configuration_auto.py#L589"}}),pg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[oAt]},$$scope:{ctx:A}}}),KA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/configuration_auto.py#L711"}}),ZA=new ee({}),ey=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/tokenization_auto.py#L377"}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16402/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/tokenization_auto.py#L391"}}),Wg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[rAt]},$$scope:{ctx:A}}}),ay=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/tokenization_auto.py#L587"}}),ny=new ee({}),sy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/feature_extraction_auto.py#L178"}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16402/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),Th=new Iqr({props:{$$slots:{default:[tAt]},$$scope:{ctx:A}}}),Mh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[aAt]},$$scope:{ctx:A}}}),cy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/feature_extraction_auto.py#L319"}}),fy=new ee({}),my=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/processing_auto.py#L76"}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/processing_auto.py#L90"}}),jh=new Iqr({props:{$$slots:{default:[nAt]},$$scope:{ctx:A}}}),Dh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[sAt]},$$scope:{ctx:A}}}),uy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/processing_auto.py#L243"}}),_y=new ee({}),by=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L718"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (MCTCT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),Vh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[lAt]},$$scope:{ctx:A}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),Su=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[iAt]},$$scope:{ctx:A}}}),My=new ee({}),Ey=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L725"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),Bu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[dAt]},$$scope:{ctx:A}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),T_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[cAt]},$$scope:{ctx:A}}}),yy=new ee({}),Ly=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L740"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),E_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[fAt]},$$scope:{ctx:A}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),s2=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[mAt]},$$scope:{ctx:A}}}),Sy=new ee({}),Ry=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L747"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),i2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[gAt]},$$scope:{ctx:A}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),z2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[hAt]},$$scope:{ctx:A}}}),qy=new ee({}),Ny=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L754"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),W2=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[pAt]},$$scope:{ctx:A}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),m1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[uAt]},$$scope:{ctx:A}}}),Oy=new ee({}),Vy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L763"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),h1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[_At]},$$scope:{ctx:A}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),db=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[bAt]},$$scope:{ctx:A}}}),Wy=new ee({}),Hy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L797"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),fb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[vAt]},$$scope:{ctx:A}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),Gb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[FAt]},$$scope:{ctx:A}}}),Ky=new ee({}),Zy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L804"}}),oL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),Vb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[TAt]},$$scope:{ctx:A}}}),rL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),Jb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[MAt]},$$scope:{ctx:A}}}),tL=new ee({}),aL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L790"}}),sL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),Kb=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[EAt]},$$scope:{ctx:A}}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),R4=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[CAt]},$$scope:{ctx:A}}}),iL=new ee({}),dL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L772"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),P4=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[wAt]},$$scope:{ctx:A}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),Mv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[AAt]},$$scope:{ctx:A}}}),gL=new ee({}),hL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L779"}}),uL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),Cv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[yAt]},$$scope:{ctx:A}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),yv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[LAt]},$$scope:{ctx:A}}}),bL=new ee({}),vL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L813"}}),TL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),xv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[xAt]},$$scope:{ctx:A}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),Ov=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[$At]},$$scope:{ctx:A}}}),EL=new ee({}),CL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L852"}}),AL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),Xv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[kAt]},$$scope:{ctx:A}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),Wv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[SAt]},$$scope:{ctx:A}}}),LL=new ee({}),xL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L859"}}),kL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),Uv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[RAt]},$$scope:{ctx:A}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),nF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[BAt]},$$scope:{ctx:A}}}),RL=new ee({}),BL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L882"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),lF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[PAt]},$$scope:{ctx:A}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),gF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[IAt]},$$scope:{ctx:A}}}),NL=new ee({}),jL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L866"}}),GL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (MCTCT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),pF=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[qAt]},$$scope:{ctx:A}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[NAt]},$$scope:{ctx:A}}}),VL=new ee({}),XL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L873"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),LF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[jAt]},$$scope:{ctx:A}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),SF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[DAt]},$$scope:{ctx:A}}}),UL=new ee({}),JL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L891"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),BF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[GAt]},$$scope:{ctx:A}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),DF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[OAt]},$$scope:{ctx:A}}}),e8=new ee({}),o8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L898"}}),t8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),OF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[VAt]},$$scope:{ctx:A}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),WF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[XAt]},$$scope:{ctx:A}}}),n8=new ee({}),s8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L845"}}),i8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),UF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[zAt]},$$scope:{ctx:A}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),ZF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[QAt]},$$scope:{ctx:A}}}),f8=new ee({}),m8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L820"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),o0=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[WAt]},$$scope:{ctx:A}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),a0=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[HAt]},$$scope:{ctx:A}}}),u8=new ee({}),_8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L827"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),s0=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[UAt]},$$scope:{ctx:A}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),m0=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[JAt]},$$scope:{ctx:A}}}),T8=new ee({}),M8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L836"}}),C8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),h0=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[YAt]},$$scope:{ctx:A}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),_0=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[KAt]},$$scope:{ctx:A}}}),A8=new ee({}),y8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),x8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),v0=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[ZAt]},$$scope:{ctx:A}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),c6=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[eyt]},$$scope:{ctx:A}}}),k8=new ee({}),S8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),B8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),m6=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[oyt]},$$scope:{ctx:A}}}),P8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),I6=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ryt]},$$scope:{ctx:A}}}),I8=new ee({}),q8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),j8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),N6=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[tyt]},$$scope:{ctx:A}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),Y6=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[ayt]},$$scope:{ctx:A}}}),G8=new ee({}),O8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),X8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),Z6=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[nyt]},$$scope:{ctx:A}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[syt]},$$scope:{ctx:A}}}),Q8=new ee({}),W8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),U8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[lyt]},$$scope:{ctx:A}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[iyt]},$$scope:{ctx:A}}}),Y8=new ee({}),K8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),LT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[dyt]},$$scope:{ctx:A}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[cyt]},$$scope:{ctx:A}}}),rx=new ee({}),tx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[fyt]},$$scope:{ctx:A}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),hM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[myt]},$$scope:{ctx:A}}}),lx=new ee({}),ix=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[gyt]},$$scope:{ctx:A}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),BM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[hyt]},$$scope:{ctx:A}}}),mx=new ee({}),gx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),IM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[pyt]},$$scope:{ctx:A}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),jM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[uyt]},$$scope:{ctx:A}}}),bx=new ee({}),vx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),GM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[_yt]},$$scope:{ctx:A}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),VM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[byt]},$$scope:{ctx:A}}}),Ex=new ee({}),Cx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),zM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[vyt]},$$scope:{ctx:A}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),mE=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Fyt]},$$scope:{ctx:A}}}),Lx=new ee({}),xx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),hE=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Tyt]},$$scope:{ctx:A}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),PE=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Myt]},$$scope:{ctx:A}}}),Rx=new ee({}),Bx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),qE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Eyt]},$$scope:{ctx:A}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),jE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Cyt]},$$scope:{ctx:A}}}),Nx=new ee({}),jx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),GE=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[wyt]},$$scope:{ctx:A}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),VE=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Ayt]},$$scope:{ctx:A}}}),Vx=new ee({}),Xx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),zE=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[yyt]},$$scope:{ctx:A}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),_C=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Lyt]},$$scope:{ctx:A}}}),Hx=new ee({}),Ux=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),vC=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[xyt]},$$scope:{ctx:A}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),xC=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[$yt]},$$scope:{ctx:A}}}),Zx=new ee({}),e7=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),r7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),kC=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[kyt]},$$scope:{ctx:A}}}),t7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),XC=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Syt]},$$scope:{ctx:A}}}),a7=new ee({}),n7=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),l7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),QC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Ryt]},$$scope:{ctx:A}}}),i7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),t5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Byt]},$$scope:{ctx:A}}}),d7=new ee({}),c7=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),m7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),n5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Pyt]},$$scope:{ctx:A}}}),g7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),p5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Iyt]},$$scope:{ctx:A}}}),h7=new ee({}),p7=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),_7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),_5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[qyt]},$$scope:{ctx:A}}}),b7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),L5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Nyt]},$$scope:{ctx:A}}}),v7=new ee({}),F7=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),M7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),$5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[jyt]},$$scope:{ctx:A}}}),E7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),G5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Dyt]},$$scope:{ctx:A}}}),C7=new ee({}),w7=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),y7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),V5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Gyt]},$$scope:{ctx:A}}}),L7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),K5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Oyt]},$$scope:{ctx:A}}}),x7=new ee({}),$7=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),S7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Vyt]},$$scope:{ctx:A}}}),R7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),d3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Xyt]},$$scope:{ctx:A}}}),B7=new ee({}),P7=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),q7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),f3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[zyt]},$$scope:{ctx:A}}}),N7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),g3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Qyt]},$$scope:{ctx:A}}}),j7=new ee({}),D7=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),O7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),p3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Wyt]},$$scope:{ctx:A}}}),V7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),b3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Hyt]},$$scope:{ctx:A}}}),z7=new ee({}),Q7=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),H7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),F3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Uyt]},$$scope:{ctx:A}}}),U7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),M3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Jyt]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),li=o("Auto Classes"),mf=l(),et=a("p"),ii=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=a("code"),GA=o("from_pretrained()"),gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ne=l(),ze=a("p"),ci=o("Instantiating one of "),An=a("a"),OA=o("AutoConfig"),yn=o(", "),Ln=a("a"),VA=o("AutoModel"),fi=o(`, and
`),xn=a("a"),XA=o("AutoTokenizer"),mi=o(" will directly create a class of the relevant architecture. For instance"),hf=l(),F(Ma.$$.fragment),Qe=l(),Ae=a("p"),i$=o("will create a model that is an instance of "),gi=a("a"),d$=o("BertModel"),c$=o("."),Eo=l(),Ea=a("p"),f$=o("There is one class of "),pf=a("code"),m$=o("AutoModel"),$je=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),vPe=l(),hi=a("h2"),uf=a("a"),VZ=a("span"),F(zA.$$.fragment),kje=l(),XZ=a("span"),Sje=o("Extending the Auto Classes"),FPe=l(),$n=a("p"),Rje=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),zZ=a("code"),Bje=o("NewModel"),Pje=o(", make sure you have a "),QZ=a("code"),Ije=o("NewModelConfig"),qje=o(` then you can add those to the auto
classes like this:`),TPe=l(),F(QA.$$.fragment),MPe=l(),g$=a("p"),Nje=o("You will then be able to use the auto classes like you would usually do!"),EPe=l(),F(_f.$$.fragment),CPe=l(),pi=a("h2"),bf=a("a"),WZ=a("span"),F(WA.$$.fragment),jje=l(),HZ=a("span"),Dje=o("AutoConfig"),wPe=l(),Co=a("div"),F(HA.$$.fragment),Gje=l(),UA=a("p"),Oje=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),h$=a("a"),Vje=o("from_pretrained()"),Xje=o(" class method."),zje=l(),JA=a("p"),Qje=o("This class cannot be instantiated directly using "),UZ=a("code"),Wje=o("__init__()"),Hje=o(" (throws an error)."),Uje=l(),Er=a("div"),F(YA.$$.fragment),Jje=l(),JZ=a("p"),Yje=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Kje=l(),ui=a("p"),Zje=o("The configuration class to instantiate is selected based on the "),YZ=a("code"),eDe=o("model_type"),oDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),KZ=a("code"),rDe=o("pretrained_model_name_or_path"),tDe=o(":"),aDe=l(),y=a("ul"),vf=a("li"),ZZ=a("strong"),nDe=o("albert"),sDe=o(" \u2014 "),p$=a("a"),lDe=o("AlbertConfig"),iDe=o(" (ALBERT model)"),dDe=l(),Ff=a("li"),eee=a("strong"),cDe=o("bart"),fDe=o(" \u2014 "),u$=a("a"),mDe=o("BartConfig"),gDe=o(" (BART model)"),hDe=l(),Tf=a("li"),oee=a("strong"),pDe=o("beit"),uDe=o(" \u2014 "),_$=a("a"),_De=o("BeitConfig"),bDe=o(" (BEiT model)"),vDe=l(),Mf=a("li"),ree=a("strong"),FDe=o("bert"),TDe=o(" \u2014 "),b$=a("a"),MDe=o("BertConfig"),EDe=o(" (BERT model)"),CDe=l(),Ef=a("li"),tee=a("strong"),wDe=o("bert-generation"),ADe=o(" \u2014 "),v$=a("a"),yDe=o("BertGenerationConfig"),LDe=o(" (Bert Generation model)"),xDe=l(),Cf=a("li"),aee=a("strong"),$De=o("big_bird"),kDe=o(" \u2014 "),F$=a("a"),SDe=o("BigBirdConfig"),RDe=o(" (BigBird model)"),BDe=l(),wf=a("li"),nee=a("strong"),PDe=o("bigbird_pegasus"),IDe=o(" \u2014 "),T$=a("a"),qDe=o("BigBirdPegasusConfig"),NDe=o(" (BigBirdPegasus model)"),jDe=l(),Af=a("li"),see=a("strong"),DDe=o("blenderbot"),GDe=o(" \u2014 "),M$=a("a"),ODe=o("BlenderbotConfig"),VDe=o(" (Blenderbot model)"),XDe=l(),yf=a("li"),lee=a("strong"),zDe=o("blenderbot-small"),QDe=o(" \u2014 "),E$=a("a"),WDe=o("BlenderbotSmallConfig"),HDe=o(" (BlenderbotSmall model)"),UDe=l(),Lf=a("li"),iee=a("strong"),JDe=o("camembert"),YDe=o(" \u2014 "),C$=a("a"),KDe=o("CamembertConfig"),ZDe=o(" (CamemBERT model)"),eGe=l(),xf=a("li"),dee=a("strong"),oGe=o("canine"),rGe=o(" \u2014 "),w$=a("a"),tGe=o("CanineConfig"),aGe=o(" (Canine model)"),nGe=l(),$f=a("li"),cee=a("strong"),sGe=o("clip"),lGe=o(" \u2014 "),A$=a("a"),iGe=o("CLIPConfig"),dGe=o(" (CLIP model)"),cGe=l(),kf=a("li"),fee=a("strong"),fGe=o("convbert"),mGe=o(" \u2014 "),y$=a("a"),gGe=o("ConvBertConfig"),hGe=o(" (ConvBERT model)"),pGe=l(),Sf=a("li"),mee=a("strong"),uGe=o("convnext"),_Ge=o(" \u2014 "),L$=a("a"),bGe=o("ConvNextConfig"),vGe=o(" (ConvNext model)"),FGe=l(),Rf=a("li"),gee=a("strong"),TGe=o("ctrl"),MGe=o(" \u2014 "),x$=a("a"),EGe=o("CTRLConfig"),CGe=o(" (CTRL model)"),wGe=l(),Bf=a("li"),hee=a("strong"),AGe=o("data2vec-audio"),yGe=o(" \u2014 "),$$=a("a"),LGe=o("Data2VecAudioConfig"),xGe=o(" (Data2VecAudio model)"),$Ge=l(),Pf=a("li"),pee=a("strong"),kGe=o("data2vec-text"),SGe=o(" \u2014 "),k$=a("a"),RGe=o("Data2VecTextConfig"),BGe=o(" (Data2VecText model)"),PGe=l(),If=a("li"),uee=a("strong"),IGe=o("data2vec-vision"),qGe=o(" \u2014 "),S$=a("a"),NGe=o("Data2VecVisionConfig"),jGe=o(" (Data2VecVision model)"),DGe=l(),qf=a("li"),_ee=a("strong"),GGe=o("deberta"),OGe=o(" \u2014 "),R$=a("a"),VGe=o("DebertaConfig"),XGe=o(" (DeBERTa model)"),zGe=l(),Nf=a("li"),bee=a("strong"),QGe=o("deberta-v2"),WGe=o(" \u2014 "),B$=a("a"),HGe=o("DebertaV2Config"),UGe=o(" (DeBERTa-v2 model)"),JGe=l(),jf=a("li"),vee=a("strong"),YGe=o("decision_transformer"),KGe=o(" \u2014 "),P$=a("a"),ZGe=o("DecisionTransformerConfig"),eOe=o(" (Decision Transformer model)"),oOe=l(),Df=a("li"),Fee=a("strong"),rOe=o("deit"),tOe=o(" \u2014 "),I$=a("a"),aOe=o("DeiTConfig"),nOe=o(" (DeiT model)"),sOe=l(),Gf=a("li"),Tee=a("strong"),lOe=o("detr"),iOe=o(" \u2014 "),q$=a("a"),dOe=o("DetrConfig"),cOe=o(" (DETR model)"),fOe=l(),Of=a("li"),Mee=a("strong"),mOe=o("distilbert"),gOe=o(" \u2014 "),N$=a("a"),hOe=o("DistilBertConfig"),pOe=o(" (DistilBERT model)"),uOe=l(),Vf=a("li"),Eee=a("strong"),_Oe=o("dpr"),bOe=o(" \u2014 "),j$=a("a"),vOe=o("DPRConfig"),FOe=o(" (DPR model)"),TOe=l(),Xf=a("li"),Cee=a("strong"),MOe=o("dpt"),EOe=o(" \u2014 "),D$=a("a"),COe=o("DPTConfig"),wOe=o(" (DPT model)"),AOe=l(),zf=a("li"),wee=a("strong"),yOe=o("electra"),LOe=o(" \u2014 "),G$=a("a"),xOe=o("ElectraConfig"),$Oe=o(" (ELECTRA model)"),kOe=l(),Qf=a("li"),Aee=a("strong"),SOe=o("encoder-decoder"),ROe=o(" \u2014 "),O$=a("a"),BOe=o("EncoderDecoderConfig"),POe=o(" (Encoder decoder model)"),IOe=l(),Wf=a("li"),yee=a("strong"),qOe=o("flaubert"),NOe=o(" \u2014 "),V$=a("a"),jOe=o("FlaubertConfig"),DOe=o(" (FlauBERT model)"),GOe=l(),Hf=a("li"),Lee=a("strong"),OOe=o("fnet"),VOe=o(" \u2014 "),X$=a("a"),XOe=o("FNetConfig"),zOe=o(" (FNet model)"),QOe=l(),Uf=a("li"),xee=a("strong"),WOe=o("fsmt"),HOe=o(" \u2014 "),z$=a("a"),UOe=o("FSMTConfig"),JOe=o(" (FairSeq Machine-Translation model)"),YOe=l(),Jf=a("li"),$ee=a("strong"),KOe=o("funnel"),ZOe=o(" \u2014 "),Q$=a("a"),eVe=o("FunnelConfig"),oVe=o(" (Funnel Transformer model)"),rVe=l(),Yf=a("li"),kee=a("strong"),tVe=o("glpn"),aVe=o(" \u2014 "),W$=a("a"),nVe=o("GLPNConfig"),sVe=o(" (GLPN model)"),lVe=l(),Kf=a("li"),See=a("strong"),iVe=o("gpt2"),dVe=o(" \u2014 "),H$=a("a"),cVe=o("GPT2Config"),fVe=o(" (OpenAI GPT-2 model)"),mVe=l(),Zf=a("li"),Ree=a("strong"),gVe=o("gpt_neo"),hVe=o(" \u2014 "),U$=a("a"),pVe=o("GPTNeoConfig"),uVe=o(" (GPT Neo model)"),_Ve=l(),em=a("li"),Bee=a("strong"),bVe=o("gptj"),vVe=o(" \u2014 "),J$=a("a"),FVe=o("GPTJConfig"),TVe=o(" (GPT-J model)"),MVe=l(),om=a("li"),Pee=a("strong"),EVe=o("hubert"),CVe=o(" \u2014 "),Y$=a("a"),wVe=o("HubertConfig"),AVe=o(" (Hubert model)"),yVe=l(),rm=a("li"),Iee=a("strong"),LVe=o("ibert"),xVe=o(" \u2014 "),K$=a("a"),$Ve=o("IBertConfig"),kVe=o(" (I-BERT model)"),SVe=l(),tm=a("li"),qee=a("strong"),RVe=o("imagegpt"),BVe=o(" \u2014 "),Z$=a("a"),PVe=o("ImageGPTConfig"),IVe=o(" (ImageGPT model)"),qVe=l(),am=a("li"),Nee=a("strong"),NVe=o("layoutlm"),jVe=o(" \u2014 "),ek=a("a"),DVe=o("LayoutLMConfig"),GVe=o(" (LayoutLM model)"),OVe=l(),nm=a("li"),jee=a("strong"),VVe=o("layoutlmv2"),XVe=o(" \u2014 "),ok=a("a"),zVe=o("LayoutLMv2Config"),QVe=o(" (LayoutLMv2 model)"),WVe=l(),sm=a("li"),Dee=a("strong"),HVe=o("led"),UVe=o(" \u2014 "),rk=a("a"),JVe=o("LEDConfig"),YVe=o(" (LED model)"),KVe=l(),lm=a("li"),Gee=a("strong"),ZVe=o("longformer"),eXe=o(" \u2014 "),tk=a("a"),oXe=o("LongformerConfig"),rXe=o(" (Longformer model)"),tXe=l(),im=a("li"),Oee=a("strong"),aXe=o("luke"),nXe=o(" \u2014 "),ak=a("a"),sXe=o("LukeConfig"),lXe=o(" (LUKE model)"),iXe=l(),dm=a("li"),Vee=a("strong"),dXe=o("lxmert"),cXe=o(" \u2014 "),nk=a("a"),fXe=o("LxmertConfig"),mXe=o(" (LXMERT model)"),gXe=l(),cm=a("li"),Xee=a("strong"),hXe=o("m2m_100"),pXe=o(" \u2014 "),sk=a("a"),uXe=o("M2M100Config"),_Xe=o(" (M2M100 model)"),bXe=l(),fm=a("li"),zee=a("strong"),vXe=o("marian"),FXe=o(" \u2014 "),lk=a("a"),TXe=o("MarianConfig"),MXe=o(" (Marian model)"),EXe=l(),mm=a("li"),Qee=a("strong"),CXe=o("maskformer"),wXe=o(" \u2014 "),ik=a("a"),AXe=o("MaskFormerConfig"),yXe=o(" (MaskFormer model)"),LXe=l(),gm=a("li"),Wee=a("strong"),xXe=o("mbart"),$Xe=o(" \u2014 "),dk=a("a"),kXe=o("MBartConfig"),SXe=o(" (mBART model)"),RXe=l(),hm=a("li"),Hee=a("strong"),BXe=o("mctct"),PXe=o(" \u2014 "),ck=a("a"),IXe=o("MCTCTConfig"),qXe=o(" (MCTCT model)"),NXe=l(),pm=a("li"),Uee=a("strong"),jXe=o("megatron-bert"),DXe=o(" \u2014 "),fk=a("a"),GXe=o("MegatronBertConfig"),OXe=o(" (MegatronBert model)"),VXe=l(),um=a("li"),Jee=a("strong"),XXe=o("mobilebert"),zXe=o(" \u2014 "),mk=a("a"),QXe=o("MobileBertConfig"),WXe=o(" (MobileBERT model)"),HXe=l(),_m=a("li"),Yee=a("strong"),UXe=o("mpnet"),JXe=o(" \u2014 "),gk=a("a"),YXe=o("MPNetConfig"),KXe=o(" (MPNet model)"),ZXe=l(),bm=a("li"),Kee=a("strong"),eze=o("mt5"),oze=o(" \u2014 "),hk=a("a"),rze=o("MT5Config"),tze=o(" (mT5 model)"),aze=l(),vm=a("li"),Zee=a("strong"),nze=o("nystromformer"),sze=o(" \u2014 "),pk=a("a"),lze=o("NystromformerConfig"),ize=o(" (Nystromformer model)"),dze=l(),Fm=a("li"),eoe=a("strong"),cze=o("openai-gpt"),fze=o(" \u2014 "),uk=a("a"),mze=o("OpenAIGPTConfig"),gze=o(" (OpenAI GPT model)"),hze=l(),Tm=a("li"),ooe=a("strong"),pze=o("pegasus"),uze=o(" \u2014 "),_k=a("a"),_ze=o("PegasusConfig"),bze=o(" (Pegasus model)"),vze=l(),Mm=a("li"),roe=a("strong"),Fze=o("perceiver"),Tze=o(" \u2014 "),bk=a("a"),Mze=o("PerceiverConfig"),Eze=o(" (Perceiver model)"),Cze=l(),Em=a("li"),toe=a("strong"),wze=o("plbart"),Aze=o(" \u2014 "),vk=a("a"),yze=o("PLBartConfig"),Lze=o(" (PLBart model)"),xze=l(),Cm=a("li"),aoe=a("strong"),$ze=o("poolformer"),kze=o(" \u2014 "),Fk=a("a"),Sze=o("PoolFormerConfig"),Rze=o(" (PoolFormer model)"),Bze=l(),wm=a("li"),noe=a("strong"),Pze=o("prophetnet"),Ize=o(" \u2014 "),Tk=a("a"),qze=o("ProphetNetConfig"),Nze=o(" (ProphetNet model)"),jze=l(),Am=a("li"),soe=a("strong"),Dze=o("qdqbert"),Gze=o(" \u2014 "),Mk=a("a"),Oze=o("QDQBertConfig"),Vze=o(" (QDQBert model)"),Xze=l(),ym=a("li"),loe=a("strong"),zze=o("rag"),Qze=o(" \u2014 "),Ek=a("a"),Wze=o("RagConfig"),Hze=o(" (RAG model)"),Uze=l(),Lm=a("li"),ioe=a("strong"),Jze=o("realm"),Yze=o(" \u2014 "),Ck=a("a"),Kze=o("RealmConfig"),Zze=o(" (Realm model)"),eQe=l(),xm=a("li"),doe=a("strong"),oQe=o("reformer"),rQe=o(" \u2014 "),wk=a("a"),tQe=o("ReformerConfig"),aQe=o(" (Reformer model)"),nQe=l(),$m=a("li"),coe=a("strong"),sQe=o("regnet"),lQe=o(" \u2014 "),Ak=a("a"),iQe=o("RegNetConfig"),dQe=o(" (RegNet model)"),cQe=l(),km=a("li"),foe=a("strong"),fQe=o("rembert"),mQe=o(" \u2014 "),yk=a("a"),gQe=o("RemBertConfig"),hQe=o(" (RemBERT model)"),pQe=l(),Sm=a("li"),moe=a("strong"),uQe=o("resnet"),_Qe=o(" \u2014 "),Lk=a("a"),bQe=o("ResNetConfig"),vQe=o(" (ResNet model)"),FQe=l(),Rm=a("li"),goe=a("strong"),TQe=o("retribert"),MQe=o(" \u2014 "),xk=a("a"),EQe=o("RetriBertConfig"),CQe=o(" (RetriBERT model)"),wQe=l(),Bm=a("li"),hoe=a("strong"),AQe=o("roberta"),yQe=o(" \u2014 "),$k=a("a"),LQe=o("RobertaConfig"),xQe=o(" (RoBERTa model)"),$Qe=l(),Pm=a("li"),poe=a("strong"),kQe=o("roformer"),SQe=o(" \u2014 "),kk=a("a"),RQe=o("RoFormerConfig"),BQe=o(" (RoFormer model)"),PQe=l(),Im=a("li"),uoe=a("strong"),IQe=o("segformer"),qQe=o(" \u2014 "),Sk=a("a"),NQe=o("SegformerConfig"),jQe=o(" (SegFormer model)"),DQe=l(),qm=a("li"),_oe=a("strong"),GQe=o("sew"),OQe=o(" \u2014 "),Rk=a("a"),VQe=o("SEWConfig"),XQe=o(" (SEW model)"),zQe=l(),Nm=a("li"),boe=a("strong"),QQe=o("sew-d"),WQe=o(" \u2014 "),Bk=a("a"),HQe=o("SEWDConfig"),UQe=o(" (SEW-D model)"),JQe=l(),jm=a("li"),voe=a("strong"),YQe=o("speech-encoder-decoder"),KQe=o(" \u2014 "),Pk=a("a"),ZQe=o("SpeechEncoderDecoderConfig"),eWe=o(" (Speech Encoder decoder model)"),oWe=l(),Dm=a("li"),Foe=a("strong"),rWe=o("speech_to_text"),tWe=o(" \u2014 "),Ik=a("a"),aWe=o("Speech2TextConfig"),nWe=o(" (Speech2Text model)"),sWe=l(),Gm=a("li"),Toe=a("strong"),lWe=o("speech_to_text_2"),iWe=o(" \u2014 "),qk=a("a"),dWe=o("Speech2Text2Config"),cWe=o(" (Speech2Text2 model)"),fWe=l(),Om=a("li"),Moe=a("strong"),mWe=o("splinter"),gWe=o(" \u2014 "),Nk=a("a"),hWe=o("SplinterConfig"),pWe=o(" (Splinter model)"),uWe=l(),Vm=a("li"),Eoe=a("strong"),_We=o("squeezebert"),bWe=o(" \u2014 "),jk=a("a"),vWe=o("SqueezeBertConfig"),FWe=o(" (SqueezeBERT model)"),TWe=l(),Xm=a("li"),Coe=a("strong"),MWe=o("swin"),EWe=o(" \u2014 "),Dk=a("a"),CWe=o("SwinConfig"),wWe=o(" (Swin model)"),AWe=l(),zm=a("li"),woe=a("strong"),yWe=o("t5"),LWe=o(" \u2014 "),Gk=a("a"),xWe=o("T5Config"),$We=o(" (T5 model)"),kWe=l(),Qm=a("li"),Aoe=a("strong"),SWe=o("tapas"),RWe=o(" \u2014 "),Ok=a("a"),BWe=o("TapasConfig"),PWe=o(" (TAPAS model)"),IWe=l(),Wm=a("li"),yoe=a("strong"),qWe=o("tapex"),NWe=o(" \u2014 "),Vk=a("a"),jWe=o("BartConfig"),DWe=o(" (TAPEX model)"),GWe=l(),Hm=a("li"),Loe=a("strong"),OWe=o("transfo-xl"),VWe=o(" \u2014 "),Xk=a("a"),XWe=o("TransfoXLConfig"),zWe=o(" (Transformer-XL model)"),QWe=l(),Um=a("li"),xoe=a("strong"),WWe=o("trocr"),HWe=o(" \u2014 "),zk=a("a"),UWe=o("TrOCRConfig"),JWe=o(" (TrOCR model)"),YWe=l(),Jm=a("li"),$oe=a("strong"),KWe=o("unispeech"),ZWe=o(" \u2014 "),Qk=a("a"),eHe=o("UniSpeechConfig"),oHe=o(" (UniSpeech model)"),rHe=l(),Ym=a("li"),koe=a("strong"),tHe=o("unispeech-sat"),aHe=o(" \u2014 "),Wk=a("a"),nHe=o("UniSpeechSatConfig"),sHe=o(" (UniSpeechSat model)"),lHe=l(),Km=a("li"),Soe=a("strong"),iHe=o("van"),dHe=o(" \u2014 "),Hk=a("a"),cHe=o("VanConfig"),fHe=o(" (VAN model)"),mHe=l(),Zm=a("li"),Roe=a("strong"),gHe=o("vilt"),hHe=o(" \u2014 "),Uk=a("a"),pHe=o("ViltConfig"),uHe=o(" (ViLT model)"),_He=l(),eg=a("li"),Boe=a("strong"),bHe=o("vision-encoder-decoder"),vHe=o(" \u2014 "),Jk=a("a"),FHe=o("VisionEncoderDecoderConfig"),THe=o(" (Vision Encoder decoder model)"),MHe=l(),og=a("li"),Poe=a("strong"),EHe=o("vision-text-dual-encoder"),CHe=o(" \u2014 "),Yk=a("a"),wHe=o("VisionTextDualEncoderConfig"),AHe=o(" (VisionTextDualEncoder model)"),yHe=l(),rg=a("li"),Ioe=a("strong"),LHe=o("visual_bert"),xHe=o(" \u2014 "),Kk=a("a"),$He=o("VisualBertConfig"),kHe=o(" (VisualBert model)"),SHe=l(),tg=a("li"),qoe=a("strong"),RHe=o("vit"),BHe=o(" \u2014 "),Zk=a("a"),PHe=o("ViTConfig"),IHe=o(" (ViT model)"),qHe=l(),ag=a("li"),Noe=a("strong"),NHe=o("vit_mae"),jHe=o(" \u2014 "),eS=a("a"),DHe=o("ViTMAEConfig"),GHe=o(" (ViTMAE model)"),OHe=l(),ng=a("li"),joe=a("strong"),VHe=o("wav2vec2"),XHe=o(" \u2014 "),oS=a("a"),zHe=o("Wav2Vec2Config"),QHe=o(" (Wav2Vec2 model)"),WHe=l(),sg=a("li"),Doe=a("strong"),HHe=o("wavlm"),UHe=o(" \u2014 "),rS=a("a"),JHe=o("WavLMConfig"),YHe=o(" (WavLM model)"),KHe=l(),lg=a("li"),Goe=a("strong"),ZHe=o("xglm"),eUe=o(" \u2014 "),tS=a("a"),oUe=o("XGLMConfig"),rUe=o(" (XGLM model)"),tUe=l(),ig=a("li"),Ooe=a("strong"),aUe=o("xlm"),nUe=o(" \u2014 "),aS=a("a"),sUe=o("XLMConfig"),lUe=o(" (XLM model)"),iUe=l(),dg=a("li"),Voe=a("strong"),dUe=o("xlm-prophetnet"),cUe=o(" \u2014 "),nS=a("a"),fUe=o("XLMProphetNetConfig"),mUe=o(" (XLMProphetNet model)"),gUe=l(),cg=a("li"),Xoe=a("strong"),hUe=o("xlm-roberta"),pUe=o(" \u2014 "),sS=a("a"),uUe=o("XLMRobertaConfig"),_Ue=o(" (XLM-RoBERTa model)"),bUe=l(),fg=a("li"),zoe=a("strong"),vUe=o("xlm-roberta-xl"),FUe=o(" \u2014 "),lS=a("a"),TUe=o("XLMRobertaXLConfig"),MUe=o(" (XLM-RoBERTa-XL model)"),EUe=l(),mg=a("li"),Qoe=a("strong"),CUe=o("xlnet"),wUe=o(" \u2014 "),iS=a("a"),AUe=o("XLNetConfig"),yUe=o(" (XLNet model)"),LUe=l(),gg=a("li"),Woe=a("strong"),xUe=o("yolos"),$Ue=o(" \u2014 "),dS=a("a"),kUe=o("YolosConfig"),SUe=o(" (YOLOS model)"),RUe=l(),hg=a("li"),Hoe=a("strong"),BUe=o("yoso"),PUe=o(" \u2014 "),cS=a("a"),IUe=o("YosoConfig"),qUe=o(" (YOSO model)"),NUe=l(),F(pg.$$.fragment),jUe=l(),ug=a("div"),F(KA.$$.fragment),DUe=l(),Uoe=a("p"),GUe=o("Register a new configuration for this class."),APe=l(),_i=a("h2"),_g=a("a"),Joe=a("span"),F(ZA.$$.fragment),OUe=l(),Yoe=a("span"),VUe=o("AutoTokenizer"),yPe=l(),wo=a("div"),F(ey.$$.fragment),XUe=l(),oy=a("p"),zUe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),fS=a("a"),QUe=o("AutoTokenizer.from_pretrained()"),WUe=o(" class method."),HUe=l(),ry=a("p"),UUe=o("This class cannot be instantiated directly using "),Koe=a("code"),JUe=o("__init__()"),YUe=o(" (throws an error)."),KUe=l(),Cr=a("div"),F(ty.$$.fragment),ZUe=l(),Zoe=a("p"),eJe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),oJe=l(),Ca=a("p"),rJe=o("The tokenizer class to instantiate is selected based on the "),ere=a("code"),tJe=o("model_type"),aJe=o(` property of the config object (either
passed as an argument or loaded from `),ore=a("code"),nJe=o("pretrained_model_name_or_path"),sJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rre=a("code"),lJe=o("pretrained_model_name_or_path"),iJe=o(":"),dJe=l(),k=a("ul"),kn=a("li"),tre=a("strong"),cJe=o("albert"),fJe=o(" \u2014 "),mS=a("a"),mJe=o("AlbertTokenizer"),gJe=o(" or "),gS=a("a"),hJe=o("AlbertTokenizerFast"),pJe=o(" (ALBERT model)"),uJe=l(),Sn=a("li"),are=a("strong"),_Je=o("bart"),bJe=o(" \u2014 "),hS=a("a"),vJe=o("BartTokenizer"),FJe=o(" or "),pS=a("a"),TJe=o("BartTokenizerFast"),MJe=o(" (BART model)"),EJe=l(),Rn=a("li"),nre=a("strong"),CJe=o("barthez"),wJe=o(" \u2014 "),uS=a("a"),AJe=o("BarthezTokenizer"),yJe=o(" or "),_S=a("a"),LJe=o("BarthezTokenizerFast"),xJe=o(" (BARThez model)"),$Je=l(),bg=a("li"),sre=a("strong"),kJe=o("bartpho"),SJe=o(" \u2014 "),bS=a("a"),RJe=o("BartphoTokenizer"),BJe=o(" (BARTpho model)"),PJe=l(),Bn=a("li"),lre=a("strong"),IJe=o("bert"),qJe=o(" \u2014 "),vS=a("a"),NJe=o("BertTokenizer"),jJe=o(" or "),FS=a("a"),DJe=o("BertTokenizerFast"),GJe=o(" (BERT model)"),OJe=l(),vg=a("li"),ire=a("strong"),VJe=o("bert-generation"),XJe=o(" \u2014 "),TS=a("a"),zJe=o("BertGenerationTokenizer"),QJe=o(" (Bert Generation model)"),WJe=l(),Fg=a("li"),dre=a("strong"),HJe=o("bert-japanese"),UJe=o(" \u2014 "),MS=a("a"),JJe=o("BertJapaneseTokenizer"),YJe=o(" (BertJapanese model)"),KJe=l(),Tg=a("li"),cre=a("strong"),ZJe=o("bertweet"),eYe=o(" \u2014 "),ES=a("a"),oYe=o("BertweetTokenizer"),rYe=o(" (Bertweet model)"),tYe=l(),Pn=a("li"),fre=a("strong"),aYe=o("big_bird"),nYe=o(" \u2014 "),CS=a("a"),sYe=o("BigBirdTokenizer"),lYe=o(" or "),wS=a("a"),iYe=o("BigBirdTokenizerFast"),dYe=o(" (BigBird model)"),cYe=l(),In=a("li"),mre=a("strong"),fYe=o("bigbird_pegasus"),mYe=o(" \u2014 "),AS=a("a"),gYe=o("PegasusTokenizer"),hYe=o(" or "),yS=a("a"),pYe=o("PegasusTokenizerFast"),uYe=o(" (BigBirdPegasus model)"),_Ye=l(),qn=a("li"),gre=a("strong"),bYe=o("blenderbot"),vYe=o(" \u2014 "),LS=a("a"),FYe=o("BlenderbotTokenizer"),TYe=o(" or "),xS=a("a"),MYe=o("BlenderbotTokenizerFast"),EYe=o(" (Blenderbot model)"),CYe=l(),Mg=a("li"),hre=a("strong"),wYe=o("blenderbot-small"),AYe=o(" \u2014 "),$S=a("a"),yYe=o("BlenderbotSmallTokenizer"),LYe=o(" (BlenderbotSmall model)"),xYe=l(),Eg=a("li"),pre=a("strong"),$Ye=o("byt5"),kYe=o(" \u2014 "),kS=a("a"),SYe=o("ByT5Tokenizer"),RYe=o(" (ByT5 model)"),BYe=l(),Nn=a("li"),ure=a("strong"),PYe=o("camembert"),IYe=o(" \u2014 "),SS=a("a"),qYe=o("CamembertTokenizer"),NYe=o(" or "),RS=a("a"),jYe=o("CamembertTokenizerFast"),DYe=o(" (CamemBERT model)"),GYe=l(),Cg=a("li"),_re=a("strong"),OYe=o("canine"),VYe=o(" \u2014 "),BS=a("a"),XYe=o("CanineTokenizer"),zYe=o(" (Canine model)"),QYe=l(),jn=a("li"),bre=a("strong"),WYe=o("clip"),HYe=o(" \u2014 "),PS=a("a"),UYe=o("CLIPTokenizer"),JYe=o(" or "),IS=a("a"),YYe=o("CLIPTokenizerFast"),KYe=o(" (CLIP model)"),ZYe=l(),Dn=a("li"),vre=a("strong"),eKe=o("convbert"),oKe=o(" \u2014 "),qS=a("a"),rKe=o("ConvBertTokenizer"),tKe=o(" or "),NS=a("a"),aKe=o("ConvBertTokenizerFast"),nKe=o(" (ConvBERT model)"),sKe=l(),Gn=a("li"),Fre=a("strong"),lKe=o("cpm"),iKe=o(" \u2014 "),jS=a("a"),dKe=o("CpmTokenizer"),cKe=o(" or "),DS=a("a"),fKe=o("CpmTokenizerFast"),mKe=o(" (CPM model)"),gKe=l(),wg=a("li"),Tre=a("strong"),hKe=o("ctrl"),pKe=o(" \u2014 "),GS=a("a"),uKe=o("CTRLTokenizer"),_Ke=o(" (CTRL model)"),bKe=l(),On=a("li"),Mre=a("strong"),vKe=o("data2vec-text"),FKe=o(" \u2014 "),OS=a("a"),TKe=o("RobertaTokenizer"),MKe=o(" or "),VS=a("a"),EKe=o("RobertaTokenizerFast"),CKe=o(" (Data2VecText model)"),wKe=l(),Vn=a("li"),Ere=a("strong"),AKe=o("deberta"),yKe=o(" \u2014 "),XS=a("a"),LKe=o("DebertaTokenizer"),xKe=o(" or "),zS=a("a"),$Ke=o("DebertaTokenizerFast"),kKe=o(" (DeBERTa model)"),SKe=l(),Xn=a("li"),Cre=a("strong"),RKe=o("deberta-v2"),BKe=o(" \u2014 "),QS=a("a"),PKe=o("DebertaV2Tokenizer"),IKe=o(" or "),WS=a("a"),qKe=o("DebertaV2TokenizerFast"),NKe=o(" (DeBERTa-v2 model)"),jKe=l(),zn=a("li"),wre=a("strong"),DKe=o("distilbert"),GKe=o(" \u2014 "),HS=a("a"),OKe=o("DistilBertTokenizer"),VKe=o(" or "),US=a("a"),XKe=o("DistilBertTokenizerFast"),zKe=o(" (DistilBERT model)"),QKe=l(),Qn=a("li"),Are=a("strong"),WKe=o("dpr"),HKe=o(" \u2014 "),JS=a("a"),UKe=o("DPRQuestionEncoderTokenizer"),JKe=o(" or "),YS=a("a"),YKe=o("DPRQuestionEncoderTokenizerFast"),KKe=o(" (DPR model)"),ZKe=l(),Wn=a("li"),yre=a("strong"),eZe=o("electra"),oZe=o(" \u2014 "),KS=a("a"),rZe=o("ElectraTokenizer"),tZe=o(" or "),ZS=a("a"),aZe=o("ElectraTokenizerFast"),nZe=o(" (ELECTRA model)"),sZe=l(),Ag=a("li"),Lre=a("strong"),lZe=o("flaubert"),iZe=o(" \u2014 "),eR=a("a"),dZe=o("FlaubertTokenizer"),cZe=o(" (FlauBERT model)"),fZe=l(),Hn=a("li"),xre=a("strong"),mZe=o("fnet"),gZe=o(" \u2014 "),oR=a("a"),hZe=o("FNetTokenizer"),pZe=o(" or "),rR=a("a"),uZe=o("FNetTokenizerFast"),_Ze=o(" (FNet model)"),bZe=l(),yg=a("li"),$re=a("strong"),vZe=o("fsmt"),FZe=o(" \u2014 "),tR=a("a"),TZe=o("FSMTTokenizer"),MZe=o(" (FairSeq Machine-Translation model)"),EZe=l(),Un=a("li"),kre=a("strong"),CZe=o("funnel"),wZe=o(" \u2014 "),aR=a("a"),AZe=o("FunnelTokenizer"),yZe=o(" or "),nR=a("a"),LZe=o("FunnelTokenizerFast"),xZe=o(" (Funnel Transformer model)"),$Ze=l(),Jn=a("li"),Sre=a("strong"),kZe=o("gpt2"),SZe=o(" \u2014 "),sR=a("a"),RZe=o("GPT2Tokenizer"),BZe=o(" or "),lR=a("a"),PZe=o("GPT2TokenizerFast"),IZe=o(" (OpenAI GPT-2 model)"),qZe=l(),Yn=a("li"),Rre=a("strong"),NZe=o("gpt_neo"),jZe=o(" \u2014 "),iR=a("a"),DZe=o("GPT2Tokenizer"),GZe=o(" or "),dR=a("a"),OZe=o("GPT2TokenizerFast"),VZe=o(" (GPT Neo model)"),XZe=l(),Kn=a("li"),Bre=a("strong"),zZe=o("gptj"),QZe=o(" \u2014 "),cR=a("a"),WZe=o("GPT2Tokenizer"),HZe=o(" or "),fR=a("a"),UZe=o("GPT2TokenizerFast"),JZe=o(" (GPT-J model)"),YZe=l(),Zn=a("li"),Pre=a("strong"),KZe=o("herbert"),ZZe=o(" \u2014 "),mR=a("a"),eeo=o("HerbertTokenizer"),oeo=o(" or "),gR=a("a"),reo=o("HerbertTokenizerFast"),teo=o(" (HerBERT model)"),aeo=l(),Lg=a("li"),Ire=a("strong"),neo=o("hubert"),seo=o(" \u2014 "),hR=a("a"),leo=o("Wav2Vec2CTCTokenizer"),ieo=o(" (Hubert model)"),deo=l(),es=a("li"),qre=a("strong"),ceo=o("ibert"),feo=o(" \u2014 "),pR=a("a"),meo=o("RobertaTokenizer"),geo=o(" or "),uR=a("a"),heo=o("RobertaTokenizerFast"),peo=o(" (I-BERT model)"),ueo=l(),os=a("li"),Nre=a("strong"),_eo=o("layoutlm"),beo=o(" \u2014 "),_R=a("a"),veo=o("LayoutLMTokenizer"),Feo=o(" or "),bR=a("a"),Teo=o("LayoutLMTokenizerFast"),Meo=o(" (LayoutLM model)"),Eeo=l(),rs=a("li"),jre=a("strong"),Ceo=o("layoutlmv2"),weo=o(" \u2014 "),vR=a("a"),Aeo=o("LayoutLMv2Tokenizer"),yeo=o(" or "),FR=a("a"),Leo=o("LayoutLMv2TokenizerFast"),xeo=o(" (LayoutLMv2 model)"),$eo=l(),ts=a("li"),Dre=a("strong"),keo=o("layoutxlm"),Seo=o(" \u2014 "),TR=a("a"),Reo=o("LayoutXLMTokenizer"),Beo=o(" or "),MR=a("a"),Peo=o("LayoutXLMTokenizerFast"),Ieo=o(" (LayoutXLM model)"),qeo=l(),as=a("li"),Gre=a("strong"),Neo=o("led"),jeo=o(" \u2014 "),ER=a("a"),Deo=o("LEDTokenizer"),Geo=o(" or "),CR=a("a"),Oeo=o("LEDTokenizerFast"),Veo=o(" (LED model)"),Xeo=l(),ns=a("li"),Ore=a("strong"),zeo=o("longformer"),Qeo=o(" \u2014 "),wR=a("a"),Weo=o("LongformerTokenizer"),Heo=o(" or "),AR=a("a"),Ueo=o("LongformerTokenizerFast"),Jeo=o(" (Longformer model)"),Yeo=l(),xg=a("li"),Vre=a("strong"),Keo=o("luke"),Zeo=o(" \u2014 "),yR=a("a"),eoo=o("LukeTokenizer"),ooo=o(" (LUKE model)"),roo=l(),ss=a("li"),Xre=a("strong"),too=o("lxmert"),aoo=o(" \u2014 "),LR=a("a"),noo=o("LxmertTokenizer"),soo=o(" or "),xR=a("a"),loo=o("LxmertTokenizerFast"),ioo=o(" (LXMERT model)"),doo=l(),$g=a("li"),zre=a("strong"),coo=o("m2m_100"),foo=o(" \u2014 "),$R=a("a"),moo=o("M2M100Tokenizer"),goo=o(" (M2M100 model)"),hoo=l(),kg=a("li"),Qre=a("strong"),poo=o("marian"),uoo=o(" \u2014 "),kR=a("a"),_oo=o("MarianTokenizer"),boo=o(" (Marian model)"),voo=l(),ls=a("li"),Wre=a("strong"),Foo=o("mbart"),Too=o(" \u2014 "),SR=a("a"),Moo=o("MBartTokenizer"),Eoo=o(" or "),RR=a("a"),Coo=o("MBartTokenizerFast"),woo=o(" (mBART model)"),Aoo=l(),is=a("li"),Hre=a("strong"),yoo=o("mbart50"),Loo=o(" \u2014 "),BR=a("a"),xoo=o("MBart50Tokenizer"),$oo=o(" or "),PR=a("a"),koo=o("MBart50TokenizerFast"),Soo=o(" (mBART-50 model)"),Roo=l(),ds=a("li"),Ure=a("strong"),Boo=o("megatron-bert"),Poo=o(" \u2014 "),IR=a("a"),Ioo=o("BertTokenizer"),qoo=o(" or "),qR=a("a"),Noo=o("BertTokenizerFast"),joo=o(" (MegatronBert model)"),Doo=l(),Sg=a("li"),Jre=a("strong"),Goo=o("mluke"),Ooo=o(" \u2014 "),NR=a("a"),Voo=o("MLukeTokenizer"),Xoo=o(" (mLUKE model)"),zoo=l(),cs=a("li"),Yre=a("strong"),Qoo=o("mobilebert"),Woo=o(" \u2014 "),jR=a("a"),Hoo=o("MobileBertTokenizer"),Uoo=o(" or "),DR=a("a"),Joo=o("MobileBertTokenizerFast"),Yoo=o(" (MobileBERT model)"),Koo=l(),fs=a("li"),Kre=a("strong"),Zoo=o("mpnet"),ero=o(" \u2014 "),GR=a("a"),oro=o("MPNetTokenizer"),rro=o(" or "),OR=a("a"),tro=o("MPNetTokenizerFast"),aro=o(" (MPNet model)"),nro=l(),ms=a("li"),Zre=a("strong"),sro=o("mt5"),lro=o(" \u2014 "),VR=a("a"),iro=o("MT5Tokenizer"),dro=o(" or "),XR=a("a"),cro=o("MT5TokenizerFast"),fro=o(" (mT5 model)"),mro=l(),gs=a("li"),ete=a("strong"),gro=o("nystromformer"),hro=o(" \u2014 "),zR=a("a"),pro=o("AlbertTokenizer"),uro=o(" or "),QR=a("a"),_ro=o("AlbertTokenizerFast"),bro=o(" (Nystromformer model)"),vro=l(),hs=a("li"),ote=a("strong"),Fro=o("openai-gpt"),Tro=o(" \u2014 "),WR=a("a"),Mro=o("OpenAIGPTTokenizer"),Ero=o(" or "),HR=a("a"),Cro=o("OpenAIGPTTokenizerFast"),wro=o(" (OpenAI GPT model)"),Aro=l(),ps=a("li"),rte=a("strong"),yro=o("pegasus"),Lro=o(" \u2014 "),UR=a("a"),xro=o("PegasusTokenizer"),$ro=o(" or "),JR=a("a"),kro=o("PegasusTokenizerFast"),Sro=o(" (Pegasus model)"),Rro=l(),Rg=a("li"),tte=a("strong"),Bro=o("perceiver"),Pro=o(" \u2014 "),YR=a("a"),Iro=o("PerceiverTokenizer"),qro=o(" (Perceiver model)"),Nro=l(),Bg=a("li"),ate=a("strong"),jro=o("phobert"),Dro=o(" \u2014 "),KR=a("a"),Gro=o("PhobertTokenizer"),Oro=o(" (PhoBERT model)"),Vro=l(),Pg=a("li"),nte=a("strong"),Xro=o("plbart"),zro=o(" \u2014 "),ZR=a("a"),Qro=o("PLBartTokenizer"),Wro=o(" (PLBart model)"),Hro=l(),Ig=a("li"),ste=a("strong"),Uro=o("prophetnet"),Jro=o(" \u2014 "),eB=a("a"),Yro=o("ProphetNetTokenizer"),Kro=o(" (ProphetNet model)"),Zro=l(),us=a("li"),lte=a("strong"),eto=o("qdqbert"),oto=o(" \u2014 "),oB=a("a"),rto=o("BertTokenizer"),tto=o(" or "),rB=a("a"),ato=o("BertTokenizerFast"),nto=o(" (QDQBert model)"),sto=l(),qg=a("li"),ite=a("strong"),lto=o("rag"),ito=o(" \u2014 "),tB=a("a"),dto=o("RagTokenizer"),cto=o(" (RAG model)"),fto=l(),_s=a("li"),dte=a("strong"),mto=o("realm"),gto=o(" \u2014 "),aB=a("a"),hto=o("RealmTokenizer"),pto=o(" or "),nB=a("a"),uto=o("RealmTokenizerFast"),_to=o(" (Realm model)"),bto=l(),bs=a("li"),cte=a("strong"),vto=o("reformer"),Fto=o(" \u2014 "),sB=a("a"),Tto=o("ReformerTokenizer"),Mto=o(" or "),lB=a("a"),Eto=o("ReformerTokenizerFast"),Cto=o(" (Reformer model)"),wto=l(),vs=a("li"),fte=a("strong"),Ato=o("rembert"),yto=o(" \u2014 "),iB=a("a"),Lto=o("RemBertTokenizer"),xto=o(" or "),dB=a("a"),$to=o("RemBertTokenizerFast"),kto=o(" (RemBERT model)"),Sto=l(),Fs=a("li"),mte=a("strong"),Rto=o("retribert"),Bto=o(" \u2014 "),cB=a("a"),Pto=o("RetriBertTokenizer"),Ito=o(" or "),fB=a("a"),qto=o("RetriBertTokenizerFast"),Nto=o(" (RetriBERT model)"),jto=l(),Ts=a("li"),gte=a("strong"),Dto=o("roberta"),Gto=o(" \u2014 "),mB=a("a"),Oto=o("RobertaTokenizer"),Vto=o(" or "),gB=a("a"),Xto=o("RobertaTokenizerFast"),zto=o(" (RoBERTa model)"),Qto=l(),Ms=a("li"),hte=a("strong"),Wto=o("roformer"),Hto=o(" \u2014 "),hB=a("a"),Uto=o("RoFormerTokenizer"),Jto=o(" or "),pB=a("a"),Yto=o("RoFormerTokenizerFast"),Kto=o(" (RoFormer model)"),Zto=l(),Ng=a("li"),pte=a("strong"),eao=o("speech_to_text"),oao=o(" \u2014 "),uB=a("a"),rao=o("Speech2TextTokenizer"),tao=o(" (Speech2Text model)"),aao=l(),jg=a("li"),ute=a("strong"),nao=o("speech_to_text_2"),sao=o(" \u2014 "),_B=a("a"),lao=o("Speech2Text2Tokenizer"),iao=o(" (Speech2Text2 model)"),dao=l(),Es=a("li"),_te=a("strong"),cao=o("splinter"),fao=o(" \u2014 "),bB=a("a"),mao=o("SplinterTokenizer"),gao=o(" or "),vB=a("a"),hao=o("SplinterTokenizerFast"),pao=o(" (Splinter model)"),uao=l(),Cs=a("li"),bte=a("strong"),_ao=o("squeezebert"),bao=o(" \u2014 "),FB=a("a"),vao=o("SqueezeBertTokenizer"),Fao=o(" or "),TB=a("a"),Tao=o("SqueezeBertTokenizerFast"),Mao=o(" (SqueezeBERT model)"),Eao=l(),ws=a("li"),vte=a("strong"),Cao=o("t5"),wao=o(" \u2014 "),MB=a("a"),Aao=o("T5Tokenizer"),yao=o(" or "),EB=a("a"),Lao=o("T5TokenizerFast"),xao=o(" (T5 model)"),$ao=l(),Dg=a("li"),Fte=a("strong"),kao=o("tapas"),Sao=o(" \u2014 "),CB=a("a"),Rao=o("TapasTokenizer"),Bao=o(" (TAPAS model)"),Pao=l(),Gg=a("li"),Tte=a("strong"),Iao=o("tapex"),qao=o(" \u2014 "),wB=a("a"),Nao=o("TapexTokenizer"),jao=o(" (TAPEX model)"),Dao=l(),Og=a("li"),Mte=a("strong"),Gao=o("transfo-xl"),Oao=o(" \u2014 "),AB=a("a"),Vao=o("TransfoXLTokenizer"),Xao=o(" (Transformer-XL model)"),zao=l(),As=a("li"),Ete=a("strong"),Qao=o("visual_bert"),Wao=o(" \u2014 "),yB=a("a"),Hao=o("BertTokenizer"),Uao=o(" or "),LB=a("a"),Jao=o("BertTokenizerFast"),Yao=o(" (VisualBert model)"),Kao=l(),Vg=a("li"),Cte=a("strong"),Zao=o("wav2vec2"),eno=o(" \u2014 "),xB=a("a"),ono=o("Wav2Vec2CTCTokenizer"),rno=o(" (Wav2Vec2 model)"),tno=l(),Xg=a("li"),wte=a("strong"),ano=o("wav2vec2_phoneme"),nno=o(" \u2014 "),$B=a("a"),sno=o("Wav2Vec2PhonemeCTCTokenizer"),lno=o(" (Wav2Vec2Phoneme model)"),ino=l(),ys=a("li"),Ate=a("strong"),dno=o("xglm"),cno=o(" \u2014 "),kB=a("a"),fno=o("XGLMTokenizer"),mno=o(" or "),SB=a("a"),gno=o("XGLMTokenizerFast"),hno=o(" (XGLM model)"),pno=l(),zg=a("li"),yte=a("strong"),uno=o("xlm"),_no=o(" \u2014 "),RB=a("a"),bno=o("XLMTokenizer"),vno=o(" (XLM model)"),Fno=l(),Qg=a("li"),Lte=a("strong"),Tno=o("xlm-prophetnet"),Mno=o(" \u2014 "),BB=a("a"),Eno=o("XLMProphetNetTokenizer"),Cno=o(" (XLMProphetNet model)"),wno=l(),Ls=a("li"),xte=a("strong"),Ano=o("xlm-roberta"),yno=o(" \u2014 "),PB=a("a"),Lno=o("XLMRobertaTokenizer"),xno=o(" or "),IB=a("a"),$no=o("XLMRobertaTokenizerFast"),kno=o(" (XLM-RoBERTa model)"),Sno=l(),xs=a("li"),$te=a("strong"),Rno=o("xlm-roberta-xl"),Bno=o(" \u2014 "),qB=a("a"),Pno=o("RobertaTokenizer"),Ino=o(" or "),NB=a("a"),qno=o("RobertaTokenizerFast"),Nno=o(" (XLM-RoBERTa-XL model)"),jno=l(),$s=a("li"),kte=a("strong"),Dno=o("xlnet"),Gno=o(" \u2014 "),jB=a("a"),Ono=o("XLNetTokenizer"),Vno=o(" or "),DB=a("a"),Xno=o("XLNetTokenizerFast"),zno=o(" (XLNet model)"),Qno=l(),ks=a("li"),Ste=a("strong"),Wno=o("yoso"),Hno=o(" \u2014 "),GB=a("a"),Uno=o("AlbertTokenizer"),Jno=o(" or "),OB=a("a"),Yno=o("AlbertTokenizerFast"),Kno=o(" (YOSO model)"),Zno=l(),F(Wg.$$.fragment),eso=l(),Hg=a("div"),F(ay.$$.fragment),oso=l(),Rte=a("p"),rso=o("Register a new tokenizer in this mapping."),LPe=l(),bi=a("h2"),Ug=a("a"),Bte=a("span"),F(ny.$$.fragment),tso=l(),Pte=a("span"),aso=o("AutoFeatureExtractor"),xPe=l(),Ao=a("div"),F(sy.$$.fragment),nso=l(),ly=a("p"),sso=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),VB=a("a"),lso=o("AutoFeatureExtractor.from_pretrained()"),iso=o(" class method."),dso=l(),iy=a("p"),cso=o("This class cannot be instantiated directly using "),Ite=a("code"),fso=o("__init__()"),mso=o(" (throws an error)."),gso=l(),We=a("div"),F(dy.$$.fragment),hso=l(),qte=a("p"),pso=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),uso=l(),wa=a("p"),_so=o("The feature extractor class to instantiate is selected based on the "),Nte=a("code"),bso=o("model_type"),vso=o(` property of the config object
(either passed as an argument or loaded from `),jte=a("code"),Fso=o("pretrained_model_name_or_path"),Tso=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Dte=a("code"),Mso=o("pretrained_model_name_or_path"),Eso=o(":"),Cso=l(),oe=a("ul"),Jg=a("li"),Gte=a("strong"),wso=o("beit"),Aso=o(" \u2014 "),XB=a("a"),yso=o("BeitFeatureExtractor"),Lso=o(" (BEiT model)"),xso=l(),Yg=a("li"),Ote=a("strong"),$so=o("clip"),kso=o(" \u2014 "),zB=a("a"),Sso=o("CLIPFeatureExtractor"),Rso=o(" (CLIP model)"),Bso=l(),Kg=a("li"),Vte=a("strong"),Pso=o("convnext"),Iso=o(" \u2014 "),QB=a("a"),qso=o("ConvNextFeatureExtractor"),Nso=o(" (ConvNext model)"),jso=l(),Zg=a("li"),Xte=a("strong"),Dso=o("data2vec-audio"),Gso=o(" \u2014 "),WB=a("a"),Oso=o("Wav2Vec2FeatureExtractor"),Vso=o(" (Data2VecAudio model)"),Xso=l(),eh=a("li"),zte=a("strong"),zso=o("data2vec-vision"),Qso=o(" \u2014 "),HB=a("a"),Wso=o("BeitFeatureExtractor"),Hso=o(" (Data2VecVision model)"),Uso=l(),oh=a("li"),Qte=a("strong"),Jso=o("deit"),Yso=o(" \u2014 "),UB=a("a"),Kso=o("DeiTFeatureExtractor"),Zso=o(" (DeiT model)"),elo=l(),rh=a("li"),Wte=a("strong"),olo=o("detr"),rlo=o(" \u2014 "),JB=a("a"),tlo=o("DetrFeatureExtractor"),alo=o(" (DETR model)"),nlo=l(),th=a("li"),Hte=a("strong"),slo=o("dpt"),llo=o(" \u2014 "),YB=a("a"),ilo=o("DPTFeatureExtractor"),dlo=o(" (DPT model)"),clo=l(),ah=a("li"),Ute=a("strong"),flo=o("glpn"),mlo=o(" \u2014 "),KB=a("a"),glo=o("GLPNFeatureExtractor"),hlo=o(" (GLPN model)"),plo=l(),nh=a("li"),Jte=a("strong"),ulo=o("hubert"),_lo=o(" \u2014 "),ZB=a("a"),blo=o("Wav2Vec2FeatureExtractor"),vlo=o(" (Hubert model)"),Flo=l(),sh=a("li"),Yte=a("strong"),Tlo=o("layoutlmv2"),Mlo=o(" \u2014 "),eP=a("a"),Elo=o("LayoutLMv2FeatureExtractor"),Clo=o(" (LayoutLMv2 model)"),wlo=l(),lh=a("li"),Kte=a("strong"),Alo=o("maskformer"),ylo=o(" \u2014 "),oP=a("a"),Llo=o("MaskFormerFeatureExtractor"),xlo=o(" (MaskFormer model)"),$lo=l(),ih=a("li"),Zte=a("strong"),klo=o("mctct"),Slo=o(" \u2014 "),rP=a("a"),Rlo=o("MCTCTFeatureExtractor"),Blo=o(" (MCTCT model)"),Plo=l(),dh=a("li"),eae=a("strong"),Ilo=o("perceiver"),qlo=o(" \u2014 "),tP=a("a"),Nlo=o("PerceiverFeatureExtractor"),jlo=o(" (Perceiver model)"),Dlo=l(),ch=a("li"),oae=a("strong"),Glo=o("poolformer"),Olo=o(" \u2014 "),aP=a("a"),Vlo=o("PoolFormerFeatureExtractor"),Xlo=o(" (PoolFormer model)"),zlo=l(),fh=a("li"),rae=a("strong"),Qlo=o("regnet"),Wlo=o(" \u2014 "),nP=a("a"),Hlo=o("ConvNextFeatureExtractor"),Ulo=o(" (RegNet model)"),Jlo=l(),mh=a("li"),tae=a("strong"),Ylo=o("resnet"),Klo=o(" \u2014 "),sP=a("a"),Zlo=o("ConvNextFeatureExtractor"),eio=o(" (ResNet model)"),oio=l(),gh=a("li"),aae=a("strong"),rio=o("segformer"),tio=o(" \u2014 "),lP=a("a"),aio=o("SegformerFeatureExtractor"),nio=o(" (SegFormer model)"),sio=l(),hh=a("li"),nae=a("strong"),lio=o("speech_to_text"),iio=o(" \u2014 "),iP=a("a"),dio=o("Speech2TextFeatureExtractor"),cio=o(" (Speech2Text model)"),fio=l(),ph=a("li"),sae=a("strong"),mio=o("swin"),gio=o(" \u2014 "),dP=a("a"),hio=o("ViTFeatureExtractor"),pio=o(" (Swin model)"),uio=l(),uh=a("li"),lae=a("strong"),_io=o("van"),bio=o(" \u2014 "),cP=a("a"),vio=o("ConvNextFeatureExtractor"),Fio=o(" (VAN model)"),Tio=l(),_h=a("li"),iae=a("strong"),Mio=o("vit"),Eio=o(" \u2014 "),fP=a("a"),Cio=o("ViTFeatureExtractor"),wio=o(" (ViT model)"),Aio=l(),bh=a("li"),dae=a("strong"),yio=o("vit_mae"),Lio=o(" \u2014 "),mP=a("a"),xio=o("ViTFeatureExtractor"),$io=o(" (ViTMAE model)"),kio=l(),vh=a("li"),cae=a("strong"),Sio=o("wav2vec2"),Rio=o(" \u2014 "),gP=a("a"),Bio=o("Wav2Vec2FeatureExtractor"),Pio=o(" (Wav2Vec2 model)"),Iio=l(),Fh=a("li"),fae=a("strong"),qio=o("yolos"),Nio=o(" \u2014 "),hP=a("a"),jio=o("YolosFeatureExtractor"),Dio=o(" (YOLOS model)"),Gio=l(),F(Th.$$.fragment),Oio=l(),F(Mh.$$.fragment),Vio=l(),Eh=a("div"),F(cy.$$.fragment),Xio=l(),mae=a("p"),zio=o("Register a new feature extractor for this class."),$Pe=l(),vi=a("h2"),Ch=a("a"),gae=a("span"),F(fy.$$.fragment),Qio=l(),hae=a("span"),Wio=o("AutoProcessor"),kPe=l(),yo=a("div"),F(my.$$.fragment),Hio=l(),gy=a("p"),Uio=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),pP=a("a"),Jio=o("AutoProcessor.from_pretrained()"),Yio=o(" class method."),Kio=l(),hy=a("p"),Zio=o("This class cannot be instantiated directly using "),pae=a("code"),edo=o("__init__()"),odo=o(" (throws an error)."),rdo=l(),He=a("div"),F(py.$$.fragment),tdo=l(),uae=a("p"),ado=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ndo=l(),Fi=a("p"),sdo=o("The processor class to instantiate is selected based on the "),_ae=a("code"),ldo=o("model_type"),ido=o(` property of the config object (either
passed as an argument or loaded from `),bae=a("code"),ddo=o("pretrained_model_name_or_path"),cdo=o(" if possible):"),fdo=l(),be=a("ul"),wh=a("li"),vae=a("strong"),mdo=o("clip"),gdo=o(" \u2014 "),uP=a("a"),hdo=o("CLIPProcessor"),pdo=o(" (CLIP model)"),udo=l(),Ah=a("li"),Fae=a("strong"),_do=o("layoutlmv2"),bdo=o(" \u2014 "),_P=a("a"),vdo=o("LayoutLMv2Processor"),Fdo=o(" (LayoutLMv2 model)"),Tdo=l(),yh=a("li"),Tae=a("strong"),Mdo=o("layoutxlm"),Edo=o(" \u2014 "),bP=a("a"),Cdo=o("LayoutXLMProcessor"),wdo=o(" (LayoutXLM model)"),Ado=l(),Lh=a("li"),Mae=a("strong"),ydo=o("sew"),Ldo=o(" \u2014 "),vP=a("a"),xdo=o("Wav2Vec2Processor"),$do=o(" (SEW model)"),kdo=l(),xh=a("li"),Eae=a("strong"),Sdo=o("sew-d"),Rdo=o(" \u2014 "),FP=a("a"),Bdo=o("Wav2Vec2Processor"),Pdo=o(" (SEW-D model)"),Ido=l(),$h=a("li"),Cae=a("strong"),qdo=o("speech_to_text"),Ndo=o(" \u2014 "),TP=a("a"),jdo=o("Speech2TextProcessor"),Ddo=o(" (Speech2Text model)"),Gdo=l(),kh=a("li"),wae=a("strong"),Odo=o("speech_to_text_2"),Vdo=o(" \u2014 "),MP=a("a"),Xdo=o("Speech2Text2Processor"),zdo=o(" (Speech2Text2 model)"),Qdo=l(),Sh=a("li"),Aae=a("strong"),Wdo=o("trocr"),Hdo=o(" \u2014 "),EP=a("a"),Udo=o("TrOCRProcessor"),Jdo=o(" (TrOCR model)"),Ydo=l(),Rh=a("li"),yae=a("strong"),Kdo=o("unispeech"),Zdo=o(" \u2014 "),CP=a("a"),eco=o("Wav2Vec2Processor"),oco=o(" (UniSpeech model)"),rco=l(),Bh=a("li"),Lae=a("strong"),tco=o("unispeech-sat"),aco=o(" \u2014 "),wP=a("a"),nco=o("Wav2Vec2Processor"),sco=o(" (UniSpeechSat model)"),lco=l(),Ph=a("li"),xae=a("strong"),ico=o("vilt"),dco=o(" \u2014 "),AP=a("a"),cco=o("ViltProcessor"),fco=o(" (ViLT model)"),mco=l(),Ih=a("li"),$ae=a("strong"),gco=o("vision-text-dual-encoder"),hco=o(" \u2014 "),yP=a("a"),pco=o("VisionTextDualEncoderProcessor"),uco=o(" (VisionTextDualEncoder model)"),_co=l(),qh=a("li"),kae=a("strong"),bco=o("wav2vec2"),vco=o(" \u2014 "),LP=a("a"),Fco=o("Wav2Vec2Processor"),Tco=o(" (Wav2Vec2 model)"),Mco=l(),Nh=a("li"),Sae=a("strong"),Eco=o("wavlm"),Cco=o(" \u2014 "),xP=a("a"),wco=o("Wav2Vec2Processor"),Aco=o(" (WavLM model)"),yco=l(),F(jh.$$.fragment),Lco=l(),F(Dh.$$.fragment),xco=l(),Gh=a("div"),F(uy.$$.fragment),$co=l(),Rae=a("p"),kco=o("Register a new processor for this class."),SPe=l(),Ti=a("h2"),Oh=a("a"),Bae=a("span"),F(_y.$$.fragment),Sco=l(),Pae=a("span"),Rco=o("AutoModel"),RPe=l(),Lo=a("div"),F(by.$$.fragment),Bco=l(),Mi=a("p"),Pco=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$P=a("a"),Ico=o("from_pretrained()"),qco=o(" class method or the "),kP=a("a"),Nco=o("from_config()"),jco=o(` class
method.`),Dco=l(),vy=a("p"),Gco=o("This class cannot be instantiated directly using "),Iae=a("code"),Oco=o("__init__()"),Vco=o(" (throws an error)."),Xco=l(),ot=a("div"),F(Fy.$$.fragment),zco=l(),qae=a("p"),Qco=o("Instantiates one of the base model classes of the library from a configuration."),Wco=l(),Ei=a("p"),Hco=o(`Note:
Loading a model from its configuration file does `),Nae=a("strong"),Uco=o("not"),Jco=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SP=a("a"),Yco=o("from_pretrained()"),Kco=o(" to load the model weights."),Zco=l(),F(Vh.$$.fragment),efo=l(),Ue=a("div"),F(Ty.$$.fragment),ofo=l(),jae=a("p"),rfo=o("Instantiate one of the base model classes of the library from a pretrained model."),tfo=l(),Aa=a("p"),afo=o("The model class to instantiate is selected based on the "),Dae=a("code"),nfo=o("model_type"),sfo=o(` property of the config object (either
passed as an argument or loaded from `),Gae=a("code"),lfo=o("pretrained_model_name_or_path"),ifo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oae=a("code"),dfo=o("pretrained_model_name_or_path"),cfo=o(":"),ffo=l(),x=a("ul"),Xh=a("li"),Vae=a("strong"),mfo=o("albert"),gfo=o(" \u2014 "),RP=a("a"),hfo=o("AlbertModel"),pfo=o(" (ALBERT model)"),ufo=l(),zh=a("li"),Xae=a("strong"),_fo=o("bart"),bfo=o(" \u2014 "),BP=a("a"),vfo=o("BartModel"),Ffo=o(" (BART model)"),Tfo=l(),Qh=a("li"),zae=a("strong"),Mfo=o("beit"),Efo=o(" \u2014 "),PP=a("a"),Cfo=o("BeitModel"),wfo=o(" (BEiT model)"),Afo=l(),Wh=a("li"),Qae=a("strong"),yfo=o("bert"),Lfo=o(" \u2014 "),IP=a("a"),xfo=o("BertModel"),$fo=o(" (BERT model)"),kfo=l(),Hh=a("li"),Wae=a("strong"),Sfo=o("bert-generation"),Rfo=o(" \u2014 "),qP=a("a"),Bfo=o("BertGenerationEncoder"),Pfo=o(" (Bert Generation model)"),Ifo=l(),Uh=a("li"),Hae=a("strong"),qfo=o("big_bird"),Nfo=o(" \u2014 "),NP=a("a"),jfo=o("BigBirdModel"),Dfo=o(" (BigBird model)"),Gfo=l(),Jh=a("li"),Uae=a("strong"),Ofo=o("bigbird_pegasus"),Vfo=o(" \u2014 "),jP=a("a"),Xfo=o("BigBirdPegasusModel"),zfo=o(" (BigBirdPegasus model)"),Qfo=l(),Yh=a("li"),Jae=a("strong"),Wfo=o("blenderbot"),Hfo=o(" \u2014 "),DP=a("a"),Ufo=o("BlenderbotModel"),Jfo=o(" (Blenderbot model)"),Yfo=l(),Kh=a("li"),Yae=a("strong"),Kfo=o("blenderbot-small"),Zfo=o(" \u2014 "),GP=a("a"),emo=o("BlenderbotSmallModel"),omo=o(" (BlenderbotSmall model)"),rmo=l(),Zh=a("li"),Kae=a("strong"),tmo=o("camembert"),amo=o(" \u2014 "),OP=a("a"),nmo=o("CamembertModel"),smo=o(" (CamemBERT model)"),lmo=l(),ep=a("li"),Zae=a("strong"),imo=o("canine"),dmo=o(" \u2014 "),VP=a("a"),cmo=o("CanineModel"),fmo=o(" (Canine model)"),mmo=l(),op=a("li"),ene=a("strong"),gmo=o("clip"),hmo=o(" \u2014 "),XP=a("a"),pmo=o("CLIPModel"),umo=o(" (CLIP model)"),_mo=l(),rp=a("li"),one=a("strong"),bmo=o("convbert"),vmo=o(" \u2014 "),zP=a("a"),Fmo=o("ConvBertModel"),Tmo=o(" (ConvBERT model)"),Mmo=l(),tp=a("li"),rne=a("strong"),Emo=o("convnext"),Cmo=o(" \u2014 "),QP=a("a"),wmo=o("ConvNextModel"),Amo=o(" (ConvNext model)"),ymo=l(),ap=a("li"),tne=a("strong"),Lmo=o("ctrl"),xmo=o(" \u2014 "),WP=a("a"),$mo=o("CTRLModel"),kmo=o(" (CTRL model)"),Smo=l(),np=a("li"),ane=a("strong"),Rmo=o("data2vec-audio"),Bmo=o(" \u2014 "),HP=a("a"),Pmo=o("Data2VecAudioModel"),Imo=o(" (Data2VecAudio model)"),qmo=l(),sp=a("li"),nne=a("strong"),Nmo=o("data2vec-text"),jmo=o(" \u2014 "),UP=a("a"),Dmo=o("Data2VecTextModel"),Gmo=o(" (Data2VecText model)"),Omo=l(),lp=a("li"),sne=a("strong"),Vmo=o("data2vec-vision"),Xmo=o(" \u2014 "),JP=a("a"),zmo=o("Data2VecVisionModel"),Qmo=o(" (Data2VecVision model)"),Wmo=l(),ip=a("li"),lne=a("strong"),Hmo=o("deberta"),Umo=o(" \u2014 "),YP=a("a"),Jmo=o("DebertaModel"),Ymo=o(" (DeBERTa model)"),Kmo=l(),dp=a("li"),ine=a("strong"),Zmo=o("deberta-v2"),ego=o(" \u2014 "),KP=a("a"),ogo=o("DebertaV2Model"),rgo=o(" (DeBERTa-v2 model)"),tgo=l(),cp=a("li"),dne=a("strong"),ago=o("decision_transformer"),ngo=o(" \u2014 "),ZP=a("a"),sgo=o("DecisionTransformerModel"),lgo=o(" (Decision Transformer model)"),igo=l(),fp=a("li"),cne=a("strong"),dgo=o("deit"),cgo=o(" \u2014 "),eI=a("a"),fgo=o("DeiTModel"),mgo=o(" (DeiT model)"),ggo=l(),mp=a("li"),fne=a("strong"),hgo=o("detr"),pgo=o(" \u2014 "),oI=a("a"),ugo=o("DetrModel"),_go=o(" (DETR model)"),bgo=l(),gp=a("li"),mne=a("strong"),vgo=o("distilbert"),Fgo=o(" \u2014 "),rI=a("a"),Tgo=o("DistilBertModel"),Mgo=o(" (DistilBERT model)"),Ego=l(),hp=a("li"),gne=a("strong"),Cgo=o("dpr"),wgo=o(" \u2014 "),tI=a("a"),Ago=o("DPRQuestionEncoder"),ygo=o(" (DPR model)"),Lgo=l(),pp=a("li"),hne=a("strong"),xgo=o("dpt"),$go=o(" \u2014 "),aI=a("a"),kgo=o("DPTModel"),Sgo=o(" (DPT model)"),Rgo=l(),up=a("li"),pne=a("strong"),Bgo=o("electra"),Pgo=o(" \u2014 "),nI=a("a"),Igo=o("ElectraModel"),qgo=o(" (ELECTRA model)"),Ngo=l(),_p=a("li"),une=a("strong"),jgo=o("flaubert"),Dgo=o(" \u2014 "),sI=a("a"),Ggo=o("FlaubertModel"),Ogo=o(" (FlauBERT model)"),Vgo=l(),bp=a("li"),_ne=a("strong"),Xgo=o("fnet"),zgo=o(" \u2014 "),lI=a("a"),Qgo=o("FNetModel"),Wgo=o(" (FNet model)"),Hgo=l(),vp=a("li"),bne=a("strong"),Ugo=o("fsmt"),Jgo=o(" \u2014 "),iI=a("a"),Ygo=o("FSMTModel"),Kgo=o(" (FairSeq Machine-Translation model)"),Zgo=l(),Ss=a("li"),vne=a("strong"),eho=o("funnel"),oho=o(" \u2014 "),dI=a("a"),rho=o("FunnelModel"),tho=o(" or "),cI=a("a"),aho=o("FunnelBaseModel"),nho=o(" (Funnel Transformer model)"),sho=l(),Fp=a("li"),Fne=a("strong"),lho=o("glpn"),iho=o(" \u2014 "),fI=a("a"),dho=o("GLPNModel"),cho=o(" (GLPN model)"),fho=l(),Tp=a("li"),Tne=a("strong"),mho=o("gpt2"),gho=o(" \u2014 "),mI=a("a"),hho=o("GPT2Model"),pho=o(" (OpenAI GPT-2 model)"),uho=l(),Mp=a("li"),Mne=a("strong"),_ho=o("gpt_neo"),bho=o(" \u2014 "),gI=a("a"),vho=o("GPTNeoModel"),Fho=o(" (GPT Neo model)"),Tho=l(),Ep=a("li"),Ene=a("strong"),Mho=o("gptj"),Eho=o(" \u2014 "),hI=a("a"),Cho=o("GPTJModel"),who=o(" (GPT-J model)"),Aho=l(),Cp=a("li"),Cne=a("strong"),yho=o("hubert"),Lho=o(" \u2014 "),pI=a("a"),xho=o("HubertModel"),$ho=o(" (Hubert model)"),kho=l(),wp=a("li"),wne=a("strong"),Sho=o("ibert"),Rho=o(" \u2014 "),uI=a("a"),Bho=o("IBertModel"),Pho=o(" (I-BERT model)"),Iho=l(),Ap=a("li"),Ane=a("strong"),qho=o("imagegpt"),Nho=o(" \u2014 "),_I=a("a"),jho=o("ImageGPTModel"),Dho=o(" (ImageGPT model)"),Gho=l(),yp=a("li"),yne=a("strong"),Oho=o("layoutlm"),Vho=o(" \u2014 "),bI=a("a"),Xho=o("LayoutLMModel"),zho=o(" (LayoutLM model)"),Qho=l(),Lp=a("li"),Lne=a("strong"),Who=o("layoutlmv2"),Hho=o(" \u2014 "),vI=a("a"),Uho=o("LayoutLMv2Model"),Jho=o(" (LayoutLMv2 model)"),Yho=l(),xp=a("li"),xne=a("strong"),Kho=o("led"),Zho=o(" \u2014 "),FI=a("a"),epo=o("LEDModel"),opo=o(" (LED model)"),rpo=l(),$p=a("li"),$ne=a("strong"),tpo=o("longformer"),apo=o(" \u2014 "),TI=a("a"),npo=o("LongformerModel"),spo=o(" (Longformer model)"),lpo=l(),kp=a("li"),kne=a("strong"),ipo=o("luke"),dpo=o(" \u2014 "),MI=a("a"),cpo=o("LukeModel"),fpo=o(" (LUKE model)"),mpo=l(),Sp=a("li"),Sne=a("strong"),gpo=o("lxmert"),hpo=o(" \u2014 "),EI=a("a"),ppo=o("LxmertModel"),upo=o(" (LXMERT model)"),_po=l(),Rp=a("li"),Rne=a("strong"),bpo=o("m2m_100"),vpo=o(" \u2014 "),CI=a("a"),Fpo=o("M2M100Model"),Tpo=o(" (M2M100 model)"),Mpo=l(),Bp=a("li"),Bne=a("strong"),Epo=o("marian"),Cpo=o(" \u2014 "),wI=a("a"),wpo=o("MarianModel"),Apo=o(" (Marian model)"),ypo=l(),Pp=a("li"),Pne=a("strong"),Lpo=o("maskformer"),xpo=o(" \u2014 "),AI=a("a"),$po=o("MaskFormerModel"),kpo=o(" (MaskFormer model)"),Spo=l(),Ip=a("li"),Ine=a("strong"),Rpo=o("mbart"),Bpo=o(" \u2014 "),yI=a("a"),Ppo=o("MBartModel"),Ipo=o(" (mBART model)"),qpo=l(),qp=a("li"),qne=a("strong"),Npo=o("mctct"),jpo=o(" \u2014 "),LI=a("a"),Dpo=o("MCTCTModel"),Gpo=o(" (MCTCT model)"),Opo=l(),Np=a("li"),Nne=a("strong"),Vpo=o("megatron-bert"),Xpo=o(" \u2014 "),xI=a("a"),zpo=o("MegatronBertModel"),Qpo=o(" (MegatronBert model)"),Wpo=l(),jp=a("li"),jne=a("strong"),Hpo=o("mobilebert"),Upo=o(" \u2014 "),$I=a("a"),Jpo=o("MobileBertModel"),Ypo=o(" (MobileBERT model)"),Kpo=l(),Dp=a("li"),Dne=a("strong"),Zpo=o("mpnet"),euo=o(" \u2014 "),kI=a("a"),ouo=o("MPNetModel"),ruo=o(" (MPNet model)"),tuo=l(),Gp=a("li"),Gne=a("strong"),auo=o("mt5"),nuo=o(" \u2014 "),SI=a("a"),suo=o("MT5Model"),luo=o(" (mT5 model)"),iuo=l(),Op=a("li"),One=a("strong"),duo=o("nystromformer"),cuo=o(" \u2014 "),RI=a("a"),fuo=o("NystromformerModel"),muo=o(" (Nystromformer model)"),guo=l(),Vp=a("li"),Vne=a("strong"),huo=o("openai-gpt"),puo=o(" \u2014 "),BI=a("a"),uuo=o("OpenAIGPTModel"),_uo=o(" (OpenAI GPT model)"),buo=l(),Xp=a("li"),Xne=a("strong"),vuo=o("pegasus"),Fuo=o(" \u2014 "),PI=a("a"),Tuo=o("PegasusModel"),Muo=o(" (Pegasus model)"),Euo=l(),zp=a("li"),zne=a("strong"),Cuo=o("perceiver"),wuo=o(" \u2014 "),II=a("a"),Auo=o("PerceiverModel"),yuo=o(" (Perceiver model)"),Luo=l(),Qp=a("li"),Qne=a("strong"),xuo=o("plbart"),$uo=o(" \u2014 "),qI=a("a"),kuo=o("PLBartModel"),Suo=o(" (PLBart model)"),Ruo=l(),Wp=a("li"),Wne=a("strong"),Buo=o("poolformer"),Puo=o(" \u2014 "),NI=a("a"),Iuo=o("PoolFormerModel"),quo=o(" (PoolFormer model)"),Nuo=l(),Hp=a("li"),Hne=a("strong"),juo=o("prophetnet"),Duo=o(" \u2014 "),jI=a("a"),Guo=o("ProphetNetModel"),Ouo=o(" (ProphetNet model)"),Vuo=l(),Up=a("li"),Une=a("strong"),Xuo=o("qdqbert"),zuo=o(" \u2014 "),DI=a("a"),Quo=o("QDQBertModel"),Wuo=o(" (QDQBert model)"),Huo=l(),Jp=a("li"),Jne=a("strong"),Uuo=o("reformer"),Juo=o(" \u2014 "),GI=a("a"),Yuo=o("ReformerModel"),Kuo=o(" (Reformer model)"),Zuo=l(),Yp=a("li"),Yne=a("strong"),e_o=o("regnet"),o_o=o(" \u2014 "),OI=a("a"),r_o=o("RegNetModel"),t_o=o(" (RegNet model)"),a_o=l(),Kp=a("li"),Kne=a("strong"),n_o=o("rembert"),s_o=o(" \u2014 "),VI=a("a"),l_o=o("RemBertModel"),i_o=o(" (RemBERT model)"),d_o=l(),Zp=a("li"),Zne=a("strong"),c_o=o("resnet"),f_o=o(" \u2014 "),XI=a("a"),m_o=o("ResNetModel"),g_o=o(" (ResNet model)"),h_o=l(),eu=a("li"),ese=a("strong"),p_o=o("retribert"),u_o=o(" \u2014 "),zI=a("a"),__o=o("RetriBertModel"),b_o=o(" (RetriBERT model)"),v_o=l(),ou=a("li"),ose=a("strong"),F_o=o("roberta"),T_o=o(" \u2014 "),QI=a("a"),M_o=o("RobertaModel"),E_o=o(" (RoBERTa model)"),C_o=l(),ru=a("li"),rse=a("strong"),w_o=o("roformer"),A_o=o(" \u2014 "),WI=a("a"),y_o=o("RoFormerModel"),L_o=o(" (RoFormer model)"),x_o=l(),tu=a("li"),tse=a("strong"),$_o=o("segformer"),k_o=o(" \u2014 "),HI=a("a"),S_o=o("SegformerModel"),R_o=o(" (SegFormer model)"),B_o=l(),au=a("li"),ase=a("strong"),P_o=o("sew"),I_o=o(" \u2014 "),UI=a("a"),q_o=o("SEWModel"),N_o=o(" (SEW model)"),j_o=l(),nu=a("li"),nse=a("strong"),D_o=o("sew-d"),G_o=o(" \u2014 "),JI=a("a"),O_o=o("SEWDModel"),V_o=o(" (SEW-D model)"),X_o=l(),su=a("li"),sse=a("strong"),z_o=o("speech_to_text"),Q_o=o(" \u2014 "),YI=a("a"),W_o=o("Speech2TextModel"),H_o=o(" (Speech2Text model)"),U_o=l(),lu=a("li"),lse=a("strong"),J_o=o("splinter"),Y_o=o(" \u2014 "),KI=a("a"),K_o=o("SplinterModel"),Z_o=o(" (Splinter model)"),e2o=l(),iu=a("li"),ise=a("strong"),o2o=o("squeezebert"),r2o=o(" \u2014 "),ZI=a("a"),t2o=o("SqueezeBertModel"),a2o=o(" (SqueezeBERT model)"),n2o=l(),du=a("li"),dse=a("strong"),s2o=o("swin"),l2o=o(" \u2014 "),eq=a("a"),i2o=o("SwinModel"),d2o=o(" (Swin model)"),c2o=l(),cu=a("li"),cse=a("strong"),f2o=o("t5"),m2o=o(" \u2014 "),oq=a("a"),g2o=o("T5Model"),h2o=o(" (T5 model)"),p2o=l(),fu=a("li"),fse=a("strong"),u2o=o("tapas"),_2o=o(" \u2014 "),rq=a("a"),b2o=o("TapasModel"),v2o=o(" (TAPAS model)"),F2o=l(),mu=a("li"),mse=a("strong"),T2o=o("transfo-xl"),M2o=o(" \u2014 "),tq=a("a"),E2o=o("TransfoXLModel"),C2o=o(" (Transformer-XL model)"),w2o=l(),gu=a("li"),gse=a("strong"),A2o=o("unispeech"),y2o=o(" \u2014 "),aq=a("a"),L2o=o("UniSpeechModel"),x2o=o(" (UniSpeech model)"),$2o=l(),hu=a("li"),hse=a("strong"),k2o=o("unispeech-sat"),S2o=o(" \u2014 "),nq=a("a"),R2o=o("UniSpeechSatModel"),B2o=o(" (UniSpeechSat model)"),P2o=l(),pu=a("li"),pse=a("strong"),I2o=o("van"),q2o=o(" \u2014 "),sq=a("a"),N2o=o("VanModel"),j2o=o(" (VAN model)"),D2o=l(),uu=a("li"),use=a("strong"),G2o=o("vilt"),O2o=o(" \u2014 "),lq=a("a"),V2o=o("ViltModel"),X2o=o(" (ViLT model)"),z2o=l(),_u=a("li"),_se=a("strong"),Q2o=o("vision-text-dual-encoder"),W2o=o(" \u2014 "),iq=a("a"),H2o=o("VisionTextDualEncoderModel"),U2o=o(" (VisionTextDualEncoder model)"),J2o=l(),bu=a("li"),bse=a("strong"),Y2o=o("visual_bert"),K2o=o(" \u2014 "),dq=a("a"),Z2o=o("VisualBertModel"),e1o=o(" (VisualBert model)"),o1o=l(),vu=a("li"),vse=a("strong"),r1o=o("vit"),t1o=o(" \u2014 "),cq=a("a"),a1o=o("ViTModel"),n1o=o(" (ViT model)"),s1o=l(),Fu=a("li"),Fse=a("strong"),l1o=o("vit_mae"),i1o=o(" \u2014 "),fq=a("a"),d1o=o("ViTMAEModel"),c1o=o(" (ViTMAE model)"),f1o=l(),Tu=a("li"),Tse=a("strong"),m1o=o("wav2vec2"),g1o=o(" \u2014 "),mq=a("a"),h1o=o("Wav2Vec2Model"),p1o=o(" (Wav2Vec2 model)"),u1o=l(),Mu=a("li"),Mse=a("strong"),_1o=o("wavlm"),b1o=o(" \u2014 "),gq=a("a"),v1o=o("WavLMModel"),F1o=o(" (WavLM model)"),T1o=l(),Eu=a("li"),Ese=a("strong"),M1o=o("xglm"),E1o=o(" \u2014 "),hq=a("a"),C1o=o("XGLMModel"),w1o=o(" (XGLM model)"),A1o=l(),Cu=a("li"),Cse=a("strong"),y1o=o("xlm"),L1o=o(" \u2014 "),pq=a("a"),x1o=o("XLMModel"),$1o=o(" (XLM model)"),k1o=l(),wu=a("li"),wse=a("strong"),S1o=o("xlm-prophetnet"),R1o=o(" \u2014 "),uq=a("a"),B1o=o("XLMProphetNetModel"),P1o=o(" (XLMProphetNet model)"),I1o=l(),Au=a("li"),Ase=a("strong"),q1o=o("xlm-roberta"),N1o=o(" \u2014 "),_q=a("a"),j1o=o("XLMRobertaModel"),D1o=o(" (XLM-RoBERTa model)"),G1o=l(),yu=a("li"),yse=a("strong"),O1o=o("xlm-roberta-xl"),V1o=o(" \u2014 "),bq=a("a"),X1o=o("XLMRobertaXLModel"),z1o=o(" (XLM-RoBERTa-XL model)"),Q1o=l(),Lu=a("li"),Lse=a("strong"),W1o=o("xlnet"),H1o=o(" \u2014 "),vq=a("a"),U1o=o("XLNetModel"),J1o=o(" (XLNet model)"),Y1o=l(),xu=a("li"),xse=a("strong"),K1o=o("yolos"),Z1o=o(" \u2014 "),Fq=a("a"),ebo=o("YolosModel"),obo=o(" (YOLOS model)"),rbo=l(),$u=a("li"),$se=a("strong"),tbo=o("yoso"),abo=o(" \u2014 "),Tq=a("a"),nbo=o("YosoModel"),sbo=o(" (YOSO model)"),lbo=l(),ku=a("p"),ibo=o("The model is set in evaluation mode by default using "),kse=a("code"),dbo=o("model.eval()"),cbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sse=a("code"),fbo=o("model.train()"),mbo=l(),F(Su.$$.fragment),BPe=l(),Ci=a("h2"),Ru=a("a"),Rse=a("span"),F(My.$$.fragment),gbo=l(),Bse=a("span"),hbo=o("AutoModelForPreTraining"),PPe=l(),xo=a("div"),F(Ey.$$.fragment),pbo=l(),wi=a("p"),ubo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Mq=a("a"),_bo=o("from_pretrained()"),bbo=o(" class method or the "),Eq=a("a"),vbo=o("from_config()"),Fbo=o(` class
method.`),Tbo=l(),Cy=a("p"),Mbo=o("This class cannot be instantiated directly using "),Pse=a("code"),Ebo=o("__init__()"),Cbo=o(" (throws an error)."),wbo=l(),rt=a("div"),F(wy.$$.fragment),Abo=l(),Ise=a("p"),ybo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Lbo=l(),Ai=a("p"),xbo=o(`Note:
Loading a model from its configuration file does `),qse=a("strong"),$bo=o("not"),kbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cq=a("a"),Sbo=o("from_pretrained()"),Rbo=o(" to load the model weights."),Bbo=l(),F(Bu.$$.fragment),Pbo=l(),Je=a("div"),F(Ay.$$.fragment),Ibo=l(),Nse=a("p"),qbo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Nbo=l(),ya=a("p"),jbo=o("The model class to instantiate is selected based on the "),jse=a("code"),Dbo=o("model_type"),Gbo=o(` property of the config object (either
passed as an argument or loaded from `),Dse=a("code"),Obo=o("pretrained_model_name_or_path"),Vbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gse=a("code"),Xbo=o("pretrained_model_name_or_path"),zbo=o(":"),Qbo=l(),G=a("ul"),Pu=a("li"),Ose=a("strong"),Wbo=o("albert"),Hbo=o(" \u2014 "),wq=a("a"),Ubo=o("AlbertForPreTraining"),Jbo=o(" (ALBERT model)"),Ybo=l(),Iu=a("li"),Vse=a("strong"),Kbo=o("bart"),Zbo=o(" \u2014 "),Aq=a("a"),e4o=o("BartForConditionalGeneration"),o4o=o(" (BART model)"),r4o=l(),qu=a("li"),Xse=a("strong"),t4o=o("bert"),a4o=o(" \u2014 "),yq=a("a"),n4o=o("BertForPreTraining"),s4o=o(" (BERT model)"),l4o=l(),Nu=a("li"),zse=a("strong"),i4o=o("big_bird"),d4o=o(" \u2014 "),Lq=a("a"),c4o=o("BigBirdForPreTraining"),f4o=o(" (BigBird model)"),m4o=l(),ju=a("li"),Qse=a("strong"),g4o=o("camembert"),h4o=o(" \u2014 "),xq=a("a"),p4o=o("CamembertForMaskedLM"),u4o=o(" (CamemBERT model)"),_4o=l(),Du=a("li"),Wse=a("strong"),b4o=o("ctrl"),v4o=o(" \u2014 "),$q=a("a"),F4o=o("CTRLLMHeadModel"),T4o=o(" (CTRL model)"),M4o=l(),Gu=a("li"),Hse=a("strong"),E4o=o("data2vec-text"),C4o=o(" \u2014 "),kq=a("a"),w4o=o("Data2VecTextForMaskedLM"),A4o=o(" (Data2VecText model)"),y4o=l(),Ou=a("li"),Use=a("strong"),L4o=o("deberta"),x4o=o(" \u2014 "),Sq=a("a"),$4o=o("DebertaForMaskedLM"),k4o=o(" (DeBERTa model)"),S4o=l(),Vu=a("li"),Jse=a("strong"),R4o=o("deberta-v2"),B4o=o(" \u2014 "),Rq=a("a"),P4o=o("DebertaV2ForMaskedLM"),I4o=o(" (DeBERTa-v2 model)"),q4o=l(),Xu=a("li"),Yse=a("strong"),N4o=o("distilbert"),j4o=o(" \u2014 "),Bq=a("a"),D4o=o("DistilBertForMaskedLM"),G4o=o(" (DistilBERT model)"),O4o=l(),zu=a("li"),Kse=a("strong"),V4o=o("electra"),X4o=o(" \u2014 "),Pq=a("a"),z4o=o("ElectraForPreTraining"),Q4o=o(" (ELECTRA model)"),W4o=l(),Qu=a("li"),Zse=a("strong"),H4o=o("flaubert"),U4o=o(" \u2014 "),Iq=a("a"),J4o=o("FlaubertWithLMHeadModel"),Y4o=o(" (FlauBERT model)"),K4o=l(),Wu=a("li"),ele=a("strong"),Z4o=o("fnet"),evo=o(" \u2014 "),qq=a("a"),ovo=o("FNetForPreTraining"),rvo=o(" (FNet model)"),tvo=l(),Hu=a("li"),ole=a("strong"),avo=o("fsmt"),nvo=o(" \u2014 "),Nq=a("a"),svo=o("FSMTForConditionalGeneration"),lvo=o(" (FairSeq Machine-Translation model)"),ivo=l(),Uu=a("li"),rle=a("strong"),dvo=o("funnel"),cvo=o(" \u2014 "),jq=a("a"),fvo=o("FunnelForPreTraining"),mvo=o(" (Funnel Transformer model)"),gvo=l(),Ju=a("li"),tle=a("strong"),hvo=o("gpt2"),pvo=o(" \u2014 "),Dq=a("a"),uvo=o("GPT2LMHeadModel"),_vo=o(" (OpenAI GPT-2 model)"),bvo=l(),Yu=a("li"),ale=a("strong"),vvo=o("ibert"),Fvo=o(" \u2014 "),Gq=a("a"),Tvo=o("IBertForMaskedLM"),Mvo=o(" (I-BERT model)"),Evo=l(),Ku=a("li"),nle=a("strong"),Cvo=o("layoutlm"),wvo=o(" \u2014 "),Oq=a("a"),Avo=o("LayoutLMForMaskedLM"),yvo=o(" (LayoutLM model)"),Lvo=l(),Zu=a("li"),sle=a("strong"),xvo=o("longformer"),$vo=o(" \u2014 "),Vq=a("a"),kvo=o("LongformerForMaskedLM"),Svo=o(" (Longformer model)"),Rvo=l(),e_=a("li"),lle=a("strong"),Bvo=o("lxmert"),Pvo=o(" \u2014 "),Xq=a("a"),Ivo=o("LxmertForPreTraining"),qvo=o(" (LXMERT model)"),Nvo=l(),o_=a("li"),ile=a("strong"),jvo=o("megatron-bert"),Dvo=o(" \u2014 "),zq=a("a"),Gvo=o("MegatronBertForPreTraining"),Ovo=o(" (MegatronBert model)"),Vvo=l(),r_=a("li"),dle=a("strong"),Xvo=o("mobilebert"),zvo=o(" \u2014 "),Qq=a("a"),Qvo=o("MobileBertForPreTraining"),Wvo=o(" (MobileBERT model)"),Hvo=l(),t_=a("li"),cle=a("strong"),Uvo=o("mpnet"),Jvo=o(" \u2014 "),Wq=a("a"),Yvo=o("MPNetForMaskedLM"),Kvo=o(" (MPNet model)"),Zvo=l(),a_=a("li"),fle=a("strong"),eFo=o("openai-gpt"),oFo=o(" \u2014 "),Hq=a("a"),rFo=o("OpenAIGPTLMHeadModel"),tFo=o(" (OpenAI GPT model)"),aFo=l(),n_=a("li"),mle=a("strong"),nFo=o("retribert"),sFo=o(" \u2014 "),Uq=a("a"),lFo=o("RetriBertModel"),iFo=o(" (RetriBERT model)"),dFo=l(),s_=a("li"),gle=a("strong"),cFo=o("roberta"),fFo=o(" \u2014 "),Jq=a("a"),mFo=o("RobertaForMaskedLM"),gFo=o(" (RoBERTa model)"),hFo=l(),l_=a("li"),hle=a("strong"),pFo=o("squeezebert"),uFo=o(" \u2014 "),Yq=a("a"),_Fo=o("SqueezeBertForMaskedLM"),bFo=o(" (SqueezeBERT model)"),vFo=l(),i_=a("li"),ple=a("strong"),FFo=o("t5"),TFo=o(" \u2014 "),Kq=a("a"),MFo=o("T5ForConditionalGeneration"),EFo=o(" (T5 model)"),CFo=l(),d_=a("li"),ule=a("strong"),wFo=o("tapas"),AFo=o(" \u2014 "),Zq=a("a"),yFo=o("TapasForMaskedLM"),LFo=o(" (TAPAS model)"),xFo=l(),c_=a("li"),_le=a("strong"),$Fo=o("transfo-xl"),kFo=o(" \u2014 "),eN=a("a"),SFo=o("TransfoXLLMHeadModel"),RFo=o(" (Transformer-XL model)"),BFo=l(),f_=a("li"),ble=a("strong"),PFo=o("unispeech"),IFo=o(" \u2014 "),oN=a("a"),qFo=o("UniSpeechForPreTraining"),NFo=o(" (UniSpeech model)"),jFo=l(),m_=a("li"),vle=a("strong"),DFo=o("unispeech-sat"),GFo=o(" \u2014 "),rN=a("a"),OFo=o("UniSpeechSatForPreTraining"),VFo=o(" (UniSpeechSat model)"),XFo=l(),g_=a("li"),Fle=a("strong"),zFo=o("visual_bert"),QFo=o(" \u2014 "),tN=a("a"),WFo=o("VisualBertForPreTraining"),HFo=o(" (VisualBert model)"),UFo=l(),h_=a("li"),Tle=a("strong"),JFo=o("vit_mae"),YFo=o(" \u2014 "),aN=a("a"),KFo=o("ViTMAEForPreTraining"),ZFo=o(" (ViTMAE model)"),e0o=l(),p_=a("li"),Mle=a("strong"),o0o=o("wav2vec2"),r0o=o(" \u2014 "),nN=a("a"),t0o=o("Wav2Vec2ForPreTraining"),a0o=o(" (Wav2Vec2 model)"),n0o=l(),u_=a("li"),Ele=a("strong"),s0o=o("xlm"),l0o=o(" \u2014 "),sN=a("a"),i0o=o("XLMWithLMHeadModel"),d0o=o(" (XLM model)"),c0o=l(),__=a("li"),Cle=a("strong"),f0o=o("xlm-roberta"),m0o=o(" \u2014 "),lN=a("a"),g0o=o("XLMRobertaForMaskedLM"),h0o=o(" (XLM-RoBERTa model)"),p0o=l(),b_=a("li"),wle=a("strong"),u0o=o("xlm-roberta-xl"),_0o=o(" \u2014 "),iN=a("a"),b0o=o("XLMRobertaXLForMaskedLM"),v0o=o(" (XLM-RoBERTa-XL model)"),F0o=l(),v_=a("li"),Ale=a("strong"),T0o=o("xlnet"),M0o=o(" \u2014 "),dN=a("a"),E0o=o("XLNetLMHeadModel"),C0o=o(" (XLNet model)"),w0o=l(),F_=a("p"),A0o=o("The model is set in evaluation mode by default using "),yle=a("code"),y0o=o("model.eval()"),L0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lle=a("code"),x0o=o("model.train()"),$0o=l(),F(T_.$$.fragment),IPe=l(),yi=a("h2"),M_=a("a"),xle=a("span"),F(yy.$$.fragment),k0o=l(),$le=a("span"),S0o=o("AutoModelForCausalLM"),qPe=l(),$o=a("div"),F(Ly.$$.fragment),R0o=l(),Li=a("p"),B0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),cN=a("a"),P0o=o("from_pretrained()"),I0o=o(" class method or the "),fN=a("a"),q0o=o("from_config()"),N0o=o(` class
method.`),j0o=l(),xy=a("p"),D0o=o("This class cannot be instantiated directly using "),kle=a("code"),G0o=o("__init__()"),O0o=o(" (throws an error)."),V0o=l(),tt=a("div"),F($y.$$.fragment),X0o=l(),Sle=a("p"),z0o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Q0o=l(),xi=a("p"),W0o=o(`Note:
Loading a model from its configuration file does `),Rle=a("strong"),H0o=o("not"),U0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mN=a("a"),J0o=o("from_pretrained()"),Y0o=o(" to load the model weights."),K0o=l(),F(E_.$$.fragment),Z0o=l(),Ye=a("div"),F(ky.$$.fragment),e6o=l(),Ble=a("p"),o6o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),r6o=l(),La=a("p"),t6o=o("The model class to instantiate is selected based on the "),Ple=a("code"),a6o=o("model_type"),n6o=o(` property of the config object (either
passed as an argument or loaded from `),Ile=a("code"),s6o=o("pretrained_model_name_or_path"),l6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qle=a("code"),i6o=o("pretrained_model_name_or_path"),d6o=o(":"),c6o=l(),z=a("ul"),C_=a("li"),Nle=a("strong"),f6o=o("bart"),m6o=o(" \u2014 "),gN=a("a"),g6o=o("BartForCausalLM"),h6o=o(" (BART model)"),p6o=l(),w_=a("li"),jle=a("strong"),u6o=o("bert"),_6o=o(" \u2014 "),hN=a("a"),b6o=o("BertLMHeadModel"),v6o=o(" (BERT model)"),F6o=l(),A_=a("li"),Dle=a("strong"),T6o=o("bert-generation"),M6o=o(" \u2014 "),pN=a("a"),E6o=o("BertGenerationDecoder"),C6o=o(" (Bert Generation model)"),w6o=l(),y_=a("li"),Gle=a("strong"),A6o=o("big_bird"),y6o=o(" \u2014 "),uN=a("a"),L6o=o("BigBirdForCausalLM"),x6o=o(" (BigBird model)"),$6o=l(),L_=a("li"),Ole=a("strong"),k6o=o("bigbird_pegasus"),S6o=o(" \u2014 "),_N=a("a"),R6o=o("BigBirdPegasusForCausalLM"),B6o=o(" (BigBirdPegasus model)"),P6o=l(),x_=a("li"),Vle=a("strong"),I6o=o("blenderbot"),q6o=o(" \u2014 "),bN=a("a"),N6o=o("BlenderbotForCausalLM"),j6o=o(" (Blenderbot model)"),D6o=l(),$_=a("li"),Xle=a("strong"),G6o=o("blenderbot-small"),O6o=o(" \u2014 "),vN=a("a"),V6o=o("BlenderbotSmallForCausalLM"),X6o=o(" (BlenderbotSmall model)"),z6o=l(),k_=a("li"),zle=a("strong"),Q6o=o("camembert"),W6o=o(" \u2014 "),FN=a("a"),H6o=o("CamembertForCausalLM"),U6o=o(" (CamemBERT model)"),J6o=l(),S_=a("li"),Qle=a("strong"),Y6o=o("ctrl"),K6o=o(" \u2014 "),TN=a("a"),Z6o=o("CTRLLMHeadModel"),eTo=o(" (CTRL model)"),oTo=l(),R_=a("li"),Wle=a("strong"),rTo=o("data2vec-text"),tTo=o(" \u2014 "),MN=a("a"),aTo=o("Data2VecTextForCausalLM"),nTo=o(" (Data2VecText model)"),sTo=l(),B_=a("li"),Hle=a("strong"),lTo=o("electra"),iTo=o(" \u2014 "),EN=a("a"),dTo=o("ElectraForCausalLM"),cTo=o(" (ELECTRA model)"),fTo=l(),P_=a("li"),Ule=a("strong"),mTo=o("gpt2"),gTo=o(" \u2014 "),CN=a("a"),hTo=o("GPT2LMHeadModel"),pTo=o(" (OpenAI GPT-2 model)"),uTo=l(),I_=a("li"),Jle=a("strong"),_To=o("gpt_neo"),bTo=o(" \u2014 "),wN=a("a"),vTo=o("GPTNeoForCausalLM"),FTo=o(" (GPT Neo model)"),TTo=l(),q_=a("li"),Yle=a("strong"),MTo=o("gptj"),ETo=o(" \u2014 "),AN=a("a"),CTo=o("GPTJForCausalLM"),wTo=o(" (GPT-J model)"),ATo=l(),N_=a("li"),Kle=a("strong"),yTo=o("marian"),LTo=o(" \u2014 "),yN=a("a"),xTo=o("MarianForCausalLM"),$To=o(" (Marian model)"),kTo=l(),j_=a("li"),Zle=a("strong"),STo=o("mbart"),RTo=o(" \u2014 "),LN=a("a"),BTo=o("MBartForCausalLM"),PTo=o(" (mBART model)"),ITo=l(),D_=a("li"),eie=a("strong"),qTo=o("megatron-bert"),NTo=o(" \u2014 "),xN=a("a"),jTo=o("MegatronBertForCausalLM"),DTo=o(" (MegatronBert model)"),GTo=l(),G_=a("li"),oie=a("strong"),OTo=o("openai-gpt"),VTo=o(" \u2014 "),$N=a("a"),XTo=o("OpenAIGPTLMHeadModel"),zTo=o(" (OpenAI GPT model)"),QTo=l(),O_=a("li"),rie=a("strong"),WTo=o("pegasus"),HTo=o(" \u2014 "),kN=a("a"),UTo=o("PegasusForCausalLM"),JTo=o(" (Pegasus model)"),YTo=l(),V_=a("li"),tie=a("strong"),KTo=o("plbart"),ZTo=o(" \u2014 "),SN=a("a"),eMo=o("PLBartForCausalLM"),oMo=o(" (PLBart model)"),rMo=l(),X_=a("li"),aie=a("strong"),tMo=o("prophetnet"),aMo=o(" \u2014 "),RN=a("a"),nMo=o("ProphetNetForCausalLM"),sMo=o(" (ProphetNet model)"),lMo=l(),z_=a("li"),nie=a("strong"),iMo=o("qdqbert"),dMo=o(" \u2014 "),BN=a("a"),cMo=o("QDQBertLMHeadModel"),fMo=o(" (QDQBert model)"),mMo=l(),Q_=a("li"),sie=a("strong"),gMo=o("reformer"),hMo=o(" \u2014 "),PN=a("a"),pMo=o("ReformerModelWithLMHead"),uMo=o(" (Reformer model)"),_Mo=l(),W_=a("li"),lie=a("strong"),bMo=o("rembert"),vMo=o(" \u2014 "),IN=a("a"),FMo=o("RemBertForCausalLM"),TMo=o(" (RemBERT model)"),MMo=l(),H_=a("li"),iie=a("strong"),EMo=o("roberta"),CMo=o(" \u2014 "),qN=a("a"),wMo=o("RobertaForCausalLM"),AMo=o(" (RoBERTa model)"),yMo=l(),U_=a("li"),die=a("strong"),LMo=o("roformer"),xMo=o(" \u2014 "),NN=a("a"),$Mo=o("RoFormerForCausalLM"),kMo=o(" (RoFormer model)"),SMo=l(),J_=a("li"),cie=a("strong"),RMo=o("speech_to_text_2"),BMo=o(" \u2014 "),jN=a("a"),PMo=o("Speech2Text2ForCausalLM"),IMo=o(" (Speech2Text2 model)"),qMo=l(),Y_=a("li"),fie=a("strong"),NMo=o("transfo-xl"),jMo=o(" \u2014 "),DN=a("a"),DMo=o("TransfoXLLMHeadModel"),GMo=o(" (Transformer-XL model)"),OMo=l(),K_=a("li"),mie=a("strong"),VMo=o("trocr"),XMo=o(" \u2014 "),GN=a("a"),zMo=o("TrOCRForCausalLM"),QMo=o(" (TrOCR model)"),WMo=l(),Z_=a("li"),gie=a("strong"),HMo=o("xglm"),UMo=o(" \u2014 "),ON=a("a"),JMo=o("XGLMForCausalLM"),YMo=o(" (XGLM model)"),KMo=l(),e2=a("li"),hie=a("strong"),ZMo=o("xlm"),eEo=o(" \u2014 "),VN=a("a"),oEo=o("XLMWithLMHeadModel"),rEo=o(" (XLM model)"),tEo=l(),o2=a("li"),pie=a("strong"),aEo=o("xlm-prophetnet"),nEo=o(" \u2014 "),XN=a("a"),sEo=o("XLMProphetNetForCausalLM"),lEo=o(" (XLMProphetNet model)"),iEo=l(),r2=a("li"),uie=a("strong"),dEo=o("xlm-roberta"),cEo=o(" \u2014 "),zN=a("a"),fEo=o("XLMRobertaForCausalLM"),mEo=o(" (XLM-RoBERTa model)"),gEo=l(),t2=a("li"),_ie=a("strong"),hEo=o("xlm-roberta-xl"),pEo=o(" \u2014 "),QN=a("a"),uEo=o("XLMRobertaXLForCausalLM"),_Eo=o(" (XLM-RoBERTa-XL model)"),bEo=l(),a2=a("li"),bie=a("strong"),vEo=o("xlnet"),FEo=o(" \u2014 "),WN=a("a"),TEo=o("XLNetLMHeadModel"),MEo=o(" (XLNet model)"),EEo=l(),n2=a("p"),CEo=o("The model is set in evaluation mode by default using "),vie=a("code"),wEo=o("model.eval()"),AEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fie=a("code"),yEo=o("model.train()"),LEo=l(),F(s2.$$.fragment),NPe=l(),$i=a("h2"),l2=a("a"),Tie=a("span"),F(Sy.$$.fragment),xEo=l(),Mie=a("span"),$Eo=o("AutoModelForMaskedLM"),jPe=l(),ko=a("div"),F(Ry.$$.fragment),kEo=l(),ki=a("p"),SEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),HN=a("a"),REo=o("from_pretrained()"),BEo=o(" class method or the "),UN=a("a"),PEo=o("from_config()"),IEo=o(` class
method.`),qEo=l(),By=a("p"),NEo=o("This class cannot be instantiated directly using "),Eie=a("code"),jEo=o("__init__()"),DEo=o(" (throws an error)."),GEo=l(),at=a("div"),F(Py.$$.fragment),OEo=l(),Cie=a("p"),VEo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),XEo=l(),Si=a("p"),zEo=o(`Note:
Loading a model from its configuration file does `),wie=a("strong"),QEo=o("not"),WEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JN=a("a"),HEo=o("from_pretrained()"),UEo=o(" to load the model weights."),JEo=l(),F(i2.$$.fragment),YEo=l(),Ke=a("div"),F(Iy.$$.fragment),KEo=l(),Aie=a("p"),ZEo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),eCo=l(),xa=a("p"),oCo=o("The model class to instantiate is selected based on the "),yie=a("code"),rCo=o("model_type"),tCo=o(` property of the config object (either
passed as an argument or loaded from `),Lie=a("code"),aCo=o("pretrained_model_name_or_path"),nCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xie=a("code"),sCo=o("pretrained_model_name_or_path"),lCo=o(":"),iCo=l(),Q=a("ul"),d2=a("li"),$ie=a("strong"),dCo=o("albert"),cCo=o(" \u2014 "),YN=a("a"),fCo=o("AlbertForMaskedLM"),mCo=o(" (ALBERT model)"),gCo=l(),c2=a("li"),kie=a("strong"),hCo=o("bart"),pCo=o(" \u2014 "),KN=a("a"),uCo=o("BartForConditionalGeneration"),_Co=o(" (BART model)"),bCo=l(),f2=a("li"),Sie=a("strong"),vCo=o("bert"),FCo=o(" \u2014 "),ZN=a("a"),TCo=o("BertForMaskedLM"),MCo=o(" (BERT model)"),ECo=l(),m2=a("li"),Rie=a("strong"),CCo=o("big_bird"),wCo=o(" \u2014 "),ej=a("a"),ACo=o("BigBirdForMaskedLM"),yCo=o(" (BigBird model)"),LCo=l(),g2=a("li"),Bie=a("strong"),xCo=o("camembert"),$Co=o(" \u2014 "),oj=a("a"),kCo=o("CamembertForMaskedLM"),SCo=o(" (CamemBERT model)"),RCo=l(),h2=a("li"),Pie=a("strong"),BCo=o("convbert"),PCo=o(" \u2014 "),rj=a("a"),ICo=o("ConvBertForMaskedLM"),qCo=o(" (ConvBERT model)"),NCo=l(),p2=a("li"),Iie=a("strong"),jCo=o("data2vec-text"),DCo=o(" \u2014 "),tj=a("a"),GCo=o("Data2VecTextForMaskedLM"),OCo=o(" (Data2VecText model)"),VCo=l(),u2=a("li"),qie=a("strong"),XCo=o("deberta"),zCo=o(" \u2014 "),aj=a("a"),QCo=o("DebertaForMaskedLM"),WCo=o(" (DeBERTa model)"),HCo=l(),_2=a("li"),Nie=a("strong"),UCo=o("deberta-v2"),JCo=o(" \u2014 "),nj=a("a"),YCo=o("DebertaV2ForMaskedLM"),KCo=o(" (DeBERTa-v2 model)"),ZCo=l(),b2=a("li"),jie=a("strong"),e5o=o("distilbert"),o5o=o(" \u2014 "),sj=a("a"),r5o=o("DistilBertForMaskedLM"),t5o=o(" (DistilBERT model)"),a5o=l(),v2=a("li"),Die=a("strong"),n5o=o("electra"),s5o=o(" \u2014 "),lj=a("a"),l5o=o("ElectraForMaskedLM"),i5o=o(" (ELECTRA model)"),d5o=l(),F2=a("li"),Gie=a("strong"),c5o=o("flaubert"),f5o=o(" \u2014 "),ij=a("a"),m5o=o("FlaubertWithLMHeadModel"),g5o=o(" (FlauBERT model)"),h5o=l(),T2=a("li"),Oie=a("strong"),p5o=o("fnet"),u5o=o(" \u2014 "),dj=a("a"),_5o=o("FNetForMaskedLM"),b5o=o(" (FNet model)"),v5o=l(),M2=a("li"),Vie=a("strong"),F5o=o("funnel"),T5o=o(" \u2014 "),cj=a("a"),M5o=o("FunnelForMaskedLM"),E5o=o(" (Funnel Transformer model)"),C5o=l(),E2=a("li"),Xie=a("strong"),w5o=o("ibert"),A5o=o(" \u2014 "),fj=a("a"),y5o=o("IBertForMaskedLM"),L5o=o(" (I-BERT model)"),x5o=l(),C2=a("li"),zie=a("strong"),$5o=o("layoutlm"),k5o=o(" \u2014 "),mj=a("a"),S5o=o("LayoutLMForMaskedLM"),R5o=o(" (LayoutLM model)"),B5o=l(),w2=a("li"),Qie=a("strong"),P5o=o("longformer"),I5o=o(" \u2014 "),gj=a("a"),q5o=o("LongformerForMaskedLM"),N5o=o(" (Longformer model)"),j5o=l(),A2=a("li"),Wie=a("strong"),D5o=o("mbart"),G5o=o(" \u2014 "),hj=a("a"),O5o=o("MBartForConditionalGeneration"),V5o=o(" (mBART model)"),X5o=l(),y2=a("li"),Hie=a("strong"),z5o=o("megatron-bert"),Q5o=o(" \u2014 "),pj=a("a"),W5o=o("MegatronBertForMaskedLM"),H5o=o(" (MegatronBert model)"),U5o=l(),L2=a("li"),Uie=a("strong"),J5o=o("mobilebert"),Y5o=o(" \u2014 "),uj=a("a"),K5o=o("MobileBertForMaskedLM"),Z5o=o(" (MobileBERT model)"),e3o=l(),x2=a("li"),Jie=a("strong"),o3o=o("mpnet"),r3o=o(" \u2014 "),_j=a("a"),t3o=o("MPNetForMaskedLM"),a3o=o(" (MPNet model)"),n3o=l(),$2=a("li"),Yie=a("strong"),s3o=o("nystromformer"),l3o=o(" \u2014 "),bj=a("a"),i3o=o("NystromformerForMaskedLM"),d3o=o(" (Nystromformer model)"),c3o=l(),k2=a("li"),Kie=a("strong"),f3o=o("perceiver"),m3o=o(" \u2014 "),vj=a("a"),g3o=o("PerceiverForMaskedLM"),h3o=o(" (Perceiver model)"),p3o=l(),S2=a("li"),Zie=a("strong"),u3o=o("qdqbert"),_3o=o(" \u2014 "),Fj=a("a"),b3o=o("QDQBertForMaskedLM"),v3o=o(" (QDQBert model)"),F3o=l(),R2=a("li"),ede=a("strong"),T3o=o("reformer"),M3o=o(" \u2014 "),Tj=a("a"),E3o=o("ReformerForMaskedLM"),C3o=o(" (Reformer model)"),w3o=l(),B2=a("li"),ode=a("strong"),A3o=o("rembert"),y3o=o(" \u2014 "),Mj=a("a"),L3o=o("RemBertForMaskedLM"),x3o=o(" (RemBERT model)"),$3o=l(),P2=a("li"),rde=a("strong"),k3o=o("roberta"),S3o=o(" \u2014 "),Ej=a("a"),R3o=o("RobertaForMaskedLM"),B3o=o(" (RoBERTa model)"),P3o=l(),I2=a("li"),tde=a("strong"),I3o=o("roformer"),q3o=o(" \u2014 "),Cj=a("a"),N3o=o("RoFormerForMaskedLM"),j3o=o(" (RoFormer model)"),D3o=l(),q2=a("li"),ade=a("strong"),G3o=o("squeezebert"),O3o=o(" \u2014 "),wj=a("a"),V3o=o("SqueezeBertForMaskedLM"),X3o=o(" (SqueezeBERT model)"),z3o=l(),N2=a("li"),nde=a("strong"),Q3o=o("tapas"),W3o=o(" \u2014 "),Aj=a("a"),H3o=o("TapasForMaskedLM"),U3o=o(" (TAPAS model)"),J3o=l(),j2=a("li"),sde=a("strong"),Y3o=o("wav2vec2"),K3o=o(" \u2014 "),lde=a("code"),Z3o=o("Wav2Vec2ForMaskedLM"),ewo=o(" (Wav2Vec2 model)"),owo=l(),D2=a("li"),ide=a("strong"),rwo=o("xlm"),two=o(" \u2014 "),yj=a("a"),awo=o("XLMWithLMHeadModel"),nwo=o(" (XLM model)"),swo=l(),G2=a("li"),dde=a("strong"),lwo=o("xlm-roberta"),iwo=o(" \u2014 "),Lj=a("a"),dwo=o("XLMRobertaForMaskedLM"),cwo=o(" (XLM-RoBERTa model)"),fwo=l(),O2=a("li"),cde=a("strong"),mwo=o("xlm-roberta-xl"),gwo=o(" \u2014 "),xj=a("a"),hwo=o("XLMRobertaXLForMaskedLM"),pwo=o(" (XLM-RoBERTa-XL model)"),uwo=l(),V2=a("li"),fde=a("strong"),_wo=o("yoso"),bwo=o(" \u2014 "),$j=a("a"),vwo=o("YosoForMaskedLM"),Fwo=o(" (YOSO model)"),Two=l(),X2=a("p"),Mwo=o("The model is set in evaluation mode by default using "),mde=a("code"),Ewo=o("model.eval()"),Cwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gde=a("code"),wwo=o("model.train()"),Awo=l(),F(z2.$$.fragment),DPe=l(),Ri=a("h2"),Q2=a("a"),hde=a("span"),F(qy.$$.fragment),ywo=l(),pde=a("span"),Lwo=o("AutoModelForSeq2SeqLM"),GPe=l(),So=a("div"),F(Ny.$$.fragment),xwo=l(),Bi=a("p"),$wo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kj=a("a"),kwo=o("from_pretrained()"),Swo=o(" class method or the "),Sj=a("a"),Rwo=o("from_config()"),Bwo=o(` class
method.`),Pwo=l(),jy=a("p"),Iwo=o("This class cannot be instantiated directly using "),ude=a("code"),qwo=o("__init__()"),Nwo=o(" (throws an error)."),jwo=l(),nt=a("div"),F(Dy.$$.fragment),Dwo=l(),_de=a("p"),Gwo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Owo=l(),Pi=a("p"),Vwo=o(`Note:
Loading a model from its configuration file does `),bde=a("strong"),Xwo=o("not"),zwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rj=a("a"),Qwo=o("from_pretrained()"),Wwo=o(" to load the model weights."),Hwo=l(),F(W2.$$.fragment),Uwo=l(),Ze=a("div"),F(Gy.$$.fragment),Jwo=l(),vde=a("p"),Ywo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Kwo=l(),$a=a("p"),Zwo=o("The model class to instantiate is selected based on the "),Fde=a("code"),eAo=o("model_type"),oAo=o(` property of the config object (either
passed as an argument or loaded from `),Tde=a("code"),rAo=o("pretrained_model_name_or_path"),tAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mde=a("code"),aAo=o("pretrained_model_name_or_path"),nAo=o(":"),sAo=l(),he=a("ul"),H2=a("li"),Ede=a("strong"),lAo=o("bart"),iAo=o(" \u2014 "),Bj=a("a"),dAo=o("BartForConditionalGeneration"),cAo=o(" (BART model)"),fAo=l(),U2=a("li"),Cde=a("strong"),mAo=o("bigbird_pegasus"),gAo=o(" \u2014 "),Pj=a("a"),hAo=o("BigBirdPegasusForConditionalGeneration"),pAo=o(" (BigBirdPegasus model)"),uAo=l(),J2=a("li"),wde=a("strong"),_Ao=o("blenderbot"),bAo=o(" \u2014 "),Ij=a("a"),vAo=o("BlenderbotForConditionalGeneration"),FAo=o(" (Blenderbot model)"),TAo=l(),Y2=a("li"),Ade=a("strong"),MAo=o("blenderbot-small"),EAo=o(" \u2014 "),qj=a("a"),CAo=o("BlenderbotSmallForConditionalGeneration"),wAo=o(" (BlenderbotSmall model)"),AAo=l(),K2=a("li"),yde=a("strong"),yAo=o("encoder-decoder"),LAo=o(" \u2014 "),Nj=a("a"),xAo=o("EncoderDecoderModel"),$Ao=o(" (Encoder decoder model)"),kAo=l(),Z2=a("li"),Lde=a("strong"),SAo=o("fsmt"),RAo=o(" \u2014 "),jj=a("a"),BAo=o("FSMTForConditionalGeneration"),PAo=o(" (FairSeq Machine-Translation model)"),IAo=l(),e1=a("li"),xde=a("strong"),qAo=o("led"),NAo=o(" \u2014 "),Dj=a("a"),jAo=o("LEDForConditionalGeneration"),DAo=o(" (LED model)"),GAo=l(),o1=a("li"),$de=a("strong"),OAo=o("m2m_100"),VAo=o(" \u2014 "),Gj=a("a"),XAo=o("M2M100ForConditionalGeneration"),zAo=o(" (M2M100 model)"),QAo=l(),r1=a("li"),kde=a("strong"),WAo=o("marian"),HAo=o(" \u2014 "),Oj=a("a"),UAo=o("MarianMTModel"),JAo=o(" (Marian model)"),YAo=l(),t1=a("li"),Sde=a("strong"),KAo=o("mbart"),ZAo=o(" \u2014 "),Vj=a("a"),eyo=o("MBartForConditionalGeneration"),oyo=o(" (mBART model)"),ryo=l(),a1=a("li"),Rde=a("strong"),tyo=o("mt5"),ayo=o(" \u2014 "),Xj=a("a"),nyo=o("MT5ForConditionalGeneration"),syo=o(" (mT5 model)"),lyo=l(),n1=a("li"),Bde=a("strong"),iyo=o("pegasus"),dyo=o(" \u2014 "),zj=a("a"),cyo=o("PegasusForConditionalGeneration"),fyo=o(" (Pegasus model)"),myo=l(),s1=a("li"),Pde=a("strong"),gyo=o("plbart"),hyo=o(" \u2014 "),Qj=a("a"),pyo=o("PLBartForConditionalGeneration"),uyo=o(" (PLBart model)"),_yo=l(),l1=a("li"),Ide=a("strong"),byo=o("prophetnet"),vyo=o(" \u2014 "),Wj=a("a"),Fyo=o("ProphetNetForConditionalGeneration"),Tyo=o(" (ProphetNet model)"),Myo=l(),i1=a("li"),qde=a("strong"),Eyo=o("t5"),Cyo=o(" \u2014 "),Hj=a("a"),wyo=o("T5ForConditionalGeneration"),Ayo=o(" (T5 model)"),yyo=l(),d1=a("li"),Nde=a("strong"),Lyo=o("tapex"),xyo=o(" \u2014 "),Uj=a("a"),$yo=o("BartForConditionalGeneration"),kyo=o(" (TAPEX model)"),Syo=l(),c1=a("li"),jde=a("strong"),Ryo=o("xlm-prophetnet"),Byo=o(" \u2014 "),Jj=a("a"),Pyo=o("XLMProphetNetForConditionalGeneration"),Iyo=o(" (XLMProphetNet model)"),qyo=l(),f1=a("p"),Nyo=o("The model is set in evaluation mode by default using "),Dde=a("code"),jyo=o("model.eval()"),Dyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gde=a("code"),Gyo=o("model.train()"),Oyo=l(),F(m1.$$.fragment),OPe=l(),Ii=a("h2"),g1=a("a"),Ode=a("span"),F(Oy.$$.fragment),Vyo=l(),Vde=a("span"),Xyo=o("AutoModelForSequenceClassification"),VPe=l(),Ro=a("div"),F(Vy.$$.fragment),zyo=l(),qi=a("p"),Qyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Yj=a("a"),Wyo=o("from_pretrained()"),Hyo=o(" class method or the "),Kj=a("a"),Uyo=o("from_config()"),Jyo=o(` class
method.`),Yyo=l(),Xy=a("p"),Kyo=o("This class cannot be instantiated directly using "),Xde=a("code"),Zyo=o("__init__()"),eLo=o(" (throws an error)."),oLo=l(),st=a("div"),F(zy.$$.fragment),rLo=l(),zde=a("p"),tLo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aLo=l(),Ni=a("p"),nLo=o(`Note:
Loading a model from its configuration file does `),Qde=a("strong"),sLo=o("not"),lLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zj=a("a"),iLo=o("from_pretrained()"),dLo=o(" to load the model weights."),cLo=l(),F(h1.$$.fragment),fLo=l(),eo=a("div"),F(Qy.$$.fragment),mLo=l(),Wde=a("p"),gLo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hLo=l(),ka=a("p"),pLo=o("The model class to instantiate is selected based on the "),Hde=a("code"),uLo=o("model_type"),_Lo=o(` property of the config object (either
passed as an argument or loaded from `),Ude=a("code"),bLo=o("pretrained_model_name_or_path"),vLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jde=a("code"),FLo=o("pretrained_model_name_or_path"),TLo=o(":"),MLo=l(),q=a("ul"),p1=a("li"),Yde=a("strong"),ELo=o("albert"),CLo=o(" \u2014 "),eD=a("a"),wLo=o("AlbertForSequenceClassification"),ALo=o(" (ALBERT model)"),yLo=l(),u1=a("li"),Kde=a("strong"),LLo=o("bart"),xLo=o(" \u2014 "),oD=a("a"),$Lo=o("BartForSequenceClassification"),kLo=o(" (BART model)"),SLo=l(),_1=a("li"),Zde=a("strong"),RLo=o("bert"),BLo=o(" \u2014 "),rD=a("a"),PLo=o("BertForSequenceClassification"),ILo=o(" (BERT model)"),qLo=l(),b1=a("li"),ece=a("strong"),NLo=o("big_bird"),jLo=o(" \u2014 "),tD=a("a"),DLo=o("BigBirdForSequenceClassification"),GLo=o(" (BigBird model)"),OLo=l(),v1=a("li"),oce=a("strong"),VLo=o("bigbird_pegasus"),XLo=o(" \u2014 "),aD=a("a"),zLo=o("BigBirdPegasusForSequenceClassification"),QLo=o(" (BigBirdPegasus model)"),WLo=l(),F1=a("li"),rce=a("strong"),HLo=o("camembert"),ULo=o(" \u2014 "),nD=a("a"),JLo=o("CamembertForSequenceClassification"),YLo=o(" (CamemBERT model)"),KLo=l(),T1=a("li"),tce=a("strong"),ZLo=o("canine"),e8o=o(" \u2014 "),sD=a("a"),o8o=o("CanineForSequenceClassification"),r8o=o(" (Canine model)"),t8o=l(),M1=a("li"),ace=a("strong"),a8o=o("convbert"),n8o=o(" \u2014 "),lD=a("a"),s8o=o("ConvBertForSequenceClassification"),l8o=o(" (ConvBERT model)"),i8o=l(),E1=a("li"),nce=a("strong"),d8o=o("ctrl"),c8o=o(" \u2014 "),iD=a("a"),f8o=o("CTRLForSequenceClassification"),m8o=o(" (CTRL model)"),g8o=l(),C1=a("li"),sce=a("strong"),h8o=o("data2vec-text"),p8o=o(" \u2014 "),dD=a("a"),u8o=o("Data2VecTextForSequenceClassification"),_8o=o(" (Data2VecText model)"),b8o=l(),w1=a("li"),lce=a("strong"),v8o=o("deberta"),F8o=o(" \u2014 "),cD=a("a"),T8o=o("DebertaForSequenceClassification"),M8o=o(" (DeBERTa model)"),E8o=l(),A1=a("li"),ice=a("strong"),C8o=o("deberta-v2"),w8o=o(" \u2014 "),fD=a("a"),A8o=o("DebertaV2ForSequenceClassification"),y8o=o(" (DeBERTa-v2 model)"),L8o=l(),y1=a("li"),dce=a("strong"),x8o=o("distilbert"),$8o=o(" \u2014 "),mD=a("a"),k8o=o("DistilBertForSequenceClassification"),S8o=o(" (DistilBERT model)"),R8o=l(),L1=a("li"),cce=a("strong"),B8o=o("electra"),P8o=o(" \u2014 "),gD=a("a"),I8o=o("ElectraForSequenceClassification"),q8o=o(" (ELECTRA model)"),N8o=l(),x1=a("li"),fce=a("strong"),j8o=o("flaubert"),D8o=o(" \u2014 "),hD=a("a"),G8o=o("FlaubertForSequenceClassification"),O8o=o(" (FlauBERT model)"),V8o=l(),$1=a("li"),mce=a("strong"),X8o=o("fnet"),z8o=o(" \u2014 "),pD=a("a"),Q8o=o("FNetForSequenceClassification"),W8o=o(" (FNet model)"),H8o=l(),k1=a("li"),gce=a("strong"),U8o=o("funnel"),J8o=o(" \u2014 "),uD=a("a"),Y8o=o("FunnelForSequenceClassification"),K8o=o(" (Funnel Transformer model)"),Z8o=l(),S1=a("li"),hce=a("strong"),exo=o("gpt2"),oxo=o(" \u2014 "),_D=a("a"),rxo=o("GPT2ForSequenceClassification"),txo=o(" (OpenAI GPT-2 model)"),axo=l(),R1=a("li"),pce=a("strong"),nxo=o("gpt_neo"),sxo=o(" \u2014 "),bD=a("a"),lxo=o("GPTNeoForSequenceClassification"),ixo=o(" (GPT Neo model)"),dxo=l(),B1=a("li"),uce=a("strong"),cxo=o("gptj"),fxo=o(" \u2014 "),vD=a("a"),mxo=o("GPTJForSequenceClassification"),gxo=o(" (GPT-J model)"),hxo=l(),P1=a("li"),_ce=a("strong"),pxo=o("ibert"),uxo=o(" \u2014 "),FD=a("a"),_xo=o("IBertForSequenceClassification"),bxo=o(" (I-BERT model)"),vxo=l(),I1=a("li"),bce=a("strong"),Fxo=o("layoutlm"),Txo=o(" \u2014 "),TD=a("a"),Mxo=o("LayoutLMForSequenceClassification"),Exo=o(" (LayoutLM model)"),Cxo=l(),q1=a("li"),vce=a("strong"),wxo=o("layoutlmv2"),Axo=o(" \u2014 "),MD=a("a"),yxo=o("LayoutLMv2ForSequenceClassification"),Lxo=o(" (LayoutLMv2 model)"),xxo=l(),N1=a("li"),Fce=a("strong"),$xo=o("led"),kxo=o(" \u2014 "),ED=a("a"),Sxo=o("LEDForSequenceClassification"),Rxo=o(" (LED model)"),Bxo=l(),j1=a("li"),Tce=a("strong"),Pxo=o("longformer"),Ixo=o(" \u2014 "),CD=a("a"),qxo=o("LongformerForSequenceClassification"),Nxo=o(" (Longformer model)"),jxo=l(),D1=a("li"),Mce=a("strong"),Dxo=o("mbart"),Gxo=o(" \u2014 "),wD=a("a"),Oxo=o("MBartForSequenceClassification"),Vxo=o(" (mBART model)"),Xxo=l(),G1=a("li"),Ece=a("strong"),zxo=o("megatron-bert"),Qxo=o(" \u2014 "),AD=a("a"),Wxo=o("MegatronBertForSequenceClassification"),Hxo=o(" (MegatronBert model)"),Uxo=l(),O1=a("li"),Cce=a("strong"),Jxo=o("mobilebert"),Yxo=o(" \u2014 "),yD=a("a"),Kxo=o("MobileBertForSequenceClassification"),Zxo=o(" (MobileBERT model)"),e7o=l(),V1=a("li"),wce=a("strong"),o7o=o("mpnet"),r7o=o(" \u2014 "),LD=a("a"),t7o=o("MPNetForSequenceClassification"),a7o=o(" (MPNet model)"),n7o=l(),X1=a("li"),Ace=a("strong"),s7o=o("nystromformer"),l7o=o(" \u2014 "),xD=a("a"),i7o=o("NystromformerForSequenceClassification"),d7o=o(" (Nystromformer model)"),c7o=l(),z1=a("li"),yce=a("strong"),f7o=o("openai-gpt"),m7o=o(" \u2014 "),$D=a("a"),g7o=o("OpenAIGPTForSequenceClassification"),h7o=o(" (OpenAI GPT model)"),p7o=l(),Q1=a("li"),Lce=a("strong"),u7o=o("perceiver"),_7o=o(" \u2014 "),kD=a("a"),b7o=o("PerceiverForSequenceClassification"),v7o=o(" (Perceiver model)"),F7o=l(),W1=a("li"),xce=a("strong"),T7o=o("plbart"),M7o=o(" \u2014 "),SD=a("a"),E7o=o("PLBartForSequenceClassification"),C7o=o(" (PLBart model)"),w7o=l(),H1=a("li"),$ce=a("strong"),A7o=o("qdqbert"),y7o=o(" \u2014 "),RD=a("a"),L7o=o("QDQBertForSequenceClassification"),x7o=o(" (QDQBert model)"),$7o=l(),U1=a("li"),kce=a("strong"),k7o=o("reformer"),S7o=o(" \u2014 "),BD=a("a"),R7o=o("ReformerForSequenceClassification"),B7o=o(" (Reformer model)"),P7o=l(),J1=a("li"),Sce=a("strong"),I7o=o("rembert"),q7o=o(" \u2014 "),PD=a("a"),N7o=o("RemBertForSequenceClassification"),j7o=o(" (RemBERT model)"),D7o=l(),Y1=a("li"),Rce=a("strong"),G7o=o("roberta"),O7o=o(" \u2014 "),ID=a("a"),V7o=o("RobertaForSequenceClassification"),X7o=o(" (RoBERTa model)"),z7o=l(),K1=a("li"),Bce=a("strong"),Q7o=o("roformer"),W7o=o(" \u2014 "),qD=a("a"),H7o=o("RoFormerForSequenceClassification"),U7o=o(" (RoFormer model)"),J7o=l(),Z1=a("li"),Pce=a("strong"),Y7o=o("squeezebert"),K7o=o(" \u2014 "),ND=a("a"),Z7o=o("SqueezeBertForSequenceClassification"),e9o=o(" (SqueezeBERT model)"),o9o=l(),eb=a("li"),Ice=a("strong"),r9o=o("tapas"),t9o=o(" \u2014 "),jD=a("a"),a9o=o("TapasForSequenceClassification"),n9o=o(" (TAPAS model)"),s9o=l(),ob=a("li"),qce=a("strong"),l9o=o("tapex"),i9o=o(" \u2014 "),DD=a("a"),d9o=o("BartForSequenceClassification"),c9o=o(" (TAPEX model)"),f9o=l(),rb=a("li"),Nce=a("strong"),m9o=o("transfo-xl"),g9o=o(" \u2014 "),GD=a("a"),h9o=o("TransfoXLForSequenceClassification"),p9o=o(" (Transformer-XL model)"),u9o=l(),tb=a("li"),jce=a("strong"),_9o=o("xlm"),b9o=o(" \u2014 "),OD=a("a"),v9o=o("XLMForSequenceClassification"),F9o=o(" (XLM model)"),T9o=l(),ab=a("li"),Dce=a("strong"),M9o=o("xlm-roberta"),E9o=o(" \u2014 "),VD=a("a"),C9o=o("XLMRobertaForSequenceClassification"),w9o=o(" (XLM-RoBERTa model)"),A9o=l(),nb=a("li"),Gce=a("strong"),y9o=o("xlm-roberta-xl"),L9o=o(" \u2014 "),XD=a("a"),x9o=o("XLMRobertaXLForSequenceClassification"),$9o=o(" (XLM-RoBERTa-XL model)"),k9o=l(),sb=a("li"),Oce=a("strong"),S9o=o("xlnet"),R9o=o(" \u2014 "),zD=a("a"),B9o=o("XLNetForSequenceClassification"),P9o=o(" (XLNet model)"),I9o=l(),lb=a("li"),Vce=a("strong"),q9o=o("yoso"),N9o=o(" \u2014 "),QD=a("a"),j9o=o("YosoForSequenceClassification"),D9o=o(" (YOSO model)"),G9o=l(),ib=a("p"),O9o=o("The model is set in evaluation mode by default using "),Xce=a("code"),V9o=o("model.eval()"),X9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zce=a("code"),z9o=o("model.train()"),Q9o=l(),F(db.$$.fragment),XPe=l(),ji=a("h2"),cb=a("a"),Qce=a("span"),F(Wy.$$.fragment),W9o=l(),Wce=a("span"),H9o=o("AutoModelForMultipleChoice"),zPe=l(),Bo=a("div"),F(Hy.$$.fragment),U9o=l(),Di=a("p"),J9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WD=a("a"),Y9o=o("from_pretrained()"),K9o=o(" class method or the "),HD=a("a"),Z9o=o("from_config()"),e$o=o(` class
method.`),o$o=l(),Uy=a("p"),r$o=o("This class cannot be instantiated directly using "),Hce=a("code"),t$o=o("__init__()"),a$o=o(" (throws an error)."),n$o=l(),lt=a("div"),F(Jy.$$.fragment),s$o=l(),Uce=a("p"),l$o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),i$o=l(),Gi=a("p"),d$o=o(`Note:
Loading a model from its configuration file does `),Jce=a("strong"),c$o=o("not"),f$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UD=a("a"),m$o=o("from_pretrained()"),g$o=o(" to load the model weights."),h$o=l(),F(fb.$$.fragment),p$o=l(),oo=a("div"),F(Yy.$$.fragment),u$o=l(),Yce=a("p"),_$o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),b$o=l(),Sa=a("p"),v$o=o("The model class to instantiate is selected based on the "),Kce=a("code"),F$o=o("model_type"),T$o=o(` property of the config object (either
passed as an argument or loaded from `),Zce=a("code"),M$o=o("pretrained_model_name_or_path"),E$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),efe=a("code"),C$o=o("pretrained_model_name_or_path"),w$o=o(":"),A$o=l(),Y=a("ul"),mb=a("li"),ofe=a("strong"),y$o=o("albert"),L$o=o(" \u2014 "),JD=a("a"),x$o=o("AlbertForMultipleChoice"),$$o=o(" (ALBERT model)"),k$o=l(),gb=a("li"),rfe=a("strong"),S$o=o("bert"),R$o=o(" \u2014 "),YD=a("a"),B$o=o("BertForMultipleChoice"),P$o=o(" (BERT model)"),I$o=l(),hb=a("li"),tfe=a("strong"),q$o=o("big_bird"),N$o=o(" \u2014 "),KD=a("a"),j$o=o("BigBirdForMultipleChoice"),D$o=o(" (BigBird model)"),G$o=l(),pb=a("li"),afe=a("strong"),O$o=o("camembert"),V$o=o(" \u2014 "),ZD=a("a"),X$o=o("CamembertForMultipleChoice"),z$o=o(" (CamemBERT model)"),Q$o=l(),ub=a("li"),nfe=a("strong"),W$o=o("canine"),H$o=o(" \u2014 "),eG=a("a"),U$o=o("CanineForMultipleChoice"),J$o=o(" (Canine model)"),Y$o=l(),_b=a("li"),sfe=a("strong"),K$o=o("convbert"),Z$o=o(" \u2014 "),oG=a("a"),eko=o("ConvBertForMultipleChoice"),oko=o(" (ConvBERT model)"),rko=l(),bb=a("li"),lfe=a("strong"),tko=o("data2vec-text"),ako=o(" \u2014 "),rG=a("a"),nko=o("Data2VecTextForMultipleChoice"),sko=o(" (Data2VecText model)"),lko=l(),vb=a("li"),ife=a("strong"),iko=o("distilbert"),dko=o(" \u2014 "),tG=a("a"),cko=o("DistilBertForMultipleChoice"),fko=o(" (DistilBERT model)"),mko=l(),Fb=a("li"),dfe=a("strong"),gko=o("electra"),hko=o(" \u2014 "),aG=a("a"),pko=o("ElectraForMultipleChoice"),uko=o(" (ELECTRA model)"),_ko=l(),Tb=a("li"),cfe=a("strong"),bko=o("flaubert"),vko=o(" \u2014 "),nG=a("a"),Fko=o("FlaubertForMultipleChoice"),Tko=o(" (FlauBERT model)"),Mko=l(),Mb=a("li"),ffe=a("strong"),Eko=o("fnet"),Cko=o(" \u2014 "),sG=a("a"),wko=o("FNetForMultipleChoice"),Ako=o(" (FNet model)"),yko=l(),Eb=a("li"),mfe=a("strong"),Lko=o("funnel"),xko=o(" \u2014 "),lG=a("a"),$ko=o("FunnelForMultipleChoice"),kko=o(" (Funnel Transformer model)"),Sko=l(),Cb=a("li"),gfe=a("strong"),Rko=o("ibert"),Bko=o(" \u2014 "),iG=a("a"),Pko=o("IBertForMultipleChoice"),Iko=o(" (I-BERT model)"),qko=l(),wb=a("li"),hfe=a("strong"),Nko=o("longformer"),jko=o(" \u2014 "),dG=a("a"),Dko=o("LongformerForMultipleChoice"),Gko=o(" (Longformer model)"),Oko=l(),Ab=a("li"),pfe=a("strong"),Vko=o("megatron-bert"),Xko=o(" \u2014 "),cG=a("a"),zko=o("MegatronBertForMultipleChoice"),Qko=o(" (MegatronBert model)"),Wko=l(),yb=a("li"),ufe=a("strong"),Hko=o("mobilebert"),Uko=o(" \u2014 "),fG=a("a"),Jko=o("MobileBertForMultipleChoice"),Yko=o(" (MobileBERT model)"),Kko=l(),Lb=a("li"),_fe=a("strong"),Zko=o("mpnet"),eSo=o(" \u2014 "),mG=a("a"),oSo=o("MPNetForMultipleChoice"),rSo=o(" (MPNet model)"),tSo=l(),xb=a("li"),bfe=a("strong"),aSo=o("nystromformer"),nSo=o(" \u2014 "),gG=a("a"),sSo=o("NystromformerForMultipleChoice"),lSo=o(" (Nystromformer model)"),iSo=l(),$b=a("li"),vfe=a("strong"),dSo=o("qdqbert"),cSo=o(" \u2014 "),hG=a("a"),fSo=o("QDQBertForMultipleChoice"),mSo=o(" (QDQBert model)"),gSo=l(),kb=a("li"),Ffe=a("strong"),hSo=o("rembert"),pSo=o(" \u2014 "),pG=a("a"),uSo=o("RemBertForMultipleChoice"),_So=o(" (RemBERT model)"),bSo=l(),Sb=a("li"),Tfe=a("strong"),vSo=o("roberta"),FSo=o(" \u2014 "),uG=a("a"),TSo=o("RobertaForMultipleChoice"),MSo=o(" (RoBERTa model)"),ESo=l(),Rb=a("li"),Mfe=a("strong"),CSo=o("roformer"),wSo=o(" \u2014 "),_G=a("a"),ASo=o("RoFormerForMultipleChoice"),ySo=o(" (RoFormer model)"),LSo=l(),Bb=a("li"),Efe=a("strong"),xSo=o("squeezebert"),$So=o(" \u2014 "),bG=a("a"),kSo=o("SqueezeBertForMultipleChoice"),SSo=o(" (SqueezeBERT model)"),RSo=l(),Pb=a("li"),Cfe=a("strong"),BSo=o("xlm"),PSo=o(" \u2014 "),vG=a("a"),ISo=o("XLMForMultipleChoice"),qSo=o(" (XLM model)"),NSo=l(),Ib=a("li"),wfe=a("strong"),jSo=o("xlm-roberta"),DSo=o(" \u2014 "),FG=a("a"),GSo=o("XLMRobertaForMultipleChoice"),OSo=o(" (XLM-RoBERTa model)"),VSo=l(),qb=a("li"),Afe=a("strong"),XSo=o("xlm-roberta-xl"),zSo=o(" \u2014 "),TG=a("a"),QSo=o("XLMRobertaXLForMultipleChoice"),WSo=o(" (XLM-RoBERTa-XL model)"),HSo=l(),Nb=a("li"),yfe=a("strong"),USo=o("xlnet"),JSo=o(" \u2014 "),MG=a("a"),YSo=o("XLNetForMultipleChoice"),KSo=o(" (XLNet model)"),ZSo=l(),jb=a("li"),Lfe=a("strong"),eRo=o("yoso"),oRo=o(" \u2014 "),EG=a("a"),rRo=o("YosoForMultipleChoice"),tRo=o(" (YOSO model)"),aRo=l(),Db=a("p"),nRo=o("The model is set in evaluation mode by default using "),xfe=a("code"),sRo=o("model.eval()"),lRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$fe=a("code"),iRo=o("model.train()"),dRo=l(),F(Gb.$$.fragment),QPe=l(),Oi=a("h2"),Ob=a("a"),kfe=a("span"),F(Ky.$$.fragment),cRo=l(),Sfe=a("span"),fRo=o("AutoModelForNextSentencePrediction"),WPe=l(),Po=a("div"),F(Zy.$$.fragment),mRo=l(),Vi=a("p"),gRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),CG=a("a"),hRo=o("from_pretrained()"),pRo=o(" class method or the "),wG=a("a"),uRo=o("from_config()"),_Ro=o(` class
method.`),bRo=l(),eL=a("p"),vRo=o("This class cannot be instantiated directly using "),Rfe=a("code"),FRo=o("__init__()"),TRo=o(" (throws an error)."),MRo=l(),it=a("div"),F(oL.$$.fragment),ERo=l(),Bfe=a("p"),CRo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wRo=l(),Xi=a("p"),ARo=o(`Note:
Loading a model from its configuration file does `),Pfe=a("strong"),yRo=o("not"),LRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AG=a("a"),xRo=o("from_pretrained()"),$Ro=o(" to load the model weights."),kRo=l(),F(Vb.$$.fragment),SRo=l(),ro=a("div"),F(rL.$$.fragment),RRo=l(),Ife=a("p"),BRo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),PRo=l(),Ra=a("p"),IRo=o("The model class to instantiate is selected based on the "),qfe=a("code"),qRo=o("model_type"),NRo=o(` property of the config object (either
passed as an argument or loaded from `),Nfe=a("code"),jRo=o("pretrained_model_name_or_path"),DRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jfe=a("code"),GRo=o("pretrained_model_name_or_path"),ORo=o(":"),VRo=l(),Yr=a("ul"),Xb=a("li"),Dfe=a("strong"),XRo=o("bert"),zRo=o(" \u2014 "),yG=a("a"),QRo=o("BertForNextSentencePrediction"),WRo=o(" (BERT model)"),HRo=l(),zb=a("li"),Gfe=a("strong"),URo=o("fnet"),JRo=o(" \u2014 "),LG=a("a"),YRo=o("FNetForNextSentencePrediction"),KRo=o(" (FNet model)"),ZRo=l(),Qb=a("li"),Ofe=a("strong"),eBo=o("megatron-bert"),oBo=o(" \u2014 "),xG=a("a"),rBo=o("MegatronBertForNextSentencePrediction"),tBo=o(" (MegatronBert model)"),aBo=l(),Wb=a("li"),Vfe=a("strong"),nBo=o("mobilebert"),sBo=o(" \u2014 "),$G=a("a"),lBo=o("MobileBertForNextSentencePrediction"),iBo=o(" (MobileBERT model)"),dBo=l(),Hb=a("li"),Xfe=a("strong"),cBo=o("qdqbert"),fBo=o(" \u2014 "),kG=a("a"),mBo=o("QDQBertForNextSentencePrediction"),gBo=o(" (QDQBert model)"),hBo=l(),Ub=a("p"),pBo=o("The model is set in evaluation mode by default using "),zfe=a("code"),uBo=o("model.eval()"),_Bo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qfe=a("code"),bBo=o("model.train()"),vBo=l(),F(Jb.$$.fragment),HPe=l(),zi=a("h2"),Yb=a("a"),Wfe=a("span"),F(tL.$$.fragment),FBo=l(),Hfe=a("span"),TBo=o("AutoModelForTokenClassification"),UPe=l(),Io=a("div"),F(aL.$$.fragment),MBo=l(),Qi=a("p"),EBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),SG=a("a"),CBo=o("from_pretrained()"),wBo=o(" class method or the "),RG=a("a"),ABo=o("from_config()"),yBo=o(` class
method.`),LBo=l(),nL=a("p"),xBo=o("This class cannot be instantiated directly using "),Ufe=a("code"),$Bo=o("__init__()"),kBo=o(" (throws an error)."),SBo=l(),dt=a("div"),F(sL.$$.fragment),RBo=l(),Jfe=a("p"),BBo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),PBo=l(),Wi=a("p"),IBo=o(`Note:
Loading a model from its configuration file does `),Yfe=a("strong"),qBo=o("not"),NBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BG=a("a"),jBo=o("from_pretrained()"),DBo=o(" to load the model weights."),GBo=l(),F(Kb.$$.fragment),OBo=l(),to=a("div"),F(lL.$$.fragment),VBo=l(),Kfe=a("p"),XBo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zBo=l(),Ba=a("p"),QBo=o("The model class to instantiate is selected based on the "),Zfe=a("code"),WBo=o("model_type"),HBo=o(` property of the config object (either
passed as an argument or loaded from `),eme=a("code"),UBo=o("pretrained_model_name_or_path"),JBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=a("code"),YBo=o("pretrained_model_name_or_path"),KBo=o(":"),ZBo=l(),U=a("ul"),Zb=a("li"),rme=a("strong"),ePo=o("albert"),oPo=o(" \u2014 "),PG=a("a"),rPo=o("AlbertForTokenClassification"),tPo=o(" (ALBERT model)"),aPo=l(),e4=a("li"),tme=a("strong"),nPo=o("bert"),sPo=o(" \u2014 "),IG=a("a"),lPo=o("BertForTokenClassification"),iPo=o(" (BERT model)"),dPo=l(),o4=a("li"),ame=a("strong"),cPo=o("big_bird"),fPo=o(" \u2014 "),qG=a("a"),mPo=o("BigBirdForTokenClassification"),gPo=o(" (BigBird model)"),hPo=l(),r4=a("li"),nme=a("strong"),pPo=o("camembert"),uPo=o(" \u2014 "),NG=a("a"),_Po=o("CamembertForTokenClassification"),bPo=o(" (CamemBERT model)"),vPo=l(),t4=a("li"),sme=a("strong"),FPo=o("canine"),TPo=o(" \u2014 "),jG=a("a"),MPo=o("CanineForTokenClassification"),EPo=o(" (Canine model)"),CPo=l(),a4=a("li"),lme=a("strong"),wPo=o("convbert"),APo=o(" \u2014 "),DG=a("a"),yPo=o("ConvBertForTokenClassification"),LPo=o(" (ConvBERT model)"),xPo=l(),n4=a("li"),ime=a("strong"),$Po=o("data2vec-text"),kPo=o(" \u2014 "),GG=a("a"),SPo=o("Data2VecTextForTokenClassification"),RPo=o(" (Data2VecText model)"),BPo=l(),s4=a("li"),dme=a("strong"),PPo=o("deberta"),IPo=o(" \u2014 "),OG=a("a"),qPo=o("DebertaForTokenClassification"),NPo=o(" (DeBERTa model)"),jPo=l(),l4=a("li"),cme=a("strong"),DPo=o("deberta-v2"),GPo=o(" \u2014 "),VG=a("a"),OPo=o("DebertaV2ForTokenClassification"),VPo=o(" (DeBERTa-v2 model)"),XPo=l(),i4=a("li"),fme=a("strong"),zPo=o("distilbert"),QPo=o(" \u2014 "),XG=a("a"),WPo=o("DistilBertForTokenClassification"),HPo=o(" (DistilBERT model)"),UPo=l(),d4=a("li"),mme=a("strong"),JPo=o("electra"),YPo=o(" \u2014 "),zG=a("a"),KPo=o("ElectraForTokenClassification"),ZPo=o(" (ELECTRA model)"),eIo=l(),c4=a("li"),gme=a("strong"),oIo=o("flaubert"),rIo=o(" \u2014 "),QG=a("a"),tIo=o("FlaubertForTokenClassification"),aIo=o(" (FlauBERT model)"),nIo=l(),f4=a("li"),hme=a("strong"),sIo=o("fnet"),lIo=o(" \u2014 "),WG=a("a"),iIo=o("FNetForTokenClassification"),dIo=o(" (FNet model)"),cIo=l(),m4=a("li"),pme=a("strong"),fIo=o("funnel"),mIo=o(" \u2014 "),HG=a("a"),gIo=o("FunnelForTokenClassification"),hIo=o(" (Funnel Transformer model)"),pIo=l(),g4=a("li"),ume=a("strong"),uIo=o("gpt2"),_Io=o(" \u2014 "),UG=a("a"),bIo=o("GPT2ForTokenClassification"),vIo=o(" (OpenAI GPT-2 model)"),FIo=l(),h4=a("li"),_me=a("strong"),TIo=o("ibert"),MIo=o(" \u2014 "),JG=a("a"),EIo=o("IBertForTokenClassification"),CIo=o(" (I-BERT model)"),wIo=l(),p4=a("li"),bme=a("strong"),AIo=o("layoutlm"),yIo=o(" \u2014 "),YG=a("a"),LIo=o("LayoutLMForTokenClassification"),xIo=o(" (LayoutLM model)"),$Io=l(),u4=a("li"),vme=a("strong"),kIo=o("layoutlmv2"),SIo=o(" \u2014 "),KG=a("a"),RIo=o("LayoutLMv2ForTokenClassification"),BIo=o(" (LayoutLMv2 model)"),PIo=l(),_4=a("li"),Fme=a("strong"),IIo=o("longformer"),qIo=o(" \u2014 "),ZG=a("a"),NIo=o("LongformerForTokenClassification"),jIo=o(" (Longformer model)"),DIo=l(),b4=a("li"),Tme=a("strong"),GIo=o("megatron-bert"),OIo=o(" \u2014 "),eO=a("a"),VIo=o("MegatronBertForTokenClassification"),XIo=o(" (MegatronBert model)"),zIo=l(),v4=a("li"),Mme=a("strong"),QIo=o("mobilebert"),WIo=o(" \u2014 "),oO=a("a"),HIo=o("MobileBertForTokenClassification"),UIo=o(" (MobileBERT model)"),JIo=l(),F4=a("li"),Eme=a("strong"),YIo=o("mpnet"),KIo=o(" \u2014 "),rO=a("a"),ZIo=o("MPNetForTokenClassification"),eqo=o(" (MPNet model)"),oqo=l(),T4=a("li"),Cme=a("strong"),rqo=o("nystromformer"),tqo=o(" \u2014 "),tO=a("a"),aqo=o("NystromformerForTokenClassification"),nqo=o(" (Nystromformer model)"),sqo=l(),M4=a("li"),wme=a("strong"),lqo=o("qdqbert"),iqo=o(" \u2014 "),aO=a("a"),dqo=o("QDQBertForTokenClassification"),cqo=o(" (QDQBert model)"),fqo=l(),E4=a("li"),Ame=a("strong"),mqo=o("rembert"),gqo=o(" \u2014 "),nO=a("a"),hqo=o("RemBertForTokenClassification"),pqo=o(" (RemBERT model)"),uqo=l(),C4=a("li"),yme=a("strong"),_qo=o("roberta"),bqo=o(" \u2014 "),sO=a("a"),vqo=o("RobertaForTokenClassification"),Fqo=o(" (RoBERTa model)"),Tqo=l(),w4=a("li"),Lme=a("strong"),Mqo=o("roformer"),Eqo=o(" \u2014 "),lO=a("a"),Cqo=o("RoFormerForTokenClassification"),wqo=o(" (RoFormer model)"),Aqo=l(),A4=a("li"),xme=a("strong"),yqo=o("squeezebert"),Lqo=o(" \u2014 "),iO=a("a"),xqo=o("SqueezeBertForTokenClassification"),$qo=o(" (SqueezeBERT model)"),kqo=l(),y4=a("li"),$me=a("strong"),Sqo=o("xlm"),Rqo=o(" \u2014 "),dO=a("a"),Bqo=o("XLMForTokenClassification"),Pqo=o(" (XLM model)"),Iqo=l(),L4=a("li"),kme=a("strong"),qqo=o("xlm-roberta"),Nqo=o(" \u2014 "),cO=a("a"),jqo=o("XLMRobertaForTokenClassification"),Dqo=o(" (XLM-RoBERTa model)"),Gqo=l(),x4=a("li"),Sme=a("strong"),Oqo=o("xlm-roberta-xl"),Vqo=o(" \u2014 "),fO=a("a"),Xqo=o("XLMRobertaXLForTokenClassification"),zqo=o(" (XLM-RoBERTa-XL model)"),Qqo=l(),$4=a("li"),Rme=a("strong"),Wqo=o("xlnet"),Hqo=o(" \u2014 "),mO=a("a"),Uqo=o("XLNetForTokenClassification"),Jqo=o(" (XLNet model)"),Yqo=l(),k4=a("li"),Bme=a("strong"),Kqo=o("yoso"),Zqo=o(" \u2014 "),gO=a("a"),eNo=o("YosoForTokenClassification"),oNo=o(" (YOSO model)"),rNo=l(),S4=a("p"),tNo=o("The model is set in evaluation mode by default using "),Pme=a("code"),aNo=o("model.eval()"),nNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ime=a("code"),sNo=o("model.train()"),lNo=l(),F(R4.$$.fragment),JPe=l(),Hi=a("h2"),B4=a("a"),qme=a("span"),F(iL.$$.fragment),iNo=l(),Nme=a("span"),dNo=o("AutoModelForQuestionAnswering"),YPe=l(),qo=a("div"),F(dL.$$.fragment),cNo=l(),Ui=a("p"),fNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hO=a("a"),mNo=o("from_pretrained()"),gNo=o(" class method or the "),pO=a("a"),hNo=o("from_config()"),pNo=o(` class
method.`),uNo=l(),cL=a("p"),_No=o("This class cannot be instantiated directly using "),jme=a("code"),bNo=o("__init__()"),vNo=o(" (throws an error)."),FNo=l(),ct=a("div"),F(fL.$$.fragment),TNo=l(),Dme=a("p"),MNo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ENo=l(),Ji=a("p"),CNo=o(`Note:
Loading a model from its configuration file does `),Gme=a("strong"),wNo=o("not"),ANo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uO=a("a"),yNo=o("from_pretrained()"),LNo=o(" to load the model weights."),xNo=l(),F(P4.$$.fragment),$No=l(),ao=a("div"),F(mL.$$.fragment),kNo=l(),Ome=a("p"),SNo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),RNo=l(),Pa=a("p"),BNo=o("The model class to instantiate is selected based on the "),Vme=a("code"),PNo=o("model_type"),INo=o(` property of the config object (either
passed as an argument or loaded from `),Xme=a("code"),qNo=o("pretrained_model_name_or_path"),NNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=a("code"),jNo=o("pretrained_model_name_or_path"),DNo=o(":"),GNo=l(),O=a("ul"),I4=a("li"),Qme=a("strong"),ONo=o("albert"),VNo=o(" \u2014 "),_O=a("a"),XNo=o("AlbertForQuestionAnswering"),zNo=o(" (ALBERT model)"),QNo=l(),q4=a("li"),Wme=a("strong"),WNo=o("bart"),HNo=o(" \u2014 "),bO=a("a"),UNo=o("BartForQuestionAnswering"),JNo=o(" (BART model)"),YNo=l(),N4=a("li"),Hme=a("strong"),KNo=o("bert"),ZNo=o(" \u2014 "),vO=a("a"),ejo=o("BertForQuestionAnswering"),ojo=o(" (BERT model)"),rjo=l(),j4=a("li"),Ume=a("strong"),tjo=o("big_bird"),ajo=o(" \u2014 "),FO=a("a"),njo=o("BigBirdForQuestionAnswering"),sjo=o(" (BigBird model)"),ljo=l(),D4=a("li"),Jme=a("strong"),ijo=o("bigbird_pegasus"),djo=o(" \u2014 "),TO=a("a"),cjo=o("BigBirdPegasusForQuestionAnswering"),fjo=o(" (BigBirdPegasus model)"),mjo=l(),G4=a("li"),Yme=a("strong"),gjo=o("camembert"),hjo=o(" \u2014 "),MO=a("a"),pjo=o("CamembertForQuestionAnswering"),ujo=o(" (CamemBERT model)"),_jo=l(),O4=a("li"),Kme=a("strong"),bjo=o("canine"),vjo=o(" \u2014 "),EO=a("a"),Fjo=o("CanineForQuestionAnswering"),Tjo=o(" (Canine model)"),Mjo=l(),V4=a("li"),Zme=a("strong"),Ejo=o("convbert"),Cjo=o(" \u2014 "),CO=a("a"),wjo=o("ConvBertForQuestionAnswering"),Ajo=o(" (ConvBERT model)"),yjo=l(),X4=a("li"),ege=a("strong"),Ljo=o("data2vec-text"),xjo=o(" \u2014 "),wO=a("a"),$jo=o("Data2VecTextForQuestionAnswering"),kjo=o(" (Data2VecText model)"),Sjo=l(),z4=a("li"),oge=a("strong"),Rjo=o("deberta"),Bjo=o(" \u2014 "),AO=a("a"),Pjo=o("DebertaForQuestionAnswering"),Ijo=o(" (DeBERTa model)"),qjo=l(),Q4=a("li"),rge=a("strong"),Njo=o("deberta-v2"),jjo=o(" \u2014 "),yO=a("a"),Djo=o("DebertaV2ForQuestionAnswering"),Gjo=o(" (DeBERTa-v2 model)"),Ojo=l(),W4=a("li"),tge=a("strong"),Vjo=o("distilbert"),Xjo=o(" \u2014 "),LO=a("a"),zjo=o("DistilBertForQuestionAnswering"),Qjo=o(" (DistilBERT model)"),Wjo=l(),H4=a("li"),age=a("strong"),Hjo=o("electra"),Ujo=o(" \u2014 "),xO=a("a"),Jjo=o("ElectraForQuestionAnswering"),Yjo=o(" (ELECTRA model)"),Kjo=l(),U4=a("li"),nge=a("strong"),Zjo=o("flaubert"),eDo=o(" \u2014 "),$O=a("a"),oDo=o("FlaubertForQuestionAnsweringSimple"),rDo=o(" (FlauBERT model)"),tDo=l(),J4=a("li"),sge=a("strong"),aDo=o("fnet"),nDo=o(" \u2014 "),kO=a("a"),sDo=o("FNetForQuestionAnswering"),lDo=o(" (FNet model)"),iDo=l(),Y4=a("li"),lge=a("strong"),dDo=o("funnel"),cDo=o(" \u2014 "),SO=a("a"),fDo=o("FunnelForQuestionAnswering"),mDo=o(" (Funnel Transformer model)"),gDo=l(),K4=a("li"),ige=a("strong"),hDo=o("gptj"),pDo=o(" \u2014 "),RO=a("a"),uDo=o("GPTJForQuestionAnswering"),_Do=o(" (GPT-J model)"),bDo=l(),Z4=a("li"),dge=a("strong"),vDo=o("ibert"),FDo=o(" \u2014 "),BO=a("a"),TDo=o("IBertForQuestionAnswering"),MDo=o(" (I-BERT model)"),EDo=l(),ev=a("li"),cge=a("strong"),CDo=o("layoutlmv2"),wDo=o(" \u2014 "),PO=a("a"),ADo=o("LayoutLMv2ForQuestionAnswering"),yDo=o(" (LayoutLMv2 model)"),LDo=l(),ov=a("li"),fge=a("strong"),xDo=o("led"),$Do=o(" \u2014 "),IO=a("a"),kDo=o("LEDForQuestionAnswering"),SDo=o(" (LED model)"),RDo=l(),rv=a("li"),mge=a("strong"),BDo=o("longformer"),PDo=o(" \u2014 "),qO=a("a"),IDo=o("LongformerForQuestionAnswering"),qDo=o(" (Longformer model)"),NDo=l(),tv=a("li"),gge=a("strong"),jDo=o("lxmert"),DDo=o(" \u2014 "),NO=a("a"),GDo=o("LxmertForQuestionAnswering"),ODo=o(" (LXMERT model)"),VDo=l(),av=a("li"),hge=a("strong"),XDo=o("mbart"),zDo=o(" \u2014 "),jO=a("a"),QDo=o("MBartForQuestionAnswering"),WDo=o(" (mBART model)"),HDo=l(),nv=a("li"),pge=a("strong"),UDo=o("megatron-bert"),JDo=o(" \u2014 "),DO=a("a"),YDo=o("MegatronBertForQuestionAnswering"),KDo=o(" (MegatronBert model)"),ZDo=l(),sv=a("li"),uge=a("strong"),eGo=o("mobilebert"),oGo=o(" \u2014 "),GO=a("a"),rGo=o("MobileBertForQuestionAnswering"),tGo=o(" (MobileBERT model)"),aGo=l(),lv=a("li"),_ge=a("strong"),nGo=o("mpnet"),sGo=o(" \u2014 "),OO=a("a"),lGo=o("MPNetForQuestionAnswering"),iGo=o(" (MPNet model)"),dGo=l(),iv=a("li"),bge=a("strong"),cGo=o("nystromformer"),fGo=o(" \u2014 "),VO=a("a"),mGo=o("NystromformerForQuestionAnswering"),gGo=o(" (Nystromformer model)"),hGo=l(),dv=a("li"),vge=a("strong"),pGo=o("qdqbert"),uGo=o(" \u2014 "),XO=a("a"),_Go=o("QDQBertForQuestionAnswering"),bGo=o(" (QDQBert model)"),vGo=l(),cv=a("li"),Fge=a("strong"),FGo=o("reformer"),TGo=o(" \u2014 "),zO=a("a"),MGo=o("ReformerForQuestionAnswering"),EGo=o(" (Reformer model)"),CGo=l(),fv=a("li"),Tge=a("strong"),wGo=o("rembert"),AGo=o(" \u2014 "),QO=a("a"),yGo=o("RemBertForQuestionAnswering"),LGo=o(" (RemBERT model)"),xGo=l(),mv=a("li"),Mge=a("strong"),$Go=o("roberta"),kGo=o(" \u2014 "),WO=a("a"),SGo=o("RobertaForQuestionAnswering"),RGo=o(" (RoBERTa model)"),BGo=l(),gv=a("li"),Ege=a("strong"),PGo=o("roformer"),IGo=o(" \u2014 "),HO=a("a"),qGo=o("RoFormerForQuestionAnswering"),NGo=o(" (RoFormer model)"),jGo=l(),hv=a("li"),Cge=a("strong"),DGo=o("splinter"),GGo=o(" \u2014 "),UO=a("a"),OGo=o("SplinterForQuestionAnswering"),VGo=o(" (Splinter model)"),XGo=l(),pv=a("li"),wge=a("strong"),zGo=o("squeezebert"),QGo=o(" \u2014 "),JO=a("a"),WGo=o("SqueezeBertForQuestionAnswering"),HGo=o(" (SqueezeBERT model)"),UGo=l(),uv=a("li"),Age=a("strong"),JGo=o("xlm"),YGo=o(" \u2014 "),YO=a("a"),KGo=o("XLMForQuestionAnsweringSimple"),ZGo=o(" (XLM model)"),eOo=l(),_v=a("li"),yge=a("strong"),oOo=o("xlm-roberta"),rOo=o(" \u2014 "),KO=a("a"),tOo=o("XLMRobertaForQuestionAnswering"),aOo=o(" (XLM-RoBERTa model)"),nOo=l(),bv=a("li"),Lge=a("strong"),sOo=o("xlm-roberta-xl"),lOo=o(" \u2014 "),ZO=a("a"),iOo=o("XLMRobertaXLForQuestionAnswering"),dOo=o(" (XLM-RoBERTa-XL model)"),cOo=l(),vv=a("li"),xge=a("strong"),fOo=o("xlnet"),mOo=o(" \u2014 "),eV=a("a"),gOo=o("XLNetForQuestionAnsweringSimple"),hOo=o(" (XLNet model)"),pOo=l(),Fv=a("li"),$ge=a("strong"),uOo=o("yoso"),_Oo=o(" \u2014 "),oV=a("a"),bOo=o("YosoForQuestionAnswering"),vOo=o(" (YOSO model)"),FOo=l(),Tv=a("p"),TOo=o("The model is set in evaluation mode by default using "),kge=a("code"),MOo=o("model.eval()"),EOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sge=a("code"),COo=o("model.train()"),wOo=l(),F(Mv.$$.fragment),KPe=l(),Yi=a("h2"),Ev=a("a"),Rge=a("span"),F(gL.$$.fragment),AOo=l(),Bge=a("span"),yOo=o("AutoModelForTableQuestionAnswering"),ZPe=l(),No=a("div"),F(hL.$$.fragment),LOo=l(),Ki=a("p"),xOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),rV=a("a"),$Oo=o("from_pretrained()"),kOo=o(" class method or the "),tV=a("a"),SOo=o("from_config()"),ROo=o(` class
method.`),BOo=l(),pL=a("p"),POo=o("This class cannot be instantiated directly using "),Pge=a("code"),IOo=o("__init__()"),qOo=o(" (throws an error)."),NOo=l(),ft=a("div"),F(uL.$$.fragment),jOo=l(),Ige=a("p"),DOo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),GOo=l(),Zi=a("p"),OOo=o(`Note:
Loading a model from its configuration file does `),qge=a("strong"),VOo=o("not"),XOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=a("a"),zOo=o("from_pretrained()"),QOo=o(" to load the model weights."),WOo=l(),F(Cv.$$.fragment),HOo=l(),no=a("div"),F(_L.$$.fragment),UOo=l(),Nge=a("p"),JOo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),YOo=l(),Ia=a("p"),KOo=o("The model class to instantiate is selected based on the "),jge=a("code"),ZOo=o("model_type"),eVo=o(` property of the config object (either
passed as an argument or loaded from `),Dge=a("code"),oVo=o("pretrained_model_name_or_path"),rVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gge=a("code"),tVo=o("pretrained_model_name_or_path"),aVo=o(":"),nVo=l(),Oge=a("ul"),wv=a("li"),Vge=a("strong"),sVo=o("tapas"),lVo=o(" \u2014 "),nV=a("a"),iVo=o("TapasForQuestionAnswering"),dVo=o(" (TAPAS model)"),cVo=l(),Av=a("p"),fVo=o("The model is set in evaluation mode by default using "),Xge=a("code"),mVo=o("model.eval()"),gVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=a("code"),hVo=o("model.train()"),pVo=l(),F(yv.$$.fragment),eIe=l(),ed=a("h2"),Lv=a("a"),Qge=a("span"),F(bL.$$.fragment),uVo=l(),Wge=a("span"),_Vo=o("AutoModelForImageClassification"),oIe=l(),jo=a("div"),F(vL.$$.fragment),bVo=l(),od=a("p"),vVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sV=a("a"),FVo=o("from_pretrained()"),TVo=o(" class method or the "),lV=a("a"),MVo=o("from_config()"),EVo=o(` class
method.`),CVo=l(),FL=a("p"),wVo=o("This class cannot be instantiated directly using "),Hge=a("code"),AVo=o("__init__()"),yVo=o(" (throws an error)."),LVo=l(),mt=a("div"),F(TL.$$.fragment),xVo=l(),Uge=a("p"),$Vo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kVo=l(),rd=a("p"),SVo=o(`Note:
Loading a model from its configuration file does `),Jge=a("strong"),RVo=o("not"),BVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=a("a"),PVo=o("from_pretrained()"),IVo=o(" to load the model weights."),qVo=l(),F(xv.$$.fragment),NVo=l(),so=a("div"),F(ML.$$.fragment),jVo=l(),Yge=a("p"),DVo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GVo=l(),qa=a("p"),OVo=o("The model class to instantiate is selected based on the "),Kge=a("code"),VVo=o("model_type"),XVo=o(` property of the config object (either
passed as an argument or loaded from `),Zge=a("code"),zVo=o("pretrained_model_name_or_path"),QVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=a("code"),WVo=o("pretrained_model_name_or_path"),HVo=o(":"),UVo=l(),ve=a("ul"),$v=a("li"),ohe=a("strong"),JVo=o("beit"),YVo=o(" \u2014 "),dV=a("a"),KVo=o("BeitForImageClassification"),ZVo=o(" (BEiT model)"),eXo=l(),kv=a("li"),rhe=a("strong"),oXo=o("convnext"),rXo=o(" \u2014 "),cV=a("a"),tXo=o("ConvNextForImageClassification"),aXo=o(" (ConvNext model)"),nXo=l(),Sv=a("li"),the=a("strong"),sXo=o("data2vec-vision"),lXo=o(" \u2014 "),fV=a("a"),iXo=o("Data2VecVisionForImageClassification"),dXo=o(" (Data2VecVision model)"),cXo=l(),Rs=a("li"),ahe=a("strong"),fXo=o("deit"),mXo=o(" \u2014 "),mV=a("a"),gXo=o("DeiTForImageClassification"),hXo=o(" or "),gV=a("a"),pXo=o("DeiTForImageClassificationWithTeacher"),uXo=o(" (DeiT model)"),_Xo=l(),Rv=a("li"),nhe=a("strong"),bXo=o("imagegpt"),vXo=o(" \u2014 "),hV=a("a"),FXo=o("ImageGPTForImageClassification"),TXo=o(" (ImageGPT model)"),MXo=l(),gt=a("li"),she=a("strong"),EXo=o("perceiver"),CXo=o(" \u2014 "),pV=a("a"),wXo=o("PerceiverForImageClassificationLearned"),AXo=o(" or "),uV=a("a"),yXo=o("PerceiverForImageClassificationFourier"),LXo=o(" or "),_V=a("a"),xXo=o("PerceiverForImageClassificationConvProcessing"),$Xo=o(" (Perceiver model)"),kXo=l(),Bv=a("li"),lhe=a("strong"),SXo=o("poolformer"),RXo=o(" \u2014 "),bV=a("a"),BXo=o("PoolFormerForImageClassification"),PXo=o(" (PoolFormer model)"),IXo=l(),Pv=a("li"),ihe=a("strong"),qXo=o("regnet"),NXo=o(" \u2014 "),vV=a("a"),jXo=o("RegNetForImageClassification"),DXo=o(" (RegNet model)"),GXo=l(),Iv=a("li"),dhe=a("strong"),OXo=o("resnet"),VXo=o(" \u2014 "),FV=a("a"),XXo=o("ResNetForImageClassification"),zXo=o(" (ResNet model)"),QXo=l(),qv=a("li"),che=a("strong"),WXo=o("segformer"),HXo=o(" \u2014 "),TV=a("a"),UXo=o("SegformerForImageClassification"),JXo=o(" (SegFormer model)"),YXo=l(),Nv=a("li"),fhe=a("strong"),KXo=o("swin"),ZXo=o(" \u2014 "),MV=a("a"),ezo=o("SwinForImageClassification"),ozo=o(" (Swin model)"),rzo=l(),jv=a("li"),mhe=a("strong"),tzo=o("van"),azo=o(" \u2014 "),EV=a("a"),nzo=o("VanForImageClassification"),szo=o(" (VAN model)"),lzo=l(),Dv=a("li"),ghe=a("strong"),izo=o("vit"),dzo=o(" \u2014 "),CV=a("a"),czo=o("ViTForImageClassification"),fzo=o(" (ViT model)"),mzo=l(),Gv=a("p"),gzo=o("The model is set in evaluation mode by default using "),hhe=a("code"),hzo=o("model.eval()"),pzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),phe=a("code"),uzo=o("model.train()"),_zo=l(),F(Ov.$$.fragment),rIe=l(),td=a("h2"),Vv=a("a"),uhe=a("span"),F(EL.$$.fragment),bzo=l(),_he=a("span"),vzo=o("AutoModelForVision2Seq"),tIe=l(),Do=a("div"),F(CL.$$.fragment),Fzo=l(),ad=a("p"),Tzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),wV=a("a"),Mzo=o("from_pretrained()"),Ezo=o(" class method or the "),AV=a("a"),Czo=o("from_config()"),wzo=o(` class
method.`),Azo=l(),wL=a("p"),yzo=o("This class cannot be instantiated directly using "),bhe=a("code"),Lzo=o("__init__()"),xzo=o(" (throws an error)."),$zo=l(),ht=a("div"),F(AL.$$.fragment),kzo=l(),vhe=a("p"),Szo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Rzo=l(),nd=a("p"),Bzo=o(`Note:
Loading a model from its configuration file does `),Fhe=a("strong"),Pzo=o("not"),Izo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=a("a"),qzo=o("from_pretrained()"),Nzo=o(" to load the model weights."),jzo=l(),F(Xv.$$.fragment),Dzo=l(),lo=a("div"),F(yL.$$.fragment),Gzo=l(),The=a("p"),Ozo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Vzo=l(),Na=a("p"),Xzo=o("The model class to instantiate is selected based on the "),Mhe=a("code"),zzo=o("model_type"),Qzo=o(` property of the config object (either
passed as an argument or loaded from `),Ehe=a("code"),Wzo=o("pretrained_model_name_or_path"),Hzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Che=a("code"),Uzo=o("pretrained_model_name_or_path"),Jzo=o(":"),Yzo=l(),whe=a("ul"),zv=a("li"),Ahe=a("strong"),Kzo=o("vision-encoder-decoder"),Zzo=o(" \u2014 "),LV=a("a"),eQo=o("VisionEncoderDecoderModel"),oQo=o(" (Vision Encoder decoder model)"),rQo=l(),Qv=a("p"),tQo=o("The model is set in evaluation mode by default using "),yhe=a("code"),aQo=o("model.eval()"),nQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lhe=a("code"),sQo=o("model.train()"),lQo=l(),F(Wv.$$.fragment),aIe=l(),sd=a("h2"),Hv=a("a"),xhe=a("span"),F(LL.$$.fragment),iQo=l(),$he=a("span"),dQo=o("AutoModelForAudioClassification"),nIe=l(),Go=a("div"),F(xL.$$.fragment),cQo=l(),ld=a("p"),fQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),xV=a("a"),mQo=o("from_pretrained()"),gQo=o(" class method or the "),$V=a("a"),hQo=o("from_config()"),pQo=o(` class
method.`),uQo=l(),$L=a("p"),_Qo=o("This class cannot be instantiated directly using "),khe=a("code"),bQo=o("__init__()"),vQo=o(" (throws an error)."),FQo=l(),pt=a("div"),F(kL.$$.fragment),TQo=l(),She=a("p"),MQo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),EQo=l(),id=a("p"),CQo=o(`Note:
Loading a model from its configuration file does `),Rhe=a("strong"),wQo=o("not"),AQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=a("a"),yQo=o("from_pretrained()"),LQo=o(" to load the model weights."),xQo=l(),F(Uv.$$.fragment),$Qo=l(),io=a("div"),F(SL.$$.fragment),kQo=l(),Bhe=a("p"),SQo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),RQo=l(),ja=a("p"),BQo=o("The model class to instantiate is selected based on the "),Phe=a("code"),PQo=o("model_type"),IQo=o(` property of the config object (either
passed as an argument or loaded from `),Ihe=a("code"),qQo=o("pretrained_model_name_or_path"),NQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=a("code"),jQo=o("pretrained_model_name_or_path"),DQo=o(":"),GQo=l(),je=a("ul"),Jv=a("li"),Nhe=a("strong"),OQo=o("data2vec-audio"),VQo=o(" \u2014 "),SV=a("a"),XQo=o("Data2VecAudioForSequenceClassification"),zQo=o(" (Data2VecAudio model)"),QQo=l(),Yv=a("li"),jhe=a("strong"),WQo=o("hubert"),HQo=o(" \u2014 "),RV=a("a"),UQo=o("HubertForSequenceClassification"),JQo=o(" (Hubert model)"),YQo=l(),Kv=a("li"),Dhe=a("strong"),KQo=o("sew"),ZQo=o(" \u2014 "),BV=a("a"),eWo=o("SEWForSequenceClassification"),oWo=o(" (SEW model)"),rWo=l(),Zv=a("li"),Ghe=a("strong"),tWo=o("sew-d"),aWo=o(" \u2014 "),PV=a("a"),nWo=o("SEWDForSequenceClassification"),sWo=o(" (SEW-D model)"),lWo=l(),eF=a("li"),Ohe=a("strong"),iWo=o("unispeech"),dWo=o(" \u2014 "),IV=a("a"),cWo=o("UniSpeechForSequenceClassification"),fWo=o(" (UniSpeech model)"),mWo=l(),oF=a("li"),Vhe=a("strong"),gWo=o("unispeech-sat"),hWo=o(" \u2014 "),qV=a("a"),pWo=o("UniSpeechSatForSequenceClassification"),uWo=o(" (UniSpeechSat model)"),_Wo=l(),rF=a("li"),Xhe=a("strong"),bWo=o("wav2vec2"),vWo=o(" \u2014 "),NV=a("a"),FWo=o("Wav2Vec2ForSequenceClassification"),TWo=o(" (Wav2Vec2 model)"),MWo=l(),tF=a("li"),zhe=a("strong"),EWo=o("wavlm"),CWo=o(" \u2014 "),jV=a("a"),wWo=o("WavLMForSequenceClassification"),AWo=o(" (WavLM model)"),yWo=l(),aF=a("p"),LWo=o("The model is set in evaluation mode by default using "),Qhe=a("code"),xWo=o("model.eval()"),$Wo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=a("code"),kWo=o("model.train()"),SWo=l(),F(nF.$$.fragment),sIe=l(),dd=a("h2"),sF=a("a"),Hhe=a("span"),F(RL.$$.fragment),RWo=l(),Uhe=a("span"),BWo=o("AutoModelForAudioFrameClassification"),lIe=l(),Oo=a("div"),F(BL.$$.fragment),PWo=l(),cd=a("p"),IWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),DV=a("a"),qWo=o("from_pretrained()"),NWo=o(" class method or the "),GV=a("a"),jWo=o("from_config()"),DWo=o(` class
method.`),GWo=l(),PL=a("p"),OWo=o("This class cannot be instantiated directly using "),Jhe=a("code"),VWo=o("__init__()"),XWo=o(" (throws an error)."),zWo=l(),ut=a("div"),F(IL.$$.fragment),QWo=l(),Yhe=a("p"),WWo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),HWo=l(),fd=a("p"),UWo=o(`Note:
Loading a model from its configuration file does `),Khe=a("strong"),JWo=o("not"),YWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=a("a"),KWo=o("from_pretrained()"),ZWo=o(" to load the model weights."),eHo=l(),F(lF.$$.fragment),oHo=l(),co=a("div"),F(qL.$$.fragment),rHo=l(),Zhe=a("p"),tHo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),aHo=l(),Da=a("p"),nHo=o("The model class to instantiate is selected based on the "),epe=a("code"),sHo=o("model_type"),lHo=o(` property of the config object (either
passed as an argument or loaded from `),ope=a("code"),iHo=o("pretrained_model_name_or_path"),dHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=a("code"),cHo=o("pretrained_model_name_or_path"),fHo=o(":"),mHo=l(),Ga=a("ul"),iF=a("li"),tpe=a("strong"),gHo=o("data2vec-audio"),hHo=o(" \u2014 "),VV=a("a"),pHo=o("Data2VecAudioForAudioFrameClassification"),uHo=o(" (Data2VecAudio model)"),_Ho=l(),dF=a("li"),ape=a("strong"),bHo=o("unispeech-sat"),vHo=o(" \u2014 "),XV=a("a"),FHo=o("UniSpeechSatForAudioFrameClassification"),THo=o(" (UniSpeechSat model)"),MHo=l(),cF=a("li"),npe=a("strong"),EHo=o("wav2vec2"),CHo=o(" \u2014 "),zV=a("a"),wHo=o("Wav2Vec2ForAudioFrameClassification"),AHo=o(" (Wav2Vec2 model)"),yHo=l(),fF=a("li"),spe=a("strong"),LHo=o("wavlm"),xHo=o(" \u2014 "),QV=a("a"),$Ho=o("WavLMForAudioFrameClassification"),kHo=o(" (WavLM model)"),SHo=l(),mF=a("p"),RHo=o("The model is set in evaluation mode by default using "),lpe=a("code"),BHo=o("model.eval()"),PHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ipe=a("code"),IHo=o("model.train()"),qHo=l(),F(gF.$$.fragment),iIe=l(),md=a("h2"),hF=a("a"),dpe=a("span"),F(NL.$$.fragment),NHo=l(),cpe=a("span"),jHo=o("AutoModelForCTC"),dIe=l(),Vo=a("div"),F(jL.$$.fragment),DHo=l(),gd=a("p"),GHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),WV=a("a"),OHo=o("from_pretrained()"),VHo=o(" class method or the "),HV=a("a"),XHo=o("from_config()"),zHo=o(` class
method.`),QHo=l(),DL=a("p"),WHo=o("This class cannot be instantiated directly using "),fpe=a("code"),HHo=o("__init__()"),UHo=o(" (throws an error)."),JHo=l(),_t=a("div"),F(GL.$$.fragment),YHo=l(),mpe=a("p"),KHo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ZHo=l(),hd=a("p"),eUo=o(`Note:
Loading a model from its configuration file does `),gpe=a("strong"),oUo=o("not"),rUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=a("a"),tUo=o("from_pretrained()"),aUo=o(" to load the model weights."),nUo=l(),F(pF.$$.fragment),sUo=l(),fo=a("div"),F(OL.$$.fragment),lUo=l(),hpe=a("p"),iUo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),dUo=l(),Oa=a("p"),cUo=o("The model class to instantiate is selected based on the "),ppe=a("code"),fUo=o("model_type"),mUo=o(` property of the config object (either
passed as an argument or loaded from `),upe=a("code"),gUo=o("pretrained_model_name_or_path"),hUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_pe=a("code"),pUo=o("pretrained_model_name_or_path"),uUo=o(":"),_Uo=l(),ke=a("ul"),uF=a("li"),bpe=a("strong"),bUo=o("data2vec-audio"),vUo=o(" \u2014 "),JV=a("a"),FUo=o("Data2VecAudioForCTC"),TUo=o(" (Data2VecAudio model)"),MUo=l(),_F=a("li"),vpe=a("strong"),EUo=o("hubert"),CUo=o(" \u2014 "),YV=a("a"),wUo=o("HubertForCTC"),AUo=o(" (Hubert model)"),yUo=l(),bF=a("li"),Fpe=a("strong"),LUo=o("mctct"),xUo=o(" \u2014 "),KV=a("a"),$Uo=o("MCTCTForCTC"),kUo=o(" (MCTCT model)"),SUo=l(),vF=a("li"),Tpe=a("strong"),RUo=o("sew"),BUo=o(" \u2014 "),ZV=a("a"),PUo=o("SEWForCTC"),IUo=o(" (SEW model)"),qUo=l(),FF=a("li"),Mpe=a("strong"),NUo=o("sew-d"),jUo=o(" \u2014 "),eX=a("a"),DUo=o("SEWDForCTC"),GUo=o(" (SEW-D model)"),OUo=l(),TF=a("li"),Epe=a("strong"),VUo=o("unispeech"),XUo=o(" \u2014 "),oX=a("a"),zUo=o("UniSpeechForCTC"),QUo=o(" (UniSpeech model)"),WUo=l(),MF=a("li"),Cpe=a("strong"),HUo=o("unispeech-sat"),UUo=o(" \u2014 "),rX=a("a"),JUo=o("UniSpeechSatForCTC"),YUo=o(" (UniSpeechSat model)"),KUo=l(),EF=a("li"),wpe=a("strong"),ZUo=o("wav2vec2"),eJo=o(" \u2014 "),tX=a("a"),oJo=o("Wav2Vec2ForCTC"),rJo=o(" (Wav2Vec2 model)"),tJo=l(),CF=a("li"),Ape=a("strong"),aJo=o("wavlm"),nJo=o(" \u2014 "),aX=a("a"),sJo=o("WavLMForCTC"),lJo=o(" (WavLM model)"),iJo=l(),wF=a("p"),dJo=o("The model is set in evaluation mode by default using "),ype=a("code"),cJo=o("model.eval()"),fJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lpe=a("code"),mJo=o("model.train()"),gJo=l(),F(AF.$$.fragment),cIe=l(),pd=a("h2"),yF=a("a"),xpe=a("span"),F(VL.$$.fragment),hJo=l(),$pe=a("span"),pJo=o("AutoModelForSpeechSeq2Seq"),fIe=l(),Xo=a("div"),F(XL.$$.fragment),uJo=l(),ud=a("p"),_Jo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nX=a("a"),bJo=o("from_pretrained()"),vJo=o(" class method or the "),sX=a("a"),FJo=o("from_config()"),TJo=o(` class
method.`),MJo=l(),zL=a("p"),EJo=o("This class cannot be instantiated directly using "),kpe=a("code"),CJo=o("__init__()"),wJo=o(" (throws an error)."),AJo=l(),bt=a("div"),F(QL.$$.fragment),yJo=l(),Spe=a("p"),LJo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xJo=l(),_d=a("p"),$Jo=o(`Note:
Loading a model from its configuration file does `),Rpe=a("strong"),kJo=o("not"),SJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=a("a"),RJo=o("from_pretrained()"),BJo=o(" to load the model weights."),PJo=l(),F(LF.$$.fragment),IJo=l(),mo=a("div"),F(WL.$$.fragment),qJo=l(),Bpe=a("p"),NJo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jJo=l(),Va=a("p"),DJo=o("The model class to instantiate is selected based on the "),Ppe=a("code"),GJo=o("model_type"),OJo=o(` property of the config object (either
passed as an argument or loaded from `),Ipe=a("code"),VJo=o("pretrained_model_name_or_path"),XJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=a("code"),zJo=o("pretrained_model_name_or_path"),QJo=o(":"),WJo=l(),HL=a("ul"),xF=a("li"),Npe=a("strong"),HJo=o("speech-encoder-decoder"),UJo=o(" \u2014 "),iX=a("a"),JJo=o("SpeechEncoderDecoderModel"),YJo=o(" (Speech Encoder decoder model)"),KJo=l(),$F=a("li"),jpe=a("strong"),ZJo=o("speech_to_text"),eYo=o(" \u2014 "),dX=a("a"),oYo=o("Speech2TextForConditionalGeneration"),rYo=o(" (Speech2Text model)"),tYo=l(),kF=a("p"),aYo=o("The model is set in evaluation mode by default using "),Dpe=a("code"),nYo=o("model.eval()"),sYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=a("code"),lYo=o("model.train()"),iYo=l(),F(SF.$$.fragment),mIe=l(),bd=a("h2"),RF=a("a"),Ope=a("span"),F(UL.$$.fragment),dYo=l(),Vpe=a("span"),cYo=o("AutoModelForAudioXVector"),gIe=l(),zo=a("div"),F(JL.$$.fragment),fYo=l(),vd=a("p"),mYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),cX=a("a"),gYo=o("from_pretrained()"),hYo=o(" class method or the "),fX=a("a"),pYo=o("from_config()"),uYo=o(` class
method.`),_Yo=l(),YL=a("p"),bYo=o("This class cannot be instantiated directly using "),Xpe=a("code"),vYo=o("__init__()"),FYo=o(" (throws an error)."),TYo=l(),vt=a("div"),F(KL.$$.fragment),MYo=l(),zpe=a("p"),EYo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),CYo=l(),Fd=a("p"),wYo=o(`Note:
Loading a model from its configuration file does `),Qpe=a("strong"),AYo=o("not"),yYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=a("a"),LYo=o("from_pretrained()"),xYo=o(" to load the model weights."),$Yo=l(),F(BF.$$.fragment),kYo=l(),go=a("div"),F(ZL.$$.fragment),SYo=l(),Wpe=a("p"),RYo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),BYo=l(),Xa=a("p"),PYo=o("The model class to instantiate is selected based on the "),Hpe=a("code"),IYo=o("model_type"),qYo=o(` property of the config object (either
passed as an argument or loaded from `),Upe=a("code"),NYo=o("pretrained_model_name_or_path"),jYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=a("code"),DYo=o("pretrained_model_name_or_path"),GYo=o(":"),OYo=l(),za=a("ul"),PF=a("li"),Ype=a("strong"),VYo=o("data2vec-audio"),XYo=o(" \u2014 "),gX=a("a"),zYo=o("Data2VecAudioForXVector"),QYo=o(" (Data2VecAudio model)"),WYo=l(),IF=a("li"),Kpe=a("strong"),HYo=o("unispeech-sat"),UYo=o(" \u2014 "),hX=a("a"),JYo=o("UniSpeechSatForXVector"),YYo=o(" (UniSpeechSat model)"),KYo=l(),qF=a("li"),Zpe=a("strong"),ZYo=o("wav2vec2"),eKo=o(" \u2014 "),pX=a("a"),oKo=o("Wav2Vec2ForXVector"),rKo=o(" (Wav2Vec2 model)"),tKo=l(),NF=a("li"),eue=a("strong"),aKo=o("wavlm"),nKo=o(" \u2014 "),uX=a("a"),sKo=o("WavLMForXVector"),lKo=o(" (WavLM model)"),iKo=l(),jF=a("p"),dKo=o("The model is set in evaluation mode by default using "),oue=a("code"),cKo=o("model.eval()"),fKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rue=a("code"),mKo=o("model.train()"),gKo=l(),F(DF.$$.fragment),hIe=l(),Td=a("h2"),GF=a("a"),tue=a("span"),F(e8.$$.fragment),hKo=l(),aue=a("span"),pKo=o("AutoModelForMaskedImageModeling"),pIe=l(),Qo=a("div"),F(o8.$$.fragment),uKo=l(),Md=a("p"),_Ko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),_X=a("a"),bKo=o("from_pretrained()"),vKo=o(" class method or the "),bX=a("a"),FKo=o("from_config()"),TKo=o(` class
method.`),MKo=l(),r8=a("p"),EKo=o("This class cannot be instantiated directly using "),nue=a("code"),CKo=o("__init__()"),wKo=o(" (throws an error)."),AKo=l(),Ft=a("div"),F(t8.$$.fragment),yKo=l(),sue=a("p"),LKo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),xKo=l(),Ed=a("p"),$Ko=o(`Note:
Loading a model from its configuration file does `),lue=a("strong"),kKo=o("not"),SKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=a("a"),RKo=o("from_pretrained()"),BKo=o(" to load the model weights."),PKo=l(),F(OF.$$.fragment),IKo=l(),ho=a("div"),F(a8.$$.fragment),qKo=l(),iue=a("p"),NKo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),jKo=l(),Qa=a("p"),DKo=o("The model class to instantiate is selected based on the "),due=a("code"),GKo=o("model_type"),OKo=o(` property of the config object (either
passed as an argument or loaded from `),cue=a("code"),VKo=o("pretrained_model_name_or_path"),XKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=a("code"),zKo=o("pretrained_model_name_or_path"),QKo=o(":"),WKo=l(),Cd=a("ul"),VF=a("li"),mue=a("strong"),HKo=o("deit"),UKo=o(" \u2014 "),FX=a("a"),JKo=o("DeiTForMaskedImageModeling"),YKo=o(" (DeiT model)"),KKo=l(),XF=a("li"),gue=a("strong"),ZKo=o("swin"),eZo=o(" \u2014 "),TX=a("a"),oZo=o("SwinForMaskedImageModeling"),rZo=o(" (Swin model)"),tZo=l(),zF=a("li"),hue=a("strong"),aZo=o("vit"),nZo=o(" \u2014 "),MX=a("a"),sZo=o("ViTForMaskedImageModeling"),lZo=o(" (ViT model)"),iZo=l(),QF=a("p"),dZo=o("The model is set in evaluation mode by default using "),pue=a("code"),cZo=o("model.eval()"),fZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=a("code"),mZo=o("model.train()"),gZo=l(),F(WF.$$.fragment),uIe=l(),wd=a("h2"),HF=a("a"),_ue=a("span"),F(n8.$$.fragment),hZo=l(),bue=a("span"),pZo=o("AutoModelForObjectDetection"),_Ie=l(),Wo=a("div"),F(s8.$$.fragment),uZo=l(),Ad=a("p"),_Zo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),EX=a("a"),bZo=o("from_pretrained()"),vZo=o(" class method or the "),CX=a("a"),FZo=o("from_config()"),TZo=o(` class
method.`),MZo=l(),l8=a("p"),EZo=o("This class cannot be instantiated directly using "),vue=a("code"),CZo=o("__init__()"),wZo=o(" (throws an error)."),AZo=l(),Tt=a("div"),F(i8.$$.fragment),yZo=l(),Fue=a("p"),LZo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),xZo=l(),yd=a("p"),$Zo=o(`Note:
Loading a model from its configuration file does `),Tue=a("strong"),kZo=o("not"),SZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wX=a("a"),RZo=o("from_pretrained()"),BZo=o(" to load the model weights."),PZo=l(),F(UF.$$.fragment),IZo=l(),po=a("div"),F(d8.$$.fragment),qZo=l(),Mue=a("p"),NZo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),jZo=l(),Wa=a("p"),DZo=o("The model class to instantiate is selected based on the "),Eue=a("code"),GZo=o("model_type"),OZo=o(` property of the config object (either
passed as an argument or loaded from `),Cue=a("code"),VZo=o("pretrained_model_name_or_path"),XZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wue=a("code"),zZo=o("pretrained_model_name_or_path"),QZo=o(":"),WZo=l(),c8=a("ul"),JF=a("li"),Aue=a("strong"),HZo=o("detr"),UZo=o(" \u2014 "),AX=a("a"),JZo=o("DetrForObjectDetection"),YZo=o(" (DETR model)"),KZo=l(),YF=a("li"),yue=a("strong"),ZZo=o("yolos"),eer=o(" \u2014 "),yX=a("a"),oer=o("YolosForObjectDetection"),rer=o(" (YOLOS model)"),ter=l(),KF=a("p"),aer=o("The model is set in evaluation mode by default using "),Lue=a("code"),ner=o("model.eval()"),ser=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=a("code"),ler=o("model.train()"),ier=l(),F(ZF.$$.fragment),bIe=l(),Ld=a("h2"),e0=a("a"),$ue=a("span"),F(f8.$$.fragment),der=l(),kue=a("span"),cer=o("AutoModelForImageSegmentation"),vIe=l(),Ho=a("div"),F(m8.$$.fragment),fer=l(),xd=a("p"),mer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),LX=a("a"),ger=o("from_pretrained()"),her=o(" class method or the "),xX=a("a"),per=o("from_config()"),uer=o(` class
method.`),_er=l(),g8=a("p"),ber=o("This class cannot be instantiated directly using "),Sue=a("code"),ver=o("__init__()"),Fer=o(" (throws an error)."),Ter=l(),Mt=a("div"),F(h8.$$.fragment),Mer=l(),Rue=a("p"),Eer=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Cer=l(),$d=a("p"),wer=o(`Note:
Loading a model from its configuration file does `),Bue=a("strong"),Aer=o("not"),yer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),Ler=o("from_pretrained()"),xer=o(" to load the model weights."),$er=l(),F(o0.$$.fragment),ker=l(),uo=a("div"),F(p8.$$.fragment),Ser=l(),Pue=a("p"),Rer=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Ber=l(),Ha=a("p"),Per=o("The model class to instantiate is selected based on the "),Iue=a("code"),Ier=o("model_type"),qer=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),Ner=o("pretrained_model_name_or_path"),jer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=a("code"),Der=o("pretrained_model_name_or_path"),Ger=o(":"),Oer=l(),jue=a("ul"),r0=a("li"),Due=a("strong"),Ver=o("detr"),Xer=o(" \u2014 "),kX=a("a"),zer=o("DetrForSegmentation"),Qer=o(" (DETR model)"),Wer=l(),t0=a("p"),Her=o("The model is set in evaluation mode by default using "),Gue=a("code"),Uer=o("model.eval()"),Jer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=a("code"),Yer=o("model.train()"),Ker=l(),F(a0.$$.fragment),FIe=l(),kd=a("h2"),n0=a("a"),Vue=a("span"),F(u8.$$.fragment),Zer=l(),Xue=a("span"),eor=o("AutoModelForSemanticSegmentation"),TIe=l(),Uo=a("div"),F(_8.$$.fragment),oor=l(),Sd=a("p"),ror=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),SX=a("a"),tor=o("from_pretrained()"),aor=o(" class method or the "),RX=a("a"),nor=o("from_config()"),sor=o(` class
method.`),lor=l(),b8=a("p"),ior=o("This class cannot be instantiated directly using "),zue=a("code"),dor=o("__init__()"),cor=o(" (throws an error)."),mor=l(),Et=a("div"),F(v8.$$.fragment),gor=l(),Que=a("p"),hor=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),por=l(),Rd=a("p"),uor=o(`Note:
Loading a model from its configuration file does `),Wue=a("strong"),_or=o("not"),bor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BX=a("a"),vor=o("from_pretrained()"),For=o(" to load the model weights."),Tor=l(),F(s0.$$.fragment),Mor=l(),_o=a("div"),F(F8.$$.fragment),Eor=l(),Hue=a("p"),Cor=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),wor=l(),Ua=a("p"),Aor=o("The model class to instantiate is selected based on the "),Uue=a("code"),yor=o("model_type"),Lor=o(` property of the config object (either
passed as an argument or loaded from `),Jue=a("code"),xor=o("pretrained_model_name_or_path"),$or=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=a("code"),kor=o("pretrained_model_name_or_path"),Sor=o(":"),Ror=l(),Ja=a("ul"),l0=a("li"),Kue=a("strong"),Bor=o("beit"),Por=o(" \u2014 "),PX=a("a"),Ior=o("BeitForSemanticSegmentation"),qor=o(" (BEiT model)"),Nor=l(),i0=a("li"),Zue=a("strong"),jor=o("data2vec-vision"),Dor=o(" \u2014 "),IX=a("a"),Gor=o("Data2VecVisionForSemanticSegmentation"),Oor=o(" (Data2VecVision model)"),Vor=l(),d0=a("li"),e_e=a("strong"),Xor=o("dpt"),zor=o(" \u2014 "),qX=a("a"),Qor=o("DPTForSemanticSegmentation"),Wor=o(" (DPT model)"),Hor=l(),c0=a("li"),o_e=a("strong"),Uor=o("segformer"),Jor=o(" \u2014 "),NX=a("a"),Yor=o("SegformerForSemanticSegmentation"),Kor=o(" (SegFormer model)"),Zor=l(),f0=a("p"),err=o("The model is set in evaluation mode by default using "),r_e=a("code"),orr=o("model.eval()"),rrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t_e=a("code"),trr=o("model.train()"),arr=l(),F(m0.$$.fragment),MIe=l(),Bd=a("h2"),g0=a("a"),a_e=a("span"),F(T8.$$.fragment),nrr=l(),n_e=a("span"),srr=o("AutoModelForInstanceSegmentation"),EIe=l(),Jo=a("div"),F(M8.$$.fragment),lrr=l(),Pd=a("p"),irr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),jX=a("a"),drr=o("from_pretrained()"),crr=o(" class method or the "),DX=a("a"),frr=o("from_config()"),mrr=o(` class
method.`),grr=l(),E8=a("p"),hrr=o("This class cannot be instantiated directly using "),s_e=a("code"),prr=o("__init__()"),urr=o(" (throws an error)."),_rr=l(),Ct=a("div"),F(C8.$$.fragment),brr=l(),l_e=a("p"),vrr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Frr=l(),Id=a("p"),Trr=o(`Note:
Loading a model from its configuration file does `),i_e=a("strong"),Mrr=o("not"),Err=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=a("a"),Crr=o("from_pretrained()"),wrr=o(" to load the model weights."),Arr=l(),F(h0.$$.fragment),yrr=l(),bo=a("div"),F(w8.$$.fragment),Lrr=l(),d_e=a("p"),xrr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),$rr=l(),Ya=a("p"),krr=o("The model class to instantiate is selected based on the "),c_e=a("code"),Srr=o("model_type"),Rrr=o(` property of the config object (either
passed as an argument or loaded from `),f_e=a("code"),Brr=o("pretrained_model_name_or_path"),Prr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=a("code"),Irr=o("pretrained_model_name_or_path"),qrr=o(":"),Nrr=l(),g_e=a("ul"),p0=a("li"),h_e=a("strong"),jrr=o("maskformer"),Drr=o(" \u2014 "),OX=a("a"),Grr=o("MaskFormerForInstanceSegmentation"),Orr=o(" (MaskFormer model)"),Vrr=l(),u0=a("p"),Xrr=o("The model is set in evaluation mode by default using "),p_e=a("code"),zrr=o("model.eval()"),Qrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u_e=a("code"),Wrr=o("model.train()"),Hrr=l(),F(_0.$$.fragment),CIe=l(),qd=a("h2"),b0=a("a"),__e=a("span"),F(A8.$$.fragment),Urr=l(),b_e=a("span"),Jrr=o("TFAutoModel"),wIe=l(),Yo=a("div"),F(y8.$$.fragment),Yrr=l(),Nd=a("p"),Krr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VX=a("a"),Zrr=o("from_pretrained()"),etr=o(" class method or the "),XX=a("a"),otr=o("from_config()"),rtr=o(` class
method.`),ttr=l(),L8=a("p"),atr=o("This class cannot be instantiated directly using "),v_e=a("code"),ntr=o("__init__()"),str=o(" (throws an error)."),ltr=l(),wt=a("div"),F(x8.$$.fragment),itr=l(),F_e=a("p"),dtr=o("Instantiates one of the base model classes of the library from a configuration."),ctr=l(),jd=a("p"),ftr=o(`Note:
Loading a model from its configuration file does `),T_e=a("strong"),mtr=o("not"),gtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=a("a"),htr=o("from_pretrained()"),ptr=o(" to load the model weights."),utr=l(),F(v0.$$.fragment),_tr=l(),wr=a("div"),F($8.$$.fragment),btr=l(),M_e=a("p"),vtr=o("Instantiate one of the base model classes of the library from a pretrained model."),Ftr=l(),Ka=a("p"),Ttr=o("The model class to instantiate is selected based on the "),E_e=a("code"),Mtr=o("model_type"),Etr=o(` property of the config object (either
passed as an argument or loaded from `),C_e=a("code"),Ctr=o("pretrained_model_name_or_path"),wtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=a("code"),Atr=o("pretrained_model_name_or_path"),ytr=o(":"),Ltr=l(),j=a("ul"),F0=a("li"),A_e=a("strong"),xtr=o("albert"),$tr=o(" \u2014 "),QX=a("a"),ktr=o("TFAlbertModel"),Str=o(" (ALBERT model)"),Rtr=l(),T0=a("li"),y_e=a("strong"),Btr=o("bart"),Ptr=o(" \u2014 "),WX=a("a"),Itr=o("TFBartModel"),qtr=o(" (BART model)"),Ntr=l(),M0=a("li"),L_e=a("strong"),jtr=o("bert"),Dtr=o(" \u2014 "),HX=a("a"),Gtr=o("TFBertModel"),Otr=o(" (BERT model)"),Vtr=l(),E0=a("li"),x_e=a("strong"),Xtr=o("blenderbot"),ztr=o(" \u2014 "),UX=a("a"),Qtr=o("TFBlenderbotModel"),Wtr=o(" (Blenderbot model)"),Htr=l(),C0=a("li"),$_e=a("strong"),Utr=o("blenderbot-small"),Jtr=o(" \u2014 "),JX=a("a"),Ytr=o("TFBlenderbotSmallModel"),Ktr=o(" (BlenderbotSmall model)"),Ztr=l(),w0=a("li"),k_e=a("strong"),ear=o("camembert"),oar=o(" \u2014 "),YX=a("a"),rar=o("TFCamembertModel"),tar=o(" (CamemBERT model)"),aar=l(),A0=a("li"),S_e=a("strong"),nar=o("clip"),sar=o(" \u2014 "),KX=a("a"),lar=o("TFCLIPModel"),iar=o(" (CLIP model)"),dar=l(),y0=a("li"),R_e=a("strong"),car=o("convbert"),far=o(" \u2014 "),ZX=a("a"),mar=o("TFConvBertModel"),gar=o(" (ConvBERT model)"),har=l(),L0=a("li"),B_e=a("strong"),par=o("convnext"),uar=o(" \u2014 "),ez=a("a"),_ar=o("TFConvNextModel"),bar=o(" (ConvNext model)"),Far=l(),x0=a("li"),P_e=a("strong"),Tar=o("ctrl"),Mar=o(" \u2014 "),oz=a("a"),Ear=o("TFCTRLModel"),Car=o(" (CTRL model)"),war=l(),$0=a("li"),I_e=a("strong"),Aar=o("data2vec-vision"),yar=o(" \u2014 "),rz=a("a"),Lar=o("TFData2VecVisionModel"),xar=o(" (Data2VecVision model)"),$ar=l(),k0=a("li"),q_e=a("strong"),kar=o("deberta"),Sar=o(" \u2014 "),tz=a("a"),Rar=o("TFDebertaModel"),Bar=o(" (DeBERTa model)"),Par=l(),S0=a("li"),N_e=a("strong"),Iar=o("deberta-v2"),qar=o(" \u2014 "),az=a("a"),Nar=o("TFDebertaV2Model"),jar=o(" (DeBERTa-v2 model)"),Dar=l(),R0=a("li"),j_e=a("strong"),Gar=o("distilbert"),Oar=o(" \u2014 "),nz=a("a"),Var=o("TFDistilBertModel"),Xar=o(" (DistilBERT model)"),zar=l(),B0=a("li"),D_e=a("strong"),Qar=o("dpr"),War=o(" \u2014 "),sz=a("a"),Har=o("TFDPRQuestionEncoder"),Uar=o(" (DPR model)"),Jar=l(),P0=a("li"),G_e=a("strong"),Yar=o("electra"),Kar=o(" \u2014 "),lz=a("a"),Zar=o("TFElectraModel"),enr=o(" (ELECTRA model)"),onr=l(),I0=a("li"),O_e=a("strong"),rnr=o("flaubert"),tnr=o(" \u2014 "),iz=a("a"),anr=o("TFFlaubertModel"),nnr=o(" (FlauBERT model)"),snr=l(),Bs=a("li"),V_e=a("strong"),lnr=o("funnel"),inr=o(" \u2014 "),dz=a("a"),dnr=o("TFFunnelModel"),cnr=o(" or "),cz=a("a"),fnr=o("TFFunnelBaseModel"),mnr=o(" (Funnel Transformer model)"),gnr=l(),q0=a("li"),X_e=a("strong"),hnr=o("gpt2"),pnr=o(" \u2014 "),fz=a("a"),unr=o("TFGPT2Model"),_nr=o(" (OpenAI GPT-2 model)"),bnr=l(),N0=a("li"),z_e=a("strong"),vnr=o("gptj"),Fnr=o(" \u2014 "),mz=a("a"),Tnr=o("TFGPTJModel"),Mnr=o(" (GPT-J model)"),Enr=l(),j0=a("li"),Q_e=a("strong"),Cnr=o("hubert"),wnr=o(" \u2014 "),gz=a("a"),Anr=o("TFHubertModel"),ynr=o(" (Hubert model)"),Lnr=l(),D0=a("li"),W_e=a("strong"),xnr=o("layoutlm"),$nr=o(" \u2014 "),hz=a("a"),knr=o("TFLayoutLMModel"),Snr=o(" (LayoutLM model)"),Rnr=l(),G0=a("li"),H_e=a("strong"),Bnr=o("led"),Pnr=o(" \u2014 "),pz=a("a"),Inr=o("TFLEDModel"),qnr=o(" (LED model)"),Nnr=l(),O0=a("li"),U_e=a("strong"),jnr=o("longformer"),Dnr=o(" \u2014 "),uz=a("a"),Gnr=o("TFLongformerModel"),Onr=o(" (Longformer model)"),Vnr=l(),V0=a("li"),J_e=a("strong"),Xnr=o("lxmert"),znr=o(" \u2014 "),_z=a("a"),Qnr=o("TFLxmertModel"),Wnr=o(" (LXMERT model)"),Hnr=l(),X0=a("li"),Y_e=a("strong"),Unr=o("marian"),Jnr=o(" \u2014 "),bz=a("a"),Ynr=o("TFMarianModel"),Knr=o(" (Marian model)"),Znr=l(),z0=a("li"),K_e=a("strong"),esr=o("mbart"),osr=o(" \u2014 "),vz=a("a"),rsr=o("TFMBartModel"),tsr=o(" (mBART model)"),asr=l(),Q0=a("li"),Z_e=a("strong"),nsr=o("mobilebert"),ssr=o(" \u2014 "),Fz=a("a"),lsr=o("TFMobileBertModel"),isr=o(" (MobileBERT model)"),dsr=l(),W0=a("li"),e2e=a("strong"),csr=o("mpnet"),fsr=o(" \u2014 "),Tz=a("a"),msr=o("TFMPNetModel"),gsr=o(" (MPNet model)"),hsr=l(),H0=a("li"),o2e=a("strong"),psr=o("mt5"),usr=o(" \u2014 "),Mz=a("a"),_sr=o("TFMT5Model"),bsr=o(" (mT5 model)"),vsr=l(),U0=a("li"),r2e=a("strong"),Fsr=o("openai-gpt"),Tsr=o(" \u2014 "),Ez=a("a"),Msr=o("TFOpenAIGPTModel"),Esr=o(" (OpenAI GPT model)"),Csr=l(),J0=a("li"),t2e=a("strong"),wsr=o("pegasus"),Asr=o(" \u2014 "),Cz=a("a"),ysr=o("TFPegasusModel"),Lsr=o(" (Pegasus model)"),xsr=l(),Y0=a("li"),a2e=a("strong"),$sr=o("rembert"),ksr=o(" \u2014 "),wz=a("a"),Ssr=o("TFRemBertModel"),Rsr=o(" (RemBERT model)"),Bsr=l(),K0=a("li"),n2e=a("strong"),Psr=o("roberta"),Isr=o(" \u2014 "),Az=a("a"),qsr=o("TFRobertaModel"),Nsr=o(" (RoBERTa model)"),jsr=l(),Z0=a("li"),s2e=a("strong"),Dsr=o("roformer"),Gsr=o(" \u2014 "),yz=a("a"),Osr=o("TFRoFormerModel"),Vsr=o(" (RoFormer model)"),Xsr=l(),e6=a("li"),l2e=a("strong"),zsr=o("speech_to_text"),Qsr=o(" \u2014 "),Lz=a("a"),Wsr=o("TFSpeech2TextModel"),Hsr=o(" (Speech2Text model)"),Usr=l(),o6=a("li"),i2e=a("strong"),Jsr=o("t5"),Ysr=o(" \u2014 "),xz=a("a"),Ksr=o("TFT5Model"),Zsr=o(" (T5 model)"),elr=l(),r6=a("li"),d2e=a("strong"),olr=o("tapas"),rlr=o(" \u2014 "),$z=a("a"),tlr=o("TFTapasModel"),alr=o(" (TAPAS model)"),nlr=l(),t6=a("li"),c2e=a("strong"),slr=o("transfo-xl"),llr=o(" \u2014 "),kz=a("a"),ilr=o("TFTransfoXLModel"),dlr=o(" (Transformer-XL model)"),clr=l(),a6=a("li"),f2e=a("strong"),flr=o("vit"),mlr=o(" \u2014 "),Sz=a("a"),glr=o("TFViTModel"),hlr=o(" (ViT model)"),plr=l(),n6=a("li"),m2e=a("strong"),ulr=o("vit_mae"),_lr=o(" \u2014 "),Rz=a("a"),blr=o("TFViTMAEModel"),vlr=o(" (ViTMAE model)"),Flr=l(),s6=a("li"),g2e=a("strong"),Tlr=o("wav2vec2"),Mlr=o(" \u2014 "),Bz=a("a"),Elr=o("TFWav2Vec2Model"),Clr=o(" (Wav2Vec2 model)"),wlr=l(),l6=a("li"),h2e=a("strong"),Alr=o("xlm"),ylr=o(" \u2014 "),Pz=a("a"),Llr=o("TFXLMModel"),xlr=o(" (XLM model)"),$lr=l(),i6=a("li"),p2e=a("strong"),klr=o("xlm-roberta"),Slr=o(" \u2014 "),Iz=a("a"),Rlr=o("TFXLMRobertaModel"),Blr=o(" (XLM-RoBERTa model)"),Plr=l(),d6=a("li"),u2e=a("strong"),Ilr=o("xlnet"),qlr=o(" \u2014 "),qz=a("a"),Nlr=o("TFXLNetModel"),jlr=o(" (XLNet model)"),Dlr=l(),F(c6.$$.fragment),AIe=l(),Dd=a("h2"),f6=a("a"),_2e=a("span"),F(k8.$$.fragment),Glr=l(),b2e=a("span"),Olr=o("TFAutoModelForPreTraining"),yIe=l(),Ko=a("div"),F(S8.$$.fragment),Vlr=l(),Gd=a("p"),Xlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Nz=a("a"),zlr=o("from_pretrained()"),Qlr=o(" class method or the "),jz=a("a"),Wlr=o("from_config()"),Hlr=o(` class
method.`),Ulr=l(),R8=a("p"),Jlr=o("This class cannot be instantiated directly using "),v2e=a("code"),Ylr=o("__init__()"),Klr=o(" (throws an error)."),Zlr=l(),At=a("div"),F(B8.$$.fragment),eir=l(),F2e=a("p"),oir=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rir=l(),Od=a("p"),tir=o(`Note:
Loading a model from its configuration file does `),T2e=a("strong"),air=o("not"),nir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=a("a"),sir=o("from_pretrained()"),lir=o(" to load the model weights."),iir=l(),F(m6.$$.fragment),dir=l(),Ar=a("div"),F(P8.$$.fragment),cir=l(),M2e=a("p"),fir=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mir=l(),Za=a("p"),gir=o("The model class to instantiate is selected based on the "),E2e=a("code"),hir=o("model_type"),pir=o(` property of the config object (either
passed as an argument or loaded from `),C2e=a("code"),uir=o("pretrained_model_name_or_path"),_ir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=a("code"),bir=o("pretrained_model_name_or_path"),vir=o(":"),Fir=l(),se=a("ul"),g6=a("li"),A2e=a("strong"),Tir=o("albert"),Mir=o(" \u2014 "),Gz=a("a"),Eir=o("TFAlbertForPreTraining"),Cir=o(" (ALBERT model)"),wir=l(),h6=a("li"),y2e=a("strong"),Air=o("bart"),yir=o(" \u2014 "),Oz=a("a"),Lir=o("TFBartForConditionalGeneration"),xir=o(" (BART model)"),$ir=l(),p6=a("li"),L2e=a("strong"),kir=o("bert"),Sir=o(" \u2014 "),Vz=a("a"),Rir=o("TFBertForPreTraining"),Bir=o(" (BERT model)"),Pir=l(),u6=a("li"),x2e=a("strong"),Iir=o("camembert"),qir=o(" \u2014 "),Xz=a("a"),Nir=o("TFCamembertForMaskedLM"),jir=o(" (CamemBERT model)"),Dir=l(),_6=a("li"),$2e=a("strong"),Gir=o("ctrl"),Oir=o(" \u2014 "),zz=a("a"),Vir=o("TFCTRLLMHeadModel"),Xir=o(" (CTRL model)"),zir=l(),b6=a("li"),k2e=a("strong"),Qir=o("distilbert"),Wir=o(" \u2014 "),Qz=a("a"),Hir=o("TFDistilBertForMaskedLM"),Uir=o(" (DistilBERT model)"),Jir=l(),v6=a("li"),S2e=a("strong"),Yir=o("electra"),Kir=o(" \u2014 "),Wz=a("a"),Zir=o("TFElectraForPreTraining"),edr=o(" (ELECTRA model)"),odr=l(),F6=a("li"),R2e=a("strong"),rdr=o("flaubert"),tdr=o(" \u2014 "),Hz=a("a"),adr=o("TFFlaubertWithLMHeadModel"),ndr=o(" (FlauBERT model)"),sdr=l(),T6=a("li"),B2e=a("strong"),ldr=o("funnel"),idr=o(" \u2014 "),Uz=a("a"),ddr=o("TFFunnelForPreTraining"),cdr=o(" (Funnel Transformer model)"),fdr=l(),M6=a("li"),P2e=a("strong"),mdr=o("gpt2"),gdr=o(" \u2014 "),Jz=a("a"),hdr=o("TFGPT2LMHeadModel"),pdr=o(" (OpenAI GPT-2 model)"),udr=l(),E6=a("li"),I2e=a("strong"),_dr=o("layoutlm"),bdr=o(" \u2014 "),Yz=a("a"),vdr=o("TFLayoutLMForMaskedLM"),Fdr=o(" (LayoutLM model)"),Tdr=l(),C6=a("li"),q2e=a("strong"),Mdr=o("lxmert"),Edr=o(" \u2014 "),Kz=a("a"),Cdr=o("TFLxmertForPreTraining"),wdr=o(" (LXMERT model)"),Adr=l(),w6=a("li"),N2e=a("strong"),ydr=o("mobilebert"),Ldr=o(" \u2014 "),Zz=a("a"),xdr=o("TFMobileBertForPreTraining"),$dr=o(" (MobileBERT model)"),kdr=l(),A6=a("li"),j2e=a("strong"),Sdr=o("mpnet"),Rdr=o(" \u2014 "),eQ=a("a"),Bdr=o("TFMPNetForMaskedLM"),Pdr=o(" (MPNet model)"),Idr=l(),y6=a("li"),D2e=a("strong"),qdr=o("openai-gpt"),Ndr=o(" \u2014 "),oQ=a("a"),jdr=o("TFOpenAIGPTLMHeadModel"),Ddr=o(" (OpenAI GPT model)"),Gdr=l(),L6=a("li"),G2e=a("strong"),Odr=o("roberta"),Vdr=o(" \u2014 "),rQ=a("a"),Xdr=o("TFRobertaForMaskedLM"),zdr=o(" (RoBERTa model)"),Qdr=l(),x6=a("li"),O2e=a("strong"),Wdr=o("t5"),Hdr=o(" \u2014 "),tQ=a("a"),Udr=o("TFT5ForConditionalGeneration"),Jdr=o(" (T5 model)"),Ydr=l(),$6=a("li"),V2e=a("strong"),Kdr=o("tapas"),Zdr=o(" \u2014 "),aQ=a("a"),ecr=o("TFTapasForMaskedLM"),ocr=o(" (TAPAS model)"),rcr=l(),k6=a("li"),X2e=a("strong"),tcr=o("transfo-xl"),acr=o(" \u2014 "),nQ=a("a"),ncr=o("TFTransfoXLLMHeadModel"),scr=o(" (Transformer-XL model)"),lcr=l(),S6=a("li"),z2e=a("strong"),icr=o("vit_mae"),dcr=o(" \u2014 "),sQ=a("a"),ccr=o("TFViTMAEForPreTraining"),fcr=o(" (ViTMAE model)"),mcr=l(),R6=a("li"),Q2e=a("strong"),gcr=o("xlm"),hcr=o(" \u2014 "),lQ=a("a"),pcr=o("TFXLMWithLMHeadModel"),ucr=o(" (XLM model)"),_cr=l(),B6=a("li"),W2e=a("strong"),bcr=o("xlm-roberta"),vcr=o(" \u2014 "),iQ=a("a"),Fcr=o("TFXLMRobertaForMaskedLM"),Tcr=o(" (XLM-RoBERTa model)"),Mcr=l(),P6=a("li"),H2e=a("strong"),Ecr=o("xlnet"),Ccr=o(" \u2014 "),dQ=a("a"),wcr=o("TFXLNetLMHeadModel"),Acr=o(" (XLNet model)"),ycr=l(),F(I6.$$.fragment),LIe=l(),Vd=a("h2"),q6=a("a"),U2e=a("span"),F(I8.$$.fragment),Lcr=l(),J2e=a("span"),xcr=o("TFAutoModelForCausalLM"),xIe=l(),Zo=a("div"),F(q8.$$.fragment),$cr=l(),Xd=a("p"),kcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),cQ=a("a"),Scr=o("from_pretrained()"),Rcr=o(" class method or the "),fQ=a("a"),Bcr=o("from_config()"),Pcr=o(` class
method.`),Icr=l(),N8=a("p"),qcr=o("This class cannot be instantiated directly using "),Y2e=a("code"),Ncr=o("__init__()"),jcr=o(" (throws an error)."),Dcr=l(),yt=a("div"),F(j8.$$.fragment),Gcr=l(),K2e=a("p"),Ocr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vcr=l(),zd=a("p"),Xcr=o(`Note:
Loading a model from its configuration file does `),Z2e=a("strong"),zcr=o("not"),Qcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mQ=a("a"),Wcr=o("from_pretrained()"),Hcr=o(" to load the model weights."),Ucr=l(),F(N6.$$.fragment),Jcr=l(),yr=a("div"),F(D8.$$.fragment),Ycr=l(),e1e=a("p"),Kcr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Zcr=l(),en=a("p"),efr=o("The model class to instantiate is selected based on the "),o1e=a("code"),ofr=o("model_type"),rfr=o(` property of the config object (either
passed as an argument or loaded from `),r1e=a("code"),tfr=o("pretrained_model_name_or_path"),afr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=a("code"),nfr=o("pretrained_model_name_or_path"),sfr=o(":"),lfr=l(),Te=a("ul"),j6=a("li"),a1e=a("strong"),ifr=o("bert"),dfr=o(" \u2014 "),gQ=a("a"),cfr=o("TFBertLMHeadModel"),ffr=o(" (BERT model)"),mfr=l(),D6=a("li"),n1e=a("strong"),gfr=o("camembert"),hfr=o(" \u2014 "),hQ=a("a"),pfr=o("TFCamembertForCausalLM"),ufr=o(" (CamemBERT model)"),_fr=l(),G6=a("li"),s1e=a("strong"),bfr=o("ctrl"),vfr=o(" \u2014 "),pQ=a("a"),Ffr=o("TFCTRLLMHeadModel"),Tfr=o(" (CTRL model)"),Mfr=l(),O6=a("li"),l1e=a("strong"),Efr=o("gpt2"),Cfr=o(" \u2014 "),uQ=a("a"),wfr=o("TFGPT2LMHeadModel"),Afr=o(" (OpenAI GPT-2 model)"),yfr=l(),V6=a("li"),i1e=a("strong"),Lfr=o("gptj"),xfr=o(" \u2014 "),_Q=a("a"),$fr=o("TFGPTJForCausalLM"),kfr=o(" (GPT-J model)"),Sfr=l(),X6=a("li"),d1e=a("strong"),Rfr=o("openai-gpt"),Bfr=o(" \u2014 "),bQ=a("a"),Pfr=o("TFOpenAIGPTLMHeadModel"),Ifr=o(" (OpenAI GPT model)"),qfr=l(),z6=a("li"),c1e=a("strong"),Nfr=o("rembert"),jfr=o(" \u2014 "),vQ=a("a"),Dfr=o("TFRemBertForCausalLM"),Gfr=o(" (RemBERT model)"),Ofr=l(),Q6=a("li"),f1e=a("strong"),Vfr=o("roberta"),Xfr=o(" \u2014 "),FQ=a("a"),zfr=o("TFRobertaForCausalLM"),Qfr=o(" (RoBERTa model)"),Wfr=l(),W6=a("li"),m1e=a("strong"),Hfr=o("roformer"),Ufr=o(" \u2014 "),TQ=a("a"),Jfr=o("TFRoFormerForCausalLM"),Yfr=o(" (RoFormer model)"),Kfr=l(),H6=a("li"),g1e=a("strong"),Zfr=o("transfo-xl"),emr=o(" \u2014 "),MQ=a("a"),omr=o("TFTransfoXLLMHeadModel"),rmr=o(" (Transformer-XL model)"),tmr=l(),U6=a("li"),h1e=a("strong"),amr=o("xlm"),nmr=o(" \u2014 "),EQ=a("a"),smr=o("TFXLMWithLMHeadModel"),lmr=o(" (XLM model)"),imr=l(),J6=a("li"),p1e=a("strong"),dmr=o("xlnet"),cmr=o(" \u2014 "),CQ=a("a"),fmr=o("TFXLNetLMHeadModel"),mmr=o(" (XLNet model)"),gmr=l(),F(Y6.$$.fragment),$Ie=l(),Qd=a("h2"),K6=a("a"),u1e=a("span"),F(G8.$$.fragment),hmr=l(),_1e=a("span"),pmr=o("TFAutoModelForImageClassification"),kIe=l(),er=a("div"),F(O8.$$.fragment),umr=l(),Wd=a("p"),_mr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wQ=a("a"),bmr=o("from_pretrained()"),vmr=o(" class method or the "),AQ=a("a"),Fmr=o("from_config()"),Tmr=o(` class
method.`),Mmr=l(),V8=a("p"),Emr=o("This class cannot be instantiated directly using "),b1e=a("code"),Cmr=o("__init__()"),wmr=o(" (throws an error)."),Amr=l(),Lt=a("div"),F(X8.$$.fragment),ymr=l(),v1e=a("p"),Lmr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xmr=l(),Hd=a("p"),$mr=o(`Note:
Loading a model from its configuration file does `),F1e=a("strong"),kmr=o("not"),Smr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),Rmr=o("from_pretrained()"),Bmr=o(" to load the model weights."),Pmr=l(),F(Z6.$$.fragment),Imr=l(),Lr=a("div"),F(z8.$$.fragment),qmr=l(),T1e=a("p"),Nmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jmr=l(),on=a("p"),Dmr=o("The model class to instantiate is selected based on the "),M1e=a("code"),Gmr=o("model_type"),Omr=o(` property of the config object (either
passed as an argument or loaded from `),E1e=a("code"),Vmr=o("pretrained_model_name_or_path"),Xmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=a("code"),zmr=o("pretrained_model_name_or_path"),Qmr=o(":"),Wmr=l(),Ud=a("ul"),eT=a("li"),w1e=a("strong"),Hmr=o("convnext"),Umr=o(" \u2014 "),LQ=a("a"),Jmr=o("TFConvNextForImageClassification"),Ymr=o(" (ConvNext model)"),Kmr=l(),oT=a("li"),A1e=a("strong"),Zmr=o("data2vec-vision"),egr=o(" \u2014 "),xQ=a("a"),ogr=o("TFData2VecVisionForImageClassification"),rgr=o(" (Data2VecVision model)"),tgr=l(),rT=a("li"),y1e=a("strong"),agr=o("vit"),ngr=o(" \u2014 "),$Q=a("a"),sgr=o("TFViTForImageClassification"),lgr=o(" (ViT model)"),igr=l(),F(tT.$$.fragment),SIe=l(),Jd=a("h2"),aT=a("a"),L1e=a("span"),F(Q8.$$.fragment),dgr=l(),x1e=a("span"),cgr=o("TFAutoModelForMaskedLM"),RIe=l(),or=a("div"),F(W8.$$.fragment),fgr=l(),Yd=a("p"),mgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kQ=a("a"),ggr=o("from_pretrained()"),hgr=o(" class method or the "),SQ=a("a"),pgr=o("from_config()"),ugr=o(` class
method.`),_gr=l(),H8=a("p"),bgr=o("This class cannot be instantiated directly using "),$1e=a("code"),vgr=o("__init__()"),Fgr=o(" (throws an error)."),Tgr=l(),xt=a("div"),F(U8.$$.fragment),Mgr=l(),k1e=a("p"),Egr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Cgr=l(),Kd=a("p"),wgr=o(`Note:
Loading a model from its configuration file does `),S1e=a("strong"),Agr=o("not"),ygr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=a("a"),Lgr=o("from_pretrained()"),xgr=o(" to load the model weights."),$gr=l(),F(nT.$$.fragment),kgr=l(),xr=a("div"),F(J8.$$.fragment),Sgr=l(),R1e=a("p"),Rgr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Bgr=l(),rn=a("p"),Pgr=o("The model class to instantiate is selected based on the "),B1e=a("code"),Igr=o("model_type"),qgr=o(` property of the config object (either
passed as an argument or loaded from `),P1e=a("code"),Ngr=o("pretrained_model_name_or_path"),jgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=a("code"),Dgr=o("pretrained_model_name_or_path"),Ggr=o(":"),Ogr=l(),ie=a("ul"),sT=a("li"),q1e=a("strong"),Vgr=o("albert"),Xgr=o(" \u2014 "),BQ=a("a"),zgr=o("TFAlbertForMaskedLM"),Qgr=o(" (ALBERT model)"),Wgr=l(),lT=a("li"),N1e=a("strong"),Hgr=o("bert"),Ugr=o(" \u2014 "),PQ=a("a"),Jgr=o("TFBertForMaskedLM"),Ygr=o(" (BERT model)"),Kgr=l(),iT=a("li"),j1e=a("strong"),Zgr=o("camembert"),ehr=o(" \u2014 "),IQ=a("a"),ohr=o("TFCamembertForMaskedLM"),rhr=o(" (CamemBERT model)"),thr=l(),dT=a("li"),D1e=a("strong"),ahr=o("convbert"),nhr=o(" \u2014 "),qQ=a("a"),shr=o("TFConvBertForMaskedLM"),lhr=o(" (ConvBERT model)"),ihr=l(),cT=a("li"),G1e=a("strong"),dhr=o("deberta"),chr=o(" \u2014 "),NQ=a("a"),fhr=o("TFDebertaForMaskedLM"),mhr=o(" (DeBERTa model)"),ghr=l(),fT=a("li"),O1e=a("strong"),hhr=o("deberta-v2"),phr=o(" \u2014 "),jQ=a("a"),uhr=o("TFDebertaV2ForMaskedLM"),_hr=o(" (DeBERTa-v2 model)"),bhr=l(),mT=a("li"),V1e=a("strong"),vhr=o("distilbert"),Fhr=o(" \u2014 "),DQ=a("a"),Thr=o("TFDistilBertForMaskedLM"),Mhr=o(" (DistilBERT model)"),Ehr=l(),gT=a("li"),X1e=a("strong"),Chr=o("electra"),whr=o(" \u2014 "),GQ=a("a"),Ahr=o("TFElectraForMaskedLM"),yhr=o(" (ELECTRA model)"),Lhr=l(),hT=a("li"),z1e=a("strong"),xhr=o("flaubert"),$hr=o(" \u2014 "),OQ=a("a"),khr=o("TFFlaubertWithLMHeadModel"),Shr=o(" (FlauBERT model)"),Rhr=l(),pT=a("li"),Q1e=a("strong"),Bhr=o("funnel"),Phr=o(" \u2014 "),VQ=a("a"),Ihr=o("TFFunnelForMaskedLM"),qhr=o(" (Funnel Transformer model)"),Nhr=l(),uT=a("li"),W1e=a("strong"),jhr=o("layoutlm"),Dhr=o(" \u2014 "),XQ=a("a"),Ghr=o("TFLayoutLMForMaskedLM"),Ohr=o(" (LayoutLM model)"),Vhr=l(),_T=a("li"),H1e=a("strong"),Xhr=o("longformer"),zhr=o(" \u2014 "),zQ=a("a"),Qhr=o("TFLongformerForMaskedLM"),Whr=o(" (Longformer model)"),Hhr=l(),bT=a("li"),U1e=a("strong"),Uhr=o("mobilebert"),Jhr=o(" \u2014 "),QQ=a("a"),Yhr=o("TFMobileBertForMaskedLM"),Khr=o(" (MobileBERT model)"),Zhr=l(),vT=a("li"),J1e=a("strong"),epr=o("mpnet"),opr=o(" \u2014 "),WQ=a("a"),rpr=o("TFMPNetForMaskedLM"),tpr=o(" (MPNet model)"),apr=l(),FT=a("li"),Y1e=a("strong"),npr=o("rembert"),spr=o(" \u2014 "),HQ=a("a"),lpr=o("TFRemBertForMaskedLM"),ipr=o(" (RemBERT model)"),dpr=l(),TT=a("li"),K1e=a("strong"),cpr=o("roberta"),fpr=o(" \u2014 "),UQ=a("a"),mpr=o("TFRobertaForMaskedLM"),gpr=o(" (RoBERTa model)"),hpr=l(),MT=a("li"),Z1e=a("strong"),ppr=o("roformer"),upr=o(" \u2014 "),JQ=a("a"),_pr=o("TFRoFormerForMaskedLM"),bpr=o(" (RoFormer model)"),vpr=l(),ET=a("li"),ebe=a("strong"),Fpr=o("tapas"),Tpr=o(" \u2014 "),YQ=a("a"),Mpr=o("TFTapasForMaskedLM"),Epr=o(" (TAPAS model)"),Cpr=l(),CT=a("li"),obe=a("strong"),wpr=o("xlm"),Apr=o(" \u2014 "),KQ=a("a"),ypr=o("TFXLMWithLMHeadModel"),Lpr=o(" (XLM model)"),xpr=l(),wT=a("li"),rbe=a("strong"),$pr=o("xlm-roberta"),kpr=o(" \u2014 "),ZQ=a("a"),Spr=o("TFXLMRobertaForMaskedLM"),Rpr=o(" (XLM-RoBERTa model)"),Bpr=l(),F(AT.$$.fragment),BIe=l(),Zd=a("h2"),yT=a("a"),tbe=a("span"),F(Y8.$$.fragment),Ppr=l(),abe=a("span"),Ipr=o("TFAutoModelForSeq2SeqLM"),PIe=l(),rr=a("div"),F(K8.$$.fragment),qpr=l(),ec=a("p"),Npr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eW=a("a"),jpr=o("from_pretrained()"),Dpr=o(" class method or the "),oW=a("a"),Gpr=o("from_config()"),Opr=o(` class
method.`),Vpr=l(),Z8=a("p"),Xpr=o("This class cannot be instantiated directly using "),nbe=a("code"),zpr=o("__init__()"),Qpr=o(" (throws an error)."),Wpr=l(),$t=a("div"),F(ex.$$.fragment),Hpr=l(),sbe=a("p"),Upr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jpr=l(),oc=a("p"),Ypr=o(`Note:
Loading a model from its configuration file does `),lbe=a("strong"),Kpr=o("not"),Zpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=a("a"),eur=o("from_pretrained()"),our=o(" to load the model weights."),rur=l(),F(LT.$$.fragment),tur=l(),$r=a("div"),F(ox.$$.fragment),aur=l(),ibe=a("p"),nur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sur=l(),tn=a("p"),lur=o("The model class to instantiate is selected based on the "),dbe=a("code"),iur=o("model_type"),dur=o(` property of the config object (either
passed as an argument or loaded from `),cbe=a("code"),cur=o("pretrained_model_name_or_path"),fur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=a("code"),mur=o("pretrained_model_name_or_path"),gur=o(":"),hur=l(),ye=a("ul"),xT=a("li"),mbe=a("strong"),pur=o("bart"),uur=o(" \u2014 "),tW=a("a"),_ur=o("TFBartForConditionalGeneration"),bur=o(" (BART model)"),vur=l(),$T=a("li"),gbe=a("strong"),Fur=o("blenderbot"),Tur=o(" \u2014 "),aW=a("a"),Mur=o("TFBlenderbotForConditionalGeneration"),Eur=o(" (Blenderbot model)"),Cur=l(),kT=a("li"),hbe=a("strong"),wur=o("blenderbot-small"),Aur=o(" \u2014 "),nW=a("a"),yur=o("TFBlenderbotSmallForConditionalGeneration"),Lur=o(" (BlenderbotSmall model)"),xur=l(),ST=a("li"),pbe=a("strong"),$ur=o("encoder-decoder"),kur=o(" \u2014 "),sW=a("a"),Sur=o("TFEncoderDecoderModel"),Rur=o(" (Encoder decoder model)"),Bur=l(),RT=a("li"),ube=a("strong"),Pur=o("led"),Iur=o(" \u2014 "),lW=a("a"),qur=o("TFLEDForConditionalGeneration"),Nur=o(" (LED model)"),jur=l(),BT=a("li"),_be=a("strong"),Dur=o("marian"),Gur=o(" \u2014 "),iW=a("a"),Our=o("TFMarianMTModel"),Vur=o(" (Marian model)"),Xur=l(),PT=a("li"),bbe=a("strong"),zur=o("mbart"),Qur=o(" \u2014 "),dW=a("a"),Wur=o("TFMBartForConditionalGeneration"),Hur=o(" (mBART model)"),Uur=l(),IT=a("li"),vbe=a("strong"),Jur=o("mt5"),Yur=o(" \u2014 "),cW=a("a"),Kur=o("TFMT5ForConditionalGeneration"),Zur=o(" (mT5 model)"),e_r=l(),qT=a("li"),Fbe=a("strong"),o_r=o("pegasus"),r_r=o(" \u2014 "),fW=a("a"),t_r=o("TFPegasusForConditionalGeneration"),a_r=o(" (Pegasus model)"),n_r=l(),NT=a("li"),Tbe=a("strong"),s_r=o("t5"),l_r=o(" \u2014 "),mW=a("a"),i_r=o("TFT5ForConditionalGeneration"),d_r=o(" (T5 model)"),c_r=l(),F(jT.$$.fragment),IIe=l(),rc=a("h2"),DT=a("a"),Mbe=a("span"),F(rx.$$.fragment),f_r=l(),Ebe=a("span"),m_r=o("TFAutoModelForSequenceClassification"),qIe=l(),tr=a("div"),F(tx.$$.fragment),g_r=l(),tc=a("p"),h_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gW=a("a"),p_r=o("from_pretrained()"),u_r=o(" class method or the "),hW=a("a"),__r=o("from_config()"),b_r=o(` class
method.`),v_r=l(),ax=a("p"),F_r=o("This class cannot be instantiated directly using "),Cbe=a("code"),T_r=o("__init__()"),M_r=o(" (throws an error)."),E_r=l(),kt=a("div"),F(nx.$$.fragment),C_r=l(),wbe=a("p"),w_r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),A_r=l(),ac=a("p"),y_r=o(`Note:
Loading a model from its configuration file does `),Abe=a("strong"),L_r=o("not"),x_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),$_r=o("from_pretrained()"),k_r=o(" to load the model weights."),S_r=l(),F(GT.$$.fragment),R_r=l(),kr=a("div"),F(sx.$$.fragment),B_r=l(),ybe=a("p"),P_r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),I_r=l(),an=a("p"),q_r=o("The model class to instantiate is selected based on the "),Lbe=a("code"),N_r=o("model_type"),j_r=o(` property of the config object (either
passed as an argument or loaded from `),xbe=a("code"),D_r=o("pretrained_model_name_or_path"),G_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=a("code"),O_r=o("pretrained_model_name_or_path"),V_r=o(":"),X_r=l(),Z=a("ul"),OT=a("li"),kbe=a("strong"),z_r=o("albert"),Q_r=o(" \u2014 "),uW=a("a"),W_r=o("TFAlbertForSequenceClassification"),H_r=o(" (ALBERT model)"),U_r=l(),VT=a("li"),Sbe=a("strong"),J_r=o("bert"),Y_r=o(" \u2014 "),_W=a("a"),K_r=o("TFBertForSequenceClassification"),Z_r=o(" (BERT model)"),e2r=l(),XT=a("li"),Rbe=a("strong"),o2r=o("camembert"),r2r=o(" \u2014 "),bW=a("a"),t2r=o("TFCamembertForSequenceClassification"),a2r=o(" (CamemBERT model)"),n2r=l(),zT=a("li"),Bbe=a("strong"),s2r=o("convbert"),l2r=o(" \u2014 "),vW=a("a"),i2r=o("TFConvBertForSequenceClassification"),d2r=o(" (ConvBERT model)"),c2r=l(),QT=a("li"),Pbe=a("strong"),f2r=o("ctrl"),m2r=o(" \u2014 "),FW=a("a"),g2r=o("TFCTRLForSequenceClassification"),h2r=o(" (CTRL model)"),p2r=l(),WT=a("li"),Ibe=a("strong"),u2r=o("deberta"),_2r=o(" \u2014 "),TW=a("a"),b2r=o("TFDebertaForSequenceClassification"),v2r=o(" (DeBERTa model)"),F2r=l(),HT=a("li"),qbe=a("strong"),T2r=o("deberta-v2"),M2r=o(" \u2014 "),MW=a("a"),E2r=o("TFDebertaV2ForSequenceClassification"),C2r=o(" (DeBERTa-v2 model)"),w2r=l(),UT=a("li"),Nbe=a("strong"),A2r=o("distilbert"),y2r=o(" \u2014 "),EW=a("a"),L2r=o("TFDistilBertForSequenceClassification"),x2r=o(" (DistilBERT model)"),$2r=l(),JT=a("li"),jbe=a("strong"),k2r=o("electra"),S2r=o(" \u2014 "),CW=a("a"),R2r=o("TFElectraForSequenceClassification"),B2r=o(" (ELECTRA model)"),P2r=l(),YT=a("li"),Dbe=a("strong"),I2r=o("flaubert"),q2r=o(" \u2014 "),wW=a("a"),N2r=o("TFFlaubertForSequenceClassification"),j2r=o(" (FlauBERT model)"),D2r=l(),KT=a("li"),Gbe=a("strong"),G2r=o("funnel"),O2r=o(" \u2014 "),AW=a("a"),V2r=o("TFFunnelForSequenceClassification"),X2r=o(" (Funnel Transformer model)"),z2r=l(),ZT=a("li"),Obe=a("strong"),Q2r=o("gpt2"),W2r=o(" \u2014 "),yW=a("a"),H2r=o("TFGPT2ForSequenceClassification"),U2r=o(" (OpenAI GPT-2 model)"),J2r=l(),eM=a("li"),Vbe=a("strong"),Y2r=o("gptj"),K2r=o(" \u2014 "),LW=a("a"),Z2r=o("TFGPTJForSequenceClassification"),e1r=o(" (GPT-J model)"),o1r=l(),oM=a("li"),Xbe=a("strong"),r1r=o("layoutlm"),t1r=o(" \u2014 "),xW=a("a"),a1r=o("TFLayoutLMForSequenceClassification"),n1r=o(" (LayoutLM model)"),s1r=l(),rM=a("li"),zbe=a("strong"),l1r=o("longformer"),i1r=o(" \u2014 "),$W=a("a"),d1r=o("TFLongformerForSequenceClassification"),c1r=o(" (Longformer model)"),f1r=l(),tM=a("li"),Qbe=a("strong"),m1r=o("mobilebert"),g1r=o(" \u2014 "),kW=a("a"),h1r=o("TFMobileBertForSequenceClassification"),p1r=o(" (MobileBERT model)"),u1r=l(),aM=a("li"),Wbe=a("strong"),_1r=o("mpnet"),b1r=o(" \u2014 "),SW=a("a"),v1r=o("TFMPNetForSequenceClassification"),F1r=o(" (MPNet model)"),T1r=l(),nM=a("li"),Hbe=a("strong"),M1r=o("openai-gpt"),E1r=o(" \u2014 "),RW=a("a"),C1r=o("TFOpenAIGPTForSequenceClassification"),w1r=o(" (OpenAI GPT model)"),A1r=l(),sM=a("li"),Ube=a("strong"),y1r=o("rembert"),L1r=o(" \u2014 "),BW=a("a"),x1r=o("TFRemBertForSequenceClassification"),$1r=o(" (RemBERT model)"),k1r=l(),lM=a("li"),Jbe=a("strong"),S1r=o("roberta"),R1r=o(" \u2014 "),PW=a("a"),B1r=o("TFRobertaForSequenceClassification"),P1r=o(" (RoBERTa model)"),I1r=l(),iM=a("li"),Ybe=a("strong"),q1r=o("roformer"),N1r=o(" \u2014 "),IW=a("a"),j1r=o("TFRoFormerForSequenceClassification"),D1r=o(" (RoFormer model)"),G1r=l(),dM=a("li"),Kbe=a("strong"),O1r=o("tapas"),V1r=o(" \u2014 "),qW=a("a"),X1r=o("TFTapasForSequenceClassification"),z1r=o(" (TAPAS model)"),Q1r=l(),cM=a("li"),Zbe=a("strong"),W1r=o("transfo-xl"),H1r=o(" \u2014 "),NW=a("a"),U1r=o("TFTransfoXLForSequenceClassification"),J1r=o(" (Transformer-XL model)"),Y1r=l(),fM=a("li"),e4e=a("strong"),K1r=o("xlm"),Z1r=o(" \u2014 "),jW=a("a"),ebr=o("TFXLMForSequenceClassification"),obr=o(" (XLM model)"),rbr=l(),mM=a("li"),o4e=a("strong"),tbr=o("xlm-roberta"),abr=o(" \u2014 "),DW=a("a"),nbr=o("TFXLMRobertaForSequenceClassification"),sbr=o(" (XLM-RoBERTa model)"),lbr=l(),gM=a("li"),r4e=a("strong"),ibr=o("xlnet"),dbr=o(" \u2014 "),GW=a("a"),cbr=o("TFXLNetForSequenceClassification"),fbr=o(" (XLNet model)"),mbr=l(),F(hM.$$.fragment),NIe=l(),nc=a("h2"),pM=a("a"),t4e=a("span"),F(lx.$$.fragment),gbr=l(),a4e=a("span"),hbr=o("TFAutoModelForMultipleChoice"),jIe=l(),ar=a("div"),F(ix.$$.fragment),pbr=l(),sc=a("p"),ubr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OW=a("a"),_br=o("from_pretrained()"),bbr=o(" class method or the "),VW=a("a"),vbr=o("from_config()"),Fbr=o(` class
method.`),Tbr=l(),dx=a("p"),Mbr=o("This class cannot be instantiated directly using "),n4e=a("code"),Ebr=o("__init__()"),Cbr=o(" (throws an error)."),wbr=l(),St=a("div"),F(cx.$$.fragment),Abr=l(),s4e=a("p"),ybr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Lbr=l(),lc=a("p"),xbr=o(`Note:
Loading a model from its configuration file does `),l4e=a("strong"),$br=o("not"),kbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=a("a"),Sbr=o("from_pretrained()"),Rbr=o(" to load the model weights."),Bbr=l(),F(uM.$$.fragment),Pbr=l(),Sr=a("div"),F(fx.$$.fragment),Ibr=l(),i4e=a("p"),qbr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Nbr=l(),nn=a("p"),jbr=o("The model class to instantiate is selected based on the "),d4e=a("code"),Dbr=o("model_type"),Gbr=o(` property of the config object (either
passed as an argument or loaded from `),c4e=a("code"),Obr=o("pretrained_model_name_or_path"),Vbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=a("code"),Xbr=o("pretrained_model_name_or_path"),zbr=o(":"),Qbr=l(),pe=a("ul"),_M=a("li"),m4e=a("strong"),Wbr=o("albert"),Hbr=o(" \u2014 "),zW=a("a"),Ubr=o("TFAlbertForMultipleChoice"),Jbr=o(" (ALBERT model)"),Ybr=l(),bM=a("li"),g4e=a("strong"),Kbr=o("bert"),Zbr=o(" \u2014 "),QW=a("a"),e4r=o("TFBertForMultipleChoice"),o4r=o(" (BERT model)"),r4r=l(),vM=a("li"),h4e=a("strong"),t4r=o("camembert"),a4r=o(" \u2014 "),WW=a("a"),n4r=o("TFCamembertForMultipleChoice"),s4r=o(" (CamemBERT model)"),l4r=l(),FM=a("li"),p4e=a("strong"),i4r=o("convbert"),d4r=o(" \u2014 "),HW=a("a"),c4r=o("TFConvBertForMultipleChoice"),f4r=o(" (ConvBERT model)"),m4r=l(),TM=a("li"),u4e=a("strong"),g4r=o("distilbert"),h4r=o(" \u2014 "),UW=a("a"),p4r=o("TFDistilBertForMultipleChoice"),u4r=o(" (DistilBERT model)"),_4r=l(),MM=a("li"),_4e=a("strong"),b4r=o("electra"),v4r=o(" \u2014 "),JW=a("a"),F4r=o("TFElectraForMultipleChoice"),T4r=o(" (ELECTRA model)"),M4r=l(),EM=a("li"),b4e=a("strong"),E4r=o("flaubert"),C4r=o(" \u2014 "),YW=a("a"),w4r=o("TFFlaubertForMultipleChoice"),A4r=o(" (FlauBERT model)"),y4r=l(),CM=a("li"),v4e=a("strong"),L4r=o("funnel"),x4r=o(" \u2014 "),KW=a("a"),$4r=o("TFFunnelForMultipleChoice"),k4r=o(" (Funnel Transformer model)"),S4r=l(),wM=a("li"),F4e=a("strong"),R4r=o("longformer"),B4r=o(" \u2014 "),ZW=a("a"),P4r=o("TFLongformerForMultipleChoice"),I4r=o(" (Longformer model)"),q4r=l(),AM=a("li"),T4e=a("strong"),N4r=o("mobilebert"),j4r=o(" \u2014 "),eH=a("a"),D4r=o("TFMobileBertForMultipleChoice"),G4r=o(" (MobileBERT model)"),O4r=l(),yM=a("li"),M4e=a("strong"),V4r=o("mpnet"),X4r=o(" \u2014 "),oH=a("a"),z4r=o("TFMPNetForMultipleChoice"),Q4r=o(" (MPNet model)"),W4r=l(),LM=a("li"),E4e=a("strong"),H4r=o("rembert"),U4r=o(" \u2014 "),rH=a("a"),J4r=o("TFRemBertForMultipleChoice"),Y4r=o(" (RemBERT model)"),K4r=l(),xM=a("li"),C4e=a("strong"),Z4r=o("roberta"),evr=o(" \u2014 "),tH=a("a"),ovr=o("TFRobertaForMultipleChoice"),rvr=o(" (RoBERTa model)"),tvr=l(),$M=a("li"),w4e=a("strong"),avr=o("roformer"),nvr=o(" \u2014 "),aH=a("a"),svr=o("TFRoFormerForMultipleChoice"),lvr=o(" (RoFormer model)"),ivr=l(),kM=a("li"),A4e=a("strong"),dvr=o("xlm"),cvr=o(" \u2014 "),nH=a("a"),fvr=o("TFXLMForMultipleChoice"),mvr=o(" (XLM model)"),gvr=l(),SM=a("li"),y4e=a("strong"),hvr=o("xlm-roberta"),pvr=o(" \u2014 "),sH=a("a"),uvr=o("TFXLMRobertaForMultipleChoice"),_vr=o(" (XLM-RoBERTa model)"),bvr=l(),RM=a("li"),L4e=a("strong"),vvr=o("xlnet"),Fvr=o(" \u2014 "),lH=a("a"),Tvr=o("TFXLNetForMultipleChoice"),Mvr=o(" (XLNet model)"),Evr=l(),F(BM.$$.fragment),DIe=l(),ic=a("h2"),PM=a("a"),x4e=a("span"),F(mx.$$.fragment),Cvr=l(),$4e=a("span"),wvr=o("TFAutoModelForNextSentencePrediction"),GIe=l(),nr=a("div"),F(gx.$$.fragment),Avr=l(),dc=a("p"),yvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iH=a("a"),Lvr=o("from_pretrained()"),xvr=o(" class method or the "),dH=a("a"),$vr=o("from_config()"),kvr=o(` class
method.`),Svr=l(),hx=a("p"),Rvr=o("This class cannot be instantiated directly using "),k4e=a("code"),Bvr=o("__init__()"),Pvr=o(" (throws an error)."),Ivr=l(),Rt=a("div"),F(px.$$.fragment),qvr=l(),S4e=a("p"),Nvr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jvr=l(),cc=a("p"),Dvr=o(`Note:
Loading a model from its configuration file does `),R4e=a("strong"),Gvr=o("not"),Ovr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=a("a"),Vvr=o("from_pretrained()"),Xvr=o(" to load the model weights."),zvr=l(),F(IM.$$.fragment),Qvr=l(),Rr=a("div"),F(ux.$$.fragment),Wvr=l(),B4e=a("p"),Hvr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Uvr=l(),sn=a("p"),Jvr=o("The model class to instantiate is selected based on the "),P4e=a("code"),Yvr=o("model_type"),Kvr=o(` property of the config object (either
passed as an argument or loaded from `),I4e=a("code"),Zvr=o("pretrained_model_name_or_path"),eFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q4e=a("code"),oFr=o("pretrained_model_name_or_path"),rFr=o(":"),tFr=l(),_x=a("ul"),qM=a("li"),N4e=a("strong"),aFr=o("bert"),nFr=o(" \u2014 "),fH=a("a"),sFr=o("TFBertForNextSentencePrediction"),lFr=o(" (BERT model)"),iFr=l(),NM=a("li"),j4e=a("strong"),dFr=o("mobilebert"),cFr=o(" \u2014 "),mH=a("a"),fFr=o("TFMobileBertForNextSentencePrediction"),mFr=o(" (MobileBERT model)"),gFr=l(),F(jM.$$.fragment),OIe=l(),fc=a("h2"),DM=a("a"),D4e=a("span"),F(bx.$$.fragment),hFr=l(),G4e=a("span"),pFr=o("TFAutoModelForTableQuestionAnswering"),VIe=l(),sr=a("div"),F(vx.$$.fragment),uFr=l(),mc=a("p"),_Fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gH=a("a"),bFr=o("from_pretrained()"),vFr=o(" class method or the "),hH=a("a"),FFr=o("from_config()"),TFr=o(` class
method.`),MFr=l(),Fx=a("p"),EFr=o("This class cannot be instantiated directly using "),O4e=a("code"),CFr=o("__init__()"),wFr=o(" (throws an error)."),AFr=l(),Bt=a("div"),F(Tx.$$.fragment),yFr=l(),V4e=a("p"),LFr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xFr=l(),gc=a("p"),$Fr=o(`Note:
Loading a model from its configuration file does `),X4e=a("strong"),kFr=o("not"),SFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=a("a"),RFr=o("from_pretrained()"),BFr=o(" to load the model weights."),PFr=l(),F(GM.$$.fragment),IFr=l(),Br=a("div"),F(Mx.$$.fragment),qFr=l(),z4e=a("p"),NFr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jFr=l(),ln=a("p"),DFr=o("The model class to instantiate is selected based on the "),Q4e=a("code"),GFr=o("model_type"),OFr=o(` property of the config object (either
passed as an argument or loaded from `),W4e=a("code"),VFr=o("pretrained_model_name_or_path"),XFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H4e=a("code"),zFr=o("pretrained_model_name_or_path"),QFr=o(":"),WFr=l(),U4e=a("ul"),OM=a("li"),J4e=a("strong"),HFr=o("tapas"),UFr=o(" \u2014 "),uH=a("a"),JFr=o("TFTapasForQuestionAnswering"),YFr=o(" (TAPAS model)"),KFr=l(),F(VM.$$.fragment),XIe=l(),hc=a("h2"),XM=a("a"),Y4e=a("span"),F(Ex.$$.fragment),ZFr=l(),K4e=a("span"),e0r=o("TFAutoModelForTokenClassification"),zIe=l(),lr=a("div"),F(Cx.$$.fragment),o0r=l(),pc=a("p"),r0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_H=a("a"),t0r=o("from_pretrained()"),a0r=o(" class method or the "),bH=a("a"),n0r=o("from_config()"),s0r=o(` class
method.`),l0r=l(),wx=a("p"),i0r=o("This class cannot be instantiated directly using "),Z4e=a("code"),d0r=o("__init__()"),c0r=o(" (throws an error)."),f0r=l(),Pt=a("div"),F(Ax.$$.fragment),m0r=l(),eve=a("p"),g0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),h0r=l(),uc=a("p"),p0r=o(`Note:
Loading a model from its configuration file does `),ove=a("strong"),u0r=o("not"),_0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),b0r=o("from_pretrained()"),v0r=o(" to load the model weights."),F0r=l(),F(zM.$$.fragment),T0r=l(),Pr=a("div"),F(yx.$$.fragment),M0r=l(),rve=a("p"),E0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),C0r=l(),dn=a("p"),w0r=o("The model class to instantiate is selected based on the "),tve=a("code"),A0r=o("model_type"),y0r=o(` property of the config object (either
passed as an argument or loaded from `),ave=a("code"),L0r=o("pretrained_model_name_or_path"),x0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=a("code"),$0r=o("pretrained_model_name_or_path"),k0r=o(":"),S0r=l(),de=a("ul"),QM=a("li"),sve=a("strong"),R0r=o("albert"),B0r=o(" \u2014 "),FH=a("a"),P0r=o("TFAlbertForTokenClassification"),I0r=o(" (ALBERT model)"),q0r=l(),WM=a("li"),lve=a("strong"),N0r=o("bert"),j0r=o(" \u2014 "),TH=a("a"),D0r=o("TFBertForTokenClassification"),G0r=o(" (BERT model)"),O0r=l(),HM=a("li"),ive=a("strong"),V0r=o("camembert"),X0r=o(" \u2014 "),MH=a("a"),z0r=o("TFCamembertForTokenClassification"),Q0r=o(" (CamemBERT model)"),W0r=l(),UM=a("li"),dve=a("strong"),H0r=o("convbert"),U0r=o(" \u2014 "),EH=a("a"),J0r=o("TFConvBertForTokenClassification"),Y0r=o(" (ConvBERT model)"),K0r=l(),JM=a("li"),cve=a("strong"),Z0r=o("deberta"),e6r=o(" \u2014 "),CH=a("a"),o6r=o("TFDebertaForTokenClassification"),r6r=o(" (DeBERTa model)"),t6r=l(),YM=a("li"),fve=a("strong"),a6r=o("deberta-v2"),n6r=o(" \u2014 "),wH=a("a"),s6r=o("TFDebertaV2ForTokenClassification"),l6r=o(" (DeBERTa-v2 model)"),i6r=l(),KM=a("li"),mve=a("strong"),d6r=o("distilbert"),c6r=o(" \u2014 "),AH=a("a"),f6r=o("TFDistilBertForTokenClassification"),m6r=o(" (DistilBERT model)"),g6r=l(),ZM=a("li"),gve=a("strong"),h6r=o("electra"),p6r=o(" \u2014 "),yH=a("a"),u6r=o("TFElectraForTokenClassification"),_6r=o(" (ELECTRA model)"),b6r=l(),eE=a("li"),hve=a("strong"),v6r=o("flaubert"),F6r=o(" \u2014 "),LH=a("a"),T6r=o("TFFlaubertForTokenClassification"),M6r=o(" (FlauBERT model)"),E6r=l(),oE=a("li"),pve=a("strong"),C6r=o("funnel"),w6r=o(" \u2014 "),xH=a("a"),A6r=o("TFFunnelForTokenClassification"),y6r=o(" (Funnel Transformer model)"),L6r=l(),rE=a("li"),uve=a("strong"),x6r=o("layoutlm"),$6r=o(" \u2014 "),$H=a("a"),k6r=o("TFLayoutLMForTokenClassification"),S6r=o(" (LayoutLM model)"),R6r=l(),tE=a("li"),_ve=a("strong"),B6r=o("longformer"),P6r=o(" \u2014 "),kH=a("a"),I6r=o("TFLongformerForTokenClassification"),q6r=o(" (Longformer model)"),N6r=l(),aE=a("li"),bve=a("strong"),j6r=o("mobilebert"),D6r=o(" \u2014 "),SH=a("a"),G6r=o("TFMobileBertForTokenClassification"),O6r=o(" (MobileBERT model)"),V6r=l(),nE=a("li"),vve=a("strong"),X6r=o("mpnet"),z6r=o(" \u2014 "),RH=a("a"),Q6r=o("TFMPNetForTokenClassification"),W6r=o(" (MPNet model)"),H6r=l(),sE=a("li"),Fve=a("strong"),U6r=o("rembert"),J6r=o(" \u2014 "),BH=a("a"),Y6r=o("TFRemBertForTokenClassification"),K6r=o(" (RemBERT model)"),Z6r=l(),lE=a("li"),Tve=a("strong"),eTr=o("roberta"),oTr=o(" \u2014 "),PH=a("a"),rTr=o("TFRobertaForTokenClassification"),tTr=o(" (RoBERTa model)"),aTr=l(),iE=a("li"),Mve=a("strong"),nTr=o("roformer"),sTr=o(" \u2014 "),IH=a("a"),lTr=o("TFRoFormerForTokenClassification"),iTr=o(" (RoFormer model)"),dTr=l(),dE=a("li"),Eve=a("strong"),cTr=o("xlm"),fTr=o(" \u2014 "),qH=a("a"),mTr=o("TFXLMForTokenClassification"),gTr=o(" (XLM model)"),hTr=l(),cE=a("li"),Cve=a("strong"),pTr=o("xlm-roberta"),uTr=o(" \u2014 "),NH=a("a"),_Tr=o("TFXLMRobertaForTokenClassification"),bTr=o(" (XLM-RoBERTa model)"),vTr=l(),fE=a("li"),wve=a("strong"),FTr=o("xlnet"),TTr=o(" \u2014 "),jH=a("a"),MTr=o("TFXLNetForTokenClassification"),ETr=o(" (XLNet model)"),CTr=l(),F(mE.$$.fragment),QIe=l(),_c=a("h2"),gE=a("a"),Ave=a("span"),F(Lx.$$.fragment),wTr=l(),yve=a("span"),ATr=o("TFAutoModelForQuestionAnswering"),WIe=l(),ir=a("div"),F(xx.$$.fragment),yTr=l(),bc=a("p"),LTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DH=a("a"),xTr=o("from_pretrained()"),$Tr=o(" class method or the "),GH=a("a"),kTr=o("from_config()"),STr=o(` class
method.`),RTr=l(),$x=a("p"),BTr=o("This class cannot be instantiated directly using "),Lve=a("code"),PTr=o("__init__()"),ITr=o(" (throws an error)."),qTr=l(),It=a("div"),F(kx.$$.fragment),NTr=l(),xve=a("p"),jTr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),DTr=l(),vc=a("p"),GTr=o(`Note:
Loading a model from its configuration file does `),$ve=a("strong"),OTr=o("not"),VTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=a("a"),XTr=o("from_pretrained()"),zTr=o(" to load the model weights."),QTr=l(),F(hE.$$.fragment),WTr=l(),Ir=a("div"),F(Sx.$$.fragment),HTr=l(),kve=a("p"),UTr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),JTr=l(),cn=a("p"),YTr=o("The model class to instantiate is selected based on the "),Sve=a("code"),KTr=o("model_type"),ZTr=o(` property of the config object (either
passed as an argument or loaded from `),Rve=a("code"),eMr=o("pretrained_model_name_or_path"),oMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=a("code"),rMr=o("pretrained_model_name_or_path"),tMr=o(":"),aMr=l(),ce=a("ul"),pE=a("li"),Pve=a("strong"),nMr=o("albert"),sMr=o(" \u2014 "),VH=a("a"),lMr=o("TFAlbertForQuestionAnswering"),iMr=o(" (ALBERT model)"),dMr=l(),uE=a("li"),Ive=a("strong"),cMr=o("bert"),fMr=o(" \u2014 "),XH=a("a"),mMr=o("TFBertForQuestionAnswering"),gMr=o(" (BERT model)"),hMr=l(),_E=a("li"),qve=a("strong"),pMr=o("camembert"),uMr=o(" \u2014 "),zH=a("a"),_Mr=o("TFCamembertForQuestionAnswering"),bMr=o(" (CamemBERT model)"),vMr=l(),bE=a("li"),Nve=a("strong"),FMr=o("convbert"),TMr=o(" \u2014 "),QH=a("a"),MMr=o("TFConvBertForQuestionAnswering"),EMr=o(" (ConvBERT model)"),CMr=l(),vE=a("li"),jve=a("strong"),wMr=o("deberta"),AMr=o(" \u2014 "),WH=a("a"),yMr=o("TFDebertaForQuestionAnswering"),LMr=o(" (DeBERTa model)"),xMr=l(),FE=a("li"),Dve=a("strong"),$Mr=o("deberta-v2"),kMr=o(" \u2014 "),HH=a("a"),SMr=o("TFDebertaV2ForQuestionAnswering"),RMr=o(" (DeBERTa-v2 model)"),BMr=l(),TE=a("li"),Gve=a("strong"),PMr=o("distilbert"),IMr=o(" \u2014 "),UH=a("a"),qMr=o("TFDistilBertForQuestionAnswering"),NMr=o(" (DistilBERT model)"),jMr=l(),ME=a("li"),Ove=a("strong"),DMr=o("electra"),GMr=o(" \u2014 "),JH=a("a"),OMr=o("TFElectraForQuestionAnswering"),VMr=o(" (ELECTRA model)"),XMr=l(),EE=a("li"),Vve=a("strong"),zMr=o("flaubert"),QMr=o(" \u2014 "),YH=a("a"),WMr=o("TFFlaubertForQuestionAnsweringSimple"),HMr=o(" (FlauBERT model)"),UMr=l(),CE=a("li"),Xve=a("strong"),JMr=o("funnel"),YMr=o(" \u2014 "),KH=a("a"),KMr=o("TFFunnelForQuestionAnswering"),ZMr=o(" (Funnel Transformer model)"),eEr=l(),wE=a("li"),zve=a("strong"),oEr=o("gptj"),rEr=o(" \u2014 "),ZH=a("a"),tEr=o("TFGPTJForQuestionAnswering"),aEr=o(" (GPT-J model)"),nEr=l(),AE=a("li"),Qve=a("strong"),sEr=o("longformer"),lEr=o(" \u2014 "),eU=a("a"),iEr=o("TFLongformerForQuestionAnswering"),dEr=o(" (Longformer model)"),cEr=l(),yE=a("li"),Wve=a("strong"),fEr=o("mobilebert"),mEr=o(" \u2014 "),oU=a("a"),gEr=o("TFMobileBertForQuestionAnswering"),hEr=o(" (MobileBERT model)"),pEr=l(),LE=a("li"),Hve=a("strong"),uEr=o("mpnet"),_Er=o(" \u2014 "),rU=a("a"),bEr=o("TFMPNetForQuestionAnswering"),vEr=o(" (MPNet model)"),FEr=l(),xE=a("li"),Uve=a("strong"),TEr=o("rembert"),MEr=o(" \u2014 "),tU=a("a"),EEr=o("TFRemBertForQuestionAnswering"),CEr=o(" (RemBERT model)"),wEr=l(),$E=a("li"),Jve=a("strong"),AEr=o("roberta"),yEr=o(" \u2014 "),aU=a("a"),LEr=o("TFRobertaForQuestionAnswering"),xEr=o(" (RoBERTa model)"),$Er=l(),kE=a("li"),Yve=a("strong"),kEr=o("roformer"),SEr=o(" \u2014 "),nU=a("a"),REr=o("TFRoFormerForQuestionAnswering"),BEr=o(" (RoFormer model)"),PEr=l(),SE=a("li"),Kve=a("strong"),IEr=o("xlm"),qEr=o(" \u2014 "),sU=a("a"),NEr=o("TFXLMForQuestionAnsweringSimple"),jEr=o(" (XLM model)"),DEr=l(),RE=a("li"),Zve=a("strong"),GEr=o("xlm-roberta"),OEr=o(" \u2014 "),lU=a("a"),VEr=o("TFXLMRobertaForQuestionAnswering"),XEr=o(" (XLM-RoBERTa model)"),zEr=l(),BE=a("li"),eFe=a("strong"),QEr=o("xlnet"),WEr=o(" \u2014 "),iU=a("a"),HEr=o("TFXLNetForQuestionAnsweringSimple"),UEr=o(" (XLNet model)"),JEr=l(),F(PE.$$.fragment),HIe=l(),Fc=a("h2"),IE=a("a"),oFe=a("span"),F(Rx.$$.fragment),YEr=l(),rFe=a("span"),KEr=o("TFAutoModelForVision2Seq"),UIe=l(),dr=a("div"),F(Bx.$$.fragment),ZEr=l(),Tc=a("p"),eCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dU=a("a"),oCr=o("from_pretrained()"),rCr=o(" class method or the "),cU=a("a"),tCr=o("from_config()"),aCr=o(` class
method.`),nCr=l(),Px=a("p"),sCr=o("This class cannot be instantiated directly using "),tFe=a("code"),lCr=o("__init__()"),iCr=o(" (throws an error)."),dCr=l(),qt=a("div"),F(Ix.$$.fragment),cCr=l(),aFe=a("p"),fCr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mCr=l(),Mc=a("p"),gCr=o(`Note:
Loading a model from its configuration file does `),nFe=a("strong"),hCr=o("not"),pCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),uCr=o("from_pretrained()"),_Cr=o(" to load the model weights."),bCr=l(),F(qE.$$.fragment),vCr=l(),qr=a("div"),F(qx.$$.fragment),FCr=l(),sFe=a("p"),TCr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MCr=l(),fn=a("p"),ECr=o("The model class to instantiate is selected based on the "),lFe=a("code"),CCr=o("model_type"),wCr=o(` property of the config object (either
passed as an argument or loaded from `),iFe=a("code"),ACr=o("pretrained_model_name_or_path"),yCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=a("code"),LCr=o("pretrained_model_name_or_path"),xCr=o(":"),$Cr=l(),cFe=a("ul"),NE=a("li"),fFe=a("strong"),kCr=o("vision-encoder-decoder"),SCr=o(" \u2014 "),mU=a("a"),RCr=o("TFVisionEncoderDecoderModel"),BCr=o(" (Vision Encoder decoder model)"),PCr=l(),F(jE.$$.fragment),JIe=l(),Ec=a("h2"),DE=a("a"),mFe=a("span"),F(Nx.$$.fragment),ICr=l(),gFe=a("span"),qCr=o("TFAutoModelForSpeechSeq2Seq"),YIe=l(),cr=a("div"),F(jx.$$.fragment),NCr=l(),Cc=a("p"),jCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gU=a("a"),DCr=o("from_pretrained()"),GCr=o(" class method or the "),hU=a("a"),OCr=o("from_config()"),VCr=o(` class
method.`),XCr=l(),Dx=a("p"),zCr=o("This class cannot be instantiated directly using "),hFe=a("code"),QCr=o("__init__()"),WCr=o(" (throws an error)."),HCr=l(),Nt=a("div"),F(Gx.$$.fragment),UCr=l(),pFe=a("p"),JCr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),YCr=l(),wc=a("p"),KCr=o(`Note:
Loading a model from its configuration file does `),uFe=a("strong"),ZCr=o("not"),e5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),o5r=o("from_pretrained()"),r5r=o(" to load the model weights."),t5r=l(),F(GE.$$.fragment),a5r=l(),Nr=a("div"),F(Ox.$$.fragment),n5r=l(),_Fe=a("p"),s5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),l5r=l(),mn=a("p"),i5r=o("The model class to instantiate is selected based on the "),bFe=a("code"),d5r=o("model_type"),c5r=o(` property of the config object (either
passed as an argument or loaded from `),vFe=a("code"),f5r=o("pretrained_model_name_or_path"),m5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FFe=a("code"),g5r=o("pretrained_model_name_or_path"),h5r=o(":"),p5r=l(),TFe=a("ul"),OE=a("li"),MFe=a("strong"),u5r=o("speech_to_text"),_5r=o(" \u2014 "),uU=a("a"),b5r=o("TFSpeech2TextForConditionalGeneration"),v5r=o(" (Speech2Text model)"),F5r=l(),F(VE.$$.fragment),KIe=l(),Ac=a("h2"),XE=a("a"),EFe=a("span"),F(Vx.$$.fragment),T5r=l(),CFe=a("span"),M5r=o("FlaxAutoModel"),ZIe=l(),fr=a("div"),F(Xx.$$.fragment),E5r=l(),yc=a("p"),C5r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_U=a("a"),w5r=o("from_pretrained()"),A5r=o(" class method or the "),bU=a("a"),y5r=o("from_config()"),L5r=o(` class
method.`),x5r=l(),zx=a("p"),$5r=o("This class cannot be instantiated directly using "),wFe=a("code"),k5r=o("__init__()"),S5r=o(" (throws an error)."),R5r=l(),jt=a("div"),F(Qx.$$.fragment),B5r=l(),AFe=a("p"),P5r=o("Instantiates one of the base model classes of the library from a configuration."),I5r=l(),Lc=a("p"),q5r=o(`Note:
Loading a model from its configuration file does `),yFe=a("strong"),N5r=o("not"),j5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),D5r=o("from_pretrained()"),G5r=o(" to load the model weights."),O5r=l(),F(zE.$$.fragment),V5r=l(),jr=a("div"),F(Wx.$$.fragment),X5r=l(),LFe=a("p"),z5r=o("Instantiate one of the base model classes of the library from a pretrained model."),Q5r=l(),gn=a("p"),W5r=o("The model class to instantiate is selected based on the "),xFe=a("code"),H5r=o("model_type"),U5r=o(` property of the config object (either
passed as an argument or loaded from `),$Fe=a("code"),J5r=o("pretrained_model_name_or_path"),Y5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kFe=a("code"),K5r=o("pretrained_model_name_or_path"),Z5r=o(":"),e3r=l(),re=a("ul"),QE=a("li"),SFe=a("strong"),o3r=o("albert"),r3r=o(" \u2014 "),FU=a("a"),t3r=o("FlaxAlbertModel"),a3r=o(" (ALBERT model)"),n3r=l(),WE=a("li"),RFe=a("strong"),s3r=o("bart"),l3r=o(" \u2014 "),TU=a("a"),i3r=o("FlaxBartModel"),d3r=o(" (BART model)"),c3r=l(),HE=a("li"),BFe=a("strong"),f3r=o("beit"),m3r=o(" \u2014 "),MU=a("a"),g3r=o("FlaxBeitModel"),h3r=o(" (BEiT model)"),p3r=l(),UE=a("li"),PFe=a("strong"),u3r=o("bert"),_3r=o(" \u2014 "),EU=a("a"),b3r=o("FlaxBertModel"),v3r=o(" (BERT model)"),F3r=l(),JE=a("li"),IFe=a("strong"),T3r=o("big_bird"),M3r=o(" \u2014 "),CU=a("a"),E3r=o("FlaxBigBirdModel"),C3r=o(" (BigBird model)"),w3r=l(),YE=a("li"),qFe=a("strong"),A3r=o("blenderbot"),y3r=o(" \u2014 "),wU=a("a"),L3r=o("FlaxBlenderbotModel"),x3r=o(" (Blenderbot model)"),$3r=l(),KE=a("li"),NFe=a("strong"),k3r=o("blenderbot-small"),S3r=o(" \u2014 "),AU=a("a"),R3r=o("FlaxBlenderbotSmallModel"),B3r=o(" (BlenderbotSmall model)"),P3r=l(),ZE=a("li"),jFe=a("strong"),I3r=o("clip"),q3r=o(" \u2014 "),yU=a("a"),N3r=o("FlaxCLIPModel"),j3r=o(" (CLIP model)"),D3r=l(),eC=a("li"),DFe=a("strong"),G3r=o("distilbert"),O3r=o(" \u2014 "),LU=a("a"),V3r=o("FlaxDistilBertModel"),X3r=o(" (DistilBERT model)"),z3r=l(),oC=a("li"),GFe=a("strong"),Q3r=o("electra"),W3r=o(" \u2014 "),xU=a("a"),H3r=o("FlaxElectraModel"),U3r=o(" (ELECTRA model)"),J3r=l(),rC=a("li"),OFe=a("strong"),Y3r=o("gpt2"),K3r=o(" \u2014 "),$U=a("a"),Z3r=o("FlaxGPT2Model"),ewr=o(" (OpenAI GPT-2 model)"),owr=l(),tC=a("li"),VFe=a("strong"),rwr=o("gpt_neo"),twr=o(" \u2014 "),kU=a("a"),awr=o("FlaxGPTNeoModel"),nwr=o(" (GPT Neo model)"),swr=l(),aC=a("li"),XFe=a("strong"),lwr=o("gptj"),iwr=o(" \u2014 "),SU=a("a"),dwr=o("FlaxGPTJModel"),cwr=o(" (GPT-J model)"),fwr=l(),nC=a("li"),zFe=a("strong"),mwr=o("marian"),gwr=o(" \u2014 "),RU=a("a"),hwr=o("FlaxMarianModel"),pwr=o(" (Marian model)"),uwr=l(),sC=a("li"),QFe=a("strong"),_wr=o("mbart"),bwr=o(" \u2014 "),BU=a("a"),vwr=o("FlaxMBartModel"),Fwr=o(" (mBART model)"),Twr=l(),lC=a("li"),WFe=a("strong"),Mwr=o("mt5"),Ewr=o(" \u2014 "),PU=a("a"),Cwr=o("FlaxMT5Model"),wwr=o(" (mT5 model)"),Awr=l(),iC=a("li"),HFe=a("strong"),ywr=o("pegasus"),Lwr=o(" \u2014 "),IU=a("a"),xwr=o("FlaxPegasusModel"),$wr=o(" (Pegasus model)"),kwr=l(),dC=a("li"),UFe=a("strong"),Swr=o("roberta"),Rwr=o(" \u2014 "),qU=a("a"),Bwr=o("FlaxRobertaModel"),Pwr=o(" (RoBERTa model)"),Iwr=l(),cC=a("li"),JFe=a("strong"),qwr=o("roformer"),Nwr=o(" \u2014 "),NU=a("a"),jwr=o("FlaxRoFormerModel"),Dwr=o(" (RoFormer model)"),Gwr=l(),fC=a("li"),YFe=a("strong"),Owr=o("t5"),Vwr=o(" \u2014 "),jU=a("a"),Xwr=o("FlaxT5Model"),zwr=o(" (T5 model)"),Qwr=l(),mC=a("li"),KFe=a("strong"),Wwr=o("vision-text-dual-encoder"),Hwr=o(" \u2014 "),DU=a("a"),Uwr=o("FlaxVisionTextDualEncoderModel"),Jwr=o(" (VisionTextDualEncoder model)"),Ywr=l(),gC=a("li"),ZFe=a("strong"),Kwr=o("vit"),Zwr=o(" \u2014 "),GU=a("a"),eAr=o("FlaxViTModel"),oAr=o(" (ViT model)"),rAr=l(),hC=a("li"),e0e=a("strong"),tAr=o("wav2vec2"),aAr=o(" \u2014 "),OU=a("a"),nAr=o("FlaxWav2Vec2Model"),sAr=o(" (Wav2Vec2 model)"),lAr=l(),pC=a("li"),o0e=a("strong"),iAr=o("xglm"),dAr=o(" \u2014 "),VU=a("a"),cAr=o("FlaxXGLMModel"),fAr=o(" (XGLM model)"),mAr=l(),uC=a("li"),r0e=a("strong"),gAr=o("xlm-roberta"),hAr=o(" \u2014 "),XU=a("a"),pAr=o("FlaxXLMRobertaModel"),uAr=o(" (XLM-RoBERTa model)"),_Ar=l(),F(_C.$$.fragment),eqe=l(),xc=a("h2"),bC=a("a"),t0e=a("span"),F(Hx.$$.fragment),bAr=l(),a0e=a("span"),vAr=o("FlaxAutoModelForCausalLM"),oqe=l(),mr=a("div"),F(Ux.$$.fragment),FAr=l(),$c=a("p"),TAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zU=a("a"),MAr=o("from_pretrained()"),EAr=o(" class method or the "),QU=a("a"),CAr=o("from_config()"),wAr=o(` class
method.`),AAr=l(),Jx=a("p"),yAr=o("This class cannot be instantiated directly using "),n0e=a("code"),LAr=o("__init__()"),xAr=o(" (throws an error)."),$Ar=l(),Dt=a("div"),F(Yx.$$.fragment),kAr=l(),s0e=a("p"),SAr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),RAr=l(),kc=a("p"),BAr=o(`Note:
Loading a model from its configuration file does `),l0e=a("strong"),PAr=o("not"),IAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WU=a("a"),qAr=o("from_pretrained()"),NAr=o(" to load the model weights."),jAr=l(),F(vC.$$.fragment),DAr=l(),Dr=a("div"),F(Kx.$$.fragment),GAr=l(),i0e=a("p"),OAr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),VAr=l(),hn=a("p"),XAr=o("The model class to instantiate is selected based on the "),d0e=a("code"),zAr=o("model_type"),QAr=o(` property of the config object (either
passed as an argument or loaded from `),c0e=a("code"),WAr=o("pretrained_model_name_or_path"),HAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f0e=a("code"),UAr=o("pretrained_model_name_or_path"),JAr=o(":"),YAr=l(),Se=a("ul"),FC=a("li"),m0e=a("strong"),KAr=o("bart"),ZAr=o(" \u2014 "),HU=a("a"),eyr=o("FlaxBartForCausalLM"),oyr=o(" (BART model)"),ryr=l(),TC=a("li"),g0e=a("strong"),tyr=o("bert"),ayr=o(" \u2014 "),UU=a("a"),nyr=o("FlaxBertForCausalLM"),syr=o(" (BERT model)"),lyr=l(),MC=a("li"),h0e=a("strong"),iyr=o("big_bird"),dyr=o(" \u2014 "),JU=a("a"),cyr=o("FlaxBigBirdForCausalLM"),fyr=o(" (BigBird model)"),myr=l(),EC=a("li"),p0e=a("strong"),gyr=o("electra"),hyr=o(" \u2014 "),YU=a("a"),pyr=o("FlaxElectraForCausalLM"),uyr=o(" (ELECTRA model)"),_yr=l(),CC=a("li"),u0e=a("strong"),byr=o("gpt2"),vyr=o(" \u2014 "),KU=a("a"),Fyr=o("FlaxGPT2LMHeadModel"),Tyr=o(" (OpenAI GPT-2 model)"),Myr=l(),wC=a("li"),_0e=a("strong"),Eyr=o("gpt_neo"),Cyr=o(" \u2014 "),ZU=a("a"),wyr=o("FlaxGPTNeoForCausalLM"),Ayr=o(" (GPT Neo model)"),yyr=l(),AC=a("li"),b0e=a("strong"),Lyr=o("gptj"),xyr=o(" \u2014 "),eJ=a("a"),$yr=o("FlaxGPTJForCausalLM"),kyr=o(" (GPT-J model)"),Syr=l(),yC=a("li"),v0e=a("strong"),Ryr=o("roberta"),Byr=o(" \u2014 "),oJ=a("a"),Pyr=o("FlaxRobertaForCausalLM"),Iyr=o(" (RoBERTa model)"),qyr=l(),LC=a("li"),F0e=a("strong"),Nyr=o("xglm"),jyr=o(" \u2014 "),rJ=a("a"),Dyr=o("FlaxXGLMForCausalLM"),Gyr=o(" (XGLM model)"),Oyr=l(),F(xC.$$.fragment),rqe=l(),Sc=a("h2"),$C=a("a"),T0e=a("span"),F(Zx.$$.fragment),Vyr=l(),M0e=a("span"),Xyr=o("FlaxAutoModelForPreTraining"),tqe=l(),gr=a("div"),F(e7.$$.fragment),zyr=l(),Rc=a("p"),Qyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tJ=a("a"),Wyr=o("from_pretrained()"),Hyr=o(" class method or the "),aJ=a("a"),Uyr=o("from_config()"),Jyr=o(` class
method.`),Yyr=l(),o7=a("p"),Kyr=o("This class cannot be instantiated directly using "),E0e=a("code"),Zyr=o("__init__()"),eLr=o(" (throws an error)."),oLr=l(),Gt=a("div"),F(r7.$$.fragment),rLr=l(),C0e=a("p"),tLr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),aLr=l(),Bc=a("p"),nLr=o(`Note:
Loading a model from its configuration file does `),w0e=a("strong"),sLr=o("not"),lLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("a"),iLr=o("from_pretrained()"),dLr=o(" to load the model weights."),cLr=l(),F(kC.$$.fragment),fLr=l(),Gr=a("div"),F(t7.$$.fragment),mLr=l(),A0e=a("p"),gLr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hLr=l(),pn=a("p"),pLr=o("The model class to instantiate is selected based on the "),y0e=a("code"),uLr=o("model_type"),_Lr=o(` property of the config object (either
passed as an argument or loaded from `),L0e=a("code"),bLr=o("pretrained_model_name_or_path"),vLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x0e=a("code"),FLr=o("pretrained_model_name_or_path"),TLr=o(":"),MLr=l(),Me=a("ul"),SC=a("li"),$0e=a("strong"),ELr=o("albert"),CLr=o(" \u2014 "),sJ=a("a"),wLr=o("FlaxAlbertForPreTraining"),ALr=o(" (ALBERT model)"),yLr=l(),RC=a("li"),k0e=a("strong"),LLr=o("bart"),xLr=o(" \u2014 "),lJ=a("a"),$Lr=o("FlaxBartForConditionalGeneration"),kLr=o(" (BART model)"),SLr=l(),BC=a("li"),S0e=a("strong"),RLr=o("bert"),BLr=o(" \u2014 "),iJ=a("a"),PLr=o("FlaxBertForPreTraining"),ILr=o(" (BERT model)"),qLr=l(),PC=a("li"),R0e=a("strong"),NLr=o("big_bird"),jLr=o(" \u2014 "),dJ=a("a"),DLr=o("FlaxBigBirdForPreTraining"),GLr=o(" (BigBird model)"),OLr=l(),IC=a("li"),B0e=a("strong"),VLr=o("electra"),XLr=o(" \u2014 "),cJ=a("a"),zLr=o("FlaxElectraForPreTraining"),QLr=o(" (ELECTRA model)"),WLr=l(),qC=a("li"),P0e=a("strong"),HLr=o("mbart"),ULr=o(" \u2014 "),fJ=a("a"),JLr=o("FlaxMBartForConditionalGeneration"),YLr=o(" (mBART model)"),KLr=l(),NC=a("li"),I0e=a("strong"),ZLr=o("mt5"),e8r=o(" \u2014 "),mJ=a("a"),o8r=o("FlaxMT5ForConditionalGeneration"),r8r=o(" (mT5 model)"),t8r=l(),jC=a("li"),q0e=a("strong"),a8r=o("roberta"),n8r=o(" \u2014 "),gJ=a("a"),s8r=o("FlaxRobertaForMaskedLM"),l8r=o(" (RoBERTa model)"),i8r=l(),DC=a("li"),N0e=a("strong"),d8r=o("roformer"),c8r=o(" \u2014 "),hJ=a("a"),f8r=o("FlaxRoFormerForMaskedLM"),m8r=o(" (RoFormer model)"),g8r=l(),GC=a("li"),j0e=a("strong"),h8r=o("t5"),p8r=o(" \u2014 "),pJ=a("a"),u8r=o("FlaxT5ForConditionalGeneration"),_8r=o(" (T5 model)"),b8r=l(),OC=a("li"),D0e=a("strong"),v8r=o("wav2vec2"),F8r=o(" \u2014 "),uJ=a("a"),T8r=o("FlaxWav2Vec2ForPreTraining"),M8r=o(" (Wav2Vec2 model)"),E8r=l(),VC=a("li"),G0e=a("strong"),C8r=o("xlm-roberta"),w8r=o(" \u2014 "),_J=a("a"),A8r=o("FlaxXLMRobertaForMaskedLM"),y8r=o(" (XLM-RoBERTa model)"),L8r=l(),F(XC.$$.fragment),aqe=l(),Pc=a("h2"),zC=a("a"),O0e=a("span"),F(a7.$$.fragment),x8r=l(),V0e=a("span"),$8r=o("FlaxAutoModelForMaskedLM"),nqe=l(),hr=a("div"),F(n7.$$.fragment),k8r=l(),Ic=a("p"),S8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bJ=a("a"),R8r=o("from_pretrained()"),B8r=o(" class method or the "),vJ=a("a"),P8r=o("from_config()"),I8r=o(` class
method.`),q8r=l(),s7=a("p"),N8r=o("This class cannot be instantiated directly using "),X0e=a("code"),j8r=o("__init__()"),D8r=o(" (throws an error)."),G8r=l(),Ot=a("div"),F(l7.$$.fragment),O8r=l(),z0e=a("p"),V8r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),X8r=l(),qc=a("p"),z8r=o(`Note:
Loading a model from its configuration file does `),Q0e=a("strong"),Q8r=o("not"),W8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FJ=a("a"),H8r=o("from_pretrained()"),U8r=o(" to load the model weights."),J8r=l(),F(QC.$$.fragment),Y8r=l(),Or=a("div"),F(i7.$$.fragment),K8r=l(),W0e=a("p"),Z8r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),exr=l(),un=a("p"),oxr=o("The model class to instantiate is selected based on the "),H0e=a("code"),rxr=o("model_type"),txr=o(` property of the config object (either
passed as an argument or loaded from `),U0e=a("code"),axr=o("pretrained_model_name_or_path"),nxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J0e=a("code"),sxr=o("pretrained_model_name_or_path"),lxr=o(":"),ixr=l(),Le=a("ul"),WC=a("li"),Y0e=a("strong"),dxr=o("albert"),cxr=o(" \u2014 "),TJ=a("a"),fxr=o("FlaxAlbertForMaskedLM"),mxr=o(" (ALBERT model)"),gxr=l(),HC=a("li"),K0e=a("strong"),hxr=o("bart"),pxr=o(" \u2014 "),MJ=a("a"),uxr=o("FlaxBartForConditionalGeneration"),_xr=o(" (BART model)"),bxr=l(),UC=a("li"),Z0e=a("strong"),vxr=o("bert"),Fxr=o(" \u2014 "),EJ=a("a"),Txr=o("FlaxBertForMaskedLM"),Mxr=o(" (BERT model)"),Exr=l(),JC=a("li"),e6e=a("strong"),Cxr=o("big_bird"),wxr=o(" \u2014 "),CJ=a("a"),Axr=o("FlaxBigBirdForMaskedLM"),yxr=o(" (BigBird model)"),Lxr=l(),YC=a("li"),o6e=a("strong"),xxr=o("distilbert"),$xr=o(" \u2014 "),wJ=a("a"),kxr=o("FlaxDistilBertForMaskedLM"),Sxr=o(" (DistilBERT model)"),Rxr=l(),KC=a("li"),r6e=a("strong"),Bxr=o("electra"),Pxr=o(" \u2014 "),AJ=a("a"),Ixr=o("FlaxElectraForMaskedLM"),qxr=o(" (ELECTRA model)"),Nxr=l(),ZC=a("li"),t6e=a("strong"),jxr=o("mbart"),Dxr=o(" \u2014 "),yJ=a("a"),Gxr=o("FlaxMBartForConditionalGeneration"),Oxr=o(" (mBART model)"),Vxr=l(),e5=a("li"),a6e=a("strong"),Xxr=o("roberta"),zxr=o(" \u2014 "),LJ=a("a"),Qxr=o("FlaxRobertaForMaskedLM"),Wxr=o(" (RoBERTa model)"),Hxr=l(),o5=a("li"),n6e=a("strong"),Uxr=o("roformer"),Jxr=o(" \u2014 "),xJ=a("a"),Yxr=o("FlaxRoFormerForMaskedLM"),Kxr=o(" (RoFormer model)"),Zxr=l(),r5=a("li"),s6e=a("strong"),e7r=o("xlm-roberta"),o7r=o(" \u2014 "),$J=a("a"),r7r=o("FlaxXLMRobertaForMaskedLM"),t7r=o(" (XLM-RoBERTa model)"),a7r=l(),F(t5.$$.fragment),sqe=l(),Nc=a("h2"),a5=a("a"),l6e=a("span"),F(d7.$$.fragment),n7r=l(),i6e=a("span"),s7r=o("FlaxAutoModelForSeq2SeqLM"),lqe=l(),pr=a("div"),F(c7.$$.fragment),l7r=l(),jc=a("p"),i7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kJ=a("a"),d7r=o("from_pretrained()"),c7r=o(" class method or the "),SJ=a("a"),f7r=o("from_config()"),m7r=o(` class
method.`),g7r=l(),f7=a("p"),h7r=o("This class cannot be instantiated directly using "),d6e=a("code"),p7r=o("__init__()"),u7r=o(" (throws an error)."),_7r=l(),Vt=a("div"),F(m7.$$.fragment),b7r=l(),c6e=a("p"),v7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),F7r=l(),Dc=a("p"),T7r=o(`Note:
Loading a model from its configuration file does `),f6e=a("strong"),M7r=o("not"),E7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("a"),C7r=o("from_pretrained()"),w7r=o(" to load the model weights."),A7r=l(),F(n5.$$.fragment),y7r=l(),Vr=a("div"),F(g7.$$.fragment),L7r=l(),m6e=a("p"),x7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$7r=l(),_n=a("p"),k7r=o("The model class to instantiate is selected based on the "),g6e=a("code"),S7r=o("model_type"),R7r=o(` property of the config object (either
passed as an argument or loaded from `),h6e=a("code"),B7r=o("pretrained_model_name_or_path"),P7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=a("code"),I7r=o("pretrained_model_name_or_path"),q7r=o(":"),N7r=l(),Re=a("ul"),s5=a("li"),u6e=a("strong"),j7r=o("bart"),D7r=o(" \u2014 "),BJ=a("a"),G7r=o("FlaxBartForConditionalGeneration"),O7r=o(" (BART model)"),V7r=l(),l5=a("li"),_6e=a("strong"),X7r=o("blenderbot"),z7r=o(" \u2014 "),PJ=a("a"),Q7r=o("FlaxBlenderbotForConditionalGeneration"),W7r=o(" (Blenderbot model)"),H7r=l(),i5=a("li"),b6e=a("strong"),U7r=o("blenderbot-small"),J7r=o(" \u2014 "),IJ=a("a"),Y7r=o("FlaxBlenderbotSmallForConditionalGeneration"),K7r=o(" (BlenderbotSmall model)"),Z7r=l(),d5=a("li"),v6e=a("strong"),e9r=o("encoder-decoder"),o9r=o(" \u2014 "),qJ=a("a"),r9r=o("FlaxEncoderDecoderModel"),t9r=o(" (Encoder decoder model)"),a9r=l(),c5=a("li"),F6e=a("strong"),n9r=o("marian"),s9r=o(" \u2014 "),NJ=a("a"),l9r=o("FlaxMarianMTModel"),i9r=o(" (Marian model)"),d9r=l(),f5=a("li"),T6e=a("strong"),c9r=o("mbart"),f9r=o(" \u2014 "),jJ=a("a"),m9r=o("FlaxMBartForConditionalGeneration"),g9r=o(" (mBART model)"),h9r=l(),m5=a("li"),M6e=a("strong"),p9r=o("mt5"),u9r=o(" \u2014 "),DJ=a("a"),_9r=o("FlaxMT5ForConditionalGeneration"),b9r=o(" (mT5 model)"),v9r=l(),g5=a("li"),E6e=a("strong"),F9r=o("pegasus"),T9r=o(" \u2014 "),GJ=a("a"),M9r=o("FlaxPegasusForConditionalGeneration"),E9r=o(" (Pegasus model)"),C9r=l(),h5=a("li"),C6e=a("strong"),w9r=o("t5"),A9r=o(" \u2014 "),OJ=a("a"),y9r=o("FlaxT5ForConditionalGeneration"),L9r=o(" (T5 model)"),x9r=l(),F(p5.$$.fragment),iqe=l(),Gc=a("h2"),u5=a("a"),w6e=a("span"),F(h7.$$.fragment),$9r=l(),A6e=a("span"),k9r=o("FlaxAutoModelForSequenceClassification"),dqe=l(),ur=a("div"),F(p7.$$.fragment),S9r=l(),Oc=a("p"),R9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VJ=a("a"),B9r=o("from_pretrained()"),P9r=o(" class method or the "),XJ=a("a"),I9r=o("from_config()"),q9r=o(` class
method.`),N9r=l(),u7=a("p"),j9r=o("This class cannot be instantiated directly using "),y6e=a("code"),D9r=o("__init__()"),G9r=o(" (throws an error)."),O9r=l(),Xt=a("div"),F(_7.$$.fragment),V9r=l(),L6e=a("p"),X9r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),z9r=l(),Vc=a("p"),Q9r=o(`Note:
Loading a model from its configuration file does `),x6e=a("strong"),W9r=o("not"),H9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),U9r=o("from_pretrained()"),J9r=o(" to load the model weights."),Y9r=l(),F(_5.$$.fragment),K9r=l(),Xr=a("div"),F(b7.$$.fragment),Z9r=l(),$6e=a("p"),e$r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),o$r=l(),bn=a("p"),r$r=o("The model class to instantiate is selected based on the "),k6e=a("code"),t$r=o("model_type"),a$r=o(` property of the config object (either
passed as an argument or loaded from `),S6e=a("code"),n$r=o("pretrained_model_name_or_path"),s$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R6e=a("code"),l$r=o("pretrained_model_name_or_path"),i$r=o(":"),d$r=l(),xe=a("ul"),b5=a("li"),B6e=a("strong"),c$r=o("albert"),f$r=o(" \u2014 "),QJ=a("a"),m$r=o("FlaxAlbertForSequenceClassification"),g$r=o(" (ALBERT model)"),h$r=l(),v5=a("li"),P6e=a("strong"),p$r=o("bart"),u$r=o(" \u2014 "),WJ=a("a"),_$r=o("FlaxBartForSequenceClassification"),b$r=o(" (BART model)"),v$r=l(),F5=a("li"),I6e=a("strong"),F$r=o("bert"),T$r=o(" \u2014 "),HJ=a("a"),M$r=o("FlaxBertForSequenceClassification"),E$r=o(" (BERT model)"),C$r=l(),T5=a("li"),q6e=a("strong"),w$r=o("big_bird"),A$r=o(" \u2014 "),UJ=a("a"),y$r=o("FlaxBigBirdForSequenceClassification"),L$r=o(" (BigBird model)"),x$r=l(),M5=a("li"),N6e=a("strong"),$$r=o("distilbert"),k$r=o(" \u2014 "),JJ=a("a"),S$r=o("FlaxDistilBertForSequenceClassification"),R$r=o(" (DistilBERT model)"),B$r=l(),E5=a("li"),j6e=a("strong"),P$r=o("electra"),I$r=o(" \u2014 "),YJ=a("a"),q$r=o("FlaxElectraForSequenceClassification"),N$r=o(" (ELECTRA model)"),j$r=l(),C5=a("li"),D6e=a("strong"),D$r=o("mbart"),G$r=o(" \u2014 "),KJ=a("a"),O$r=o("FlaxMBartForSequenceClassification"),V$r=o(" (mBART model)"),X$r=l(),w5=a("li"),G6e=a("strong"),z$r=o("roberta"),Q$r=o(" \u2014 "),ZJ=a("a"),W$r=o("FlaxRobertaForSequenceClassification"),H$r=o(" (RoBERTa model)"),U$r=l(),A5=a("li"),O6e=a("strong"),J$r=o("roformer"),Y$r=o(" \u2014 "),eY=a("a"),K$r=o("FlaxRoFormerForSequenceClassification"),Z$r=o(" (RoFormer model)"),ekr=l(),y5=a("li"),V6e=a("strong"),okr=o("xlm-roberta"),rkr=o(" \u2014 "),oY=a("a"),tkr=o("FlaxXLMRobertaForSequenceClassification"),akr=o(" (XLM-RoBERTa model)"),nkr=l(),F(L5.$$.fragment),cqe=l(),Xc=a("h2"),x5=a("a"),X6e=a("span"),F(v7.$$.fragment),skr=l(),z6e=a("span"),lkr=o("FlaxAutoModelForQuestionAnswering"),fqe=l(),_r=a("div"),F(F7.$$.fragment),ikr=l(),zc=a("p"),dkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rY=a("a"),ckr=o("from_pretrained()"),fkr=o(" class method or the "),tY=a("a"),mkr=o("from_config()"),gkr=o(` class
method.`),hkr=l(),T7=a("p"),pkr=o("This class cannot be instantiated directly using "),Q6e=a("code"),ukr=o("__init__()"),_kr=o(" (throws an error)."),bkr=l(),zt=a("div"),F(M7.$$.fragment),vkr=l(),W6e=a("p"),Fkr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Tkr=l(),Qc=a("p"),Mkr=o(`Note:
Loading a model from its configuration file does `),H6e=a("strong"),Ekr=o("not"),Ckr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=a("a"),wkr=o("from_pretrained()"),Akr=o(" to load the model weights."),ykr=l(),F($5.$$.fragment),Lkr=l(),zr=a("div"),F(E7.$$.fragment),xkr=l(),U6e=a("p"),$kr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),kkr=l(),vn=a("p"),Skr=o("The model class to instantiate is selected based on the "),J6e=a("code"),Rkr=o("model_type"),Bkr=o(` property of the config object (either
passed as an argument or loaded from `),Y6e=a("code"),Pkr=o("pretrained_model_name_or_path"),Ikr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K6e=a("code"),qkr=o("pretrained_model_name_or_path"),Nkr=o(":"),jkr=l(),$e=a("ul"),k5=a("li"),Z6e=a("strong"),Dkr=o("albert"),Gkr=o(" \u2014 "),nY=a("a"),Okr=o("FlaxAlbertForQuestionAnswering"),Vkr=o(" (ALBERT model)"),Xkr=l(),S5=a("li"),eTe=a("strong"),zkr=o("bart"),Qkr=o(" \u2014 "),sY=a("a"),Wkr=o("FlaxBartForQuestionAnswering"),Hkr=o(" (BART model)"),Ukr=l(),R5=a("li"),oTe=a("strong"),Jkr=o("bert"),Ykr=o(" \u2014 "),lY=a("a"),Kkr=o("FlaxBertForQuestionAnswering"),Zkr=o(" (BERT model)"),eSr=l(),B5=a("li"),rTe=a("strong"),oSr=o("big_bird"),rSr=o(" \u2014 "),iY=a("a"),tSr=o("FlaxBigBirdForQuestionAnswering"),aSr=o(" (BigBird model)"),nSr=l(),P5=a("li"),tTe=a("strong"),sSr=o("distilbert"),lSr=o(" \u2014 "),dY=a("a"),iSr=o("FlaxDistilBertForQuestionAnswering"),dSr=o(" (DistilBERT model)"),cSr=l(),I5=a("li"),aTe=a("strong"),fSr=o("electra"),mSr=o(" \u2014 "),cY=a("a"),gSr=o("FlaxElectraForQuestionAnswering"),hSr=o(" (ELECTRA model)"),pSr=l(),q5=a("li"),nTe=a("strong"),uSr=o("mbart"),_Sr=o(" \u2014 "),fY=a("a"),bSr=o("FlaxMBartForQuestionAnswering"),vSr=o(" (mBART model)"),FSr=l(),N5=a("li"),sTe=a("strong"),TSr=o("roberta"),MSr=o(" \u2014 "),mY=a("a"),ESr=o("FlaxRobertaForQuestionAnswering"),CSr=o(" (RoBERTa model)"),wSr=l(),j5=a("li"),lTe=a("strong"),ASr=o("roformer"),ySr=o(" \u2014 "),gY=a("a"),LSr=o("FlaxRoFormerForQuestionAnswering"),xSr=o(" (RoFormer model)"),$Sr=l(),D5=a("li"),iTe=a("strong"),kSr=o("xlm-roberta"),SSr=o(" \u2014 "),hY=a("a"),RSr=o("FlaxXLMRobertaForQuestionAnswering"),BSr=o(" (XLM-RoBERTa model)"),PSr=l(),F(G5.$$.fragment),mqe=l(),Wc=a("h2"),O5=a("a"),dTe=a("span"),F(C7.$$.fragment),ISr=l(),cTe=a("span"),qSr=o("FlaxAutoModelForTokenClassification"),gqe=l(),br=a("div"),F(w7.$$.fragment),NSr=l(),Hc=a("p"),jSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pY=a("a"),DSr=o("from_pretrained()"),GSr=o(" class method or the "),uY=a("a"),OSr=o("from_config()"),VSr=o(` class
method.`),XSr=l(),A7=a("p"),zSr=o("This class cannot be instantiated directly using "),fTe=a("code"),QSr=o("__init__()"),WSr=o(" (throws an error)."),HSr=l(),Qt=a("div"),F(y7.$$.fragment),USr=l(),mTe=a("p"),JSr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),YSr=l(),Uc=a("p"),KSr=o(`Note:
Loading a model from its configuration file does `),gTe=a("strong"),ZSr=o("not"),eRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Y=a("a"),oRr=o("from_pretrained()"),rRr=o(" to load the model weights."),tRr=l(),F(V5.$$.fragment),aRr=l(),Qr=a("div"),F(L7.$$.fragment),nRr=l(),hTe=a("p"),sRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lRr=l(),Fn=a("p"),iRr=o("The model class to instantiate is selected based on the "),pTe=a("code"),dRr=o("model_type"),cRr=o(` property of the config object (either
passed as an argument or loaded from `),uTe=a("code"),fRr=o("pretrained_model_name_or_path"),mRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Te=a("code"),gRr=o("pretrained_model_name_or_path"),hRr=o(":"),pRr=l(),De=a("ul"),X5=a("li"),bTe=a("strong"),uRr=o("albert"),_Rr=o(" \u2014 "),bY=a("a"),bRr=o("FlaxAlbertForTokenClassification"),vRr=o(" (ALBERT model)"),FRr=l(),z5=a("li"),vTe=a("strong"),TRr=o("bert"),MRr=o(" \u2014 "),vY=a("a"),ERr=o("FlaxBertForTokenClassification"),CRr=o(" (BERT model)"),wRr=l(),Q5=a("li"),FTe=a("strong"),ARr=o("big_bird"),yRr=o(" \u2014 "),FY=a("a"),LRr=o("FlaxBigBirdForTokenClassification"),xRr=o(" (BigBird model)"),$Rr=l(),W5=a("li"),TTe=a("strong"),kRr=o("distilbert"),SRr=o(" \u2014 "),TY=a("a"),RRr=o("FlaxDistilBertForTokenClassification"),BRr=o(" (DistilBERT model)"),PRr=l(),H5=a("li"),MTe=a("strong"),IRr=o("electra"),qRr=o(" \u2014 "),MY=a("a"),NRr=o("FlaxElectraForTokenClassification"),jRr=o(" (ELECTRA model)"),DRr=l(),U5=a("li"),ETe=a("strong"),GRr=o("roberta"),ORr=o(" \u2014 "),EY=a("a"),VRr=o("FlaxRobertaForTokenClassification"),XRr=o(" (RoBERTa model)"),zRr=l(),J5=a("li"),CTe=a("strong"),QRr=o("roformer"),WRr=o(" \u2014 "),CY=a("a"),HRr=o("FlaxRoFormerForTokenClassification"),URr=o(" (RoFormer model)"),JRr=l(),Y5=a("li"),wTe=a("strong"),YRr=o("xlm-roberta"),KRr=o(" \u2014 "),wY=a("a"),ZRr=o("FlaxXLMRobertaForTokenClassification"),eBr=o(" (XLM-RoBERTa model)"),oBr=l(),F(K5.$$.fragment),hqe=l(),Jc=a("h2"),Z5=a("a"),ATe=a("span"),F(x7.$$.fragment),rBr=l(),yTe=a("span"),tBr=o("FlaxAutoModelForMultipleChoice"),pqe=l(),vr=a("div"),F($7.$$.fragment),aBr=l(),Yc=a("p"),nBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AY=a("a"),sBr=o("from_pretrained()"),lBr=o(" class method or the "),yY=a("a"),iBr=o("from_config()"),dBr=o(` class
method.`),cBr=l(),k7=a("p"),fBr=o("This class cannot be instantiated directly using "),LTe=a("code"),mBr=o("__init__()"),gBr=o(" (throws an error)."),hBr=l(),Wt=a("div"),F(S7.$$.fragment),pBr=l(),xTe=a("p"),uBr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_Br=l(),Kc=a("p"),bBr=o(`Note:
Loading a model from its configuration file does `),$Te=a("strong"),vBr=o("not"),FBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=a("a"),TBr=o("from_pretrained()"),MBr=o(" to load the model weights."),EBr=l(),F(e3.$$.fragment),CBr=l(),Wr=a("div"),F(R7.$$.fragment),wBr=l(),kTe=a("p"),ABr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yBr=l(),Tn=a("p"),LBr=o("The model class to instantiate is selected based on the "),STe=a("code"),xBr=o("model_type"),$Br=o(` property of the config object (either
passed as an argument or loaded from `),RTe=a("code"),kBr=o("pretrained_model_name_or_path"),SBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=a("code"),RBr=o("pretrained_model_name_or_path"),BBr=o(":"),PBr=l(),Ge=a("ul"),o3=a("li"),PTe=a("strong"),IBr=o("albert"),qBr=o(" \u2014 "),xY=a("a"),NBr=o("FlaxAlbertForMultipleChoice"),jBr=o(" (ALBERT model)"),DBr=l(),r3=a("li"),ITe=a("strong"),GBr=o("bert"),OBr=o(" \u2014 "),$Y=a("a"),VBr=o("FlaxBertForMultipleChoice"),XBr=o(" (BERT model)"),zBr=l(),t3=a("li"),qTe=a("strong"),QBr=o("big_bird"),WBr=o(" \u2014 "),kY=a("a"),HBr=o("FlaxBigBirdForMultipleChoice"),UBr=o(" (BigBird model)"),JBr=l(),a3=a("li"),NTe=a("strong"),YBr=o("distilbert"),KBr=o(" \u2014 "),SY=a("a"),ZBr=o("FlaxDistilBertForMultipleChoice"),ePr=o(" (DistilBERT model)"),oPr=l(),n3=a("li"),jTe=a("strong"),rPr=o("electra"),tPr=o(" \u2014 "),RY=a("a"),aPr=o("FlaxElectraForMultipleChoice"),nPr=o(" (ELECTRA model)"),sPr=l(),s3=a("li"),DTe=a("strong"),lPr=o("roberta"),iPr=o(" \u2014 "),BY=a("a"),dPr=o("FlaxRobertaForMultipleChoice"),cPr=o(" (RoBERTa model)"),fPr=l(),l3=a("li"),GTe=a("strong"),mPr=o("roformer"),gPr=o(" \u2014 "),PY=a("a"),hPr=o("FlaxRoFormerForMultipleChoice"),pPr=o(" (RoFormer model)"),uPr=l(),i3=a("li"),OTe=a("strong"),_Pr=o("xlm-roberta"),bPr=o(" \u2014 "),IY=a("a"),vPr=o("FlaxXLMRobertaForMultipleChoice"),FPr=o(" (XLM-RoBERTa model)"),TPr=l(),F(d3.$$.fragment),uqe=l(),Zc=a("h2"),c3=a("a"),VTe=a("span"),F(B7.$$.fragment),MPr=l(),XTe=a("span"),EPr=o("FlaxAutoModelForNextSentencePrediction"),_qe=l(),Fr=a("div"),F(P7.$$.fragment),CPr=l(),ef=a("p"),wPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qY=a("a"),APr=o("from_pretrained()"),yPr=o(" class method or the "),NY=a("a"),LPr=o("from_config()"),xPr=o(` class
method.`),$Pr=l(),I7=a("p"),kPr=o("This class cannot be instantiated directly using "),zTe=a("code"),SPr=o("__init__()"),RPr=o(" (throws an error)."),BPr=l(),Ht=a("div"),F(q7.$$.fragment),PPr=l(),QTe=a("p"),IPr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qPr=l(),of=a("p"),NPr=o(`Note:
Loading a model from its configuration file does `),WTe=a("strong"),jPr=o("not"),DPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jY=a("a"),GPr=o("from_pretrained()"),OPr=o(" to load the model weights."),VPr=l(),F(f3.$$.fragment),XPr=l(),Hr=a("div"),F(N7.$$.fragment),zPr=l(),HTe=a("p"),QPr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),WPr=l(),Mn=a("p"),HPr=o("The model class to instantiate is selected based on the "),UTe=a("code"),UPr=o("model_type"),JPr=o(` property of the config object (either
passed as an argument or loaded from `),JTe=a("code"),YPr=o("pretrained_model_name_or_path"),KPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YTe=a("code"),ZPr=o("pretrained_model_name_or_path"),eIr=o(":"),oIr=l(),KTe=a("ul"),m3=a("li"),ZTe=a("strong"),rIr=o("bert"),tIr=o(" \u2014 "),DY=a("a"),aIr=o("FlaxBertForNextSentencePrediction"),nIr=o(" (BERT model)"),sIr=l(),F(g3.$$.fragment),bqe=l(),rf=a("h2"),h3=a("a"),eMe=a("span"),F(j7.$$.fragment),lIr=l(),oMe=a("span"),iIr=o("FlaxAutoModelForImageClassification"),vqe=l(),Tr=a("div"),F(D7.$$.fragment),dIr=l(),tf=a("p"),cIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),GY=a("a"),fIr=o("from_pretrained()"),mIr=o(" class method or the "),OY=a("a"),gIr=o("from_config()"),hIr=o(` class
method.`),pIr=l(),G7=a("p"),uIr=o("This class cannot be instantiated directly using "),rMe=a("code"),_Ir=o("__init__()"),bIr=o(" (throws an error)."),vIr=l(),Ut=a("div"),F(O7.$$.fragment),FIr=l(),tMe=a("p"),TIr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),MIr=l(),af=a("p"),EIr=o(`Note:
Loading a model from its configuration file does `),aMe=a("strong"),CIr=o("not"),wIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=a("a"),AIr=o("from_pretrained()"),yIr=o(" to load the model weights."),LIr=l(),F(p3.$$.fragment),xIr=l(),Ur=a("div"),F(V7.$$.fragment),$Ir=l(),nMe=a("p"),kIr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),SIr=l(),En=a("p"),RIr=o("The model class to instantiate is selected based on the "),sMe=a("code"),BIr=o("model_type"),PIr=o(` property of the config object (either
passed as an argument or loaded from `),lMe=a("code"),IIr=o("pretrained_model_name_or_path"),qIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=a("code"),NIr=o("pretrained_model_name_or_path"),jIr=o(":"),DIr=l(),X7=a("ul"),u3=a("li"),dMe=a("strong"),GIr=o("beit"),OIr=o(" \u2014 "),XY=a("a"),VIr=o("FlaxBeitForImageClassification"),XIr=o(" (BEiT model)"),zIr=l(),_3=a("li"),cMe=a("strong"),QIr=o("vit"),WIr=o(" \u2014 "),zY=a("a"),HIr=o("FlaxViTForImageClassification"),UIr=o(" (ViT model)"),JIr=l(),F(b3.$$.fragment),Fqe=l(),nf=a("h2"),v3=a("a"),fMe=a("span"),F(z7.$$.fragment),YIr=l(),mMe=a("span"),KIr=o("FlaxAutoModelForVision2Seq"),Tqe=l(),Mr=a("div"),F(Q7.$$.fragment),ZIr=l(),sf=a("p"),eqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),QY=a("a"),oqr=o("from_pretrained()"),rqr=o(" class method or the "),WY=a("a"),tqr=o("from_config()"),aqr=o(` class
method.`),nqr=l(),W7=a("p"),sqr=o("This class cannot be instantiated directly using "),gMe=a("code"),lqr=o("__init__()"),iqr=o(" (throws an error)."),dqr=l(),Jt=a("div"),F(H7.$$.fragment),cqr=l(),hMe=a("p"),fqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mqr=l(),lf=a("p"),gqr=o(`Note:
Loading a model from its configuration file does `),pMe=a("strong"),hqr=o("not"),pqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=a("a"),uqr=o("from_pretrained()"),_qr=o(" to load the model weights."),bqr=l(),F(F3.$$.fragment),vqr=l(),Jr=a("div"),F(U7.$$.fragment),Fqr=l(),uMe=a("p"),Tqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Mqr=l(),Cn=a("p"),Eqr=o("The model class to instantiate is selected based on the "),_Me=a("code"),Cqr=o("model_type"),wqr=o(` property of the config object (either
passed as an argument or loaded from `),bMe=a("code"),Aqr=o("pretrained_model_name_or_path"),yqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vMe=a("code"),Lqr=o("pretrained_model_name_or_path"),xqr=o(":"),$qr=l(),FMe=a("ul"),T3=a("li"),TMe=a("strong"),kqr=o("vision-encoder-decoder"),Sqr=o(" \u2014 "),UY=a("a"),Rqr=o("FlaxVisionEncoderDecoderModel"),Bqr=o(" (Vision Encoder decoder model)"),Pqr=l(),F(M3.$$.fragment),this.h()},l(f){const _=Kwt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var J7=s(p);m=n(J7,"A",{id:!0,class:!0,href:!0});var MMe=s(m);u=n(MMe,"SPAN",{});var EMe=s(u);T(d.$$.fragment,EMe),EMe.forEach(t),MMe.forEach(t),h=i(J7),Mo=n(J7,"SPAN",{});var CMe=s(Mo);li=r(CMe,"Auto Classes"),CMe.forEach(t),J7.forEach(t),mf=i(f),et=n(f,"P",{});var Y7=s(et);ii=r(Y7,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=n(Y7,"CODE",{});var wMe=s(di);GA=r(wMe,"from_pretrained()"),wMe.forEach(t),gf=r(Y7,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Y7.forEach(t),Ne=i(f),ze=n(f,"P",{});var wn=s(ze);ci=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var AMe=s(An);OA=r(AMe,"AutoConfig"),AMe.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var yMe=s(Ln);VA=r(yMe,"AutoModel"),yMe.forEach(t),fi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var LMe=s(xn);XA=r(LMe,"AutoTokenizer"),LMe.forEach(t),mi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),hf=i(f),T(Ma.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var K7=s(Ae);i$=r(K7,"will create a model that is an instance of "),gi=n(K7,"A",{href:!0});var xMe=s(gi);d$=r(xMe,"BertModel"),xMe.forEach(t),c$=r(K7,"."),K7.forEach(t),Eo=i(f),Ea=n(f,"P",{});var Z7=s(Ea);f$=r(Z7,"There is one class of "),pf=n(Z7,"CODE",{});var $Me=s(pf);m$=r($Me,"AutoModel"),$Me.forEach(t),$je=r(Z7," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Z7.forEach(t),vPe=i(f),hi=n(f,"H2",{class:!0});var e9=s(hi);uf=n(e9,"A",{id:!0,class:!0,href:!0});var kMe=s(uf);VZ=n(kMe,"SPAN",{});var SMe=s(VZ);T(zA.$$.fragment,SMe),SMe.forEach(t),kMe.forEach(t),kje=i(e9),XZ=n(e9,"SPAN",{});var RMe=s(XZ);Sje=r(RMe,"Extending the Auto Classes"),RMe.forEach(t),e9.forEach(t),FPe=i(f),$n=n(f,"P",{});var df=s($n);Rje=r(df,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),zZ=n(df,"CODE",{});var BMe=s(zZ);Bje=r(BMe,"NewModel"),BMe.forEach(t),Pje=r(df,", make sure you have a "),QZ=n(df,"CODE",{});var PMe=s(QZ);Ije=r(PMe,"NewModelConfig"),PMe.forEach(t),qje=r(df,` then you can add those to the auto
classes like this:`),df.forEach(t),TPe=i(f),T(QA.$$.fragment,f),MPe=i(f),g$=n(f,"P",{});var IMe=s(g$);Nje=r(IMe,"You will then be able to use the auto classes like you would usually do!"),IMe.forEach(t),EPe=i(f),T(_f.$$.fragment,f),CPe=i(f),pi=n(f,"H2",{class:!0});var o9=s(pi);bf=n(o9,"A",{id:!0,class:!0,href:!0});var qMe=s(bf);WZ=n(qMe,"SPAN",{});var NMe=s(WZ);T(WA.$$.fragment,NMe),NMe.forEach(t),qMe.forEach(t),jje=i(o9),HZ=n(o9,"SPAN",{});var jMe=s(HZ);Dje=r(jMe,"AutoConfig"),jMe.forEach(t),o9.forEach(t),wPe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(HA.$$.fragment,Kr),Gje=i(Kr),UA=n(Kr,"P",{});var r9=s(UA);Oje=r(r9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),h$=n(r9,"A",{href:!0});var DMe=s(h$);Vje=r(DMe,"from_pretrained()"),DMe.forEach(t),Xje=r(r9," class method."),r9.forEach(t),zje=i(Kr),JA=n(Kr,"P",{});var t9=s(JA);Qje=r(t9,"This class cannot be instantiated directly using "),UZ=n(t9,"CODE",{});var GMe=s(UZ);Wje=r(GMe,"__init__()"),GMe.forEach(t),Hje=r(t9," (throws an error)."),t9.forEach(t),Uje=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(YA.$$.fragment,Zr),Jje=i(Zr),JZ=n(Zr,"P",{});var OMe=s(JZ);Yje=r(OMe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),OMe.forEach(t),Kje=i(Zr),ui=n(Zr,"P",{});var cf=s(ui);Zje=r(cf,"The configuration class to instantiate is selected based on the "),YZ=n(cf,"CODE",{});var VMe=s(YZ);eDe=r(VMe,"model_type"),VMe.forEach(t),oDe=r(cf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),KZ=n(cf,"CODE",{});var XMe=s(KZ);rDe=r(XMe,"pretrained_model_name_or_path"),XMe.forEach(t),tDe=r(cf,":"),cf.forEach(t),aDe=i(Zr),y=n(Zr,"UL",{});var L=s(y);vf=n(L,"LI",{});var E3=s(vf);ZZ=n(E3,"STRONG",{});var zMe=s(ZZ);nDe=r(zMe,"albert"),zMe.forEach(t),sDe=r(E3," \u2014 "),p$=n(E3,"A",{href:!0});var QMe=s(p$);lDe=r(QMe,"AlbertConfig"),QMe.forEach(t),iDe=r(E3," (ALBERT model)"),E3.forEach(t),dDe=i(L),Ff=n(L,"LI",{});var C3=s(Ff);eee=n(C3,"STRONG",{});var WMe=s(eee);cDe=r(WMe,"bart"),WMe.forEach(t),fDe=r(C3," \u2014 "),u$=n(C3,"A",{href:!0});var HMe=s(u$);mDe=r(HMe,"BartConfig"),HMe.forEach(t),gDe=r(C3," (BART model)"),C3.forEach(t),hDe=i(L),Tf=n(L,"LI",{});var w3=s(Tf);oee=n(w3,"STRONG",{});var UMe=s(oee);pDe=r(UMe,"beit"),UMe.forEach(t),uDe=r(w3," \u2014 "),_$=n(w3,"A",{href:!0});var JMe=s(_$);_De=r(JMe,"BeitConfig"),JMe.forEach(t),bDe=r(w3," (BEiT model)"),w3.forEach(t),vDe=i(L),Mf=n(L,"LI",{});var A3=s(Mf);ree=n(A3,"STRONG",{});var YMe=s(ree);FDe=r(YMe,"bert"),YMe.forEach(t),TDe=r(A3," \u2014 "),b$=n(A3,"A",{href:!0});var KMe=s(b$);MDe=r(KMe,"BertConfig"),KMe.forEach(t),EDe=r(A3," (BERT model)"),A3.forEach(t),CDe=i(L),Ef=n(L,"LI",{});var y3=s(Ef);tee=n(y3,"STRONG",{});var ZMe=s(tee);wDe=r(ZMe,"bert-generation"),ZMe.forEach(t),ADe=r(y3," \u2014 "),v$=n(y3,"A",{href:!0});var eEe=s(v$);yDe=r(eEe,"BertGenerationConfig"),eEe.forEach(t),LDe=r(y3," (Bert Generation model)"),y3.forEach(t),xDe=i(L),Cf=n(L,"LI",{});var L3=s(Cf);aee=n(L3,"STRONG",{});var oEe=s(aee);$De=r(oEe,"big_bird"),oEe.forEach(t),kDe=r(L3," \u2014 "),F$=n(L3,"A",{href:!0});var rEe=s(F$);SDe=r(rEe,"BigBirdConfig"),rEe.forEach(t),RDe=r(L3," (BigBird model)"),L3.forEach(t),BDe=i(L),wf=n(L,"LI",{});var x3=s(wf);nee=n(x3,"STRONG",{});var tEe=s(nee);PDe=r(tEe,"bigbird_pegasus"),tEe.forEach(t),IDe=r(x3," \u2014 "),T$=n(x3,"A",{href:!0});var aEe=s(T$);qDe=r(aEe,"BigBirdPegasusConfig"),aEe.forEach(t),NDe=r(x3," (BigBirdPegasus model)"),x3.forEach(t),jDe=i(L),Af=n(L,"LI",{});var $3=s(Af);see=n($3,"STRONG",{});var nEe=s(see);DDe=r(nEe,"blenderbot"),nEe.forEach(t),GDe=r($3," \u2014 "),M$=n($3,"A",{href:!0});var sEe=s(M$);ODe=r(sEe,"BlenderbotConfig"),sEe.forEach(t),VDe=r($3," (Blenderbot model)"),$3.forEach(t),XDe=i(L),yf=n(L,"LI",{});var k3=s(yf);lee=n(k3,"STRONG",{});var lEe=s(lee);zDe=r(lEe,"blenderbot-small"),lEe.forEach(t),QDe=r(k3," \u2014 "),E$=n(k3,"A",{href:!0});var iEe=s(E$);WDe=r(iEe,"BlenderbotSmallConfig"),iEe.forEach(t),HDe=r(k3," (BlenderbotSmall model)"),k3.forEach(t),UDe=i(L),Lf=n(L,"LI",{});var S3=s(Lf);iee=n(S3,"STRONG",{});var dEe=s(iee);JDe=r(dEe,"camembert"),dEe.forEach(t),YDe=r(S3," \u2014 "),C$=n(S3,"A",{href:!0});var cEe=s(C$);KDe=r(cEe,"CamembertConfig"),cEe.forEach(t),ZDe=r(S3," (CamemBERT model)"),S3.forEach(t),eGe=i(L),xf=n(L,"LI",{});var R3=s(xf);dee=n(R3,"STRONG",{});var fEe=s(dee);oGe=r(fEe,"canine"),fEe.forEach(t),rGe=r(R3," \u2014 "),w$=n(R3,"A",{href:!0});var mEe=s(w$);tGe=r(mEe,"CanineConfig"),mEe.forEach(t),aGe=r(R3," (Canine model)"),R3.forEach(t),nGe=i(L),$f=n(L,"LI",{});var B3=s($f);cee=n(B3,"STRONG",{});var gEe=s(cee);sGe=r(gEe,"clip"),gEe.forEach(t),lGe=r(B3," \u2014 "),A$=n(B3,"A",{href:!0});var hEe=s(A$);iGe=r(hEe,"CLIPConfig"),hEe.forEach(t),dGe=r(B3," (CLIP model)"),B3.forEach(t),cGe=i(L),kf=n(L,"LI",{});var P3=s(kf);fee=n(P3,"STRONG",{});var pEe=s(fee);fGe=r(pEe,"convbert"),pEe.forEach(t),mGe=r(P3," \u2014 "),y$=n(P3,"A",{href:!0});var uEe=s(y$);gGe=r(uEe,"ConvBertConfig"),uEe.forEach(t),hGe=r(P3," (ConvBERT model)"),P3.forEach(t),pGe=i(L),Sf=n(L,"LI",{});var I3=s(Sf);mee=n(I3,"STRONG",{});var _Ee=s(mee);uGe=r(_Ee,"convnext"),_Ee.forEach(t),_Ge=r(I3," \u2014 "),L$=n(I3,"A",{href:!0});var bEe=s(L$);bGe=r(bEe,"ConvNextConfig"),bEe.forEach(t),vGe=r(I3," (ConvNext model)"),I3.forEach(t),FGe=i(L),Rf=n(L,"LI",{});var q3=s(Rf);gee=n(q3,"STRONG",{});var vEe=s(gee);TGe=r(vEe,"ctrl"),vEe.forEach(t),MGe=r(q3," \u2014 "),x$=n(q3,"A",{href:!0});var FEe=s(x$);EGe=r(FEe,"CTRLConfig"),FEe.forEach(t),CGe=r(q3," (CTRL model)"),q3.forEach(t),wGe=i(L),Bf=n(L,"LI",{});var N3=s(Bf);hee=n(N3,"STRONG",{});var TEe=s(hee);AGe=r(TEe,"data2vec-audio"),TEe.forEach(t),yGe=r(N3," \u2014 "),$$=n(N3,"A",{href:!0});var MEe=s($$);LGe=r(MEe,"Data2VecAudioConfig"),MEe.forEach(t),xGe=r(N3," (Data2VecAudio model)"),N3.forEach(t),$Ge=i(L),Pf=n(L,"LI",{});var j3=s(Pf);pee=n(j3,"STRONG",{});var EEe=s(pee);kGe=r(EEe,"data2vec-text"),EEe.forEach(t),SGe=r(j3," \u2014 "),k$=n(j3,"A",{href:!0});var CEe=s(k$);RGe=r(CEe,"Data2VecTextConfig"),CEe.forEach(t),BGe=r(j3," (Data2VecText model)"),j3.forEach(t),PGe=i(L),If=n(L,"LI",{});var D3=s(If);uee=n(D3,"STRONG",{});var wEe=s(uee);IGe=r(wEe,"data2vec-vision"),wEe.forEach(t),qGe=r(D3," \u2014 "),S$=n(D3,"A",{href:!0});var AEe=s(S$);NGe=r(AEe,"Data2VecVisionConfig"),AEe.forEach(t),jGe=r(D3," (Data2VecVision model)"),D3.forEach(t),DGe=i(L),qf=n(L,"LI",{});var G3=s(qf);_ee=n(G3,"STRONG",{});var yEe=s(_ee);GGe=r(yEe,"deberta"),yEe.forEach(t),OGe=r(G3," \u2014 "),R$=n(G3,"A",{href:!0});var LEe=s(R$);VGe=r(LEe,"DebertaConfig"),LEe.forEach(t),XGe=r(G3," (DeBERTa model)"),G3.forEach(t),zGe=i(L),Nf=n(L,"LI",{});var O3=s(Nf);bee=n(O3,"STRONG",{});var xEe=s(bee);QGe=r(xEe,"deberta-v2"),xEe.forEach(t),WGe=r(O3," \u2014 "),B$=n(O3,"A",{href:!0});var $Ee=s(B$);HGe=r($Ee,"DebertaV2Config"),$Ee.forEach(t),UGe=r(O3," (DeBERTa-v2 model)"),O3.forEach(t),JGe=i(L),jf=n(L,"LI",{});var V3=s(jf);vee=n(V3,"STRONG",{});var kEe=s(vee);YGe=r(kEe,"decision_transformer"),kEe.forEach(t),KGe=r(V3," \u2014 "),P$=n(V3,"A",{href:!0});var SEe=s(P$);ZGe=r(SEe,"DecisionTransformerConfig"),SEe.forEach(t),eOe=r(V3," (Decision Transformer model)"),V3.forEach(t),oOe=i(L),Df=n(L,"LI",{});var X3=s(Df);Fee=n(X3,"STRONG",{});var REe=s(Fee);rOe=r(REe,"deit"),REe.forEach(t),tOe=r(X3," \u2014 "),I$=n(X3,"A",{href:!0});var BEe=s(I$);aOe=r(BEe,"DeiTConfig"),BEe.forEach(t),nOe=r(X3," (DeiT model)"),X3.forEach(t),sOe=i(L),Gf=n(L,"LI",{});var z3=s(Gf);Tee=n(z3,"STRONG",{});var PEe=s(Tee);lOe=r(PEe,"detr"),PEe.forEach(t),iOe=r(z3," \u2014 "),q$=n(z3,"A",{href:!0});var qqr=s(q$);dOe=r(qqr,"DetrConfig"),qqr.forEach(t),cOe=r(z3," (DETR model)"),z3.forEach(t),fOe=i(L),Of=n(L,"LI",{});var IEe=s(Of);Mee=n(IEe,"STRONG",{});var Nqr=s(Mee);mOe=r(Nqr,"distilbert"),Nqr.forEach(t),gOe=r(IEe," \u2014 "),N$=n(IEe,"A",{href:!0});var jqr=s(N$);hOe=r(jqr,"DistilBertConfig"),jqr.forEach(t),pOe=r(IEe," (DistilBERT model)"),IEe.forEach(t),uOe=i(L),Vf=n(L,"LI",{});var qEe=s(Vf);Eee=n(qEe,"STRONG",{});var Dqr=s(Eee);_Oe=r(Dqr,"dpr"),Dqr.forEach(t),bOe=r(qEe," \u2014 "),j$=n(qEe,"A",{href:!0});var Gqr=s(j$);vOe=r(Gqr,"DPRConfig"),Gqr.forEach(t),FOe=r(qEe," (DPR model)"),qEe.forEach(t),TOe=i(L),Xf=n(L,"LI",{});var NEe=s(Xf);Cee=n(NEe,"STRONG",{});var Oqr=s(Cee);MOe=r(Oqr,"dpt"),Oqr.forEach(t),EOe=r(NEe," \u2014 "),D$=n(NEe,"A",{href:!0});var Vqr=s(D$);COe=r(Vqr,"DPTConfig"),Vqr.forEach(t),wOe=r(NEe," (DPT model)"),NEe.forEach(t),AOe=i(L),zf=n(L,"LI",{});var jEe=s(zf);wee=n(jEe,"STRONG",{});var Xqr=s(wee);yOe=r(Xqr,"electra"),Xqr.forEach(t),LOe=r(jEe," \u2014 "),G$=n(jEe,"A",{href:!0});var zqr=s(G$);xOe=r(zqr,"ElectraConfig"),zqr.forEach(t),$Oe=r(jEe," (ELECTRA model)"),jEe.forEach(t),kOe=i(L),Qf=n(L,"LI",{});var DEe=s(Qf);Aee=n(DEe,"STRONG",{});var Qqr=s(Aee);SOe=r(Qqr,"encoder-decoder"),Qqr.forEach(t),ROe=r(DEe," \u2014 "),O$=n(DEe,"A",{href:!0});var Wqr=s(O$);BOe=r(Wqr,"EncoderDecoderConfig"),Wqr.forEach(t),POe=r(DEe," (Encoder decoder model)"),DEe.forEach(t),IOe=i(L),Wf=n(L,"LI",{});var GEe=s(Wf);yee=n(GEe,"STRONG",{});var Hqr=s(yee);qOe=r(Hqr,"flaubert"),Hqr.forEach(t),NOe=r(GEe," \u2014 "),V$=n(GEe,"A",{href:!0});var Uqr=s(V$);jOe=r(Uqr,"FlaubertConfig"),Uqr.forEach(t),DOe=r(GEe," (FlauBERT model)"),GEe.forEach(t),GOe=i(L),Hf=n(L,"LI",{});var OEe=s(Hf);Lee=n(OEe,"STRONG",{});var Jqr=s(Lee);OOe=r(Jqr,"fnet"),Jqr.forEach(t),VOe=r(OEe," \u2014 "),X$=n(OEe,"A",{href:!0});var Yqr=s(X$);XOe=r(Yqr,"FNetConfig"),Yqr.forEach(t),zOe=r(OEe," (FNet model)"),OEe.forEach(t),QOe=i(L),Uf=n(L,"LI",{});var VEe=s(Uf);xee=n(VEe,"STRONG",{});var Kqr=s(xee);WOe=r(Kqr,"fsmt"),Kqr.forEach(t),HOe=r(VEe," \u2014 "),z$=n(VEe,"A",{href:!0});var Zqr=s(z$);UOe=r(Zqr,"FSMTConfig"),Zqr.forEach(t),JOe=r(VEe," (FairSeq Machine-Translation model)"),VEe.forEach(t),YOe=i(L),Jf=n(L,"LI",{});var XEe=s(Jf);$ee=n(XEe,"STRONG",{});var eNr=s($ee);KOe=r(eNr,"funnel"),eNr.forEach(t),ZOe=r(XEe," \u2014 "),Q$=n(XEe,"A",{href:!0});var oNr=s(Q$);eVe=r(oNr,"FunnelConfig"),oNr.forEach(t),oVe=r(XEe," (Funnel Transformer model)"),XEe.forEach(t),rVe=i(L),Yf=n(L,"LI",{});var zEe=s(Yf);kee=n(zEe,"STRONG",{});var rNr=s(kee);tVe=r(rNr,"glpn"),rNr.forEach(t),aVe=r(zEe," \u2014 "),W$=n(zEe,"A",{href:!0});var tNr=s(W$);nVe=r(tNr,"GLPNConfig"),tNr.forEach(t),sVe=r(zEe," (GLPN model)"),zEe.forEach(t),lVe=i(L),Kf=n(L,"LI",{});var QEe=s(Kf);See=n(QEe,"STRONG",{});var aNr=s(See);iVe=r(aNr,"gpt2"),aNr.forEach(t),dVe=r(QEe," \u2014 "),H$=n(QEe,"A",{href:!0});var nNr=s(H$);cVe=r(nNr,"GPT2Config"),nNr.forEach(t),fVe=r(QEe," (OpenAI GPT-2 model)"),QEe.forEach(t),mVe=i(L),Zf=n(L,"LI",{});var WEe=s(Zf);Ree=n(WEe,"STRONG",{});var sNr=s(Ree);gVe=r(sNr,"gpt_neo"),sNr.forEach(t),hVe=r(WEe," \u2014 "),U$=n(WEe,"A",{href:!0});var lNr=s(U$);pVe=r(lNr,"GPTNeoConfig"),lNr.forEach(t),uVe=r(WEe," (GPT Neo model)"),WEe.forEach(t),_Ve=i(L),em=n(L,"LI",{});var HEe=s(em);Bee=n(HEe,"STRONG",{});var iNr=s(Bee);bVe=r(iNr,"gptj"),iNr.forEach(t),vVe=r(HEe," \u2014 "),J$=n(HEe,"A",{href:!0});var dNr=s(J$);FVe=r(dNr,"GPTJConfig"),dNr.forEach(t),TVe=r(HEe," (GPT-J model)"),HEe.forEach(t),MVe=i(L),om=n(L,"LI",{});var UEe=s(om);Pee=n(UEe,"STRONG",{});var cNr=s(Pee);EVe=r(cNr,"hubert"),cNr.forEach(t),CVe=r(UEe," \u2014 "),Y$=n(UEe,"A",{href:!0});var fNr=s(Y$);wVe=r(fNr,"HubertConfig"),fNr.forEach(t),AVe=r(UEe," (Hubert model)"),UEe.forEach(t),yVe=i(L),rm=n(L,"LI",{});var JEe=s(rm);Iee=n(JEe,"STRONG",{});var mNr=s(Iee);LVe=r(mNr,"ibert"),mNr.forEach(t),xVe=r(JEe," \u2014 "),K$=n(JEe,"A",{href:!0});var gNr=s(K$);$Ve=r(gNr,"IBertConfig"),gNr.forEach(t),kVe=r(JEe," (I-BERT model)"),JEe.forEach(t),SVe=i(L),tm=n(L,"LI",{});var YEe=s(tm);qee=n(YEe,"STRONG",{});var hNr=s(qee);RVe=r(hNr,"imagegpt"),hNr.forEach(t),BVe=r(YEe," \u2014 "),Z$=n(YEe,"A",{href:!0});var pNr=s(Z$);PVe=r(pNr,"ImageGPTConfig"),pNr.forEach(t),IVe=r(YEe," (ImageGPT model)"),YEe.forEach(t),qVe=i(L),am=n(L,"LI",{});var KEe=s(am);Nee=n(KEe,"STRONG",{});var uNr=s(Nee);NVe=r(uNr,"layoutlm"),uNr.forEach(t),jVe=r(KEe," \u2014 "),ek=n(KEe,"A",{href:!0});var _Nr=s(ek);DVe=r(_Nr,"LayoutLMConfig"),_Nr.forEach(t),GVe=r(KEe," (LayoutLM model)"),KEe.forEach(t),OVe=i(L),nm=n(L,"LI",{});var ZEe=s(nm);jee=n(ZEe,"STRONG",{});var bNr=s(jee);VVe=r(bNr,"layoutlmv2"),bNr.forEach(t),XVe=r(ZEe," \u2014 "),ok=n(ZEe,"A",{href:!0});var vNr=s(ok);zVe=r(vNr,"LayoutLMv2Config"),vNr.forEach(t),QVe=r(ZEe," (LayoutLMv2 model)"),ZEe.forEach(t),WVe=i(L),sm=n(L,"LI",{});var eCe=s(sm);Dee=n(eCe,"STRONG",{});var FNr=s(Dee);HVe=r(FNr,"led"),FNr.forEach(t),UVe=r(eCe," \u2014 "),rk=n(eCe,"A",{href:!0});var TNr=s(rk);JVe=r(TNr,"LEDConfig"),TNr.forEach(t),YVe=r(eCe," (LED model)"),eCe.forEach(t),KVe=i(L),lm=n(L,"LI",{});var oCe=s(lm);Gee=n(oCe,"STRONG",{});var MNr=s(Gee);ZVe=r(MNr,"longformer"),MNr.forEach(t),eXe=r(oCe," \u2014 "),tk=n(oCe,"A",{href:!0});var ENr=s(tk);oXe=r(ENr,"LongformerConfig"),ENr.forEach(t),rXe=r(oCe," (Longformer model)"),oCe.forEach(t),tXe=i(L),im=n(L,"LI",{});var rCe=s(im);Oee=n(rCe,"STRONG",{});var CNr=s(Oee);aXe=r(CNr,"luke"),CNr.forEach(t),nXe=r(rCe," \u2014 "),ak=n(rCe,"A",{href:!0});var wNr=s(ak);sXe=r(wNr,"LukeConfig"),wNr.forEach(t),lXe=r(rCe," (LUKE model)"),rCe.forEach(t),iXe=i(L),dm=n(L,"LI",{});var tCe=s(dm);Vee=n(tCe,"STRONG",{});var ANr=s(Vee);dXe=r(ANr,"lxmert"),ANr.forEach(t),cXe=r(tCe," \u2014 "),nk=n(tCe,"A",{href:!0});var yNr=s(nk);fXe=r(yNr,"LxmertConfig"),yNr.forEach(t),mXe=r(tCe," (LXMERT model)"),tCe.forEach(t),gXe=i(L),cm=n(L,"LI",{});var aCe=s(cm);Xee=n(aCe,"STRONG",{});var LNr=s(Xee);hXe=r(LNr,"m2m_100"),LNr.forEach(t),pXe=r(aCe," \u2014 "),sk=n(aCe,"A",{href:!0});var xNr=s(sk);uXe=r(xNr,"M2M100Config"),xNr.forEach(t),_Xe=r(aCe," (M2M100 model)"),aCe.forEach(t),bXe=i(L),fm=n(L,"LI",{});var nCe=s(fm);zee=n(nCe,"STRONG",{});var $Nr=s(zee);vXe=r($Nr,"marian"),$Nr.forEach(t),FXe=r(nCe," \u2014 "),lk=n(nCe,"A",{href:!0});var kNr=s(lk);TXe=r(kNr,"MarianConfig"),kNr.forEach(t),MXe=r(nCe," (Marian model)"),nCe.forEach(t),EXe=i(L),mm=n(L,"LI",{});var sCe=s(mm);Qee=n(sCe,"STRONG",{});var SNr=s(Qee);CXe=r(SNr,"maskformer"),SNr.forEach(t),wXe=r(sCe," \u2014 "),ik=n(sCe,"A",{href:!0});var RNr=s(ik);AXe=r(RNr,"MaskFormerConfig"),RNr.forEach(t),yXe=r(sCe," (MaskFormer model)"),sCe.forEach(t),LXe=i(L),gm=n(L,"LI",{});var lCe=s(gm);Wee=n(lCe,"STRONG",{});var BNr=s(Wee);xXe=r(BNr,"mbart"),BNr.forEach(t),$Xe=r(lCe," \u2014 "),dk=n(lCe,"A",{href:!0});var PNr=s(dk);kXe=r(PNr,"MBartConfig"),PNr.forEach(t),SXe=r(lCe," (mBART model)"),lCe.forEach(t),RXe=i(L),hm=n(L,"LI",{});var iCe=s(hm);Hee=n(iCe,"STRONG",{});var INr=s(Hee);BXe=r(INr,"mctct"),INr.forEach(t),PXe=r(iCe," \u2014 "),ck=n(iCe,"A",{href:!0});var qNr=s(ck);IXe=r(qNr,"MCTCTConfig"),qNr.forEach(t),qXe=r(iCe," (MCTCT model)"),iCe.forEach(t),NXe=i(L),pm=n(L,"LI",{});var dCe=s(pm);Uee=n(dCe,"STRONG",{});var NNr=s(Uee);jXe=r(NNr,"megatron-bert"),NNr.forEach(t),DXe=r(dCe," \u2014 "),fk=n(dCe,"A",{href:!0});var jNr=s(fk);GXe=r(jNr,"MegatronBertConfig"),jNr.forEach(t),OXe=r(dCe," (MegatronBert model)"),dCe.forEach(t),VXe=i(L),um=n(L,"LI",{});var cCe=s(um);Jee=n(cCe,"STRONG",{});var DNr=s(Jee);XXe=r(DNr,"mobilebert"),DNr.forEach(t),zXe=r(cCe," \u2014 "),mk=n(cCe,"A",{href:!0});var GNr=s(mk);QXe=r(GNr,"MobileBertConfig"),GNr.forEach(t),WXe=r(cCe," (MobileBERT model)"),cCe.forEach(t),HXe=i(L),_m=n(L,"LI",{});var fCe=s(_m);Yee=n(fCe,"STRONG",{});var ONr=s(Yee);UXe=r(ONr,"mpnet"),ONr.forEach(t),JXe=r(fCe," \u2014 "),gk=n(fCe,"A",{href:!0});var VNr=s(gk);YXe=r(VNr,"MPNetConfig"),VNr.forEach(t),KXe=r(fCe," (MPNet model)"),fCe.forEach(t),ZXe=i(L),bm=n(L,"LI",{});var mCe=s(bm);Kee=n(mCe,"STRONG",{});var XNr=s(Kee);eze=r(XNr,"mt5"),XNr.forEach(t),oze=r(mCe," \u2014 "),hk=n(mCe,"A",{href:!0});var zNr=s(hk);rze=r(zNr,"MT5Config"),zNr.forEach(t),tze=r(mCe," (mT5 model)"),mCe.forEach(t),aze=i(L),vm=n(L,"LI",{});var gCe=s(vm);Zee=n(gCe,"STRONG",{});var QNr=s(Zee);nze=r(QNr,"nystromformer"),QNr.forEach(t),sze=r(gCe," \u2014 "),pk=n(gCe,"A",{href:!0});var WNr=s(pk);lze=r(WNr,"NystromformerConfig"),WNr.forEach(t),ize=r(gCe," (Nystromformer model)"),gCe.forEach(t),dze=i(L),Fm=n(L,"LI",{});var hCe=s(Fm);eoe=n(hCe,"STRONG",{});var HNr=s(eoe);cze=r(HNr,"openai-gpt"),HNr.forEach(t),fze=r(hCe," \u2014 "),uk=n(hCe,"A",{href:!0});var UNr=s(uk);mze=r(UNr,"OpenAIGPTConfig"),UNr.forEach(t),gze=r(hCe," (OpenAI GPT model)"),hCe.forEach(t),hze=i(L),Tm=n(L,"LI",{});var pCe=s(Tm);ooe=n(pCe,"STRONG",{});var JNr=s(ooe);pze=r(JNr,"pegasus"),JNr.forEach(t),uze=r(pCe," \u2014 "),_k=n(pCe,"A",{href:!0});var YNr=s(_k);_ze=r(YNr,"PegasusConfig"),YNr.forEach(t),bze=r(pCe," (Pegasus model)"),pCe.forEach(t),vze=i(L),Mm=n(L,"LI",{});var uCe=s(Mm);roe=n(uCe,"STRONG",{});var KNr=s(roe);Fze=r(KNr,"perceiver"),KNr.forEach(t),Tze=r(uCe," \u2014 "),bk=n(uCe,"A",{href:!0});var ZNr=s(bk);Mze=r(ZNr,"PerceiverConfig"),ZNr.forEach(t),Eze=r(uCe," (Perceiver model)"),uCe.forEach(t),Cze=i(L),Em=n(L,"LI",{});var _Ce=s(Em);toe=n(_Ce,"STRONG",{});var ejr=s(toe);wze=r(ejr,"plbart"),ejr.forEach(t),Aze=r(_Ce," \u2014 "),vk=n(_Ce,"A",{href:!0});var ojr=s(vk);yze=r(ojr,"PLBartConfig"),ojr.forEach(t),Lze=r(_Ce," (PLBart model)"),_Ce.forEach(t),xze=i(L),Cm=n(L,"LI",{});var bCe=s(Cm);aoe=n(bCe,"STRONG",{});var rjr=s(aoe);$ze=r(rjr,"poolformer"),rjr.forEach(t),kze=r(bCe," \u2014 "),Fk=n(bCe,"A",{href:!0});var tjr=s(Fk);Sze=r(tjr,"PoolFormerConfig"),tjr.forEach(t),Rze=r(bCe," (PoolFormer model)"),bCe.forEach(t),Bze=i(L),wm=n(L,"LI",{});var vCe=s(wm);noe=n(vCe,"STRONG",{});var ajr=s(noe);Pze=r(ajr,"prophetnet"),ajr.forEach(t),Ize=r(vCe," \u2014 "),Tk=n(vCe,"A",{href:!0});var njr=s(Tk);qze=r(njr,"ProphetNetConfig"),njr.forEach(t),Nze=r(vCe," (ProphetNet model)"),vCe.forEach(t),jze=i(L),Am=n(L,"LI",{});var FCe=s(Am);soe=n(FCe,"STRONG",{});var sjr=s(soe);Dze=r(sjr,"qdqbert"),sjr.forEach(t),Gze=r(FCe," \u2014 "),Mk=n(FCe,"A",{href:!0});var ljr=s(Mk);Oze=r(ljr,"QDQBertConfig"),ljr.forEach(t),Vze=r(FCe," (QDQBert model)"),FCe.forEach(t),Xze=i(L),ym=n(L,"LI",{});var TCe=s(ym);loe=n(TCe,"STRONG",{});var ijr=s(loe);zze=r(ijr,"rag"),ijr.forEach(t),Qze=r(TCe," \u2014 "),Ek=n(TCe,"A",{href:!0});var djr=s(Ek);Wze=r(djr,"RagConfig"),djr.forEach(t),Hze=r(TCe," (RAG model)"),TCe.forEach(t),Uze=i(L),Lm=n(L,"LI",{});var MCe=s(Lm);ioe=n(MCe,"STRONG",{});var cjr=s(ioe);Jze=r(cjr,"realm"),cjr.forEach(t),Yze=r(MCe," \u2014 "),Ck=n(MCe,"A",{href:!0});var fjr=s(Ck);Kze=r(fjr,"RealmConfig"),fjr.forEach(t),Zze=r(MCe," (Realm model)"),MCe.forEach(t),eQe=i(L),xm=n(L,"LI",{});var ECe=s(xm);doe=n(ECe,"STRONG",{});var mjr=s(doe);oQe=r(mjr,"reformer"),mjr.forEach(t),rQe=r(ECe," \u2014 "),wk=n(ECe,"A",{href:!0});var gjr=s(wk);tQe=r(gjr,"ReformerConfig"),gjr.forEach(t),aQe=r(ECe," (Reformer model)"),ECe.forEach(t),nQe=i(L),$m=n(L,"LI",{});var CCe=s($m);coe=n(CCe,"STRONG",{});var hjr=s(coe);sQe=r(hjr,"regnet"),hjr.forEach(t),lQe=r(CCe," \u2014 "),Ak=n(CCe,"A",{href:!0});var pjr=s(Ak);iQe=r(pjr,"RegNetConfig"),pjr.forEach(t),dQe=r(CCe," (RegNet model)"),CCe.forEach(t),cQe=i(L),km=n(L,"LI",{});var wCe=s(km);foe=n(wCe,"STRONG",{});var ujr=s(foe);fQe=r(ujr,"rembert"),ujr.forEach(t),mQe=r(wCe," \u2014 "),yk=n(wCe,"A",{href:!0});var _jr=s(yk);gQe=r(_jr,"RemBertConfig"),_jr.forEach(t),hQe=r(wCe," (RemBERT model)"),wCe.forEach(t),pQe=i(L),Sm=n(L,"LI",{});var ACe=s(Sm);moe=n(ACe,"STRONG",{});var bjr=s(moe);uQe=r(bjr,"resnet"),bjr.forEach(t),_Qe=r(ACe," \u2014 "),Lk=n(ACe,"A",{href:!0});var vjr=s(Lk);bQe=r(vjr,"ResNetConfig"),vjr.forEach(t),vQe=r(ACe," (ResNet model)"),ACe.forEach(t),FQe=i(L),Rm=n(L,"LI",{});var yCe=s(Rm);goe=n(yCe,"STRONG",{});var Fjr=s(goe);TQe=r(Fjr,"retribert"),Fjr.forEach(t),MQe=r(yCe," \u2014 "),xk=n(yCe,"A",{href:!0});var Tjr=s(xk);EQe=r(Tjr,"RetriBertConfig"),Tjr.forEach(t),CQe=r(yCe," (RetriBERT model)"),yCe.forEach(t),wQe=i(L),Bm=n(L,"LI",{});var LCe=s(Bm);hoe=n(LCe,"STRONG",{});var Mjr=s(hoe);AQe=r(Mjr,"roberta"),Mjr.forEach(t),yQe=r(LCe," \u2014 "),$k=n(LCe,"A",{href:!0});var Ejr=s($k);LQe=r(Ejr,"RobertaConfig"),Ejr.forEach(t),xQe=r(LCe," (RoBERTa model)"),LCe.forEach(t),$Qe=i(L),Pm=n(L,"LI",{});var xCe=s(Pm);poe=n(xCe,"STRONG",{});var Cjr=s(poe);kQe=r(Cjr,"roformer"),Cjr.forEach(t),SQe=r(xCe," \u2014 "),kk=n(xCe,"A",{href:!0});var wjr=s(kk);RQe=r(wjr,"RoFormerConfig"),wjr.forEach(t),BQe=r(xCe," (RoFormer model)"),xCe.forEach(t),PQe=i(L),Im=n(L,"LI",{});var $Ce=s(Im);uoe=n($Ce,"STRONG",{});var Ajr=s(uoe);IQe=r(Ajr,"segformer"),Ajr.forEach(t),qQe=r($Ce," \u2014 "),Sk=n($Ce,"A",{href:!0});var yjr=s(Sk);NQe=r(yjr,"SegformerConfig"),yjr.forEach(t),jQe=r($Ce," (SegFormer model)"),$Ce.forEach(t),DQe=i(L),qm=n(L,"LI",{});var kCe=s(qm);_oe=n(kCe,"STRONG",{});var Ljr=s(_oe);GQe=r(Ljr,"sew"),Ljr.forEach(t),OQe=r(kCe," \u2014 "),Rk=n(kCe,"A",{href:!0});var xjr=s(Rk);VQe=r(xjr,"SEWConfig"),xjr.forEach(t),XQe=r(kCe," (SEW model)"),kCe.forEach(t),zQe=i(L),Nm=n(L,"LI",{});var SCe=s(Nm);boe=n(SCe,"STRONG",{});var $jr=s(boe);QQe=r($jr,"sew-d"),$jr.forEach(t),WQe=r(SCe," \u2014 "),Bk=n(SCe,"A",{href:!0});var kjr=s(Bk);HQe=r(kjr,"SEWDConfig"),kjr.forEach(t),UQe=r(SCe," (SEW-D model)"),SCe.forEach(t),JQe=i(L),jm=n(L,"LI",{});var RCe=s(jm);voe=n(RCe,"STRONG",{});var Sjr=s(voe);YQe=r(Sjr,"speech-encoder-decoder"),Sjr.forEach(t),KQe=r(RCe," \u2014 "),Pk=n(RCe,"A",{href:!0});var Rjr=s(Pk);ZQe=r(Rjr,"SpeechEncoderDecoderConfig"),Rjr.forEach(t),eWe=r(RCe," (Speech Encoder decoder model)"),RCe.forEach(t),oWe=i(L),Dm=n(L,"LI",{});var BCe=s(Dm);Foe=n(BCe,"STRONG",{});var Bjr=s(Foe);rWe=r(Bjr,"speech_to_text"),Bjr.forEach(t),tWe=r(BCe," \u2014 "),Ik=n(BCe,"A",{href:!0});var Pjr=s(Ik);aWe=r(Pjr,"Speech2TextConfig"),Pjr.forEach(t),nWe=r(BCe," (Speech2Text model)"),BCe.forEach(t),sWe=i(L),Gm=n(L,"LI",{});var PCe=s(Gm);Toe=n(PCe,"STRONG",{});var Ijr=s(Toe);lWe=r(Ijr,"speech_to_text_2"),Ijr.forEach(t),iWe=r(PCe," \u2014 "),qk=n(PCe,"A",{href:!0});var qjr=s(qk);dWe=r(qjr,"Speech2Text2Config"),qjr.forEach(t),cWe=r(PCe," (Speech2Text2 model)"),PCe.forEach(t),fWe=i(L),Om=n(L,"LI",{});var ICe=s(Om);Moe=n(ICe,"STRONG",{});var Njr=s(Moe);mWe=r(Njr,"splinter"),Njr.forEach(t),gWe=r(ICe," \u2014 "),Nk=n(ICe,"A",{href:!0});var jjr=s(Nk);hWe=r(jjr,"SplinterConfig"),jjr.forEach(t),pWe=r(ICe," (Splinter model)"),ICe.forEach(t),uWe=i(L),Vm=n(L,"LI",{});var qCe=s(Vm);Eoe=n(qCe,"STRONG",{});var Djr=s(Eoe);_We=r(Djr,"squeezebert"),Djr.forEach(t),bWe=r(qCe," \u2014 "),jk=n(qCe,"A",{href:!0});var Gjr=s(jk);vWe=r(Gjr,"SqueezeBertConfig"),Gjr.forEach(t),FWe=r(qCe," (SqueezeBERT model)"),qCe.forEach(t),TWe=i(L),Xm=n(L,"LI",{});var NCe=s(Xm);Coe=n(NCe,"STRONG",{});var Ojr=s(Coe);MWe=r(Ojr,"swin"),Ojr.forEach(t),EWe=r(NCe," \u2014 "),Dk=n(NCe,"A",{href:!0});var Vjr=s(Dk);CWe=r(Vjr,"SwinConfig"),Vjr.forEach(t),wWe=r(NCe," (Swin model)"),NCe.forEach(t),AWe=i(L),zm=n(L,"LI",{});var jCe=s(zm);woe=n(jCe,"STRONG",{});var Xjr=s(woe);yWe=r(Xjr,"t5"),Xjr.forEach(t),LWe=r(jCe," \u2014 "),Gk=n(jCe,"A",{href:!0});var zjr=s(Gk);xWe=r(zjr,"T5Config"),zjr.forEach(t),$We=r(jCe," (T5 model)"),jCe.forEach(t),kWe=i(L),Qm=n(L,"LI",{});var DCe=s(Qm);Aoe=n(DCe,"STRONG",{});var Qjr=s(Aoe);SWe=r(Qjr,"tapas"),Qjr.forEach(t),RWe=r(DCe," \u2014 "),Ok=n(DCe,"A",{href:!0});var Wjr=s(Ok);BWe=r(Wjr,"TapasConfig"),Wjr.forEach(t),PWe=r(DCe," (TAPAS model)"),DCe.forEach(t),IWe=i(L),Wm=n(L,"LI",{});var GCe=s(Wm);yoe=n(GCe,"STRONG",{});var Hjr=s(yoe);qWe=r(Hjr,"tapex"),Hjr.forEach(t),NWe=r(GCe," \u2014 "),Vk=n(GCe,"A",{href:!0});var Ujr=s(Vk);jWe=r(Ujr,"BartConfig"),Ujr.forEach(t),DWe=r(GCe," (TAPEX model)"),GCe.forEach(t),GWe=i(L),Hm=n(L,"LI",{});var OCe=s(Hm);Loe=n(OCe,"STRONG",{});var Jjr=s(Loe);OWe=r(Jjr,"transfo-xl"),Jjr.forEach(t),VWe=r(OCe," \u2014 "),Xk=n(OCe,"A",{href:!0});var Yjr=s(Xk);XWe=r(Yjr,"TransfoXLConfig"),Yjr.forEach(t),zWe=r(OCe," (Transformer-XL model)"),OCe.forEach(t),QWe=i(L),Um=n(L,"LI",{});var VCe=s(Um);xoe=n(VCe,"STRONG",{});var Kjr=s(xoe);WWe=r(Kjr,"trocr"),Kjr.forEach(t),HWe=r(VCe," \u2014 "),zk=n(VCe,"A",{href:!0});var Zjr=s(zk);UWe=r(Zjr,"TrOCRConfig"),Zjr.forEach(t),JWe=r(VCe," (TrOCR model)"),VCe.forEach(t),YWe=i(L),Jm=n(L,"LI",{});var XCe=s(Jm);$oe=n(XCe,"STRONG",{});var eDr=s($oe);KWe=r(eDr,"unispeech"),eDr.forEach(t),ZWe=r(XCe," \u2014 "),Qk=n(XCe,"A",{href:!0});var oDr=s(Qk);eHe=r(oDr,"UniSpeechConfig"),oDr.forEach(t),oHe=r(XCe," (UniSpeech model)"),XCe.forEach(t),rHe=i(L),Ym=n(L,"LI",{});var zCe=s(Ym);koe=n(zCe,"STRONG",{});var rDr=s(koe);tHe=r(rDr,"unispeech-sat"),rDr.forEach(t),aHe=r(zCe," \u2014 "),Wk=n(zCe,"A",{href:!0});var tDr=s(Wk);nHe=r(tDr,"UniSpeechSatConfig"),tDr.forEach(t),sHe=r(zCe," (UniSpeechSat model)"),zCe.forEach(t),lHe=i(L),Km=n(L,"LI",{});var QCe=s(Km);Soe=n(QCe,"STRONG",{});var aDr=s(Soe);iHe=r(aDr,"van"),aDr.forEach(t),dHe=r(QCe," \u2014 "),Hk=n(QCe,"A",{href:!0});var nDr=s(Hk);cHe=r(nDr,"VanConfig"),nDr.forEach(t),fHe=r(QCe," (VAN model)"),QCe.forEach(t),mHe=i(L),Zm=n(L,"LI",{});var WCe=s(Zm);Roe=n(WCe,"STRONG",{});var sDr=s(Roe);gHe=r(sDr,"vilt"),sDr.forEach(t),hHe=r(WCe," \u2014 "),Uk=n(WCe,"A",{href:!0});var lDr=s(Uk);pHe=r(lDr,"ViltConfig"),lDr.forEach(t),uHe=r(WCe," (ViLT model)"),WCe.forEach(t),_He=i(L),eg=n(L,"LI",{});var HCe=s(eg);Boe=n(HCe,"STRONG",{});var iDr=s(Boe);bHe=r(iDr,"vision-encoder-decoder"),iDr.forEach(t),vHe=r(HCe," \u2014 "),Jk=n(HCe,"A",{href:!0});var dDr=s(Jk);FHe=r(dDr,"VisionEncoderDecoderConfig"),dDr.forEach(t),THe=r(HCe," (Vision Encoder decoder model)"),HCe.forEach(t),MHe=i(L),og=n(L,"LI",{});var UCe=s(og);Poe=n(UCe,"STRONG",{});var cDr=s(Poe);EHe=r(cDr,"vision-text-dual-encoder"),cDr.forEach(t),CHe=r(UCe," \u2014 "),Yk=n(UCe,"A",{href:!0});var fDr=s(Yk);wHe=r(fDr,"VisionTextDualEncoderConfig"),fDr.forEach(t),AHe=r(UCe," (VisionTextDualEncoder model)"),UCe.forEach(t),yHe=i(L),rg=n(L,"LI",{});var JCe=s(rg);Ioe=n(JCe,"STRONG",{});var mDr=s(Ioe);LHe=r(mDr,"visual_bert"),mDr.forEach(t),xHe=r(JCe," \u2014 "),Kk=n(JCe,"A",{href:!0});var gDr=s(Kk);$He=r(gDr,"VisualBertConfig"),gDr.forEach(t),kHe=r(JCe," (VisualBert model)"),JCe.forEach(t),SHe=i(L),tg=n(L,"LI",{});var YCe=s(tg);qoe=n(YCe,"STRONG",{});var hDr=s(qoe);RHe=r(hDr,"vit"),hDr.forEach(t),BHe=r(YCe," \u2014 "),Zk=n(YCe,"A",{href:!0});var pDr=s(Zk);PHe=r(pDr,"ViTConfig"),pDr.forEach(t),IHe=r(YCe," (ViT model)"),YCe.forEach(t),qHe=i(L),ag=n(L,"LI",{});var KCe=s(ag);Noe=n(KCe,"STRONG",{});var uDr=s(Noe);NHe=r(uDr,"vit_mae"),uDr.forEach(t),jHe=r(KCe," \u2014 "),eS=n(KCe,"A",{href:!0});var _Dr=s(eS);DHe=r(_Dr,"ViTMAEConfig"),_Dr.forEach(t),GHe=r(KCe," (ViTMAE model)"),KCe.forEach(t),OHe=i(L),ng=n(L,"LI",{});var ZCe=s(ng);joe=n(ZCe,"STRONG",{});var bDr=s(joe);VHe=r(bDr,"wav2vec2"),bDr.forEach(t),XHe=r(ZCe," \u2014 "),oS=n(ZCe,"A",{href:!0});var vDr=s(oS);zHe=r(vDr,"Wav2Vec2Config"),vDr.forEach(t),QHe=r(ZCe," (Wav2Vec2 model)"),ZCe.forEach(t),WHe=i(L),sg=n(L,"LI",{});var e5e=s(sg);Doe=n(e5e,"STRONG",{});var FDr=s(Doe);HHe=r(FDr,"wavlm"),FDr.forEach(t),UHe=r(e5e," \u2014 "),rS=n(e5e,"A",{href:!0});var TDr=s(rS);JHe=r(TDr,"WavLMConfig"),TDr.forEach(t),YHe=r(e5e," (WavLM model)"),e5e.forEach(t),KHe=i(L),lg=n(L,"LI",{});var o5e=s(lg);Goe=n(o5e,"STRONG",{});var MDr=s(Goe);ZHe=r(MDr,"xglm"),MDr.forEach(t),eUe=r(o5e," \u2014 "),tS=n(o5e,"A",{href:!0});var EDr=s(tS);oUe=r(EDr,"XGLMConfig"),EDr.forEach(t),rUe=r(o5e," (XGLM model)"),o5e.forEach(t),tUe=i(L),ig=n(L,"LI",{});var r5e=s(ig);Ooe=n(r5e,"STRONG",{});var CDr=s(Ooe);aUe=r(CDr,"xlm"),CDr.forEach(t),nUe=r(r5e," \u2014 "),aS=n(r5e,"A",{href:!0});var wDr=s(aS);sUe=r(wDr,"XLMConfig"),wDr.forEach(t),lUe=r(r5e," (XLM model)"),r5e.forEach(t),iUe=i(L),dg=n(L,"LI",{});var t5e=s(dg);Voe=n(t5e,"STRONG",{});var ADr=s(Voe);dUe=r(ADr,"xlm-prophetnet"),ADr.forEach(t),cUe=r(t5e," \u2014 "),nS=n(t5e,"A",{href:!0});var yDr=s(nS);fUe=r(yDr,"XLMProphetNetConfig"),yDr.forEach(t),mUe=r(t5e," (XLMProphetNet model)"),t5e.forEach(t),gUe=i(L),cg=n(L,"LI",{});var a5e=s(cg);Xoe=n(a5e,"STRONG",{});var LDr=s(Xoe);hUe=r(LDr,"xlm-roberta"),LDr.forEach(t),pUe=r(a5e," \u2014 "),sS=n(a5e,"A",{href:!0});var xDr=s(sS);uUe=r(xDr,"XLMRobertaConfig"),xDr.forEach(t),_Ue=r(a5e," (XLM-RoBERTa model)"),a5e.forEach(t),bUe=i(L),fg=n(L,"LI",{});var n5e=s(fg);zoe=n(n5e,"STRONG",{});var $Dr=s(zoe);vUe=r($Dr,"xlm-roberta-xl"),$Dr.forEach(t),FUe=r(n5e," \u2014 "),lS=n(n5e,"A",{href:!0});var kDr=s(lS);TUe=r(kDr,"XLMRobertaXLConfig"),kDr.forEach(t),MUe=r(n5e," (XLM-RoBERTa-XL model)"),n5e.forEach(t),EUe=i(L),mg=n(L,"LI",{});var s5e=s(mg);Qoe=n(s5e,"STRONG",{});var SDr=s(Qoe);CUe=r(SDr,"xlnet"),SDr.forEach(t),wUe=r(s5e," \u2014 "),iS=n(s5e,"A",{href:!0});var RDr=s(iS);AUe=r(RDr,"XLNetConfig"),RDr.forEach(t),yUe=r(s5e," (XLNet model)"),s5e.forEach(t),LUe=i(L),gg=n(L,"LI",{});var l5e=s(gg);Woe=n(l5e,"STRONG",{});var BDr=s(Woe);xUe=r(BDr,"yolos"),BDr.forEach(t),$Ue=r(l5e," \u2014 "),dS=n(l5e,"A",{href:!0});var PDr=s(dS);kUe=r(PDr,"YolosConfig"),PDr.forEach(t),SUe=r(l5e," (YOLOS model)"),l5e.forEach(t),RUe=i(L),hg=n(L,"LI",{});var i5e=s(hg);Hoe=n(i5e,"STRONG",{});var IDr=s(Hoe);BUe=r(IDr,"yoso"),IDr.forEach(t),PUe=r(i5e," \u2014 "),cS=n(i5e,"A",{href:!0});var qDr=s(cS);IUe=r(qDr,"YosoConfig"),qDr.forEach(t),qUe=r(i5e," (YOSO model)"),i5e.forEach(t),L.forEach(t),NUe=i(Zr),T(pg.$$.fragment,Zr),Zr.forEach(t),jUe=i(Kr),ug=n(Kr,"DIV",{class:!0});var Eqe=s(ug);T(KA.$$.fragment,Eqe),DUe=i(Eqe),Uoe=n(Eqe,"P",{});var NDr=s(Uoe);GUe=r(NDr,"Register a new configuration for this class."),NDr.forEach(t),Eqe.forEach(t),Kr.forEach(t),APe=i(f),_i=n(f,"H2",{class:!0});var Cqe=s(_i);_g=n(Cqe,"A",{id:!0,class:!0,href:!0});var jDr=s(_g);Joe=n(jDr,"SPAN",{});var DDr=s(Joe);T(ZA.$$.fragment,DDr),DDr.forEach(t),jDr.forEach(t),OUe=i(Cqe),Yoe=n(Cqe,"SPAN",{});var GDr=s(Yoe);VUe=r(GDr,"AutoTokenizer"),GDr.forEach(t),Cqe.forEach(t),yPe=i(f),wo=n(f,"DIV",{class:!0});var Ps=s(wo);T(ey.$$.fragment,Ps),XUe=i(Ps),oy=n(Ps,"P",{});var wqe=s(oy);zUe=r(wqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),fS=n(wqe,"A",{href:!0});var ODr=s(fS);QUe=r(ODr,"AutoTokenizer.from_pretrained()"),ODr.forEach(t),WUe=r(wqe," class method."),wqe.forEach(t),HUe=i(Ps),ry=n(Ps,"P",{});var Aqe=s(ry);UUe=r(Aqe,"This class cannot be instantiated directly using "),Koe=n(Aqe,"CODE",{});var VDr=s(Koe);JUe=r(VDr,"__init__()"),VDr.forEach(t),YUe=r(Aqe," (throws an error)."),Aqe.forEach(t),KUe=i(Ps),Cr=n(Ps,"DIV",{class:!0});var Is=s(Cr);T(ty.$$.fragment,Is),ZUe=i(Is),Zoe=n(Is,"P",{});var XDr=s(Zoe);eJe=r(XDr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),XDr.forEach(t),oJe=i(Is),Ca=n(Is,"P",{});var Q3=s(Ca);rJe=r(Q3,"The tokenizer class to instantiate is selected based on the "),ere=n(Q3,"CODE",{});var zDr=s(ere);tJe=r(zDr,"model_type"),zDr.forEach(t),aJe=r(Q3,` property of the config object (either
passed as an argument or loaded from `),ore=n(Q3,"CODE",{});var QDr=s(ore);nJe=r(QDr,"pretrained_model_name_or_path"),QDr.forEach(t),sJe=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rre=n(Q3,"CODE",{});var WDr=s(rre);lJe=r(WDr,"pretrained_model_name_or_path"),WDr.forEach(t),iJe=r(Q3,":"),Q3.forEach(t),dJe=i(Is),k=n(Is,"UL",{});var S=s(k);kn=n(S,"LI",{});var a9=s(kn);tre=n(a9,"STRONG",{});var HDr=s(tre);cJe=r(HDr,"albert"),HDr.forEach(t),fJe=r(a9," \u2014 "),mS=n(a9,"A",{href:!0});var UDr=s(mS);mJe=r(UDr,"AlbertTokenizer"),UDr.forEach(t),gJe=r(a9," or "),gS=n(a9,"A",{href:!0});var JDr=s(gS);hJe=r(JDr,"AlbertTokenizerFast"),JDr.forEach(t),pJe=r(a9," (ALBERT model)"),a9.forEach(t),uJe=i(S),Sn=n(S,"LI",{});var n9=s(Sn);are=n(n9,"STRONG",{});var YDr=s(are);_Je=r(YDr,"bart"),YDr.forEach(t),bJe=r(n9," \u2014 "),hS=n(n9,"A",{href:!0});var KDr=s(hS);vJe=r(KDr,"BartTokenizer"),KDr.forEach(t),FJe=r(n9," or "),pS=n(n9,"A",{href:!0});var ZDr=s(pS);TJe=r(ZDr,"BartTokenizerFast"),ZDr.forEach(t),MJe=r(n9," (BART model)"),n9.forEach(t),EJe=i(S),Rn=n(S,"LI",{});var s9=s(Rn);nre=n(s9,"STRONG",{});var eGr=s(nre);CJe=r(eGr,"barthez"),eGr.forEach(t),wJe=r(s9," \u2014 "),uS=n(s9,"A",{href:!0});var oGr=s(uS);AJe=r(oGr,"BarthezTokenizer"),oGr.forEach(t),yJe=r(s9," or "),_S=n(s9,"A",{href:!0});var rGr=s(_S);LJe=r(rGr,"BarthezTokenizerFast"),rGr.forEach(t),xJe=r(s9," (BARThez model)"),s9.forEach(t),$Je=i(S),bg=n(S,"LI",{});var d5e=s(bg);sre=n(d5e,"STRONG",{});var tGr=s(sre);kJe=r(tGr,"bartpho"),tGr.forEach(t),SJe=r(d5e," \u2014 "),bS=n(d5e,"A",{href:!0});var aGr=s(bS);RJe=r(aGr,"BartphoTokenizer"),aGr.forEach(t),BJe=r(d5e," (BARTpho model)"),d5e.forEach(t),PJe=i(S),Bn=n(S,"LI",{});var l9=s(Bn);lre=n(l9,"STRONG",{});var nGr=s(lre);IJe=r(nGr,"bert"),nGr.forEach(t),qJe=r(l9," \u2014 "),vS=n(l9,"A",{href:!0});var sGr=s(vS);NJe=r(sGr,"BertTokenizer"),sGr.forEach(t),jJe=r(l9," or "),FS=n(l9,"A",{href:!0});var lGr=s(FS);DJe=r(lGr,"BertTokenizerFast"),lGr.forEach(t),GJe=r(l9," (BERT model)"),l9.forEach(t),OJe=i(S),vg=n(S,"LI",{});var c5e=s(vg);ire=n(c5e,"STRONG",{});var iGr=s(ire);VJe=r(iGr,"bert-generation"),iGr.forEach(t),XJe=r(c5e," \u2014 "),TS=n(c5e,"A",{href:!0});var dGr=s(TS);zJe=r(dGr,"BertGenerationTokenizer"),dGr.forEach(t),QJe=r(c5e," (Bert Generation model)"),c5e.forEach(t),WJe=i(S),Fg=n(S,"LI",{});var f5e=s(Fg);dre=n(f5e,"STRONG",{});var cGr=s(dre);HJe=r(cGr,"bert-japanese"),cGr.forEach(t),UJe=r(f5e," \u2014 "),MS=n(f5e,"A",{href:!0});var fGr=s(MS);JJe=r(fGr,"BertJapaneseTokenizer"),fGr.forEach(t),YJe=r(f5e," (BertJapanese model)"),f5e.forEach(t),KJe=i(S),Tg=n(S,"LI",{});var m5e=s(Tg);cre=n(m5e,"STRONG",{});var mGr=s(cre);ZJe=r(mGr,"bertweet"),mGr.forEach(t),eYe=r(m5e," \u2014 "),ES=n(m5e,"A",{href:!0});var gGr=s(ES);oYe=r(gGr,"BertweetTokenizer"),gGr.forEach(t),rYe=r(m5e," (Bertweet model)"),m5e.forEach(t),tYe=i(S),Pn=n(S,"LI",{});var i9=s(Pn);fre=n(i9,"STRONG",{});var hGr=s(fre);aYe=r(hGr,"big_bird"),hGr.forEach(t),nYe=r(i9," \u2014 "),CS=n(i9,"A",{href:!0});var pGr=s(CS);sYe=r(pGr,"BigBirdTokenizer"),pGr.forEach(t),lYe=r(i9," or "),wS=n(i9,"A",{href:!0});var uGr=s(wS);iYe=r(uGr,"BigBirdTokenizerFast"),uGr.forEach(t),dYe=r(i9," (BigBird model)"),i9.forEach(t),cYe=i(S),In=n(S,"LI",{});var d9=s(In);mre=n(d9,"STRONG",{});var _Gr=s(mre);fYe=r(_Gr,"bigbird_pegasus"),_Gr.forEach(t),mYe=r(d9," \u2014 "),AS=n(d9,"A",{href:!0});var bGr=s(AS);gYe=r(bGr,"PegasusTokenizer"),bGr.forEach(t),hYe=r(d9," or "),yS=n(d9,"A",{href:!0});var vGr=s(yS);pYe=r(vGr,"PegasusTokenizerFast"),vGr.forEach(t),uYe=r(d9," (BigBirdPegasus model)"),d9.forEach(t),_Ye=i(S),qn=n(S,"LI",{});var c9=s(qn);gre=n(c9,"STRONG",{});var FGr=s(gre);bYe=r(FGr,"blenderbot"),FGr.forEach(t),vYe=r(c9," \u2014 "),LS=n(c9,"A",{href:!0});var TGr=s(LS);FYe=r(TGr,"BlenderbotTokenizer"),TGr.forEach(t),TYe=r(c9," or "),xS=n(c9,"A",{href:!0});var MGr=s(xS);MYe=r(MGr,"BlenderbotTokenizerFast"),MGr.forEach(t),EYe=r(c9," (Blenderbot model)"),c9.forEach(t),CYe=i(S),Mg=n(S,"LI",{});var g5e=s(Mg);hre=n(g5e,"STRONG",{});var EGr=s(hre);wYe=r(EGr,"blenderbot-small"),EGr.forEach(t),AYe=r(g5e," \u2014 "),$S=n(g5e,"A",{href:!0});var CGr=s($S);yYe=r(CGr,"BlenderbotSmallTokenizer"),CGr.forEach(t),LYe=r(g5e," (BlenderbotSmall model)"),g5e.forEach(t),xYe=i(S),Eg=n(S,"LI",{});var h5e=s(Eg);pre=n(h5e,"STRONG",{});var wGr=s(pre);$Ye=r(wGr,"byt5"),wGr.forEach(t),kYe=r(h5e," \u2014 "),kS=n(h5e,"A",{href:!0});var AGr=s(kS);SYe=r(AGr,"ByT5Tokenizer"),AGr.forEach(t),RYe=r(h5e," (ByT5 model)"),h5e.forEach(t),BYe=i(S),Nn=n(S,"LI",{});var f9=s(Nn);ure=n(f9,"STRONG",{});var yGr=s(ure);PYe=r(yGr,"camembert"),yGr.forEach(t),IYe=r(f9," \u2014 "),SS=n(f9,"A",{href:!0});var LGr=s(SS);qYe=r(LGr,"CamembertTokenizer"),LGr.forEach(t),NYe=r(f9," or "),RS=n(f9,"A",{href:!0});var xGr=s(RS);jYe=r(xGr,"CamembertTokenizerFast"),xGr.forEach(t),DYe=r(f9," (CamemBERT model)"),f9.forEach(t),GYe=i(S),Cg=n(S,"LI",{});var p5e=s(Cg);_re=n(p5e,"STRONG",{});var $Gr=s(_re);OYe=r($Gr,"canine"),$Gr.forEach(t),VYe=r(p5e," \u2014 "),BS=n(p5e,"A",{href:!0});var kGr=s(BS);XYe=r(kGr,"CanineTokenizer"),kGr.forEach(t),zYe=r(p5e," (Canine model)"),p5e.forEach(t),QYe=i(S),jn=n(S,"LI",{});var m9=s(jn);bre=n(m9,"STRONG",{});var SGr=s(bre);WYe=r(SGr,"clip"),SGr.forEach(t),HYe=r(m9," \u2014 "),PS=n(m9,"A",{href:!0});var RGr=s(PS);UYe=r(RGr,"CLIPTokenizer"),RGr.forEach(t),JYe=r(m9," or "),IS=n(m9,"A",{href:!0});var BGr=s(IS);YYe=r(BGr,"CLIPTokenizerFast"),BGr.forEach(t),KYe=r(m9," (CLIP model)"),m9.forEach(t),ZYe=i(S),Dn=n(S,"LI",{});var g9=s(Dn);vre=n(g9,"STRONG",{});var PGr=s(vre);eKe=r(PGr,"convbert"),PGr.forEach(t),oKe=r(g9," \u2014 "),qS=n(g9,"A",{href:!0});var IGr=s(qS);rKe=r(IGr,"ConvBertTokenizer"),IGr.forEach(t),tKe=r(g9," or "),NS=n(g9,"A",{href:!0});var qGr=s(NS);aKe=r(qGr,"ConvBertTokenizerFast"),qGr.forEach(t),nKe=r(g9," (ConvBERT model)"),g9.forEach(t),sKe=i(S),Gn=n(S,"LI",{});var h9=s(Gn);Fre=n(h9,"STRONG",{});var NGr=s(Fre);lKe=r(NGr,"cpm"),NGr.forEach(t),iKe=r(h9," \u2014 "),jS=n(h9,"A",{href:!0});var jGr=s(jS);dKe=r(jGr,"CpmTokenizer"),jGr.forEach(t),cKe=r(h9," or "),DS=n(h9,"A",{href:!0});var DGr=s(DS);fKe=r(DGr,"CpmTokenizerFast"),DGr.forEach(t),mKe=r(h9," (CPM model)"),h9.forEach(t),gKe=i(S),wg=n(S,"LI",{});var u5e=s(wg);Tre=n(u5e,"STRONG",{});var GGr=s(Tre);hKe=r(GGr,"ctrl"),GGr.forEach(t),pKe=r(u5e," \u2014 "),GS=n(u5e,"A",{href:!0});var OGr=s(GS);uKe=r(OGr,"CTRLTokenizer"),OGr.forEach(t),_Ke=r(u5e," (CTRL model)"),u5e.forEach(t),bKe=i(S),On=n(S,"LI",{});var p9=s(On);Mre=n(p9,"STRONG",{});var VGr=s(Mre);vKe=r(VGr,"data2vec-text"),VGr.forEach(t),FKe=r(p9," \u2014 "),OS=n(p9,"A",{href:!0});var XGr=s(OS);TKe=r(XGr,"RobertaTokenizer"),XGr.forEach(t),MKe=r(p9," or "),VS=n(p9,"A",{href:!0});var zGr=s(VS);EKe=r(zGr,"RobertaTokenizerFast"),zGr.forEach(t),CKe=r(p9," (Data2VecText model)"),p9.forEach(t),wKe=i(S),Vn=n(S,"LI",{});var u9=s(Vn);Ere=n(u9,"STRONG",{});var QGr=s(Ere);AKe=r(QGr,"deberta"),QGr.forEach(t),yKe=r(u9," \u2014 "),XS=n(u9,"A",{href:!0});var WGr=s(XS);LKe=r(WGr,"DebertaTokenizer"),WGr.forEach(t),xKe=r(u9," or "),zS=n(u9,"A",{href:!0});var HGr=s(zS);$Ke=r(HGr,"DebertaTokenizerFast"),HGr.forEach(t),kKe=r(u9," (DeBERTa model)"),u9.forEach(t),SKe=i(S),Xn=n(S,"LI",{});var _9=s(Xn);Cre=n(_9,"STRONG",{});var UGr=s(Cre);RKe=r(UGr,"deberta-v2"),UGr.forEach(t),BKe=r(_9," \u2014 "),QS=n(_9,"A",{href:!0});var JGr=s(QS);PKe=r(JGr,"DebertaV2Tokenizer"),JGr.forEach(t),IKe=r(_9," or "),WS=n(_9,"A",{href:!0});var YGr=s(WS);qKe=r(YGr,"DebertaV2TokenizerFast"),YGr.forEach(t),NKe=r(_9," (DeBERTa-v2 model)"),_9.forEach(t),jKe=i(S),zn=n(S,"LI",{});var b9=s(zn);wre=n(b9,"STRONG",{});var KGr=s(wre);DKe=r(KGr,"distilbert"),KGr.forEach(t),GKe=r(b9," \u2014 "),HS=n(b9,"A",{href:!0});var ZGr=s(HS);OKe=r(ZGr,"DistilBertTokenizer"),ZGr.forEach(t),VKe=r(b9," or "),US=n(b9,"A",{href:!0});var eOr=s(US);XKe=r(eOr,"DistilBertTokenizerFast"),eOr.forEach(t),zKe=r(b9," (DistilBERT model)"),b9.forEach(t),QKe=i(S),Qn=n(S,"LI",{});var v9=s(Qn);Are=n(v9,"STRONG",{});var oOr=s(Are);WKe=r(oOr,"dpr"),oOr.forEach(t),HKe=r(v9," \u2014 "),JS=n(v9,"A",{href:!0});var rOr=s(JS);UKe=r(rOr,"DPRQuestionEncoderTokenizer"),rOr.forEach(t),JKe=r(v9," or "),YS=n(v9,"A",{href:!0});var tOr=s(YS);YKe=r(tOr,"DPRQuestionEncoderTokenizerFast"),tOr.forEach(t),KKe=r(v9," (DPR model)"),v9.forEach(t),ZKe=i(S),Wn=n(S,"LI",{});var F9=s(Wn);yre=n(F9,"STRONG",{});var aOr=s(yre);eZe=r(aOr,"electra"),aOr.forEach(t),oZe=r(F9," \u2014 "),KS=n(F9,"A",{href:!0});var nOr=s(KS);rZe=r(nOr,"ElectraTokenizer"),nOr.forEach(t),tZe=r(F9," or "),ZS=n(F9,"A",{href:!0});var sOr=s(ZS);aZe=r(sOr,"ElectraTokenizerFast"),sOr.forEach(t),nZe=r(F9," (ELECTRA model)"),F9.forEach(t),sZe=i(S),Ag=n(S,"LI",{});var _5e=s(Ag);Lre=n(_5e,"STRONG",{});var lOr=s(Lre);lZe=r(lOr,"flaubert"),lOr.forEach(t),iZe=r(_5e," \u2014 "),eR=n(_5e,"A",{href:!0});var iOr=s(eR);dZe=r(iOr,"FlaubertTokenizer"),iOr.forEach(t),cZe=r(_5e," (FlauBERT model)"),_5e.forEach(t),fZe=i(S),Hn=n(S,"LI",{});var T9=s(Hn);xre=n(T9,"STRONG",{});var dOr=s(xre);mZe=r(dOr,"fnet"),dOr.forEach(t),gZe=r(T9," \u2014 "),oR=n(T9,"A",{href:!0});var cOr=s(oR);hZe=r(cOr,"FNetTokenizer"),cOr.forEach(t),pZe=r(T9," or "),rR=n(T9,"A",{href:!0});var fOr=s(rR);uZe=r(fOr,"FNetTokenizerFast"),fOr.forEach(t),_Ze=r(T9," (FNet model)"),T9.forEach(t),bZe=i(S),yg=n(S,"LI",{});var b5e=s(yg);$re=n(b5e,"STRONG",{});var mOr=s($re);vZe=r(mOr,"fsmt"),mOr.forEach(t),FZe=r(b5e," \u2014 "),tR=n(b5e,"A",{href:!0});var gOr=s(tR);TZe=r(gOr,"FSMTTokenizer"),gOr.forEach(t),MZe=r(b5e," (FairSeq Machine-Translation model)"),b5e.forEach(t),EZe=i(S),Un=n(S,"LI",{});var M9=s(Un);kre=n(M9,"STRONG",{});var hOr=s(kre);CZe=r(hOr,"funnel"),hOr.forEach(t),wZe=r(M9," \u2014 "),aR=n(M9,"A",{href:!0});var pOr=s(aR);AZe=r(pOr,"FunnelTokenizer"),pOr.forEach(t),yZe=r(M9," or "),nR=n(M9,"A",{href:!0});var uOr=s(nR);LZe=r(uOr,"FunnelTokenizerFast"),uOr.forEach(t),xZe=r(M9," (Funnel Transformer model)"),M9.forEach(t),$Ze=i(S),Jn=n(S,"LI",{});var E9=s(Jn);Sre=n(E9,"STRONG",{});var _Or=s(Sre);kZe=r(_Or,"gpt2"),_Or.forEach(t),SZe=r(E9," \u2014 "),sR=n(E9,"A",{href:!0});var bOr=s(sR);RZe=r(bOr,"GPT2Tokenizer"),bOr.forEach(t),BZe=r(E9," or "),lR=n(E9,"A",{href:!0});var vOr=s(lR);PZe=r(vOr,"GPT2TokenizerFast"),vOr.forEach(t),IZe=r(E9," (OpenAI GPT-2 model)"),E9.forEach(t),qZe=i(S),Yn=n(S,"LI",{});var C9=s(Yn);Rre=n(C9,"STRONG",{});var FOr=s(Rre);NZe=r(FOr,"gpt_neo"),FOr.forEach(t),jZe=r(C9," \u2014 "),iR=n(C9,"A",{href:!0});var TOr=s(iR);DZe=r(TOr,"GPT2Tokenizer"),TOr.forEach(t),GZe=r(C9," or "),dR=n(C9,"A",{href:!0});var MOr=s(dR);OZe=r(MOr,"GPT2TokenizerFast"),MOr.forEach(t),VZe=r(C9," (GPT Neo model)"),C9.forEach(t),XZe=i(S),Kn=n(S,"LI",{});var w9=s(Kn);Bre=n(w9,"STRONG",{});var EOr=s(Bre);zZe=r(EOr,"gptj"),EOr.forEach(t),QZe=r(w9," \u2014 "),cR=n(w9,"A",{href:!0});var COr=s(cR);WZe=r(COr,"GPT2Tokenizer"),COr.forEach(t),HZe=r(w9," or "),fR=n(w9,"A",{href:!0});var wOr=s(fR);UZe=r(wOr,"GPT2TokenizerFast"),wOr.forEach(t),JZe=r(w9," (GPT-J model)"),w9.forEach(t),YZe=i(S),Zn=n(S,"LI",{});var A9=s(Zn);Pre=n(A9,"STRONG",{});var AOr=s(Pre);KZe=r(AOr,"herbert"),AOr.forEach(t),ZZe=r(A9," \u2014 "),mR=n(A9,"A",{href:!0});var yOr=s(mR);eeo=r(yOr,"HerbertTokenizer"),yOr.forEach(t),oeo=r(A9," or "),gR=n(A9,"A",{href:!0});var LOr=s(gR);reo=r(LOr,"HerbertTokenizerFast"),LOr.forEach(t),teo=r(A9," (HerBERT model)"),A9.forEach(t),aeo=i(S),Lg=n(S,"LI",{});var v5e=s(Lg);Ire=n(v5e,"STRONG",{});var xOr=s(Ire);neo=r(xOr,"hubert"),xOr.forEach(t),seo=r(v5e," \u2014 "),hR=n(v5e,"A",{href:!0});var $Or=s(hR);leo=r($Or,"Wav2Vec2CTCTokenizer"),$Or.forEach(t),ieo=r(v5e," (Hubert model)"),v5e.forEach(t),deo=i(S),es=n(S,"LI",{});var y9=s(es);qre=n(y9,"STRONG",{});var kOr=s(qre);ceo=r(kOr,"ibert"),kOr.forEach(t),feo=r(y9," \u2014 "),pR=n(y9,"A",{href:!0});var SOr=s(pR);meo=r(SOr,"RobertaTokenizer"),SOr.forEach(t),geo=r(y9," or "),uR=n(y9,"A",{href:!0});var ROr=s(uR);heo=r(ROr,"RobertaTokenizerFast"),ROr.forEach(t),peo=r(y9," (I-BERT model)"),y9.forEach(t),ueo=i(S),os=n(S,"LI",{});var L9=s(os);Nre=n(L9,"STRONG",{});var BOr=s(Nre);_eo=r(BOr,"layoutlm"),BOr.forEach(t),beo=r(L9," \u2014 "),_R=n(L9,"A",{href:!0});var POr=s(_R);veo=r(POr,"LayoutLMTokenizer"),POr.forEach(t),Feo=r(L9," or "),bR=n(L9,"A",{href:!0});var IOr=s(bR);Teo=r(IOr,"LayoutLMTokenizerFast"),IOr.forEach(t),Meo=r(L9," (LayoutLM model)"),L9.forEach(t),Eeo=i(S),rs=n(S,"LI",{});var x9=s(rs);jre=n(x9,"STRONG",{});var qOr=s(jre);Ceo=r(qOr,"layoutlmv2"),qOr.forEach(t),weo=r(x9," \u2014 "),vR=n(x9,"A",{href:!0});var NOr=s(vR);Aeo=r(NOr,"LayoutLMv2Tokenizer"),NOr.forEach(t),yeo=r(x9," or "),FR=n(x9,"A",{href:!0});var jOr=s(FR);Leo=r(jOr,"LayoutLMv2TokenizerFast"),jOr.forEach(t),xeo=r(x9," (LayoutLMv2 model)"),x9.forEach(t),$eo=i(S),ts=n(S,"LI",{});var $9=s(ts);Dre=n($9,"STRONG",{});var DOr=s(Dre);keo=r(DOr,"layoutxlm"),DOr.forEach(t),Seo=r($9," \u2014 "),TR=n($9,"A",{href:!0});var GOr=s(TR);Reo=r(GOr,"LayoutXLMTokenizer"),GOr.forEach(t),Beo=r($9," or "),MR=n($9,"A",{href:!0});var OOr=s(MR);Peo=r(OOr,"LayoutXLMTokenizerFast"),OOr.forEach(t),Ieo=r($9," (LayoutXLM model)"),$9.forEach(t),qeo=i(S),as=n(S,"LI",{});var k9=s(as);Gre=n(k9,"STRONG",{});var VOr=s(Gre);Neo=r(VOr,"led"),VOr.forEach(t),jeo=r(k9," \u2014 "),ER=n(k9,"A",{href:!0});var XOr=s(ER);Deo=r(XOr,"LEDTokenizer"),XOr.forEach(t),Geo=r(k9," or "),CR=n(k9,"A",{href:!0});var zOr=s(CR);Oeo=r(zOr,"LEDTokenizerFast"),zOr.forEach(t),Veo=r(k9," (LED model)"),k9.forEach(t),Xeo=i(S),ns=n(S,"LI",{});var S9=s(ns);Ore=n(S9,"STRONG",{});var QOr=s(Ore);zeo=r(QOr,"longformer"),QOr.forEach(t),Qeo=r(S9," \u2014 "),wR=n(S9,"A",{href:!0});var WOr=s(wR);Weo=r(WOr,"LongformerTokenizer"),WOr.forEach(t),Heo=r(S9," or "),AR=n(S9,"A",{href:!0});var HOr=s(AR);Ueo=r(HOr,"LongformerTokenizerFast"),HOr.forEach(t),Jeo=r(S9," (Longformer model)"),S9.forEach(t),Yeo=i(S),xg=n(S,"LI",{});var F5e=s(xg);Vre=n(F5e,"STRONG",{});var UOr=s(Vre);Keo=r(UOr,"luke"),UOr.forEach(t),Zeo=r(F5e," \u2014 "),yR=n(F5e,"A",{href:!0});var JOr=s(yR);eoo=r(JOr,"LukeTokenizer"),JOr.forEach(t),ooo=r(F5e," (LUKE model)"),F5e.forEach(t),roo=i(S),ss=n(S,"LI",{});var R9=s(ss);Xre=n(R9,"STRONG",{});var YOr=s(Xre);too=r(YOr,"lxmert"),YOr.forEach(t),aoo=r(R9," \u2014 "),LR=n(R9,"A",{href:!0});var KOr=s(LR);noo=r(KOr,"LxmertTokenizer"),KOr.forEach(t),soo=r(R9," or "),xR=n(R9,"A",{href:!0});var ZOr=s(xR);loo=r(ZOr,"LxmertTokenizerFast"),ZOr.forEach(t),ioo=r(R9," (LXMERT model)"),R9.forEach(t),doo=i(S),$g=n(S,"LI",{});var T5e=s($g);zre=n(T5e,"STRONG",{});var eVr=s(zre);coo=r(eVr,"m2m_100"),eVr.forEach(t),foo=r(T5e," \u2014 "),$R=n(T5e,"A",{href:!0});var oVr=s($R);moo=r(oVr,"M2M100Tokenizer"),oVr.forEach(t),goo=r(T5e," (M2M100 model)"),T5e.forEach(t),hoo=i(S),kg=n(S,"LI",{});var M5e=s(kg);Qre=n(M5e,"STRONG",{});var rVr=s(Qre);poo=r(rVr,"marian"),rVr.forEach(t),uoo=r(M5e," \u2014 "),kR=n(M5e,"A",{href:!0});var tVr=s(kR);_oo=r(tVr,"MarianTokenizer"),tVr.forEach(t),boo=r(M5e," (Marian model)"),M5e.forEach(t),voo=i(S),ls=n(S,"LI",{});var B9=s(ls);Wre=n(B9,"STRONG",{});var aVr=s(Wre);Foo=r(aVr,"mbart"),aVr.forEach(t),Too=r(B9," \u2014 "),SR=n(B9,"A",{href:!0});var nVr=s(SR);Moo=r(nVr,"MBartTokenizer"),nVr.forEach(t),Eoo=r(B9," or "),RR=n(B9,"A",{href:!0});var sVr=s(RR);Coo=r(sVr,"MBartTokenizerFast"),sVr.forEach(t),woo=r(B9," (mBART model)"),B9.forEach(t),Aoo=i(S),is=n(S,"LI",{});var P9=s(is);Hre=n(P9,"STRONG",{});var lVr=s(Hre);yoo=r(lVr,"mbart50"),lVr.forEach(t),Loo=r(P9," \u2014 "),BR=n(P9,"A",{href:!0});var iVr=s(BR);xoo=r(iVr,"MBart50Tokenizer"),iVr.forEach(t),$oo=r(P9," or "),PR=n(P9,"A",{href:!0});var dVr=s(PR);koo=r(dVr,"MBart50TokenizerFast"),dVr.forEach(t),Soo=r(P9," (mBART-50 model)"),P9.forEach(t),Roo=i(S),ds=n(S,"LI",{});var I9=s(ds);Ure=n(I9,"STRONG",{});var cVr=s(Ure);Boo=r(cVr,"megatron-bert"),cVr.forEach(t),Poo=r(I9," \u2014 "),IR=n(I9,"A",{href:!0});var fVr=s(IR);Ioo=r(fVr,"BertTokenizer"),fVr.forEach(t),qoo=r(I9," or "),qR=n(I9,"A",{href:!0});var mVr=s(qR);Noo=r(mVr,"BertTokenizerFast"),mVr.forEach(t),joo=r(I9," (MegatronBert model)"),I9.forEach(t),Doo=i(S),Sg=n(S,"LI",{});var E5e=s(Sg);Jre=n(E5e,"STRONG",{});var gVr=s(Jre);Goo=r(gVr,"mluke"),gVr.forEach(t),Ooo=r(E5e," \u2014 "),NR=n(E5e,"A",{href:!0});var hVr=s(NR);Voo=r(hVr,"MLukeTokenizer"),hVr.forEach(t),Xoo=r(E5e," (mLUKE model)"),E5e.forEach(t),zoo=i(S),cs=n(S,"LI",{});var q9=s(cs);Yre=n(q9,"STRONG",{});var pVr=s(Yre);Qoo=r(pVr,"mobilebert"),pVr.forEach(t),Woo=r(q9," \u2014 "),jR=n(q9,"A",{href:!0});var uVr=s(jR);Hoo=r(uVr,"MobileBertTokenizer"),uVr.forEach(t),Uoo=r(q9," or "),DR=n(q9,"A",{href:!0});var _Vr=s(DR);Joo=r(_Vr,"MobileBertTokenizerFast"),_Vr.forEach(t),Yoo=r(q9," (MobileBERT model)"),q9.forEach(t),Koo=i(S),fs=n(S,"LI",{});var N9=s(fs);Kre=n(N9,"STRONG",{});var bVr=s(Kre);Zoo=r(bVr,"mpnet"),bVr.forEach(t),ero=r(N9," \u2014 "),GR=n(N9,"A",{href:!0});var vVr=s(GR);oro=r(vVr,"MPNetTokenizer"),vVr.forEach(t),rro=r(N9," or "),OR=n(N9,"A",{href:!0});var FVr=s(OR);tro=r(FVr,"MPNetTokenizerFast"),FVr.forEach(t),aro=r(N9," (MPNet model)"),N9.forEach(t),nro=i(S),ms=n(S,"LI",{});var j9=s(ms);Zre=n(j9,"STRONG",{});var TVr=s(Zre);sro=r(TVr,"mt5"),TVr.forEach(t),lro=r(j9," \u2014 "),VR=n(j9,"A",{href:!0});var MVr=s(VR);iro=r(MVr,"MT5Tokenizer"),MVr.forEach(t),dro=r(j9," or "),XR=n(j9,"A",{href:!0});var EVr=s(XR);cro=r(EVr,"MT5TokenizerFast"),EVr.forEach(t),fro=r(j9," (mT5 model)"),j9.forEach(t),mro=i(S),gs=n(S,"LI",{});var D9=s(gs);ete=n(D9,"STRONG",{});var CVr=s(ete);gro=r(CVr,"nystromformer"),CVr.forEach(t),hro=r(D9," \u2014 "),zR=n(D9,"A",{href:!0});var wVr=s(zR);pro=r(wVr,"AlbertTokenizer"),wVr.forEach(t),uro=r(D9," or "),QR=n(D9,"A",{href:!0});var AVr=s(QR);_ro=r(AVr,"AlbertTokenizerFast"),AVr.forEach(t),bro=r(D9," (Nystromformer model)"),D9.forEach(t),vro=i(S),hs=n(S,"LI",{});var G9=s(hs);ote=n(G9,"STRONG",{});var yVr=s(ote);Fro=r(yVr,"openai-gpt"),yVr.forEach(t),Tro=r(G9," \u2014 "),WR=n(G9,"A",{href:!0});var LVr=s(WR);Mro=r(LVr,"OpenAIGPTTokenizer"),LVr.forEach(t),Ero=r(G9," or "),HR=n(G9,"A",{href:!0});var xVr=s(HR);Cro=r(xVr,"OpenAIGPTTokenizerFast"),xVr.forEach(t),wro=r(G9," (OpenAI GPT model)"),G9.forEach(t),Aro=i(S),ps=n(S,"LI",{});var O9=s(ps);rte=n(O9,"STRONG",{});var $Vr=s(rte);yro=r($Vr,"pegasus"),$Vr.forEach(t),Lro=r(O9," \u2014 "),UR=n(O9,"A",{href:!0});var kVr=s(UR);xro=r(kVr,"PegasusTokenizer"),kVr.forEach(t),$ro=r(O9," or "),JR=n(O9,"A",{href:!0});var SVr=s(JR);kro=r(SVr,"PegasusTokenizerFast"),SVr.forEach(t),Sro=r(O9," (Pegasus model)"),O9.forEach(t),Rro=i(S),Rg=n(S,"LI",{});var C5e=s(Rg);tte=n(C5e,"STRONG",{});var RVr=s(tte);Bro=r(RVr,"perceiver"),RVr.forEach(t),Pro=r(C5e," \u2014 "),YR=n(C5e,"A",{href:!0});var BVr=s(YR);Iro=r(BVr,"PerceiverTokenizer"),BVr.forEach(t),qro=r(C5e," (Perceiver model)"),C5e.forEach(t),Nro=i(S),Bg=n(S,"LI",{});var w5e=s(Bg);ate=n(w5e,"STRONG",{});var PVr=s(ate);jro=r(PVr,"phobert"),PVr.forEach(t),Dro=r(w5e," \u2014 "),KR=n(w5e,"A",{href:!0});var IVr=s(KR);Gro=r(IVr,"PhobertTokenizer"),IVr.forEach(t),Oro=r(w5e," (PhoBERT model)"),w5e.forEach(t),Vro=i(S),Pg=n(S,"LI",{});var A5e=s(Pg);nte=n(A5e,"STRONG",{});var qVr=s(nte);Xro=r(qVr,"plbart"),qVr.forEach(t),zro=r(A5e," \u2014 "),ZR=n(A5e,"A",{href:!0});var NVr=s(ZR);Qro=r(NVr,"PLBartTokenizer"),NVr.forEach(t),Wro=r(A5e," (PLBart model)"),A5e.forEach(t),Hro=i(S),Ig=n(S,"LI",{});var y5e=s(Ig);ste=n(y5e,"STRONG",{});var jVr=s(ste);Uro=r(jVr,"prophetnet"),jVr.forEach(t),Jro=r(y5e," \u2014 "),eB=n(y5e,"A",{href:!0});var DVr=s(eB);Yro=r(DVr,"ProphetNetTokenizer"),DVr.forEach(t),Kro=r(y5e," (ProphetNet model)"),y5e.forEach(t),Zro=i(S),us=n(S,"LI",{});var V9=s(us);lte=n(V9,"STRONG",{});var GVr=s(lte);eto=r(GVr,"qdqbert"),GVr.forEach(t),oto=r(V9," \u2014 "),oB=n(V9,"A",{href:!0});var OVr=s(oB);rto=r(OVr,"BertTokenizer"),OVr.forEach(t),tto=r(V9," or "),rB=n(V9,"A",{href:!0});var VVr=s(rB);ato=r(VVr,"BertTokenizerFast"),VVr.forEach(t),nto=r(V9," (QDQBert model)"),V9.forEach(t),sto=i(S),qg=n(S,"LI",{});var L5e=s(qg);ite=n(L5e,"STRONG",{});var XVr=s(ite);lto=r(XVr,"rag"),XVr.forEach(t),ito=r(L5e," \u2014 "),tB=n(L5e,"A",{href:!0});var zVr=s(tB);dto=r(zVr,"RagTokenizer"),zVr.forEach(t),cto=r(L5e," (RAG model)"),L5e.forEach(t),fto=i(S),_s=n(S,"LI",{});var X9=s(_s);dte=n(X9,"STRONG",{});var QVr=s(dte);mto=r(QVr,"realm"),QVr.forEach(t),gto=r(X9," \u2014 "),aB=n(X9,"A",{href:!0});var WVr=s(aB);hto=r(WVr,"RealmTokenizer"),WVr.forEach(t),pto=r(X9," or "),nB=n(X9,"A",{href:!0});var HVr=s(nB);uto=r(HVr,"RealmTokenizerFast"),HVr.forEach(t),_to=r(X9," (Realm model)"),X9.forEach(t),bto=i(S),bs=n(S,"LI",{});var z9=s(bs);cte=n(z9,"STRONG",{});var UVr=s(cte);vto=r(UVr,"reformer"),UVr.forEach(t),Fto=r(z9," \u2014 "),sB=n(z9,"A",{href:!0});var JVr=s(sB);Tto=r(JVr,"ReformerTokenizer"),JVr.forEach(t),Mto=r(z9," or "),lB=n(z9,"A",{href:!0});var YVr=s(lB);Eto=r(YVr,"ReformerTokenizerFast"),YVr.forEach(t),Cto=r(z9," (Reformer model)"),z9.forEach(t),wto=i(S),vs=n(S,"LI",{});var Q9=s(vs);fte=n(Q9,"STRONG",{});var KVr=s(fte);Ato=r(KVr,"rembert"),KVr.forEach(t),yto=r(Q9," \u2014 "),iB=n(Q9,"A",{href:!0});var ZVr=s(iB);Lto=r(ZVr,"RemBertTokenizer"),ZVr.forEach(t),xto=r(Q9," or "),dB=n(Q9,"A",{href:!0});var eXr=s(dB);$to=r(eXr,"RemBertTokenizerFast"),eXr.forEach(t),kto=r(Q9," (RemBERT model)"),Q9.forEach(t),Sto=i(S),Fs=n(S,"LI",{});var W9=s(Fs);mte=n(W9,"STRONG",{});var oXr=s(mte);Rto=r(oXr,"retribert"),oXr.forEach(t),Bto=r(W9," \u2014 "),cB=n(W9,"A",{href:!0});var rXr=s(cB);Pto=r(rXr,"RetriBertTokenizer"),rXr.forEach(t),Ito=r(W9," or "),fB=n(W9,"A",{href:!0});var tXr=s(fB);qto=r(tXr,"RetriBertTokenizerFast"),tXr.forEach(t),Nto=r(W9," (RetriBERT model)"),W9.forEach(t),jto=i(S),Ts=n(S,"LI",{});var H9=s(Ts);gte=n(H9,"STRONG",{});var aXr=s(gte);Dto=r(aXr,"roberta"),aXr.forEach(t),Gto=r(H9," \u2014 "),mB=n(H9,"A",{href:!0});var nXr=s(mB);Oto=r(nXr,"RobertaTokenizer"),nXr.forEach(t),Vto=r(H9," or "),gB=n(H9,"A",{href:!0});var sXr=s(gB);Xto=r(sXr,"RobertaTokenizerFast"),sXr.forEach(t),zto=r(H9," (RoBERTa model)"),H9.forEach(t),Qto=i(S),Ms=n(S,"LI",{});var U9=s(Ms);hte=n(U9,"STRONG",{});var lXr=s(hte);Wto=r(lXr,"roformer"),lXr.forEach(t),Hto=r(U9," \u2014 "),hB=n(U9,"A",{href:!0});var iXr=s(hB);Uto=r(iXr,"RoFormerTokenizer"),iXr.forEach(t),Jto=r(U9," or "),pB=n(U9,"A",{href:!0});var dXr=s(pB);Yto=r(dXr,"RoFormerTokenizerFast"),dXr.forEach(t),Kto=r(U9," (RoFormer model)"),U9.forEach(t),Zto=i(S),Ng=n(S,"LI",{});var x5e=s(Ng);pte=n(x5e,"STRONG",{});var cXr=s(pte);eao=r(cXr,"speech_to_text"),cXr.forEach(t),oao=r(x5e," \u2014 "),uB=n(x5e,"A",{href:!0});var fXr=s(uB);rao=r(fXr,"Speech2TextTokenizer"),fXr.forEach(t),tao=r(x5e," (Speech2Text model)"),x5e.forEach(t),aao=i(S),jg=n(S,"LI",{});var $5e=s(jg);ute=n($5e,"STRONG",{});var mXr=s(ute);nao=r(mXr,"speech_to_text_2"),mXr.forEach(t),sao=r($5e," \u2014 "),_B=n($5e,"A",{href:!0});var gXr=s(_B);lao=r(gXr,"Speech2Text2Tokenizer"),gXr.forEach(t),iao=r($5e," (Speech2Text2 model)"),$5e.forEach(t),dao=i(S),Es=n(S,"LI",{});var J9=s(Es);_te=n(J9,"STRONG",{});var hXr=s(_te);cao=r(hXr,"splinter"),hXr.forEach(t),fao=r(J9," \u2014 "),bB=n(J9,"A",{href:!0});var pXr=s(bB);mao=r(pXr,"SplinterTokenizer"),pXr.forEach(t),gao=r(J9," or "),vB=n(J9,"A",{href:!0});var uXr=s(vB);hao=r(uXr,"SplinterTokenizerFast"),uXr.forEach(t),pao=r(J9," (Splinter model)"),J9.forEach(t),uao=i(S),Cs=n(S,"LI",{});var Y9=s(Cs);bte=n(Y9,"STRONG",{});var _Xr=s(bte);_ao=r(_Xr,"squeezebert"),_Xr.forEach(t),bao=r(Y9," \u2014 "),FB=n(Y9,"A",{href:!0});var bXr=s(FB);vao=r(bXr,"SqueezeBertTokenizer"),bXr.forEach(t),Fao=r(Y9," or "),TB=n(Y9,"A",{href:!0});var vXr=s(TB);Tao=r(vXr,"SqueezeBertTokenizerFast"),vXr.forEach(t),Mao=r(Y9," (SqueezeBERT model)"),Y9.forEach(t),Eao=i(S),ws=n(S,"LI",{});var K9=s(ws);vte=n(K9,"STRONG",{});var FXr=s(vte);Cao=r(FXr,"t5"),FXr.forEach(t),wao=r(K9," \u2014 "),MB=n(K9,"A",{href:!0});var TXr=s(MB);Aao=r(TXr,"T5Tokenizer"),TXr.forEach(t),yao=r(K9," or "),EB=n(K9,"A",{href:!0});var MXr=s(EB);Lao=r(MXr,"T5TokenizerFast"),MXr.forEach(t),xao=r(K9," (T5 model)"),K9.forEach(t),$ao=i(S),Dg=n(S,"LI",{});var k5e=s(Dg);Fte=n(k5e,"STRONG",{});var EXr=s(Fte);kao=r(EXr,"tapas"),EXr.forEach(t),Sao=r(k5e," \u2014 "),CB=n(k5e,"A",{href:!0});var CXr=s(CB);Rao=r(CXr,"TapasTokenizer"),CXr.forEach(t),Bao=r(k5e," (TAPAS model)"),k5e.forEach(t),Pao=i(S),Gg=n(S,"LI",{});var S5e=s(Gg);Tte=n(S5e,"STRONG",{});var wXr=s(Tte);Iao=r(wXr,"tapex"),wXr.forEach(t),qao=r(S5e," \u2014 "),wB=n(S5e,"A",{href:!0});var AXr=s(wB);Nao=r(AXr,"TapexTokenizer"),AXr.forEach(t),jao=r(S5e," (TAPEX model)"),S5e.forEach(t),Dao=i(S),Og=n(S,"LI",{});var R5e=s(Og);Mte=n(R5e,"STRONG",{});var yXr=s(Mte);Gao=r(yXr,"transfo-xl"),yXr.forEach(t),Oao=r(R5e," \u2014 "),AB=n(R5e,"A",{href:!0});var LXr=s(AB);Vao=r(LXr,"TransfoXLTokenizer"),LXr.forEach(t),Xao=r(R5e," (Transformer-XL model)"),R5e.forEach(t),zao=i(S),As=n(S,"LI",{});var Z9=s(As);Ete=n(Z9,"STRONG",{});var xXr=s(Ete);Qao=r(xXr,"visual_bert"),xXr.forEach(t),Wao=r(Z9," \u2014 "),yB=n(Z9,"A",{href:!0});var $Xr=s(yB);Hao=r($Xr,"BertTokenizer"),$Xr.forEach(t),Uao=r(Z9," or "),LB=n(Z9,"A",{href:!0});var kXr=s(LB);Jao=r(kXr,"BertTokenizerFast"),kXr.forEach(t),Yao=r(Z9," (VisualBert model)"),Z9.forEach(t),Kao=i(S),Vg=n(S,"LI",{});var B5e=s(Vg);Cte=n(B5e,"STRONG",{});var SXr=s(Cte);Zao=r(SXr,"wav2vec2"),SXr.forEach(t),eno=r(B5e," \u2014 "),xB=n(B5e,"A",{href:!0});var RXr=s(xB);ono=r(RXr,"Wav2Vec2CTCTokenizer"),RXr.forEach(t),rno=r(B5e," (Wav2Vec2 model)"),B5e.forEach(t),tno=i(S),Xg=n(S,"LI",{});var P5e=s(Xg);wte=n(P5e,"STRONG",{});var BXr=s(wte);ano=r(BXr,"wav2vec2_phoneme"),BXr.forEach(t),nno=r(P5e," \u2014 "),$B=n(P5e,"A",{href:!0});var PXr=s($B);sno=r(PXr,"Wav2Vec2PhonemeCTCTokenizer"),PXr.forEach(t),lno=r(P5e," (Wav2Vec2Phoneme model)"),P5e.forEach(t),ino=i(S),ys=n(S,"LI",{});var e$=s(ys);Ate=n(e$,"STRONG",{});var IXr=s(Ate);dno=r(IXr,"xglm"),IXr.forEach(t),cno=r(e$," \u2014 "),kB=n(e$,"A",{href:!0});var qXr=s(kB);fno=r(qXr,"XGLMTokenizer"),qXr.forEach(t),mno=r(e$," or "),SB=n(e$,"A",{href:!0});var NXr=s(SB);gno=r(NXr,"XGLMTokenizerFast"),NXr.forEach(t),hno=r(e$," (XGLM model)"),e$.forEach(t),pno=i(S),zg=n(S,"LI",{});var I5e=s(zg);yte=n(I5e,"STRONG",{});var jXr=s(yte);uno=r(jXr,"xlm"),jXr.forEach(t),_no=r(I5e," \u2014 "),RB=n(I5e,"A",{href:!0});var DXr=s(RB);bno=r(DXr,"XLMTokenizer"),DXr.forEach(t),vno=r(I5e," (XLM model)"),I5e.forEach(t),Fno=i(S),Qg=n(S,"LI",{});var q5e=s(Qg);Lte=n(q5e,"STRONG",{});var GXr=s(Lte);Tno=r(GXr,"xlm-prophetnet"),GXr.forEach(t),Mno=r(q5e," \u2014 "),BB=n(q5e,"A",{href:!0});var OXr=s(BB);Eno=r(OXr,"XLMProphetNetTokenizer"),OXr.forEach(t),Cno=r(q5e," (XLMProphetNet model)"),q5e.forEach(t),wno=i(S),Ls=n(S,"LI",{});var o$=s(Ls);xte=n(o$,"STRONG",{});var VXr=s(xte);Ano=r(VXr,"xlm-roberta"),VXr.forEach(t),yno=r(o$," \u2014 "),PB=n(o$,"A",{href:!0});var XXr=s(PB);Lno=r(XXr,"XLMRobertaTokenizer"),XXr.forEach(t),xno=r(o$," or "),IB=n(o$,"A",{href:!0});var zXr=s(IB);$no=r(zXr,"XLMRobertaTokenizerFast"),zXr.forEach(t),kno=r(o$," (XLM-RoBERTa model)"),o$.forEach(t),Sno=i(S),xs=n(S,"LI",{});var r$=s(xs);$te=n(r$,"STRONG",{});var QXr=s($te);Rno=r(QXr,"xlm-roberta-xl"),QXr.forEach(t),Bno=r(r$," \u2014 "),qB=n(r$,"A",{href:!0});var WXr=s(qB);Pno=r(WXr,"RobertaTokenizer"),WXr.forEach(t),Ino=r(r$," or "),NB=n(r$,"A",{href:!0});var HXr=s(NB);qno=r(HXr,"RobertaTokenizerFast"),HXr.forEach(t),Nno=r(r$," (XLM-RoBERTa-XL model)"),r$.forEach(t),jno=i(S),$s=n(S,"LI",{});var t$=s($s);kte=n(t$,"STRONG",{});var UXr=s(kte);Dno=r(UXr,"xlnet"),UXr.forEach(t),Gno=r(t$," \u2014 "),jB=n(t$,"A",{href:!0});var JXr=s(jB);Ono=r(JXr,"XLNetTokenizer"),JXr.forEach(t),Vno=r(t$," or "),DB=n(t$,"A",{href:!0});var YXr=s(DB);Xno=r(YXr,"XLNetTokenizerFast"),YXr.forEach(t),zno=r(t$," (XLNet model)"),t$.forEach(t),Qno=i(S),ks=n(S,"LI",{});var a$=s(ks);Ste=n(a$,"STRONG",{});var KXr=s(Ste);Wno=r(KXr,"yoso"),KXr.forEach(t),Hno=r(a$," \u2014 "),GB=n(a$,"A",{href:!0});var ZXr=s(GB);Uno=r(ZXr,"AlbertTokenizer"),ZXr.forEach(t),Jno=r(a$," or "),OB=n(a$,"A",{href:!0});var ezr=s(OB);Yno=r(ezr,"AlbertTokenizerFast"),ezr.forEach(t),Kno=r(a$," (YOSO model)"),a$.forEach(t),S.forEach(t),Zno=i(Is),T(Wg.$$.fragment,Is),Is.forEach(t),eso=i(Ps),Hg=n(Ps,"DIV",{class:!0});var yqe=s(Hg);T(ay.$$.fragment,yqe),oso=i(yqe),Rte=n(yqe,"P",{});var ozr=s(Rte);rso=r(ozr,"Register a new tokenizer in this mapping."),ozr.forEach(t),yqe.forEach(t),Ps.forEach(t),LPe=i(f),bi=n(f,"H2",{class:!0});var Lqe=s(bi);Ug=n(Lqe,"A",{id:!0,class:!0,href:!0});var rzr=s(Ug);Bte=n(rzr,"SPAN",{});var tzr=s(Bte);T(ny.$$.fragment,tzr),tzr.forEach(t),rzr.forEach(t),tso=i(Lqe),Pte=n(Lqe,"SPAN",{});var azr=s(Pte);aso=r(azr,"AutoFeatureExtractor"),azr.forEach(t),Lqe.forEach(t),xPe=i(f),Ao=n(f,"DIV",{class:!0});var qs=s(Ao);T(sy.$$.fragment,qs),nso=i(qs),ly=n(qs,"P",{});var xqe=s(ly);sso=r(xqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),VB=n(xqe,"A",{href:!0});var nzr=s(VB);lso=r(nzr,"AutoFeatureExtractor.from_pretrained()"),nzr.forEach(t),iso=r(xqe," class method."),xqe.forEach(t),dso=i(qs),iy=n(qs,"P",{});var $qe=s(iy);cso=r($qe,"This class cannot be instantiated directly using "),Ite=n($qe,"CODE",{});var szr=s(Ite);fso=r(szr,"__init__()"),szr.forEach(t),mso=r($qe," (throws an error)."),$qe.forEach(t),gso=i(qs),We=n(qs,"DIV",{class:!0});var Yt=s(We);T(dy.$$.fragment,Yt),hso=i(Yt),qte=n(Yt,"P",{});var lzr=s(qte);pso=r(lzr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),lzr.forEach(t),uso=i(Yt),wa=n(Yt,"P",{});var W3=s(wa);_so=r(W3,"The feature extractor class to instantiate is selected based on the "),Nte=n(W3,"CODE",{});var izr=s(Nte);bso=r(izr,"model_type"),izr.forEach(t),vso=r(W3,` property of the config object
(either passed as an argument or loaded from `),jte=n(W3,"CODE",{});var dzr=s(jte);Fso=r(dzr,"pretrained_model_name_or_path"),dzr.forEach(t),Tso=r(W3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Dte=n(W3,"CODE",{});var czr=s(Dte);Mso=r(czr,"pretrained_model_name_or_path"),czr.forEach(t),Eso=r(W3,":"),W3.forEach(t),Cso=i(Yt),oe=n(Yt,"UL",{});var ae=s(oe);Jg=n(ae,"LI",{});var N5e=s(Jg);Gte=n(N5e,"STRONG",{});var fzr=s(Gte);wso=r(fzr,"beit"),fzr.forEach(t),Aso=r(N5e," \u2014 "),XB=n(N5e,"A",{href:!0});var mzr=s(XB);yso=r(mzr,"BeitFeatureExtractor"),mzr.forEach(t),Lso=r(N5e," (BEiT model)"),N5e.forEach(t),xso=i(ae),Yg=n(ae,"LI",{});var j5e=s(Yg);Ote=n(j5e,"STRONG",{});var gzr=s(Ote);$so=r(gzr,"clip"),gzr.forEach(t),kso=r(j5e," \u2014 "),zB=n(j5e,"A",{href:!0});var hzr=s(zB);Sso=r(hzr,"CLIPFeatureExtractor"),hzr.forEach(t),Rso=r(j5e," (CLIP model)"),j5e.forEach(t),Bso=i(ae),Kg=n(ae,"LI",{});var D5e=s(Kg);Vte=n(D5e,"STRONG",{});var pzr=s(Vte);Pso=r(pzr,"convnext"),pzr.forEach(t),Iso=r(D5e," \u2014 "),QB=n(D5e,"A",{href:!0});var uzr=s(QB);qso=r(uzr,"ConvNextFeatureExtractor"),uzr.forEach(t),Nso=r(D5e," (ConvNext model)"),D5e.forEach(t),jso=i(ae),Zg=n(ae,"LI",{});var G5e=s(Zg);Xte=n(G5e,"STRONG",{});var _zr=s(Xte);Dso=r(_zr,"data2vec-audio"),_zr.forEach(t),Gso=r(G5e," \u2014 "),WB=n(G5e,"A",{href:!0});var bzr=s(WB);Oso=r(bzr,"Wav2Vec2FeatureExtractor"),bzr.forEach(t),Vso=r(G5e," (Data2VecAudio model)"),G5e.forEach(t),Xso=i(ae),eh=n(ae,"LI",{});var O5e=s(eh);zte=n(O5e,"STRONG",{});var vzr=s(zte);zso=r(vzr,"data2vec-vision"),vzr.forEach(t),Qso=r(O5e," \u2014 "),HB=n(O5e,"A",{href:!0});var Fzr=s(HB);Wso=r(Fzr,"BeitFeatureExtractor"),Fzr.forEach(t),Hso=r(O5e," (Data2VecVision model)"),O5e.forEach(t),Uso=i(ae),oh=n(ae,"LI",{});var V5e=s(oh);Qte=n(V5e,"STRONG",{});var Tzr=s(Qte);Jso=r(Tzr,"deit"),Tzr.forEach(t),Yso=r(V5e," \u2014 "),UB=n(V5e,"A",{href:!0});var Mzr=s(UB);Kso=r(Mzr,"DeiTFeatureExtractor"),Mzr.forEach(t),Zso=r(V5e," (DeiT model)"),V5e.forEach(t),elo=i(ae),rh=n(ae,"LI",{});var X5e=s(rh);Wte=n(X5e,"STRONG",{});var Ezr=s(Wte);olo=r(Ezr,"detr"),Ezr.forEach(t),rlo=r(X5e," \u2014 "),JB=n(X5e,"A",{href:!0});var Czr=s(JB);tlo=r(Czr,"DetrFeatureExtractor"),Czr.forEach(t),alo=r(X5e," (DETR model)"),X5e.forEach(t),nlo=i(ae),th=n(ae,"LI",{});var z5e=s(th);Hte=n(z5e,"STRONG",{});var wzr=s(Hte);slo=r(wzr,"dpt"),wzr.forEach(t),llo=r(z5e," \u2014 "),YB=n(z5e,"A",{href:!0});var Azr=s(YB);ilo=r(Azr,"DPTFeatureExtractor"),Azr.forEach(t),dlo=r(z5e," (DPT model)"),z5e.forEach(t),clo=i(ae),ah=n(ae,"LI",{});var Q5e=s(ah);Ute=n(Q5e,"STRONG",{});var yzr=s(Ute);flo=r(yzr,"glpn"),yzr.forEach(t),mlo=r(Q5e," \u2014 "),KB=n(Q5e,"A",{href:!0});var Lzr=s(KB);glo=r(Lzr,"GLPNFeatureExtractor"),Lzr.forEach(t),hlo=r(Q5e," (GLPN model)"),Q5e.forEach(t),plo=i(ae),nh=n(ae,"LI",{});var W5e=s(nh);Jte=n(W5e,"STRONG",{});var xzr=s(Jte);ulo=r(xzr,"hubert"),xzr.forEach(t),_lo=r(W5e," \u2014 "),ZB=n(W5e,"A",{href:!0});var $zr=s(ZB);blo=r($zr,"Wav2Vec2FeatureExtractor"),$zr.forEach(t),vlo=r(W5e," (Hubert model)"),W5e.forEach(t),Flo=i(ae),sh=n(ae,"LI",{});var H5e=s(sh);Yte=n(H5e,"STRONG",{});var kzr=s(Yte);Tlo=r(kzr,"layoutlmv2"),kzr.forEach(t),Mlo=r(H5e," \u2014 "),eP=n(H5e,"A",{href:!0});var Szr=s(eP);Elo=r(Szr,"LayoutLMv2FeatureExtractor"),Szr.forEach(t),Clo=r(H5e," (LayoutLMv2 model)"),H5e.forEach(t),wlo=i(ae),lh=n(ae,"LI",{});var U5e=s(lh);Kte=n(U5e,"STRONG",{});var Rzr=s(Kte);Alo=r(Rzr,"maskformer"),Rzr.forEach(t),ylo=r(U5e," \u2014 "),oP=n(U5e,"A",{href:!0});var Bzr=s(oP);Llo=r(Bzr,"MaskFormerFeatureExtractor"),Bzr.forEach(t),xlo=r(U5e," (MaskFormer model)"),U5e.forEach(t),$lo=i(ae),ih=n(ae,"LI",{});var J5e=s(ih);Zte=n(J5e,"STRONG",{});var Pzr=s(Zte);klo=r(Pzr,"mctct"),Pzr.forEach(t),Slo=r(J5e," \u2014 "),rP=n(J5e,"A",{href:!0});var Izr=s(rP);Rlo=r(Izr,"MCTCTFeatureExtractor"),Izr.forEach(t),Blo=r(J5e," (MCTCT model)"),J5e.forEach(t),Plo=i(ae),dh=n(ae,"LI",{});var Y5e=s(dh);eae=n(Y5e,"STRONG",{});var qzr=s(eae);Ilo=r(qzr,"perceiver"),qzr.forEach(t),qlo=r(Y5e," \u2014 "),tP=n(Y5e,"A",{href:!0});var Nzr=s(tP);Nlo=r(Nzr,"PerceiverFeatureExtractor"),Nzr.forEach(t),jlo=r(Y5e," (Perceiver model)"),Y5e.forEach(t),Dlo=i(ae),ch=n(ae,"LI",{});var K5e=s(ch);oae=n(K5e,"STRONG",{});var jzr=s(oae);Glo=r(jzr,"poolformer"),jzr.forEach(t),Olo=r(K5e," \u2014 "),aP=n(K5e,"A",{href:!0});var Dzr=s(aP);Vlo=r(Dzr,"PoolFormerFeatureExtractor"),Dzr.forEach(t),Xlo=r(K5e," (PoolFormer model)"),K5e.forEach(t),zlo=i(ae),fh=n(ae,"LI",{});var Z5e=s(fh);rae=n(Z5e,"STRONG",{});var Gzr=s(rae);Qlo=r(Gzr,"regnet"),Gzr.forEach(t),Wlo=r(Z5e," \u2014 "),nP=n(Z5e,"A",{href:!0});var Ozr=s(nP);Hlo=r(Ozr,"ConvNextFeatureExtractor"),Ozr.forEach(t),Ulo=r(Z5e," (RegNet model)"),Z5e.forEach(t),Jlo=i(ae),mh=n(ae,"LI",{});var e3e=s(mh);tae=n(e3e,"STRONG",{});var Vzr=s(tae);Ylo=r(Vzr,"resnet"),Vzr.forEach(t),Klo=r(e3e," \u2014 "),sP=n(e3e,"A",{href:!0});var Xzr=s(sP);Zlo=r(Xzr,"ConvNextFeatureExtractor"),Xzr.forEach(t),eio=r(e3e," (ResNet model)"),e3e.forEach(t),oio=i(ae),gh=n(ae,"LI",{});var o3e=s(gh);aae=n(o3e,"STRONG",{});var zzr=s(aae);rio=r(zzr,"segformer"),zzr.forEach(t),tio=r(o3e," \u2014 "),lP=n(o3e,"A",{href:!0});var Qzr=s(lP);aio=r(Qzr,"SegformerFeatureExtractor"),Qzr.forEach(t),nio=r(o3e," (SegFormer model)"),o3e.forEach(t),sio=i(ae),hh=n(ae,"LI",{});var r3e=s(hh);nae=n(r3e,"STRONG",{});var Wzr=s(nae);lio=r(Wzr,"speech_to_text"),Wzr.forEach(t),iio=r(r3e," \u2014 "),iP=n(r3e,"A",{href:!0});var Hzr=s(iP);dio=r(Hzr,"Speech2TextFeatureExtractor"),Hzr.forEach(t),cio=r(r3e," (Speech2Text model)"),r3e.forEach(t),fio=i(ae),ph=n(ae,"LI",{});var t3e=s(ph);sae=n(t3e,"STRONG",{});var Uzr=s(sae);mio=r(Uzr,"swin"),Uzr.forEach(t),gio=r(t3e," \u2014 "),dP=n(t3e,"A",{href:!0});var Jzr=s(dP);hio=r(Jzr,"ViTFeatureExtractor"),Jzr.forEach(t),pio=r(t3e," (Swin model)"),t3e.forEach(t),uio=i(ae),uh=n(ae,"LI",{});var a3e=s(uh);lae=n(a3e,"STRONG",{});var Yzr=s(lae);_io=r(Yzr,"van"),Yzr.forEach(t),bio=r(a3e," \u2014 "),cP=n(a3e,"A",{href:!0});var Kzr=s(cP);vio=r(Kzr,"ConvNextFeatureExtractor"),Kzr.forEach(t),Fio=r(a3e," (VAN model)"),a3e.forEach(t),Tio=i(ae),_h=n(ae,"LI",{});var n3e=s(_h);iae=n(n3e,"STRONG",{});var Zzr=s(iae);Mio=r(Zzr,"vit"),Zzr.forEach(t),Eio=r(n3e," \u2014 "),fP=n(n3e,"A",{href:!0});var eQr=s(fP);Cio=r(eQr,"ViTFeatureExtractor"),eQr.forEach(t),wio=r(n3e," (ViT model)"),n3e.forEach(t),Aio=i(ae),bh=n(ae,"LI",{});var s3e=s(bh);dae=n(s3e,"STRONG",{});var oQr=s(dae);yio=r(oQr,"vit_mae"),oQr.forEach(t),Lio=r(s3e," \u2014 "),mP=n(s3e,"A",{href:!0});var rQr=s(mP);xio=r(rQr,"ViTFeatureExtractor"),rQr.forEach(t),$io=r(s3e," (ViTMAE model)"),s3e.forEach(t),kio=i(ae),vh=n(ae,"LI",{});var l3e=s(vh);cae=n(l3e,"STRONG",{});var tQr=s(cae);Sio=r(tQr,"wav2vec2"),tQr.forEach(t),Rio=r(l3e," \u2014 "),gP=n(l3e,"A",{href:!0});var aQr=s(gP);Bio=r(aQr,"Wav2Vec2FeatureExtractor"),aQr.forEach(t),Pio=r(l3e," (Wav2Vec2 model)"),l3e.forEach(t),Iio=i(ae),Fh=n(ae,"LI",{});var i3e=s(Fh);fae=n(i3e,"STRONG",{});var nQr=s(fae);qio=r(nQr,"yolos"),nQr.forEach(t),Nio=r(i3e," \u2014 "),hP=n(i3e,"A",{href:!0});var sQr=s(hP);jio=r(sQr,"YolosFeatureExtractor"),sQr.forEach(t),Dio=r(i3e," (YOLOS model)"),i3e.forEach(t),ae.forEach(t),Gio=i(Yt),T(Th.$$.fragment,Yt),Oio=i(Yt),T(Mh.$$.fragment,Yt),Yt.forEach(t),Vio=i(qs),Eh=n(qs,"DIV",{class:!0});var kqe=s(Eh);T(cy.$$.fragment,kqe),Xio=i(kqe),mae=n(kqe,"P",{});var lQr=s(mae);zio=r(lQr,"Register a new feature extractor for this class."),lQr.forEach(t),kqe.forEach(t),qs.forEach(t),$Pe=i(f),vi=n(f,"H2",{class:!0});var Sqe=s(vi);Ch=n(Sqe,"A",{id:!0,class:!0,href:!0});var iQr=s(Ch);gae=n(iQr,"SPAN",{});var dQr=s(gae);T(fy.$$.fragment,dQr),dQr.forEach(t),iQr.forEach(t),Qio=i(Sqe),hae=n(Sqe,"SPAN",{});var cQr=s(hae);Wio=r(cQr,"AutoProcessor"),cQr.forEach(t),Sqe.forEach(t),kPe=i(f),yo=n(f,"DIV",{class:!0});var Ns=s(yo);T(my.$$.fragment,Ns),Hio=i(Ns),gy=n(Ns,"P",{});var Rqe=s(gy);Uio=r(Rqe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),pP=n(Rqe,"A",{href:!0});var fQr=s(pP);Jio=r(fQr,"AutoProcessor.from_pretrained()"),fQr.forEach(t),Yio=r(Rqe," class method."),Rqe.forEach(t),Kio=i(Ns),hy=n(Ns,"P",{});var Bqe=s(hy);Zio=r(Bqe,"This class cannot be instantiated directly using "),pae=n(Bqe,"CODE",{});var mQr=s(pae);edo=r(mQr,"__init__()"),mQr.forEach(t),odo=r(Bqe," (throws an error)."),Bqe.forEach(t),rdo=i(Ns),He=n(Ns,"DIV",{class:!0});var Kt=s(He);T(py.$$.fragment,Kt),tdo=i(Kt),uae=n(Kt,"P",{});var gQr=s(uae);ado=r(gQr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),gQr.forEach(t),ndo=i(Kt),Fi=n(Kt,"P",{});var JY=s(Fi);sdo=r(JY,"The processor class to instantiate is selected based on the "),_ae=n(JY,"CODE",{});var hQr=s(_ae);ldo=r(hQr,"model_type"),hQr.forEach(t),ido=r(JY,` property of the config object (either
passed as an argument or loaded from `),bae=n(JY,"CODE",{});var pQr=s(bae);ddo=r(pQr,"pretrained_model_name_or_path"),pQr.forEach(t),cdo=r(JY," if possible):"),JY.forEach(t),fdo=i(Kt),be=n(Kt,"UL",{});var Fe=s(be);wh=n(Fe,"LI",{});var d3e=s(wh);vae=n(d3e,"STRONG",{});var uQr=s(vae);mdo=r(uQr,"clip"),uQr.forEach(t),gdo=r(d3e," \u2014 "),uP=n(d3e,"A",{href:!0});var _Qr=s(uP);hdo=r(_Qr,"CLIPProcessor"),_Qr.forEach(t),pdo=r(d3e," (CLIP model)"),d3e.forEach(t),udo=i(Fe),Ah=n(Fe,"LI",{});var c3e=s(Ah);Fae=n(c3e,"STRONG",{});var bQr=s(Fae);_do=r(bQr,"layoutlmv2"),bQr.forEach(t),bdo=r(c3e," \u2014 "),_P=n(c3e,"A",{href:!0});var vQr=s(_P);vdo=r(vQr,"LayoutLMv2Processor"),vQr.forEach(t),Fdo=r(c3e," (LayoutLMv2 model)"),c3e.forEach(t),Tdo=i(Fe),yh=n(Fe,"LI",{});var f3e=s(yh);Tae=n(f3e,"STRONG",{});var FQr=s(Tae);Mdo=r(FQr,"layoutxlm"),FQr.forEach(t),Edo=r(f3e," \u2014 "),bP=n(f3e,"A",{href:!0});var TQr=s(bP);Cdo=r(TQr,"LayoutXLMProcessor"),TQr.forEach(t),wdo=r(f3e," (LayoutXLM model)"),f3e.forEach(t),Ado=i(Fe),Lh=n(Fe,"LI",{});var m3e=s(Lh);Mae=n(m3e,"STRONG",{});var MQr=s(Mae);ydo=r(MQr,"sew"),MQr.forEach(t),Ldo=r(m3e," \u2014 "),vP=n(m3e,"A",{href:!0});var EQr=s(vP);xdo=r(EQr,"Wav2Vec2Processor"),EQr.forEach(t),$do=r(m3e," (SEW model)"),m3e.forEach(t),kdo=i(Fe),xh=n(Fe,"LI",{});var g3e=s(xh);Eae=n(g3e,"STRONG",{});var CQr=s(Eae);Sdo=r(CQr,"sew-d"),CQr.forEach(t),Rdo=r(g3e," \u2014 "),FP=n(g3e,"A",{href:!0});var wQr=s(FP);Bdo=r(wQr,"Wav2Vec2Processor"),wQr.forEach(t),Pdo=r(g3e," (SEW-D model)"),g3e.forEach(t),Ido=i(Fe),$h=n(Fe,"LI",{});var h3e=s($h);Cae=n(h3e,"STRONG",{});var AQr=s(Cae);qdo=r(AQr,"speech_to_text"),AQr.forEach(t),Ndo=r(h3e," \u2014 "),TP=n(h3e,"A",{href:!0});var yQr=s(TP);jdo=r(yQr,"Speech2TextProcessor"),yQr.forEach(t),Ddo=r(h3e," (Speech2Text model)"),h3e.forEach(t),Gdo=i(Fe),kh=n(Fe,"LI",{});var p3e=s(kh);wae=n(p3e,"STRONG",{});var LQr=s(wae);Odo=r(LQr,"speech_to_text_2"),LQr.forEach(t),Vdo=r(p3e," \u2014 "),MP=n(p3e,"A",{href:!0});var xQr=s(MP);Xdo=r(xQr,"Speech2Text2Processor"),xQr.forEach(t),zdo=r(p3e," (Speech2Text2 model)"),p3e.forEach(t),Qdo=i(Fe),Sh=n(Fe,"LI",{});var u3e=s(Sh);Aae=n(u3e,"STRONG",{});var $Qr=s(Aae);Wdo=r($Qr,"trocr"),$Qr.forEach(t),Hdo=r(u3e," \u2014 "),EP=n(u3e,"A",{href:!0});var kQr=s(EP);Udo=r(kQr,"TrOCRProcessor"),kQr.forEach(t),Jdo=r(u3e," (TrOCR model)"),u3e.forEach(t),Ydo=i(Fe),Rh=n(Fe,"LI",{});var _3e=s(Rh);yae=n(_3e,"STRONG",{});var SQr=s(yae);Kdo=r(SQr,"unispeech"),SQr.forEach(t),Zdo=r(_3e," \u2014 "),CP=n(_3e,"A",{href:!0});var RQr=s(CP);eco=r(RQr,"Wav2Vec2Processor"),RQr.forEach(t),oco=r(_3e," (UniSpeech model)"),_3e.forEach(t),rco=i(Fe),Bh=n(Fe,"LI",{});var b3e=s(Bh);Lae=n(b3e,"STRONG",{});var BQr=s(Lae);tco=r(BQr,"unispeech-sat"),BQr.forEach(t),aco=r(b3e," \u2014 "),wP=n(b3e,"A",{href:!0});var PQr=s(wP);nco=r(PQr,"Wav2Vec2Processor"),PQr.forEach(t),sco=r(b3e," (UniSpeechSat model)"),b3e.forEach(t),lco=i(Fe),Ph=n(Fe,"LI",{});var v3e=s(Ph);xae=n(v3e,"STRONG",{});var IQr=s(xae);ico=r(IQr,"vilt"),IQr.forEach(t),dco=r(v3e," \u2014 "),AP=n(v3e,"A",{href:!0});var qQr=s(AP);cco=r(qQr,"ViltProcessor"),qQr.forEach(t),fco=r(v3e," (ViLT model)"),v3e.forEach(t),mco=i(Fe),Ih=n(Fe,"LI",{});var F3e=s(Ih);$ae=n(F3e,"STRONG",{});var NQr=s($ae);gco=r(NQr,"vision-text-dual-encoder"),NQr.forEach(t),hco=r(F3e," \u2014 "),yP=n(F3e,"A",{href:!0});var jQr=s(yP);pco=r(jQr,"VisionTextDualEncoderProcessor"),jQr.forEach(t),uco=r(F3e," (VisionTextDualEncoder model)"),F3e.forEach(t),_co=i(Fe),qh=n(Fe,"LI",{});var T3e=s(qh);kae=n(T3e,"STRONG",{});var DQr=s(kae);bco=r(DQr,"wav2vec2"),DQr.forEach(t),vco=r(T3e," \u2014 "),LP=n(T3e,"A",{href:!0});var GQr=s(LP);Fco=r(GQr,"Wav2Vec2Processor"),GQr.forEach(t),Tco=r(T3e," (Wav2Vec2 model)"),T3e.forEach(t),Mco=i(Fe),Nh=n(Fe,"LI",{});var M3e=s(Nh);Sae=n(M3e,"STRONG",{});var OQr=s(Sae);Eco=r(OQr,"wavlm"),OQr.forEach(t),Cco=r(M3e," \u2014 "),xP=n(M3e,"A",{href:!0});var VQr=s(xP);wco=r(VQr,"Wav2Vec2Processor"),VQr.forEach(t),Aco=r(M3e," (WavLM model)"),M3e.forEach(t),Fe.forEach(t),yco=i(Kt),T(jh.$$.fragment,Kt),Lco=i(Kt),T(Dh.$$.fragment,Kt),Kt.forEach(t),xco=i(Ns),Gh=n(Ns,"DIV",{class:!0});var Pqe=s(Gh);T(uy.$$.fragment,Pqe),$co=i(Pqe),Rae=n(Pqe,"P",{});var XQr=s(Rae);kco=r(XQr,"Register a new processor for this class."),XQr.forEach(t),Pqe.forEach(t),Ns.forEach(t),SPe=i(f),Ti=n(f,"H2",{class:!0});var Iqe=s(Ti);Oh=n(Iqe,"A",{id:!0,class:!0,href:!0});var zQr=s(Oh);Bae=n(zQr,"SPAN",{});var QQr=s(Bae);T(_y.$$.fragment,QQr),QQr.forEach(t),zQr.forEach(t),Sco=i(Iqe),Pae=n(Iqe,"SPAN",{});var WQr=s(Pae);Rco=r(WQr,"AutoModel"),WQr.forEach(t),Iqe.forEach(t),RPe=i(f),Lo=n(f,"DIV",{class:!0});var js=s(Lo);T(by.$$.fragment,js),Bco=i(js),Mi=n(js,"P",{});var YY=s(Mi);Pco=r(YY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$P=n(YY,"A",{href:!0});var HQr=s($P);Ico=r(HQr,"from_pretrained()"),HQr.forEach(t),qco=r(YY," class method or the "),kP=n(YY,"A",{href:!0});var UQr=s(kP);Nco=r(UQr,"from_config()"),UQr.forEach(t),jco=r(YY,` class
method.`),YY.forEach(t),Dco=i(js),vy=n(js,"P",{});var qqe=s(vy);Gco=r(qqe,"This class cannot be instantiated directly using "),Iae=n(qqe,"CODE",{});var JQr=s(Iae);Oco=r(JQr,"__init__()"),JQr.forEach(t),Vco=r(qqe," (throws an error)."),qqe.forEach(t),Xco=i(js),ot=n(js,"DIV",{class:!0});var H3=s(ot);T(Fy.$$.fragment,H3),zco=i(H3),qae=n(H3,"P",{});var YQr=s(qae);Qco=r(YQr,"Instantiates one of the base model classes of the library from a configuration."),YQr.forEach(t),Wco=i(H3),Ei=n(H3,"P",{});var KY=s(Ei);Hco=r(KY,`Note:
Loading a model from its configuration file does `),Nae=n(KY,"STRONG",{});var KQr=s(Nae);Uco=r(KQr,"not"),KQr.forEach(t),Jco=r(KY,` load the model weights. It only affects the
model\u2019s configuration. Use `),SP=n(KY,"A",{href:!0});var ZQr=s(SP);Yco=r(ZQr,"from_pretrained()"),ZQr.forEach(t),Kco=r(KY," to load the model weights."),KY.forEach(t),Zco=i(H3),T(Vh.$$.fragment,H3),H3.forEach(t),efo=i(js),Ue=n(js,"DIV",{class:!0});var Zt=s(Ue);T(Ty.$$.fragment,Zt),ofo=i(Zt),jae=n(Zt,"P",{});var eWr=s(jae);rfo=r(eWr,"Instantiate one of the base model classes of the library from a pretrained model."),eWr.forEach(t),tfo=i(Zt),Aa=n(Zt,"P",{});var U3=s(Aa);afo=r(U3,"The model class to instantiate is selected based on the "),Dae=n(U3,"CODE",{});var oWr=s(Dae);nfo=r(oWr,"model_type"),oWr.forEach(t),sfo=r(U3,` property of the config object (either
passed as an argument or loaded from `),Gae=n(U3,"CODE",{});var rWr=s(Gae);lfo=r(rWr,"pretrained_model_name_or_path"),rWr.forEach(t),ifo=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oae=n(U3,"CODE",{});var tWr=s(Oae);dfo=r(tWr,"pretrained_model_name_or_path"),tWr.forEach(t),cfo=r(U3,":"),U3.forEach(t),ffo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Xh=n($,"LI",{});var E3e=s(Xh);Vae=n(E3e,"STRONG",{});var aWr=s(Vae);mfo=r(aWr,"albert"),aWr.forEach(t),gfo=r(E3e," \u2014 "),RP=n(E3e,"A",{href:!0});var nWr=s(RP);hfo=r(nWr,"AlbertModel"),nWr.forEach(t),pfo=r(E3e," (ALBERT model)"),E3e.forEach(t),ufo=i($),zh=n($,"LI",{});var C3e=s(zh);Xae=n(C3e,"STRONG",{});var sWr=s(Xae);_fo=r(sWr,"bart"),sWr.forEach(t),bfo=r(C3e," \u2014 "),BP=n(C3e,"A",{href:!0});var lWr=s(BP);vfo=r(lWr,"BartModel"),lWr.forEach(t),Ffo=r(C3e," (BART model)"),C3e.forEach(t),Tfo=i($),Qh=n($,"LI",{});var w3e=s(Qh);zae=n(w3e,"STRONG",{});var iWr=s(zae);Mfo=r(iWr,"beit"),iWr.forEach(t),Efo=r(w3e," \u2014 "),PP=n(w3e,"A",{href:!0});var dWr=s(PP);Cfo=r(dWr,"BeitModel"),dWr.forEach(t),wfo=r(w3e," (BEiT model)"),w3e.forEach(t),Afo=i($),Wh=n($,"LI",{});var A3e=s(Wh);Qae=n(A3e,"STRONG",{});var cWr=s(Qae);yfo=r(cWr,"bert"),cWr.forEach(t),Lfo=r(A3e," \u2014 "),IP=n(A3e,"A",{href:!0});var fWr=s(IP);xfo=r(fWr,"BertModel"),fWr.forEach(t),$fo=r(A3e," (BERT model)"),A3e.forEach(t),kfo=i($),Hh=n($,"LI",{});var y3e=s(Hh);Wae=n(y3e,"STRONG",{});var mWr=s(Wae);Sfo=r(mWr,"bert-generation"),mWr.forEach(t),Rfo=r(y3e," \u2014 "),qP=n(y3e,"A",{href:!0});var gWr=s(qP);Bfo=r(gWr,"BertGenerationEncoder"),gWr.forEach(t),Pfo=r(y3e," (Bert Generation model)"),y3e.forEach(t),Ifo=i($),Uh=n($,"LI",{});var L3e=s(Uh);Hae=n(L3e,"STRONG",{});var hWr=s(Hae);qfo=r(hWr,"big_bird"),hWr.forEach(t),Nfo=r(L3e," \u2014 "),NP=n(L3e,"A",{href:!0});var pWr=s(NP);jfo=r(pWr,"BigBirdModel"),pWr.forEach(t),Dfo=r(L3e," (BigBird model)"),L3e.forEach(t),Gfo=i($),Jh=n($,"LI",{});var x3e=s(Jh);Uae=n(x3e,"STRONG",{});var uWr=s(Uae);Ofo=r(uWr,"bigbird_pegasus"),uWr.forEach(t),Vfo=r(x3e," \u2014 "),jP=n(x3e,"A",{href:!0});var _Wr=s(jP);Xfo=r(_Wr,"BigBirdPegasusModel"),_Wr.forEach(t),zfo=r(x3e," (BigBirdPegasus model)"),x3e.forEach(t),Qfo=i($),Yh=n($,"LI",{});var $3e=s(Yh);Jae=n($3e,"STRONG",{});var bWr=s(Jae);Wfo=r(bWr,"blenderbot"),bWr.forEach(t),Hfo=r($3e," \u2014 "),DP=n($3e,"A",{href:!0});var vWr=s(DP);Ufo=r(vWr,"BlenderbotModel"),vWr.forEach(t),Jfo=r($3e," (Blenderbot model)"),$3e.forEach(t),Yfo=i($),Kh=n($,"LI",{});var k3e=s(Kh);Yae=n(k3e,"STRONG",{});var FWr=s(Yae);Kfo=r(FWr,"blenderbot-small"),FWr.forEach(t),Zfo=r(k3e," \u2014 "),GP=n(k3e,"A",{href:!0});var TWr=s(GP);emo=r(TWr,"BlenderbotSmallModel"),TWr.forEach(t),omo=r(k3e," (BlenderbotSmall model)"),k3e.forEach(t),rmo=i($),Zh=n($,"LI",{});var S3e=s(Zh);Kae=n(S3e,"STRONG",{});var MWr=s(Kae);tmo=r(MWr,"camembert"),MWr.forEach(t),amo=r(S3e," \u2014 "),OP=n(S3e,"A",{href:!0});var EWr=s(OP);nmo=r(EWr,"CamembertModel"),EWr.forEach(t),smo=r(S3e," (CamemBERT model)"),S3e.forEach(t),lmo=i($),ep=n($,"LI",{});var R3e=s(ep);Zae=n(R3e,"STRONG",{});var CWr=s(Zae);imo=r(CWr,"canine"),CWr.forEach(t),dmo=r(R3e," \u2014 "),VP=n(R3e,"A",{href:!0});var wWr=s(VP);cmo=r(wWr,"CanineModel"),wWr.forEach(t),fmo=r(R3e," (Canine model)"),R3e.forEach(t),mmo=i($),op=n($,"LI",{});var B3e=s(op);ene=n(B3e,"STRONG",{});var AWr=s(ene);gmo=r(AWr,"clip"),AWr.forEach(t),hmo=r(B3e," \u2014 "),XP=n(B3e,"A",{href:!0});var yWr=s(XP);pmo=r(yWr,"CLIPModel"),yWr.forEach(t),umo=r(B3e," (CLIP model)"),B3e.forEach(t),_mo=i($),rp=n($,"LI",{});var P3e=s(rp);one=n(P3e,"STRONG",{});var LWr=s(one);bmo=r(LWr,"convbert"),LWr.forEach(t),vmo=r(P3e," \u2014 "),zP=n(P3e,"A",{href:!0});var xWr=s(zP);Fmo=r(xWr,"ConvBertModel"),xWr.forEach(t),Tmo=r(P3e," (ConvBERT model)"),P3e.forEach(t),Mmo=i($),tp=n($,"LI",{});var I3e=s(tp);rne=n(I3e,"STRONG",{});var $Wr=s(rne);Emo=r($Wr,"convnext"),$Wr.forEach(t),Cmo=r(I3e," \u2014 "),QP=n(I3e,"A",{href:!0});var kWr=s(QP);wmo=r(kWr,"ConvNextModel"),kWr.forEach(t),Amo=r(I3e," (ConvNext model)"),I3e.forEach(t),ymo=i($),ap=n($,"LI",{});var q3e=s(ap);tne=n(q3e,"STRONG",{});var SWr=s(tne);Lmo=r(SWr,"ctrl"),SWr.forEach(t),xmo=r(q3e," \u2014 "),WP=n(q3e,"A",{href:!0});var RWr=s(WP);$mo=r(RWr,"CTRLModel"),RWr.forEach(t),kmo=r(q3e," (CTRL model)"),q3e.forEach(t),Smo=i($),np=n($,"LI",{});var N3e=s(np);ane=n(N3e,"STRONG",{});var BWr=s(ane);Rmo=r(BWr,"data2vec-audio"),BWr.forEach(t),Bmo=r(N3e," \u2014 "),HP=n(N3e,"A",{href:!0});var PWr=s(HP);Pmo=r(PWr,"Data2VecAudioModel"),PWr.forEach(t),Imo=r(N3e," (Data2VecAudio model)"),N3e.forEach(t),qmo=i($),sp=n($,"LI",{});var j3e=s(sp);nne=n(j3e,"STRONG",{});var IWr=s(nne);Nmo=r(IWr,"data2vec-text"),IWr.forEach(t),jmo=r(j3e," \u2014 "),UP=n(j3e,"A",{href:!0});var qWr=s(UP);Dmo=r(qWr,"Data2VecTextModel"),qWr.forEach(t),Gmo=r(j3e," (Data2VecText model)"),j3e.forEach(t),Omo=i($),lp=n($,"LI",{});var D3e=s(lp);sne=n(D3e,"STRONG",{});var NWr=s(sne);Vmo=r(NWr,"data2vec-vision"),NWr.forEach(t),Xmo=r(D3e," \u2014 "),JP=n(D3e,"A",{href:!0});var jWr=s(JP);zmo=r(jWr,"Data2VecVisionModel"),jWr.forEach(t),Qmo=r(D3e," (Data2VecVision model)"),D3e.forEach(t),Wmo=i($),ip=n($,"LI",{});var G3e=s(ip);lne=n(G3e,"STRONG",{});var DWr=s(lne);Hmo=r(DWr,"deberta"),DWr.forEach(t),Umo=r(G3e," \u2014 "),YP=n(G3e,"A",{href:!0});var GWr=s(YP);Jmo=r(GWr,"DebertaModel"),GWr.forEach(t),Ymo=r(G3e," (DeBERTa model)"),G3e.forEach(t),Kmo=i($),dp=n($,"LI",{});var O3e=s(dp);ine=n(O3e,"STRONG",{});var OWr=s(ine);Zmo=r(OWr,"deberta-v2"),OWr.forEach(t),ego=r(O3e," \u2014 "),KP=n(O3e,"A",{href:!0});var VWr=s(KP);ogo=r(VWr,"DebertaV2Model"),VWr.forEach(t),rgo=r(O3e," (DeBERTa-v2 model)"),O3e.forEach(t),tgo=i($),cp=n($,"LI",{});var V3e=s(cp);dne=n(V3e,"STRONG",{});var XWr=s(dne);ago=r(XWr,"decision_transformer"),XWr.forEach(t),ngo=r(V3e," \u2014 "),ZP=n(V3e,"A",{href:!0});var zWr=s(ZP);sgo=r(zWr,"DecisionTransformerModel"),zWr.forEach(t),lgo=r(V3e," (Decision Transformer model)"),V3e.forEach(t),igo=i($),fp=n($,"LI",{});var X3e=s(fp);cne=n(X3e,"STRONG",{});var QWr=s(cne);dgo=r(QWr,"deit"),QWr.forEach(t),cgo=r(X3e," \u2014 "),eI=n(X3e,"A",{href:!0});var WWr=s(eI);fgo=r(WWr,"DeiTModel"),WWr.forEach(t),mgo=r(X3e," (DeiT model)"),X3e.forEach(t),ggo=i($),mp=n($,"LI",{});var z3e=s(mp);fne=n(z3e,"STRONG",{});var HWr=s(fne);hgo=r(HWr,"detr"),HWr.forEach(t),pgo=r(z3e," \u2014 "),oI=n(z3e,"A",{href:!0});var UWr=s(oI);ugo=r(UWr,"DetrModel"),UWr.forEach(t),_go=r(z3e," (DETR model)"),z3e.forEach(t),bgo=i($),gp=n($,"LI",{});var Q3e=s(gp);mne=n(Q3e,"STRONG",{});var JWr=s(mne);vgo=r(JWr,"distilbert"),JWr.forEach(t),Fgo=r(Q3e," \u2014 "),rI=n(Q3e,"A",{href:!0});var YWr=s(rI);Tgo=r(YWr,"DistilBertModel"),YWr.forEach(t),Mgo=r(Q3e," (DistilBERT model)"),Q3e.forEach(t),Ego=i($),hp=n($,"LI",{});var W3e=s(hp);gne=n(W3e,"STRONG",{});var KWr=s(gne);Cgo=r(KWr,"dpr"),KWr.forEach(t),wgo=r(W3e," \u2014 "),tI=n(W3e,"A",{href:!0});var ZWr=s(tI);Ago=r(ZWr,"DPRQuestionEncoder"),ZWr.forEach(t),ygo=r(W3e," (DPR model)"),W3e.forEach(t),Lgo=i($),pp=n($,"LI",{});var H3e=s(pp);hne=n(H3e,"STRONG",{});var eHr=s(hne);xgo=r(eHr,"dpt"),eHr.forEach(t),$go=r(H3e," \u2014 "),aI=n(H3e,"A",{href:!0});var oHr=s(aI);kgo=r(oHr,"DPTModel"),oHr.forEach(t),Sgo=r(H3e," (DPT model)"),H3e.forEach(t),Rgo=i($),up=n($,"LI",{});var U3e=s(up);pne=n(U3e,"STRONG",{});var rHr=s(pne);Bgo=r(rHr,"electra"),rHr.forEach(t),Pgo=r(U3e," \u2014 "),nI=n(U3e,"A",{href:!0});var tHr=s(nI);Igo=r(tHr,"ElectraModel"),tHr.forEach(t),qgo=r(U3e," (ELECTRA model)"),U3e.forEach(t),Ngo=i($),_p=n($,"LI",{});var J3e=s(_p);une=n(J3e,"STRONG",{});var aHr=s(une);jgo=r(aHr,"flaubert"),aHr.forEach(t),Dgo=r(J3e," \u2014 "),sI=n(J3e,"A",{href:!0});var nHr=s(sI);Ggo=r(nHr,"FlaubertModel"),nHr.forEach(t),Ogo=r(J3e," (FlauBERT model)"),J3e.forEach(t),Vgo=i($),bp=n($,"LI",{});var Y3e=s(bp);_ne=n(Y3e,"STRONG",{});var sHr=s(_ne);Xgo=r(sHr,"fnet"),sHr.forEach(t),zgo=r(Y3e," \u2014 "),lI=n(Y3e,"A",{href:!0});var lHr=s(lI);Qgo=r(lHr,"FNetModel"),lHr.forEach(t),Wgo=r(Y3e," (FNet model)"),Y3e.forEach(t),Hgo=i($),vp=n($,"LI",{});var K3e=s(vp);bne=n(K3e,"STRONG",{});var iHr=s(bne);Ugo=r(iHr,"fsmt"),iHr.forEach(t),Jgo=r(K3e," \u2014 "),iI=n(K3e,"A",{href:!0});var dHr=s(iI);Ygo=r(dHr,"FSMTModel"),dHr.forEach(t),Kgo=r(K3e," (FairSeq Machine-Translation model)"),K3e.forEach(t),Zgo=i($),Ss=n($,"LI",{});var n$=s(Ss);vne=n(n$,"STRONG",{});var cHr=s(vne);eho=r(cHr,"funnel"),cHr.forEach(t),oho=r(n$," \u2014 "),dI=n(n$,"A",{href:!0});var fHr=s(dI);rho=r(fHr,"FunnelModel"),fHr.forEach(t),tho=r(n$," or "),cI=n(n$,"A",{href:!0});var mHr=s(cI);aho=r(mHr,"FunnelBaseModel"),mHr.forEach(t),nho=r(n$," (Funnel Transformer model)"),n$.forEach(t),sho=i($),Fp=n($,"LI",{});var Z3e=s(Fp);Fne=n(Z3e,"STRONG",{});var gHr=s(Fne);lho=r(gHr,"glpn"),gHr.forEach(t),iho=r(Z3e," \u2014 "),fI=n(Z3e,"A",{href:!0});var hHr=s(fI);dho=r(hHr,"GLPNModel"),hHr.forEach(t),cho=r(Z3e," (GLPN model)"),Z3e.forEach(t),fho=i($),Tp=n($,"LI",{});var ewe=s(Tp);Tne=n(ewe,"STRONG",{});var pHr=s(Tne);mho=r(pHr,"gpt2"),pHr.forEach(t),gho=r(ewe," \u2014 "),mI=n(ewe,"A",{href:!0});var uHr=s(mI);hho=r(uHr,"GPT2Model"),uHr.forEach(t),pho=r(ewe," (OpenAI GPT-2 model)"),ewe.forEach(t),uho=i($),Mp=n($,"LI",{});var owe=s(Mp);Mne=n(owe,"STRONG",{});var _Hr=s(Mne);_ho=r(_Hr,"gpt_neo"),_Hr.forEach(t),bho=r(owe," \u2014 "),gI=n(owe,"A",{href:!0});var bHr=s(gI);vho=r(bHr,"GPTNeoModel"),bHr.forEach(t),Fho=r(owe," (GPT Neo model)"),owe.forEach(t),Tho=i($),Ep=n($,"LI",{});var rwe=s(Ep);Ene=n(rwe,"STRONG",{});var vHr=s(Ene);Mho=r(vHr,"gptj"),vHr.forEach(t),Eho=r(rwe," \u2014 "),hI=n(rwe,"A",{href:!0});var FHr=s(hI);Cho=r(FHr,"GPTJModel"),FHr.forEach(t),who=r(rwe," (GPT-J model)"),rwe.forEach(t),Aho=i($),Cp=n($,"LI",{});var twe=s(Cp);Cne=n(twe,"STRONG",{});var THr=s(Cne);yho=r(THr,"hubert"),THr.forEach(t),Lho=r(twe," \u2014 "),pI=n(twe,"A",{href:!0});var MHr=s(pI);xho=r(MHr,"HubertModel"),MHr.forEach(t),$ho=r(twe," (Hubert model)"),twe.forEach(t),kho=i($),wp=n($,"LI",{});var awe=s(wp);wne=n(awe,"STRONG",{});var EHr=s(wne);Sho=r(EHr,"ibert"),EHr.forEach(t),Rho=r(awe," \u2014 "),uI=n(awe,"A",{href:!0});var CHr=s(uI);Bho=r(CHr,"IBertModel"),CHr.forEach(t),Pho=r(awe," (I-BERT model)"),awe.forEach(t),Iho=i($),Ap=n($,"LI",{});var nwe=s(Ap);Ane=n(nwe,"STRONG",{});var wHr=s(Ane);qho=r(wHr,"imagegpt"),wHr.forEach(t),Nho=r(nwe," \u2014 "),_I=n(nwe,"A",{href:!0});var AHr=s(_I);jho=r(AHr,"ImageGPTModel"),AHr.forEach(t),Dho=r(nwe," (ImageGPT model)"),nwe.forEach(t),Gho=i($),yp=n($,"LI",{});var swe=s(yp);yne=n(swe,"STRONG",{});var yHr=s(yne);Oho=r(yHr,"layoutlm"),yHr.forEach(t),Vho=r(swe," \u2014 "),bI=n(swe,"A",{href:!0});var LHr=s(bI);Xho=r(LHr,"LayoutLMModel"),LHr.forEach(t),zho=r(swe," (LayoutLM model)"),swe.forEach(t),Qho=i($),Lp=n($,"LI",{});var lwe=s(Lp);Lne=n(lwe,"STRONG",{});var xHr=s(Lne);Who=r(xHr,"layoutlmv2"),xHr.forEach(t),Hho=r(lwe," \u2014 "),vI=n(lwe,"A",{href:!0});var $Hr=s(vI);Uho=r($Hr,"LayoutLMv2Model"),$Hr.forEach(t),Jho=r(lwe," (LayoutLMv2 model)"),lwe.forEach(t),Yho=i($),xp=n($,"LI",{});var iwe=s(xp);xne=n(iwe,"STRONG",{});var kHr=s(xne);Kho=r(kHr,"led"),kHr.forEach(t),Zho=r(iwe," \u2014 "),FI=n(iwe,"A",{href:!0});var SHr=s(FI);epo=r(SHr,"LEDModel"),SHr.forEach(t),opo=r(iwe," (LED model)"),iwe.forEach(t),rpo=i($),$p=n($,"LI",{});var dwe=s($p);$ne=n(dwe,"STRONG",{});var RHr=s($ne);tpo=r(RHr,"longformer"),RHr.forEach(t),apo=r(dwe," \u2014 "),TI=n(dwe,"A",{href:!0});var BHr=s(TI);npo=r(BHr,"LongformerModel"),BHr.forEach(t),spo=r(dwe," (Longformer model)"),dwe.forEach(t),lpo=i($),kp=n($,"LI",{});var cwe=s(kp);kne=n(cwe,"STRONG",{});var PHr=s(kne);ipo=r(PHr,"luke"),PHr.forEach(t),dpo=r(cwe," \u2014 "),MI=n(cwe,"A",{href:!0});var IHr=s(MI);cpo=r(IHr,"LukeModel"),IHr.forEach(t),fpo=r(cwe," (LUKE model)"),cwe.forEach(t),mpo=i($),Sp=n($,"LI",{});var fwe=s(Sp);Sne=n(fwe,"STRONG",{});var qHr=s(Sne);gpo=r(qHr,"lxmert"),qHr.forEach(t),hpo=r(fwe," \u2014 "),EI=n(fwe,"A",{href:!0});var NHr=s(EI);ppo=r(NHr,"LxmertModel"),NHr.forEach(t),upo=r(fwe," (LXMERT model)"),fwe.forEach(t),_po=i($),Rp=n($,"LI",{});var mwe=s(Rp);Rne=n(mwe,"STRONG",{});var jHr=s(Rne);bpo=r(jHr,"m2m_100"),jHr.forEach(t),vpo=r(mwe," \u2014 "),CI=n(mwe,"A",{href:!0});var DHr=s(CI);Fpo=r(DHr,"M2M100Model"),DHr.forEach(t),Tpo=r(mwe," (M2M100 model)"),mwe.forEach(t),Mpo=i($),Bp=n($,"LI",{});var gwe=s(Bp);Bne=n(gwe,"STRONG",{});var GHr=s(Bne);Epo=r(GHr,"marian"),GHr.forEach(t),Cpo=r(gwe," \u2014 "),wI=n(gwe,"A",{href:!0});var OHr=s(wI);wpo=r(OHr,"MarianModel"),OHr.forEach(t),Apo=r(gwe," (Marian model)"),gwe.forEach(t),ypo=i($),Pp=n($,"LI",{});var hwe=s(Pp);Pne=n(hwe,"STRONG",{});var VHr=s(Pne);Lpo=r(VHr,"maskformer"),VHr.forEach(t),xpo=r(hwe," \u2014 "),AI=n(hwe,"A",{href:!0});var XHr=s(AI);$po=r(XHr,"MaskFormerModel"),XHr.forEach(t),kpo=r(hwe," (MaskFormer model)"),hwe.forEach(t),Spo=i($),Ip=n($,"LI",{});var pwe=s(Ip);Ine=n(pwe,"STRONG",{});var zHr=s(Ine);Rpo=r(zHr,"mbart"),zHr.forEach(t),Bpo=r(pwe," \u2014 "),yI=n(pwe,"A",{href:!0});var QHr=s(yI);Ppo=r(QHr,"MBartModel"),QHr.forEach(t),Ipo=r(pwe," (mBART model)"),pwe.forEach(t),qpo=i($),qp=n($,"LI",{});var uwe=s(qp);qne=n(uwe,"STRONG",{});var WHr=s(qne);Npo=r(WHr,"mctct"),WHr.forEach(t),jpo=r(uwe," \u2014 "),LI=n(uwe,"A",{href:!0});var HHr=s(LI);Dpo=r(HHr,"MCTCTModel"),HHr.forEach(t),Gpo=r(uwe," (MCTCT model)"),uwe.forEach(t),Opo=i($),Np=n($,"LI",{});var _we=s(Np);Nne=n(_we,"STRONG",{});var UHr=s(Nne);Vpo=r(UHr,"megatron-bert"),UHr.forEach(t),Xpo=r(_we," \u2014 "),xI=n(_we,"A",{href:!0});var JHr=s(xI);zpo=r(JHr,"MegatronBertModel"),JHr.forEach(t),Qpo=r(_we," (MegatronBert model)"),_we.forEach(t),Wpo=i($),jp=n($,"LI",{});var bwe=s(jp);jne=n(bwe,"STRONG",{});var YHr=s(jne);Hpo=r(YHr,"mobilebert"),YHr.forEach(t),Upo=r(bwe," \u2014 "),$I=n(bwe,"A",{href:!0});var KHr=s($I);Jpo=r(KHr,"MobileBertModel"),KHr.forEach(t),Ypo=r(bwe," (MobileBERT model)"),bwe.forEach(t),Kpo=i($),Dp=n($,"LI",{});var vwe=s(Dp);Dne=n(vwe,"STRONG",{});var ZHr=s(Dne);Zpo=r(ZHr,"mpnet"),ZHr.forEach(t),euo=r(vwe," \u2014 "),kI=n(vwe,"A",{href:!0});var eUr=s(kI);ouo=r(eUr,"MPNetModel"),eUr.forEach(t),ruo=r(vwe," (MPNet model)"),vwe.forEach(t),tuo=i($),Gp=n($,"LI",{});var Fwe=s(Gp);Gne=n(Fwe,"STRONG",{});var oUr=s(Gne);auo=r(oUr,"mt5"),oUr.forEach(t),nuo=r(Fwe," \u2014 "),SI=n(Fwe,"A",{href:!0});var rUr=s(SI);suo=r(rUr,"MT5Model"),rUr.forEach(t),luo=r(Fwe," (mT5 model)"),Fwe.forEach(t),iuo=i($),Op=n($,"LI",{});var Twe=s(Op);One=n(Twe,"STRONG",{});var tUr=s(One);duo=r(tUr,"nystromformer"),tUr.forEach(t),cuo=r(Twe," \u2014 "),RI=n(Twe,"A",{href:!0});var aUr=s(RI);fuo=r(aUr,"NystromformerModel"),aUr.forEach(t),muo=r(Twe," (Nystromformer model)"),Twe.forEach(t),guo=i($),Vp=n($,"LI",{});var Mwe=s(Vp);Vne=n(Mwe,"STRONG",{});var nUr=s(Vne);huo=r(nUr,"openai-gpt"),nUr.forEach(t),puo=r(Mwe," \u2014 "),BI=n(Mwe,"A",{href:!0});var sUr=s(BI);uuo=r(sUr,"OpenAIGPTModel"),sUr.forEach(t),_uo=r(Mwe," (OpenAI GPT model)"),Mwe.forEach(t),buo=i($),Xp=n($,"LI",{});var Ewe=s(Xp);Xne=n(Ewe,"STRONG",{});var lUr=s(Xne);vuo=r(lUr,"pegasus"),lUr.forEach(t),Fuo=r(Ewe," \u2014 "),PI=n(Ewe,"A",{href:!0});var iUr=s(PI);Tuo=r(iUr,"PegasusModel"),iUr.forEach(t),Muo=r(Ewe," (Pegasus model)"),Ewe.forEach(t),Euo=i($),zp=n($,"LI",{});var Cwe=s(zp);zne=n(Cwe,"STRONG",{});var dUr=s(zne);Cuo=r(dUr,"perceiver"),dUr.forEach(t),wuo=r(Cwe," \u2014 "),II=n(Cwe,"A",{href:!0});var cUr=s(II);Auo=r(cUr,"PerceiverModel"),cUr.forEach(t),yuo=r(Cwe," (Perceiver model)"),Cwe.forEach(t),Luo=i($),Qp=n($,"LI",{});var wwe=s(Qp);Qne=n(wwe,"STRONG",{});var fUr=s(Qne);xuo=r(fUr,"plbart"),fUr.forEach(t),$uo=r(wwe," \u2014 "),qI=n(wwe,"A",{href:!0});var mUr=s(qI);kuo=r(mUr,"PLBartModel"),mUr.forEach(t),Suo=r(wwe," (PLBart model)"),wwe.forEach(t),Ruo=i($),Wp=n($,"LI",{});var Awe=s(Wp);Wne=n(Awe,"STRONG",{});var gUr=s(Wne);Buo=r(gUr,"poolformer"),gUr.forEach(t),Puo=r(Awe," \u2014 "),NI=n(Awe,"A",{href:!0});var hUr=s(NI);Iuo=r(hUr,"PoolFormerModel"),hUr.forEach(t),quo=r(Awe," (PoolFormer model)"),Awe.forEach(t),Nuo=i($),Hp=n($,"LI",{});var ywe=s(Hp);Hne=n(ywe,"STRONG",{});var pUr=s(Hne);juo=r(pUr,"prophetnet"),pUr.forEach(t),Duo=r(ywe," \u2014 "),jI=n(ywe,"A",{href:!0});var uUr=s(jI);Guo=r(uUr,"ProphetNetModel"),uUr.forEach(t),Ouo=r(ywe," (ProphetNet model)"),ywe.forEach(t),Vuo=i($),Up=n($,"LI",{});var Lwe=s(Up);Une=n(Lwe,"STRONG",{});var _Ur=s(Une);Xuo=r(_Ur,"qdqbert"),_Ur.forEach(t),zuo=r(Lwe," \u2014 "),DI=n(Lwe,"A",{href:!0});var bUr=s(DI);Quo=r(bUr,"QDQBertModel"),bUr.forEach(t),Wuo=r(Lwe," (QDQBert model)"),Lwe.forEach(t),Huo=i($),Jp=n($,"LI",{});var xwe=s(Jp);Jne=n(xwe,"STRONG",{});var vUr=s(Jne);Uuo=r(vUr,"reformer"),vUr.forEach(t),Juo=r(xwe," \u2014 "),GI=n(xwe,"A",{href:!0});var FUr=s(GI);Yuo=r(FUr,"ReformerModel"),FUr.forEach(t),Kuo=r(xwe," (Reformer model)"),xwe.forEach(t),Zuo=i($),Yp=n($,"LI",{});var $we=s(Yp);Yne=n($we,"STRONG",{});var TUr=s(Yne);e_o=r(TUr,"regnet"),TUr.forEach(t),o_o=r($we," \u2014 "),OI=n($we,"A",{href:!0});var MUr=s(OI);r_o=r(MUr,"RegNetModel"),MUr.forEach(t),t_o=r($we," (RegNet model)"),$we.forEach(t),a_o=i($),Kp=n($,"LI",{});var kwe=s(Kp);Kne=n(kwe,"STRONG",{});var EUr=s(Kne);n_o=r(EUr,"rembert"),EUr.forEach(t),s_o=r(kwe," \u2014 "),VI=n(kwe,"A",{href:!0});var CUr=s(VI);l_o=r(CUr,"RemBertModel"),CUr.forEach(t),i_o=r(kwe," (RemBERT model)"),kwe.forEach(t),d_o=i($),Zp=n($,"LI",{});var Swe=s(Zp);Zne=n(Swe,"STRONG",{});var wUr=s(Zne);c_o=r(wUr,"resnet"),wUr.forEach(t),f_o=r(Swe," \u2014 "),XI=n(Swe,"A",{href:!0});var AUr=s(XI);m_o=r(AUr,"ResNetModel"),AUr.forEach(t),g_o=r(Swe," (ResNet model)"),Swe.forEach(t),h_o=i($),eu=n($,"LI",{});var Rwe=s(eu);ese=n(Rwe,"STRONG",{});var yUr=s(ese);p_o=r(yUr,"retribert"),yUr.forEach(t),u_o=r(Rwe," \u2014 "),zI=n(Rwe,"A",{href:!0});var LUr=s(zI);__o=r(LUr,"RetriBertModel"),LUr.forEach(t),b_o=r(Rwe," (RetriBERT model)"),Rwe.forEach(t),v_o=i($),ou=n($,"LI",{});var Bwe=s(ou);ose=n(Bwe,"STRONG",{});var xUr=s(ose);F_o=r(xUr,"roberta"),xUr.forEach(t),T_o=r(Bwe," \u2014 "),QI=n(Bwe,"A",{href:!0});var $Ur=s(QI);M_o=r($Ur,"RobertaModel"),$Ur.forEach(t),E_o=r(Bwe," (RoBERTa model)"),Bwe.forEach(t),C_o=i($),ru=n($,"LI",{});var Pwe=s(ru);rse=n(Pwe,"STRONG",{});var kUr=s(rse);w_o=r(kUr,"roformer"),kUr.forEach(t),A_o=r(Pwe," \u2014 "),WI=n(Pwe,"A",{href:!0});var SUr=s(WI);y_o=r(SUr,"RoFormerModel"),SUr.forEach(t),L_o=r(Pwe," (RoFormer model)"),Pwe.forEach(t),x_o=i($),tu=n($,"LI",{});var Iwe=s(tu);tse=n(Iwe,"STRONG",{});var RUr=s(tse);$_o=r(RUr,"segformer"),RUr.forEach(t),k_o=r(Iwe," \u2014 "),HI=n(Iwe,"A",{href:!0});var BUr=s(HI);S_o=r(BUr,"SegformerModel"),BUr.forEach(t),R_o=r(Iwe," (SegFormer model)"),Iwe.forEach(t),B_o=i($),au=n($,"LI",{});var qwe=s(au);ase=n(qwe,"STRONG",{});var PUr=s(ase);P_o=r(PUr,"sew"),PUr.forEach(t),I_o=r(qwe," \u2014 "),UI=n(qwe,"A",{href:!0});var IUr=s(UI);q_o=r(IUr,"SEWModel"),IUr.forEach(t),N_o=r(qwe," (SEW model)"),qwe.forEach(t),j_o=i($),nu=n($,"LI",{});var Nwe=s(nu);nse=n(Nwe,"STRONG",{});var qUr=s(nse);D_o=r(qUr,"sew-d"),qUr.forEach(t),G_o=r(Nwe," \u2014 "),JI=n(Nwe,"A",{href:!0});var NUr=s(JI);O_o=r(NUr,"SEWDModel"),NUr.forEach(t),V_o=r(Nwe," (SEW-D model)"),Nwe.forEach(t),X_o=i($),su=n($,"LI",{});var jwe=s(su);sse=n(jwe,"STRONG",{});var jUr=s(sse);z_o=r(jUr,"speech_to_text"),jUr.forEach(t),Q_o=r(jwe," \u2014 "),YI=n(jwe,"A",{href:!0});var DUr=s(YI);W_o=r(DUr,"Speech2TextModel"),DUr.forEach(t),H_o=r(jwe," (Speech2Text model)"),jwe.forEach(t),U_o=i($),lu=n($,"LI",{});var Dwe=s(lu);lse=n(Dwe,"STRONG",{});var GUr=s(lse);J_o=r(GUr,"splinter"),GUr.forEach(t),Y_o=r(Dwe," \u2014 "),KI=n(Dwe,"A",{href:!0});var OUr=s(KI);K_o=r(OUr,"SplinterModel"),OUr.forEach(t),Z_o=r(Dwe," (Splinter model)"),Dwe.forEach(t),e2o=i($),iu=n($,"LI",{});var Gwe=s(iu);ise=n(Gwe,"STRONG",{});var VUr=s(ise);o2o=r(VUr,"squeezebert"),VUr.forEach(t),r2o=r(Gwe," \u2014 "),ZI=n(Gwe,"A",{href:!0});var XUr=s(ZI);t2o=r(XUr,"SqueezeBertModel"),XUr.forEach(t),a2o=r(Gwe," (SqueezeBERT model)"),Gwe.forEach(t),n2o=i($),du=n($,"LI",{});var Owe=s(du);dse=n(Owe,"STRONG",{});var zUr=s(dse);s2o=r(zUr,"swin"),zUr.forEach(t),l2o=r(Owe," \u2014 "),eq=n(Owe,"A",{href:!0});var QUr=s(eq);i2o=r(QUr,"SwinModel"),QUr.forEach(t),d2o=r(Owe," (Swin model)"),Owe.forEach(t),c2o=i($),cu=n($,"LI",{});var Vwe=s(cu);cse=n(Vwe,"STRONG",{});var WUr=s(cse);f2o=r(WUr,"t5"),WUr.forEach(t),m2o=r(Vwe," \u2014 "),oq=n(Vwe,"A",{href:!0});var HUr=s(oq);g2o=r(HUr,"T5Model"),HUr.forEach(t),h2o=r(Vwe," (T5 model)"),Vwe.forEach(t),p2o=i($),fu=n($,"LI",{});var Xwe=s(fu);fse=n(Xwe,"STRONG",{});var UUr=s(fse);u2o=r(UUr,"tapas"),UUr.forEach(t),_2o=r(Xwe," \u2014 "),rq=n(Xwe,"A",{href:!0});var JUr=s(rq);b2o=r(JUr,"TapasModel"),JUr.forEach(t),v2o=r(Xwe," (TAPAS model)"),Xwe.forEach(t),F2o=i($),mu=n($,"LI",{});var zwe=s(mu);mse=n(zwe,"STRONG",{});var YUr=s(mse);T2o=r(YUr,"transfo-xl"),YUr.forEach(t),M2o=r(zwe," \u2014 "),tq=n(zwe,"A",{href:!0});var KUr=s(tq);E2o=r(KUr,"TransfoXLModel"),KUr.forEach(t),C2o=r(zwe," (Transformer-XL model)"),zwe.forEach(t),w2o=i($),gu=n($,"LI",{});var Qwe=s(gu);gse=n(Qwe,"STRONG",{});var ZUr=s(gse);A2o=r(ZUr,"unispeech"),ZUr.forEach(t),y2o=r(Qwe," \u2014 "),aq=n(Qwe,"A",{href:!0});var eJr=s(aq);L2o=r(eJr,"UniSpeechModel"),eJr.forEach(t),x2o=r(Qwe," (UniSpeech model)"),Qwe.forEach(t),$2o=i($),hu=n($,"LI",{});var Wwe=s(hu);hse=n(Wwe,"STRONG",{});var oJr=s(hse);k2o=r(oJr,"unispeech-sat"),oJr.forEach(t),S2o=r(Wwe," \u2014 "),nq=n(Wwe,"A",{href:!0});var rJr=s(nq);R2o=r(rJr,"UniSpeechSatModel"),rJr.forEach(t),B2o=r(Wwe," (UniSpeechSat model)"),Wwe.forEach(t),P2o=i($),pu=n($,"LI",{});var Hwe=s(pu);pse=n(Hwe,"STRONG",{});var tJr=s(pse);I2o=r(tJr,"van"),tJr.forEach(t),q2o=r(Hwe," \u2014 "),sq=n(Hwe,"A",{href:!0});var aJr=s(sq);N2o=r(aJr,"VanModel"),aJr.forEach(t),j2o=r(Hwe," (VAN model)"),Hwe.forEach(t),D2o=i($),uu=n($,"LI",{});var Uwe=s(uu);use=n(Uwe,"STRONG",{});var nJr=s(use);G2o=r(nJr,"vilt"),nJr.forEach(t),O2o=r(Uwe," \u2014 "),lq=n(Uwe,"A",{href:!0});var sJr=s(lq);V2o=r(sJr,"ViltModel"),sJr.forEach(t),X2o=r(Uwe," (ViLT model)"),Uwe.forEach(t),z2o=i($),_u=n($,"LI",{});var Jwe=s(_u);_se=n(Jwe,"STRONG",{});var lJr=s(_se);Q2o=r(lJr,"vision-text-dual-encoder"),lJr.forEach(t),W2o=r(Jwe," \u2014 "),iq=n(Jwe,"A",{href:!0});var iJr=s(iq);H2o=r(iJr,"VisionTextDualEncoderModel"),iJr.forEach(t),U2o=r(Jwe," (VisionTextDualEncoder model)"),Jwe.forEach(t),J2o=i($),bu=n($,"LI",{});var Ywe=s(bu);bse=n(Ywe,"STRONG",{});var dJr=s(bse);Y2o=r(dJr,"visual_bert"),dJr.forEach(t),K2o=r(Ywe," \u2014 "),dq=n(Ywe,"A",{href:!0});var cJr=s(dq);Z2o=r(cJr,"VisualBertModel"),cJr.forEach(t),e1o=r(Ywe," (VisualBert model)"),Ywe.forEach(t),o1o=i($),vu=n($,"LI",{});var Kwe=s(vu);vse=n(Kwe,"STRONG",{});var fJr=s(vse);r1o=r(fJr,"vit"),fJr.forEach(t),t1o=r(Kwe," \u2014 "),cq=n(Kwe,"A",{href:!0});var mJr=s(cq);a1o=r(mJr,"ViTModel"),mJr.forEach(t),n1o=r(Kwe," (ViT model)"),Kwe.forEach(t),s1o=i($),Fu=n($,"LI",{});var Zwe=s(Fu);Fse=n(Zwe,"STRONG",{});var gJr=s(Fse);l1o=r(gJr,"vit_mae"),gJr.forEach(t),i1o=r(Zwe," \u2014 "),fq=n(Zwe,"A",{href:!0});var hJr=s(fq);d1o=r(hJr,"ViTMAEModel"),hJr.forEach(t),c1o=r(Zwe," (ViTMAE model)"),Zwe.forEach(t),f1o=i($),Tu=n($,"LI",{});var eAe=s(Tu);Tse=n(eAe,"STRONG",{});var pJr=s(Tse);m1o=r(pJr,"wav2vec2"),pJr.forEach(t),g1o=r(eAe," \u2014 "),mq=n(eAe,"A",{href:!0});var uJr=s(mq);h1o=r(uJr,"Wav2Vec2Model"),uJr.forEach(t),p1o=r(eAe," (Wav2Vec2 model)"),eAe.forEach(t),u1o=i($),Mu=n($,"LI",{});var oAe=s(Mu);Mse=n(oAe,"STRONG",{});var _Jr=s(Mse);_1o=r(_Jr,"wavlm"),_Jr.forEach(t),b1o=r(oAe," \u2014 "),gq=n(oAe,"A",{href:!0});var bJr=s(gq);v1o=r(bJr,"WavLMModel"),bJr.forEach(t),F1o=r(oAe," (WavLM model)"),oAe.forEach(t),T1o=i($),Eu=n($,"LI",{});var rAe=s(Eu);Ese=n(rAe,"STRONG",{});var vJr=s(Ese);M1o=r(vJr,"xglm"),vJr.forEach(t),E1o=r(rAe," \u2014 "),hq=n(rAe,"A",{href:!0});var FJr=s(hq);C1o=r(FJr,"XGLMModel"),FJr.forEach(t),w1o=r(rAe," (XGLM model)"),rAe.forEach(t),A1o=i($),Cu=n($,"LI",{});var tAe=s(Cu);Cse=n(tAe,"STRONG",{});var TJr=s(Cse);y1o=r(TJr,"xlm"),TJr.forEach(t),L1o=r(tAe," \u2014 "),pq=n(tAe,"A",{href:!0});var MJr=s(pq);x1o=r(MJr,"XLMModel"),MJr.forEach(t),$1o=r(tAe," (XLM model)"),tAe.forEach(t),k1o=i($),wu=n($,"LI",{});var aAe=s(wu);wse=n(aAe,"STRONG",{});var EJr=s(wse);S1o=r(EJr,"xlm-prophetnet"),EJr.forEach(t),R1o=r(aAe," \u2014 "),uq=n(aAe,"A",{href:!0});var CJr=s(uq);B1o=r(CJr,"XLMProphetNetModel"),CJr.forEach(t),P1o=r(aAe," (XLMProphetNet model)"),aAe.forEach(t),I1o=i($),Au=n($,"LI",{});var nAe=s(Au);Ase=n(nAe,"STRONG",{});var wJr=s(Ase);q1o=r(wJr,"xlm-roberta"),wJr.forEach(t),N1o=r(nAe," \u2014 "),_q=n(nAe,"A",{href:!0});var AJr=s(_q);j1o=r(AJr,"XLMRobertaModel"),AJr.forEach(t),D1o=r(nAe," (XLM-RoBERTa model)"),nAe.forEach(t),G1o=i($),yu=n($,"LI",{});var sAe=s(yu);yse=n(sAe,"STRONG",{});var yJr=s(yse);O1o=r(yJr,"xlm-roberta-xl"),yJr.forEach(t),V1o=r(sAe," \u2014 "),bq=n(sAe,"A",{href:!0});var LJr=s(bq);X1o=r(LJr,"XLMRobertaXLModel"),LJr.forEach(t),z1o=r(sAe," (XLM-RoBERTa-XL model)"),sAe.forEach(t),Q1o=i($),Lu=n($,"LI",{});var lAe=s(Lu);Lse=n(lAe,"STRONG",{});var xJr=s(Lse);W1o=r(xJr,"xlnet"),xJr.forEach(t),H1o=r(lAe," \u2014 "),vq=n(lAe,"A",{href:!0});var $Jr=s(vq);U1o=r($Jr,"XLNetModel"),$Jr.forEach(t),J1o=r(lAe," (XLNet model)"),lAe.forEach(t),Y1o=i($),xu=n($,"LI",{});var iAe=s(xu);xse=n(iAe,"STRONG",{});var kJr=s(xse);K1o=r(kJr,"yolos"),kJr.forEach(t),Z1o=r(iAe," \u2014 "),Fq=n(iAe,"A",{href:!0});var SJr=s(Fq);ebo=r(SJr,"YolosModel"),SJr.forEach(t),obo=r(iAe," (YOLOS model)"),iAe.forEach(t),rbo=i($),$u=n($,"LI",{});var dAe=s($u);$se=n(dAe,"STRONG",{});var RJr=s($se);tbo=r(RJr,"yoso"),RJr.forEach(t),abo=r(dAe," \u2014 "),Tq=n(dAe,"A",{href:!0});var BJr=s(Tq);nbo=r(BJr,"YosoModel"),BJr.forEach(t),sbo=r(dAe," (YOSO model)"),dAe.forEach(t),$.forEach(t),lbo=i(Zt),ku=n(Zt,"P",{});var cAe=s(ku);ibo=r(cAe,"The model is set in evaluation mode by default using "),kse=n(cAe,"CODE",{});var PJr=s(kse);dbo=r(PJr,"model.eval()"),PJr.forEach(t),cbo=r(cAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sse=n(cAe,"CODE",{});var IJr=s(Sse);fbo=r(IJr,"model.train()"),IJr.forEach(t),cAe.forEach(t),mbo=i(Zt),T(Su.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),BPe=i(f),Ci=n(f,"H2",{class:!0});var Nqe=s(Ci);Ru=n(Nqe,"A",{id:!0,class:!0,href:!0});var qJr=s(Ru);Rse=n(qJr,"SPAN",{});var NJr=s(Rse);T(My.$$.fragment,NJr),NJr.forEach(t),qJr.forEach(t),gbo=i(Nqe),Bse=n(Nqe,"SPAN",{});var jJr=s(Bse);hbo=r(jJr,"AutoModelForPreTraining"),jJr.forEach(t),Nqe.forEach(t),PPe=i(f),xo=n(f,"DIV",{class:!0});var Ds=s(xo);T(Ey.$$.fragment,Ds),pbo=i(Ds),wi=n(Ds,"P",{});var ZY=s(wi);ubo=r(ZY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Mq=n(ZY,"A",{href:!0});var DJr=s(Mq);_bo=r(DJr,"from_pretrained()"),DJr.forEach(t),bbo=r(ZY," class method or the "),Eq=n(ZY,"A",{href:!0});var GJr=s(Eq);vbo=r(GJr,"from_config()"),GJr.forEach(t),Fbo=r(ZY,` class
method.`),ZY.forEach(t),Tbo=i(Ds),Cy=n(Ds,"P",{});var jqe=s(Cy);Mbo=r(jqe,"This class cannot be instantiated directly using "),Pse=n(jqe,"CODE",{});var OJr=s(Pse);Ebo=r(OJr,"__init__()"),OJr.forEach(t),Cbo=r(jqe," (throws an error)."),jqe.forEach(t),wbo=i(Ds),rt=n(Ds,"DIV",{class:!0});var J3=s(rt);T(wy.$$.fragment,J3),Abo=i(J3),Ise=n(J3,"P",{});var VJr=s(Ise);ybo=r(VJr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),VJr.forEach(t),Lbo=i(J3),Ai=n(J3,"P",{});var eK=s(Ai);xbo=r(eK,`Note:
Loading a model from its configuration file does `),qse=n(eK,"STRONG",{});var XJr=s(qse);$bo=r(XJr,"not"),XJr.forEach(t),kbo=r(eK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cq=n(eK,"A",{href:!0});var zJr=s(Cq);Sbo=r(zJr,"from_pretrained()"),zJr.forEach(t),Rbo=r(eK," to load the model weights."),eK.forEach(t),Bbo=i(J3),T(Bu.$$.fragment,J3),J3.forEach(t),Pbo=i(Ds),Je=n(Ds,"DIV",{class:!0});var ea=s(Je);T(Ay.$$.fragment,ea),Ibo=i(ea),Nse=n(ea,"P",{});var QJr=s(Nse);qbo=r(QJr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),QJr.forEach(t),Nbo=i(ea),ya=n(ea,"P",{});var Y3=s(ya);jbo=r(Y3,"The model class to instantiate is selected based on the "),jse=n(Y3,"CODE",{});var WJr=s(jse);Dbo=r(WJr,"model_type"),WJr.forEach(t),Gbo=r(Y3,` property of the config object (either
passed as an argument or loaded from `),Dse=n(Y3,"CODE",{});var HJr=s(Dse);Obo=r(HJr,"pretrained_model_name_or_path"),HJr.forEach(t),Vbo=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gse=n(Y3,"CODE",{});var UJr=s(Gse);Xbo=r(UJr,"pretrained_model_name_or_path"),UJr.forEach(t),zbo=r(Y3,":"),Y3.forEach(t),Qbo=i(ea),G=n(ea,"UL",{});var V=s(G);Pu=n(V,"LI",{});var fAe=s(Pu);Ose=n(fAe,"STRONG",{});var JJr=s(Ose);Wbo=r(JJr,"albert"),JJr.forEach(t),Hbo=r(fAe," \u2014 "),wq=n(fAe,"A",{href:!0});var YJr=s(wq);Ubo=r(YJr,"AlbertForPreTraining"),YJr.forEach(t),Jbo=r(fAe," (ALBERT model)"),fAe.forEach(t),Ybo=i(V),Iu=n(V,"LI",{});var mAe=s(Iu);Vse=n(mAe,"STRONG",{});var KJr=s(Vse);Kbo=r(KJr,"bart"),KJr.forEach(t),Zbo=r(mAe," \u2014 "),Aq=n(mAe,"A",{href:!0});var ZJr=s(Aq);e4o=r(ZJr,"BartForConditionalGeneration"),ZJr.forEach(t),o4o=r(mAe," (BART model)"),mAe.forEach(t),r4o=i(V),qu=n(V,"LI",{});var gAe=s(qu);Xse=n(gAe,"STRONG",{});var eYr=s(Xse);t4o=r(eYr,"bert"),eYr.forEach(t),a4o=r(gAe," \u2014 "),yq=n(gAe,"A",{href:!0});var oYr=s(yq);n4o=r(oYr,"BertForPreTraining"),oYr.forEach(t),s4o=r(gAe," (BERT model)"),gAe.forEach(t),l4o=i(V),Nu=n(V,"LI",{});var hAe=s(Nu);zse=n(hAe,"STRONG",{});var rYr=s(zse);i4o=r(rYr,"big_bird"),rYr.forEach(t),d4o=r(hAe," \u2014 "),Lq=n(hAe,"A",{href:!0});var tYr=s(Lq);c4o=r(tYr,"BigBirdForPreTraining"),tYr.forEach(t),f4o=r(hAe," (BigBird model)"),hAe.forEach(t),m4o=i(V),ju=n(V,"LI",{});var pAe=s(ju);Qse=n(pAe,"STRONG",{});var aYr=s(Qse);g4o=r(aYr,"camembert"),aYr.forEach(t),h4o=r(pAe," \u2014 "),xq=n(pAe,"A",{href:!0});var nYr=s(xq);p4o=r(nYr,"CamembertForMaskedLM"),nYr.forEach(t),u4o=r(pAe," (CamemBERT model)"),pAe.forEach(t),_4o=i(V),Du=n(V,"LI",{});var uAe=s(Du);Wse=n(uAe,"STRONG",{});var sYr=s(Wse);b4o=r(sYr,"ctrl"),sYr.forEach(t),v4o=r(uAe," \u2014 "),$q=n(uAe,"A",{href:!0});var lYr=s($q);F4o=r(lYr,"CTRLLMHeadModel"),lYr.forEach(t),T4o=r(uAe," (CTRL model)"),uAe.forEach(t),M4o=i(V),Gu=n(V,"LI",{});var _Ae=s(Gu);Hse=n(_Ae,"STRONG",{});var iYr=s(Hse);E4o=r(iYr,"data2vec-text"),iYr.forEach(t),C4o=r(_Ae," \u2014 "),kq=n(_Ae,"A",{href:!0});var dYr=s(kq);w4o=r(dYr,"Data2VecTextForMaskedLM"),dYr.forEach(t),A4o=r(_Ae," (Data2VecText model)"),_Ae.forEach(t),y4o=i(V),Ou=n(V,"LI",{});var bAe=s(Ou);Use=n(bAe,"STRONG",{});var cYr=s(Use);L4o=r(cYr,"deberta"),cYr.forEach(t),x4o=r(bAe," \u2014 "),Sq=n(bAe,"A",{href:!0});var fYr=s(Sq);$4o=r(fYr,"DebertaForMaskedLM"),fYr.forEach(t),k4o=r(bAe," (DeBERTa model)"),bAe.forEach(t),S4o=i(V),Vu=n(V,"LI",{});var vAe=s(Vu);Jse=n(vAe,"STRONG",{});var mYr=s(Jse);R4o=r(mYr,"deberta-v2"),mYr.forEach(t),B4o=r(vAe," \u2014 "),Rq=n(vAe,"A",{href:!0});var gYr=s(Rq);P4o=r(gYr,"DebertaV2ForMaskedLM"),gYr.forEach(t),I4o=r(vAe," (DeBERTa-v2 model)"),vAe.forEach(t),q4o=i(V),Xu=n(V,"LI",{});var FAe=s(Xu);Yse=n(FAe,"STRONG",{});var hYr=s(Yse);N4o=r(hYr,"distilbert"),hYr.forEach(t),j4o=r(FAe," \u2014 "),Bq=n(FAe,"A",{href:!0});var pYr=s(Bq);D4o=r(pYr,"DistilBertForMaskedLM"),pYr.forEach(t),G4o=r(FAe," (DistilBERT model)"),FAe.forEach(t),O4o=i(V),zu=n(V,"LI",{});var TAe=s(zu);Kse=n(TAe,"STRONG",{});var uYr=s(Kse);V4o=r(uYr,"electra"),uYr.forEach(t),X4o=r(TAe," \u2014 "),Pq=n(TAe,"A",{href:!0});var _Yr=s(Pq);z4o=r(_Yr,"ElectraForPreTraining"),_Yr.forEach(t),Q4o=r(TAe," (ELECTRA model)"),TAe.forEach(t),W4o=i(V),Qu=n(V,"LI",{});var MAe=s(Qu);Zse=n(MAe,"STRONG",{});var bYr=s(Zse);H4o=r(bYr,"flaubert"),bYr.forEach(t),U4o=r(MAe," \u2014 "),Iq=n(MAe,"A",{href:!0});var vYr=s(Iq);J4o=r(vYr,"FlaubertWithLMHeadModel"),vYr.forEach(t),Y4o=r(MAe," (FlauBERT model)"),MAe.forEach(t),K4o=i(V),Wu=n(V,"LI",{});var EAe=s(Wu);ele=n(EAe,"STRONG",{});var FYr=s(ele);Z4o=r(FYr,"fnet"),FYr.forEach(t),evo=r(EAe," \u2014 "),qq=n(EAe,"A",{href:!0});var TYr=s(qq);ovo=r(TYr,"FNetForPreTraining"),TYr.forEach(t),rvo=r(EAe," (FNet model)"),EAe.forEach(t),tvo=i(V),Hu=n(V,"LI",{});var CAe=s(Hu);ole=n(CAe,"STRONG",{});var MYr=s(ole);avo=r(MYr,"fsmt"),MYr.forEach(t),nvo=r(CAe," \u2014 "),Nq=n(CAe,"A",{href:!0});var EYr=s(Nq);svo=r(EYr,"FSMTForConditionalGeneration"),EYr.forEach(t),lvo=r(CAe," (FairSeq Machine-Translation model)"),CAe.forEach(t),ivo=i(V),Uu=n(V,"LI",{});var wAe=s(Uu);rle=n(wAe,"STRONG",{});var CYr=s(rle);dvo=r(CYr,"funnel"),CYr.forEach(t),cvo=r(wAe," \u2014 "),jq=n(wAe,"A",{href:!0});var wYr=s(jq);fvo=r(wYr,"FunnelForPreTraining"),wYr.forEach(t),mvo=r(wAe," (Funnel Transformer model)"),wAe.forEach(t),gvo=i(V),Ju=n(V,"LI",{});var AAe=s(Ju);tle=n(AAe,"STRONG",{});var AYr=s(tle);hvo=r(AYr,"gpt2"),AYr.forEach(t),pvo=r(AAe," \u2014 "),Dq=n(AAe,"A",{href:!0});var yYr=s(Dq);uvo=r(yYr,"GPT2LMHeadModel"),yYr.forEach(t),_vo=r(AAe," (OpenAI GPT-2 model)"),AAe.forEach(t),bvo=i(V),Yu=n(V,"LI",{});var yAe=s(Yu);ale=n(yAe,"STRONG",{});var LYr=s(ale);vvo=r(LYr,"ibert"),LYr.forEach(t),Fvo=r(yAe," \u2014 "),Gq=n(yAe,"A",{href:!0});var xYr=s(Gq);Tvo=r(xYr,"IBertForMaskedLM"),xYr.forEach(t),Mvo=r(yAe," (I-BERT model)"),yAe.forEach(t),Evo=i(V),Ku=n(V,"LI",{});var LAe=s(Ku);nle=n(LAe,"STRONG",{});var $Yr=s(nle);Cvo=r($Yr,"layoutlm"),$Yr.forEach(t),wvo=r(LAe," \u2014 "),Oq=n(LAe,"A",{href:!0});var kYr=s(Oq);Avo=r(kYr,"LayoutLMForMaskedLM"),kYr.forEach(t),yvo=r(LAe," (LayoutLM model)"),LAe.forEach(t),Lvo=i(V),Zu=n(V,"LI",{});var xAe=s(Zu);sle=n(xAe,"STRONG",{});var SYr=s(sle);xvo=r(SYr,"longformer"),SYr.forEach(t),$vo=r(xAe," \u2014 "),Vq=n(xAe,"A",{href:!0});var RYr=s(Vq);kvo=r(RYr,"LongformerForMaskedLM"),RYr.forEach(t),Svo=r(xAe," (Longformer model)"),xAe.forEach(t),Rvo=i(V),e_=n(V,"LI",{});var $Ae=s(e_);lle=n($Ae,"STRONG",{});var BYr=s(lle);Bvo=r(BYr,"lxmert"),BYr.forEach(t),Pvo=r($Ae," \u2014 "),Xq=n($Ae,"A",{href:!0});var PYr=s(Xq);Ivo=r(PYr,"LxmertForPreTraining"),PYr.forEach(t),qvo=r($Ae," (LXMERT model)"),$Ae.forEach(t),Nvo=i(V),o_=n(V,"LI",{});var kAe=s(o_);ile=n(kAe,"STRONG",{});var IYr=s(ile);jvo=r(IYr,"megatron-bert"),IYr.forEach(t),Dvo=r(kAe," \u2014 "),zq=n(kAe,"A",{href:!0});var qYr=s(zq);Gvo=r(qYr,"MegatronBertForPreTraining"),qYr.forEach(t),Ovo=r(kAe," (MegatronBert model)"),kAe.forEach(t),Vvo=i(V),r_=n(V,"LI",{});var SAe=s(r_);dle=n(SAe,"STRONG",{});var NYr=s(dle);Xvo=r(NYr,"mobilebert"),NYr.forEach(t),zvo=r(SAe," \u2014 "),Qq=n(SAe,"A",{href:!0});var jYr=s(Qq);Qvo=r(jYr,"MobileBertForPreTraining"),jYr.forEach(t),Wvo=r(SAe," (MobileBERT model)"),SAe.forEach(t),Hvo=i(V),t_=n(V,"LI",{});var RAe=s(t_);cle=n(RAe,"STRONG",{});var DYr=s(cle);Uvo=r(DYr,"mpnet"),DYr.forEach(t),Jvo=r(RAe," \u2014 "),Wq=n(RAe,"A",{href:!0});var GYr=s(Wq);Yvo=r(GYr,"MPNetForMaskedLM"),GYr.forEach(t),Kvo=r(RAe," (MPNet model)"),RAe.forEach(t),Zvo=i(V),a_=n(V,"LI",{});var BAe=s(a_);fle=n(BAe,"STRONG",{});var OYr=s(fle);eFo=r(OYr,"openai-gpt"),OYr.forEach(t),oFo=r(BAe," \u2014 "),Hq=n(BAe,"A",{href:!0});var VYr=s(Hq);rFo=r(VYr,"OpenAIGPTLMHeadModel"),VYr.forEach(t),tFo=r(BAe," (OpenAI GPT model)"),BAe.forEach(t),aFo=i(V),n_=n(V,"LI",{});var PAe=s(n_);mle=n(PAe,"STRONG",{});var XYr=s(mle);nFo=r(XYr,"retribert"),XYr.forEach(t),sFo=r(PAe," \u2014 "),Uq=n(PAe,"A",{href:!0});var zYr=s(Uq);lFo=r(zYr,"RetriBertModel"),zYr.forEach(t),iFo=r(PAe," (RetriBERT model)"),PAe.forEach(t),dFo=i(V),s_=n(V,"LI",{});var IAe=s(s_);gle=n(IAe,"STRONG",{});var QYr=s(gle);cFo=r(QYr,"roberta"),QYr.forEach(t),fFo=r(IAe," \u2014 "),Jq=n(IAe,"A",{href:!0});var WYr=s(Jq);mFo=r(WYr,"RobertaForMaskedLM"),WYr.forEach(t),gFo=r(IAe," (RoBERTa model)"),IAe.forEach(t),hFo=i(V),l_=n(V,"LI",{});var qAe=s(l_);hle=n(qAe,"STRONG",{});var HYr=s(hle);pFo=r(HYr,"squeezebert"),HYr.forEach(t),uFo=r(qAe," \u2014 "),Yq=n(qAe,"A",{href:!0});var UYr=s(Yq);_Fo=r(UYr,"SqueezeBertForMaskedLM"),UYr.forEach(t),bFo=r(qAe," (SqueezeBERT model)"),qAe.forEach(t),vFo=i(V),i_=n(V,"LI",{});var NAe=s(i_);ple=n(NAe,"STRONG",{});var JYr=s(ple);FFo=r(JYr,"t5"),JYr.forEach(t),TFo=r(NAe," \u2014 "),Kq=n(NAe,"A",{href:!0});var YYr=s(Kq);MFo=r(YYr,"T5ForConditionalGeneration"),YYr.forEach(t),EFo=r(NAe," (T5 model)"),NAe.forEach(t),CFo=i(V),d_=n(V,"LI",{});var jAe=s(d_);ule=n(jAe,"STRONG",{});var KYr=s(ule);wFo=r(KYr,"tapas"),KYr.forEach(t),AFo=r(jAe," \u2014 "),Zq=n(jAe,"A",{href:!0});var ZYr=s(Zq);yFo=r(ZYr,"TapasForMaskedLM"),ZYr.forEach(t),LFo=r(jAe," (TAPAS model)"),jAe.forEach(t),xFo=i(V),c_=n(V,"LI",{});var DAe=s(c_);_le=n(DAe,"STRONG",{});var eKr=s(_le);$Fo=r(eKr,"transfo-xl"),eKr.forEach(t),kFo=r(DAe," \u2014 "),eN=n(DAe,"A",{href:!0});var oKr=s(eN);SFo=r(oKr,"TransfoXLLMHeadModel"),oKr.forEach(t),RFo=r(DAe," (Transformer-XL model)"),DAe.forEach(t),BFo=i(V),f_=n(V,"LI",{});var GAe=s(f_);ble=n(GAe,"STRONG",{});var rKr=s(ble);PFo=r(rKr,"unispeech"),rKr.forEach(t),IFo=r(GAe," \u2014 "),oN=n(GAe,"A",{href:!0});var tKr=s(oN);qFo=r(tKr,"UniSpeechForPreTraining"),tKr.forEach(t),NFo=r(GAe," (UniSpeech model)"),GAe.forEach(t),jFo=i(V),m_=n(V,"LI",{});var OAe=s(m_);vle=n(OAe,"STRONG",{});var aKr=s(vle);DFo=r(aKr,"unispeech-sat"),aKr.forEach(t),GFo=r(OAe," \u2014 "),rN=n(OAe,"A",{href:!0});var nKr=s(rN);OFo=r(nKr,"UniSpeechSatForPreTraining"),nKr.forEach(t),VFo=r(OAe," (UniSpeechSat model)"),OAe.forEach(t),XFo=i(V),g_=n(V,"LI",{});var VAe=s(g_);Fle=n(VAe,"STRONG",{});var sKr=s(Fle);zFo=r(sKr,"visual_bert"),sKr.forEach(t),QFo=r(VAe," \u2014 "),tN=n(VAe,"A",{href:!0});var lKr=s(tN);WFo=r(lKr,"VisualBertForPreTraining"),lKr.forEach(t),HFo=r(VAe," (VisualBert model)"),VAe.forEach(t),UFo=i(V),h_=n(V,"LI",{});var XAe=s(h_);Tle=n(XAe,"STRONG",{});var iKr=s(Tle);JFo=r(iKr,"vit_mae"),iKr.forEach(t),YFo=r(XAe," \u2014 "),aN=n(XAe,"A",{href:!0});var dKr=s(aN);KFo=r(dKr,"ViTMAEForPreTraining"),dKr.forEach(t),ZFo=r(XAe," (ViTMAE model)"),XAe.forEach(t),e0o=i(V),p_=n(V,"LI",{});var zAe=s(p_);Mle=n(zAe,"STRONG",{});var cKr=s(Mle);o0o=r(cKr,"wav2vec2"),cKr.forEach(t),r0o=r(zAe," \u2014 "),nN=n(zAe,"A",{href:!0});var fKr=s(nN);t0o=r(fKr,"Wav2Vec2ForPreTraining"),fKr.forEach(t),a0o=r(zAe," (Wav2Vec2 model)"),zAe.forEach(t),n0o=i(V),u_=n(V,"LI",{});var QAe=s(u_);Ele=n(QAe,"STRONG",{});var mKr=s(Ele);s0o=r(mKr,"xlm"),mKr.forEach(t),l0o=r(QAe," \u2014 "),sN=n(QAe,"A",{href:!0});var gKr=s(sN);i0o=r(gKr,"XLMWithLMHeadModel"),gKr.forEach(t),d0o=r(QAe," (XLM model)"),QAe.forEach(t),c0o=i(V),__=n(V,"LI",{});var WAe=s(__);Cle=n(WAe,"STRONG",{});var hKr=s(Cle);f0o=r(hKr,"xlm-roberta"),hKr.forEach(t),m0o=r(WAe," \u2014 "),lN=n(WAe,"A",{href:!0});var pKr=s(lN);g0o=r(pKr,"XLMRobertaForMaskedLM"),pKr.forEach(t),h0o=r(WAe," (XLM-RoBERTa model)"),WAe.forEach(t),p0o=i(V),b_=n(V,"LI",{});var HAe=s(b_);wle=n(HAe,"STRONG",{});var uKr=s(wle);u0o=r(uKr,"xlm-roberta-xl"),uKr.forEach(t),_0o=r(HAe," \u2014 "),iN=n(HAe,"A",{href:!0});var _Kr=s(iN);b0o=r(_Kr,"XLMRobertaXLForMaskedLM"),_Kr.forEach(t),v0o=r(HAe," (XLM-RoBERTa-XL model)"),HAe.forEach(t),F0o=i(V),v_=n(V,"LI",{});var UAe=s(v_);Ale=n(UAe,"STRONG",{});var bKr=s(Ale);T0o=r(bKr,"xlnet"),bKr.forEach(t),M0o=r(UAe," \u2014 "),dN=n(UAe,"A",{href:!0});var vKr=s(dN);E0o=r(vKr,"XLNetLMHeadModel"),vKr.forEach(t),C0o=r(UAe," (XLNet model)"),UAe.forEach(t),V.forEach(t),w0o=i(ea),F_=n(ea,"P",{});var JAe=s(F_);A0o=r(JAe,"The model is set in evaluation mode by default using "),yle=n(JAe,"CODE",{});var FKr=s(yle);y0o=r(FKr,"model.eval()"),FKr.forEach(t),L0o=r(JAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lle=n(JAe,"CODE",{});var TKr=s(Lle);x0o=r(TKr,"model.train()"),TKr.forEach(t),JAe.forEach(t),$0o=i(ea),T(T_.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),IPe=i(f),yi=n(f,"H2",{class:!0});var Dqe=s(yi);M_=n(Dqe,"A",{id:!0,class:!0,href:!0});var MKr=s(M_);xle=n(MKr,"SPAN",{});var EKr=s(xle);T(yy.$$.fragment,EKr),EKr.forEach(t),MKr.forEach(t),k0o=i(Dqe),$le=n(Dqe,"SPAN",{});var CKr=s($le);S0o=r(CKr,"AutoModelForCausalLM"),CKr.forEach(t),Dqe.forEach(t),qPe=i(f),$o=n(f,"DIV",{class:!0});var Gs=s($o);T(Ly.$$.fragment,Gs),R0o=i(Gs),Li=n(Gs,"P",{});var oK=s(Li);B0o=r(oK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),cN=n(oK,"A",{href:!0});var wKr=s(cN);P0o=r(wKr,"from_pretrained()"),wKr.forEach(t),I0o=r(oK," class method or the "),fN=n(oK,"A",{href:!0});var AKr=s(fN);q0o=r(AKr,"from_config()"),AKr.forEach(t),N0o=r(oK,` class
method.`),oK.forEach(t),j0o=i(Gs),xy=n(Gs,"P",{});var Gqe=s(xy);D0o=r(Gqe,"This class cannot be instantiated directly using "),kle=n(Gqe,"CODE",{});var yKr=s(kle);G0o=r(yKr,"__init__()"),yKr.forEach(t),O0o=r(Gqe," (throws an error)."),Gqe.forEach(t),V0o=i(Gs),tt=n(Gs,"DIV",{class:!0});var K3=s(tt);T($y.$$.fragment,K3),X0o=i(K3),Sle=n(K3,"P",{});var LKr=s(Sle);z0o=r(LKr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),LKr.forEach(t),Q0o=i(K3),xi=n(K3,"P",{});var rK=s(xi);W0o=r(rK,`Note:
Loading a model from its configuration file does `),Rle=n(rK,"STRONG",{});var xKr=s(Rle);H0o=r(xKr,"not"),xKr.forEach(t),U0o=r(rK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mN=n(rK,"A",{href:!0});var $Kr=s(mN);J0o=r($Kr,"from_pretrained()"),$Kr.forEach(t),Y0o=r(rK," to load the model weights."),rK.forEach(t),K0o=i(K3),T(E_.$$.fragment,K3),K3.forEach(t),Z0o=i(Gs),Ye=n(Gs,"DIV",{class:!0});var oa=s(Ye);T(ky.$$.fragment,oa),e6o=i(oa),Ble=n(oa,"P",{});var kKr=s(Ble);o6o=r(kKr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kKr.forEach(t),r6o=i(oa),La=n(oa,"P",{});var Z3=s(La);t6o=r(Z3,"The model class to instantiate is selected based on the "),Ple=n(Z3,"CODE",{});var SKr=s(Ple);a6o=r(SKr,"model_type"),SKr.forEach(t),n6o=r(Z3,` property of the config object (either
passed as an argument or loaded from `),Ile=n(Z3,"CODE",{});var RKr=s(Ile);s6o=r(RKr,"pretrained_model_name_or_path"),RKr.forEach(t),l6o=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qle=n(Z3,"CODE",{});var BKr=s(qle);i6o=r(BKr,"pretrained_model_name_or_path"),BKr.forEach(t),d6o=r(Z3,":"),Z3.forEach(t),c6o=i(oa),z=n(oa,"UL",{});var W=s(z);C_=n(W,"LI",{});var YAe=s(C_);Nle=n(YAe,"STRONG",{});var PKr=s(Nle);f6o=r(PKr,"bart"),PKr.forEach(t),m6o=r(YAe," \u2014 "),gN=n(YAe,"A",{href:!0});var IKr=s(gN);g6o=r(IKr,"BartForCausalLM"),IKr.forEach(t),h6o=r(YAe," (BART model)"),YAe.forEach(t),p6o=i(W),w_=n(W,"LI",{});var KAe=s(w_);jle=n(KAe,"STRONG",{});var qKr=s(jle);u6o=r(qKr,"bert"),qKr.forEach(t),_6o=r(KAe," \u2014 "),hN=n(KAe,"A",{href:!0});var NKr=s(hN);b6o=r(NKr,"BertLMHeadModel"),NKr.forEach(t),v6o=r(KAe," (BERT model)"),KAe.forEach(t),F6o=i(W),A_=n(W,"LI",{});var ZAe=s(A_);Dle=n(ZAe,"STRONG",{});var jKr=s(Dle);T6o=r(jKr,"bert-generation"),jKr.forEach(t),M6o=r(ZAe," \u2014 "),pN=n(ZAe,"A",{href:!0});var DKr=s(pN);E6o=r(DKr,"BertGenerationDecoder"),DKr.forEach(t),C6o=r(ZAe," (Bert Generation model)"),ZAe.forEach(t),w6o=i(W),y_=n(W,"LI",{});var eye=s(y_);Gle=n(eye,"STRONG",{});var GKr=s(Gle);A6o=r(GKr,"big_bird"),GKr.forEach(t),y6o=r(eye," \u2014 "),uN=n(eye,"A",{href:!0});var OKr=s(uN);L6o=r(OKr,"BigBirdForCausalLM"),OKr.forEach(t),x6o=r(eye," (BigBird model)"),eye.forEach(t),$6o=i(W),L_=n(W,"LI",{});var oye=s(L_);Ole=n(oye,"STRONG",{});var VKr=s(Ole);k6o=r(VKr,"bigbird_pegasus"),VKr.forEach(t),S6o=r(oye," \u2014 "),_N=n(oye,"A",{href:!0});var XKr=s(_N);R6o=r(XKr,"BigBirdPegasusForCausalLM"),XKr.forEach(t),B6o=r(oye," (BigBirdPegasus model)"),oye.forEach(t),P6o=i(W),x_=n(W,"LI",{});var rye=s(x_);Vle=n(rye,"STRONG",{});var zKr=s(Vle);I6o=r(zKr,"blenderbot"),zKr.forEach(t),q6o=r(rye," \u2014 "),bN=n(rye,"A",{href:!0});var QKr=s(bN);N6o=r(QKr,"BlenderbotForCausalLM"),QKr.forEach(t),j6o=r(rye," (Blenderbot model)"),rye.forEach(t),D6o=i(W),$_=n(W,"LI",{});var tye=s($_);Xle=n(tye,"STRONG",{});var WKr=s(Xle);G6o=r(WKr,"blenderbot-small"),WKr.forEach(t),O6o=r(tye," \u2014 "),vN=n(tye,"A",{href:!0});var HKr=s(vN);V6o=r(HKr,"BlenderbotSmallForCausalLM"),HKr.forEach(t),X6o=r(tye," (BlenderbotSmall model)"),tye.forEach(t),z6o=i(W),k_=n(W,"LI",{});var aye=s(k_);zle=n(aye,"STRONG",{});var UKr=s(zle);Q6o=r(UKr,"camembert"),UKr.forEach(t),W6o=r(aye," \u2014 "),FN=n(aye,"A",{href:!0});var JKr=s(FN);H6o=r(JKr,"CamembertForCausalLM"),JKr.forEach(t),U6o=r(aye," (CamemBERT model)"),aye.forEach(t),J6o=i(W),S_=n(W,"LI",{});var nye=s(S_);Qle=n(nye,"STRONG",{});var YKr=s(Qle);Y6o=r(YKr,"ctrl"),YKr.forEach(t),K6o=r(nye," \u2014 "),TN=n(nye,"A",{href:!0});var KKr=s(TN);Z6o=r(KKr,"CTRLLMHeadModel"),KKr.forEach(t),eTo=r(nye," (CTRL model)"),nye.forEach(t),oTo=i(W),R_=n(W,"LI",{});var sye=s(R_);Wle=n(sye,"STRONG",{});var ZKr=s(Wle);rTo=r(ZKr,"data2vec-text"),ZKr.forEach(t),tTo=r(sye," \u2014 "),MN=n(sye,"A",{href:!0});var eZr=s(MN);aTo=r(eZr,"Data2VecTextForCausalLM"),eZr.forEach(t),nTo=r(sye," (Data2VecText model)"),sye.forEach(t),sTo=i(W),B_=n(W,"LI",{});var lye=s(B_);Hle=n(lye,"STRONG",{});var oZr=s(Hle);lTo=r(oZr,"electra"),oZr.forEach(t),iTo=r(lye," \u2014 "),EN=n(lye,"A",{href:!0});var rZr=s(EN);dTo=r(rZr,"ElectraForCausalLM"),rZr.forEach(t),cTo=r(lye," (ELECTRA model)"),lye.forEach(t),fTo=i(W),P_=n(W,"LI",{});var iye=s(P_);Ule=n(iye,"STRONG",{});var tZr=s(Ule);mTo=r(tZr,"gpt2"),tZr.forEach(t),gTo=r(iye," \u2014 "),CN=n(iye,"A",{href:!0});var aZr=s(CN);hTo=r(aZr,"GPT2LMHeadModel"),aZr.forEach(t),pTo=r(iye," (OpenAI GPT-2 model)"),iye.forEach(t),uTo=i(W),I_=n(W,"LI",{});var dye=s(I_);Jle=n(dye,"STRONG",{});var nZr=s(Jle);_To=r(nZr,"gpt_neo"),nZr.forEach(t),bTo=r(dye," \u2014 "),wN=n(dye,"A",{href:!0});var sZr=s(wN);vTo=r(sZr,"GPTNeoForCausalLM"),sZr.forEach(t),FTo=r(dye," (GPT Neo model)"),dye.forEach(t),TTo=i(W),q_=n(W,"LI",{});var cye=s(q_);Yle=n(cye,"STRONG",{});var lZr=s(Yle);MTo=r(lZr,"gptj"),lZr.forEach(t),ETo=r(cye," \u2014 "),AN=n(cye,"A",{href:!0});var iZr=s(AN);CTo=r(iZr,"GPTJForCausalLM"),iZr.forEach(t),wTo=r(cye," (GPT-J model)"),cye.forEach(t),ATo=i(W),N_=n(W,"LI",{});var fye=s(N_);Kle=n(fye,"STRONG",{});var dZr=s(Kle);yTo=r(dZr,"marian"),dZr.forEach(t),LTo=r(fye," \u2014 "),yN=n(fye,"A",{href:!0});var cZr=s(yN);xTo=r(cZr,"MarianForCausalLM"),cZr.forEach(t),$To=r(fye," (Marian model)"),fye.forEach(t),kTo=i(W),j_=n(W,"LI",{});var mye=s(j_);Zle=n(mye,"STRONG",{});var fZr=s(Zle);STo=r(fZr,"mbart"),fZr.forEach(t),RTo=r(mye," \u2014 "),LN=n(mye,"A",{href:!0});var mZr=s(LN);BTo=r(mZr,"MBartForCausalLM"),mZr.forEach(t),PTo=r(mye," (mBART model)"),mye.forEach(t),ITo=i(W),D_=n(W,"LI",{});var gye=s(D_);eie=n(gye,"STRONG",{});var gZr=s(eie);qTo=r(gZr,"megatron-bert"),gZr.forEach(t),NTo=r(gye," \u2014 "),xN=n(gye,"A",{href:!0});var hZr=s(xN);jTo=r(hZr,"MegatronBertForCausalLM"),hZr.forEach(t),DTo=r(gye," (MegatronBert model)"),gye.forEach(t),GTo=i(W),G_=n(W,"LI",{});var hye=s(G_);oie=n(hye,"STRONG",{});var pZr=s(oie);OTo=r(pZr,"openai-gpt"),pZr.forEach(t),VTo=r(hye," \u2014 "),$N=n(hye,"A",{href:!0});var uZr=s($N);XTo=r(uZr,"OpenAIGPTLMHeadModel"),uZr.forEach(t),zTo=r(hye," (OpenAI GPT model)"),hye.forEach(t),QTo=i(W),O_=n(W,"LI",{});var pye=s(O_);rie=n(pye,"STRONG",{});var _Zr=s(rie);WTo=r(_Zr,"pegasus"),_Zr.forEach(t),HTo=r(pye," \u2014 "),kN=n(pye,"A",{href:!0});var bZr=s(kN);UTo=r(bZr,"PegasusForCausalLM"),bZr.forEach(t),JTo=r(pye," (Pegasus model)"),pye.forEach(t),YTo=i(W),V_=n(W,"LI",{});var uye=s(V_);tie=n(uye,"STRONG",{});var vZr=s(tie);KTo=r(vZr,"plbart"),vZr.forEach(t),ZTo=r(uye," \u2014 "),SN=n(uye,"A",{href:!0});var FZr=s(SN);eMo=r(FZr,"PLBartForCausalLM"),FZr.forEach(t),oMo=r(uye," (PLBart model)"),uye.forEach(t),rMo=i(W),X_=n(W,"LI",{});var _ye=s(X_);aie=n(_ye,"STRONG",{});var TZr=s(aie);tMo=r(TZr,"prophetnet"),TZr.forEach(t),aMo=r(_ye," \u2014 "),RN=n(_ye,"A",{href:!0});var MZr=s(RN);nMo=r(MZr,"ProphetNetForCausalLM"),MZr.forEach(t),sMo=r(_ye," (ProphetNet model)"),_ye.forEach(t),lMo=i(W),z_=n(W,"LI",{});var bye=s(z_);nie=n(bye,"STRONG",{});var EZr=s(nie);iMo=r(EZr,"qdqbert"),EZr.forEach(t),dMo=r(bye," \u2014 "),BN=n(bye,"A",{href:!0});var CZr=s(BN);cMo=r(CZr,"QDQBertLMHeadModel"),CZr.forEach(t),fMo=r(bye," (QDQBert model)"),bye.forEach(t),mMo=i(W),Q_=n(W,"LI",{});var vye=s(Q_);sie=n(vye,"STRONG",{});var wZr=s(sie);gMo=r(wZr,"reformer"),wZr.forEach(t),hMo=r(vye," \u2014 "),PN=n(vye,"A",{href:!0});var AZr=s(PN);pMo=r(AZr,"ReformerModelWithLMHead"),AZr.forEach(t),uMo=r(vye," (Reformer model)"),vye.forEach(t),_Mo=i(W),W_=n(W,"LI",{});var Fye=s(W_);lie=n(Fye,"STRONG",{});var yZr=s(lie);bMo=r(yZr,"rembert"),yZr.forEach(t),vMo=r(Fye," \u2014 "),IN=n(Fye,"A",{href:!0});var LZr=s(IN);FMo=r(LZr,"RemBertForCausalLM"),LZr.forEach(t),TMo=r(Fye," (RemBERT model)"),Fye.forEach(t),MMo=i(W),H_=n(W,"LI",{});var Tye=s(H_);iie=n(Tye,"STRONG",{});var xZr=s(iie);EMo=r(xZr,"roberta"),xZr.forEach(t),CMo=r(Tye," \u2014 "),qN=n(Tye,"A",{href:!0});var $Zr=s(qN);wMo=r($Zr,"RobertaForCausalLM"),$Zr.forEach(t),AMo=r(Tye," (RoBERTa model)"),Tye.forEach(t),yMo=i(W),U_=n(W,"LI",{});var Mye=s(U_);die=n(Mye,"STRONG",{});var kZr=s(die);LMo=r(kZr,"roformer"),kZr.forEach(t),xMo=r(Mye," \u2014 "),NN=n(Mye,"A",{href:!0});var SZr=s(NN);$Mo=r(SZr,"RoFormerForCausalLM"),SZr.forEach(t),kMo=r(Mye," (RoFormer model)"),Mye.forEach(t),SMo=i(W),J_=n(W,"LI",{});var Eye=s(J_);cie=n(Eye,"STRONG",{});var RZr=s(cie);RMo=r(RZr,"speech_to_text_2"),RZr.forEach(t),BMo=r(Eye," \u2014 "),jN=n(Eye,"A",{href:!0});var BZr=s(jN);PMo=r(BZr,"Speech2Text2ForCausalLM"),BZr.forEach(t),IMo=r(Eye," (Speech2Text2 model)"),Eye.forEach(t),qMo=i(W),Y_=n(W,"LI",{});var Cye=s(Y_);fie=n(Cye,"STRONG",{});var PZr=s(fie);NMo=r(PZr,"transfo-xl"),PZr.forEach(t),jMo=r(Cye," \u2014 "),DN=n(Cye,"A",{href:!0});var IZr=s(DN);DMo=r(IZr,"TransfoXLLMHeadModel"),IZr.forEach(t),GMo=r(Cye," (Transformer-XL model)"),Cye.forEach(t),OMo=i(W),K_=n(W,"LI",{});var wye=s(K_);mie=n(wye,"STRONG",{});var qZr=s(mie);VMo=r(qZr,"trocr"),qZr.forEach(t),XMo=r(wye," \u2014 "),GN=n(wye,"A",{href:!0});var NZr=s(GN);zMo=r(NZr,"TrOCRForCausalLM"),NZr.forEach(t),QMo=r(wye," (TrOCR model)"),wye.forEach(t),WMo=i(W),Z_=n(W,"LI",{});var Aye=s(Z_);gie=n(Aye,"STRONG",{});var jZr=s(gie);HMo=r(jZr,"xglm"),jZr.forEach(t),UMo=r(Aye," \u2014 "),ON=n(Aye,"A",{href:!0});var DZr=s(ON);JMo=r(DZr,"XGLMForCausalLM"),DZr.forEach(t),YMo=r(Aye," (XGLM model)"),Aye.forEach(t),KMo=i(W),e2=n(W,"LI",{});var yye=s(e2);hie=n(yye,"STRONG",{});var GZr=s(hie);ZMo=r(GZr,"xlm"),GZr.forEach(t),eEo=r(yye," \u2014 "),VN=n(yye,"A",{href:!0});var OZr=s(VN);oEo=r(OZr,"XLMWithLMHeadModel"),OZr.forEach(t),rEo=r(yye," (XLM model)"),yye.forEach(t),tEo=i(W),o2=n(W,"LI",{});var Lye=s(o2);pie=n(Lye,"STRONG",{});var VZr=s(pie);aEo=r(VZr,"xlm-prophetnet"),VZr.forEach(t),nEo=r(Lye," \u2014 "),XN=n(Lye,"A",{href:!0});var XZr=s(XN);sEo=r(XZr,"XLMProphetNetForCausalLM"),XZr.forEach(t),lEo=r(Lye," (XLMProphetNet model)"),Lye.forEach(t),iEo=i(W),r2=n(W,"LI",{});var xye=s(r2);uie=n(xye,"STRONG",{});var zZr=s(uie);dEo=r(zZr,"xlm-roberta"),zZr.forEach(t),cEo=r(xye," \u2014 "),zN=n(xye,"A",{href:!0});var QZr=s(zN);fEo=r(QZr,"XLMRobertaForCausalLM"),QZr.forEach(t),mEo=r(xye," (XLM-RoBERTa model)"),xye.forEach(t),gEo=i(W),t2=n(W,"LI",{});var $ye=s(t2);_ie=n($ye,"STRONG",{});var WZr=s(_ie);hEo=r(WZr,"xlm-roberta-xl"),WZr.forEach(t),pEo=r($ye," \u2014 "),QN=n($ye,"A",{href:!0});var HZr=s(QN);uEo=r(HZr,"XLMRobertaXLForCausalLM"),HZr.forEach(t),_Eo=r($ye," (XLM-RoBERTa-XL model)"),$ye.forEach(t),bEo=i(W),a2=n(W,"LI",{});var kye=s(a2);bie=n(kye,"STRONG",{});var UZr=s(bie);vEo=r(UZr,"xlnet"),UZr.forEach(t),FEo=r(kye," \u2014 "),WN=n(kye,"A",{href:!0});var JZr=s(WN);TEo=r(JZr,"XLNetLMHeadModel"),JZr.forEach(t),MEo=r(kye," (XLNet model)"),kye.forEach(t),W.forEach(t),EEo=i(oa),n2=n(oa,"P",{});var Sye=s(n2);CEo=r(Sye,"The model is set in evaluation mode by default using "),vie=n(Sye,"CODE",{});var YZr=s(vie);wEo=r(YZr,"model.eval()"),YZr.forEach(t),AEo=r(Sye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fie=n(Sye,"CODE",{});var KZr=s(Fie);yEo=r(KZr,"model.train()"),KZr.forEach(t),Sye.forEach(t),LEo=i(oa),T(s2.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),NPe=i(f),$i=n(f,"H2",{class:!0});var Oqe=s($i);l2=n(Oqe,"A",{id:!0,class:!0,href:!0});var ZZr=s(l2);Tie=n(ZZr,"SPAN",{});var eet=s(Tie);T(Sy.$$.fragment,eet),eet.forEach(t),ZZr.forEach(t),xEo=i(Oqe),Mie=n(Oqe,"SPAN",{});var oet=s(Mie);$Eo=r(oet,"AutoModelForMaskedLM"),oet.forEach(t),Oqe.forEach(t),jPe=i(f),ko=n(f,"DIV",{class:!0});var Os=s(ko);T(Ry.$$.fragment,Os),kEo=i(Os),ki=n(Os,"P",{});var tK=s(ki);SEo=r(tK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),HN=n(tK,"A",{href:!0});var ret=s(HN);REo=r(ret,"from_pretrained()"),ret.forEach(t),BEo=r(tK," class method or the "),UN=n(tK,"A",{href:!0});var tet=s(UN);PEo=r(tet,"from_config()"),tet.forEach(t),IEo=r(tK,` class
method.`),tK.forEach(t),qEo=i(Os),By=n(Os,"P",{});var Vqe=s(By);NEo=r(Vqe,"This class cannot be instantiated directly using "),Eie=n(Vqe,"CODE",{});var aet=s(Eie);jEo=r(aet,"__init__()"),aet.forEach(t),DEo=r(Vqe," (throws an error)."),Vqe.forEach(t),GEo=i(Os),at=n(Os,"DIV",{class:!0});var ew=s(at);T(Py.$$.fragment,ew),OEo=i(ew),Cie=n(ew,"P",{});var net=s(Cie);VEo=r(net,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),net.forEach(t),XEo=i(ew),Si=n(ew,"P",{});var aK=s(Si);zEo=r(aK,`Note:
Loading a model from its configuration file does `),wie=n(aK,"STRONG",{});var set=s(wie);QEo=r(set,"not"),set.forEach(t),WEo=r(aK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JN=n(aK,"A",{href:!0});var iet=s(JN);HEo=r(iet,"from_pretrained()"),iet.forEach(t),UEo=r(aK," to load the model weights."),aK.forEach(t),JEo=i(ew),T(i2.$$.fragment,ew),ew.forEach(t),YEo=i(Os),Ke=n(Os,"DIV",{class:!0});var ra=s(Ke);T(Iy.$$.fragment,ra),KEo=i(ra),Aie=n(ra,"P",{});var det=s(Aie);ZEo=r(det,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),det.forEach(t),eCo=i(ra),xa=n(ra,"P",{});var ow=s(xa);oCo=r(ow,"The model class to instantiate is selected based on the "),yie=n(ow,"CODE",{});var cet=s(yie);rCo=r(cet,"model_type"),cet.forEach(t),tCo=r(ow,` property of the config object (either
passed as an argument or loaded from `),Lie=n(ow,"CODE",{});var fet=s(Lie);aCo=r(fet,"pretrained_model_name_or_path"),fet.forEach(t),nCo=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xie=n(ow,"CODE",{});var met=s(xie);sCo=r(met,"pretrained_model_name_or_path"),met.forEach(t),lCo=r(ow,":"),ow.forEach(t),iCo=i(ra),Q=n(ra,"UL",{});var H=s(Q);d2=n(H,"LI",{});var Rye=s(d2);$ie=n(Rye,"STRONG",{});var get=s($ie);dCo=r(get,"albert"),get.forEach(t),cCo=r(Rye," \u2014 "),YN=n(Rye,"A",{href:!0});var het=s(YN);fCo=r(het,"AlbertForMaskedLM"),het.forEach(t),mCo=r(Rye," (ALBERT model)"),Rye.forEach(t),gCo=i(H),c2=n(H,"LI",{});var Bye=s(c2);kie=n(Bye,"STRONG",{});var pet=s(kie);hCo=r(pet,"bart"),pet.forEach(t),pCo=r(Bye," \u2014 "),KN=n(Bye,"A",{href:!0});var uet=s(KN);uCo=r(uet,"BartForConditionalGeneration"),uet.forEach(t),_Co=r(Bye," (BART model)"),Bye.forEach(t),bCo=i(H),f2=n(H,"LI",{});var Pye=s(f2);Sie=n(Pye,"STRONG",{});var _et=s(Sie);vCo=r(_et,"bert"),_et.forEach(t),FCo=r(Pye," \u2014 "),ZN=n(Pye,"A",{href:!0});var bet=s(ZN);TCo=r(bet,"BertForMaskedLM"),bet.forEach(t),MCo=r(Pye," (BERT model)"),Pye.forEach(t),ECo=i(H),m2=n(H,"LI",{});var Iye=s(m2);Rie=n(Iye,"STRONG",{});var vet=s(Rie);CCo=r(vet,"big_bird"),vet.forEach(t),wCo=r(Iye," \u2014 "),ej=n(Iye,"A",{href:!0});var Fet=s(ej);ACo=r(Fet,"BigBirdForMaskedLM"),Fet.forEach(t),yCo=r(Iye," (BigBird model)"),Iye.forEach(t),LCo=i(H),g2=n(H,"LI",{});var qye=s(g2);Bie=n(qye,"STRONG",{});var Tet=s(Bie);xCo=r(Tet,"camembert"),Tet.forEach(t),$Co=r(qye," \u2014 "),oj=n(qye,"A",{href:!0});var Met=s(oj);kCo=r(Met,"CamembertForMaskedLM"),Met.forEach(t),SCo=r(qye," (CamemBERT model)"),qye.forEach(t),RCo=i(H),h2=n(H,"LI",{});var Nye=s(h2);Pie=n(Nye,"STRONG",{});var Eet=s(Pie);BCo=r(Eet,"convbert"),Eet.forEach(t),PCo=r(Nye," \u2014 "),rj=n(Nye,"A",{href:!0});var Cet=s(rj);ICo=r(Cet,"ConvBertForMaskedLM"),Cet.forEach(t),qCo=r(Nye," (ConvBERT model)"),Nye.forEach(t),NCo=i(H),p2=n(H,"LI",{});var jye=s(p2);Iie=n(jye,"STRONG",{});var wet=s(Iie);jCo=r(wet,"data2vec-text"),wet.forEach(t),DCo=r(jye," \u2014 "),tj=n(jye,"A",{href:!0});var Aet=s(tj);GCo=r(Aet,"Data2VecTextForMaskedLM"),Aet.forEach(t),OCo=r(jye," (Data2VecText model)"),jye.forEach(t),VCo=i(H),u2=n(H,"LI",{});var Dye=s(u2);qie=n(Dye,"STRONG",{});var yet=s(qie);XCo=r(yet,"deberta"),yet.forEach(t),zCo=r(Dye," \u2014 "),aj=n(Dye,"A",{href:!0});var Let=s(aj);QCo=r(Let,"DebertaForMaskedLM"),Let.forEach(t),WCo=r(Dye," (DeBERTa model)"),Dye.forEach(t),HCo=i(H),_2=n(H,"LI",{});var Gye=s(_2);Nie=n(Gye,"STRONG",{});var xet=s(Nie);UCo=r(xet,"deberta-v2"),xet.forEach(t),JCo=r(Gye," \u2014 "),nj=n(Gye,"A",{href:!0});var $et=s(nj);YCo=r($et,"DebertaV2ForMaskedLM"),$et.forEach(t),KCo=r(Gye," (DeBERTa-v2 model)"),Gye.forEach(t),ZCo=i(H),b2=n(H,"LI",{});var Oye=s(b2);jie=n(Oye,"STRONG",{});var ket=s(jie);e5o=r(ket,"distilbert"),ket.forEach(t),o5o=r(Oye," \u2014 "),sj=n(Oye,"A",{href:!0});var Set=s(sj);r5o=r(Set,"DistilBertForMaskedLM"),Set.forEach(t),t5o=r(Oye," (DistilBERT model)"),Oye.forEach(t),a5o=i(H),v2=n(H,"LI",{});var Vye=s(v2);Die=n(Vye,"STRONG",{});var Ret=s(Die);n5o=r(Ret,"electra"),Ret.forEach(t),s5o=r(Vye," \u2014 "),lj=n(Vye,"A",{href:!0});var Bet=s(lj);l5o=r(Bet,"ElectraForMaskedLM"),Bet.forEach(t),i5o=r(Vye," (ELECTRA model)"),Vye.forEach(t),d5o=i(H),F2=n(H,"LI",{});var Xye=s(F2);Gie=n(Xye,"STRONG",{});var Pet=s(Gie);c5o=r(Pet,"flaubert"),Pet.forEach(t),f5o=r(Xye," \u2014 "),ij=n(Xye,"A",{href:!0});var Iet=s(ij);m5o=r(Iet,"FlaubertWithLMHeadModel"),Iet.forEach(t),g5o=r(Xye," (FlauBERT model)"),Xye.forEach(t),h5o=i(H),T2=n(H,"LI",{});var zye=s(T2);Oie=n(zye,"STRONG",{});var qet=s(Oie);p5o=r(qet,"fnet"),qet.forEach(t),u5o=r(zye," \u2014 "),dj=n(zye,"A",{href:!0});var Net=s(dj);_5o=r(Net,"FNetForMaskedLM"),Net.forEach(t),b5o=r(zye," (FNet model)"),zye.forEach(t),v5o=i(H),M2=n(H,"LI",{});var Qye=s(M2);Vie=n(Qye,"STRONG",{});var jet=s(Vie);F5o=r(jet,"funnel"),jet.forEach(t),T5o=r(Qye," \u2014 "),cj=n(Qye,"A",{href:!0});var Det=s(cj);M5o=r(Det,"FunnelForMaskedLM"),Det.forEach(t),E5o=r(Qye," (Funnel Transformer model)"),Qye.forEach(t),C5o=i(H),E2=n(H,"LI",{});var Wye=s(E2);Xie=n(Wye,"STRONG",{});var Get=s(Xie);w5o=r(Get,"ibert"),Get.forEach(t),A5o=r(Wye," \u2014 "),fj=n(Wye,"A",{href:!0});var Oet=s(fj);y5o=r(Oet,"IBertForMaskedLM"),Oet.forEach(t),L5o=r(Wye," (I-BERT model)"),Wye.forEach(t),x5o=i(H),C2=n(H,"LI",{});var Hye=s(C2);zie=n(Hye,"STRONG",{});var Vet=s(zie);$5o=r(Vet,"layoutlm"),Vet.forEach(t),k5o=r(Hye," \u2014 "),mj=n(Hye,"A",{href:!0});var Xet=s(mj);S5o=r(Xet,"LayoutLMForMaskedLM"),Xet.forEach(t),R5o=r(Hye," (LayoutLM model)"),Hye.forEach(t),B5o=i(H),w2=n(H,"LI",{});var Uye=s(w2);Qie=n(Uye,"STRONG",{});var zet=s(Qie);P5o=r(zet,"longformer"),zet.forEach(t),I5o=r(Uye," \u2014 "),gj=n(Uye,"A",{href:!0});var Qet=s(gj);q5o=r(Qet,"LongformerForMaskedLM"),Qet.forEach(t),N5o=r(Uye," (Longformer model)"),Uye.forEach(t),j5o=i(H),A2=n(H,"LI",{});var Jye=s(A2);Wie=n(Jye,"STRONG",{});var Wet=s(Wie);D5o=r(Wet,"mbart"),Wet.forEach(t),G5o=r(Jye," \u2014 "),hj=n(Jye,"A",{href:!0});var Het=s(hj);O5o=r(Het,"MBartForConditionalGeneration"),Het.forEach(t),V5o=r(Jye," (mBART model)"),Jye.forEach(t),X5o=i(H),y2=n(H,"LI",{});var Yye=s(y2);Hie=n(Yye,"STRONG",{});var Uet=s(Hie);z5o=r(Uet,"megatron-bert"),Uet.forEach(t),Q5o=r(Yye," \u2014 "),pj=n(Yye,"A",{href:!0});var Jet=s(pj);W5o=r(Jet,"MegatronBertForMaskedLM"),Jet.forEach(t),H5o=r(Yye," (MegatronBert model)"),Yye.forEach(t),U5o=i(H),L2=n(H,"LI",{});var Kye=s(L2);Uie=n(Kye,"STRONG",{});var Yet=s(Uie);J5o=r(Yet,"mobilebert"),Yet.forEach(t),Y5o=r(Kye," \u2014 "),uj=n(Kye,"A",{href:!0});var Ket=s(uj);K5o=r(Ket,"MobileBertForMaskedLM"),Ket.forEach(t),Z5o=r(Kye," (MobileBERT model)"),Kye.forEach(t),e3o=i(H),x2=n(H,"LI",{});var Zye=s(x2);Jie=n(Zye,"STRONG",{});var Zet=s(Jie);o3o=r(Zet,"mpnet"),Zet.forEach(t),r3o=r(Zye," \u2014 "),_j=n(Zye,"A",{href:!0});var eot=s(_j);t3o=r(eot,"MPNetForMaskedLM"),eot.forEach(t),a3o=r(Zye," (MPNet model)"),Zye.forEach(t),n3o=i(H),$2=n(H,"LI",{});var eLe=s($2);Yie=n(eLe,"STRONG",{});var oot=s(Yie);s3o=r(oot,"nystromformer"),oot.forEach(t),l3o=r(eLe," \u2014 "),bj=n(eLe,"A",{href:!0});var rot=s(bj);i3o=r(rot,"NystromformerForMaskedLM"),rot.forEach(t),d3o=r(eLe," (Nystromformer model)"),eLe.forEach(t),c3o=i(H),k2=n(H,"LI",{});var oLe=s(k2);Kie=n(oLe,"STRONG",{});var tot=s(Kie);f3o=r(tot,"perceiver"),tot.forEach(t),m3o=r(oLe," \u2014 "),vj=n(oLe,"A",{href:!0});var aot=s(vj);g3o=r(aot,"PerceiverForMaskedLM"),aot.forEach(t),h3o=r(oLe," (Perceiver model)"),oLe.forEach(t),p3o=i(H),S2=n(H,"LI",{});var rLe=s(S2);Zie=n(rLe,"STRONG",{});var not=s(Zie);u3o=r(not,"qdqbert"),not.forEach(t),_3o=r(rLe," \u2014 "),Fj=n(rLe,"A",{href:!0});var sot=s(Fj);b3o=r(sot,"QDQBertForMaskedLM"),sot.forEach(t),v3o=r(rLe," (QDQBert model)"),rLe.forEach(t),F3o=i(H),R2=n(H,"LI",{});var tLe=s(R2);ede=n(tLe,"STRONG",{});var lot=s(ede);T3o=r(lot,"reformer"),lot.forEach(t),M3o=r(tLe," \u2014 "),Tj=n(tLe,"A",{href:!0});var iot=s(Tj);E3o=r(iot,"ReformerForMaskedLM"),iot.forEach(t),C3o=r(tLe," (Reformer model)"),tLe.forEach(t),w3o=i(H),B2=n(H,"LI",{});var aLe=s(B2);ode=n(aLe,"STRONG",{});var dot=s(ode);A3o=r(dot,"rembert"),dot.forEach(t),y3o=r(aLe," \u2014 "),Mj=n(aLe,"A",{href:!0});var cot=s(Mj);L3o=r(cot,"RemBertForMaskedLM"),cot.forEach(t),x3o=r(aLe," (RemBERT model)"),aLe.forEach(t),$3o=i(H),P2=n(H,"LI",{});var nLe=s(P2);rde=n(nLe,"STRONG",{});var fot=s(rde);k3o=r(fot,"roberta"),fot.forEach(t),S3o=r(nLe," \u2014 "),Ej=n(nLe,"A",{href:!0});var mot=s(Ej);R3o=r(mot,"RobertaForMaskedLM"),mot.forEach(t),B3o=r(nLe," (RoBERTa model)"),nLe.forEach(t),P3o=i(H),I2=n(H,"LI",{});var sLe=s(I2);tde=n(sLe,"STRONG",{});var got=s(tde);I3o=r(got,"roformer"),got.forEach(t),q3o=r(sLe," \u2014 "),Cj=n(sLe,"A",{href:!0});var hot=s(Cj);N3o=r(hot,"RoFormerForMaskedLM"),hot.forEach(t),j3o=r(sLe," (RoFormer model)"),sLe.forEach(t),D3o=i(H),q2=n(H,"LI",{});var lLe=s(q2);ade=n(lLe,"STRONG",{});var pot=s(ade);G3o=r(pot,"squeezebert"),pot.forEach(t),O3o=r(lLe," \u2014 "),wj=n(lLe,"A",{href:!0});var uot=s(wj);V3o=r(uot,"SqueezeBertForMaskedLM"),uot.forEach(t),X3o=r(lLe," (SqueezeBERT model)"),lLe.forEach(t),z3o=i(H),N2=n(H,"LI",{});var iLe=s(N2);nde=n(iLe,"STRONG",{});var _ot=s(nde);Q3o=r(_ot,"tapas"),_ot.forEach(t),W3o=r(iLe," \u2014 "),Aj=n(iLe,"A",{href:!0});var bot=s(Aj);H3o=r(bot,"TapasForMaskedLM"),bot.forEach(t),U3o=r(iLe," (TAPAS model)"),iLe.forEach(t),J3o=i(H),j2=n(H,"LI",{});var dLe=s(j2);sde=n(dLe,"STRONG",{});var vot=s(sde);Y3o=r(vot,"wav2vec2"),vot.forEach(t),K3o=r(dLe," \u2014 "),lde=n(dLe,"CODE",{});var Fot=s(lde);Z3o=r(Fot,"Wav2Vec2ForMaskedLM"),Fot.forEach(t),ewo=r(dLe," (Wav2Vec2 model)"),dLe.forEach(t),owo=i(H),D2=n(H,"LI",{});var cLe=s(D2);ide=n(cLe,"STRONG",{});var Tot=s(ide);rwo=r(Tot,"xlm"),Tot.forEach(t),two=r(cLe," \u2014 "),yj=n(cLe,"A",{href:!0});var Mot=s(yj);awo=r(Mot,"XLMWithLMHeadModel"),Mot.forEach(t),nwo=r(cLe," (XLM model)"),cLe.forEach(t),swo=i(H),G2=n(H,"LI",{});var fLe=s(G2);dde=n(fLe,"STRONG",{});var Eot=s(dde);lwo=r(Eot,"xlm-roberta"),Eot.forEach(t),iwo=r(fLe," \u2014 "),Lj=n(fLe,"A",{href:!0});var Cot=s(Lj);dwo=r(Cot,"XLMRobertaForMaskedLM"),Cot.forEach(t),cwo=r(fLe," (XLM-RoBERTa model)"),fLe.forEach(t),fwo=i(H),O2=n(H,"LI",{});var mLe=s(O2);cde=n(mLe,"STRONG",{});var wot=s(cde);mwo=r(wot,"xlm-roberta-xl"),wot.forEach(t),gwo=r(mLe," \u2014 "),xj=n(mLe,"A",{href:!0});var Aot=s(xj);hwo=r(Aot,"XLMRobertaXLForMaskedLM"),Aot.forEach(t),pwo=r(mLe," (XLM-RoBERTa-XL model)"),mLe.forEach(t),uwo=i(H),V2=n(H,"LI",{});var gLe=s(V2);fde=n(gLe,"STRONG",{});var yot=s(fde);_wo=r(yot,"yoso"),yot.forEach(t),bwo=r(gLe," \u2014 "),$j=n(gLe,"A",{href:!0});var Lot=s($j);vwo=r(Lot,"YosoForMaskedLM"),Lot.forEach(t),Fwo=r(gLe," (YOSO model)"),gLe.forEach(t),H.forEach(t),Two=i(ra),X2=n(ra,"P",{});var hLe=s(X2);Mwo=r(hLe,"The model is set in evaluation mode by default using "),mde=n(hLe,"CODE",{});var xot=s(mde);Ewo=r(xot,"model.eval()"),xot.forEach(t),Cwo=r(hLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gde=n(hLe,"CODE",{});var $ot=s(gde);wwo=r($ot,"model.train()"),$ot.forEach(t),hLe.forEach(t),Awo=i(ra),T(z2.$$.fragment,ra),ra.forEach(t),Os.forEach(t),DPe=i(f),Ri=n(f,"H2",{class:!0});var Xqe=s(Ri);Q2=n(Xqe,"A",{id:!0,class:!0,href:!0});var kot=s(Q2);hde=n(kot,"SPAN",{});var Sot=s(hde);T(qy.$$.fragment,Sot),Sot.forEach(t),kot.forEach(t),ywo=i(Xqe),pde=n(Xqe,"SPAN",{});var Rot=s(pde);Lwo=r(Rot,"AutoModelForSeq2SeqLM"),Rot.forEach(t),Xqe.forEach(t),GPe=i(f),So=n(f,"DIV",{class:!0});var Vs=s(So);T(Ny.$$.fragment,Vs),xwo=i(Vs),Bi=n(Vs,"P",{});var nK=s(Bi);$wo=r(nK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kj=n(nK,"A",{href:!0});var Bot=s(kj);kwo=r(Bot,"from_pretrained()"),Bot.forEach(t),Swo=r(nK," class method or the "),Sj=n(nK,"A",{href:!0});var Pot=s(Sj);Rwo=r(Pot,"from_config()"),Pot.forEach(t),Bwo=r(nK,` class
method.`),nK.forEach(t),Pwo=i(Vs),jy=n(Vs,"P",{});var zqe=s(jy);Iwo=r(zqe,"This class cannot be instantiated directly using "),ude=n(zqe,"CODE",{});var Iot=s(ude);qwo=r(Iot,"__init__()"),Iot.forEach(t),Nwo=r(zqe," (throws an error)."),zqe.forEach(t),jwo=i(Vs),nt=n(Vs,"DIV",{class:!0});var rw=s(nt);T(Dy.$$.fragment,rw),Dwo=i(rw),_de=n(rw,"P",{});var qot=s(_de);Gwo=r(qot,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qot.forEach(t),Owo=i(rw),Pi=n(rw,"P",{});var sK=s(Pi);Vwo=r(sK,`Note:
Loading a model from its configuration file does `),bde=n(sK,"STRONG",{});var Not=s(bde);Xwo=r(Not,"not"),Not.forEach(t),zwo=r(sK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rj=n(sK,"A",{href:!0});var jot=s(Rj);Qwo=r(jot,"from_pretrained()"),jot.forEach(t),Wwo=r(sK," to load the model weights."),sK.forEach(t),Hwo=i(rw),T(W2.$$.fragment,rw),rw.forEach(t),Uwo=i(Vs),Ze=n(Vs,"DIV",{class:!0});var ta=s(Ze);T(Gy.$$.fragment,ta),Jwo=i(ta),vde=n(ta,"P",{});var Dot=s(vde);Ywo=r(Dot,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Dot.forEach(t),Kwo=i(ta),$a=n(ta,"P",{});var tw=s($a);Zwo=r(tw,"The model class to instantiate is selected based on the "),Fde=n(tw,"CODE",{});var Got=s(Fde);eAo=r(Got,"model_type"),Got.forEach(t),oAo=r(tw,` property of the config object (either
passed as an argument or loaded from `),Tde=n(tw,"CODE",{});var Oot=s(Tde);rAo=r(Oot,"pretrained_model_name_or_path"),Oot.forEach(t),tAo=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mde=n(tw,"CODE",{});var Vot=s(Mde);aAo=r(Vot,"pretrained_model_name_or_path"),Vot.forEach(t),nAo=r(tw,":"),tw.forEach(t),sAo=i(ta),he=n(ta,"UL",{});var ue=s(he);H2=n(ue,"LI",{});var pLe=s(H2);Ede=n(pLe,"STRONG",{});var Xot=s(Ede);lAo=r(Xot,"bart"),Xot.forEach(t),iAo=r(pLe," \u2014 "),Bj=n(pLe,"A",{href:!0});var zot=s(Bj);dAo=r(zot,"BartForConditionalGeneration"),zot.forEach(t),cAo=r(pLe," (BART model)"),pLe.forEach(t),fAo=i(ue),U2=n(ue,"LI",{});var uLe=s(U2);Cde=n(uLe,"STRONG",{});var Qot=s(Cde);mAo=r(Qot,"bigbird_pegasus"),Qot.forEach(t),gAo=r(uLe," \u2014 "),Pj=n(uLe,"A",{href:!0});var Wot=s(Pj);hAo=r(Wot,"BigBirdPegasusForConditionalGeneration"),Wot.forEach(t),pAo=r(uLe," (BigBirdPegasus model)"),uLe.forEach(t),uAo=i(ue),J2=n(ue,"LI",{});var _Le=s(J2);wde=n(_Le,"STRONG",{});var Hot=s(wde);_Ao=r(Hot,"blenderbot"),Hot.forEach(t),bAo=r(_Le," \u2014 "),Ij=n(_Le,"A",{href:!0});var Uot=s(Ij);vAo=r(Uot,"BlenderbotForConditionalGeneration"),Uot.forEach(t),FAo=r(_Le," (Blenderbot model)"),_Le.forEach(t),TAo=i(ue),Y2=n(ue,"LI",{});var bLe=s(Y2);Ade=n(bLe,"STRONG",{});var Jot=s(Ade);MAo=r(Jot,"blenderbot-small"),Jot.forEach(t),EAo=r(bLe," \u2014 "),qj=n(bLe,"A",{href:!0});var Yot=s(qj);CAo=r(Yot,"BlenderbotSmallForConditionalGeneration"),Yot.forEach(t),wAo=r(bLe," (BlenderbotSmall model)"),bLe.forEach(t),AAo=i(ue),K2=n(ue,"LI",{});var vLe=s(K2);yde=n(vLe,"STRONG",{});var Kot=s(yde);yAo=r(Kot,"encoder-decoder"),Kot.forEach(t),LAo=r(vLe," \u2014 "),Nj=n(vLe,"A",{href:!0});var Zot=s(Nj);xAo=r(Zot,"EncoderDecoderModel"),Zot.forEach(t),$Ao=r(vLe," (Encoder decoder model)"),vLe.forEach(t),kAo=i(ue),Z2=n(ue,"LI",{});var FLe=s(Z2);Lde=n(FLe,"STRONG",{});var ert=s(Lde);SAo=r(ert,"fsmt"),ert.forEach(t),RAo=r(FLe," \u2014 "),jj=n(FLe,"A",{href:!0});var ort=s(jj);BAo=r(ort,"FSMTForConditionalGeneration"),ort.forEach(t),PAo=r(FLe," (FairSeq Machine-Translation model)"),FLe.forEach(t),IAo=i(ue),e1=n(ue,"LI",{});var TLe=s(e1);xde=n(TLe,"STRONG",{});var rrt=s(xde);qAo=r(rrt,"led"),rrt.forEach(t),NAo=r(TLe," \u2014 "),Dj=n(TLe,"A",{href:!0});var trt=s(Dj);jAo=r(trt,"LEDForConditionalGeneration"),trt.forEach(t),DAo=r(TLe," (LED model)"),TLe.forEach(t),GAo=i(ue),o1=n(ue,"LI",{});var MLe=s(o1);$de=n(MLe,"STRONG",{});var art=s($de);OAo=r(art,"m2m_100"),art.forEach(t),VAo=r(MLe," \u2014 "),Gj=n(MLe,"A",{href:!0});var nrt=s(Gj);XAo=r(nrt,"M2M100ForConditionalGeneration"),nrt.forEach(t),zAo=r(MLe," (M2M100 model)"),MLe.forEach(t),QAo=i(ue),r1=n(ue,"LI",{});var ELe=s(r1);kde=n(ELe,"STRONG",{});var srt=s(kde);WAo=r(srt,"marian"),srt.forEach(t),HAo=r(ELe," \u2014 "),Oj=n(ELe,"A",{href:!0});var lrt=s(Oj);UAo=r(lrt,"MarianMTModel"),lrt.forEach(t),JAo=r(ELe," (Marian model)"),ELe.forEach(t),YAo=i(ue),t1=n(ue,"LI",{});var CLe=s(t1);Sde=n(CLe,"STRONG",{});var irt=s(Sde);KAo=r(irt,"mbart"),irt.forEach(t),ZAo=r(CLe," \u2014 "),Vj=n(CLe,"A",{href:!0});var drt=s(Vj);eyo=r(drt,"MBartForConditionalGeneration"),drt.forEach(t),oyo=r(CLe," (mBART model)"),CLe.forEach(t),ryo=i(ue),a1=n(ue,"LI",{});var wLe=s(a1);Rde=n(wLe,"STRONG",{});var crt=s(Rde);tyo=r(crt,"mt5"),crt.forEach(t),ayo=r(wLe," \u2014 "),Xj=n(wLe,"A",{href:!0});var frt=s(Xj);nyo=r(frt,"MT5ForConditionalGeneration"),frt.forEach(t),syo=r(wLe," (mT5 model)"),wLe.forEach(t),lyo=i(ue),n1=n(ue,"LI",{});var ALe=s(n1);Bde=n(ALe,"STRONG",{});var mrt=s(Bde);iyo=r(mrt,"pegasus"),mrt.forEach(t),dyo=r(ALe," \u2014 "),zj=n(ALe,"A",{href:!0});var grt=s(zj);cyo=r(grt,"PegasusForConditionalGeneration"),grt.forEach(t),fyo=r(ALe," (Pegasus model)"),ALe.forEach(t),myo=i(ue),s1=n(ue,"LI",{});var yLe=s(s1);Pde=n(yLe,"STRONG",{});var hrt=s(Pde);gyo=r(hrt,"plbart"),hrt.forEach(t),hyo=r(yLe," \u2014 "),Qj=n(yLe,"A",{href:!0});var prt=s(Qj);pyo=r(prt,"PLBartForConditionalGeneration"),prt.forEach(t),uyo=r(yLe," (PLBart model)"),yLe.forEach(t),_yo=i(ue),l1=n(ue,"LI",{});var LLe=s(l1);Ide=n(LLe,"STRONG",{});var urt=s(Ide);byo=r(urt,"prophetnet"),urt.forEach(t),vyo=r(LLe," \u2014 "),Wj=n(LLe,"A",{href:!0});var _rt=s(Wj);Fyo=r(_rt,"ProphetNetForConditionalGeneration"),_rt.forEach(t),Tyo=r(LLe," (ProphetNet model)"),LLe.forEach(t),Myo=i(ue),i1=n(ue,"LI",{});var xLe=s(i1);qde=n(xLe,"STRONG",{});var brt=s(qde);Eyo=r(brt,"t5"),brt.forEach(t),Cyo=r(xLe," \u2014 "),Hj=n(xLe,"A",{href:!0});var vrt=s(Hj);wyo=r(vrt,"T5ForConditionalGeneration"),vrt.forEach(t),Ayo=r(xLe," (T5 model)"),xLe.forEach(t),yyo=i(ue),d1=n(ue,"LI",{});var $Le=s(d1);Nde=n($Le,"STRONG",{});var Frt=s(Nde);Lyo=r(Frt,"tapex"),Frt.forEach(t),xyo=r($Le," \u2014 "),Uj=n($Le,"A",{href:!0});var Trt=s(Uj);$yo=r(Trt,"BartForConditionalGeneration"),Trt.forEach(t),kyo=r($Le," (TAPEX model)"),$Le.forEach(t),Syo=i(ue),c1=n(ue,"LI",{});var kLe=s(c1);jde=n(kLe,"STRONG",{});var Mrt=s(jde);Ryo=r(Mrt,"xlm-prophetnet"),Mrt.forEach(t),Byo=r(kLe," \u2014 "),Jj=n(kLe,"A",{href:!0});var Ert=s(Jj);Pyo=r(Ert,"XLMProphetNetForConditionalGeneration"),Ert.forEach(t),Iyo=r(kLe," (XLMProphetNet model)"),kLe.forEach(t),ue.forEach(t),qyo=i(ta),f1=n(ta,"P",{});var SLe=s(f1);Nyo=r(SLe,"The model is set in evaluation mode by default using "),Dde=n(SLe,"CODE",{});var Crt=s(Dde);jyo=r(Crt,"model.eval()"),Crt.forEach(t),Dyo=r(SLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gde=n(SLe,"CODE",{});var wrt=s(Gde);Gyo=r(wrt,"model.train()"),wrt.forEach(t),SLe.forEach(t),Oyo=i(ta),T(m1.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),OPe=i(f),Ii=n(f,"H2",{class:!0});var Qqe=s(Ii);g1=n(Qqe,"A",{id:!0,class:!0,href:!0});var Art=s(g1);Ode=n(Art,"SPAN",{});var yrt=s(Ode);T(Oy.$$.fragment,yrt),yrt.forEach(t),Art.forEach(t),Vyo=i(Qqe),Vde=n(Qqe,"SPAN",{});var Lrt=s(Vde);Xyo=r(Lrt,"AutoModelForSequenceClassification"),Lrt.forEach(t),Qqe.forEach(t),VPe=i(f),Ro=n(f,"DIV",{class:!0});var Xs=s(Ro);T(Vy.$$.fragment,Xs),zyo=i(Xs),qi=n(Xs,"P",{});var lK=s(qi);Qyo=r(lK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Yj=n(lK,"A",{href:!0});var xrt=s(Yj);Wyo=r(xrt,"from_pretrained()"),xrt.forEach(t),Hyo=r(lK," class method or the "),Kj=n(lK,"A",{href:!0});var $rt=s(Kj);Uyo=r($rt,"from_config()"),$rt.forEach(t),Jyo=r(lK,` class
method.`),lK.forEach(t),Yyo=i(Xs),Xy=n(Xs,"P",{});var Wqe=s(Xy);Kyo=r(Wqe,"This class cannot be instantiated directly using "),Xde=n(Wqe,"CODE",{});var krt=s(Xde);Zyo=r(krt,"__init__()"),krt.forEach(t),eLo=r(Wqe," (throws an error)."),Wqe.forEach(t),oLo=i(Xs),st=n(Xs,"DIV",{class:!0});var aw=s(st);T(zy.$$.fragment,aw),rLo=i(aw),zde=n(aw,"P",{});var Srt=s(zde);tLo=r(Srt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Srt.forEach(t),aLo=i(aw),Ni=n(aw,"P",{});var iK=s(Ni);nLo=r(iK,`Note:
Loading a model from its configuration file does `),Qde=n(iK,"STRONG",{});var Rrt=s(Qde);sLo=r(Rrt,"not"),Rrt.forEach(t),lLo=r(iK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zj=n(iK,"A",{href:!0});var Brt=s(Zj);iLo=r(Brt,"from_pretrained()"),Brt.forEach(t),dLo=r(iK," to load the model weights."),iK.forEach(t),cLo=i(aw),T(h1.$$.fragment,aw),aw.forEach(t),fLo=i(Xs),eo=n(Xs,"DIV",{class:!0});var aa=s(eo);T(Qy.$$.fragment,aa),mLo=i(aa),Wde=n(aa,"P",{});var Prt=s(Wde);gLo=r(Prt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Prt.forEach(t),hLo=i(aa),ka=n(aa,"P",{});var nw=s(ka);pLo=r(nw,"The model class to instantiate is selected based on the "),Hde=n(nw,"CODE",{});var Irt=s(Hde);uLo=r(Irt,"model_type"),Irt.forEach(t),_Lo=r(nw,` property of the config object (either
passed as an argument or loaded from `),Ude=n(nw,"CODE",{});var qrt=s(Ude);bLo=r(qrt,"pretrained_model_name_or_path"),qrt.forEach(t),vLo=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jde=n(nw,"CODE",{});var Nrt=s(Jde);FLo=r(Nrt,"pretrained_model_name_or_path"),Nrt.forEach(t),TLo=r(nw,":"),nw.forEach(t),MLo=i(aa),q=n(aa,"UL",{});var N=s(q);p1=n(N,"LI",{});var RLe=s(p1);Yde=n(RLe,"STRONG",{});var jrt=s(Yde);ELo=r(jrt,"albert"),jrt.forEach(t),CLo=r(RLe," \u2014 "),eD=n(RLe,"A",{href:!0});var Drt=s(eD);wLo=r(Drt,"AlbertForSequenceClassification"),Drt.forEach(t),ALo=r(RLe," (ALBERT model)"),RLe.forEach(t),yLo=i(N),u1=n(N,"LI",{});var BLe=s(u1);Kde=n(BLe,"STRONG",{});var Grt=s(Kde);LLo=r(Grt,"bart"),Grt.forEach(t),xLo=r(BLe," \u2014 "),oD=n(BLe,"A",{href:!0});var Ort=s(oD);$Lo=r(Ort,"BartForSequenceClassification"),Ort.forEach(t),kLo=r(BLe," (BART model)"),BLe.forEach(t),SLo=i(N),_1=n(N,"LI",{});var PLe=s(_1);Zde=n(PLe,"STRONG",{});var Vrt=s(Zde);RLo=r(Vrt,"bert"),Vrt.forEach(t),BLo=r(PLe," \u2014 "),rD=n(PLe,"A",{href:!0});var Xrt=s(rD);PLo=r(Xrt,"BertForSequenceClassification"),Xrt.forEach(t),ILo=r(PLe," (BERT model)"),PLe.forEach(t),qLo=i(N),b1=n(N,"LI",{});var ILe=s(b1);ece=n(ILe,"STRONG",{});var zrt=s(ece);NLo=r(zrt,"big_bird"),zrt.forEach(t),jLo=r(ILe," \u2014 "),tD=n(ILe,"A",{href:!0});var Qrt=s(tD);DLo=r(Qrt,"BigBirdForSequenceClassification"),Qrt.forEach(t),GLo=r(ILe," (BigBird model)"),ILe.forEach(t),OLo=i(N),v1=n(N,"LI",{});var qLe=s(v1);oce=n(qLe,"STRONG",{});var Wrt=s(oce);VLo=r(Wrt,"bigbird_pegasus"),Wrt.forEach(t),XLo=r(qLe," \u2014 "),aD=n(qLe,"A",{href:!0});var Hrt=s(aD);zLo=r(Hrt,"BigBirdPegasusForSequenceClassification"),Hrt.forEach(t),QLo=r(qLe," (BigBirdPegasus model)"),qLe.forEach(t),WLo=i(N),F1=n(N,"LI",{});var NLe=s(F1);rce=n(NLe,"STRONG",{});var Urt=s(rce);HLo=r(Urt,"camembert"),Urt.forEach(t),ULo=r(NLe," \u2014 "),nD=n(NLe,"A",{href:!0});var Jrt=s(nD);JLo=r(Jrt,"CamembertForSequenceClassification"),Jrt.forEach(t),YLo=r(NLe," (CamemBERT model)"),NLe.forEach(t),KLo=i(N),T1=n(N,"LI",{});var jLe=s(T1);tce=n(jLe,"STRONG",{});var Yrt=s(tce);ZLo=r(Yrt,"canine"),Yrt.forEach(t),e8o=r(jLe," \u2014 "),sD=n(jLe,"A",{href:!0});var Krt=s(sD);o8o=r(Krt,"CanineForSequenceClassification"),Krt.forEach(t),r8o=r(jLe," (Canine model)"),jLe.forEach(t),t8o=i(N),M1=n(N,"LI",{});var DLe=s(M1);ace=n(DLe,"STRONG",{});var Zrt=s(ace);a8o=r(Zrt,"convbert"),Zrt.forEach(t),n8o=r(DLe," \u2014 "),lD=n(DLe,"A",{href:!0});var ett=s(lD);s8o=r(ett,"ConvBertForSequenceClassification"),ett.forEach(t),l8o=r(DLe," (ConvBERT model)"),DLe.forEach(t),i8o=i(N),E1=n(N,"LI",{});var GLe=s(E1);nce=n(GLe,"STRONG",{});var ott=s(nce);d8o=r(ott,"ctrl"),ott.forEach(t),c8o=r(GLe," \u2014 "),iD=n(GLe,"A",{href:!0});var rtt=s(iD);f8o=r(rtt,"CTRLForSequenceClassification"),rtt.forEach(t),m8o=r(GLe," (CTRL model)"),GLe.forEach(t),g8o=i(N),C1=n(N,"LI",{});var OLe=s(C1);sce=n(OLe,"STRONG",{});var ttt=s(sce);h8o=r(ttt,"data2vec-text"),ttt.forEach(t),p8o=r(OLe," \u2014 "),dD=n(OLe,"A",{href:!0});var att=s(dD);u8o=r(att,"Data2VecTextForSequenceClassification"),att.forEach(t),_8o=r(OLe," (Data2VecText model)"),OLe.forEach(t),b8o=i(N),w1=n(N,"LI",{});var VLe=s(w1);lce=n(VLe,"STRONG",{});var ntt=s(lce);v8o=r(ntt,"deberta"),ntt.forEach(t),F8o=r(VLe," \u2014 "),cD=n(VLe,"A",{href:!0});var stt=s(cD);T8o=r(stt,"DebertaForSequenceClassification"),stt.forEach(t),M8o=r(VLe," (DeBERTa model)"),VLe.forEach(t),E8o=i(N),A1=n(N,"LI",{});var XLe=s(A1);ice=n(XLe,"STRONG",{});var ltt=s(ice);C8o=r(ltt,"deberta-v2"),ltt.forEach(t),w8o=r(XLe," \u2014 "),fD=n(XLe,"A",{href:!0});var itt=s(fD);A8o=r(itt,"DebertaV2ForSequenceClassification"),itt.forEach(t),y8o=r(XLe," (DeBERTa-v2 model)"),XLe.forEach(t),L8o=i(N),y1=n(N,"LI",{});var zLe=s(y1);dce=n(zLe,"STRONG",{});var dtt=s(dce);x8o=r(dtt,"distilbert"),dtt.forEach(t),$8o=r(zLe," \u2014 "),mD=n(zLe,"A",{href:!0});var ctt=s(mD);k8o=r(ctt,"DistilBertForSequenceClassification"),ctt.forEach(t),S8o=r(zLe," (DistilBERT model)"),zLe.forEach(t),R8o=i(N),L1=n(N,"LI",{});var QLe=s(L1);cce=n(QLe,"STRONG",{});var ftt=s(cce);B8o=r(ftt,"electra"),ftt.forEach(t),P8o=r(QLe," \u2014 "),gD=n(QLe,"A",{href:!0});var mtt=s(gD);I8o=r(mtt,"ElectraForSequenceClassification"),mtt.forEach(t),q8o=r(QLe," (ELECTRA model)"),QLe.forEach(t),N8o=i(N),x1=n(N,"LI",{});var WLe=s(x1);fce=n(WLe,"STRONG",{});var gtt=s(fce);j8o=r(gtt,"flaubert"),gtt.forEach(t),D8o=r(WLe," \u2014 "),hD=n(WLe,"A",{href:!0});var htt=s(hD);G8o=r(htt,"FlaubertForSequenceClassification"),htt.forEach(t),O8o=r(WLe," (FlauBERT model)"),WLe.forEach(t),V8o=i(N),$1=n(N,"LI",{});var HLe=s($1);mce=n(HLe,"STRONG",{});var ptt=s(mce);X8o=r(ptt,"fnet"),ptt.forEach(t),z8o=r(HLe," \u2014 "),pD=n(HLe,"A",{href:!0});var utt=s(pD);Q8o=r(utt,"FNetForSequenceClassification"),utt.forEach(t),W8o=r(HLe," (FNet model)"),HLe.forEach(t),H8o=i(N),k1=n(N,"LI",{});var ULe=s(k1);gce=n(ULe,"STRONG",{});var _tt=s(gce);U8o=r(_tt,"funnel"),_tt.forEach(t),J8o=r(ULe," \u2014 "),uD=n(ULe,"A",{href:!0});var btt=s(uD);Y8o=r(btt,"FunnelForSequenceClassification"),btt.forEach(t),K8o=r(ULe," (Funnel Transformer model)"),ULe.forEach(t),Z8o=i(N),S1=n(N,"LI",{});var JLe=s(S1);hce=n(JLe,"STRONG",{});var vtt=s(hce);exo=r(vtt,"gpt2"),vtt.forEach(t),oxo=r(JLe," \u2014 "),_D=n(JLe,"A",{href:!0});var Ftt=s(_D);rxo=r(Ftt,"GPT2ForSequenceClassification"),Ftt.forEach(t),txo=r(JLe," (OpenAI GPT-2 model)"),JLe.forEach(t),axo=i(N),R1=n(N,"LI",{});var YLe=s(R1);pce=n(YLe,"STRONG",{});var Ttt=s(pce);nxo=r(Ttt,"gpt_neo"),Ttt.forEach(t),sxo=r(YLe," \u2014 "),bD=n(YLe,"A",{href:!0});var Mtt=s(bD);lxo=r(Mtt,"GPTNeoForSequenceClassification"),Mtt.forEach(t),ixo=r(YLe," (GPT Neo model)"),YLe.forEach(t),dxo=i(N),B1=n(N,"LI",{});var KLe=s(B1);uce=n(KLe,"STRONG",{});var Ett=s(uce);cxo=r(Ett,"gptj"),Ett.forEach(t),fxo=r(KLe," \u2014 "),vD=n(KLe,"A",{href:!0});var Ctt=s(vD);mxo=r(Ctt,"GPTJForSequenceClassification"),Ctt.forEach(t),gxo=r(KLe," (GPT-J model)"),KLe.forEach(t),hxo=i(N),P1=n(N,"LI",{});var ZLe=s(P1);_ce=n(ZLe,"STRONG",{});var wtt=s(_ce);pxo=r(wtt,"ibert"),wtt.forEach(t),uxo=r(ZLe," \u2014 "),FD=n(ZLe,"A",{href:!0});var Att=s(FD);_xo=r(Att,"IBertForSequenceClassification"),Att.forEach(t),bxo=r(ZLe," (I-BERT model)"),ZLe.forEach(t),vxo=i(N),I1=n(N,"LI",{});var e8e=s(I1);bce=n(e8e,"STRONG",{});var ytt=s(bce);Fxo=r(ytt,"layoutlm"),ytt.forEach(t),Txo=r(e8e," \u2014 "),TD=n(e8e,"A",{href:!0});var Ltt=s(TD);Mxo=r(Ltt,"LayoutLMForSequenceClassification"),Ltt.forEach(t),Exo=r(e8e," (LayoutLM model)"),e8e.forEach(t),Cxo=i(N),q1=n(N,"LI",{});var o8e=s(q1);vce=n(o8e,"STRONG",{});var xtt=s(vce);wxo=r(xtt,"layoutlmv2"),xtt.forEach(t),Axo=r(o8e," \u2014 "),MD=n(o8e,"A",{href:!0});var $tt=s(MD);yxo=r($tt,"LayoutLMv2ForSequenceClassification"),$tt.forEach(t),Lxo=r(o8e," (LayoutLMv2 model)"),o8e.forEach(t),xxo=i(N),N1=n(N,"LI",{});var r8e=s(N1);Fce=n(r8e,"STRONG",{});var ktt=s(Fce);$xo=r(ktt,"led"),ktt.forEach(t),kxo=r(r8e," \u2014 "),ED=n(r8e,"A",{href:!0});var Stt=s(ED);Sxo=r(Stt,"LEDForSequenceClassification"),Stt.forEach(t),Rxo=r(r8e," (LED model)"),r8e.forEach(t),Bxo=i(N),j1=n(N,"LI",{});var t8e=s(j1);Tce=n(t8e,"STRONG",{});var Rtt=s(Tce);Pxo=r(Rtt,"longformer"),Rtt.forEach(t),Ixo=r(t8e," \u2014 "),CD=n(t8e,"A",{href:!0});var Btt=s(CD);qxo=r(Btt,"LongformerForSequenceClassification"),Btt.forEach(t),Nxo=r(t8e," (Longformer model)"),t8e.forEach(t),jxo=i(N),D1=n(N,"LI",{});var a8e=s(D1);Mce=n(a8e,"STRONG",{});var Ptt=s(Mce);Dxo=r(Ptt,"mbart"),Ptt.forEach(t),Gxo=r(a8e," \u2014 "),wD=n(a8e,"A",{href:!0});var Itt=s(wD);Oxo=r(Itt,"MBartForSequenceClassification"),Itt.forEach(t),Vxo=r(a8e," (mBART model)"),a8e.forEach(t),Xxo=i(N),G1=n(N,"LI",{});var n8e=s(G1);Ece=n(n8e,"STRONG",{});var qtt=s(Ece);zxo=r(qtt,"megatron-bert"),qtt.forEach(t),Qxo=r(n8e," \u2014 "),AD=n(n8e,"A",{href:!0});var Ntt=s(AD);Wxo=r(Ntt,"MegatronBertForSequenceClassification"),Ntt.forEach(t),Hxo=r(n8e," (MegatronBert model)"),n8e.forEach(t),Uxo=i(N),O1=n(N,"LI",{});var s8e=s(O1);Cce=n(s8e,"STRONG",{});var jtt=s(Cce);Jxo=r(jtt,"mobilebert"),jtt.forEach(t),Yxo=r(s8e," \u2014 "),yD=n(s8e,"A",{href:!0});var Dtt=s(yD);Kxo=r(Dtt,"MobileBertForSequenceClassification"),Dtt.forEach(t),Zxo=r(s8e," (MobileBERT model)"),s8e.forEach(t),e7o=i(N),V1=n(N,"LI",{});var l8e=s(V1);wce=n(l8e,"STRONG",{});var Gtt=s(wce);o7o=r(Gtt,"mpnet"),Gtt.forEach(t),r7o=r(l8e," \u2014 "),LD=n(l8e,"A",{href:!0});var Ott=s(LD);t7o=r(Ott,"MPNetForSequenceClassification"),Ott.forEach(t),a7o=r(l8e," (MPNet model)"),l8e.forEach(t),n7o=i(N),X1=n(N,"LI",{});var i8e=s(X1);Ace=n(i8e,"STRONG",{});var Vtt=s(Ace);s7o=r(Vtt,"nystromformer"),Vtt.forEach(t),l7o=r(i8e," \u2014 "),xD=n(i8e,"A",{href:!0});var Xtt=s(xD);i7o=r(Xtt,"NystromformerForSequenceClassification"),Xtt.forEach(t),d7o=r(i8e," (Nystromformer model)"),i8e.forEach(t),c7o=i(N),z1=n(N,"LI",{});var d8e=s(z1);yce=n(d8e,"STRONG",{});var ztt=s(yce);f7o=r(ztt,"openai-gpt"),ztt.forEach(t),m7o=r(d8e," \u2014 "),$D=n(d8e,"A",{href:!0});var Qtt=s($D);g7o=r(Qtt,"OpenAIGPTForSequenceClassification"),Qtt.forEach(t),h7o=r(d8e," (OpenAI GPT model)"),d8e.forEach(t),p7o=i(N),Q1=n(N,"LI",{});var c8e=s(Q1);Lce=n(c8e,"STRONG",{});var Wtt=s(Lce);u7o=r(Wtt,"perceiver"),Wtt.forEach(t),_7o=r(c8e," \u2014 "),kD=n(c8e,"A",{href:!0});var Htt=s(kD);b7o=r(Htt,"PerceiverForSequenceClassification"),Htt.forEach(t),v7o=r(c8e," (Perceiver model)"),c8e.forEach(t),F7o=i(N),W1=n(N,"LI",{});var f8e=s(W1);xce=n(f8e,"STRONG",{});var Utt=s(xce);T7o=r(Utt,"plbart"),Utt.forEach(t),M7o=r(f8e," \u2014 "),SD=n(f8e,"A",{href:!0});var Jtt=s(SD);E7o=r(Jtt,"PLBartForSequenceClassification"),Jtt.forEach(t),C7o=r(f8e," (PLBart model)"),f8e.forEach(t),w7o=i(N),H1=n(N,"LI",{});var m8e=s(H1);$ce=n(m8e,"STRONG",{});var Ytt=s($ce);A7o=r(Ytt,"qdqbert"),Ytt.forEach(t),y7o=r(m8e," \u2014 "),RD=n(m8e,"A",{href:!0});var Ktt=s(RD);L7o=r(Ktt,"QDQBertForSequenceClassification"),Ktt.forEach(t),x7o=r(m8e," (QDQBert model)"),m8e.forEach(t),$7o=i(N),U1=n(N,"LI",{});var g8e=s(U1);kce=n(g8e,"STRONG",{});var Ztt=s(kce);k7o=r(Ztt,"reformer"),Ztt.forEach(t),S7o=r(g8e," \u2014 "),BD=n(g8e,"A",{href:!0});var eat=s(BD);R7o=r(eat,"ReformerForSequenceClassification"),eat.forEach(t),B7o=r(g8e," (Reformer model)"),g8e.forEach(t),P7o=i(N),J1=n(N,"LI",{});var h8e=s(J1);Sce=n(h8e,"STRONG",{});var oat=s(Sce);I7o=r(oat,"rembert"),oat.forEach(t),q7o=r(h8e," \u2014 "),PD=n(h8e,"A",{href:!0});var rat=s(PD);N7o=r(rat,"RemBertForSequenceClassification"),rat.forEach(t),j7o=r(h8e," (RemBERT model)"),h8e.forEach(t),D7o=i(N),Y1=n(N,"LI",{});var p8e=s(Y1);Rce=n(p8e,"STRONG",{});var tat=s(Rce);G7o=r(tat,"roberta"),tat.forEach(t),O7o=r(p8e," \u2014 "),ID=n(p8e,"A",{href:!0});var aat=s(ID);V7o=r(aat,"RobertaForSequenceClassification"),aat.forEach(t),X7o=r(p8e," (RoBERTa model)"),p8e.forEach(t),z7o=i(N),K1=n(N,"LI",{});var u8e=s(K1);Bce=n(u8e,"STRONG",{});var nat=s(Bce);Q7o=r(nat,"roformer"),nat.forEach(t),W7o=r(u8e," \u2014 "),qD=n(u8e,"A",{href:!0});var sat=s(qD);H7o=r(sat,"RoFormerForSequenceClassification"),sat.forEach(t),U7o=r(u8e," (RoFormer model)"),u8e.forEach(t),J7o=i(N),Z1=n(N,"LI",{});var _8e=s(Z1);Pce=n(_8e,"STRONG",{});var lat=s(Pce);Y7o=r(lat,"squeezebert"),lat.forEach(t),K7o=r(_8e," \u2014 "),ND=n(_8e,"A",{href:!0});var iat=s(ND);Z7o=r(iat,"SqueezeBertForSequenceClassification"),iat.forEach(t),e9o=r(_8e," (SqueezeBERT model)"),_8e.forEach(t),o9o=i(N),eb=n(N,"LI",{});var b8e=s(eb);Ice=n(b8e,"STRONG",{});var dat=s(Ice);r9o=r(dat,"tapas"),dat.forEach(t),t9o=r(b8e," \u2014 "),jD=n(b8e,"A",{href:!0});var cat=s(jD);a9o=r(cat,"TapasForSequenceClassification"),cat.forEach(t),n9o=r(b8e," (TAPAS model)"),b8e.forEach(t),s9o=i(N),ob=n(N,"LI",{});var v8e=s(ob);qce=n(v8e,"STRONG",{});var fat=s(qce);l9o=r(fat,"tapex"),fat.forEach(t),i9o=r(v8e," \u2014 "),DD=n(v8e,"A",{href:!0});var mat=s(DD);d9o=r(mat,"BartForSequenceClassification"),mat.forEach(t),c9o=r(v8e," (TAPEX model)"),v8e.forEach(t),f9o=i(N),rb=n(N,"LI",{});var F8e=s(rb);Nce=n(F8e,"STRONG",{});var gat=s(Nce);m9o=r(gat,"transfo-xl"),gat.forEach(t),g9o=r(F8e," \u2014 "),GD=n(F8e,"A",{href:!0});var hat=s(GD);h9o=r(hat,"TransfoXLForSequenceClassification"),hat.forEach(t),p9o=r(F8e," (Transformer-XL model)"),F8e.forEach(t),u9o=i(N),tb=n(N,"LI",{});var T8e=s(tb);jce=n(T8e,"STRONG",{});var pat=s(jce);_9o=r(pat,"xlm"),pat.forEach(t),b9o=r(T8e," \u2014 "),OD=n(T8e,"A",{href:!0});var uat=s(OD);v9o=r(uat,"XLMForSequenceClassification"),uat.forEach(t),F9o=r(T8e," (XLM model)"),T8e.forEach(t),T9o=i(N),ab=n(N,"LI",{});var M8e=s(ab);Dce=n(M8e,"STRONG",{});var _at=s(Dce);M9o=r(_at,"xlm-roberta"),_at.forEach(t),E9o=r(M8e," \u2014 "),VD=n(M8e,"A",{href:!0});var bat=s(VD);C9o=r(bat,"XLMRobertaForSequenceClassification"),bat.forEach(t),w9o=r(M8e," (XLM-RoBERTa model)"),M8e.forEach(t),A9o=i(N),nb=n(N,"LI",{});var E8e=s(nb);Gce=n(E8e,"STRONG",{});var vat=s(Gce);y9o=r(vat,"xlm-roberta-xl"),vat.forEach(t),L9o=r(E8e," \u2014 "),XD=n(E8e,"A",{href:!0});var Fat=s(XD);x9o=r(Fat,"XLMRobertaXLForSequenceClassification"),Fat.forEach(t),$9o=r(E8e," (XLM-RoBERTa-XL model)"),E8e.forEach(t),k9o=i(N),sb=n(N,"LI",{});var C8e=s(sb);Oce=n(C8e,"STRONG",{});var Tat=s(Oce);S9o=r(Tat,"xlnet"),Tat.forEach(t),R9o=r(C8e," \u2014 "),zD=n(C8e,"A",{href:!0});var Mat=s(zD);B9o=r(Mat,"XLNetForSequenceClassification"),Mat.forEach(t),P9o=r(C8e," (XLNet model)"),C8e.forEach(t),I9o=i(N),lb=n(N,"LI",{});var w8e=s(lb);Vce=n(w8e,"STRONG",{});var Eat=s(Vce);q9o=r(Eat,"yoso"),Eat.forEach(t),N9o=r(w8e," \u2014 "),QD=n(w8e,"A",{href:!0});var Cat=s(QD);j9o=r(Cat,"YosoForSequenceClassification"),Cat.forEach(t),D9o=r(w8e," (YOSO model)"),w8e.forEach(t),N.forEach(t),G9o=i(aa),ib=n(aa,"P",{});var A8e=s(ib);O9o=r(A8e,"The model is set in evaluation mode by default using "),Xce=n(A8e,"CODE",{});var wat=s(Xce);V9o=r(wat,"model.eval()"),wat.forEach(t),X9o=r(A8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zce=n(A8e,"CODE",{});var Aat=s(zce);z9o=r(Aat,"model.train()"),Aat.forEach(t),A8e.forEach(t),Q9o=i(aa),T(db.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),XPe=i(f),ji=n(f,"H2",{class:!0});var Hqe=s(ji);cb=n(Hqe,"A",{id:!0,class:!0,href:!0});var yat=s(cb);Qce=n(yat,"SPAN",{});var Lat=s(Qce);T(Wy.$$.fragment,Lat),Lat.forEach(t),yat.forEach(t),W9o=i(Hqe),Wce=n(Hqe,"SPAN",{});var xat=s(Wce);H9o=r(xat,"AutoModelForMultipleChoice"),xat.forEach(t),Hqe.forEach(t),zPe=i(f),Bo=n(f,"DIV",{class:!0});var zs=s(Bo);T(Hy.$$.fragment,zs),U9o=i(zs),Di=n(zs,"P",{});var dK=s(Di);J9o=r(dK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WD=n(dK,"A",{href:!0});var $at=s(WD);Y9o=r($at,"from_pretrained()"),$at.forEach(t),K9o=r(dK," class method or the "),HD=n(dK,"A",{href:!0});var kat=s(HD);Z9o=r(kat,"from_config()"),kat.forEach(t),e$o=r(dK,` class
method.`),dK.forEach(t),o$o=i(zs),Uy=n(zs,"P",{});var Uqe=s(Uy);r$o=r(Uqe,"This class cannot be instantiated directly using "),Hce=n(Uqe,"CODE",{});var Sat=s(Hce);t$o=r(Sat,"__init__()"),Sat.forEach(t),a$o=r(Uqe," (throws an error)."),Uqe.forEach(t),n$o=i(zs),lt=n(zs,"DIV",{class:!0});var sw=s(lt);T(Jy.$$.fragment,sw),s$o=i(sw),Uce=n(sw,"P",{});var Rat=s(Uce);l$o=r(Rat,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Rat.forEach(t),i$o=i(sw),Gi=n(sw,"P",{});var cK=s(Gi);d$o=r(cK,`Note:
Loading a model from its configuration file does `),Jce=n(cK,"STRONG",{});var Bat=s(Jce);c$o=r(Bat,"not"),Bat.forEach(t),f$o=r(cK,` load the model weights. It only affects the
model\u2019s configuration. Use `),UD=n(cK,"A",{href:!0});var Pat=s(UD);m$o=r(Pat,"from_pretrained()"),Pat.forEach(t),g$o=r(cK," to load the model weights."),cK.forEach(t),h$o=i(sw),T(fb.$$.fragment,sw),sw.forEach(t),p$o=i(zs),oo=n(zs,"DIV",{class:!0});var na=s(oo);T(Yy.$$.fragment,na),u$o=i(na),Yce=n(na,"P",{});var Iat=s(Yce);_$o=r(Iat,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Iat.forEach(t),b$o=i(na),Sa=n(na,"P",{});var lw=s(Sa);v$o=r(lw,"The model class to instantiate is selected based on the "),Kce=n(lw,"CODE",{});var qat=s(Kce);F$o=r(qat,"model_type"),qat.forEach(t),T$o=r(lw,` property of the config object (either
passed as an argument or loaded from `),Zce=n(lw,"CODE",{});var Nat=s(Zce);M$o=r(Nat,"pretrained_model_name_or_path"),Nat.forEach(t),E$o=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),efe=n(lw,"CODE",{});var jat=s(efe);C$o=r(jat,"pretrained_model_name_or_path"),jat.forEach(t),w$o=r(lw,":"),lw.forEach(t),A$o=i(na),Y=n(na,"UL",{});var K=s(Y);mb=n(K,"LI",{});var y8e=s(mb);ofe=n(y8e,"STRONG",{});var Dat=s(ofe);y$o=r(Dat,"albert"),Dat.forEach(t),L$o=r(y8e," \u2014 "),JD=n(y8e,"A",{href:!0});var Gat=s(JD);x$o=r(Gat,"AlbertForMultipleChoice"),Gat.forEach(t),$$o=r(y8e," (ALBERT model)"),y8e.forEach(t),k$o=i(K),gb=n(K,"LI",{});var L8e=s(gb);rfe=n(L8e,"STRONG",{});var Oat=s(rfe);S$o=r(Oat,"bert"),Oat.forEach(t),R$o=r(L8e," \u2014 "),YD=n(L8e,"A",{href:!0});var Vat=s(YD);B$o=r(Vat,"BertForMultipleChoice"),Vat.forEach(t),P$o=r(L8e," (BERT model)"),L8e.forEach(t),I$o=i(K),hb=n(K,"LI",{});var x8e=s(hb);tfe=n(x8e,"STRONG",{});var Xat=s(tfe);q$o=r(Xat,"big_bird"),Xat.forEach(t),N$o=r(x8e," \u2014 "),KD=n(x8e,"A",{href:!0});var zat=s(KD);j$o=r(zat,"BigBirdForMultipleChoice"),zat.forEach(t),D$o=r(x8e," (BigBird model)"),x8e.forEach(t),G$o=i(K),pb=n(K,"LI",{});var $8e=s(pb);afe=n($8e,"STRONG",{});var Qat=s(afe);O$o=r(Qat,"camembert"),Qat.forEach(t),V$o=r($8e," \u2014 "),ZD=n($8e,"A",{href:!0});var Wat=s(ZD);X$o=r(Wat,"CamembertForMultipleChoice"),Wat.forEach(t),z$o=r($8e," (CamemBERT model)"),$8e.forEach(t),Q$o=i(K),ub=n(K,"LI",{});var k8e=s(ub);nfe=n(k8e,"STRONG",{});var Hat=s(nfe);W$o=r(Hat,"canine"),Hat.forEach(t),H$o=r(k8e," \u2014 "),eG=n(k8e,"A",{href:!0});var Uat=s(eG);U$o=r(Uat,"CanineForMultipleChoice"),Uat.forEach(t),J$o=r(k8e," (Canine model)"),k8e.forEach(t),Y$o=i(K),_b=n(K,"LI",{});var S8e=s(_b);sfe=n(S8e,"STRONG",{});var Jat=s(sfe);K$o=r(Jat,"convbert"),Jat.forEach(t),Z$o=r(S8e," \u2014 "),oG=n(S8e,"A",{href:!0});var Yat=s(oG);eko=r(Yat,"ConvBertForMultipleChoice"),Yat.forEach(t),oko=r(S8e," (ConvBERT model)"),S8e.forEach(t),rko=i(K),bb=n(K,"LI",{});var R8e=s(bb);lfe=n(R8e,"STRONG",{});var Kat=s(lfe);tko=r(Kat,"data2vec-text"),Kat.forEach(t),ako=r(R8e," \u2014 "),rG=n(R8e,"A",{href:!0});var Zat=s(rG);nko=r(Zat,"Data2VecTextForMultipleChoice"),Zat.forEach(t),sko=r(R8e," (Data2VecText model)"),R8e.forEach(t),lko=i(K),vb=n(K,"LI",{});var B8e=s(vb);ife=n(B8e,"STRONG",{});var ent=s(ife);iko=r(ent,"distilbert"),ent.forEach(t),dko=r(B8e," \u2014 "),tG=n(B8e,"A",{href:!0});var ont=s(tG);cko=r(ont,"DistilBertForMultipleChoice"),ont.forEach(t),fko=r(B8e," (DistilBERT model)"),B8e.forEach(t),mko=i(K),Fb=n(K,"LI",{});var P8e=s(Fb);dfe=n(P8e,"STRONG",{});var rnt=s(dfe);gko=r(rnt,"electra"),rnt.forEach(t),hko=r(P8e," \u2014 "),aG=n(P8e,"A",{href:!0});var tnt=s(aG);pko=r(tnt,"ElectraForMultipleChoice"),tnt.forEach(t),uko=r(P8e," (ELECTRA model)"),P8e.forEach(t),_ko=i(K),Tb=n(K,"LI",{});var I8e=s(Tb);cfe=n(I8e,"STRONG",{});var ant=s(cfe);bko=r(ant,"flaubert"),ant.forEach(t),vko=r(I8e," \u2014 "),nG=n(I8e,"A",{href:!0});var nnt=s(nG);Fko=r(nnt,"FlaubertForMultipleChoice"),nnt.forEach(t),Tko=r(I8e," (FlauBERT model)"),I8e.forEach(t),Mko=i(K),Mb=n(K,"LI",{});var q8e=s(Mb);ffe=n(q8e,"STRONG",{});var snt=s(ffe);Eko=r(snt,"fnet"),snt.forEach(t),Cko=r(q8e," \u2014 "),sG=n(q8e,"A",{href:!0});var lnt=s(sG);wko=r(lnt,"FNetForMultipleChoice"),lnt.forEach(t),Ako=r(q8e," (FNet model)"),q8e.forEach(t),yko=i(K),Eb=n(K,"LI",{});var N8e=s(Eb);mfe=n(N8e,"STRONG",{});var int=s(mfe);Lko=r(int,"funnel"),int.forEach(t),xko=r(N8e," \u2014 "),lG=n(N8e,"A",{href:!0});var dnt=s(lG);$ko=r(dnt,"FunnelForMultipleChoice"),dnt.forEach(t),kko=r(N8e," (Funnel Transformer model)"),N8e.forEach(t),Sko=i(K),Cb=n(K,"LI",{});var j8e=s(Cb);gfe=n(j8e,"STRONG",{});var cnt=s(gfe);Rko=r(cnt,"ibert"),cnt.forEach(t),Bko=r(j8e," \u2014 "),iG=n(j8e,"A",{href:!0});var fnt=s(iG);Pko=r(fnt,"IBertForMultipleChoice"),fnt.forEach(t),Iko=r(j8e," (I-BERT model)"),j8e.forEach(t),qko=i(K),wb=n(K,"LI",{});var D8e=s(wb);hfe=n(D8e,"STRONG",{});var mnt=s(hfe);Nko=r(mnt,"longformer"),mnt.forEach(t),jko=r(D8e," \u2014 "),dG=n(D8e,"A",{href:!0});var gnt=s(dG);Dko=r(gnt,"LongformerForMultipleChoice"),gnt.forEach(t),Gko=r(D8e," (Longformer model)"),D8e.forEach(t),Oko=i(K),Ab=n(K,"LI",{});var G8e=s(Ab);pfe=n(G8e,"STRONG",{});var hnt=s(pfe);Vko=r(hnt,"megatron-bert"),hnt.forEach(t),Xko=r(G8e," \u2014 "),cG=n(G8e,"A",{href:!0});var pnt=s(cG);zko=r(pnt,"MegatronBertForMultipleChoice"),pnt.forEach(t),Qko=r(G8e," (MegatronBert model)"),G8e.forEach(t),Wko=i(K),yb=n(K,"LI",{});var O8e=s(yb);ufe=n(O8e,"STRONG",{});var unt=s(ufe);Hko=r(unt,"mobilebert"),unt.forEach(t),Uko=r(O8e," \u2014 "),fG=n(O8e,"A",{href:!0});var _nt=s(fG);Jko=r(_nt,"MobileBertForMultipleChoice"),_nt.forEach(t),Yko=r(O8e," (MobileBERT model)"),O8e.forEach(t),Kko=i(K),Lb=n(K,"LI",{});var V8e=s(Lb);_fe=n(V8e,"STRONG",{});var bnt=s(_fe);Zko=r(bnt,"mpnet"),bnt.forEach(t),eSo=r(V8e," \u2014 "),mG=n(V8e,"A",{href:!0});var vnt=s(mG);oSo=r(vnt,"MPNetForMultipleChoice"),vnt.forEach(t),rSo=r(V8e," (MPNet model)"),V8e.forEach(t),tSo=i(K),xb=n(K,"LI",{});var X8e=s(xb);bfe=n(X8e,"STRONG",{});var Fnt=s(bfe);aSo=r(Fnt,"nystromformer"),Fnt.forEach(t),nSo=r(X8e," \u2014 "),gG=n(X8e,"A",{href:!0});var Tnt=s(gG);sSo=r(Tnt,"NystromformerForMultipleChoice"),Tnt.forEach(t),lSo=r(X8e," (Nystromformer model)"),X8e.forEach(t),iSo=i(K),$b=n(K,"LI",{});var z8e=s($b);vfe=n(z8e,"STRONG",{});var Mnt=s(vfe);dSo=r(Mnt,"qdqbert"),Mnt.forEach(t),cSo=r(z8e," \u2014 "),hG=n(z8e,"A",{href:!0});var Ent=s(hG);fSo=r(Ent,"QDQBertForMultipleChoice"),Ent.forEach(t),mSo=r(z8e," (QDQBert model)"),z8e.forEach(t),gSo=i(K),kb=n(K,"LI",{});var Q8e=s(kb);Ffe=n(Q8e,"STRONG",{});var Cnt=s(Ffe);hSo=r(Cnt,"rembert"),Cnt.forEach(t),pSo=r(Q8e," \u2014 "),pG=n(Q8e,"A",{href:!0});var wnt=s(pG);uSo=r(wnt,"RemBertForMultipleChoice"),wnt.forEach(t),_So=r(Q8e," (RemBERT model)"),Q8e.forEach(t),bSo=i(K),Sb=n(K,"LI",{});var W8e=s(Sb);Tfe=n(W8e,"STRONG",{});var Ant=s(Tfe);vSo=r(Ant,"roberta"),Ant.forEach(t),FSo=r(W8e," \u2014 "),uG=n(W8e,"A",{href:!0});var ynt=s(uG);TSo=r(ynt,"RobertaForMultipleChoice"),ynt.forEach(t),MSo=r(W8e," (RoBERTa model)"),W8e.forEach(t),ESo=i(K),Rb=n(K,"LI",{});var H8e=s(Rb);Mfe=n(H8e,"STRONG",{});var Lnt=s(Mfe);CSo=r(Lnt,"roformer"),Lnt.forEach(t),wSo=r(H8e," \u2014 "),_G=n(H8e,"A",{href:!0});var xnt=s(_G);ASo=r(xnt,"RoFormerForMultipleChoice"),xnt.forEach(t),ySo=r(H8e," (RoFormer model)"),H8e.forEach(t),LSo=i(K),Bb=n(K,"LI",{});var U8e=s(Bb);Efe=n(U8e,"STRONG",{});var $nt=s(Efe);xSo=r($nt,"squeezebert"),$nt.forEach(t),$So=r(U8e," \u2014 "),bG=n(U8e,"A",{href:!0});var knt=s(bG);kSo=r(knt,"SqueezeBertForMultipleChoice"),knt.forEach(t),SSo=r(U8e," (SqueezeBERT model)"),U8e.forEach(t),RSo=i(K),Pb=n(K,"LI",{});var J8e=s(Pb);Cfe=n(J8e,"STRONG",{});var Snt=s(Cfe);BSo=r(Snt,"xlm"),Snt.forEach(t),PSo=r(J8e," \u2014 "),vG=n(J8e,"A",{href:!0});var Rnt=s(vG);ISo=r(Rnt,"XLMForMultipleChoice"),Rnt.forEach(t),qSo=r(J8e," (XLM model)"),J8e.forEach(t),NSo=i(K),Ib=n(K,"LI",{});var Y8e=s(Ib);wfe=n(Y8e,"STRONG",{});var Bnt=s(wfe);jSo=r(Bnt,"xlm-roberta"),Bnt.forEach(t),DSo=r(Y8e," \u2014 "),FG=n(Y8e,"A",{href:!0});var Pnt=s(FG);GSo=r(Pnt,"XLMRobertaForMultipleChoice"),Pnt.forEach(t),OSo=r(Y8e," (XLM-RoBERTa model)"),Y8e.forEach(t),VSo=i(K),qb=n(K,"LI",{});var K8e=s(qb);Afe=n(K8e,"STRONG",{});var Int=s(Afe);XSo=r(Int,"xlm-roberta-xl"),Int.forEach(t),zSo=r(K8e," \u2014 "),TG=n(K8e,"A",{href:!0});var qnt=s(TG);QSo=r(qnt,"XLMRobertaXLForMultipleChoice"),qnt.forEach(t),WSo=r(K8e," (XLM-RoBERTa-XL model)"),K8e.forEach(t),HSo=i(K),Nb=n(K,"LI",{});var Z8e=s(Nb);yfe=n(Z8e,"STRONG",{});var Nnt=s(yfe);USo=r(Nnt,"xlnet"),Nnt.forEach(t),JSo=r(Z8e," \u2014 "),MG=n(Z8e,"A",{href:!0});var jnt=s(MG);YSo=r(jnt,"XLNetForMultipleChoice"),jnt.forEach(t),KSo=r(Z8e," (XLNet model)"),Z8e.forEach(t),ZSo=i(K),jb=n(K,"LI",{});var exe=s(jb);Lfe=n(exe,"STRONG",{});var Dnt=s(Lfe);eRo=r(Dnt,"yoso"),Dnt.forEach(t),oRo=r(exe," \u2014 "),EG=n(exe,"A",{href:!0});var Gnt=s(EG);rRo=r(Gnt,"YosoForMultipleChoice"),Gnt.forEach(t),tRo=r(exe," (YOSO model)"),exe.forEach(t),K.forEach(t),aRo=i(na),Db=n(na,"P",{});var oxe=s(Db);nRo=r(oxe,"The model is set in evaluation mode by default using "),xfe=n(oxe,"CODE",{});var Ont=s(xfe);sRo=r(Ont,"model.eval()"),Ont.forEach(t),lRo=r(oxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$fe=n(oxe,"CODE",{});var Vnt=s($fe);iRo=r(Vnt,"model.train()"),Vnt.forEach(t),oxe.forEach(t),dRo=i(na),T(Gb.$$.fragment,na),na.forEach(t),zs.forEach(t),QPe=i(f),Oi=n(f,"H2",{class:!0});var Jqe=s(Oi);Ob=n(Jqe,"A",{id:!0,class:!0,href:!0});var Xnt=s(Ob);kfe=n(Xnt,"SPAN",{});var znt=s(kfe);T(Ky.$$.fragment,znt),znt.forEach(t),Xnt.forEach(t),cRo=i(Jqe),Sfe=n(Jqe,"SPAN",{});var Qnt=s(Sfe);fRo=r(Qnt,"AutoModelForNextSentencePrediction"),Qnt.forEach(t),Jqe.forEach(t),WPe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(Zy.$$.fragment,Qs),mRo=i(Qs),Vi=n(Qs,"P",{});var fK=s(Vi);gRo=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),CG=n(fK,"A",{href:!0});var Wnt=s(CG);hRo=r(Wnt,"from_pretrained()"),Wnt.forEach(t),pRo=r(fK," class method or the "),wG=n(fK,"A",{href:!0});var Hnt=s(wG);uRo=r(Hnt,"from_config()"),Hnt.forEach(t),_Ro=r(fK,` class
method.`),fK.forEach(t),bRo=i(Qs),eL=n(Qs,"P",{});var Yqe=s(eL);vRo=r(Yqe,"This class cannot be instantiated directly using "),Rfe=n(Yqe,"CODE",{});var Unt=s(Rfe);FRo=r(Unt,"__init__()"),Unt.forEach(t),TRo=r(Yqe," (throws an error)."),Yqe.forEach(t),MRo=i(Qs),it=n(Qs,"DIV",{class:!0});var iw=s(it);T(oL.$$.fragment,iw),ERo=i(iw),Bfe=n(iw,"P",{});var Jnt=s(Bfe);CRo=r(Jnt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Jnt.forEach(t),wRo=i(iw),Xi=n(iw,"P",{});var mK=s(Xi);ARo=r(mK,`Note:
Loading a model from its configuration file does `),Pfe=n(mK,"STRONG",{});var Ynt=s(Pfe);yRo=r(Ynt,"not"),Ynt.forEach(t),LRo=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AG=n(mK,"A",{href:!0});var Knt=s(AG);xRo=r(Knt,"from_pretrained()"),Knt.forEach(t),$Ro=r(mK," to load the model weights."),mK.forEach(t),kRo=i(iw),T(Vb.$$.fragment,iw),iw.forEach(t),SRo=i(Qs),ro=n(Qs,"DIV",{class:!0});var sa=s(ro);T(rL.$$.fragment,sa),RRo=i(sa),Ife=n(sa,"P",{});var Znt=s(Ife);BRo=r(Znt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Znt.forEach(t),PRo=i(sa),Ra=n(sa,"P",{});var dw=s(Ra);IRo=r(dw,"The model class to instantiate is selected based on the "),qfe=n(dw,"CODE",{});var est=s(qfe);qRo=r(est,"model_type"),est.forEach(t),NRo=r(dw,` property of the config object (either
passed as an argument or loaded from `),Nfe=n(dw,"CODE",{});var ost=s(Nfe);jRo=r(ost,"pretrained_model_name_or_path"),ost.forEach(t),DRo=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jfe=n(dw,"CODE",{});var rst=s(jfe);GRo=r(rst,"pretrained_model_name_or_path"),rst.forEach(t),ORo=r(dw,":"),dw.forEach(t),VRo=i(sa),Yr=n(sa,"UL",{});var Ws=s(Yr);Xb=n(Ws,"LI",{});var rxe=s(Xb);Dfe=n(rxe,"STRONG",{});var tst=s(Dfe);XRo=r(tst,"bert"),tst.forEach(t),zRo=r(rxe," \u2014 "),yG=n(rxe,"A",{href:!0});var ast=s(yG);QRo=r(ast,"BertForNextSentencePrediction"),ast.forEach(t),WRo=r(rxe," (BERT model)"),rxe.forEach(t),HRo=i(Ws),zb=n(Ws,"LI",{});var txe=s(zb);Gfe=n(txe,"STRONG",{});var nst=s(Gfe);URo=r(nst,"fnet"),nst.forEach(t),JRo=r(txe," \u2014 "),LG=n(txe,"A",{href:!0});var sst=s(LG);YRo=r(sst,"FNetForNextSentencePrediction"),sst.forEach(t),KRo=r(txe," (FNet model)"),txe.forEach(t),ZRo=i(Ws),Qb=n(Ws,"LI",{});var axe=s(Qb);Ofe=n(axe,"STRONG",{});var lst=s(Ofe);eBo=r(lst,"megatron-bert"),lst.forEach(t),oBo=r(axe," \u2014 "),xG=n(axe,"A",{href:!0});var ist=s(xG);rBo=r(ist,"MegatronBertForNextSentencePrediction"),ist.forEach(t),tBo=r(axe," (MegatronBert model)"),axe.forEach(t),aBo=i(Ws),Wb=n(Ws,"LI",{});var nxe=s(Wb);Vfe=n(nxe,"STRONG",{});var dst=s(Vfe);nBo=r(dst,"mobilebert"),dst.forEach(t),sBo=r(nxe," \u2014 "),$G=n(nxe,"A",{href:!0});var cst=s($G);lBo=r(cst,"MobileBertForNextSentencePrediction"),cst.forEach(t),iBo=r(nxe," (MobileBERT model)"),nxe.forEach(t),dBo=i(Ws),Hb=n(Ws,"LI",{});var sxe=s(Hb);Xfe=n(sxe,"STRONG",{});var fst=s(Xfe);cBo=r(fst,"qdqbert"),fst.forEach(t),fBo=r(sxe," \u2014 "),kG=n(sxe,"A",{href:!0});var mst=s(kG);mBo=r(mst,"QDQBertForNextSentencePrediction"),mst.forEach(t),gBo=r(sxe," (QDQBert model)"),sxe.forEach(t),Ws.forEach(t),hBo=i(sa),Ub=n(sa,"P",{});var lxe=s(Ub);pBo=r(lxe,"The model is set in evaluation mode by default using "),zfe=n(lxe,"CODE",{});var gst=s(zfe);uBo=r(gst,"model.eval()"),gst.forEach(t),_Bo=r(lxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qfe=n(lxe,"CODE",{});var hst=s(Qfe);bBo=r(hst,"model.train()"),hst.forEach(t),lxe.forEach(t),vBo=i(sa),T(Jb.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),HPe=i(f),zi=n(f,"H2",{class:!0});var Kqe=s(zi);Yb=n(Kqe,"A",{id:!0,class:!0,href:!0});var pst=s(Yb);Wfe=n(pst,"SPAN",{});var ust=s(Wfe);T(tL.$$.fragment,ust),ust.forEach(t),pst.forEach(t),FBo=i(Kqe),Hfe=n(Kqe,"SPAN",{});var _st=s(Hfe);TBo=r(_st,"AutoModelForTokenClassification"),_st.forEach(t),Kqe.forEach(t),UPe=i(f),Io=n(f,"DIV",{class:!0});var Hs=s(Io);T(aL.$$.fragment,Hs),MBo=i(Hs),Qi=n(Hs,"P",{});var gK=s(Qi);EBo=r(gK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),SG=n(gK,"A",{href:!0});var bst=s(SG);CBo=r(bst,"from_pretrained()"),bst.forEach(t),wBo=r(gK," class method or the "),RG=n(gK,"A",{href:!0});var vst=s(RG);ABo=r(vst,"from_config()"),vst.forEach(t),yBo=r(gK,` class
method.`),gK.forEach(t),LBo=i(Hs),nL=n(Hs,"P",{});var Zqe=s(nL);xBo=r(Zqe,"This class cannot be instantiated directly using "),Ufe=n(Zqe,"CODE",{});var Fst=s(Ufe);$Bo=r(Fst,"__init__()"),Fst.forEach(t),kBo=r(Zqe," (throws an error)."),Zqe.forEach(t),SBo=i(Hs),dt=n(Hs,"DIV",{class:!0});var cw=s(dt);T(sL.$$.fragment,cw),RBo=i(cw),Jfe=n(cw,"P",{});var Tst=s(Jfe);BBo=r(Tst,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Tst.forEach(t),PBo=i(cw),Wi=n(cw,"P",{});var hK=s(Wi);IBo=r(hK,`Note:
Loading a model from its configuration file does `),Yfe=n(hK,"STRONG",{});var Mst=s(Yfe);qBo=r(Mst,"not"),Mst.forEach(t),NBo=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),BG=n(hK,"A",{href:!0});var Est=s(BG);jBo=r(Est,"from_pretrained()"),Est.forEach(t),DBo=r(hK," to load the model weights."),hK.forEach(t),GBo=i(cw),T(Kb.$$.fragment,cw),cw.forEach(t),OBo=i(Hs),to=n(Hs,"DIV",{class:!0});var la=s(to);T(lL.$$.fragment,la),VBo=i(la),Kfe=n(la,"P",{});var Cst=s(Kfe);XBo=r(Cst,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Cst.forEach(t),zBo=i(la),Ba=n(la,"P",{});var fw=s(Ba);QBo=r(fw,"The model class to instantiate is selected based on the "),Zfe=n(fw,"CODE",{});var wst=s(Zfe);WBo=r(wst,"model_type"),wst.forEach(t),HBo=r(fw,` property of the config object (either
passed as an argument or loaded from `),eme=n(fw,"CODE",{});var Ast=s(eme);UBo=r(Ast,"pretrained_model_name_or_path"),Ast.forEach(t),JBo=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=n(fw,"CODE",{});var yst=s(ome);YBo=r(yst,"pretrained_model_name_or_path"),yst.forEach(t),KBo=r(fw,":"),fw.forEach(t),ZBo=i(la),U=n(la,"UL",{});var J=s(U);Zb=n(J,"LI",{});var ixe=s(Zb);rme=n(ixe,"STRONG",{});var Lst=s(rme);ePo=r(Lst,"albert"),Lst.forEach(t),oPo=r(ixe," \u2014 "),PG=n(ixe,"A",{href:!0});var xst=s(PG);rPo=r(xst,"AlbertForTokenClassification"),xst.forEach(t),tPo=r(ixe," (ALBERT model)"),ixe.forEach(t),aPo=i(J),e4=n(J,"LI",{});var dxe=s(e4);tme=n(dxe,"STRONG",{});var $st=s(tme);nPo=r($st,"bert"),$st.forEach(t),sPo=r(dxe," \u2014 "),IG=n(dxe,"A",{href:!0});var kst=s(IG);lPo=r(kst,"BertForTokenClassification"),kst.forEach(t),iPo=r(dxe," (BERT model)"),dxe.forEach(t),dPo=i(J),o4=n(J,"LI",{});var cxe=s(o4);ame=n(cxe,"STRONG",{});var Sst=s(ame);cPo=r(Sst,"big_bird"),Sst.forEach(t),fPo=r(cxe," \u2014 "),qG=n(cxe,"A",{href:!0});var Rst=s(qG);mPo=r(Rst,"BigBirdForTokenClassification"),Rst.forEach(t),gPo=r(cxe," (BigBird model)"),cxe.forEach(t),hPo=i(J),r4=n(J,"LI",{});var fxe=s(r4);nme=n(fxe,"STRONG",{});var Bst=s(nme);pPo=r(Bst,"camembert"),Bst.forEach(t),uPo=r(fxe," \u2014 "),NG=n(fxe,"A",{href:!0});var Pst=s(NG);_Po=r(Pst,"CamembertForTokenClassification"),Pst.forEach(t),bPo=r(fxe," (CamemBERT model)"),fxe.forEach(t),vPo=i(J),t4=n(J,"LI",{});var mxe=s(t4);sme=n(mxe,"STRONG",{});var Ist=s(sme);FPo=r(Ist,"canine"),Ist.forEach(t),TPo=r(mxe," \u2014 "),jG=n(mxe,"A",{href:!0});var qst=s(jG);MPo=r(qst,"CanineForTokenClassification"),qst.forEach(t),EPo=r(mxe," (Canine model)"),mxe.forEach(t),CPo=i(J),a4=n(J,"LI",{});var gxe=s(a4);lme=n(gxe,"STRONG",{});var Nst=s(lme);wPo=r(Nst,"convbert"),Nst.forEach(t),APo=r(gxe," \u2014 "),DG=n(gxe,"A",{href:!0});var jst=s(DG);yPo=r(jst,"ConvBertForTokenClassification"),jst.forEach(t),LPo=r(gxe," (ConvBERT model)"),gxe.forEach(t),xPo=i(J),n4=n(J,"LI",{});var hxe=s(n4);ime=n(hxe,"STRONG",{});var Dst=s(ime);$Po=r(Dst,"data2vec-text"),Dst.forEach(t),kPo=r(hxe," \u2014 "),GG=n(hxe,"A",{href:!0});var Gst=s(GG);SPo=r(Gst,"Data2VecTextForTokenClassification"),Gst.forEach(t),RPo=r(hxe," (Data2VecText model)"),hxe.forEach(t),BPo=i(J),s4=n(J,"LI",{});var pxe=s(s4);dme=n(pxe,"STRONG",{});var Ost=s(dme);PPo=r(Ost,"deberta"),Ost.forEach(t),IPo=r(pxe," \u2014 "),OG=n(pxe,"A",{href:!0});var Vst=s(OG);qPo=r(Vst,"DebertaForTokenClassification"),Vst.forEach(t),NPo=r(pxe," (DeBERTa model)"),pxe.forEach(t),jPo=i(J),l4=n(J,"LI",{});var uxe=s(l4);cme=n(uxe,"STRONG",{});var Xst=s(cme);DPo=r(Xst,"deberta-v2"),Xst.forEach(t),GPo=r(uxe," \u2014 "),VG=n(uxe,"A",{href:!0});var zst=s(VG);OPo=r(zst,"DebertaV2ForTokenClassification"),zst.forEach(t),VPo=r(uxe," (DeBERTa-v2 model)"),uxe.forEach(t),XPo=i(J),i4=n(J,"LI",{});var _xe=s(i4);fme=n(_xe,"STRONG",{});var Qst=s(fme);zPo=r(Qst,"distilbert"),Qst.forEach(t),QPo=r(_xe," \u2014 "),XG=n(_xe,"A",{href:!0});var Wst=s(XG);WPo=r(Wst,"DistilBertForTokenClassification"),Wst.forEach(t),HPo=r(_xe," (DistilBERT model)"),_xe.forEach(t),UPo=i(J),d4=n(J,"LI",{});var bxe=s(d4);mme=n(bxe,"STRONG",{});var Hst=s(mme);JPo=r(Hst,"electra"),Hst.forEach(t),YPo=r(bxe," \u2014 "),zG=n(bxe,"A",{href:!0});var Ust=s(zG);KPo=r(Ust,"ElectraForTokenClassification"),Ust.forEach(t),ZPo=r(bxe," (ELECTRA model)"),bxe.forEach(t),eIo=i(J),c4=n(J,"LI",{});var vxe=s(c4);gme=n(vxe,"STRONG",{});var Jst=s(gme);oIo=r(Jst,"flaubert"),Jst.forEach(t),rIo=r(vxe," \u2014 "),QG=n(vxe,"A",{href:!0});var Yst=s(QG);tIo=r(Yst,"FlaubertForTokenClassification"),Yst.forEach(t),aIo=r(vxe," (FlauBERT model)"),vxe.forEach(t),nIo=i(J),f4=n(J,"LI",{});var Fxe=s(f4);hme=n(Fxe,"STRONG",{});var Kst=s(hme);sIo=r(Kst,"fnet"),Kst.forEach(t),lIo=r(Fxe," \u2014 "),WG=n(Fxe,"A",{href:!0});var Zst=s(WG);iIo=r(Zst,"FNetForTokenClassification"),Zst.forEach(t),dIo=r(Fxe," (FNet model)"),Fxe.forEach(t),cIo=i(J),m4=n(J,"LI",{});var Txe=s(m4);pme=n(Txe,"STRONG",{});var elt=s(pme);fIo=r(elt,"funnel"),elt.forEach(t),mIo=r(Txe," \u2014 "),HG=n(Txe,"A",{href:!0});var olt=s(HG);gIo=r(olt,"FunnelForTokenClassification"),olt.forEach(t),hIo=r(Txe," (Funnel Transformer model)"),Txe.forEach(t),pIo=i(J),g4=n(J,"LI",{});var Mxe=s(g4);ume=n(Mxe,"STRONG",{});var rlt=s(ume);uIo=r(rlt,"gpt2"),rlt.forEach(t),_Io=r(Mxe," \u2014 "),UG=n(Mxe,"A",{href:!0});var tlt=s(UG);bIo=r(tlt,"GPT2ForTokenClassification"),tlt.forEach(t),vIo=r(Mxe," (OpenAI GPT-2 model)"),Mxe.forEach(t),FIo=i(J),h4=n(J,"LI",{});var Exe=s(h4);_me=n(Exe,"STRONG",{});var alt=s(_me);TIo=r(alt,"ibert"),alt.forEach(t),MIo=r(Exe," \u2014 "),JG=n(Exe,"A",{href:!0});var nlt=s(JG);EIo=r(nlt,"IBertForTokenClassification"),nlt.forEach(t),CIo=r(Exe," (I-BERT model)"),Exe.forEach(t),wIo=i(J),p4=n(J,"LI",{});var Cxe=s(p4);bme=n(Cxe,"STRONG",{});var slt=s(bme);AIo=r(slt,"layoutlm"),slt.forEach(t),yIo=r(Cxe," \u2014 "),YG=n(Cxe,"A",{href:!0});var llt=s(YG);LIo=r(llt,"LayoutLMForTokenClassification"),llt.forEach(t),xIo=r(Cxe," (LayoutLM model)"),Cxe.forEach(t),$Io=i(J),u4=n(J,"LI",{});var wxe=s(u4);vme=n(wxe,"STRONG",{});var ilt=s(vme);kIo=r(ilt,"layoutlmv2"),ilt.forEach(t),SIo=r(wxe," \u2014 "),KG=n(wxe,"A",{href:!0});var dlt=s(KG);RIo=r(dlt,"LayoutLMv2ForTokenClassification"),dlt.forEach(t),BIo=r(wxe," (LayoutLMv2 model)"),wxe.forEach(t),PIo=i(J),_4=n(J,"LI",{});var Axe=s(_4);Fme=n(Axe,"STRONG",{});var clt=s(Fme);IIo=r(clt,"longformer"),clt.forEach(t),qIo=r(Axe," \u2014 "),ZG=n(Axe,"A",{href:!0});var flt=s(ZG);NIo=r(flt,"LongformerForTokenClassification"),flt.forEach(t),jIo=r(Axe," (Longformer model)"),Axe.forEach(t),DIo=i(J),b4=n(J,"LI",{});var yxe=s(b4);Tme=n(yxe,"STRONG",{});var mlt=s(Tme);GIo=r(mlt,"megatron-bert"),mlt.forEach(t),OIo=r(yxe," \u2014 "),eO=n(yxe,"A",{href:!0});var glt=s(eO);VIo=r(glt,"MegatronBertForTokenClassification"),glt.forEach(t),XIo=r(yxe," (MegatronBert model)"),yxe.forEach(t),zIo=i(J),v4=n(J,"LI",{});var Lxe=s(v4);Mme=n(Lxe,"STRONG",{});var hlt=s(Mme);QIo=r(hlt,"mobilebert"),hlt.forEach(t),WIo=r(Lxe," \u2014 "),oO=n(Lxe,"A",{href:!0});var plt=s(oO);HIo=r(plt,"MobileBertForTokenClassification"),plt.forEach(t),UIo=r(Lxe," (MobileBERT model)"),Lxe.forEach(t),JIo=i(J),F4=n(J,"LI",{});var xxe=s(F4);Eme=n(xxe,"STRONG",{});var ult=s(Eme);YIo=r(ult,"mpnet"),ult.forEach(t),KIo=r(xxe," \u2014 "),rO=n(xxe,"A",{href:!0});var _lt=s(rO);ZIo=r(_lt,"MPNetForTokenClassification"),_lt.forEach(t),eqo=r(xxe," (MPNet model)"),xxe.forEach(t),oqo=i(J),T4=n(J,"LI",{});var $xe=s(T4);Cme=n($xe,"STRONG",{});var blt=s(Cme);rqo=r(blt,"nystromformer"),blt.forEach(t),tqo=r($xe," \u2014 "),tO=n($xe,"A",{href:!0});var vlt=s(tO);aqo=r(vlt,"NystromformerForTokenClassification"),vlt.forEach(t),nqo=r($xe," (Nystromformer model)"),$xe.forEach(t),sqo=i(J),M4=n(J,"LI",{});var kxe=s(M4);wme=n(kxe,"STRONG",{});var Flt=s(wme);lqo=r(Flt,"qdqbert"),Flt.forEach(t),iqo=r(kxe," \u2014 "),aO=n(kxe,"A",{href:!0});var Tlt=s(aO);dqo=r(Tlt,"QDQBertForTokenClassification"),Tlt.forEach(t),cqo=r(kxe," (QDQBert model)"),kxe.forEach(t),fqo=i(J),E4=n(J,"LI",{});var Sxe=s(E4);Ame=n(Sxe,"STRONG",{});var Mlt=s(Ame);mqo=r(Mlt,"rembert"),Mlt.forEach(t),gqo=r(Sxe," \u2014 "),nO=n(Sxe,"A",{href:!0});var Elt=s(nO);hqo=r(Elt,"RemBertForTokenClassification"),Elt.forEach(t),pqo=r(Sxe," (RemBERT model)"),Sxe.forEach(t),uqo=i(J),C4=n(J,"LI",{});var Rxe=s(C4);yme=n(Rxe,"STRONG",{});var Clt=s(yme);_qo=r(Clt,"roberta"),Clt.forEach(t),bqo=r(Rxe," \u2014 "),sO=n(Rxe,"A",{href:!0});var wlt=s(sO);vqo=r(wlt,"RobertaForTokenClassification"),wlt.forEach(t),Fqo=r(Rxe," (RoBERTa model)"),Rxe.forEach(t),Tqo=i(J),w4=n(J,"LI",{});var Bxe=s(w4);Lme=n(Bxe,"STRONG",{});var Alt=s(Lme);Mqo=r(Alt,"roformer"),Alt.forEach(t),Eqo=r(Bxe," \u2014 "),lO=n(Bxe,"A",{href:!0});var ylt=s(lO);Cqo=r(ylt,"RoFormerForTokenClassification"),ylt.forEach(t),wqo=r(Bxe," (RoFormer model)"),Bxe.forEach(t),Aqo=i(J),A4=n(J,"LI",{});var Pxe=s(A4);xme=n(Pxe,"STRONG",{});var Llt=s(xme);yqo=r(Llt,"squeezebert"),Llt.forEach(t),Lqo=r(Pxe," \u2014 "),iO=n(Pxe,"A",{href:!0});var xlt=s(iO);xqo=r(xlt,"SqueezeBertForTokenClassification"),xlt.forEach(t),$qo=r(Pxe," (SqueezeBERT model)"),Pxe.forEach(t),kqo=i(J),y4=n(J,"LI",{});var Ixe=s(y4);$me=n(Ixe,"STRONG",{});var $lt=s($me);Sqo=r($lt,"xlm"),$lt.forEach(t),Rqo=r(Ixe," \u2014 "),dO=n(Ixe,"A",{href:!0});var klt=s(dO);Bqo=r(klt,"XLMForTokenClassification"),klt.forEach(t),Pqo=r(Ixe," (XLM model)"),Ixe.forEach(t),Iqo=i(J),L4=n(J,"LI",{});var qxe=s(L4);kme=n(qxe,"STRONG",{});var Slt=s(kme);qqo=r(Slt,"xlm-roberta"),Slt.forEach(t),Nqo=r(qxe," \u2014 "),cO=n(qxe,"A",{href:!0});var Rlt=s(cO);jqo=r(Rlt,"XLMRobertaForTokenClassification"),Rlt.forEach(t),Dqo=r(qxe," (XLM-RoBERTa model)"),qxe.forEach(t),Gqo=i(J),x4=n(J,"LI",{});var Nxe=s(x4);Sme=n(Nxe,"STRONG",{});var Blt=s(Sme);Oqo=r(Blt,"xlm-roberta-xl"),Blt.forEach(t),Vqo=r(Nxe," \u2014 "),fO=n(Nxe,"A",{href:!0});var Plt=s(fO);Xqo=r(Plt,"XLMRobertaXLForTokenClassification"),Plt.forEach(t),zqo=r(Nxe," (XLM-RoBERTa-XL model)"),Nxe.forEach(t),Qqo=i(J),$4=n(J,"LI",{});var jxe=s($4);Rme=n(jxe,"STRONG",{});var Ilt=s(Rme);Wqo=r(Ilt,"xlnet"),Ilt.forEach(t),Hqo=r(jxe," \u2014 "),mO=n(jxe,"A",{href:!0});var qlt=s(mO);Uqo=r(qlt,"XLNetForTokenClassification"),qlt.forEach(t),Jqo=r(jxe," (XLNet model)"),jxe.forEach(t),Yqo=i(J),k4=n(J,"LI",{});var Dxe=s(k4);Bme=n(Dxe,"STRONG",{});var Nlt=s(Bme);Kqo=r(Nlt,"yoso"),Nlt.forEach(t),Zqo=r(Dxe," \u2014 "),gO=n(Dxe,"A",{href:!0});var jlt=s(gO);eNo=r(jlt,"YosoForTokenClassification"),jlt.forEach(t),oNo=r(Dxe," (YOSO model)"),Dxe.forEach(t),J.forEach(t),rNo=i(la),S4=n(la,"P",{});var Gxe=s(S4);tNo=r(Gxe,"The model is set in evaluation mode by default using "),Pme=n(Gxe,"CODE",{});var Dlt=s(Pme);aNo=r(Dlt,"model.eval()"),Dlt.forEach(t),nNo=r(Gxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ime=n(Gxe,"CODE",{});var Glt=s(Ime);sNo=r(Glt,"model.train()"),Glt.forEach(t),Gxe.forEach(t),lNo=i(la),T(R4.$$.fragment,la),la.forEach(t),Hs.forEach(t),JPe=i(f),Hi=n(f,"H2",{class:!0});var eNe=s(Hi);B4=n(eNe,"A",{id:!0,class:!0,href:!0});var Olt=s(B4);qme=n(Olt,"SPAN",{});var Vlt=s(qme);T(iL.$$.fragment,Vlt),Vlt.forEach(t),Olt.forEach(t),iNo=i(eNe),Nme=n(eNe,"SPAN",{});var Xlt=s(Nme);dNo=r(Xlt,"AutoModelForQuestionAnswering"),Xlt.forEach(t),eNe.forEach(t),YPe=i(f),qo=n(f,"DIV",{class:!0});var Us=s(qo);T(dL.$$.fragment,Us),cNo=i(Us),Ui=n(Us,"P",{});var pK=s(Ui);fNo=r(pK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hO=n(pK,"A",{href:!0});var zlt=s(hO);mNo=r(zlt,"from_pretrained()"),zlt.forEach(t),gNo=r(pK," class method or the "),pO=n(pK,"A",{href:!0});var Qlt=s(pO);hNo=r(Qlt,"from_config()"),Qlt.forEach(t),pNo=r(pK,` class
method.`),pK.forEach(t),uNo=i(Us),cL=n(Us,"P",{});var oNe=s(cL);_No=r(oNe,"This class cannot be instantiated directly using "),jme=n(oNe,"CODE",{});var Wlt=s(jme);bNo=r(Wlt,"__init__()"),Wlt.forEach(t),vNo=r(oNe," (throws an error)."),oNe.forEach(t),FNo=i(Us),ct=n(Us,"DIV",{class:!0});var mw=s(ct);T(fL.$$.fragment,mw),TNo=i(mw),Dme=n(mw,"P",{});var Hlt=s(Dme);MNo=r(Hlt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Hlt.forEach(t),ENo=i(mw),Ji=n(mw,"P",{});var uK=s(Ji);CNo=r(uK,`Note:
Loading a model from its configuration file does `),Gme=n(uK,"STRONG",{});var Ult=s(Gme);wNo=r(Ult,"not"),Ult.forEach(t),ANo=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),uO=n(uK,"A",{href:!0});var Jlt=s(uO);yNo=r(Jlt,"from_pretrained()"),Jlt.forEach(t),LNo=r(uK," to load the model weights."),uK.forEach(t),xNo=i(mw),T(P4.$$.fragment,mw),mw.forEach(t),$No=i(Us),ao=n(Us,"DIV",{class:!0});var ia=s(ao);T(mL.$$.fragment,ia),kNo=i(ia),Ome=n(ia,"P",{});var Ylt=s(Ome);SNo=r(Ylt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ylt.forEach(t),RNo=i(ia),Pa=n(ia,"P",{});var gw=s(Pa);BNo=r(gw,"The model class to instantiate is selected based on the "),Vme=n(gw,"CODE",{});var Klt=s(Vme);PNo=r(Klt,"model_type"),Klt.forEach(t),INo=r(gw,` property of the config object (either
passed as an argument or loaded from `),Xme=n(gw,"CODE",{});var Zlt=s(Xme);qNo=r(Zlt,"pretrained_model_name_or_path"),Zlt.forEach(t),NNo=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=n(gw,"CODE",{});var eit=s(zme);jNo=r(eit,"pretrained_model_name_or_path"),eit.forEach(t),DNo=r(gw,":"),gw.forEach(t),GNo=i(ia),O=n(ia,"UL",{});var X=s(O);I4=n(X,"LI",{});var Oxe=s(I4);Qme=n(Oxe,"STRONG",{});var oit=s(Qme);ONo=r(oit,"albert"),oit.forEach(t),VNo=r(Oxe," \u2014 "),_O=n(Oxe,"A",{href:!0});var rit=s(_O);XNo=r(rit,"AlbertForQuestionAnswering"),rit.forEach(t),zNo=r(Oxe," (ALBERT model)"),Oxe.forEach(t),QNo=i(X),q4=n(X,"LI",{});var Vxe=s(q4);Wme=n(Vxe,"STRONG",{});var tit=s(Wme);WNo=r(tit,"bart"),tit.forEach(t),HNo=r(Vxe," \u2014 "),bO=n(Vxe,"A",{href:!0});var ait=s(bO);UNo=r(ait,"BartForQuestionAnswering"),ait.forEach(t),JNo=r(Vxe," (BART model)"),Vxe.forEach(t),YNo=i(X),N4=n(X,"LI",{});var Xxe=s(N4);Hme=n(Xxe,"STRONG",{});var nit=s(Hme);KNo=r(nit,"bert"),nit.forEach(t),ZNo=r(Xxe," \u2014 "),vO=n(Xxe,"A",{href:!0});var sit=s(vO);ejo=r(sit,"BertForQuestionAnswering"),sit.forEach(t),ojo=r(Xxe," (BERT model)"),Xxe.forEach(t),rjo=i(X),j4=n(X,"LI",{});var zxe=s(j4);Ume=n(zxe,"STRONG",{});var lit=s(Ume);tjo=r(lit,"big_bird"),lit.forEach(t),ajo=r(zxe," \u2014 "),FO=n(zxe,"A",{href:!0});var iit=s(FO);njo=r(iit,"BigBirdForQuestionAnswering"),iit.forEach(t),sjo=r(zxe," (BigBird model)"),zxe.forEach(t),ljo=i(X),D4=n(X,"LI",{});var Qxe=s(D4);Jme=n(Qxe,"STRONG",{});var dit=s(Jme);ijo=r(dit,"bigbird_pegasus"),dit.forEach(t),djo=r(Qxe," \u2014 "),TO=n(Qxe,"A",{href:!0});var cit=s(TO);cjo=r(cit,"BigBirdPegasusForQuestionAnswering"),cit.forEach(t),fjo=r(Qxe," (BigBirdPegasus model)"),Qxe.forEach(t),mjo=i(X),G4=n(X,"LI",{});var Wxe=s(G4);Yme=n(Wxe,"STRONG",{});var fit=s(Yme);gjo=r(fit,"camembert"),fit.forEach(t),hjo=r(Wxe," \u2014 "),MO=n(Wxe,"A",{href:!0});var mit=s(MO);pjo=r(mit,"CamembertForQuestionAnswering"),mit.forEach(t),ujo=r(Wxe," (CamemBERT model)"),Wxe.forEach(t),_jo=i(X),O4=n(X,"LI",{});var Hxe=s(O4);Kme=n(Hxe,"STRONG",{});var git=s(Kme);bjo=r(git,"canine"),git.forEach(t),vjo=r(Hxe," \u2014 "),EO=n(Hxe,"A",{href:!0});var hit=s(EO);Fjo=r(hit,"CanineForQuestionAnswering"),hit.forEach(t),Tjo=r(Hxe," (Canine model)"),Hxe.forEach(t),Mjo=i(X),V4=n(X,"LI",{});var Uxe=s(V4);Zme=n(Uxe,"STRONG",{});var pit=s(Zme);Ejo=r(pit,"convbert"),pit.forEach(t),Cjo=r(Uxe," \u2014 "),CO=n(Uxe,"A",{href:!0});var uit=s(CO);wjo=r(uit,"ConvBertForQuestionAnswering"),uit.forEach(t),Ajo=r(Uxe," (ConvBERT model)"),Uxe.forEach(t),yjo=i(X),X4=n(X,"LI",{});var Jxe=s(X4);ege=n(Jxe,"STRONG",{});var _it=s(ege);Ljo=r(_it,"data2vec-text"),_it.forEach(t),xjo=r(Jxe," \u2014 "),wO=n(Jxe,"A",{href:!0});var bit=s(wO);$jo=r(bit,"Data2VecTextForQuestionAnswering"),bit.forEach(t),kjo=r(Jxe," (Data2VecText model)"),Jxe.forEach(t),Sjo=i(X),z4=n(X,"LI",{});var Yxe=s(z4);oge=n(Yxe,"STRONG",{});var vit=s(oge);Rjo=r(vit,"deberta"),vit.forEach(t),Bjo=r(Yxe," \u2014 "),AO=n(Yxe,"A",{href:!0});var Fit=s(AO);Pjo=r(Fit,"DebertaForQuestionAnswering"),Fit.forEach(t),Ijo=r(Yxe," (DeBERTa model)"),Yxe.forEach(t),qjo=i(X),Q4=n(X,"LI",{});var Kxe=s(Q4);rge=n(Kxe,"STRONG",{});var Tit=s(rge);Njo=r(Tit,"deberta-v2"),Tit.forEach(t),jjo=r(Kxe," \u2014 "),yO=n(Kxe,"A",{href:!0});var Mit=s(yO);Djo=r(Mit,"DebertaV2ForQuestionAnswering"),Mit.forEach(t),Gjo=r(Kxe," (DeBERTa-v2 model)"),Kxe.forEach(t),Ojo=i(X),W4=n(X,"LI",{});var Zxe=s(W4);tge=n(Zxe,"STRONG",{});var Eit=s(tge);Vjo=r(Eit,"distilbert"),Eit.forEach(t),Xjo=r(Zxe," \u2014 "),LO=n(Zxe,"A",{href:!0});var Cit=s(LO);zjo=r(Cit,"DistilBertForQuestionAnswering"),Cit.forEach(t),Qjo=r(Zxe," (DistilBERT model)"),Zxe.forEach(t),Wjo=i(X),H4=n(X,"LI",{});var e7e=s(H4);age=n(e7e,"STRONG",{});var wit=s(age);Hjo=r(wit,"electra"),wit.forEach(t),Ujo=r(e7e," \u2014 "),xO=n(e7e,"A",{href:!0});var Ait=s(xO);Jjo=r(Ait,"ElectraForQuestionAnswering"),Ait.forEach(t),Yjo=r(e7e," (ELECTRA model)"),e7e.forEach(t),Kjo=i(X),U4=n(X,"LI",{});var o7e=s(U4);nge=n(o7e,"STRONG",{});var yit=s(nge);Zjo=r(yit,"flaubert"),yit.forEach(t),eDo=r(o7e," \u2014 "),$O=n(o7e,"A",{href:!0});var Lit=s($O);oDo=r(Lit,"FlaubertForQuestionAnsweringSimple"),Lit.forEach(t),rDo=r(o7e," (FlauBERT model)"),o7e.forEach(t),tDo=i(X),J4=n(X,"LI",{});var r7e=s(J4);sge=n(r7e,"STRONG",{});var xit=s(sge);aDo=r(xit,"fnet"),xit.forEach(t),nDo=r(r7e," \u2014 "),kO=n(r7e,"A",{href:!0});var $it=s(kO);sDo=r($it,"FNetForQuestionAnswering"),$it.forEach(t),lDo=r(r7e," (FNet model)"),r7e.forEach(t),iDo=i(X),Y4=n(X,"LI",{});var t7e=s(Y4);lge=n(t7e,"STRONG",{});var kit=s(lge);dDo=r(kit,"funnel"),kit.forEach(t),cDo=r(t7e," \u2014 "),SO=n(t7e,"A",{href:!0});var Sit=s(SO);fDo=r(Sit,"FunnelForQuestionAnswering"),Sit.forEach(t),mDo=r(t7e," (Funnel Transformer model)"),t7e.forEach(t),gDo=i(X),K4=n(X,"LI",{});var a7e=s(K4);ige=n(a7e,"STRONG",{});var Rit=s(ige);hDo=r(Rit,"gptj"),Rit.forEach(t),pDo=r(a7e," \u2014 "),RO=n(a7e,"A",{href:!0});var Bit=s(RO);uDo=r(Bit,"GPTJForQuestionAnswering"),Bit.forEach(t),_Do=r(a7e," (GPT-J model)"),a7e.forEach(t),bDo=i(X),Z4=n(X,"LI",{});var n7e=s(Z4);dge=n(n7e,"STRONG",{});var Pit=s(dge);vDo=r(Pit,"ibert"),Pit.forEach(t),FDo=r(n7e," \u2014 "),BO=n(n7e,"A",{href:!0});var Iit=s(BO);TDo=r(Iit,"IBertForQuestionAnswering"),Iit.forEach(t),MDo=r(n7e," (I-BERT model)"),n7e.forEach(t),EDo=i(X),ev=n(X,"LI",{});var s7e=s(ev);cge=n(s7e,"STRONG",{});var qit=s(cge);CDo=r(qit,"layoutlmv2"),qit.forEach(t),wDo=r(s7e," \u2014 "),PO=n(s7e,"A",{href:!0});var Nit=s(PO);ADo=r(Nit,"LayoutLMv2ForQuestionAnswering"),Nit.forEach(t),yDo=r(s7e," (LayoutLMv2 model)"),s7e.forEach(t),LDo=i(X),ov=n(X,"LI",{});var l7e=s(ov);fge=n(l7e,"STRONG",{});var jit=s(fge);xDo=r(jit,"led"),jit.forEach(t),$Do=r(l7e," \u2014 "),IO=n(l7e,"A",{href:!0});var Dit=s(IO);kDo=r(Dit,"LEDForQuestionAnswering"),Dit.forEach(t),SDo=r(l7e," (LED model)"),l7e.forEach(t),RDo=i(X),rv=n(X,"LI",{});var i7e=s(rv);mge=n(i7e,"STRONG",{});var Git=s(mge);BDo=r(Git,"longformer"),Git.forEach(t),PDo=r(i7e," \u2014 "),qO=n(i7e,"A",{href:!0});var Oit=s(qO);IDo=r(Oit,"LongformerForQuestionAnswering"),Oit.forEach(t),qDo=r(i7e," (Longformer model)"),i7e.forEach(t),NDo=i(X),tv=n(X,"LI",{});var d7e=s(tv);gge=n(d7e,"STRONG",{});var Vit=s(gge);jDo=r(Vit,"lxmert"),Vit.forEach(t),DDo=r(d7e," \u2014 "),NO=n(d7e,"A",{href:!0});var Xit=s(NO);GDo=r(Xit,"LxmertForQuestionAnswering"),Xit.forEach(t),ODo=r(d7e," (LXMERT model)"),d7e.forEach(t),VDo=i(X),av=n(X,"LI",{});var c7e=s(av);hge=n(c7e,"STRONG",{});var zit=s(hge);XDo=r(zit,"mbart"),zit.forEach(t),zDo=r(c7e," \u2014 "),jO=n(c7e,"A",{href:!0});var Qit=s(jO);QDo=r(Qit,"MBartForQuestionAnswering"),Qit.forEach(t),WDo=r(c7e," (mBART model)"),c7e.forEach(t),HDo=i(X),nv=n(X,"LI",{});var f7e=s(nv);pge=n(f7e,"STRONG",{});var Wit=s(pge);UDo=r(Wit,"megatron-bert"),Wit.forEach(t),JDo=r(f7e," \u2014 "),DO=n(f7e,"A",{href:!0});var Hit=s(DO);YDo=r(Hit,"MegatronBertForQuestionAnswering"),Hit.forEach(t),KDo=r(f7e," (MegatronBert model)"),f7e.forEach(t),ZDo=i(X),sv=n(X,"LI",{});var m7e=s(sv);uge=n(m7e,"STRONG",{});var Uit=s(uge);eGo=r(Uit,"mobilebert"),Uit.forEach(t),oGo=r(m7e," \u2014 "),GO=n(m7e,"A",{href:!0});var Jit=s(GO);rGo=r(Jit,"MobileBertForQuestionAnswering"),Jit.forEach(t),tGo=r(m7e," (MobileBERT model)"),m7e.forEach(t),aGo=i(X),lv=n(X,"LI",{});var g7e=s(lv);_ge=n(g7e,"STRONG",{});var Yit=s(_ge);nGo=r(Yit,"mpnet"),Yit.forEach(t),sGo=r(g7e," \u2014 "),OO=n(g7e,"A",{href:!0});var Kit=s(OO);lGo=r(Kit,"MPNetForQuestionAnswering"),Kit.forEach(t),iGo=r(g7e," (MPNet model)"),g7e.forEach(t),dGo=i(X),iv=n(X,"LI",{});var h7e=s(iv);bge=n(h7e,"STRONG",{});var Zit=s(bge);cGo=r(Zit,"nystromformer"),Zit.forEach(t),fGo=r(h7e," \u2014 "),VO=n(h7e,"A",{href:!0});var edt=s(VO);mGo=r(edt,"NystromformerForQuestionAnswering"),edt.forEach(t),gGo=r(h7e," (Nystromformer model)"),h7e.forEach(t),hGo=i(X),dv=n(X,"LI",{});var p7e=s(dv);vge=n(p7e,"STRONG",{});var odt=s(vge);pGo=r(odt,"qdqbert"),odt.forEach(t),uGo=r(p7e," \u2014 "),XO=n(p7e,"A",{href:!0});var rdt=s(XO);_Go=r(rdt,"QDQBertForQuestionAnswering"),rdt.forEach(t),bGo=r(p7e," (QDQBert model)"),p7e.forEach(t),vGo=i(X),cv=n(X,"LI",{});var u7e=s(cv);Fge=n(u7e,"STRONG",{});var tdt=s(Fge);FGo=r(tdt,"reformer"),tdt.forEach(t),TGo=r(u7e," \u2014 "),zO=n(u7e,"A",{href:!0});var adt=s(zO);MGo=r(adt,"ReformerForQuestionAnswering"),adt.forEach(t),EGo=r(u7e," (Reformer model)"),u7e.forEach(t),CGo=i(X),fv=n(X,"LI",{});var _7e=s(fv);Tge=n(_7e,"STRONG",{});var ndt=s(Tge);wGo=r(ndt,"rembert"),ndt.forEach(t),AGo=r(_7e," \u2014 "),QO=n(_7e,"A",{href:!0});var sdt=s(QO);yGo=r(sdt,"RemBertForQuestionAnswering"),sdt.forEach(t),LGo=r(_7e," (RemBERT model)"),_7e.forEach(t),xGo=i(X),mv=n(X,"LI",{});var b7e=s(mv);Mge=n(b7e,"STRONG",{});var ldt=s(Mge);$Go=r(ldt,"roberta"),ldt.forEach(t),kGo=r(b7e," \u2014 "),WO=n(b7e,"A",{href:!0});var idt=s(WO);SGo=r(idt,"RobertaForQuestionAnswering"),idt.forEach(t),RGo=r(b7e," (RoBERTa model)"),b7e.forEach(t),BGo=i(X),gv=n(X,"LI",{});var v7e=s(gv);Ege=n(v7e,"STRONG",{});var ddt=s(Ege);PGo=r(ddt,"roformer"),ddt.forEach(t),IGo=r(v7e," \u2014 "),HO=n(v7e,"A",{href:!0});var cdt=s(HO);qGo=r(cdt,"RoFormerForQuestionAnswering"),cdt.forEach(t),NGo=r(v7e," (RoFormer model)"),v7e.forEach(t),jGo=i(X),hv=n(X,"LI",{});var F7e=s(hv);Cge=n(F7e,"STRONG",{});var fdt=s(Cge);DGo=r(fdt,"splinter"),fdt.forEach(t),GGo=r(F7e," \u2014 "),UO=n(F7e,"A",{href:!0});var mdt=s(UO);OGo=r(mdt,"SplinterForQuestionAnswering"),mdt.forEach(t),VGo=r(F7e," (Splinter model)"),F7e.forEach(t),XGo=i(X),pv=n(X,"LI",{});var T7e=s(pv);wge=n(T7e,"STRONG",{});var gdt=s(wge);zGo=r(gdt,"squeezebert"),gdt.forEach(t),QGo=r(T7e," \u2014 "),JO=n(T7e,"A",{href:!0});var hdt=s(JO);WGo=r(hdt,"SqueezeBertForQuestionAnswering"),hdt.forEach(t),HGo=r(T7e," (SqueezeBERT model)"),T7e.forEach(t),UGo=i(X),uv=n(X,"LI",{});var M7e=s(uv);Age=n(M7e,"STRONG",{});var pdt=s(Age);JGo=r(pdt,"xlm"),pdt.forEach(t),YGo=r(M7e," \u2014 "),YO=n(M7e,"A",{href:!0});var udt=s(YO);KGo=r(udt,"XLMForQuestionAnsweringSimple"),udt.forEach(t),ZGo=r(M7e," (XLM model)"),M7e.forEach(t),eOo=i(X),_v=n(X,"LI",{});var E7e=s(_v);yge=n(E7e,"STRONG",{});var _dt=s(yge);oOo=r(_dt,"xlm-roberta"),_dt.forEach(t),rOo=r(E7e," \u2014 "),KO=n(E7e,"A",{href:!0});var bdt=s(KO);tOo=r(bdt,"XLMRobertaForQuestionAnswering"),bdt.forEach(t),aOo=r(E7e," (XLM-RoBERTa model)"),E7e.forEach(t),nOo=i(X),bv=n(X,"LI",{});var C7e=s(bv);Lge=n(C7e,"STRONG",{});var vdt=s(Lge);sOo=r(vdt,"xlm-roberta-xl"),vdt.forEach(t),lOo=r(C7e," \u2014 "),ZO=n(C7e,"A",{href:!0});var Fdt=s(ZO);iOo=r(Fdt,"XLMRobertaXLForQuestionAnswering"),Fdt.forEach(t),dOo=r(C7e," (XLM-RoBERTa-XL model)"),C7e.forEach(t),cOo=i(X),vv=n(X,"LI",{});var w7e=s(vv);xge=n(w7e,"STRONG",{});var Tdt=s(xge);fOo=r(Tdt,"xlnet"),Tdt.forEach(t),mOo=r(w7e," \u2014 "),eV=n(w7e,"A",{href:!0});var Mdt=s(eV);gOo=r(Mdt,"XLNetForQuestionAnsweringSimple"),Mdt.forEach(t),hOo=r(w7e," (XLNet model)"),w7e.forEach(t),pOo=i(X),Fv=n(X,"LI",{});var A7e=s(Fv);$ge=n(A7e,"STRONG",{});var Edt=s($ge);uOo=r(Edt,"yoso"),Edt.forEach(t),_Oo=r(A7e," \u2014 "),oV=n(A7e,"A",{href:!0});var Cdt=s(oV);bOo=r(Cdt,"YosoForQuestionAnswering"),Cdt.forEach(t),vOo=r(A7e," (YOSO model)"),A7e.forEach(t),X.forEach(t),FOo=i(ia),Tv=n(ia,"P",{});var y7e=s(Tv);TOo=r(y7e,"The model is set in evaluation mode by default using "),kge=n(y7e,"CODE",{});var wdt=s(kge);MOo=r(wdt,"model.eval()"),wdt.forEach(t),EOo=r(y7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sge=n(y7e,"CODE",{});var Adt=s(Sge);COo=r(Adt,"model.train()"),Adt.forEach(t),y7e.forEach(t),wOo=i(ia),T(Mv.$$.fragment,ia),ia.forEach(t),Us.forEach(t),KPe=i(f),Yi=n(f,"H2",{class:!0});var rNe=s(Yi);Ev=n(rNe,"A",{id:!0,class:!0,href:!0});var ydt=s(Ev);Rge=n(ydt,"SPAN",{});var Ldt=s(Rge);T(gL.$$.fragment,Ldt),Ldt.forEach(t),ydt.forEach(t),AOo=i(rNe),Bge=n(rNe,"SPAN",{});var xdt=s(Bge);yOo=r(xdt,"AutoModelForTableQuestionAnswering"),xdt.forEach(t),rNe.forEach(t),ZPe=i(f),No=n(f,"DIV",{class:!0});var Js=s(No);T(hL.$$.fragment,Js),LOo=i(Js),Ki=n(Js,"P",{});var _K=s(Ki);xOo=r(_K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),rV=n(_K,"A",{href:!0});var $dt=s(rV);$Oo=r($dt,"from_pretrained()"),$dt.forEach(t),kOo=r(_K," class method or the "),tV=n(_K,"A",{href:!0});var kdt=s(tV);SOo=r(kdt,"from_config()"),kdt.forEach(t),ROo=r(_K,` class
method.`),_K.forEach(t),BOo=i(Js),pL=n(Js,"P",{});var tNe=s(pL);POo=r(tNe,"This class cannot be instantiated directly using "),Pge=n(tNe,"CODE",{});var Sdt=s(Pge);IOo=r(Sdt,"__init__()"),Sdt.forEach(t),qOo=r(tNe," (throws an error)."),tNe.forEach(t),NOo=i(Js),ft=n(Js,"DIV",{class:!0});var hw=s(ft);T(uL.$$.fragment,hw),jOo=i(hw),Ige=n(hw,"P",{});var Rdt=s(Ige);DOo=r(Rdt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Rdt.forEach(t),GOo=i(hw),Zi=n(hw,"P",{});var bK=s(Zi);OOo=r(bK,`Note:
Loading a model from its configuration file does `),qge=n(bK,"STRONG",{});var Bdt=s(qge);VOo=r(Bdt,"not"),Bdt.forEach(t),XOo=r(bK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=n(bK,"A",{href:!0});var Pdt=s(aV);zOo=r(Pdt,"from_pretrained()"),Pdt.forEach(t),QOo=r(bK," to load the model weights."),bK.forEach(t),WOo=i(hw),T(Cv.$$.fragment,hw),hw.forEach(t),HOo=i(Js),no=n(Js,"DIV",{class:!0});var da=s(no);T(_L.$$.fragment,da),UOo=i(da),Nge=n(da,"P",{});var Idt=s(Nge);JOo=r(Idt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Idt.forEach(t),YOo=i(da),Ia=n(da,"P",{});var pw=s(Ia);KOo=r(pw,"The model class to instantiate is selected based on the "),jge=n(pw,"CODE",{});var qdt=s(jge);ZOo=r(qdt,"model_type"),qdt.forEach(t),eVo=r(pw,` property of the config object (either
passed as an argument or loaded from `),Dge=n(pw,"CODE",{});var Ndt=s(Dge);oVo=r(Ndt,"pretrained_model_name_or_path"),Ndt.forEach(t),rVo=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gge=n(pw,"CODE",{});var jdt=s(Gge);tVo=r(jdt,"pretrained_model_name_or_path"),jdt.forEach(t),aVo=r(pw,":"),pw.forEach(t),nVo=i(da),Oge=n(da,"UL",{});var Ddt=s(Oge);wv=n(Ddt,"LI",{});var L7e=s(wv);Vge=n(L7e,"STRONG",{});var Gdt=s(Vge);sVo=r(Gdt,"tapas"),Gdt.forEach(t),lVo=r(L7e," \u2014 "),nV=n(L7e,"A",{href:!0});var Odt=s(nV);iVo=r(Odt,"TapasForQuestionAnswering"),Odt.forEach(t),dVo=r(L7e," (TAPAS model)"),L7e.forEach(t),Ddt.forEach(t),cVo=i(da),Av=n(da,"P",{});var x7e=s(Av);fVo=r(x7e,"The model is set in evaluation mode by default using "),Xge=n(x7e,"CODE",{});var Vdt=s(Xge);mVo=r(Vdt,"model.eval()"),Vdt.forEach(t),gVo=r(x7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=n(x7e,"CODE",{});var Xdt=s(zge);hVo=r(Xdt,"model.train()"),Xdt.forEach(t),x7e.forEach(t),pVo=i(da),T(yv.$$.fragment,da),da.forEach(t),Js.forEach(t),eIe=i(f),ed=n(f,"H2",{class:!0});var aNe=s(ed);Lv=n(aNe,"A",{id:!0,class:!0,href:!0});var zdt=s(Lv);Qge=n(zdt,"SPAN",{});var Qdt=s(Qge);T(bL.$$.fragment,Qdt),Qdt.forEach(t),zdt.forEach(t),uVo=i(aNe),Wge=n(aNe,"SPAN",{});var Wdt=s(Wge);_Vo=r(Wdt,"AutoModelForImageClassification"),Wdt.forEach(t),aNe.forEach(t),oIe=i(f),jo=n(f,"DIV",{class:!0});var Ys=s(jo);T(vL.$$.fragment,Ys),bVo=i(Ys),od=n(Ys,"P",{});var vK=s(od);vVo=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sV=n(vK,"A",{href:!0});var Hdt=s(sV);FVo=r(Hdt,"from_pretrained()"),Hdt.forEach(t),TVo=r(vK," class method or the "),lV=n(vK,"A",{href:!0});var Udt=s(lV);MVo=r(Udt,"from_config()"),Udt.forEach(t),EVo=r(vK,` class
method.`),vK.forEach(t),CVo=i(Ys),FL=n(Ys,"P",{});var nNe=s(FL);wVo=r(nNe,"This class cannot be instantiated directly using "),Hge=n(nNe,"CODE",{});var Jdt=s(Hge);AVo=r(Jdt,"__init__()"),Jdt.forEach(t),yVo=r(nNe," (throws an error)."),nNe.forEach(t),LVo=i(Ys),mt=n(Ys,"DIV",{class:!0});var uw=s(mt);T(TL.$$.fragment,uw),xVo=i(uw),Uge=n(uw,"P",{});var Ydt=s(Uge);$Vo=r(Ydt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ydt.forEach(t),kVo=i(uw),rd=n(uw,"P",{});var FK=s(rd);SVo=r(FK,`Note:
Loading a model from its configuration file does `),Jge=n(FK,"STRONG",{});var Kdt=s(Jge);RVo=r(Kdt,"not"),Kdt.forEach(t),BVo=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=n(FK,"A",{href:!0});var Zdt=s(iV);PVo=r(Zdt,"from_pretrained()"),Zdt.forEach(t),IVo=r(FK," to load the model weights."),FK.forEach(t),qVo=i(uw),T(xv.$$.fragment,uw),uw.forEach(t),NVo=i(Ys),so=n(Ys,"DIV",{class:!0});var ca=s(so);T(ML.$$.fragment,ca),jVo=i(ca),Yge=n(ca,"P",{});var ect=s(Yge);DVo=r(ect,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ect.forEach(t),GVo=i(ca),qa=n(ca,"P",{});var _w=s(qa);OVo=r(_w,"The model class to instantiate is selected based on the "),Kge=n(_w,"CODE",{});var oct=s(Kge);VVo=r(oct,"model_type"),oct.forEach(t),XVo=r(_w,` property of the config object (either
passed as an argument or loaded from `),Zge=n(_w,"CODE",{});var rct=s(Zge);zVo=r(rct,"pretrained_model_name_or_path"),rct.forEach(t),QVo=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=n(_w,"CODE",{});var tct=s(ehe);WVo=r(tct,"pretrained_model_name_or_path"),tct.forEach(t),HVo=r(_w,":"),_w.forEach(t),UVo=i(ca),ve=n(ca,"UL",{});var Ee=s(ve);$v=n(Ee,"LI",{});var $7e=s($v);ohe=n($7e,"STRONG",{});var act=s(ohe);JVo=r(act,"beit"),act.forEach(t),YVo=r($7e," \u2014 "),dV=n($7e,"A",{href:!0});var nct=s(dV);KVo=r(nct,"BeitForImageClassification"),nct.forEach(t),ZVo=r($7e," (BEiT model)"),$7e.forEach(t),eXo=i(Ee),kv=n(Ee,"LI",{});var k7e=s(kv);rhe=n(k7e,"STRONG",{});var sct=s(rhe);oXo=r(sct,"convnext"),sct.forEach(t),rXo=r(k7e," \u2014 "),cV=n(k7e,"A",{href:!0});var lct=s(cV);tXo=r(lct,"ConvNextForImageClassification"),lct.forEach(t),aXo=r(k7e," (ConvNext model)"),k7e.forEach(t),nXo=i(Ee),Sv=n(Ee,"LI",{});var S7e=s(Sv);the=n(S7e,"STRONG",{});var ict=s(the);sXo=r(ict,"data2vec-vision"),ict.forEach(t),lXo=r(S7e," \u2014 "),fV=n(S7e,"A",{href:!0});var dct=s(fV);iXo=r(dct,"Data2VecVisionForImageClassification"),dct.forEach(t),dXo=r(S7e," (Data2VecVision model)"),S7e.forEach(t),cXo=i(Ee),Rs=n(Ee,"LI",{});var s$=s(Rs);ahe=n(s$,"STRONG",{});var cct=s(ahe);fXo=r(cct,"deit"),cct.forEach(t),mXo=r(s$," \u2014 "),mV=n(s$,"A",{href:!0});var fct=s(mV);gXo=r(fct,"DeiTForImageClassification"),fct.forEach(t),hXo=r(s$," or "),gV=n(s$,"A",{href:!0});var mct=s(gV);pXo=r(mct,"DeiTForImageClassificationWithTeacher"),mct.forEach(t),uXo=r(s$," (DeiT model)"),s$.forEach(t),_Xo=i(Ee),Rv=n(Ee,"LI",{});var R7e=s(Rv);nhe=n(R7e,"STRONG",{});var gct=s(nhe);bXo=r(gct,"imagegpt"),gct.forEach(t),vXo=r(R7e," \u2014 "),hV=n(R7e,"A",{href:!0});var hct=s(hV);FXo=r(hct,"ImageGPTForImageClassification"),hct.forEach(t),TXo=r(R7e," (ImageGPT model)"),R7e.forEach(t),MXo=i(Ee),gt=n(Ee,"LI",{});var ff=s(gt);she=n(ff,"STRONG",{});var pct=s(she);EXo=r(pct,"perceiver"),pct.forEach(t),CXo=r(ff," \u2014 "),pV=n(ff,"A",{href:!0});var uct=s(pV);wXo=r(uct,"PerceiverForImageClassificationLearned"),uct.forEach(t),AXo=r(ff," or "),uV=n(ff,"A",{href:!0});var _ct=s(uV);yXo=r(_ct,"PerceiverForImageClassificationFourier"),_ct.forEach(t),LXo=r(ff," or "),_V=n(ff,"A",{href:!0});var bct=s(_V);xXo=r(bct,"PerceiverForImageClassificationConvProcessing"),bct.forEach(t),$Xo=r(ff," (Perceiver model)"),ff.forEach(t),kXo=i(Ee),Bv=n(Ee,"LI",{});var B7e=s(Bv);lhe=n(B7e,"STRONG",{});var vct=s(lhe);SXo=r(vct,"poolformer"),vct.forEach(t),RXo=r(B7e," \u2014 "),bV=n(B7e,"A",{href:!0});var Fct=s(bV);BXo=r(Fct,"PoolFormerForImageClassification"),Fct.forEach(t),PXo=r(B7e," (PoolFormer model)"),B7e.forEach(t),IXo=i(Ee),Pv=n(Ee,"LI",{});var P7e=s(Pv);ihe=n(P7e,"STRONG",{});var Tct=s(ihe);qXo=r(Tct,"regnet"),Tct.forEach(t),NXo=r(P7e," \u2014 "),vV=n(P7e,"A",{href:!0});var Mct=s(vV);jXo=r(Mct,"RegNetForImageClassification"),Mct.forEach(t),DXo=r(P7e," (RegNet model)"),P7e.forEach(t),GXo=i(Ee),Iv=n(Ee,"LI",{});var I7e=s(Iv);dhe=n(I7e,"STRONG",{});var Ect=s(dhe);OXo=r(Ect,"resnet"),Ect.forEach(t),VXo=r(I7e," \u2014 "),FV=n(I7e,"A",{href:!0});var Cct=s(FV);XXo=r(Cct,"ResNetForImageClassification"),Cct.forEach(t),zXo=r(I7e," (ResNet model)"),I7e.forEach(t),QXo=i(Ee),qv=n(Ee,"LI",{});var q7e=s(qv);che=n(q7e,"STRONG",{});var wct=s(che);WXo=r(wct,"segformer"),wct.forEach(t),HXo=r(q7e," \u2014 "),TV=n(q7e,"A",{href:!0});var Act=s(TV);UXo=r(Act,"SegformerForImageClassification"),Act.forEach(t),JXo=r(q7e," (SegFormer model)"),q7e.forEach(t),YXo=i(Ee),Nv=n(Ee,"LI",{});var N7e=s(Nv);fhe=n(N7e,"STRONG",{});var yct=s(fhe);KXo=r(yct,"swin"),yct.forEach(t),ZXo=r(N7e," \u2014 "),MV=n(N7e,"A",{href:!0});var Lct=s(MV);ezo=r(Lct,"SwinForImageClassification"),Lct.forEach(t),ozo=r(N7e," (Swin model)"),N7e.forEach(t),rzo=i(Ee),jv=n(Ee,"LI",{});var j7e=s(jv);mhe=n(j7e,"STRONG",{});var xct=s(mhe);tzo=r(xct,"van"),xct.forEach(t),azo=r(j7e," \u2014 "),EV=n(j7e,"A",{href:!0});var $ct=s(EV);nzo=r($ct,"VanForImageClassification"),$ct.forEach(t),szo=r(j7e," (VAN model)"),j7e.forEach(t),lzo=i(Ee),Dv=n(Ee,"LI",{});var D7e=s(Dv);ghe=n(D7e,"STRONG",{});var kct=s(ghe);izo=r(kct,"vit"),kct.forEach(t),dzo=r(D7e," \u2014 "),CV=n(D7e,"A",{href:!0});var Sct=s(CV);czo=r(Sct,"ViTForImageClassification"),Sct.forEach(t),fzo=r(D7e," (ViT model)"),D7e.forEach(t),Ee.forEach(t),mzo=i(ca),Gv=n(ca,"P",{});var G7e=s(Gv);gzo=r(G7e,"The model is set in evaluation mode by default using "),hhe=n(G7e,"CODE",{});var Rct=s(hhe);hzo=r(Rct,"model.eval()"),Rct.forEach(t),pzo=r(G7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),phe=n(G7e,"CODE",{});var Bct=s(phe);uzo=r(Bct,"model.train()"),Bct.forEach(t),G7e.forEach(t),_zo=i(ca),T(Ov.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),rIe=i(f),td=n(f,"H2",{class:!0});var sNe=s(td);Vv=n(sNe,"A",{id:!0,class:!0,href:!0});var Pct=s(Vv);uhe=n(Pct,"SPAN",{});var Ict=s(uhe);T(EL.$$.fragment,Ict),Ict.forEach(t),Pct.forEach(t),bzo=i(sNe),_he=n(sNe,"SPAN",{});var qct=s(_he);vzo=r(qct,"AutoModelForVision2Seq"),qct.forEach(t),sNe.forEach(t),tIe=i(f),Do=n(f,"DIV",{class:!0});var Ks=s(Do);T(CL.$$.fragment,Ks),Fzo=i(Ks),ad=n(Ks,"P",{});var TK=s(ad);Tzo=r(TK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),wV=n(TK,"A",{href:!0});var Nct=s(wV);Mzo=r(Nct,"from_pretrained()"),Nct.forEach(t),Ezo=r(TK," class method or the "),AV=n(TK,"A",{href:!0});var jct=s(AV);Czo=r(jct,"from_config()"),jct.forEach(t),wzo=r(TK,` class
method.`),TK.forEach(t),Azo=i(Ks),wL=n(Ks,"P",{});var lNe=s(wL);yzo=r(lNe,"This class cannot be instantiated directly using "),bhe=n(lNe,"CODE",{});var Dct=s(bhe);Lzo=r(Dct,"__init__()"),Dct.forEach(t),xzo=r(lNe," (throws an error)."),lNe.forEach(t),$zo=i(Ks),ht=n(Ks,"DIV",{class:!0});var bw=s(ht);T(AL.$$.fragment,bw),kzo=i(bw),vhe=n(bw,"P",{});var Gct=s(vhe);Szo=r(Gct,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Gct.forEach(t),Rzo=i(bw),nd=n(bw,"P",{});var MK=s(nd);Bzo=r(MK,`Note:
Loading a model from its configuration file does `),Fhe=n(MK,"STRONG",{});var Oct=s(Fhe);Pzo=r(Oct,"not"),Oct.forEach(t),Izo=r(MK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=n(MK,"A",{href:!0});var Vct=s(yV);qzo=r(Vct,"from_pretrained()"),Vct.forEach(t),Nzo=r(MK," to load the model weights."),MK.forEach(t),jzo=i(bw),T(Xv.$$.fragment,bw),bw.forEach(t),Dzo=i(Ks),lo=n(Ks,"DIV",{class:!0});var fa=s(lo);T(yL.$$.fragment,fa),Gzo=i(fa),The=n(fa,"P",{});var Xct=s(The);Ozo=r(Xct,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Xct.forEach(t),Vzo=i(fa),Na=n(fa,"P",{});var vw=s(Na);Xzo=r(vw,"The model class to instantiate is selected based on the "),Mhe=n(vw,"CODE",{});var zct=s(Mhe);zzo=r(zct,"model_type"),zct.forEach(t),Qzo=r(vw,` property of the config object (either
passed as an argument or loaded from `),Ehe=n(vw,"CODE",{});var Qct=s(Ehe);Wzo=r(Qct,"pretrained_model_name_or_path"),Qct.forEach(t),Hzo=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Che=n(vw,"CODE",{});var Wct=s(Che);Uzo=r(Wct,"pretrained_model_name_or_path"),Wct.forEach(t),Jzo=r(vw,":"),vw.forEach(t),Yzo=i(fa),whe=n(fa,"UL",{});var Hct=s(whe);zv=n(Hct,"LI",{});var O7e=s(zv);Ahe=n(O7e,"STRONG",{});var Uct=s(Ahe);Kzo=r(Uct,"vision-encoder-decoder"),Uct.forEach(t),Zzo=r(O7e," \u2014 "),LV=n(O7e,"A",{href:!0});var Jct=s(LV);eQo=r(Jct,"VisionEncoderDecoderModel"),Jct.forEach(t),oQo=r(O7e," (Vision Encoder decoder model)"),O7e.forEach(t),Hct.forEach(t),rQo=i(fa),Qv=n(fa,"P",{});var V7e=s(Qv);tQo=r(V7e,"The model is set in evaluation mode by default using "),yhe=n(V7e,"CODE",{});var Yct=s(yhe);aQo=r(Yct,"model.eval()"),Yct.forEach(t),nQo=r(V7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lhe=n(V7e,"CODE",{});var Kct=s(Lhe);sQo=r(Kct,"model.train()"),Kct.forEach(t),V7e.forEach(t),lQo=i(fa),T(Wv.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),aIe=i(f),sd=n(f,"H2",{class:!0});var iNe=s(sd);Hv=n(iNe,"A",{id:!0,class:!0,href:!0});var Zct=s(Hv);xhe=n(Zct,"SPAN",{});var eft=s(xhe);T(LL.$$.fragment,eft),eft.forEach(t),Zct.forEach(t),iQo=i(iNe),$he=n(iNe,"SPAN",{});var oft=s($he);dQo=r(oft,"AutoModelForAudioClassification"),oft.forEach(t),iNe.forEach(t),nIe=i(f),Go=n(f,"DIV",{class:!0});var Zs=s(Go);T(xL.$$.fragment,Zs),cQo=i(Zs),ld=n(Zs,"P",{});var EK=s(ld);fQo=r(EK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),xV=n(EK,"A",{href:!0});var rft=s(xV);mQo=r(rft,"from_pretrained()"),rft.forEach(t),gQo=r(EK," class method or the "),$V=n(EK,"A",{href:!0});var tft=s($V);hQo=r(tft,"from_config()"),tft.forEach(t),pQo=r(EK,` class
method.`),EK.forEach(t),uQo=i(Zs),$L=n(Zs,"P",{});var dNe=s($L);_Qo=r(dNe,"This class cannot be instantiated directly using "),khe=n(dNe,"CODE",{});var aft=s(khe);bQo=r(aft,"__init__()"),aft.forEach(t),vQo=r(dNe," (throws an error)."),dNe.forEach(t),FQo=i(Zs),pt=n(Zs,"DIV",{class:!0});var Fw=s(pt);T(kL.$$.fragment,Fw),TQo=i(Fw),She=n(Fw,"P",{});var nft=s(She);MQo=r(nft,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),nft.forEach(t),EQo=i(Fw),id=n(Fw,"P",{});var CK=s(id);CQo=r(CK,`Note:
Loading a model from its configuration file does `),Rhe=n(CK,"STRONG",{});var sft=s(Rhe);wQo=r(sft,"not"),sft.forEach(t),AQo=r(CK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=n(CK,"A",{href:!0});var lft=s(kV);yQo=r(lft,"from_pretrained()"),lft.forEach(t),LQo=r(CK," to load the model weights."),CK.forEach(t),xQo=i(Fw),T(Uv.$$.fragment,Fw),Fw.forEach(t),$Qo=i(Zs),io=n(Zs,"DIV",{class:!0});var ma=s(io);T(SL.$$.fragment,ma),kQo=i(ma),Bhe=n(ma,"P",{});var ift=s(Bhe);SQo=r(ift,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ift.forEach(t),RQo=i(ma),ja=n(ma,"P",{});var Tw=s(ja);BQo=r(Tw,"The model class to instantiate is selected based on the "),Phe=n(Tw,"CODE",{});var dft=s(Phe);PQo=r(dft,"model_type"),dft.forEach(t),IQo=r(Tw,` property of the config object (either
passed as an argument or loaded from `),Ihe=n(Tw,"CODE",{});var cft=s(Ihe);qQo=r(cft,"pretrained_model_name_or_path"),cft.forEach(t),NQo=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=n(Tw,"CODE",{});var fft=s(qhe);jQo=r(fft,"pretrained_model_name_or_path"),fft.forEach(t),DQo=r(Tw,":"),Tw.forEach(t),GQo=i(ma),je=n(ma,"UL",{});var vo=s(je);Jv=n(vo,"LI",{});var X7e=s(Jv);Nhe=n(X7e,"STRONG",{});var mft=s(Nhe);OQo=r(mft,"data2vec-audio"),mft.forEach(t),VQo=r(X7e," \u2014 "),SV=n(X7e,"A",{href:!0});var gft=s(SV);XQo=r(gft,"Data2VecAudioForSequenceClassification"),gft.forEach(t),zQo=r(X7e," (Data2VecAudio model)"),X7e.forEach(t),QQo=i(vo),Yv=n(vo,"LI",{});var z7e=s(Yv);jhe=n(z7e,"STRONG",{});var hft=s(jhe);WQo=r(hft,"hubert"),hft.forEach(t),HQo=r(z7e," \u2014 "),RV=n(z7e,"A",{href:!0});var pft=s(RV);UQo=r(pft,"HubertForSequenceClassification"),pft.forEach(t),JQo=r(z7e," (Hubert model)"),z7e.forEach(t),YQo=i(vo),Kv=n(vo,"LI",{});var Q7e=s(Kv);Dhe=n(Q7e,"STRONG",{});var uft=s(Dhe);KQo=r(uft,"sew"),uft.forEach(t),ZQo=r(Q7e," \u2014 "),BV=n(Q7e,"A",{href:!0});var _ft=s(BV);eWo=r(_ft,"SEWForSequenceClassification"),_ft.forEach(t),oWo=r(Q7e," (SEW model)"),Q7e.forEach(t),rWo=i(vo),Zv=n(vo,"LI",{});var W7e=s(Zv);Ghe=n(W7e,"STRONG",{});var bft=s(Ghe);tWo=r(bft,"sew-d"),bft.forEach(t),aWo=r(W7e," \u2014 "),PV=n(W7e,"A",{href:!0});var vft=s(PV);nWo=r(vft,"SEWDForSequenceClassification"),vft.forEach(t),sWo=r(W7e," (SEW-D model)"),W7e.forEach(t),lWo=i(vo),eF=n(vo,"LI",{});var H7e=s(eF);Ohe=n(H7e,"STRONG",{});var Fft=s(Ohe);iWo=r(Fft,"unispeech"),Fft.forEach(t),dWo=r(H7e," \u2014 "),IV=n(H7e,"A",{href:!0});var Tft=s(IV);cWo=r(Tft,"UniSpeechForSequenceClassification"),Tft.forEach(t),fWo=r(H7e," (UniSpeech model)"),H7e.forEach(t),mWo=i(vo),oF=n(vo,"LI",{});var U7e=s(oF);Vhe=n(U7e,"STRONG",{});var Mft=s(Vhe);gWo=r(Mft,"unispeech-sat"),Mft.forEach(t),hWo=r(U7e," \u2014 "),qV=n(U7e,"A",{href:!0});var Eft=s(qV);pWo=r(Eft,"UniSpeechSatForSequenceClassification"),Eft.forEach(t),uWo=r(U7e," (UniSpeechSat model)"),U7e.forEach(t),_Wo=i(vo),rF=n(vo,"LI",{});var J7e=s(rF);Xhe=n(J7e,"STRONG",{});var Cft=s(Xhe);bWo=r(Cft,"wav2vec2"),Cft.forEach(t),vWo=r(J7e," \u2014 "),NV=n(J7e,"A",{href:!0});var wft=s(NV);FWo=r(wft,"Wav2Vec2ForSequenceClassification"),wft.forEach(t),TWo=r(J7e," (Wav2Vec2 model)"),J7e.forEach(t),MWo=i(vo),tF=n(vo,"LI",{});var Y7e=s(tF);zhe=n(Y7e,"STRONG",{});var Aft=s(zhe);EWo=r(Aft,"wavlm"),Aft.forEach(t),CWo=r(Y7e," \u2014 "),jV=n(Y7e,"A",{href:!0});var yft=s(jV);wWo=r(yft,"WavLMForSequenceClassification"),yft.forEach(t),AWo=r(Y7e," (WavLM model)"),Y7e.forEach(t),vo.forEach(t),yWo=i(ma),aF=n(ma,"P",{});var K7e=s(aF);LWo=r(K7e,"The model is set in evaluation mode by default using "),Qhe=n(K7e,"CODE",{});var Lft=s(Qhe);xWo=r(Lft,"model.eval()"),Lft.forEach(t),$Wo=r(K7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=n(K7e,"CODE",{});var xft=s(Whe);kWo=r(xft,"model.train()"),xft.forEach(t),K7e.forEach(t),SWo=i(ma),T(nF.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),sIe=i(f),dd=n(f,"H2",{class:!0});var cNe=s(dd);sF=n(cNe,"A",{id:!0,class:!0,href:!0});var $ft=s(sF);Hhe=n($ft,"SPAN",{});var kft=s(Hhe);T(RL.$$.fragment,kft),kft.forEach(t),$ft.forEach(t),RWo=i(cNe),Uhe=n(cNe,"SPAN",{});var Sft=s(Uhe);BWo=r(Sft,"AutoModelForAudioFrameClassification"),Sft.forEach(t),cNe.forEach(t),lIe=i(f),Oo=n(f,"DIV",{class:!0});var el=s(Oo);T(BL.$$.fragment,el),PWo=i(el),cd=n(el,"P",{});var wK=s(cd);IWo=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),DV=n(wK,"A",{href:!0});var Rft=s(DV);qWo=r(Rft,"from_pretrained()"),Rft.forEach(t),NWo=r(wK," class method or the "),GV=n(wK,"A",{href:!0});var Bft=s(GV);jWo=r(Bft,"from_config()"),Bft.forEach(t),DWo=r(wK,` class
method.`),wK.forEach(t),GWo=i(el),PL=n(el,"P",{});var fNe=s(PL);OWo=r(fNe,"This class cannot be instantiated directly using "),Jhe=n(fNe,"CODE",{});var Pft=s(Jhe);VWo=r(Pft,"__init__()"),Pft.forEach(t),XWo=r(fNe," (throws an error)."),fNe.forEach(t),zWo=i(el),ut=n(el,"DIV",{class:!0});var Mw=s(ut);T(IL.$$.fragment,Mw),QWo=i(Mw),Yhe=n(Mw,"P",{});var Ift=s(Yhe);WWo=r(Ift,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Ift.forEach(t),HWo=i(Mw),fd=n(Mw,"P",{});var AK=s(fd);UWo=r(AK,`Note:
Loading a model from its configuration file does `),Khe=n(AK,"STRONG",{});var qft=s(Khe);JWo=r(qft,"not"),qft.forEach(t),YWo=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=n(AK,"A",{href:!0});var Nft=s(OV);KWo=r(Nft,"from_pretrained()"),Nft.forEach(t),ZWo=r(AK," to load the model weights."),AK.forEach(t),eHo=i(Mw),T(lF.$$.fragment,Mw),Mw.forEach(t),oHo=i(el),co=n(el,"DIV",{class:!0});var ga=s(co);T(qL.$$.fragment,ga),rHo=i(ga),Zhe=n(ga,"P",{});var jft=s(Zhe);tHo=r(jft,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),jft.forEach(t),aHo=i(ga),Da=n(ga,"P",{});var Ew=s(Da);nHo=r(Ew,"The model class to instantiate is selected based on the "),epe=n(Ew,"CODE",{});var Dft=s(epe);sHo=r(Dft,"model_type"),Dft.forEach(t),lHo=r(Ew,` property of the config object (either
passed as an argument or loaded from `),ope=n(Ew,"CODE",{});var Gft=s(ope);iHo=r(Gft,"pretrained_model_name_or_path"),Gft.forEach(t),dHo=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=n(Ew,"CODE",{});var Oft=s(rpe);cHo=r(Oft,"pretrained_model_name_or_path"),Oft.forEach(t),fHo=r(Ew,":"),Ew.forEach(t),mHo=i(ga),Ga=n(ga,"UL",{});var Cw=s(Ga);iF=n(Cw,"LI",{});var Z7e=s(iF);tpe=n(Z7e,"STRONG",{});var Vft=s(tpe);gHo=r(Vft,"data2vec-audio"),Vft.forEach(t),hHo=r(Z7e," \u2014 "),VV=n(Z7e,"A",{href:!0});var Xft=s(VV);pHo=r(Xft,"Data2VecAudioForAudioFrameClassification"),Xft.forEach(t),uHo=r(Z7e," (Data2VecAudio model)"),Z7e.forEach(t),_Ho=i(Cw),dF=n(Cw,"LI",{});var e9e=s(dF);ape=n(e9e,"STRONG",{});var zft=s(ape);bHo=r(zft,"unispeech-sat"),zft.forEach(t),vHo=r(e9e," \u2014 "),XV=n(e9e,"A",{href:!0});var Qft=s(XV);FHo=r(Qft,"UniSpeechSatForAudioFrameClassification"),Qft.forEach(t),THo=r(e9e," (UniSpeechSat model)"),e9e.forEach(t),MHo=i(Cw),cF=n(Cw,"LI",{});var o9e=s(cF);npe=n(o9e,"STRONG",{});var Wft=s(npe);EHo=r(Wft,"wav2vec2"),Wft.forEach(t),CHo=r(o9e," \u2014 "),zV=n(o9e,"A",{href:!0});var Hft=s(zV);wHo=r(Hft,"Wav2Vec2ForAudioFrameClassification"),Hft.forEach(t),AHo=r(o9e," (Wav2Vec2 model)"),o9e.forEach(t),yHo=i(Cw),fF=n(Cw,"LI",{});var r9e=s(fF);spe=n(r9e,"STRONG",{});var Uft=s(spe);LHo=r(Uft,"wavlm"),Uft.forEach(t),xHo=r(r9e," \u2014 "),QV=n(r9e,"A",{href:!0});var Jft=s(QV);$Ho=r(Jft,"WavLMForAudioFrameClassification"),Jft.forEach(t),kHo=r(r9e," (WavLM model)"),r9e.forEach(t),Cw.forEach(t),SHo=i(ga),mF=n(ga,"P",{});var t9e=s(mF);RHo=r(t9e,"The model is set in evaluation mode by default using "),lpe=n(t9e,"CODE",{});var Yft=s(lpe);BHo=r(Yft,"model.eval()"),Yft.forEach(t),PHo=r(t9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ipe=n(t9e,"CODE",{});var Kft=s(ipe);IHo=r(Kft,"model.train()"),Kft.forEach(t),t9e.forEach(t),qHo=i(ga),T(gF.$$.fragment,ga),ga.forEach(t),el.forEach(t),iIe=i(f),md=n(f,"H2",{class:!0});var mNe=s(md);hF=n(mNe,"A",{id:!0,class:!0,href:!0});var Zft=s(hF);dpe=n(Zft,"SPAN",{});var emt=s(dpe);T(NL.$$.fragment,emt),emt.forEach(t),Zft.forEach(t),NHo=i(mNe),cpe=n(mNe,"SPAN",{});var omt=s(cpe);jHo=r(omt,"AutoModelForCTC"),omt.forEach(t),mNe.forEach(t),dIe=i(f),Vo=n(f,"DIV",{class:!0});var ol=s(Vo);T(jL.$$.fragment,ol),DHo=i(ol),gd=n(ol,"P",{});var yK=s(gd);GHo=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),WV=n(yK,"A",{href:!0});var rmt=s(WV);OHo=r(rmt,"from_pretrained()"),rmt.forEach(t),VHo=r(yK," class method or the "),HV=n(yK,"A",{href:!0});var tmt=s(HV);XHo=r(tmt,"from_config()"),tmt.forEach(t),zHo=r(yK,` class
method.`),yK.forEach(t),QHo=i(ol),DL=n(ol,"P",{});var gNe=s(DL);WHo=r(gNe,"This class cannot be instantiated directly using "),fpe=n(gNe,"CODE",{});var amt=s(fpe);HHo=r(amt,"__init__()"),amt.forEach(t),UHo=r(gNe," (throws an error)."),gNe.forEach(t),JHo=i(ol),_t=n(ol,"DIV",{class:!0});var ww=s(_t);T(GL.$$.fragment,ww),YHo=i(ww),mpe=n(ww,"P",{});var nmt=s(mpe);KHo=r(nmt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),nmt.forEach(t),ZHo=i(ww),hd=n(ww,"P",{});var LK=s(hd);eUo=r(LK,`Note:
Loading a model from its configuration file does `),gpe=n(LK,"STRONG",{});var smt=s(gpe);oUo=r(smt,"not"),smt.forEach(t),rUo=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=n(LK,"A",{href:!0});var lmt=s(UV);tUo=r(lmt,"from_pretrained()"),lmt.forEach(t),aUo=r(LK," to load the model weights."),LK.forEach(t),nUo=i(ww),T(pF.$$.fragment,ww),ww.forEach(t),sUo=i(ol),fo=n(ol,"DIV",{class:!0});var ha=s(fo);T(OL.$$.fragment,ha),lUo=i(ha),hpe=n(ha,"P",{});var imt=s(hpe);iUo=r(imt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),imt.forEach(t),dUo=i(ha),Oa=n(ha,"P",{});var Aw=s(Oa);cUo=r(Aw,"The model class to instantiate is selected based on the "),ppe=n(Aw,"CODE",{});var dmt=s(ppe);fUo=r(dmt,"model_type"),dmt.forEach(t),mUo=r(Aw,` property of the config object (either
passed as an argument or loaded from `),upe=n(Aw,"CODE",{});var cmt=s(upe);gUo=r(cmt,"pretrained_model_name_or_path"),cmt.forEach(t),hUo=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_pe=n(Aw,"CODE",{});var fmt=s(_pe);pUo=r(fmt,"pretrained_model_name_or_path"),fmt.forEach(t),uUo=r(Aw,":"),Aw.forEach(t),_Uo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);uF=n(Oe,"LI",{});var a9e=s(uF);bpe=n(a9e,"STRONG",{});var mmt=s(bpe);bUo=r(mmt,"data2vec-audio"),mmt.forEach(t),vUo=r(a9e," \u2014 "),JV=n(a9e,"A",{href:!0});var gmt=s(JV);FUo=r(gmt,"Data2VecAudioForCTC"),gmt.forEach(t),TUo=r(a9e," (Data2VecAudio model)"),a9e.forEach(t),MUo=i(Oe),_F=n(Oe,"LI",{});var n9e=s(_F);vpe=n(n9e,"STRONG",{});var hmt=s(vpe);EUo=r(hmt,"hubert"),hmt.forEach(t),CUo=r(n9e," \u2014 "),YV=n(n9e,"A",{href:!0});var pmt=s(YV);wUo=r(pmt,"HubertForCTC"),pmt.forEach(t),AUo=r(n9e," (Hubert model)"),n9e.forEach(t),yUo=i(Oe),bF=n(Oe,"LI",{});var s9e=s(bF);Fpe=n(s9e,"STRONG",{});var umt=s(Fpe);LUo=r(umt,"mctct"),umt.forEach(t),xUo=r(s9e," \u2014 "),KV=n(s9e,"A",{href:!0});var _mt=s(KV);$Uo=r(_mt,"MCTCTForCTC"),_mt.forEach(t),kUo=r(s9e," (MCTCT model)"),s9e.forEach(t),SUo=i(Oe),vF=n(Oe,"LI",{});var l9e=s(vF);Tpe=n(l9e,"STRONG",{});var bmt=s(Tpe);RUo=r(bmt,"sew"),bmt.forEach(t),BUo=r(l9e," \u2014 "),ZV=n(l9e,"A",{href:!0});var vmt=s(ZV);PUo=r(vmt,"SEWForCTC"),vmt.forEach(t),IUo=r(l9e," (SEW model)"),l9e.forEach(t),qUo=i(Oe),FF=n(Oe,"LI",{});var i9e=s(FF);Mpe=n(i9e,"STRONG",{});var Fmt=s(Mpe);NUo=r(Fmt,"sew-d"),Fmt.forEach(t),jUo=r(i9e," \u2014 "),eX=n(i9e,"A",{href:!0});var Tmt=s(eX);DUo=r(Tmt,"SEWDForCTC"),Tmt.forEach(t),GUo=r(i9e," (SEW-D model)"),i9e.forEach(t),OUo=i(Oe),TF=n(Oe,"LI",{});var d9e=s(TF);Epe=n(d9e,"STRONG",{});var Mmt=s(Epe);VUo=r(Mmt,"unispeech"),Mmt.forEach(t),XUo=r(d9e," \u2014 "),oX=n(d9e,"A",{href:!0});var Emt=s(oX);zUo=r(Emt,"UniSpeechForCTC"),Emt.forEach(t),QUo=r(d9e," (UniSpeech model)"),d9e.forEach(t),WUo=i(Oe),MF=n(Oe,"LI",{});var c9e=s(MF);Cpe=n(c9e,"STRONG",{});var Cmt=s(Cpe);HUo=r(Cmt,"unispeech-sat"),Cmt.forEach(t),UUo=r(c9e," \u2014 "),rX=n(c9e,"A",{href:!0});var wmt=s(rX);JUo=r(wmt,"UniSpeechSatForCTC"),wmt.forEach(t),YUo=r(c9e," (UniSpeechSat model)"),c9e.forEach(t),KUo=i(Oe),EF=n(Oe,"LI",{});var f9e=s(EF);wpe=n(f9e,"STRONG",{});var Amt=s(wpe);ZUo=r(Amt,"wav2vec2"),Amt.forEach(t),eJo=r(f9e," \u2014 "),tX=n(f9e,"A",{href:!0});var ymt=s(tX);oJo=r(ymt,"Wav2Vec2ForCTC"),ymt.forEach(t),rJo=r(f9e," (Wav2Vec2 model)"),f9e.forEach(t),tJo=i(Oe),CF=n(Oe,"LI",{});var m9e=s(CF);Ape=n(m9e,"STRONG",{});var Lmt=s(Ape);aJo=r(Lmt,"wavlm"),Lmt.forEach(t),nJo=r(m9e," \u2014 "),aX=n(m9e,"A",{href:!0});var xmt=s(aX);sJo=r(xmt,"WavLMForCTC"),xmt.forEach(t),lJo=r(m9e," (WavLM model)"),m9e.forEach(t),Oe.forEach(t),iJo=i(ha),wF=n(ha,"P",{});var g9e=s(wF);dJo=r(g9e,"The model is set in evaluation mode by default using "),ype=n(g9e,"CODE",{});var $mt=s(ype);cJo=r($mt,"model.eval()"),$mt.forEach(t),fJo=r(g9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lpe=n(g9e,"CODE",{});var kmt=s(Lpe);mJo=r(kmt,"model.train()"),kmt.forEach(t),g9e.forEach(t),gJo=i(ha),T(AF.$$.fragment,ha),ha.forEach(t),ol.forEach(t),cIe=i(f),pd=n(f,"H2",{class:!0});var hNe=s(pd);yF=n(hNe,"A",{id:!0,class:!0,href:!0});var Smt=s(yF);xpe=n(Smt,"SPAN",{});var Rmt=s(xpe);T(VL.$$.fragment,Rmt),Rmt.forEach(t),Smt.forEach(t),hJo=i(hNe),$pe=n(hNe,"SPAN",{});var Bmt=s($pe);pJo=r(Bmt,"AutoModelForSpeechSeq2Seq"),Bmt.forEach(t),hNe.forEach(t),fIe=i(f),Xo=n(f,"DIV",{class:!0});var rl=s(Xo);T(XL.$$.fragment,rl),uJo=i(rl),ud=n(rl,"P",{});var xK=s(ud);_Jo=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nX=n(xK,"A",{href:!0});var Pmt=s(nX);bJo=r(Pmt,"from_pretrained()"),Pmt.forEach(t),vJo=r(xK," class method or the "),sX=n(xK,"A",{href:!0});var Imt=s(sX);FJo=r(Imt,"from_config()"),Imt.forEach(t),TJo=r(xK,` class
method.`),xK.forEach(t),MJo=i(rl),zL=n(rl,"P",{});var pNe=s(zL);EJo=r(pNe,"This class cannot be instantiated directly using "),kpe=n(pNe,"CODE",{});var qmt=s(kpe);CJo=r(qmt,"__init__()"),qmt.forEach(t),wJo=r(pNe," (throws an error)."),pNe.forEach(t),AJo=i(rl),bt=n(rl,"DIV",{class:!0});var yw=s(bt);T(QL.$$.fragment,yw),yJo=i(yw),Spe=n(yw,"P",{});var Nmt=s(Spe);LJo=r(Nmt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Nmt.forEach(t),xJo=i(yw),_d=n(yw,"P",{});var $K=s(_d);$Jo=r($K,`Note:
Loading a model from its configuration file does `),Rpe=n($K,"STRONG",{});var jmt=s(Rpe);kJo=r(jmt,"not"),jmt.forEach(t),SJo=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=n($K,"A",{href:!0});var Dmt=s(lX);RJo=r(Dmt,"from_pretrained()"),Dmt.forEach(t),BJo=r($K," to load the model weights."),$K.forEach(t),PJo=i(yw),T(LF.$$.fragment,yw),yw.forEach(t),IJo=i(rl),mo=n(rl,"DIV",{class:!0});var pa=s(mo);T(WL.$$.fragment,pa),qJo=i(pa),Bpe=n(pa,"P",{});var Gmt=s(Bpe);NJo=r(Gmt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Gmt.forEach(t),jJo=i(pa),Va=n(pa,"P",{});var Lw=s(Va);DJo=r(Lw,"The model class to instantiate is selected based on the "),Ppe=n(Lw,"CODE",{});var Omt=s(Ppe);GJo=r(Omt,"model_type"),Omt.forEach(t),OJo=r(Lw,` property of the config object (either
passed as an argument or loaded from `),Ipe=n(Lw,"CODE",{});var Vmt=s(Ipe);VJo=r(Vmt,"pretrained_model_name_or_path"),Vmt.forEach(t),XJo=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=n(Lw,"CODE",{});var Xmt=s(qpe);zJo=r(Xmt,"pretrained_model_name_or_path"),Xmt.forEach(t),QJo=r(Lw,":"),Lw.forEach(t),WJo=i(pa),HL=n(pa,"UL",{});var uNe=s(HL);xF=n(uNe,"LI",{});var h9e=s(xF);Npe=n(h9e,"STRONG",{});var zmt=s(Npe);HJo=r(zmt,"speech-encoder-decoder"),zmt.forEach(t),UJo=r(h9e," \u2014 "),iX=n(h9e,"A",{href:!0});var Qmt=s(iX);JJo=r(Qmt,"SpeechEncoderDecoderModel"),Qmt.forEach(t),YJo=r(h9e," (Speech Encoder decoder model)"),h9e.forEach(t),KJo=i(uNe),$F=n(uNe,"LI",{});var p9e=s($F);jpe=n(p9e,"STRONG",{});var Wmt=s(jpe);ZJo=r(Wmt,"speech_to_text"),Wmt.forEach(t),eYo=r(p9e," \u2014 "),dX=n(p9e,"A",{href:!0});var Hmt=s(dX);oYo=r(Hmt,"Speech2TextForConditionalGeneration"),Hmt.forEach(t),rYo=r(p9e," (Speech2Text model)"),p9e.forEach(t),uNe.forEach(t),tYo=i(pa),kF=n(pa,"P",{});var u9e=s(kF);aYo=r(u9e,"The model is set in evaluation mode by default using "),Dpe=n(u9e,"CODE",{});var Umt=s(Dpe);nYo=r(Umt,"model.eval()"),Umt.forEach(t),sYo=r(u9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=n(u9e,"CODE",{});var Jmt=s(Gpe);lYo=r(Jmt,"model.train()"),Jmt.forEach(t),u9e.forEach(t),iYo=i(pa),T(SF.$$.fragment,pa),pa.forEach(t),rl.forEach(t),mIe=i(f),bd=n(f,"H2",{class:!0});var _Ne=s(bd);RF=n(_Ne,"A",{id:!0,class:!0,href:!0});var Ymt=s(RF);Ope=n(Ymt,"SPAN",{});var Kmt=s(Ope);T(UL.$$.fragment,Kmt),Kmt.forEach(t),Ymt.forEach(t),dYo=i(_Ne),Vpe=n(_Ne,"SPAN",{});var Zmt=s(Vpe);cYo=r(Zmt,"AutoModelForAudioXVector"),Zmt.forEach(t),_Ne.forEach(t),gIe=i(f),zo=n(f,"DIV",{class:!0});var tl=s(zo);T(JL.$$.fragment,tl),fYo=i(tl),vd=n(tl,"P",{});var kK=s(vd);mYo=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),cX=n(kK,"A",{href:!0});var egt=s(cX);gYo=r(egt,"from_pretrained()"),egt.forEach(t),hYo=r(kK," class method or the "),fX=n(kK,"A",{href:!0});var ogt=s(fX);pYo=r(ogt,"from_config()"),ogt.forEach(t),uYo=r(kK,` class
method.`),kK.forEach(t),_Yo=i(tl),YL=n(tl,"P",{});var bNe=s(YL);bYo=r(bNe,"This class cannot be instantiated directly using "),Xpe=n(bNe,"CODE",{});var rgt=s(Xpe);vYo=r(rgt,"__init__()"),rgt.forEach(t),FYo=r(bNe," (throws an error)."),bNe.forEach(t),TYo=i(tl),vt=n(tl,"DIV",{class:!0});var xw=s(vt);T(KL.$$.fragment,xw),MYo=i(xw),zpe=n(xw,"P",{});var tgt=s(zpe);EYo=r(tgt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),tgt.forEach(t),CYo=i(xw),Fd=n(xw,"P",{});var SK=s(Fd);wYo=r(SK,`Note:
Loading a model from its configuration file does `),Qpe=n(SK,"STRONG",{});var agt=s(Qpe);AYo=r(agt,"not"),agt.forEach(t),yYo=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=n(SK,"A",{href:!0});var ngt=s(mX);LYo=r(ngt,"from_pretrained()"),ngt.forEach(t),xYo=r(SK," to load the model weights."),SK.forEach(t),$Yo=i(xw),T(BF.$$.fragment,xw),xw.forEach(t),kYo=i(tl),go=n(tl,"DIV",{class:!0});var ua=s(go);T(ZL.$$.fragment,ua),SYo=i(ua),Wpe=n(ua,"P",{});var sgt=s(Wpe);RYo=r(sgt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),sgt.forEach(t),BYo=i(ua),Xa=n(ua,"P",{});var $w=s(Xa);PYo=r($w,"The model class to instantiate is selected based on the "),Hpe=n($w,"CODE",{});var lgt=s(Hpe);IYo=r(lgt,"model_type"),lgt.forEach(t),qYo=r($w,` property of the config object (either
passed as an argument or loaded from `),Upe=n($w,"CODE",{});var igt=s(Upe);NYo=r(igt,"pretrained_model_name_or_path"),igt.forEach(t),jYo=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=n($w,"CODE",{});var dgt=s(Jpe);DYo=r(dgt,"pretrained_model_name_or_path"),dgt.forEach(t),GYo=r($w,":"),$w.forEach(t),OYo=i(ua),za=n(ua,"UL",{});var kw=s(za);PF=n(kw,"LI",{});var _9e=s(PF);Ype=n(_9e,"STRONG",{});var cgt=s(Ype);VYo=r(cgt,"data2vec-audio"),cgt.forEach(t),XYo=r(_9e," \u2014 "),gX=n(_9e,"A",{href:!0});var fgt=s(gX);zYo=r(fgt,"Data2VecAudioForXVector"),fgt.forEach(t),QYo=r(_9e," (Data2VecAudio model)"),_9e.forEach(t),WYo=i(kw),IF=n(kw,"LI",{});var b9e=s(IF);Kpe=n(b9e,"STRONG",{});var mgt=s(Kpe);HYo=r(mgt,"unispeech-sat"),mgt.forEach(t),UYo=r(b9e," \u2014 "),hX=n(b9e,"A",{href:!0});var ggt=s(hX);JYo=r(ggt,"UniSpeechSatForXVector"),ggt.forEach(t),YYo=r(b9e," (UniSpeechSat model)"),b9e.forEach(t),KYo=i(kw),qF=n(kw,"LI",{});var v9e=s(qF);Zpe=n(v9e,"STRONG",{});var hgt=s(Zpe);ZYo=r(hgt,"wav2vec2"),hgt.forEach(t),eKo=r(v9e," \u2014 "),pX=n(v9e,"A",{href:!0});var pgt=s(pX);oKo=r(pgt,"Wav2Vec2ForXVector"),pgt.forEach(t),rKo=r(v9e," (Wav2Vec2 model)"),v9e.forEach(t),tKo=i(kw),NF=n(kw,"LI",{});var F9e=s(NF);eue=n(F9e,"STRONG",{});var ugt=s(eue);aKo=r(ugt,"wavlm"),ugt.forEach(t),nKo=r(F9e," \u2014 "),uX=n(F9e,"A",{href:!0});var _gt=s(uX);sKo=r(_gt,"WavLMForXVector"),_gt.forEach(t),lKo=r(F9e," (WavLM model)"),F9e.forEach(t),kw.forEach(t),iKo=i(ua),jF=n(ua,"P",{});var T9e=s(jF);dKo=r(T9e,"The model is set in evaluation mode by default using "),oue=n(T9e,"CODE",{});var bgt=s(oue);cKo=r(bgt,"model.eval()"),bgt.forEach(t),fKo=r(T9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rue=n(T9e,"CODE",{});var vgt=s(rue);mKo=r(vgt,"model.train()"),vgt.forEach(t),T9e.forEach(t),gKo=i(ua),T(DF.$$.fragment,ua),ua.forEach(t),tl.forEach(t),hIe=i(f),Td=n(f,"H2",{class:!0});var vNe=s(Td);GF=n(vNe,"A",{id:!0,class:!0,href:!0});var Fgt=s(GF);tue=n(Fgt,"SPAN",{});var Tgt=s(tue);T(e8.$$.fragment,Tgt),Tgt.forEach(t),Fgt.forEach(t),hKo=i(vNe),aue=n(vNe,"SPAN",{});var Mgt=s(aue);pKo=r(Mgt,"AutoModelForMaskedImageModeling"),Mgt.forEach(t),vNe.forEach(t),pIe=i(f),Qo=n(f,"DIV",{class:!0});var al=s(Qo);T(o8.$$.fragment,al),uKo=i(al),Md=n(al,"P",{});var RK=s(Md);_Ko=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),_X=n(RK,"A",{href:!0});var Egt=s(_X);bKo=r(Egt,"from_pretrained()"),Egt.forEach(t),vKo=r(RK," class method or the "),bX=n(RK,"A",{href:!0});var Cgt=s(bX);FKo=r(Cgt,"from_config()"),Cgt.forEach(t),TKo=r(RK,` class
method.`),RK.forEach(t),MKo=i(al),r8=n(al,"P",{});var FNe=s(r8);EKo=r(FNe,"This class cannot be instantiated directly using "),nue=n(FNe,"CODE",{});var wgt=s(nue);CKo=r(wgt,"__init__()"),wgt.forEach(t),wKo=r(FNe," (throws an error)."),FNe.forEach(t),AKo=i(al),Ft=n(al,"DIV",{class:!0});var Sw=s(Ft);T(t8.$$.fragment,Sw),yKo=i(Sw),sue=n(Sw,"P",{});var Agt=s(sue);LKo=r(Agt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Agt.forEach(t),xKo=i(Sw),Ed=n(Sw,"P",{});var BK=s(Ed);$Ko=r(BK,`Note:
Loading a model from its configuration file does `),lue=n(BK,"STRONG",{});var ygt=s(lue);kKo=r(ygt,"not"),ygt.forEach(t),SKo=r(BK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=n(BK,"A",{href:!0});var Lgt=s(vX);RKo=r(Lgt,"from_pretrained()"),Lgt.forEach(t),BKo=r(BK," to load the model weights."),BK.forEach(t),PKo=i(Sw),T(OF.$$.fragment,Sw),Sw.forEach(t),IKo=i(al),ho=n(al,"DIV",{class:!0});var _a=s(ho);T(a8.$$.fragment,_a),qKo=i(_a),iue=n(_a,"P",{});var xgt=s(iue);NKo=r(xgt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),xgt.forEach(t),jKo=i(_a),Qa=n(_a,"P",{});var Rw=s(Qa);DKo=r(Rw,"The model class to instantiate is selected based on the "),due=n(Rw,"CODE",{});var $gt=s(due);GKo=r($gt,"model_type"),$gt.forEach(t),OKo=r(Rw,` property of the config object (either
passed as an argument or loaded from `),cue=n(Rw,"CODE",{});var kgt=s(cue);VKo=r(kgt,"pretrained_model_name_or_path"),kgt.forEach(t),XKo=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=n(Rw,"CODE",{});var Sgt=s(fue);zKo=r(Sgt,"pretrained_model_name_or_path"),Sgt.forEach(t),QKo=r(Rw,":"),Rw.forEach(t),WKo=i(_a),Cd=n(_a,"UL",{});var PK=s(Cd);VF=n(PK,"LI",{});var M9e=s(VF);mue=n(M9e,"STRONG",{});var Rgt=s(mue);HKo=r(Rgt,"deit"),Rgt.forEach(t),UKo=r(M9e," \u2014 "),FX=n(M9e,"A",{href:!0});var Bgt=s(FX);JKo=r(Bgt,"DeiTForMaskedImageModeling"),Bgt.forEach(t),YKo=r(M9e," (DeiT model)"),M9e.forEach(t),KKo=i(PK),XF=n(PK,"LI",{});var E9e=s(XF);gue=n(E9e,"STRONG",{});var Pgt=s(gue);ZKo=r(Pgt,"swin"),Pgt.forEach(t),eZo=r(E9e," \u2014 "),TX=n(E9e,"A",{href:!0});var Igt=s(TX);oZo=r(Igt,"SwinForMaskedImageModeling"),Igt.forEach(t),rZo=r(E9e," (Swin model)"),E9e.forEach(t),tZo=i(PK),zF=n(PK,"LI",{});var C9e=s(zF);hue=n(C9e,"STRONG",{});var qgt=s(hue);aZo=r(qgt,"vit"),qgt.forEach(t),nZo=r(C9e," \u2014 "),MX=n(C9e,"A",{href:!0});var Ngt=s(MX);sZo=r(Ngt,"ViTForMaskedImageModeling"),Ngt.forEach(t),lZo=r(C9e," (ViT model)"),C9e.forEach(t),PK.forEach(t),iZo=i(_a),QF=n(_a,"P",{});var w9e=s(QF);dZo=r(w9e,"The model is set in evaluation mode by default using "),pue=n(w9e,"CODE",{});var jgt=s(pue);cZo=r(jgt,"model.eval()"),jgt.forEach(t),fZo=r(w9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=n(w9e,"CODE",{});var Dgt=s(uue);mZo=r(Dgt,"model.train()"),Dgt.forEach(t),w9e.forEach(t),gZo=i(_a),T(WF.$$.fragment,_a),_a.forEach(t),al.forEach(t),uIe=i(f),wd=n(f,"H2",{class:!0});var TNe=s(wd);HF=n(TNe,"A",{id:!0,class:!0,href:!0});var Ggt=s(HF);_ue=n(Ggt,"SPAN",{});var Ogt=s(_ue);T(n8.$$.fragment,Ogt),Ogt.forEach(t),Ggt.forEach(t),hZo=i(TNe),bue=n(TNe,"SPAN",{});var Vgt=s(bue);pZo=r(Vgt,"AutoModelForObjectDetection"),Vgt.forEach(t),TNe.forEach(t),_Ie=i(f),Wo=n(f,"DIV",{class:!0});var nl=s(Wo);T(s8.$$.fragment,nl),uZo=i(nl),Ad=n(nl,"P",{});var IK=s(Ad);_Zo=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),EX=n(IK,"A",{href:!0});var Xgt=s(EX);bZo=r(Xgt,"from_pretrained()"),Xgt.forEach(t),vZo=r(IK," class method or the "),CX=n(IK,"A",{href:!0});var zgt=s(CX);FZo=r(zgt,"from_config()"),zgt.forEach(t),TZo=r(IK,` class
method.`),IK.forEach(t),MZo=i(nl),l8=n(nl,"P",{});var MNe=s(l8);EZo=r(MNe,"This class cannot be instantiated directly using "),vue=n(MNe,"CODE",{});var Qgt=s(vue);CZo=r(Qgt,"__init__()"),Qgt.forEach(t),wZo=r(MNe," (throws an error)."),MNe.forEach(t),AZo=i(nl),Tt=n(nl,"DIV",{class:!0});var Bw=s(Tt);T(i8.$$.fragment,Bw),yZo=i(Bw),Fue=n(Bw,"P",{});var Wgt=s(Fue);LZo=r(Wgt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Wgt.forEach(t),xZo=i(Bw),yd=n(Bw,"P",{});var qK=s(yd);$Zo=r(qK,`Note:
Loading a model from its configuration file does `),Tue=n(qK,"STRONG",{});var Hgt=s(Tue);kZo=r(Hgt,"not"),Hgt.forEach(t),SZo=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wX=n(qK,"A",{href:!0});var Ugt=s(wX);RZo=r(Ugt,"from_pretrained()"),Ugt.forEach(t),BZo=r(qK," to load the model weights."),qK.forEach(t),PZo=i(Bw),T(UF.$$.fragment,Bw),Bw.forEach(t),IZo=i(nl),po=n(nl,"DIV",{class:!0});var ba=s(po);T(d8.$$.fragment,ba),qZo=i(ba),Mue=n(ba,"P",{});var Jgt=s(Mue);NZo=r(Jgt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Jgt.forEach(t),jZo=i(ba),Wa=n(ba,"P",{});var Pw=s(Wa);DZo=r(Pw,"The model class to instantiate is selected based on the "),Eue=n(Pw,"CODE",{});var Ygt=s(Eue);GZo=r(Ygt,"model_type"),Ygt.forEach(t),OZo=r(Pw,` property of the config object (either
passed as an argument or loaded from `),Cue=n(Pw,"CODE",{});var Kgt=s(Cue);VZo=r(Kgt,"pretrained_model_name_or_path"),Kgt.forEach(t),XZo=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wue=n(Pw,"CODE",{});var Zgt=s(wue);zZo=r(Zgt,"pretrained_model_name_or_path"),Zgt.forEach(t),QZo=r(Pw,":"),Pw.forEach(t),WZo=i(ba),c8=n(ba,"UL",{});var ENe=s(c8);JF=n(ENe,"LI",{});var A9e=s(JF);Aue=n(A9e,"STRONG",{});var eht=s(Aue);HZo=r(eht,"detr"),eht.forEach(t),UZo=r(A9e," \u2014 "),AX=n(A9e,"A",{href:!0});var oht=s(AX);JZo=r(oht,"DetrForObjectDetection"),oht.forEach(t),YZo=r(A9e," (DETR model)"),A9e.forEach(t),KZo=i(ENe),YF=n(ENe,"LI",{});var y9e=s(YF);yue=n(y9e,"STRONG",{});var rht=s(yue);ZZo=r(rht,"yolos"),rht.forEach(t),eer=r(y9e," \u2014 "),yX=n(y9e,"A",{href:!0});var tht=s(yX);oer=r(tht,"YolosForObjectDetection"),tht.forEach(t),rer=r(y9e," (YOLOS model)"),y9e.forEach(t),ENe.forEach(t),ter=i(ba),KF=n(ba,"P",{});var L9e=s(KF);aer=r(L9e,"The model is set in evaluation mode by default using "),Lue=n(L9e,"CODE",{});var aht=s(Lue);ner=r(aht,"model.eval()"),aht.forEach(t),ser=r(L9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=n(L9e,"CODE",{});var nht=s(xue);ler=r(nht,"model.train()"),nht.forEach(t),L9e.forEach(t),ier=i(ba),T(ZF.$$.fragment,ba),ba.forEach(t),nl.forEach(t),bIe=i(f),Ld=n(f,"H2",{class:!0});var CNe=s(Ld);e0=n(CNe,"A",{id:!0,class:!0,href:!0});var sht=s(e0);$ue=n(sht,"SPAN",{});var lht=s($ue);T(f8.$$.fragment,lht),lht.forEach(t),sht.forEach(t),der=i(CNe),kue=n(CNe,"SPAN",{});var iht=s(kue);cer=r(iht,"AutoModelForImageSegmentation"),iht.forEach(t),CNe.forEach(t),vIe=i(f),Ho=n(f,"DIV",{class:!0});var sl=s(Ho);T(m8.$$.fragment,sl),fer=i(sl),xd=n(sl,"P",{});var NK=s(xd);mer=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),LX=n(NK,"A",{href:!0});var dht=s(LX);ger=r(dht,"from_pretrained()"),dht.forEach(t),her=r(NK," class method or the "),xX=n(NK,"A",{href:!0});var cht=s(xX);per=r(cht,"from_config()"),cht.forEach(t),uer=r(NK,` class
method.`),NK.forEach(t),_er=i(sl),g8=n(sl,"P",{});var wNe=s(g8);ber=r(wNe,"This class cannot be instantiated directly using "),Sue=n(wNe,"CODE",{});var fht=s(Sue);ver=r(fht,"__init__()"),fht.forEach(t),Fer=r(wNe," (throws an error)."),wNe.forEach(t),Ter=i(sl),Mt=n(sl,"DIV",{class:!0});var Iw=s(Mt);T(h8.$$.fragment,Iw),Mer=i(Iw),Rue=n(Iw,"P",{});var mht=s(Rue);Eer=r(mht,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),mht.forEach(t),Cer=i(Iw),$d=n(Iw,"P",{});var jK=s($d);wer=r(jK,`Note:
Loading a model from its configuration file does `),Bue=n(jK,"STRONG",{});var ght=s(Bue);Aer=r(ght,"not"),ght.forEach(t),yer=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(jK,"A",{href:!0});var hht=s($X);Ler=r(hht,"from_pretrained()"),hht.forEach(t),xer=r(jK," to load the model weights."),jK.forEach(t),$er=i(Iw),T(o0.$$.fragment,Iw),Iw.forEach(t),ker=i(sl),uo=n(sl,"DIV",{class:!0});var va=s(uo);T(p8.$$.fragment,va),Ser=i(va),Pue=n(va,"P",{});var pht=s(Pue);Rer=r(pht,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),pht.forEach(t),Ber=i(va),Ha=n(va,"P",{});var qw=s(Ha);Per=r(qw,"The model class to instantiate is selected based on the "),Iue=n(qw,"CODE",{});var uht=s(Iue);Ier=r(uht,"model_type"),uht.forEach(t),qer=r(qw,` property of the config object (either
passed as an argument or loaded from `),que=n(qw,"CODE",{});var _ht=s(que);Ner=r(_ht,"pretrained_model_name_or_path"),_ht.forEach(t),jer=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=n(qw,"CODE",{});var bht=s(Nue);Der=r(bht,"pretrained_model_name_or_path"),bht.forEach(t),Ger=r(qw,":"),qw.forEach(t),Oer=i(va),jue=n(va,"UL",{});var vht=s(jue);r0=n(vht,"LI",{});var x9e=s(r0);Due=n(x9e,"STRONG",{});var Fht=s(Due);Ver=r(Fht,"detr"),Fht.forEach(t),Xer=r(x9e," \u2014 "),kX=n(x9e,"A",{href:!0});var Tht=s(kX);zer=r(Tht,"DetrForSegmentation"),Tht.forEach(t),Qer=r(x9e," (DETR model)"),x9e.forEach(t),vht.forEach(t),Wer=i(va),t0=n(va,"P",{});var $9e=s(t0);Her=r($9e,"The model is set in evaluation mode by default using "),Gue=n($9e,"CODE",{});var Mht=s(Gue);Uer=r(Mht,"model.eval()"),Mht.forEach(t),Jer=r($9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=n($9e,"CODE",{});var Eht=s(Oue);Yer=r(Eht,"model.train()"),Eht.forEach(t),$9e.forEach(t),Ker=i(va),T(a0.$$.fragment,va),va.forEach(t),sl.forEach(t),FIe=i(f),kd=n(f,"H2",{class:!0});var ANe=s(kd);n0=n(ANe,"A",{id:!0,class:!0,href:!0});var Cht=s(n0);Vue=n(Cht,"SPAN",{});var wht=s(Vue);T(u8.$$.fragment,wht),wht.forEach(t),Cht.forEach(t),Zer=i(ANe),Xue=n(ANe,"SPAN",{});var Aht=s(Xue);eor=r(Aht,"AutoModelForSemanticSegmentation"),Aht.forEach(t),ANe.forEach(t),TIe=i(f),Uo=n(f,"DIV",{class:!0});var ll=s(Uo);T(_8.$$.fragment,ll),oor=i(ll),Sd=n(ll,"P",{});var DK=s(Sd);ror=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),SX=n(DK,"A",{href:!0});var yht=s(SX);tor=r(yht,"from_pretrained()"),yht.forEach(t),aor=r(DK," class method or the "),RX=n(DK,"A",{href:!0});var Lht=s(RX);nor=r(Lht,"from_config()"),Lht.forEach(t),sor=r(DK,` class
method.`),DK.forEach(t),lor=i(ll),b8=n(ll,"P",{});var yNe=s(b8);ior=r(yNe,"This class cannot be instantiated directly using "),zue=n(yNe,"CODE",{});var xht=s(zue);dor=r(xht,"__init__()"),xht.forEach(t),cor=r(yNe," (throws an error)."),yNe.forEach(t),mor=i(ll),Et=n(ll,"DIV",{class:!0});var Nw=s(Et);T(v8.$$.fragment,Nw),gor=i(Nw),Que=n(Nw,"P",{});var $ht=s(Que);hor=r($ht,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),$ht.forEach(t),por=i(Nw),Rd=n(Nw,"P",{});var GK=s(Rd);uor=r(GK,`Note:
Loading a model from its configuration file does `),Wue=n(GK,"STRONG",{});var kht=s(Wue);_or=r(kht,"not"),kht.forEach(t),bor=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),BX=n(GK,"A",{href:!0});var Sht=s(BX);vor=r(Sht,"from_pretrained()"),Sht.forEach(t),For=r(GK," to load the model weights."),GK.forEach(t),Tor=i(Nw),T(s0.$$.fragment,Nw),Nw.forEach(t),Mor=i(ll),_o=n(ll,"DIV",{class:!0});var Fa=s(_o);T(F8.$$.fragment,Fa),Eor=i(Fa),Hue=n(Fa,"P",{});var Rht=s(Hue);Cor=r(Rht,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Rht.forEach(t),wor=i(Fa),Ua=n(Fa,"P",{});var jw=s(Ua);Aor=r(jw,"The model class to instantiate is selected based on the "),Uue=n(jw,"CODE",{});var Bht=s(Uue);yor=r(Bht,"model_type"),Bht.forEach(t),Lor=r(jw,` property of the config object (either
passed as an argument or loaded from `),Jue=n(jw,"CODE",{});var Pht=s(Jue);xor=r(Pht,"pretrained_model_name_or_path"),Pht.forEach(t),$or=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=n(jw,"CODE",{});var Iht=s(Yue);kor=r(Iht,"pretrained_model_name_or_path"),Iht.forEach(t),Sor=r(jw,":"),jw.forEach(t),Ror=i(Fa),Ja=n(Fa,"UL",{});var Dw=s(Ja);l0=n(Dw,"LI",{});var k9e=s(l0);Kue=n(k9e,"STRONG",{});var qht=s(Kue);Bor=r(qht,"beit"),qht.forEach(t),Por=r(k9e," \u2014 "),PX=n(k9e,"A",{href:!0});var Nht=s(PX);Ior=r(Nht,"BeitForSemanticSegmentation"),Nht.forEach(t),qor=r(k9e," (BEiT model)"),k9e.forEach(t),Nor=i(Dw),i0=n(Dw,"LI",{});var S9e=s(i0);Zue=n(S9e,"STRONG",{});var jht=s(Zue);jor=r(jht,"data2vec-vision"),jht.forEach(t),Dor=r(S9e," \u2014 "),IX=n(S9e,"A",{href:!0});var Dht=s(IX);Gor=r(Dht,"Data2VecVisionForSemanticSegmentation"),Dht.forEach(t),Oor=r(S9e," (Data2VecVision model)"),S9e.forEach(t),Vor=i(Dw),d0=n(Dw,"LI",{});var R9e=s(d0);e_e=n(R9e,"STRONG",{});var Ght=s(e_e);Xor=r(Ght,"dpt"),Ght.forEach(t),zor=r(R9e," \u2014 "),qX=n(R9e,"A",{href:!0});var Oht=s(qX);Qor=r(Oht,"DPTForSemanticSegmentation"),Oht.forEach(t),Wor=r(R9e," (DPT model)"),R9e.forEach(t),Hor=i(Dw),c0=n(Dw,"LI",{});var B9e=s(c0);o_e=n(B9e,"STRONG",{});var Vht=s(o_e);Uor=r(Vht,"segformer"),Vht.forEach(t),Jor=r(B9e," \u2014 "),NX=n(B9e,"A",{href:!0});var Xht=s(NX);Yor=r(Xht,"SegformerForSemanticSegmentation"),Xht.forEach(t),Kor=r(B9e," (SegFormer model)"),B9e.forEach(t),Dw.forEach(t),Zor=i(Fa),f0=n(Fa,"P",{});var P9e=s(f0);err=r(P9e,"The model is set in evaluation mode by default using "),r_e=n(P9e,"CODE",{});var zht=s(r_e);orr=r(zht,"model.eval()"),zht.forEach(t),rrr=r(P9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t_e=n(P9e,"CODE",{});var Qht=s(t_e);trr=r(Qht,"model.train()"),Qht.forEach(t),P9e.forEach(t),arr=i(Fa),T(m0.$$.fragment,Fa),Fa.forEach(t),ll.forEach(t),MIe=i(f),Bd=n(f,"H2",{class:!0});var LNe=s(Bd);g0=n(LNe,"A",{id:!0,class:!0,href:!0});var Wht=s(g0);a_e=n(Wht,"SPAN",{});var Hht=s(a_e);T(T8.$$.fragment,Hht),Hht.forEach(t),Wht.forEach(t),nrr=i(LNe),n_e=n(LNe,"SPAN",{});var Uht=s(n_e);srr=r(Uht,"AutoModelForInstanceSegmentation"),Uht.forEach(t),LNe.forEach(t),EIe=i(f),Jo=n(f,"DIV",{class:!0});var il=s(Jo);T(M8.$$.fragment,il),lrr=i(il),Pd=n(il,"P",{});var OK=s(Pd);irr=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),jX=n(OK,"A",{href:!0});var Jht=s(jX);drr=r(Jht,"from_pretrained()"),Jht.forEach(t),crr=r(OK," class method or the "),DX=n(OK,"A",{href:!0});var Yht=s(DX);frr=r(Yht,"from_config()"),Yht.forEach(t),mrr=r(OK,` class
method.`),OK.forEach(t),grr=i(il),E8=n(il,"P",{});var xNe=s(E8);hrr=r(xNe,"This class cannot be instantiated directly using "),s_e=n(xNe,"CODE",{});var Kht=s(s_e);prr=r(Kht,"__init__()"),Kht.forEach(t),urr=r(xNe," (throws an error)."),xNe.forEach(t),_rr=i(il),Ct=n(il,"DIV",{class:!0});var Gw=s(Ct);T(C8.$$.fragment,Gw),brr=i(Gw),l_e=n(Gw,"P",{});var Zht=s(l_e);vrr=r(Zht,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Zht.forEach(t),Frr=i(Gw),Id=n(Gw,"P",{});var VK=s(Id);Trr=r(VK,`Note:
Loading a model from its configuration file does `),i_e=n(VK,"STRONG",{});var ept=s(i_e);Mrr=r(ept,"not"),ept.forEach(t),Err=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=n(VK,"A",{href:!0});var opt=s(GX);Crr=r(opt,"from_pretrained()"),opt.forEach(t),wrr=r(VK," to load the model weights."),VK.forEach(t),Arr=i(Gw),T(h0.$$.fragment,Gw),Gw.forEach(t),yrr=i(il),bo=n(il,"DIV",{class:!0});var Ta=s(bo);T(w8.$$.fragment,Ta),Lrr=i(Ta),d_e=n(Ta,"P",{});var rpt=s(d_e);xrr=r(rpt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),rpt.forEach(t),$rr=i(Ta),Ya=n(Ta,"P",{});var Ow=s(Ya);krr=r(Ow,"The model class to instantiate is selected based on the "),c_e=n(Ow,"CODE",{});var tpt=s(c_e);Srr=r(tpt,"model_type"),tpt.forEach(t),Rrr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),f_e=n(Ow,"CODE",{});var apt=s(f_e);Brr=r(apt,"pretrained_model_name_or_path"),apt.forEach(t),Prr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=n(Ow,"CODE",{});var npt=s(m_e);Irr=r(npt,"pretrained_model_name_or_path"),npt.forEach(t),qrr=r(Ow,":"),Ow.forEach(t),Nrr=i(Ta),g_e=n(Ta,"UL",{});var spt=s(g_e);p0=n(spt,"LI",{});var I9e=s(p0);h_e=n(I9e,"STRONG",{});var lpt=s(h_e);jrr=r(lpt,"maskformer"),lpt.forEach(t),Drr=r(I9e," \u2014 "),OX=n(I9e,"A",{href:!0});var ipt=s(OX);Grr=r(ipt,"MaskFormerForInstanceSegmentation"),ipt.forEach(t),Orr=r(I9e," (MaskFormer model)"),I9e.forEach(t),spt.forEach(t),Vrr=i(Ta),u0=n(Ta,"P",{});var q9e=s(u0);Xrr=r(q9e,"The model is set in evaluation mode by default using "),p_e=n(q9e,"CODE",{});var dpt=s(p_e);zrr=r(dpt,"model.eval()"),dpt.forEach(t),Qrr=r(q9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u_e=n(q9e,"CODE",{});var cpt=s(u_e);Wrr=r(cpt,"model.train()"),cpt.forEach(t),q9e.forEach(t),Hrr=i(Ta),T(_0.$$.fragment,Ta),Ta.forEach(t),il.forEach(t),CIe=i(f),qd=n(f,"H2",{class:!0});var $Ne=s(qd);b0=n($Ne,"A",{id:!0,class:!0,href:!0});var fpt=s(b0);__e=n(fpt,"SPAN",{});var mpt=s(__e);T(A8.$$.fragment,mpt),mpt.forEach(t),fpt.forEach(t),Urr=i($Ne),b_e=n($Ne,"SPAN",{});var gpt=s(b_e);Jrr=r(gpt,"TFAutoModel"),gpt.forEach(t),$Ne.forEach(t),wIe=i(f),Yo=n(f,"DIV",{class:!0});var dl=s(Yo);T(y8.$$.fragment,dl),Yrr=i(dl),Nd=n(dl,"P",{});var XK=s(Nd);Krr=r(XK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VX=n(XK,"A",{href:!0});var hpt=s(VX);Zrr=r(hpt,"from_pretrained()"),hpt.forEach(t),etr=r(XK," class method or the "),XX=n(XK,"A",{href:!0});var ppt=s(XX);otr=r(ppt,"from_config()"),ppt.forEach(t),rtr=r(XK,` class
method.`),XK.forEach(t),ttr=i(dl),L8=n(dl,"P",{});var kNe=s(L8);atr=r(kNe,"This class cannot be instantiated directly using "),v_e=n(kNe,"CODE",{});var upt=s(v_e);ntr=r(upt,"__init__()"),upt.forEach(t),str=r(kNe," (throws an error)."),kNe.forEach(t),ltr=i(dl),wt=n(dl,"DIV",{class:!0});var Vw=s(wt);T(x8.$$.fragment,Vw),itr=i(Vw),F_e=n(Vw,"P",{});var _pt=s(F_e);dtr=r(_pt,"Instantiates one of the base model classes of the library from a configuration."),_pt.forEach(t),ctr=i(Vw),jd=n(Vw,"P",{});var zK=s(jd);ftr=r(zK,`Note:
Loading a model from its configuration file does `),T_e=n(zK,"STRONG",{});var bpt=s(T_e);mtr=r(bpt,"not"),bpt.forEach(t),gtr=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=n(zK,"A",{href:!0});var vpt=s(zX);htr=r(vpt,"from_pretrained()"),vpt.forEach(t),ptr=r(zK," to load the model weights."),zK.forEach(t),utr=i(Vw),T(v0.$$.fragment,Vw),Vw.forEach(t),_tr=i(dl),wr=n(dl,"DIV",{class:!0});var cl=s(wr);T($8.$$.fragment,cl),btr=i(cl),M_e=n(cl,"P",{});var Fpt=s(M_e);vtr=r(Fpt,"Instantiate one of the base model classes of the library from a pretrained model."),Fpt.forEach(t),Ftr=i(cl),Ka=n(cl,"P",{});var Xw=s(Ka);Ttr=r(Xw,"The model class to instantiate is selected based on the "),E_e=n(Xw,"CODE",{});var Tpt=s(E_e);Mtr=r(Tpt,"model_type"),Tpt.forEach(t),Etr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),C_e=n(Xw,"CODE",{});var Mpt=s(C_e);Ctr=r(Mpt,"pretrained_model_name_or_path"),Mpt.forEach(t),wtr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=n(Xw,"CODE",{});var Ept=s(w_e);Atr=r(Ept,"pretrained_model_name_or_path"),Ept.forEach(t),ytr=r(Xw,":"),Xw.forEach(t),Ltr=i(cl),j=n(cl,"UL",{});var D=s(j);F0=n(D,"LI",{});var N9e=s(F0);A_e=n(N9e,"STRONG",{});var Cpt=s(A_e);xtr=r(Cpt,"albert"),Cpt.forEach(t),$tr=r(N9e," \u2014 "),QX=n(N9e,"A",{href:!0});var wpt=s(QX);ktr=r(wpt,"TFAlbertModel"),wpt.forEach(t),Str=r(N9e," (ALBERT model)"),N9e.forEach(t),Rtr=i(D),T0=n(D,"LI",{});var j9e=s(T0);y_e=n(j9e,"STRONG",{});var Apt=s(y_e);Btr=r(Apt,"bart"),Apt.forEach(t),Ptr=r(j9e," \u2014 "),WX=n(j9e,"A",{href:!0});var ypt=s(WX);Itr=r(ypt,"TFBartModel"),ypt.forEach(t),qtr=r(j9e," (BART model)"),j9e.forEach(t),Ntr=i(D),M0=n(D,"LI",{});var D9e=s(M0);L_e=n(D9e,"STRONG",{});var Lpt=s(L_e);jtr=r(Lpt,"bert"),Lpt.forEach(t),Dtr=r(D9e," \u2014 "),HX=n(D9e,"A",{href:!0});var xpt=s(HX);Gtr=r(xpt,"TFBertModel"),xpt.forEach(t),Otr=r(D9e," (BERT model)"),D9e.forEach(t),Vtr=i(D),E0=n(D,"LI",{});var G9e=s(E0);x_e=n(G9e,"STRONG",{});var $pt=s(x_e);Xtr=r($pt,"blenderbot"),$pt.forEach(t),ztr=r(G9e," \u2014 "),UX=n(G9e,"A",{href:!0});var kpt=s(UX);Qtr=r(kpt,"TFBlenderbotModel"),kpt.forEach(t),Wtr=r(G9e," (Blenderbot model)"),G9e.forEach(t),Htr=i(D),C0=n(D,"LI",{});var O9e=s(C0);$_e=n(O9e,"STRONG",{});var Spt=s($_e);Utr=r(Spt,"blenderbot-small"),Spt.forEach(t),Jtr=r(O9e," \u2014 "),JX=n(O9e,"A",{href:!0});var Rpt=s(JX);Ytr=r(Rpt,"TFBlenderbotSmallModel"),Rpt.forEach(t),Ktr=r(O9e," (BlenderbotSmall model)"),O9e.forEach(t),Ztr=i(D),w0=n(D,"LI",{});var V9e=s(w0);k_e=n(V9e,"STRONG",{});var Bpt=s(k_e);ear=r(Bpt,"camembert"),Bpt.forEach(t),oar=r(V9e," \u2014 "),YX=n(V9e,"A",{href:!0});var Ppt=s(YX);rar=r(Ppt,"TFCamembertModel"),Ppt.forEach(t),tar=r(V9e," (CamemBERT model)"),V9e.forEach(t),aar=i(D),A0=n(D,"LI",{});var X9e=s(A0);S_e=n(X9e,"STRONG",{});var Ipt=s(S_e);nar=r(Ipt,"clip"),Ipt.forEach(t),sar=r(X9e," \u2014 "),KX=n(X9e,"A",{href:!0});var qpt=s(KX);lar=r(qpt,"TFCLIPModel"),qpt.forEach(t),iar=r(X9e," (CLIP model)"),X9e.forEach(t),dar=i(D),y0=n(D,"LI",{});var z9e=s(y0);R_e=n(z9e,"STRONG",{});var Npt=s(R_e);car=r(Npt,"convbert"),Npt.forEach(t),far=r(z9e," \u2014 "),ZX=n(z9e,"A",{href:!0});var jpt=s(ZX);mar=r(jpt,"TFConvBertModel"),jpt.forEach(t),gar=r(z9e," (ConvBERT model)"),z9e.forEach(t),har=i(D),L0=n(D,"LI",{});var Q9e=s(L0);B_e=n(Q9e,"STRONG",{});var Dpt=s(B_e);par=r(Dpt,"convnext"),Dpt.forEach(t),uar=r(Q9e," \u2014 "),ez=n(Q9e,"A",{href:!0});var Gpt=s(ez);_ar=r(Gpt,"TFConvNextModel"),Gpt.forEach(t),bar=r(Q9e," (ConvNext model)"),Q9e.forEach(t),Far=i(D),x0=n(D,"LI",{});var W9e=s(x0);P_e=n(W9e,"STRONG",{});var Opt=s(P_e);Tar=r(Opt,"ctrl"),Opt.forEach(t),Mar=r(W9e," \u2014 "),oz=n(W9e,"A",{href:!0});var Vpt=s(oz);Ear=r(Vpt,"TFCTRLModel"),Vpt.forEach(t),Car=r(W9e," (CTRL model)"),W9e.forEach(t),war=i(D),$0=n(D,"LI",{});var H9e=s($0);I_e=n(H9e,"STRONG",{});var Xpt=s(I_e);Aar=r(Xpt,"data2vec-vision"),Xpt.forEach(t),yar=r(H9e," \u2014 "),rz=n(H9e,"A",{href:!0});var zpt=s(rz);Lar=r(zpt,"TFData2VecVisionModel"),zpt.forEach(t),xar=r(H9e," (Data2VecVision model)"),H9e.forEach(t),$ar=i(D),k0=n(D,"LI",{});var U9e=s(k0);q_e=n(U9e,"STRONG",{});var Qpt=s(q_e);kar=r(Qpt,"deberta"),Qpt.forEach(t),Sar=r(U9e," \u2014 "),tz=n(U9e,"A",{href:!0});var Wpt=s(tz);Rar=r(Wpt,"TFDebertaModel"),Wpt.forEach(t),Bar=r(U9e," (DeBERTa model)"),U9e.forEach(t),Par=i(D),S0=n(D,"LI",{});var J9e=s(S0);N_e=n(J9e,"STRONG",{});var Hpt=s(N_e);Iar=r(Hpt,"deberta-v2"),Hpt.forEach(t),qar=r(J9e," \u2014 "),az=n(J9e,"A",{href:!0});var Upt=s(az);Nar=r(Upt,"TFDebertaV2Model"),Upt.forEach(t),jar=r(J9e," (DeBERTa-v2 model)"),J9e.forEach(t),Dar=i(D),R0=n(D,"LI",{});var Y9e=s(R0);j_e=n(Y9e,"STRONG",{});var Jpt=s(j_e);Gar=r(Jpt,"distilbert"),Jpt.forEach(t),Oar=r(Y9e," \u2014 "),nz=n(Y9e,"A",{href:!0});var Ypt=s(nz);Var=r(Ypt,"TFDistilBertModel"),Ypt.forEach(t),Xar=r(Y9e," (DistilBERT model)"),Y9e.forEach(t),zar=i(D),B0=n(D,"LI",{});var K9e=s(B0);D_e=n(K9e,"STRONG",{});var Kpt=s(D_e);Qar=r(Kpt,"dpr"),Kpt.forEach(t),War=r(K9e," \u2014 "),sz=n(K9e,"A",{href:!0});var Zpt=s(sz);Har=r(Zpt,"TFDPRQuestionEncoder"),Zpt.forEach(t),Uar=r(K9e," (DPR model)"),K9e.forEach(t),Jar=i(D),P0=n(D,"LI",{});var Z9e=s(P0);G_e=n(Z9e,"STRONG",{});var eut=s(G_e);Yar=r(eut,"electra"),eut.forEach(t),Kar=r(Z9e," \u2014 "),lz=n(Z9e,"A",{href:!0});var out=s(lz);Zar=r(out,"TFElectraModel"),out.forEach(t),enr=r(Z9e," (ELECTRA model)"),Z9e.forEach(t),onr=i(D),I0=n(D,"LI",{});var e$e=s(I0);O_e=n(e$e,"STRONG",{});var rut=s(O_e);rnr=r(rut,"flaubert"),rut.forEach(t),tnr=r(e$e," \u2014 "),iz=n(e$e,"A",{href:!0});var tut=s(iz);anr=r(tut,"TFFlaubertModel"),tut.forEach(t),nnr=r(e$e," (FlauBERT model)"),e$e.forEach(t),snr=i(D),Bs=n(D,"LI",{});var l$=s(Bs);V_e=n(l$,"STRONG",{});var aut=s(V_e);lnr=r(aut,"funnel"),aut.forEach(t),inr=r(l$," \u2014 "),dz=n(l$,"A",{href:!0});var nut=s(dz);dnr=r(nut,"TFFunnelModel"),nut.forEach(t),cnr=r(l$," or "),cz=n(l$,"A",{href:!0});var sut=s(cz);fnr=r(sut,"TFFunnelBaseModel"),sut.forEach(t),mnr=r(l$," (Funnel Transformer model)"),l$.forEach(t),gnr=i(D),q0=n(D,"LI",{});var o$e=s(q0);X_e=n(o$e,"STRONG",{});var lut=s(X_e);hnr=r(lut,"gpt2"),lut.forEach(t),pnr=r(o$e," \u2014 "),fz=n(o$e,"A",{href:!0});var iut=s(fz);unr=r(iut,"TFGPT2Model"),iut.forEach(t),_nr=r(o$e," (OpenAI GPT-2 model)"),o$e.forEach(t),bnr=i(D),N0=n(D,"LI",{});var r$e=s(N0);z_e=n(r$e,"STRONG",{});var dut=s(z_e);vnr=r(dut,"gptj"),dut.forEach(t),Fnr=r(r$e," \u2014 "),mz=n(r$e,"A",{href:!0});var cut=s(mz);Tnr=r(cut,"TFGPTJModel"),cut.forEach(t),Mnr=r(r$e," (GPT-J model)"),r$e.forEach(t),Enr=i(D),j0=n(D,"LI",{});var t$e=s(j0);Q_e=n(t$e,"STRONG",{});var fut=s(Q_e);Cnr=r(fut,"hubert"),fut.forEach(t),wnr=r(t$e," \u2014 "),gz=n(t$e,"A",{href:!0});var mut=s(gz);Anr=r(mut,"TFHubertModel"),mut.forEach(t),ynr=r(t$e," (Hubert model)"),t$e.forEach(t),Lnr=i(D),D0=n(D,"LI",{});var a$e=s(D0);W_e=n(a$e,"STRONG",{});var gut=s(W_e);xnr=r(gut,"layoutlm"),gut.forEach(t),$nr=r(a$e," \u2014 "),hz=n(a$e,"A",{href:!0});var hut=s(hz);knr=r(hut,"TFLayoutLMModel"),hut.forEach(t),Snr=r(a$e," (LayoutLM model)"),a$e.forEach(t),Rnr=i(D),G0=n(D,"LI",{});var n$e=s(G0);H_e=n(n$e,"STRONG",{});var put=s(H_e);Bnr=r(put,"led"),put.forEach(t),Pnr=r(n$e," \u2014 "),pz=n(n$e,"A",{href:!0});var uut=s(pz);Inr=r(uut,"TFLEDModel"),uut.forEach(t),qnr=r(n$e," (LED model)"),n$e.forEach(t),Nnr=i(D),O0=n(D,"LI",{});var s$e=s(O0);U_e=n(s$e,"STRONG",{});var _ut=s(U_e);jnr=r(_ut,"longformer"),_ut.forEach(t),Dnr=r(s$e," \u2014 "),uz=n(s$e,"A",{href:!0});var but=s(uz);Gnr=r(but,"TFLongformerModel"),but.forEach(t),Onr=r(s$e," (Longformer model)"),s$e.forEach(t),Vnr=i(D),V0=n(D,"LI",{});var l$e=s(V0);J_e=n(l$e,"STRONG",{});var vut=s(J_e);Xnr=r(vut,"lxmert"),vut.forEach(t),znr=r(l$e," \u2014 "),_z=n(l$e,"A",{href:!0});var Fut=s(_z);Qnr=r(Fut,"TFLxmertModel"),Fut.forEach(t),Wnr=r(l$e," (LXMERT model)"),l$e.forEach(t),Hnr=i(D),X0=n(D,"LI",{});var i$e=s(X0);Y_e=n(i$e,"STRONG",{});var Tut=s(Y_e);Unr=r(Tut,"marian"),Tut.forEach(t),Jnr=r(i$e," \u2014 "),bz=n(i$e,"A",{href:!0});var Mut=s(bz);Ynr=r(Mut,"TFMarianModel"),Mut.forEach(t),Knr=r(i$e," (Marian model)"),i$e.forEach(t),Znr=i(D),z0=n(D,"LI",{});var d$e=s(z0);K_e=n(d$e,"STRONG",{});var Eut=s(K_e);esr=r(Eut,"mbart"),Eut.forEach(t),osr=r(d$e," \u2014 "),vz=n(d$e,"A",{href:!0});var Cut=s(vz);rsr=r(Cut,"TFMBartModel"),Cut.forEach(t),tsr=r(d$e," (mBART model)"),d$e.forEach(t),asr=i(D),Q0=n(D,"LI",{});var c$e=s(Q0);Z_e=n(c$e,"STRONG",{});var wut=s(Z_e);nsr=r(wut,"mobilebert"),wut.forEach(t),ssr=r(c$e," \u2014 "),Fz=n(c$e,"A",{href:!0});var Aut=s(Fz);lsr=r(Aut,"TFMobileBertModel"),Aut.forEach(t),isr=r(c$e," (MobileBERT model)"),c$e.forEach(t),dsr=i(D),W0=n(D,"LI",{});var f$e=s(W0);e2e=n(f$e,"STRONG",{});var yut=s(e2e);csr=r(yut,"mpnet"),yut.forEach(t),fsr=r(f$e," \u2014 "),Tz=n(f$e,"A",{href:!0});var Lut=s(Tz);msr=r(Lut,"TFMPNetModel"),Lut.forEach(t),gsr=r(f$e," (MPNet model)"),f$e.forEach(t),hsr=i(D),H0=n(D,"LI",{});var m$e=s(H0);o2e=n(m$e,"STRONG",{});var xut=s(o2e);psr=r(xut,"mt5"),xut.forEach(t),usr=r(m$e," \u2014 "),Mz=n(m$e,"A",{href:!0});var $ut=s(Mz);_sr=r($ut,"TFMT5Model"),$ut.forEach(t),bsr=r(m$e," (mT5 model)"),m$e.forEach(t),vsr=i(D),U0=n(D,"LI",{});var g$e=s(U0);r2e=n(g$e,"STRONG",{});var kut=s(r2e);Fsr=r(kut,"openai-gpt"),kut.forEach(t),Tsr=r(g$e," \u2014 "),Ez=n(g$e,"A",{href:!0});var Sut=s(Ez);Msr=r(Sut,"TFOpenAIGPTModel"),Sut.forEach(t),Esr=r(g$e," (OpenAI GPT model)"),g$e.forEach(t),Csr=i(D),J0=n(D,"LI",{});var h$e=s(J0);t2e=n(h$e,"STRONG",{});var Rut=s(t2e);wsr=r(Rut,"pegasus"),Rut.forEach(t),Asr=r(h$e," \u2014 "),Cz=n(h$e,"A",{href:!0});var But=s(Cz);ysr=r(But,"TFPegasusModel"),But.forEach(t),Lsr=r(h$e," (Pegasus model)"),h$e.forEach(t),xsr=i(D),Y0=n(D,"LI",{});var p$e=s(Y0);a2e=n(p$e,"STRONG",{});var Put=s(a2e);$sr=r(Put,"rembert"),Put.forEach(t),ksr=r(p$e," \u2014 "),wz=n(p$e,"A",{href:!0});var Iut=s(wz);Ssr=r(Iut,"TFRemBertModel"),Iut.forEach(t),Rsr=r(p$e," (RemBERT model)"),p$e.forEach(t),Bsr=i(D),K0=n(D,"LI",{});var u$e=s(K0);n2e=n(u$e,"STRONG",{});var qut=s(n2e);Psr=r(qut,"roberta"),qut.forEach(t),Isr=r(u$e," \u2014 "),Az=n(u$e,"A",{href:!0});var Nut=s(Az);qsr=r(Nut,"TFRobertaModel"),Nut.forEach(t),Nsr=r(u$e," (RoBERTa model)"),u$e.forEach(t),jsr=i(D),Z0=n(D,"LI",{});var _$e=s(Z0);s2e=n(_$e,"STRONG",{});var jut=s(s2e);Dsr=r(jut,"roformer"),jut.forEach(t),Gsr=r(_$e," \u2014 "),yz=n(_$e,"A",{href:!0});var Dut=s(yz);Osr=r(Dut,"TFRoFormerModel"),Dut.forEach(t),Vsr=r(_$e," (RoFormer model)"),_$e.forEach(t),Xsr=i(D),e6=n(D,"LI",{});var b$e=s(e6);l2e=n(b$e,"STRONG",{});var Gut=s(l2e);zsr=r(Gut,"speech_to_text"),Gut.forEach(t),Qsr=r(b$e," \u2014 "),Lz=n(b$e,"A",{href:!0});var Out=s(Lz);Wsr=r(Out,"TFSpeech2TextModel"),Out.forEach(t),Hsr=r(b$e," (Speech2Text model)"),b$e.forEach(t),Usr=i(D),o6=n(D,"LI",{});var v$e=s(o6);i2e=n(v$e,"STRONG",{});var Vut=s(i2e);Jsr=r(Vut,"t5"),Vut.forEach(t),Ysr=r(v$e," \u2014 "),xz=n(v$e,"A",{href:!0});var Xut=s(xz);Ksr=r(Xut,"TFT5Model"),Xut.forEach(t),Zsr=r(v$e," (T5 model)"),v$e.forEach(t),elr=i(D),r6=n(D,"LI",{});var F$e=s(r6);d2e=n(F$e,"STRONG",{});var zut=s(d2e);olr=r(zut,"tapas"),zut.forEach(t),rlr=r(F$e," \u2014 "),$z=n(F$e,"A",{href:!0});var Qut=s($z);tlr=r(Qut,"TFTapasModel"),Qut.forEach(t),alr=r(F$e," (TAPAS model)"),F$e.forEach(t),nlr=i(D),t6=n(D,"LI",{});var T$e=s(t6);c2e=n(T$e,"STRONG",{});var Wut=s(c2e);slr=r(Wut,"transfo-xl"),Wut.forEach(t),llr=r(T$e," \u2014 "),kz=n(T$e,"A",{href:!0});var Hut=s(kz);ilr=r(Hut,"TFTransfoXLModel"),Hut.forEach(t),dlr=r(T$e," (Transformer-XL model)"),T$e.forEach(t),clr=i(D),a6=n(D,"LI",{});var M$e=s(a6);f2e=n(M$e,"STRONG",{});var Uut=s(f2e);flr=r(Uut,"vit"),Uut.forEach(t),mlr=r(M$e," \u2014 "),Sz=n(M$e,"A",{href:!0});var Jut=s(Sz);glr=r(Jut,"TFViTModel"),Jut.forEach(t),hlr=r(M$e," (ViT model)"),M$e.forEach(t),plr=i(D),n6=n(D,"LI",{});var E$e=s(n6);m2e=n(E$e,"STRONG",{});var Yut=s(m2e);ulr=r(Yut,"vit_mae"),Yut.forEach(t),_lr=r(E$e," \u2014 "),Rz=n(E$e,"A",{href:!0});var Kut=s(Rz);blr=r(Kut,"TFViTMAEModel"),Kut.forEach(t),vlr=r(E$e," (ViTMAE model)"),E$e.forEach(t),Flr=i(D),s6=n(D,"LI",{});var C$e=s(s6);g2e=n(C$e,"STRONG",{});var Zut=s(g2e);Tlr=r(Zut,"wav2vec2"),Zut.forEach(t),Mlr=r(C$e," \u2014 "),Bz=n(C$e,"A",{href:!0});var e_t=s(Bz);Elr=r(e_t,"TFWav2Vec2Model"),e_t.forEach(t),Clr=r(C$e," (Wav2Vec2 model)"),C$e.forEach(t),wlr=i(D),l6=n(D,"LI",{});var w$e=s(l6);h2e=n(w$e,"STRONG",{});var o_t=s(h2e);Alr=r(o_t,"xlm"),o_t.forEach(t),ylr=r(w$e," \u2014 "),Pz=n(w$e,"A",{href:!0});var r_t=s(Pz);Llr=r(r_t,"TFXLMModel"),r_t.forEach(t),xlr=r(w$e," (XLM model)"),w$e.forEach(t),$lr=i(D),i6=n(D,"LI",{});var A$e=s(i6);p2e=n(A$e,"STRONG",{});var t_t=s(p2e);klr=r(t_t,"xlm-roberta"),t_t.forEach(t),Slr=r(A$e," \u2014 "),Iz=n(A$e,"A",{href:!0});var a_t=s(Iz);Rlr=r(a_t,"TFXLMRobertaModel"),a_t.forEach(t),Blr=r(A$e," (XLM-RoBERTa model)"),A$e.forEach(t),Plr=i(D),d6=n(D,"LI",{});var y$e=s(d6);u2e=n(y$e,"STRONG",{});var n_t=s(u2e);Ilr=r(n_t,"xlnet"),n_t.forEach(t),qlr=r(y$e," \u2014 "),qz=n(y$e,"A",{href:!0});var s_t=s(qz);Nlr=r(s_t,"TFXLNetModel"),s_t.forEach(t),jlr=r(y$e," (XLNet model)"),y$e.forEach(t),D.forEach(t),Dlr=i(cl),T(c6.$$.fragment,cl),cl.forEach(t),dl.forEach(t),AIe=i(f),Dd=n(f,"H2",{class:!0});var SNe=s(Dd);f6=n(SNe,"A",{id:!0,class:!0,href:!0});var l_t=s(f6);_2e=n(l_t,"SPAN",{});var i_t=s(_2e);T(k8.$$.fragment,i_t),i_t.forEach(t),l_t.forEach(t),Glr=i(SNe),b2e=n(SNe,"SPAN",{});var d_t=s(b2e);Olr=r(d_t,"TFAutoModelForPreTraining"),d_t.forEach(t),SNe.forEach(t),yIe=i(f),Ko=n(f,"DIV",{class:!0});var fl=s(Ko);T(S8.$$.fragment,fl),Vlr=i(fl),Gd=n(fl,"P",{});var QK=s(Gd);Xlr=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Nz=n(QK,"A",{href:!0});var c_t=s(Nz);zlr=r(c_t,"from_pretrained()"),c_t.forEach(t),Qlr=r(QK," class method or the "),jz=n(QK,"A",{href:!0});var f_t=s(jz);Wlr=r(f_t,"from_config()"),f_t.forEach(t),Hlr=r(QK,` class
method.`),QK.forEach(t),Ulr=i(fl),R8=n(fl,"P",{});var RNe=s(R8);Jlr=r(RNe,"This class cannot be instantiated directly using "),v2e=n(RNe,"CODE",{});var m_t=s(v2e);Ylr=r(m_t,"__init__()"),m_t.forEach(t),Klr=r(RNe," (throws an error)."),RNe.forEach(t),Zlr=i(fl),At=n(fl,"DIV",{class:!0});var zw=s(At);T(B8.$$.fragment,zw),eir=i(zw),F2e=n(zw,"P",{});var g_t=s(F2e);oir=r(g_t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),g_t.forEach(t),rir=i(zw),Od=n(zw,"P",{});var WK=s(Od);tir=r(WK,`Note:
Loading a model from its configuration file does `),T2e=n(WK,"STRONG",{});var h_t=s(T2e);air=r(h_t,"not"),h_t.forEach(t),nir=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=n(WK,"A",{href:!0});var p_t=s(Dz);sir=r(p_t,"from_pretrained()"),p_t.forEach(t),lir=r(WK," to load the model weights."),WK.forEach(t),iir=i(zw),T(m6.$$.fragment,zw),zw.forEach(t),dir=i(fl),Ar=n(fl,"DIV",{class:!0});var ml=s(Ar);T(P8.$$.fragment,ml),cir=i(ml),M2e=n(ml,"P",{});var u_t=s(M2e);fir=r(u_t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),u_t.forEach(t),mir=i(ml),Za=n(ml,"P",{});var Qw=s(Za);gir=r(Qw,"The model class to instantiate is selected based on the "),E2e=n(Qw,"CODE",{});var __t=s(E2e);hir=r(__t,"model_type"),__t.forEach(t),pir=r(Qw,` property of the config object (either
passed as an argument or loaded from `),C2e=n(Qw,"CODE",{});var b_t=s(C2e);uir=r(b_t,"pretrained_model_name_or_path"),b_t.forEach(t),_ir=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=n(Qw,"CODE",{});var v_t=s(w2e);bir=r(v_t,"pretrained_model_name_or_path"),v_t.forEach(t),vir=r(Qw,":"),Qw.forEach(t),Fir=i(ml),se=n(ml,"UL",{});var le=s(se);g6=n(le,"LI",{});var L$e=s(g6);A2e=n(L$e,"STRONG",{});var F_t=s(A2e);Tir=r(F_t,"albert"),F_t.forEach(t),Mir=r(L$e," \u2014 "),Gz=n(L$e,"A",{href:!0});var T_t=s(Gz);Eir=r(T_t,"TFAlbertForPreTraining"),T_t.forEach(t),Cir=r(L$e," (ALBERT model)"),L$e.forEach(t),wir=i(le),h6=n(le,"LI",{});var x$e=s(h6);y2e=n(x$e,"STRONG",{});var M_t=s(y2e);Air=r(M_t,"bart"),M_t.forEach(t),yir=r(x$e," \u2014 "),Oz=n(x$e,"A",{href:!0});var E_t=s(Oz);Lir=r(E_t,"TFBartForConditionalGeneration"),E_t.forEach(t),xir=r(x$e," (BART model)"),x$e.forEach(t),$ir=i(le),p6=n(le,"LI",{});var $$e=s(p6);L2e=n($$e,"STRONG",{});var C_t=s(L2e);kir=r(C_t,"bert"),C_t.forEach(t),Sir=r($$e," \u2014 "),Vz=n($$e,"A",{href:!0});var w_t=s(Vz);Rir=r(w_t,"TFBertForPreTraining"),w_t.forEach(t),Bir=r($$e," (BERT model)"),$$e.forEach(t),Pir=i(le),u6=n(le,"LI",{});var k$e=s(u6);x2e=n(k$e,"STRONG",{});var A_t=s(x2e);Iir=r(A_t,"camembert"),A_t.forEach(t),qir=r(k$e," \u2014 "),Xz=n(k$e,"A",{href:!0});var y_t=s(Xz);Nir=r(y_t,"TFCamembertForMaskedLM"),y_t.forEach(t),jir=r(k$e," (CamemBERT model)"),k$e.forEach(t),Dir=i(le),_6=n(le,"LI",{});var S$e=s(_6);$2e=n(S$e,"STRONG",{});var L_t=s($2e);Gir=r(L_t,"ctrl"),L_t.forEach(t),Oir=r(S$e," \u2014 "),zz=n(S$e,"A",{href:!0});var x_t=s(zz);Vir=r(x_t,"TFCTRLLMHeadModel"),x_t.forEach(t),Xir=r(S$e," (CTRL model)"),S$e.forEach(t),zir=i(le),b6=n(le,"LI",{});var R$e=s(b6);k2e=n(R$e,"STRONG",{});var $_t=s(k2e);Qir=r($_t,"distilbert"),$_t.forEach(t),Wir=r(R$e," \u2014 "),Qz=n(R$e,"A",{href:!0});var k_t=s(Qz);Hir=r(k_t,"TFDistilBertForMaskedLM"),k_t.forEach(t),Uir=r(R$e," (DistilBERT model)"),R$e.forEach(t),Jir=i(le),v6=n(le,"LI",{});var B$e=s(v6);S2e=n(B$e,"STRONG",{});var S_t=s(S2e);Yir=r(S_t,"electra"),S_t.forEach(t),Kir=r(B$e," \u2014 "),Wz=n(B$e,"A",{href:!0});var R_t=s(Wz);Zir=r(R_t,"TFElectraForPreTraining"),R_t.forEach(t),edr=r(B$e," (ELECTRA model)"),B$e.forEach(t),odr=i(le),F6=n(le,"LI",{});var P$e=s(F6);R2e=n(P$e,"STRONG",{});var B_t=s(R2e);rdr=r(B_t,"flaubert"),B_t.forEach(t),tdr=r(P$e," \u2014 "),Hz=n(P$e,"A",{href:!0});var P_t=s(Hz);adr=r(P_t,"TFFlaubertWithLMHeadModel"),P_t.forEach(t),ndr=r(P$e," (FlauBERT model)"),P$e.forEach(t),sdr=i(le),T6=n(le,"LI",{});var I$e=s(T6);B2e=n(I$e,"STRONG",{});var I_t=s(B2e);ldr=r(I_t,"funnel"),I_t.forEach(t),idr=r(I$e," \u2014 "),Uz=n(I$e,"A",{href:!0});var q_t=s(Uz);ddr=r(q_t,"TFFunnelForPreTraining"),q_t.forEach(t),cdr=r(I$e," (Funnel Transformer model)"),I$e.forEach(t),fdr=i(le),M6=n(le,"LI",{});var q$e=s(M6);P2e=n(q$e,"STRONG",{});var N_t=s(P2e);mdr=r(N_t,"gpt2"),N_t.forEach(t),gdr=r(q$e," \u2014 "),Jz=n(q$e,"A",{href:!0});var j_t=s(Jz);hdr=r(j_t,"TFGPT2LMHeadModel"),j_t.forEach(t),pdr=r(q$e," (OpenAI GPT-2 model)"),q$e.forEach(t),udr=i(le),E6=n(le,"LI",{});var N$e=s(E6);I2e=n(N$e,"STRONG",{});var D_t=s(I2e);_dr=r(D_t,"layoutlm"),D_t.forEach(t),bdr=r(N$e," \u2014 "),Yz=n(N$e,"A",{href:!0});var G_t=s(Yz);vdr=r(G_t,"TFLayoutLMForMaskedLM"),G_t.forEach(t),Fdr=r(N$e," (LayoutLM model)"),N$e.forEach(t),Tdr=i(le),C6=n(le,"LI",{});var j$e=s(C6);q2e=n(j$e,"STRONG",{});var O_t=s(q2e);Mdr=r(O_t,"lxmert"),O_t.forEach(t),Edr=r(j$e," \u2014 "),Kz=n(j$e,"A",{href:!0});var V_t=s(Kz);Cdr=r(V_t,"TFLxmertForPreTraining"),V_t.forEach(t),wdr=r(j$e," (LXMERT model)"),j$e.forEach(t),Adr=i(le),w6=n(le,"LI",{});var D$e=s(w6);N2e=n(D$e,"STRONG",{});var X_t=s(N2e);ydr=r(X_t,"mobilebert"),X_t.forEach(t),Ldr=r(D$e," \u2014 "),Zz=n(D$e,"A",{href:!0});var z_t=s(Zz);xdr=r(z_t,"TFMobileBertForPreTraining"),z_t.forEach(t),$dr=r(D$e," (MobileBERT model)"),D$e.forEach(t),kdr=i(le),A6=n(le,"LI",{});var G$e=s(A6);j2e=n(G$e,"STRONG",{});var Q_t=s(j2e);Sdr=r(Q_t,"mpnet"),Q_t.forEach(t),Rdr=r(G$e," \u2014 "),eQ=n(G$e,"A",{href:!0});var W_t=s(eQ);Bdr=r(W_t,"TFMPNetForMaskedLM"),W_t.forEach(t),Pdr=r(G$e," (MPNet model)"),G$e.forEach(t),Idr=i(le),y6=n(le,"LI",{});var O$e=s(y6);D2e=n(O$e,"STRONG",{});var H_t=s(D2e);qdr=r(H_t,"openai-gpt"),H_t.forEach(t),Ndr=r(O$e," \u2014 "),oQ=n(O$e,"A",{href:!0});var U_t=s(oQ);jdr=r(U_t,"TFOpenAIGPTLMHeadModel"),U_t.forEach(t),Ddr=r(O$e," (OpenAI GPT model)"),O$e.forEach(t),Gdr=i(le),L6=n(le,"LI",{});var V$e=s(L6);G2e=n(V$e,"STRONG",{});var J_t=s(G2e);Odr=r(J_t,"roberta"),J_t.forEach(t),Vdr=r(V$e," \u2014 "),rQ=n(V$e,"A",{href:!0});var Y_t=s(rQ);Xdr=r(Y_t,"TFRobertaForMaskedLM"),Y_t.forEach(t),zdr=r(V$e," (RoBERTa model)"),V$e.forEach(t),Qdr=i(le),x6=n(le,"LI",{});var X$e=s(x6);O2e=n(X$e,"STRONG",{});var K_t=s(O2e);Wdr=r(K_t,"t5"),K_t.forEach(t),Hdr=r(X$e," \u2014 "),tQ=n(X$e,"A",{href:!0});var Z_t=s(tQ);Udr=r(Z_t,"TFT5ForConditionalGeneration"),Z_t.forEach(t),Jdr=r(X$e," (T5 model)"),X$e.forEach(t),Ydr=i(le),$6=n(le,"LI",{});var z$e=s($6);V2e=n(z$e,"STRONG",{});var e2t=s(V2e);Kdr=r(e2t,"tapas"),e2t.forEach(t),Zdr=r(z$e," \u2014 "),aQ=n(z$e,"A",{href:!0});var o2t=s(aQ);ecr=r(o2t,"TFTapasForMaskedLM"),o2t.forEach(t),ocr=r(z$e," (TAPAS model)"),z$e.forEach(t),rcr=i(le),k6=n(le,"LI",{});var Q$e=s(k6);X2e=n(Q$e,"STRONG",{});var r2t=s(X2e);tcr=r(r2t,"transfo-xl"),r2t.forEach(t),acr=r(Q$e," \u2014 "),nQ=n(Q$e,"A",{href:!0});var t2t=s(nQ);ncr=r(t2t,"TFTransfoXLLMHeadModel"),t2t.forEach(t),scr=r(Q$e," (Transformer-XL model)"),Q$e.forEach(t),lcr=i(le),S6=n(le,"LI",{});var W$e=s(S6);z2e=n(W$e,"STRONG",{});var a2t=s(z2e);icr=r(a2t,"vit_mae"),a2t.forEach(t),dcr=r(W$e," \u2014 "),sQ=n(W$e,"A",{href:!0});var n2t=s(sQ);ccr=r(n2t,"TFViTMAEForPreTraining"),n2t.forEach(t),fcr=r(W$e," (ViTMAE model)"),W$e.forEach(t),mcr=i(le),R6=n(le,"LI",{});var H$e=s(R6);Q2e=n(H$e,"STRONG",{});var s2t=s(Q2e);gcr=r(s2t,"xlm"),s2t.forEach(t),hcr=r(H$e," \u2014 "),lQ=n(H$e,"A",{href:!0});var l2t=s(lQ);pcr=r(l2t,"TFXLMWithLMHeadModel"),l2t.forEach(t),ucr=r(H$e," (XLM model)"),H$e.forEach(t),_cr=i(le),B6=n(le,"LI",{});var U$e=s(B6);W2e=n(U$e,"STRONG",{});var i2t=s(W2e);bcr=r(i2t,"xlm-roberta"),i2t.forEach(t),vcr=r(U$e," \u2014 "),iQ=n(U$e,"A",{href:!0});var d2t=s(iQ);Fcr=r(d2t,"TFXLMRobertaForMaskedLM"),d2t.forEach(t),Tcr=r(U$e," (XLM-RoBERTa model)"),U$e.forEach(t),Mcr=i(le),P6=n(le,"LI",{});var J$e=s(P6);H2e=n(J$e,"STRONG",{});var c2t=s(H2e);Ecr=r(c2t,"xlnet"),c2t.forEach(t),Ccr=r(J$e," \u2014 "),dQ=n(J$e,"A",{href:!0});var f2t=s(dQ);wcr=r(f2t,"TFXLNetLMHeadModel"),f2t.forEach(t),Acr=r(J$e," (XLNet model)"),J$e.forEach(t),le.forEach(t),ycr=i(ml),T(I6.$$.fragment,ml),ml.forEach(t),fl.forEach(t),LIe=i(f),Vd=n(f,"H2",{class:!0});var BNe=s(Vd);q6=n(BNe,"A",{id:!0,class:!0,href:!0});var m2t=s(q6);U2e=n(m2t,"SPAN",{});var g2t=s(U2e);T(I8.$$.fragment,g2t),g2t.forEach(t),m2t.forEach(t),Lcr=i(BNe),J2e=n(BNe,"SPAN",{});var h2t=s(J2e);xcr=r(h2t,"TFAutoModelForCausalLM"),h2t.forEach(t),BNe.forEach(t),xIe=i(f),Zo=n(f,"DIV",{class:!0});var gl=s(Zo);T(q8.$$.fragment,gl),$cr=i(gl),Xd=n(gl,"P",{});var HK=s(Xd);kcr=r(HK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),cQ=n(HK,"A",{href:!0});var p2t=s(cQ);Scr=r(p2t,"from_pretrained()"),p2t.forEach(t),Rcr=r(HK," class method or the "),fQ=n(HK,"A",{href:!0});var u2t=s(fQ);Bcr=r(u2t,"from_config()"),u2t.forEach(t),Pcr=r(HK,` class
method.`),HK.forEach(t),Icr=i(gl),N8=n(gl,"P",{});var PNe=s(N8);qcr=r(PNe,"This class cannot be instantiated directly using "),Y2e=n(PNe,"CODE",{});var _2t=s(Y2e);Ncr=r(_2t,"__init__()"),_2t.forEach(t),jcr=r(PNe," (throws an error)."),PNe.forEach(t),Dcr=i(gl),yt=n(gl,"DIV",{class:!0});var Ww=s(yt);T(j8.$$.fragment,Ww),Gcr=i(Ww),K2e=n(Ww,"P",{});var b2t=s(K2e);Ocr=r(b2t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),b2t.forEach(t),Vcr=i(Ww),zd=n(Ww,"P",{});var UK=s(zd);Xcr=r(UK,`Note:
Loading a model from its configuration file does `),Z2e=n(UK,"STRONG",{});var v2t=s(Z2e);zcr=r(v2t,"not"),v2t.forEach(t),Qcr=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mQ=n(UK,"A",{href:!0});var F2t=s(mQ);Wcr=r(F2t,"from_pretrained()"),F2t.forEach(t),Hcr=r(UK," to load the model weights."),UK.forEach(t),Ucr=i(Ww),T(N6.$$.fragment,Ww),Ww.forEach(t),Jcr=i(gl),yr=n(gl,"DIV",{class:!0});var hl=s(yr);T(D8.$$.fragment,hl),Ycr=i(hl),e1e=n(hl,"P",{});var T2t=s(e1e);Kcr=r(T2t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),T2t.forEach(t),Zcr=i(hl),en=n(hl,"P",{});var Hw=s(en);efr=r(Hw,"The model class to instantiate is selected based on the "),o1e=n(Hw,"CODE",{});var M2t=s(o1e);ofr=r(M2t,"model_type"),M2t.forEach(t),rfr=r(Hw,` property of the config object (either
passed as an argument or loaded from `),r1e=n(Hw,"CODE",{});var E2t=s(r1e);tfr=r(E2t,"pretrained_model_name_or_path"),E2t.forEach(t),afr=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=n(Hw,"CODE",{});var C2t=s(t1e);nfr=r(C2t,"pretrained_model_name_or_path"),C2t.forEach(t),sfr=r(Hw,":"),Hw.forEach(t),lfr=i(hl),Te=n(hl,"UL",{});var Ce=s(Te);j6=n(Ce,"LI",{});var Y$e=s(j6);a1e=n(Y$e,"STRONG",{});var w2t=s(a1e);ifr=r(w2t,"bert"),w2t.forEach(t),dfr=r(Y$e," \u2014 "),gQ=n(Y$e,"A",{href:!0});var A2t=s(gQ);cfr=r(A2t,"TFBertLMHeadModel"),A2t.forEach(t),ffr=r(Y$e," (BERT model)"),Y$e.forEach(t),mfr=i(Ce),D6=n(Ce,"LI",{});var K$e=s(D6);n1e=n(K$e,"STRONG",{});var y2t=s(n1e);gfr=r(y2t,"camembert"),y2t.forEach(t),hfr=r(K$e," \u2014 "),hQ=n(K$e,"A",{href:!0});var L2t=s(hQ);pfr=r(L2t,"TFCamembertForCausalLM"),L2t.forEach(t),ufr=r(K$e," (CamemBERT model)"),K$e.forEach(t),_fr=i(Ce),G6=n(Ce,"LI",{});var Z$e=s(G6);s1e=n(Z$e,"STRONG",{});var x2t=s(s1e);bfr=r(x2t,"ctrl"),x2t.forEach(t),vfr=r(Z$e," \u2014 "),pQ=n(Z$e,"A",{href:!0});var $2t=s(pQ);Ffr=r($2t,"TFCTRLLMHeadModel"),$2t.forEach(t),Tfr=r(Z$e," (CTRL model)"),Z$e.forEach(t),Mfr=i(Ce),O6=n(Ce,"LI",{});var eke=s(O6);l1e=n(eke,"STRONG",{});var k2t=s(l1e);Efr=r(k2t,"gpt2"),k2t.forEach(t),Cfr=r(eke," \u2014 "),uQ=n(eke,"A",{href:!0});var S2t=s(uQ);wfr=r(S2t,"TFGPT2LMHeadModel"),S2t.forEach(t),Afr=r(eke," (OpenAI GPT-2 model)"),eke.forEach(t),yfr=i(Ce),V6=n(Ce,"LI",{});var oke=s(V6);i1e=n(oke,"STRONG",{});var R2t=s(i1e);Lfr=r(R2t,"gptj"),R2t.forEach(t),xfr=r(oke," \u2014 "),_Q=n(oke,"A",{href:!0});var B2t=s(_Q);$fr=r(B2t,"TFGPTJForCausalLM"),B2t.forEach(t),kfr=r(oke," (GPT-J model)"),oke.forEach(t),Sfr=i(Ce),X6=n(Ce,"LI",{});var rke=s(X6);d1e=n(rke,"STRONG",{});var P2t=s(d1e);Rfr=r(P2t,"openai-gpt"),P2t.forEach(t),Bfr=r(rke," \u2014 "),bQ=n(rke,"A",{href:!0});var I2t=s(bQ);Pfr=r(I2t,"TFOpenAIGPTLMHeadModel"),I2t.forEach(t),Ifr=r(rke," (OpenAI GPT model)"),rke.forEach(t),qfr=i(Ce),z6=n(Ce,"LI",{});var tke=s(z6);c1e=n(tke,"STRONG",{});var q2t=s(c1e);Nfr=r(q2t,"rembert"),q2t.forEach(t),jfr=r(tke," \u2014 "),vQ=n(tke,"A",{href:!0});var N2t=s(vQ);Dfr=r(N2t,"TFRemBertForCausalLM"),N2t.forEach(t),Gfr=r(tke," (RemBERT model)"),tke.forEach(t),Ofr=i(Ce),Q6=n(Ce,"LI",{});var ake=s(Q6);f1e=n(ake,"STRONG",{});var j2t=s(f1e);Vfr=r(j2t,"roberta"),j2t.forEach(t),Xfr=r(ake," \u2014 "),FQ=n(ake,"A",{href:!0});var D2t=s(FQ);zfr=r(D2t,"TFRobertaForCausalLM"),D2t.forEach(t),Qfr=r(ake," (RoBERTa model)"),ake.forEach(t),Wfr=i(Ce),W6=n(Ce,"LI",{});var nke=s(W6);m1e=n(nke,"STRONG",{});var G2t=s(m1e);Hfr=r(G2t,"roformer"),G2t.forEach(t),Ufr=r(nke," \u2014 "),TQ=n(nke,"A",{href:!0});var O2t=s(TQ);Jfr=r(O2t,"TFRoFormerForCausalLM"),O2t.forEach(t),Yfr=r(nke," (RoFormer model)"),nke.forEach(t),Kfr=i(Ce),H6=n(Ce,"LI",{});var ske=s(H6);g1e=n(ske,"STRONG",{});var V2t=s(g1e);Zfr=r(V2t,"transfo-xl"),V2t.forEach(t),emr=r(ske," \u2014 "),MQ=n(ske,"A",{href:!0});var X2t=s(MQ);omr=r(X2t,"TFTransfoXLLMHeadModel"),X2t.forEach(t),rmr=r(ske," (Transformer-XL model)"),ske.forEach(t),tmr=i(Ce),U6=n(Ce,"LI",{});var lke=s(U6);h1e=n(lke,"STRONG",{});var z2t=s(h1e);amr=r(z2t,"xlm"),z2t.forEach(t),nmr=r(lke," \u2014 "),EQ=n(lke,"A",{href:!0});var Q2t=s(EQ);smr=r(Q2t,"TFXLMWithLMHeadModel"),Q2t.forEach(t),lmr=r(lke," (XLM model)"),lke.forEach(t),imr=i(Ce),J6=n(Ce,"LI",{});var ike=s(J6);p1e=n(ike,"STRONG",{});var W2t=s(p1e);dmr=r(W2t,"xlnet"),W2t.forEach(t),cmr=r(ike," \u2014 "),CQ=n(ike,"A",{href:!0});var H2t=s(CQ);fmr=r(H2t,"TFXLNetLMHeadModel"),H2t.forEach(t),mmr=r(ike," (XLNet model)"),ike.forEach(t),Ce.forEach(t),gmr=i(hl),T(Y6.$$.fragment,hl),hl.forEach(t),gl.forEach(t),$Ie=i(f),Qd=n(f,"H2",{class:!0});var INe=s(Qd);K6=n(INe,"A",{id:!0,class:!0,href:!0});var U2t=s(K6);u1e=n(U2t,"SPAN",{});var J2t=s(u1e);T(G8.$$.fragment,J2t),J2t.forEach(t),U2t.forEach(t),hmr=i(INe),_1e=n(INe,"SPAN",{});var Y2t=s(_1e);pmr=r(Y2t,"TFAutoModelForImageClassification"),Y2t.forEach(t),INe.forEach(t),kIe=i(f),er=n(f,"DIV",{class:!0});var pl=s(er);T(O8.$$.fragment,pl),umr=i(pl),Wd=n(pl,"P",{});var JK=s(Wd);_mr=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wQ=n(JK,"A",{href:!0});var K2t=s(wQ);bmr=r(K2t,"from_pretrained()"),K2t.forEach(t),vmr=r(JK," class method or the "),AQ=n(JK,"A",{href:!0});var Z2t=s(AQ);Fmr=r(Z2t,"from_config()"),Z2t.forEach(t),Tmr=r(JK,` class
method.`),JK.forEach(t),Mmr=i(pl),V8=n(pl,"P",{});var qNe=s(V8);Emr=r(qNe,"This class cannot be instantiated directly using "),b1e=n(qNe,"CODE",{});var e1t=s(b1e);Cmr=r(e1t,"__init__()"),e1t.forEach(t),wmr=r(qNe," (throws an error)."),qNe.forEach(t),Amr=i(pl),Lt=n(pl,"DIV",{class:!0});var Uw=s(Lt);T(X8.$$.fragment,Uw),ymr=i(Uw),v1e=n(Uw,"P",{});var o1t=s(v1e);Lmr=r(o1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),o1t.forEach(t),xmr=i(Uw),Hd=n(Uw,"P",{});var YK=s(Hd);$mr=r(YK,`Note:
Loading a model from its configuration file does `),F1e=n(YK,"STRONG",{});var r1t=s(F1e);kmr=r(r1t,"not"),r1t.forEach(t),Smr=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(YK,"A",{href:!0});var t1t=s(yQ);Rmr=r(t1t,"from_pretrained()"),t1t.forEach(t),Bmr=r(YK," to load the model weights."),YK.forEach(t),Pmr=i(Uw),T(Z6.$$.fragment,Uw),Uw.forEach(t),Imr=i(pl),Lr=n(pl,"DIV",{class:!0});var ul=s(Lr);T(z8.$$.fragment,ul),qmr=i(ul),T1e=n(ul,"P",{});var a1t=s(T1e);Nmr=r(a1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),a1t.forEach(t),jmr=i(ul),on=n(ul,"P",{});var Jw=s(on);Dmr=r(Jw,"The model class to instantiate is selected based on the "),M1e=n(Jw,"CODE",{});var n1t=s(M1e);Gmr=r(n1t,"model_type"),n1t.forEach(t),Omr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),E1e=n(Jw,"CODE",{});var s1t=s(E1e);Vmr=r(s1t,"pretrained_model_name_or_path"),s1t.forEach(t),Xmr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=n(Jw,"CODE",{});var l1t=s(C1e);zmr=r(l1t,"pretrained_model_name_or_path"),l1t.forEach(t),Qmr=r(Jw,":"),Jw.forEach(t),Wmr=i(ul),Ud=n(ul,"UL",{});var KK=s(Ud);eT=n(KK,"LI",{});var dke=s(eT);w1e=n(dke,"STRONG",{});var i1t=s(w1e);Hmr=r(i1t,"convnext"),i1t.forEach(t),Umr=r(dke," \u2014 "),LQ=n(dke,"A",{href:!0});var d1t=s(LQ);Jmr=r(d1t,"TFConvNextForImageClassification"),d1t.forEach(t),Ymr=r(dke," (ConvNext model)"),dke.forEach(t),Kmr=i(KK),oT=n(KK,"LI",{});var cke=s(oT);A1e=n(cke,"STRONG",{});var c1t=s(A1e);Zmr=r(c1t,"data2vec-vision"),c1t.forEach(t),egr=r(cke," \u2014 "),xQ=n(cke,"A",{href:!0});var f1t=s(xQ);ogr=r(f1t,"TFData2VecVisionForImageClassification"),f1t.forEach(t),rgr=r(cke," (Data2VecVision model)"),cke.forEach(t),tgr=i(KK),rT=n(KK,"LI",{});var fke=s(rT);y1e=n(fke,"STRONG",{});var m1t=s(y1e);agr=r(m1t,"vit"),m1t.forEach(t),ngr=r(fke," \u2014 "),$Q=n(fke,"A",{href:!0});var g1t=s($Q);sgr=r(g1t,"TFViTForImageClassification"),g1t.forEach(t),lgr=r(fke," (ViT model)"),fke.forEach(t),KK.forEach(t),igr=i(ul),T(tT.$$.fragment,ul),ul.forEach(t),pl.forEach(t),SIe=i(f),Jd=n(f,"H2",{class:!0});var NNe=s(Jd);aT=n(NNe,"A",{id:!0,class:!0,href:!0});var h1t=s(aT);L1e=n(h1t,"SPAN",{});var p1t=s(L1e);T(Q8.$$.fragment,p1t),p1t.forEach(t),h1t.forEach(t),dgr=i(NNe),x1e=n(NNe,"SPAN",{});var u1t=s(x1e);cgr=r(u1t,"TFAutoModelForMaskedLM"),u1t.forEach(t),NNe.forEach(t),RIe=i(f),or=n(f,"DIV",{class:!0});var _l=s(or);T(W8.$$.fragment,_l),fgr=i(_l),Yd=n(_l,"P",{});var ZK=s(Yd);mgr=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kQ=n(ZK,"A",{href:!0});var _1t=s(kQ);ggr=r(_1t,"from_pretrained()"),_1t.forEach(t),hgr=r(ZK," class method or the "),SQ=n(ZK,"A",{href:!0});var b1t=s(SQ);pgr=r(b1t,"from_config()"),b1t.forEach(t),ugr=r(ZK,` class
method.`),ZK.forEach(t),_gr=i(_l),H8=n(_l,"P",{});var jNe=s(H8);bgr=r(jNe,"This class cannot be instantiated directly using "),$1e=n(jNe,"CODE",{});var v1t=s($1e);vgr=r(v1t,"__init__()"),v1t.forEach(t),Fgr=r(jNe," (throws an error)."),jNe.forEach(t),Tgr=i(_l),xt=n(_l,"DIV",{class:!0});var Yw=s(xt);T(U8.$$.fragment,Yw),Mgr=i(Yw),k1e=n(Yw,"P",{});var F1t=s(k1e);Egr=r(F1t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),F1t.forEach(t),Cgr=i(Yw),Kd=n(Yw,"P",{});var eZ=s(Kd);wgr=r(eZ,`Note:
Loading a model from its configuration file does `),S1e=n(eZ,"STRONG",{});var T1t=s(S1e);Agr=r(T1t,"not"),T1t.forEach(t),ygr=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=n(eZ,"A",{href:!0});var M1t=s(RQ);Lgr=r(M1t,"from_pretrained()"),M1t.forEach(t),xgr=r(eZ," to load the model weights."),eZ.forEach(t),$gr=i(Yw),T(nT.$$.fragment,Yw),Yw.forEach(t),kgr=i(_l),xr=n(_l,"DIV",{class:!0});var bl=s(xr);T(J8.$$.fragment,bl),Sgr=i(bl),R1e=n(bl,"P",{});var E1t=s(R1e);Rgr=r(E1t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),E1t.forEach(t),Bgr=i(bl),rn=n(bl,"P",{});var Kw=s(rn);Pgr=r(Kw,"The model class to instantiate is selected based on the "),B1e=n(Kw,"CODE",{});var C1t=s(B1e);Igr=r(C1t,"model_type"),C1t.forEach(t),qgr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),P1e=n(Kw,"CODE",{});var w1t=s(P1e);Ngr=r(w1t,"pretrained_model_name_or_path"),w1t.forEach(t),jgr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=n(Kw,"CODE",{});var A1t=s(I1e);Dgr=r(A1t,"pretrained_model_name_or_path"),A1t.forEach(t),Ggr=r(Kw,":"),Kw.forEach(t),Ogr=i(bl),ie=n(bl,"UL",{});var fe=s(ie);sT=n(fe,"LI",{});var mke=s(sT);q1e=n(mke,"STRONG",{});var y1t=s(q1e);Vgr=r(y1t,"albert"),y1t.forEach(t),Xgr=r(mke," \u2014 "),BQ=n(mke,"A",{href:!0});var L1t=s(BQ);zgr=r(L1t,"TFAlbertForMaskedLM"),L1t.forEach(t),Qgr=r(mke," (ALBERT model)"),mke.forEach(t),Wgr=i(fe),lT=n(fe,"LI",{});var gke=s(lT);N1e=n(gke,"STRONG",{});var x1t=s(N1e);Hgr=r(x1t,"bert"),x1t.forEach(t),Ugr=r(gke," \u2014 "),PQ=n(gke,"A",{href:!0});var $1t=s(PQ);Jgr=r($1t,"TFBertForMaskedLM"),$1t.forEach(t),Ygr=r(gke," (BERT model)"),gke.forEach(t),Kgr=i(fe),iT=n(fe,"LI",{});var hke=s(iT);j1e=n(hke,"STRONG",{});var k1t=s(j1e);Zgr=r(k1t,"camembert"),k1t.forEach(t),ehr=r(hke," \u2014 "),IQ=n(hke,"A",{href:!0});var S1t=s(IQ);ohr=r(S1t,"TFCamembertForMaskedLM"),S1t.forEach(t),rhr=r(hke," (CamemBERT model)"),hke.forEach(t),thr=i(fe),dT=n(fe,"LI",{});var pke=s(dT);D1e=n(pke,"STRONG",{});var R1t=s(D1e);ahr=r(R1t,"convbert"),R1t.forEach(t),nhr=r(pke," \u2014 "),qQ=n(pke,"A",{href:!0});var B1t=s(qQ);shr=r(B1t,"TFConvBertForMaskedLM"),B1t.forEach(t),lhr=r(pke," (ConvBERT model)"),pke.forEach(t),ihr=i(fe),cT=n(fe,"LI",{});var uke=s(cT);G1e=n(uke,"STRONG",{});var P1t=s(G1e);dhr=r(P1t,"deberta"),P1t.forEach(t),chr=r(uke," \u2014 "),NQ=n(uke,"A",{href:!0});var I1t=s(NQ);fhr=r(I1t,"TFDebertaForMaskedLM"),I1t.forEach(t),mhr=r(uke," (DeBERTa model)"),uke.forEach(t),ghr=i(fe),fT=n(fe,"LI",{});var _ke=s(fT);O1e=n(_ke,"STRONG",{});var q1t=s(O1e);hhr=r(q1t,"deberta-v2"),q1t.forEach(t),phr=r(_ke," \u2014 "),jQ=n(_ke,"A",{href:!0});var N1t=s(jQ);uhr=r(N1t,"TFDebertaV2ForMaskedLM"),N1t.forEach(t),_hr=r(_ke," (DeBERTa-v2 model)"),_ke.forEach(t),bhr=i(fe),mT=n(fe,"LI",{});var bke=s(mT);V1e=n(bke,"STRONG",{});var j1t=s(V1e);vhr=r(j1t,"distilbert"),j1t.forEach(t),Fhr=r(bke," \u2014 "),DQ=n(bke,"A",{href:!0});var D1t=s(DQ);Thr=r(D1t,"TFDistilBertForMaskedLM"),D1t.forEach(t),Mhr=r(bke," (DistilBERT model)"),bke.forEach(t),Ehr=i(fe),gT=n(fe,"LI",{});var vke=s(gT);X1e=n(vke,"STRONG",{});var G1t=s(X1e);Chr=r(G1t,"electra"),G1t.forEach(t),whr=r(vke," \u2014 "),GQ=n(vke,"A",{href:!0});var O1t=s(GQ);Ahr=r(O1t,"TFElectraForMaskedLM"),O1t.forEach(t),yhr=r(vke," (ELECTRA model)"),vke.forEach(t),Lhr=i(fe),hT=n(fe,"LI",{});var Fke=s(hT);z1e=n(Fke,"STRONG",{});var V1t=s(z1e);xhr=r(V1t,"flaubert"),V1t.forEach(t),$hr=r(Fke," \u2014 "),OQ=n(Fke,"A",{href:!0});var X1t=s(OQ);khr=r(X1t,"TFFlaubertWithLMHeadModel"),X1t.forEach(t),Shr=r(Fke," (FlauBERT model)"),Fke.forEach(t),Rhr=i(fe),pT=n(fe,"LI",{});var Tke=s(pT);Q1e=n(Tke,"STRONG",{});var z1t=s(Q1e);Bhr=r(z1t,"funnel"),z1t.forEach(t),Phr=r(Tke," \u2014 "),VQ=n(Tke,"A",{href:!0});var Q1t=s(VQ);Ihr=r(Q1t,"TFFunnelForMaskedLM"),Q1t.forEach(t),qhr=r(Tke," (Funnel Transformer model)"),Tke.forEach(t),Nhr=i(fe),uT=n(fe,"LI",{});var Mke=s(uT);W1e=n(Mke,"STRONG",{});var W1t=s(W1e);jhr=r(W1t,"layoutlm"),W1t.forEach(t),Dhr=r(Mke," \u2014 "),XQ=n(Mke,"A",{href:!0});var H1t=s(XQ);Ghr=r(H1t,"TFLayoutLMForMaskedLM"),H1t.forEach(t),Ohr=r(Mke," (LayoutLM model)"),Mke.forEach(t),Vhr=i(fe),_T=n(fe,"LI",{});var Eke=s(_T);H1e=n(Eke,"STRONG",{});var U1t=s(H1e);Xhr=r(U1t,"longformer"),U1t.forEach(t),zhr=r(Eke," \u2014 "),zQ=n(Eke,"A",{href:!0});var J1t=s(zQ);Qhr=r(J1t,"TFLongformerForMaskedLM"),J1t.forEach(t),Whr=r(Eke," (Longformer model)"),Eke.forEach(t),Hhr=i(fe),bT=n(fe,"LI",{});var Cke=s(bT);U1e=n(Cke,"STRONG",{});var Y1t=s(U1e);Uhr=r(Y1t,"mobilebert"),Y1t.forEach(t),Jhr=r(Cke," \u2014 "),QQ=n(Cke,"A",{href:!0});var K1t=s(QQ);Yhr=r(K1t,"TFMobileBertForMaskedLM"),K1t.forEach(t),Khr=r(Cke," (MobileBERT model)"),Cke.forEach(t),Zhr=i(fe),vT=n(fe,"LI",{});var wke=s(vT);J1e=n(wke,"STRONG",{});var Z1t=s(J1e);epr=r(Z1t,"mpnet"),Z1t.forEach(t),opr=r(wke," \u2014 "),WQ=n(wke,"A",{href:!0});var ebt=s(WQ);rpr=r(ebt,"TFMPNetForMaskedLM"),ebt.forEach(t),tpr=r(wke," (MPNet model)"),wke.forEach(t),apr=i(fe),FT=n(fe,"LI",{});var Ake=s(FT);Y1e=n(Ake,"STRONG",{});var obt=s(Y1e);npr=r(obt,"rembert"),obt.forEach(t),spr=r(Ake," \u2014 "),HQ=n(Ake,"A",{href:!0});var rbt=s(HQ);lpr=r(rbt,"TFRemBertForMaskedLM"),rbt.forEach(t),ipr=r(Ake," (RemBERT model)"),Ake.forEach(t),dpr=i(fe),TT=n(fe,"LI",{});var yke=s(TT);K1e=n(yke,"STRONG",{});var tbt=s(K1e);cpr=r(tbt,"roberta"),tbt.forEach(t),fpr=r(yke," \u2014 "),UQ=n(yke,"A",{href:!0});var abt=s(UQ);mpr=r(abt,"TFRobertaForMaskedLM"),abt.forEach(t),gpr=r(yke," (RoBERTa model)"),yke.forEach(t),hpr=i(fe),MT=n(fe,"LI",{});var Lke=s(MT);Z1e=n(Lke,"STRONG",{});var nbt=s(Z1e);ppr=r(nbt,"roformer"),nbt.forEach(t),upr=r(Lke," \u2014 "),JQ=n(Lke,"A",{href:!0});var sbt=s(JQ);_pr=r(sbt,"TFRoFormerForMaskedLM"),sbt.forEach(t),bpr=r(Lke," (RoFormer model)"),Lke.forEach(t),vpr=i(fe),ET=n(fe,"LI",{});var xke=s(ET);ebe=n(xke,"STRONG",{});var lbt=s(ebe);Fpr=r(lbt,"tapas"),lbt.forEach(t),Tpr=r(xke," \u2014 "),YQ=n(xke,"A",{href:!0});var ibt=s(YQ);Mpr=r(ibt,"TFTapasForMaskedLM"),ibt.forEach(t),Epr=r(xke," (TAPAS model)"),xke.forEach(t),Cpr=i(fe),CT=n(fe,"LI",{});var $ke=s(CT);obe=n($ke,"STRONG",{});var dbt=s(obe);wpr=r(dbt,"xlm"),dbt.forEach(t),Apr=r($ke," \u2014 "),KQ=n($ke,"A",{href:!0});var cbt=s(KQ);ypr=r(cbt,"TFXLMWithLMHeadModel"),cbt.forEach(t),Lpr=r($ke," (XLM model)"),$ke.forEach(t),xpr=i(fe),wT=n(fe,"LI",{});var kke=s(wT);rbe=n(kke,"STRONG",{});var fbt=s(rbe);$pr=r(fbt,"xlm-roberta"),fbt.forEach(t),kpr=r(kke," \u2014 "),ZQ=n(kke,"A",{href:!0});var mbt=s(ZQ);Spr=r(mbt,"TFXLMRobertaForMaskedLM"),mbt.forEach(t),Rpr=r(kke," (XLM-RoBERTa model)"),kke.forEach(t),fe.forEach(t),Bpr=i(bl),T(AT.$$.fragment,bl),bl.forEach(t),_l.forEach(t),BIe=i(f),Zd=n(f,"H2",{class:!0});var DNe=s(Zd);yT=n(DNe,"A",{id:!0,class:!0,href:!0});var gbt=s(yT);tbe=n(gbt,"SPAN",{});var hbt=s(tbe);T(Y8.$$.fragment,hbt),hbt.forEach(t),gbt.forEach(t),Ppr=i(DNe),abe=n(DNe,"SPAN",{});var pbt=s(abe);Ipr=r(pbt,"TFAutoModelForSeq2SeqLM"),pbt.forEach(t),DNe.forEach(t),PIe=i(f),rr=n(f,"DIV",{class:!0});var vl=s(rr);T(K8.$$.fragment,vl),qpr=i(vl),ec=n(vl,"P",{});var oZ=s(ec);Npr=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eW=n(oZ,"A",{href:!0});var ubt=s(eW);jpr=r(ubt,"from_pretrained()"),ubt.forEach(t),Dpr=r(oZ," class method or the "),oW=n(oZ,"A",{href:!0});var _bt=s(oW);Gpr=r(_bt,"from_config()"),_bt.forEach(t),Opr=r(oZ,` class
method.`),oZ.forEach(t),Vpr=i(vl),Z8=n(vl,"P",{});var GNe=s(Z8);Xpr=r(GNe,"This class cannot be instantiated directly using "),nbe=n(GNe,"CODE",{});var bbt=s(nbe);zpr=r(bbt,"__init__()"),bbt.forEach(t),Qpr=r(GNe," (throws an error)."),GNe.forEach(t),Wpr=i(vl),$t=n(vl,"DIV",{class:!0});var Zw=s($t);T(ex.$$.fragment,Zw),Hpr=i(Zw),sbe=n(Zw,"P",{});var vbt=s(sbe);Upr=r(vbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vbt.forEach(t),Jpr=i(Zw),oc=n(Zw,"P",{});var rZ=s(oc);Ypr=r(rZ,`Note:
Loading a model from its configuration file does `),lbe=n(rZ,"STRONG",{});var Fbt=s(lbe);Kpr=r(Fbt,"not"),Fbt.forEach(t),Zpr=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=n(rZ,"A",{href:!0});var Tbt=s(rW);eur=r(Tbt,"from_pretrained()"),Tbt.forEach(t),our=r(rZ," to load the model weights."),rZ.forEach(t),rur=i(Zw),T(LT.$$.fragment,Zw),Zw.forEach(t),tur=i(vl),$r=n(vl,"DIV",{class:!0});var Fl=s($r);T(ox.$$.fragment,Fl),aur=i(Fl),ibe=n(Fl,"P",{});var Mbt=s(ibe);nur=r(Mbt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Mbt.forEach(t),sur=i(Fl),tn=n(Fl,"P",{});var eA=s(tn);lur=r(eA,"The model class to instantiate is selected based on the "),dbe=n(eA,"CODE",{});var Ebt=s(dbe);iur=r(Ebt,"model_type"),Ebt.forEach(t),dur=r(eA,` property of the config object (either
passed as an argument or loaded from `),cbe=n(eA,"CODE",{});var Cbt=s(cbe);cur=r(Cbt,"pretrained_model_name_or_path"),Cbt.forEach(t),fur=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=n(eA,"CODE",{});var wbt=s(fbe);mur=r(wbt,"pretrained_model_name_or_path"),wbt.forEach(t),gur=r(eA,":"),eA.forEach(t),hur=i(Fl),ye=n(Fl,"UL",{});var Be=s(ye);xT=n(Be,"LI",{});var Ske=s(xT);mbe=n(Ske,"STRONG",{});var Abt=s(mbe);pur=r(Abt,"bart"),Abt.forEach(t),uur=r(Ske," \u2014 "),tW=n(Ske,"A",{href:!0});var ybt=s(tW);_ur=r(ybt,"TFBartForConditionalGeneration"),ybt.forEach(t),bur=r(Ske," (BART model)"),Ske.forEach(t),vur=i(Be),$T=n(Be,"LI",{});var Rke=s($T);gbe=n(Rke,"STRONG",{});var Lbt=s(gbe);Fur=r(Lbt,"blenderbot"),Lbt.forEach(t),Tur=r(Rke," \u2014 "),aW=n(Rke,"A",{href:!0});var xbt=s(aW);Mur=r(xbt,"TFBlenderbotForConditionalGeneration"),xbt.forEach(t),Eur=r(Rke," (Blenderbot model)"),Rke.forEach(t),Cur=i(Be),kT=n(Be,"LI",{});var Bke=s(kT);hbe=n(Bke,"STRONG",{});var $bt=s(hbe);wur=r($bt,"blenderbot-small"),$bt.forEach(t),Aur=r(Bke," \u2014 "),nW=n(Bke,"A",{href:!0});var kbt=s(nW);yur=r(kbt,"TFBlenderbotSmallForConditionalGeneration"),kbt.forEach(t),Lur=r(Bke," (BlenderbotSmall model)"),Bke.forEach(t),xur=i(Be),ST=n(Be,"LI",{});var Pke=s(ST);pbe=n(Pke,"STRONG",{});var Sbt=s(pbe);$ur=r(Sbt,"encoder-decoder"),Sbt.forEach(t),kur=r(Pke," \u2014 "),sW=n(Pke,"A",{href:!0});var Rbt=s(sW);Sur=r(Rbt,"TFEncoderDecoderModel"),Rbt.forEach(t),Rur=r(Pke," (Encoder decoder model)"),Pke.forEach(t),Bur=i(Be),RT=n(Be,"LI",{});var Ike=s(RT);ube=n(Ike,"STRONG",{});var Bbt=s(ube);Pur=r(Bbt,"led"),Bbt.forEach(t),Iur=r(Ike," \u2014 "),lW=n(Ike,"A",{href:!0});var Pbt=s(lW);qur=r(Pbt,"TFLEDForConditionalGeneration"),Pbt.forEach(t),Nur=r(Ike," (LED model)"),Ike.forEach(t),jur=i(Be),BT=n(Be,"LI",{});var qke=s(BT);_be=n(qke,"STRONG",{});var Ibt=s(_be);Dur=r(Ibt,"marian"),Ibt.forEach(t),Gur=r(qke," \u2014 "),iW=n(qke,"A",{href:!0});var qbt=s(iW);Our=r(qbt,"TFMarianMTModel"),qbt.forEach(t),Vur=r(qke," (Marian model)"),qke.forEach(t),Xur=i(Be),PT=n(Be,"LI",{});var Nke=s(PT);bbe=n(Nke,"STRONG",{});var Nbt=s(bbe);zur=r(Nbt,"mbart"),Nbt.forEach(t),Qur=r(Nke," \u2014 "),dW=n(Nke,"A",{href:!0});var jbt=s(dW);Wur=r(jbt,"TFMBartForConditionalGeneration"),jbt.forEach(t),Hur=r(Nke," (mBART model)"),Nke.forEach(t),Uur=i(Be),IT=n(Be,"LI",{});var jke=s(IT);vbe=n(jke,"STRONG",{});var Dbt=s(vbe);Jur=r(Dbt,"mt5"),Dbt.forEach(t),Yur=r(jke," \u2014 "),cW=n(jke,"A",{href:!0});var Gbt=s(cW);Kur=r(Gbt,"TFMT5ForConditionalGeneration"),Gbt.forEach(t),Zur=r(jke," (mT5 model)"),jke.forEach(t),e_r=i(Be),qT=n(Be,"LI",{});var Dke=s(qT);Fbe=n(Dke,"STRONG",{});var Obt=s(Fbe);o_r=r(Obt,"pegasus"),Obt.forEach(t),r_r=r(Dke," \u2014 "),fW=n(Dke,"A",{href:!0});var Vbt=s(fW);t_r=r(Vbt,"TFPegasusForConditionalGeneration"),Vbt.forEach(t),a_r=r(Dke," (Pegasus model)"),Dke.forEach(t),n_r=i(Be),NT=n(Be,"LI",{});var Gke=s(NT);Tbe=n(Gke,"STRONG",{});var Xbt=s(Tbe);s_r=r(Xbt,"t5"),Xbt.forEach(t),l_r=r(Gke," \u2014 "),mW=n(Gke,"A",{href:!0});var zbt=s(mW);i_r=r(zbt,"TFT5ForConditionalGeneration"),zbt.forEach(t),d_r=r(Gke," (T5 model)"),Gke.forEach(t),Be.forEach(t),c_r=i(Fl),T(jT.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),IIe=i(f),rc=n(f,"H2",{class:!0});var ONe=s(rc);DT=n(ONe,"A",{id:!0,class:!0,href:!0});var Qbt=s(DT);Mbe=n(Qbt,"SPAN",{});var Wbt=s(Mbe);T(rx.$$.fragment,Wbt),Wbt.forEach(t),Qbt.forEach(t),f_r=i(ONe),Ebe=n(ONe,"SPAN",{});var Hbt=s(Ebe);m_r=r(Hbt,"TFAutoModelForSequenceClassification"),Hbt.forEach(t),ONe.forEach(t),qIe=i(f),tr=n(f,"DIV",{class:!0});var Tl=s(tr);T(tx.$$.fragment,Tl),g_r=i(Tl),tc=n(Tl,"P",{});var tZ=s(tc);h_r=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gW=n(tZ,"A",{href:!0});var Ubt=s(gW);p_r=r(Ubt,"from_pretrained()"),Ubt.forEach(t),u_r=r(tZ," class method or the "),hW=n(tZ,"A",{href:!0});var Jbt=s(hW);__r=r(Jbt,"from_config()"),Jbt.forEach(t),b_r=r(tZ,` class
method.`),tZ.forEach(t),v_r=i(Tl),ax=n(Tl,"P",{});var VNe=s(ax);F_r=r(VNe,"This class cannot be instantiated directly using "),Cbe=n(VNe,"CODE",{});var Ybt=s(Cbe);T_r=r(Ybt,"__init__()"),Ybt.forEach(t),M_r=r(VNe," (throws an error)."),VNe.forEach(t),E_r=i(Tl),kt=n(Tl,"DIV",{class:!0});var oA=s(kt);T(nx.$$.fragment,oA),C_r=i(oA),wbe=n(oA,"P",{});var Kbt=s(wbe);w_r=r(Kbt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Kbt.forEach(t),A_r=i(oA),ac=n(oA,"P",{});var aZ=s(ac);y_r=r(aZ,`Note:
Loading a model from its configuration file does `),Abe=n(aZ,"STRONG",{});var Zbt=s(Abe);L_r=r(Zbt,"not"),Zbt.forEach(t),x_r=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(aZ,"A",{href:!0});var e4t=s(pW);$_r=r(e4t,"from_pretrained()"),e4t.forEach(t),k_r=r(aZ," to load the model weights."),aZ.forEach(t),S_r=i(oA),T(GT.$$.fragment,oA),oA.forEach(t),R_r=i(Tl),kr=n(Tl,"DIV",{class:!0});var Ml=s(kr);T(sx.$$.fragment,Ml),B_r=i(Ml),ybe=n(Ml,"P",{});var o4t=s(ybe);P_r=r(o4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),o4t.forEach(t),I_r=i(Ml),an=n(Ml,"P",{});var rA=s(an);q_r=r(rA,"The model class to instantiate is selected based on the "),Lbe=n(rA,"CODE",{});var r4t=s(Lbe);N_r=r(r4t,"model_type"),r4t.forEach(t),j_r=r(rA,` property of the config object (either
passed as an argument or loaded from `),xbe=n(rA,"CODE",{});var t4t=s(xbe);D_r=r(t4t,"pretrained_model_name_or_path"),t4t.forEach(t),G_r=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=n(rA,"CODE",{});var a4t=s($be);O_r=r(a4t,"pretrained_model_name_or_path"),a4t.forEach(t),V_r=r(rA,":"),rA.forEach(t),X_r=i(Ml),Z=n(Ml,"UL",{});var te=s(Z);OT=n(te,"LI",{});var Oke=s(OT);kbe=n(Oke,"STRONG",{});var n4t=s(kbe);z_r=r(n4t,"albert"),n4t.forEach(t),Q_r=r(Oke," \u2014 "),uW=n(Oke,"A",{href:!0});var s4t=s(uW);W_r=r(s4t,"TFAlbertForSequenceClassification"),s4t.forEach(t),H_r=r(Oke," (ALBERT model)"),Oke.forEach(t),U_r=i(te),VT=n(te,"LI",{});var Vke=s(VT);Sbe=n(Vke,"STRONG",{});var l4t=s(Sbe);J_r=r(l4t,"bert"),l4t.forEach(t),Y_r=r(Vke," \u2014 "),_W=n(Vke,"A",{href:!0});var i4t=s(_W);K_r=r(i4t,"TFBertForSequenceClassification"),i4t.forEach(t),Z_r=r(Vke," (BERT model)"),Vke.forEach(t),e2r=i(te),XT=n(te,"LI",{});var Xke=s(XT);Rbe=n(Xke,"STRONG",{});var d4t=s(Rbe);o2r=r(d4t,"camembert"),d4t.forEach(t),r2r=r(Xke," \u2014 "),bW=n(Xke,"A",{href:!0});var c4t=s(bW);t2r=r(c4t,"TFCamembertForSequenceClassification"),c4t.forEach(t),a2r=r(Xke," (CamemBERT model)"),Xke.forEach(t),n2r=i(te),zT=n(te,"LI",{});var zke=s(zT);Bbe=n(zke,"STRONG",{});var f4t=s(Bbe);s2r=r(f4t,"convbert"),f4t.forEach(t),l2r=r(zke," \u2014 "),vW=n(zke,"A",{href:!0});var m4t=s(vW);i2r=r(m4t,"TFConvBertForSequenceClassification"),m4t.forEach(t),d2r=r(zke," (ConvBERT model)"),zke.forEach(t),c2r=i(te),QT=n(te,"LI",{});var Qke=s(QT);Pbe=n(Qke,"STRONG",{});var g4t=s(Pbe);f2r=r(g4t,"ctrl"),g4t.forEach(t),m2r=r(Qke," \u2014 "),FW=n(Qke,"A",{href:!0});var h4t=s(FW);g2r=r(h4t,"TFCTRLForSequenceClassification"),h4t.forEach(t),h2r=r(Qke," (CTRL model)"),Qke.forEach(t),p2r=i(te),WT=n(te,"LI",{});var Wke=s(WT);Ibe=n(Wke,"STRONG",{});var p4t=s(Ibe);u2r=r(p4t,"deberta"),p4t.forEach(t),_2r=r(Wke," \u2014 "),TW=n(Wke,"A",{href:!0});var u4t=s(TW);b2r=r(u4t,"TFDebertaForSequenceClassification"),u4t.forEach(t),v2r=r(Wke," (DeBERTa model)"),Wke.forEach(t),F2r=i(te),HT=n(te,"LI",{});var Hke=s(HT);qbe=n(Hke,"STRONG",{});var _4t=s(qbe);T2r=r(_4t,"deberta-v2"),_4t.forEach(t),M2r=r(Hke," \u2014 "),MW=n(Hke,"A",{href:!0});var b4t=s(MW);E2r=r(b4t,"TFDebertaV2ForSequenceClassification"),b4t.forEach(t),C2r=r(Hke," (DeBERTa-v2 model)"),Hke.forEach(t),w2r=i(te),UT=n(te,"LI",{});var Uke=s(UT);Nbe=n(Uke,"STRONG",{});var v4t=s(Nbe);A2r=r(v4t,"distilbert"),v4t.forEach(t),y2r=r(Uke," \u2014 "),EW=n(Uke,"A",{href:!0});var F4t=s(EW);L2r=r(F4t,"TFDistilBertForSequenceClassification"),F4t.forEach(t),x2r=r(Uke," (DistilBERT model)"),Uke.forEach(t),$2r=i(te),JT=n(te,"LI",{});var Jke=s(JT);jbe=n(Jke,"STRONG",{});var T4t=s(jbe);k2r=r(T4t,"electra"),T4t.forEach(t),S2r=r(Jke," \u2014 "),CW=n(Jke,"A",{href:!0});var M4t=s(CW);R2r=r(M4t,"TFElectraForSequenceClassification"),M4t.forEach(t),B2r=r(Jke," (ELECTRA model)"),Jke.forEach(t),P2r=i(te),YT=n(te,"LI",{});var Yke=s(YT);Dbe=n(Yke,"STRONG",{});var E4t=s(Dbe);I2r=r(E4t,"flaubert"),E4t.forEach(t),q2r=r(Yke," \u2014 "),wW=n(Yke,"A",{href:!0});var C4t=s(wW);N2r=r(C4t,"TFFlaubertForSequenceClassification"),C4t.forEach(t),j2r=r(Yke," (FlauBERT model)"),Yke.forEach(t),D2r=i(te),KT=n(te,"LI",{});var Kke=s(KT);Gbe=n(Kke,"STRONG",{});var w4t=s(Gbe);G2r=r(w4t,"funnel"),w4t.forEach(t),O2r=r(Kke," \u2014 "),AW=n(Kke,"A",{href:!0});var A4t=s(AW);V2r=r(A4t,"TFFunnelForSequenceClassification"),A4t.forEach(t),X2r=r(Kke," (Funnel Transformer model)"),Kke.forEach(t),z2r=i(te),ZT=n(te,"LI",{});var Zke=s(ZT);Obe=n(Zke,"STRONG",{});var y4t=s(Obe);Q2r=r(y4t,"gpt2"),y4t.forEach(t),W2r=r(Zke," \u2014 "),yW=n(Zke,"A",{href:!0});var L4t=s(yW);H2r=r(L4t,"TFGPT2ForSequenceClassification"),L4t.forEach(t),U2r=r(Zke," (OpenAI GPT-2 model)"),Zke.forEach(t),J2r=i(te),eM=n(te,"LI",{});var eSe=s(eM);Vbe=n(eSe,"STRONG",{});var x4t=s(Vbe);Y2r=r(x4t,"gptj"),x4t.forEach(t),K2r=r(eSe," \u2014 "),LW=n(eSe,"A",{href:!0});var $4t=s(LW);Z2r=r($4t,"TFGPTJForSequenceClassification"),$4t.forEach(t),e1r=r(eSe," (GPT-J model)"),eSe.forEach(t),o1r=i(te),oM=n(te,"LI",{});var oSe=s(oM);Xbe=n(oSe,"STRONG",{});var k4t=s(Xbe);r1r=r(k4t,"layoutlm"),k4t.forEach(t),t1r=r(oSe," \u2014 "),xW=n(oSe,"A",{href:!0});var S4t=s(xW);a1r=r(S4t,"TFLayoutLMForSequenceClassification"),S4t.forEach(t),n1r=r(oSe," (LayoutLM model)"),oSe.forEach(t),s1r=i(te),rM=n(te,"LI",{});var rSe=s(rM);zbe=n(rSe,"STRONG",{});var R4t=s(zbe);l1r=r(R4t,"longformer"),R4t.forEach(t),i1r=r(rSe," \u2014 "),$W=n(rSe,"A",{href:!0});var B4t=s($W);d1r=r(B4t,"TFLongformerForSequenceClassification"),B4t.forEach(t),c1r=r(rSe," (Longformer model)"),rSe.forEach(t),f1r=i(te),tM=n(te,"LI",{});var tSe=s(tM);Qbe=n(tSe,"STRONG",{});var P4t=s(Qbe);m1r=r(P4t,"mobilebert"),P4t.forEach(t),g1r=r(tSe," \u2014 "),kW=n(tSe,"A",{href:!0});var I4t=s(kW);h1r=r(I4t,"TFMobileBertForSequenceClassification"),I4t.forEach(t),p1r=r(tSe," (MobileBERT model)"),tSe.forEach(t),u1r=i(te),aM=n(te,"LI",{});var aSe=s(aM);Wbe=n(aSe,"STRONG",{});var q4t=s(Wbe);_1r=r(q4t,"mpnet"),q4t.forEach(t),b1r=r(aSe," \u2014 "),SW=n(aSe,"A",{href:!0});var N4t=s(SW);v1r=r(N4t,"TFMPNetForSequenceClassification"),N4t.forEach(t),F1r=r(aSe," (MPNet model)"),aSe.forEach(t),T1r=i(te),nM=n(te,"LI",{});var nSe=s(nM);Hbe=n(nSe,"STRONG",{});var j4t=s(Hbe);M1r=r(j4t,"openai-gpt"),j4t.forEach(t),E1r=r(nSe," \u2014 "),RW=n(nSe,"A",{href:!0});var D4t=s(RW);C1r=r(D4t,"TFOpenAIGPTForSequenceClassification"),D4t.forEach(t),w1r=r(nSe," (OpenAI GPT model)"),nSe.forEach(t),A1r=i(te),sM=n(te,"LI",{});var sSe=s(sM);Ube=n(sSe,"STRONG",{});var G4t=s(Ube);y1r=r(G4t,"rembert"),G4t.forEach(t),L1r=r(sSe," \u2014 "),BW=n(sSe,"A",{href:!0});var O4t=s(BW);x1r=r(O4t,"TFRemBertForSequenceClassification"),O4t.forEach(t),$1r=r(sSe," (RemBERT model)"),sSe.forEach(t),k1r=i(te),lM=n(te,"LI",{});var lSe=s(lM);Jbe=n(lSe,"STRONG",{});var V4t=s(Jbe);S1r=r(V4t,"roberta"),V4t.forEach(t),R1r=r(lSe," \u2014 "),PW=n(lSe,"A",{href:!0});var X4t=s(PW);B1r=r(X4t,"TFRobertaForSequenceClassification"),X4t.forEach(t),P1r=r(lSe," (RoBERTa model)"),lSe.forEach(t),I1r=i(te),iM=n(te,"LI",{});var iSe=s(iM);Ybe=n(iSe,"STRONG",{});var z4t=s(Ybe);q1r=r(z4t,"roformer"),z4t.forEach(t),N1r=r(iSe," \u2014 "),IW=n(iSe,"A",{href:!0});var Q4t=s(IW);j1r=r(Q4t,"TFRoFormerForSequenceClassification"),Q4t.forEach(t),D1r=r(iSe," (RoFormer model)"),iSe.forEach(t),G1r=i(te),dM=n(te,"LI",{});var dSe=s(dM);Kbe=n(dSe,"STRONG",{});var W4t=s(Kbe);O1r=r(W4t,"tapas"),W4t.forEach(t),V1r=r(dSe," \u2014 "),qW=n(dSe,"A",{href:!0});var H4t=s(qW);X1r=r(H4t,"TFTapasForSequenceClassification"),H4t.forEach(t),z1r=r(dSe," (TAPAS model)"),dSe.forEach(t),Q1r=i(te),cM=n(te,"LI",{});var cSe=s(cM);Zbe=n(cSe,"STRONG",{});var U4t=s(Zbe);W1r=r(U4t,"transfo-xl"),U4t.forEach(t),H1r=r(cSe," \u2014 "),NW=n(cSe,"A",{href:!0});var J4t=s(NW);U1r=r(J4t,"TFTransfoXLForSequenceClassification"),J4t.forEach(t),J1r=r(cSe," (Transformer-XL model)"),cSe.forEach(t),Y1r=i(te),fM=n(te,"LI",{});var fSe=s(fM);e4e=n(fSe,"STRONG",{});var Y4t=s(e4e);K1r=r(Y4t,"xlm"),Y4t.forEach(t),Z1r=r(fSe," \u2014 "),jW=n(fSe,"A",{href:!0});var K4t=s(jW);ebr=r(K4t,"TFXLMForSequenceClassification"),K4t.forEach(t),obr=r(fSe," (XLM model)"),fSe.forEach(t),rbr=i(te),mM=n(te,"LI",{});var mSe=s(mM);o4e=n(mSe,"STRONG",{});var Z4t=s(o4e);tbr=r(Z4t,"xlm-roberta"),Z4t.forEach(t),abr=r(mSe," \u2014 "),DW=n(mSe,"A",{href:!0});var evt=s(DW);nbr=r(evt,"TFXLMRobertaForSequenceClassification"),evt.forEach(t),sbr=r(mSe," (XLM-RoBERTa model)"),mSe.forEach(t),lbr=i(te),gM=n(te,"LI",{});var gSe=s(gM);r4e=n(gSe,"STRONG",{});var ovt=s(r4e);ibr=r(ovt,"xlnet"),ovt.forEach(t),dbr=r(gSe," \u2014 "),GW=n(gSe,"A",{href:!0});var rvt=s(GW);cbr=r(rvt,"TFXLNetForSequenceClassification"),rvt.forEach(t),fbr=r(gSe," (XLNet model)"),gSe.forEach(t),te.forEach(t),mbr=i(Ml),T(hM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),NIe=i(f),nc=n(f,"H2",{class:!0});var XNe=s(nc);pM=n(XNe,"A",{id:!0,class:!0,href:!0});var tvt=s(pM);t4e=n(tvt,"SPAN",{});var avt=s(t4e);T(lx.$$.fragment,avt),avt.forEach(t),tvt.forEach(t),gbr=i(XNe),a4e=n(XNe,"SPAN",{});var nvt=s(a4e);hbr=r(nvt,"TFAutoModelForMultipleChoice"),nvt.forEach(t),XNe.forEach(t),jIe=i(f),ar=n(f,"DIV",{class:!0});var El=s(ar);T(ix.$$.fragment,El),pbr=i(El),sc=n(El,"P",{});var nZ=s(sc);ubr=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OW=n(nZ,"A",{href:!0});var svt=s(OW);_br=r(svt,"from_pretrained()"),svt.forEach(t),bbr=r(nZ," class method or the "),VW=n(nZ,"A",{href:!0});var lvt=s(VW);vbr=r(lvt,"from_config()"),lvt.forEach(t),Fbr=r(nZ,` class
method.`),nZ.forEach(t),Tbr=i(El),dx=n(El,"P",{});var zNe=s(dx);Mbr=r(zNe,"This class cannot be instantiated directly using "),n4e=n(zNe,"CODE",{});var ivt=s(n4e);Ebr=r(ivt,"__init__()"),ivt.forEach(t),Cbr=r(zNe," (throws an error)."),zNe.forEach(t),wbr=i(El),St=n(El,"DIV",{class:!0});var tA=s(St);T(cx.$$.fragment,tA),Abr=i(tA),s4e=n(tA,"P",{});var dvt=s(s4e);ybr=r(dvt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dvt.forEach(t),Lbr=i(tA),lc=n(tA,"P",{});var sZ=s(lc);xbr=r(sZ,`Note:
Loading a model from its configuration file does `),l4e=n(sZ,"STRONG",{});var cvt=s(l4e);$br=r(cvt,"not"),cvt.forEach(t),kbr=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=n(sZ,"A",{href:!0});var fvt=s(XW);Sbr=r(fvt,"from_pretrained()"),fvt.forEach(t),Rbr=r(sZ," to load the model weights."),sZ.forEach(t),Bbr=i(tA),T(uM.$$.fragment,tA),tA.forEach(t),Pbr=i(El),Sr=n(El,"DIV",{class:!0});var Cl=s(Sr);T(fx.$$.fragment,Cl),Ibr=i(Cl),i4e=n(Cl,"P",{});var mvt=s(i4e);qbr=r(mvt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mvt.forEach(t),Nbr=i(Cl),nn=n(Cl,"P",{});var aA=s(nn);jbr=r(aA,"The model class to instantiate is selected based on the "),d4e=n(aA,"CODE",{});var gvt=s(d4e);Dbr=r(gvt,"model_type"),gvt.forEach(t),Gbr=r(aA,` property of the config object (either
passed as an argument or loaded from `),c4e=n(aA,"CODE",{});var hvt=s(c4e);Obr=r(hvt,"pretrained_model_name_or_path"),hvt.forEach(t),Vbr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=n(aA,"CODE",{});var pvt=s(f4e);Xbr=r(pvt,"pretrained_model_name_or_path"),pvt.forEach(t),zbr=r(aA,":"),aA.forEach(t),Qbr=i(Cl),pe=n(Cl,"UL",{});var _e=s(pe);_M=n(_e,"LI",{});var hSe=s(_M);m4e=n(hSe,"STRONG",{});var uvt=s(m4e);Wbr=r(uvt,"albert"),uvt.forEach(t),Hbr=r(hSe," \u2014 "),zW=n(hSe,"A",{href:!0});var _vt=s(zW);Ubr=r(_vt,"TFAlbertForMultipleChoice"),_vt.forEach(t),Jbr=r(hSe," (ALBERT model)"),hSe.forEach(t),Ybr=i(_e),bM=n(_e,"LI",{});var pSe=s(bM);g4e=n(pSe,"STRONG",{});var bvt=s(g4e);Kbr=r(bvt,"bert"),bvt.forEach(t),Zbr=r(pSe," \u2014 "),QW=n(pSe,"A",{href:!0});var vvt=s(QW);e4r=r(vvt,"TFBertForMultipleChoice"),vvt.forEach(t),o4r=r(pSe," (BERT model)"),pSe.forEach(t),r4r=i(_e),vM=n(_e,"LI",{});var uSe=s(vM);h4e=n(uSe,"STRONG",{});var Fvt=s(h4e);t4r=r(Fvt,"camembert"),Fvt.forEach(t),a4r=r(uSe," \u2014 "),WW=n(uSe,"A",{href:!0});var Tvt=s(WW);n4r=r(Tvt,"TFCamembertForMultipleChoice"),Tvt.forEach(t),s4r=r(uSe," (CamemBERT model)"),uSe.forEach(t),l4r=i(_e),FM=n(_e,"LI",{});var _Se=s(FM);p4e=n(_Se,"STRONG",{});var Mvt=s(p4e);i4r=r(Mvt,"convbert"),Mvt.forEach(t),d4r=r(_Se," \u2014 "),HW=n(_Se,"A",{href:!0});var Evt=s(HW);c4r=r(Evt,"TFConvBertForMultipleChoice"),Evt.forEach(t),f4r=r(_Se," (ConvBERT model)"),_Se.forEach(t),m4r=i(_e),TM=n(_e,"LI",{});var bSe=s(TM);u4e=n(bSe,"STRONG",{});var Cvt=s(u4e);g4r=r(Cvt,"distilbert"),Cvt.forEach(t),h4r=r(bSe," \u2014 "),UW=n(bSe,"A",{href:!0});var wvt=s(UW);p4r=r(wvt,"TFDistilBertForMultipleChoice"),wvt.forEach(t),u4r=r(bSe," (DistilBERT model)"),bSe.forEach(t),_4r=i(_e),MM=n(_e,"LI",{});var vSe=s(MM);_4e=n(vSe,"STRONG",{});var Avt=s(_4e);b4r=r(Avt,"electra"),Avt.forEach(t),v4r=r(vSe," \u2014 "),JW=n(vSe,"A",{href:!0});var yvt=s(JW);F4r=r(yvt,"TFElectraForMultipleChoice"),yvt.forEach(t),T4r=r(vSe," (ELECTRA model)"),vSe.forEach(t),M4r=i(_e),EM=n(_e,"LI",{});var FSe=s(EM);b4e=n(FSe,"STRONG",{});var Lvt=s(b4e);E4r=r(Lvt,"flaubert"),Lvt.forEach(t),C4r=r(FSe," \u2014 "),YW=n(FSe,"A",{href:!0});var xvt=s(YW);w4r=r(xvt,"TFFlaubertForMultipleChoice"),xvt.forEach(t),A4r=r(FSe," (FlauBERT model)"),FSe.forEach(t),y4r=i(_e),CM=n(_e,"LI",{});var TSe=s(CM);v4e=n(TSe,"STRONG",{});var $vt=s(v4e);L4r=r($vt,"funnel"),$vt.forEach(t),x4r=r(TSe," \u2014 "),KW=n(TSe,"A",{href:!0});var kvt=s(KW);$4r=r(kvt,"TFFunnelForMultipleChoice"),kvt.forEach(t),k4r=r(TSe," (Funnel Transformer model)"),TSe.forEach(t),S4r=i(_e),wM=n(_e,"LI",{});var MSe=s(wM);F4e=n(MSe,"STRONG",{});var Svt=s(F4e);R4r=r(Svt,"longformer"),Svt.forEach(t),B4r=r(MSe," \u2014 "),ZW=n(MSe,"A",{href:!0});var Rvt=s(ZW);P4r=r(Rvt,"TFLongformerForMultipleChoice"),Rvt.forEach(t),I4r=r(MSe," (Longformer model)"),MSe.forEach(t),q4r=i(_e),AM=n(_e,"LI",{});var ESe=s(AM);T4e=n(ESe,"STRONG",{});var Bvt=s(T4e);N4r=r(Bvt,"mobilebert"),Bvt.forEach(t),j4r=r(ESe," \u2014 "),eH=n(ESe,"A",{href:!0});var Pvt=s(eH);D4r=r(Pvt,"TFMobileBertForMultipleChoice"),Pvt.forEach(t),G4r=r(ESe," (MobileBERT model)"),ESe.forEach(t),O4r=i(_e),yM=n(_e,"LI",{});var CSe=s(yM);M4e=n(CSe,"STRONG",{});var Ivt=s(M4e);V4r=r(Ivt,"mpnet"),Ivt.forEach(t),X4r=r(CSe," \u2014 "),oH=n(CSe,"A",{href:!0});var qvt=s(oH);z4r=r(qvt,"TFMPNetForMultipleChoice"),qvt.forEach(t),Q4r=r(CSe," (MPNet model)"),CSe.forEach(t),W4r=i(_e),LM=n(_e,"LI",{});var wSe=s(LM);E4e=n(wSe,"STRONG",{});var Nvt=s(E4e);H4r=r(Nvt,"rembert"),Nvt.forEach(t),U4r=r(wSe," \u2014 "),rH=n(wSe,"A",{href:!0});var jvt=s(rH);J4r=r(jvt,"TFRemBertForMultipleChoice"),jvt.forEach(t),Y4r=r(wSe," (RemBERT model)"),wSe.forEach(t),K4r=i(_e),xM=n(_e,"LI",{});var ASe=s(xM);C4e=n(ASe,"STRONG",{});var Dvt=s(C4e);Z4r=r(Dvt,"roberta"),Dvt.forEach(t),evr=r(ASe," \u2014 "),tH=n(ASe,"A",{href:!0});var Gvt=s(tH);ovr=r(Gvt,"TFRobertaForMultipleChoice"),Gvt.forEach(t),rvr=r(ASe," (RoBERTa model)"),ASe.forEach(t),tvr=i(_e),$M=n(_e,"LI",{});var ySe=s($M);w4e=n(ySe,"STRONG",{});var Ovt=s(w4e);avr=r(Ovt,"roformer"),Ovt.forEach(t),nvr=r(ySe," \u2014 "),aH=n(ySe,"A",{href:!0});var Vvt=s(aH);svr=r(Vvt,"TFRoFormerForMultipleChoice"),Vvt.forEach(t),lvr=r(ySe," (RoFormer model)"),ySe.forEach(t),ivr=i(_e),kM=n(_e,"LI",{});var LSe=s(kM);A4e=n(LSe,"STRONG",{});var Xvt=s(A4e);dvr=r(Xvt,"xlm"),Xvt.forEach(t),cvr=r(LSe," \u2014 "),nH=n(LSe,"A",{href:!0});var zvt=s(nH);fvr=r(zvt,"TFXLMForMultipleChoice"),zvt.forEach(t),mvr=r(LSe," (XLM model)"),LSe.forEach(t),gvr=i(_e),SM=n(_e,"LI",{});var xSe=s(SM);y4e=n(xSe,"STRONG",{});var Qvt=s(y4e);hvr=r(Qvt,"xlm-roberta"),Qvt.forEach(t),pvr=r(xSe," \u2014 "),sH=n(xSe,"A",{href:!0});var Wvt=s(sH);uvr=r(Wvt,"TFXLMRobertaForMultipleChoice"),Wvt.forEach(t),_vr=r(xSe," (XLM-RoBERTa model)"),xSe.forEach(t),bvr=i(_e),RM=n(_e,"LI",{});var $Se=s(RM);L4e=n($Se,"STRONG",{});var Hvt=s(L4e);vvr=r(Hvt,"xlnet"),Hvt.forEach(t),Fvr=r($Se," \u2014 "),lH=n($Se,"A",{href:!0});var Uvt=s(lH);Tvr=r(Uvt,"TFXLNetForMultipleChoice"),Uvt.forEach(t),Mvr=r($Se," (XLNet model)"),$Se.forEach(t),_e.forEach(t),Evr=i(Cl),T(BM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),DIe=i(f),ic=n(f,"H2",{class:!0});var QNe=s(ic);PM=n(QNe,"A",{id:!0,class:!0,href:!0});var Jvt=s(PM);x4e=n(Jvt,"SPAN",{});var Yvt=s(x4e);T(mx.$$.fragment,Yvt),Yvt.forEach(t),Jvt.forEach(t),Cvr=i(QNe),$4e=n(QNe,"SPAN",{});var Kvt=s($4e);wvr=r(Kvt,"TFAutoModelForNextSentencePrediction"),Kvt.forEach(t),QNe.forEach(t),GIe=i(f),nr=n(f,"DIV",{class:!0});var wl=s(nr);T(gx.$$.fragment,wl),Avr=i(wl),dc=n(wl,"P",{});var lZ=s(dc);yvr=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iH=n(lZ,"A",{href:!0});var Zvt=s(iH);Lvr=r(Zvt,"from_pretrained()"),Zvt.forEach(t),xvr=r(lZ," class method or the "),dH=n(lZ,"A",{href:!0});var eFt=s(dH);$vr=r(eFt,"from_config()"),eFt.forEach(t),kvr=r(lZ,` class
method.`),lZ.forEach(t),Svr=i(wl),hx=n(wl,"P",{});var WNe=s(hx);Rvr=r(WNe,"This class cannot be instantiated directly using "),k4e=n(WNe,"CODE",{});var oFt=s(k4e);Bvr=r(oFt,"__init__()"),oFt.forEach(t),Pvr=r(WNe," (throws an error)."),WNe.forEach(t),Ivr=i(wl),Rt=n(wl,"DIV",{class:!0});var nA=s(Rt);T(px.$$.fragment,nA),qvr=i(nA),S4e=n(nA,"P",{});var rFt=s(S4e);Nvr=r(rFt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),rFt.forEach(t),jvr=i(nA),cc=n(nA,"P",{});var iZ=s(cc);Dvr=r(iZ,`Note:
Loading a model from its configuration file does `),R4e=n(iZ,"STRONG",{});var tFt=s(R4e);Gvr=r(tFt,"not"),tFt.forEach(t),Ovr=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=n(iZ,"A",{href:!0});var aFt=s(cH);Vvr=r(aFt,"from_pretrained()"),aFt.forEach(t),Xvr=r(iZ," to load the model weights."),iZ.forEach(t),zvr=i(nA),T(IM.$$.fragment,nA),nA.forEach(t),Qvr=i(wl),Rr=n(wl,"DIV",{class:!0});var Al=s(Rr);T(ux.$$.fragment,Al),Wvr=i(Al),B4e=n(Al,"P",{});var nFt=s(B4e);Hvr=r(nFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nFt.forEach(t),Uvr=i(Al),sn=n(Al,"P",{});var sA=s(sn);Jvr=r(sA,"The model class to instantiate is selected based on the "),P4e=n(sA,"CODE",{});var sFt=s(P4e);Yvr=r(sFt,"model_type"),sFt.forEach(t),Kvr=r(sA,` property of the config object (either
passed as an argument or loaded from `),I4e=n(sA,"CODE",{});var lFt=s(I4e);Zvr=r(lFt,"pretrained_model_name_or_path"),lFt.forEach(t),eFr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q4e=n(sA,"CODE",{});var iFt=s(q4e);oFr=r(iFt,"pretrained_model_name_or_path"),iFt.forEach(t),rFr=r(sA,":"),sA.forEach(t),tFr=i(Al),_x=n(Al,"UL",{});var HNe=s(_x);qM=n(HNe,"LI",{});var kSe=s(qM);N4e=n(kSe,"STRONG",{});var dFt=s(N4e);aFr=r(dFt,"bert"),dFt.forEach(t),nFr=r(kSe," \u2014 "),fH=n(kSe,"A",{href:!0});var cFt=s(fH);sFr=r(cFt,"TFBertForNextSentencePrediction"),cFt.forEach(t),lFr=r(kSe," (BERT model)"),kSe.forEach(t),iFr=i(HNe),NM=n(HNe,"LI",{});var SSe=s(NM);j4e=n(SSe,"STRONG",{});var fFt=s(j4e);dFr=r(fFt,"mobilebert"),fFt.forEach(t),cFr=r(SSe," \u2014 "),mH=n(SSe,"A",{href:!0});var mFt=s(mH);fFr=r(mFt,"TFMobileBertForNextSentencePrediction"),mFt.forEach(t),mFr=r(SSe," (MobileBERT model)"),SSe.forEach(t),HNe.forEach(t),gFr=i(Al),T(jM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),OIe=i(f),fc=n(f,"H2",{class:!0});var UNe=s(fc);DM=n(UNe,"A",{id:!0,class:!0,href:!0});var gFt=s(DM);D4e=n(gFt,"SPAN",{});var hFt=s(D4e);T(bx.$$.fragment,hFt),hFt.forEach(t),gFt.forEach(t),hFr=i(UNe),G4e=n(UNe,"SPAN",{});var pFt=s(G4e);pFr=r(pFt,"TFAutoModelForTableQuestionAnswering"),pFt.forEach(t),UNe.forEach(t),VIe=i(f),sr=n(f,"DIV",{class:!0});var yl=s(sr);T(vx.$$.fragment,yl),uFr=i(yl),mc=n(yl,"P",{});var dZ=s(mc);_Fr=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gH=n(dZ,"A",{href:!0});var uFt=s(gH);bFr=r(uFt,"from_pretrained()"),uFt.forEach(t),vFr=r(dZ," class method or the "),hH=n(dZ,"A",{href:!0});var _Ft=s(hH);FFr=r(_Ft,"from_config()"),_Ft.forEach(t),TFr=r(dZ,` class
method.`),dZ.forEach(t),MFr=i(yl),Fx=n(yl,"P",{});var JNe=s(Fx);EFr=r(JNe,"This class cannot be instantiated directly using "),O4e=n(JNe,"CODE",{});var bFt=s(O4e);CFr=r(bFt,"__init__()"),bFt.forEach(t),wFr=r(JNe," (throws an error)."),JNe.forEach(t),AFr=i(yl),Bt=n(yl,"DIV",{class:!0});var lA=s(Bt);T(Tx.$$.fragment,lA),yFr=i(lA),V4e=n(lA,"P",{});var vFt=s(V4e);LFr=r(vFt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vFt.forEach(t),xFr=i(lA),gc=n(lA,"P",{});var cZ=s(gc);$Fr=r(cZ,`Note:
Loading a model from its configuration file does `),X4e=n(cZ,"STRONG",{});var FFt=s(X4e);kFr=r(FFt,"not"),FFt.forEach(t),SFr=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=n(cZ,"A",{href:!0});var TFt=s(pH);RFr=r(TFt,"from_pretrained()"),TFt.forEach(t),BFr=r(cZ," to load the model weights."),cZ.forEach(t),PFr=i(lA),T(GM.$$.fragment,lA),lA.forEach(t),IFr=i(yl),Br=n(yl,"DIV",{class:!0});var Ll=s(Br);T(Mx.$$.fragment,Ll),qFr=i(Ll),z4e=n(Ll,"P",{});var MFt=s(z4e);NFr=r(MFt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),MFt.forEach(t),jFr=i(Ll),ln=n(Ll,"P",{});var iA=s(ln);DFr=r(iA,"The model class to instantiate is selected based on the "),Q4e=n(iA,"CODE",{});var EFt=s(Q4e);GFr=r(EFt,"model_type"),EFt.forEach(t),OFr=r(iA,` property of the config object (either
passed as an argument or loaded from `),W4e=n(iA,"CODE",{});var CFt=s(W4e);VFr=r(CFt,"pretrained_model_name_or_path"),CFt.forEach(t),XFr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H4e=n(iA,"CODE",{});var wFt=s(H4e);zFr=r(wFt,"pretrained_model_name_or_path"),wFt.forEach(t),QFr=r(iA,":"),iA.forEach(t),WFr=i(Ll),U4e=n(Ll,"UL",{});var AFt=s(U4e);OM=n(AFt,"LI",{});var RSe=s(OM);J4e=n(RSe,"STRONG",{});var yFt=s(J4e);HFr=r(yFt,"tapas"),yFt.forEach(t),UFr=r(RSe," \u2014 "),uH=n(RSe,"A",{href:!0});var LFt=s(uH);JFr=r(LFt,"TFTapasForQuestionAnswering"),LFt.forEach(t),YFr=r(RSe," (TAPAS model)"),RSe.forEach(t),AFt.forEach(t),KFr=i(Ll),T(VM.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),XIe=i(f),hc=n(f,"H2",{class:!0});var YNe=s(hc);XM=n(YNe,"A",{id:!0,class:!0,href:!0});var xFt=s(XM);Y4e=n(xFt,"SPAN",{});var $Ft=s(Y4e);T(Ex.$$.fragment,$Ft),$Ft.forEach(t),xFt.forEach(t),ZFr=i(YNe),K4e=n(YNe,"SPAN",{});var kFt=s(K4e);e0r=r(kFt,"TFAutoModelForTokenClassification"),kFt.forEach(t),YNe.forEach(t),zIe=i(f),lr=n(f,"DIV",{class:!0});var xl=s(lr);T(Cx.$$.fragment,xl),o0r=i(xl),pc=n(xl,"P",{});var fZ=s(pc);r0r=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_H=n(fZ,"A",{href:!0});var SFt=s(_H);t0r=r(SFt,"from_pretrained()"),SFt.forEach(t),a0r=r(fZ," class method or the "),bH=n(fZ,"A",{href:!0});var RFt=s(bH);n0r=r(RFt,"from_config()"),RFt.forEach(t),s0r=r(fZ,` class
method.`),fZ.forEach(t),l0r=i(xl),wx=n(xl,"P",{});var KNe=s(wx);i0r=r(KNe,"This class cannot be instantiated directly using "),Z4e=n(KNe,"CODE",{});var BFt=s(Z4e);d0r=r(BFt,"__init__()"),BFt.forEach(t),c0r=r(KNe," (throws an error)."),KNe.forEach(t),f0r=i(xl),Pt=n(xl,"DIV",{class:!0});var dA=s(Pt);T(Ax.$$.fragment,dA),m0r=i(dA),eve=n(dA,"P",{});var PFt=s(eve);g0r=r(PFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),PFt.forEach(t),h0r=i(dA),uc=n(dA,"P",{});var mZ=s(uc);p0r=r(mZ,`Note:
Loading a model from its configuration file does `),ove=n(mZ,"STRONG",{});var IFt=s(ove);u0r=r(IFt,"not"),IFt.forEach(t),_0r=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n(mZ,"A",{href:!0});var qFt=s(vH);b0r=r(qFt,"from_pretrained()"),qFt.forEach(t),v0r=r(mZ," to load the model weights."),mZ.forEach(t),F0r=i(dA),T(zM.$$.fragment,dA),dA.forEach(t),T0r=i(xl),Pr=n(xl,"DIV",{class:!0});var $l=s(Pr);T(yx.$$.fragment,$l),M0r=i($l),rve=n($l,"P",{});var NFt=s(rve);E0r=r(NFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),NFt.forEach(t),C0r=i($l),dn=n($l,"P",{});var cA=s(dn);w0r=r(cA,"The model class to instantiate is selected based on the "),tve=n(cA,"CODE",{});var jFt=s(tve);A0r=r(jFt,"model_type"),jFt.forEach(t),y0r=r(cA,` property of the config object (either
passed as an argument or loaded from `),ave=n(cA,"CODE",{});var DFt=s(ave);L0r=r(DFt,"pretrained_model_name_or_path"),DFt.forEach(t),x0r=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=n(cA,"CODE",{});var GFt=s(nve);$0r=r(GFt,"pretrained_model_name_or_path"),GFt.forEach(t),k0r=r(cA,":"),cA.forEach(t),S0r=i($l),de=n($l,"UL",{});var me=s(de);QM=n(me,"LI",{});var BSe=s(QM);sve=n(BSe,"STRONG",{});var OFt=s(sve);R0r=r(OFt,"albert"),OFt.forEach(t),B0r=r(BSe," \u2014 "),FH=n(BSe,"A",{href:!0});var VFt=s(FH);P0r=r(VFt,"TFAlbertForTokenClassification"),VFt.forEach(t),I0r=r(BSe," (ALBERT model)"),BSe.forEach(t),q0r=i(me),WM=n(me,"LI",{});var PSe=s(WM);lve=n(PSe,"STRONG",{});var XFt=s(lve);N0r=r(XFt,"bert"),XFt.forEach(t),j0r=r(PSe," \u2014 "),TH=n(PSe,"A",{href:!0});var zFt=s(TH);D0r=r(zFt,"TFBertForTokenClassification"),zFt.forEach(t),G0r=r(PSe," (BERT model)"),PSe.forEach(t),O0r=i(me),HM=n(me,"LI",{});var ISe=s(HM);ive=n(ISe,"STRONG",{});var QFt=s(ive);V0r=r(QFt,"camembert"),QFt.forEach(t),X0r=r(ISe," \u2014 "),MH=n(ISe,"A",{href:!0});var WFt=s(MH);z0r=r(WFt,"TFCamembertForTokenClassification"),WFt.forEach(t),Q0r=r(ISe," (CamemBERT model)"),ISe.forEach(t),W0r=i(me),UM=n(me,"LI",{});var qSe=s(UM);dve=n(qSe,"STRONG",{});var HFt=s(dve);H0r=r(HFt,"convbert"),HFt.forEach(t),U0r=r(qSe," \u2014 "),EH=n(qSe,"A",{href:!0});var UFt=s(EH);J0r=r(UFt,"TFConvBertForTokenClassification"),UFt.forEach(t),Y0r=r(qSe," (ConvBERT model)"),qSe.forEach(t),K0r=i(me),JM=n(me,"LI",{});var NSe=s(JM);cve=n(NSe,"STRONG",{});var JFt=s(cve);Z0r=r(JFt,"deberta"),JFt.forEach(t),e6r=r(NSe," \u2014 "),CH=n(NSe,"A",{href:!0});var YFt=s(CH);o6r=r(YFt,"TFDebertaForTokenClassification"),YFt.forEach(t),r6r=r(NSe," (DeBERTa model)"),NSe.forEach(t),t6r=i(me),YM=n(me,"LI",{});var jSe=s(YM);fve=n(jSe,"STRONG",{});var KFt=s(fve);a6r=r(KFt,"deberta-v2"),KFt.forEach(t),n6r=r(jSe," \u2014 "),wH=n(jSe,"A",{href:!0});var ZFt=s(wH);s6r=r(ZFt,"TFDebertaV2ForTokenClassification"),ZFt.forEach(t),l6r=r(jSe," (DeBERTa-v2 model)"),jSe.forEach(t),i6r=i(me),KM=n(me,"LI",{});var DSe=s(KM);mve=n(DSe,"STRONG",{});var e0t=s(mve);d6r=r(e0t,"distilbert"),e0t.forEach(t),c6r=r(DSe," \u2014 "),AH=n(DSe,"A",{href:!0});var o0t=s(AH);f6r=r(o0t,"TFDistilBertForTokenClassification"),o0t.forEach(t),m6r=r(DSe," (DistilBERT model)"),DSe.forEach(t),g6r=i(me),ZM=n(me,"LI",{});var GSe=s(ZM);gve=n(GSe,"STRONG",{});var r0t=s(gve);h6r=r(r0t,"electra"),r0t.forEach(t),p6r=r(GSe," \u2014 "),yH=n(GSe,"A",{href:!0});var t0t=s(yH);u6r=r(t0t,"TFElectraForTokenClassification"),t0t.forEach(t),_6r=r(GSe," (ELECTRA model)"),GSe.forEach(t),b6r=i(me),eE=n(me,"LI",{});var OSe=s(eE);hve=n(OSe,"STRONG",{});var a0t=s(hve);v6r=r(a0t,"flaubert"),a0t.forEach(t),F6r=r(OSe," \u2014 "),LH=n(OSe,"A",{href:!0});var n0t=s(LH);T6r=r(n0t,"TFFlaubertForTokenClassification"),n0t.forEach(t),M6r=r(OSe," (FlauBERT model)"),OSe.forEach(t),E6r=i(me),oE=n(me,"LI",{});var VSe=s(oE);pve=n(VSe,"STRONG",{});var s0t=s(pve);C6r=r(s0t,"funnel"),s0t.forEach(t),w6r=r(VSe," \u2014 "),xH=n(VSe,"A",{href:!0});var l0t=s(xH);A6r=r(l0t,"TFFunnelForTokenClassification"),l0t.forEach(t),y6r=r(VSe," (Funnel Transformer model)"),VSe.forEach(t),L6r=i(me),rE=n(me,"LI",{});var XSe=s(rE);uve=n(XSe,"STRONG",{});var i0t=s(uve);x6r=r(i0t,"layoutlm"),i0t.forEach(t),$6r=r(XSe," \u2014 "),$H=n(XSe,"A",{href:!0});var d0t=s($H);k6r=r(d0t,"TFLayoutLMForTokenClassification"),d0t.forEach(t),S6r=r(XSe," (LayoutLM model)"),XSe.forEach(t),R6r=i(me),tE=n(me,"LI",{});var zSe=s(tE);_ve=n(zSe,"STRONG",{});var c0t=s(_ve);B6r=r(c0t,"longformer"),c0t.forEach(t),P6r=r(zSe," \u2014 "),kH=n(zSe,"A",{href:!0});var f0t=s(kH);I6r=r(f0t,"TFLongformerForTokenClassification"),f0t.forEach(t),q6r=r(zSe," (Longformer model)"),zSe.forEach(t),N6r=i(me),aE=n(me,"LI",{});var QSe=s(aE);bve=n(QSe,"STRONG",{});var m0t=s(bve);j6r=r(m0t,"mobilebert"),m0t.forEach(t),D6r=r(QSe," \u2014 "),SH=n(QSe,"A",{href:!0});var g0t=s(SH);G6r=r(g0t,"TFMobileBertForTokenClassification"),g0t.forEach(t),O6r=r(QSe," (MobileBERT model)"),QSe.forEach(t),V6r=i(me),nE=n(me,"LI",{});var WSe=s(nE);vve=n(WSe,"STRONG",{});var h0t=s(vve);X6r=r(h0t,"mpnet"),h0t.forEach(t),z6r=r(WSe," \u2014 "),RH=n(WSe,"A",{href:!0});var p0t=s(RH);Q6r=r(p0t,"TFMPNetForTokenClassification"),p0t.forEach(t),W6r=r(WSe," (MPNet model)"),WSe.forEach(t),H6r=i(me),sE=n(me,"LI",{});var HSe=s(sE);Fve=n(HSe,"STRONG",{});var u0t=s(Fve);U6r=r(u0t,"rembert"),u0t.forEach(t),J6r=r(HSe," \u2014 "),BH=n(HSe,"A",{href:!0});var _0t=s(BH);Y6r=r(_0t,"TFRemBertForTokenClassification"),_0t.forEach(t),K6r=r(HSe," (RemBERT model)"),HSe.forEach(t),Z6r=i(me),lE=n(me,"LI",{});var USe=s(lE);Tve=n(USe,"STRONG",{});var b0t=s(Tve);eTr=r(b0t,"roberta"),b0t.forEach(t),oTr=r(USe," \u2014 "),PH=n(USe,"A",{href:!0});var v0t=s(PH);rTr=r(v0t,"TFRobertaForTokenClassification"),v0t.forEach(t),tTr=r(USe," (RoBERTa model)"),USe.forEach(t),aTr=i(me),iE=n(me,"LI",{});var JSe=s(iE);Mve=n(JSe,"STRONG",{});var F0t=s(Mve);nTr=r(F0t,"roformer"),F0t.forEach(t),sTr=r(JSe," \u2014 "),IH=n(JSe,"A",{href:!0});var T0t=s(IH);lTr=r(T0t,"TFRoFormerForTokenClassification"),T0t.forEach(t),iTr=r(JSe," (RoFormer model)"),JSe.forEach(t),dTr=i(me),dE=n(me,"LI",{});var YSe=s(dE);Eve=n(YSe,"STRONG",{});var M0t=s(Eve);cTr=r(M0t,"xlm"),M0t.forEach(t),fTr=r(YSe," \u2014 "),qH=n(YSe,"A",{href:!0});var E0t=s(qH);mTr=r(E0t,"TFXLMForTokenClassification"),E0t.forEach(t),gTr=r(YSe," (XLM model)"),YSe.forEach(t),hTr=i(me),cE=n(me,"LI",{});var KSe=s(cE);Cve=n(KSe,"STRONG",{});var C0t=s(Cve);pTr=r(C0t,"xlm-roberta"),C0t.forEach(t),uTr=r(KSe," \u2014 "),NH=n(KSe,"A",{href:!0});var w0t=s(NH);_Tr=r(w0t,"TFXLMRobertaForTokenClassification"),w0t.forEach(t),bTr=r(KSe," (XLM-RoBERTa model)"),KSe.forEach(t),vTr=i(me),fE=n(me,"LI",{});var ZSe=s(fE);wve=n(ZSe,"STRONG",{});var A0t=s(wve);FTr=r(A0t,"xlnet"),A0t.forEach(t),TTr=r(ZSe," \u2014 "),jH=n(ZSe,"A",{href:!0});var y0t=s(jH);MTr=r(y0t,"TFXLNetForTokenClassification"),y0t.forEach(t),ETr=r(ZSe," (XLNet model)"),ZSe.forEach(t),me.forEach(t),CTr=i($l),T(mE.$$.fragment,$l),$l.forEach(t),xl.forEach(t),QIe=i(f),_c=n(f,"H2",{class:!0});var ZNe=s(_c);gE=n(ZNe,"A",{id:!0,class:!0,href:!0});var L0t=s(gE);Ave=n(L0t,"SPAN",{});var x0t=s(Ave);T(Lx.$$.fragment,x0t),x0t.forEach(t),L0t.forEach(t),wTr=i(ZNe),yve=n(ZNe,"SPAN",{});var $0t=s(yve);ATr=r($0t,"TFAutoModelForQuestionAnswering"),$0t.forEach(t),ZNe.forEach(t),WIe=i(f),ir=n(f,"DIV",{class:!0});var kl=s(ir);T(xx.$$.fragment,kl),yTr=i(kl),bc=n(kl,"P",{});var gZ=s(bc);LTr=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DH=n(gZ,"A",{href:!0});var k0t=s(DH);xTr=r(k0t,"from_pretrained()"),k0t.forEach(t),$Tr=r(gZ," class method or the "),GH=n(gZ,"A",{href:!0});var S0t=s(GH);kTr=r(S0t,"from_config()"),S0t.forEach(t),STr=r(gZ,` class
method.`),gZ.forEach(t),RTr=i(kl),$x=n(kl,"P",{});var eje=s($x);BTr=r(eje,"This class cannot be instantiated directly using "),Lve=n(eje,"CODE",{});var R0t=s(Lve);PTr=r(R0t,"__init__()"),R0t.forEach(t),ITr=r(eje," (throws an error)."),eje.forEach(t),qTr=i(kl),It=n(kl,"DIV",{class:!0});var fA=s(It);T(kx.$$.fragment,fA),NTr=i(fA),xve=n(fA,"P",{});var B0t=s(xve);jTr=r(B0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),B0t.forEach(t),DTr=i(fA),vc=n(fA,"P",{});var hZ=s(vc);GTr=r(hZ,`Note:
Loading a model from its configuration file does `),$ve=n(hZ,"STRONG",{});var P0t=s($ve);OTr=r(P0t,"not"),P0t.forEach(t),VTr=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=n(hZ,"A",{href:!0});var I0t=s(OH);XTr=r(I0t,"from_pretrained()"),I0t.forEach(t),zTr=r(hZ," to load the model weights."),hZ.forEach(t),QTr=i(fA),T(hE.$$.fragment,fA),fA.forEach(t),WTr=i(kl),Ir=n(kl,"DIV",{class:!0});var Sl=s(Ir);T(Sx.$$.fragment,Sl),HTr=i(Sl),kve=n(Sl,"P",{});var q0t=s(kve);UTr=r(q0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),q0t.forEach(t),JTr=i(Sl),cn=n(Sl,"P",{});var mA=s(cn);YTr=r(mA,"The model class to instantiate is selected based on the "),Sve=n(mA,"CODE",{});var N0t=s(Sve);KTr=r(N0t,"model_type"),N0t.forEach(t),ZTr=r(mA,` property of the config object (either
passed as an argument or loaded from `),Rve=n(mA,"CODE",{});var j0t=s(Rve);eMr=r(j0t,"pretrained_model_name_or_path"),j0t.forEach(t),oMr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=n(mA,"CODE",{});var D0t=s(Bve);rMr=r(D0t,"pretrained_model_name_or_path"),D0t.forEach(t),tMr=r(mA,":"),mA.forEach(t),aMr=i(Sl),ce=n(Sl,"UL",{});var ge=s(ce);pE=n(ge,"LI",{});var eRe=s(pE);Pve=n(eRe,"STRONG",{});var G0t=s(Pve);nMr=r(G0t,"albert"),G0t.forEach(t),sMr=r(eRe," \u2014 "),VH=n(eRe,"A",{href:!0});var O0t=s(VH);lMr=r(O0t,"TFAlbertForQuestionAnswering"),O0t.forEach(t),iMr=r(eRe," (ALBERT model)"),eRe.forEach(t),dMr=i(ge),uE=n(ge,"LI",{});var oRe=s(uE);Ive=n(oRe,"STRONG",{});var V0t=s(Ive);cMr=r(V0t,"bert"),V0t.forEach(t),fMr=r(oRe," \u2014 "),XH=n(oRe,"A",{href:!0});var X0t=s(XH);mMr=r(X0t,"TFBertForQuestionAnswering"),X0t.forEach(t),gMr=r(oRe," (BERT model)"),oRe.forEach(t),hMr=i(ge),_E=n(ge,"LI",{});var rRe=s(_E);qve=n(rRe,"STRONG",{});var z0t=s(qve);pMr=r(z0t,"camembert"),z0t.forEach(t),uMr=r(rRe," \u2014 "),zH=n(rRe,"A",{href:!0});var Q0t=s(zH);_Mr=r(Q0t,"TFCamembertForQuestionAnswering"),Q0t.forEach(t),bMr=r(rRe," (CamemBERT model)"),rRe.forEach(t),vMr=i(ge),bE=n(ge,"LI",{});var tRe=s(bE);Nve=n(tRe,"STRONG",{});var W0t=s(Nve);FMr=r(W0t,"convbert"),W0t.forEach(t),TMr=r(tRe," \u2014 "),QH=n(tRe,"A",{href:!0});var H0t=s(QH);MMr=r(H0t,"TFConvBertForQuestionAnswering"),H0t.forEach(t),EMr=r(tRe," (ConvBERT model)"),tRe.forEach(t),CMr=i(ge),vE=n(ge,"LI",{});var aRe=s(vE);jve=n(aRe,"STRONG",{});var U0t=s(jve);wMr=r(U0t,"deberta"),U0t.forEach(t),AMr=r(aRe," \u2014 "),WH=n(aRe,"A",{href:!0});var J0t=s(WH);yMr=r(J0t,"TFDebertaForQuestionAnswering"),J0t.forEach(t),LMr=r(aRe," (DeBERTa model)"),aRe.forEach(t),xMr=i(ge),FE=n(ge,"LI",{});var nRe=s(FE);Dve=n(nRe,"STRONG",{});var Y0t=s(Dve);$Mr=r(Y0t,"deberta-v2"),Y0t.forEach(t),kMr=r(nRe," \u2014 "),HH=n(nRe,"A",{href:!0});var K0t=s(HH);SMr=r(K0t,"TFDebertaV2ForQuestionAnswering"),K0t.forEach(t),RMr=r(nRe," (DeBERTa-v2 model)"),nRe.forEach(t),BMr=i(ge),TE=n(ge,"LI",{});var sRe=s(TE);Gve=n(sRe,"STRONG",{});var Z0t=s(Gve);PMr=r(Z0t,"distilbert"),Z0t.forEach(t),IMr=r(sRe," \u2014 "),UH=n(sRe,"A",{href:!0});var e6t=s(UH);qMr=r(e6t,"TFDistilBertForQuestionAnswering"),e6t.forEach(t),NMr=r(sRe," (DistilBERT model)"),sRe.forEach(t),jMr=i(ge),ME=n(ge,"LI",{});var lRe=s(ME);Ove=n(lRe,"STRONG",{});var o6t=s(Ove);DMr=r(o6t,"electra"),o6t.forEach(t),GMr=r(lRe," \u2014 "),JH=n(lRe,"A",{href:!0});var r6t=s(JH);OMr=r(r6t,"TFElectraForQuestionAnswering"),r6t.forEach(t),VMr=r(lRe," (ELECTRA model)"),lRe.forEach(t),XMr=i(ge),EE=n(ge,"LI",{});var iRe=s(EE);Vve=n(iRe,"STRONG",{});var t6t=s(Vve);zMr=r(t6t,"flaubert"),t6t.forEach(t),QMr=r(iRe," \u2014 "),YH=n(iRe,"A",{href:!0});var a6t=s(YH);WMr=r(a6t,"TFFlaubertForQuestionAnsweringSimple"),a6t.forEach(t),HMr=r(iRe," (FlauBERT model)"),iRe.forEach(t),UMr=i(ge),CE=n(ge,"LI",{});var dRe=s(CE);Xve=n(dRe,"STRONG",{});var n6t=s(Xve);JMr=r(n6t,"funnel"),n6t.forEach(t),YMr=r(dRe," \u2014 "),KH=n(dRe,"A",{href:!0});var s6t=s(KH);KMr=r(s6t,"TFFunnelForQuestionAnswering"),s6t.forEach(t),ZMr=r(dRe," (Funnel Transformer model)"),dRe.forEach(t),eEr=i(ge),wE=n(ge,"LI",{});var cRe=s(wE);zve=n(cRe,"STRONG",{});var l6t=s(zve);oEr=r(l6t,"gptj"),l6t.forEach(t),rEr=r(cRe," \u2014 "),ZH=n(cRe,"A",{href:!0});var i6t=s(ZH);tEr=r(i6t,"TFGPTJForQuestionAnswering"),i6t.forEach(t),aEr=r(cRe," (GPT-J model)"),cRe.forEach(t),nEr=i(ge),AE=n(ge,"LI",{});var fRe=s(AE);Qve=n(fRe,"STRONG",{});var d6t=s(Qve);sEr=r(d6t,"longformer"),d6t.forEach(t),lEr=r(fRe," \u2014 "),eU=n(fRe,"A",{href:!0});var c6t=s(eU);iEr=r(c6t,"TFLongformerForQuestionAnswering"),c6t.forEach(t),dEr=r(fRe," (Longformer model)"),fRe.forEach(t),cEr=i(ge),yE=n(ge,"LI",{});var mRe=s(yE);Wve=n(mRe,"STRONG",{});var f6t=s(Wve);fEr=r(f6t,"mobilebert"),f6t.forEach(t),mEr=r(mRe," \u2014 "),oU=n(mRe,"A",{href:!0});var m6t=s(oU);gEr=r(m6t,"TFMobileBertForQuestionAnswering"),m6t.forEach(t),hEr=r(mRe," (MobileBERT model)"),mRe.forEach(t),pEr=i(ge),LE=n(ge,"LI",{});var gRe=s(LE);Hve=n(gRe,"STRONG",{});var g6t=s(Hve);uEr=r(g6t,"mpnet"),g6t.forEach(t),_Er=r(gRe," \u2014 "),rU=n(gRe,"A",{href:!0});var h6t=s(rU);bEr=r(h6t,"TFMPNetForQuestionAnswering"),h6t.forEach(t),vEr=r(gRe," (MPNet model)"),gRe.forEach(t),FEr=i(ge),xE=n(ge,"LI",{});var hRe=s(xE);Uve=n(hRe,"STRONG",{});var p6t=s(Uve);TEr=r(p6t,"rembert"),p6t.forEach(t),MEr=r(hRe," \u2014 "),tU=n(hRe,"A",{href:!0});var u6t=s(tU);EEr=r(u6t,"TFRemBertForQuestionAnswering"),u6t.forEach(t),CEr=r(hRe," (RemBERT model)"),hRe.forEach(t),wEr=i(ge),$E=n(ge,"LI",{});var pRe=s($E);Jve=n(pRe,"STRONG",{});var _6t=s(Jve);AEr=r(_6t,"roberta"),_6t.forEach(t),yEr=r(pRe," \u2014 "),aU=n(pRe,"A",{href:!0});var b6t=s(aU);LEr=r(b6t,"TFRobertaForQuestionAnswering"),b6t.forEach(t),xEr=r(pRe," (RoBERTa model)"),pRe.forEach(t),$Er=i(ge),kE=n(ge,"LI",{});var uRe=s(kE);Yve=n(uRe,"STRONG",{});var v6t=s(Yve);kEr=r(v6t,"roformer"),v6t.forEach(t),SEr=r(uRe," \u2014 "),nU=n(uRe,"A",{href:!0});var F6t=s(nU);REr=r(F6t,"TFRoFormerForQuestionAnswering"),F6t.forEach(t),BEr=r(uRe," (RoFormer model)"),uRe.forEach(t),PEr=i(ge),SE=n(ge,"LI",{});var _Re=s(SE);Kve=n(_Re,"STRONG",{});var T6t=s(Kve);IEr=r(T6t,"xlm"),T6t.forEach(t),qEr=r(_Re," \u2014 "),sU=n(_Re,"A",{href:!0});var M6t=s(sU);NEr=r(M6t,"TFXLMForQuestionAnsweringSimple"),M6t.forEach(t),jEr=r(_Re," (XLM model)"),_Re.forEach(t),DEr=i(ge),RE=n(ge,"LI",{});var bRe=s(RE);Zve=n(bRe,"STRONG",{});var E6t=s(Zve);GEr=r(E6t,"xlm-roberta"),E6t.forEach(t),OEr=r(bRe," \u2014 "),lU=n(bRe,"A",{href:!0});var C6t=s(lU);VEr=r(C6t,"TFXLMRobertaForQuestionAnswering"),C6t.forEach(t),XEr=r(bRe," (XLM-RoBERTa model)"),bRe.forEach(t),zEr=i(ge),BE=n(ge,"LI",{});var vRe=s(BE);eFe=n(vRe,"STRONG",{});var w6t=s(eFe);QEr=r(w6t,"xlnet"),w6t.forEach(t),WEr=r(vRe," \u2014 "),iU=n(vRe,"A",{href:!0});var A6t=s(iU);HEr=r(A6t,"TFXLNetForQuestionAnsweringSimple"),A6t.forEach(t),UEr=r(vRe," (XLNet model)"),vRe.forEach(t),ge.forEach(t),JEr=i(Sl),T(PE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),HIe=i(f),Fc=n(f,"H2",{class:!0});var oje=s(Fc);IE=n(oje,"A",{id:!0,class:!0,href:!0});var y6t=s(IE);oFe=n(y6t,"SPAN",{});var L6t=s(oFe);T(Rx.$$.fragment,L6t),L6t.forEach(t),y6t.forEach(t),YEr=i(oje),rFe=n(oje,"SPAN",{});var x6t=s(rFe);KEr=r(x6t,"TFAutoModelForVision2Seq"),x6t.forEach(t),oje.forEach(t),UIe=i(f),dr=n(f,"DIV",{class:!0});var Rl=s(dr);T(Bx.$$.fragment,Rl),ZEr=i(Rl),Tc=n(Rl,"P",{});var pZ=s(Tc);eCr=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dU=n(pZ,"A",{href:!0});var $6t=s(dU);oCr=r($6t,"from_pretrained()"),$6t.forEach(t),rCr=r(pZ," class method or the "),cU=n(pZ,"A",{href:!0});var k6t=s(cU);tCr=r(k6t,"from_config()"),k6t.forEach(t),aCr=r(pZ,` class
method.`),pZ.forEach(t),nCr=i(Rl),Px=n(Rl,"P",{});var rje=s(Px);sCr=r(rje,"This class cannot be instantiated directly using "),tFe=n(rje,"CODE",{});var S6t=s(tFe);lCr=r(S6t,"__init__()"),S6t.forEach(t),iCr=r(rje," (throws an error)."),rje.forEach(t),dCr=i(Rl),qt=n(Rl,"DIV",{class:!0});var gA=s(qt);T(Ix.$$.fragment,gA),cCr=i(gA),aFe=n(gA,"P",{});var R6t=s(aFe);fCr=r(R6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),R6t.forEach(t),mCr=i(gA),Mc=n(gA,"P",{});var uZ=s(Mc);gCr=r(uZ,`Note:
Loading a model from its configuration file does `),nFe=n(uZ,"STRONG",{});var B6t=s(nFe);hCr=r(B6t,"not"),B6t.forEach(t),pCr=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(uZ,"A",{href:!0});var P6t=s(fU);uCr=r(P6t,"from_pretrained()"),P6t.forEach(t),_Cr=r(uZ," to load the model weights."),uZ.forEach(t),bCr=i(gA),T(qE.$$.fragment,gA),gA.forEach(t),vCr=i(Rl),qr=n(Rl,"DIV",{class:!0});var Bl=s(qr);T(qx.$$.fragment,Bl),FCr=i(Bl),sFe=n(Bl,"P",{});var I6t=s(sFe);TCr=r(I6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),I6t.forEach(t),MCr=i(Bl),fn=n(Bl,"P",{});var hA=s(fn);ECr=r(hA,"The model class to instantiate is selected based on the "),lFe=n(hA,"CODE",{});var q6t=s(lFe);CCr=r(q6t,"model_type"),q6t.forEach(t),wCr=r(hA,` property of the config object (either
passed as an argument or loaded from `),iFe=n(hA,"CODE",{});var N6t=s(iFe);ACr=r(N6t,"pretrained_model_name_or_path"),N6t.forEach(t),yCr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=n(hA,"CODE",{});var j6t=s(dFe);LCr=r(j6t,"pretrained_model_name_or_path"),j6t.forEach(t),xCr=r(hA,":"),hA.forEach(t),$Cr=i(Bl),cFe=n(Bl,"UL",{});var D6t=s(cFe);NE=n(D6t,"LI",{});var FRe=s(NE);fFe=n(FRe,"STRONG",{});var G6t=s(fFe);kCr=r(G6t,"vision-encoder-decoder"),G6t.forEach(t),SCr=r(FRe," \u2014 "),mU=n(FRe,"A",{href:!0});var O6t=s(mU);RCr=r(O6t,"TFVisionEncoderDecoderModel"),O6t.forEach(t),BCr=r(FRe," (Vision Encoder decoder model)"),FRe.forEach(t),D6t.forEach(t),PCr=i(Bl),T(jE.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),JIe=i(f),Ec=n(f,"H2",{class:!0});var tje=s(Ec);DE=n(tje,"A",{id:!0,class:!0,href:!0});var V6t=s(DE);mFe=n(V6t,"SPAN",{});var X6t=s(mFe);T(Nx.$$.fragment,X6t),X6t.forEach(t),V6t.forEach(t),ICr=i(tje),gFe=n(tje,"SPAN",{});var z6t=s(gFe);qCr=r(z6t,"TFAutoModelForSpeechSeq2Seq"),z6t.forEach(t),tje.forEach(t),YIe=i(f),cr=n(f,"DIV",{class:!0});var Pl=s(cr);T(jx.$$.fragment,Pl),NCr=i(Pl),Cc=n(Pl,"P",{});var _Z=s(Cc);jCr=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gU=n(_Z,"A",{href:!0});var Q6t=s(gU);DCr=r(Q6t,"from_pretrained()"),Q6t.forEach(t),GCr=r(_Z," class method or the "),hU=n(_Z,"A",{href:!0});var W6t=s(hU);OCr=r(W6t,"from_config()"),W6t.forEach(t),VCr=r(_Z,` class
method.`),_Z.forEach(t),XCr=i(Pl),Dx=n(Pl,"P",{});var aje=s(Dx);zCr=r(aje,"This class cannot be instantiated directly using "),hFe=n(aje,"CODE",{});var H6t=s(hFe);QCr=r(H6t,"__init__()"),H6t.forEach(t),WCr=r(aje," (throws an error)."),aje.forEach(t),HCr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var pA=s(Nt);T(Gx.$$.fragment,pA),UCr=i(pA),pFe=n(pA,"P",{});var U6t=s(pFe);JCr=r(U6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),U6t.forEach(t),YCr=i(pA),wc=n(pA,"P",{});var bZ=s(wc);KCr=r(bZ,`Note:
Loading a model from its configuration file does `),uFe=n(bZ,"STRONG",{});var J6t=s(uFe);ZCr=r(J6t,"not"),J6t.forEach(t),e5r=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(bZ,"A",{href:!0});var Y6t=s(pU);o5r=r(Y6t,"from_pretrained()"),Y6t.forEach(t),r5r=r(bZ," to load the model weights."),bZ.forEach(t),t5r=i(pA),T(GE.$$.fragment,pA),pA.forEach(t),a5r=i(Pl),Nr=n(Pl,"DIV",{class:!0});var Il=s(Nr);T(Ox.$$.fragment,Il),n5r=i(Il),_Fe=n(Il,"P",{});var K6t=s(_Fe);s5r=r(K6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),K6t.forEach(t),l5r=i(Il),mn=n(Il,"P",{});var uA=s(mn);i5r=r(uA,"The model class to instantiate is selected based on the "),bFe=n(uA,"CODE",{});var Z6t=s(bFe);d5r=r(Z6t,"model_type"),Z6t.forEach(t),c5r=r(uA,` property of the config object (either
passed as an argument or loaded from `),vFe=n(uA,"CODE",{});var eTt=s(vFe);f5r=r(eTt,"pretrained_model_name_or_path"),eTt.forEach(t),m5r=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FFe=n(uA,"CODE",{});var oTt=s(FFe);g5r=r(oTt,"pretrained_model_name_or_path"),oTt.forEach(t),h5r=r(uA,":"),uA.forEach(t),p5r=i(Il),TFe=n(Il,"UL",{});var rTt=s(TFe);OE=n(rTt,"LI",{});var TRe=s(OE);MFe=n(TRe,"STRONG",{});var tTt=s(MFe);u5r=r(tTt,"speech_to_text"),tTt.forEach(t),_5r=r(TRe," \u2014 "),uU=n(TRe,"A",{href:!0});var aTt=s(uU);b5r=r(aTt,"TFSpeech2TextForConditionalGeneration"),aTt.forEach(t),v5r=r(TRe," (Speech2Text model)"),TRe.forEach(t),rTt.forEach(t),F5r=i(Il),T(VE.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),KIe=i(f),Ac=n(f,"H2",{class:!0});var nje=s(Ac);XE=n(nje,"A",{id:!0,class:!0,href:!0});var nTt=s(XE);EFe=n(nTt,"SPAN",{});var sTt=s(EFe);T(Vx.$$.fragment,sTt),sTt.forEach(t),nTt.forEach(t),T5r=i(nje),CFe=n(nje,"SPAN",{});var lTt=s(CFe);M5r=r(lTt,"FlaxAutoModel"),lTt.forEach(t),nje.forEach(t),ZIe=i(f),fr=n(f,"DIV",{class:!0});var ql=s(fr);T(Xx.$$.fragment,ql),E5r=i(ql),yc=n(ql,"P",{});var vZ=s(yc);C5r=r(vZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_U=n(vZ,"A",{href:!0});var iTt=s(_U);w5r=r(iTt,"from_pretrained()"),iTt.forEach(t),A5r=r(vZ," class method or the "),bU=n(vZ,"A",{href:!0});var dTt=s(bU);y5r=r(dTt,"from_config()"),dTt.forEach(t),L5r=r(vZ,` class
method.`),vZ.forEach(t),x5r=i(ql),zx=n(ql,"P",{});var sje=s(zx);$5r=r(sje,"This class cannot be instantiated directly using "),wFe=n(sje,"CODE",{});var cTt=s(wFe);k5r=r(cTt,"__init__()"),cTt.forEach(t),S5r=r(sje," (throws an error)."),sje.forEach(t),R5r=i(ql),jt=n(ql,"DIV",{class:!0});var _A=s(jt);T(Qx.$$.fragment,_A),B5r=i(_A),AFe=n(_A,"P",{});var fTt=s(AFe);P5r=r(fTt,"Instantiates one of the base model classes of the library from a configuration."),fTt.forEach(t),I5r=i(_A),Lc=n(_A,"P",{});var FZ=s(Lc);q5r=r(FZ,`Note:
Loading a model from its configuration file does `),yFe=n(FZ,"STRONG",{});var mTt=s(yFe);N5r=r(mTt,"not"),mTt.forEach(t),j5r=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(FZ,"A",{href:!0});var gTt=s(vU);D5r=r(gTt,"from_pretrained()"),gTt.forEach(t),G5r=r(FZ," to load the model weights."),FZ.forEach(t),O5r=i(_A),T(zE.$$.fragment,_A),_A.forEach(t),V5r=i(ql),jr=n(ql,"DIV",{class:!0});var Nl=s(jr);T(Wx.$$.fragment,Nl),X5r=i(Nl),LFe=n(Nl,"P",{});var hTt=s(LFe);z5r=r(hTt,"Instantiate one of the base model classes of the library from a pretrained model."),hTt.forEach(t),Q5r=i(Nl),gn=n(Nl,"P",{});var bA=s(gn);W5r=r(bA,"The model class to instantiate is selected based on the "),xFe=n(bA,"CODE",{});var pTt=s(xFe);H5r=r(pTt,"model_type"),pTt.forEach(t),U5r=r(bA,` property of the config object (either
passed as an argument or loaded from `),$Fe=n(bA,"CODE",{});var uTt=s($Fe);J5r=r(uTt,"pretrained_model_name_or_path"),uTt.forEach(t),Y5r=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kFe=n(bA,"CODE",{});var _Tt=s(kFe);K5r=r(_Tt,"pretrained_model_name_or_path"),_Tt.forEach(t),Z5r=r(bA,":"),bA.forEach(t),e3r=i(Nl),re=n(Nl,"UL",{});var ne=s(re);QE=n(ne,"LI",{});var MRe=s(QE);SFe=n(MRe,"STRONG",{});var bTt=s(SFe);o3r=r(bTt,"albert"),bTt.forEach(t),r3r=r(MRe," \u2014 "),FU=n(MRe,"A",{href:!0});var vTt=s(FU);t3r=r(vTt,"FlaxAlbertModel"),vTt.forEach(t),a3r=r(MRe," (ALBERT model)"),MRe.forEach(t),n3r=i(ne),WE=n(ne,"LI",{});var ERe=s(WE);RFe=n(ERe,"STRONG",{});var FTt=s(RFe);s3r=r(FTt,"bart"),FTt.forEach(t),l3r=r(ERe," \u2014 "),TU=n(ERe,"A",{href:!0});var TTt=s(TU);i3r=r(TTt,"FlaxBartModel"),TTt.forEach(t),d3r=r(ERe," (BART model)"),ERe.forEach(t),c3r=i(ne),HE=n(ne,"LI",{});var CRe=s(HE);BFe=n(CRe,"STRONG",{});var MTt=s(BFe);f3r=r(MTt,"beit"),MTt.forEach(t),m3r=r(CRe," \u2014 "),MU=n(CRe,"A",{href:!0});var ETt=s(MU);g3r=r(ETt,"FlaxBeitModel"),ETt.forEach(t),h3r=r(CRe," (BEiT model)"),CRe.forEach(t),p3r=i(ne),UE=n(ne,"LI",{});var wRe=s(UE);PFe=n(wRe,"STRONG",{});var CTt=s(PFe);u3r=r(CTt,"bert"),CTt.forEach(t),_3r=r(wRe," \u2014 "),EU=n(wRe,"A",{href:!0});var wTt=s(EU);b3r=r(wTt,"FlaxBertModel"),wTt.forEach(t),v3r=r(wRe," (BERT model)"),wRe.forEach(t),F3r=i(ne),JE=n(ne,"LI",{});var ARe=s(JE);IFe=n(ARe,"STRONG",{});var ATt=s(IFe);T3r=r(ATt,"big_bird"),ATt.forEach(t),M3r=r(ARe," \u2014 "),CU=n(ARe,"A",{href:!0});var yTt=s(CU);E3r=r(yTt,"FlaxBigBirdModel"),yTt.forEach(t),C3r=r(ARe," (BigBird model)"),ARe.forEach(t),w3r=i(ne),YE=n(ne,"LI",{});var yRe=s(YE);qFe=n(yRe,"STRONG",{});var LTt=s(qFe);A3r=r(LTt,"blenderbot"),LTt.forEach(t),y3r=r(yRe," \u2014 "),wU=n(yRe,"A",{href:!0});var xTt=s(wU);L3r=r(xTt,"FlaxBlenderbotModel"),xTt.forEach(t),x3r=r(yRe," (Blenderbot model)"),yRe.forEach(t),$3r=i(ne),KE=n(ne,"LI",{});var LRe=s(KE);NFe=n(LRe,"STRONG",{});var $Tt=s(NFe);k3r=r($Tt,"blenderbot-small"),$Tt.forEach(t),S3r=r(LRe," \u2014 "),AU=n(LRe,"A",{href:!0});var kTt=s(AU);R3r=r(kTt,"FlaxBlenderbotSmallModel"),kTt.forEach(t),B3r=r(LRe," (BlenderbotSmall model)"),LRe.forEach(t),P3r=i(ne),ZE=n(ne,"LI",{});var xRe=s(ZE);jFe=n(xRe,"STRONG",{});var STt=s(jFe);I3r=r(STt,"clip"),STt.forEach(t),q3r=r(xRe," \u2014 "),yU=n(xRe,"A",{href:!0});var RTt=s(yU);N3r=r(RTt,"FlaxCLIPModel"),RTt.forEach(t),j3r=r(xRe," (CLIP model)"),xRe.forEach(t),D3r=i(ne),eC=n(ne,"LI",{});var $Re=s(eC);DFe=n($Re,"STRONG",{});var BTt=s(DFe);G3r=r(BTt,"distilbert"),BTt.forEach(t),O3r=r($Re," \u2014 "),LU=n($Re,"A",{href:!0});var PTt=s(LU);V3r=r(PTt,"FlaxDistilBertModel"),PTt.forEach(t),X3r=r($Re," (DistilBERT model)"),$Re.forEach(t),z3r=i(ne),oC=n(ne,"LI",{});var kRe=s(oC);GFe=n(kRe,"STRONG",{});var ITt=s(GFe);Q3r=r(ITt,"electra"),ITt.forEach(t),W3r=r(kRe," \u2014 "),xU=n(kRe,"A",{href:!0});var qTt=s(xU);H3r=r(qTt,"FlaxElectraModel"),qTt.forEach(t),U3r=r(kRe," (ELECTRA model)"),kRe.forEach(t),J3r=i(ne),rC=n(ne,"LI",{});var SRe=s(rC);OFe=n(SRe,"STRONG",{});var NTt=s(OFe);Y3r=r(NTt,"gpt2"),NTt.forEach(t),K3r=r(SRe," \u2014 "),$U=n(SRe,"A",{href:!0});var jTt=s($U);Z3r=r(jTt,"FlaxGPT2Model"),jTt.forEach(t),ewr=r(SRe," (OpenAI GPT-2 model)"),SRe.forEach(t),owr=i(ne),tC=n(ne,"LI",{});var RRe=s(tC);VFe=n(RRe,"STRONG",{});var DTt=s(VFe);rwr=r(DTt,"gpt_neo"),DTt.forEach(t),twr=r(RRe," \u2014 "),kU=n(RRe,"A",{href:!0});var GTt=s(kU);awr=r(GTt,"FlaxGPTNeoModel"),GTt.forEach(t),nwr=r(RRe," (GPT Neo model)"),RRe.forEach(t),swr=i(ne),aC=n(ne,"LI",{});var BRe=s(aC);XFe=n(BRe,"STRONG",{});var OTt=s(XFe);lwr=r(OTt,"gptj"),OTt.forEach(t),iwr=r(BRe," \u2014 "),SU=n(BRe,"A",{href:!0});var VTt=s(SU);dwr=r(VTt,"FlaxGPTJModel"),VTt.forEach(t),cwr=r(BRe," (GPT-J model)"),BRe.forEach(t),fwr=i(ne),nC=n(ne,"LI",{});var PRe=s(nC);zFe=n(PRe,"STRONG",{});var XTt=s(zFe);mwr=r(XTt,"marian"),XTt.forEach(t),gwr=r(PRe," \u2014 "),RU=n(PRe,"A",{href:!0});var zTt=s(RU);hwr=r(zTt,"FlaxMarianModel"),zTt.forEach(t),pwr=r(PRe," (Marian model)"),PRe.forEach(t),uwr=i(ne),sC=n(ne,"LI",{});var IRe=s(sC);QFe=n(IRe,"STRONG",{});var QTt=s(QFe);_wr=r(QTt,"mbart"),QTt.forEach(t),bwr=r(IRe," \u2014 "),BU=n(IRe,"A",{href:!0});var WTt=s(BU);vwr=r(WTt,"FlaxMBartModel"),WTt.forEach(t),Fwr=r(IRe," (mBART model)"),IRe.forEach(t),Twr=i(ne),lC=n(ne,"LI",{});var qRe=s(lC);WFe=n(qRe,"STRONG",{});var HTt=s(WFe);Mwr=r(HTt,"mt5"),HTt.forEach(t),Ewr=r(qRe," \u2014 "),PU=n(qRe,"A",{href:!0});var UTt=s(PU);Cwr=r(UTt,"FlaxMT5Model"),UTt.forEach(t),wwr=r(qRe," (mT5 model)"),qRe.forEach(t),Awr=i(ne),iC=n(ne,"LI",{});var NRe=s(iC);HFe=n(NRe,"STRONG",{});var JTt=s(HFe);ywr=r(JTt,"pegasus"),JTt.forEach(t),Lwr=r(NRe," \u2014 "),IU=n(NRe,"A",{href:!0});var YTt=s(IU);xwr=r(YTt,"FlaxPegasusModel"),YTt.forEach(t),$wr=r(NRe," (Pegasus model)"),NRe.forEach(t),kwr=i(ne),dC=n(ne,"LI",{});var jRe=s(dC);UFe=n(jRe,"STRONG",{});var KTt=s(UFe);Swr=r(KTt,"roberta"),KTt.forEach(t),Rwr=r(jRe," \u2014 "),qU=n(jRe,"A",{href:!0});var ZTt=s(qU);Bwr=r(ZTt,"FlaxRobertaModel"),ZTt.forEach(t),Pwr=r(jRe," (RoBERTa model)"),jRe.forEach(t),Iwr=i(ne),cC=n(ne,"LI",{});var DRe=s(cC);JFe=n(DRe,"STRONG",{});var eMt=s(JFe);qwr=r(eMt,"roformer"),eMt.forEach(t),Nwr=r(DRe," \u2014 "),NU=n(DRe,"A",{href:!0});var oMt=s(NU);jwr=r(oMt,"FlaxRoFormerModel"),oMt.forEach(t),Dwr=r(DRe," (RoFormer model)"),DRe.forEach(t),Gwr=i(ne),fC=n(ne,"LI",{});var GRe=s(fC);YFe=n(GRe,"STRONG",{});var rMt=s(YFe);Owr=r(rMt,"t5"),rMt.forEach(t),Vwr=r(GRe," \u2014 "),jU=n(GRe,"A",{href:!0});var tMt=s(jU);Xwr=r(tMt,"FlaxT5Model"),tMt.forEach(t),zwr=r(GRe," (T5 model)"),GRe.forEach(t),Qwr=i(ne),mC=n(ne,"LI",{});var ORe=s(mC);KFe=n(ORe,"STRONG",{});var aMt=s(KFe);Wwr=r(aMt,"vision-text-dual-encoder"),aMt.forEach(t),Hwr=r(ORe," \u2014 "),DU=n(ORe,"A",{href:!0});var nMt=s(DU);Uwr=r(nMt,"FlaxVisionTextDualEncoderModel"),nMt.forEach(t),Jwr=r(ORe," (VisionTextDualEncoder model)"),ORe.forEach(t),Ywr=i(ne),gC=n(ne,"LI",{});var VRe=s(gC);ZFe=n(VRe,"STRONG",{});var sMt=s(ZFe);Kwr=r(sMt,"vit"),sMt.forEach(t),Zwr=r(VRe," \u2014 "),GU=n(VRe,"A",{href:!0});var lMt=s(GU);eAr=r(lMt,"FlaxViTModel"),lMt.forEach(t),oAr=r(VRe," (ViT model)"),VRe.forEach(t),rAr=i(ne),hC=n(ne,"LI",{});var XRe=s(hC);e0e=n(XRe,"STRONG",{});var iMt=s(e0e);tAr=r(iMt,"wav2vec2"),iMt.forEach(t),aAr=r(XRe," \u2014 "),OU=n(XRe,"A",{href:!0});var dMt=s(OU);nAr=r(dMt,"FlaxWav2Vec2Model"),dMt.forEach(t),sAr=r(XRe," (Wav2Vec2 model)"),XRe.forEach(t),lAr=i(ne),pC=n(ne,"LI",{});var zRe=s(pC);o0e=n(zRe,"STRONG",{});var cMt=s(o0e);iAr=r(cMt,"xglm"),cMt.forEach(t),dAr=r(zRe," \u2014 "),VU=n(zRe,"A",{href:!0});var fMt=s(VU);cAr=r(fMt,"FlaxXGLMModel"),fMt.forEach(t),fAr=r(zRe," (XGLM model)"),zRe.forEach(t),mAr=i(ne),uC=n(ne,"LI",{});var QRe=s(uC);r0e=n(QRe,"STRONG",{});var mMt=s(r0e);gAr=r(mMt,"xlm-roberta"),mMt.forEach(t),hAr=r(QRe," \u2014 "),XU=n(QRe,"A",{href:!0});var gMt=s(XU);pAr=r(gMt,"FlaxXLMRobertaModel"),gMt.forEach(t),uAr=r(QRe," (XLM-RoBERTa model)"),QRe.forEach(t),ne.forEach(t),_Ar=i(Nl),T(_C.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),eqe=i(f),xc=n(f,"H2",{class:!0});var lje=s(xc);bC=n(lje,"A",{id:!0,class:!0,href:!0});var hMt=s(bC);t0e=n(hMt,"SPAN",{});var pMt=s(t0e);T(Hx.$$.fragment,pMt),pMt.forEach(t),hMt.forEach(t),bAr=i(lje),a0e=n(lje,"SPAN",{});var uMt=s(a0e);vAr=r(uMt,"FlaxAutoModelForCausalLM"),uMt.forEach(t),lje.forEach(t),oqe=i(f),mr=n(f,"DIV",{class:!0});var jl=s(mr);T(Ux.$$.fragment,jl),FAr=i(jl),$c=n(jl,"P",{});var TZ=s($c);TAr=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zU=n(TZ,"A",{href:!0});var _Mt=s(zU);MAr=r(_Mt,"from_pretrained()"),_Mt.forEach(t),EAr=r(TZ," class method or the "),QU=n(TZ,"A",{href:!0});var bMt=s(QU);CAr=r(bMt,"from_config()"),bMt.forEach(t),wAr=r(TZ,` class
method.`),TZ.forEach(t),AAr=i(jl),Jx=n(jl,"P",{});var ije=s(Jx);yAr=r(ije,"This class cannot be instantiated directly using "),n0e=n(ije,"CODE",{});var vMt=s(n0e);LAr=r(vMt,"__init__()"),vMt.forEach(t),xAr=r(ije," (throws an error)."),ije.forEach(t),$Ar=i(jl),Dt=n(jl,"DIV",{class:!0});var vA=s(Dt);T(Yx.$$.fragment,vA),kAr=i(vA),s0e=n(vA,"P",{});var FMt=s(s0e);SAr=r(FMt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FMt.forEach(t),RAr=i(vA),kc=n(vA,"P",{});var MZ=s(kc);BAr=r(MZ,`Note:
Loading a model from its configuration file does `),l0e=n(MZ,"STRONG",{});var TMt=s(l0e);PAr=r(TMt,"not"),TMt.forEach(t),IAr=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WU=n(MZ,"A",{href:!0});var MMt=s(WU);qAr=r(MMt,"from_pretrained()"),MMt.forEach(t),NAr=r(MZ," to load the model weights."),MZ.forEach(t),jAr=i(vA),T(vC.$$.fragment,vA),vA.forEach(t),DAr=i(jl),Dr=n(jl,"DIV",{class:!0});var Dl=s(Dr);T(Kx.$$.fragment,Dl),GAr=i(Dl),i0e=n(Dl,"P",{});var EMt=s(i0e);OAr=r(EMt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),EMt.forEach(t),VAr=i(Dl),hn=n(Dl,"P",{});var FA=s(hn);XAr=r(FA,"The model class to instantiate is selected based on the "),d0e=n(FA,"CODE",{});var CMt=s(d0e);zAr=r(CMt,"model_type"),CMt.forEach(t),QAr=r(FA,` property of the config object (either
passed as an argument or loaded from `),c0e=n(FA,"CODE",{});var wMt=s(c0e);WAr=r(wMt,"pretrained_model_name_or_path"),wMt.forEach(t),HAr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f0e=n(FA,"CODE",{});var AMt=s(f0e);UAr=r(AMt,"pretrained_model_name_or_path"),AMt.forEach(t),JAr=r(FA,":"),FA.forEach(t),YAr=i(Dl),Se=n(Dl,"UL",{});var Ve=s(Se);FC=n(Ve,"LI",{});var WRe=s(FC);m0e=n(WRe,"STRONG",{});var yMt=s(m0e);KAr=r(yMt,"bart"),yMt.forEach(t),ZAr=r(WRe," \u2014 "),HU=n(WRe,"A",{href:!0});var LMt=s(HU);eyr=r(LMt,"FlaxBartForCausalLM"),LMt.forEach(t),oyr=r(WRe," (BART model)"),WRe.forEach(t),ryr=i(Ve),TC=n(Ve,"LI",{});var HRe=s(TC);g0e=n(HRe,"STRONG",{});var xMt=s(g0e);tyr=r(xMt,"bert"),xMt.forEach(t),ayr=r(HRe," \u2014 "),UU=n(HRe,"A",{href:!0});var $Mt=s(UU);nyr=r($Mt,"FlaxBertForCausalLM"),$Mt.forEach(t),syr=r(HRe," (BERT model)"),HRe.forEach(t),lyr=i(Ve),MC=n(Ve,"LI",{});var URe=s(MC);h0e=n(URe,"STRONG",{});var kMt=s(h0e);iyr=r(kMt,"big_bird"),kMt.forEach(t),dyr=r(URe," \u2014 "),JU=n(URe,"A",{href:!0});var SMt=s(JU);cyr=r(SMt,"FlaxBigBirdForCausalLM"),SMt.forEach(t),fyr=r(URe," (BigBird model)"),URe.forEach(t),myr=i(Ve),EC=n(Ve,"LI",{});var JRe=s(EC);p0e=n(JRe,"STRONG",{});var RMt=s(p0e);gyr=r(RMt,"electra"),RMt.forEach(t),hyr=r(JRe," \u2014 "),YU=n(JRe,"A",{href:!0});var BMt=s(YU);pyr=r(BMt,"FlaxElectraForCausalLM"),BMt.forEach(t),uyr=r(JRe," (ELECTRA model)"),JRe.forEach(t),_yr=i(Ve),CC=n(Ve,"LI",{});var YRe=s(CC);u0e=n(YRe,"STRONG",{});var PMt=s(u0e);byr=r(PMt,"gpt2"),PMt.forEach(t),vyr=r(YRe," \u2014 "),KU=n(YRe,"A",{href:!0});var IMt=s(KU);Fyr=r(IMt,"FlaxGPT2LMHeadModel"),IMt.forEach(t),Tyr=r(YRe," (OpenAI GPT-2 model)"),YRe.forEach(t),Myr=i(Ve),wC=n(Ve,"LI",{});var KRe=s(wC);_0e=n(KRe,"STRONG",{});var qMt=s(_0e);Eyr=r(qMt,"gpt_neo"),qMt.forEach(t),Cyr=r(KRe," \u2014 "),ZU=n(KRe,"A",{href:!0});var NMt=s(ZU);wyr=r(NMt,"FlaxGPTNeoForCausalLM"),NMt.forEach(t),Ayr=r(KRe," (GPT Neo model)"),KRe.forEach(t),yyr=i(Ve),AC=n(Ve,"LI",{});var ZRe=s(AC);b0e=n(ZRe,"STRONG",{});var jMt=s(b0e);Lyr=r(jMt,"gptj"),jMt.forEach(t),xyr=r(ZRe," \u2014 "),eJ=n(ZRe,"A",{href:!0});var DMt=s(eJ);$yr=r(DMt,"FlaxGPTJForCausalLM"),DMt.forEach(t),kyr=r(ZRe," (GPT-J model)"),ZRe.forEach(t),Syr=i(Ve),yC=n(Ve,"LI",{});var eBe=s(yC);v0e=n(eBe,"STRONG",{});var GMt=s(v0e);Ryr=r(GMt,"roberta"),GMt.forEach(t),Byr=r(eBe," \u2014 "),oJ=n(eBe,"A",{href:!0});var OMt=s(oJ);Pyr=r(OMt,"FlaxRobertaForCausalLM"),OMt.forEach(t),Iyr=r(eBe," (RoBERTa model)"),eBe.forEach(t),qyr=i(Ve),LC=n(Ve,"LI",{});var oBe=s(LC);F0e=n(oBe,"STRONG",{});var VMt=s(F0e);Nyr=r(VMt,"xglm"),VMt.forEach(t),jyr=r(oBe," \u2014 "),rJ=n(oBe,"A",{href:!0});var XMt=s(rJ);Dyr=r(XMt,"FlaxXGLMForCausalLM"),XMt.forEach(t),Gyr=r(oBe," (XGLM model)"),oBe.forEach(t),Ve.forEach(t),Oyr=i(Dl),T(xC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),rqe=i(f),Sc=n(f,"H2",{class:!0});var dje=s(Sc);$C=n(dje,"A",{id:!0,class:!0,href:!0});var zMt=s($C);T0e=n(zMt,"SPAN",{});var QMt=s(T0e);T(Zx.$$.fragment,QMt),QMt.forEach(t),zMt.forEach(t),Vyr=i(dje),M0e=n(dje,"SPAN",{});var WMt=s(M0e);Xyr=r(WMt,"FlaxAutoModelForPreTraining"),WMt.forEach(t),dje.forEach(t),tqe=i(f),gr=n(f,"DIV",{class:!0});var Gl=s(gr);T(e7.$$.fragment,Gl),zyr=i(Gl),Rc=n(Gl,"P",{});var EZ=s(Rc);Qyr=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tJ=n(EZ,"A",{href:!0});var HMt=s(tJ);Wyr=r(HMt,"from_pretrained()"),HMt.forEach(t),Hyr=r(EZ," class method or the "),aJ=n(EZ,"A",{href:!0});var UMt=s(aJ);Uyr=r(UMt,"from_config()"),UMt.forEach(t),Jyr=r(EZ,` class
method.`),EZ.forEach(t),Yyr=i(Gl),o7=n(Gl,"P",{});var cje=s(o7);Kyr=r(cje,"This class cannot be instantiated directly using "),E0e=n(cje,"CODE",{});var JMt=s(E0e);Zyr=r(JMt,"__init__()"),JMt.forEach(t),eLr=r(cje," (throws an error)."),cje.forEach(t),oLr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var TA=s(Gt);T(r7.$$.fragment,TA),rLr=i(TA),C0e=n(TA,"P",{});var YMt=s(C0e);tLr=r(YMt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),YMt.forEach(t),aLr=i(TA),Bc=n(TA,"P",{});var CZ=s(Bc);nLr=r(CZ,`Note:
Loading a model from its configuration file does `),w0e=n(CZ,"STRONG",{});var KMt=s(w0e);sLr=r(KMt,"not"),KMt.forEach(t),lLr=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(CZ,"A",{href:!0});var ZMt=s(nJ);iLr=r(ZMt,"from_pretrained()"),ZMt.forEach(t),dLr=r(CZ," to load the model weights."),CZ.forEach(t),cLr=i(TA),T(kC.$$.fragment,TA),TA.forEach(t),fLr=i(Gl),Gr=n(Gl,"DIV",{class:!0});var Ol=s(Gr);T(t7.$$.fragment,Ol),mLr=i(Ol),A0e=n(Ol,"P",{});var eEt=s(A0e);gLr=r(eEt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),eEt.forEach(t),hLr=i(Ol),pn=n(Ol,"P",{});var MA=s(pn);pLr=r(MA,"The model class to instantiate is selected based on the "),y0e=n(MA,"CODE",{});var oEt=s(y0e);uLr=r(oEt,"model_type"),oEt.forEach(t),_Lr=r(MA,` property of the config object (either
passed as an argument or loaded from `),L0e=n(MA,"CODE",{});var rEt=s(L0e);bLr=r(rEt,"pretrained_model_name_or_path"),rEt.forEach(t),vLr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x0e=n(MA,"CODE",{});var tEt=s(x0e);FLr=r(tEt,"pretrained_model_name_or_path"),tEt.forEach(t),TLr=r(MA,":"),MA.forEach(t),MLr=i(Ol),Me=n(Ol,"UL",{});var we=s(Me);SC=n(we,"LI",{});var rBe=s(SC);$0e=n(rBe,"STRONG",{});var aEt=s($0e);ELr=r(aEt,"albert"),aEt.forEach(t),CLr=r(rBe," \u2014 "),sJ=n(rBe,"A",{href:!0});var nEt=s(sJ);wLr=r(nEt,"FlaxAlbertForPreTraining"),nEt.forEach(t),ALr=r(rBe," (ALBERT model)"),rBe.forEach(t),yLr=i(we),RC=n(we,"LI",{});var tBe=s(RC);k0e=n(tBe,"STRONG",{});var sEt=s(k0e);LLr=r(sEt,"bart"),sEt.forEach(t),xLr=r(tBe," \u2014 "),lJ=n(tBe,"A",{href:!0});var lEt=s(lJ);$Lr=r(lEt,"FlaxBartForConditionalGeneration"),lEt.forEach(t),kLr=r(tBe," (BART model)"),tBe.forEach(t),SLr=i(we),BC=n(we,"LI",{});var aBe=s(BC);S0e=n(aBe,"STRONG",{});var iEt=s(S0e);RLr=r(iEt,"bert"),iEt.forEach(t),BLr=r(aBe," \u2014 "),iJ=n(aBe,"A",{href:!0});var dEt=s(iJ);PLr=r(dEt,"FlaxBertForPreTraining"),dEt.forEach(t),ILr=r(aBe," (BERT model)"),aBe.forEach(t),qLr=i(we),PC=n(we,"LI",{});var nBe=s(PC);R0e=n(nBe,"STRONG",{});var cEt=s(R0e);NLr=r(cEt,"big_bird"),cEt.forEach(t),jLr=r(nBe," \u2014 "),dJ=n(nBe,"A",{href:!0});var fEt=s(dJ);DLr=r(fEt,"FlaxBigBirdForPreTraining"),fEt.forEach(t),GLr=r(nBe," (BigBird model)"),nBe.forEach(t),OLr=i(we),IC=n(we,"LI",{});var sBe=s(IC);B0e=n(sBe,"STRONG",{});var mEt=s(B0e);VLr=r(mEt,"electra"),mEt.forEach(t),XLr=r(sBe," \u2014 "),cJ=n(sBe,"A",{href:!0});var gEt=s(cJ);zLr=r(gEt,"FlaxElectraForPreTraining"),gEt.forEach(t),QLr=r(sBe," (ELECTRA model)"),sBe.forEach(t),WLr=i(we),qC=n(we,"LI",{});var lBe=s(qC);P0e=n(lBe,"STRONG",{});var hEt=s(P0e);HLr=r(hEt,"mbart"),hEt.forEach(t),ULr=r(lBe," \u2014 "),fJ=n(lBe,"A",{href:!0});var pEt=s(fJ);JLr=r(pEt,"FlaxMBartForConditionalGeneration"),pEt.forEach(t),YLr=r(lBe," (mBART model)"),lBe.forEach(t),KLr=i(we),NC=n(we,"LI",{});var iBe=s(NC);I0e=n(iBe,"STRONG",{});var uEt=s(I0e);ZLr=r(uEt,"mt5"),uEt.forEach(t),e8r=r(iBe," \u2014 "),mJ=n(iBe,"A",{href:!0});var _Et=s(mJ);o8r=r(_Et,"FlaxMT5ForConditionalGeneration"),_Et.forEach(t),r8r=r(iBe," (mT5 model)"),iBe.forEach(t),t8r=i(we),jC=n(we,"LI",{});var dBe=s(jC);q0e=n(dBe,"STRONG",{});var bEt=s(q0e);a8r=r(bEt,"roberta"),bEt.forEach(t),n8r=r(dBe," \u2014 "),gJ=n(dBe,"A",{href:!0});var vEt=s(gJ);s8r=r(vEt,"FlaxRobertaForMaskedLM"),vEt.forEach(t),l8r=r(dBe," (RoBERTa model)"),dBe.forEach(t),i8r=i(we),DC=n(we,"LI",{});var cBe=s(DC);N0e=n(cBe,"STRONG",{});var FEt=s(N0e);d8r=r(FEt,"roformer"),FEt.forEach(t),c8r=r(cBe," \u2014 "),hJ=n(cBe,"A",{href:!0});var TEt=s(hJ);f8r=r(TEt,"FlaxRoFormerForMaskedLM"),TEt.forEach(t),m8r=r(cBe," (RoFormer model)"),cBe.forEach(t),g8r=i(we),GC=n(we,"LI",{});var fBe=s(GC);j0e=n(fBe,"STRONG",{});var MEt=s(j0e);h8r=r(MEt,"t5"),MEt.forEach(t),p8r=r(fBe," \u2014 "),pJ=n(fBe,"A",{href:!0});var EEt=s(pJ);u8r=r(EEt,"FlaxT5ForConditionalGeneration"),EEt.forEach(t),_8r=r(fBe," (T5 model)"),fBe.forEach(t),b8r=i(we),OC=n(we,"LI",{});var mBe=s(OC);D0e=n(mBe,"STRONG",{});var CEt=s(D0e);v8r=r(CEt,"wav2vec2"),CEt.forEach(t),F8r=r(mBe," \u2014 "),uJ=n(mBe,"A",{href:!0});var wEt=s(uJ);T8r=r(wEt,"FlaxWav2Vec2ForPreTraining"),wEt.forEach(t),M8r=r(mBe," (Wav2Vec2 model)"),mBe.forEach(t),E8r=i(we),VC=n(we,"LI",{});var gBe=s(VC);G0e=n(gBe,"STRONG",{});var AEt=s(G0e);C8r=r(AEt,"xlm-roberta"),AEt.forEach(t),w8r=r(gBe," \u2014 "),_J=n(gBe,"A",{href:!0});var yEt=s(_J);A8r=r(yEt,"FlaxXLMRobertaForMaskedLM"),yEt.forEach(t),y8r=r(gBe," (XLM-RoBERTa model)"),gBe.forEach(t),we.forEach(t),L8r=i(Ol),T(XC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),aqe=i(f),Pc=n(f,"H2",{class:!0});var fje=s(Pc);zC=n(fje,"A",{id:!0,class:!0,href:!0});var LEt=s(zC);O0e=n(LEt,"SPAN",{});var xEt=s(O0e);T(a7.$$.fragment,xEt),xEt.forEach(t),LEt.forEach(t),x8r=i(fje),V0e=n(fje,"SPAN",{});var $Et=s(V0e);$8r=r($Et,"FlaxAutoModelForMaskedLM"),$Et.forEach(t),fje.forEach(t),nqe=i(f),hr=n(f,"DIV",{class:!0});var Vl=s(hr);T(n7.$$.fragment,Vl),k8r=i(Vl),Ic=n(Vl,"P",{});var wZ=s(Ic);S8r=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bJ=n(wZ,"A",{href:!0});var kEt=s(bJ);R8r=r(kEt,"from_pretrained()"),kEt.forEach(t),B8r=r(wZ," class method or the "),vJ=n(wZ,"A",{href:!0});var SEt=s(vJ);P8r=r(SEt,"from_config()"),SEt.forEach(t),I8r=r(wZ,` class
method.`),wZ.forEach(t),q8r=i(Vl),s7=n(Vl,"P",{});var mje=s(s7);N8r=r(mje,"This class cannot be instantiated directly using "),X0e=n(mje,"CODE",{});var REt=s(X0e);j8r=r(REt,"__init__()"),REt.forEach(t),D8r=r(mje," (throws an error)."),mje.forEach(t),G8r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var EA=s(Ot);T(l7.$$.fragment,EA),O8r=i(EA),z0e=n(EA,"P",{});var BEt=s(z0e);V8r=r(BEt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),BEt.forEach(t),X8r=i(EA),qc=n(EA,"P",{});var AZ=s(qc);z8r=r(AZ,`Note:
Loading a model from its configuration file does `),Q0e=n(AZ,"STRONG",{});var PEt=s(Q0e);Q8r=r(PEt,"not"),PEt.forEach(t),W8r=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FJ=n(AZ,"A",{href:!0});var IEt=s(FJ);H8r=r(IEt,"from_pretrained()"),IEt.forEach(t),U8r=r(AZ," to load the model weights."),AZ.forEach(t),J8r=i(EA),T(QC.$$.fragment,EA),EA.forEach(t),Y8r=i(Vl),Or=n(Vl,"DIV",{class:!0});var Xl=s(Or);T(i7.$$.fragment,Xl),K8r=i(Xl),W0e=n(Xl,"P",{});var qEt=s(W0e);Z8r=r(qEt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qEt.forEach(t),exr=i(Xl),un=n(Xl,"P",{});var CA=s(un);oxr=r(CA,"The model class to instantiate is selected based on the "),H0e=n(CA,"CODE",{});var NEt=s(H0e);rxr=r(NEt,"model_type"),NEt.forEach(t),txr=r(CA,` property of the config object (either
passed as an argument or loaded from `),U0e=n(CA,"CODE",{});var jEt=s(U0e);axr=r(jEt,"pretrained_model_name_or_path"),jEt.forEach(t),nxr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J0e=n(CA,"CODE",{});var DEt=s(J0e);sxr=r(DEt,"pretrained_model_name_or_path"),DEt.forEach(t),lxr=r(CA,":"),CA.forEach(t),ixr=i(Xl),Le=n(Xl,"UL",{});var Pe=s(Le);WC=n(Pe,"LI",{});var hBe=s(WC);Y0e=n(hBe,"STRONG",{});var GEt=s(Y0e);dxr=r(GEt,"albert"),GEt.forEach(t),cxr=r(hBe," \u2014 "),TJ=n(hBe,"A",{href:!0});var OEt=s(TJ);fxr=r(OEt,"FlaxAlbertForMaskedLM"),OEt.forEach(t),mxr=r(hBe," (ALBERT model)"),hBe.forEach(t),gxr=i(Pe),HC=n(Pe,"LI",{});var pBe=s(HC);K0e=n(pBe,"STRONG",{});var VEt=s(K0e);hxr=r(VEt,"bart"),VEt.forEach(t),pxr=r(pBe," \u2014 "),MJ=n(pBe,"A",{href:!0});var XEt=s(MJ);uxr=r(XEt,"FlaxBartForConditionalGeneration"),XEt.forEach(t),_xr=r(pBe," (BART model)"),pBe.forEach(t),bxr=i(Pe),UC=n(Pe,"LI",{});var uBe=s(UC);Z0e=n(uBe,"STRONG",{});var zEt=s(Z0e);vxr=r(zEt,"bert"),zEt.forEach(t),Fxr=r(uBe," \u2014 "),EJ=n(uBe,"A",{href:!0});var QEt=s(EJ);Txr=r(QEt,"FlaxBertForMaskedLM"),QEt.forEach(t),Mxr=r(uBe," (BERT model)"),uBe.forEach(t),Exr=i(Pe),JC=n(Pe,"LI",{});var _Be=s(JC);e6e=n(_Be,"STRONG",{});var WEt=s(e6e);Cxr=r(WEt,"big_bird"),WEt.forEach(t),wxr=r(_Be," \u2014 "),CJ=n(_Be,"A",{href:!0});var HEt=s(CJ);Axr=r(HEt,"FlaxBigBirdForMaskedLM"),HEt.forEach(t),yxr=r(_Be," (BigBird model)"),_Be.forEach(t),Lxr=i(Pe),YC=n(Pe,"LI",{});var bBe=s(YC);o6e=n(bBe,"STRONG",{});var UEt=s(o6e);xxr=r(UEt,"distilbert"),UEt.forEach(t),$xr=r(bBe," \u2014 "),wJ=n(bBe,"A",{href:!0});var JEt=s(wJ);kxr=r(JEt,"FlaxDistilBertForMaskedLM"),JEt.forEach(t),Sxr=r(bBe," (DistilBERT model)"),bBe.forEach(t),Rxr=i(Pe),KC=n(Pe,"LI",{});var vBe=s(KC);r6e=n(vBe,"STRONG",{});var YEt=s(r6e);Bxr=r(YEt,"electra"),YEt.forEach(t),Pxr=r(vBe," \u2014 "),AJ=n(vBe,"A",{href:!0});var KEt=s(AJ);Ixr=r(KEt,"FlaxElectraForMaskedLM"),KEt.forEach(t),qxr=r(vBe," (ELECTRA model)"),vBe.forEach(t),Nxr=i(Pe),ZC=n(Pe,"LI",{});var FBe=s(ZC);t6e=n(FBe,"STRONG",{});var ZEt=s(t6e);jxr=r(ZEt,"mbart"),ZEt.forEach(t),Dxr=r(FBe," \u2014 "),yJ=n(FBe,"A",{href:!0});var eCt=s(yJ);Gxr=r(eCt,"FlaxMBartForConditionalGeneration"),eCt.forEach(t),Oxr=r(FBe," (mBART model)"),FBe.forEach(t),Vxr=i(Pe),e5=n(Pe,"LI",{});var TBe=s(e5);a6e=n(TBe,"STRONG",{});var oCt=s(a6e);Xxr=r(oCt,"roberta"),oCt.forEach(t),zxr=r(TBe," \u2014 "),LJ=n(TBe,"A",{href:!0});var rCt=s(LJ);Qxr=r(rCt,"FlaxRobertaForMaskedLM"),rCt.forEach(t),Wxr=r(TBe," (RoBERTa model)"),TBe.forEach(t),Hxr=i(Pe),o5=n(Pe,"LI",{});var MBe=s(o5);n6e=n(MBe,"STRONG",{});var tCt=s(n6e);Uxr=r(tCt,"roformer"),tCt.forEach(t),Jxr=r(MBe," \u2014 "),xJ=n(MBe,"A",{href:!0});var aCt=s(xJ);Yxr=r(aCt,"FlaxRoFormerForMaskedLM"),aCt.forEach(t),Kxr=r(MBe," (RoFormer model)"),MBe.forEach(t),Zxr=i(Pe),r5=n(Pe,"LI",{});var EBe=s(r5);s6e=n(EBe,"STRONG",{});var nCt=s(s6e);e7r=r(nCt,"xlm-roberta"),nCt.forEach(t),o7r=r(EBe," \u2014 "),$J=n(EBe,"A",{href:!0});var sCt=s($J);r7r=r(sCt,"FlaxXLMRobertaForMaskedLM"),sCt.forEach(t),t7r=r(EBe," (XLM-RoBERTa model)"),EBe.forEach(t),Pe.forEach(t),a7r=i(Xl),T(t5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),sqe=i(f),Nc=n(f,"H2",{class:!0});var gje=s(Nc);a5=n(gje,"A",{id:!0,class:!0,href:!0});var lCt=s(a5);l6e=n(lCt,"SPAN",{});var iCt=s(l6e);T(d7.$$.fragment,iCt),iCt.forEach(t),lCt.forEach(t),n7r=i(gje),i6e=n(gje,"SPAN",{});var dCt=s(i6e);s7r=r(dCt,"FlaxAutoModelForSeq2SeqLM"),dCt.forEach(t),gje.forEach(t),lqe=i(f),pr=n(f,"DIV",{class:!0});var zl=s(pr);T(c7.$$.fragment,zl),l7r=i(zl),jc=n(zl,"P",{});var yZ=s(jc);i7r=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kJ=n(yZ,"A",{href:!0});var cCt=s(kJ);d7r=r(cCt,"from_pretrained()"),cCt.forEach(t),c7r=r(yZ," class method or the "),SJ=n(yZ,"A",{href:!0});var fCt=s(SJ);f7r=r(fCt,"from_config()"),fCt.forEach(t),m7r=r(yZ,` class
method.`),yZ.forEach(t),g7r=i(zl),f7=n(zl,"P",{});var hje=s(f7);h7r=r(hje,"This class cannot be instantiated directly using "),d6e=n(hje,"CODE",{});var mCt=s(d6e);p7r=r(mCt,"__init__()"),mCt.forEach(t),u7r=r(hje," (throws an error)."),hje.forEach(t),_7r=i(zl),Vt=n(zl,"DIV",{class:!0});var wA=s(Vt);T(m7.$$.fragment,wA),b7r=i(wA),c6e=n(wA,"P",{});var gCt=s(c6e);v7r=r(gCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gCt.forEach(t),F7r=i(wA),Dc=n(wA,"P",{});var LZ=s(Dc);T7r=r(LZ,`Note:
Loading a model from its configuration file does `),f6e=n(LZ,"STRONG",{});var hCt=s(f6e);M7r=r(hCt,"not"),hCt.forEach(t),E7r=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(LZ,"A",{href:!0});var pCt=s(RJ);C7r=r(pCt,"from_pretrained()"),pCt.forEach(t),w7r=r(LZ," to load the model weights."),LZ.forEach(t),A7r=i(wA),T(n5.$$.fragment,wA),wA.forEach(t),y7r=i(zl),Vr=n(zl,"DIV",{class:!0});var Ql=s(Vr);T(g7.$$.fragment,Ql),L7r=i(Ql),m6e=n(Ql,"P",{});var uCt=s(m6e);x7r=r(uCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uCt.forEach(t),$7r=i(Ql),_n=n(Ql,"P",{});var AA=s(_n);k7r=r(AA,"The model class to instantiate is selected based on the "),g6e=n(AA,"CODE",{});var _Ct=s(g6e);S7r=r(_Ct,"model_type"),_Ct.forEach(t),R7r=r(AA,` property of the config object (either
passed as an argument or loaded from `),h6e=n(AA,"CODE",{});var bCt=s(h6e);B7r=r(bCt,"pretrained_model_name_or_path"),bCt.forEach(t),P7r=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=n(AA,"CODE",{});var vCt=s(p6e);I7r=r(vCt,"pretrained_model_name_or_path"),vCt.forEach(t),q7r=r(AA,":"),AA.forEach(t),N7r=i(Ql),Re=n(Ql,"UL",{});var Xe=s(Re);s5=n(Xe,"LI",{});var CBe=s(s5);u6e=n(CBe,"STRONG",{});var FCt=s(u6e);j7r=r(FCt,"bart"),FCt.forEach(t),D7r=r(CBe," \u2014 "),BJ=n(CBe,"A",{href:!0});var TCt=s(BJ);G7r=r(TCt,"FlaxBartForConditionalGeneration"),TCt.forEach(t),O7r=r(CBe," (BART model)"),CBe.forEach(t),V7r=i(Xe),l5=n(Xe,"LI",{});var wBe=s(l5);_6e=n(wBe,"STRONG",{});var MCt=s(_6e);X7r=r(MCt,"blenderbot"),MCt.forEach(t),z7r=r(wBe," \u2014 "),PJ=n(wBe,"A",{href:!0});var ECt=s(PJ);Q7r=r(ECt,"FlaxBlenderbotForConditionalGeneration"),ECt.forEach(t),W7r=r(wBe," (Blenderbot model)"),wBe.forEach(t),H7r=i(Xe),i5=n(Xe,"LI",{});var ABe=s(i5);b6e=n(ABe,"STRONG",{});var CCt=s(b6e);U7r=r(CCt,"blenderbot-small"),CCt.forEach(t),J7r=r(ABe," \u2014 "),IJ=n(ABe,"A",{href:!0});var wCt=s(IJ);Y7r=r(wCt,"FlaxBlenderbotSmallForConditionalGeneration"),wCt.forEach(t),K7r=r(ABe," (BlenderbotSmall model)"),ABe.forEach(t),Z7r=i(Xe),d5=n(Xe,"LI",{});var yBe=s(d5);v6e=n(yBe,"STRONG",{});var ACt=s(v6e);e9r=r(ACt,"encoder-decoder"),ACt.forEach(t),o9r=r(yBe," \u2014 "),qJ=n(yBe,"A",{href:!0});var yCt=s(qJ);r9r=r(yCt,"FlaxEncoderDecoderModel"),yCt.forEach(t),t9r=r(yBe," (Encoder decoder model)"),yBe.forEach(t),a9r=i(Xe),c5=n(Xe,"LI",{});var LBe=s(c5);F6e=n(LBe,"STRONG",{});var LCt=s(F6e);n9r=r(LCt,"marian"),LCt.forEach(t),s9r=r(LBe," \u2014 "),NJ=n(LBe,"A",{href:!0});var xCt=s(NJ);l9r=r(xCt,"FlaxMarianMTModel"),xCt.forEach(t),i9r=r(LBe," (Marian model)"),LBe.forEach(t),d9r=i(Xe),f5=n(Xe,"LI",{});var xBe=s(f5);T6e=n(xBe,"STRONG",{});var $Ct=s(T6e);c9r=r($Ct,"mbart"),$Ct.forEach(t),f9r=r(xBe," \u2014 "),jJ=n(xBe,"A",{href:!0});var kCt=s(jJ);m9r=r(kCt,"FlaxMBartForConditionalGeneration"),kCt.forEach(t),g9r=r(xBe," (mBART model)"),xBe.forEach(t),h9r=i(Xe),m5=n(Xe,"LI",{});var $Be=s(m5);M6e=n($Be,"STRONG",{});var SCt=s(M6e);p9r=r(SCt,"mt5"),SCt.forEach(t),u9r=r($Be," \u2014 "),DJ=n($Be,"A",{href:!0});var RCt=s(DJ);_9r=r(RCt,"FlaxMT5ForConditionalGeneration"),RCt.forEach(t),b9r=r($Be," (mT5 model)"),$Be.forEach(t),v9r=i(Xe),g5=n(Xe,"LI",{});var kBe=s(g5);E6e=n(kBe,"STRONG",{});var BCt=s(E6e);F9r=r(BCt,"pegasus"),BCt.forEach(t),T9r=r(kBe," \u2014 "),GJ=n(kBe,"A",{href:!0});var PCt=s(GJ);M9r=r(PCt,"FlaxPegasusForConditionalGeneration"),PCt.forEach(t),E9r=r(kBe," (Pegasus model)"),kBe.forEach(t),C9r=i(Xe),h5=n(Xe,"LI",{});var SBe=s(h5);C6e=n(SBe,"STRONG",{});var ICt=s(C6e);w9r=r(ICt,"t5"),ICt.forEach(t),A9r=r(SBe," \u2014 "),OJ=n(SBe,"A",{href:!0});var qCt=s(OJ);y9r=r(qCt,"FlaxT5ForConditionalGeneration"),qCt.forEach(t),L9r=r(SBe," (T5 model)"),SBe.forEach(t),Xe.forEach(t),x9r=i(Ql),T(p5.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),iqe=i(f),Gc=n(f,"H2",{class:!0});var pje=s(Gc);u5=n(pje,"A",{id:!0,class:!0,href:!0});var NCt=s(u5);w6e=n(NCt,"SPAN",{});var jCt=s(w6e);T(h7.$$.fragment,jCt),jCt.forEach(t),NCt.forEach(t),$9r=i(pje),A6e=n(pje,"SPAN",{});var DCt=s(A6e);k9r=r(DCt,"FlaxAutoModelForSequenceClassification"),DCt.forEach(t),pje.forEach(t),dqe=i(f),ur=n(f,"DIV",{class:!0});var Wl=s(ur);T(p7.$$.fragment,Wl),S9r=i(Wl),Oc=n(Wl,"P",{});var xZ=s(Oc);R9r=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VJ=n(xZ,"A",{href:!0});var GCt=s(VJ);B9r=r(GCt,"from_pretrained()"),GCt.forEach(t),P9r=r(xZ," class method or the "),XJ=n(xZ,"A",{href:!0});var OCt=s(XJ);I9r=r(OCt,"from_config()"),OCt.forEach(t),q9r=r(xZ,` class
method.`),xZ.forEach(t),N9r=i(Wl),u7=n(Wl,"P",{});var uje=s(u7);j9r=r(uje,"This class cannot be instantiated directly using "),y6e=n(uje,"CODE",{});var VCt=s(y6e);D9r=r(VCt,"__init__()"),VCt.forEach(t),G9r=r(uje," (throws an error)."),uje.forEach(t),O9r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var yA=s(Xt);T(_7.$$.fragment,yA),V9r=i(yA),L6e=n(yA,"P",{});var XCt=s(L6e);X9r=r(XCt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XCt.forEach(t),z9r=i(yA),Vc=n(yA,"P",{});var $Z=s(Vc);Q9r=r($Z,`Note:
Loading a model from its configuration file does `),x6e=n($Z,"STRONG",{});var zCt=s(x6e);W9r=r(zCt,"not"),zCt.forEach(t),H9r=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n($Z,"A",{href:!0});var QCt=s(zJ);U9r=r(QCt,"from_pretrained()"),QCt.forEach(t),J9r=r($Z," to load the model weights."),$Z.forEach(t),Y9r=i(yA),T(_5.$$.fragment,yA),yA.forEach(t),K9r=i(Wl),Xr=n(Wl,"DIV",{class:!0});var Hl=s(Xr);T(b7.$$.fragment,Hl),Z9r=i(Hl),$6e=n(Hl,"P",{});var WCt=s($6e);e$r=r(WCt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),WCt.forEach(t),o$r=i(Hl),bn=n(Hl,"P",{});var LA=s(bn);r$r=r(LA,"The model class to instantiate is selected based on the "),k6e=n(LA,"CODE",{});var HCt=s(k6e);t$r=r(HCt,"model_type"),HCt.forEach(t),a$r=r(LA,` property of the config object (either
passed as an argument or loaded from `),S6e=n(LA,"CODE",{});var UCt=s(S6e);n$r=r(UCt,"pretrained_model_name_or_path"),UCt.forEach(t),s$r=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R6e=n(LA,"CODE",{});var JCt=s(R6e);l$r=r(JCt,"pretrained_model_name_or_path"),JCt.forEach(t),i$r=r(LA,":"),LA.forEach(t),d$r=i(Hl),xe=n(Hl,"UL",{});var Ie=s(xe);b5=n(Ie,"LI",{});var RBe=s(b5);B6e=n(RBe,"STRONG",{});var YCt=s(B6e);c$r=r(YCt,"albert"),YCt.forEach(t),f$r=r(RBe," \u2014 "),QJ=n(RBe,"A",{href:!0});var KCt=s(QJ);m$r=r(KCt,"FlaxAlbertForSequenceClassification"),KCt.forEach(t),g$r=r(RBe," (ALBERT model)"),RBe.forEach(t),h$r=i(Ie),v5=n(Ie,"LI",{});var BBe=s(v5);P6e=n(BBe,"STRONG",{});var ZCt=s(P6e);p$r=r(ZCt,"bart"),ZCt.forEach(t),u$r=r(BBe," \u2014 "),WJ=n(BBe,"A",{href:!0});var e5t=s(WJ);_$r=r(e5t,"FlaxBartForSequenceClassification"),e5t.forEach(t),b$r=r(BBe," (BART model)"),BBe.forEach(t),v$r=i(Ie),F5=n(Ie,"LI",{});var PBe=s(F5);I6e=n(PBe,"STRONG",{});var o5t=s(I6e);F$r=r(o5t,"bert"),o5t.forEach(t),T$r=r(PBe," \u2014 "),HJ=n(PBe,"A",{href:!0});var r5t=s(HJ);M$r=r(r5t,"FlaxBertForSequenceClassification"),r5t.forEach(t),E$r=r(PBe," (BERT model)"),PBe.forEach(t),C$r=i(Ie),T5=n(Ie,"LI",{});var IBe=s(T5);q6e=n(IBe,"STRONG",{});var t5t=s(q6e);w$r=r(t5t,"big_bird"),t5t.forEach(t),A$r=r(IBe," \u2014 "),UJ=n(IBe,"A",{href:!0});var a5t=s(UJ);y$r=r(a5t,"FlaxBigBirdForSequenceClassification"),a5t.forEach(t),L$r=r(IBe," (BigBird model)"),IBe.forEach(t),x$r=i(Ie),M5=n(Ie,"LI",{});var qBe=s(M5);N6e=n(qBe,"STRONG",{});var n5t=s(N6e);$$r=r(n5t,"distilbert"),n5t.forEach(t),k$r=r(qBe," \u2014 "),JJ=n(qBe,"A",{href:!0});var s5t=s(JJ);S$r=r(s5t,"FlaxDistilBertForSequenceClassification"),s5t.forEach(t),R$r=r(qBe," (DistilBERT model)"),qBe.forEach(t),B$r=i(Ie),E5=n(Ie,"LI",{});var NBe=s(E5);j6e=n(NBe,"STRONG",{});var l5t=s(j6e);P$r=r(l5t,"electra"),l5t.forEach(t),I$r=r(NBe," \u2014 "),YJ=n(NBe,"A",{href:!0});var i5t=s(YJ);q$r=r(i5t,"FlaxElectraForSequenceClassification"),i5t.forEach(t),N$r=r(NBe," (ELECTRA model)"),NBe.forEach(t),j$r=i(Ie),C5=n(Ie,"LI",{});var jBe=s(C5);D6e=n(jBe,"STRONG",{});var d5t=s(D6e);D$r=r(d5t,"mbart"),d5t.forEach(t),G$r=r(jBe," \u2014 "),KJ=n(jBe,"A",{href:!0});var c5t=s(KJ);O$r=r(c5t,"FlaxMBartForSequenceClassification"),c5t.forEach(t),V$r=r(jBe," (mBART model)"),jBe.forEach(t),X$r=i(Ie),w5=n(Ie,"LI",{});var DBe=s(w5);G6e=n(DBe,"STRONG",{});var f5t=s(G6e);z$r=r(f5t,"roberta"),f5t.forEach(t),Q$r=r(DBe," \u2014 "),ZJ=n(DBe,"A",{href:!0});var m5t=s(ZJ);W$r=r(m5t,"FlaxRobertaForSequenceClassification"),m5t.forEach(t),H$r=r(DBe," (RoBERTa model)"),DBe.forEach(t),U$r=i(Ie),A5=n(Ie,"LI",{});var GBe=s(A5);O6e=n(GBe,"STRONG",{});var g5t=s(O6e);J$r=r(g5t,"roformer"),g5t.forEach(t),Y$r=r(GBe," \u2014 "),eY=n(GBe,"A",{href:!0});var h5t=s(eY);K$r=r(h5t,"FlaxRoFormerForSequenceClassification"),h5t.forEach(t),Z$r=r(GBe," (RoFormer model)"),GBe.forEach(t),ekr=i(Ie),y5=n(Ie,"LI",{});var OBe=s(y5);V6e=n(OBe,"STRONG",{});var p5t=s(V6e);okr=r(p5t,"xlm-roberta"),p5t.forEach(t),rkr=r(OBe," \u2014 "),oY=n(OBe,"A",{href:!0});var u5t=s(oY);tkr=r(u5t,"FlaxXLMRobertaForSequenceClassification"),u5t.forEach(t),akr=r(OBe," (XLM-RoBERTa model)"),OBe.forEach(t),Ie.forEach(t),nkr=i(Hl),T(L5.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),cqe=i(f),Xc=n(f,"H2",{class:!0});var _je=s(Xc);x5=n(_je,"A",{id:!0,class:!0,href:!0});var _5t=s(x5);X6e=n(_5t,"SPAN",{});var b5t=s(X6e);T(v7.$$.fragment,b5t),b5t.forEach(t),_5t.forEach(t),skr=i(_je),z6e=n(_je,"SPAN",{});var v5t=s(z6e);lkr=r(v5t,"FlaxAutoModelForQuestionAnswering"),v5t.forEach(t),_je.forEach(t),fqe=i(f),_r=n(f,"DIV",{class:!0});var Ul=s(_r);T(F7.$$.fragment,Ul),ikr=i(Ul),zc=n(Ul,"P",{});var kZ=s(zc);dkr=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rY=n(kZ,"A",{href:!0});var F5t=s(rY);ckr=r(F5t,"from_pretrained()"),F5t.forEach(t),fkr=r(kZ," class method or the "),tY=n(kZ,"A",{href:!0});var T5t=s(tY);mkr=r(T5t,"from_config()"),T5t.forEach(t),gkr=r(kZ,` class
method.`),kZ.forEach(t),hkr=i(Ul),T7=n(Ul,"P",{});var bje=s(T7);pkr=r(bje,"This class cannot be instantiated directly using "),Q6e=n(bje,"CODE",{});var M5t=s(Q6e);ukr=r(M5t,"__init__()"),M5t.forEach(t),_kr=r(bje," (throws an error)."),bje.forEach(t),bkr=i(Ul),zt=n(Ul,"DIV",{class:!0});var xA=s(zt);T(M7.$$.fragment,xA),vkr=i(xA),W6e=n(xA,"P",{});var E5t=s(W6e);Fkr=r(E5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),E5t.forEach(t),Tkr=i(xA),Qc=n(xA,"P",{});var SZ=s(Qc);Mkr=r(SZ,`Note:
Loading a model from its configuration file does `),H6e=n(SZ,"STRONG",{});var C5t=s(H6e);Ekr=r(C5t,"not"),C5t.forEach(t),Ckr=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=n(SZ,"A",{href:!0});var w5t=s(aY);wkr=r(w5t,"from_pretrained()"),w5t.forEach(t),Akr=r(SZ," to load the model weights."),SZ.forEach(t),ykr=i(xA),T($5.$$.fragment,xA),xA.forEach(t),Lkr=i(Ul),zr=n(Ul,"DIV",{class:!0});var Jl=s(zr);T(E7.$$.fragment,Jl),xkr=i(Jl),U6e=n(Jl,"P",{});var A5t=s(U6e);$kr=r(A5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),A5t.forEach(t),kkr=i(Jl),vn=n(Jl,"P",{});var $A=s(vn);Skr=r($A,"The model class to instantiate is selected based on the "),J6e=n($A,"CODE",{});var y5t=s(J6e);Rkr=r(y5t,"model_type"),y5t.forEach(t),Bkr=r($A,` property of the config object (either
passed as an argument or loaded from `),Y6e=n($A,"CODE",{});var L5t=s(Y6e);Pkr=r(L5t,"pretrained_model_name_or_path"),L5t.forEach(t),Ikr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K6e=n($A,"CODE",{});var x5t=s(K6e);qkr=r(x5t,"pretrained_model_name_or_path"),x5t.forEach(t),Nkr=r($A,":"),$A.forEach(t),jkr=i(Jl),$e=n(Jl,"UL",{});var qe=s($e);k5=n(qe,"LI",{});var VBe=s(k5);Z6e=n(VBe,"STRONG",{});var $5t=s(Z6e);Dkr=r($5t,"albert"),$5t.forEach(t),Gkr=r(VBe," \u2014 "),nY=n(VBe,"A",{href:!0});var k5t=s(nY);Okr=r(k5t,"FlaxAlbertForQuestionAnswering"),k5t.forEach(t),Vkr=r(VBe," (ALBERT model)"),VBe.forEach(t),Xkr=i(qe),S5=n(qe,"LI",{});var XBe=s(S5);eTe=n(XBe,"STRONG",{});var S5t=s(eTe);zkr=r(S5t,"bart"),S5t.forEach(t),Qkr=r(XBe," \u2014 "),sY=n(XBe,"A",{href:!0});var R5t=s(sY);Wkr=r(R5t,"FlaxBartForQuestionAnswering"),R5t.forEach(t),Hkr=r(XBe," (BART model)"),XBe.forEach(t),Ukr=i(qe),R5=n(qe,"LI",{});var zBe=s(R5);oTe=n(zBe,"STRONG",{});var B5t=s(oTe);Jkr=r(B5t,"bert"),B5t.forEach(t),Ykr=r(zBe," \u2014 "),lY=n(zBe,"A",{href:!0});var P5t=s(lY);Kkr=r(P5t,"FlaxBertForQuestionAnswering"),P5t.forEach(t),Zkr=r(zBe," (BERT model)"),zBe.forEach(t),eSr=i(qe),B5=n(qe,"LI",{});var QBe=s(B5);rTe=n(QBe,"STRONG",{});var I5t=s(rTe);oSr=r(I5t,"big_bird"),I5t.forEach(t),rSr=r(QBe," \u2014 "),iY=n(QBe,"A",{href:!0});var q5t=s(iY);tSr=r(q5t,"FlaxBigBirdForQuestionAnswering"),q5t.forEach(t),aSr=r(QBe," (BigBird model)"),QBe.forEach(t),nSr=i(qe),P5=n(qe,"LI",{});var WBe=s(P5);tTe=n(WBe,"STRONG",{});var N5t=s(tTe);sSr=r(N5t,"distilbert"),N5t.forEach(t),lSr=r(WBe," \u2014 "),dY=n(WBe,"A",{href:!0});var j5t=s(dY);iSr=r(j5t,"FlaxDistilBertForQuestionAnswering"),j5t.forEach(t),dSr=r(WBe," (DistilBERT model)"),WBe.forEach(t),cSr=i(qe),I5=n(qe,"LI",{});var HBe=s(I5);aTe=n(HBe,"STRONG",{});var D5t=s(aTe);fSr=r(D5t,"electra"),D5t.forEach(t),mSr=r(HBe," \u2014 "),cY=n(HBe,"A",{href:!0});var G5t=s(cY);gSr=r(G5t,"FlaxElectraForQuestionAnswering"),G5t.forEach(t),hSr=r(HBe," (ELECTRA model)"),HBe.forEach(t),pSr=i(qe),q5=n(qe,"LI",{});var UBe=s(q5);nTe=n(UBe,"STRONG",{});var O5t=s(nTe);uSr=r(O5t,"mbart"),O5t.forEach(t),_Sr=r(UBe," \u2014 "),fY=n(UBe,"A",{href:!0});var V5t=s(fY);bSr=r(V5t,"FlaxMBartForQuestionAnswering"),V5t.forEach(t),vSr=r(UBe," (mBART model)"),UBe.forEach(t),FSr=i(qe),N5=n(qe,"LI",{});var JBe=s(N5);sTe=n(JBe,"STRONG",{});var X5t=s(sTe);TSr=r(X5t,"roberta"),X5t.forEach(t),MSr=r(JBe," \u2014 "),mY=n(JBe,"A",{href:!0});var z5t=s(mY);ESr=r(z5t,"FlaxRobertaForQuestionAnswering"),z5t.forEach(t),CSr=r(JBe," (RoBERTa model)"),JBe.forEach(t),wSr=i(qe),j5=n(qe,"LI",{});var YBe=s(j5);lTe=n(YBe,"STRONG",{});var Q5t=s(lTe);ASr=r(Q5t,"roformer"),Q5t.forEach(t),ySr=r(YBe," \u2014 "),gY=n(YBe,"A",{href:!0});var W5t=s(gY);LSr=r(W5t,"FlaxRoFormerForQuestionAnswering"),W5t.forEach(t),xSr=r(YBe," (RoFormer model)"),YBe.forEach(t),$Sr=i(qe),D5=n(qe,"LI",{});var KBe=s(D5);iTe=n(KBe,"STRONG",{});var H5t=s(iTe);kSr=r(H5t,"xlm-roberta"),H5t.forEach(t),SSr=r(KBe," \u2014 "),hY=n(KBe,"A",{href:!0});var U5t=s(hY);RSr=r(U5t,"FlaxXLMRobertaForQuestionAnswering"),U5t.forEach(t),BSr=r(KBe," (XLM-RoBERTa model)"),KBe.forEach(t),qe.forEach(t),PSr=i(Jl),T(G5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),mqe=i(f),Wc=n(f,"H2",{class:!0});var vje=s(Wc);O5=n(vje,"A",{id:!0,class:!0,href:!0});var J5t=s(O5);dTe=n(J5t,"SPAN",{});var Y5t=s(dTe);T(C7.$$.fragment,Y5t),Y5t.forEach(t),J5t.forEach(t),ISr=i(vje),cTe=n(vje,"SPAN",{});var K5t=s(cTe);qSr=r(K5t,"FlaxAutoModelForTokenClassification"),K5t.forEach(t),vje.forEach(t),gqe=i(f),br=n(f,"DIV",{class:!0});var Yl=s(br);T(w7.$$.fragment,Yl),NSr=i(Yl),Hc=n(Yl,"P",{});var RZ=s(Hc);jSr=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pY=n(RZ,"A",{href:!0});var Z5t=s(pY);DSr=r(Z5t,"from_pretrained()"),Z5t.forEach(t),GSr=r(RZ," class method or the "),uY=n(RZ,"A",{href:!0});var e3t=s(uY);OSr=r(e3t,"from_config()"),e3t.forEach(t),VSr=r(RZ,` class
method.`),RZ.forEach(t),XSr=i(Yl),A7=n(Yl,"P",{});var Fje=s(A7);zSr=r(Fje,"This class cannot be instantiated directly using "),fTe=n(Fje,"CODE",{});var o3t=s(fTe);QSr=r(o3t,"__init__()"),o3t.forEach(t),WSr=r(Fje," (throws an error)."),Fje.forEach(t),HSr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var kA=s(Qt);T(y7.$$.fragment,kA),USr=i(kA),mTe=n(kA,"P",{});var r3t=s(mTe);JSr=r(r3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),r3t.forEach(t),YSr=i(kA),Uc=n(kA,"P",{});var BZ=s(Uc);KSr=r(BZ,`Note:
Loading a model from its configuration file does `),gTe=n(BZ,"STRONG",{});var t3t=s(gTe);ZSr=r(t3t,"not"),t3t.forEach(t),eRr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Y=n(BZ,"A",{href:!0});var a3t=s(_Y);oRr=r(a3t,"from_pretrained()"),a3t.forEach(t),rRr=r(BZ," to load the model weights."),BZ.forEach(t),tRr=i(kA),T(V5.$$.fragment,kA),kA.forEach(t),aRr=i(Yl),Qr=n(Yl,"DIV",{class:!0});var Kl=s(Qr);T(L7.$$.fragment,Kl),nRr=i(Kl),hTe=n(Kl,"P",{});var n3t=s(hTe);sRr=r(n3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),n3t.forEach(t),lRr=i(Kl),Fn=n(Kl,"P",{});var SA=s(Fn);iRr=r(SA,"The model class to instantiate is selected based on the "),pTe=n(SA,"CODE",{});var s3t=s(pTe);dRr=r(s3t,"model_type"),s3t.forEach(t),cRr=r(SA,` property of the config object (either
passed as an argument or loaded from `),uTe=n(SA,"CODE",{});var l3t=s(uTe);fRr=r(l3t,"pretrained_model_name_or_path"),l3t.forEach(t),mRr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Te=n(SA,"CODE",{});var i3t=s(_Te);gRr=r(i3t,"pretrained_model_name_or_path"),i3t.forEach(t),hRr=r(SA,":"),SA.forEach(t),pRr=i(Kl),De=n(Kl,"UL",{});var Fo=s(De);X5=n(Fo,"LI",{});var ZBe=s(X5);bTe=n(ZBe,"STRONG",{});var d3t=s(bTe);uRr=r(d3t,"albert"),d3t.forEach(t),_Rr=r(ZBe," \u2014 "),bY=n(ZBe,"A",{href:!0});var c3t=s(bY);bRr=r(c3t,"FlaxAlbertForTokenClassification"),c3t.forEach(t),vRr=r(ZBe," (ALBERT model)"),ZBe.forEach(t),FRr=i(Fo),z5=n(Fo,"LI",{});var ePe=s(z5);vTe=n(ePe,"STRONG",{});var f3t=s(vTe);TRr=r(f3t,"bert"),f3t.forEach(t),MRr=r(ePe," \u2014 "),vY=n(ePe,"A",{href:!0});var m3t=s(vY);ERr=r(m3t,"FlaxBertForTokenClassification"),m3t.forEach(t),CRr=r(ePe," (BERT model)"),ePe.forEach(t),wRr=i(Fo),Q5=n(Fo,"LI",{});var oPe=s(Q5);FTe=n(oPe,"STRONG",{});var g3t=s(FTe);ARr=r(g3t,"big_bird"),g3t.forEach(t),yRr=r(oPe," \u2014 "),FY=n(oPe,"A",{href:!0});var h3t=s(FY);LRr=r(h3t,"FlaxBigBirdForTokenClassification"),h3t.forEach(t),xRr=r(oPe," (BigBird model)"),oPe.forEach(t),$Rr=i(Fo),W5=n(Fo,"LI",{});var rPe=s(W5);TTe=n(rPe,"STRONG",{});var p3t=s(TTe);kRr=r(p3t,"distilbert"),p3t.forEach(t),SRr=r(rPe," \u2014 "),TY=n(rPe,"A",{href:!0});var u3t=s(TY);RRr=r(u3t,"FlaxDistilBertForTokenClassification"),u3t.forEach(t),BRr=r(rPe," (DistilBERT model)"),rPe.forEach(t),PRr=i(Fo),H5=n(Fo,"LI",{});var tPe=s(H5);MTe=n(tPe,"STRONG",{});var _3t=s(MTe);IRr=r(_3t,"electra"),_3t.forEach(t),qRr=r(tPe," \u2014 "),MY=n(tPe,"A",{href:!0});var b3t=s(MY);NRr=r(b3t,"FlaxElectraForTokenClassification"),b3t.forEach(t),jRr=r(tPe," (ELECTRA model)"),tPe.forEach(t),DRr=i(Fo),U5=n(Fo,"LI",{});var aPe=s(U5);ETe=n(aPe,"STRONG",{});var v3t=s(ETe);GRr=r(v3t,"roberta"),v3t.forEach(t),ORr=r(aPe," \u2014 "),EY=n(aPe,"A",{href:!0});var F3t=s(EY);VRr=r(F3t,"FlaxRobertaForTokenClassification"),F3t.forEach(t),XRr=r(aPe," (RoBERTa model)"),aPe.forEach(t),zRr=i(Fo),J5=n(Fo,"LI",{});var nPe=s(J5);CTe=n(nPe,"STRONG",{});var T3t=s(CTe);QRr=r(T3t,"roformer"),T3t.forEach(t),WRr=r(nPe," \u2014 "),CY=n(nPe,"A",{href:!0});var M3t=s(CY);HRr=r(M3t,"FlaxRoFormerForTokenClassification"),M3t.forEach(t),URr=r(nPe," (RoFormer model)"),nPe.forEach(t),JRr=i(Fo),Y5=n(Fo,"LI",{});var sPe=s(Y5);wTe=n(sPe,"STRONG",{});var E3t=s(wTe);YRr=r(E3t,"xlm-roberta"),E3t.forEach(t),KRr=r(sPe," \u2014 "),wY=n(sPe,"A",{href:!0});var C3t=s(wY);ZRr=r(C3t,"FlaxXLMRobertaForTokenClassification"),C3t.forEach(t),eBr=r(sPe," (XLM-RoBERTa model)"),sPe.forEach(t),Fo.forEach(t),oBr=i(Kl),T(K5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),hqe=i(f),Jc=n(f,"H2",{class:!0});var Tje=s(Jc);Z5=n(Tje,"A",{id:!0,class:!0,href:!0});var w3t=s(Z5);ATe=n(w3t,"SPAN",{});var A3t=s(ATe);T(x7.$$.fragment,A3t),A3t.forEach(t),w3t.forEach(t),rBr=i(Tje),yTe=n(Tje,"SPAN",{});var y3t=s(yTe);tBr=r(y3t,"FlaxAutoModelForMultipleChoice"),y3t.forEach(t),Tje.forEach(t),pqe=i(f),vr=n(f,"DIV",{class:!0});var Zl=s(vr);T($7.$$.fragment,Zl),aBr=i(Zl),Yc=n(Zl,"P",{});var PZ=s(Yc);nBr=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AY=n(PZ,"A",{href:!0});var L3t=s(AY);sBr=r(L3t,"from_pretrained()"),L3t.forEach(t),lBr=r(PZ," class method or the "),yY=n(PZ,"A",{href:!0});var x3t=s(yY);iBr=r(x3t,"from_config()"),x3t.forEach(t),dBr=r(PZ,` class
method.`),PZ.forEach(t),cBr=i(Zl),k7=n(Zl,"P",{});var Mje=s(k7);fBr=r(Mje,"This class cannot be instantiated directly using "),LTe=n(Mje,"CODE",{});var $3t=s(LTe);mBr=r($3t,"__init__()"),$3t.forEach(t),gBr=r(Mje," (throws an error)."),Mje.forEach(t),hBr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var RA=s(Wt);T(S7.$$.fragment,RA),pBr=i(RA),xTe=n(RA,"P",{});var k3t=s(xTe);uBr=r(k3t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),k3t.forEach(t),_Br=i(RA),Kc=n(RA,"P",{});var IZ=s(Kc);bBr=r(IZ,`Note:
Loading a model from its configuration file does `),$Te=n(IZ,"STRONG",{});var S3t=s($Te);vBr=r(S3t,"not"),S3t.forEach(t),FBr=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=n(IZ,"A",{href:!0});var R3t=s(LY);TBr=r(R3t,"from_pretrained()"),R3t.forEach(t),MBr=r(IZ," to load the model weights."),IZ.forEach(t),EBr=i(RA),T(e3.$$.fragment,RA),RA.forEach(t),CBr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T(R7.$$.fragment,ei),wBr=i(ei),kTe=n(ei,"P",{});var B3t=s(kTe);ABr=r(B3t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),B3t.forEach(t),yBr=i(ei),Tn=n(ei,"P",{});var BA=s(Tn);LBr=r(BA,"The model class to instantiate is selected based on the "),STe=n(BA,"CODE",{});var P3t=s(STe);xBr=r(P3t,"model_type"),P3t.forEach(t),$Br=r(BA,` property of the config object (either
passed as an argument or loaded from `),RTe=n(BA,"CODE",{});var I3t=s(RTe);kBr=r(I3t,"pretrained_model_name_or_path"),I3t.forEach(t),SBr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=n(BA,"CODE",{});var q3t=s(BTe);RBr=r(q3t,"pretrained_model_name_or_path"),q3t.forEach(t),BBr=r(BA,":"),BA.forEach(t),PBr=i(ei),Ge=n(ei,"UL",{});var To=s(Ge);o3=n(To,"LI",{});var lPe=s(o3);PTe=n(lPe,"STRONG",{});var N3t=s(PTe);IBr=r(N3t,"albert"),N3t.forEach(t),qBr=r(lPe," \u2014 "),xY=n(lPe,"A",{href:!0});var j3t=s(xY);NBr=r(j3t,"FlaxAlbertForMultipleChoice"),j3t.forEach(t),jBr=r(lPe," (ALBERT model)"),lPe.forEach(t),DBr=i(To),r3=n(To,"LI",{});var iPe=s(r3);ITe=n(iPe,"STRONG",{});var D3t=s(ITe);GBr=r(D3t,"bert"),D3t.forEach(t),OBr=r(iPe," \u2014 "),$Y=n(iPe,"A",{href:!0});var G3t=s($Y);VBr=r(G3t,"FlaxBertForMultipleChoice"),G3t.forEach(t),XBr=r(iPe," (BERT model)"),iPe.forEach(t),zBr=i(To),t3=n(To,"LI",{});var dPe=s(t3);qTe=n(dPe,"STRONG",{});var O3t=s(qTe);QBr=r(O3t,"big_bird"),O3t.forEach(t),WBr=r(dPe," \u2014 "),kY=n(dPe,"A",{href:!0});var V3t=s(kY);HBr=r(V3t,"FlaxBigBirdForMultipleChoice"),V3t.forEach(t),UBr=r(dPe," (BigBird model)"),dPe.forEach(t),JBr=i(To),a3=n(To,"LI",{});var cPe=s(a3);NTe=n(cPe,"STRONG",{});var X3t=s(NTe);YBr=r(X3t,"distilbert"),X3t.forEach(t),KBr=r(cPe," \u2014 "),SY=n(cPe,"A",{href:!0});var z3t=s(SY);ZBr=r(z3t,"FlaxDistilBertForMultipleChoice"),z3t.forEach(t),ePr=r(cPe," (DistilBERT model)"),cPe.forEach(t),oPr=i(To),n3=n(To,"LI",{});var fPe=s(n3);jTe=n(fPe,"STRONG",{});var Q3t=s(jTe);rPr=r(Q3t,"electra"),Q3t.forEach(t),tPr=r(fPe," \u2014 "),RY=n(fPe,"A",{href:!0});var W3t=s(RY);aPr=r(W3t,"FlaxElectraForMultipleChoice"),W3t.forEach(t),nPr=r(fPe," (ELECTRA model)"),fPe.forEach(t),sPr=i(To),s3=n(To,"LI",{});var mPe=s(s3);DTe=n(mPe,"STRONG",{});var H3t=s(DTe);lPr=r(H3t,"roberta"),H3t.forEach(t),iPr=r(mPe," \u2014 "),BY=n(mPe,"A",{href:!0});var U3t=s(BY);dPr=r(U3t,"FlaxRobertaForMultipleChoice"),U3t.forEach(t),cPr=r(mPe," (RoBERTa model)"),mPe.forEach(t),fPr=i(To),l3=n(To,"LI",{});var gPe=s(l3);GTe=n(gPe,"STRONG",{});var J3t=s(GTe);mPr=r(J3t,"roformer"),J3t.forEach(t),gPr=r(gPe," \u2014 "),PY=n(gPe,"A",{href:!0});var Y3t=s(PY);hPr=r(Y3t,"FlaxRoFormerForMultipleChoice"),Y3t.forEach(t),pPr=r(gPe," (RoFormer model)"),gPe.forEach(t),uPr=i(To),i3=n(To,"LI",{});var hPe=s(i3);OTe=n(hPe,"STRONG",{});var K3t=s(OTe);_Pr=r(K3t,"xlm-roberta"),K3t.forEach(t),bPr=r(hPe," \u2014 "),IY=n(hPe,"A",{href:!0});var Z3t=s(IY);vPr=r(Z3t,"FlaxXLMRobertaForMultipleChoice"),Z3t.forEach(t),FPr=r(hPe," (XLM-RoBERTa model)"),hPe.forEach(t),To.forEach(t),TPr=i(ei),T(d3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),uqe=i(f),Zc=n(f,"H2",{class:!0});var Eje=s(Zc);c3=n(Eje,"A",{id:!0,class:!0,href:!0});var ewt=s(c3);VTe=n(ewt,"SPAN",{});var owt=s(VTe);T(B7.$$.fragment,owt),owt.forEach(t),ewt.forEach(t),MPr=i(Eje),XTe=n(Eje,"SPAN",{});var rwt=s(XTe);EPr=r(rwt,"FlaxAutoModelForNextSentencePrediction"),rwt.forEach(t),Eje.forEach(t),_qe=i(f),Fr=n(f,"DIV",{class:!0});var oi=s(Fr);T(P7.$$.fragment,oi),CPr=i(oi),ef=n(oi,"P",{});var qZ=s(ef);wPr=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qY=n(qZ,"A",{href:!0});var twt=s(qY);APr=r(twt,"from_pretrained()"),twt.forEach(t),yPr=r(qZ," class method or the "),NY=n(qZ,"A",{href:!0});var awt=s(NY);LPr=r(awt,"from_config()"),awt.forEach(t),xPr=r(qZ,` class
method.`),qZ.forEach(t),$Pr=i(oi),I7=n(oi,"P",{});var Cje=s(I7);kPr=r(Cje,"This class cannot be instantiated directly using "),zTe=n(Cje,"CODE",{});var nwt=s(zTe);SPr=r(nwt,"__init__()"),nwt.forEach(t),RPr=r(Cje," (throws an error)."),Cje.forEach(t),BPr=i(oi),Ht=n(oi,"DIV",{class:!0});var PA=s(Ht);T(q7.$$.fragment,PA),PPr=i(PA),QTe=n(PA,"P",{});var swt=s(QTe);IPr=r(swt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),swt.forEach(t),qPr=i(PA),of=n(PA,"P",{});var NZ=s(of);NPr=r(NZ,`Note:
Loading a model from its configuration file does `),WTe=n(NZ,"STRONG",{});var lwt=s(WTe);jPr=r(lwt,"not"),lwt.forEach(t),DPr=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jY=n(NZ,"A",{href:!0});var iwt=s(jY);GPr=r(iwt,"from_pretrained()"),iwt.forEach(t),OPr=r(NZ," to load the model weights."),NZ.forEach(t),VPr=i(PA),T(f3.$$.fragment,PA),PA.forEach(t),XPr=i(oi),Hr=n(oi,"DIV",{class:!0});var ri=s(Hr);T(N7.$$.fragment,ri),zPr=i(ri),HTe=n(ri,"P",{});var dwt=s(HTe);QPr=r(dwt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dwt.forEach(t),WPr=i(ri),Mn=n(ri,"P",{});var IA=s(Mn);HPr=r(IA,"The model class to instantiate is selected based on the "),UTe=n(IA,"CODE",{});var cwt=s(UTe);UPr=r(cwt,"model_type"),cwt.forEach(t),JPr=r(IA,` property of the config object (either
passed as an argument or loaded from `),JTe=n(IA,"CODE",{});var fwt=s(JTe);YPr=r(fwt,"pretrained_model_name_or_path"),fwt.forEach(t),KPr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YTe=n(IA,"CODE",{});var mwt=s(YTe);ZPr=r(mwt,"pretrained_model_name_or_path"),mwt.forEach(t),eIr=r(IA,":"),IA.forEach(t),oIr=i(ri),KTe=n(ri,"UL",{});var gwt=s(KTe);m3=n(gwt,"LI",{});var pPe=s(m3);ZTe=n(pPe,"STRONG",{});var hwt=s(ZTe);rIr=r(hwt,"bert"),hwt.forEach(t),tIr=r(pPe," \u2014 "),DY=n(pPe,"A",{href:!0});var pwt=s(DY);aIr=r(pwt,"FlaxBertForNextSentencePrediction"),pwt.forEach(t),nIr=r(pPe," (BERT model)"),pPe.forEach(t),gwt.forEach(t),sIr=i(ri),T(g3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),bqe=i(f),rf=n(f,"H2",{class:!0});var wje=s(rf);h3=n(wje,"A",{id:!0,class:!0,href:!0});var uwt=s(h3);eMe=n(uwt,"SPAN",{});var _wt=s(eMe);T(j7.$$.fragment,_wt),_wt.forEach(t),uwt.forEach(t),lIr=i(wje),oMe=n(wje,"SPAN",{});var bwt=s(oMe);iIr=r(bwt,"FlaxAutoModelForImageClassification"),bwt.forEach(t),wje.forEach(t),vqe=i(f),Tr=n(f,"DIV",{class:!0});var ti=s(Tr);T(D7.$$.fragment,ti),dIr=i(ti),tf=n(ti,"P",{});var jZ=s(tf);cIr=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),GY=n(jZ,"A",{href:!0});var vwt=s(GY);fIr=r(vwt,"from_pretrained()"),vwt.forEach(t),mIr=r(jZ," class method or the "),OY=n(jZ,"A",{href:!0});var Fwt=s(OY);gIr=r(Fwt,"from_config()"),Fwt.forEach(t),hIr=r(jZ,` class
method.`),jZ.forEach(t),pIr=i(ti),G7=n(ti,"P",{});var Aje=s(G7);uIr=r(Aje,"This class cannot be instantiated directly using "),rMe=n(Aje,"CODE",{});var Twt=s(rMe);_Ir=r(Twt,"__init__()"),Twt.forEach(t),bIr=r(Aje," (throws an error)."),Aje.forEach(t),vIr=i(ti),Ut=n(ti,"DIV",{class:!0});var qA=s(Ut);T(O7.$$.fragment,qA),FIr=i(qA),tMe=n(qA,"P",{});var Mwt=s(tMe);TIr=r(Mwt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Mwt.forEach(t),MIr=i(qA),af=n(qA,"P",{});var DZ=s(af);EIr=r(DZ,`Note:
Loading a model from its configuration file does `),aMe=n(DZ,"STRONG",{});var Ewt=s(aMe);CIr=r(Ewt,"not"),Ewt.forEach(t),wIr=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=n(DZ,"A",{href:!0});var Cwt=s(VY);AIr=r(Cwt,"from_pretrained()"),Cwt.forEach(t),yIr=r(DZ," to load the model weights."),DZ.forEach(t),LIr=i(qA),T(p3.$$.fragment,qA),qA.forEach(t),xIr=i(ti),Ur=n(ti,"DIV",{class:!0});var ai=s(Ur);T(V7.$$.fragment,ai),$Ir=i(ai),nMe=n(ai,"P",{});var wwt=s(nMe);kIr=r(wwt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wwt.forEach(t),SIr=i(ai),En=n(ai,"P",{});var NA=s(En);RIr=r(NA,"The model class to instantiate is selected based on the "),sMe=n(NA,"CODE",{});var Awt=s(sMe);BIr=r(Awt,"model_type"),Awt.forEach(t),PIr=r(NA,` property of the config object (either
passed as an argument or loaded from `),lMe=n(NA,"CODE",{});var ywt=s(lMe);IIr=r(ywt,"pretrained_model_name_or_path"),ywt.forEach(t),qIr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=n(NA,"CODE",{});var Lwt=s(iMe);NIr=r(Lwt,"pretrained_model_name_or_path"),Lwt.forEach(t),jIr=r(NA,":"),NA.forEach(t),DIr=i(ai),X7=n(ai,"UL",{});var yje=s(X7);u3=n(yje,"LI",{});var uPe=s(u3);dMe=n(uPe,"STRONG",{});var xwt=s(dMe);GIr=r(xwt,"beit"),xwt.forEach(t),OIr=r(uPe," \u2014 "),XY=n(uPe,"A",{href:!0});var $wt=s(XY);VIr=r($wt,"FlaxBeitForImageClassification"),$wt.forEach(t),XIr=r(uPe," (BEiT model)"),uPe.forEach(t),zIr=i(yje),_3=n(yje,"LI",{});var _Pe=s(_3);cMe=n(_Pe,"STRONG",{});var kwt=s(cMe);QIr=r(kwt,"vit"),kwt.forEach(t),WIr=r(_Pe," \u2014 "),zY=n(_Pe,"A",{href:!0});var Swt=s(zY);HIr=r(Swt,"FlaxViTForImageClassification"),Swt.forEach(t),UIr=r(_Pe," (ViT model)"),_Pe.forEach(t),yje.forEach(t),JIr=i(ai),T(b3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Fqe=i(f),nf=n(f,"H2",{class:!0});var Lje=s(nf);v3=n(Lje,"A",{id:!0,class:!0,href:!0});var Rwt=s(v3);fMe=n(Rwt,"SPAN",{});var Bwt=s(fMe);T(z7.$$.fragment,Bwt),Bwt.forEach(t),Rwt.forEach(t),YIr=i(Lje),mMe=n(Lje,"SPAN",{});var Pwt=s(mMe);KIr=r(Pwt,"FlaxAutoModelForVision2Seq"),Pwt.forEach(t),Lje.forEach(t),Tqe=i(f),Mr=n(f,"DIV",{class:!0});var ni=s(Mr);T(Q7.$$.fragment,ni),ZIr=i(ni),sf=n(ni,"P",{});var GZ=s(sf);eqr=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),QY=n(GZ,"A",{href:!0});var Iwt=s(QY);oqr=r(Iwt,"from_pretrained()"),Iwt.forEach(t),rqr=r(GZ," class method or the "),WY=n(GZ,"A",{href:!0});var qwt=s(WY);tqr=r(qwt,"from_config()"),qwt.forEach(t),aqr=r(GZ,` class
method.`),GZ.forEach(t),nqr=i(ni),W7=n(ni,"P",{});var xje=s(W7);sqr=r(xje,"This class cannot be instantiated directly using "),gMe=n(xje,"CODE",{});var Nwt=s(gMe);lqr=r(Nwt,"__init__()"),Nwt.forEach(t),iqr=r(xje," (throws an error)."),xje.forEach(t),dqr=i(ni),Jt=n(ni,"DIV",{class:!0});var jA=s(Jt);T(H7.$$.fragment,jA),cqr=i(jA),hMe=n(jA,"P",{});var jwt=s(hMe);fqr=r(jwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jwt.forEach(t),mqr=i(jA),lf=n(jA,"P",{});var OZ=s(lf);gqr=r(OZ,`Note:
Loading a model from its configuration file does `),pMe=n(OZ,"STRONG",{});var Dwt=s(pMe);hqr=r(Dwt,"not"),Dwt.forEach(t),pqr=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=n(OZ,"A",{href:!0});var Gwt=s(HY);uqr=r(Gwt,"from_pretrained()"),Gwt.forEach(t),_qr=r(OZ," to load the model weights."),OZ.forEach(t),bqr=i(jA),T(F3.$$.fragment,jA),jA.forEach(t),vqr=i(ni),Jr=n(ni,"DIV",{class:!0});var si=s(Jr);T(U7.$$.fragment,si),Fqr=i(si),uMe=n(si,"P",{});var Owt=s(uMe);Tqr=r(Owt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Owt.forEach(t),Mqr=i(si),Cn=n(si,"P",{});var DA=s(Cn);Eqr=r(DA,"The model class to instantiate is selected based on the "),_Me=n(DA,"CODE",{});var Vwt=s(_Me);Cqr=r(Vwt,"model_type"),Vwt.forEach(t),wqr=r(DA,` property of the config object (either
passed as an argument or loaded from `),bMe=n(DA,"CODE",{});var Xwt=s(bMe);Aqr=r(Xwt,"pretrained_model_name_or_path"),Xwt.forEach(t),yqr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vMe=n(DA,"CODE",{});var zwt=s(vMe);Lqr=r(zwt,"pretrained_model_name_or_path"),zwt.forEach(t),xqr=r(DA,":"),DA.forEach(t),$qr=i(si),FMe=n(si,"UL",{});var Qwt=s(FMe);T3=n(Qwt,"LI",{});var bPe=s(T3);TMe=n(bPe,"STRONG",{});var Wwt=s(TMe);kqr=r(Wwt,"vision-encoder-decoder"),Wwt.forEach(t),Sqr=r(bPe," \u2014 "),UY=n(bPe,"A",{href:!0});var Hwt=s(UY);Rqr=r(Hwt,"FlaxVisionEncoderDecoderModel"),Hwt.forEach(t),Bqr=r(bPe," (Vision Encoder decoder model)"),bPe.forEach(t),Qwt.forEach(t),Pqr=i(si),T(M3.$$.fragment,si),si.forEach(t),ni.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Kyt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoTokenizer"),c(gi,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertModel"),c(uf,"id","extending-the-auto-classes"),c(uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uf,"href","#extending-the-auto-classes"),c(hi,"class","relative group"),c(bf,"id","transformers.AutoConfig"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#transformers.AutoConfig"),c(pi,"class","relative group"),c(h$,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(p$,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig"),c(u$,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig"),c(_$,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig"),c(b$,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig"),c(v$,"href","/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(F$,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig"),c(T$,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(M$,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(E$,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(C$,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig"),c(w$,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig"),c(A$,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPConfig"),c(y$,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig"),c(L$,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextConfig"),c(x$,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig"),c($$,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(k$,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(S$,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(R$,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig"),c(B$,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(P$,"href","/docs/transformers/pr_16402/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(I$,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTConfig"),c(q$,"href","/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrConfig"),c(N$,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig"),c(j$,"href","/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRConfig"),c(D$,"href","/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTConfig"),c(G$,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig"),c(O$,"href","/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(V$,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig"),c(X$,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig"),c(z$,"href","/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTConfig"),c(Q$,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig"),c(W$,"href","/docs/transformers/pr_16402/en/model_doc/glpn#transformers.GLPNConfig"),c(H$,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config"),c(U$,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(J$,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig"),c(Y$,"href","/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertConfig"),c(K$,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig"),c(Z$,"href","/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(ek,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(ok,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(rk,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig"),c(tk,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig"),c(ak,"href","/docs/transformers/pr_16402/en/model_doc/luke#transformers.LukeConfig"),c(nk,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig"),c(sk,"href","/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Config"),c(lk,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig"),c(ik,"href","/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(dk,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig"),c(ck,"href","/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTConfig"),c(fk,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(mk,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(gk,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig"),c(hk,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config"),c(pk,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(uk,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(_k,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig"),c(bk,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverConfig"),c(vk,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartConfig"),c(Fk,"href","/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Tk,"href","/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Mk,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Ek,"href","/docs/transformers/pr_16402/en/model_doc/rag#transformers.RagConfig"),c(Ck,"href","/docs/transformers/pr_16402/en/model_doc/realm#transformers.RealmConfig"),c(wk,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig"),c(Ak,"href","/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetConfig"),c(yk,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig"),c(Lk,"href","/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetConfig"),c(xk,"href","/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertConfig"),c($k,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig"),c(kk,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig"),c(Sk,"href","/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerConfig"),c(Rk,"href","/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWConfig"),c(Bk,"href","/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDConfig"),c(Pk,"href","/docs/transformers/pr_16402/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Ik,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(qk,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Nk,"href","/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterConfig"),c(jk,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Dk,"href","/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinConfig"),c(Gk,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config"),c(Ok,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig"),c(Vk,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig"),c(Xk,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(zk,"href","/docs/transformers/pr_16402/en/model_doc/trocr#transformers.TrOCRConfig"),c(Qk,"href","/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Wk,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Hk,"href","/docs/transformers/pr_16402/en/model_doc/van#transformers.VanConfig"),c(Uk,"href","/docs/transformers/pr_16402/en/model_doc/vilt#transformers.ViltConfig"),c(Jk,"href","/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Yk,"href","/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(Kk,"href","/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(Zk,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig"),c(eS,"href","/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(oS,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(rS,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig"),c(tS,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMConfig"),c(aS,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig"),c(nS,"href","/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(sS,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(lS,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(iS,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig"),c(dS,"href","/docs/transformers/pr_16402/en/model_doc/yolos#transformers.YolosConfig"),c(cS,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_g,"id","transformers.AutoTokenizer"),c(_g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_g,"href","#transformers.AutoTokenizer"),c(_i,"class","relative group"),c(fS,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(mS,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizer"),c(gS,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(hS,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartTokenizer"),c(pS,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartTokenizerFast"),c(uS,"href","/docs/transformers/pr_16402/en/model_doc/barthez#transformers.BarthezTokenizer"),c(_S,"href","/docs/transformers/pr_16402/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(bS,"href","/docs/transformers/pr_16402/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(vS,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizer"),c(FS,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizerFast"),c(TS,"href","/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(MS,"href","/docs/transformers/pr_16402/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(ES,"href","/docs/transformers/pr_16402/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(CS,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(wS,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(AS,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(yS,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(LS,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(xS,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c($S,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(kS,"href","/docs/transformers/pr_16402/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(SS,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertTokenizer"),c(RS,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(BS,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineTokenizer"),c(PS,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPTokenizer"),c(IS,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(qS,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(NS,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(jS,"href","/docs/transformers/pr_16402/en/model_doc/cpm#transformers.CpmTokenizer"),c(DS,"href","/docs/transformers/pr_16402/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(GS,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(OS,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizer"),c(VS,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(XS,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaTokenizer"),c(zS,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(QS,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(WS,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(HS,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(US,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(JS,"href","/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(YS,"href","/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(KS,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraTokenizer"),c(ZS,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(eR,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(oR,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetTokenizer"),c(rR,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(tR,"href","/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(aR,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelTokenizer"),c(nR,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(sR,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lR,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(iR,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(dR,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(cR,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(fR,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(mR,"href","/docs/transformers/pr_16402/en/model_doc/herbert#transformers.HerbertTokenizer"),c(gR,"href","/docs/transformers/pr_16402/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(hR,"href","/docs/transformers/pr_16402/en/model_doc/mctct#transformers.Wav2Vec2CTCTokenizer"),c(pR,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizer"),c(uR,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(_R,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(bR,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(vR,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(FR,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(TR,"href","/docs/transformers/pr_16402/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(MR,"href","/docs/transformers/pr_16402/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(ER,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDTokenizer"),c(CR,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDTokenizerFast"),c(wR,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerTokenizer"),c(AR,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(yR,"href","/docs/transformers/pr_16402/en/model_doc/luke#transformers.LukeTokenizer"),c(LR,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(xR,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c($R,"href","/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(kR,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianTokenizer"),c(SR,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartTokenizer"),c(RR,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(BR,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(PR,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(IR,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizer"),c(qR,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizerFast"),c(NR,"href","/docs/transformers/pr_16402/en/model_doc/mluke#transformers.MLukeTokenizer"),c(jR,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(DR,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(GR,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(OR,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(VR,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.T5Tokenizer"),c(XR,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.T5TokenizerFast"),c(zR,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizer"),c(QR,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(WR,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(HR,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(UR,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(JR,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(YR,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(KR,"href","/docs/transformers/pr_16402/en/model_doc/phobert#transformers.PhobertTokenizer"),c(ZR,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartTokenizer"),c(eB,"href","/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(oB,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizer"),c(rB,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizerFast"),c(tB,"href","/docs/transformers/pr_16402/en/model_doc/rag#transformers.RagTokenizer"),c(aB,"href","/docs/transformers/pr_16402/en/model_doc/realm#transformers.RealmTokenizer"),c(nB,"href","/docs/transformers/pr_16402/en/model_doc/realm#transformers.RealmTokenizerFast"),c(sB,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerTokenizer"),c(lB,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(iB,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertTokenizer"),c(dB,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(cB,"href","/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(fB,"href","/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(mB,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizer"),c(gB,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(hB,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(pB,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(uB,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(_B,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(bB,"href","/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterTokenizer"),c(vB,"href","/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(FB,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(TB,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(MB,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.T5Tokenizer"),c(EB,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.T5TokenizerFast"),c(CB,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasTokenizer"),c(wB,"href","/docs/transformers/pr_16402/en/model_doc/tapex#transformers.TapexTokenizer"),c(AB,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(yB,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizer"),c(LB,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizerFast"),c(xB,"href","/docs/transformers/pr_16402/en/model_doc/mctct#transformers.Wav2Vec2CTCTokenizer"),c($B,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(kB,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMTokenizer"),c(SB,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(RB,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMTokenizer"),c(BB,"href","/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(PB,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(IB,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(qB,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizer"),c(NB,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(jB,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(DB,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(GB,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizer"),c(OB,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ug,"id","transformers.AutoFeatureExtractor"),c(Ug,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ug,"href","#transformers.AutoFeatureExtractor"),c(bi,"class","relative group"),c(VB,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(XB,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(zB,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(QB,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(WB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(HB,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(UB,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(JB,"href","/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(YB,"href","/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(KB,"href","/docs/transformers/pr_16402/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(eP,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(oP,"href","/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(rP,"href","/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(tP,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(aP,"href","/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(nP,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(sP,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lP,"href","/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(iP,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(dP,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(cP,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(fP,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(mP,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(gP,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(hP,"href","/docs/transformers/pr_16402/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"id","transformers.AutoProcessor"),c(Ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ch,"href","#transformers.AutoProcessor"),c(vi,"class","relative group"),c(pP,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(uP,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPProcessor"),c(_P,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(bP,"href","/docs/transformers/pr_16402/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(vP,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(FP,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(TP,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(MP,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(EP,"href","/docs/transformers/pr_16402/en/model_doc/trocr#transformers.TrOCRProcessor"),c(CP,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wP,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AP,"href","/docs/transformers/pr_16402/en/model_doc/vilt#transformers.ViltProcessor"),c(yP,"href","/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(LP,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xP,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oh,"id","transformers.AutoModel"),c(Oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Oh,"href","#transformers.AutoModel"),c(Ti,"class","relative group"),c($P,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kP,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SP,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RP,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertModel"),c(BP,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartModel"),c(PP,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitModel"),c(IP,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertModel"),c(qP,"href","/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(NP,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdModel"),c(jP,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(DP,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(GP,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(OP,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertModel"),c(VP,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineModel"),c(XP,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPModel"),c(zP,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertModel"),c(QP,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextModel"),c(WP,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLModel"),c(HP,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(UP,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(JP,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(YP,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaModel"),c(KP,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(ZP,"href","/docs/transformers/pr_16402/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(eI,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTModel"),c(oI,"href","/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrModel"),c(rI,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertModel"),c(tI,"href","/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(aI,"href","/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTModel"),c(nI,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraModel"),c(sI,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertModel"),c(lI,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetModel"),c(iI,"href","/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTModel"),c(dI,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelModel"),c(cI,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelBaseModel"),c(fI,"href","/docs/transformers/pr_16402/en/model_doc/glpn#transformers.GLPNModel"),c(mI,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Model"),c(gI,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(hI,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJModel"),c(pI,"href","/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertModel"),c(uI,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertModel"),c(_I,"href","/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(bI,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(vI,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(FI,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDModel"),c(TI,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerModel"),c(MI,"href","/docs/transformers/pr_16402/en/model_doc/luke#transformers.LukeModel"),c(EI,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertModel"),c(CI,"href","/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Model"),c(wI,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianModel"),c(AI,"href","/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerModel"),c(yI,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartModel"),c(LI,"href","/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTModel"),c(xI,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c($I,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertModel"),c(kI,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetModel"),c(SI,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Model"),c(RI,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerModel"),c(BI,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(PI,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusModel"),c(II,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverModel"),c(qI,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartModel"),c(NI,"href","/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerModel"),c(jI,"href","/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(DI,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertModel"),c(GI,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerModel"),c(OI,"href","/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetModel"),c(VI,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertModel"),c(XI,"href","/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetModel"),c(zI,"href","/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertModel"),c(QI,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaModel"),c(WI,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerModel"),c(HI,"href","/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerModel"),c(UI,"href","/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWModel"),c(JI,"href","/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDModel"),c(YI,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(KI,"href","/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterModel"),c(ZI,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(eq,"href","/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinModel"),c(oq,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Model"),c(rq,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasModel"),c(tq,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(aq,"href","/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechModel"),c(nq,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(sq,"href","/docs/transformers/pr_16402/en/model_doc/van#transformers.VanModel"),c(lq,"href","/docs/transformers/pr_16402/en/model_doc/vilt#transformers.ViltModel"),c(iq,"href","/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(dq,"href","/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertModel"),c(cq,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTModel"),c(fq,"href","/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(mq,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(gq,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMModel"),c(hq,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMModel"),c(pq,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMModel"),c(uq,"href","/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(_q,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(bq,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(vq,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetModel"),c(Fq,"href","/docs/transformers/pr_16402/en/model_doc/yolos#transformers.YolosModel"),c(Tq,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ru,"id","transformers.AutoModelForPreTraining"),c(Ru,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ru,"href","#transformers.AutoModelForPreTraining"),c(Ci,"class","relative group"),c(Mq,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Eq,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cq,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wq,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Aq,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(yq,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForPreTraining"),c(Lq,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(xq,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c($q,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(kq,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Sq,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Rq,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Bq,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Pq,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Iq,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(qq,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Nq,"href","/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(jq,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Dq,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Gq,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Oq,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Vq,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Xq,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(zq,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Qq,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Wq,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Hq,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Uq,"href","/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertModel"),c(Jq,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Yq,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Kq,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Zq,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(eN,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(oN,"href","/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(rN,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(tN,"href","/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(aN,"href","/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(nN,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(sN,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(lN,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(iN,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(dN,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M_,"id","transformers.AutoModelForCausalLM"),c(M_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M_,"href","#transformers.AutoModelForCausalLM"),c(yi,"class","relative group"),c(cN,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fN,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mN,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gN,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForCausalLM"),c(hN,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertLMHeadModel"),c(pN,"href","/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(uN,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(_N,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(bN,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(vN,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(FN,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(TN,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(MN,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(EN,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForCausalLM"),c(CN,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(wN,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(AN,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(yN,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianForCausalLM"),c(LN,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForCausalLM"),c(xN,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c($N,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(kN,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(SN,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(RN,"href","/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(BN,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(PN,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(IN,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(qN,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(NN,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(jN,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(DN,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(GN,"href","/docs/transformers/pr_16402/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(ON,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(VN,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(XN,"href","/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(zN,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(QN,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(WN,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l2,"id","transformers.AutoModelForMaskedLM"),c(l2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l2,"href","#transformers.AutoModelForMaskedLM"),c($i,"class","relative group"),c(HN,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UN,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JN,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YN,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(KN,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ZN,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForMaskedLM"),c(ej,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(oj,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(rj,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(tj,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(aj,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(nj,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(sj,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(lj,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(ij,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(dj,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(cj,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(fj,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(mj,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(gj,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(hj,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(pj,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(uj,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(_j,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(bj,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(vj,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Fj,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Tj,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Mj,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Ej,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Cj,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(wj,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Aj,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(yj,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Lj,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(xj,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c($j,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q2,"id","transformers.AutoModelForSeq2SeqLM"),c(Q2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ri,"class","relative group"),c(kj,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sj,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rj,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bj,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Pj,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Ij,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(qj,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Nj,"href","/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(jj,"href","/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Dj,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Gj,"href","/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Oj,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianMTModel"),c(Vj,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Xj,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(zj,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Qj,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Wj,"href","/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Hj,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Uj,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Jj,"href","/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g1,"id","transformers.AutoModelForSequenceClassification"),c(g1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g1,"href","#transformers.AutoModelForSequenceClassification"),c(Ii,"class","relative group"),c(Yj,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kj,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zj,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eD,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(oD,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForSequenceClassification"),c(rD,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForSequenceClassification"),c(tD,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(aD,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(nD,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(sD,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(lD,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(iD,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(dD,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(cD,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(fD,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(mD,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(gD,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(hD,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(pD,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(uD,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(_D,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(bD,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(vD,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(FD,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(TD,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(MD,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(ED,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForSequenceClassification"),c(CD,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(wD,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(AD,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(yD,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(LD,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(xD,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c($D,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(kD,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(SD,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(RD,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(BD,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(PD,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(ID,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(qD,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(ND,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(jD,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(DD,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForSequenceClassification"),c(GD,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(OD,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(VD,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(XD,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(zD,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(QD,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cb,"id","transformers.AutoModelForMultipleChoice"),c(cb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cb,"href","#transformers.AutoModelForMultipleChoice"),c(ji,"class","relative group"),c(WD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JD,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(YD,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForMultipleChoice"),c(KD,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(ZD,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(eG,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(oG,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(rG,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(tG,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(aG,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(nG,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(sG,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(lG,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(iG,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(dG,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(cG,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(fG,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(mG,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(gG,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(hG,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(pG,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(uG,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(_G,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(bG,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(vG,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(FG,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(TG,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(MG,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(EG,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ob,"id","transformers.AutoModelForNextSentencePrediction"),c(Ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ob,"href","#transformers.AutoModelForNextSentencePrediction"),c(Oi,"class","relative group"),c(CG,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wG,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AG,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yG,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(LG,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(xG,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c($G,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(kG,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yb,"id","transformers.AutoModelForTokenClassification"),c(Yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yb,"href","#transformers.AutoModelForTokenClassification"),c(zi,"class","relative group"),c(SG,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RG,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BG,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PG,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(IG,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForTokenClassification"),c(qG,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(NG,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(jG,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForTokenClassification"),c(DG,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(GG,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(OG,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(VG,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(XG,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(zG,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(QG,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(WG,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(HG,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(UG,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(JG,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(YG,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(KG,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(ZG,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(eO,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(oO,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(rO,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(tO,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(aO,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(nO,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(sO,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(lO,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(iO,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(dO,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(cO,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(fO,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(mO,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(gO,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B4,"id","transformers.AutoModelForQuestionAnswering"),c(B4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B4,"href","#transformers.AutoModelForQuestionAnswering"),c(Hi,"class","relative group"),c(hO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_O,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(bO,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(vO,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(FO,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(TO,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(MO,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(EO,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c($O,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(kO,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(KO,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(oV,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ev,"id","transformers.AutoModelForTableQuestionAnswering"),c(Ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ev,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Yi,"class","relative group"),c(rV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nV,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lv,"id","transformers.AutoModelForImageClassification"),c(Lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lv,"href","#transformers.AutoModelForImageClassification"),c(ed,"class","relative group"),c(sV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dV,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitForImageClassification"),c(cV,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(fV,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(mV,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForImageClassification"),c(gV,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(hV,"href","/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(pV,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(uV,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(_V,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(bV,"href","/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(vV,"href","/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(FV,"href","/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(TV,"href","/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(MV,"href","/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinForImageClassification"),c(EV,"href","/docs/transformers/pr_16402/en/model_doc/van#transformers.VanForImageClassification"),c(CV,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTForImageClassification"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vv,"id","transformers.AutoModelForVision2Seq"),c(Vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vv,"href","#transformers.AutoModelForVision2Seq"),c(td,"class","relative group"),c(wV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LV,"href","/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hv,"id","transformers.AutoModelForAudioClassification"),c(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hv,"href","#transformers.AutoModelForAudioClassification"),c(sd,"class","relative group"),c(xV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($V,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SV,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(RV,"href","/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(BV,"href","/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(PV,"href","/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(IV,"href","/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(qV,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(NV,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(jV,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sF,"id","transformers.AutoModelForAudioFrameClassification"),c(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sF,"href","#transformers.AutoModelForAudioFrameClassification"),c(dd,"class","relative group"),c(DV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VV,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(XV,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(zV,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(QV,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hF,"id","transformers.AutoModelForCTC"),c(hF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hF,"href","#transformers.AutoModelForCTC"),c(md,"class","relative group"),c(WV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JV,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(YV,"href","/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertForCTC"),c(KV,"href","/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTForCTC"),c(ZV,"href","/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWForCTC"),c(eX,"href","/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDForCTC"),c(oX,"href","/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(rX,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(tX,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(aX,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForCTC"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(pd,"class","relative group"),c(nX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iX,"href","/docs/transformers/pr_16402/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(dX,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RF,"id","transformers.AutoModelForAudioXVector"),c(RF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RF,"href","#transformers.AutoModelForAudioXVector"),c(bd,"class","relative group"),c(cX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gX,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(hX,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(pX,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(uX,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForXVector"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GF,"id","transformers.AutoModelForMaskedImageModeling"),c(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Td,"class","relative group"),c(_X,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FX,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(TX,"href","/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(MX,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HF,"id","transformers.AutoModelForObjectDetection"),c(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HF,"href","#transformers.AutoModelForObjectDetection"),c(wd,"class","relative group"),c(EX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AX,"href","/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrForObjectDetection"),c(yX,"href","/docs/transformers/pr_16402/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e0,"id","transformers.AutoModelForImageSegmentation"),c(e0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e0,"href","#transformers.AutoModelForImageSegmentation"),c(Ld,"class","relative group"),c(LX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n0,"id","transformers.AutoModelForSemanticSegmentation"),c(n0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n0,"href","#transformers.AutoModelForSemanticSegmentation"),c(kd,"class","relative group"),c(SX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PX,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(IX,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(qX,"href","/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(NX,"href","/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g0,"id","transformers.AutoModelForInstanceSegmentation"),c(g0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g0,"href","#transformers.AutoModelForInstanceSegmentation"),c(Bd,"class","relative group"),c(jX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OX,"href","/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b0,"id","transformers.TFAutoModel"),c(b0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b0,"href","#transformers.TFAutoModel"),c(qd,"class","relative group"),c(VX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QX,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertModel"),c(WX,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartModel"),c(HX,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertModel"),c(UX,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(JX,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(YX,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertModel"),c(KX,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.TFCLIPModel"),c(ZX,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertModel"),c(ez,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.TFConvNextModel"),c(oz,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLModel"),c(rz,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(tz,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaModel"),c(az,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(nz,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(sz,"href","/docs/transformers/pr_16402/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(lz,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraModel"),c(iz,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(dz,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelModel"),c(cz,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(fz,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2Model"),c(mz,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJModel"),c(gz,"href","/docs/transformers/pr_16402/en/model_doc/hubert#transformers.TFHubertModel"),c(hz,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(pz,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.TFLEDModel"),c(uz,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerModel"),c(_z,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.TFLxmertModel"),c(bz,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.TFMarianModel"),c(vz,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.TFMBartModel"),c(Fz,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Tz,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Mz,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.TFMT5Model"),c(Ez,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Cz,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.TFPegasusModel"),c(wz,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertModel"),c(Az,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaModel"),c(yz,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Lz,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(xz,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5Model"),c($z,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasModel"),c(kz,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Sz,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.TFViTModel"),c(Rz,"href","/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Bz,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Pz,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMModel"),c(Iz,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(qz,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f6,"id","transformers.TFAutoModelForPreTraining"),c(f6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f6,"href","#transformers.TFAutoModelForPreTraining"),c(Dd,"class","relative group"),c(Nz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gz,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Oz,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Vz,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Xz,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(zz,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Qz,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Wz,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Hz,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Uz,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Jz,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Yz,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Kz,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(Zz,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(eQ,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(oQ,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(rQ,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(tQ,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(aQ,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(nQ,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(sQ,"href","/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(lQ,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(iQ,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(dQ,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q6,"id","transformers.TFAutoModelForCausalLM"),c(q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q6,"href","#transformers.TFAutoModelForCausalLM"),c(Vd,"class","relative group"),c(cQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gQ,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(hQ,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(pQ,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(uQ,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(_Q,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(bQ,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(vQ,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(FQ,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(TQ,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(MQ,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(EQ,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(CQ,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K6,"id","transformers.TFAutoModelForImageClassification"),c(K6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K6,"href","#transformers.TFAutoModelForImageClassification"),c(Qd,"class","relative group"),c(wQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LQ,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(xQ,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c($Q,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.TFAutoModelForMaskedLM"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(kQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(PQ,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(IQ,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(qQ,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(NQ,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(jQ,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(DQ,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(GQ,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(OQ,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(VQ,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(XQ,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(zQ,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(QQ,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(WQ,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(HQ,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(UQ,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(JQ,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(YQ,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(KQ,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(ZQ,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(eW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tW,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(aW,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(nW,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(sW,"href","/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(lW,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(iW,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.TFMarianMTModel"),c(dW,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(cW,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(fW,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(mW,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.TFAutoModelForSequenceClassification"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(gW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uW,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(_W,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(bW,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(vW,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(FW,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(TW,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(MW,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(EW,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(CW,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(wW,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(AW,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(yW,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(LW,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(xW,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c($W,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(kW,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(SW,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(RW,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(BW,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(PW,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(IW,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(qW,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(NW,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(jW,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(DW,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(GW,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.TFAutoModelForMultipleChoice"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(OW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zW,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(QW,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(WW,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(HW,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(UW,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(JW,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(YW,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(KW,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(ZW,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(eH,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(oH,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(rH,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(tH,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(aH,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(nH,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(sH,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(lH,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(PM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(iH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fH,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(mH,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(fc,"class","relative group"),c(gH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uH,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XM,"id","transformers.TFAutoModelForTokenClassification"),c(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XM,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(_H,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FH,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(TH,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(MH,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(EH,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(CH,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(wH,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(AH,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(yH,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(LH,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(xH,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c($H,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(kH,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(SH,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(RH,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(BH,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(PH,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(IH,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(qH,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(NH,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(jH,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gE,"id","transformers.TFAutoModelForQuestionAnswering"),c(gE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(DH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VH,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(XH,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(zH,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(QH,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(WH,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(HH,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(UH,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(JH,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(YH,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(KH,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(ZH,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(eU,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(oU,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(rU,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(tU,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(aU,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(nU,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(sU,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(lU,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(iU,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IE,"id","transformers.TFAutoModelForVision2Seq"),c(IE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IE,"href","#transformers.TFAutoModelForVision2Seq"),c(Fc,"class","relative group"),c(dU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mU,"href","/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(DE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(gU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uU,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XE,"id","transformers.FlaxAutoModel"),c(XE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XE,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(_U,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertModel"),c(TU,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartModel"),c(MU,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.FlaxBeitModel"),c(EU,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertModel"),c(CU,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(wU,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(AU,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(yU,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.FlaxCLIPModel"),c(LU,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(xU,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraModel"),c($U,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(kU,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(SU,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(RU,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.FlaxMarianModel"),c(BU,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartModel"),c(PU,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5Model"),c(IU,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(qU,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(NU,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(jU,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5Model"),c(DU,"href","/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(GU,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.FlaxViTModel"),c(OU,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(VU,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(XU,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bC,"id","transformers.FlaxAutoModelForCausalLM"),c(bC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bC,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(zU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HU,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(UU,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(JU,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(YU,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(KU,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(ZU,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(eJ,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(oJ,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(rJ,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($C,"id","transformers.FlaxAutoModelForPreTraining"),c($C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($C,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(tJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sJ,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(lJ,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(iJ,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(dJ,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(cJ,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(fJ,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(mJ,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(gJ,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(hJ,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(pJ,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(uJ,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(_J,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zC,"id","transformers.FlaxAutoModelForMaskedLM"),c(zC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(bJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TJ,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(MJ,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(EJ,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(CJ,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(wJ,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(AJ,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(yJ,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(LJ,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(xJ,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c($J,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(a5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(kJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BJ,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(PJ,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(IJ,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(qJ,"href","/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(NJ,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(jJ,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(DJ,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(GJ,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(OJ,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(u5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(VJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QJ,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(WJ,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(HJ,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(UJ,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(JJ,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(YJ,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(KJ,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(ZJ,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(eY,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(oY,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(x5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(rY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nY,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(sY,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(lY,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(iY,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(dY,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(cY,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(fY,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(mY,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(gY,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(hY,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O5,"id","transformers.FlaxAutoModelForTokenClassification"),c(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(pY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Y,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bY,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(vY,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(FY,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(TY,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(MY,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(EY,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(CY,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(wY,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(AY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xY,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c($Y,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(kY,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(SY,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(RY,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(BY,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(PY,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(IY,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(c3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(qY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DY,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h3,"id","transformers.FlaxAutoModelForImageClassification"),c(h3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h3,"href","#transformers.FlaxAutoModelForImageClassification"),c(rf,"class","relative group"),c(GY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XY,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(zY,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v3,"id","transformers.FlaxAutoModelForVision2Seq"),c(v3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nf,"class","relative group"),c(QY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HY,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UY,"href","/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,li),b(f,mf,_),b(f,et,_),e(et,ii),e(et,di),e(di,GA),e(et,gf),b(f,Ne,_),b(f,ze,_),e(ze,ci),e(ze,An),e(An,OA),e(ze,yn),e(ze,Ln),e(Ln,VA),e(ze,fi),e(ze,xn),e(xn,XA),e(ze,mi),b(f,hf,_),M(Ma,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,i$),e(Ae,gi),e(gi,d$),e(Ae,c$),b(f,Eo,_),b(f,Ea,_),e(Ea,f$),e(Ea,pf),e(pf,m$),e(Ea,$je),b(f,vPe,_),b(f,hi,_),e(hi,uf),e(uf,VZ),M(zA,VZ,null),e(hi,kje),e(hi,XZ),e(XZ,Sje),b(f,FPe,_),b(f,$n,_),e($n,Rje),e($n,zZ),e(zZ,Bje),e($n,Pje),e($n,QZ),e(QZ,Ije),e($n,qje),b(f,TPe,_),M(QA,f,_),b(f,MPe,_),b(f,g$,_),e(g$,Nje),b(f,EPe,_),M(_f,f,_),b(f,CPe,_),b(f,pi,_),e(pi,bf),e(bf,WZ),M(WA,WZ,null),e(pi,jje),e(pi,HZ),e(HZ,Dje),b(f,wPe,_),b(f,Co,_),M(HA,Co,null),e(Co,Gje),e(Co,UA),e(UA,Oje),e(UA,h$),e(h$,Vje),e(UA,Xje),e(Co,zje),e(Co,JA),e(JA,Qje),e(JA,UZ),e(UZ,Wje),e(JA,Hje),e(Co,Uje),e(Co,Er),M(YA,Er,null),e(Er,Jje),e(Er,JZ),e(JZ,Yje),e(Er,Kje),e(Er,ui),e(ui,Zje),e(ui,YZ),e(YZ,eDe),e(ui,oDe),e(ui,KZ),e(KZ,rDe),e(ui,tDe),e(Er,aDe),e(Er,y),e(y,vf),e(vf,ZZ),e(ZZ,nDe),e(vf,sDe),e(vf,p$),e(p$,lDe),e(vf,iDe),e(y,dDe),e(y,Ff),e(Ff,eee),e(eee,cDe),e(Ff,fDe),e(Ff,u$),e(u$,mDe),e(Ff,gDe),e(y,hDe),e(y,Tf),e(Tf,oee),e(oee,pDe),e(Tf,uDe),e(Tf,_$),e(_$,_De),e(Tf,bDe),e(y,vDe),e(y,Mf),e(Mf,ree),e(ree,FDe),e(Mf,TDe),e(Mf,b$),e(b$,MDe),e(Mf,EDe),e(y,CDe),e(y,Ef),e(Ef,tee),e(tee,wDe),e(Ef,ADe),e(Ef,v$),e(v$,yDe),e(Ef,LDe),e(y,xDe),e(y,Cf),e(Cf,aee),e(aee,$De),e(Cf,kDe),e(Cf,F$),e(F$,SDe),e(Cf,RDe),e(y,BDe),e(y,wf),e(wf,nee),e(nee,PDe),e(wf,IDe),e(wf,T$),e(T$,qDe),e(wf,NDe),e(y,jDe),e(y,Af),e(Af,see),e(see,DDe),e(Af,GDe),e(Af,M$),e(M$,ODe),e(Af,VDe),e(y,XDe),e(y,yf),e(yf,lee),e(lee,zDe),e(yf,QDe),e(yf,E$),e(E$,WDe),e(yf,HDe),e(y,UDe),e(y,Lf),e(Lf,iee),e(iee,JDe),e(Lf,YDe),e(Lf,C$),e(C$,KDe),e(Lf,ZDe),e(y,eGe),e(y,xf),e(xf,dee),e(dee,oGe),e(xf,rGe),e(xf,w$),e(w$,tGe),e(xf,aGe),e(y,nGe),e(y,$f),e($f,cee),e(cee,sGe),e($f,lGe),e($f,A$),e(A$,iGe),e($f,dGe),e(y,cGe),e(y,kf),e(kf,fee),e(fee,fGe),e(kf,mGe),e(kf,y$),e(y$,gGe),e(kf,hGe),e(y,pGe),e(y,Sf),e(Sf,mee),e(mee,uGe),e(Sf,_Ge),e(Sf,L$),e(L$,bGe),e(Sf,vGe),e(y,FGe),e(y,Rf),e(Rf,gee),e(gee,TGe),e(Rf,MGe),e(Rf,x$),e(x$,EGe),e(Rf,CGe),e(y,wGe),e(y,Bf),e(Bf,hee),e(hee,AGe),e(Bf,yGe),e(Bf,$$),e($$,LGe),e(Bf,xGe),e(y,$Ge),e(y,Pf),e(Pf,pee),e(pee,kGe),e(Pf,SGe),e(Pf,k$),e(k$,RGe),e(Pf,BGe),e(y,PGe),e(y,If),e(If,uee),e(uee,IGe),e(If,qGe),e(If,S$),e(S$,NGe),e(If,jGe),e(y,DGe),e(y,qf),e(qf,_ee),e(_ee,GGe),e(qf,OGe),e(qf,R$),e(R$,VGe),e(qf,XGe),e(y,zGe),e(y,Nf),e(Nf,bee),e(bee,QGe),e(Nf,WGe),e(Nf,B$),e(B$,HGe),e(Nf,UGe),e(y,JGe),e(y,jf),e(jf,vee),e(vee,YGe),e(jf,KGe),e(jf,P$),e(P$,ZGe),e(jf,eOe),e(y,oOe),e(y,Df),e(Df,Fee),e(Fee,rOe),e(Df,tOe),e(Df,I$),e(I$,aOe),e(Df,nOe),e(y,sOe),e(y,Gf),e(Gf,Tee),e(Tee,lOe),e(Gf,iOe),e(Gf,q$),e(q$,dOe),e(Gf,cOe),e(y,fOe),e(y,Of),e(Of,Mee),e(Mee,mOe),e(Of,gOe),e(Of,N$),e(N$,hOe),e(Of,pOe),e(y,uOe),e(y,Vf),e(Vf,Eee),e(Eee,_Oe),e(Vf,bOe),e(Vf,j$),e(j$,vOe),e(Vf,FOe),e(y,TOe),e(y,Xf),e(Xf,Cee),e(Cee,MOe),e(Xf,EOe),e(Xf,D$),e(D$,COe),e(Xf,wOe),e(y,AOe),e(y,zf),e(zf,wee),e(wee,yOe),e(zf,LOe),e(zf,G$),e(G$,xOe),e(zf,$Oe),e(y,kOe),e(y,Qf),e(Qf,Aee),e(Aee,SOe),e(Qf,ROe),e(Qf,O$),e(O$,BOe),e(Qf,POe),e(y,IOe),e(y,Wf),e(Wf,yee),e(yee,qOe),e(Wf,NOe),e(Wf,V$),e(V$,jOe),e(Wf,DOe),e(y,GOe),e(y,Hf),e(Hf,Lee),e(Lee,OOe),e(Hf,VOe),e(Hf,X$),e(X$,XOe),e(Hf,zOe),e(y,QOe),e(y,Uf),e(Uf,xee),e(xee,WOe),e(Uf,HOe),e(Uf,z$),e(z$,UOe),e(Uf,JOe),e(y,YOe),e(y,Jf),e(Jf,$ee),e($ee,KOe),e(Jf,ZOe),e(Jf,Q$),e(Q$,eVe),e(Jf,oVe),e(y,rVe),e(y,Yf),e(Yf,kee),e(kee,tVe),e(Yf,aVe),e(Yf,W$),e(W$,nVe),e(Yf,sVe),e(y,lVe),e(y,Kf),e(Kf,See),e(See,iVe),e(Kf,dVe),e(Kf,H$),e(H$,cVe),e(Kf,fVe),e(y,mVe),e(y,Zf),e(Zf,Ree),e(Ree,gVe),e(Zf,hVe),e(Zf,U$),e(U$,pVe),e(Zf,uVe),e(y,_Ve),e(y,em),e(em,Bee),e(Bee,bVe),e(em,vVe),e(em,J$),e(J$,FVe),e(em,TVe),e(y,MVe),e(y,om),e(om,Pee),e(Pee,EVe),e(om,CVe),e(om,Y$),e(Y$,wVe),e(om,AVe),e(y,yVe),e(y,rm),e(rm,Iee),e(Iee,LVe),e(rm,xVe),e(rm,K$),e(K$,$Ve),e(rm,kVe),e(y,SVe),e(y,tm),e(tm,qee),e(qee,RVe),e(tm,BVe),e(tm,Z$),e(Z$,PVe),e(tm,IVe),e(y,qVe),e(y,am),e(am,Nee),e(Nee,NVe),e(am,jVe),e(am,ek),e(ek,DVe),e(am,GVe),e(y,OVe),e(y,nm),e(nm,jee),e(jee,VVe),e(nm,XVe),e(nm,ok),e(ok,zVe),e(nm,QVe),e(y,WVe),e(y,sm),e(sm,Dee),e(Dee,HVe),e(sm,UVe),e(sm,rk),e(rk,JVe),e(sm,YVe),e(y,KVe),e(y,lm),e(lm,Gee),e(Gee,ZVe),e(lm,eXe),e(lm,tk),e(tk,oXe),e(lm,rXe),e(y,tXe),e(y,im),e(im,Oee),e(Oee,aXe),e(im,nXe),e(im,ak),e(ak,sXe),e(im,lXe),e(y,iXe),e(y,dm),e(dm,Vee),e(Vee,dXe),e(dm,cXe),e(dm,nk),e(nk,fXe),e(dm,mXe),e(y,gXe),e(y,cm),e(cm,Xee),e(Xee,hXe),e(cm,pXe),e(cm,sk),e(sk,uXe),e(cm,_Xe),e(y,bXe),e(y,fm),e(fm,zee),e(zee,vXe),e(fm,FXe),e(fm,lk),e(lk,TXe),e(fm,MXe),e(y,EXe),e(y,mm),e(mm,Qee),e(Qee,CXe),e(mm,wXe),e(mm,ik),e(ik,AXe),e(mm,yXe),e(y,LXe),e(y,gm),e(gm,Wee),e(Wee,xXe),e(gm,$Xe),e(gm,dk),e(dk,kXe),e(gm,SXe),e(y,RXe),e(y,hm),e(hm,Hee),e(Hee,BXe),e(hm,PXe),e(hm,ck),e(ck,IXe),e(hm,qXe),e(y,NXe),e(y,pm),e(pm,Uee),e(Uee,jXe),e(pm,DXe),e(pm,fk),e(fk,GXe),e(pm,OXe),e(y,VXe),e(y,um),e(um,Jee),e(Jee,XXe),e(um,zXe),e(um,mk),e(mk,QXe),e(um,WXe),e(y,HXe),e(y,_m),e(_m,Yee),e(Yee,UXe),e(_m,JXe),e(_m,gk),e(gk,YXe),e(_m,KXe),e(y,ZXe),e(y,bm),e(bm,Kee),e(Kee,eze),e(bm,oze),e(bm,hk),e(hk,rze),e(bm,tze),e(y,aze),e(y,vm),e(vm,Zee),e(Zee,nze),e(vm,sze),e(vm,pk),e(pk,lze),e(vm,ize),e(y,dze),e(y,Fm),e(Fm,eoe),e(eoe,cze),e(Fm,fze),e(Fm,uk),e(uk,mze),e(Fm,gze),e(y,hze),e(y,Tm),e(Tm,ooe),e(ooe,pze),e(Tm,uze),e(Tm,_k),e(_k,_ze),e(Tm,bze),e(y,vze),e(y,Mm),e(Mm,roe),e(roe,Fze),e(Mm,Tze),e(Mm,bk),e(bk,Mze),e(Mm,Eze),e(y,Cze),e(y,Em),e(Em,toe),e(toe,wze),e(Em,Aze),e(Em,vk),e(vk,yze),e(Em,Lze),e(y,xze),e(y,Cm),e(Cm,aoe),e(aoe,$ze),e(Cm,kze),e(Cm,Fk),e(Fk,Sze),e(Cm,Rze),e(y,Bze),e(y,wm),e(wm,noe),e(noe,Pze),e(wm,Ize),e(wm,Tk),e(Tk,qze),e(wm,Nze),e(y,jze),e(y,Am),e(Am,soe),e(soe,Dze),e(Am,Gze),e(Am,Mk),e(Mk,Oze),e(Am,Vze),e(y,Xze),e(y,ym),e(ym,loe),e(loe,zze),e(ym,Qze),e(ym,Ek),e(Ek,Wze),e(ym,Hze),e(y,Uze),e(y,Lm),e(Lm,ioe),e(ioe,Jze),e(Lm,Yze),e(Lm,Ck),e(Ck,Kze),e(Lm,Zze),e(y,eQe),e(y,xm),e(xm,doe),e(doe,oQe),e(xm,rQe),e(xm,wk),e(wk,tQe),e(xm,aQe),e(y,nQe),e(y,$m),e($m,coe),e(coe,sQe),e($m,lQe),e($m,Ak),e(Ak,iQe),e($m,dQe),e(y,cQe),e(y,km),e(km,foe),e(foe,fQe),e(km,mQe),e(km,yk),e(yk,gQe),e(km,hQe),e(y,pQe),e(y,Sm),e(Sm,moe),e(moe,uQe),e(Sm,_Qe),e(Sm,Lk),e(Lk,bQe),e(Sm,vQe),e(y,FQe),e(y,Rm),e(Rm,goe),e(goe,TQe),e(Rm,MQe),e(Rm,xk),e(xk,EQe),e(Rm,CQe),e(y,wQe),e(y,Bm),e(Bm,hoe),e(hoe,AQe),e(Bm,yQe),e(Bm,$k),e($k,LQe),e(Bm,xQe),e(y,$Qe),e(y,Pm),e(Pm,poe),e(poe,kQe),e(Pm,SQe),e(Pm,kk),e(kk,RQe),e(Pm,BQe),e(y,PQe),e(y,Im),e(Im,uoe),e(uoe,IQe),e(Im,qQe),e(Im,Sk),e(Sk,NQe),e(Im,jQe),e(y,DQe),e(y,qm),e(qm,_oe),e(_oe,GQe),e(qm,OQe),e(qm,Rk),e(Rk,VQe),e(qm,XQe),e(y,zQe),e(y,Nm),e(Nm,boe),e(boe,QQe),e(Nm,WQe),e(Nm,Bk),e(Bk,HQe),e(Nm,UQe),e(y,JQe),e(y,jm),e(jm,voe),e(voe,YQe),e(jm,KQe),e(jm,Pk),e(Pk,ZQe),e(jm,eWe),e(y,oWe),e(y,Dm),e(Dm,Foe),e(Foe,rWe),e(Dm,tWe),e(Dm,Ik),e(Ik,aWe),e(Dm,nWe),e(y,sWe),e(y,Gm),e(Gm,Toe),e(Toe,lWe),e(Gm,iWe),e(Gm,qk),e(qk,dWe),e(Gm,cWe),e(y,fWe),e(y,Om),e(Om,Moe),e(Moe,mWe),e(Om,gWe),e(Om,Nk),e(Nk,hWe),e(Om,pWe),e(y,uWe),e(y,Vm),e(Vm,Eoe),e(Eoe,_We),e(Vm,bWe),e(Vm,jk),e(jk,vWe),e(Vm,FWe),e(y,TWe),e(y,Xm),e(Xm,Coe),e(Coe,MWe),e(Xm,EWe),e(Xm,Dk),e(Dk,CWe),e(Xm,wWe),e(y,AWe),e(y,zm),e(zm,woe),e(woe,yWe),e(zm,LWe),e(zm,Gk),e(Gk,xWe),e(zm,$We),e(y,kWe),e(y,Qm),e(Qm,Aoe),e(Aoe,SWe),e(Qm,RWe),e(Qm,Ok),e(Ok,BWe),e(Qm,PWe),e(y,IWe),e(y,Wm),e(Wm,yoe),e(yoe,qWe),e(Wm,NWe),e(Wm,Vk),e(Vk,jWe),e(Wm,DWe),e(y,GWe),e(y,Hm),e(Hm,Loe),e(Loe,OWe),e(Hm,VWe),e(Hm,Xk),e(Xk,XWe),e(Hm,zWe),e(y,QWe),e(y,Um),e(Um,xoe),e(xoe,WWe),e(Um,HWe),e(Um,zk),e(zk,UWe),e(Um,JWe),e(y,YWe),e(y,Jm),e(Jm,$oe),e($oe,KWe),e(Jm,ZWe),e(Jm,Qk),e(Qk,eHe),e(Jm,oHe),e(y,rHe),e(y,Ym),e(Ym,koe),e(koe,tHe),e(Ym,aHe),e(Ym,Wk),e(Wk,nHe),e(Ym,sHe),e(y,lHe),e(y,Km),e(Km,Soe),e(Soe,iHe),e(Km,dHe),e(Km,Hk),e(Hk,cHe),e(Km,fHe),e(y,mHe),e(y,Zm),e(Zm,Roe),e(Roe,gHe),e(Zm,hHe),e(Zm,Uk),e(Uk,pHe),e(Zm,uHe),e(y,_He),e(y,eg),e(eg,Boe),e(Boe,bHe),e(eg,vHe),e(eg,Jk),e(Jk,FHe),e(eg,THe),e(y,MHe),e(y,og),e(og,Poe),e(Poe,EHe),e(og,CHe),e(og,Yk),e(Yk,wHe),e(og,AHe),e(y,yHe),e(y,rg),e(rg,Ioe),e(Ioe,LHe),e(rg,xHe),e(rg,Kk),e(Kk,$He),e(rg,kHe),e(y,SHe),e(y,tg),e(tg,qoe),e(qoe,RHe),e(tg,BHe),e(tg,Zk),e(Zk,PHe),e(tg,IHe),e(y,qHe),e(y,ag),e(ag,Noe),e(Noe,NHe),e(ag,jHe),e(ag,eS),e(eS,DHe),e(ag,GHe),e(y,OHe),e(y,ng),e(ng,joe),e(joe,VHe),e(ng,XHe),e(ng,oS),e(oS,zHe),e(ng,QHe),e(y,WHe),e(y,sg),e(sg,Doe),e(Doe,HHe),e(sg,UHe),e(sg,rS),e(rS,JHe),e(sg,YHe),e(y,KHe),e(y,lg),e(lg,Goe),e(Goe,ZHe),e(lg,eUe),e(lg,tS),e(tS,oUe),e(lg,rUe),e(y,tUe),e(y,ig),e(ig,Ooe),e(Ooe,aUe),e(ig,nUe),e(ig,aS),e(aS,sUe),e(ig,lUe),e(y,iUe),e(y,dg),e(dg,Voe),e(Voe,dUe),e(dg,cUe),e(dg,nS),e(nS,fUe),e(dg,mUe),e(y,gUe),e(y,cg),e(cg,Xoe),e(Xoe,hUe),e(cg,pUe),e(cg,sS),e(sS,uUe),e(cg,_Ue),e(y,bUe),e(y,fg),e(fg,zoe),e(zoe,vUe),e(fg,FUe),e(fg,lS),e(lS,TUe),e(fg,MUe),e(y,EUe),e(y,mg),e(mg,Qoe),e(Qoe,CUe),e(mg,wUe),e(mg,iS),e(iS,AUe),e(mg,yUe),e(y,LUe),e(y,gg),e(gg,Woe),e(Woe,xUe),e(gg,$Ue),e(gg,dS),e(dS,kUe),e(gg,SUe),e(y,RUe),e(y,hg),e(hg,Hoe),e(Hoe,BUe),e(hg,PUe),e(hg,cS),e(cS,IUe),e(hg,qUe),e(Er,NUe),M(pg,Er,null),e(Co,jUe),e(Co,ug),M(KA,ug,null),e(ug,DUe),e(ug,Uoe),e(Uoe,GUe),b(f,APe,_),b(f,_i,_),e(_i,_g),e(_g,Joe),M(ZA,Joe,null),e(_i,OUe),e(_i,Yoe),e(Yoe,VUe),b(f,yPe,_),b(f,wo,_),M(ey,wo,null),e(wo,XUe),e(wo,oy),e(oy,zUe),e(oy,fS),e(fS,QUe),e(oy,WUe),e(wo,HUe),e(wo,ry),e(ry,UUe),e(ry,Koe),e(Koe,JUe),e(ry,YUe),e(wo,KUe),e(wo,Cr),M(ty,Cr,null),e(Cr,ZUe),e(Cr,Zoe),e(Zoe,eJe),e(Cr,oJe),e(Cr,Ca),e(Ca,rJe),e(Ca,ere),e(ere,tJe),e(Ca,aJe),e(Ca,ore),e(ore,nJe),e(Ca,sJe),e(Ca,rre),e(rre,lJe),e(Ca,iJe),e(Cr,dJe),e(Cr,k),e(k,kn),e(kn,tre),e(tre,cJe),e(kn,fJe),e(kn,mS),e(mS,mJe),e(kn,gJe),e(kn,gS),e(gS,hJe),e(kn,pJe),e(k,uJe),e(k,Sn),e(Sn,are),e(are,_Je),e(Sn,bJe),e(Sn,hS),e(hS,vJe),e(Sn,FJe),e(Sn,pS),e(pS,TJe),e(Sn,MJe),e(k,EJe),e(k,Rn),e(Rn,nre),e(nre,CJe),e(Rn,wJe),e(Rn,uS),e(uS,AJe),e(Rn,yJe),e(Rn,_S),e(_S,LJe),e(Rn,xJe),e(k,$Je),e(k,bg),e(bg,sre),e(sre,kJe),e(bg,SJe),e(bg,bS),e(bS,RJe),e(bg,BJe),e(k,PJe),e(k,Bn),e(Bn,lre),e(lre,IJe),e(Bn,qJe),e(Bn,vS),e(vS,NJe),e(Bn,jJe),e(Bn,FS),e(FS,DJe),e(Bn,GJe),e(k,OJe),e(k,vg),e(vg,ire),e(ire,VJe),e(vg,XJe),e(vg,TS),e(TS,zJe),e(vg,QJe),e(k,WJe),e(k,Fg),e(Fg,dre),e(dre,HJe),e(Fg,UJe),e(Fg,MS),e(MS,JJe),e(Fg,YJe),e(k,KJe),e(k,Tg),e(Tg,cre),e(cre,ZJe),e(Tg,eYe),e(Tg,ES),e(ES,oYe),e(Tg,rYe),e(k,tYe),e(k,Pn),e(Pn,fre),e(fre,aYe),e(Pn,nYe),e(Pn,CS),e(CS,sYe),e(Pn,lYe),e(Pn,wS),e(wS,iYe),e(Pn,dYe),e(k,cYe),e(k,In),e(In,mre),e(mre,fYe),e(In,mYe),e(In,AS),e(AS,gYe),e(In,hYe),e(In,yS),e(yS,pYe),e(In,uYe),e(k,_Ye),e(k,qn),e(qn,gre),e(gre,bYe),e(qn,vYe),e(qn,LS),e(LS,FYe),e(qn,TYe),e(qn,xS),e(xS,MYe),e(qn,EYe),e(k,CYe),e(k,Mg),e(Mg,hre),e(hre,wYe),e(Mg,AYe),e(Mg,$S),e($S,yYe),e(Mg,LYe),e(k,xYe),e(k,Eg),e(Eg,pre),e(pre,$Ye),e(Eg,kYe),e(Eg,kS),e(kS,SYe),e(Eg,RYe),e(k,BYe),e(k,Nn),e(Nn,ure),e(ure,PYe),e(Nn,IYe),e(Nn,SS),e(SS,qYe),e(Nn,NYe),e(Nn,RS),e(RS,jYe),e(Nn,DYe),e(k,GYe),e(k,Cg),e(Cg,_re),e(_re,OYe),e(Cg,VYe),e(Cg,BS),e(BS,XYe),e(Cg,zYe),e(k,QYe),e(k,jn),e(jn,bre),e(bre,WYe),e(jn,HYe),e(jn,PS),e(PS,UYe),e(jn,JYe),e(jn,IS),e(IS,YYe),e(jn,KYe),e(k,ZYe),e(k,Dn),e(Dn,vre),e(vre,eKe),e(Dn,oKe),e(Dn,qS),e(qS,rKe),e(Dn,tKe),e(Dn,NS),e(NS,aKe),e(Dn,nKe),e(k,sKe),e(k,Gn),e(Gn,Fre),e(Fre,lKe),e(Gn,iKe),e(Gn,jS),e(jS,dKe),e(Gn,cKe),e(Gn,DS),e(DS,fKe),e(Gn,mKe),e(k,gKe),e(k,wg),e(wg,Tre),e(Tre,hKe),e(wg,pKe),e(wg,GS),e(GS,uKe),e(wg,_Ke),e(k,bKe),e(k,On),e(On,Mre),e(Mre,vKe),e(On,FKe),e(On,OS),e(OS,TKe),e(On,MKe),e(On,VS),e(VS,EKe),e(On,CKe),e(k,wKe),e(k,Vn),e(Vn,Ere),e(Ere,AKe),e(Vn,yKe),e(Vn,XS),e(XS,LKe),e(Vn,xKe),e(Vn,zS),e(zS,$Ke),e(Vn,kKe),e(k,SKe),e(k,Xn),e(Xn,Cre),e(Cre,RKe),e(Xn,BKe),e(Xn,QS),e(QS,PKe),e(Xn,IKe),e(Xn,WS),e(WS,qKe),e(Xn,NKe),e(k,jKe),e(k,zn),e(zn,wre),e(wre,DKe),e(zn,GKe),e(zn,HS),e(HS,OKe),e(zn,VKe),e(zn,US),e(US,XKe),e(zn,zKe),e(k,QKe),e(k,Qn),e(Qn,Are),e(Are,WKe),e(Qn,HKe),e(Qn,JS),e(JS,UKe),e(Qn,JKe),e(Qn,YS),e(YS,YKe),e(Qn,KKe),e(k,ZKe),e(k,Wn),e(Wn,yre),e(yre,eZe),e(Wn,oZe),e(Wn,KS),e(KS,rZe),e(Wn,tZe),e(Wn,ZS),e(ZS,aZe),e(Wn,nZe),e(k,sZe),e(k,Ag),e(Ag,Lre),e(Lre,lZe),e(Ag,iZe),e(Ag,eR),e(eR,dZe),e(Ag,cZe),e(k,fZe),e(k,Hn),e(Hn,xre),e(xre,mZe),e(Hn,gZe),e(Hn,oR),e(oR,hZe),e(Hn,pZe),e(Hn,rR),e(rR,uZe),e(Hn,_Ze),e(k,bZe),e(k,yg),e(yg,$re),e($re,vZe),e(yg,FZe),e(yg,tR),e(tR,TZe),e(yg,MZe),e(k,EZe),e(k,Un),e(Un,kre),e(kre,CZe),e(Un,wZe),e(Un,aR),e(aR,AZe),e(Un,yZe),e(Un,nR),e(nR,LZe),e(Un,xZe),e(k,$Ze),e(k,Jn),e(Jn,Sre),e(Sre,kZe),e(Jn,SZe),e(Jn,sR),e(sR,RZe),e(Jn,BZe),e(Jn,lR),e(lR,PZe),e(Jn,IZe),e(k,qZe),e(k,Yn),e(Yn,Rre),e(Rre,NZe),e(Yn,jZe),e(Yn,iR),e(iR,DZe),e(Yn,GZe),e(Yn,dR),e(dR,OZe),e(Yn,VZe),e(k,XZe),e(k,Kn),e(Kn,Bre),e(Bre,zZe),e(Kn,QZe),e(Kn,cR),e(cR,WZe),e(Kn,HZe),e(Kn,fR),e(fR,UZe),e(Kn,JZe),e(k,YZe),e(k,Zn),e(Zn,Pre),e(Pre,KZe),e(Zn,ZZe),e(Zn,mR),e(mR,eeo),e(Zn,oeo),e(Zn,gR),e(gR,reo),e(Zn,teo),e(k,aeo),e(k,Lg),e(Lg,Ire),e(Ire,neo),e(Lg,seo),e(Lg,hR),e(hR,leo),e(Lg,ieo),e(k,deo),e(k,es),e(es,qre),e(qre,ceo),e(es,feo),e(es,pR),e(pR,meo),e(es,geo),e(es,uR),e(uR,heo),e(es,peo),e(k,ueo),e(k,os),e(os,Nre),e(Nre,_eo),e(os,beo),e(os,_R),e(_R,veo),e(os,Feo),e(os,bR),e(bR,Teo),e(os,Meo),e(k,Eeo),e(k,rs),e(rs,jre),e(jre,Ceo),e(rs,weo),e(rs,vR),e(vR,Aeo),e(rs,yeo),e(rs,FR),e(FR,Leo),e(rs,xeo),e(k,$eo),e(k,ts),e(ts,Dre),e(Dre,keo),e(ts,Seo),e(ts,TR),e(TR,Reo),e(ts,Beo),e(ts,MR),e(MR,Peo),e(ts,Ieo),e(k,qeo),e(k,as),e(as,Gre),e(Gre,Neo),e(as,jeo),e(as,ER),e(ER,Deo),e(as,Geo),e(as,CR),e(CR,Oeo),e(as,Veo),e(k,Xeo),e(k,ns),e(ns,Ore),e(Ore,zeo),e(ns,Qeo),e(ns,wR),e(wR,Weo),e(ns,Heo),e(ns,AR),e(AR,Ueo),e(ns,Jeo),e(k,Yeo),e(k,xg),e(xg,Vre),e(Vre,Keo),e(xg,Zeo),e(xg,yR),e(yR,eoo),e(xg,ooo),e(k,roo),e(k,ss),e(ss,Xre),e(Xre,too),e(ss,aoo),e(ss,LR),e(LR,noo),e(ss,soo),e(ss,xR),e(xR,loo),e(ss,ioo),e(k,doo),e(k,$g),e($g,zre),e(zre,coo),e($g,foo),e($g,$R),e($R,moo),e($g,goo),e(k,hoo),e(k,kg),e(kg,Qre),e(Qre,poo),e(kg,uoo),e(kg,kR),e(kR,_oo),e(kg,boo),e(k,voo),e(k,ls),e(ls,Wre),e(Wre,Foo),e(ls,Too),e(ls,SR),e(SR,Moo),e(ls,Eoo),e(ls,RR),e(RR,Coo),e(ls,woo),e(k,Aoo),e(k,is),e(is,Hre),e(Hre,yoo),e(is,Loo),e(is,BR),e(BR,xoo),e(is,$oo),e(is,PR),e(PR,koo),e(is,Soo),e(k,Roo),e(k,ds),e(ds,Ure),e(Ure,Boo),e(ds,Poo),e(ds,IR),e(IR,Ioo),e(ds,qoo),e(ds,qR),e(qR,Noo),e(ds,joo),e(k,Doo),e(k,Sg),e(Sg,Jre),e(Jre,Goo),e(Sg,Ooo),e(Sg,NR),e(NR,Voo),e(Sg,Xoo),e(k,zoo),e(k,cs),e(cs,Yre),e(Yre,Qoo),e(cs,Woo),e(cs,jR),e(jR,Hoo),e(cs,Uoo),e(cs,DR),e(DR,Joo),e(cs,Yoo),e(k,Koo),e(k,fs),e(fs,Kre),e(Kre,Zoo),e(fs,ero),e(fs,GR),e(GR,oro),e(fs,rro),e(fs,OR),e(OR,tro),e(fs,aro),e(k,nro),e(k,ms),e(ms,Zre),e(Zre,sro),e(ms,lro),e(ms,VR),e(VR,iro),e(ms,dro),e(ms,XR),e(XR,cro),e(ms,fro),e(k,mro),e(k,gs),e(gs,ete),e(ete,gro),e(gs,hro),e(gs,zR),e(zR,pro),e(gs,uro),e(gs,QR),e(QR,_ro),e(gs,bro),e(k,vro),e(k,hs),e(hs,ote),e(ote,Fro),e(hs,Tro),e(hs,WR),e(WR,Mro),e(hs,Ero),e(hs,HR),e(HR,Cro),e(hs,wro),e(k,Aro),e(k,ps),e(ps,rte),e(rte,yro),e(ps,Lro),e(ps,UR),e(UR,xro),e(ps,$ro),e(ps,JR),e(JR,kro),e(ps,Sro),e(k,Rro),e(k,Rg),e(Rg,tte),e(tte,Bro),e(Rg,Pro),e(Rg,YR),e(YR,Iro),e(Rg,qro),e(k,Nro),e(k,Bg),e(Bg,ate),e(ate,jro),e(Bg,Dro),e(Bg,KR),e(KR,Gro),e(Bg,Oro),e(k,Vro),e(k,Pg),e(Pg,nte),e(nte,Xro),e(Pg,zro),e(Pg,ZR),e(ZR,Qro),e(Pg,Wro),e(k,Hro),e(k,Ig),e(Ig,ste),e(ste,Uro),e(Ig,Jro),e(Ig,eB),e(eB,Yro),e(Ig,Kro),e(k,Zro),e(k,us),e(us,lte),e(lte,eto),e(us,oto),e(us,oB),e(oB,rto),e(us,tto),e(us,rB),e(rB,ato),e(us,nto),e(k,sto),e(k,qg),e(qg,ite),e(ite,lto),e(qg,ito),e(qg,tB),e(tB,dto),e(qg,cto),e(k,fto),e(k,_s),e(_s,dte),e(dte,mto),e(_s,gto),e(_s,aB),e(aB,hto),e(_s,pto),e(_s,nB),e(nB,uto),e(_s,_to),e(k,bto),e(k,bs),e(bs,cte),e(cte,vto),e(bs,Fto),e(bs,sB),e(sB,Tto),e(bs,Mto),e(bs,lB),e(lB,Eto),e(bs,Cto),e(k,wto),e(k,vs),e(vs,fte),e(fte,Ato),e(vs,yto),e(vs,iB),e(iB,Lto),e(vs,xto),e(vs,dB),e(dB,$to),e(vs,kto),e(k,Sto),e(k,Fs),e(Fs,mte),e(mte,Rto),e(Fs,Bto),e(Fs,cB),e(cB,Pto),e(Fs,Ito),e(Fs,fB),e(fB,qto),e(Fs,Nto),e(k,jto),e(k,Ts),e(Ts,gte),e(gte,Dto),e(Ts,Gto),e(Ts,mB),e(mB,Oto),e(Ts,Vto),e(Ts,gB),e(gB,Xto),e(Ts,zto),e(k,Qto),e(k,Ms),e(Ms,hte),e(hte,Wto),e(Ms,Hto),e(Ms,hB),e(hB,Uto),e(Ms,Jto),e(Ms,pB),e(pB,Yto),e(Ms,Kto),e(k,Zto),e(k,Ng),e(Ng,pte),e(pte,eao),e(Ng,oao),e(Ng,uB),e(uB,rao),e(Ng,tao),e(k,aao),e(k,jg),e(jg,ute),e(ute,nao),e(jg,sao),e(jg,_B),e(_B,lao),e(jg,iao),e(k,dao),e(k,Es),e(Es,_te),e(_te,cao),e(Es,fao),e(Es,bB),e(bB,mao),e(Es,gao),e(Es,vB),e(vB,hao),e(Es,pao),e(k,uao),e(k,Cs),e(Cs,bte),e(bte,_ao),e(Cs,bao),e(Cs,FB),e(FB,vao),e(Cs,Fao),e(Cs,TB),e(TB,Tao),e(Cs,Mao),e(k,Eao),e(k,ws),e(ws,vte),e(vte,Cao),e(ws,wao),e(ws,MB),e(MB,Aao),e(ws,yao),e(ws,EB),e(EB,Lao),e(ws,xao),e(k,$ao),e(k,Dg),e(Dg,Fte),e(Fte,kao),e(Dg,Sao),e(Dg,CB),e(CB,Rao),e(Dg,Bao),e(k,Pao),e(k,Gg),e(Gg,Tte),e(Tte,Iao),e(Gg,qao),e(Gg,wB),e(wB,Nao),e(Gg,jao),e(k,Dao),e(k,Og),e(Og,Mte),e(Mte,Gao),e(Og,Oao),e(Og,AB),e(AB,Vao),e(Og,Xao),e(k,zao),e(k,As),e(As,Ete),e(Ete,Qao),e(As,Wao),e(As,yB),e(yB,Hao),e(As,Uao),e(As,LB),e(LB,Jao),e(As,Yao),e(k,Kao),e(k,Vg),e(Vg,Cte),e(Cte,Zao),e(Vg,eno),e(Vg,xB),e(xB,ono),e(Vg,rno),e(k,tno),e(k,Xg),e(Xg,wte),e(wte,ano),e(Xg,nno),e(Xg,$B),e($B,sno),e(Xg,lno),e(k,ino),e(k,ys),e(ys,Ate),e(Ate,dno),e(ys,cno),e(ys,kB),e(kB,fno),e(ys,mno),e(ys,SB),e(SB,gno),e(ys,hno),e(k,pno),e(k,zg),e(zg,yte),e(yte,uno),e(zg,_no),e(zg,RB),e(RB,bno),e(zg,vno),e(k,Fno),e(k,Qg),e(Qg,Lte),e(Lte,Tno),e(Qg,Mno),e(Qg,BB),e(BB,Eno),e(Qg,Cno),e(k,wno),e(k,Ls),e(Ls,xte),e(xte,Ano),e(Ls,yno),e(Ls,PB),e(PB,Lno),e(Ls,xno),e(Ls,IB),e(IB,$no),e(Ls,kno),e(k,Sno),e(k,xs),e(xs,$te),e($te,Rno),e(xs,Bno),e(xs,qB),e(qB,Pno),e(xs,Ino),e(xs,NB),e(NB,qno),e(xs,Nno),e(k,jno),e(k,$s),e($s,kte),e(kte,Dno),e($s,Gno),e($s,jB),e(jB,Ono),e($s,Vno),e($s,DB),e(DB,Xno),e($s,zno),e(k,Qno),e(k,ks),e(ks,Ste),e(Ste,Wno),e(ks,Hno),e(ks,GB),e(GB,Uno),e(ks,Jno),e(ks,OB),e(OB,Yno),e(ks,Kno),e(Cr,Zno),M(Wg,Cr,null),e(wo,eso),e(wo,Hg),M(ay,Hg,null),e(Hg,oso),e(Hg,Rte),e(Rte,rso),b(f,LPe,_),b(f,bi,_),e(bi,Ug),e(Ug,Bte),M(ny,Bte,null),e(bi,tso),e(bi,Pte),e(Pte,aso),b(f,xPe,_),b(f,Ao,_),M(sy,Ao,null),e(Ao,nso),e(Ao,ly),e(ly,sso),e(ly,VB),e(VB,lso),e(ly,iso),e(Ao,dso),e(Ao,iy),e(iy,cso),e(iy,Ite),e(Ite,fso),e(iy,mso),e(Ao,gso),e(Ao,We),M(dy,We,null),e(We,hso),e(We,qte),e(qte,pso),e(We,uso),e(We,wa),e(wa,_so),e(wa,Nte),e(Nte,bso),e(wa,vso),e(wa,jte),e(jte,Fso),e(wa,Tso),e(wa,Dte),e(Dte,Mso),e(wa,Eso),e(We,Cso),e(We,oe),e(oe,Jg),e(Jg,Gte),e(Gte,wso),e(Jg,Aso),e(Jg,XB),e(XB,yso),e(Jg,Lso),e(oe,xso),e(oe,Yg),e(Yg,Ote),e(Ote,$so),e(Yg,kso),e(Yg,zB),e(zB,Sso),e(Yg,Rso),e(oe,Bso),e(oe,Kg),e(Kg,Vte),e(Vte,Pso),e(Kg,Iso),e(Kg,QB),e(QB,qso),e(Kg,Nso),e(oe,jso),e(oe,Zg),e(Zg,Xte),e(Xte,Dso),e(Zg,Gso),e(Zg,WB),e(WB,Oso),e(Zg,Vso),e(oe,Xso),e(oe,eh),e(eh,zte),e(zte,zso),e(eh,Qso),e(eh,HB),e(HB,Wso),e(eh,Hso),e(oe,Uso),e(oe,oh),e(oh,Qte),e(Qte,Jso),e(oh,Yso),e(oh,UB),e(UB,Kso),e(oh,Zso),e(oe,elo),e(oe,rh),e(rh,Wte),e(Wte,olo),e(rh,rlo),e(rh,JB),e(JB,tlo),e(rh,alo),e(oe,nlo),e(oe,th),e(th,Hte),e(Hte,slo),e(th,llo),e(th,YB),e(YB,ilo),e(th,dlo),e(oe,clo),e(oe,ah),e(ah,Ute),e(Ute,flo),e(ah,mlo),e(ah,KB),e(KB,glo),e(ah,hlo),e(oe,plo),e(oe,nh),e(nh,Jte),e(Jte,ulo),e(nh,_lo),e(nh,ZB),e(ZB,blo),e(nh,vlo),e(oe,Flo),e(oe,sh),e(sh,Yte),e(Yte,Tlo),e(sh,Mlo),e(sh,eP),e(eP,Elo),e(sh,Clo),e(oe,wlo),e(oe,lh),e(lh,Kte),e(Kte,Alo),e(lh,ylo),e(lh,oP),e(oP,Llo),e(lh,xlo),e(oe,$lo),e(oe,ih),e(ih,Zte),e(Zte,klo),e(ih,Slo),e(ih,rP),e(rP,Rlo),e(ih,Blo),e(oe,Plo),e(oe,dh),e(dh,eae),e(eae,Ilo),e(dh,qlo),e(dh,tP),e(tP,Nlo),e(dh,jlo),e(oe,Dlo),e(oe,ch),e(ch,oae),e(oae,Glo),e(ch,Olo),e(ch,aP),e(aP,Vlo),e(ch,Xlo),e(oe,zlo),e(oe,fh),e(fh,rae),e(rae,Qlo),e(fh,Wlo),e(fh,nP),e(nP,Hlo),e(fh,Ulo),e(oe,Jlo),e(oe,mh),e(mh,tae),e(tae,Ylo),e(mh,Klo),e(mh,sP),e(sP,Zlo),e(mh,eio),e(oe,oio),e(oe,gh),e(gh,aae),e(aae,rio),e(gh,tio),e(gh,lP),e(lP,aio),e(gh,nio),e(oe,sio),e(oe,hh),e(hh,nae),e(nae,lio),e(hh,iio),e(hh,iP),e(iP,dio),e(hh,cio),e(oe,fio),e(oe,ph),e(ph,sae),e(sae,mio),e(ph,gio),e(ph,dP),e(dP,hio),e(ph,pio),e(oe,uio),e(oe,uh),e(uh,lae),e(lae,_io),e(uh,bio),e(uh,cP),e(cP,vio),e(uh,Fio),e(oe,Tio),e(oe,_h),e(_h,iae),e(iae,Mio),e(_h,Eio),e(_h,fP),e(fP,Cio),e(_h,wio),e(oe,Aio),e(oe,bh),e(bh,dae),e(dae,yio),e(bh,Lio),e(bh,mP),e(mP,xio),e(bh,$io),e(oe,kio),e(oe,vh),e(vh,cae),e(cae,Sio),e(vh,Rio),e(vh,gP),e(gP,Bio),e(vh,Pio),e(oe,Iio),e(oe,Fh),e(Fh,fae),e(fae,qio),e(Fh,Nio),e(Fh,hP),e(hP,jio),e(Fh,Dio),e(We,Gio),M(Th,We,null),e(We,Oio),M(Mh,We,null),e(Ao,Vio),e(Ao,Eh),M(cy,Eh,null),e(Eh,Xio),e(Eh,mae),e(mae,zio),b(f,$Pe,_),b(f,vi,_),e(vi,Ch),e(Ch,gae),M(fy,gae,null),e(vi,Qio),e(vi,hae),e(hae,Wio),b(f,kPe,_),b(f,yo,_),M(my,yo,null),e(yo,Hio),e(yo,gy),e(gy,Uio),e(gy,pP),e(pP,Jio),e(gy,Yio),e(yo,Kio),e(yo,hy),e(hy,Zio),e(hy,pae),e(pae,edo),e(hy,odo),e(yo,rdo),e(yo,He),M(py,He,null),e(He,tdo),e(He,uae),e(uae,ado),e(He,ndo),e(He,Fi),e(Fi,sdo),e(Fi,_ae),e(_ae,ldo),e(Fi,ido),e(Fi,bae),e(bae,ddo),e(Fi,cdo),e(He,fdo),e(He,be),e(be,wh),e(wh,vae),e(vae,mdo),e(wh,gdo),e(wh,uP),e(uP,hdo),e(wh,pdo),e(be,udo),e(be,Ah),e(Ah,Fae),e(Fae,_do),e(Ah,bdo),e(Ah,_P),e(_P,vdo),e(Ah,Fdo),e(be,Tdo),e(be,yh),e(yh,Tae),e(Tae,Mdo),e(yh,Edo),e(yh,bP),e(bP,Cdo),e(yh,wdo),e(be,Ado),e(be,Lh),e(Lh,Mae),e(Mae,ydo),e(Lh,Ldo),e(Lh,vP),e(vP,xdo),e(Lh,$do),e(be,kdo),e(be,xh),e(xh,Eae),e(Eae,Sdo),e(xh,Rdo),e(xh,FP),e(FP,Bdo),e(xh,Pdo),e(be,Ido),e(be,$h),e($h,Cae),e(Cae,qdo),e($h,Ndo),e($h,TP),e(TP,jdo),e($h,Ddo),e(be,Gdo),e(be,kh),e(kh,wae),e(wae,Odo),e(kh,Vdo),e(kh,MP),e(MP,Xdo),e(kh,zdo),e(be,Qdo),e(be,Sh),e(Sh,Aae),e(Aae,Wdo),e(Sh,Hdo),e(Sh,EP),e(EP,Udo),e(Sh,Jdo),e(be,Ydo),e(be,Rh),e(Rh,yae),e(yae,Kdo),e(Rh,Zdo),e(Rh,CP),e(CP,eco),e(Rh,oco),e(be,rco),e(be,Bh),e(Bh,Lae),e(Lae,tco),e(Bh,aco),e(Bh,wP),e(wP,nco),e(Bh,sco),e(be,lco),e(be,Ph),e(Ph,xae),e(xae,ico),e(Ph,dco),e(Ph,AP),e(AP,cco),e(Ph,fco),e(be,mco),e(be,Ih),e(Ih,$ae),e($ae,gco),e(Ih,hco),e(Ih,yP),e(yP,pco),e(Ih,uco),e(be,_co),e(be,qh),e(qh,kae),e(kae,bco),e(qh,vco),e(qh,LP),e(LP,Fco),e(qh,Tco),e(be,Mco),e(be,Nh),e(Nh,Sae),e(Sae,Eco),e(Nh,Cco),e(Nh,xP),e(xP,wco),e(Nh,Aco),e(He,yco),M(jh,He,null),e(He,Lco),M(Dh,He,null),e(yo,xco),e(yo,Gh),M(uy,Gh,null),e(Gh,$co),e(Gh,Rae),e(Rae,kco),b(f,SPe,_),b(f,Ti,_),e(Ti,Oh),e(Oh,Bae),M(_y,Bae,null),e(Ti,Sco),e(Ti,Pae),e(Pae,Rco),b(f,RPe,_),b(f,Lo,_),M(by,Lo,null),e(Lo,Bco),e(Lo,Mi),e(Mi,Pco),e(Mi,$P),e($P,Ico),e(Mi,qco),e(Mi,kP),e(kP,Nco),e(Mi,jco),e(Lo,Dco),e(Lo,vy),e(vy,Gco),e(vy,Iae),e(Iae,Oco),e(vy,Vco),e(Lo,Xco),e(Lo,ot),M(Fy,ot,null),e(ot,zco),e(ot,qae),e(qae,Qco),e(ot,Wco),e(ot,Ei),e(Ei,Hco),e(Ei,Nae),e(Nae,Uco),e(Ei,Jco),e(Ei,SP),e(SP,Yco),e(Ei,Kco),e(ot,Zco),M(Vh,ot,null),e(Lo,efo),e(Lo,Ue),M(Ty,Ue,null),e(Ue,ofo),e(Ue,jae),e(jae,rfo),e(Ue,tfo),e(Ue,Aa),e(Aa,afo),e(Aa,Dae),e(Dae,nfo),e(Aa,sfo),e(Aa,Gae),e(Gae,lfo),e(Aa,ifo),e(Aa,Oae),e(Oae,dfo),e(Aa,cfo),e(Ue,ffo),e(Ue,x),e(x,Xh),e(Xh,Vae),e(Vae,mfo),e(Xh,gfo),e(Xh,RP),e(RP,hfo),e(Xh,pfo),e(x,ufo),e(x,zh),e(zh,Xae),e(Xae,_fo),e(zh,bfo),e(zh,BP),e(BP,vfo),e(zh,Ffo),e(x,Tfo),e(x,Qh),e(Qh,zae),e(zae,Mfo),e(Qh,Efo),e(Qh,PP),e(PP,Cfo),e(Qh,wfo),e(x,Afo),e(x,Wh),e(Wh,Qae),e(Qae,yfo),e(Wh,Lfo),e(Wh,IP),e(IP,xfo),e(Wh,$fo),e(x,kfo),e(x,Hh),e(Hh,Wae),e(Wae,Sfo),e(Hh,Rfo),e(Hh,qP),e(qP,Bfo),e(Hh,Pfo),e(x,Ifo),e(x,Uh),e(Uh,Hae),e(Hae,qfo),e(Uh,Nfo),e(Uh,NP),e(NP,jfo),e(Uh,Dfo),e(x,Gfo),e(x,Jh),e(Jh,Uae),e(Uae,Ofo),e(Jh,Vfo),e(Jh,jP),e(jP,Xfo),e(Jh,zfo),e(x,Qfo),e(x,Yh),e(Yh,Jae),e(Jae,Wfo),e(Yh,Hfo),e(Yh,DP),e(DP,Ufo),e(Yh,Jfo),e(x,Yfo),e(x,Kh),e(Kh,Yae),e(Yae,Kfo),e(Kh,Zfo),e(Kh,GP),e(GP,emo),e(Kh,omo),e(x,rmo),e(x,Zh),e(Zh,Kae),e(Kae,tmo),e(Zh,amo),e(Zh,OP),e(OP,nmo),e(Zh,smo),e(x,lmo),e(x,ep),e(ep,Zae),e(Zae,imo),e(ep,dmo),e(ep,VP),e(VP,cmo),e(ep,fmo),e(x,mmo),e(x,op),e(op,ene),e(ene,gmo),e(op,hmo),e(op,XP),e(XP,pmo),e(op,umo),e(x,_mo),e(x,rp),e(rp,one),e(one,bmo),e(rp,vmo),e(rp,zP),e(zP,Fmo),e(rp,Tmo),e(x,Mmo),e(x,tp),e(tp,rne),e(rne,Emo),e(tp,Cmo),e(tp,QP),e(QP,wmo),e(tp,Amo),e(x,ymo),e(x,ap),e(ap,tne),e(tne,Lmo),e(ap,xmo),e(ap,WP),e(WP,$mo),e(ap,kmo),e(x,Smo),e(x,np),e(np,ane),e(ane,Rmo),e(np,Bmo),e(np,HP),e(HP,Pmo),e(np,Imo),e(x,qmo),e(x,sp),e(sp,nne),e(nne,Nmo),e(sp,jmo),e(sp,UP),e(UP,Dmo),e(sp,Gmo),e(x,Omo),e(x,lp),e(lp,sne),e(sne,Vmo),e(lp,Xmo),e(lp,JP),e(JP,zmo),e(lp,Qmo),e(x,Wmo),e(x,ip),e(ip,lne),e(lne,Hmo),e(ip,Umo),e(ip,YP),e(YP,Jmo),e(ip,Ymo),e(x,Kmo),e(x,dp),e(dp,ine),e(ine,Zmo),e(dp,ego),e(dp,KP),e(KP,ogo),e(dp,rgo),e(x,tgo),e(x,cp),e(cp,dne),e(dne,ago),e(cp,ngo),e(cp,ZP),e(ZP,sgo),e(cp,lgo),e(x,igo),e(x,fp),e(fp,cne),e(cne,dgo),e(fp,cgo),e(fp,eI),e(eI,fgo),e(fp,mgo),e(x,ggo),e(x,mp),e(mp,fne),e(fne,hgo),e(mp,pgo),e(mp,oI),e(oI,ugo),e(mp,_go),e(x,bgo),e(x,gp),e(gp,mne),e(mne,vgo),e(gp,Fgo),e(gp,rI),e(rI,Tgo),e(gp,Mgo),e(x,Ego),e(x,hp),e(hp,gne),e(gne,Cgo),e(hp,wgo),e(hp,tI),e(tI,Ago),e(hp,ygo),e(x,Lgo),e(x,pp),e(pp,hne),e(hne,xgo),e(pp,$go),e(pp,aI),e(aI,kgo),e(pp,Sgo),e(x,Rgo),e(x,up),e(up,pne),e(pne,Bgo),e(up,Pgo),e(up,nI),e(nI,Igo),e(up,qgo),e(x,Ngo),e(x,_p),e(_p,une),e(une,jgo),e(_p,Dgo),e(_p,sI),e(sI,Ggo),e(_p,Ogo),e(x,Vgo),e(x,bp),e(bp,_ne),e(_ne,Xgo),e(bp,zgo),e(bp,lI),e(lI,Qgo),e(bp,Wgo),e(x,Hgo),e(x,vp),e(vp,bne),e(bne,Ugo),e(vp,Jgo),e(vp,iI),e(iI,Ygo),e(vp,Kgo),e(x,Zgo),e(x,Ss),e(Ss,vne),e(vne,eho),e(Ss,oho),e(Ss,dI),e(dI,rho),e(Ss,tho),e(Ss,cI),e(cI,aho),e(Ss,nho),e(x,sho),e(x,Fp),e(Fp,Fne),e(Fne,lho),e(Fp,iho),e(Fp,fI),e(fI,dho),e(Fp,cho),e(x,fho),e(x,Tp),e(Tp,Tne),e(Tne,mho),e(Tp,gho),e(Tp,mI),e(mI,hho),e(Tp,pho),e(x,uho),e(x,Mp),e(Mp,Mne),e(Mne,_ho),e(Mp,bho),e(Mp,gI),e(gI,vho),e(Mp,Fho),e(x,Tho),e(x,Ep),e(Ep,Ene),e(Ene,Mho),e(Ep,Eho),e(Ep,hI),e(hI,Cho),e(Ep,who),e(x,Aho),e(x,Cp),e(Cp,Cne),e(Cne,yho),e(Cp,Lho),e(Cp,pI),e(pI,xho),e(Cp,$ho),e(x,kho),e(x,wp),e(wp,wne),e(wne,Sho),e(wp,Rho),e(wp,uI),e(uI,Bho),e(wp,Pho),e(x,Iho),e(x,Ap),e(Ap,Ane),e(Ane,qho),e(Ap,Nho),e(Ap,_I),e(_I,jho),e(Ap,Dho),e(x,Gho),e(x,yp),e(yp,yne),e(yne,Oho),e(yp,Vho),e(yp,bI),e(bI,Xho),e(yp,zho),e(x,Qho),e(x,Lp),e(Lp,Lne),e(Lne,Who),e(Lp,Hho),e(Lp,vI),e(vI,Uho),e(Lp,Jho),e(x,Yho),e(x,xp),e(xp,xne),e(xne,Kho),e(xp,Zho),e(xp,FI),e(FI,epo),e(xp,opo),e(x,rpo),e(x,$p),e($p,$ne),e($ne,tpo),e($p,apo),e($p,TI),e(TI,npo),e($p,spo),e(x,lpo),e(x,kp),e(kp,kne),e(kne,ipo),e(kp,dpo),e(kp,MI),e(MI,cpo),e(kp,fpo),e(x,mpo),e(x,Sp),e(Sp,Sne),e(Sne,gpo),e(Sp,hpo),e(Sp,EI),e(EI,ppo),e(Sp,upo),e(x,_po),e(x,Rp),e(Rp,Rne),e(Rne,bpo),e(Rp,vpo),e(Rp,CI),e(CI,Fpo),e(Rp,Tpo),e(x,Mpo),e(x,Bp),e(Bp,Bne),e(Bne,Epo),e(Bp,Cpo),e(Bp,wI),e(wI,wpo),e(Bp,Apo),e(x,ypo),e(x,Pp),e(Pp,Pne),e(Pne,Lpo),e(Pp,xpo),e(Pp,AI),e(AI,$po),e(Pp,kpo),e(x,Spo),e(x,Ip),e(Ip,Ine),e(Ine,Rpo),e(Ip,Bpo),e(Ip,yI),e(yI,Ppo),e(Ip,Ipo),e(x,qpo),e(x,qp),e(qp,qne),e(qne,Npo),e(qp,jpo),e(qp,LI),e(LI,Dpo),e(qp,Gpo),e(x,Opo),e(x,Np),e(Np,Nne),e(Nne,Vpo),e(Np,Xpo),e(Np,xI),e(xI,zpo),e(Np,Qpo),e(x,Wpo),e(x,jp),e(jp,jne),e(jne,Hpo),e(jp,Upo),e(jp,$I),e($I,Jpo),e(jp,Ypo),e(x,Kpo),e(x,Dp),e(Dp,Dne),e(Dne,Zpo),e(Dp,euo),e(Dp,kI),e(kI,ouo),e(Dp,ruo),e(x,tuo),e(x,Gp),e(Gp,Gne),e(Gne,auo),e(Gp,nuo),e(Gp,SI),e(SI,suo),e(Gp,luo),e(x,iuo),e(x,Op),e(Op,One),e(One,duo),e(Op,cuo),e(Op,RI),e(RI,fuo),e(Op,muo),e(x,guo),e(x,Vp),e(Vp,Vne),e(Vne,huo),e(Vp,puo),e(Vp,BI),e(BI,uuo),e(Vp,_uo),e(x,buo),e(x,Xp),e(Xp,Xne),e(Xne,vuo),e(Xp,Fuo),e(Xp,PI),e(PI,Tuo),e(Xp,Muo),e(x,Euo),e(x,zp),e(zp,zne),e(zne,Cuo),e(zp,wuo),e(zp,II),e(II,Auo),e(zp,yuo),e(x,Luo),e(x,Qp),e(Qp,Qne),e(Qne,xuo),e(Qp,$uo),e(Qp,qI),e(qI,kuo),e(Qp,Suo),e(x,Ruo),e(x,Wp),e(Wp,Wne),e(Wne,Buo),e(Wp,Puo),e(Wp,NI),e(NI,Iuo),e(Wp,quo),e(x,Nuo),e(x,Hp),e(Hp,Hne),e(Hne,juo),e(Hp,Duo),e(Hp,jI),e(jI,Guo),e(Hp,Ouo),e(x,Vuo),e(x,Up),e(Up,Une),e(Une,Xuo),e(Up,zuo),e(Up,DI),e(DI,Quo),e(Up,Wuo),e(x,Huo),e(x,Jp),e(Jp,Jne),e(Jne,Uuo),e(Jp,Juo),e(Jp,GI),e(GI,Yuo),e(Jp,Kuo),e(x,Zuo),e(x,Yp),e(Yp,Yne),e(Yne,e_o),e(Yp,o_o),e(Yp,OI),e(OI,r_o),e(Yp,t_o),e(x,a_o),e(x,Kp),e(Kp,Kne),e(Kne,n_o),e(Kp,s_o),e(Kp,VI),e(VI,l_o),e(Kp,i_o),e(x,d_o),e(x,Zp),e(Zp,Zne),e(Zne,c_o),e(Zp,f_o),e(Zp,XI),e(XI,m_o),e(Zp,g_o),e(x,h_o),e(x,eu),e(eu,ese),e(ese,p_o),e(eu,u_o),e(eu,zI),e(zI,__o),e(eu,b_o),e(x,v_o),e(x,ou),e(ou,ose),e(ose,F_o),e(ou,T_o),e(ou,QI),e(QI,M_o),e(ou,E_o),e(x,C_o),e(x,ru),e(ru,rse),e(rse,w_o),e(ru,A_o),e(ru,WI),e(WI,y_o),e(ru,L_o),e(x,x_o),e(x,tu),e(tu,tse),e(tse,$_o),e(tu,k_o),e(tu,HI),e(HI,S_o),e(tu,R_o),e(x,B_o),e(x,au),e(au,ase),e(ase,P_o),e(au,I_o),e(au,UI),e(UI,q_o),e(au,N_o),e(x,j_o),e(x,nu),e(nu,nse),e(nse,D_o),e(nu,G_o),e(nu,JI),e(JI,O_o),e(nu,V_o),e(x,X_o),e(x,su),e(su,sse),e(sse,z_o),e(su,Q_o),e(su,YI),e(YI,W_o),e(su,H_o),e(x,U_o),e(x,lu),e(lu,lse),e(lse,J_o),e(lu,Y_o),e(lu,KI),e(KI,K_o),e(lu,Z_o),e(x,e2o),e(x,iu),e(iu,ise),e(ise,o2o),e(iu,r2o),e(iu,ZI),e(ZI,t2o),e(iu,a2o),e(x,n2o),e(x,du),e(du,dse),e(dse,s2o),e(du,l2o),e(du,eq),e(eq,i2o),e(du,d2o),e(x,c2o),e(x,cu),e(cu,cse),e(cse,f2o),e(cu,m2o),e(cu,oq),e(oq,g2o),e(cu,h2o),e(x,p2o),e(x,fu),e(fu,fse),e(fse,u2o),e(fu,_2o),e(fu,rq),e(rq,b2o),e(fu,v2o),e(x,F2o),e(x,mu),e(mu,mse),e(mse,T2o),e(mu,M2o),e(mu,tq),e(tq,E2o),e(mu,C2o),e(x,w2o),e(x,gu),e(gu,gse),e(gse,A2o),e(gu,y2o),e(gu,aq),e(aq,L2o),e(gu,x2o),e(x,$2o),e(x,hu),e(hu,hse),e(hse,k2o),e(hu,S2o),e(hu,nq),e(nq,R2o),e(hu,B2o),e(x,P2o),e(x,pu),e(pu,pse),e(pse,I2o),e(pu,q2o),e(pu,sq),e(sq,N2o),e(pu,j2o),e(x,D2o),e(x,uu),e(uu,use),e(use,G2o),e(uu,O2o),e(uu,lq),e(lq,V2o),e(uu,X2o),e(x,z2o),e(x,_u),e(_u,_se),e(_se,Q2o),e(_u,W2o),e(_u,iq),e(iq,H2o),e(_u,U2o),e(x,J2o),e(x,bu),e(bu,bse),e(bse,Y2o),e(bu,K2o),e(bu,dq),e(dq,Z2o),e(bu,e1o),e(x,o1o),e(x,vu),e(vu,vse),e(vse,r1o),e(vu,t1o),e(vu,cq),e(cq,a1o),e(vu,n1o),e(x,s1o),e(x,Fu),e(Fu,Fse),e(Fse,l1o),e(Fu,i1o),e(Fu,fq),e(fq,d1o),e(Fu,c1o),e(x,f1o),e(x,Tu),e(Tu,Tse),e(Tse,m1o),e(Tu,g1o),e(Tu,mq),e(mq,h1o),e(Tu,p1o),e(x,u1o),e(x,Mu),e(Mu,Mse),e(Mse,_1o),e(Mu,b1o),e(Mu,gq),e(gq,v1o),e(Mu,F1o),e(x,T1o),e(x,Eu),e(Eu,Ese),e(Ese,M1o),e(Eu,E1o),e(Eu,hq),e(hq,C1o),e(Eu,w1o),e(x,A1o),e(x,Cu),e(Cu,Cse),e(Cse,y1o),e(Cu,L1o),e(Cu,pq),e(pq,x1o),e(Cu,$1o),e(x,k1o),e(x,wu),e(wu,wse),e(wse,S1o),e(wu,R1o),e(wu,uq),e(uq,B1o),e(wu,P1o),e(x,I1o),e(x,Au),e(Au,Ase),e(Ase,q1o),e(Au,N1o),e(Au,_q),e(_q,j1o),e(Au,D1o),e(x,G1o),e(x,yu),e(yu,yse),e(yse,O1o),e(yu,V1o),e(yu,bq),e(bq,X1o),e(yu,z1o),e(x,Q1o),e(x,Lu),e(Lu,Lse),e(Lse,W1o),e(Lu,H1o),e(Lu,vq),e(vq,U1o),e(Lu,J1o),e(x,Y1o),e(x,xu),e(xu,xse),e(xse,K1o),e(xu,Z1o),e(xu,Fq),e(Fq,ebo),e(xu,obo),e(x,rbo),e(x,$u),e($u,$se),e($se,tbo),e($u,abo),e($u,Tq),e(Tq,nbo),e($u,sbo),e(Ue,lbo),e(Ue,ku),e(ku,ibo),e(ku,kse),e(kse,dbo),e(ku,cbo),e(ku,Sse),e(Sse,fbo),e(Ue,mbo),M(Su,Ue,null),b(f,BPe,_),b(f,Ci,_),e(Ci,Ru),e(Ru,Rse),M(My,Rse,null),e(Ci,gbo),e(Ci,Bse),e(Bse,hbo),b(f,PPe,_),b(f,xo,_),M(Ey,xo,null),e(xo,pbo),e(xo,wi),e(wi,ubo),e(wi,Mq),e(Mq,_bo),e(wi,bbo),e(wi,Eq),e(Eq,vbo),e(wi,Fbo),e(xo,Tbo),e(xo,Cy),e(Cy,Mbo),e(Cy,Pse),e(Pse,Ebo),e(Cy,Cbo),e(xo,wbo),e(xo,rt),M(wy,rt,null),e(rt,Abo),e(rt,Ise),e(Ise,ybo),e(rt,Lbo),e(rt,Ai),e(Ai,xbo),e(Ai,qse),e(qse,$bo),e(Ai,kbo),e(Ai,Cq),e(Cq,Sbo),e(Ai,Rbo),e(rt,Bbo),M(Bu,rt,null),e(xo,Pbo),e(xo,Je),M(Ay,Je,null),e(Je,Ibo),e(Je,Nse),e(Nse,qbo),e(Je,Nbo),e(Je,ya),e(ya,jbo),e(ya,jse),e(jse,Dbo),e(ya,Gbo),e(ya,Dse),e(Dse,Obo),e(ya,Vbo),e(ya,Gse),e(Gse,Xbo),e(ya,zbo),e(Je,Qbo),e(Je,G),e(G,Pu),e(Pu,Ose),e(Ose,Wbo),e(Pu,Hbo),e(Pu,wq),e(wq,Ubo),e(Pu,Jbo),e(G,Ybo),e(G,Iu),e(Iu,Vse),e(Vse,Kbo),e(Iu,Zbo),e(Iu,Aq),e(Aq,e4o),e(Iu,o4o),e(G,r4o),e(G,qu),e(qu,Xse),e(Xse,t4o),e(qu,a4o),e(qu,yq),e(yq,n4o),e(qu,s4o),e(G,l4o),e(G,Nu),e(Nu,zse),e(zse,i4o),e(Nu,d4o),e(Nu,Lq),e(Lq,c4o),e(Nu,f4o),e(G,m4o),e(G,ju),e(ju,Qse),e(Qse,g4o),e(ju,h4o),e(ju,xq),e(xq,p4o),e(ju,u4o),e(G,_4o),e(G,Du),e(Du,Wse),e(Wse,b4o),e(Du,v4o),e(Du,$q),e($q,F4o),e(Du,T4o),e(G,M4o),e(G,Gu),e(Gu,Hse),e(Hse,E4o),e(Gu,C4o),e(Gu,kq),e(kq,w4o),e(Gu,A4o),e(G,y4o),e(G,Ou),e(Ou,Use),e(Use,L4o),e(Ou,x4o),e(Ou,Sq),e(Sq,$4o),e(Ou,k4o),e(G,S4o),e(G,Vu),e(Vu,Jse),e(Jse,R4o),e(Vu,B4o),e(Vu,Rq),e(Rq,P4o),e(Vu,I4o),e(G,q4o),e(G,Xu),e(Xu,Yse),e(Yse,N4o),e(Xu,j4o),e(Xu,Bq),e(Bq,D4o),e(Xu,G4o),e(G,O4o),e(G,zu),e(zu,Kse),e(Kse,V4o),e(zu,X4o),e(zu,Pq),e(Pq,z4o),e(zu,Q4o),e(G,W4o),e(G,Qu),e(Qu,Zse),e(Zse,H4o),e(Qu,U4o),e(Qu,Iq),e(Iq,J4o),e(Qu,Y4o),e(G,K4o),e(G,Wu),e(Wu,ele),e(ele,Z4o),e(Wu,evo),e(Wu,qq),e(qq,ovo),e(Wu,rvo),e(G,tvo),e(G,Hu),e(Hu,ole),e(ole,avo),e(Hu,nvo),e(Hu,Nq),e(Nq,svo),e(Hu,lvo),e(G,ivo),e(G,Uu),e(Uu,rle),e(rle,dvo),e(Uu,cvo),e(Uu,jq),e(jq,fvo),e(Uu,mvo),e(G,gvo),e(G,Ju),e(Ju,tle),e(tle,hvo),e(Ju,pvo),e(Ju,Dq),e(Dq,uvo),e(Ju,_vo),e(G,bvo),e(G,Yu),e(Yu,ale),e(ale,vvo),e(Yu,Fvo),e(Yu,Gq),e(Gq,Tvo),e(Yu,Mvo),e(G,Evo),e(G,Ku),e(Ku,nle),e(nle,Cvo),e(Ku,wvo),e(Ku,Oq),e(Oq,Avo),e(Ku,yvo),e(G,Lvo),e(G,Zu),e(Zu,sle),e(sle,xvo),e(Zu,$vo),e(Zu,Vq),e(Vq,kvo),e(Zu,Svo),e(G,Rvo),e(G,e_),e(e_,lle),e(lle,Bvo),e(e_,Pvo),e(e_,Xq),e(Xq,Ivo),e(e_,qvo),e(G,Nvo),e(G,o_),e(o_,ile),e(ile,jvo),e(o_,Dvo),e(o_,zq),e(zq,Gvo),e(o_,Ovo),e(G,Vvo),e(G,r_),e(r_,dle),e(dle,Xvo),e(r_,zvo),e(r_,Qq),e(Qq,Qvo),e(r_,Wvo),e(G,Hvo),e(G,t_),e(t_,cle),e(cle,Uvo),e(t_,Jvo),e(t_,Wq),e(Wq,Yvo),e(t_,Kvo),e(G,Zvo),e(G,a_),e(a_,fle),e(fle,eFo),e(a_,oFo),e(a_,Hq),e(Hq,rFo),e(a_,tFo),e(G,aFo),e(G,n_),e(n_,mle),e(mle,nFo),e(n_,sFo),e(n_,Uq),e(Uq,lFo),e(n_,iFo),e(G,dFo),e(G,s_),e(s_,gle),e(gle,cFo),e(s_,fFo),e(s_,Jq),e(Jq,mFo),e(s_,gFo),e(G,hFo),e(G,l_),e(l_,hle),e(hle,pFo),e(l_,uFo),e(l_,Yq),e(Yq,_Fo),e(l_,bFo),e(G,vFo),e(G,i_),e(i_,ple),e(ple,FFo),e(i_,TFo),e(i_,Kq),e(Kq,MFo),e(i_,EFo),e(G,CFo),e(G,d_),e(d_,ule),e(ule,wFo),e(d_,AFo),e(d_,Zq),e(Zq,yFo),e(d_,LFo),e(G,xFo),e(G,c_),e(c_,_le),e(_le,$Fo),e(c_,kFo),e(c_,eN),e(eN,SFo),e(c_,RFo),e(G,BFo),e(G,f_),e(f_,ble),e(ble,PFo),e(f_,IFo),e(f_,oN),e(oN,qFo),e(f_,NFo),e(G,jFo),e(G,m_),e(m_,vle),e(vle,DFo),e(m_,GFo),e(m_,rN),e(rN,OFo),e(m_,VFo),e(G,XFo),e(G,g_),e(g_,Fle),e(Fle,zFo),e(g_,QFo),e(g_,tN),e(tN,WFo),e(g_,HFo),e(G,UFo),e(G,h_),e(h_,Tle),e(Tle,JFo),e(h_,YFo),e(h_,aN),e(aN,KFo),e(h_,ZFo),e(G,e0o),e(G,p_),e(p_,Mle),e(Mle,o0o),e(p_,r0o),e(p_,nN),e(nN,t0o),e(p_,a0o),e(G,n0o),e(G,u_),e(u_,Ele),e(Ele,s0o),e(u_,l0o),e(u_,sN),e(sN,i0o),e(u_,d0o),e(G,c0o),e(G,__),e(__,Cle),e(Cle,f0o),e(__,m0o),e(__,lN),e(lN,g0o),e(__,h0o),e(G,p0o),e(G,b_),e(b_,wle),e(wle,u0o),e(b_,_0o),e(b_,iN),e(iN,b0o),e(b_,v0o),e(G,F0o),e(G,v_),e(v_,Ale),e(Ale,T0o),e(v_,M0o),e(v_,dN),e(dN,E0o),e(v_,C0o),e(Je,w0o),e(Je,F_),e(F_,A0o),e(F_,yle),e(yle,y0o),e(F_,L0o),e(F_,Lle),e(Lle,x0o),e(Je,$0o),M(T_,Je,null),b(f,IPe,_),b(f,yi,_),e(yi,M_),e(M_,xle),M(yy,xle,null),e(yi,k0o),e(yi,$le),e($le,S0o),b(f,qPe,_),b(f,$o,_),M(Ly,$o,null),e($o,R0o),e($o,Li),e(Li,B0o),e(Li,cN),e(cN,P0o),e(Li,I0o),e(Li,fN),e(fN,q0o),e(Li,N0o),e($o,j0o),e($o,xy),e(xy,D0o),e(xy,kle),e(kle,G0o),e(xy,O0o),e($o,V0o),e($o,tt),M($y,tt,null),e(tt,X0o),e(tt,Sle),e(Sle,z0o),e(tt,Q0o),e(tt,xi),e(xi,W0o),e(xi,Rle),e(Rle,H0o),e(xi,U0o),e(xi,mN),e(mN,J0o),e(xi,Y0o),e(tt,K0o),M(E_,tt,null),e($o,Z0o),e($o,Ye),M(ky,Ye,null),e(Ye,e6o),e(Ye,Ble),e(Ble,o6o),e(Ye,r6o),e(Ye,La),e(La,t6o),e(La,Ple),e(Ple,a6o),e(La,n6o),e(La,Ile),e(Ile,s6o),e(La,l6o),e(La,qle),e(qle,i6o),e(La,d6o),e(Ye,c6o),e(Ye,z),e(z,C_),e(C_,Nle),e(Nle,f6o),e(C_,m6o),e(C_,gN),e(gN,g6o),e(C_,h6o),e(z,p6o),e(z,w_),e(w_,jle),e(jle,u6o),e(w_,_6o),e(w_,hN),e(hN,b6o),e(w_,v6o),e(z,F6o),e(z,A_),e(A_,Dle),e(Dle,T6o),e(A_,M6o),e(A_,pN),e(pN,E6o),e(A_,C6o),e(z,w6o),e(z,y_),e(y_,Gle),e(Gle,A6o),e(y_,y6o),e(y_,uN),e(uN,L6o),e(y_,x6o),e(z,$6o),e(z,L_),e(L_,Ole),e(Ole,k6o),e(L_,S6o),e(L_,_N),e(_N,R6o),e(L_,B6o),e(z,P6o),e(z,x_),e(x_,Vle),e(Vle,I6o),e(x_,q6o),e(x_,bN),e(bN,N6o),e(x_,j6o),e(z,D6o),e(z,$_),e($_,Xle),e(Xle,G6o),e($_,O6o),e($_,vN),e(vN,V6o),e($_,X6o),e(z,z6o),e(z,k_),e(k_,zle),e(zle,Q6o),e(k_,W6o),e(k_,FN),e(FN,H6o),e(k_,U6o),e(z,J6o),e(z,S_),e(S_,Qle),e(Qle,Y6o),e(S_,K6o),e(S_,TN),e(TN,Z6o),e(S_,eTo),e(z,oTo),e(z,R_),e(R_,Wle),e(Wle,rTo),e(R_,tTo),e(R_,MN),e(MN,aTo),e(R_,nTo),e(z,sTo),e(z,B_),e(B_,Hle),e(Hle,lTo),e(B_,iTo),e(B_,EN),e(EN,dTo),e(B_,cTo),e(z,fTo),e(z,P_),e(P_,Ule),e(Ule,mTo),e(P_,gTo),e(P_,CN),e(CN,hTo),e(P_,pTo),e(z,uTo),e(z,I_),e(I_,Jle),e(Jle,_To),e(I_,bTo),e(I_,wN),e(wN,vTo),e(I_,FTo),e(z,TTo),e(z,q_),e(q_,Yle),e(Yle,MTo),e(q_,ETo),e(q_,AN),e(AN,CTo),e(q_,wTo),e(z,ATo),e(z,N_),e(N_,Kle),e(Kle,yTo),e(N_,LTo),e(N_,yN),e(yN,xTo),e(N_,$To),e(z,kTo),e(z,j_),e(j_,Zle),e(Zle,STo),e(j_,RTo),e(j_,LN),e(LN,BTo),e(j_,PTo),e(z,ITo),e(z,D_),e(D_,eie),e(eie,qTo),e(D_,NTo),e(D_,xN),e(xN,jTo),e(D_,DTo),e(z,GTo),e(z,G_),e(G_,oie),e(oie,OTo),e(G_,VTo),e(G_,$N),e($N,XTo),e(G_,zTo),e(z,QTo),e(z,O_),e(O_,rie),e(rie,WTo),e(O_,HTo),e(O_,kN),e(kN,UTo),e(O_,JTo),e(z,YTo),e(z,V_),e(V_,tie),e(tie,KTo),e(V_,ZTo),e(V_,SN),e(SN,eMo),e(V_,oMo),e(z,rMo),e(z,X_),e(X_,aie),e(aie,tMo),e(X_,aMo),e(X_,RN),e(RN,nMo),e(X_,sMo),e(z,lMo),e(z,z_),e(z_,nie),e(nie,iMo),e(z_,dMo),e(z_,BN),e(BN,cMo),e(z_,fMo),e(z,mMo),e(z,Q_),e(Q_,sie),e(sie,gMo),e(Q_,hMo),e(Q_,PN),e(PN,pMo),e(Q_,uMo),e(z,_Mo),e(z,W_),e(W_,lie),e(lie,bMo),e(W_,vMo),e(W_,IN),e(IN,FMo),e(W_,TMo),e(z,MMo),e(z,H_),e(H_,iie),e(iie,EMo),e(H_,CMo),e(H_,qN),e(qN,wMo),e(H_,AMo),e(z,yMo),e(z,U_),e(U_,die),e(die,LMo),e(U_,xMo),e(U_,NN),e(NN,$Mo),e(U_,kMo),e(z,SMo),e(z,J_),e(J_,cie),e(cie,RMo),e(J_,BMo),e(J_,jN),e(jN,PMo),e(J_,IMo),e(z,qMo),e(z,Y_),e(Y_,fie),e(fie,NMo),e(Y_,jMo),e(Y_,DN),e(DN,DMo),e(Y_,GMo),e(z,OMo),e(z,K_),e(K_,mie),e(mie,VMo),e(K_,XMo),e(K_,GN),e(GN,zMo),e(K_,QMo),e(z,WMo),e(z,Z_),e(Z_,gie),e(gie,HMo),e(Z_,UMo),e(Z_,ON),e(ON,JMo),e(Z_,YMo),e(z,KMo),e(z,e2),e(e2,hie),e(hie,ZMo),e(e2,eEo),e(e2,VN),e(VN,oEo),e(e2,rEo),e(z,tEo),e(z,o2),e(o2,pie),e(pie,aEo),e(o2,nEo),e(o2,XN),e(XN,sEo),e(o2,lEo),e(z,iEo),e(z,r2),e(r2,uie),e(uie,dEo),e(r2,cEo),e(r2,zN),e(zN,fEo),e(r2,mEo),e(z,gEo),e(z,t2),e(t2,_ie),e(_ie,hEo),e(t2,pEo),e(t2,QN),e(QN,uEo),e(t2,_Eo),e(z,bEo),e(z,a2),e(a2,bie),e(bie,vEo),e(a2,FEo),e(a2,WN),e(WN,TEo),e(a2,MEo),e(Ye,EEo),e(Ye,n2),e(n2,CEo),e(n2,vie),e(vie,wEo),e(n2,AEo),e(n2,Fie),e(Fie,yEo),e(Ye,LEo),M(s2,Ye,null),b(f,NPe,_),b(f,$i,_),e($i,l2),e(l2,Tie),M(Sy,Tie,null),e($i,xEo),e($i,Mie),e(Mie,$Eo),b(f,jPe,_),b(f,ko,_),M(Ry,ko,null),e(ko,kEo),e(ko,ki),e(ki,SEo),e(ki,HN),e(HN,REo),e(ki,BEo),e(ki,UN),e(UN,PEo),e(ki,IEo),e(ko,qEo),e(ko,By),e(By,NEo),e(By,Eie),e(Eie,jEo),e(By,DEo),e(ko,GEo),e(ko,at),M(Py,at,null),e(at,OEo),e(at,Cie),e(Cie,VEo),e(at,XEo),e(at,Si),e(Si,zEo),e(Si,wie),e(wie,QEo),e(Si,WEo),e(Si,JN),e(JN,HEo),e(Si,UEo),e(at,JEo),M(i2,at,null),e(ko,YEo),e(ko,Ke),M(Iy,Ke,null),e(Ke,KEo),e(Ke,Aie),e(Aie,ZEo),e(Ke,eCo),e(Ke,xa),e(xa,oCo),e(xa,yie),e(yie,rCo),e(xa,tCo),e(xa,Lie),e(Lie,aCo),e(xa,nCo),e(xa,xie),e(xie,sCo),e(xa,lCo),e(Ke,iCo),e(Ke,Q),e(Q,d2),e(d2,$ie),e($ie,dCo),e(d2,cCo),e(d2,YN),e(YN,fCo),e(d2,mCo),e(Q,gCo),e(Q,c2),e(c2,kie),e(kie,hCo),e(c2,pCo),e(c2,KN),e(KN,uCo),e(c2,_Co),e(Q,bCo),e(Q,f2),e(f2,Sie),e(Sie,vCo),e(f2,FCo),e(f2,ZN),e(ZN,TCo),e(f2,MCo),e(Q,ECo),e(Q,m2),e(m2,Rie),e(Rie,CCo),e(m2,wCo),e(m2,ej),e(ej,ACo),e(m2,yCo),e(Q,LCo),e(Q,g2),e(g2,Bie),e(Bie,xCo),e(g2,$Co),e(g2,oj),e(oj,kCo),e(g2,SCo),e(Q,RCo),e(Q,h2),e(h2,Pie),e(Pie,BCo),e(h2,PCo),e(h2,rj),e(rj,ICo),e(h2,qCo),e(Q,NCo),e(Q,p2),e(p2,Iie),e(Iie,jCo),e(p2,DCo),e(p2,tj),e(tj,GCo),e(p2,OCo),e(Q,VCo),e(Q,u2),e(u2,qie),e(qie,XCo),e(u2,zCo),e(u2,aj),e(aj,QCo),e(u2,WCo),e(Q,HCo),e(Q,_2),e(_2,Nie),e(Nie,UCo),e(_2,JCo),e(_2,nj),e(nj,YCo),e(_2,KCo),e(Q,ZCo),e(Q,b2),e(b2,jie),e(jie,e5o),e(b2,o5o),e(b2,sj),e(sj,r5o),e(b2,t5o),e(Q,a5o),e(Q,v2),e(v2,Die),e(Die,n5o),e(v2,s5o),e(v2,lj),e(lj,l5o),e(v2,i5o),e(Q,d5o),e(Q,F2),e(F2,Gie),e(Gie,c5o),e(F2,f5o),e(F2,ij),e(ij,m5o),e(F2,g5o),e(Q,h5o),e(Q,T2),e(T2,Oie),e(Oie,p5o),e(T2,u5o),e(T2,dj),e(dj,_5o),e(T2,b5o),e(Q,v5o),e(Q,M2),e(M2,Vie),e(Vie,F5o),e(M2,T5o),e(M2,cj),e(cj,M5o),e(M2,E5o),e(Q,C5o),e(Q,E2),e(E2,Xie),e(Xie,w5o),e(E2,A5o),e(E2,fj),e(fj,y5o),e(E2,L5o),e(Q,x5o),e(Q,C2),e(C2,zie),e(zie,$5o),e(C2,k5o),e(C2,mj),e(mj,S5o),e(C2,R5o),e(Q,B5o),e(Q,w2),e(w2,Qie),e(Qie,P5o),e(w2,I5o),e(w2,gj),e(gj,q5o),e(w2,N5o),e(Q,j5o),e(Q,A2),e(A2,Wie),e(Wie,D5o),e(A2,G5o),e(A2,hj),e(hj,O5o),e(A2,V5o),e(Q,X5o),e(Q,y2),e(y2,Hie),e(Hie,z5o),e(y2,Q5o),e(y2,pj),e(pj,W5o),e(y2,H5o),e(Q,U5o),e(Q,L2),e(L2,Uie),e(Uie,J5o),e(L2,Y5o),e(L2,uj),e(uj,K5o),e(L2,Z5o),e(Q,e3o),e(Q,x2),e(x2,Jie),e(Jie,o3o),e(x2,r3o),e(x2,_j),e(_j,t3o),e(x2,a3o),e(Q,n3o),e(Q,$2),e($2,Yie),e(Yie,s3o),e($2,l3o),e($2,bj),e(bj,i3o),e($2,d3o),e(Q,c3o),e(Q,k2),e(k2,Kie),e(Kie,f3o),e(k2,m3o),e(k2,vj),e(vj,g3o),e(k2,h3o),e(Q,p3o),e(Q,S2),e(S2,Zie),e(Zie,u3o),e(S2,_3o),e(S2,Fj),e(Fj,b3o),e(S2,v3o),e(Q,F3o),e(Q,R2),e(R2,ede),e(ede,T3o),e(R2,M3o),e(R2,Tj),e(Tj,E3o),e(R2,C3o),e(Q,w3o),e(Q,B2),e(B2,ode),e(ode,A3o),e(B2,y3o),e(B2,Mj),e(Mj,L3o),e(B2,x3o),e(Q,$3o),e(Q,P2),e(P2,rde),e(rde,k3o),e(P2,S3o),e(P2,Ej),e(Ej,R3o),e(P2,B3o),e(Q,P3o),e(Q,I2),e(I2,tde),e(tde,I3o),e(I2,q3o),e(I2,Cj),e(Cj,N3o),e(I2,j3o),e(Q,D3o),e(Q,q2),e(q2,ade),e(ade,G3o),e(q2,O3o),e(q2,wj),e(wj,V3o),e(q2,X3o),e(Q,z3o),e(Q,N2),e(N2,nde),e(nde,Q3o),e(N2,W3o),e(N2,Aj),e(Aj,H3o),e(N2,U3o),e(Q,J3o),e(Q,j2),e(j2,sde),e(sde,Y3o),e(j2,K3o),e(j2,lde),e(lde,Z3o),e(j2,ewo),e(Q,owo),e(Q,D2),e(D2,ide),e(ide,rwo),e(D2,two),e(D2,yj),e(yj,awo),e(D2,nwo),e(Q,swo),e(Q,G2),e(G2,dde),e(dde,lwo),e(G2,iwo),e(G2,Lj),e(Lj,dwo),e(G2,cwo),e(Q,fwo),e(Q,O2),e(O2,cde),e(cde,mwo),e(O2,gwo),e(O2,xj),e(xj,hwo),e(O2,pwo),e(Q,uwo),e(Q,V2),e(V2,fde),e(fde,_wo),e(V2,bwo),e(V2,$j),e($j,vwo),e(V2,Fwo),e(Ke,Two),e(Ke,X2),e(X2,Mwo),e(X2,mde),e(mde,Ewo),e(X2,Cwo),e(X2,gde),e(gde,wwo),e(Ke,Awo),M(z2,Ke,null),b(f,DPe,_),b(f,Ri,_),e(Ri,Q2),e(Q2,hde),M(qy,hde,null),e(Ri,ywo),e(Ri,pde),e(pde,Lwo),b(f,GPe,_),b(f,So,_),M(Ny,So,null),e(So,xwo),e(So,Bi),e(Bi,$wo),e(Bi,kj),e(kj,kwo),e(Bi,Swo),e(Bi,Sj),e(Sj,Rwo),e(Bi,Bwo),e(So,Pwo),e(So,jy),e(jy,Iwo),e(jy,ude),e(ude,qwo),e(jy,Nwo),e(So,jwo),e(So,nt),M(Dy,nt,null),e(nt,Dwo),e(nt,_de),e(_de,Gwo),e(nt,Owo),e(nt,Pi),e(Pi,Vwo),e(Pi,bde),e(bde,Xwo),e(Pi,zwo),e(Pi,Rj),e(Rj,Qwo),e(Pi,Wwo),e(nt,Hwo),M(W2,nt,null),e(So,Uwo),e(So,Ze),M(Gy,Ze,null),e(Ze,Jwo),e(Ze,vde),e(vde,Ywo),e(Ze,Kwo),e(Ze,$a),e($a,Zwo),e($a,Fde),e(Fde,eAo),e($a,oAo),e($a,Tde),e(Tde,rAo),e($a,tAo),e($a,Mde),e(Mde,aAo),e($a,nAo),e(Ze,sAo),e(Ze,he),e(he,H2),e(H2,Ede),e(Ede,lAo),e(H2,iAo),e(H2,Bj),e(Bj,dAo),e(H2,cAo),e(he,fAo),e(he,U2),e(U2,Cde),e(Cde,mAo),e(U2,gAo),e(U2,Pj),e(Pj,hAo),e(U2,pAo),e(he,uAo),e(he,J2),e(J2,wde),e(wde,_Ao),e(J2,bAo),e(J2,Ij),e(Ij,vAo),e(J2,FAo),e(he,TAo),e(he,Y2),e(Y2,Ade),e(Ade,MAo),e(Y2,EAo),e(Y2,qj),e(qj,CAo),e(Y2,wAo),e(he,AAo),e(he,K2),e(K2,yde),e(yde,yAo),e(K2,LAo),e(K2,Nj),e(Nj,xAo),e(K2,$Ao),e(he,kAo),e(he,Z2),e(Z2,Lde),e(Lde,SAo),e(Z2,RAo),e(Z2,jj),e(jj,BAo),e(Z2,PAo),e(he,IAo),e(he,e1),e(e1,xde),e(xde,qAo),e(e1,NAo),e(e1,Dj),e(Dj,jAo),e(e1,DAo),e(he,GAo),e(he,o1),e(o1,$de),e($de,OAo),e(o1,VAo),e(o1,Gj),e(Gj,XAo),e(o1,zAo),e(he,QAo),e(he,r1),e(r1,kde),e(kde,WAo),e(r1,HAo),e(r1,Oj),e(Oj,UAo),e(r1,JAo),e(he,YAo),e(he,t1),e(t1,Sde),e(Sde,KAo),e(t1,ZAo),e(t1,Vj),e(Vj,eyo),e(t1,oyo),e(he,ryo),e(he,a1),e(a1,Rde),e(Rde,tyo),e(a1,ayo),e(a1,Xj),e(Xj,nyo),e(a1,syo),e(he,lyo),e(he,n1),e(n1,Bde),e(Bde,iyo),e(n1,dyo),e(n1,zj),e(zj,cyo),e(n1,fyo),e(he,myo),e(he,s1),e(s1,Pde),e(Pde,gyo),e(s1,hyo),e(s1,Qj),e(Qj,pyo),e(s1,uyo),e(he,_yo),e(he,l1),e(l1,Ide),e(Ide,byo),e(l1,vyo),e(l1,Wj),e(Wj,Fyo),e(l1,Tyo),e(he,Myo),e(he,i1),e(i1,qde),e(qde,Eyo),e(i1,Cyo),e(i1,Hj),e(Hj,wyo),e(i1,Ayo),e(he,yyo),e(he,d1),e(d1,Nde),e(Nde,Lyo),e(d1,xyo),e(d1,Uj),e(Uj,$yo),e(d1,kyo),e(he,Syo),e(he,c1),e(c1,jde),e(jde,Ryo),e(c1,Byo),e(c1,Jj),e(Jj,Pyo),e(c1,Iyo),e(Ze,qyo),e(Ze,f1),e(f1,Nyo),e(f1,Dde),e(Dde,jyo),e(f1,Dyo),e(f1,Gde),e(Gde,Gyo),e(Ze,Oyo),M(m1,Ze,null),b(f,OPe,_),b(f,Ii,_),e(Ii,g1),e(g1,Ode),M(Oy,Ode,null),e(Ii,Vyo),e(Ii,Vde),e(Vde,Xyo),b(f,VPe,_),b(f,Ro,_),M(Vy,Ro,null),e(Ro,zyo),e(Ro,qi),e(qi,Qyo),e(qi,Yj),e(Yj,Wyo),e(qi,Hyo),e(qi,Kj),e(Kj,Uyo),e(qi,Jyo),e(Ro,Yyo),e(Ro,Xy),e(Xy,Kyo),e(Xy,Xde),e(Xde,Zyo),e(Xy,eLo),e(Ro,oLo),e(Ro,st),M(zy,st,null),e(st,rLo),e(st,zde),e(zde,tLo),e(st,aLo),e(st,Ni),e(Ni,nLo),e(Ni,Qde),e(Qde,sLo),e(Ni,lLo),e(Ni,Zj),e(Zj,iLo),e(Ni,dLo),e(st,cLo),M(h1,st,null),e(Ro,fLo),e(Ro,eo),M(Qy,eo,null),e(eo,mLo),e(eo,Wde),e(Wde,gLo),e(eo,hLo),e(eo,ka),e(ka,pLo),e(ka,Hde),e(Hde,uLo),e(ka,_Lo),e(ka,Ude),e(Ude,bLo),e(ka,vLo),e(ka,Jde),e(Jde,FLo),e(ka,TLo),e(eo,MLo),e(eo,q),e(q,p1),e(p1,Yde),e(Yde,ELo),e(p1,CLo),e(p1,eD),e(eD,wLo),e(p1,ALo),e(q,yLo),e(q,u1),e(u1,Kde),e(Kde,LLo),e(u1,xLo),e(u1,oD),e(oD,$Lo),e(u1,kLo),e(q,SLo),e(q,_1),e(_1,Zde),e(Zde,RLo),e(_1,BLo),e(_1,rD),e(rD,PLo),e(_1,ILo),e(q,qLo),e(q,b1),e(b1,ece),e(ece,NLo),e(b1,jLo),e(b1,tD),e(tD,DLo),e(b1,GLo),e(q,OLo),e(q,v1),e(v1,oce),e(oce,VLo),e(v1,XLo),e(v1,aD),e(aD,zLo),e(v1,QLo),e(q,WLo),e(q,F1),e(F1,rce),e(rce,HLo),e(F1,ULo),e(F1,nD),e(nD,JLo),e(F1,YLo),e(q,KLo),e(q,T1),e(T1,tce),e(tce,ZLo),e(T1,e8o),e(T1,sD),e(sD,o8o),e(T1,r8o),e(q,t8o),e(q,M1),e(M1,ace),e(ace,a8o),e(M1,n8o),e(M1,lD),e(lD,s8o),e(M1,l8o),e(q,i8o),e(q,E1),e(E1,nce),e(nce,d8o),e(E1,c8o),e(E1,iD),e(iD,f8o),e(E1,m8o),e(q,g8o),e(q,C1),e(C1,sce),e(sce,h8o),e(C1,p8o),e(C1,dD),e(dD,u8o),e(C1,_8o),e(q,b8o),e(q,w1),e(w1,lce),e(lce,v8o),e(w1,F8o),e(w1,cD),e(cD,T8o),e(w1,M8o),e(q,E8o),e(q,A1),e(A1,ice),e(ice,C8o),e(A1,w8o),e(A1,fD),e(fD,A8o),e(A1,y8o),e(q,L8o),e(q,y1),e(y1,dce),e(dce,x8o),e(y1,$8o),e(y1,mD),e(mD,k8o),e(y1,S8o),e(q,R8o),e(q,L1),e(L1,cce),e(cce,B8o),e(L1,P8o),e(L1,gD),e(gD,I8o),e(L1,q8o),e(q,N8o),e(q,x1),e(x1,fce),e(fce,j8o),e(x1,D8o),e(x1,hD),e(hD,G8o),e(x1,O8o),e(q,V8o),e(q,$1),e($1,mce),e(mce,X8o),e($1,z8o),e($1,pD),e(pD,Q8o),e($1,W8o),e(q,H8o),e(q,k1),e(k1,gce),e(gce,U8o),e(k1,J8o),e(k1,uD),e(uD,Y8o),e(k1,K8o),e(q,Z8o),e(q,S1),e(S1,hce),e(hce,exo),e(S1,oxo),e(S1,_D),e(_D,rxo),e(S1,txo),e(q,axo),e(q,R1),e(R1,pce),e(pce,nxo),e(R1,sxo),e(R1,bD),e(bD,lxo),e(R1,ixo),e(q,dxo),e(q,B1),e(B1,uce),e(uce,cxo),e(B1,fxo),e(B1,vD),e(vD,mxo),e(B1,gxo),e(q,hxo),e(q,P1),e(P1,_ce),e(_ce,pxo),e(P1,uxo),e(P1,FD),e(FD,_xo),e(P1,bxo),e(q,vxo),e(q,I1),e(I1,bce),e(bce,Fxo),e(I1,Txo),e(I1,TD),e(TD,Mxo),e(I1,Exo),e(q,Cxo),e(q,q1),e(q1,vce),e(vce,wxo),e(q1,Axo),e(q1,MD),e(MD,yxo),e(q1,Lxo),e(q,xxo),e(q,N1),e(N1,Fce),e(Fce,$xo),e(N1,kxo),e(N1,ED),e(ED,Sxo),e(N1,Rxo),e(q,Bxo),e(q,j1),e(j1,Tce),e(Tce,Pxo),e(j1,Ixo),e(j1,CD),e(CD,qxo),e(j1,Nxo),e(q,jxo),e(q,D1),e(D1,Mce),e(Mce,Dxo),e(D1,Gxo),e(D1,wD),e(wD,Oxo),e(D1,Vxo),e(q,Xxo),e(q,G1),e(G1,Ece),e(Ece,zxo),e(G1,Qxo),e(G1,AD),e(AD,Wxo),e(G1,Hxo),e(q,Uxo),e(q,O1),e(O1,Cce),e(Cce,Jxo),e(O1,Yxo),e(O1,yD),e(yD,Kxo),e(O1,Zxo),e(q,e7o),e(q,V1),e(V1,wce),e(wce,o7o),e(V1,r7o),e(V1,LD),e(LD,t7o),e(V1,a7o),e(q,n7o),e(q,X1),e(X1,Ace),e(Ace,s7o),e(X1,l7o),e(X1,xD),e(xD,i7o),e(X1,d7o),e(q,c7o),e(q,z1),e(z1,yce),e(yce,f7o),e(z1,m7o),e(z1,$D),e($D,g7o),e(z1,h7o),e(q,p7o),e(q,Q1),e(Q1,Lce),e(Lce,u7o),e(Q1,_7o),e(Q1,kD),e(kD,b7o),e(Q1,v7o),e(q,F7o),e(q,W1),e(W1,xce),e(xce,T7o),e(W1,M7o),e(W1,SD),e(SD,E7o),e(W1,C7o),e(q,w7o),e(q,H1),e(H1,$ce),e($ce,A7o),e(H1,y7o),e(H1,RD),e(RD,L7o),e(H1,x7o),e(q,$7o),e(q,U1),e(U1,kce),e(kce,k7o),e(U1,S7o),e(U1,BD),e(BD,R7o),e(U1,B7o),e(q,P7o),e(q,J1),e(J1,Sce),e(Sce,I7o),e(J1,q7o),e(J1,PD),e(PD,N7o),e(J1,j7o),e(q,D7o),e(q,Y1),e(Y1,Rce),e(Rce,G7o),e(Y1,O7o),e(Y1,ID),e(ID,V7o),e(Y1,X7o),e(q,z7o),e(q,K1),e(K1,Bce),e(Bce,Q7o),e(K1,W7o),e(K1,qD),e(qD,H7o),e(K1,U7o),e(q,J7o),e(q,Z1),e(Z1,Pce),e(Pce,Y7o),e(Z1,K7o),e(Z1,ND),e(ND,Z7o),e(Z1,e9o),e(q,o9o),e(q,eb),e(eb,Ice),e(Ice,r9o),e(eb,t9o),e(eb,jD),e(jD,a9o),e(eb,n9o),e(q,s9o),e(q,ob),e(ob,qce),e(qce,l9o),e(ob,i9o),e(ob,DD),e(DD,d9o),e(ob,c9o),e(q,f9o),e(q,rb),e(rb,Nce),e(Nce,m9o),e(rb,g9o),e(rb,GD),e(GD,h9o),e(rb,p9o),e(q,u9o),e(q,tb),e(tb,jce),e(jce,_9o),e(tb,b9o),e(tb,OD),e(OD,v9o),e(tb,F9o),e(q,T9o),e(q,ab),e(ab,Dce),e(Dce,M9o),e(ab,E9o),e(ab,VD),e(VD,C9o),e(ab,w9o),e(q,A9o),e(q,nb),e(nb,Gce),e(Gce,y9o),e(nb,L9o),e(nb,XD),e(XD,x9o),e(nb,$9o),e(q,k9o),e(q,sb),e(sb,Oce),e(Oce,S9o),e(sb,R9o),e(sb,zD),e(zD,B9o),e(sb,P9o),e(q,I9o),e(q,lb),e(lb,Vce),e(Vce,q9o),e(lb,N9o),e(lb,QD),e(QD,j9o),e(lb,D9o),e(eo,G9o),e(eo,ib),e(ib,O9o),e(ib,Xce),e(Xce,V9o),e(ib,X9o),e(ib,zce),e(zce,z9o),e(eo,Q9o),M(db,eo,null),b(f,XPe,_),b(f,ji,_),e(ji,cb),e(cb,Qce),M(Wy,Qce,null),e(ji,W9o),e(ji,Wce),e(Wce,H9o),b(f,zPe,_),b(f,Bo,_),M(Hy,Bo,null),e(Bo,U9o),e(Bo,Di),e(Di,J9o),e(Di,WD),e(WD,Y9o),e(Di,K9o),e(Di,HD),e(HD,Z9o),e(Di,e$o),e(Bo,o$o),e(Bo,Uy),e(Uy,r$o),e(Uy,Hce),e(Hce,t$o),e(Uy,a$o),e(Bo,n$o),e(Bo,lt),M(Jy,lt,null),e(lt,s$o),e(lt,Uce),e(Uce,l$o),e(lt,i$o),e(lt,Gi),e(Gi,d$o),e(Gi,Jce),e(Jce,c$o),e(Gi,f$o),e(Gi,UD),e(UD,m$o),e(Gi,g$o),e(lt,h$o),M(fb,lt,null),e(Bo,p$o),e(Bo,oo),M(Yy,oo,null),e(oo,u$o),e(oo,Yce),e(Yce,_$o),e(oo,b$o),e(oo,Sa),e(Sa,v$o),e(Sa,Kce),e(Kce,F$o),e(Sa,T$o),e(Sa,Zce),e(Zce,M$o),e(Sa,E$o),e(Sa,efe),e(efe,C$o),e(Sa,w$o),e(oo,A$o),e(oo,Y),e(Y,mb),e(mb,ofe),e(ofe,y$o),e(mb,L$o),e(mb,JD),e(JD,x$o),e(mb,$$o),e(Y,k$o),e(Y,gb),e(gb,rfe),e(rfe,S$o),e(gb,R$o),e(gb,YD),e(YD,B$o),e(gb,P$o),e(Y,I$o),e(Y,hb),e(hb,tfe),e(tfe,q$o),e(hb,N$o),e(hb,KD),e(KD,j$o),e(hb,D$o),e(Y,G$o),e(Y,pb),e(pb,afe),e(afe,O$o),e(pb,V$o),e(pb,ZD),e(ZD,X$o),e(pb,z$o),e(Y,Q$o),e(Y,ub),e(ub,nfe),e(nfe,W$o),e(ub,H$o),e(ub,eG),e(eG,U$o),e(ub,J$o),e(Y,Y$o),e(Y,_b),e(_b,sfe),e(sfe,K$o),e(_b,Z$o),e(_b,oG),e(oG,eko),e(_b,oko),e(Y,rko),e(Y,bb),e(bb,lfe),e(lfe,tko),e(bb,ako),e(bb,rG),e(rG,nko),e(bb,sko),e(Y,lko),e(Y,vb),e(vb,ife),e(ife,iko),e(vb,dko),e(vb,tG),e(tG,cko),e(vb,fko),e(Y,mko),e(Y,Fb),e(Fb,dfe),e(dfe,gko),e(Fb,hko),e(Fb,aG),e(aG,pko),e(Fb,uko),e(Y,_ko),e(Y,Tb),e(Tb,cfe),e(cfe,bko),e(Tb,vko),e(Tb,nG),e(nG,Fko),e(Tb,Tko),e(Y,Mko),e(Y,Mb),e(Mb,ffe),e(ffe,Eko),e(Mb,Cko),e(Mb,sG),e(sG,wko),e(Mb,Ako),e(Y,yko),e(Y,Eb),e(Eb,mfe),e(mfe,Lko),e(Eb,xko),e(Eb,lG),e(lG,$ko),e(Eb,kko),e(Y,Sko),e(Y,Cb),e(Cb,gfe),e(gfe,Rko),e(Cb,Bko),e(Cb,iG),e(iG,Pko),e(Cb,Iko),e(Y,qko),e(Y,wb),e(wb,hfe),e(hfe,Nko),e(wb,jko),e(wb,dG),e(dG,Dko),e(wb,Gko),e(Y,Oko),e(Y,Ab),e(Ab,pfe),e(pfe,Vko),e(Ab,Xko),e(Ab,cG),e(cG,zko),e(Ab,Qko),e(Y,Wko),e(Y,yb),e(yb,ufe),e(ufe,Hko),e(yb,Uko),e(yb,fG),e(fG,Jko),e(yb,Yko),e(Y,Kko),e(Y,Lb),e(Lb,_fe),e(_fe,Zko),e(Lb,eSo),e(Lb,mG),e(mG,oSo),e(Lb,rSo),e(Y,tSo),e(Y,xb),e(xb,bfe),e(bfe,aSo),e(xb,nSo),e(xb,gG),e(gG,sSo),e(xb,lSo),e(Y,iSo),e(Y,$b),e($b,vfe),e(vfe,dSo),e($b,cSo),e($b,hG),e(hG,fSo),e($b,mSo),e(Y,gSo),e(Y,kb),e(kb,Ffe),e(Ffe,hSo),e(kb,pSo),e(kb,pG),e(pG,uSo),e(kb,_So),e(Y,bSo),e(Y,Sb),e(Sb,Tfe),e(Tfe,vSo),e(Sb,FSo),e(Sb,uG),e(uG,TSo),e(Sb,MSo),e(Y,ESo),e(Y,Rb),e(Rb,Mfe),e(Mfe,CSo),e(Rb,wSo),e(Rb,_G),e(_G,ASo),e(Rb,ySo),e(Y,LSo),e(Y,Bb),e(Bb,Efe),e(Efe,xSo),e(Bb,$So),e(Bb,bG),e(bG,kSo),e(Bb,SSo),e(Y,RSo),e(Y,Pb),e(Pb,Cfe),e(Cfe,BSo),e(Pb,PSo),e(Pb,vG),e(vG,ISo),e(Pb,qSo),e(Y,NSo),e(Y,Ib),e(Ib,wfe),e(wfe,jSo),e(Ib,DSo),e(Ib,FG),e(FG,GSo),e(Ib,OSo),e(Y,VSo),e(Y,qb),e(qb,Afe),e(Afe,XSo),e(qb,zSo),e(qb,TG),e(TG,QSo),e(qb,WSo),e(Y,HSo),e(Y,Nb),e(Nb,yfe),e(yfe,USo),e(Nb,JSo),e(Nb,MG),e(MG,YSo),e(Nb,KSo),e(Y,ZSo),e(Y,jb),e(jb,Lfe),e(Lfe,eRo),e(jb,oRo),e(jb,EG),e(EG,rRo),e(jb,tRo),e(oo,aRo),e(oo,Db),e(Db,nRo),e(Db,xfe),e(xfe,sRo),e(Db,lRo),e(Db,$fe),e($fe,iRo),e(oo,dRo),M(Gb,oo,null),b(f,QPe,_),b(f,Oi,_),e(Oi,Ob),e(Ob,kfe),M(Ky,kfe,null),e(Oi,cRo),e(Oi,Sfe),e(Sfe,fRo),b(f,WPe,_),b(f,Po,_),M(Zy,Po,null),e(Po,mRo),e(Po,Vi),e(Vi,gRo),e(Vi,CG),e(CG,hRo),e(Vi,pRo),e(Vi,wG),e(wG,uRo),e(Vi,_Ro),e(Po,bRo),e(Po,eL),e(eL,vRo),e(eL,Rfe),e(Rfe,FRo),e(eL,TRo),e(Po,MRo),e(Po,it),M(oL,it,null),e(it,ERo),e(it,Bfe),e(Bfe,CRo),e(it,wRo),e(it,Xi),e(Xi,ARo),e(Xi,Pfe),e(Pfe,yRo),e(Xi,LRo),e(Xi,AG),e(AG,xRo),e(Xi,$Ro),e(it,kRo),M(Vb,it,null),e(Po,SRo),e(Po,ro),M(rL,ro,null),e(ro,RRo),e(ro,Ife),e(Ife,BRo),e(ro,PRo),e(ro,Ra),e(Ra,IRo),e(Ra,qfe),e(qfe,qRo),e(Ra,NRo),e(Ra,Nfe),e(Nfe,jRo),e(Ra,DRo),e(Ra,jfe),e(jfe,GRo),e(Ra,ORo),e(ro,VRo),e(ro,Yr),e(Yr,Xb),e(Xb,Dfe),e(Dfe,XRo),e(Xb,zRo),e(Xb,yG),e(yG,QRo),e(Xb,WRo),e(Yr,HRo),e(Yr,zb),e(zb,Gfe),e(Gfe,URo),e(zb,JRo),e(zb,LG),e(LG,YRo),e(zb,KRo),e(Yr,ZRo),e(Yr,Qb),e(Qb,Ofe),e(Ofe,eBo),e(Qb,oBo),e(Qb,xG),e(xG,rBo),e(Qb,tBo),e(Yr,aBo),e(Yr,Wb),e(Wb,Vfe),e(Vfe,nBo),e(Wb,sBo),e(Wb,$G),e($G,lBo),e(Wb,iBo),e(Yr,dBo),e(Yr,Hb),e(Hb,Xfe),e(Xfe,cBo),e(Hb,fBo),e(Hb,kG),e(kG,mBo),e(Hb,gBo),e(ro,hBo),e(ro,Ub),e(Ub,pBo),e(Ub,zfe),e(zfe,uBo),e(Ub,_Bo),e(Ub,Qfe),e(Qfe,bBo),e(ro,vBo),M(Jb,ro,null),b(f,HPe,_),b(f,zi,_),e(zi,Yb),e(Yb,Wfe),M(tL,Wfe,null),e(zi,FBo),e(zi,Hfe),e(Hfe,TBo),b(f,UPe,_),b(f,Io,_),M(aL,Io,null),e(Io,MBo),e(Io,Qi),e(Qi,EBo),e(Qi,SG),e(SG,CBo),e(Qi,wBo),e(Qi,RG),e(RG,ABo),e(Qi,yBo),e(Io,LBo),e(Io,nL),e(nL,xBo),e(nL,Ufe),e(Ufe,$Bo),e(nL,kBo),e(Io,SBo),e(Io,dt),M(sL,dt,null),e(dt,RBo),e(dt,Jfe),e(Jfe,BBo),e(dt,PBo),e(dt,Wi),e(Wi,IBo),e(Wi,Yfe),e(Yfe,qBo),e(Wi,NBo),e(Wi,BG),e(BG,jBo),e(Wi,DBo),e(dt,GBo),M(Kb,dt,null),e(Io,OBo),e(Io,to),M(lL,to,null),e(to,VBo),e(to,Kfe),e(Kfe,XBo),e(to,zBo),e(to,Ba),e(Ba,QBo),e(Ba,Zfe),e(Zfe,WBo),e(Ba,HBo),e(Ba,eme),e(eme,UBo),e(Ba,JBo),e(Ba,ome),e(ome,YBo),e(Ba,KBo),e(to,ZBo),e(to,U),e(U,Zb),e(Zb,rme),e(rme,ePo),e(Zb,oPo),e(Zb,PG),e(PG,rPo),e(Zb,tPo),e(U,aPo),e(U,e4),e(e4,tme),e(tme,nPo),e(e4,sPo),e(e4,IG),e(IG,lPo),e(e4,iPo),e(U,dPo),e(U,o4),e(o4,ame),e(ame,cPo),e(o4,fPo),e(o4,qG),e(qG,mPo),e(o4,gPo),e(U,hPo),e(U,r4),e(r4,nme),e(nme,pPo),e(r4,uPo),e(r4,NG),e(NG,_Po),e(r4,bPo),e(U,vPo),e(U,t4),e(t4,sme),e(sme,FPo),e(t4,TPo),e(t4,jG),e(jG,MPo),e(t4,EPo),e(U,CPo),e(U,a4),e(a4,lme),e(lme,wPo),e(a4,APo),e(a4,DG),e(DG,yPo),e(a4,LPo),e(U,xPo),e(U,n4),e(n4,ime),e(ime,$Po),e(n4,kPo),e(n4,GG),e(GG,SPo),e(n4,RPo),e(U,BPo),e(U,s4),e(s4,dme),e(dme,PPo),e(s4,IPo),e(s4,OG),e(OG,qPo),e(s4,NPo),e(U,jPo),e(U,l4),e(l4,cme),e(cme,DPo),e(l4,GPo),e(l4,VG),e(VG,OPo),e(l4,VPo),e(U,XPo),e(U,i4),e(i4,fme),e(fme,zPo),e(i4,QPo),e(i4,XG),e(XG,WPo),e(i4,HPo),e(U,UPo),e(U,d4),e(d4,mme),e(mme,JPo),e(d4,YPo),e(d4,zG),e(zG,KPo),e(d4,ZPo),e(U,eIo),e(U,c4),e(c4,gme),e(gme,oIo),e(c4,rIo),e(c4,QG),e(QG,tIo),e(c4,aIo),e(U,nIo),e(U,f4),e(f4,hme),e(hme,sIo),e(f4,lIo),e(f4,WG),e(WG,iIo),e(f4,dIo),e(U,cIo),e(U,m4),e(m4,pme),e(pme,fIo),e(m4,mIo),e(m4,HG),e(HG,gIo),e(m4,hIo),e(U,pIo),e(U,g4),e(g4,ume),e(ume,uIo),e(g4,_Io),e(g4,UG),e(UG,bIo),e(g4,vIo),e(U,FIo),e(U,h4),e(h4,_me),e(_me,TIo),e(h4,MIo),e(h4,JG),e(JG,EIo),e(h4,CIo),e(U,wIo),e(U,p4),e(p4,bme),e(bme,AIo),e(p4,yIo),e(p4,YG),e(YG,LIo),e(p4,xIo),e(U,$Io),e(U,u4),e(u4,vme),e(vme,kIo),e(u4,SIo),e(u4,KG),e(KG,RIo),e(u4,BIo),e(U,PIo),e(U,_4),e(_4,Fme),e(Fme,IIo),e(_4,qIo),e(_4,ZG),e(ZG,NIo),e(_4,jIo),e(U,DIo),e(U,b4),e(b4,Tme),e(Tme,GIo),e(b4,OIo),e(b4,eO),e(eO,VIo),e(b4,XIo),e(U,zIo),e(U,v4),e(v4,Mme),e(Mme,QIo),e(v4,WIo),e(v4,oO),e(oO,HIo),e(v4,UIo),e(U,JIo),e(U,F4),e(F4,Eme),e(Eme,YIo),e(F4,KIo),e(F4,rO),e(rO,ZIo),e(F4,eqo),e(U,oqo),e(U,T4),e(T4,Cme),e(Cme,rqo),e(T4,tqo),e(T4,tO),e(tO,aqo),e(T4,nqo),e(U,sqo),e(U,M4),e(M4,wme),e(wme,lqo),e(M4,iqo),e(M4,aO),e(aO,dqo),e(M4,cqo),e(U,fqo),e(U,E4),e(E4,Ame),e(Ame,mqo),e(E4,gqo),e(E4,nO),e(nO,hqo),e(E4,pqo),e(U,uqo),e(U,C4),e(C4,yme),e(yme,_qo),e(C4,bqo),e(C4,sO),e(sO,vqo),e(C4,Fqo),e(U,Tqo),e(U,w4),e(w4,Lme),e(Lme,Mqo),e(w4,Eqo),e(w4,lO),e(lO,Cqo),e(w4,wqo),e(U,Aqo),e(U,A4),e(A4,xme),e(xme,yqo),e(A4,Lqo),e(A4,iO),e(iO,xqo),e(A4,$qo),e(U,kqo),e(U,y4),e(y4,$me),e($me,Sqo),e(y4,Rqo),e(y4,dO),e(dO,Bqo),e(y4,Pqo),e(U,Iqo),e(U,L4),e(L4,kme),e(kme,qqo),e(L4,Nqo),e(L4,cO),e(cO,jqo),e(L4,Dqo),e(U,Gqo),e(U,x4),e(x4,Sme),e(Sme,Oqo),e(x4,Vqo),e(x4,fO),e(fO,Xqo),e(x4,zqo),e(U,Qqo),e(U,$4),e($4,Rme),e(Rme,Wqo),e($4,Hqo),e($4,mO),e(mO,Uqo),e($4,Jqo),e(U,Yqo),e(U,k4),e(k4,Bme),e(Bme,Kqo),e(k4,Zqo),e(k4,gO),e(gO,eNo),e(k4,oNo),e(to,rNo),e(to,S4),e(S4,tNo),e(S4,Pme),e(Pme,aNo),e(S4,nNo),e(S4,Ime),e(Ime,sNo),e(to,lNo),M(R4,to,null),b(f,JPe,_),b(f,Hi,_),e(Hi,B4),e(B4,qme),M(iL,qme,null),e(Hi,iNo),e(Hi,Nme),e(Nme,dNo),b(f,YPe,_),b(f,qo,_),M(dL,qo,null),e(qo,cNo),e(qo,Ui),e(Ui,fNo),e(Ui,hO),e(hO,mNo),e(Ui,gNo),e(Ui,pO),e(pO,hNo),e(Ui,pNo),e(qo,uNo),e(qo,cL),e(cL,_No),e(cL,jme),e(jme,bNo),e(cL,vNo),e(qo,FNo),e(qo,ct),M(fL,ct,null),e(ct,TNo),e(ct,Dme),e(Dme,MNo),e(ct,ENo),e(ct,Ji),e(Ji,CNo),e(Ji,Gme),e(Gme,wNo),e(Ji,ANo),e(Ji,uO),e(uO,yNo),e(Ji,LNo),e(ct,xNo),M(P4,ct,null),e(qo,$No),e(qo,ao),M(mL,ao,null),e(ao,kNo),e(ao,Ome),e(Ome,SNo),e(ao,RNo),e(ao,Pa),e(Pa,BNo),e(Pa,Vme),e(Vme,PNo),e(Pa,INo),e(Pa,Xme),e(Xme,qNo),e(Pa,NNo),e(Pa,zme),e(zme,jNo),e(Pa,DNo),e(ao,GNo),e(ao,O),e(O,I4),e(I4,Qme),e(Qme,ONo),e(I4,VNo),e(I4,_O),e(_O,XNo),e(I4,zNo),e(O,QNo),e(O,q4),e(q4,Wme),e(Wme,WNo),e(q4,HNo),e(q4,bO),e(bO,UNo),e(q4,JNo),e(O,YNo),e(O,N4),e(N4,Hme),e(Hme,KNo),e(N4,ZNo),e(N4,vO),e(vO,ejo),e(N4,ojo),e(O,rjo),e(O,j4),e(j4,Ume),e(Ume,tjo),e(j4,ajo),e(j4,FO),e(FO,njo),e(j4,sjo),e(O,ljo),e(O,D4),e(D4,Jme),e(Jme,ijo),e(D4,djo),e(D4,TO),e(TO,cjo),e(D4,fjo),e(O,mjo),e(O,G4),e(G4,Yme),e(Yme,gjo),e(G4,hjo),e(G4,MO),e(MO,pjo),e(G4,ujo),e(O,_jo),e(O,O4),e(O4,Kme),e(Kme,bjo),e(O4,vjo),e(O4,EO),e(EO,Fjo),e(O4,Tjo),e(O,Mjo),e(O,V4),e(V4,Zme),e(Zme,Ejo),e(V4,Cjo),e(V4,CO),e(CO,wjo),e(V4,Ajo),e(O,yjo),e(O,X4),e(X4,ege),e(ege,Ljo),e(X4,xjo),e(X4,wO),e(wO,$jo),e(X4,kjo),e(O,Sjo),e(O,z4),e(z4,oge),e(oge,Rjo),e(z4,Bjo),e(z4,AO),e(AO,Pjo),e(z4,Ijo),e(O,qjo),e(O,Q4),e(Q4,rge),e(rge,Njo),e(Q4,jjo),e(Q4,yO),e(yO,Djo),e(Q4,Gjo),e(O,Ojo),e(O,W4),e(W4,tge),e(tge,Vjo),e(W4,Xjo),e(W4,LO),e(LO,zjo),e(W4,Qjo),e(O,Wjo),e(O,H4),e(H4,age),e(age,Hjo),e(H4,Ujo),e(H4,xO),e(xO,Jjo),e(H4,Yjo),e(O,Kjo),e(O,U4),e(U4,nge),e(nge,Zjo),e(U4,eDo),e(U4,$O),e($O,oDo),e(U4,rDo),e(O,tDo),e(O,J4),e(J4,sge),e(sge,aDo),e(J4,nDo),e(J4,kO),e(kO,sDo),e(J4,lDo),e(O,iDo),e(O,Y4),e(Y4,lge),e(lge,dDo),e(Y4,cDo),e(Y4,SO),e(SO,fDo),e(Y4,mDo),e(O,gDo),e(O,K4),e(K4,ige),e(ige,hDo),e(K4,pDo),e(K4,RO),e(RO,uDo),e(K4,_Do),e(O,bDo),e(O,Z4),e(Z4,dge),e(dge,vDo),e(Z4,FDo),e(Z4,BO),e(BO,TDo),e(Z4,MDo),e(O,EDo),e(O,ev),e(ev,cge),e(cge,CDo),e(ev,wDo),e(ev,PO),e(PO,ADo),e(ev,yDo),e(O,LDo),e(O,ov),e(ov,fge),e(fge,xDo),e(ov,$Do),e(ov,IO),e(IO,kDo),e(ov,SDo),e(O,RDo),e(O,rv),e(rv,mge),e(mge,BDo),e(rv,PDo),e(rv,qO),e(qO,IDo),e(rv,qDo),e(O,NDo),e(O,tv),e(tv,gge),e(gge,jDo),e(tv,DDo),e(tv,NO),e(NO,GDo),e(tv,ODo),e(O,VDo),e(O,av),e(av,hge),e(hge,XDo),e(av,zDo),e(av,jO),e(jO,QDo),e(av,WDo),e(O,HDo),e(O,nv),e(nv,pge),e(pge,UDo),e(nv,JDo),e(nv,DO),e(DO,YDo),e(nv,KDo),e(O,ZDo),e(O,sv),e(sv,uge),e(uge,eGo),e(sv,oGo),e(sv,GO),e(GO,rGo),e(sv,tGo),e(O,aGo),e(O,lv),e(lv,_ge),e(_ge,nGo),e(lv,sGo),e(lv,OO),e(OO,lGo),e(lv,iGo),e(O,dGo),e(O,iv),e(iv,bge),e(bge,cGo),e(iv,fGo),e(iv,VO),e(VO,mGo),e(iv,gGo),e(O,hGo),e(O,dv),e(dv,vge),e(vge,pGo),e(dv,uGo),e(dv,XO),e(XO,_Go),e(dv,bGo),e(O,vGo),e(O,cv),e(cv,Fge),e(Fge,FGo),e(cv,TGo),e(cv,zO),e(zO,MGo),e(cv,EGo),e(O,CGo),e(O,fv),e(fv,Tge),e(Tge,wGo),e(fv,AGo),e(fv,QO),e(QO,yGo),e(fv,LGo),e(O,xGo),e(O,mv),e(mv,Mge),e(Mge,$Go),e(mv,kGo),e(mv,WO),e(WO,SGo),e(mv,RGo),e(O,BGo),e(O,gv),e(gv,Ege),e(Ege,PGo),e(gv,IGo),e(gv,HO),e(HO,qGo),e(gv,NGo),e(O,jGo),e(O,hv),e(hv,Cge),e(Cge,DGo),e(hv,GGo),e(hv,UO),e(UO,OGo),e(hv,VGo),e(O,XGo),e(O,pv),e(pv,wge),e(wge,zGo),e(pv,QGo),e(pv,JO),e(JO,WGo),e(pv,HGo),e(O,UGo),e(O,uv),e(uv,Age),e(Age,JGo),e(uv,YGo),e(uv,YO),e(YO,KGo),e(uv,ZGo),e(O,eOo),e(O,_v),e(_v,yge),e(yge,oOo),e(_v,rOo),e(_v,KO),e(KO,tOo),e(_v,aOo),e(O,nOo),e(O,bv),e(bv,Lge),e(Lge,sOo),e(bv,lOo),e(bv,ZO),e(ZO,iOo),e(bv,dOo),e(O,cOo),e(O,vv),e(vv,xge),e(xge,fOo),e(vv,mOo),e(vv,eV),e(eV,gOo),e(vv,hOo),e(O,pOo),e(O,Fv),e(Fv,$ge),e($ge,uOo),e(Fv,_Oo),e(Fv,oV),e(oV,bOo),e(Fv,vOo),e(ao,FOo),e(ao,Tv),e(Tv,TOo),e(Tv,kge),e(kge,MOo),e(Tv,EOo),e(Tv,Sge),e(Sge,COo),e(ao,wOo),M(Mv,ao,null),b(f,KPe,_),b(f,Yi,_),e(Yi,Ev),e(Ev,Rge),M(gL,Rge,null),e(Yi,AOo),e(Yi,Bge),e(Bge,yOo),b(f,ZPe,_),b(f,No,_),M(hL,No,null),e(No,LOo),e(No,Ki),e(Ki,xOo),e(Ki,rV),e(rV,$Oo),e(Ki,kOo),e(Ki,tV),e(tV,SOo),e(Ki,ROo),e(No,BOo),e(No,pL),e(pL,POo),e(pL,Pge),e(Pge,IOo),e(pL,qOo),e(No,NOo),e(No,ft),M(uL,ft,null),e(ft,jOo),e(ft,Ige),e(Ige,DOo),e(ft,GOo),e(ft,Zi),e(Zi,OOo),e(Zi,qge),e(qge,VOo),e(Zi,XOo),e(Zi,aV),e(aV,zOo),e(Zi,QOo),e(ft,WOo),M(Cv,ft,null),e(No,HOo),e(No,no),M(_L,no,null),e(no,UOo),e(no,Nge),e(Nge,JOo),e(no,YOo),e(no,Ia),e(Ia,KOo),e(Ia,jge),e(jge,ZOo),e(Ia,eVo),e(Ia,Dge),e(Dge,oVo),e(Ia,rVo),e(Ia,Gge),e(Gge,tVo),e(Ia,aVo),e(no,nVo),e(no,Oge),e(Oge,wv),e(wv,Vge),e(Vge,sVo),e(wv,lVo),e(wv,nV),e(nV,iVo),e(wv,dVo),e(no,cVo),e(no,Av),e(Av,fVo),e(Av,Xge),e(Xge,mVo),e(Av,gVo),e(Av,zge),e(zge,hVo),e(no,pVo),M(yv,no,null),b(f,eIe,_),b(f,ed,_),e(ed,Lv),e(Lv,Qge),M(bL,Qge,null),e(ed,uVo),e(ed,Wge),e(Wge,_Vo),b(f,oIe,_),b(f,jo,_),M(vL,jo,null),e(jo,bVo),e(jo,od),e(od,vVo),e(od,sV),e(sV,FVo),e(od,TVo),e(od,lV),e(lV,MVo),e(od,EVo),e(jo,CVo),e(jo,FL),e(FL,wVo),e(FL,Hge),e(Hge,AVo),e(FL,yVo),e(jo,LVo),e(jo,mt),M(TL,mt,null),e(mt,xVo),e(mt,Uge),e(Uge,$Vo),e(mt,kVo),e(mt,rd),e(rd,SVo),e(rd,Jge),e(Jge,RVo),e(rd,BVo),e(rd,iV),e(iV,PVo),e(rd,IVo),e(mt,qVo),M(xv,mt,null),e(jo,NVo),e(jo,so),M(ML,so,null),e(so,jVo),e(so,Yge),e(Yge,DVo),e(so,GVo),e(so,qa),e(qa,OVo),e(qa,Kge),e(Kge,VVo),e(qa,XVo),e(qa,Zge),e(Zge,zVo),e(qa,QVo),e(qa,ehe),e(ehe,WVo),e(qa,HVo),e(so,UVo),e(so,ve),e(ve,$v),e($v,ohe),e(ohe,JVo),e($v,YVo),e($v,dV),e(dV,KVo),e($v,ZVo),e(ve,eXo),e(ve,kv),e(kv,rhe),e(rhe,oXo),e(kv,rXo),e(kv,cV),e(cV,tXo),e(kv,aXo),e(ve,nXo),e(ve,Sv),e(Sv,the),e(the,sXo),e(Sv,lXo),e(Sv,fV),e(fV,iXo),e(Sv,dXo),e(ve,cXo),e(ve,Rs),e(Rs,ahe),e(ahe,fXo),e(Rs,mXo),e(Rs,mV),e(mV,gXo),e(Rs,hXo),e(Rs,gV),e(gV,pXo),e(Rs,uXo),e(ve,_Xo),e(ve,Rv),e(Rv,nhe),e(nhe,bXo),e(Rv,vXo),e(Rv,hV),e(hV,FXo),e(Rv,TXo),e(ve,MXo),e(ve,gt),e(gt,she),e(she,EXo),e(gt,CXo),e(gt,pV),e(pV,wXo),e(gt,AXo),e(gt,uV),e(uV,yXo),e(gt,LXo),e(gt,_V),e(_V,xXo),e(gt,$Xo),e(ve,kXo),e(ve,Bv),e(Bv,lhe),e(lhe,SXo),e(Bv,RXo),e(Bv,bV),e(bV,BXo),e(Bv,PXo),e(ve,IXo),e(ve,Pv),e(Pv,ihe),e(ihe,qXo),e(Pv,NXo),e(Pv,vV),e(vV,jXo),e(Pv,DXo),e(ve,GXo),e(ve,Iv),e(Iv,dhe),e(dhe,OXo),e(Iv,VXo),e(Iv,FV),e(FV,XXo),e(Iv,zXo),e(ve,QXo),e(ve,qv),e(qv,che),e(che,WXo),e(qv,HXo),e(qv,TV),e(TV,UXo),e(qv,JXo),e(ve,YXo),e(ve,Nv),e(Nv,fhe),e(fhe,KXo),e(Nv,ZXo),e(Nv,MV),e(MV,ezo),e(Nv,ozo),e(ve,rzo),e(ve,jv),e(jv,mhe),e(mhe,tzo),e(jv,azo),e(jv,EV),e(EV,nzo),e(jv,szo),e(ve,lzo),e(ve,Dv),e(Dv,ghe),e(ghe,izo),e(Dv,dzo),e(Dv,CV),e(CV,czo),e(Dv,fzo),e(so,mzo),e(so,Gv),e(Gv,gzo),e(Gv,hhe),e(hhe,hzo),e(Gv,pzo),e(Gv,phe),e(phe,uzo),e(so,_zo),M(Ov,so,null),b(f,rIe,_),b(f,td,_),e(td,Vv),e(Vv,uhe),M(EL,uhe,null),e(td,bzo),e(td,_he),e(_he,vzo),b(f,tIe,_),b(f,Do,_),M(CL,Do,null),e(Do,Fzo),e(Do,ad),e(ad,Tzo),e(ad,wV),e(wV,Mzo),e(ad,Ezo),e(ad,AV),e(AV,Czo),e(ad,wzo),e(Do,Azo),e(Do,wL),e(wL,yzo),e(wL,bhe),e(bhe,Lzo),e(wL,xzo),e(Do,$zo),e(Do,ht),M(AL,ht,null),e(ht,kzo),e(ht,vhe),e(vhe,Szo),e(ht,Rzo),e(ht,nd),e(nd,Bzo),e(nd,Fhe),e(Fhe,Pzo),e(nd,Izo),e(nd,yV),e(yV,qzo),e(nd,Nzo),e(ht,jzo),M(Xv,ht,null),e(Do,Dzo),e(Do,lo),M(yL,lo,null),e(lo,Gzo),e(lo,The),e(The,Ozo),e(lo,Vzo),e(lo,Na),e(Na,Xzo),e(Na,Mhe),e(Mhe,zzo),e(Na,Qzo),e(Na,Ehe),e(Ehe,Wzo),e(Na,Hzo),e(Na,Che),e(Che,Uzo),e(Na,Jzo),e(lo,Yzo),e(lo,whe),e(whe,zv),e(zv,Ahe),e(Ahe,Kzo),e(zv,Zzo),e(zv,LV),e(LV,eQo),e(zv,oQo),e(lo,rQo),e(lo,Qv),e(Qv,tQo),e(Qv,yhe),e(yhe,aQo),e(Qv,nQo),e(Qv,Lhe),e(Lhe,sQo),e(lo,lQo),M(Wv,lo,null),b(f,aIe,_),b(f,sd,_),e(sd,Hv),e(Hv,xhe),M(LL,xhe,null),e(sd,iQo),e(sd,$he),e($he,dQo),b(f,nIe,_),b(f,Go,_),M(xL,Go,null),e(Go,cQo),e(Go,ld),e(ld,fQo),e(ld,xV),e(xV,mQo),e(ld,gQo),e(ld,$V),e($V,hQo),e(ld,pQo),e(Go,uQo),e(Go,$L),e($L,_Qo),e($L,khe),e(khe,bQo),e($L,vQo),e(Go,FQo),e(Go,pt),M(kL,pt,null),e(pt,TQo),e(pt,She),e(She,MQo),e(pt,EQo),e(pt,id),e(id,CQo),e(id,Rhe),e(Rhe,wQo),e(id,AQo),e(id,kV),e(kV,yQo),e(id,LQo),e(pt,xQo),M(Uv,pt,null),e(Go,$Qo),e(Go,io),M(SL,io,null),e(io,kQo),e(io,Bhe),e(Bhe,SQo),e(io,RQo),e(io,ja),e(ja,BQo),e(ja,Phe),e(Phe,PQo),e(ja,IQo),e(ja,Ihe),e(Ihe,qQo),e(ja,NQo),e(ja,qhe),e(qhe,jQo),e(ja,DQo),e(io,GQo),e(io,je),e(je,Jv),e(Jv,Nhe),e(Nhe,OQo),e(Jv,VQo),e(Jv,SV),e(SV,XQo),e(Jv,zQo),e(je,QQo),e(je,Yv),e(Yv,jhe),e(jhe,WQo),e(Yv,HQo),e(Yv,RV),e(RV,UQo),e(Yv,JQo),e(je,YQo),e(je,Kv),e(Kv,Dhe),e(Dhe,KQo),e(Kv,ZQo),e(Kv,BV),e(BV,eWo),e(Kv,oWo),e(je,rWo),e(je,Zv),e(Zv,Ghe),e(Ghe,tWo),e(Zv,aWo),e(Zv,PV),e(PV,nWo),e(Zv,sWo),e(je,lWo),e(je,eF),e(eF,Ohe),e(Ohe,iWo),e(eF,dWo),e(eF,IV),e(IV,cWo),e(eF,fWo),e(je,mWo),e(je,oF),e(oF,Vhe),e(Vhe,gWo),e(oF,hWo),e(oF,qV),e(qV,pWo),e(oF,uWo),e(je,_Wo),e(je,rF),e(rF,Xhe),e(Xhe,bWo),e(rF,vWo),e(rF,NV),e(NV,FWo),e(rF,TWo),e(je,MWo),e(je,tF),e(tF,zhe),e(zhe,EWo),e(tF,CWo),e(tF,jV),e(jV,wWo),e(tF,AWo),e(io,yWo),e(io,aF),e(aF,LWo),e(aF,Qhe),e(Qhe,xWo),e(aF,$Wo),e(aF,Whe),e(Whe,kWo),e(io,SWo),M(nF,io,null),b(f,sIe,_),b(f,dd,_),e(dd,sF),e(sF,Hhe),M(RL,Hhe,null),e(dd,RWo),e(dd,Uhe),e(Uhe,BWo),b(f,lIe,_),b(f,Oo,_),M(BL,Oo,null),e(Oo,PWo),e(Oo,cd),e(cd,IWo),e(cd,DV),e(DV,qWo),e(cd,NWo),e(cd,GV),e(GV,jWo),e(cd,DWo),e(Oo,GWo),e(Oo,PL),e(PL,OWo),e(PL,Jhe),e(Jhe,VWo),e(PL,XWo),e(Oo,zWo),e(Oo,ut),M(IL,ut,null),e(ut,QWo),e(ut,Yhe),e(Yhe,WWo),e(ut,HWo),e(ut,fd),e(fd,UWo),e(fd,Khe),e(Khe,JWo),e(fd,YWo),e(fd,OV),e(OV,KWo),e(fd,ZWo),e(ut,eHo),M(lF,ut,null),e(Oo,oHo),e(Oo,co),M(qL,co,null),e(co,rHo),e(co,Zhe),e(Zhe,tHo),e(co,aHo),e(co,Da),e(Da,nHo),e(Da,epe),e(epe,sHo),e(Da,lHo),e(Da,ope),e(ope,iHo),e(Da,dHo),e(Da,rpe),e(rpe,cHo),e(Da,fHo),e(co,mHo),e(co,Ga),e(Ga,iF),e(iF,tpe),e(tpe,gHo),e(iF,hHo),e(iF,VV),e(VV,pHo),e(iF,uHo),e(Ga,_Ho),e(Ga,dF),e(dF,ape),e(ape,bHo),e(dF,vHo),e(dF,XV),e(XV,FHo),e(dF,THo),e(Ga,MHo),e(Ga,cF),e(cF,npe),e(npe,EHo),e(cF,CHo),e(cF,zV),e(zV,wHo),e(cF,AHo),e(Ga,yHo),e(Ga,fF),e(fF,spe),e(spe,LHo),e(fF,xHo),e(fF,QV),e(QV,$Ho),e(fF,kHo),e(co,SHo),e(co,mF),e(mF,RHo),e(mF,lpe),e(lpe,BHo),e(mF,PHo),e(mF,ipe),e(ipe,IHo),e(co,qHo),M(gF,co,null),b(f,iIe,_),b(f,md,_),e(md,hF),e(hF,dpe),M(NL,dpe,null),e(md,NHo),e(md,cpe),e(cpe,jHo),b(f,dIe,_),b(f,Vo,_),M(jL,Vo,null),e(Vo,DHo),e(Vo,gd),e(gd,GHo),e(gd,WV),e(WV,OHo),e(gd,VHo),e(gd,HV),e(HV,XHo),e(gd,zHo),e(Vo,QHo),e(Vo,DL),e(DL,WHo),e(DL,fpe),e(fpe,HHo),e(DL,UHo),e(Vo,JHo),e(Vo,_t),M(GL,_t,null),e(_t,YHo),e(_t,mpe),e(mpe,KHo),e(_t,ZHo),e(_t,hd),e(hd,eUo),e(hd,gpe),e(gpe,oUo),e(hd,rUo),e(hd,UV),e(UV,tUo),e(hd,aUo),e(_t,nUo),M(pF,_t,null),e(Vo,sUo),e(Vo,fo),M(OL,fo,null),e(fo,lUo),e(fo,hpe),e(hpe,iUo),e(fo,dUo),e(fo,Oa),e(Oa,cUo),e(Oa,ppe),e(ppe,fUo),e(Oa,mUo),e(Oa,upe),e(upe,gUo),e(Oa,hUo),e(Oa,_pe),e(_pe,pUo),e(Oa,uUo),e(fo,_Uo),e(fo,ke),e(ke,uF),e(uF,bpe),e(bpe,bUo),e(uF,vUo),e(uF,JV),e(JV,FUo),e(uF,TUo),e(ke,MUo),e(ke,_F),e(_F,vpe),e(vpe,EUo),e(_F,CUo),e(_F,YV),e(YV,wUo),e(_F,AUo),e(ke,yUo),e(ke,bF),e(bF,Fpe),e(Fpe,LUo),e(bF,xUo),e(bF,KV),e(KV,$Uo),e(bF,kUo),e(ke,SUo),e(ke,vF),e(vF,Tpe),e(Tpe,RUo),e(vF,BUo),e(vF,ZV),e(ZV,PUo),e(vF,IUo),e(ke,qUo),e(ke,FF),e(FF,Mpe),e(Mpe,NUo),e(FF,jUo),e(FF,eX),e(eX,DUo),e(FF,GUo),e(ke,OUo),e(ke,TF),e(TF,Epe),e(Epe,VUo),e(TF,XUo),e(TF,oX),e(oX,zUo),e(TF,QUo),e(ke,WUo),e(ke,MF),e(MF,Cpe),e(Cpe,HUo),e(MF,UUo),e(MF,rX),e(rX,JUo),e(MF,YUo),e(ke,KUo),e(ke,EF),e(EF,wpe),e(wpe,ZUo),e(EF,eJo),e(EF,tX),e(tX,oJo),e(EF,rJo),e(ke,tJo),e(ke,CF),e(CF,Ape),e(Ape,aJo),e(CF,nJo),e(CF,aX),e(aX,sJo),e(CF,lJo),e(fo,iJo),e(fo,wF),e(wF,dJo),e(wF,ype),e(ype,cJo),e(wF,fJo),e(wF,Lpe),e(Lpe,mJo),e(fo,gJo),M(AF,fo,null),b(f,cIe,_),b(f,pd,_),e(pd,yF),e(yF,xpe),M(VL,xpe,null),e(pd,hJo),e(pd,$pe),e($pe,pJo),b(f,fIe,_),b(f,Xo,_),M(XL,Xo,null),e(Xo,uJo),e(Xo,ud),e(ud,_Jo),e(ud,nX),e(nX,bJo),e(ud,vJo),e(ud,sX),e(sX,FJo),e(ud,TJo),e(Xo,MJo),e(Xo,zL),e(zL,EJo),e(zL,kpe),e(kpe,CJo),e(zL,wJo),e(Xo,AJo),e(Xo,bt),M(QL,bt,null),e(bt,yJo),e(bt,Spe),e(Spe,LJo),e(bt,xJo),e(bt,_d),e(_d,$Jo),e(_d,Rpe),e(Rpe,kJo),e(_d,SJo),e(_d,lX),e(lX,RJo),e(_d,BJo),e(bt,PJo),M(LF,bt,null),e(Xo,IJo),e(Xo,mo),M(WL,mo,null),e(mo,qJo),e(mo,Bpe),e(Bpe,NJo),e(mo,jJo),e(mo,Va),e(Va,DJo),e(Va,Ppe),e(Ppe,GJo),e(Va,OJo),e(Va,Ipe),e(Ipe,VJo),e(Va,XJo),e(Va,qpe),e(qpe,zJo),e(Va,QJo),e(mo,WJo),e(mo,HL),e(HL,xF),e(xF,Npe),e(Npe,HJo),e(xF,UJo),e(xF,iX),e(iX,JJo),e(xF,YJo),e(HL,KJo),e(HL,$F),e($F,jpe),e(jpe,ZJo),e($F,eYo),e($F,dX),e(dX,oYo),e($F,rYo),e(mo,tYo),e(mo,kF),e(kF,aYo),e(kF,Dpe),e(Dpe,nYo),e(kF,sYo),e(kF,Gpe),e(Gpe,lYo),e(mo,iYo),M(SF,mo,null),b(f,mIe,_),b(f,bd,_),e(bd,RF),e(RF,Ope),M(UL,Ope,null),e(bd,dYo),e(bd,Vpe),e(Vpe,cYo),b(f,gIe,_),b(f,zo,_),M(JL,zo,null),e(zo,fYo),e(zo,vd),e(vd,mYo),e(vd,cX),e(cX,gYo),e(vd,hYo),e(vd,fX),e(fX,pYo),e(vd,uYo),e(zo,_Yo),e(zo,YL),e(YL,bYo),e(YL,Xpe),e(Xpe,vYo),e(YL,FYo),e(zo,TYo),e(zo,vt),M(KL,vt,null),e(vt,MYo),e(vt,zpe),e(zpe,EYo),e(vt,CYo),e(vt,Fd),e(Fd,wYo),e(Fd,Qpe),e(Qpe,AYo),e(Fd,yYo),e(Fd,mX),e(mX,LYo),e(Fd,xYo),e(vt,$Yo),M(BF,vt,null),e(zo,kYo),e(zo,go),M(ZL,go,null),e(go,SYo),e(go,Wpe),e(Wpe,RYo),e(go,BYo),e(go,Xa),e(Xa,PYo),e(Xa,Hpe),e(Hpe,IYo),e(Xa,qYo),e(Xa,Upe),e(Upe,NYo),e(Xa,jYo),e(Xa,Jpe),e(Jpe,DYo),e(Xa,GYo),e(go,OYo),e(go,za),e(za,PF),e(PF,Ype),e(Ype,VYo),e(PF,XYo),e(PF,gX),e(gX,zYo),e(PF,QYo),e(za,WYo),e(za,IF),e(IF,Kpe),e(Kpe,HYo),e(IF,UYo),e(IF,hX),e(hX,JYo),e(IF,YYo),e(za,KYo),e(za,qF),e(qF,Zpe),e(Zpe,ZYo),e(qF,eKo),e(qF,pX),e(pX,oKo),e(qF,rKo),e(za,tKo),e(za,NF),e(NF,eue),e(eue,aKo),e(NF,nKo),e(NF,uX),e(uX,sKo),e(NF,lKo),e(go,iKo),e(go,jF),e(jF,dKo),e(jF,oue),e(oue,cKo),e(jF,fKo),e(jF,rue),e(rue,mKo),e(go,gKo),M(DF,go,null),b(f,hIe,_),b(f,Td,_),e(Td,GF),e(GF,tue),M(e8,tue,null),e(Td,hKo),e(Td,aue),e(aue,pKo),b(f,pIe,_),b(f,Qo,_),M(o8,Qo,null),e(Qo,uKo),e(Qo,Md),e(Md,_Ko),e(Md,_X),e(_X,bKo),e(Md,vKo),e(Md,bX),e(bX,FKo),e(Md,TKo),e(Qo,MKo),e(Qo,r8),e(r8,EKo),e(r8,nue),e(nue,CKo),e(r8,wKo),e(Qo,AKo),e(Qo,Ft),M(t8,Ft,null),e(Ft,yKo),e(Ft,sue),e(sue,LKo),e(Ft,xKo),e(Ft,Ed),e(Ed,$Ko),e(Ed,lue),e(lue,kKo),e(Ed,SKo),e(Ed,vX),e(vX,RKo),e(Ed,BKo),e(Ft,PKo),M(OF,Ft,null),e(Qo,IKo),e(Qo,ho),M(a8,ho,null),e(ho,qKo),e(ho,iue),e(iue,NKo),e(ho,jKo),e(ho,Qa),e(Qa,DKo),e(Qa,due),e(due,GKo),e(Qa,OKo),e(Qa,cue),e(cue,VKo),e(Qa,XKo),e(Qa,fue),e(fue,zKo),e(Qa,QKo),e(ho,WKo),e(ho,Cd),e(Cd,VF),e(VF,mue),e(mue,HKo),e(VF,UKo),e(VF,FX),e(FX,JKo),e(VF,YKo),e(Cd,KKo),e(Cd,XF),e(XF,gue),e(gue,ZKo),e(XF,eZo),e(XF,TX),e(TX,oZo),e(XF,rZo),e(Cd,tZo),e(Cd,zF),e(zF,hue),e(hue,aZo),e(zF,nZo),e(zF,MX),e(MX,sZo),e(zF,lZo),e(ho,iZo),e(ho,QF),e(QF,dZo),e(QF,pue),e(pue,cZo),e(QF,fZo),e(QF,uue),e(uue,mZo),e(ho,gZo),M(WF,ho,null),b(f,uIe,_),b(f,wd,_),e(wd,HF),e(HF,_ue),M(n8,_ue,null),e(wd,hZo),e(wd,bue),e(bue,pZo),b(f,_Ie,_),b(f,Wo,_),M(s8,Wo,null),e(Wo,uZo),e(Wo,Ad),e(Ad,_Zo),e(Ad,EX),e(EX,bZo),e(Ad,vZo),e(Ad,CX),e(CX,FZo),e(Ad,TZo),e(Wo,MZo),e(Wo,l8),e(l8,EZo),e(l8,vue),e(vue,CZo),e(l8,wZo),e(Wo,AZo),e(Wo,Tt),M(i8,Tt,null),e(Tt,yZo),e(Tt,Fue),e(Fue,LZo),e(Tt,xZo),e(Tt,yd),e(yd,$Zo),e(yd,Tue),e(Tue,kZo),e(yd,SZo),e(yd,wX),e(wX,RZo),e(yd,BZo),e(Tt,PZo),M(UF,Tt,null),e(Wo,IZo),e(Wo,po),M(d8,po,null),e(po,qZo),e(po,Mue),e(Mue,NZo),e(po,jZo),e(po,Wa),e(Wa,DZo),e(Wa,Eue),e(Eue,GZo),e(Wa,OZo),e(Wa,Cue),e(Cue,VZo),e(Wa,XZo),e(Wa,wue),e(wue,zZo),e(Wa,QZo),e(po,WZo),e(po,c8),e(c8,JF),e(JF,Aue),e(Aue,HZo),e(JF,UZo),e(JF,AX),e(AX,JZo),e(JF,YZo),e(c8,KZo),e(c8,YF),e(YF,yue),e(yue,ZZo),e(YF,eer),e(YF,yX),e(yX,oer),e(YF,rer),e(po,ter),e(po,KF),e(KF,aer),e(KF,Lue),e(Lue,ner),e(KF,ser),e(KF,xue),e(xue,ler),e(po,ier),M(ZF,po,null),b(f,bIe,_),b(f,Ld,_),e(Ld,e0),e(e0,$ue),M(f8,$ue,null),e(Ld,der),e(Ld,kue),e(kue,cer),b(f,vIe,_),b(f,Ho,_),M(m8,Ho,null),e(Ho,fer),e(Ho,xd),e(xd,mer),e(xd,LX),e(LX,ger),e(xd,her),e(xd,xX),e(xX,per),e(xd,uer),e(Ho,_er),e(Ho,g8),e(g8,ber),e(g8,Sue),e(Sue,ver),e(g8,Fer),e(Ho,Ter),e(Ho,Mt),M(h8,Mt,null),e(Mt,Mer),e(Mt,Rue),e(Rue,Eer),e(Mt,Cer),e(Mt,$d),e($d,wer),e($d,Bue),e(Bue,Aer),e($d,yer),e($d,$X),e($X,Ler),e($d,xer),e(Mt,$er),M(o0,Mt,null),e(Ho,ker),e(Ho,uo),M(p8,uo,null),e(uo,Ser),e(uo,Pue),e(Pue,Rer),e(uo,Ber),e(uo,Ha),e(Ha,Per),e(Ha,Iue),e(Iue,Ier),e(Ha,qer),e(Ha,que),e(que,Ner),e(Ha,jer),e(Ha,Nue),e(Nue,Der),e(Ha,Ger),e(uo,Oer),e(uo,jue),e(jue,r0),e(r0,Due),e(Due,Ver),e(r0,Xer),e(r0,kX),e(kX,zer),e(r0,Qer),e(uo,Wer),e(uo,t0),e(t0,Her),e(t0,Gue),e(Gue,Uer),e(t0,Jer),e(t0,Oue),e(Oue,Yer),e(uo,Ker),M(a0,uo,null),b(f,FIe,_),b(f,kd,_),e(kd,n0),e(n0,Vue),M(u8,Vue,null),e(kd,Zer),e(kd,Xue),e(Xue,eor),b(f,TIe,_),b(f,Uo,_),M(_8,Uo,null),e(Uo,oor),e(Uo,Sd),e(Sd,ror),e(Sd,SX),e(SX,tor),e(Sd,aor),e(Sd,RX),e(RX,nor),e(Sd,sor),e(Uo,lor),e(Uo,b8),e(b8,ior),e(b8,zue),e(zue,dor),e(b8,cor),e(Uo,mor),e(Uo,Et),M(v8,Et,null),e(Et,gor),e(Et,Que),e(Que,hor),e(Et,por),e(Et,Rd),e(Rd,uor),e(Rd,Wue),e(Wue,_or),e(Rd,bor),e(Rd,BX),e(BX,vor),e(Rd,For),e(Et,Tor),M(s0,Et,null),e(Uo,Mor),e(Uo,_o),M(F8,_o,null),e(_o,Eor),e(_o,Hue),e(Hue,Cor),e(_o,wor),e(_o,Ua),e(Ua,Aor),e(Ua,Uue),e(Uue,yor),e(Ua,Lor),e(Ua,Jue),e(Jue,xor),e(Ua,$or),e(Ua,Yue),e(Yue,kor),e(Ua,Sor),e(_o,Ror),e(_o,Ja),e(Ja,l0),e(l0,Kue),e(Kue,Bor),e(l0,Por),e(l0,PX),e(PX,Ior),e(l0,qor),e(Ja,Nor),e(Ja,i0),e(i0,Zue),e(Zue,jor),e(i0,Dor),e(i0,IX),e(IX,Gor),e(i0,Oor),e(Ja,Vor),e(Ja,d0),e(d0,e_e),e(e_e,Xor),e(d0,zor),e(d0,qX),e(qX,Qor),e(d0,Wor),e(Ja,Hor),e(Ja,c0),e(c0,o_e),e(o_e,Uor),e(c0,Jor),e(c0,NX),e(NX,Yor),e(c0,Kor),e(_o,Zor),e(_o,f0),e(f0,err),e(f0,r_e),e(r_e,orr),e(f0,rrr),e(f0,t_e),e(t_e,trr),e(_o,arr),M(m0,_o,null),b(f,MIe,_),b(f,Bd,_),e(Bd,g0),e(g0,a_e),M(T8,a_e,null),e(Bd,nrr),e(Bd,n_e),e(n_e,srr),b(f,EIe,_),b(f,Jo,_),M(M8,Jo,null),e(Jo,lrr),e(Jo,Pd),e(Pd,irr),e(Pd,jX),e(jX,drr),e(Pd,crr),e(Pd,DX),e(DX,frr),e(Pd,mrr),e(Jo,grr),e(Jo,E8),e(E8,hrr),e(E8,s_e),e(s_e,prr),e(E8,urr),e(Jo,_rr),e(Jo,Ct),M(C8,Ct,null),e(Ct,brr),e(Ct,l_e),e(l_e,vrr),e(Ct,Frr),e(Ct,Id),e(Id,Trr),e(Id,i_e),e(i_e,Mrr),e(Id,Err),e(Id,GX),e(GX,Crr),e(Id,wrr),e(Ct,Arr),M(h0,Ct,null),e(Jo,yrr),e(Jo,bo),M(w8,bo,null),e(bo,Lrr),e(bo,d_e),e(d_e,xrr),e(bo,$rr),e(bo,Ya),e(Ya,krr),e(Ya,c_e),e(c_e,Srr),e(Ya,Rrr),e(Ya,f_e),e(f_e,Brr),e(Ya,Prr),e(Ya,m_e),e(m_e,Irr),e(Ya,qrr),e(bo,Nrr),e(bo,g_e),e(g_e,p0),e(p0,h_e),e(h_e,jrr),e(p0,Drr),e(p0,OX),e(OX,Grr),e(p0,Orr),e(bo,Vrr),e(bo,u0),e(u0,Xrr),e(u0,p_e),e(p_e,zrr),e(u0,Qrr),e(u0,u_e),e(u_e,Wrr),e(bo,Hrr),M(_0,bo,null),b(f,CIe,_),b(f,qd,_),e(qd,b0),e(b0,__e),M(A8,__e,null),e(qd,Urr),e(qd,b_e),e(b_e,Jrr),b(f,wIe,_),b(f,Yo,_),M(y8,Yo,null),e(Yo,Yrr),e(Yo,Nd),e(Nd,Krr),e(Nd,VX),e(VX,Zrr),e(Nd,etr),e(Nd,XX),e(XX,otr),e(Nd,rtr),e(Yo,ttr),e(Yo,L8),e(L8,atr),e(L8,v_e),e(v_e,ntr),e(L8,str),e(Yo,ltr),e(Yo,wt),M(x8,wt,null),e(wt,itr),e(wt,F_e),e(F_e,dtr),e(wt,ctr),e(wt,jd),e(jd,ftr),e(jd,T_e),e(T_e,mtr),e(jd,gtr),e(jd,zX),e(zX,htr),e(jd,ptr),e(wt,utr),M(v0,wt,null),e(Yo,_tr),e(Yo,wr),M($8,wr,null),e(wr,btr),e(wr,M_e),e(M_e,vtr),e(wr,Ftr),e(wr,Ka),e(Ka,Ttr),e(Ka,E_e),e(E_e,Mtr),e(Ka,Etr),e(Ka,C_e),e(C_e,Ctr),e(Ka,wtr),e(Ka,w_e),e(w_e,Atr),e(Ka,ytr),e(wr,Ltr),e(wr,j),e(j,F0),e(F0,A_e),e(A_e,xtr),e(F0,$tr),e(F0,QX),e(QX,ktr),e(F0,Str),e(j,Rtr),e(j,T0),e(T0,y_e),e(y_e,Btr),e(T0,Ptr),e(T0,WX),e(WX,Itr),e(T0,qtr),e(j,Ntr),e(j,M0),e(M0,L_e),e(L_e,jtr),e(M0,Dtr),e(M0,HX),e(HX,Gtr),e(M0,Otr),e(j,Vtr),e(j,E0),e(E0,x_e),e(x_e,Xtr),e(E0,ztr),e(E0,UX),e(UX,Qtr),e(E0,Wtr),e(j,Htr),e(j,C0),e(C0,$_e),e($_e,Utr),e(C0,Jtr),e(C0,JX),e(JX,Ytr),e(C0,Ktr),e(j,Ztr),e(j,w0),e(w0,k_e),e(k_e,ear),e(w0,oar),e(w0,YX),e(YX,rar),e(w0,tar),e(j,aar),e(j,A0),e(A0,S_e),e(S_e,nar),e(A0,sar),e(A0,KX),e(KX,lar),e(A0,iar),e(j,dar),e(j,y0),e(y0,R_e),e(R_e,car),e(y0,far),e(y0,ZX),e(ZX,mar),e(y0,gar),e(j,har),e(j,L0),e(L0,B_e),e(B_e,par),e(L0,uar),e(L0,ez),e(ez,_ar),e(L0,bar),e(j,Far),e(j,x0),e(x0,P_e),e(P_e,Tar),e(x0,Mar),e(x0,oz),e(oz,Ear),e(x0,Car),e(j,war),e(j,$0),e($0,I_e),e(I_e,Aar),e($0,yar),e($0,rz),e(rz,Lar),e($0,xar),e(j,$ar),e(j,k0),e(k0,q_e),e(q_e,kar),e(k0,Sar),e(k0,tz),e(tz,Rar),e(k0,Bar),e(j,Par),e(j,S0),e(S0,N_e),e(N_e,Iar),e(S0,qar),e(S0,az),e(az,Nar),e(S0,jar),e(j,Dar),e(j,R0),e(R0,j_e),e(j_e,Gar),e(R0,Oar),e(R0,nz),e(nz,Var),e(R0,Xar),e(j,zar),e(j,B0),e(B0,D_e),e(D_e,Qar),e(B0,War),e(B0,sz),e(sz,Har),e(B0,Uar),e(j,Jar),e(j,P0),e(P0,G_e),e(G_e,Yar),e(P0,Kar),e(P0,lz),e(lz,Zar),e(P0,enr),e(j,onr),e(j,I0),e(I0,O_e),e(O_e,rnr),e(I0,tnr),e(I0,iz),e(iz,anr),e(I0,nnr),e(j,snr),e(j,Bs),e(Bs,V_e),e(V_e,lnr),e(Bs,inr),e(Bs,dz),e(dz,dnr),e(Bs,cnr),e(Bs,cz),e(cz,fnr),e(Bs,mnr),e(j,gnr),e(j,q0),e(q0,X_e),e(X_e,hnr),e(q0,pnr),e(q0,fz),e(fz,unr),e(q0,_nr),e(j,bnr),e(j,N0),e(N0,z_e),e(z_e,vnr),e(N0,Fnr),e(N0,mz),e(mz,Tnr),e(N0,Mnr),e(j,Enr),e(j,j0),e(j0,Q_e),e(Q_e,Cnr),e(j0,wnr),e(j0,gz),e(gz,Anr),e(j0,ynr),e(j,Lnr),e(j,D0),e(D0,W_e),e(W_e,xnr),e(D0,$nr),e(D0,hz),e(hz,knr),e(D0,Snr),e(j,Rnr),e(j,G0),e(G0,H_e),e(H_e,Bnr),e(G0,Pnr),e(G0,pz),e(pz,Inr),e(G0,qnr),e(j,Nnr),e(j,O0),e(O0,U_e),e(U_e,jnr),e(O0,Dnr),e(O0,uz),e(uz,Gnr),e(O0,Onr),e(j,Vnr),e(j,V0),e(V0,J_e),e(J_e,Xnr),e(V0,znr),e(V0,_z),e(_z,Qnr),e(V0,Wnr),e(j,Hnr),e(j,X0),e(X0,Y_e),e(Y_e,Unr),e(X0,Jnr),e(X0,bz),e(bz,Ynr),e(X0,Knr),e(j,Znr),e(j,z0),e(z0,K_e),e(K_e,esr),e(z0,osr),e(z0,vz),e(vz,rsr),e(z0,tsr),e(j,asr),e(j,Q0),e(Q0,Z_e),e(Z_e,nsr),e(Q0,ssr),e(Q0,Fz),e(Fz,lsr),e(Q0,isr),e(j,dsr),e(j,W0),e(W0,e2e),e(e2e,csr),e(W0,fsr),e(W0,Tz),e(Tz,msr),e(W0,gsr),e(j,hsr),e(j,H0),e(H0,o2e),e(o2e,psr),e(H0,usr),e(H0,Mz),e(Mz,_sr),e(H0,bsr),e(j,vsr),e(j,U0),e(U0,r2e),e(r2e,Fsr),e(U0,Tsr),e(U0,Ez),e(Ez,Msr),e(U0,Esr),e(j,Csr),e(j,J0),e(J0,t2e),e(t2e,wsr),e(J0,Asr),e(J0,Cz),e(Cz,ysr),e(J0,Lsr),e(j,xsr),e(j,Y0),e(Y0,a2e),e(a2e,$sr),e(Y0,ksr),e(Y0,wz),e(wz,Ssr),e(Y0,Rsr),e(j,Bsr),e(j,K0),e(K0,n2e),e(n2e,Psr),e(K0,Isr),e(K0,Az),e(Az,qsr),e(K0,Nsr),e(j,jsr),e(j,Z0),e(Z0,s2e),e(s2e,Dsr),e(Z0,Gsr),e(Z0,yz),e(yz,Osr),e(Z0,Vsr),e(j,Xsr),e(j,e6),e(e6,l2e),e(l2e,zsr),e(e6,Qsr),e(e6,Lz),e(Lz,Wsr),e(e6,Hsr),e(j,Usr),e(j,o6),e(o6,i2e),e(i2e,Jsr),e(o6,Ysr),e(o6,xz),e(xz,Ksr),e(o6,Zsr),e(j,elr),e(j,r6),e(r6,d2e),e(d2e,olr),e(r6,rlr),e(r6,$z),e($z,tlr),e(r6,alr),e(j,nlr),e(j,t6),e(t6,c2e),e(c2e,slr),e(t6,llr),e(t6,kz),e(kz,ilr),e(t6,dlr),e(j,clr),e(j,a6),e(a6,f2e),e(f2e,flr),e(a6,mlr),e(a6,Sz),e(Sz,glr),e(a6,hlr),e(j,plr),e(j,n6),e(n6,m2e),e(m2e,ulr),e(n6,_lr),e(n6,Rz),e(Rz,blr),e(n6,vlr),e(j,Flr),e(j,s6),e(s6,g2e),e(g2e,Tlr),e(s6,Mlr),e(s6,Bz),e(Bz,Elr),e(s6,Clr),e(j,wlr),e(j,l6),e(l6,h2e),e(h2e,Alr),e(l6,ylr),e(l6,Pz),e(Pz,Llr),e(l6,xlr),e(j,$lr),e(j,i6),e(i6,p2e),e(p2e,klr),e(i6,Slr),e(i6,Iz),e(Iz,Rlr),e(i6,Blr),e(j,Plr),e(j,d6),e(d6,u2e),e(u2e,Ilr),e(d6,qlr),e(d6,qz),e(qz,Nlr),e(d6,jlr),e(wr,Dlr),M(c6,wr,null),b(f,AIe,_),b(f,Dd,_),e(Dd,f6),e(f6,_2e),M(k8,_2e,null),e(Dd,Glr),e(Dd,b2e),e(b2e,Olr),b(f,yIe,_),b(f,Ko,_),M(S8,Ko,null),e(Ko,Vlr),e(Ko,Gd),e(Gd,Xlr),e(Gd,Nz),e(Nz,zlr),e(Gd,Qlr),e(Gd,jz),e(jz,Wlr),e(Gd,Hlr),e(Ko,Ulr),e(Ko,R8),e(R8,Jlr),e(R8,v2e),e(v2e,Ylr),e(R8,Klr),e(Ko,Zlr),e(Ko,At),M(B8,At,null),e(At,eir),e(At,F2e),e(F2e,oir),e(At,rir),e(At,Od),e(Od,tir),e(Od,T2e),e(T2e,air),e(Od,nir),e(Od,Dz),e(Dz,sir),e(Od,lir),e(At,iir),M(m6,At,null),e(Ko,dir),e(Ko,Ar),M(P8,Ar,null),e(Ar,cir),e(Ar,M2e),e(M2e,fir),e(Ar,mir),e(Ar,Za),e(Za,gir),e(Za,E2e),e(E2e,hir),e(Za,pir),e(Za,C2e),e(C2e,uir),e(Za,_ir),e(Za,w2e),e(w2e,bir),e(Za,vir),e(Ar,Fir),e(Ar,se),e(se,g6),e(g6,A2e),e(A2e,Tir),e(g6,Mir),e(g6,Gz),e(Gz,Eir),e(g6,Cir),e(se,wir),e(se,h6),e(h6,y2e),e(y2e,Air),e(h6,yir),e(h6,Oz),e(Oz,Lir),e(h6,xir),e(se,$ir),e(se,p6),e(p6,L2e),e(L2e,kir),e(p6,Sir),e(p6,Vz),e(Vz,Rir),e(p6,Bir),e(se,Pir),e(se,u6),e(u6,x2e),e(x2e,Iir),e(u6,qir),e(u6,Xz),e(Xz,Nir),e(u6,jir),e(se,Dir),e(se,_6),e(_6,$2e),e($2e,Gir),e(_6,Oir),e(_6,zz),e(zz,Vir),e(_6,Xir),e(se,zir),e(se,b6),e(b6,k2e),e(k2e,Qir),e(b6,Wir),e(b6,Qz),e(Qz,Hir),e(b6,Uir),e(se,Jir),e(se,v6),e(v6,S2e),e(S2e,Yir),e(v6,Kir),e(v6,Wz),e(Wz,Zir),e(v6,edr),e(se,odr),e(se,F6),e(F6,R2e),e(R2e,rdr),e(F6,tdr),e(F6,Hz),e(Hz,adr),e(F6,ndr),e(se,sdr),e(se,T6),e(T6,B2e),e(B2e,ldr),e(T6,idr),e(T6,Uz),e(Uz,ddr),e(T6,cdr),e(se,fdr),e(se,M6),e(M6,P2e),e(P2e,mdr),e(M6,gdr),e(M6,Jz),e(Jz,hdr),e(M6,pdr),e(se,udr),e(se,E6),e(E6,I2e),e(I2e,_dr),e(E6,bdr),e(E6,Yz),e(Yz,vdr),e(E6,Fdr),e(se,Tdr),e(se,C6),e(C6,q2e),e(q2e,Mdr),e(C6,Edr),e(C6,Kz),e(Kz,Cdr),e(C6,wdr),e(se,Adr),e(se,w6),e(w6,N2e),e(N2e,ydr),e(w6,Ldr),e(w6,Zz),e(Zz,xdr),e(w6,$dr),e(se,kdr),e(se,A6),e(A6,j2e),e(j2e,Sdr),e(A6,Rdr),e(A6,eQ),e(eQ,Bdr),e(A6,Pdr),e(se,Idr),e(se,y6),e(y6,D2e),e(D2e,qdr),e(y6,Ndr),e(y6,oQ),e(oQ,jdr),e(y6,Ddr),e(se,Gdr),e(se,L6),e(L6,G2e),e(G2e,Odr),e(L6,Vdr),e(L6,rQ),e(rQ,Xdr),e(L6,zdr),e(se,Qdr),e(se,x6),e(x6,O2e),e(O2e,Wdr),e(x6,Hdr),e(x6,tQ),e(tQ,Udr),e(x6,Jdr),e(se,Ydr),e(se,$6),e($6,V2e),e(V2e,Kdr),e($6,Zdr),e($6,aQ),e(aQ,ecr),e($6,ocr),e(se,rcr),e(se,k6),e(k6,X2e),e(X2e,tcr),e(k6,acr),e(k6,nQ),e(nQ,ncr),e(k6,scr),e(se,lcr),e(se,S6),e(S6,z2e),e(z2e,icr),e(S6,dcr),e(S6,sQ),e(sQ,ccr),e(S6,fcr),e(se,mcr),e(se,R6),e(R6,Q2e),e(Q2e,gcr),e(R6,hcr),e(R6,lQ),e(lQ,pcr),e(R6,ucr),e(se,_cr),e(se,B6),e(B6,W2e),e(W2e,bcr),e(B6,vcr),e(B6,iQ),e(iQ,Fcr),e(B6,Tcr),e(se,Mcr),e(se,P6),e(P6,H2e),e(H2e,Ecr),e(P6,Ccr),e(P6,dQ),e(dQ,wcr),e(P6,Acr),e(Ar,ycr),M(I6,Ar,null),b(f,LIe,_),b(f,Vd,_),e(Vd,q6),e(q6,U2e),M(I8,U2e,null),e(Vd,Lcr),e(Vd,J2e),e(J2e,xcr),b(f,xIe,_),b(f,Zo,_),M(q8,Zo,null),e(Zo,$cr),e(Zo,Xd),e(Xd,kcr),e(Xd,cQ),e(cQ,Scr),e(Xd,Rcr),e(Xd,fQ),e(fQ,Bcr),e(Xd,Pcr),e(Zo,Icr),e(Zo,N8),e(N8,qcr),e(N8,Y2e),e(Y2e,Ncr),e(N8,jcr),e(Zo,Dcr),e(Zo,yt),M(j8,yt,null),e(yt,Gcr),e(yt,K2e),e(K2e,Ocr),e(yt,Vcr),e(yt,zd),e(zd,Xcr),e(zd,Z2e),e(Z2e,zcr),e(zd,Qcr),e(zd,mQ),e(mQ,Wcr),e(zd,Hcr),e(yt,Ucr),M(N6,yt,null),e(Zo,Jcr),e(Zo,yr),M(D8,yr,null),e(yr,Ycr),e(yr,e1e),e(e1e,Kcr),e(yr,Zcr),e(yr,en),e(en,efr),e(en,o1e),e(o1e,ofr),e(en,rfr),e(en,r1e),e(r1e,tfr),e(en,afr),e(en,t1e),e(t1e,nfr),e(en,sfr),e(yr,lfr),e(yr,Te),e(Te,j6),e(j6,a1e),e(a1e,ifr),e(j6,dfr),e(j6,gQ),e(gQ,cfr),e(j6,ffr),e(Te,mfr),e(Te,D6),e(D6,n1e),e(n1e,gfr),e(D6,hfr),e(D6,hQ),e(hQ,pfr),e(D6,ufr),e(Te,_fr),e(Te,G6),e(G6,s1e),e(s1e,bfr),e(G6,vfr),e(G6,pQ),e(pQ,Ffr),e(G6,Tfr),e(Te,Mfr),e(Te,O6),e(O6,l1e),e(l1e,Efr),e(O6,Cfr),e(O6,uQ),e(uQ,wfr),e(O6,Afr),e(Te,yfr),e(Te,V6),e(V6,i1e),e(i1e,Lfr),e(V6,xfr),e(V6,_Q),e(_Q,$fr),e(V6,kfr),e(Te,Sfr),e(Te,X6),e(X6,d1e),e(d1e,Rfr),e(X6,Bfr),e(X6,bQ),e(bQ,Pfr),e(X6,Ifr),e(Te,qfr),e(Te,z6),e(z6,c1e),e(c1e,Nfr),e(z6,jfr),e(z6,vQ),e(vQ,Dfr),e(z6,Gfr),e(Te,Ofr),e(Te,Q6),e(Q6,f1e),e(f1e,Vfr),e(Q6,Xfr),e(Q6,FQ),e(FQ,zfr),e(Q6,Qfr),e(Te,Wfr),e(Te,W6),e(W6,m1e),e(m1e,Hfr),e(W6,Ufr),e(W6,TQ),e(TQ,Jfr),e(W6,Yfr),e(Te,Kfr),e(Te,H6),e(H6,g1e),e(g1e,Zfr),e(H6,emr),e(H6,MQ),e(MQ,omr),e(H6,rmr),e(Te,tmr),e(Te,U6),e(U6,h1e),e(h1e,amr),e(U6,nmr),e(U6,EQ),e(EQ,smr),e(U6,lmr),e(Te,imr),e(Te,J6),e(J6,p1e),e(p1e,dmr),e(J6,cmr),e(J6,CQ),e(CQ,fmr),e(J6,mmr),e(yr,gmr),M(Y6,yr,null),b(f,$Ie,_),b(f,Qd,_),e(Qd,K6),e(K6,u1e),M(G8,u1e,null),e(Qd,hmr),e(Qd,_1e),e(_1e,pmr),b(f,kIe,_),b(f,er,_),M(O8,er,null),e(er,umr),e(er,Wd),e(Wd,_mr),e(Wd,wQ),e(wQ,bmr),e(Wd,vmr),e(Wd,AQ),e(AQ,Fmr),e(Wd,Tmr),e(er,Mmr),e(er,V8),e(V8,Emr),e(V8,b1e),e(b1e,Cmr),e(V8,wmr),e(er,Amr),e(er,Lt),M(X8,Lt,null),e(Lt,ymr),e(Lt,v1e),e(v1e,Lmr),e(Lt,xmr),e(Lt,Hd),e(Hd,$mr),e(Hd,F1e),e(F1e,kmr),e(Hd,Smr),e(Hd,yQ),e(yQ,Rmr),e(Hd,Bmr),e(Lt,Pmr),M(Z6,Lt,null),e(er,Imr),e(er,Lr),M(z8,Lr,null),e(Lr,qmr),e(Lr,T1e),e(T1e,Nmr),e(Lr,jmr),e(Lr,on),e(on,Dmr),e(on,M1e),e(M1e,Gmr),e(on,Omr),e(on,E1e),e(E1e,Vmr),e(on,Xmr),e(on,C1e),e(C1e,zmr),e(on,Qmr),e(Lr,Wmr),e(Lr,Ud),e(Ud,eT),e(eT,w1e),e(w1e,Hmr),e(eT,Umr),e(eT,LQ),e(LQ,Jmr),e(eT,Ymr),e(Ud,Kmr),e(Ud,oT),e(oT,A1e),e(A1e,Zmr),e(oT,egr),e(oT,xQ),e(xQ,ogr),e(oT,rgr),e(Ud,tgr),e(Ud,rT),e(rT,y1e),e(y1e,agr),e(rT,ngr),e(rT,$Q),e($Q,sgr),e(rT,lgr),e(Lr,igr),M(tT,Lr,null),b(f,SIe,_),b(f,Jd,_),e(Jd,aT),e(aT,L1e),M(Q8,L1e,null),e(Jd,dgr),e(Jd,x1e),e(x1e,cgr),b(f,RIe,_),b(f,or,_),M(W8,or,null),e(or,fgr),e(or,Yd),e(Yd,mgr),e(Yd,kQ),e(kQ,ggr),e(Yd,hgr),e(Yd,SQ),e(SQ,pgr),e(Yd,ugr),e(or,_gr),e(or,H8),e(H8,bgr),e(H8,$1e),e($1e,vgr),e(H8,Fgr),e(or,Tgr),e(or,xt),M(U8,xt,null),e(xt,Mgr),e(xt,k1e),e(k1e,Egr),e(xt,Cgr),e(xt,Kd),e(Kd,wgr),e(Kd,S1e),e(S1e,Agr),e(Kd,ygr),e(Kd,RQ),e(RQ,Lgr),e(Kd,xgr),e(xt,$gr),M(nT,xt,null),e(or,kgr),e(or,xr),M(J8,xr,null),e(xr,Sgr),e(xr,R1e),e(R1e,Rgr),e(xr,Bgr),e(xr,rn),e(rn,Pgr),e(rn,B1e),e(B1e,Igr),e(rn,qgr),e(rn,P1e),e(P1e,Ngr),e(rn,jgr),e(rn,I1e),e(I1e,Dgr),e(rn,Ggr),e(xr,Ogr),e(xr,ie),e(ie,sT),e(sT,q1e),e(q1e,Vgr),e(sT,Xgr),e(sT,BQ),e(BQ,zgr),e(sT,Qgr),e(ie,Wgr),e(ie,lT),e(lT,N1e),e(N1e,Hgr),e(lT,Ugr),e(lT,PQ),e(PQ,Jgr),e(lT,Ygr),e(ie,Kgr),e(ie,iT),e(iT,j1e),e(j1e,Zgr),e(iT,ehr),e(iT,IQ),e(IQ,ohr),e(iT,rhr),e(ie,thr),e(ie,dT),e(dT,D1e),e(D1e,ahr),e(dT,nhr),e(dT,qQ),e(qQ,shr),e(dT,lhr),e(ie,ihr),e(ie,cT),e(cT,G1e),e(G1e,dhr),e(cT,chr),e(cT,NQ),e(NQ,fhr),e(cT,mhr),e(ie,ghr),e(ie,fT),e(fT,O1e),e(O1e,hhr),e(fT,phr),e(fT,jQ),e(jQ,uhr),e(fT,_hr),e(ie,bhr),e(ie,mT),e(mT,V1e),e(V1e,vhr),e(mT,Fhr),e(mT,DQ),e(DQ,Thr),e(mT,Mhr),e(ie,Ehr),e(ie,gT),e(gT,X1e),e(X1e,Chr),e(gT,whr),e(gT,GQ),e(GQ,Ahr),e(gT,yhr),e(ie,Lhr),e(ie,hT),e(hT,z1e),e(z1e,xhr),e(hT,$hr),e(hT,OQ),e(OQ,khr),e(hT,Shr),e(ie,Rhr),e(ie,pT),e(pT,Q1e),e(Q1e,Bhr),e(pT,Phr),e(pT,VQ),e(VQ,Ihr),e(pT,qhr),e(ie,Nhr),e(ie,uT),e(uT,W1e),e(W1e,jhr),e(uT,Dhr),e(uT,XQ),e(XQ,Ghr),e(uT,Ohr),e(ie,Vhr),e(ie,_T),e(_T,H1e),e(H1e,Xhr),e(_T,zhr),e(_T,zQ),e(zQ,Qhr),e(_T,Whr),e(ie,Hhr),e(ie,bT),e(bT,U1e),e(U1e,Uhr),e(bT,Jhr),e(bT,QQ),e(QQ,Yhr),e(bT,Khr),e(ie,Zhr),e(ie,vT),e(vT,J1e),e(J1e,epr),e(vT,opr),e(vT,WQ),e(WQ,rpr),e(vT,tpr),e(ie,apr),e(ie,FT),e(FT,Y1e),e(Y1e,npr),e(FT,spr),e(FT,HQ),e(HQ,lpr),e(FT,ipr),e(ie,dpr),e(ie,TT),e(TT,K1e),e(K1e,cpr),e(TT,fpr),e(TT,UQ),e(UQ,mpr),e(TT,gpr),e(ie,hpr),e(ie,MT),e(MT,Z1e),e(Z1e,ppr),e(MT,upr),e(MT,JQ),e(JQ,_pr),e(MT,bpr),e(ie,vpr),e(ie,ET),e(ET,ebe),e(ebe,Fpr),e(ET,Tpr),e(ET,YQ),e(YQ,Mpr),e(ET,Epr),e(ie,Cpr),e(ie,CT),e(CT,obe),e(obe,wpr),e(CT,Apr),e(CT,KQ),e(KQ,ypr),e(CT,Lpr),e(ie,xpr),e(ie,wT),e(wT,rbe),e(rbe,$pr),e(wT,kpr),e(wT,ZQ),e(ZQ,Spr),e(wT,Rpr),e(xr,Bpr),M(AT,xr,null),b(f,BIe,_),b(f,Zd,_),e(Zd,yT),e(yT,tbe),M(Y8,tbe,null),e(Zd,Ppr),e(Zd,abe),e(abe,Ipr),b(f,PIe,_),b(f,rr,_),M(K8,rr,null),e(rr,qpr),e(rr,ec),e(ec,Npr),e(ec,eW),e(eW,jpr),e(ec,Dpr),e(ec,oW),e(oW,Gpr),e(ec,Opr),e(rr,Vpr),e(rr,Z8),e(Z8,Xpr),e(Z8,nbe),e(nbe,zpr),e(Z8,Qpr),e(rr,Wpr),e(rr,$t),M(ex,$t,null),e($t,Hpr),e($t,sbe),e(sbe,Upr),e($t,Jpr),e($t,oc),e(oc,Ypr),e(oc,lbe),e(lbe,Kpr),e(oc,Zpr),e(oc,rW),e(rW,eur),e(oc,our),e($t,rur),M(LT,$t,null),e(rr,tur),e(rr,$r),M(ox,$r,null),e($r,aur),e($r,ibe),e(ibe,nur),e($r,sur),e($r,tn),e(tn,lur),e(tn,dbe),e(dbe,iur),e(tn,dur),e(tn,cbe),e(cbe,cur),e(tn,fur),e(tn,fbe),e(fbe,mur),e(tn,gur),e($r,hur),e($r,ye),e(ye,xT),e(xT,mbe),e(mbe,pur),e(xT,uur),e(xT,tW),e(tW,_ur),e(xT,bur),e(ye,vur),e(ye,$T),e($T,gbe),e(gbe,Fur),e($T,Tur),e($T,aW),e(aW,Mur),e($T,Eur),e(ye,Cur),e(ye,kT),e(kT,hbe),e(hbe,wur),e(kT,Aur),e(kT,nW),e(nW,yur),e(kT,Lur),e(ye,xur),e(ye,ST),e(ST,pbe),e(pbe,$ur),e(ST,kur),e(ST,sW),e(sW,Sur),e(ST,Rur),e(ye,Bur),e(ye,RT),e(RT,ube),e(ube,Pur),e(RT,Iur),e(RT,lW),e(lW,qur),e(RT,Nur),e(ye,jur),e(ye,BT),e(BT,_be),e(_be,Dur),e(BT,Gur),e(BT,iW),e(iW,Our),e(BT,Vur),e(ye,Xur),e(ye,PT),e(PT,bbe),e(bbe,zur),e(PT,Qur),e(PT,dW),e(dW,Wur),e(PT,Hur),e(ye,Uur),e(ye,IT),e(IT,vbe),e(vbe,Jur),e(IT,Yur),e(IT,cW),e(cW,Kur),e(IT,Zur),e(ye,e_r),e(ye,qT),e(qT,Fbe),e(Fbe,o_r),e(qT,r_r),e(qT,fW),e(fW,t_r),e(qT,a_r),e(ye,n_r),e(ye,NT),e(NT,Tbe),e(Tbe,s_r),e(NT,l_r),e(NT,mW),e(mW,i_r),e(NT,d_r),e($r,c_r),M(jT,$r,null),b(f,IIe,_),b(f,rc,_),e(rc,DT),e(DT,Mbe),M(rx,Mbe,null),e(rc,f_r),e(rc,Ebe),e(Ebe,m_r),b(f,qIe,_),b(f,tr,_),M(tx,tr,null),e(tr,g_r),e(tr,tc),e(tc,h_r),e(tc,gW),e(gW,p_r),e(tc,u_r),e(tc,hW),e(hW,__r),e(tc,b_r),e(tr,v_r),e(tr,ax),e(ax,F_r),e(ax,Cbe),e(Cbe,T_r),e(ax,M_r),e(tr,E_r),e(tr,kt),M(nx,kt,null),e(kt,C_r),e(kt,wbe),e(wbe,w_r),e(kt,A_r),e(kt,ac),e(ac,y_r),e(ac,Abe),e(Abe,L_r),e(ac,x_r),e(ac,pW),e(pW,$_r),e(ac,k_r),e(kt,S_r),M(GT,kt,null),e(tr,R_r),e(tr,kr),M(sx,kr,null),e(kr,B_r),e(kr,ybe),e(ybe,P_r),e(kr,I_r),e(kr,an),e(an,q_r),e(an,Lbe),e(Lbe,N_r),e(an,j_r),e(an,xbe),e(xbe,D_r),e(an,G_r),e(an,$be),e($be,O_r),e(an,V_r),e(kr,X_r),e(kr,Z),e(Z,OT),e(OT,kbe),e(kbe,z_r),e(OT,Q_r),e(OT,uW),e(uW,W_r),e(OT,H_r),e(Z,U_r),e(Z,VT),e(VT,Sbe),e(Sbe,J_r),e(VT,Y_r),e(VT,_W),e(_W,K_r),e(VT,Z_r),e(Z,e2r),e(Z,XT),e(XT,Rbe),e(Rbe,o2r),e(XT,r2r),e(XT,bW),e(bW,t2r),e(XT,a2r),e(Z,n2r),e(Z,zT),e(zT,Bbe),e(Bbe,s2r),e(zT,l2r),e(zT,vW),e(vW,i2r),e(zT,d2r),e(Z,c2r),e(Z,QT),e(QT,Pbe),e(Pbe,f2r),e(QT,m2r),e(QT,FW),e(FW,g2r),e(QT,h2r),e(Z,p2r),e(Z,WT),e(WT,Ibe),e(Ibe,u2r),e(WT,_2r),e(WT,TW),e(TW,b2r),e(WT,v2r),e(Z,F2r),e(Z,HT),e(HT,qbe),e(qbe,T2r),e(HT,M2r),e(HT,MW),e(MW,E2r),e(HT,C2r),e(Z,w2r),e(Z,UT),e(UT,Nbe),e(Nbe,A2r),e(UT,y2r),e(UT,EW),e(EW,L2r),e(UT,x2r),e(Z,$2r),e(Z,JT),e(JT,jbe),e(jbe,k2r),e(JT,S2r),e(JT,CW),e(CW,R2r),e(JT,B2r),e(Z,P2r),e(Z,YT),e(YT,Dbe),e(Dbe,I2r),e(YT,q2r),e(YT,wW),e(wW,N2r),e(YT,j2r),e(Z,D2r),e(Z,KT),e(KT,Gbe),e(Gbe,G2r),e(KT,O2r),e(KT,AW),e(AW,V2r),e(KT,X2r),e(Z,z2r),e(Z,ZT),e(ZT,Obe),e(Obe,Q2r),e(ZT,W2r),e(ZT,yW),e(yW,H2r),e(ZT,U2r),e(Z,J2r),e(Z,eM),e(eM,Vbe),e(Vbe,Y2r),e(eM,K2r),e(eM,LW),e(LW,Z2r),e(eM,e1r),e(Z,o1r),e(Z,oM),e(oM,Xbe),e(Xbe,r1r),e(oM,t1r),e(oM,xW),e(xW,a1r),e(oM,n1r),e(Z,s1r),e(Z,rM),e(rM,zbe),e(zbe,l1r),e(rM,i1r),e(rM,$W),e($W,d1r),e(rM,c1r),e(Z,f1r),e(Z,tM),e(tM,Qbe),e(Qbe,m1r),e(tM,g1r),e(tM,kW),e(kW,h1r),e(tM,p1r),e(Z,u1r),e(Z,aM),e(aM,Wbe),e(Wbe,_1r),e(aM,b1r),e(aM,SW),e(SW,v1r),e(aM,F1r),e(Z,T1r),e(Z,nM),e(nM,Hbe),e(Hbe,M1r),e(nM,E1r),e(nM,RW),e(RW,C1r),e(nM,w1r),e(Z,A1r),e(Z,sM),e(sM,Ube),e(Ube,y1r),e(sM,L1r),e(sM,BW),e(BW,x1r),e(sM,$1r),e(Z,k1r),e(Z,lM),e(lM,Jbe),e(Jbe,S1r),e(lM,R1r),e(lM,PW),e(PW,B1r),e(lM,P1r),e(Z,I1r),e(Z,iM),e(iM,Ybe),e(Ybe,q1r),e(iM,N1r),e(iM,IW),e(IW,j1r),e(iM,D1r),e(Z,G1r),e(Z,dM),e(dM,Kbe),e(Kbe,O1r),e(dM,V1r),e(dM,qW),e(qW,X1r),e(dM,z1r),e(Z,Q1r),e(Z,cM),e(cM,Zbe),e(Zbe,W1r),e(cM,H1r),e(cM,NW),e(NW,U1r),e(cM,J1r),e(Z,Y1r),e(Z,fM),e(fM,e4e),e(e4e,K1r),e(fM,Z1r),e(fM,jW),e(jW,ebr),e(fM,obr),e(Z,rbr),e(Z,mM),e(mM,o4e),e(o4e,tbr),e(mM,abr),e(mM,DW),e(DW,nbr),e(mM,sbr),e(Z,lbr),e(Z,gM),e(gM,r4e),e(r4e,ibr),e(gM,dbr),e(gM,GW),e(GW,cbr),e(gM,fbr),e(kr,mbr),M(hM,kr,null),b(f,NIe,_),b(f,nc,_),e(nc,pM),e(pM,t4e),M(lx,t4e,null),e(nc,gbr),e(nc,a4e),e(a4e,hbr),b(f,jIe,_),b(f,ar,_),M(ix,ar,null),e(ar,pbr),e(ar,sc),e(sc,ubr),e(sc,OW),e(OW,_br),e(sc,bbr),e(sc,VW),e(VW,vbr),e(sc,Fbr),e(ar,Tbr),e(ar,dx),e(dx,Mbr),e(dx,n4e),e(n4e,Ebr),e(dx,Cbr),e(ar,wbr),e(ar,St),M(cx,St,null),e(St,Abr),e(St,s4e),e(s4e,ybr),e(St,Lbr),e(St,lc),e(lc,xbr),e(lc,l4e),e(l4e,$br),e(lc,kbr),e(lc,XW),e(XW,Sbr),e(lc,Rbr),e(St,Bbr),M(uM,St,null),e(ar,Pbr),e(ar,Sr),M(fx,Sr,null),e(Sr,Ibr),e(Sr,i4e),e(i4e,qbr),e(Sr,Nbr),e(Sr,nn),e(nn,jbr),e(nn,d4e),e(d4e,Dbr),e(nn,Gbr),e(nn,c4e),e(c4e,Obr),e(nn,Vbr),e(nn,f4e),e(f4e,Xbr),e(nn,zbr),e(Sr,Qbr),e(Sr,pe),e(pe,_M),e(_M,m4e),e(m4e,Wbr),e(_M,Hbr),e(_M,zW),e(zW,Ubr),e(_M,Jbr),e(pe,Ybr),e(pe,bM),e(bM,g4e),e(g4e,Kbr),e(bM,Zbr),e(bM,QW),e(QW,e4r),e(bM,o4r),e(pe,r4r),e(pe,vM),e(vM,h4e),e(h4e,t4r),e(vM,a4r),e(vM,WW),e(WW,n4r),e(vM,s4r),e(pe,l4r),e(pe,FM),e(FM,p4e),e(p4e,i4r),e(FM,d4r),e(FM,HW),e(HW,c4r),e(FM,f4r),e(pe,m4r),e(pe,TM),e(TM,u4e),e(u4e,g4r),e(TM,h4r),e(TM,UW),e(UW,p4r),e(TM,u4r),e(pe,_4r),e(pe,MM),e(MM,_4e),e(_4e,b4r),e(MM,v4r),e(MM,JW),e(JW,F4r),e(MM,T4r),e(pe,M4r),e(pe,EM),e(EM,b4e),e(b4e,E4r),e(EM,C4r),e(EM,YW),e(YW,w4r),e(EM,A4r),e(pe,y4r),e(pe,CM),e(CM,v4e),e(v4e,L4r),e(CM,x4r),e(CM,KW),e(KW,$4r),e(CM,k4r),e(pe,S4r),e(pe,wM),e(wM,F4e),e(F4e,R4r),e(wM,B4r),e(wM,ZW),e(ZW,P4r),e(wM,I4r),e(pe,q4r),e(pe,AM),e(AM,T4e),e(T4e,N4r),e(AM,j4r),e(AM,eH),e(eH,D4r),e(AM,G4r),e(pe,O4r),e(pe,yM),e(yM,M4e),e(M4e,V4r),e(yM,X4r),e(yM,oH),e(oH,z4r),e(yM,Q4r),e(pe,W4r),e(pe,LM),e(LM,E4e),e(E4e,H4r),e(LM,U4r),e(LM,rH),e(rH,J4r),e(LM,Y4r),e(pe,K4r),e(pe,xM),e(xM,C4e),e(C4e,Z4r),e(xM,evr),e(xM,tH),e(tH,ovr),e(xM,rvr),e(pe,tvr),e(pe,$M),e($M,w4e),e(w4e,avr),e($M,nvr),e($M,aH),e(aH,svr),e($M,lvr),e(pe,ivr),e(pe,kM),e(kM,A4e),e(A4e,dvr),e(kM,cvr),e(kM,nH),e(nH,fvr),e(kM,mvr),e(pe,gvr),e(pe,SM),e(SM,y4e),e(y4e,hvr),e(SM,pvr),e(SM,sH),e(sH,uvr),e(SM,_vr),e(pe,bvr),e(pe,RM),e(RM,L4e),e(L4e,vvr),e(RM,Fvr),e(RM,lH),e(lH,Tvr),e(RM,Mvr),e(Sr,Evr),M(BM,Sr,null),b(f,DIe,_),b(f,ic,_),e(ic,PM),e(PM,x4e),M(mx,x4e,null),e(ic,Cvr),e(ic,$4e),e($4e,wvr),b(f,GIe,_),b(f,nr,_),M(gx,nr,null),e(nr,Avr),e(nr,dc),e(dc,yvr),e(dc,iH),e(iH,Lvr),e(dc,xvr),e(dc,dH),e(dH,$vr),e(dc,kvr),e(nr,Svr),e(nr,hx),e(hx,Rvr),e(hx,k4e),e(k4e,Bvr),e(hx,Pvr),e(nr,Ivr),e(nr,Rt),M(px,Rt,null),e(Rt,qvr),e(Rt,S4e),e(S4e,Nvr),e(Rt,jvr),e(Rt,cc),e(cc,Dvr),e(cc,R4e),e(R4e,Gvr),e(cc,Ovr),e(cc,cH),e(cH,Vvr),e(cc,Xvr),e(Rt,zvr),M(IM,Rt,null),e(nr,Qvr),e(nr,Rr),M(ux,Rr,null),e(Rr,Wvr),e(Rr,B4e),e(B4e,Hvr),e(Rr,Uvr),e(Rr,sn),e(sn,Jvr),e(sn,P4e),e(P4e,Yvr),e(sn,Kvr),e(sn,I4e),e(I4e,Zvr),e(sn,eFr),e(sn,q4e),e(q4e,oFr),e(sn,rFr),e(Rr,tFr),e(Rr,_x),e(_x,qM),e(qM,N4e),e(N4e,aFr),e(qM,nFr),e(qM,fH),e(fH,sFr),e(qM,lFr),e(_x,iFr),e(_x,NM),e(NM,j4e),e(j4e,dFr),e(NM,cFr),e(NM,mH),e(mH,fFr),e(NM,mFr),e(Rr,gFr),M(jM,Rr,null),b(f,OIe,_),b(f,fc,_),e(fc,DM),e(DM,D4e),M(bx,D4e,null),e(fc,hFr),e(fc,G4e),e(G4e,pFr),b(f,VIe,_),b(f,sr,_),M(vx,sr,null),e(sr,uFr),e(sr,mc),e(mc,_Fr),e(mc,gH),e(gH,bFr),e(mc,vFr),e(mc,hH),e(hH,FFr),e(mc,TFr),e(sr,MFr),e(sr,Fx),e(Fx,EFr),e(Fx,O4e),e(O4e,CFr),e(Fx,wFr),e(sr,AFr),e(sr,Bt),M(Tx,Bt,null),e(Bt,yFr),e(Bt,V4e),e(V4e,LFr),e(Bt,xFr),e(Bt,gc),e(gc,$Fr),e(gc,X4e),e(X4e,kFr),e(gc,SFr),e(gc,pH),e(pH,RFr),e(gc,BFr),e(Bt,PFr),M(GM,Bt,null),e(sr,IFr),e(sr,Br),M(Mx,Br,null),e(Br,qFr),e(Br,z4e),e(z4e,NFr),e(Br,jFr),e(Br,ln),e(ln,DFr),e(ln,Q4e),e(Q4e,GFr),e(ln,OFr),e(ln,W4e),e(W4e,VFr),e(ln,XFr),e(ln,H4e),e(H4e,zFr),e(ln,QFr),e(Br,WFr),e(Br,U4e),e(U4e,OM),e(OM,J4e),e(J4e,HFr),e(OM,UFr),e(OM,uH),e(uH,JFr),e(OM,YFr),e(Br,KFr),M(VM,Br,null),b(f,XIe,_),b(f,hc,_),e(hc,XM),e(XM,Y4e),M(Ex,Y4e,null),e(hc,ZFr),e(hc,K4e),e(K4e,e0r),b(f,zIe,_),b(f,lr,_),M(Cx,lr,null),e(lr,o0r),e(lr,pc),e(pc,r0r),e(pc,_H),e(_H,t0r),e(pc,a0r),e(pc,bH),e(bH,n0r),e(pc,s0r),e(lr,l0r),e(lr,wx),e(wx,i0r),e(wx,Z4e),e(Z4e,d0r),e(wx,c0r),e(lr,f0r),e(lr,Pt),M(Ax,Pt,null),e(Pt,m0r),e(Pt,eve),e(eve,g0r),e(Pt,h0r),e(Pt,uc),e(uc,p0r),e(uc,ove),e(ove,u0r),e(uc,_0r),e(uc,vH),e(vH,b0r),e(uc,v0r),e(Pt,F0r),M(zM,Pt,null),e(lr,T0r),e(lr,Pr),M(yx,Pr,null),e(Pr,M0r),e(Pr,rve),e(rve,E0r),e(Pr,C0r),e(Pr,dn),e(dn,w0r),e(dn,tve),e(tve,A0r),e(dn,y0r),e(dn,ave),e(ave,L0r),e(dn,x0r),e(dn,nve),e(nve,$0r),e(dn,k0r),e(Pr,S0r),e(Pr,de),e(de,QM),e(QM,sve),e(sve,R0r),e(QM,B0r),e(QM,FH),e(FH,P0r),e(QM,I0r),e(de,q0r),e(de,WM),e(WM,lve),e(lve,N0r),e(WM,j0r),e(WM,TH),e(TH,D0r),e(WM,G0r),e(de,O0r),e(de,HM),e(HM,ive),e(ive,V0r),e(HM,X0r),e(HM,MH),e(MH,z0r),e(HM,Q0r),e(de,W0r),e(de,UM),e(UM,dve),e(dve,H0r),e(UM,U0r),e(UM,EH),e(EH,J0r),e(UM,Y0r),e(de,K0r),e(de,JM),e(JM,cve),e(cve,Z0r),e(JM,e6r),e(JM,CH),e(CH,o6r),e(JM,r6r),e(de,t6r),e(de,YM),e(YM,fve),e(fve,a6r),e(YM,n6r),e(YM,wH),e(wH,s6r),e(YM,l6r),e(de,i6r),e(de,KM),e(KM,mve),e(mve,d6r),e(KM,c6r),e(KM,AH),e(AH,f6r),e(KM,m6r),e(de,g6r),e(de,ZM),e(ZM,gve),e(gve,h6r),e(ZM,p6r),e(ZM,yH),e(yH,u6r),e(ZM,_6r),e(de,b6r),e(de,eE),e(eE,hve),e(hve,v6r),e(eE,F6r),e(eE,LH),e(LH,T6r),e(eE,M6r),e(de,E6r),e(de,oE),e(oE,pve),e(pve,C6r),e(oE,w6r),e(oE,xH),e(xH,A6r),e(oE,y6r),e(de,L6r),e(de,rE),e(rE,uve),e(uve,x6r),e(rE,$6r),e(rE,$H),e($H,k6r),e(rE,S6r),e(de,R6r),e(de,tE),e(tE,_ve),e(_ve,B6r),e(tE,P6r),e(tE,kH),e(kH,I6r),e(tE,q6r),e(de,N6r),e(de,aE),e(aE,bve),e(bve,j6r),e(aE,D6r),e(aE,SH),e(SH,G6r),e(aE,O6r),e(de,V6r),e(de,nE),e(nE,vve),e(vve,X6r),e(nE,z6r),e(nE,RH),e(RH,Q6r),e(nE,W6r),e(de,H6r),e(de,sE),e(sE,Fve),e(Fve,U6r),e(sE,J6r),e(sE,BH),e(BH,Y6r),e(sE,K6r),e(de,Z6r),e(de,lE),e(lE,Tve),e(Tve,eTr),e(lE,oTr),e(lE,PH),e(PH,rTr),e(lE,tTr),e(de,aTr),e(de,iE),e(iE,Mve),e(Mve,nTr),e(iE,sTr),e(iE,IH),e(IH,lTr),e(iE,iTr),e(de,dTr),e(de,dE),e(dE,Eve),e(Eve,cTr),e(dE,fTr),e(dE,qH),e(qH,mTr),e(dE,gTr),e(de,hTr),e(de,cE),e(cE,Cve),e(Cve,pTr),e(cE,uTr),e(cE,NH),e(NH,_Tr),e(cE,bTr),e(de,vTr),e(de,fE),e(fE,wve),e(wve,FTr),e(fE,TTr),e(fE,jH),e(jH,MTr),e(fE,ETr),e(Pr,CTr),M(mE,Pr,null),b(f,QIe,_),b(f,_c,_),e(_c,gE),e(gE,Ave),M(Lx,Ave,null),e(_c,wTr),e(_c,yve),e(yve,ATr),b(f,WIe,_),b(f,ir,_),M(xx,ir,null),e(ir,yTr),e(ir,bc),e(bc,LTr),e(bc,DH),e(DH,xTr),e(bc,$Tr),e(bc,GH),e(GH,kTr),e(bc,STr),e(ir,RTr),e(ir,$x),e($x,BTr),e($x,Lve),e(Lve,PTr),e($x,ITr),e(ir,qTr),e(ir,It),M(kx,It,null),e(It,NTr),e(It,xve),e(xve,jTr),e(It,DTr),e(It,vc),e(vc,GTr),e(vc,$ve),e($ve,OTr),e(vc,VTr),e(vc,OH),e(OH,XTr),e(vc,zTr),e(It,QTr),M(hE,It,null),e(ir,WTr),e(ir,Ir),M(Sx,Ir,null),e(Ir,HTr),e(Ir,kve),e(kve,UTr),e(Ir,JTr),e(Ir,cn),e(cn,YTr),e(cn,Sve),e(Sve,KTr),e(cn,ZTr),e(cn,Rve),e(Rve,eMr),e(cn,oMr),e(cn,Bve),e(Bve,rMr),e(cn,tMr),e(Ir,aMr),e(Ir,ce),e(ce,pE),e(pE,Pve),e(Pve,nMr),e(pE,sMr),e(pE,VH),e(VH,lMr),e(pE,iMr),e(ce,dMr),e(ce,uE),e(uE,Ive),e(Ive,cMr),e(uE,fMr),e(uE,XH),e(XH,mMr),e(uE,gMr),e(ce,hMr),e(ce,_E),e(_E,qve),e(qve,pMr),e(_E,uMr),e(_E,zH),e(zH,_Mr),e(_E,bMr),e(ce,vMr),e(ce,bE),e(bE,Nve),e(Nve,FMr),e(bE,TMr),e(bE,QH),e(QH,MMr),e(bE,EMr),e(ce,CMr),e(ce,vE),e(vE,jve),e(jve,wMr),e(vE,AMr),e(vE,WH),e(WH,yMr),e(vE,LMr),e(ce,xMr),e(ce,FE),e(FE,Dve),e(Dve,$Mr),e(FE,kMr),e(FE,HH),e(HH,SMr),e(FE,RMr),e(ce,BMr),e(ce,TE),e(TE,Gve),e(Gve,PMr),e(TE,IMr),e(TE,UH),e(UH,qMr),e(TE,NMr),e(ce,jMr),e(ce,ME),e(ME,Ove),e(Ove,DMr),e(ME,GMr),e(ME,JH),e(JH,OMr),e(ME,VMr),e(ce,XMr),e(ce,EE),e(EE,Vve),e(Vve,zMr),e(EE,QMr),e(EE,YH),e(YH,WMr),e(EE,HMr),e(ce,UMr),e(ce,CE),e(CE,Xve),e(Xve,JMr),e(CE,YMr),e(CE,KH),e(KH,KMr),e(CE,ZMr),e(ce,eEr),e(ce,wE),e(wE,zve),e(zve,oEr),e(wE,rEr),e(wE,ZH),e(ZH,tEr),e(wE,aEr),e(ce,nEr),e(ce,AE),e(AE,Qve),e(Qve,sEr),e(AE,lEr),e(AE,eU),e(eU,iEr),e(AE,dEr),e(ce,cEr),e(ce,yE),e(yE,Wve),e(Wve,fEr),e(yE,mEr),e(yE,oU),e(oU,gEr),e(yE,hEr),e(ce,pEr),e(ce,LE),e(LE,Hve),e(Hve,uEr),e(LE,_Er),e(LE,rU),e(rU,bEr),e(LE,vEr),e(ce,FEr),e(ce,xE),e(xE,Uve),e(Uve,TEr),e(xE,MEr),e(xE,tU),e(tU,EEr),e(xE,CEr),e(ce,wEr),e(ce,$E),e($E,Jve),e(Jve,AEr),e($E,yEr),e($E,aU),e(aU,LEr),e($E,xEr),e(ce,$Er),e(ce,kE),e(kE,Yve),e(Yve,kEr),e(kE,SEr),e(kE,nU),e(nU,REr),e(kE,BEr),e(ce,PEr),e(ce,SE),e(SE,Kve),e(Kve,IEr),e(SE,qEr),e(SE,sU),e(sU,NEr),e(SE,jEr),e(ce,DEr),e(ce,RE),e(RE,Zve),e(Zve,GEr),e(RE,OEr),e(RE,lU),e(lU,VEr),e(RE,XEr),e(ce,zEr),e(ce,BE),e(BE,eFe),e(eFe,QEr),e(BE,WEr),e(BE,iU),e(iU,HEr),e(BE,UEr),e(Ir,JEr),M(PE,Ir,null),b(f,HIe,_),b(f,Fc,_),e(Fc,IE),e(IE,oFe),M(Rx,oFe,null),e(Fc,YEr),e(Fc,rFe),e(rFe,KEr),b(f,UIe,_),b(f,dr,_),M(Bx,dr,null),e(dr,ZEr),e(dr,Tc),e(Tc,eCr),e(Tc,dU),e(dU,oCr),e(Tc,rCr),e(Tc,cU),e(cU,tCr),e(Tc,aCr),e(dr,nCr),e(dr,Px),e(Px,sCr),e(Px,tFe),e(tFe,lCr),e(Px,iCr),e(dr,dCr),e(dr,qt),M(Ix,qt,null),e(qt,cCr),e(qt,aFe),e(aFe,fCr),e(qt,mCr),e(qt,Mc),e(Mc,gCr),e(Mc,nFe),e(nFe,hCr),e(Mc,pCr),e(Mc,fU),e(fU,uCr),e(Mc,_Cr),e(qt,bCr),M(qE,qt,null),e(dr,vCr),e(dr,qr),M(qx,qr,null),e(qr,FCr),e(qr,sFe),e(sFe,TCr),e(qr,MCr),e(qr,fn),e(fn,ECr),e(fn,lFe),e(lFe,CCr),e(fn,wCr),e(fn,iFe),e(iFe,ACr),e(fn,yCr),e(fn,dFe),e(dFe,LCr),e(fn,xCr),e(qr,$Cr),e(qr,cFe),e(cFe,NE),e(NE,fFe),e(fFe,kCr),e(NE,SCr),e(NE,mU),e(mU,RCr),e(NE,BCr),e(qr,PCr),M(jE,qr,null),b(f,JIe,_),b(f,Ec,_),e(Ec,DE),e(DE,mFe),M(Nx,mFe,null),e(Ec,ICr),e(Ec,gFe),e(gFe,qCr),b(f,YIe,_),b(f,cr,_),M(jx,cr,null),e(cr,NCr),e(cr,Cc),e(Cc,jCr),e(Cc,gU),e(gU,DCr),e(Cc,GCr),e(Cc,hU),e(hU,OCr),e(Cc,VCr),e(cr,XCr),e(cr,Dx),e(Dx,zCr),e(Dx,hFe),e(hFe,QCr),e(Dx,WCr),e(cr,HCr),e(cr,Nt),M(Gx,Nt,null),e(Nt,UCr),e(Nt,pFe),e(pFe,JCr),e(Nt,YCr),e(Nt,wc),e(wc,KCr),e(wc,uFe),e(uFe,ZCr),e(wc,e5r),e(wc,pU),e(pU,o5r),e(wc,r5r),e(Nt,t5r),M(GE,Nt,null),e(cr,a5r),e(cr,Nr),M(Ox,Nr,null),e(Nr,n5r),e(Nr,_Fe),e(_Fe,s5r),e(Nr,l5r),e(Nr,mn),e(mn,i5r),e(mn,bFe),e(bFe,d5r),e(mn,c5r),e(mn,vFe),e(vFe,f5r),e(mn,m5r),e(mn,FFe),e(FFe,g5r),e(mn,h5r),e(Nr,p5r),e(Nr,TFe),e(TFe,OE),e(OE,MFe),e(MFe,u5r),e(OE,_5r),e(OE,uU),e(uU,b5r),e(OE,v5r),e(Nr,F5r),M(VE,Nr,null),b(f,KIe,_),b(f,Ac,_),e(Ac,XE),e(XE,EFe),M(Vx,EFe,null),e(Ac,T5r),e(Ac,CFe),e(CFe,M5r),b(f,ZIe,_),b(f,fr,_),M(Xx,fr,null),e(fr,E5r),e(fr,yc),e(yc,C5r),e(yc,_U),e(_U,w5r),e(yc,A5r),e(yc,bU),e(bU,y5r),e(yc,L5r),e(fr,x5r),e(fr,zx),e(zx,$5r),e(zx,wFe),e(wFe,k5r),e(zx,S5r),e(fr,R5r),e(fr,jt),M(Qx,jt,null),e(jt,B5r),e(jt,AFe),e(AFe,P5r),e(jt,I5r),e(jt,Lc),e(Lc,q5r),e(Lc,yFe),e(yFe,N5r),e(Lc,j5r),e(Lc,vU),e(vU,D5r),e(Lc,G5r),e(jt,O5r),M(zE,jt,null),e(fr,V5r),e(fr,jr),M(Wx,jr,null),e(jr,X5r),e(jr,LFe),e(LFe,z5r),e(jr,Q5r),e(jr,gn),e(gn,W5r),e(gn,xFe),e(xFe,H5r),e(gn,U5r),e(gn,$Fe),e($Fe,J5r),e(gn,Y5r),e(gn,kFe),e(kFe,K5r),e(gn,Z5r),e(jr,e3r),e(jr,re),e(re,QE),e(QE,SFe),e(SFe,o3r),e(QE,r3r),e(QE,FU),e(FU,t3r),e(QE,a3r),e(re,n3r),e(re,WE),e(WE,RFe),e(RFe,s3r),e(WE,l3r),e(WE,TU),e(TU,i3r),e(WE,d3r),e(re,c3r),e(re,HE),e(HE,BFe),e(BFe,f3r),e(HE,m3r),e(HE,MU),e(MU,g3r),e(HE,h3r),e(re,p3r),e(re,UE),e(UE,PFe),e(PFe,u3r),e(UE,_3r),e(UE,EU),e(EU,b3r),e(UE,v3r),e(re,F3r),e(re,JE),e(JE,IFe),e(IFe,T3r),e(JE,M3r),e(JE,CU),e(CU,E3r),e(JE,C3r),e(re,w3r),e(re,YE),e(YE,qFe),e(qFe,A3r),e(YE,y3r),e(YE,wU),e(wU,L3r),e(YE,x3r),e(re,$3r),e(re,KE),e(KE,NFe),e(NFe,k3r),e(KE,S3r),e(KE,AU),e(AU,R3r),e(KE,B3r),e(re,P3r),e(re,ZE),e(ZE,jFe),e(jFe,I3r),e(ZE,q3r),e(ZE,yU),e(yU,N3r),e(ZE,j3r),e(re,D3r),e(re,eC),e(eC,DFe),e(DFe,G3r),e(eC,O3r),e(eC,LU),e(LU,V3r),e(eC,X3r),e(re,z3r),e(re,oC),e(oC,GFe),e(GFe,Q3r),e(oC,W3r),e(oC,xU),e(xU,H3r),e(oC,U3r),e(re,J3r),e(re,rC),e(rC,OFe),e(OFe,Y3r),e(rC,K3r),e(rC,$U),e($U,Z3r),e(rC,ewr),e(re,owr),e(re,tC),e(tC,VFe),e(VFe,rwr),e(tC,twr),e(tC,kU),e(kU,awr),e(tC,nwr),e(re,swr),e(re,aC),e(aC,XFe),e(XFe,lwr),e(aC,iwr),e(aC,SU),e(SU,dwr),e(aC,cwr),e(re,fwr),e(re,nC),e(nC,zFe),e(zFe,mwr),e(nC,gwr),e(nC,RU),e(RU,hwr),e(nC,pwr),e(re,uwr),e(re,sC),e(sC,QFe),e(QFe,_wr),e(sC,bwr),e(sC,BU),e(BU,vwr),e(sC,Fwr),e(re,Twr),e(re,lC),e(lC,WFe),e(WFe,Mwr),e(lC,Ewr),e(lC,PU),e(PU,Cwr),e(lC,wwr),e(re,Awr),e(re,iC),e(iC,HFe),e(HFe,ywr),e(iC,Lwr),e(iC,IU),e(IU,xwr),e(iC,$wr),e(re,kwr),e(re,dC),e(dC,UFe),e(UFe,Swr),e(dC,Rwr),e(dC,qU),e(qU,Bwr),e(dC,Pwr),e(re,Iwr),e(re,cC),e(cC,JFe),e(JFe,qwr),e(cC,Nwr),e(cC,NU),e(NU,jwr),e(cC,Dwr),e(re,Gwr),e(re,fC),e(fC,YFe),e(YFe,Owr),e(fC,Vwr),e(fC,jU),e(jU,Xwr),e(fC,zwr),e(re,Qwr),e(re,mC),e(mC,KFe),e(KFe,Wwr),e(mC,Hwr),e(mC,DU),e(DU,Uwr),e(mC,Jwr),e(re,Ywr),e(re,gC),e(gC,ZFe),e(ZFe,Kwr),e(gC,Zwr),e(gC,GU),e(GU,eAr),e(gC,oAr),e(re,rAr),e(re,hC),e(hC,e0e),e(e0e,tAr),e(hC,aAr),e(hC,OU),e(OU,nAr),e(hC,sAr),e(re,lAr),e(re,pC),e(pC,o0e),e(o0e,iAr),e(pC,dAr),e(pC,VU),e(VU,cAr),e(pC,fAr),e(re,mAr),e(re,uC),e(uC,r0e),e(r0e,gAr),e(uC,hAr),e(uC,XU),e(XU,pAr),e(uC,uAr),e(jr,_Ar),M(_C,jr,null),b(f,eqe,_),b(f,xc,_),e(xc,bC),e(bC,t0e),M(Hx,t0e,null),e(xc,bAr),e(xc,a0e),e(a0e,vAr),b(f,oqe,_),b(f,mr,_),M(Ux,mr,null),e(mr,FAr),e(mr,$c),e($c,TAr),e($c,zU),e(zU,MAr),e($c,EAr),e($c,QU),e(QU,CAr),e($c,wAr),e(mr,AAr),e(mr,Jx),e(Jx,yAr),e(Jx,n0e),e(n0e,LAr),e(Jx,xAr),e(mr,$Ar),e(mr,Dt),M(Yx,Dt,null),e(Dt,kAr),e(Dt,s0e),e(s0e,SAr),e(Dt,RAr),e(Dt,kc),e(kc,BAr),e(kc,l0e),e(l0e,PAr),e(kc,IAr),e(kc,WU),e(WU,qAr),e(kc,NAr),e(Dt,jAr),M(vC,Dt,null),e(mr,DAr),e(mr,Dr),M(Kx,Dr,null),e(Dr,GAr),e(Dr,i0e),e(i0e,OAr),e(Dr,VAr),e(Dr,hn),e(hn,XAr),e(hn,d0e),e(d0e,zAr),e(hn,QAr),e(hn,c0e),e(c0e,WAr),e(hn,HAr),e(hn,f0e),e(f0e,UAr),e(hn,JAr),e(Dr,YAr),e(Dr,Se),e(Se,FC),e(FC,m0e),e(m0e,KAr),e(FC,ZAr),e(FC,HU),e(HU,eyr),e(FC,oyr),e(Se,ryr),e(Se,TC),e(TC,g0e),e(g0e,tyr),e(TC,ayr),e(TC,UU),e(UU,nyr),e(TC,syr),e(Se,lyr),e(Se,MC),e(MC,h0e),e(h0e,iyr),e(MC,dyr),e(MC,JU),e(JU,cyr),e(MC,fyr),e(Se,myr),e(Se,EC),e(EC,p0e),e(p0e,gyr),e(EC,hyr),e(EC,YU),e(YU,pyr),e(EC,uyr),e(Se,_yr),e(Se,CC),e(CC,u0e),e(u0e,byr),e(CC,vyr),e(CC,KU),e(KU,Fyr),e(CC,Tyr),e(Se,Myr),e(Se,wC),e(wC,_0e),e(_0e,Eyr),e(wC,Cyr),e(wC,ZU),e(ZU,wyr),e(wC,Ayr),e(Se,yyr),e(Se,AC),e(AC,b0e),e(b0e,Lyr),e(AC,xyr),e(AC,eJ),e(eJ,$yr),e(AC,kyr),e(Se,Syr),e(Se,yC),e(yC,v0e),e(v0e,Ryr),e(yC,Byr),e(yC,oJ),e(oJ,Pyr),e(yC,Iyr),e(Se,qyr),e(Se,LC),e(LC,F0e),e(F0e,Nyr),e(LC,jyr),e(LC,rJ),e(rJ,Dyr),e(LC,Gyr),e(Dr,Oyr),M(xC,Dr,null),b(f,rqe,_),b(f,Sc,_),e(Sc,$C),e($C,T0e),M(Zx,T0e,null),e(Sc,Vyr),e(Sc,M0e),e(M0e,Xyr),b(f,tqe,_),b(f,gr,_),M(e7,gr,null),e(gr,zyr),e(gr,Rc),e(Rc,Qyr),e(Rc,tJ),e(tJ,Wyr),e(Rc,Hyr),e(Rc,aJ),e(aJ,Uyr),e(Rc,Jyr),e(gr,Yyr),e(gr,o7),e(o7,Kyr),e(o7,E0e),e(E0e,Zyr),e(o7,eLr),e(gr,oLr),e(gr,Gt),M(r7,Gt,null),e(Gt,rLr),e(Gt,C0e),e(C0e,tLr),e(Gt,aLr),e(Gt,Bc),e(Bc,nLr),e(Bc,w0e),e(w0e,sLr),e(Bc,lLr),e(Bc,nJ),e(nJ,iLr),e(Bc,dLr),e(Gt,cLr),M(kC,Gt,null),e(gr,fLr),e(gr,Gr),M(t7,Gr,null),e(Gr,mLr),e(Gr,A0e),e(A0e,gLr),e(Gr,hLr),e(Gr,pn),e(pn,pLr),e(pn,y0e),e(y0e,uLr),e(pn,_Lr),e(pn,L0e),e(L0e,bLr),e(pn,vLr),e(pn,x0e),e(x0e,FLr),e(pn,TLr),e(Gr,MLr),e(Gr,Me),e(Me,SC),e(SC,$0e),e($0e,ELr),e(SC,CLr),e(SC,sJ),e(sJ,wLr),e(SC,ALr),e(Me,yLr),e(Me,RC),e(RC,k0e),e(k0e,LLr),e(RC,xLr),e(RC,lJ),e(lJ,$Lr),e(RC,kLr),e(Me,SLr),e(Me,BC),e(BC,S0e),e(S0e,RLr),e(BC,BLr),e(BC,iJ),e(iJ,PLr),e(BC,ILr),e(Me,qLr),e(Me,PC),e(PC,R0e),e(R0e,NLr),e(PC,jLr),e(PC,dJ),e(dJ,DLr),e(PC,GLr),e(Me,OLr),e(Me,IC),e(IC,B0e),e(B0e,VLr),e(IC,XLr),e(IC,cJ),e(cJ,zLr),e(IC,QLr),e(Me,WLr),e(Me,qC),e(qC,P0e),e(P0e,HLr),e(qC,ULr),e(qC,fJ),e(fJ,JLr),e(qC,YLr),e(Me,KLr),e(Me,NC),e(NC,I0e),e(I0e,ZLr),e(NC,e8r),e(NC,mJ),e(mJ,o8r),e(NC,r8r),e(Me,t8r),e(Me,jC),e(jC,q0e),e(q0e,a8r),e(jC,n8r),e(jC,gJ),e(gJ,s8r),e(jC,l8r),e(Me,i8r),e(Me,DC),e(DC,N0e),e(N0e,d8r),e(DC,c8r),e(DC,hJ),e(hJ,f8r),e(DC,m8r),e(Me,g8r),e(Me,GC),e(GC,j0e),e(j0e,h8r),e(GC,p8r),e(GC,pJ),e(pJ,u8r),e(GC,_8r),e(Me,b8r),e(Me,OC),e(OC,D0e),e(D0e,v8r),e(OC,F8r),e(OC,uJ),e(uJ,T8r),e(OC,M8r),e(Me,E8r),e(Me,VC),e(VC,G0e),e(G0e,C8r),e(VC,w8r),e(VC,_J),e(_J,A8r),e(VC,y8r),e(Gr,L8r),M(XC,Gr,null),b(f,aqe,_),b(f,Pc,_),e(Pc,zC),e(zC,O0e),M(a7,O0e,null),e(Pc,x8r),e(Pc,V0e),e(V0e,$8r),b(f,nqe,_),b(f,hr,_),M(n7,hr,null),e(hr,k8r),e(hr,Ic),e(Ic,S8r),e(Ic,bJ),e(bJ,R8r),e(Ic,B8r),e(Ic,vJ),e(vJ,P8r),e(Ic,I8r),e(hr,q8r),e(hr,s7),e(s7,N8r),e(s7,X0e),e(X0e,j8r),e(s7,D8r),e(hr,G8r),e(hr,Ot),M(l7,Ot,null),e(Ot,O8r),e(Ot,z0e),e(z0e,V8r),e(Ot,X8r),e(Ot,qc),e(qc,z8r),e(qc,Q0e),e(Q0e,Q8r),e(qc,W8r),e(qc,FJ),e(FJ,H8r),e(qc,U8r),e(Ot,J8r),M(QC,Ot,null),e(hr,Y8r),e(hr,Or),M(i7,Or,null),e(Or,K8r),e(Or,W0e),e(W0e,Z8r),e(Or,exr),e(Or,un),e(un,oxr),e(un,H0e),e(H0e,rxr),e(un,txr),e(un,U0e),e(U0e,axr),e(un,nxr),e(un,J0e),e(J0e,sxr),e(un,lxr),e(Or,ixr),e(Or,Le),e(Le,WC),e(WC,Y0e),e(Y0e,dxr),e(WC,cxr),e(WC,TJ),e(TJ,fxr),e(WC,mxr),e(Le,gxr),e(Le,HC),e(HC,K0e),e(K0e,hxr),e(HC,pxr),e(HC,MJ),e(MJ,uxr),e(HC,_xr),e(Le,bxr),e(Le,UC),e(UC,Z0e),e(Z0e,vxr),e(UC,Fxr),e(UC,EJ),e(EJ,Txr),e(UC,Mxr),e(Le,Exr),e(Le,JC),e(JC,e6e),e(e6e,Cxr),e(JC,wxr),e(JC,CJ),e(CJ,Axr),e(JC,yxr),e(Le,Lxr),e(Le,YC),e(YC,o6e),e(o6e,xxr),e(YC,$xr),e(YC,wJ),e(wJ,kxr),e(YC,Sxr),e(Le,Rxr),e(Le,KC),e(KC,r6e),e(r6e,Bxr),e(KC,Pxr),e(KC,AJ),e(AJ,Ixr),e(KC,qxr),e(Le,Nxr),e(Le,ZC),e(ZC,t6e),e(t6e,jxr),e(ZC,Dxr),e(ZC,yJ),e(yJ,Gxr),e(ZC,Oxr),e(Le,Vxr),e(Le,e5),e(e5,a6e),e(a6e,Xxr),e(e5,zxr),e(e5,LJ),e(LJ,Qxr),e(e5,Wxr),e(Le,Hxr),e(Le,o5),e(o5,n6e),e(n6e,Uxr),e(o5,Jxr),e(o5,xJ),e(xJ,Yxr),e(o5,Kxr),e(Le,Zxr),e(Le,r5),e(r5,s6e),e(s6e,e7r),e(r5,o7r),e(r5,$J),e($J,r7r),e(r5,t7r),e(Or,a7r),M(t5,Or,null),b(f,sqe,_),b(f,Nc,_),e(Nc,a5),e(a5,l6e),M(d7,l6e,null),e(Nc,n7r),e(Nc,i6e),e(i6e,s7r),b(f,lqe,_),b(f,pr,_),M(c7,pr,null),e(pr,l7r),e(pr,jc),e(jc,i7r),e(jc,kJ),e(kJ,d7r),e(jc,c7r),e(jc,SJ),e(SJ,f7r),e(jc,m7r),e(pr,g7r),e(pr,f7),e(f7,h7r),e(f7,d6e),e(d6e,p7r),e(f7,u7r),e(pr,_7r),e(pr,Vt),M(m7,Vt,null),e(Vt,b7r),e(Vt,c6e),e(c6e,v7r),e(Vt,F7r),e(Vt,Dc),e(Dc,T7r),e(Dc,f6e),e(f6e,M7r),e(Dc,E7r),e(Dc,RJ),e(RJ,C7r),e(Dc,w7r),e(Vt,A7r),M(n5,Vt,null),e(pr,y7r),e(pr,Vr),M(g7,Vr,null),e(Vr,L7r),e(Vr,m6e),e(m6e,x7r),e(Vr,$7r),e(Vr,_n),e(_n,k7r),e(_n,g6e),e(g6e,S7r),e(_n,R7r),e(_n,h6e),e(h6e,B7r),e(_n,P7r),e(_n,p6e),e(p6e,I7r),e(_n,q7r),e(Vr,N7r),e(Vr,Re),e(Re,s5),e(s5,u6e),e(u6e,j7r),e(s5,D7r),e(s5,BJ),e(BJ,G7r),e(s5,O7r),e(Re,V7r),e(Re,l5),e(l5,_6e),e(_6e,X7r),e(l5,z7r),e(l5,PJ),e(PJ,Q7r),e(l5,W7r),e(Re,H7r),e(Re,i5),e(i5,b6e),e(b6e,U7r),e(i5,J7r),e(i5,IJ),e(IJ,Y7r),e(i5,K7r),e(Re,Z7r),e(Re,d5),e(d5,v6e),e(v6e,e9r),e(d5,o9r),e(d5,qJ),e(qJ,r9r),e(d5,t9r),e(Re,a9r),e(Re,c5),e(c5,F6e),e(F6e,n9r),e(c5,s9r),e(c5,NJ),e(NJ,l9r),e(c5,i9r),e(Re,d9r),e(Re,f5),e(f5,T6e),e(T6e,c9r),e(f5,f9r),e(f5,jJ),e(jJ,m9r),e(f5,g9r),e(Re,h9r),e(Re,m5),e(m5,M6e),e(M6e,p9r),e(m5,u9r),e(m5,DJ),e(DJ,_9r),e(m5,b9r),e(Re,v9r),e(Re,g5),e(g5,E6e),e(E6e,F9r),e(g5,T9r),e(g5,GJ),e(GJ,M9r),e(g5,E9r),e(Re,C9r),e(Re,h5),e(h5,C6e),e(C6e,w9r),e(h5,A9r),e(h5,OJ),e(OJ,y9r),e(h5,L9r),e(Vr,x9r),M(p5,Vr,null),b(f,iqe,_),b(f,Gc,_),e(Gc,u5),e(u5,w6e),M(h7,w6e,null),e(Gc,$9r),e(Gc,A6e),e(A6e,k9r),b(f,dqe,_),b(f,ur,_),M(p7,ur,null),e(ur,S9r),e(ur,Oc),e(Oc,R9r),e(Oc,VJ),e(VJ,B9r),e(Oc,P9r),e(Oc,XJ),e(XJ,I9r),e(Oc,q9r),e(ur,N9r),e(ur,u7),e(u7,j9r),e(u7,y6e),e(y6e,D9r),e(u7,G9r),e(ur,O9r),e(ur,Xt),M(_7,Xt,null),e(Xt,V9r),e(Xt,L6e),e(L6e,X9r),e(Xt,z9r),e(Xt,Vc),e(Vc,Q9r),e(Vc,x6e),e(x6e,W9r),e(Vc,H9r),e(Vc,zJ),e(zJ,U9r),e(Vc,J9r),e(Xt,Y9r),M(_5,Xt,null),e(ur,K9r),e(ur,Xr),M(b7,Xr,null),e(Xr,Z9r),e(Xr,$6e),e($6e,e$r),e(Xr,o$r),e(Xr,bn),e(bn,r$r),e(bn,k6e),e(k6e,t$r),e(bn,a$r),e(bn,S6e),e(S6e,n$r),e(bn,s$r),e(bn,R6e),e(R6e,l$r),e(bn,i$r),e(Xr,d$r),e(Xr,xe),e(xe,b5),e(b5,B6e),e(B6e,c$r),e(b5,f$r),e(b5,QJ),e(QJ,m$r),e(b5,g$r),e(xe,h$r),e(xe,v5),e(v5,P6e),e(P6e,p$r),e(v5,u$r),e(v5,WJ),e(WJ,_$r),e(v5,b$r),e(xe,v$r),e(xe,F5),e(F5,I6e),e(I6e,F$r),e(F5,T$r),e(F5,HJ),e(HJ,M$r),e(F5,E$r),e(xe,C$r),e(xe,T5),e(T5,q6e),e(q6e,w$r),e(T5,A$r),e(T5,UJ),e(UJ,y$r),e(T5,L$r),e(xe,x$r),e(xe,M5),e(M5,N6e),e(N6e,$$r),e(M5,k$r),e(M5,JJ),e(JJ,S$r),e(M5,R$r),e(xe,B$r),e(xe,E5),e(E5,j6e),e(j6e,P$r),e(E5,I$r),e(E5,YJ),e(YJ,q$r),e(E5,N$r),e(xe,j$r),e(xe,C5),e(C5,D6e),e(D6e,D$r),e(C5,G$r),e(C5,KJ),e(KJ,O$r),e(C5,V$r),e(xe,X$r),e(xe,w5),e(w5,G6e),e(G6e,z$r),e(w5,Q$r),e(w5,ZJ),e(ZJ,W$r),e(w5,H$r),e(xe,U$r),e(xe,A5),e(A5,O6e),e(O6e,J$r),e(A5,Y$r),e(A5,eY),e(eY,K$r),e(A5,Z$r),e(xe,ekr),e(xe,y5),e(y5,V6e),e(V6e,okr),e(y5,rkr),e(y5,oY),e(oY,tkr),e(y5,akr),e(Xr,nkr),M(L5,Xr,null),b(f,cqe,_),b(f,Xc,_),e(Xc,x5),e(x5,X6e),M(v7,X6e,null),e(Xc,skr),e(Xc,z6e),e(z6e,lkr),b(f,fqe,_),b(f,_r,_),M(F7,_r,null),e(_r,ikr),e(_r,zc),e(zc,dkr),e(zc,rY),e(rY,ckr),e(zc,fkr),e(zc,tY),e(tY,mkr),e(zc,gkr),e(_r,hkr),e(_r,T7),e(T7,pkr),e(T7,Q6e),e(Q6e,ukr),e(T7,_kr),e(_r,bkr),e(_r,zt),M(M7,zt,null),e(zt,vkr),e(zt,W6e),e(W6e,Fkr),e(zt,Tkr),e(zt,Qc),e(Qc,Mkr),e(Qc,H6e),e(H6e,Ekr),e(Qc,Ckr),e(Qc,aY),e(aY,wkr),e(Qc,Akr),e(zt,ykr),M($5,zt,null),e(_r,Lkr),e(_r,zr),M(E7,zr,null),e(zr,xkr),e(zr,U6e),e(U6e,$kr),e(zr,kkr),e(zr,vn),e(vn,Skr),e(vn,J6e),e(J6e,Rkr),e(vn,Bkr),e(vn,Y6e),e(Y6e,Pkr),e(vn,Ikr),e(vn,K6e),e(K6e,qkr),e(vn,Nkr),e(zr,jkr),e(zr,$e),e($e,k5),e(k5,Z6e),e(Z6e,Dkr),e(k5,Gkr),e(k5,nY),e(nY,Okr),e(k5,Vkr),e($e,Xkr),e($e,S5),e(S5,eTe),e(eTe,zkr),e(S5,Qkr),e(S5,sY),e(sY,Wkr),e(S5,Hkr),e($e,Ukr),e($e,R5),e(R5,oTe),e(oTe,Jkr),e(R5,Ykr),e(R5,lY),e(lY,Kkr),e(R5,Zkr),e($e,eSr),e($e,B5),e(B5,rTe),e(rTe,oSr),e(B5,rSr),e(B5,iY),e(iY,tSr),e(B5,aSr),e($e,nSr),e($e,P5),e(P5,tTe),e(tTe,sSr),e(P5,lSr),e(P5,dY),e(dY,iSr),e(P5,dSr),e($e,cSr),e($e,I5),e(I5,aTe),e(aTe,fSr),e(I5,mSr),e(I5,cY),e(cY,gSr),e(I5,hSr),e($e,pSr),e($e,q5),e(q5,nTe),e(nTe,uSr),e(q5,_Sr),e(q5,fY),e(fY,bSr),e(q5,vSr),e($e,FSr),e($e,N5),e(N5,sTe),e(sTe,TSr),e(N5,MSr),e(N5,mY),e(mY,ESr),e(N5,CSr),e($e,wSr),e($e,j5),e(j5,lTe),e(lTe,ASr),e(j5,ySr),e(j5,gY),e(gY,LSr),e(j5,xSr),e($e,$Sr),e($e,D5),e(D5,iTe),e(iTe,kSr),e(D5,SSr),e(D5,hY),e(hY,RSr),e(D5,BSr),e(zr,PSr),M(G5,zr,null),b(f,mqe,_),b(f,Wc,_),e(Wc,O5),e(O5,dTe),M(C7,dTe,null),e(Wc,ISr),e(Wc,cTe),e(cTe,qSr),b(f,gqe,_),b(f,br,_),M(w7,br,null),e(br,NSr),e(br,Hc),e(Hc,jSr),e(Hc,pY),e(pY,DSr),e(Hc,GSr),e(Hc,uY),e(uY,OSr),e(Hc,VSr),e(br,XSr),e(br,A7),e(A7,zSr),e(A7,fTe),e(fTe,QSr),e(A7,WSr),e(br,HSr),e(br,Qt),M(y7,Qt,null),e(Qt,USr),e(Qt,mTe),e(mTe,JSr),e(Qt,YSr),e(Qt,Uc),e(Uc,KSr),e(Uc,gTe),e(gTe,ZSr),e(Uc,eRr),e(Uc,_Y),e(_Y,oRr),e(Uc,rRr),e(Qt,tRr),M(V5,Qt,null),e(br,aRr),e(br,Qr),M(L7,Qr,null),e(Qr,nRr),e(Qr,hTe),e(hTe,sRr),e(Qr,lRr),e(Qr,Fn),e(Fn,iRr),e(Fn,pTe),e(pTe,dRr),e(Fn,cRr),e(Fn,uTe),e(uTe,fRr),e(Fn,mRr),e(Fn,_Te),e(_Te,gRr),e(Fn,hRr),e(Qr,pRr),e(Qr,De),e(De,X5),e(X5,bTe),e(bTe,uRr),e(X5,_Rr),e(X5,bY),e(bY,bRr),e(X5,vRr),e(De,FRr),e(De,z5),e(z5,vTe),e(vTe,TRr),e(z5,MRr),e(z5,vY),e(vY,ERr),e(z5,CRr),e(De,wRr),e(De,Q5),e(Q5,FTe),e(FTe,ARr),e(Q5,yRr),e(Q5,FY),e(FY,LRr),e(Q5,xRr),e(De,$Rr),e(De,W5),e(W5,TTe),e(TTe,kRr),e(W5,SRr),e(W5,TY),e(TY,RRr),e(W5,BRr),e(De,PRr),e(De,H5),e(H5,MTe),e(MTe,IRr),e(H5,qRr),e(H5,MY),e(MY,NRr),e(H5,jRr),e(De,DRr),e(De,U5),e(U5,ETe),e(ETe,GRr),e(U5,ORr),e(U5,EY),e(EY,VRr),e(U5,XRr),e(De,zRr),e(De,J5),e(J5,CTe),e(CTe,QRr),e(J5,WRr),e(J5,CY),e(CY,HRr),e(J5,URr),e(De,JRr),e(De,Y5),e(Y5,wTe),e(wTe,YRr),e(Y5,KRr),e(Y5,wY),e(wY,ZRr),e(Y5,eBr),e(Qr,oBr),M(K5,Qr,null),b(f,hqe,_),b(f,Jc,_),e(Jc,Z5),e(Z5,ATe),M(x7,ATe,null),e(Jc,rBr),e(Jc,yTe),e(yTe,tBr),b(f,pqe,_),b(f,vr,_),M($7,vr,null),e(vr,aBr),e(vr,Yc),e(Yc,nBr),e(Yc,AY),e(AY,sBr),e(Yc,lBr),e(Yc,yY),e(yY,iBr),e(Yc,dBr),e(vr,cBr),e(vr,k7),e(k7,fBr),e(k7,LTe),e(LTe,mBr),e(k7,gBr),e(vr,hBr),e(vr,Wt),M(S7,Wt,null),e(Wt,pBr),e(Wt,xTe),e(xTe,uBr),e(Wt,_Br),e(Wt,Kc),e(Kc,bBr),e(Kc,$Te),e($Te,vBr),e(Kc,FBr),e(Kc,LY),e(LY,TBr),e(Kc,MBr),e(Wt,EBr),M(e3,Wt,null),e(vr,CBr),e(vr,Wr),M(R7,Wr,null),e(Wr,wBr),e(Wr,kTe),e(kTe,ABr),e(Wr,yBr),e(Wr,Tn),e(Tn,LBr),e(Tn,STe),e(STe,xBr),e(Tn,$Br),e(Tn,RTe),e(RTe,kBr),e(Tn,SBr),e(Tn,BTe),e(BTe,RBr),e(Tn,BBr),e(Wr,PBr),e(Wr,Ge),e(Ge,o3),e(o3,PTe),e(PTe,IBr),e(o3,qBr),e(o3,xY),e(xY,NBr),e(o3,jBr),e(Ge,DBr),e(Ge,r3),e(r3,ITe),e(ITe,GBr),e(r3,OBr),e(r3,$Y),e($Y,VBr),e(r3,XBr),e(Ge,zBr),e(Ge,t3),e(t3,qTe),e(qTe,QBr),e(t3,WBr),e(t3,kY),e(kY,HBr),e(t3,UBr),e(Ge,JBr),e(Ge,a3),e(a3,NTe),e(NTe,YBr),e(a3,KBr),e(a3,SY),e(SY,ZBr),e(a3,ePr),e(Ge,oPr),e(Ge,n3),e(n3,jTe),e(jTe,rPr),e(n3,tPr),e(n3,RY),e(RY,aPr),e(n3,nPr),e(Ge,sPr),e(Ge,s3),e(s3,DTe),e(DTe,lPr),e(s3,iPr),e(s3,BY),e(BY,dPr),e(s3,cPr),e(Ge,fPr),e(Ge,l3),e(l3,GTe),e(GTe,mPr),e(l3,gPr),e(l3,PY),e(PY,hPr),e(l3,pPr),e(Ge,uPr),e(Ge,i3),e(i3,OTe),e(OTe,_Pr),e(i3,bPr),e(i3,IY),e(IY,vPr),e(i3,FPr),e(Wr,TPr),M(d3,Wr,null),b(f,uqe,_),b(f,Zc,_),e(Zc,c3),e(c3,VTe),M(B7,VTe,null),e(Zc,MPr),e(Zc,XTe),e(XTe,EPr),b(f,_qe,_),b(f,Fr,_),M(P7,Fr,null),e(Fr,CPr),e(Fr,ef),e(ef,wPr),e(ef,qY),e(qY,APr),e(ef,yPr),e(ef,NY),e(NY,LPr),e(ef,xPr),e(Fr,$Pr),e(Fr,I7),e(I7,kPr),e(I7,zTe),e(zTe,SPr),e(I7,RPr),e(Fr,BPr),e(Fr,Ht),M(q7,Ht,null),e(Ht,PPr),e(Ht,QTe),e(QTe,IPr),e(Ht,qPr),e(Ht,of),e(of,NPr),e(of,WTe),e(WTe,jPr),e(of,DPr),e(of,jY),e(jY,GPr),e(of,OPr),e(Ht,VPr),M(f3,Ht,null),e(Fr,XPr),e(Fr,Hr),M(N7,Hr,null),e(Hr,zPr),e(Hr,HTe),e(HTe,QPr),e(Hr,WPr),e(Hr,Mn),e(Mn,HPr),e(Mn,UTe),e(UTe,UPr),e(Mn,JPr),e(Mn,JTe),e(JTe,YPr),e(Mn,KPr),e(Mn,YTe),e(YTe,ZPr),e(Mn,eIr),e(Hr,oIr),e(Hr,KTe),e(KTe,m3),e(m3,ZTe),e(ZTe,rIr),e(m3,tIr),e(m3,DY),e(DY,aIr),e(m3,nIr),e(Hr,sIr),M(g3,Hr,null),b(f,bqe,_),b(f,rf,_),e(rf,h3),e(h3,eMe),M(j7,eMe,null),e(rf,lIr),e(rf,oMe),e(oMe,iIr),b(f,vqe,_),b(f,Tr,_),M(D7,Tr,null),e(Tr,dIr),e(Tr,tf),e(tf,cIr),e(tf,GY),e(GY,fIr),e(tf,mIr),e(tf,OY),e(OY,gIr),e(tf,hIr),e(Tr,pIr),e(Tr,G7),e(G7,uIr),e(G7,rMe),e(rMe,_Ir),e(G7,bIr),e(Tr,vIr),e(Tr,Ut),M(O7,Ut,null),e(Ut,FIr),e(Ut,tMe),e(tMe,TIr),e(Ut,MIr),e(Ut,af),e(af,EIr),e(af,aMe),e(aMe,CIr),e(af,wIr),e(af,VY),e(VY,AIr),e(af,yIr),e(Ut,LIr),M(p3,Ut,null),e(Tr,xIr),e(Tr,Ur),M(V7,Ur,null),e(Ur,$Ir),e(Ur,nMe),e(nMe,kIr),e(Ur,SIr),e(Ur,En),e(En,RIr),e(En,sMe),e(sMe,BIr),e(En,PIr),e(En,lMe),e(lMe,IIr),e(En,qIr),e(En,iMe),e(iMe,NIr),e(En,jIr),e(Ur,DIr),e(Ur,X7),e(X7,u3),e(u3,dMe),e(dMe,GIr),e(u3,OIr),e(u3,XY),e(XY,VIr),e(u3,XIr),e(X7,zIr),e(X7,_3),e(_3,cMe),e(cMe,QIr),e(_3,WIr),e(_3,zY),e(zY,HIr),e(_3,UIr),e(Ur,JIr),M(b3,Ur,null),b(f,Fqe,_),b(f,nf,_),e(nf,v3),e(v3,fMe),M(z7,fMe,null),e(nf,YIr),e(nf,mMe),e(mMe,KIr),b(f,Tqe,_),b(f,Mr,_),M(Q7,Mr,null),e(Mr,ZIr),e(Mr,sf),e(sf,eqr),e(sf,QY),e(QY,oqr),e(sf,rqr),e(sf,WY),e(WY,tqr),e(sf,aqr),e(Mr,nqr),e(Mr,W7),e(W7,sqr),e(W7,gMe),e(gMe,lqr),e(W7,iqr),e(Mr,dqr),e(Mr,Jt),M(H7,Jt,null),e(Jt,cqr),e(Jt,hMe),e(hMe,fqr),e(Jt,mqr),e(Jt,lf),e(lf,gqr),e(lf,pMe),e(pMe,hqr),e(lf,pqr),e(lf,HY),e(HY,uqr),e(lf,_qr),e(Jt,bqr),M(F3,Jt,null),e(Mr,vqr),e(Mr,Jr),M(U7,Jr,null),e(Jr,Fqr),e(Jr,uMe),e(uMe,Tqr),e(Jr,Mqr),e(Jr,Cn),e(Cn,Eqr),e(Cn,_Me),e(_Me,Cqr),e(Cn,wqr),e(Cn,bMe),e(bMe,Aqr),e(Cn,yqr),e(Cn,vMe),e(vMe,Lqr),e(Cn,xqr),e(Jr,$qr),e(Jr,FMe),e(FMe,T3),e(T3,TMe),e(TMe,kqr),e(T3,Sqr),e(T3,UY),e(UY,Rqr),e(T3,Bqr),e(Jr,Pqr),M(M3,Jr,null),Mqe=!0},p(f,[_]){const J7={};_&2&&(J7.$$scope={dirty:_,ctx:f}),_f.$set(J7);const MMe={};_&2&&(MMe.$$scope={dirty:_,ctx:f}),pg.$set(MMe);const EMe={};_&2&&(EMe.$$scope={dirty:_,ctx:f}),Wg.$set(EMe);const CMe={};_&2&&(CMe.$$scope={dirty:_,ctx:f}),Th.$set(CMe);const Y7={};_&2&&(Y7.$$scope={dirty:_,ctx:f}),Mh.$set(Y7);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),jh.$set(wMe);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),Dh.$set(wn);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),Vh.$set(AMe);const yMe={};_&2&&(yMe.$$scope={dirty:_,ctx:f}),Su.$set(yMe);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),Bu.$set(LMe);const K7={};_&2&&(K7.$$scope={dirty:_,ctx:f}),T_.$set(K7);const xMe={};_&2&&(xMe.$$scope={dirty:_,ctx:f}),E_.$set(xMe);const Z7={};_&2&&(Z7.$$scope={dirty:_,ctx:f}),s2.$set(Z7);const $Me={};_&2&&($Me.$$scope={dirty:_,ctx:f}),i2.$set($Me);const e9={};_&2&&(e9.$$scope={dirty:_,ctx:f}),z2.$set(e9);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),W2.$set(kMe);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),m1.$set(SMe);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),h1.$set(RMe);const df={};_&2&&(df.$$scope={dirty:_,ctx:f}),db.$set(df);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),fb.$set(BMe);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),Gb.$set(PMe);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),Vb.$set(IMe);const o9={};_&2&&(o9.$$scope={dirty:_,ctx:f}),Jb.$set(o9);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),Kb.$set(qMe);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),R4.$set(NMe);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),P4.$set(jMe);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),Mv.$set(Kr);const r9={};_&2&&(r9.$$scope={dirty:_,ctx:f}),Cv.$set(r9);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),yv.$set(DMe);const t9={};_&2&&(t9.$$scope={dirty:_,ctx:f}),xv.$set(t9);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),Ov.$set(GMe);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),Xv.$set(Zr);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),Wv.$set(OMe);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),Uv.$set(cf);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),nF.$set(VMe);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),lF.$set(XMe);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),gF.$set(L);const E3={};_&2&&(E3.$$scope={dirty:_,ctx:f}),pF.$set(E3);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),AF.$set(zMe);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),LF.$set(QMe);const C3={};_&2&&(C3.$$scope={dirty:_,ctx:f}),SF.$set(C3);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),BF.$set(WMe);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),DF.$set(HMe);const w3={};_&2&&(w3.$$scope={dirty:_,ctx:f}),OF.$set(w3);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),WF.$set(UMe);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),UF.$set(JMe);const A3={};_&2&&(A3.$$scope={dirty:_,ctx:f}),ZF.$set(A3);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),o0.$set(YMe);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),a0.$set(KMe);const y3={};_&2&&(y3.$$scope={dirty:_,ctx:f}),s0.$set(y3);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),m0.$set(ZMe);const eEe={};_&2&&(eEe.$$scope={dirty:_,ctx:f}),h0.$set(eEe);const L3={};_&2&&(L3.$$scope={dirty:_,ctx:f}),_0.$set(L3);const oEe={};_&2&&(oEe.$$scope={dirty:_,ctx:f}),v0.$set(oEe);const rEe={};_&2&&(rEe.$$scope={dirty:_,ctx:f}),c6.$set(rEe);const x3={};_&2&&(x3.$$scope={dirty:_,ctx:f}),m6.$set(x3);const tEe={};_&2&&(tEe.$$scope={dirty:_,ctx:f}),I6.$set(tEe);const aEe={};_&2&&(aEe.$$scope={dirty:_,ctx:f}),N6.$set(aEe);const $3={};_&2&&($3.$$scope={dirty:_,ctx:f}),Y6.$set($3);const nEe={};_&2&&(nEe.$$scope={dirty:_,ctx:f}),Z6.$set(nEe);const sEe={};_&2&&(sEe.$$scope={dirty:_,ctx:f}),tT.$set(sEe);const k3={};_&2&&(k3.$$scope={dirty:_,ctx:f}),nT.$set(k3);const lEe={};_&2&&(lEe.$$scope={dirty:_,ctx:f}),AT.$set(lEe);const iEe={};_&2&&(iEe.$$scope={dirty:_,ctx:f}),LT.$set(iEe);const S3={};_&2&&(S3.$$scope={dirty:_,ctx:f}),jT.$set(S3);const dEe={};_&2&&(dEe.$$scope={dirty:_,ctx:f}),GT.$set(dEe);const cEe={};_&2&&(cEe.$$scope={dirty:_,ctx:f}),hM.$set(cEe);const R3={};_&2&&(R3.$$scope={dirty:_,ctx:f}),uM.$set(R3);const fEe={};_&2&&(fEe.$$scope={dirty:_,ctx:f}),BM.$set(fEe);const mEe={};_&2&&(mEe.$$scope={dirty:_,ctx:f}),IM.$set(mEe);const B3={};_&2&&(B3.$$scope={dirty:_,ctx:f}),jM.$set(B3);const gEe={};_&2&&(gEe.$$scope={dirty:_,ctx:f}),GM.$set(gEe);const hEe={};_&2&&(hEe.$$scope={dirty:_,ctx:f}),VM.$set(hEe);const P3={};_&2&&(P3.$$scope={dirty:_,ctx:f}),zM.$set(P3);const pEe={};_&2&&(pEe.$$scope={dirty:_,ctx:f}),mE.$set(pEe);const uEe={};_&2&&(uEe.$$scope={dirty:_,ctx:f}),hE.$set(uEe);const I3={};_&2&&(I3.$$scope={dirty:_,ctx:f}),PE.$set(I3);const _Ee={};_&2&&(_Ee.$$scope={dirty:_,ctx:f}),qE.$set(_Ee);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:f}),jE.$set(bEe);const q3={};_&2&&(q3.$$scope={dirty:_,ctx:f}),GE.$set(q3);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:f}),VE.$set(vEe);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:f}),zE.$set(FEe);const N3={};_&2&&(N3.$$scope={dirty:_,ctx:f}),_C.$set(N3);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:f}),vC.$set(TEe);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:f}),xC.$set(MEe);const j3={};_&2&&(j3.$$scope={dirty:_,ctx:f}),kC.$set(j3);const EEe={};_&2&&(EEe.$$scope={dirty:_,ctx:f}),XC.$set(EEe);const CEe={};_&2&&(CEe.$$scope={dirty:_,ctx:f}),QC.$set(CEe);const D3={};_&2&&(D3.$$scope={dirty:_,ctx:f}),t5.$set(D3);const wEe={};_&2&&(wEe.$$scope={dirty:_,ctx:f}),n5.$set(wEe);const AEe={};_&2&&(AEe.$$scope={dirty:_,ctx:f}),p5.$set(AEe);const G3={};_&2&&(G3.$$scope={dirty:_,ctx:f}),_5.$set(G3);const yEe={};_&2&&(yEe.$$scope={dirty:_,ctx:f}),L5.$set(yEe);const LEe={};_&2&&(LEe.$$scope={dirty:_,ctx:f}),$5.$set(LEe);const O3={};_&2&&(O3.$$scope={dirty:_,ctx:f}),G5.$set(O3);const xEe={};_&2&&(xEe.$$scope={dirty:_,ctx:f}),V5.$set(xEe);const $Ee={};_&2&&($Ee.$$scope={dirty:_,ctx:f}),K5.$set($Ee);const V3={};_&2&&(V3.$$scope={dirty:_,ctx:f}),e3.$set(V3);const kEe={};_&2&&(kEe.$$scope={dirty:_,ctx:f}),d3.$set(kEe);const SEe={};_&2&&(SEe.$$scope={dirty:_,ctx:f}),f3.$set(SEe);const X3={};_&2&&(X3.$$scope={dirty:_,ctx:f}),g3.$set(X3);const REe={};_&2&&(REe.$$scope={dirty:_,ctx:f}),p3.$set(REe);const BEe={};_&2&&(BEe.$$scope={dirty:_,ctx:f}),b3.$set(BEe);const z3={};_&2&&(z3.$$scope={dirty:_,ctx:f}),F3.$set(z3);const PEe={};_&2&&(PEe.$$scope={dirty:_,ctx:f}),M3.$set(PEe)},i(f){Mqe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(zA.$$.fragment,f),E(QA.$$.fragment,f),E(_f.$$.fragment,f),E(WA.$$.fragment,f),E(HA.$$.fragment,f),E(YA.$$.fragment,f),E(pg.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(ey.$$.fragment,f),E(ty.$$.fragment,f),E(Wg.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(dy.$$.fragment,f),E(Th.$$.fragment,f),E(Mh.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(py.$$.fragment,f),E(jh.$$.fragment,f),E(Dh.$$.fragment,f),E(uy.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(Vh.$$.fragment,f),E(Ty.$$.fragment,f),E(Su.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(Bu.$$.fragment,f),E(Ay.$$.fragment,f),E(T_.$$.fragment,f),E(yy.$$.fragment,f),E(Ly.$$.fragment,f),E($y.$$.fragment,f),E(E_.$$.fragment,f),E(ky.$$.fragment,f),E(s2.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(i2.$$.fragment,f),E(Iy.$$.fragment,f),E(z2.$$.fragment,f),E(qy.$$.fragment,f),E(Ny.$$.fragment,f),E(Dy.$$.fragment,f),E(W2.$$.fragment,f),E(Gy.$$.fragment,f),E(m1.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(h1.$$.fragment,f),E(Qy.$$.fragment,f),E(db.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(fb.$$.fragment,f),E(Yy.$$.fragment,f),E(Gb.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(oL.$$.fragment,f),E(Vb.$$.fragment,f),E(rL.$$.fragment,f),E(Jb.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(sL.$$.fragment,f),E(Kb.$$.fragment,f),E(lL.$$.fragment,f),E(R4.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(P4.$$.fragment,f),E(mL.$$.fragment,f),E(Mv.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(Cv.$$.fragment,f),E(_L.$$.fragment,f),E(yv.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(xv.$$.fragment,f),E(ML.$$.fragment,f),E(Ov.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(Xv.$$.fragment,f),E(yL.$$.fragment,f),E(Wv.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(Uv.$$.fragment,f),E(SL.$$.fragment,f),E(nF.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(lF.$$.fragment,f),E(qL.$$.fragment,f),E(gF.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(pF.$$.fragment,f),E(OL.$$.fragment,f),E(AF.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(QL.$$.fragment,f),E(LF.$$.fragment,f),E(WL.$$.fragment,f),E(SF.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(BF.$$.fragment,f),E(ZL.$$.fragment,f),E(DF.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(OF.$$.fragment,f),E(a8.$$.fragment,f),E(WF.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(UF.$$.fragment,f),E(d8.$$.fragment,f),E(ZF.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(o0.$$.fragment,f),E(p8.$$.fragment,f),E(a0.$$.fragment,f),E(u8.$$.fragment,f),E(_8.$$.fragment,f),E(v8.$$.fragment,f),E(s0.$$.fragment,f),E(F8.$$.fragment,f),E(m0.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(h0.$$.fragment,f),E(w8.$$.fragment,f),E(_0.$$.fragment,f),E(A8.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(v0.$$.fragment,f),E($8.$$.fragment,f),E(c6.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(B8.$$.fragment,f),E(m6.$$.fragment,f),E(P8.$$.fragment,f),E(I6.$$.fragment,f),E(I8.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(N6.$$.fragment,f),E(D8.$$.fragment,f),E(Y6.$$.fragment,f),E(G8.$$.fragment,f),E(O8.$$.fragment,f),E(X8.$$.fragment,f),E(Z6.$$.fragment,f),E(z8.$$.fragment,f),E(tT.$$.fragment,f),E(Q8.$$.fragment,f),E(W8.$$.fragment,f),E(U8.$$.fragment,f),E(nT.$$.fragment,f),E(J8.$$.fragment,f),E(AT.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(ex.$$.fragment,f),E(LT.$$.fragment,f),E(ox.$$.fragment,f),E(jT.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(GT.$$.fragment,f),E(sx.$$.fragment,f),E(hM.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(uM.$$.fragment,f),E(fx.$$.fragment,f),E(BM.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(IM.$$.fragment,f),E(ux.$$.fragment,f),E(jM.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(GM.$$.fragment,f),E(Mx.$$.fragment,f),E(VM.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(zM.$$.fragment,f),E(yx.$$.fragment,f),E(mE.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(hE.$$.fragment,f),E(Sx.$$.fragment,f),E(PE.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(qE.$$.fragment,f),E(qx.$$.fragment,f),E(jE.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E(GE.$$.fragment,f),E(Ox.$$.fragment,f),E(VE.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Qx.$$.fragment,f),E(zE.$$.fragment,f),E(Wx.$$.fragment,f),E(_C.$$.fragment,f),E(Hx.$$.fragment,f),E(Ux.$$.fragment,f),E(Yx.$$.fragment,f),E(vC.$$.fragment,f),E(Kx.$$.fragment,f),E(xC.$$.fragment,f),E(Zx.$$.fragment,f),E(e7.$$.fragment,f),E(r7.$$.fragment,f),E(kC.$$.fragment,f),E(t7.$$.fragment,f),E(XC.$$.fragment,f),E(a7.$$.fragment,f),E(n7.$$.fragment,f),E(l7.$$.fragment,f),E(QC.$$.fragment,f),E(i7.$$.fragment,f),E(t5.$$.fragment,f),E(d7.$$.fragment,f),E(c7.$$.fragment,f),E(m7.$$.fragment,f),E(n5.$$.fragment,f),E(g7.$$.fragment,f),E(p5.$$.fragment,f),E(h7.$$.fragment,f),E(p7.$$.fragment,f),E(_7.$$.fragment,f),E(_5.$$.fragment,f),E(b7.$$.fragment,f),E(L5.$$.fragment,f),E(v7.$$.fragment,f),E(F7.$$.fragment,f),E(M7.$$.fragment,f),E($5.$$.fragment,f),E(E7.$$.fragment,f),E(G5.$$.fragment,f),E(C7.$$.fragment,f),E(w7.$$.fragment,f),E(y7.$$.fragment,f),E(V5.$$.fragment,f),E(L7.$$.fragment,f),E(K5.$$.fragment,f),E(x7.$$.fragment,f),E($7.$$.fragment,f),E(S7.$$.fragment,f),E(e3.$$.fragment,f),E(R7.$$.fragment,f),E(d3.$$.fragment,f),E(B7.$$.fragment,f),E(P7.$$.fragment,f),E(q7.$$.fragment,f),E(f3.$$.fragment,f),E(N7.$$.fragment,f),E(g3.$$.fragment,f),E(j7.$$.fragment,f),E(D7.$$.fragment,f),E(O7.$$.fragment,f),E(p3.$$.fragment,f),E(V7.$$.fragment,f),E(b3.$$.fragment,f),E(z7.$$.fragment,f),E(Q7.$$.fragment,f),E(H7.$$.fragment,f),E(F3.$$.fragment,f),E(U7.$$.fragment,f),E(M3.$$.fragment,f),Mqe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(zA.$$.fragment,f),C(QA.$$.fragment,f),C(_f.$$.fragment,f),C(WA.$$.fragment,f),C(HA.$$.fragment,f),C(YA.$$.fragment,f),C(pg.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(ey.$$.fragment,f),C(ty.$$.fragment,f),C(Wg.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(dy.$$.fragment,f),C(Th.$$.fragment,f),C(Mh.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(py.$$.fragment,f),C(jh.$$.fragment,f),C(Dh.$$.fragment,f),C(uy.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(Vh.$$.fragment,f),C(Ty.$$.fragment,f),C(Su.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(Bu.$$.fragment,f),C(Ay.$$.fragment,f),C(T_.$$.fragment,f),C(yy.$$.fragment,f),C(Ly.$$.fragment,f),C($y.$$.fragment,f),C(E_.$$.fragment,f),C(ky.$$.fragment,f),C(s2.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(i2.$$.fragment,f),C(Iy.$$.fragment,f),C(z2.$$.fragment,f),C(qy.$$.fragment,f),C(Ny.$$.fragment,f),C(Dy.$$.fragment,f),C(W2.$$.fragment,f),C(Gy.$$.fragment,f),C(m1.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(h1.$$.fragment,f),C(Qy.$$.fragment,f),C(db.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(fb.$$.fragment,f),C(Yy.$$.fragment,f),C(Gb.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(oL.$$.fragment,f),C(Vb.$$.fragment,f),C(rL.$$.fragment,f),C(Jb.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(sL.$$.fragment,f),C(Kb.$$.fragment,f),C(lL.$$.fragment,f),C(R4.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(P4.$$.fragment,f),C(mL.$$.fragment,f),C(Mv.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(Cv.$$.fragment,f),C(_L.$$.fragment,f),C(yv.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(xv.$$.fragment,f),C(ML.$$.fragment,f),C(Ov.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(Xv.$$.fragment,f),C(yL.$$.fragment,f),C(Wv.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(Uv.$$.fragment,f),C(SL.$$.fragment,f),C(nF.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(lF.$$.fragment,f),C(qL.$$.fragment,f),C(gF.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(pF.$$.fragment,f),C(OL.$$.fragment,f),C(AF.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(QL.$$.fragment,f),C(LF.$$.fragment,f),C(WL.$$.fragment,f),C(SF.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(BF.$$.fragment,f),C(ZL.$$.fragment,f),C(DF.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(OF.$$.fragment,f),C(a8.$$.fragment,f),C(WF.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(UF.$$.fragment,f),C(d8.$$.fragment,f),C(ZF.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(o0.$$.fragment,f),C(p8.$$.fragment,f),C(a0.$$.fragment,f),C(u8.$$.fragment,f),C(_8.$$.fragment,f),C(v8.$$.fragment,f),C(s0.$$.fragment,f),C(F8.$$.fragment,f),C(m0.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(h0.$$.fragment,f),C(w8.$$.fragment,f),C(_0.$$.fragment,f),C(A8.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(v0.$$.fragment,f),C($8.$$.fragment,f),C(c6.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(B8.$$.fragment,f),C(m6.$$.fragment,f),C(P8.$$.fragment,f),C(I6.$$.fragment,f),C(I8.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(N6.$$.fragment,f),C(D8.$$.fragment,f),C(Y6.$$.fragment,f),C(G8.$$.fragment,f),C(O8.$$.fragment,f),C(X8.$$.fragment,f),C(Z6.$$.fragment,f),C(z8.$$.fragment,f),C(tT.$$.fragment,f),C(Q8.$$.fragment,f),C(W8.$$.fragment,f),C(U8.$$.fragment,f),C(nT.$$.fragment,f),C(J8.$$.fragment,f),C(AT.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(ex.$$.fragment,f),C(LT.$$.fragment,f),C(ox.$$.fragment,f),C(jT.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(GT.$$.fragment,f),C(sx.$$.fragment,f),C(hM.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(uM.$$.fragment,f),C(fx.$$.fragment,f),C(BM.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(IM.$$.fragment,f),C(ux.$$.fragment,f),C(jM.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(GM.$$.fragment,f),C(Mx.$$.fragment,f),C(VM.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(zM.$$.fragment,f),C(yx.$$.fragment,f),C(mE.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(hE.$$.fragment,f),C(Sx.$$.fragment,f),C(PE.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(qE.$$.fragment,f),C(qx.$$.fragment,f),C(jE.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C(GE.$$.fragment,f),C(Ox.$$.fragment,f),C(VE.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Qx.$$.fragment,f),C(zE.$$.fragment,f),C(Wx.$$.fragment,f),C(_C.$$.fragment,f),C(Hx.$$.fragment,f),C(Ux.$$.fragment,f),C(Yx.$$.fragment,f),C(vC.$$.fragment,f),C(Kx.$$.fragment,f),C(xC.$$.fragment,f),C(Zx.$$.fragment,f),C(e7.$$.fragment,f),C(r7.$$.fragment,f),C(kC.$$.fragment,f),C(t7.$$.fragment,f),C(XC.$$.fragment,f),C(a7.$$.fragment,f),C(n7.$$.fragment,f),C(l7.$$.fragment,f),C(QC.$$.fragment,f),C(i7.$$.fragment,f),C(t5.$$.fragment,f),C(d7.$$.fragment,f),C(c7.$$.fragment,f),C(m7.$$.fragment,f),C(n5.$$.fragment,f),C(g7.$$.fragment,f),C(p5.$$.fragment,f),C(h7.$$.fragment,f),C(p7.$$.fragment,f),C(_7.$$.fragment,f),C(_5.$$.fragment,f),C(b7.$$.fragment,f),C(L5.$$.fragment,f),C(v7.$$.fragment,f),C(F7.$$.fragment,f),C(M7.$$.fragment,f),C($5.$$.fragment,f),C(E7.$$.fragment,f),C(G5.$$.fragment,f),C(C7.$$.fragment,f),C(w7.$$.fragment,f),C(y7.$$.fragment,f),C(V5.$$.fragment,f),C(L7.$$.fragment,f),C(K5.$$.fragment,f),C(x7.$$.fragment,f),C($7.$$.fragment,f),C(S7.$$.fragment,f),C(e3.$$.fragment,f),C(R7.$$.fragment,f),C(d3.$$.fragment,f),C(B7.$$.fragment,f),C(P7.$$.fragment,f),C(q7.$$.fragment,f),C(f3.$$.fragment,f),C(N7.$$.fragment,f),C(g3.$$.fragment,f),C(j7.$$.fragment,f),C(D7.$$.fragment,f),C(O7.$$.fragment,f),C(p3.$$.fragment,f),C(V7.$$.fragment,f),C(b3.$$.fragment,f),C(z7.$$.fragment,f),C(Q7.$$.fragment,f),C(H7.$$.fragment,f),C(F3.$$.fragment,f),C(U7.$$.fragment,f),C(M3.$$.fragment,f),Mqe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(mf),f&&t(et),f&&t(Ne),f&&t(ze),f&&t(hf),w(Ma,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(vPe),f&&t(hi),w(zA),f&&t(FPe),f&&t($n),f&&t(TPe),w(QA,f),f&&t(MPe),f&&t(g$),f&&t(EPe),w(_f,f),f&&t(CPe),f&&t(pi),w(WA),f&&t(wPe),f&&t(Co),w(HA),w(YA),w(pg),w(KA),f&&t(APe),f&&t(_i),w(ZA),f&&t(yPe),f&&t(wo),w(ey),w(ty),w(Wg),w(ay),f&&t(LPe),f&&t(bi),w(ny),f&&t(xPe),f&&t(Ao),w(sy),w(dy),w(Th),w(Mh),w(cy),f&&t($Pe),f&&t(vi),w(fy),f&&t(kPe),f&&t(yo),w(my),w(py),w(jh),w(Dh),w(uy),f&&t(SPe),f&&t(Ti),w(_y),f&&t(RPe),f&&t(Lo),w(by),w(Fy),w(Vh),w(Ty),w(Su),f&&t(BPe),f&&t(Ci),w(My),f&&t(PPe),f&&t(xo),w(Ey),w(wy),w(Bu),w(Ay),w(T_),f&&t(IPe),f&&t(yi),w(yy),f&&t(qPe),f&&t($o),w(Ly),w($y),w(E_),w(ky),w(s2),f&&t(NPe),f&&t($i),w(Sy),f&&t(jPe),f&&t(ko),w(Ry),w(Py),w(i2),w(Iy),w(z2),f&&t(DPe),f&&t(Ri),w(qy),f&&t(GPe),f&&t(So),w(Ny),w(Dy),w(W2),w(Gy),w(m1),f&&t(OPe),f&&t(Ii),w(Oy),f&&t(VPe),f&&t(Ro),w(Vy),w(zy),w(h1),w(Qy),w(db),f&&t(XPe),f&&t(ji),w(Wy),f&&t(zPe),f&&t(Bo),w(Hy),w(Jy),w(fb),w(Yy),w(Gb),f&&t(QPe),f&&t(Oi),w(Ky),f&&t(WPe),f&&t(Po),w(Zy),w(oL),w(Vb),w(rL),w(Jb),f&&t(HPe),f&&t(zi),w(tL),f&&t(UPe),f&&t(Io),w(aL),w(sL),w(Kb),w(lL),w(R4),f&&t(JPe),f&&t(Hi),w(iL),f&&t(YPe),f&&t(qo),w(dL),w(fL),w(P4),w(mL),w(Mv),f&&t(KPe),f&&t(Yi),w(gL),f&&t(ZPe),f&&t(No),w(hL),w(uL),w(Cv),w(_L),w(yv),f&&t(eIe),f&&t(ed),w(bL),f&&t(oIe),f&&t(jo),w(vL),w(TL),w(xv),w(ML),w(Ov),f&&t(rIe),f&&t(td),w(EL),f&&t(tIe),f&&t(Do),w(CL),w(AL),w(Xv),w(yL),w(Wv),f&&t(aIe),f&&t(sd),w(LL),f&&t(nIe),f&&t(Go),w(xL),w(kL),w(Uv),w(SL),w(nF),f&&t(sIe),f&&t(dd),w(RL),f&&t(lIe),f&&t(Oo),w(BL),w(IL),w(lF),w(qL),w(gF),f&&t(iIe),f&&t(md),w(NL),f&&t(dIe),f&&t(Vo),w(jL),w(GL),w(pF),w(OL),w(AF),f&&t(cIe),f&&t(pd),w(VL),f&&t(fIe),f&&t(Xo),w(XL),w(QL),w(LF),w(WL),w(SF),f&&t(mIe),f&&t(bd),w(UL),f&&t(gIe),f&&t(zo),w(JL),w(KL),w(BF),w(ZL),w(DF),f&&t(hIe),f&&t(Td),w(e8),f&&t(pIe),f&&t(Qo),w(o8),w(t8),w(OF),w(a8),w(WF),f&&t(uIe),f&&t(wd),w(n8),f&&t(_Ie),f&&t(Wo),w(s8),w(i8),w(UF),w(d8),w(ZF),f&&t(bIe),f&&t(Ld),w(f8),f&&t(vIe),f&&t(Ho),w(m8),w(h8),w(o0),w(p8),w(a0),f&&t(FIe),f&&t(kd),w(u8),f&&t(TIe),f&&t(Uo),w(_8),w(v8),w(s0),w(F8),w(m0),f&&t(MIe),f&&t(Bd),w(T8),f&&t(EIe),f&&t(Jo),w(M8),w(C8),w(h0),w(w8),w(_0),f&&t(CIe),f&&t(qd),w(A8),f&&t(wIe),f&&t(Yo),w(y8),w(x8),w(v0),w($8),w(c6),f&&t(AIe),f&&t(Dd),w(k8),f&&t(yIe),f&&t(Ko),w(S8),w(B8),w(m6),w(P8),w(I6),f&&t(LIe),f&&t(Vd),w(I8),f&&t(xIe),f&&t(Zo),w(q8),w(j8),w(N6),w(D8),w(Y6),f&&t($Ie),f&&t(Qd),w(G8),f&&t(kIe),f&&t(er),w(O8),w(X8),w(Z6),w(z8),w(tT),f&&t(SIe),f&&t(Jd),w(Q8),f&&t(RIe),f&&t(or),w(W8),w(U8),w(nT),w(J8),w(AT),f&&t(BIe),f&&t(Zd),w(Y8),f&&t(PIe),f&&t(rr),w(K8),w(ex),w(LT),w(ox),w(jT),f&&t(IIe),f&&t(rc),w(rx),f&&t(qIe),f&&t(tr),w(tx),w(nx),w(GT),w(sx),w(hM),f&&t(NIe),f&&t(nc),w(lx),f&&t(jIe),f&&t(ar),w(ix),w(cx),w(uM),w(fx),w(BM),f&&t(DIe),f&&t(ic),w(mx),f&&t(GIe),f&&t(nr),w(gx),w(px),w(IM),w(ux),w(jM),f&&t(OIe),f&&t(fc),w(bx),f&&t(VIe),f&&t(sr),w(vx),w(Tx),w(GM),w(Mx),w(VM),f&&t(XIe),f&&t(hc),w(Ex),f&&t(zIe),f&&t(lr),w(Cx),w(Ax),w(zM),w(yx),w(mE),f&&t(QIe),f&&t(_c),w(Lx),f&&t(WIe),f&&t(ir),w(xx),w(kx),w(hE),w(Sx),w(PE),f&&t(HIe),f&&t(Fc),w(Rx),f&&t(UIe),f&&t(dr),w(Bx),w(Ix),w(qE),w(qx),w(jE),f&&t(JIe),f&&t(Ec),w(Nx),f&&t(YIe),f&&t(cr),w(jx),w(Gx),w(GE),w(Ox),w(VE),f&&t(KIe),f&&t(Ac),w(Vx),f&&t(ZIe),f&&t(fr),w(Xx),w(Qx),w(zE),w(Wx),w(_C),f&&t(eqe),f&&t(xc),w(Hx),f&&t(oqe),f&&t(mr),w(Ux),w(Yx),w(vC),w(Kx),w(xC),f&&t(rqe),f&&t(Sc),w(Zx),f&&t(tqe),f&&t(gr),w(e7),w(r7),w(kC),w(t7),w(XC),f&&t(aqe),f&&t(Pc),w(a7),f&&t(nqe),f&&t(hr),w(n7),w(l7),w(QC),w(i7),w(t5),f&&t(sqe),f&&t(Nc),w(d7),f&&t(lqe),f&&t(pr),w(c7),w(m7),w(n5),w(g7),w(p5),f&&t(iqe),f&&t(Gc),w(h7),f&&t(dqe),f&&t(ur),w(p7),w(_7),w(_5),w(b7),w(L5),f&&t(cqe),f&&t(Xc),w(v7),f&&t(fqe),f&&t(_r),w(F7),w(M7),w($5),w(E7),w(G5),f&&t(mqe),f&&t(Wc),w(C7),f&&t(gqe),f&&t(br),w(w7),w(y7),w(V5),w(L7),w(K5),f&&t(hqe),f&&t(Jc),w(x7),f&&t(pqe),f&&t(vr),w($7),w(S7),w(e3),w(R7),w(d3),f&&t(uqe),f&&t(Zc),w(B7),f&&t(_qe),f&&t(Fr),w(P7),w(q7),w(f3),w(N7),w(g3),f&&t(bqe),f&&t(rf),w(j7),f&&t(vqe),f&&t(Tr),w(D7),w(O7),w(p3),w(V7),w(b3),f&&t(Fqe),f&&t(nf),w(z7),f&&t(Tqe),f&&t(Mr),w(Q7),w(H7),w(F3),w(U7),w(M3)}}}const Kyt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Zyt(A){return Zwt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class sLt extends Uwt{constructor(g){super();Jwt(this,g,Zyt,Yyt,Ywt,{})}}export{sLt as default,Kyt as metadata};
