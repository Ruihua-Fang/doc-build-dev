import{S as Ps,i as As,s as Ts,e as s,k as c,w as m,t as l,M as xs,c as a,d as o,m as f,a as r,x as y,h as i,b as p,F as t,g as h,y as v,L as Cs,q as _,o as b,B as k,v as Ds}from"../chunks/vendor-6b77c823.js";import{I as bt}from"../chunks/IconCopyLink-7a11ce68.js";import{C as x}from"../chunks/CodeBlock-3a8b25a8.js";function Is(_i){let C,kt,D,S,Oe,z,wo,Le,Eo,$t,ue,go,wt,w,Re,Po,Ao,qe,To,xo,Se,Co,Do,Ne,Io,Et,me,Oo,gt,ye,Lo,Pt,G,At,ve,Ro,Tt,Y,xt,_e,qo,Ct,I,N,je,K,So,Me,No,Dt,P,jo,Be,Mo,Bo,Fe,Fo,Ho,It,be,Wo,Ot,Q,Lt,ke,Uo,Rt,E,He,Jo,zo,We,Go,Yo,Ue,Ko,Qo,Je,Vo,qt,j,Xo,ze,Zo,el,St,V,Nt,$e,tl,jt,O,M,Ge,X,ol,Ye,ll,Mt,A,il,Ke,sl,al,Qe,rl,nl,Bt,Z,Ft,we,hl,Ht,L,B,Ve,ee,cl,Xe,fl,Wt,d,pl,Ze,dl,ul,et,ml,yl,tt,vl,_l,ot,bl,kl,lt,$l,wl,it,El,gl,Ut,te,Jt,T,Pl,st,Al,Tl,at,xl,Cl,zt,oe,Gt,Ee,Dl,Yt,le,Kt,ge,Il,Qt,R,F,rt,ie,Ol,nt,Ll,Vt,H,Rl,ht,ql,Sl,Xt,se,Zt,Pe,Nl,eo,u,ae,jl,ct,Ml,Bl,Fl,q,Hl,ft,Wl,Ul,pt,Jl,zl,Gl,re,Yl,dt,Kl,Ql,Vl,ne,Xl,ut,Zl,ei,ti,he,oi,mt,li,ii,si,ce,ai,yt,ri,ni,to,Ae,hi,oo,fe,lo,Te,ci,io,W,pe,fi,vt,pi,di,ui,de,mi,_t,yi,vi,so;return z=new bt({}),G=new x({props:{code:"pip install transformers[dev]",highlighted:"pip install transformers[dev]"}}),Y=new x({props:{code:"pip install -e .[dev]",highlighted:"pip install -e .[dev]"}}),K=new bt({}),Q=new x({props:{code:"python utils/tests_fetcher.py",highlighted:"python utils/tests_fetcher.py"}}),V=new x({props:{code:"python -m pytest -n 8 --dist=loadfile -rA -s $(cat test_list.txt)",highlighted:'python -m pytest -n 8 --dist=loadfile -rA -s $(<span class="hljs-built_in">cat</span> test_list.txt)'}}),X=new bt({}),Z=new x({props:{code:"make html",highlighted:"make html"}}),ee=new bt({}),te=new x({props:{code:"make style",highlighted:"make style"}}),oe=new x({props:{code:"make quality",highlighted:"make quality"}}),le=new x({props:{code:"make fixup",highlighted:"make fixup"}}),ie=new bt({}),se=new x({props:{code:"make repo-consistency",highlighted:"make repo-consistency"}}),fe=new x({props:{code:"make fix-copies",highlighted:"make fix-copies"}}),{c(){C=s("meta"),kt=c(),D=s("h1"),S=s("a"),Oe=s("span"),m(z.$$.fragment),wo=c(),Le=s("span"),Eo=l("Checks on a Pull Request"),$t=c(),ue=s("p"),go=l("When you open a pull request on \u{1F917} Transformers, a fair number of checks will be run to make sure the patch you are adding is not breaking anything existing. Those checks are of four types:"),wt=c(),w=s("ul"),Re=s("li"),Po=l("regular tests"),Ao=c(),qe=s("li"),To=l("documentation build"),xo=c(),Se=s("li"),Co=l("code and documentation style"),Do=c(),Ne=s("li"),Io=l("general repository consistency"),Et=c(),me=s("p"),Oo=l("In this document, we will take a stab at explaining what those various checks are and the reason behind them, as well as how to debug them locally if one of them fails on your PR."),gt=c(),ye=s("p"),Lo=l("Note that they all require you to have a dev install:"),Pt=c(),m(G.$$.fragment),At=c(),ve=s("p"),Ro=l("or for an editable install:"),Tt=c(),m(Y.$$.fragment),xt=c(),_e=s("p"),qo=l("inside the Transformers repo."),Ct=c(),I=s("h2"),N=s("a"),je=s("span"),m(K.$$.fragment),So=c(),Me=s("span"),No=l("Tests"),Dt=c(),P=s("p"),jo=l("All the jobs that begin with "),Be=s("code"),Mo=l("ci/circleci: run_tests_"),Bo=l(" run parts of the Transformers testing suite. Each of those jobs focuses on a part of the library in a certain environment: for instance "),Fe=s("code"),Fo=l("ci/circleci: run_tests_pipelines_tf"),Ho=l(" runs the pipelines test in an environment where TensorFlow only is installed."),It=c(),be=s("p"),Wo=l("Note that to avoid running tests when there is no real change in the modules they are testing, only part of the test suite is run each time: a utility is run to determine the differences in the library between before and after the PR (what GitHub shows you in the \u201CFiles changes\u201D tab) and picks the tests impacted by that diff. That utility can be run locally with:"),Ot=c(),m(Q.$$.fragment),Lt=c(),ke=s("p"),Uo=l("from the root of the Transformers repo. It will:"),Rt=c(),E=s("ol"),He=s("li"),Jo=l("Check for each file in the diff if the changes are in the code or only in comments or docstrings. Only the files with real code changes are kept."),zo=c(),We=s("li"),Go=l("Build an internal map that gives for each file of the source code of the library all the files it recursively impacts. Module A is said to impact module B if module B imports module A. For the recursive impact, we need a chain of modules going from module A to module B in which each module imports the previous one."),Yo=c(),Ue=s("li"),Ko=l("Apply this map on the files gathered in step 1, which  gives us the list of model files impacted by the PR."),Qo=c(),Je=s("li"),Vo=l("Map each of those files to their corresponding test file(s) and get the list of tests to run."),qt=c(),j=s("p"),Xo=l("When executing the script locally, you should get the results of step 1, 3 and 4 printed and thus know which tests are run. The script will also create a file named "),ze=s("code"),Zo=l("test_list.txt"),el=l(" which contains the list of tests to run, and you can run them locally with the following command:"),St=c(),m(V.$$.fragment),Nt=c(),$e=s("p"),tl=l("Just in case anything slipped through the cracks, the full test suite is also run daily."),jt=c(),O=s("h2"),M=s("a"),Ge=s("span"),m(X.$$.fragment),ol=c(),Ye=s("span"),ll=l("Documentation build"),Mt=c(),A=s("p"),il=l("The job "),Ke=s("code"),sl=l("ci/circleci: build_doc"),al=l(" runs a build of the documentation just to make sure everything will be okay once your PR is merged. If that steps fails, you can inspect it locally by going into the "),Qe=s("code"),rl=l("docs"),nl=l(" folder of the Transformers repo and then typing"),Bt=c(),m(Z.$$.fragment),Ft=c(),we=s("p"),hl=l("Sphinx is not known for its helpful error messages, so you might have to try a few things to really find the source of the error."),Ht=c(),L=s("h2"),B=s("a"),Ve=s("span"),m(ee.$$.fragment),cl=c(),Xe=s("span"),fl=l("Code and documentation style"),Wt=c(),d=s("p"),pl=l("Code formatting is applied to all the source files, the examples and the tests using "),Ze=s("code"),dl=l("black"),ul=l(" and "),et=s("code"),ml=l("isort"),yl=l(". We also have a custom tool taking care of the formatting of docstrings and "),tt=s("code"),vl=l("rst"),_l=l(" files ("),ot=s("code"),bl=l("utils/style_doc.py"),kl=l("), as well as the order of the lazy imports performed in the Transformers "),lt=s("code"),$l=l("__init__.py"),wl=l(" files ("),it=s("code"),El=l("utils/custom_init_isort.py"),gl=l("). All of this can be launched by executing"),Ut=c(),m(te.$$.fragment),Jt=c(),T=s("p"),Pl=l("The CI checks those have been applied inside the "),st=s("code"),Al=l("ci/circleci: check_code_quality"),Tl=l(" check. It also runs "),at=s("code"),xl=l("flake8"),Cl=l(", that will have a basic look at your code and will complain if it finds an undefined variable, or one that is not used. To run that check locally, use"),zt=c(),m(oe.$$.fragment),Gt=c(),Ee=s("p"),Dl=l("This can take a lot of time, so to run the same thing on only the files you modified in the current branch, run"),Yt=c(),m(le.$$.fragment),Kt=c(),ge=s("p"),Il=l("This last command will also run all the additional checks for the repository consistency. Let\u2019s have a look at them."),Qt=c(),R=s("h2"),F=s("a"),rt=s("span"),m(ie.$$.fragment),Ol=c(),nt=s("span"),Ll=l("Repository consistency"),Vt=c(),H=s("p"),Rl=l("This regroups all the tests to make sure your PR leaves the repository in a good state, and is performed by the "),ht=s("code"),ql=l("ci/circleci: check_repository_consistency"),Sl=l(" check. You can locally run that check by executing the following:"),Xt=c(),m(se.$$.fragment),Zt=c(),Pe=s("p"),Nl=l("This checks that:"),eo=c(),u=s("ul"),ae=s("li"),jl=l("All objects added to the init are documented (performed by "),ct=s("code"),Ml=l("utils/check_repo.py"),Bl=l(")"),Fl=c(),q=s("li"),Hl=l("All "),ft=s("code"),Wl=l("__init__.py"),Ul=l(" files have the same content in their two sections (performed by "),pt=s("code"),Jl=l("utils/check_inits.py"),zl=l(")"),Gl=c(),re=s("li"),Yl=l("All code identified as a copy from another module is consistent with the original (performed by "),dt=s("code"),Kl=l("utils/check_copies.py"),Ql=l(")"),Vl=c(),ne=s("li"),Xl=l("The translations of the READMEs and the index of the doc have the same model list as the main README (performed by "),ut=s("code"),Zl=l("utils/check_copies.py"),ei=l(")"),ti=c(),he=s("li"),oi=l("The auto-generated tables in the documentation are up to date (performed by "),mt=s("code"),li=l("utils/check_table.py"),ii=l(")"),si=c(),ce=s("li"),ai=l("The library has all objects available even if not all optional dependencies are installed (performed by "),yt=s("code"),ri=l("utils/check_dummies.py"),ni=l(")"),to=c(),Ae=s("p"),hi=l("Should this check fail, the first two items require manual fixing, the last four can be fixed automatically for you by running the command"),oo=c(),m(fe.$$.fragment),lo=c(),Te=s("p"),ci=l("Additional checks concern PRs that add new models, mainly that:"),io=c(),W=s("ul"),pe=s("li"),fi=l("All models added are in an Auto-mapping (performed by "),vt=s("code"),pi=l("utils/check_repo.py"),di=l(")"),ui=c(),de=s("li"),mi=l("All models are properly tested (performed by "),_t=s("code"),yi=l("utils/check_repo.py"),vi=l(")"),this.h()},l(e){const n=xs('[data-svelte="svelte-1phssyn"]',document.head);C=a(n,"META",{name:!0,content:!0}),n.forEach(o),kt=f(e),D=a(e,"H1",{class:!0});var ao=r(D);S=a(ao,"A",{id:!0,class:!0,href:!0});var bi=r(S);Oe=a(bi,"SPAN",{});var ki=r(Oe);y(z.$$.fragment,ki),ki.forEach(o),bi.forEach(o),wo=f(ao),Le=a(ao,"SPAN",{});var $i=r(Le);Eo=i($i,"Checks on a Pull Request"),$i.forEach(o),ao.forEach(o),$t=f(e),ue=a(e,"P",{});var wi=r(ue);go=i(wi,"When you open a pull request on \u{1F917} Transformers, a fair number of checks will be run to make sure the patch you are adding is not breaking anything existing. Those checks are of four types:"),wi.forEach(o),wt=f(e),w=a(e,"UL",{});var U=r(w);Re=a(U,"LI",{});var Ei=r(Re);Po=i(Ei,"regular tests"),Ei.forEach(o),Ao=f(U),qe=a(U,"LI",{});var gi=r(qe);To=i(gi,"documentation build"),gi.forEach(o),xo=f(U),Se=a(U,"LI",{});var Pi=r(Se);Co=i(Pi,"code and documentation style"),Pi.forEach(o),Do=f(U),Ne=a(U,"LI",{});var Ai=r(Ne);Io=i(Ai,"general repository consistency"),Ai.forEach(o),U.forEach(o),Et=f(e),me=a(e,"P",{});var Ti=r(me);Oo=i(Ti,"In this document, we will take a stab at explaining what those various checks are and the reason behind them, as well as how to debug them locally if one of them fails on your PR."),Ti.forEach(o),gt=f(e),ye=a(e,"P",{});var xi=r(ye);Lo=i(xi,"Note that they all require you to have a dev install:"),xi.forEach(o),Pt=f(e),y(G.$$.fragment,e),At=f(e),ve=a(e,"P",{});var Ci=r(ve);Ro=i(Ci,"or for an editable install:"),Ci.forEach(o),Tt=f(e),y(Y.$$.fragment,e),xt=f(e),_e=a(e,"P",{});var Di=r(_e);qo=i(Di,"inside the Transformers repo."),Di.forEach(o),Ct=f(e),I=a(e,"H2",{class:!0});var ro=r(I);N=a(ro,"A",{id:!0,class:!0,href:!0});var Ii=r(N);je=a(Ii,"SPAN",{});var Oi=r(je);y(K.$$.fragment,Oi),Oi.forEach(o),Ii.forEach(o),So=f(ro),Me=a(ro,"SPAN",{});var Li=r(Me);No=i(Li,"Tests"),Li.forEach(o),ro.forEach(o),Dt=f(e),P=a(e,"P",{});var xe=r(P);jo=i(xe,"All the jobs that begin with "),Be=a(xe,"CODE",{});var Ri=r(Be);Mo=i(Ri,"ci/circleci: run_tests_"),Ri.forEach(o),Bo=i(xe," run parts of the Transformers testing suite. Each of those jobs focuses on a part of the library in a certain environment: for instance "),Fe=a(xe,"CODE",{});var qi=r(Fe);Fo=i(qi,"ci/circleci: run_tests_pipelines_tf"),qi.forEach(o),Ho=i(xe," runs the pipelines test in an environment where TensorFlow only is installed."),xe.forEach(o),It=f(e),be=a(e,"P",{});var Si=r(be);Wo=i(Si,"Note that to avoid running tests when there is no real change in the modules they are testing, only part of the test suite is run each time: a utility is run to determine the differences in the library between before and after the PR (what GitHub shows you in the \u201CFiles changes\u201D tab) and picks the tests impacted by that diff. That utility can be run locally with:"),Si.forEach(o),Ot=f(e),y(Q.$$.fragment,e),Lt=f(e),ke=a(e,"P",{});var Ni=r(ke);Uo=i(Ni,"from the root of the Transformers repo. It will:"),Ni.forEach(o),Rt=f(e),E=a(e,"OL",{});var J=r(E);He=a(J,"LI",{});var ji=r(He);Jo=i(ji,"Check for each file in the diff if the changes are in the code or only in comments or docstrings. Only the files with real code changes are kept."),ji.forEach(o),zo=f(J),We=a(J,"LI",{});var Mi=r(We);Go=i(Mi,"Build an internal map that gives for each file of the source code of the library all the files it recursively impacts. Module A is said to impact module B if module B imports module A. For the recursive impact, we need a chain of modules going from module A to module B in which each module imports the previous one."),Mi.forEach(o),Yo=f(J),Ue=a(J,"LI",{});var Bi=r(Ue);Ko=i(Bi,"Apply this map on the files gathered in step 1, which  gives us the list of model files impacted by the PR."),Bi.forEach(o),Qo=f(J),Je=a(J,"LI",{});var Fi=r(Je);Vo=i(Fi,"Map each of those files to their corresponding test file(s) and get the list of tests to run."),Fi.forEach(o),J.forEach(o),qt=f(e),j=a(e,"P",{});var no=r(j);Xo=i(no,"When executing the script locally, you should get the results of step 1, 3 and 4 printed and thus know which tests are run. The script will also create a file named "),ze=a(no,"CODE",{});var Hi=r(ze);Zo=i(Hi,"test_list.txt"),Hi.forEach(o),el=i(no," which contains the list of tests to run, and you can run them locally with the following command:"),no.forEach(o),St=f(e),y(V.$$.fragment,e),Nt=f(e),$e=a(e,"P",{});var Wi=r($e);tl=i(Wi,"Just in case anything slipped through the cracks, the full test suite is also run daily."),Wi.forEach(o),jt=f(e),O=a(e,"H2",{class:!0});var ho=r(O);M=a(ho,"A",{id:!0,class:!0,href:!0});var Ui=r(M);Ge=a(Ui,"SPAN",{});var Ji=r(Ge);y(X.$$.fragment,Ji),Ji.forEach(o),Ui.forEach(o),ol=f(ho),Ye=a(ho,"SPAN",{});var zi=r(Ye);ll=i(zi,"Documentation build"),zi.forEach(o),ho.forEach(o),Mt=f(e),A=a(e,"P",{});var Ce=r(A);il=i(Ce,"The job "),Ke=a(Ce,"CODE",{});var Gi=r(Ke);sl=i(Gi,"ci/circleci: build_doc"),Gi.forEach(o),al=i(Ce," runs a build of the documentation just to make sure everything will be okay once your PR is merged. If that steps fails, you can inspect it locally by going into the "),Qe=a(Ce,"CODE",{});var Yi=r(Qe);rl=i(Yi,"docs"),Yi.forEach(o),nl=i(Ce," folder of the Transformers repo and then typing"),Ce.forEach(o),Bt=f(e),y(Z.$$.fragment,e),Ft=f(e),we=a(e,"P",{});var Ki=r(we);hl=i(Ki,"Sphinx is not known for its helpful error messages, so you might have to try a few things to really find the source of the error."),Ki.forEach(o),Ht=f(e),L=a(e,"H2",{class:!0});var co=r(L);B=a(co,"A",{id:!0,class:!0,href:!0});var Qi=r(B);Ve=a(Qi,"SPAN",{});var Vi=r(Ve);y(ee.$$.fragment,Vi),Vi.forEach(o),Qi.forEach(o),cl=f(co),Xe=a(co,"SPAN",{});var Xi=r(Xe);fl=i(Xi,"Code and documentation style"),Xi.forEach(o),co.forEach(o),Wt=f(e),d=a(e,"P",{});var $=r(d);pl=i($,"Code formatting is applied to all the source files, the examples and the tests using "),Ze=a($,"CODE",{});var Zi=r(Ze);dl=i(Zi,"black"),Zi.forEach(o),ul=i($," and "),et=a($,"CODE",{});var es=r(et);ml=i(es,"isort"),es.forEach(o),yl=i($,". We also have a custom tool taking care of the formatting of docstrings and "),tt=a($,"CODE",{});var ts=r(tt);vl=i(ts,"rst"),ts.forEach(o),_l=i($," files ("),ot=a($,"CODE",{});var os=r(ot);bl=i(os,"utils/style_doc.py"),os.forEach(o),kl=i($,"), as well as the order of the lazy imports performed in the Transformers "),lt=a($,"CODE",{});var ls=r(lt);$l=i(ls,"__init__.py"),ls.forEach(o),wl=i($," files ("),it=a($,"CODE",{});var is=r(it);El=i(is,"utils/custom_init_isort.py"),is.forEach(o),gl=i($,"). All of this can be launched by executing"),$.forEach(o),Ut=f(e),y(te.$$.fragment,e),Jt=f(e),T=a(e,"P",{});var De=r(T);Pl=i(De,"The CI checks those have been applied inside the "),st=a(De,"CODE",{});var ss=r(st);Al=i(ss,"ci/circleci: check_code_quality"),ss.forEach(o),Tl=i(De," check. It also runs "),at=a(De,"CODE",{});var as=r(at);xl=i(as,"flake8"),as.forEach(o),Cl=i(De,", that will have a basic look at your code and will complain if it finds an undefined variable, or one that is not used. To run that check locally, use"),De.forEach(o),zt=f(e),y(oe.$$.fragment,e),Gt=f(e),Ee=a(e,"P",{});var rs=r(Ee);Dl=i(rs,"This can take a lot of time, so to run the same thing on only the files you modified in the current branch, run"),rs.forEach(o),Yt=f(e),y(le.$$.fragment,e),Kt=f(e),ge=a(e,"P",{});var ns=r(ge);Il=i(ns,"This last command will also run all the additional checks for the repository consistency. Let\u2019s have a look at them."),ns.forEach(o),Qt=f(e),R=a(e,"H2",{class:!0});var fo=r(R);F=a(fo,"A",{id:!0,class:!0,href:!0});var hs=r(F);rt=a(hs,"SPAN",{});var cs=r(rt);y(ie.$$.fragment,cs),cs.forEach(o),hs.forEach(o),Ol=f(fo),nt=a(fo,"SPAN",{});var fs=r(nt);Ll=i(fs,"Repository consistency"),fs.forEach(o),fo.forEach(o),Vt=f(e),H=a(e,"P",{});var po=r(H);Rl=i(po,"This regroups all the tests to make sure your PR leaves the repository in a good state, and is performed by the "),ht=a(po,"CODE",{});var ps=r(ht);ql=i(ps,"ci/circleci: check_repository_consistency"),ps.forEach(o),Sl=i(po," check. You can locally run that check by executing the following:"),po.forEach(o),Xt=f(e),y(se.$$.fragment,e),Zt=f(e),Pe=a(e,"P",{});var ds=r(Pe);Nl=i(ds,"This checks that:"),ds.forEach(o),eo=f(e),u=a(e,"UL",{});var g=r(u);ae=a(g,"LI",{});var uo=r(ae);jl=i(uo,"All objects added to the init are documented (performed by "),ct=a(uo,"CODE",{});var us=r(ct);Ml=i(us,"utils/check_repo.py"),us.forEach(o),Bl=i(uo,")"),uo.forEach(o),Fl=f(g),q=a(g,"LI",{});var Ie=r(q);Hl=i(Ie,"All "),ft=a(Ie,"CODE",{});var ms=r(ft);Wl=i(ms,"__init__.py"),ms.forEach(o),Ul=i(Ie," files have the same content in their two sections (performed by "),pt=a(Ie,"CODE",{});var ys=r(pt);Jl=i(ys,"utils/check_inits.py"),ys.forEach(o),zl=i(Ie,")"),Ie.forEach(o),Gl=f(g),re=a(g,"LI",{});var mo=r(re);Yl=i(mo,"All code identified as a copy from another module is consistent with the original (performed by "),dt=a(mo,"CODE",{});var vs=r(dt);Kl=i(vs,"utils/check_copies.py"),vs.forEach(o),Ql=i(mo,")"),mo.forEach(o),Vl=f(g),ne=a(g,"LI",{});var yo=r(ne);Xl=i(yo,"The translations of the READMEs and the index of the doc have the same model list as the main README (performed by "),ut=a(yo,"CODE",{});var _s=r(ut);Zl=i(_s,"utils/check_copies.py"),_s.forEach(o),ei=i(yo,")"),yo.forEach(o),ti=f(g),he=a(g,"LI",{});var vo=r(he);oi=i(vo,"The auto-generated tables in the documentation are up to date (performed by "),mt=a(vo,"CODE",{});var bs=r(mt);li=i(bs,"utils/check_table.py"),bs.forEach(o),ii=i(vo,")"),vo.forEach(o),si=f(g),ce=a(g,"LI",{});var _o=r(ce);ai=i(_o,"The library has all objects available even if not all optional dependencies are installed (performed by "),yt=a(_o,"CODE",{});var ks=r(yt);ri=i(ks,"utils/check_dummies.py"),ks.forEach(o),ni=i(_o,")"),_o.forEach(o),g.forEach(o),to=f(e),Ae=a(e,"P",{});var $s=r(Ae);hi=i($s,"Should this check fail, the first two items require manual fixing, the last four can be fixed automatically for you by running the command"),$s.forEach(o),oo=f(e),y(fe.$$.fragment,e),lo=f(e),Te=a(e,"P",{});var ws=r(Te);ci=i(ws,"Additional checks concern PRs that add new models, mainly that:"),ws.forEach(o),io=f(e),W=a(e,"UL",{});var bo=r(W);pe=a(bo,"LI",{});var ko=r(pe);fi=i(ko,"All models added are in an Auto-mapping (performed by "),vt=a(ko,"CODE",{});var Es=r(vt);pi=i(Es,"utils/check_repo.py"),Es.forEach(o),di=i(ko,")"),ko.forEach(o),ui=f(bo),de=a(bo,"LI",{});var $o=r(de);mi=i($o,"All models are properly tested (performed by "),_t=a($o,"CODE",{});var gs=r(_t);yi=i(gs,"utils/check_repo.py"),gs.forEach(o),vi=i($o,")"),$o.forEach(o),bo.forEach(o),this.h()},h(){p(C,"name","hf:doc:metadata"),p(C,"content",JSON.stringify(Os)),p(S,"id","checks-on-a-pull-request"),p(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(S,"href","#checks-on-a-pull-request"),p(D,"class","relative group"),p(N,"id","tests"),p(N,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(N,"href","#tests"),p(I,"class","relative group"),p(M,"id","documentation-build"),p(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(M,"href","#documentation-build"),p(O,"class","relative group"),p(B,"id","code-and-documentation-style"),p(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(B,"href","#code-and-documentation-style"),p(L,"class","relative group"),p(F,"id","repository-consistency"),p(F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(F,"href","#repository-consistency"),p(R,"class","relative group")},m(e,n){t(document.head,C),h(e,kt,n),h(e,D,n),t(D,S),t(S,Oe),v(z,Oe,null),t(D,wo),t(D,Le),t(Le,Eo),h(e,$t,n),h(e,ue,n),t(ue,go),h(e,wt,n),h(e,w,n),t(w,Re),t(Re,Po),t(w,Ao),t(w,qe),t(qe,To),t(w,xo),t(w,Se),t(Se,Co),t(w,Do),t(w,Ne),t(Ne,Io),h(e,Et,n),h(e,me,n),t(me,Oo),h(e,gt,n),h(e,ye,n),t(ye,Lo),h(e,Pt,n),v(G,e,n),h(e,At,n),h(e,ve,n),t(ve,Ro),h(e,Tt,n),v(Y,e,n),h(e,xt,n),h(e,_e,n),t(_e,qo),h(e,Ct,n),h(e,I,n),t(I,N),t(N,je),v(K,je,null),t(I,So),t(I,Me),t(Me,No),h(e,Dt,n),h(e,P,n),t(P,jo),t(P,Be),t(Be,Mo),t(P,Bo),t(P,Fe),t(Fe,Fo),t(P,Ho),h(e,It,n),h(e,be,n),t(be,Wo),h(e,Ot,n),v(Q,e,n),h(e,Lt,n),h(e,ke,n),t(ke,Uo),h(e,Rt,n),h(e,E,n),t(E,He),t(He,Jo),t(E,zo),t(E,We),t(We,Go),t(E,Yo),t(E,Ue),t(Ue,Ko),t(E,Qo),t(E,Je),t(Je,Vo),h(e,qt,n),h(e,j,n),t(j,Xo),t(j,ze),t(ze,Zo),t(j,el),h(e,St,n),v(V,e,n),h(e,Nt,n),h(e,$e,n),t($e,tl),h(e,jt,n),h(e,O,n),t(O,M),t(M,Ge),v(X,Ge,null),t(O,ol),t(O,Ye),t(Ye,ll),h(e,Mt,n),h(e,A,n),t(A,il),t(A,Ke),t(Ke,sl),t(A,al),t(A,Qe),t(Qe,rl),t(A,nl),h(e,Bt,n),v(Z,e,n),h(e,Ft,n),h(e,we,n),t(we,hl),h(e,Ht,n),h(e,L,n),t(L,B),t(B,Ve),v(ee,Ve,null),t(L,cl),t(L,Xe),t(Xe,fl),h(e,Wt,n),h(e,d,n),t(d,pl),t(d,Ze),t(Ze,dl),t(d,ul),t(d,et),t(et,ml),t(d,yl),t(d,tt),t(tt,vl),t(d,_l),t(d,ot),t(ot,bl),t(d,kl),t(d,lt),t(lt,$l),t(d,wl),t(d,it),t(it,El),t(d,gl),h(e,Ut,n),v(te,e,n),h(e,Jt,n),h(e,T,n),t(T,Pl),t(T,st),t(st,Al),t(T,Tl),t(T,at),t(at,xl),t(T,Cl),h(e,zt,n),v(oe,e,n),h(e,Gt,n),h(e,Ee,n),t(Ee,Dl),h(e,Yt,n),v(le,e,n),h(e,Kt,n),h(e,ge,n),t(ge,Il),h(e,Qt,n),h(e,R,n),t(R,F),t(F,rt),v(ie,rt,null),t(R,Ol),t(R,nt),t(nt,Ll),h(e,Vt,n),h(e,H,n),t(H,Rl),t(H,ht),t(ht,ql),t(H,Sl),h(e,Xt,n),v(se,e,n),h(e,Zt,n),h(e,Pe,n),t(Pe,Nl),h(e,eo,n),h(e,u,n),t(u,ae),t(ae,jl),t(ae,ct),t(ct,Ml),t(ae,Bl),t(u,Fl),t(u,q),t(q,Hl),t(q,ft),t(ft,Wl),t(q,Ul),t(q,pt),t(pt,Jl),t(q,zl),t(u,Gl),t(u,re),t(re,Yl),t(re,dt),t(dt,Kl),t(re,Ql),t(u,Vl),t(u,ne),t(ne,Xl),t(ne,ut),t(ut,Zl),t(ne,ei),t(u,ti),t(u,he),t(he,oi),t(he,mt),t(mt,li),t(he,ii),t(u,si),t(u,ce),t(ce,ai),t(ce,yt),t(yt,ri),t(ce,ni),h(e,to,n),h(e,Ae,n),t(Ae,hi),h(e,oo,n),v(fe,e,n),h(e,lo,n),h(e,Te,n),t(Te,ci),h(e,io,n),h(e,W,n),t(W,pe),t(pe,fi),t(pe,vt),t(vt,pi),t(pe,di),t(W,ui),t(W,de),t(de,mi),t(de,_t),t(_t,yi),t(de,vi),so=!0},p:Cs,i(e){so||(_(z.$$.fragment,e),_(G.$$.fragment,e),_(Y.$$.fragment,e),_(K.$$.fragment,e),_(Q.$$.fragment,e),_(V.$$.fragment,e),_(X.$$.fragment,e),_(Z.$$.fragment,e),_(ee.$$.fragment,e),_(te.$$.fragment,e),_(oe.$$.fragment,e),_(le.$$.fragment,e),_(ie.$$.fragment,e),_(se.$$.fragment,e),_(fe.$$.fragment,e),so=!0)},o(e){b(z.$$.fragment,e),b(G.$$.fragment,e),b(Y.$$.fragment,e),b(K.$$.fragment,e),b(Q.$$.fragment,e),b(V.$$.fragment,e),b(X.$$.fragment,e),b(Z.$$.fragment,e),b(ee.$$.fragment,e),b(te.$$.fragment,e),b(oe.$$.fragment,e),b(le.$$.fragment,e),b(ie.$$.fragment,e),b(se.$$.fragment,e),b(fe.$$.fragment,e),so=!1},d(e){o(C),e&&o(kt),e&&o(D),k(z),e&&o($t),e&&o(ue),e&&o(wt),e&&o(w),e&&o(Et),e&&o(me),e&&o(gt),e&&o(ye),e&&o(Pt),k(G,e),e&&o(At),e&&o(ve),e&&o(Tt),k(Y,e),e&&o(xt),e&&o(_e),e&&o(Ct),e&&o(I),k(K),e&&o(Dt),e&&o(P),e&&o(It),e&&o(be),e&&o(Ot),k(Q,e),e&&o(Lt),e&&o(ke),e&&o(Rt),e&&o(E),e&&o(qt),e&&o(j),e&&o(St),k(V,e),e&&o(Nt),e&&o($e),e&&o(jt),e&&o(O),k(X),e&&o(Mt),e&&o(A),e&&o(Bt),k(Z,e),e&&o(Ft),e&&o(we),e&&o(Ht),e&&o(L),k(ee),e&&o(Wt),e&&o(d),e&&o(Ut),k(te,e),e&&o(Jt),e&&o(T),e&&o(zt),k(oe,e),e&&o(Gt),e&&o(Ee),e&&o(Yt),k(le,e),e&&o(Kt),e&&o(ge),e&&o(Qt),e&&o(R),k(ie),e&&o(Vt),e&&o(H),e&&o(Xt),k(se,e),e&&o(Zt),e&&o(Pe),e&&o(eo),e&&o(u),e&&o(to),e&&o(Ae),e&&o(oo),k(fe,e),e&&o(lo),e&&o(Te),e&&o(io),e&&o(W)}}}const Os={local:"checks-on-a-pull-request",sections:[{local:"tests",title:"Tests"},{local:"documentation-build",title:"Documentation build"},{local:"code-and-documentation-style",title:"Code and documentation style"},{local:"repository-consistency",title:"Repository consistency"}],title:"Checks on a Pull Request"};function Ls(_i){return Ds(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ns extends Ps{constructor(C){super();As(this,C,Ls,Is,Ts,{})}}export{Ns as default,Os as metadata};
