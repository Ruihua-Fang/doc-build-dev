import{S as Ir,i as Mr,s as Pr,e as n,k as c,w as T,t as r,M as qr,c as a,d as o,m as d,a as s,x as b,h as i,b as l,N as Ar,F as e,g as p,y,q as $,o as N,B as E,v as zr}from"../../chunks/vendor-6b77c823.js";import{T as Rt}from"../../chunks/Tip-39098574.js";import{D as le}from"../../chunks/Docstring-af1d0ae0.js";import{C as No}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as Oe}from"../../chunks/IconCopyLink-7a11ce68.js";function Lr(S){let f,F,u,g,x;return{c(){f=n("p"),F=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=n("code"),g=r("Module"),x=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(v){f=a(v,"P",{});var _=s(f);F=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(_,"CODE",{});var C=s(u);g=i(C,"Module"),C.forEach(o),x=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(o)},m(v,_){p(v,f,_),e(f,F),e(f,u),e(u,g),e(f,x)},d(v){v&&o(f)}}}function Dr(S){let f,F,u,g,x;return{c(){f=n("p"),F=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=n("code"),g=r("Module"),x=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(v){f=a(v,"P",{});var _=s(f);F=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(_,"CODE",{});var C=s(u);g=i(C,"Module"),C.forEach(o),x=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(o)},m(v,_){p(v,f,_),e(f,F),e(f,u),e(u,g),e(f,x)},d(v){v&&o(f)}}}function Or(S){let f,F,u,g,x,v,_,C,Y,X,w,A,I,L,J,M,Q,K;return{c(){f=n("p"),F=r("TF 2.0 models accepts two formats as inputs:"),u=c(),g=n("ul"),x=n("li"),v=r("having all inputs as keyword arguments (like PyTorch models), or"),_=c(),C=n("li"),Y=r("having all inputs as a list, tuple or dict in the first positional arguments."),X=c(),w=n("p"),A=r("This second option is useful when using "),I=n("code"),L=r("tf.keras.Model.fit"),J=r(` method which currently requires having all the
tensors in the first argument of the model call function: `),M=n("code"),Q=r("model(inputs)"),K=r(".")},l(m){f=a(m,"P",{});var k=s(f);F=i(k,"TF 2.0 models accepts two formats as inputs:"),k.forEach(o),u=d(m),g=a(m,"UL",{});var P=s(g);x=a(P,"LI",{});var ce=s(x);v=i(ce,"having all inputs as keyword arguments (like PyTorch models), or"),ce.forEach(o),_=d(P),C=a(P,"LI",{});var de=s(C);Y=i(de,"having all inputs as a list, tuple or dict in the first positional arguments."),de.forEach(o),P.forEach(o),X=d(m),w=a(m,"P",{});var j=s(w);A=i(j,"This second option is useful when using "),I=a(j,"CODE",{});var R=s(I);L=i(R,"tf.keras.Model.fit"),R.forEach(o),J=i(j,` method which currently requires having all the
tensors in the first argument of the model call function: `),M=a(j,"CODE",{});var he=s(M);Q=i(he,"model(inputs)"),he.forEach(o),K=i(j,"."),j.forEach(o)},m(m,k){p(m,f,k),e(f,F),p(m,u,k),p(m,g,k),e(g,x),e(x,v),e(g,_),e(g,C),e(C,Y),p(m,X,k),p(m,w,k),e(w,A),e(w,I),e(I,L),e(w,J),e(w,M),e(M,Q),e(w,K)},d(m){m&&o(f),m&&o(u),m&&o(g),m&&o(X),m&&o(w)}}}function Sr(S){let f,F,u,g,x;return{c(){f=n("p"),F=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=n("code"),g=r("Module"),x=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(v){f=a(v,"P",{});var _=s(f);F=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(_,"CODE",{});var C=s(u);g=i(C,"Module"),C.forEach(o),x=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(o)},m(v,_){p(v,f,_),e(f,F),e(f,u),e(u,g),e(f,x)},d(v){v&&o(f)}}}function Xr(S){let f,F,u,g,x,v,_,C,Y,X,w,A,I,L,J,M,Q,K;return{c(){f=n("p"),F=r("TF 2.0 models accepts two formats as inputs:"),u=c(),g=n("ul"),x=n("li"),v=r("having all inputs as keyword arguments (like PyTorch models), or"),_=c(),C=n("li"),Y=r("having all inputs as a list, tuple or dict in the first positional arguments."),X=c(),w=n("p"),A=r("This second option is useful when using "),I=n("code"),L=r("tf.keras.Model.fit"),J=r(` method which currently requires having all the
tensors in the first argument of the model call function: `),M=n("code"),Q=r("model(inputs)"),K=r(".")},l(m){f=a(m,"P",{});var k=s(f);F=i(k,"TF 2.0 models accepts two formats as inputs:"),k.forEach(o),u=d(m),g=a(m,"UL",{});var P=s(g);x=a(P,"LI",{});var ce=s(x);v=i(ce,"having all inputs as keyword arguments (like PyTorch models), or"),ce.forEach(o),_=d(P),C=a(P,"LI",{});var de=s(C);Y=i(de,"having all inputs as a list, tuple or dict in the first positional arguments."),de.forEach(o),P.forEach(o),X=d(m),w=a(m,"P",{});var j=s(w);A=i(j,"This second option is useful when using "),I=a(j,"CODE",{});var R=s(I);L=i(R,"tf.keras.Model.fit"),R.forEach(o),J=i(j,` method which currently requires having all the
tensors in the first argument of the model call function: `),M=a(j,"CODE",{});var he=s(M);Q=i(he,"model(inputs)"),he.forEach(o),K=i(j,"."),j.forEach(o)},m(m,k){p(m,f,k),e(f,F),p(m,u,k),p(m,g,k),e(g,x),e(x,v),e(g,_),e(g,C),e(C,Y),p(m,X,k),p(m,w,k),e(w,A),e(w,I),e(I,L),e(w,J),e(w,M),e(M,Q),e(w,K)},d(m){m&&o(f),m&&o(u),m&&o(g),m&&o(X),m&&o(w)}}}function Wr(S){let f,F,u,g,x;return{c(){f=n("p"),F=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=n("code"),g=r("Module"),x=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(v){f=a(v,"P",{});var _=s(f);F=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(_,"CODE",{});var C=s(u);g=i(C,"Module"),C.forEach(o),x=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(o)},m(v,_){p(v,f,_),e(f,F),e(f,u),e(u,g),e(f,x)},d(v){v&&o(f)}}}function Ur(S){let f,F,u,g,x,v,_,C,Y,X,w,A,I,L,J,M,Q,K,m,k,P,ce,de,j,R,he,Eo,Nt,Gt,ln,Fo,Et,cn,ko,Ft,Zt,dn,jo,ye,ys,Io,$e,hn,kt,fn,pn,Mo,z,mn,Se,un,gn,Xe,vn,_n,We,xn,wn,Ue,Cn,Tn,Ve,bn,yn,Po,fe,Ne,Yt,He,$n,Jt,Nn,qo,D,Be,En,pe,Fn,jt,kn,jn,Ke,In,Mn,Pn,me,qn,It,An,zn,Mt,Ln,Dn,On,Qt,Sn,Xn,Re,Ao,ue,Ee,eo,Ge,Wn,to,Un,zo,ee,Ze,Vn,oo,Hn,Bn,Ye,Kn,Pt,Rn,Gn,Lo,ge,Fe,no,Je,Zn,ao,Yn,Do,te,Qe,Jn,et,Qn,tt,ea,ta,oa,W,ot,na,ve,aa,qt,sa,ra,so,ia,la,ca,ke,da,ro,ha,fa,nt,Oo,_e,je,io,at,pa,lo,ma,So,B,st,ua,co,ga,va,rt,_a,it,xa,wa,Ca,U,lt,Ta,xe,ba,At,ya,$a,ho,Na,Ea,Fa,Ie,ka,fo,ja,Ia,ct,Xo,we,Me,po,dt,Ma,mo,Pa,Wo,O,ht,qa,ft,Aa,zt,za,La,Da,pt,Oa,mt,Sa,Xa,Wa,Pe,Ua,V,ut,Va,Ce,Ha,Lt,Ba,Ka,uo,Ra,Ga,Za,qe,Ya,go,Ja,Qa,gt,Uo,Te,Ae,vo,vt,es,_o,ts,Vo,q,_t,os,xo,ns,as,xt,ss,Dt,rs,is,ls,wt,cs,Ct,ds,hs,fs,ze,ps,H,Tt,ms,be,us,Ot,gs,vs,wo,_s,xs,ws,Le,Cs,Co,Ts,bs,bt,Ho;return v=new Oe({}),L=new Oe({}),He=new Oe({}),Be=new le({props:{name:"class transformers.ConvNextConfig",anchor:"transformers.ConvNextConfig",parameters:[{name:"num_channels",val:" = 3"},{name:"patch_size",val:" = 4"},{name:"num_stages",val:" = 4"},{name:"hidden_sizes",val:" = None"},{name:"depths",val:" = None"},{name:"hidden_act",val:" = 'gelu'"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-12"},{name:"is_encoder_decoder",val:" = False"},{name:"layer_scale_init_value",val:" = 1e-06"},{name:"drop_path_rate",val:" = 0.0"},{name:"image_size",val:" = 224"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16707/src/transformers/models/convnext/configuration_convnext.py#L29",parametersDescription:[{anchor:"transformers.ConvNextConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.ConvNextConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, optional, defaults to 4) &#x2014;
Patch size to use in the patch embedding layer.`,name:"patch_size"},{anchor:"transformers.ConvNextConfig.num_stages",description:`<strong>num_stages</strong> (<code>int</code>, optional, defaults to 4) &#x2014;
The number of stages in the model.`,name:"num_stages"},{anchor:"transformers.ConvNextConfig.hidden_sizes",description:`<strong>hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [96, 192, 384, 768]) &#x2014;
Dimensionality (hidden size) at each stage.`,name:"hidden_sizes"},{anchor:"transformers.ConvNextConfig.depths",description:`<strong>depths</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [3, 3, 9, 3]) &#x2014;
Depth (number of blocks) for each stage.`,name:"depths"},{anchor:"transformers.ConvNextConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in each block. If string, <code>&quot;gelu&quot;</code>, <code>&quot;relu&quot;</code>,
<code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.ConvNextConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.ConvNextConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-12) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.ConvNextConfig.layer_scale_init_value",description:`<strong>layer_scale_init_value</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-6) &#x2014;
The initial value for the layer scale.`,name:"layer_scale_init_value"},{anchor:"transformers.ConvNextConfig.drop_path_rate",description:`<strong>drop_path_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The drop rate for stochastic depth.`,name:"drop_path_rate"}]}}),Re=new No({props:{code:`from transformers import ConvNextModel, ConvNextConfig

# Initializing a ConvNext convnext-tiny-224 style configuration
configuration = ConvNextConfig()
# Initializing a model from the convnext-tiny-224 style configuration
model = ConvNextModel(configuration)
# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextModel, ConvNextConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a ConvNext convnext-tiny-224 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = ConvNextConfig()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the convnext-tiny-224 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ConvNextModel(configuration)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),Ge=new Oe({}),Ze=new le({props:{name:"class transformers.ConvNextFeatureExtractor",anchor:"transformers.ConvNextFeatureExtractor",parameters:[{name:"do_resize",val:" = True"},{name:"size",val:" = 224"},{name:"resample",val:" = <Resampling.BICUBIC: 3>"},{name:"crop_pct",val:" = None"},{name:"do_normalize",val:" = True"},{name:"image_mean",val:" = None"},{name:"image_std",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16707/src/transformers/models/convnext/feature_extraction_convnext.py#L36",parametersDescription:[{anchor:"transformers.ConvNextFeatureExtractor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize (and optionally center crop) the input to a certain <code>size</code>.`,name:"do_resize"},{anchor:"transformers.ConvNextFeatureExtractor.size",description:`<strong>size</strong> (<code>int</code>, <em>optional</em>, defaults to 224) &#x2014;
Resize the input to the given size. If 384 or larger, the image is resized to (<code>size</code>, <code>size</code>). Else, the
smaller edge of the image will be matched to int(<code>size</code>/ <code>crop_pct</code>), after which the image is cropped to
<code>size</code>. Only has an effect if <code>do_resize</code> is set to <code>True</code>.`,name:"size"},{anchor:"transformers.ConvNextFeatureExtractor.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>PIL.Image.BICUBIC</code>) &#x2014;
An optional resampling filter. This can be one of <code>PIL.Image.NEAREST</code>, <code>PIL.Image.BOX</code>,
<code>PIL.Image.BILINEAR</code>, <code>PIL.Image.HAMMING</code>, <code>PIL.Image.BICUBIC</code> or <code>PIL.Image.LANCZOS</code>. Only has an effect
if <code>do_resize</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.ConvNextFeatureExtractor.crop_pct",description:`<strong>crop_pct</strong> (<code>float</code>, <em>optional</em>) &#x2014;
The percentage of the image to crop. If <code>None</code>, then a cropping percentage of 224 / 256 is used. Only has
an effect if <code>do_resize</code> is set to <code>True</code> and <code>size</code> &lt; 384.`,name:"crop_pct"},{anchor:"transformers.ConvNextFeatureExtractor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to normalize the input with mean and standard deviation.`,name:"do_normalize"},{anchor:"transformers.ConvNextFeatureExtractor.image_mean",description:`<strong>image_mean</strong> (<code>List[int]</code>, defaults to <code>[0.485, 0.456, 0.406]</code>) &#x2014;
The sequence of means for each channel, to be used when normalizing images.`,name:"image_mean"},{anchor:"transformers.ConvNextFeatureExtractor.image_std",description:`<strong>image_std</strong> (<code>List[int]</code>, defaults to <code>[0.229, 0.224, 0.225]</code>) &#x2014;
The sequence of standard deviations for each channel, to be used when normalizing images.`,name:"image_std"}]}}),Je=new Oe({}),Qe=new le({props:{name:"class transformers.ConvNextModel",anchor:"transformers.ConvNextModel",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16707/src/transformers/models/convnext/modeling_convnext.py#L305",parametersDescription:[{anchor:"transformers.ConvNextModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16707/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16707/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),ot=new le({props:{name:"forward",anchor:"transformers.ConvNextModel.forward",parameters:[{name:"pixel_values",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16707/src/transformers/models/convnext/modeling_convnext.py#L319",parametersDescription:[{anchor:"transformers.ConvNextModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_16707/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.ConvNextModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ConvNextModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16707/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],returnDescription:`
<p>A <code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16707/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state after a pooling operation on the spatial dimensions.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, num_channels, height, width)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),ke=new Rt({props:{$$slots:{default:[Lr]},$$scope:{ctx:S}}}),nt=new No({props:{code:`from transformers import ConvNextFeatureExtractor, ConvNextModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = ConvNextFeatureExtractor.from_pretrained("facebook/convnext-tiny-224")
model = ConvNextModel.from_pretrained("facebook/convnext-tiny-224")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, ConvNextModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ConvNextModel.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">768</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>]`}}),at=new Oe({}),st=new le({props:{name:"class transformers.ConvNextForImageClassification",anchor:"transformers.ConvNextForImageClassification",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16707/src/transformers/models/convnext/modeling_convnext.py#L367",parametersDescription:[{anchor:"transformers.ConvNextForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16707/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16707/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),lt=new le({props:{name:"forward",anchor:"transformers.ConvNextForImageClassification.forward",parameters:[{name:"pixel_values",val:" = None"},{name:"labels",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16707/src/transformers/models/convnext/modeling_convnext.py#L382",parametersDescription:[{anchor:"transformers.ConvNextForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_16707/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.ConvNextForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ConvNextForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16707/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.ConvNextForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],returnDescription:`
<p>A <code>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16707/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also
called feature maps) of the model at the output of each stage.</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Ie=new Rt({props:{$$slots:{default:[Dr]},$$scope:{ctx:S}}}),ct=new No({props:{code:`from transformers import ConvNextFeatureExtractor, ConvNextForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = ConvNextFeatureExtractor.from_pretrained("facebook/convnext-tiny-224")
model = ConvNextForImageClassification.from_pretrained("facebook/convnext-tiny-224")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, ConvNextForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ConvNextForImageClassification.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),dt=new Oe({}),ht=new le({props:{name:"class transformers.TFConvNextModel",anchor:"transformers.TFConvNextModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16707/src/transformers/models/convnext/modeling_tf_convnext.py#L427",parametersDescription:[{anchor:"transformers.TFConvNextModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16707/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16707/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Pe=new Rt({props:{$$slots:{default:[Or]},$$scope:{ctx:S}}}),ut=new le({props:{name:"call",anchor:"transformers.TFConvNextModel.call",parameters:[{name:"pixel_values",val:": typing.Union[typing.List[tensorflow.python.framework.ops.Tensor], typing.List[numpy.ndarray], typing.List[tensorflow.python.keras.engine.keras_tensor.KerasTensor], typing.Dict[str, tensorflow.python.framework.ops.Tensor], typing.Dict[str, numpy.ndarray], typing.Dict[str, tensorflow.python.keras.engine.keras_tensor.KerasTensor], tensorflow.python.framework.ops.Tensor, numpy.ndarray, tensorflow.python.keras.engine.keras_tensor.KerasTensor, NoneType] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/pr_16707/src/transformers/models/convnext/modeling_tf_convnext.py#L432",parametersDescription:[{anchor:"transformers.TFConvNextModel.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_16707/en/model_doc/convnext#transformers.ConvNextFeatureExtractor">ConvNextFeatureExtractor</a>. See
<code>ConvNextFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.TFConvNextModel.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFConvNextModel.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16707/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16707/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling"
>transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/pr_16707/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state of the first token of the sequence (classification token) further processed by a
Linear layer and a Tanh activation function. The Linear layer weights are trained from the next sentence
prediction (classification) objective during pretraining.</p>
<p>This output is usually <em>not</em> a good summary of the semantic content of the input, you\u2019re often better with
averaging or pooling the sequence of hidden-states for the whole input sequence.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_16707/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling"
>transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling</a> or <code>tuple(tf.Tensor)</code></p>
`}}),qe=new Rt({props:{$$slots:{default:[Sr]},$$scope:{ctx:S}}}),gt=new No({props:{code:`from transformers import ConvNextFeatureExtractor, TFConvNextModel
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = ConvNextFeatureExtractor.from_pretrained("facebook/convnext-tiny-224")
model = TFConvNextModel.from_pretrained("facebook/convnext-tiny-224")

inputs = feature_extractor(images=image, return_tensors="tf")
outputs = model(**inputs)
last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, TFConvNextModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFConvNextModel.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),vt=new Oe({}),_t=new le({props:{name:"class transformers.TFConvNextForImageClassification",anchor:"transformers.TFConvNextForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16707/src/transformers/models/convnext/modeling_tf_convnext.py#L494",parametersDescription:[{anchor:"transformers.TFConvNextForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16707/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16707/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),ze=new Rt({props:{$$slots:{default:[Xr]},$$scope:{ctx:S}}}),Tt=new le({props:{name:"call",anchor:"transformers.TFConvNextForImageClassification.call",parameters:[{name:"pixel_values",val:": typing.Union[typing.List[tensorflow.python.framework.ops.Tensor], typing.List[numpy.ndarray], typing.List[tensorflow.python.keras.engine.keras_tensor.KerasTensor], typing.Dict[str, tensorflow.python.framework.ops.Tensor], typing.Dict[str, numpy.ndarray], typing.Dict[str, tensorflow.python.keras.engine.keras_tensor.KerasTensor], tensorflow.python.framework.ops.Tensor, numpy.ndarray, tensorflow.python.keras.engine.keras_tensor.KerasTensor, NoneType] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"labels",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"training",val:": typing.Optional[bool] = False"}],source:"https://github.com/huggingface/transformers/blob/pr_16707/src/transformers/models/convnext/modeling_tf_convnext.py#L509",parametersDescription:[{anchor:"transformers.TFConvNextForImageClassification.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_16707/en/model_doc/convnext#transformers.ConvNextFeatureExtractor">ConvNextFeatureExtractor</a>. See
<code>ConvNextFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.TFConvNextForImageClassification.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFConvNextForImageClassification.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16707/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFConvNextForImageClassification.call.labels",description:`<strong>labels</strong> (<code>tf.Tensor</code> or <code>np.ndarray</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16707/en/main_classes/output#transformers.modeling_tf_outputs.TFSequenceClassifierOutput"
>transformers.modeling_tf_outputs.TFSequenceClassifierOutput</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/pr_16707/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, )</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_16707/en/main_classes/output#transformers.modeling_tf_outputs.TFSequenceClassifierOutput"
>transformers.modeling_tf_outputs.TFSequenceClassifierOutput</a> or <code>tuple(tf.Tensor)</code></p>
`}}),Le=new Rt({props:{$$slots:{default:[Wr]},$$scope:{ctx:S}}}),bt=new No({props:{code:`from transformers import ConvNextFeatureExtractor, TFConvNextForImageClassification
import tensorflow as tf
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = ConvNextFeatureExtractor.from_pretrained("facebook/convnext-tiny-224")
model = TFViTForImageClassification.from_pretrained("facebook/convnext-tiny-224")

inputs = feature_extractor(images=image, return_tensors="tf")
outputs = model(**inputs)
logits = outputs.logits
# model predicts one of the 1000 ImageNet classes
predicted_class_idx = tf.math.argmax(logits, axis=-1)[0]
print("Predicted class:", model.config.id2label[int(predicted_class_idx)])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, TFConvNextForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFViTForImageClassification.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_class_idx = tf.math.argmax(logits, axis=-<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Predicted class:&quot;</span>, model.config.id2label[<span class="hljs-built_in">int</span>(predicted_class_idx)])`}}),{c(){f=n("meta"),F=c(),u=n("h1"),g=n("a"),x=n("span"),T(v.$$.fragment),_=c(),C=n("span"),Y=r("ConvNeXT"),X=c(),w=n("h2"),A=n("a"),I=n("span"),T(L.$$.fragment),J=c(),M=n("span"),Q=r("Overview"),K=c(),m=n("p"),k=r("The ConvNeXT model was proposed in "),P=n("a"),ce=r("A ConvNet for the 2020s"),de=r(` by Zhuang Liu, Hanzi Mao, Chao-Yuan Wu, Christoph Feichtenhofer, Trevor Darrell, Saining Xie.
ConvNeXT is a pure convolutional model (ConvNet), inspired by the design of Vision Transformers, that claims to outperform them.`),j=c(),R=n("p"),he=r("The abstract from the paper is the following:"),Eo=c(),Nt=n("p"),Gt=n("em"),ln=r(`The \u201CRoaring 20s\u201D of visual recognition began with the introduction of Vision Transformers (ViTs), which quickly superseded ConvNets as the state-of-the-art image classification model.
A vanilla ViT, on the other hand, faces difficulties when applied to general computer vision tasks such as object detection and semantic segmentation. It is the hierarchical Transformers
(e.g., Swin Transformers) that reintroduced several ConvNet priors, making Transformers practically viable as a generic vision backbone and demonstrating remarkable performance on a wide
variety of vision tasks. However, the effectiveness of such hybrid approaches is still largely credited to the intrinsic superiority of Transformers, rather than the inherent inductive
biases of convolutions. In this work, we reexamine the design spaces and test the limits of what a pure ConvNet can achieve. We gradually \u201Cmodernize\u201D a standard ResNet toward the design
of a vision Transformer, and discover several key components that contribute to the performance difference along the way. The outcome of this exploration is a family of pure ConvNet models
dubbed ConvNeXt. Constructed entirely from standard ConvNet modules, ConvNeXts compete favorably with Transformers in terms of accuracy and scalability, achieving 87.8% ImageNet top-1 accuracy
and outperforming Swin Transformers on COCO detection and ADE20K segmentation, while maintaining the simplicity and efficiency of standard ConvNets.`),Fo=c(),Et=n("p"),cn=r("Tips:"),ko=c(),Ft=n("ul"),Zt=n("li"),dn=r("See the code examples below each model regarding usage."),jo=c(),ye=n("img"),Io=c(),$e=n("small"),hn=r("ConvNeXT architecture. Taken from the "),kt=n("a"),fn=r("original paper"),pn=r("."),Mo=c(),z=n("p"),mn=r("This model was contributed by "),Se=n("a"),un=r("nielsr"),gn=r(". TensorFlow version of the model was contributed by "),Xe=n("a"),vn=r("ariG23498"),_n=r(`,
`),We=n("a"),xn=r("gante"),wn=r(", and "),Ue=n("a"),Cn=r("sayakpaul"),Tn=r(" (equal contribution). The original code can be found "),Ve=n("a"),bn=r("here"),yn=r("."),Po=c(),fe=n("h2"),Ne=n("a"),Yt=n("span"),T(He.$$.fragment),$n=c(),Jt=n("span"),Nn=r("ConvNextConfig"),qo=c(),D=n("div"),T(Be.$$.fragment),En=c(),pe=n("p"),Fn=r("This is the configuration class to store the configuration of a "),jt=n("a"),kn=r("ConvNextModel"),jn=r(`. It is used to instantiate an
ConvNeXT model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the ConvNeXT
`),Ke=n("a"),In=r("facebook/convnext-tiny-224"),Mn=r(" architecture."),Pn=c(),me=n("p"),qn=r("Configuration objects inherit from "),It=n("a"),An=r("PretrainedConfig"),zn=r(` and can be used to control the model outputs. Read the
documentation from `),Mt=n("a"),Ln=r("PretrainedConfig"),Dn=r(" for more information."),On=c(),Qt=n("p"),Sn=r("Example:"),Xn=c(),T(Re.$$.fragment),Ao=c(),ue=n("h2"),Ee=n("a"),eo=n("span"),T(Ge.$$.fragment),Wn=c(),to=n("span"),Un=r("ConvNextFeatureExtractor"),zo=c(),ee=n("div"),T(Ze.$$.fragment),Vn=c(),oo=n("p"),Hn=r("Constructs a ConvNeXT feature extractor."),Bn=c(),Ye=n("p"),Kn=r("This feature extractor inherits from "),Pt=n("a"),Rn=r("FeatureExtractionMixin"),Gn=r(` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),Lo=c(),ge=n("h2"),Fe=n("a"),no=n("span"),T(Je.$$.fragment),Zn=c(),ao=n("span"),Yn=r("ConvNextModel"),Do=c(),te=n("div"),T(Qe.$$.fragment),Jn=c(),et=n("p"),Qn=r(`The bare ConvNext model outputting raw features without any specific head on top.
This model is a PyTorch `),tt=n("a"),ea=r("torch.nn.Module"),ta=r(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),oa=c(),W=n("div"),T(ot.$$.fragment),na=c(),ve=n("p"),aa=r("The "),qt=n("a"),sa=r("ConvNextModel"),ra=r(" forward method, overrides the "),so=n("code"),ia=r("__call__"),la=r(" special method."),ca=c(),T(ke.$$.fragment),da=c(),ro=n("p"),ha=r("Example:"),fa=c(),T(nt.$$.fragment),Oo=c(),_e=n("h2"),je=n("a"),io=n("span"),T(at.$$.fragment),pa=c(),lo=n("span"),ma=r("ConvNextForImageClassification"),So=c(),B=n("div"),T(st.$$.fragment),ua=c(),co=n("p"),ga=r(`ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),va=c(),rt=n("p"),_a=r("This model is a PyTorch "),it=n("a"),xa=r("torch.nn.Module"),wa=r(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Ca=c(),U=n("div"),T(lt.$$.fragment),Ta=c(),xe=n("p"),ba=r("The "),At=n("a"),ya=r("ConvNextForImageClassification"),$a=r(" forward method, overrides the "),ho=n("code"),Na=r("__call__"),Ea=r(" special method."),Fa=c(),T(Ie.$$.fragment),ka=c(),fo=n("p"),ja=r("Example:"),Ia=c(),T(ct.$$.fragment),Xo=c(),we=n("h2"),Me=n("a"),po=n("span"),T(dt.$$.fragment),Ma=c(),mo=n("span"),Pa=r("TFConvNextModel"),Wo=c(),O=n("div"),T(ht.$$.fragment),qa=c(),ft=n("p"),Aa=r(`The bare ConvNext model outputting raw features without any specific head on top.
This model inherits from `),zt=n("a"),za=r("TFPreTrainedModel"),La=r(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Da=c(),pt=n("p"),Oa=r("This model is also a "),mt=n("a"),Sa=r("tf.keras.Model"),Xa=r(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Wa=c(),T(Pe.$$.fragment),Ua=c(),V=n("div"),T(ut.$$.fragment),Va=c(),Ce=n("p"),Ha=r("The "),Lt=n("a"),Ba=r("TFConvNextModel"),Ka=r(" forward method, overrides the "),uo=n("code"),Ra=r("__call__"),Ga=r(" special method."),Za=c(),T(qe.$$.fragment),Ya=c(),go=n("p"),Ja=r("Examples:"),Qa=c(),T(gt.$$.fragment),Uo=c(),Te=n("h2"),Ae=n("a"),vo=n("span"),T(vt.$$.fragment),es=c(),_o=n("span"),ts=r("TFConvNextForImageClassification"),Vo=c(),q=n("div"),T(_t.$$.fragment),os=c(),xo=n("p"),ns=r(`ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),as=c(),xt=n("p"),ss=r("This model inherits from "),Dt=n("a"),rs=r("TFPreTrainedModel"),is=r(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ls=c(),wt=n("p"),cs=r("This model is also a "),Ct=n("a"),ds=r("tf.keras.Model"),hs=r(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),fs=c(),T(ze.$$.fragment),ps=c(),H=n("div"),T(Tt.$$.fragment),ms=c(),be=n("p"),us=r("The "),Ot=n("a"),gs=r("TFConvNextForImageClassification"),vs=r(" forward method, overrides the "),wo=n("code"),_s=r("__call__"),xs=r(" special method."),ws=c(),T(Le.$$.fragment),Cs=c(),Co=n("p"),Ts=r("Examples:"),bs=c(),T(bt.$$.fragment),this.h()},l(t){const h=qr('[data-svelte="svelte-1phssyn"]',document.head);f=a(h,"META",{name:!0,content:!0}),h.forEach(o),F=d(t),u=a(t,"H1",{class:!0});var yt=s(u);g=a(yt,"A",{id:!0,class:!0,href:!0});var To=s(g);x=a(To,"SPAN",{});var bo=s(x);b(v.$$.fragment,bo),bo.forEach(o),To.forEach(o),_=d(yt),C=a(yt,"SPAN",{});var yo=s(C);Y=i(yo,"ConvNeXT"),yo.forEach(o),yt.forEach(o),X=d(t),w=a(t,"H2",{class:!0});var $t=s(w);A=a($t,"A",{id:!0,class:!0,href:!0});var $o=s(A);I=a($o,"SPAN",{});var $s=s(I);b(L.$$.fragment,$s),$s.forEach(o),$o.forEach(o),J=d($t),M=a($t,"SPAN",{});var Ns=s(M);Q=i(Ns,"Overview"),Ns.forEach(o),$t.forEach(o),K=d(t),m=a(t,"P",{});var Bo=s(m);k=i(Bo,"The ConvNeXT model was proposed in "),P=a(Bo,"A",{href:!0,rel:!0});var Es=s(P);ce=i(Es,"A ConvNet for the 2020s"),Es.forEach(o),de=i(Bo,` by Zhuang Liu, Hanzi Mao, Chao-Yuan Wu, Christoph Feichtenhofer, Trevor Darrell, Saining Xie.
ConvNeXT is a pure convolutional model (ConvNet), inspired by the design of Vision Transformers, that claims to outperform them.`),Bo.forEach(o),j=d(t),R=a(t,"P",{});var Fs=s(R);he=i(Fs,"The abstract from the paper is the following:"),Fs.forEach(o),Eo=d(t),Nt=a(t,"P",{});var ks=s(Nt);Gt=a(ks,"EM",{});var js=s(Gt);ln=i(js,`The \u201CRoaring 20s\u201D of visual recognition began with the introduction of Vision Transformers (ViTs), which quickly superseded ConvNets as the state-of-the-art image classification model.
A vanilla ViT, on the other hand, faces difficulties when applied to general computer vision tasks such as object detection and semantic segmentation. It is the hierarchical Transformers
(e.g., Swin Transformers) that reintroduced several ConvNet priors, making Transformers practically viable as a generic vision backbone and demonstrating remarkable performance on a wide
variety of vision tasks. However, the effectiveness of such hybrid approaches is still largely credited to the intrinsic superiority of Transformers, rather than the inherent inductive
biases of convolutions. In this work, we reexamine the design spaces and test the limits of what a pure ConvNet can achieve. We gradually \u201Cmodernize\u201D a standard ResNet toward the design
of a vision Transformer, and discover several key components that contribute to the performance difference along the way. The outcome of this exploration is a family of pure ConvNet models
dubbed ConvNeXt. Constructed entirely from standard ConvNet modules, ConvNeXts compete favorably with Transformers in terms of accuracy and scalability, achieving 87.8% ImageNet top-1 accuracy
and outperforming Swin Transformers on COCO detection and ADE20K segmentation, while maintaining the simplicity and efficiency of standard ConvNets.`),js.forEach(o),ks.forEach(o),Fo=d(t),Et=a(t,"P",{});var Is=s(Et);cn=i(Is,"Tips:"),Is.forEach(o),ko=d(t),Ft=a(t,"UL",{});var Ms=s(Ft);Zt=a(Ms,"LI",{});var Ps=s(Zt);dn=i(Ps,"See the code examples below each model regarding usage."),Ps.forEach(o),Ms.forEach(o),jo=d(t),ye=a(t,"IMG",{src:!0,alt:!0,width:!0}),Io=d(t),$e=a(t,"SMALL",{});var Ko=s($e);hn=i(Ko,"ConvNeXT architecture. Taken from the "),kt=a(Ko,"A",{href:!0});var qs=s(kt);fn=i(qs,"original paper"),qs.forEach(o),pn=i(Ko,"."),Ko.forEach(o),Mo=d(t),z=a(t,"P",{});var G=s(z);mn=i(G,"This model was contributed by "),Se=a(G,"A",{href:!0,rel:!0});var As=s(Se);un=i(As,"nielsr"),As.forEach(o),gn=i(G,". TensorFlow version of the model was contributed by "),Xe=a(G,"A",{href:!0,rel:!0});var zs=s(Xe);vn=i(zs,"ariG23498"),zs.forEach(o),_n=i(G,`,
`),We=a(G,"A",{href:!0,rel:!0});var Ls=s(We);xn=i(Ls,"gante"),Ls.forEach(o),wn=i(G,", and "),Ue=a(G,"A",{href:!0,rel:!0});var Ds=s(Ue);Cn=i(Ds,"sayakpaul"),Ds.forEach(o),Tn=i(G," (equal contribution). The original code can be found "),Ve=a(G,"A",{href:!0,rel:!0});var Os=s(Ve);bn=i(Os,"here"),Os.forEach(o),yn=i(G,"."),G.forEach(o),Po=d(t),fe=a(t,"H2",{class:!0});var Ro=s(fe);Ne=a(Ro,"A",{id:!0,class:!0,href:!0});var Ss=s(Ne);Yt=a(Ss,"SPAN",{});var Xs=s(Yt);b(He.$$.fragment,Xs),Xs.forEach(o),Ss.forEach(o),$n=d(Ro),Jt=a(Ro,"SPAN",{});var Ws=s(Jt);Nn=i(Ws,"ConvNextConfig"),Ws.forEach(o),Ro.forEach(o),qo=d(t),D=a(t,"DIV",{class:!0});var oe=s(D);b(Be.$$.fragment,oe),En=d(oe),pe=a(oe,"P",{});var St=s(pe);Fn=i(St,"This is the configuration class to store the configuration of a "),jt=a(St,"A",{href:!0});var Us=s(jt);kn=i(Us,"ConvNextModel"),Us.forEach(o),jn=i(St,`. It is used to instantiate an
ConvNeXT model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the ConvNeXT
`),Ke=a(St,"A",{href:!0,rel:!0});var Vs=s(Ke);In=i(Vs,"facebook/convnext-tiny-224"),Vs.forEach(o),Mn=i(St," architecture."),St.forEach(o),Pn=d(oe),me=a(oe,"P",{});var Xt=s(me);qn=i(Xt,"Configuration objects inherit from "),It=a(Xt,"A",{href:!0});var Hs=s(It);An=i(Hs,"PretrainedConfig"),Hs.forEach(o),zn=i(Xt,` and can be used to control the model outputs. Read the
documentation from `),Mt=a(Xt,"A",{href:!0});var Bs=s(Mt);Ln=i(Bs,"PretrainedConfig"),Bs.forEach(o),Dn=i(Xt," for more information."),Xt.forEach(o),On=d(oe),Qt=a(oe,"P",{});var Ks=s(Qt);Sn=i(Ks,"Example:"),Ks.forEach(o),Xn=d(oe),b(Re.$$.fragment,oe),oe.forEach(o),Ao=d(t),ue=a(t,"H2",{class:!0});var Go=s(ue);Ee=a(Go,"A",{id:!0,class:!0,href:!0});var Rs=s(Ee);eo=a(Rs,"SPAN",{});var Gs=s(eo);b(Ge.$$.fragment,Gs),Gs.forEach(o),Rs.forEach(o),Wn=d(Go),to=a(Go,"SPAN",{});var Zs=s(to);Un=i(Zs,"ConvNextFeatureExtractor"),Zs.forEach(o),Go.forEach(o),zo=d(t),ee=a(t,"DIV",{class:!0});var Wt=s(ee);b(Ze.$$.fragment,Wt),Vn=d(Wt),oo=a(Wt,"P",{});var Ys=s(oo);Hn=i(Ys,"Constructs a ConvNeXT feature extractor."),Ys.forEach(o),Bn=d(Wt),Ye=a(Wt,"P",{});var Zo=s(Ye);Kn=i(Zo,"This feature extractor inherits from "),Pt=a(Zo,"A",{href:!0});var Js=s(Pt);Rn=i(Js,"FeatureExtractionMixin"),Js.forEach(o),Gn=i(Zo,` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),Zo.forEach(o),Wt.forEach(o),Lo=d(t),ge=a(t,"H2",{class:!0});var Yo=s(ge);Fe=a(Yo,"A",{id:!0,class:!0,href:!0});var Qs=s(Fe);no=a(Qs,"SPAN",{});var er=s(no);b(Je.$$.fragment,er),er.forEach(o),Qs.forEach(o),Zn=d(Yo),ao=a(Yo,"SPAN",{});var tr=s(ao);Yn=i(tr,"ConvNextModel"),tr.forEach(o),Yo.forEach(o),Do=d(t),te=a(t,"DIV",{class:!0});var Ut=s(te);b(Qe.$$.fragment,Ut),Jn=d(Ut),et=a(Ut,"P",{});var Jo=s(et);Qn=i(Jo,`The bare ConvNext model outputting raw features without any specific head on top.
This model is a PyTorch `),tt=a(Jo,"A",{href:!0,rel:!0});var or=s(tt);ea=i(or,"torch.nn.Module"),or.forEach(o),ta=i(Jo,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Jo.forEach(o),oa=d(Ut),W=a(Ut,"DIV",{class:!0});var ne=s(W);b(ot.$$.fragment,ne),na=d(ne),ve=a(ne,"P",{});var Vt=s(ve);aa=i(Vt,"The "),qt=a(Vt,"A",{href:!0});var nr=s(qt);sa=i(nr,"ConvNextModel"),nr.forEach(o),ra=i(Vt," forward method, overrides the "),so=a(Vt,"CODE",{});var ar=s(so);ia=i(ar,"__call__"),ar.forEach(o),la=i(Vt," special method."),Vt.forEach(o),ca=d(ne),b(ke.$$.fragment,ne),da=d(ne),ro=a(ne,"P",{});var sr=s(ro);ha=i(sr,"Example:"),sr.forEach(o),fa=d(ne),b(nt.$$.fragment,ne),ne.forEach(o),Ut.forEach(o),Oo=d(t),_e=a(t,"H2",{class:!0});var Qo=s(_e);je=a(Qo,"A",{id:!0,class:!0,href:!0});var rr=s(je);io=a(rr,"SPAN",{});var ir=s(io);b(at.$$.fragment,ir),ir.forEach(o),rr.forEach(o),pa=d(Qo),lo=a(Qo,"SPAN",{});var lr=s(lo);ma=i(lr,"ConvNextForImageClassification"),lr.forEach(o),Qo.forEach(o),So=d(t),B=a(t,"DIV",{class:!0});var De=s(B);b(st.$$.fragment,De),ua=d(De),co=a(De,"P",{});var cr=s(co);ga=i(cr,`ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),cr.forEach(o),va=d(De),rt=a(De,"P",{});var en=s(rt);_a=i(en,"This model is a PyTorch "),it=a(en,"A",{href:!0,rel:!0});var dr=s(it);xa=i(dr,"torch.nn.Module"),dr.forEach(o),wa=i(en,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),en.forEach(o),Ca=d(De),U=a(De,"DIV",{class:!0});var ae=s(U);b(lt.$$.fragment,ae),Ta=d(ae),xe=a(ae,"P",{});var Ht=s(xe);ba=i(Ht,"The "),At=a(Ht,"A",{href:!0});var hr=s(At);ya=i(hr,"ConvNextForImageClassification"),hr.forEach(o),$a=i(Ht," forward method, overrides the "),ho=a(Ht,"CODE",{});var fr=s(ho);Na=i(fr,"__call__"),fr.forEach(o),Ea=i(Ht," special method."),Ht.forEach(o),Fa=d(ae),b(Ie.$$.fragment,ae),ka=d(ae),fo=a(ae,"P",{});var pr=s(fo);ja=i(pr,"Example:"),pr.forEach(o),Ia=d(ae),b(ct.$$.fragment,ae),ae.forEach(o),De.forEach(o),Xo=d(t),we=a(t,"H2",{class:!0});var tn=s(we);Me=a(tn,"A",{id:!0,class:!0,href:!0});var mr=s(Me);po=a(mr,"SPAN",{});var ur=s(po);b(dt.$$.fragment,ur),ur.forEach(o),mr.forEach(o),Ma=d(tn),mo=a(tn,"SPAN",{});var gr=s(mo);Pa=i(gr,"TFConvNextModel"),gr.forEach(o),tn.forEach(o),Wo=d(t),O=a(t,"DIV",{class:!0});var se=s(O);b(ht.$$.fragment,se),qa=d(se),ft=a(se,"P",{});var on=s(ft);Aa=i(on,`The bare ConvNext model outputting raw features without any specific head on top.
This model inherits from `),zt=a(on,"A",{href:!0});var vr=s(zt);za=i(vr,"TFPreTrainedModel"),vr.forEach(o),La=i(on,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),on.forEach(o),Da=d(se),pt=a(se,"P",{});var nn=s(pt);Oa=i(nn,"This model is also a "),mt=a(nn,"A",{href:!0,rel:!0});var _r=s(mt);Sa=i(_r,"tf.keras.Model"),_r.forEach(o),Xa=i(nn,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),nn.forEach(o),Wa=d(se),b(Pe.$$.fragment,se),Ua=d(se),V=a(se,"DIV",{class:!0});var re=s(V);b(ut.$$.fragment,re),Va=d(re),Ce=a(re,"P",{});var Bt=s(Ce);Ha=i(Bt,"The "),Lt=a(Bt,"A",{href:!0});var xr=s(Lt);Ba=i(xr,"TFConvNextModel"),xr.forEach(o),Ka=i(Bt," forward method, overrides the "),uo=a(Bt,"CODE",{});var wr=s(uo);Ra=i(wr,"__call__"),wr.forEach(o),Ga=i(Bt," special method."),Bt.forEach(o),Za=d(re),b(qe.$$.fragment,re),Ya=d(re),go=a(re,"P",{});var Cr=s(go);Ja=i(Cr,"Examples:"),Cr.forEach(o),Qa=d(re),b(gt.$$.fragment,re),re.forEach(o),se.forEach(o),Uo=d(t),Te=a(t,"H2",{class:!0});var an=s(Te);Ae=a(an,"A",{id:!0,class:!0,href:!0});var Tr=s(Ae);vo=a(Tr,"SPAN",{});var br=s(vo);b(vt.$$.fragment,br),br.forEach(o),Tr.forEach(o),es=d(an),_o=a(an,"SPAN",{});var yr=s(_o);ts=i(yr,"TFConvNextForImageClassification"),yr.forEach(o),an.forEach(o),Vo=d(t),q=a(t,"DIV",{class:!0});var Z=s(q);b(_t.$$.fragment,Z),os=d(Z),xo=a(Z,"P",{});var $r=s(xo);ns=i($r,`ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),$r.forEach(o),as=d(Z),xt=a(Z,"P",{});var sn=s(xt);ss=i(sn,"This model inherits from "),Dt=a(sn,"A",{href:!0});var Nr=s(Dt);rs=i(Nr,"TFPreTrainedModel"),Nr.forEach(o),is=i(sn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),sn.forEach(o),ls=d(Z),wt=a(Z,"P",{});var rn=s(wt);cs=i(rn,"This model is also a "),Ct=a(rn,"A",{href:!0,rel:!0});var Er=s(Ct);ds=i(Er,"tf.keras.Model"),Er.forEach(o),hs=i(rn,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),rn.forEach(o),fs=d(Z),b(ze.$$.fragment,Z),ps=d(Z),H=a(Z,"DIV",{class:!0});var ie=s(H);b(Tt.$$.fragment,ie),ms=d(ie),be=a(ie,"P",{});var Kt=s(be);us=i(Kt,"The "),Ot=a(Kt,"A",{href:!0});var Fr=s(Ot);gs=i(Fr,"TFConvNextForImageClassification"),Fr.forEach(o),vs=i(Kt," forward method, overrides the "),wo=a(Kt,"CODE",{});var kr=s(wo);_s=i(kr,"__call__"),kr.forEach(o),xs=i(Kt," special method."),Kt.forEach(o),ws=d(ie),b(Le.$$.fragment,ie),Cs=d(ie),Co=a(ie,"P",{});var jr=s(Co);Ts=i(jr,"Examples:"),jr.forEach(o),bs=d(ie),b(bt.$$.fragment,ie),ie.forEach(o),Z.forEach(o),this.h()},h(){l(f,"name","hf:doc:metadata"),l(f,"content",JSON.stringify(Vr)),l(g,"id","convnext"),l(g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(g,"href","#convnext"),l(u,"class","relative group"),l(A,"id","overview"),l(A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(A,"href","#overview"),l(w,"class","relative group"),l(P,"href","https://arxiv.org/abs/2201.03545"),l(P,"rel","nofollow"),Ar(ye.src,ys="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/convnext_architecture.jpg")||l(ye,"src",ys),l(ye,"alt","drawing"),l(ye,"width","600"),l(kt,"href","https://arxiv.org/abs/2201.03545"),l(Se,"href","https://huggingface.co/nielsr"),l(Se,"rel","nofollow"),l(Xe,"href","https://github.com/ariG23498"),l(Xe,"rel","nofollow"),l(We,"href","https://github.com/gante"),l(We,"rel","nofollow"),l(Ue,"href","https://github.com/sayakpaul"),l(Ue,"rel","nofollow"),l(Ve,"href","https://github.com/facebookresearch/ConvNeXt"),l(Ve,"rel","nofollow"),l(Ne,"id","transformers.ConvNextConfig"),l(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Ne,"href","#transformers.ConvNextConfig"),l(fe,"class","relative group"),l(jt,"href","/docs/transformers/pr_16707/en/model_doc/convnext#transformers.ConvNextModel"),l(Ke,"href","https://huggingface.co/facebook/convnext-tiny-224"),l(Ke,"rel","nofollow"),l(It,"href","/docs/transformers/pr_16707/en/main_classes/configuration#transformers.PretrainedConfig"),l(Mt,"href","/docs/transformers/pr_16707/en/main_classes/configuration#transformers.PretrainedConfig"),l(D,"class","docstring"),l(Ee,"id","transformers.ConvNextFeatureExtractor"),l(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Ee,"href","#transformers.ConvNextFeatureExtractor"),l(ue,"class","relative group"),l(Pt,"href","/docs/transformers/pr_16707/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"),l(ee,"class","docstring"),l(Fe,"id","transformers.ConvNextModel"),l(Fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Fe,"href","#transformers.ConvNextModel"),l(ge,"class","relative group"),l(tt,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(tt,"rel","nofollow"),l(qt,"href","/docs/transformers/pr_16707/en/model_doc/convnext#transformers.ConvNextModel"),l(W,"class","docstring"),l(te,"class","docstring"),l(je,"id","transformers.ConvNextForImageClassification"),l(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(je,"href","#transformers.ConvNextForImageClassification"),l(_e,"class","relative group"),l(it,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(it,"rel","nofollow"),l(At,"href","/docs/transformers/pr_16707/en/model_doc/convnext#transformers.ConvNextForImageClassification"),l(U,"class","docstring"),l(B,"class","docstring"),l(Me,"id","transformers.TFConvNextModel"),l(Me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Me,"href","#transformers.TFConvNextModel"),l(we,"class","relative group"),l(zt,"href","/docs/transformers/pr_16707/en/main_classes/model#transformers.TFPreTrainedModel"),l(mt,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),l(mt,"rel","nofollow"),l(Lt,"href","/docs/transformers/pr_16707/en/model_doc/convnext#transformers.TFConvNextModel"),l(V,"class","docstring"),l(O,"class","docstring"),l(Ae,"id","transformers.TFConvNextForImageClassification"),l(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Ae,"href","#transformers.TFConvNextForImageClassification"),l(Te,"class","relative group"),l(Dt,"href","/docs/transformers/pr_16707/en/main_classes/model#transformers.TFPreTrainedModel"),l(Ct,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),l(Ct,"rel","nofollow"),l(Ot,"href","/docs/transformers/pr_16707/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),l(H,"class","docstring"),l(q,"class","docstring")},m(t,h){e(document.head,f),p(t,F,h),p(t,u,h),e(u,g),e(g,x),y(v,x,null),e(u,_),e(u,C),e(C,Y),p(t,X,h),p(t,w,h),e(w,A),e(A,I),y(L,I,null),e(w,J),e(w,M),e(M,Q),p(t,K,h),p(t,m,h),e(m,k),e(m,P),e(P,ce),e(m,de),p(t,j,h),p(t,R,h),e(R,he),p(t,Eo,h),p(t,Nt,h),e(Nt,Gt),e(Gt,ln),p(t,Fo,h),p(t,Et,h),e(Et,cn),p(t,ko,h),p(t,Ft,h),e(Ft,Zt),e(Zt,dn),p(t,jo,h),p(t,ye,h),p(t,Io,h),p(t,$e,h),e($e,hn),e($e,kt),e(kt,fn),e($e,pn),p(t,Mo,h),p(t,z,h),e(z,mn),e(z,Se),e(Se,un),e(z,gn),e(z,Xe),e(Xe,vn),e(z,_n),e(z,We),e(We,xn),e(z,wn),e(z,Ue),e(Ue,Cn),e(z,Tn),e(z,Ve),e(Ve,bn),e(z,yn),p(t,Po,h),p(t,fe,h),e(fe,Ne),e(Ne,Yt),y(He,Yt,null),e(fe,$n),e(fe,Jt),e(Jt,Nn),p(t,qo,h),p(t,D,h),y(Be,D,null),e(D,En),e(D,pe),e(pe,Fn),e(pe,jt),e(jt,kn),e(pe,jn),e(pe,Ke),e(Ke,In),e(pe,Mn),e(D,Pn),e(D,me),e(me,qn),e(me,It),e(It,An),e(me,zn),e(me,Mt),e(Mt,Ln),e(me,Dn),e(D,On),e(D,Qt),e(Qt,Sn),e(D,Xn),y(Re,D,null),p(t,Ao,h),p(t,ue,h),e(ue,Ee),e(Ee,eo),y(Ge,eo,null),e(ue,Wn),e(ue,to),e(to,Un),p(t,zo,h),p(t,ee,h),y(Ze,ee,null),e(ee,Vn),e(ee,oo),e(oo,Hn),e(ee,Bn),e(ee,Ye),e(Ye,Kn),e(Ye,Pt),e(Pt,Rn),e(Ye,Gn),p(t,Lo,h),p(t,ge,h),e(ge,Fe),e(Fe,no),y(Je,no,null),e(ge,Zn),e(ge,ao),e(ao,Yn),p(t,Do,h),p(t,te,h),y(Qe,te,null),e(te,Jn),e(te,et),e(et,Qn),e(et,tt),e(tt,ea),e(et,ta),e(te,oa),e(te,W),y(ot,W,null),e(W,na),e(W,ve),e(ve,aa),e(ve,qt),e(qt,sa),e(ve,ra),e(ve,so),e(so,ia),e(ve,la),e(W,ca),y(ke,W,null),e(W,da),e(W,ro),e(ro,ha),e(W,fa),y(nt,W,null),p(t,Oo,h),p(t,_e,h),e(_e,je),e(je,io),y(at,io,null),e(_e,pa),e(_e,lo),e(lo,ma),p(t,So,h),p(t,B,h),y(st,B,null),e(B,ua),e(B,co),e(co,ga),e(B,va),e(B,rt),e(rt,_a),e(rt,it),e(it,xa),e(rt,wa),e(B,Ca),e(B,U),y(lt,U,null),e(U,Ta),e(U,xe),e(xe,ba),e(xe,At),e(At,ya),e(xe,$a),e(xe,ho),e(ho,Na),e(xe,Ea),e(U,Fa),y(Ie,U,null),e(U,ka),e(U,fo),e(fo,ja),e(U,Ia),y(ct,U,null),p(t,Xo,h),p(t,we,h),e(we,Me),e(Me,po),y(dt,po,null),e(we,Ma),e(we,mo),e(mo,Pa),p(t,Wo,h),p(t,O,h),y(ht,O,null),e(O,qa),e(O,ft),e(ft,Aa),e(ft,zt),e(zt,za),e(ft,La),e(O,Da),e(O,pt),e(pt,Oa),e(pt,mt),e(mt,Sa),e(pt,Xa),e(O,Wa),y(Pe,O,null),e(O,Ua),e(O,V),y(ut,V,null),e(V,Va),e(V,Ce),e(Ce,Ha),e(Ce,Lt),e(Lt,Ba),e(Ce,Ka),e(Ce,uo),e(uo,Ra),e(Ce,Ga),e(V,Za),y(qe,V,null),e(V,Ya),e(V,go),e(go,Ja),e(V,Qa),y(gt,V,null),p(t,Uo,h),p(t,Te,h),e(Te,Ae),e(Ae,vo),y(vt,vo,null),e(Te,es),e(Te,_o),e(_o,ts),p(t,Vo,h),p(t,q,h),y(_t,q,null),e(q,os),e(q,xo),e(xo,ns),e(q,as),e(q,xt),e(xt,ss),e(xt,Dt),e(Dt,rs),e(xt,is),e(q,ls),e(q,wt),e(wt,cs),e(wt,Ct),e(Ct,ds),e(wt,hs),e(q,fs),y(ze,q,null),e(q,ps),e(q,H),y(Tt,H,null),e(H,ms),e(H,be),e(be,us),e(be,Ot),e(Ot,gs),e(be,vs),e(be,wo),e(wo,_s),e(be,xs),e(H,ws),y(Le,H,null),e(H,Cs),e(H,Co),e(Co,Ts),e(H,bs),y(bt,H,null),Ho=!0},p(t,[h]){const yt={};h&2&&(yt.$$scope={dirty:h,ctx:t}),ke.$set(yt);const To={};h&2&&(To.$$scope={dirty:h,ctx:t}),Ie.$set(To);const bo={};h&2&&(bo.$$scope={dirty:h,ctx:t}),Pe.$set(bo);const yo={};h&2&&(yo.$$scope={dirty:h,ctx:t}),qe.$set(yo);const $t={};h&2&&($t.$$scope={dirty:h,ctx:t}),ze.$set($t);const $o={};h&2&&($o.$$scope={dirty:h,ctx:t}),Le.$set($o)},i(t){Ho||($(v.$$.fragment,t),$(L.$$.fragment,t),$(He.$$.fragment,t),$(Be.$$.fragment,t),$(Re.$$.fragment,t),$(Ge.$$.fragment,t),$(Ze.$$.fragment,t),$(Je.$$.fragment,t),$(Qe.$$.fragment,t),$(ot.$$.fragment,t),$(ke.$$.fragment,t),$(nt.$$.fragment,t),$(at.$$.fragment,t),$(st.$$.fragment,t),$(lt.$$.fragment,t),$(Ie.$$.fragment,t),$(ct.$$.fragment,t),$(dt.$$.fragment,t),$(ht.$$.fragment,t),$(Pe.$$.fragment,t),$(ut.$$.fragment,t),$(qe.$$.fragment,t),$(gt.$$.fragment,t),$(vt.$$.fragment,t),$(_t.$$.fragment,t),$(ze.$$.fragment,t),$(Tt.$$.fragment,t),$(Le.$$.fragment,t),$(bt.$$.fragment,t),Ho=!0)},o(t){N(v.$$.fragment,t),N(L.$$.fragment,t),N(He.$$.fragment,t),N(Be.$$.fragment,t),N(Re.$$.fragment,t),N(Ge.$$.fragment,t),N(Ze.$$.fragment,t),N(Je.$$.fragment,t),N(Qe.$$.fragment,t),N(ot.$$.fragment,t),N(ke.$$.fragment,t),N(nt.$$.fragment,t),N(at.$$.fragment,t),N(st.$$.fragment,t),N(lt.$$.fragment,t),N(Ie.$$.fragment,t),N(ct.$$.fragment,t),N(dt.$$.fragment,t),N(ht.$$.fragment,t),N(Pe.$$.fragment,t),N(ut.$$.fragment,t),N(qe.$$.fragment,t),N(gt.$$.fragment,t),N(vt.$$.fragment,t),N(_t.$$.fragment,t),N(ze.$$.fragment,t),N(Tt.$$.fragment,t),N(Le.$$.fragment,t),N(bt.$$.fragment,t),Ho=!1},d(t){o(f),t&&o(F),t&&o(u),E(v),t&&o(X),t&&o(w),E(L),t&&o(K),t&&o(m),t&&o(j),t&&o(R),t&&o(Eo),t&&o(Nt),t&&o(Fo),t&&o(Et),t&&o(ko),t&&o(Ft),t&&o(jo),t&&o(ye),t&&o(Io),t&&o($e),t&&o(Mo),t&&o(z),t&&o(Po),t&&o(fe),E(He),t&&o(qo),t&&o(D),E(Be),E(Re),t&&o(Ao),t&&o(ue),E(Ge),t&&o(zo),t&&o(ee),E(Ze),t&&o(Lo),t&&o(ge),E(Je),t&&o(Do),t&&o(te),E(Qe),E(ot),E(ke),E(nt),t&&o(Oo),t&&o(_e),E(at),t&&o(So),t&&o(B),E(st),E(lt),E(Ie),E(ct),t&&o(Xo),t&&o(we),E(dt),t&&o(Wo),t&&o(O),E(ht),E(Pe),E(ut),E(qe),E(gt),t&&o(Uo),t&&o(Te),E(vt),t&&o(Vo),t&&o(q),E(_t),E(ze),E(Tt),E(Le),E(bt)}}}const Vr={local:"convnext",sections:[{local:"overview",title:"Overview"},{local:"transformers.ConvNextConfig",title:"ConvNextConfig"},{local:"transformers.ConvNextFeatureExtractor",title:"ConvNextFeatureExtractor"},{local:"transformers.ConvNextModel",title:"ConvNextModel"},{local:"transformers.ConvNextForImageClassification",title:"ConvNextForImageClassification"},{local:"transformers.TFConvNextModel",title:"TFConvNextModel"},{local:"transformers.TFConvNextForImageClassification",title:"TFConvNextForImageClassification"}],title:"ConvNeXT"};function Hr(S){return zr(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Yr extends Ir{constructor(f){super();Mr(this,f,Hr,Ur,Pr,{})}}export{Yr as default,Vr as metadata};
