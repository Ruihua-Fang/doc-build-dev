import{S as O5t,i as V5t,s as X5t,e as a,k as l,w as F,t as o,M as z5t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as Q5t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as QPr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function W5t(L){let g,v,p,m,u,d,h,Mo,ri,tf,Kr,ti,ai,Ew,af,qe,Xe,ni,Mn,Cw,En,Cn,ww,si,wn,Aw,li,nf,va;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ri=a("code"),tf=o("model_type"),Kr=o(" attribute is set to the same key you use when registering the config (here "),ti=a("code"),ai=o('"new-model"'),Ew=o(")."),af=l(),qe=a("p"),Xe=o("Likewise, if your "),ni=a("code"),Mn=o("NewModel"),Cw=o(" is a subclass of "),En=a("a"),Cn=o("PreTrainedModel"),ww=o(`, make sure its
`),si=a("code"),wn=o("config_class"),Aw=o(` attribute is set to the same class you use when registering the model (here
`),li=a("code"),nf=o("NewModelConfig"),va=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var jx=s(p);m=r(jx,"NewModelConfig"),jx.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ii=s(d);h=r(ii,"PretrainedConfig"),ii.forEach(t),Mo=r(Ae,`, make sure its
`),ri=n(Ae,"CODE",{});var Dx=s(ri);tf=r(Dx,"model_type"),Dx.forEach(t),Kr=r(Ae," attribute is set to the same key you use when registering the config (here "),ti=n(Ae,"CODE",{});var Gx=s(ti);ai=r(Gx,'"new-model"'),Gx.forEach(t),Ew=r(Ae,")."),Ae.forEach(t),af=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ni=n(Eo,"CODE",{});var Fa=s(ni);Mn=r(Fa,"NewModel"),Fa.forEach(t),Cw=r(Eo," is a subclass of "),En=n(Eo,"A",{href:!0});var Ox=s(En);Cn=r(Ox,"PreTrainedModel"),Ox.forEach(t),ww=r(Eo,`, make sure its
`),si=n(Eo,"CODE",{});var sf=s(si);wn=r(sf,"config_class"),sf.forEach(t),Aw=r(Eo,` attribute is set to the same class you use when registering the model (here
`),li=n(Eo,"CODE",{});var Vx=s(li);nf=r(Vx,"NewModelConfig"),Vx.forEach(t),va=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(En,"href","/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,ri),e(ri,tf),e(g,Kr),e(g,ti),e(ti,ai),e(g,Ew),b(ze,af,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ni),e(ni,Mn),e(qe,Cw),e(qe,En),e(En,Cn),e(qe,ww),e(qe,si),e(si,wn),e(qe,Aw),e(qe,li),e(li,nf),e(qe,va)},d(ze){ze&&t(g),ze&&t(af),ze&&t(qe)}}}function H5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J5t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Y5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K5t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Z5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ct(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ECt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ACt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ct(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ICt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O3t(L){let g,v,p,m,u,d,h,Mo,ri,tf,Kr,ti,ai,Ew,af,qe,Xe,ni,Mn,Cw,En,Cn,ww,si,wn,Aw,li,nf,va,ze,Ae,jx,ii,Dx,Gx,Eo,Fa,Ox,sf,Vx,RNe,yBe,di,lf,gZ,yw,BNe,hZ,PNe,LBe,An,INe,pZ,qNe,NNe,uZ,jNe,DNe,xBe,Lw,$Be,Xx,GNe,kBe,df,SBe,ci,cf,_Z,xw,ONe,bZ,VNe,RBe,Co,$w,XNe,kw,zNe,zx,QNe,WNe,HNe,Sw,UNe,vZ,JNe,YNe,KNe,Mr,Rw,ZNe,FZ,eje,oje,fi,rje,TZ,tje,aje,MZ,nje,sje,lje,A,ff,EZ,ije,dje,Qx,cje,fje,mje,mf,CZ,gje,hje,Wx,pje,uje,_je,gf,wZ,bje,vje,Hx,Fje,Tje,Mje,hf,AZ,Eje,Cje,Ux,wje,Aje,yje,pf,yZ,Lje,xje,Jx,$je,kje,Sje,uf,LZ,Rje,Bje,Yx,Pje,Ije,qje,_f,xZ,Nje,jje,Kx,Dje,Gje,Oje,bf,$Z,Vje,Xje,Zx,zje,Qje,Wje,vf,kZ,Hje,Uje,e$,Jje,Yje,Kje,Ff,SZ,Zje,eDe,o$,oDe,rDe,tDe,Tf,RZ,aDe,nDe,r$,sDe,lDe,iDe,Mf,BZ,dDe,cDe,t$,fDe,mDe,gDe,Ef,PZ,hDe,pDe,a$,uDe,_De,bDe,Cf,IZ,vDe,FDe,n$,TDe,MDe,EDe,wf,qZ,CDe,wDe,s$,ADe,yDe,LDe,Af,NZ,xDe,$De,l$,kDe,SDe,RDe,yf,jZ,BDe,PDe,i$,IDe,qDe,NDe,Lf,DZ,jDe,DDe,d$,GDe,ODe,VDe,xf,GZ,XDe,zDe,c$,QDe,WDe,HDe,$f,OZ,UDe,JDe,f$,YDe,KDe,ZDe,kf,VZ,eGe,oGe,m$,rGe,tGe,aGe,Sf,XZ,nGe,sGe,g$,lGe,iGe,dGe,Rf,zZ,cGe,fGe,h$,mGe,gGe,hGe,Bf,QZ,pGe,uGe,p$,_Ge,bGe,vGe,Pf,WZ,FGe,TGe,u$,MGe,EGe,CGe,If,HZ,wGe,AGe,_$,yGe,LGe,xGe,qf,UZ,$Ge,kGe,b$,SGe,RGe,BGe,Nf,JZ,PGe,IGe,v$,qGe,NGe,jGe,jf,YZ,DGe,GGe,F$,OGe,VGe,XGe,Df,KZ,zGe,QGe,T$,WGe,HGe,UGe,Gf,ZZ,JGe,YGe,M$,KGe,ZGe,eOe,Of,eee,oOe,rOe,E$,tOe,aOe,nOe,Vf,oee,sOe,lOe,C$,iOe,dOe,cOe,Xf,ree,fOe,mOe,w$,gOe,hOe,pOe,zf,tee,uOe,_Oe,A$,bOe,vOe,FOe,Qf,aee,TOe,MOe,y$,EOe,COe,wOe,Wf,nee,AOe,yOe,L$,LOe,xOe,$Oe,Hf,see,kOe,SOe,x$,ROe,BOe,POe,Uf,lee,IOe,qOe,$$,NOe,jOe,DOe,Jf,iee,GOe,OOe,k$,VOe,XOe,zOe,Yf,dee,QOe,WOe,S$,HOe,UOe,JOe,Kf,cee,YOe,KOe,R$,ZOe,eVe,oVe,Zf,fee,rVe,tVe,B$,aVe,nVe,sVe,em,mee,lVe,iVe,P$,dVe,cVe,fVe,om,gee,mVe,gVe,I$,hVe,pVe,uVe,rm,hee,_Ve,bVe,q$,vVe,FVe,TVe,tm,pee,MVe,EVe,N$,CVe,wVe,AVe,am,uee,yVe,LVe,j$,xVe,$Ve,kVe,nm,_ee,SVe,RVe,D$,BVe,PVe,IVe,sm,bee,qVe,NVe,G$,jVe,DVe,GVe,lm,vee,OVe,VVe,O$,XVe,zVe,QVe,im,Fee,WVe,HVe,V$,UVe,JVe,YVe,dm,Tee,KVe,ZVe,X$,eXe,oXe,rXe,cm,Mee,tXe,aXe,z$,nXe,sXe,lXe,fm,Eee,iXe,dXe,Q$,cXe,fXe,mXe,mm,Cee,gXe,hXe,W$,pXe,uXe,_Xe,gm,wee,bXe,vXe,H$,FXe,TXe,MXe,hm,Aee,EXe,CXe,U$,wXe,AXe,yXe,pm,yee,LXe,xXe,J$,$Xe,kXe,SXe,um,Lee,RXe,BXe,Y$,PXe,IXe,qXe,_m,xee,NXe,jXe,K$,DXe,GXe,OXe,bm,$ee,VXe,XXe,Z$,zXe,QXe,WXe,vm,kee,HXe,UXe,ek,JXe,YXe,KXe,Fm,See,ZXe,eze,ok,oze,rze,tze,Tm,Ree,aze,nze,rk,sze,lze,ize,Mm,Bee,dze,cze,tk,fze,mze,gze,Em,Pee,hze,pze,ak,uze,_ze,bze,Cm,Iee,vze,Fze,nk,Tze,Mze,Eze,wm,qee,Cze,wze,sk,Aze,yze,Lze,Am,Nee,xze,$ze,lk,kze,Sze,Rze,ym,jee,Bze,Pze,ik,Ize,qze,Nze,Lm,Dee,jze,Dze,dk,Gze,Oze,Vze,xm,Gee,Xze,zze,ck,Qze,Wze,Hze,$m,Oee,Uze,Jze,fk,Yze,Kze,Zze,km,Vee,eQe,oQe,mk,rQe,tQe,aQe,Sm,Xee,nQe,sQe,gk,lQe,iQe,dQe,Rm,zee,cQe,fQe,hk,mQe,gQe,hQe,Bm,Qee,pQe,uQe,pk,_Qe,bQe,vQe,Pm,Wee,FQe,TQe,uk,MQe,EQe,CQe,Im,Hee,wQe,AQe,_k,yQe,LQe,xQe,qm,Uee,$Qe,kQe,bk,SQe,RQe,BQe,Nm,Jee,PQe,IQe,vk,qQe,NQe,jQe,jm,Yee,DQe,GQe,Fk,OQe,VQe,XQe,Dm,Kee,zQe,QQe,Tk,WQe,HQe,UQe,Gm,Zee,JQe,YQe,Mk,KQe,ZQe,eWe,Om,eoe,oWe,rWe,Ek,tWe,aWe,nWe,Vm,ooe,sWe,lWe,Ck,iWe,dWe,cWe,Xm,roe,fWe,mWe,wk,gWe,hWe,pWe,zm,toe,uWe,_We,Ak,bWe,vWe,FWe,Qm,aoe,TWe,MWe,yk,EWe,CWe,wWe,Wm,noe,AWe,yWe,Lk,LWe,xWe,$We,Hm,soe,kWe,SWe,xk,RWe,BWe,PWe,Um,loe,IWe,qWe,$k,NWe,jWe,DWe,Jm,ioe,GWe,OWe,kk,VWe,XWe,zWe,Ym,doe,QWe,WWe,Sk,HWe,UWe,JWe,Km,coe,YWe,KWe,Rk,ZWe,eHe,oHe,Zm,foe,rHe,tHe,Bk,aHe,nHe,sHe,eg,moe,lHe,iHe,Pk,dHe,cHe,fHe,og,goe,mHe,gHe,Ik,hHe,pHe,uHe,rg,hoe,_He,bHe,qk,vHe,FHe,THe,tg,poe,MHe,EHe,Nk,CHe,wHe,AHe,ag,uoe,yHe,LHe,jk,xHe,$He,kHe,ng,_oe,SHe,RHe,Dk,BHe,PHe,IHe,sg,boe,qHe,NHe,Gk,jHe,DHe,GHe,lg,OHe,ig,Bw,VHe,voe,XHe,BBe,mi,dg,Foe,Pw,zHe,Toe,QHe,PBe,wo,Iw,WHe,qw,HHe,Ok,UHe,JHe,YHe,Nw,KHe,Moe,ZHe,eUe,oUe,Er,jw,rUe,Eoe,tUe,aUe,Ta,nUe,Coe,sUe,lUe,woe,iUe,dUe,Aoe,cUe,fUe,mUe,k,yn,yoe,gUe,hUe,Vk,pUe,uUe,Xk,_Ue,bUe,vUe,Ln,Loe,FUe,TUe,zk,MUe,EUe,Qk,CUe,wUe,AUe,xn,xoe,yUe,LUe,Wk,xUe,$Ue,Hk,kUe,SUe,RUe,cg,$oe,BUe,PUe,Uk,IUe,qUe,NUe,$n,koe,jUe,DUe,Jk,GUe,OUe,Yk,VUe,XUe,zUe,fg,Soe,QUe,WUe,Kk,HUe,UUe,JUe,mg,Roe,YUe,KUe,Zk,ZUe,eJe,oJe,gg,Boe,rJe,tJe,eS,aJe,nJe,sJe,kn,Poe,lJe,iJe,oS,dJe,cJe,rS,fJe,mJe,gJe,Sn,Ioe,hJe,pJe,tS,uJe,_Je,aS,bJe,vJe,FJe,Rn,qoe,TJe,MJe,nS,EJe,CJe,sS,wJe,AJe,yJe,hg,Noe,LJe,xJe,lS,$Je,kJe,SJe,pg,joe,RJe,BJe,iS,PJe,IJe,qJe,Bn,Doe,NJe,jJe,dS,DJe,GJe,cS,OJe,VJe,XJe,ug,Goe,zJe,QJe,fS,WJe,HJe,UJe,Pn,Ooe,JJe,YJe,mS,KJe,ZJe,gS,eYe,oYe,rYe,In,Voe,tYe,aYe,hS,nYe,sYe,pS,lYe,iYe,dYe,qn,Xoe,cYe,fYe,uS,mYe,gYe,_S,hYe,pYe,uYe,_g,zoe,_Ye,bYe,bS,vYe,FYe,TYe,Nn,Qoe,MYe,EYe,vS,CYe,wYe,FS,AYe,yYe,LYe,jn,Woe,xYe,$Ye,TS,kYe,SYe,MS,RYe,BYe,PYe,Dn,Hoe,IYe,qYe,ES,NYe,jYe,CS,DYe,GYe,OYe,Gn,Uoe,VYe,XYe,wS,zYe,QYe,AS,WYe,HYe,UYe,On,Joe,JYe,YYe,yS,KYe,ZYe,LS,eKe,oKe,rKe,Vn,Yoe,tKe,aKe,xS,nKe,sKe,$S,lKe,iKe,dKe,bg,Koe,cKe,fKe,kS,mKe,gKe,hKe,Xn,Zoe,pKe,uKe,SS,_Ke,bKe,RS,vKe,FKe,TKe,vg,ere,MKe,EKe,BS,CKe,wKe,AKe,zn,ore,yKe,LKe,PS,xKe,$Ke,IS,kKe,SKe,RKe,Qn,rre,BKe,PKe,qS,IKe,qKe,NS,NKe,jKe,DKe,Wn,tre,GKe,OKe,jS,VKe,XKe,DS,zKe,QKe,WKe,Hn,are,HKe,UKe,GS,JKe,YKe,OS,KKe,ZKe,eZe,Un,nre,oZe,rZe,VS,tZe,aZe,XS,nZe,sZe,lZe,Fg,sre,iZe,dZe,zS,cZe,fZe,mZe,Jn,lre,gZe,hZe,QS,pZe,uZe,WS,_Ze,bZe,vZe,Yn,ire,FZe,TZe,HS,MZe,EZe,US,CZe,wZe,AZe,Kn,dre,yZe,LZe,JS,xZe,$Ze,YS,kZe,SZe,RZe,Zn,cre,BZe,PZe,KS,IZe,qZe,ZS,NZe,jZe,DZe,es,fre,GZe,OZe,eR,VZe,XZe,oR,zZe,QZe,WZe,os,mre,HZe,UZe,rR,JZe,YZe,tR,KZe,ZZe,eeo,Tg,gre,oeo,reo,aR,teo,aeo,neo,rs,hre,seo,leo,nR,ieo,deo,sR,ceo,feo,meo,Mg,pre,geo,heo,lR,peo,ueo,_eo,Eg,ure,beo,veo,iR,Feo,Teo,Meo,ts,_re,Eeo,Ceo,dR,weo,Aeo,cR,yeo,Leo,xeo,as,bre,$eo,keo,fR,Seo,Reo,mR,Beo,Peo,Ieo,ns,vre,qeo,Neo,gR,jeo,Deo,hR,Geo,Oeo,Veo,Cg,Fre,Xeo,zeo,pR,Qeo,Weo,Heo,ss,Tre,Ueo,Jeo,uR,Yeo,Keo,_R,Zeo,eoo,ooo,ls,Mre,roo,too,bR,aoo,noo,vR,soo,loo,ioo,is,Ere,doo,coo,FR,foo,moo,TR,goo,hoo,poo,ds,Cre,uoo,_oo,MR,boo,voo,ER,Foo,Too,Moo,cs,wre,Eoo,Coo,CR,woo,Aoo,wR,yoo,Loo,xoo,fs,Are,$oo,koo,AR,Soo,Roo,yR,Boo,Poo,Ioo,ms,yre,qoo,Noo,LR,joo,Doo,xR,Goo,Ooo,Voo,wg,Lre,Xoo,zoo,$R,Qoo,Woo,Hoo,Ag,xre,Uoo,Joo,kR,Yoo,Koo,Zoo,yg,$re,ero,oro,SR,rro,tro,aro,Lg,kre,nro,sro,RR,lro,iro,dro,gs,Sre,cro,fro,BR,mro,gro,PR,hro,pro,uro,xg,Rre,_ro,bro,IR,vro,Fro,Tro,hs,Bre,Mro,Ero,qR,Cro,wro,NR,Aro,yro,Lro,ps,Pre,xro,$ro,jR,kro,Sro,DR,Rro,Bro,Pro,us,Ire,Iro,qro,GR,Nro,jro,OR,Dro,Gro,Oro,_s,qre,Vro,Xro,VR,zro,Qro,XR,Wro,Hro,Uro,bs,Nre,Jro,Yro,zR,Kro,Zro,QR,eto,oto,rto,vs,jre,tto,ato,WR,nto,sto,HR,lto,ito,dto,$g,Dre,cto,fto,UR,mto,gto,hto,kg,Gre,pto,uto,JR,_to,bto,vto,Fs,Ore,Fto,Tto,YR,Mto,Eto,KR,Cto,wto,Ato,Ts,Vre,yto,Lto,ZR,xto,$to,eB,kto,Sto,Rto,Ms,Xre,Bto,Pto,oB,Ito,qto,rB,Nto,jto,Dto,Sg,zre,Gto,Oto,tB,Vto,Xto,zto,Rg,Qre,Qto,Wto,aB,Hto,Uto,Jto,Bg,Wre,Yto,Kto,nB,Zto,eao,oao,Es,Hre,rao,tao,sB,aao,nao,lB,sao,lao,iao,Pg,Ure,dao,cao,iB,fao,mao,gao,Ig,Jre,hao,pao,dB,uao,_ao,bao,Cs,Yre,vao,Fao,cB,Tao,Mao,fB,Eao,Cao,wao,qg,Kre,Aao,yao,mB,Lao,xao,$ao,Ng,Zre,kao,Sao,gB,Rao,Bao,Pao,ws,ete,Iao,qao,hB,Nao,jao,pB,Dao,Gao,Oao,As,ote,Vao,Xao,uB,zao,Qao,_B,Wao,Hao,Uao,ys,rte,Jao,Yao,bB,Kao,Zao,vB,eno,ono,rno,Ls,tte,tno,ano,FB,nno,sno,TB,lno,ino,dno,jg,cno,Dg,Dw,fno,ate,mno,IBe,gi,Gg,nte,Gw,gno,ste,hno,qBe,Ao,Ow,pno,Vw,uno,MB,_no,bno,vno,Xw,Fno,lte,Tno,Mno,Eno,Qe,zw,Cno,ite,wno,Ano,Ma,yno,dte,Lno,xno,cte,$no,kno,fte,Sno,Rno,Bno,te,Og,mte,Pno,Ino,EB,qno,Nno,jno,Vg,gte,Dno,Gno,CB,Ono,Vno,Xno,Xg,hte,zno,Qno,wB,Wno,Hno,Uno,zg,pte,Jno,Yno,AB,Kno,Zno,eso,Qg,ute,oso,rso,yB,tso,aso,nso,Wg,_te,sso,lso,LB,iso,dso,cso,Hg,bte,fso,mso,xB,gso,hso,pso,Ug,vte,uso,_so,$B,bso,vso,Fso,Jg,Fte,Tso,Mso,kB,Eso,Cso,wso,Yg,Tte,Aso,yso,SB,Lso,xso,$so,Kg,Mte,kso,Sso,RB,Rso,Bso,Pso,Zg,Ete,Iso,qso,BB,Nso,jso,Dso,eh,Cte,Gso,Oso,PB,Vso,Xso,zso,oh,wte,Qso,Wso,IB,Hso,Uso,Jso,rh,Ate,Yso,Kso,qB,Zso,elo,olo,th,yte,rlo,tlo,NB,alo,nlo,slo,ah,Lte,llo,ilo,jB,dlo,clo,flo,nh,xte,mlo,glo,DB,hlo,plo,ulo,sh,$te,_lo,blo,GB,vlo,Flo,Tlo,lh,kte,Mlo,Elo,OB,Clo,wlo,Alo,ih,Ste,ylo,Llo,VB,xlo,$lo,klo,dh,Rte,Slo,Rlo,XB,Blo,Plo,Ilo,ch,Bte,qlo,Nlo,zB,jlo,Dlo,Glo,fh,Pte,Olo,Vlo,QB,Xlo,zlo,Qlo,mh,Wlo,gh,Hlo,hh,Qw,Ulo,Ite,Jlo,NBe,hi,ph,qte,Ww,Ylo,Nte,Klo,jBe,yo,Hw,Zlo,Uw,eio,WB,oio,rio,tio,Jw,aio,jte,nio,sio,lio,We,Yw,iio,Dte,dio,cio,pi,fio,Gte,mio,gio,Ote,hio,pio,uio,be,uh,Vte,_io,bio,HB,vio,Fio,Tio,_h,Xte,Mio,Eio,UB,Cio,wio,Aio,bh,zte,yio,Lio,JB,xio,$io,kio,vh,Qte,Sio,Rio,YB,Bio,Pio,Iio,Fh,Wte,qio,Nio,KB,jio,Dio,Gio,Th,Hte,Oio,Vio,ZB,Xio,zio,Qio,Mh,Ute,Wio,Hio,eP,Uio,Jio,Yio,Eh,Jte,Kio,Zio,oP,edo,odo,rdo,Ch,Yte,tdo,ado,rP,ndo,sdo,ldo,wh,Kte,ido,ddo,tP,cdo,fdo,mdo,Ah,Zte,gdo,hdo,aP,pdo,udo,_do,yh,eae,bdo,vdo,nP,Fdo,Tdo,Mdo,Lh,oae,Edo,Cdo,sP,wdo,Ado,ydo,xh,rae,Ldo,xdo,lP,$do,kdo,Sdo,$h,Rdo,kh,Bdo,Sh,Kw,Pdo,tae,Ido,DBe,ui,Rh,aae,Zw,qdo,nae,Ndo,GBe,Lo,eA,jdo,_i,Ddo,iP,Gdo,Odo,dP,Vdo,Xdo,zdo,oA,Qdo,sae,Wdo,Hdo,Udo,Zr,rA,Jdo,lae,Ydo,Kdo,bi,Zdo,iae,eco,oco,cP,rco,tco,aco,Bh,nco,He,tA,sco,dae,lco,ico,Ea,dco,cae,cco,fco,fae,mco,gco,mae,hco,pco,uco,x,Ph,gae,_co,bco,fP,vco,Fco,Tco,Ih,hae,Mco,Eco,mP,Cco,wco,Aco,qh,pae,yco,Lco,gP,xco,$co,kco,Nh,uae,Sco,Rco,hP,Bco,Pco,Ico,jh,_ae,qco,Nco,pP,jco,Dco,Gco,Dh,bae,Oco,Vco,uP,Xco,zco,Qco,Gh,vae,Wco,Hco,_P,Uco,Jco,Yco,Oh,Fae,Kco,Zco,bP,efo,ofo,rfo,Vh,Tae,tfo,afo,vP,nfo,sfo,lfo,Xh,Mae,ifo,dfo,FP,cfo,ffo,mfo,zh,Eae,gfo,hfo,TP,pfo,ufo,_fo,Qh,Cae,bfo,vfo,MP,Ffo,Tfo,Mfo,Wh,wae,Efo,Cfo,EP,wfo,Afo,yfo,Hh,Aae,Lfo,xfo,CP,$fo,kfo,Sfo,Uh,yae,Rfo,Bfo,wP,Pfo,Ifo,qfo,Jh,Lae,Nfo,jfo,AP,Dfo,Gfo,Ofo,Yh,xae,Vfo,Xfo,yP,zfo,Qfo,Wfo,Kh,$ae,Hfo,Ufo,LP,Jfo,Yfo,Kfo,Zh,kae,Zfo,emo,xP,omo,rmo,tmo,ep,Sae,amo,nmo,$P,smo,lmo,imo,op,Rae,dmo,cmo,kP,fmo,mmo,gmo,rp,Bae,hmo,pmo,SP,umo,_mo,bmo,tp,Pae,vmo,Fmo,RP,Tmo,Mmo,Emo,ap,Iae,Cmo,wmo,BP,Amo,ymo,Lmo,np,qae,xmo,$mo,PP,kmo,Smo,Rmo,sp,Nae,Bmo,Pmo,IP,Imo,qmo,Nmo,lp,jae,jmo,Dmo,qP,Gmo,Omo,Vmo,ip,Dae,Xmo,zmo,NP,Qmo,Wmo,Hmo,dp,Gae,Umo,Jmo,jP,Ymo,Kmo,Zmo,cp,Oae,ego,ogo,DP,rgo,tgo,ago,xs,Vae,ngo,sgo,GP,lgo,igo,OP,dgo,cgo,fgo,fp,Xae,mgo,ggo,VP,hgo,pgo,ugo,mp,zae,_go,bgo,XP,vgo,Fgo,Tgo,gp,Qae,Mgo,Ego,zP,Cgo,wgo,Ago,hp,Wae,ygo,Lgo,QP,xgo,$go,kgo,pp,Hae,Sgo,Rgo,WP,Bgo,Pgo,Igo,up,Uae,qgo,Ngo,HP,jgo,Dgo,Ggo,_p,Jae,Ogo,Vgo,UP,Xgo,zgo,Qgo,bp,Yae,Wgo,Hgo,JP,Ugo,Jgo,Ygo,vp,Kae,Kgo,Zgo,YP,eho,oho,rho,Fp,Zae,tho,aho,KP,nho,sho,lho,Tp,ene,iho,dho,ZP,cho,fho,mho,Mp,one,gho,hho,eI,pho,uho,_ho,Ep,rne,bho,vho,oI,Fho,Tho,Mho,Cp,tne,Eho,Cho,rI,who,Aho,yho,wp,ane,Lho,xho,tI,$ho,kho,Sho,Ap,nne,Rho,Bho,aI,Pho,Iho,qho,yp,sne,Nho,jho,nI,Dho,Gho,Oho,Lp,lne,Vho,Xho,sI,zho,Qho,Who,xp,ine,Hho,Uho,lI,Jho,Yho,Kho,$p,dne,Zho,epo,iI,opo,rpo,tpo,kp,cne,apo,npo,dI,spo,lpo,ipo,Sp,fne,dpo,cpo,cI,fpo,mpo,gpo,Rp,mne,hpo,ppo,fI,upo,_po,bpo,Bp,gne,vpo,Fpo,mI,Tpo,Mpo,Epo,Pp,hne,Cpo,wpo,gI,Apo,ypo,Lpo,Ip,pne,xpo,$po,hI,kpo,Spo,Rpo,qp,une,Bpo,Ppo,pI,Ipo,qpo,Npo,Np,_ne,jpo,Dpo,uI,Gpo,Opo,Vpo,jp,bne,Xpo,zpo,_I,Qpo,Wpo,Hpo,Dp,vne,Upo,Jpo,bI,Ypo,Kpo,Zpo,Gp,Fne,euo,ouo,vI,ruo,tuo,auo,Op,Tne,nuo,suo,FI,luo,iuo,duo,Vp,Mne,cuo,fuo,TI,muo,guo,huo,Xp,Ene,puo,uuo,MI,_uo,buo,vuo,zp,Cne,Fuo,Tuo,EI,Muo,Euo,Cuo,Qp,wne,wuo,Auo,CI,yuo,Luo,xuo,Wp,Ane,$uo,kuo,wI,Suo,Ruo,Buo,Hp,yne,Puo,Iuo,AI,quo,Nuo,juo,Up,Lne,Duo,Guo,yI,Ouo,Vuo,Xuo,Jp,xne,zuo,Quo,LI,Wuo,Huo,Uuo,Yp,$ne,Juo,Yuo,xI,Kuo,Zuo,e_o,Kp,kne,o_o,r_o,$I,t_o,a_o,n_o,Zp,Sne,s_o,l_o,kI,i_o,d_o,c_o,eu,Rne,f_o,m_o,SI,g_o,h_o,p_o,ou,Bne,u_o,__o,RI,b_o,v_o,F_o,ru,Pne,T_o,M_o,BI,E_o,C_o,w_o,tu,Ine,A_o,y_o,PI,L_o,x_o,$_o,au,qne,k_o,S_o,II,R_o,B_o,P_o,nu,Nne,I_o,q_o,qI,N_o,j_o,D_o,su,jne,G_o,O_o,NI,V_o,X_o,z_o,lu,Dne,Q_o,W_o,jI,H_o,U_o,J_o,iu,Gne,Y_o,K_o,DI,Z_o,e1o,o1o,du,One,r1o,t1o,GI,a1o,n1o,s1o,cu,Vne,l1o,i1o,OI,d1o,c1o,f1o,fu,Xne,m1o,g1o,VI,h1o,p1o,u1o,mu,zne,_1o,b1o,XI,v1o,F1o,T1o,gu,Qne,M1o,E1o,zI,C1o,w1o,A1o,hu,Wne,y1o,L1o,QI,x1o,$1o,k1o,pu,Hne,S1o,R1o,WI,B1o,P1o,I1o,uu,Une,q1o,N1o,HI,j1o,D1o,G1o,_u,Jne,O1o,V1o,UI,X1o,z1o,Q1o,bu,Yne,W1o,H1o,JI,U1o,J1o,Y1o,vu,Kne,K1o,Z1o,YI,ebo,obo,rbo,Fu,Zne,tbo,abo,KI,nbo,sbo,lbo,Tu,ese,ibo,dbo,ZI,cbo,fbo,mbo,Mu,gbo,ose,hbo,pbo,rse,ubo,_bo,Eu,OBe,vi,Cu,tse,aA,bbo,ase,vbo,VBe,xo,nA,Fbo,Fi,Tbo,eq,Mbo,Ebo,oq,Cbo,wbo,Abo,sA,ybo,nse,Lbo,xbo,$bo,et,lA,kbo,sse,Sbo,Rbo,Ti,Bbo,lse,Pbo,Ibo,rq,qbo,Nbo,jbo,wu,Dbo,Ue,iA,Gbo,ise,Obo,Vbo,Ca,Xbo,dse,zbo,Qbo,cse,Wbo,Hbo,fse,Ubo,Jbo,Ybo,G,Au,mse,Kbo,Zbo,tq,e2o,o2o,r2o,yu,gse,t2o,a2o,aq,n2o,s2o,l2o,Lu,hse,i2o,d2o,nq,c2o,f2o,m2o,xu,pse,g2o,h2o,sq,p2o,u2o,_2o,$u,use,b2o,v2o,lq,F2o,T2o,M2o,ku,_se,E2o,C2o,iq,w2o,A2o,y2o,Su,bse,L2o,x2o,dq,$2o,k2o,S2o,Ru,vse,R2o,B2o,cq,P2o,I2o,q2o,Bu,Fse,N2o,j2o,fq,D2o,G2o,O2o,Pu,Tse,V2o,X2o,mq,z2o,Q2o,W2o,Iu,Mse,H2o,U2o,gq,J2o,Y2o,K2o,qu,Ese,Z2o,evo,hq,ovo,rvo,tvo,Nu,Cse,avo,nvo,pq,svo,lvo,ivo,ju,wse,dvo,cvo,uq,fvo,mvo,gvo,Du,Ase,hvo,pvo,_q,uvo,_vo,bvo,Gu,yse,vvo,Fvo,bq,Tvo,Mvo,Evo,Ou,Lse,Cvo,wvo,vq,Avo,yvo,Lvo,Vu,xse,xvo,$vo,Fq,kvo,Svo,Rvo,Xu,$se,Bvo,Pvo,Tq,Ivo,qvo,Nvo,zu,kse,jvo,Dvo,Mq,Gvo,Ovo,Vvo,Qu,Sse,Xvo,zvo,Eq,Qvo,Wvo,Hvo,Wu,Rse,Uvo,Jvo,Cq,Yvo,Kvo,Zvo,Hu,Bse,eFo,oFo,wq,rFo,tFo,aFo,Uu,Pse,nFo,sFo,Aq,lFo,iFo,dFo,Ju,Ise,cFo,fFo,yq,mFo,gFo,hFo,Yu,qse,pFo,uFo,Lq,_Fo,bFo,vFo,Ku,Nse,FFo,TFo,xq,MFo,EFo,CFo,Zu,jse,wFo,AFo,$q,yFo,LFo,xFo,e_,Dse,$Fo,kFo,kq,SFo,RFo,BFo,o_,Gse,PFo,IFo,Sq,qFo,NFo,jFo,r_,Ose,DFo,GFo,Rq,OFo,VFo,XFo,t_,Vse,zFo,QFo,Bq,WFo,HFo,UFo,a_,Xse,JFo,YFo,Pq,KFo,ZFo,e0o,n_,zse,o0o,r0o,Iq,t0o,a0o,n0o,s_,Qse,s0o,l0o,qq,i0o,d0o,c0o,l_,Wse,f0o,m0o,Nq,g0o,h0o,p0o,i_,Hse,u0o,_0o,jq,b0o,v0o,F0o,d_,Use,T0o,M0o,Dq,E0o,C0o,w0o,c_,Jse,A0o,y0o,Gq,L0o,x0o,$0o,f_,k0o,Yse,S0o,R0o,Kse,B0o,P0o,m_,XBe,Mi,g_,Zse,dA,I0o,ele,q0o,zBe,$o,cA,N0o,Ei,j0o,Oq,D0o,G0o,Vq,O0o,V0o,X0o,fA,z0o,ole,Q0o,W0o,H0o,ot,mA,U0o,rle,J0o,Y0o,Ci,K0o,tle,Z0o,eTo,Xq,oTo,rTo,tTo,h_,aTo,Je,gA,nTo,ale,sTo,lTo,wa,iTo,nle,dTo,cTo,sle,fTo,mTo,lle,gTo,hTo,pTo,z,p_,ile,uTo,_To,zq,bTo,vTo,FTo,u_,dle,TTo,MTo,Qq,ETo,CTo,wTo,__,cle,ATo,yTo,Wq,LTo,xTo,$To,b_,fle,kTo,STo,Hq,RTo,BTo,PTo,v_,mle,ITo,qTo,Uq,NTo,jTo,DTo,F_,gle,GTo,OTo,Jq,VTo,XTo,zTo,T_,hle,QTo,WTo,Yq,HTo,UTo,JTo,M_,ple,YTo,KTo,Kq,ZTo,e7o,o7o,E_,ule,r7o,t7o,Zq,a7o,n7o,s7o,C_,_le,l7o,i7o,eN,d7o,c7o,f7o,w_,ble,m7o,g7o,oN,h7o,p7o,u7o,A_,vle,_7o,b7o,rN,v7o,F7o,T7o,y_,Fle,M7o,E7o,tN,C7o,w7o,A7o,L_,Tle,y7o,L7o,aN,x7o,$7o,k7o,x_,Mle,S7o,R7o,nN,B7o,P7o,I7o,$_,Ele,q7o,N7o,sN,j7o,D7o,G7o,k_,Cle,O7o,V7o,lN,X7o,z7o,Q7o,S_,wle,W7o,H7o,iN,U7o,J7o,Y7o,R_,Ale,K7o,Z7o,dN,e9o,o9o,r9o,B_,yle,t9o,a9o,cN,n9o,s9o,l9o,P_,Lle,i9o,d9o,fN,c9o,f9o,m9o,I_,xle,g9o,h9o,mN,p9o,u9o,_9o,q_,$le,b9o,v9o,gN,F9o,T9o,M9o,N_,kle,E9o,C9o,hN,w9o,A9o,y9o,j_,Sle,L9o,x9o,pN,$9o,k9o,S9o,D_,Rle,R9o,B9o,uN,P9o,I9o,q9o,G_,Ble,N9o,j9o,_N,D9o,G9o,O9o,O_,Ple,V9o,X9o,bN,z9o,Q9o,W9o,V_,Ile,H9o,U9o,vN,J9o,Y9o,K9o,X_,qle,Z9o,eMo,FN,oMo,rMo,tMo,z_,Nle,aMo,nMo,TN,sMo,lMo,iMo,Q_,jle,dMo,cMo,MN,fMo,mMo,gMo,W_,Dle,hMo,pMo,EN,uMo,_Mo,bMo,H_,Gle,vMo,FMo,CN,TMo,MMo,EMo,U_,Ole,CMo,wMo,wN,AMo,yMo,LMo,J_,xMo,Vle,$Mo,kMo,Xle,SMo,RMo,Y_,QBe,wi,K_,zle,hA,BMo,Qle,PMo,WBe,ko,pA,IMo,Ai,qMo,AN,NMo,jMo,yN,DMo,GMo,OMo,uA,VMo,Wle,XMo,zMo,QMo,rt,_A,WMo,Hle,HMo,UMo,yi,JMo,Ule,YMo,KMo,LN,ZMo,e4o,o4o,Z_,r4o,Ye,bA,t4o,Jle,a4o,n4o,Aa,s4o,Yle,l4o,i4o,Kle,d4o,c4o,Zle,f4o,m4o,g4o,Q,e1,eie,h4o,p4o,xN,u4o,_4o,b4o,o1,oie,v4o,F4o,$N,T4o,M4o,E4o,r1,rie,C4o,w4o,kN,A4o,y4o,L4o,t1,tie,x4o,$4o,SN,k4o,S4o,R4o,a1,aie,B4o,P4o,RN,I4o,q4o,N4o,n1,nie,j4o,D4o,BN,G4o,O4o,V4o,s1,sie,X4o,z4o,PN,Q4o,W4o,H4o,l1,lie,U4o,J4o,IN,Y4o,K4o,Z4o,i1,iie,eEo,oEo,qN,rEo,tEo,aEo,d1,die,nEo,sEo,NN,lEo,iEo,dEo,c1,cie,cEo,fEo,jN,mEo,gEo,hEo,f1,fie,pEo,uEo,DN,_Eo,bEo,vEo,m1,mie,FEo,TEo,GN,MEo,EEo,CEo,g1,gie,wEo,AEo,ON,yEo,LEo,xEo,h1,hie,$Eo,kEo,VN,SEo,REo,BEo,p1,pie,PEo,IEo,XN,qEo,NEo,jEo,u1,uie,DEo,GEo,zN,OEo,VEo,XEo,_1,_ie,zEo,QEo,QN,WEo,HEo,UEo,b1,bie,JEo,YEo,WN,KEo,ZEo,e5o,v1,vie,o5o,r5o,HN,t5o,a5o,n5o,F1,Fie,s5o,l5o,UN,i5o,d5o,c5o,T1,Tie,f5o,m5o,JN,g5o,h5o,p5o,M1,Mie,u5o,_5o,YN,b5o,v5o,F5o,E1,Eie,T5o,M5o,KN,E5o,C5o,w5o,C1,Cie,A5o,y5o,ZN,L5o,x5o,$5o,w1,wie,k5o,S5o,ej,R5o,B5o,P5o,A1,Aie,I5o,q5o,oj,N5o,j5o,D5o,y1,yie,G5o,O5o,rj,V5o,X5o,z5o,L1,Lie,Q5o,W5o,tj,H5o,U5o,J5o,x1,xie,Y5o,K5o,aj,Z5o,eCo,oCo,$1,$ie,rCo,tCo,kie,aCo,nCo,sCo,k1,Sie,lCo,iCo,nj,dCo,cCo,fCo,S1,Rie,mCo,gCo,sj,hCo,pCo,uCo,R1,Bie,_Co,bCo,lj,vCo,FCo,TCo,B1,Pie,MCo,ECo,ij,CCo,wCo,ACo,P1,yCo,Iie,LCo,xCo,qie,$Co,kCo,I1,HBe,Li,q1,Nie,vA,SCo,jie,RCo,UBe,So,FA,BCo,xi,PCo,dj,ICo,qCo,cj,NCo,jCo,DCo,TA,GCo,Die,OCo,VCo,XCo,tt,MA,zCo,Gie,QCo,WCo,$i,HCo,Oie,UCo,JCo,fj,YCo,KCo,ZCo,N1,e3o,Ke,EA,o3o,Vie,r3o,t3o,ya,a3o,Xie,n3o,s3o,zie,l3o,i3o,Qie,d3o,c3o,f3o,he,j1,Wie,m3o,g3o,mj,h3o,p3o,u3o,D1,Hie,_3o,b3o,gj,v3o,F3o,T3o,G1,Uie,M3o,E3o,hj,C3o,w3o,A3o,O1,Jie,y3o,L3o,pj,x3o,$3o,k3o,V1,Yie,S3o,R3o,uj,B3o,P3o,I3o,X1,Kie,q3o,N3o,_j,j3o,D3o,G3o,z1,Zie,O3o,V3o,bj,X3o,z3o,Q3o,Q1,ede,W3o,H3o,vj,U3o,J3o,Y3o,W1,ode,K3o,Z3o,Fj,ewo,owo,rwo,H1,rde,two,awo,Tj,nwo,swo,lwo,U1,tde,iwo,dwo,Mj,cwo,fwo,mwo,J1,ade,gwo,hwo,Ej,pwo,uwo,_wo,Y1,nde,bwo,vwo,Cj,Fwo,Two,Mwo,K1,sde,Ewo,Cwo,wj,wwo,Awo,ywo,Z1,lde,Lwo,xwo,Aj,$wo,kwo,Swo,eb,ide,Rwo,Bwo,yj,Pwo,Iwo,qwo,ob,dde,Nwo,jwo,Lj,Dwo,Gwo,Owo,rb,Vwo,cde,Xwo,zwo,fde,Qwo,Wwo,tb,JBe,ki,ab,mde,CA,Hwo,gde,Uwo,YBe,Ro,wA,Jwo,Si,Ywo,xj,Kwo,Zwo,$j,eAo,oAo,rAo,AA,tAo,hde,aAo,nAo,sAo,at,yA,lAo,pde,iAo,dAo,Ri,cAo,ude,fAo,mAo,kj,gAo,hAo,pAo,nb,uAo,Ze,LA,_Ao,_de,bAo,vAo,La,FAo,bde,TAo,MAo,vde,EAo,CAo,Fde,wAo,AAo,yAo,q,sb,Tde,LAo,xAo,Sj,$Ao,kAo,SAo,lb,Mde,RAo,BAo,Rj,PAo,IAo,qAo,ib,Ede,NAo,jAo,Bj,DAo,GAo,OAo,db,Cde,VAo,XAo,Pj,zAo,QAo,WAo,cb,wde,HAo,UAo,Ij,JAo,YAo,KAo,fb,Ade,ZAo,e6o,qj,o6o,r6o,t6o,mb,yde,a6o,n6o,Nj,s6o,l6o,i6o,gb,Lde,d6o,c6o,jj,f6o,m6o,g6o,hb,xde,h6o,p6o,Dj,u6o,_6o,b6o,pb,$de,v6o,F6o,Gj,T6o,M6o,E6o,ub,kde,C6o,w6o,Oj,A6o,y6o,L6o,_b,Sde,x6o,$6o,Vj,k6o,S6o,R6o,bb,Rde,B6o,P6o,Xj,I6o,q6o,N6o,vb,Bde,j6o,D6o,zj,G6o,O6o,V6o,Fb,Pde,X6o,z6o,Qj,Q6o,W6o,H6o,Tb,Ide,U6o,J6o,Wj,Y6o,K6o,Z6o,Mb,qde,eyo,oyo,Hj,ryo,tyo,ayo,Eb,Nde,nyo,syo,Uj,lyo,iyo,dyo,Cb,jde,cyo,fyo,Jj,myo,gyo,hyo,wb,Dde,pyo,uyo,Yj,_yo,byo,vyo,Ab,Gde,Fyo,Tyo,Kj,Myo,Eyo,Cyo,yb,Ode,wyo,Ayo,Zj,yyo,Lyo,xyo,Lb,Vde,$yo,kyo,eD,Syo,Ryo,Byo,xb,Xde,Pyo,Iyo,oD,qyo,Nyo,jyo,$b,zde,Dyo,Gyo,rD,Oyo,Vyo,Xyo,kb,Qde,zyo,Qyo,tD,Wyo,Hyo,Uyo,Sb,Wde,Jyo,Yyo,aD,Kyo,Zyo,eLo,Rb,Hde,oLo,rLo,nD,tLo,aLo,nLo,Bb,Ude,sLo,lLo,sD,iLo,dLo,cLo,Pb,Jde,fLo,mLo,lD,gLo,hLo,pLo,Ib,Yde,uLo,_Lo,iD,bLo,vLo,FLo,qb,Kde,TLo,MLo,dD,ELo,CLo,wLo,Nb,Zde,ALo,yLo,cD,LLo,xLo,$Lo,jb,ece,kLo,SLo,fD,RLo,BLo,PLo,Db,oce,ILo,qLo,mD,NLo,jLo,DLo,Gb,rce,GLo,OLo,gD,VLo,XLo,zLo,Ob,tce,QLo,WLo,hD,HLo,ULo,JLo,Vb,ace,YLo,KLo,pD,ZLo,e8o,o8o,Xb,nce,r8o,t8o,uD,a8o,n8o,s8o,zb,sce,l8o,i8o,_D,d8o,c8o,f8o,Qb,lce,m8o,g8o,bD,h8o,p8o,u8o,Wb,ice,_8o,b8o,vD,v8o,F8o,T8o,Hb,dce,M8o,E8o,FD,C8o,w8o,A8o,Ub,cce,y8o,L8o,TD,x8o,$8o,k8o,Jb,fce,S8o,R8o,MD,B8o,P8o,I8o,Yb,mce,q8o,N8o,ED,j8o,D8o,G8o,Kb,gce,O8o,V8o,CD,X8o,z8o,Q8o,Zb,W8o,hce,H8o,U8o,pce,J8o,Y8o,e2,KBe,Bi,o2,uce,xA,K8o,_ce,Z8o,ZBe,Bo,$A,exo,Pi,oxo,wD,rxo,txo,AD,axo,nxo,sxo,kA,lxo,bce,ixo,dxo,cxo,nt,SA,fxo,vce,mxo,gxo,Ii,hxo,Fce,pxo,uxo,yD,_xo,bxo,vxo,r2,Fxo,eo,RA,Txo,Tce,Mxo,Exo,xa,Cxo,Mce,wxo,Axo,Ece,yxo,Lxo,Cce,xxo,$xo,kxo,Y,t2,wce,Sxo,Rxo,LD,Bxo,Pxo,Ixo,a2,Ace,qxo,Nxo,xD,jxo,Dxo,Gxo,n2,yce,Oxo,Vxo,$D,Xxo,zxo,Qxo,s2,Lce,Wxo,Hxo,kD,Uxo,Jxo,Yxo,l2,xce,Kxo,Zxo,SD,e$o,o$o,r$o,i2,$ce,t$o,a$o,RD,n$o,s$o,l$o,d2,kce,i$o,d$o,BD,c$o,f$o,m$o,c2,Sce,g$o,h$o,PD,p$o,u$o,_$o,f2,Rce,b$o,v$o,ID,F$o,T$o,M$o,m2,Bce,E$o,C$o,qD,w$o,A$o,y$o,g2,Pce,L$o,x$o,ND,$$o,k$o,S$o,h2,Ice,R$o,B$o,jD,P$o,I$o,q$o,p2,qce,N$o,j$o,DD,D$o,G$o,O$o,u2,Nce,V$o,X$o,GD,z$o,Q$o,W$o,_2,jce,H$o,U$o,OD,J$o,Y$o,K$o,b2,Dce,Z$o,eko,VD,oko,rko,tko,v2,Gce,ako,nko,XD,sko,lko,iko,F2,Oce,dko,cko,zD,fko,mko,gko,T2,Vce,hko,pko,QD,uko,_ko,bko,M2,Xce,vko,Fko,WD,Tko,Mko,Eko,E2,zce,Cko,wko,HD,Ako,yko,Lko,C2,Qce,xko,$ko,UD,kko,Sko,Rko,w2,Wce,Bko,Pko,JD,Iko,qko,Nko,A2,Hce,jko,Dko,YD,Gko,Oko,Vko,y2,Uce,Xko,zko,KD,Qko,Wko,Hko,L2,Jce,Uko,Jko,ZD,Yko,Kko,Zko,x2,Yce,eSo,oSo,eG,rSo,tSo,aSo,$2,Kce,nSo,sSo,oG,lSo,iSo,dSo,k2,cSo,Zce,fSo,mSo,efe,gSo,hSo,S2,ePe,qi,R2,ofe,BA,pSo,rfe,uSo,oPe,Po,PA,_So,Ni,bSo,rG,vSo,FSo,tG,TSo,MSo,ESo,IA,CSo,tfe,wSo,ASo,ySo,st,qA,LSo,afe,xSo,$So,ji,kSo,nfe,SSo,RSo,aG,BSo,PSo,ISo,B2,qSo,oo,NA,NSo,sfe,jSo,DSo,$a,GSo,lfe,OSo,VSo,ife,XSo,zSo,dfe,QSo,WSo,HSo,Ur,P2,cfe,USo,JSo,nG,YSo,KSo,ZSo,I2,ffe,eRo,oRo,sG,rRo,tRo,aRo,q2,mfe,nRo,sRo,lG,lRo,iRo,dRo,N2,gfe,cRo,fRo,iG,mRo,gRo,hRo,j2,hfe,pRo,uRo,dG,_Ro,bRo,vRo,D2,FRo,pfe,TRo,MRo,ufe,ERo,CRo,G2,rPe,Di,O2,_fe,jA,wRo,bfe,ARo,tPe,Io,DA,yRo,Gi,LRo,cG,xRo,$Ro,fG,kRo,SRo,RRo,GA,BRo,vfe,PRo,IRo,qRo,lt,OA,NRo,Ffe,jRo,DRo,Oi,GRo,Tfe,ORo,VRo,mG,XRo,zRo,QRo,V2,WRo,ro,VA,HRo,Mfe,URo,JRo,ka,YRo,Efe,KRo,ZRo,Cfe,eBo,oBo,wfe,rBo,tBo,aBo,U,X2,Afe,nBo,sBo,gG,lBo,iBo,dBo,z2,yfe,cBo,fBo,hG,mBo,gBo,hBo,Q2,Lfe,pBo,uBo,pG,_Bo,bBo,vBo,W2,xfe,FBo,TBo,uG,MBo,EBo,CBo,H2,$fe,wBo,ABo,_G,yBo,LBo,xBo,U2,kfe,$Bo,kBo,bG,SBo,RBo,BBo,J2,Sfe,PBo,IBo,vG,qBo,NBo,jBo,Y2,Rfe,DBo,GBo,FG,OBo,VBo,XBo,K2,Bfe,zBo,QBo,TG,WBo,HBo,UBo,Z2,Pfe,JBo,YBo,MG,KBo,ZBo,ePo,ev,Ife,oPo,rPo,EG,tPo,aPo,nPo,ov,qfe,sPo,lPo,CG,iPo,dPo,cPo,rv,Nfe,fPo,mPo,wG,gPo,hPo,pPo,tv,jfe,uPo,_Po,AG,bPo,vPo,FPo,av,Dfe,TPo,MPo,yG,EPo,CPo,wPo,nv,Gfe,APo,yPo,LG,LPo,xPo,$Po,sv,Ofe,kPo,SPo,xG,RPo,BPo,PPo,lv,Vfe,IPo,qPo,$G,NPo,jPo,DPo,iv,Xfe,GPo,OPo,kG,VPo,XPo,zPo,dv,zfe,QPo,WPo,SG,HPo,UPo,JPo,cv,Qfe,YPo,KPo,RG,ZPo,eIo,oIo,fv,Wfe,rIo,tIo,BG,aIo,nIo,sIo,mv,Hfe,lIo,iIo,PG,dIo,cIo,fIo,gv,Ufe,mIo,gIo,IG,hIo,pIo,uIo,hv,Jfe,_Io,bIo,qG,vIo,FIo,TIo,pv,Yfe,MIo,EIo,NG,CIo,wIo,AIo,uv,Kfe,yIo,LIo,jG,xIo,$Io,kIo,_v,Zfe,SIo,RIo,DG,BIo,PIo,IIo,bv,eme,qIo,NIo,GG,jIo,DIo,GIo,vv,ome,OIo,VIo,OG,XIo,zIo,QIo,Fv,rme,WIo,HIo,VG,UIo,JIo,YIo,Tv,tme,KIo,ZIo,XG,eqo,oqo,rqo,Mv,ame,tqo,aqo,zG,nqo,sqo,lqo,Ev,iqo,nme,dqo,cqo,sme,fqo,mqo,Cv,aPe,Vi,wv,lme,XA,gqo,ime,hqo,nPe,qo,zA,pqo,Xi,uqo,QG,_qo,bqo,WG,vqo,Fqo,Tqo,QA,Mqo,dme,Eqo,Cqo,wqo,it,WA,Aqo,cme,yqo,Lqo,zi,xqo,fme,$qo,kqo,HG,Sqo,Rqo,Bqo,Av,Pqo,to,HA,Iqo,mme,qqo,Nqo,Sa,jqo,gme,Dqo,Gqo,hme,Oqo,Vqo,pme,Xqo,zqo,Qqo,O,yv,ume,Wqo,Hqo,UG,Uqo,Jqo,Yqo,Lv,_me,Kqo,Zqo,JG,eNo,oNo,rNo,xv,bme,tNo,aNo,YG,nNo,sNo,lNo,$v,vme,iNo,dNo,KG,cNo,fNo,mNo,kv,Fme,gNo,hNo,ZG,pNo,uNo,_No,Sv,Tme,bNo,vNo,eO,FNo,TNo,MNo,Rv,Mme,ENo,CNo,oO,wNo,ANo,yNo,Bv,Eme,LNo,xNo,rO,$No,kNo,SNo,Pv,Cme,RNo,BNo,tO,PNo,INo,qNo,Iv,wme,NNo,jNo,aO,DNo,GNo,ONo,qv,Ame,VNo,XNo,nO,zNo,QNo,WNo,Nv,yme,HNo,UNo,sO,JNo,YNo,KNo,jv,Lme,ZNo,ejo,lO,ojo,rjo,tjo,Dv,xme,ajo,njo,iO,sjo,ljo,ijo,Gv,$me,djo,cjo,dO,fjo,mjo,gjo,Ov,kme,hjo,pjo,cO,ujo,_jo,bjo,Vv,Sme,vjo,Fjo,fO,Tjo,Mjo,Ejo,Xv,Rme,Cjo,wjo,mO,Ajo,yjo,Ljo,zv,Bme,xjo,$jo,gO,kjo,Sjo,Rjo,Qv,Pme,Bjo,Pjo,hO,Ijo,qjo,Njo,Wv,Ime,jjo,Djo,pO,Gjo,Ojo,Vjo,Hv,qme,Xjo,zjo,uO,Qjo,Wjo,Hjo,Uv,Nme,Ujo,Jjo,_O,Yjo,Kjo,Zjo,Jv,jme,eDo,oDo,bO,rDo,tDo,aDo,Yv,Dme,nDo,sDo,vO,lDo,iDo,dDo,Kv,Gme,cDo,fDo,FO,mDo,gDo,hDo,Zv,Ome,pDo,uDo,TO,_Do,bDo,vDo,eF,Vme,FDo,TDo,MO,MDo,EDo,CDo,oF,Xme,wDo,ADo,EO,yDo,LDo,xDo,rF,zme,$Do,kDo,CO,SDo,RDo,BDo,tF,Qme,PDo,IDo,wO,qDo,NDo,jDo,aF,Wme,DDo,GDo,AO,ODo,VDo,XDo,nF,Hme,zDo,QDo,yO,WDo,HDo,UDo,sF,Ume,JDo,YDo,LO,KDo,ZDo,eGo,lF,Jme,oGo,rGo,xO,tGo,aGo,nGo,iF,Yme,sGo,lGo,$O,iGo,dGo,cGo,dF,Kme,fGo,mGo,kO,gGo,hGo,pGo,cF,Zme,uGo,_Go,SO,bGo,vGo,FGo,fF,ege,TGo,MGo,RO,EGo,CGo,wGo,mF,AGo,oge,yGo,LGo,rge,xGo,$Go,gF,sPe,Qi,hF,tge,UA,kGo,age,SGo,lPe,No,JA,RGo,Wi,BGo,BO,PGo,IGo,PO,qGo,NGo,jGo,YA,DGo,nge,GGo,OGo,VGo,dt,KA,XGo,sge,zGo,QGo,Hi,WGo,lge,HGo,UGo,IO,JGo,YGo,KGo,pF,ZGo,ao,ZA,eOo,ige,oOo,rOo,Ra,tOo,dge,aOo,nOo,cge,sOo,lOo,fge,iOo,dOo,cOo,mge,uF,gge,fOo,mOo,qO,gOo,hOo,pOo,_F,uOo,hge,_Oo,bOo,pge,vOo,FOo,bF,iPe,Ui,vF,uge,e6,TOo,_ge,MOo,dPe,jo,o6,EOo,Ji,COo,NO,wOo,AOo,jO,yOo,LOo,xOo,r6,$Oo,bge,kOo,SOo,ROo,ct,t6,BOo,vge,POo,IOo,Yi,qOo,Fge,NOo,jOo,DO,DOo,GOo,OOo,FF,VOo,no,a6,XOo,Tge,zOo,QOo,Ba,WOo,Mge,HOo,UOo,Ege,JOo,YOo,Cge,KOo,ZOo,eVo,ve,TF,wge,oVo,rVo,GO,tVo,aVo,nVo,MF,Age,sVo,lVo,OO,iVo,dVo,cVo,EF,yge,fVo,mVo,VO,gVo,hVo,pVo,$s,Lge,uVo,_Vo,XO,bVo,vVo,zO,FVo,TVo,MVo,CF,xge,EVo,CVo,QO,wVo,AVo,yVo,ft,$ge,LVo,xVo,WO,$Vo,kVo,HO,SVo,RVo,UO,BVo,PVo,IVo,wF,kge,qVo,NVo,JO,jVo,DVo,GVo,AF,Sge,OVo,VVo,YO,XVo,zVo,QVo,yF,Rge,WVo,HVo,KO,UVo,JVo,YVo,LF,Bge,KVo,ZVo,ZO,eXo,oXo,rXo,xF,Pge,tXo,aXo,eV,nXo,sXo,lXo,$F,Ige,iXo,dXo,oV,cXo,fXo,mXo,kF,qge,gXo,hXo,rV,pXo,uXo,_Xo,SF,bXo,Nge,vXo,FXo,jge,TXo,MXo,RF,cPe,Ki,BF,Dge,n6,EXo,Gge,CXo,fPe,Do,s6,wXo,Zi,AXo,tV,yXo,LXo,aV,xXo,$Xo,kXo,l6,SXo,Oge,RXo,BXo,PXo,mt,i6,IXo,Vge,qXo,NXo,ed,jXo,Xge,DXo,GXo,nV,OXo,VXo,XXo,PF,zXo,so,d6,QXo,zge,WXo,HXo,Pa,UXo,Qge,JXo,YXo,Wge,KXo,ZXo,Hge,ezo,ozo,rzo,Uge,IF,Jge,tzo,azo,sV,nzo,szo,lzo,qF,izo,Yge,dzo,czo,Kge,fzo,mzo,NF,mPe,od,jF,Zge,c6,gzo,ehe,hzo,gPe,Go,f6,pzo,rd,uzo,lV,_zo,bzo,iV,vzo,Fzo,Tzo,m6,Mzo,ohe,Ezo,Czo,wzo,gt,g6,Azo,rhe,yzo,Lzo,td,xzo,the,$zo,kzo,dV,Szo,Rzo,Bzo,DF,Pzo,lo,h6,Izo,ahe,qzo,Nzo,Ia,jzo,nhe,Dzo,Gzo,she,Ozo,Vzo,lhe,Xzo,zzo,Qzo,Ne,GF,ihe,Wzo,Hzo,cV,Uzo,Jzo,Yzo,OF,dhe,Kzo,Zzo,fV,eQo,oQo,rQo,VF,che,tQo,aQo,mV,nQo,sQo,lQo,XF,fhe,iQo,dQo,gV,cQo,fQo,mQo,zF,mhe,gQo,hQo,hV,pQo,uQo,_Qo,QF,ghe,bQo,vQo,pV,FQo,TQo,MQo,WF,hhe,EQo,CQo,uV,wQo,AQo,yQo,HF,phe,LQo,xQo,_V,$Qo,kQo,SQo,UF,RQo,uhe,BQo,PQo,_he,IQo,qQo,JF,hPe,ad,YF,bhe,p6,NQo,vhe,jQo,pPe,Oo,u6,DQo,nd,GQo,bV,OQo,VQo,vV,XQo,zQo,QQo,_6,WQo,Fhe,HQo,UQo,JQo,ht,b6,YQo,The,KQo,ZQo,sd,eWo,Mhe,oWo,rWo,FV,tWo,aWo,nWo,KF,sWo,io,v6,lWo,Ehe,iWo,dWo,qa,cWo,Che,fWo,mWo,whe,gWo,hWo,Ahe,pWo,uWo,_Wo,Na,ZF,yhe,bWo,vWo,TV,FWo,TWo,MWo,e0,Lhe,EWo,CWo,MV,wWo,AWo,yWo,o0,xhe,LWo,xWo,EV,$Wo,kWo,SWo,r0,$he,RWo,BWo,CV,PWo,IWo,qWo,t0,NWo,khe,jWo,DWo,She,GWo,OWo,a0,uPe,ld,n0,Rhe,F6,VWo,Bhe,XWo,_Pe,Vo,T6,zWo,id,QWo,wV,WWo,HWo,AV,UWo,JWo,YWo,M6,KWo,Phe,ZWo,eHo,oHo,pt,E6,rHo,Ihe,tHo,aHo,dd,nHo,qhe,sHo,lHo,yV,iHo,dHo,cHo,s0,fHo,co,C6,mHo,Nhe,gHo,hHo,ja,pHo,jhe,uHo,_Ho,Dhe,bHo,vHo,Ghe,FHo,THo,MHo,je,l0,Ohe,EHo,CHo,LV,wHo,AHo,yHo,i0,Vhe,LHo,xHo,xV,$Ho,kHo,SHo,d0,Xhe,RHo,BHo,$V,PHo,IHo,qHo,c0,zhe,NHo,jHo,kV,DHo,GHo,OHo,f0,Qhe,VHo,XHo,SV,zHo,QHo,WHo,m0,Whe,HHo,UHo,RV,JHo,YHo,KHo,g0,Hhe,ZHo,eUo,BV,oUo,rUo,tUo,h0,Uhe,aUo,nUo,PV,sUo,lUo,iUo,p0,dUo,Jhe,cUo,fUo,Yhe,mUo,gUo,u0,bPe,cd,_0,Khe,w6,hUo,Zhe,pUo,vPe,Xo,A6,uUo,fd,_Uo,IV,bUo,vUo,qV,FUo,TUo,MUo,y6,EUo,epe,CUo,wUo,AUo,ut,L6,yUo,ope,LUo,xUo,md,$Uo,rpe,kUo,SUo,NV,RUo,BUo,PUo,b0,IUo,fo,x6,qUo,tpe,NUo,jUo,Da,DUo,ape,GUo,OUo,npe,VUo,XUo,spe,zUo,QUo,WUo,$6,v0,lpe,HUo,UUo,jV,JUo,YUo,KUo,F0,ipe,ZUo,eJo,DV,oJo,rJo,tJo,T0,aJo,dpe,nJo,sJo,cpe,lJo,iJo,M0,FPe,gd,E0,fpe,k6,dJo,mpe,cJo,TPe,zo,S6,fJo,hd,mJo,GV,gJo,hJo,OV,pJo,uJo,_Jo,R6,bJo,gpe,vJo,FJo,TJo,_t,B6,MJo,hpe,EJo,CJo,pd,wJo,ppe,AJo,yJo,VV,LJo,xJo,$Jo,C0,kJo,mo,P6,SJo,upe,RJo,BJo,Ga,PJo,_pe,IJo,qJo,bpe,NJo,jJo,vpe,DJo,GJo,OJo,Oa,w0,Fpe,VJo,XJo,XV,zJo,QJo,WJo,A0,Tpe,HJo,UJo,zV,JJo,YJo,KJo,y0,Mpe,ZJo,eYo,QV,oYo,rYo,tYo,L0,Epe,aYo,nYo,WV,sYo,lYo,iYo,x0,dYo,Cpe,cYo,fYo,wpe,mYo,gYo,$0,MPe,ud,k0,Ape,I6,hYo,ype,pYo,EPe,Qo,q6,uYo,_d,_Yo,HV,bYo,vYo,UV,FYo,TYo,MYo,N6,EYo,Lpe,CYo,wYo,AYo,bt,j6,yYo,xpe,LYo,xYo,bd,$Yo,$pe,kYo,SYo,JV,RYo,BYo,PYo,S0,IYo,go,D6,qYo,kpe,NYo,jYo,Va,DYo,Spe,GYo,OYo,Rpe,VYo,XYo,Bpe,zYo,QYo,WYo,vd,R0,Ppe,HYo,UYo,YV,JYo,YYo,KYo,B0,Ipe,ZYo,eKo,KV,oKo,rKo,tKo,P0,qpe,aKo,nKo,ZV,sKo,lKo,iKo,I0,dKo,Npe,cKo,fKo,jpe,mKo,gKo,q0,CPe,Fd,N0,Dpe,G6,hKo,Gpe,pKo,wPe,Wo,O6,uKo,Td,_Ko,eX,bKo,vKo,oX,FKo,TKo,MKo,V6,EKo,Ope,CKo,wKo,AKo,vt,X6,yKo,Vpe,LKo,xKo,Md,$Ko,Xpe,kKo,SKo,rX,RKo,BKo,PKo,j0,IKo,ho,z6,qKo,zpe,NKo,jKo,Xa,DKo,Qpe,GKo,OKo,Wpe,VKo,XKo,Hpe,zKo,QKo,WKo,Q6,D0,Upe,HKo,UKo,tX,JKo,YKo,KKo,G0,Jpe,ZKo,eZo,aX,oZo,rZo,tZo,O0,aZo,Ype,nZo,sZo,Kpe,lZo,iZo,V0,APe,Ed,X0,Zpe,W6,dZo,eue,cZo,yPe,Ho,H6,fZo,Cd,mZo,nX,gZo,hZo,sX,pZo,uZo,_Zo,U6,bZo,oue,vZo,FZo,TZo,Ft,J6,MZo,rue,EZo,CZo,wd,wZo,tue,AZo,yZo,lX,LZo,xZo,$Zo,z0,kZo,po,Y6,SZo,aue,RZo,BZo,za,PZo,nue,IZo,qZo,sue,NZo,jZo,lue,DZo,GZo,OZo,iue,Q0,due,VZo,XZo,iX,zZo,QZo,WZo,W0,HZo,cue,UZo,JZo,fue,YZo,KZo,H0,LPe,Ad,U0,mue,K6,ZZo,gue,eer,xPe,Uo,Z6,oer,yd,rer,dX,ter,aer,cX,ner,ser,ler,ey,ier,hue,der,cer,fer,Tt,oy,mer,pue,ger,her,Ld,per,uue,uer,_er,fX,ber,ver,Fer,J0,Ter,uo,ry,Mer,_ue,Eer,Cer,Qa,wer,bue,Aer,yer,vue,Ler,xer,Fue,$er,ker,Ser,Wa,Y0,Tue,Rer,Ber,mX,Per,Ier,qer,K0,Mue,Ner,jer,gX,Der,Ger,Oer,Z0,Eue,Ver,Xer,hX,zer,Qer,Wer,eT,Cue,Her,Uer,pX,Jer,Yer,Ker,oT,Zer,wue,eor,oor,Aue,ror,tor,rT,$Pe,xd,tT,yue,ty,aor,Lue,nor,kPe,Jo,ay,sor,$d,lor,uX,ior,dor,_X,cor,mor,gor,ny,hor,xue,por,uor,_or,Mt,sy,bor,$ue,vor,For,kd,Tor,kue,Mor,Eor,bX,Cor,wor,Aor,aT,yor,_o,ly,Lor,Sue,xor,$or,Ha,kor,Rue,Sor,Ror,Bue,Bor,Por,Pue,Ior,qor,Nor,Iue,nT,que,jor,Dor,vX,Gor,Oor,Vor,sT,Xor,Nue,zor,Qor,jue,Wor,Hor,lT,SPe,Sd,iT,Due,iy,Uor,Gue,Jor,RPe,Yo,dy,Yor,Rd,Kor,FX,Zor,err,TX,orr,rrr,trr,cy,arr,Oue,nrr,srr,lrr,Et,fy,irr,Vue,drr,crr,Bd,frr,Xue,mrr,grr,MX,hrr,prr,urr,dT,_rr,Cr,my,brr,zue,vrr,Frr,Ua,Trr,Que,Mrr,Err,Wue,Crr,wrr,Hue,Arr,yrr,Lrr,j,cT,Uue,xrr,$rr,EX,krr,Srr,Rrr,fT,Jue,Brr,Prr,CX,Irr,qrr,Nrr,mT,Yue,jrr,Drr,wX,Grr,Orr,Vrr,gT,Kue,Xrr,zrr,AX,Qrr,Wrr,Hrr,hT,Zue,Urr,Jrr,yX,Yrr,Krr,Zrr,pT,e_e,etr,otr,LX,rtr,ttr,atr,uT,o_e,ntr,str,xX,ltr,itr,dtr,_T,r_e,ctr,ftr,$X,mtr,gtr,htr,bT,t_e,ptr,utr,kX,_tr,btr,vtr,vT,a_e,Ftr,Ttr,SX,Mtr,Etr,Ctr,FT,n_e,wtr,Atr,RX,ytr,Ltr,xtr,TT,s_e,$tr,ktr,BX,Str,Rtr,Btr,MT,l_e,Ptr,Itr,PX,qtr,Ntr,jtr,ET,i_e,Dtr,Gtr,IX,Otr,Vtr,Xtr,CT,d_e,ztr,Qtr,qX,Wtr,Htr,Utr,wT,c_e,Jtr,Ytr,NX,Ktr,Ztr,ear,AT,f_e,oar,rar,jX,tar,aar,nar,ks,m_e,sar,lar,DX,iar,dar,GX,car,far,mar,yT,g_e,gar,har,OX,par,uar,_ar,LT,h_e,bar,Far,VX,Tar,Mar,Ear,xT,p_e,Car,war,XX,Aar,yar,Lar,$T,u_e,xar,$ar,zX,kar,Sar,Rar,kT,__e,Bar,Par,QX,Iar,qar,Nar,ST,b_e,jar,Dar,WX,Gar,Oar,Var,RT,v_e,Xar,zar,HX,Qar,War,Har,BT,F_e,Uar,Jar,UX,Yar,Kar,Zar,PT,T_e,enr,onr,JX,rnr,tnr,anr,IT,M_e,nnr,snr,YX,lnr,inr,dnr,qT,E_e,cnr,fnr,KX,mnr,gnr,hnr,NT,C_e,pnr,unr,ZX,_nr,bnr,vnr,jT,w_e,Fnr,Tnr,ez,Mnr,Enr,Cnr,DT,A_e,wnr,Anr,oz,ynr,Lnr,xnr,GT,y_e,$nr,knr,rz,Snr,Rnr,Bnr,OT,L_e,Pnr,Inr,tz,qnr,Nnr,jnr,VT,x_e,Dnr,Gnr,az,Onr,Vnr,Xnr,XT,$_e,znr,Qnr,nz,Wnr,Hnr,Unr,zT,k_e,Jnr,Ynr,sz,Knr,Znr,esr,QT,S_e,osr,rsr,lz,tsr,asr,nsr,WT,R_e,ssr,lsr,iz,isr,dsr,csr,HT,B_e,fsr,msr,dz,gsr,hsr,psr,UT,P_e,usr,_sr,cz,bsr,vsr,Fsr,JT,I_e,Tsr,Msr,fz,Esr,Csr,wsr,YT,q_e,Asr,ysr,mz,Lsr,xsr,$sr,KT,N_e,ksr,Ssr,gz,Rsr,Bsr,Psr,ZT,j_e,Isr,qsr,hz,Nsr,jsr,Dsr,e7,BPe,Pd,o7,D_e,gy,Gsr,G_e,Osr,PPe,Ko,hy,Vsr,Id,Xsr,pz,zsr,Qsr,uz,Wsr,Hsr,Usr,py,Jsr,O_e,Ysr,Ksr,Zsr,Ct,uy,elr,V_e,olr,rlr,qd,tlr,X_e,alr,nlr,_z,slr,llr,ilr,r7,dlr,wr,_y,clr,z_e,flr,mlr,Ja,glr,Q_e,hlr,plr,W_e,ulr,_lr,H_e,blr,vlr,Flr,ne,t7,U_e,Tlr,Mlr,bz,Elr,Clr,wlr,a7,J_e,Alr,ylr,vz,Llr,xlr,$lr,n7,Y_e,klr,Slr,Fz,Rlr,Blr,Plr,s7,K_e,Ilr,qlr,Tz,Nlr,jlr,Dlr,l7,Z_e,Glr,Olr,Mz,Vlr,Xlr,zlr,i7,e1e,Qlr,Wlr,Ez,Hlr,Ulr,Jlr,d7,o1e,Ylr,Klr,Cz,Zlr,eir,oir,c7,r1e,rir,tir,wz,air,nir,sir,f7,t1e,lir,iir,Az,dir,cir,fir,m7,a1e,mir,gir,yz,hir,pir,uir,g7,n1e,_ir,bir,Lz,vir,Fir,Tir,h7,s1e,Mir,Eir,xz,Cir,wir,Air,p7,l1e,yir,Lir,$z,xir,$ir,kir,u7,i1e,Sir,Rir,kz,Bir,Pir,Iir,_7,d1e,qir,Nir,Sz,jir,Dir,Gir,b7,c1e,Oir,Vir,Rz,Xir,zir,Qir,v7,f1e,Wir,Hir,Bz,Uir,Jir,Yir,F7,m1e,Kir,Zir,Pz,edr,odr,rdr,T7,g1e,tdr,adr,Iz,ndr,sdr,ldr,M7,h1e,idr,ddr,qz,cdr,fdr,mdr,E7,p1e,gdr,hdr,Nz,pdr,udr,_dr,C7,u1e,bdr,vdr,jz,Fdr,Tdr,Mdr,w7,_1e,Edr,Cdr,Dz,wdr,Adr,ydr,A7,IPe,Nd,y7,b1e,by,Ldr,v1e,xdr,qPe,Zo,vy,$dr,jd,kdr,Gz,Sdr,Rdr,Oz,Bdr,Pdr,Idr,Fy,qdr,F1e,Ndr,jdr,Ddr,wt,Ty,Gdr,T1e,Odr,Vdr,Dd,Xdr,M1e,zdr,Qdr,Vz,Wdr,Hdr,Udr,L7,Jdr,Ar,My,Ydr,E1e,Kdr,Zdr,Ya,ecr,C1e,ocr,rcr,w1e,tcr,acr,A1e,ncr,scr,lcr,Te,x7,y1e,icr,dcr,Xz,ccr,fcr,mcr,$7,L1e,gcr,hcr,zz,pcr,ucr,_cr,k7,x1e,bcr,vcr,Qz,Fcr,Tcr,Mcr,S7,$1e,Ecr,Ccr,Wz,wcr,Acr,ycr,R7,k1e,Lcr,xcr,Hz,$cr,kcr,Scr,B7,S1e,Rcr,Bcr,Uz,Pcr,Icr,qcr,P7,R1e,Ncr,jcr,Jz,Dcr,Gcr,Ocr,I7,B1e,Vcr,Xcr,Yz,zcr,Qcr,Wcr,q7,P1e,Hcr,Ucr,Kz,Jcr,Ycr,Kcr,N7,I1e,Zcr,efr,Zz,ofr,rfr,tfr,j7,q1e,afr,nfr,eQ,sfr,lfr,ifr,D7,N1e,dfr,cfr,oQ,ffr,mfr,gfr,G7,NPe,Gd,O7,j1e,Ey,hfr,D1e,pfr,jPe,er,Cy,ufr,Od,_fr,rQ,bfr,vfr,tQ,Ffr,Tfr,Mfr,wy,Efr,G1e,Cfr,wfr,Afr,At,Ay,yfr,O1e,Lfr,xfr,Vd,$fr,V1e,kfr,Sfr,aQ,Rfr,Bfr,Pfr,V7,Ifr,yr,yy,qfr,X1e,Nfr,jfr,Ka,Dfr,z1e,Gfr,Ofr,Q1e,Vfr,Xfr,W1e,zfr,Qfr,Wfr,Xd,X7,H1e,Hfr,Ufr,nQ,Jfr,Yfr,Kfr,z7,U1e,Zfr,emr,sQ,omr,rmr,tmr,Q7,J1e,amr,nmr,lQ,smr,lmr,imr,W7,DPe,zd,H7,Y1e,Ly,dmr,K1e,cmr,GPe,or,xy,fmr,Qd,mmr,iQ,gmr,hmr,dQ,pmr,umr,_mr,$y,bmr,Z1e,vmr,Fmr,Tmr,yt,ky,Mmr,ebe,Emr,Cmr,Wd,wmr,obe,Amr,ymr,cQ,Lmr,xmr,$mr,U7,kmr,Lr,Sy,Smr,rbe,Rmr,Bmr,Za,Pmr,tbe,Imr,qmr,abe,Nmr,jmr,nbe,Dmr,Gmr,Omr,ie,J7,sbe,Vmr,Xmr,fQ,zmr,Qmr,Wmr,Y7,lbe,Hmr,Umr,mQ,Jmr,Ymr,Kmr,K7,ibe,Zmr,egr,gQ,ogr,rgr,tgr,Z7,dbe,agr,ngr,hQ,sgr,lgr,igr,e9,cbe,dgr,cgr,pQ,fgr,mgr,ggr,o9,fbe,hgr,pgr,uQ,ugr,_gr,bgr,r9,mbe,vgr,Fgr,_Q,Tgr,Mgr,Egr,t9,gbe,Cgr,wgr,bQ,Agr,ygr,Lgr,a9,hbe,xgr,$gr,vQ,kgr,Sgr,Rgr,n9,pbe,Bgr,Pgr,FQ,Igr,qgr,Ngr,s9,ube,jgr,Dgr,TQ,Ggr,Ogr,Vgr,l9,_be,Xgr,zgr,MQ,Qgr,Wgr,Hgr,i9,bbe,Ugr,Jgr,EQ,Ygr,Kgr,Zgr,d9,vbe,ehr,ohr,CQ,rhr,thr,ahr,c9,Fbe,nhr,shr,wQ,lhr,ihr,dhr,f9,Tbe,chr,fhr,AQ,mhr,ghr,hhr,m9,Mbe,phr,uhr,yQ,_hr,bhr,vhr,g9,Ebe,Fhr,Thr,LQ,Mhr,Ehr,Chr,h9,Cbe,whr,Ahr,xQ,yhr,Lhr,xhr,p9,wbe,$hr,khr,$Q,Shr,Rhr,Bhr,u9,OPe,Hd,_9,Abe,Ry,Phr,ybe,Ihr,VPe,rr,By,qhr,Ud,Nhr,kQ,jhr,Dhr,SQ,Ghr,Ohr,Vhr,Py,Xhr,Lbe,zhr,Qhr,Whr,Lt,Iy,Hhr,xbe,Uhr,Jhr,Jd,Yhr,$be,Khr,Zhr,RQ,epr,opr,rpr,b9,tpr,xr,qy,apr,kbe,npr,spr,en,lpr,Sbe,ipr,dpr,Rbe,cpr,fpr,Bbe,mpr,gpr,hpr,ye,v9,Pbe,ppr,upr,BQ,_pr,bpr,vpr,F9,Ibe,Fpr,Tpr,PQ,Mpr,Epr,Cpr,T9,qbe,wpr,Apr,IQ,ypr,Lpr,xpr,M9,Nbe,$pr,kpr,qQ,Spr,Rpr,Bpr,E9,jbe,Ppr,Ipr,NQ,qpr,Npr,jpr,C9,Dbe,Dpr,Gpr,jQ,Opr,Vpr,Xpr,w9,Gbe,zpr,Qpr,DQ,Wpr,Hpr,Upr,A9,Obe,Jpr,Ypr,GQ,Kpr,Zpr,eur,y9,Vbe,our,rur,OQ,tur,aur,nur,L9,Xbe,sur,lur,VQ,iur,dur,cur,x9,XPe,Yd,$9,zbe,Ny,fur,Qbe,mur,zPe,tr,jy,gur,Kd,hur,XQ,pur,uur,zQ,_ur,bur,vur,Dy,Fur,Wbe,Tur,Mur,Eur,xt,Gy,Cur,Hbe,wur,Aur,Zd,yur,Ube,Lur,xur,QQ,$ur,kur,Sur,k9,Rur,$r,Oy,Bur,Jbe,Pur,Iur,on,qur,Ybe,Nur,jur,Kbe,Dur,Gur,Zbe,Our,Vur,Xur,Z,S9,e2e,zur,Qur,WQ,Wur,Hur,Uur,R9,o2e,Jur,Yur,HQ,Kur,Zur,e_r,B9,r2e,o_r,r_r,UQ,t_r,a_r,n_r,P9,t2e,s_r,l_r,JQ,i_r,d_r,c_r,I9,a2e,f_r,m_r,YQ,g_r,h_r,p_r,q9,n2e,u_r,__r,KQ,b_r,v_r,F_r,N9,s2e,T_r,M_r,ZQ,E_r,C_r,w_r,j9,l2e,A_r,y_r,eW,L_r,x_r,$_r,D9,i2e,k_r,S_r,oW,R_r,B_r,P_r,G9,d2e,I_r,q_r,rW,N_r,j_r,D_r,O9,c2e,G_r,O_r,tW,V_r,X_r,z_r,V9,f2e,Q_r,W_r,aW,H_r,U_r,J_r,X9,m2e,Y_r,K_r,nW,Z_r,e1r,o1r,z9,g2e,r1r,t1r,sW,a1r,n1r,s1r,Q9,h2e,l1r,i1r,lW,d1r,c1r,f1r,W9,p2e,m1r,g1r,iW,h1r,p1r,u1r,H9,u2e,_1r,b1r,dW,v1r,F1r,T1r,U9,_2e,M1r,E1r,cW,C1r,w1r,A1r,J9,b2e,y1r,L1r,fW,x1r,$1r,k1r,Y9,v2e,S1r,R1r,mW,B1r,P1r,I1r,K9,F2e,q1r,N1r,gW,j1r,D1r,G1r,Z9,T2e,O1r,V1r,hW,X1r,z1r,Q1r,eM,M2e,W1r,H1r,pW,U1r,J1r,Y1r,oM,E2e,K1r,Z1r,uW,ebr,obr,rbr,rM,C2e,tbr,abr,_W,nbr,sbr,lbr,tM,w2e,ibr,dbr,bW,cbr,fbr,mbr,aM,QPe,ec,nM,A2e,Vy,gbr,y2e,hbr,WPe,ar,Xy,pbr,oc,ubr,vW,_br,bbr,FW,vbr,Fbr,Tbr,zy,Mbr,L2e,Ebr,Cbr,wbr,$t,Qy,Abr,x2e,ybr,Lbr,rc,xbr,$2e,$br,kbr,TW,Sbr,Rbr,Bbr,sM,Pbr,kr,Wy,Ibr,k2e,qbr,Nbr,rn,jbr,S2e,Dbr,Gbr,R2e,Obr,Vbr,B2e,Xbr,zbr,Qbr,pe,lM,P2e,Wbr,Hbr,MW,Ubr,Jbr,Ybr,iM,I2e,Kbr,Zbr,EW,e2r,o2r,r2r,dM,q2e,t2r,a2r,CW,n2r,s2r,l2r,cM,N2e,i2r,d2r,wW,c2r,f2r,m2r,fM,j2e,g2r,h2r,AW,p2r,u2r,_2r,mM,D2e,b2r,v2r,yW,F2r,T2r,M2r,gM,G2e,E2r,C2r,LW,w2r,A2r,y2r,hM,O2e,L2r,x2r,xW,$2r,k2r,S2r,pM,V2e,R2r,B2r,$W,P2r,I2r,q2r,uM,X2e,N2r,j2r,kW,D2r,G2r,O2r,_M,z2e,V2r,X2r,SW,z2r,Q2r,W2r,bM,Q2e,H2r,U2r,RW,J2r,Y2r,K2r,vM,W2e,Z2r,evr,BW,ovr,rvr,tvr,FM,H2e,avr,nvr,PW,svr,lvr,ivr,TM,U2e,dvr,cvr,IW,fvr,mvr,gvr,MM,J2e,hvr,pvr,qW,uvr,_vr,bvr,EM,Y2e,vvr,Fvr,NW,Tvr,Mvr,Evr,CM,HPe,tc,wM,K2e,Hy,Cvr,Z2e,wvr,UPe,nr,Uy,Avr,ac,yvr,jW,Lvr,xvr,DW,$vr,kvr,Svr,Jy,Rvr,eve,Bvr,Pvr,Ivr,kt,Yy,qvr,ove,Nvr,jvr,nc,Dvr,rve,Gvr,Ovr,GW,Vvr,Xvr,zvr,AM,Qvr,Sr,Ky,Wvr,tve,Hvr,Uvr,tn,Jvr,ave,Yvr,Kvr,nve,Zvr,eFr,sve,oFr,rFr,tFr,lve,yM,ive,aFr,nFr,OW,sFr,lFr,iFr,LM,JPe,sc,xM,dve,Zy,dFr,cve,cFr,YPe,sr,eL,fFr,lc,mFr,VW,gFr,hFr,XW,pFr,uFr,_Fr,oL,bFr,fve,vFr,FFr,TFr,St,rL,MFr,mve,EFr,CFr,ic,wFr,gve,AFr,yFr,zW,LFr,xFr,$Fr,$M,kFr,Rr,tL,SFr,hve,RFr,BFr,an,PFr,pve,IFr,qFr,uve,NFr,jFr,_ve,DFr,GFr,OFr,de,kM,bve,VFr,XFr,QW,zFr,QFr,WFr,SM,vve,HFr,UFr,WW,JFr,YFr,KFr,RM,Fve,ZFr,e0r,HW,o0r,r0r,t0r,BM,Tve,a0r,n0r,UW,s0r,l0r,i0r,PM,Mve,d0r,c0r,JW,f0r,m0r,g0r,IM,Eve,h0r,p0r,YW,u0r,_0r,b0r,qM,Cve,v0r,F0r,KW,T0r,M0r,E0r,NM,wve,C0r,w0r,ZW,A0r,y0r,L0r,jM,Ave,x0r,$0r,eH,k0r,S0r,R0r,DM,yve,B0r,P0r,oH,I0r,q0r,N0r,GM,Lve,j0r,D0r,rH,G0r,O0r,V0r,OM,xve,X0r,z0r,tH,Q0r,W0r,H0r,VM,$ve,U0r,J0r,aH,Y0r,K0r,Z0r,XM,kve,eTr,oTr,nH,rTr,tTr,aTr,zM,Sve,nTr,sTr,sH,lTr,iTr,dTr,QM,Rve,cTr,fTr,lH,mTr,gTr,hTr,WM,Bve,pTr,uTr,iH,_Tr,bTr,vTr,HM,Pve,FTr,TTr,dH,MTr,ETr,CTr,UM,Ive,wTr,ATr,cH,yTr,LTr,xTr,JM,qve,$Tr,kTr,fH,STr,RTr,BTr,YM,KPe,dc,KM,Nve,aL,PTr,jve,ITr,ZPe,lr,nL,qTr,cc,NTr,mH,jTr,DTr,gH,GTr,OTr,VTr,sL,XTr,Dve,zTr,QTr,WTr,Rt,lL,HTr,Gve,UTr,JTr,fc,YTr,Ove,KTr,ZTr,hH,e7r,o7r,r7r,ZM,t7r,Br,iL,a7r,Vve,n7r,s7r,nn,l7r,Xve,i7r,d7r,zve,c7r,f7r,Qve,m7r,g7r,h7r,ce,e4,Wve,p7r,u7r,pH,_7r,b7r,v7r,o4,Hve,F7r,T7r,uH,M7r,E7r,C7r,r4,Uve,w7r,A7r,_H,y7r,L7r,x7r,t4,Jve,$7r,k7r,bH,S7r,R7r,B7r,a4,Yve,P7r,I7r,vH,q7r,N7r,j7r,n4,Kve,D7r,G7r,FH,O7r,V7r,X7r,s4,Zve,z7r,Q7r,TH,W7r,H7r,U7r,l4,eFe,J7r,Y7r,MH,K7r,Z7r,e9r,i4,oFe,o9r,r9r,EH,t9r,a9r,n9r,d4,rFe,s9r,l9r,CH,i9r,d9r,c9r,c4,tFe,f9r,m9r,wH,g9r,h9r,p9r,f4,aFe,u9r,_9r,AH,b9r,v9r,F9r,m4,nFe,T9r,M9r,yH,E9r,C9r,w9r,g4,sFe,A9r,y9r,LH,L9r,x9r,$9r,h4,lFe,k9r,S9r,xH,R9r,B9r,P9r,p4,iFe,I9r,q9r,$H,N9r,j9r,D9r,u4,dFe,G9r,O9r,kH,V9r,X9r,z9r,_4,cFe,Q9r,W9r,SH,H9r,U9r,J9r,b4,fFe,Y9r,K9r,RH,Z9r,eMr,oMr,v4,mFe,rMr,tMr,BH,aMr,nMr,sMr,F4,eIe,mc,T4,gFe,dL,lMr,hFe,iMr,oIe,ir,cL,dMr,gc,cMr,PH,fMr,mMr,IH,gMr,hMr,pMr,fL,uMr,pFe,_Mr,bMr,vMr,Bt,mL,FMr,uFe,TMr,MMr,hc,EMr,_Fe,CMr,wMr,qH,AMr,yMr,LMr,M4,xMr,Pr,gL,$Mr,bFe,kMr,SMr,sn,RMr,vFe,BMr,PMr,FFe,IMr,qMr,TFe,NMr,jMr,DMr,MFe,E4,EFe,GMr,OMr,NH,VMr,XMr,zMr,C4,rIe,pc,w4,CFe,hL,QMr,wFe,WMr,tIe,dr,pL,HMr,uc,UMr,jH,JMr,YMr,DH,KMr,ZMr,e4r,uL,o4r,AFe,r4r,t4r,a4r,Pt,_L,n4r,yFe,s4r,l4r,_c,i4r,LFe,d4r,c4r,GH,f4r,m4r,g4r,A4,h4r,Ir,bL,p4r,xFe,u4r,_4r,ln,b4r,$Fe,v4r,F4r,kFe,T4r,M4r,SFe,E4r,C4r,w4r,RFe,y4,BFe,A4r,y4r,OH,L4r,x4r,$4r,L4,aIe,bc,x4,PFe,vL,k4r,IFe,S4r,nIe,cr,FL,R4r,vc,B4r,VH,P4r,I4r,XH,q4r,N4r,j4r,TL,D4r,qFe,G4r,O4r,V4r,It,ML,X4r,NFe,z4r,Q4r,Fc,W4r,jFe,H4r,U4r,zH,J4r,Y4r,K4r,$4,Z4r,qr,EL,eEr,DFe,oEr,rEr,dn,tEr,GFe,aEr,nEr,OFe,sEr,lEr,VFe,iEr,dEr,cEr,oe,k4,XFe,fEr,mEr,QH,gEr,hEr,pEr,S4,zFe,uEr,_Er,WH,bEr,vEr,FEr,R4,QFe,TEr,MEr,HH,EEr,CEr,wEr,B4,WFe,AEr,yEr,UH,LEr,xEr,$Er,P4,HFe,kEr,SEr,JH,REr,BEr,PEr,I4,UFe,IEr,qEr,YH,NEr,jEr,DEr,q4,JFe,GEr,OEr,KH,VEr,XEr,zEr,N4,YFe,QEr,WEr,ZH,HEr,UEr,JEr,j4,KFe,YEr,KEr,eU,ZEr,e5r,o5r,D4,ZFe,r5r,t5r,oU,a5r,n5r,s5r,G4,e0e,l5r,i5r,rU,d5r,c5r,f5r,O4,o0e,m5r,g5r,tU,h5r,p5r,u5r,V4,r0e,_5r,b5r,aU,v5r,F5r,T5r,X4,t0e,M5r,E5r,nU,C5r,w5r,A5r,z4,a0e,y5r,L5r,sU,x5r,$5r,k5r,Q4,n0e,S5r,R5r,lU,B5r,P5r,I5r,W4,s0e,q5r,N5r,iU,j5r,D5r,G5r,H4,l0e,O5r,V5r,dU,X5r,z5r,Q5r,U4,i0e,W5r,H5r,cU,U5r,J5r,Y5r,J4,d0e,K5r,Z5r,fU,eCr,oCr,rCr,Y4,c0e,tCr,aCr,mU,nCr,sCr,lCr,K4,f0e,iCr,dCr,gU,cCr,fCr,mCr,Z4,m0e,gCr,hCr,hU,pCr,uCr,_Cr,eE,g0e,bCr,vCr,pU,FCr,TCr,MCr,oE,h0e,ECr,CCr,uU,wCr,ACr,yCr,rE,sIe,Tc,tE,p0e,CL,LCr,u0e,xCr,lIe,fr,wL,$Cr,Mc,kCr,_U,SCr,RCr,bU,BCr,PCr,ICr,AL,qCr,_0e,NCr,jCr,DCr,qt,yL,GCr,b0e,OCr,VCr,Ec,XCr,v0e,zCr,QCr,vU,WCr,HCr,UCr,aE,JCr,Nr,LL,YCr,F0e,KCr,ZCr,cn,e3r,T0e,o3r,r3r,M0e,t3r,a3r,E0e,n3r,s3r,l3r,ke,nE,C0e,i3r,d3r,FU,c3r,f3r,m3r,sE,w0e,g3r,h3r,TU,p3r,u3r,_3r,lE,A0e,b3r,v3r,MU,F3r,T3r,M3r,iE,y0e,E3r,C3r,EU,w3r,A3r,y3r,dE,L0e,L3r,x3r,CU,$3r,k3r,S3r,cE,x0e,R3r,B3r,wU,P3r,I3r,q3r,fE,$0e,N3r,j3r,AU,D3r,G3r,O3r,mE,k0e,V3r,X3r,yU,z3r,Q3r,W3r,gE,S0e,H3r,U3r,LU,J3r,Y3r,K3r,hE,iIe,Cc,pE,R0e,xL,Z3r,B0e,ewr,dIe,mr,$L,owr,wc,rwr,xU,twr,awr,$U,nwr,swr,lwr,kL,iwr,P0e,dwr,cwr,fwr,Nt,SL,mwr,I0e,gwr,hwr,Ac,pwr,q0e,uwr,_wr,kU,bwr,vwr,Fwr,uE,Twr,jr,RL,Mwr,N0e,Ewr,Cwr,fn,wwr,j0e,Awr,ywr,D0e,Lwr,xwr,G0e,$wr,kwr,Swr,Me,_E,O0e,Rwr,Bwr,SU,Pwr,Iwr,qwr,bE,V0e,Nwr,jwr,RU,Dwr,Gwr,Owr,vE,X0e,Vwr,Xwr,BU,zwr,Qwr,Wwr,FE,z0e,Hwr,Uwr,PU,Jwr,Ywr,Kwr,TE,Q0e,Zwr,eAr,IU,oAr,rAr,tAr,ME,W0e,aAr,nAr,qU,sAr,lAr,iAr,EE,H0e,dAr,cAr,NU,fAr,mAr,gAr,CE,U0e,hAr,pAr,jU,uAr,_Ar,bAr,wE,J0e,vAr,FAr,DU,TAr,MAr,EAr,AE,Y0e,CAr,wAr,GU,AAr,yAr,LAr,yE,K0e,xAr,$Ar,OU,kAr,SAr,RAr,LE,Z0e,BAr,PAr,VU,IAr,qAr,NAr,xE,cIe,yc,$E,eTe,BL,jAr,oTe,DAr,fIe,gr,PL,GAr,Lc,OAr,XU,VAr,XAr,zU,zAr,QAr,WAr,IL,HAr,rTe,UAr,JAr,YAr,jt,qL,KAr,tTe,ZAr,e6r,xc,o6r,aTe,r6r,t6r,QU,a6r,n6r,s6r,kE,l6r,Dr,NL,i6r,nTe,d6r,c6r,mn,f6r,sTe,m6r,g6r,lTe,h6r,p6r,iTe,u6r,_6r,b6r,Le,SE,dTe,v6r,F6r,WU,T6r,M6r,E6r,RE,cTe,C6r,w6r,HU,A6r,y6r,L6r,BE,fTe,x6r,$6r,UU,k6r,S6r,R6r,PE,mTe,B6r,P6r,JU,I6r,q6r,N6r,IE,gTe,j6r,D6r,YU,G6r,O6r,V6r,qE,hTe,X6r,z6r,KU,Q6r,W6r,H6r,NE,pTe,U6r,J6r,ZU,Y6r,K6r,Z6r,jE,uTe,eyr,oyr,eJ,ryr,tyr,ayr,DE,_Te,nyr,syr,oJ,lyr,iyr,dyr,GE,bTe,cyr,fyr,rJ,myr,gyr,hyr,OE,mIe,$c,VE,vTe,jL,pyr,FTe,uyr,gIe,hr,DL,_yr,kc,byr,tJ,vyr,Fyr,aJ,Tyr,Myr,Eyr,GL,Cyr,TTe,wyr,Ayr,yyr,Dt,OL,Lyr,MTe,xyr,$yr,Sc,kyr,ETe,Syr,Ryr,nJ,Byr,Pyr,Iyr,XE,qyr,Gr,VL,Nyr,CTe,jyr,Dyr,gn,Gyr,wTe,Oyr,Vyr,ATe,Xyr,zyr,yTe,Qyr,Wyr,Hyr,Se,zE,LTe,Uyr,Jyr,sJ,Yyr,Kyr,Zyr,QE,xTe,eLr,oLr,lJ,rLr,tLr,aLr,WE,$Te,nLr,sLr,iJ,lLr,iLr,dLr,HE,kTe,cLr,fLr,dJ,mLr,gLr,hLr,UE,STe,pLr,uLr,cJ,_Lr,bLr,vLr,JE,RTe,FLr,TLr,fJ,MLr,ELr,CLr,YE,BTe,wLr,ALr,mJ,yLr,LLr,xLr,KE,PTe,$Lr,kLr,gJ,SLr,RLr,BLr,ZE,ITe,PLr,ILr,hJ,qLr,NLr,jLr,e5,hIe,Rc,o5,qTe,XL,DLr,NTe,GLr,pIe,pr,zL,OLr,Bc,VLr,pJ,XLr,zLr,uJ,QLr,WLr,HLr,QL,ULr,jTe,JLr,YLr,KLr,Gt,WL,ZLr,DTe,e8r,o8r,Pc,r8r,GTe,t8r,a8r,_J,n8r,s8r,l8r,r5,i8r,Or,HL,d8r,OTe,c8r,f8r,hn,m8r,VTe,g8r,h8r,XTe,p8r,u8r,zTe,_8r,b8r,v8r,xe,t5,QTe,F8r,T8r,bJ,M8r,E8r,C8r,a5,WTe,w8r,A8r,vJ,y8r,L8r,x8r,n5,HTe,$8r,k8r,FJ,S8r,R8r,B8r,s5,UTe,P8r,I8r,TJ,q8r,N8r,j8r,l5,JTe,D8r,G8r,MJ,O8r,V8r,X8r,i5,YTe,z8r,Q8r,EJ,W8r,H8r,U8r,d5,KTe,J8r,Y8r,CJ,K8r,Z8r,exr,c5,ZTe,oxr,rxr,wJ,txr,axr,nxr,f5,e7e,sxr,lxr,AJ,ixr,dxr,cxr,m5,o7e,fxr,mxr,yJ,gxr,hxr,pxr,g5,uIe,Ic,h5,r7e,UL,uxr,t7e,_xr,_Ie,ur,JL,bxr,qc,vxr,LJ,Fxr,Txr,xJ,Mxr,Exr,Cxr,YL,wxr,a7e,Axr,yxr,Lxr,Ot,KL,xxr,n7e,$xr,kxr,Nc,Sxr,s7e,Rxr,Bxr,$J,Pxr,Ixr,qxr,p5,Nxr,Vr,ZL,jxr,l7e,Dxr,Gxr,pn,Oxr,i7e,Vxr,Xxr,d7e,zxr,Qxr,c7e,Wxr,Hxr,Uxr,$e,u5,f7e,Jxr,Yxr,kJ,Kxr,Zxr,e$r,_5,m7e,o$r,r$r,SJ,t$r,a$r,n$r,b5,g7e,s$r,l$r,RJ,i$r,d$r,c$r,v5,h7e,f$r,m$r,BJ,g$r,h$r,p$r,F5,p7e,u$r,_$r,PJ,b$r,v$r,F$r,T5,u7e,T$r,M$r,IJ,E$r,C$r,w$r,M5,_7e,A$r,y$r,qJ,L$r,x$r,$$r,E5,b7e,k$r,S$r,NJ,R$r,B$r,P$r,C5,v7e,I$r,q$r,jJ,N$r,j$r,D$r,w5,F7e,G$r,O$r,DJ,V$r,X$r,z$r,A5,bIe,jc,y5,T7e,e8,Q$r,M7e,W$r,vIe,_r,o8,H$r,Dc,U$r,GJ,J$r,Y$r,OJ,K$r,Z$r,ekr,r8,okr,E7e,rkr,tkr,akr,Vt,t8,nkr,C7e,skr,lkr,Gc,ikr,w7e,dkr,ckr,VJ,fkr,mkr,gkr,L5,hkr,Xr,a8,pkr,A7e,ukr,_kr,un,bkr,y7e,vkr,Fkr,L7e,Tkr,Mkr,x7e,Ekr,Ckr,wkr,De,x5,$7e,Akr,ykr,XJ,Lkr,xkr,$kr,$5,k7e,kkr,Skr,zJ,Rkr,Bkr,Pkr,k5,S7e,Ikr,qkr,QJ,Nkr,jkr,Dkr,S5,R7e,Gkr,Okr,WJ,Vkr,Xkr,zkr,R5,B7e,Qkr,Wkr,HJ,Hkr,Ukr,Jkr,B5,P7e,Ykr,Kkr,UJ,Zkr,eSr,oSr,P5,I7e,rSr,tSr,JJ,aSr,nSr,sSr,I5,q7e,lSr,iSr,YJ,dSr,cSr,fSr,q5,FIe,Oc,N5,N7e,n8,mSr,j7e,gSr,TIe,br,s8,hSr,Vc,pSr,KJ,uSr,_Sr,ZJ,bSr,vSr,FSr,l8,TSr,D7e,MSr,ESr,CSr,Xt,i8,wSr,G7e,ASr,ySr,Xc,LSr,O7e,xSr,$Sr,eY,kSr,SSr,RSr,j5,BSr,zr,d8,PSr,V7e,ISr,qSr,_n,NSr,X7e,jSr,DSr,z7e,GSr,OSr,Q7e,VSr,XSr,zSr,Ge,D5,W7e,QSr,WSr,oY,HSr,USr,JSr,G5,H7e,YSr,KSr,rY,ZSr,eRr,oRr,O5,U7e,rRr,tRr,tY,aRr,nRr,sRr,V5,J7e,lRr,iRr,aY,dRr,cRr,fRr,X5,Y7e,mRr,gRr,nY,hRr,pRr,uRr,z5,K7e,_Rr,bRr,sY,vRr,FRr,TRr,Q5,Z7e,MRr,ERr,lY,CRr,wRr,ARr,W5,e9e,yRr,LRr,iY,xRr,$Rr,kRr,H5,MIe,zc,U5,o9e,c8,SRr,r9e,RRr,EIe,vr,f8,BRr,Qc,PRr,dY,IRr,qRr,cY,NRr,jRr,DRr,m8,GRr,t9e,ORr,VRr,XRr,zt,g8,zRr,a9e,QRr,WRr,Wc,HRr,n9e,URr,JRr,fY,YRr,KRr,ZRr,J5,eBr,Qr,h8,oBr,s9e,rBr,tBr,bn,aBr,l9e,nBr,sBr,i9e,lBr,iBr,d9e,dBr,cBr,fBr,c9e,Y5,f9e,mBr,gBr,mY,hBr,pBr,uBr,K5,CIe,Hc,Z5,m9e,p8,_Br,g9e,bBr,wIe,Fr,u8,vBr,Uc,FBr,gY,TBr,MBr,hY,EBr,CBr,wBr,_8,ABr,h9e,yBr,LBr,xBr,Qt,b8,$Br,p9e,kBr,SBr,Jc,RBr,u9e,BBr,PBr,pY,IBr,qBr,NBr,eC,jBr,Wr,v8,DBr,_9e,GBr,OBr,vn,VBr,b9e,XBr,zBr,v9e,QBr,WBr,F9e,HBr,UBr,JBr,F8,oC,T9e,YBr,KBr,uY,ZBr,ePr,oPr,rC,M9e,rPr,tPr,_Y,aPr,nPr,sPr,tC,AIe,Yc,aC,E9e,T8,lPr,C9e,iPr,yIe,Tr,M8,dPr,Kc,cPr,bY,fPr,mPr,vY,gPr,hPr,pPr,E8,uPr,w9e,_Pr,bPr,vPr,Wt,C8,FPr,A9e,TPr,MPr,Zc,EPr,y9e,CPr,wPr,FY,APr,yPr,LPr,nC,xPr,Hr,w8,$Pr,L9e,kPr,SPr,Fn,RPr,x9e,BPr,PPr,$9e,IPr,qPr,k9e,NPr,jPr,DPr,S9e,sC,R9e,GPr,OPr,TY,VPr,XPr,zPr,lC,LIe;return d=new ee({}),va=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),yw=new ee({}),Lw=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),df=new QPr({props:{warning:!0,$$slots:{default:[W5t]},$$scope:{ctx:L}}}),xw=new ee({}),$w=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/configuration_auto.py#L566"}}),Rw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/configuration_auto.py#L589"}}),lg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[H5t]},$$scope:{ctx:L}}}),Bw=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/configuration_auto.py#L711"}}),Pw=new ee({}),Iw=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/tokenization_auto.py#L378"}}),jw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17109/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/tokenization_auto.py#L392"}}),jg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[U5t]},$$scope:{ctx:L}}}),Dw=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/tokenization_auto.py#L588"}}),Gw=new ee({}),Ow=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),zw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17109/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),mh=new QPr({props:{$$slots:{default:[J5t]},$$scope:{ctx:L}}}),gh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Y5t]},$$scope:{ctx:L}}}),Qw=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),Ww=new ee({}),Hw=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/processing_auto.py#L76"}}),Yw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/processing_auto.py#L90"}}),$h=new QPr({props:{$$slots:{default:[K5t]},$$scope:{ctx:L}}}),kh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Z5t]},$$scope:{ctx:L}}}),Kw=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/processing_auto.py#L243"}}),Zw=new ee({}),eA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L718"}}),rA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ofa#transformers.OFAConfig">OFAConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ofa#transformers.OFAModel">OFAModel</a> (OFA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),Bh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[eCt]},$$scope:{ctx:L}}}),tA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),Eu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[oCt]},$$scope:{ctx:L}}}),aA=new ee({}),nA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L725"}}),lA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),wu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[rCt]},$$scope:{ctx:L}}}),iA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),m_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[tCt]},$$scope:{ctx:L}}}),dA=new ee({}),cA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L740"}}),mA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),h_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[aCt]},$$scope:{ctx:L}}}),gA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),Y_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[nCt]},$$scope:{ctx:L}}}),hA=new ee({}),pA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L747"}}),_A=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),Z_=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[sCt]},$$scope:{ctx:L}}}),bA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),I1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[lCt]},$$scope:{ctx:L}}}),vA=new ee({}),FA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L754"}}),MA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),N1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[iCt]},$$scope:{ctx:L}}}),EA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),tb=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[dCt]},$$scope:{ctx:L}}}),CA=new ee({}),wA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L763"}}),yA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),nb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[cCt]},$$scope:{ctx:L}}}),LA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),e2=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[fCt]},$$scope:{ctx:L}}}),xA=new ee({}),$A=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L797"}}),SA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),r2=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[mCt]},$$scope:{ctx:L}}}),RA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),S2=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[gCt]},$$scope:{ctx:L}}}),BA=new ee({}),PA=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L804"}}),qA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),B2=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[hCt]},$$scope:{ctx:L}}}),NA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),G2=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[pCt]},$$scope:{ctx:L}}}),jA=new ee({}),DA=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L790"}}),OA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),V2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[uCt]},$$scope:{ctx:L}}}),VA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),Cv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[_Ct]},$$scope:{ctx:L}}}),XA=new ee({}),zA=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L772"}}),WA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),Av=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[bCt]},$$scope:{ctx:L}}}),HA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),gF=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[vCt]},$$scope:{ctx:L}}}),UA=new ee({}),JA=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L779"}}),KA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),pF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[FCt]},$$scope:{ctx:L}}}),ZA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),bF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[TCt]},$$scope:{ctx:L}}}),e6=new ee({}),o6=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L813"}}),t6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),FF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[MCt]},$$scope:{ctx:L}}}),a6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),RF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ECt]},$$scope:{ctx:L}}}),n6=new ee({}),s6=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L852"}}),i6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),PF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[CCt]},$$scope:{ctx:L}}}),d6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),NF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[wCt]},$$scope:{ctx:L}}}),c6=new ee({}),f6=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L859"}}),g6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),DF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[ACt]},$$scope:{ctx:L}}}),h6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),JF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[yCt]},$$scope:{ctx:L}}}),p6=new ee({}),u6=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L882"}}),b6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),KF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[LCt]},$$scope:{ctx:L}}}),v6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),a0=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[xCt]},$$scope:{ctx:L}}}),F6=new ee({}),T6=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L866"}}),E6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),s0=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[$Ct]},$$scope:{ctx:L}}}),C6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),u0=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[kCt]},$$scope:{ctx:L}}}),w6=new ee({}),A6=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L873"}}),L6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),b0=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[SCt]},$$scope:{ctx:L}}}),x6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),M0=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[RCt]},$$scope:{ctx:L}}}),k6=new ee({}),S6=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L891"}}),B6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),C0=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[BCt]},$$scope:{ctx:L}}}),P6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),$0=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[PCt]},$$scope:{ctx:L}}}),I6=new ee({}),q6=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L898"}}),j6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),S0=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[ICt]},$$scope:{ctx:L}}}),D6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),q0=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[qCt]},$$scope:{ctx:L}}}),G6=new ee({}),O6=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L845"}}),X6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),j0=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[NCt]},$$scope:{ctx:L}}}),z6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),V0=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[jCt]},$$scope:{ctx:L}}}),W6=new ee({}),H6=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L820"}}),J6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),z0=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[DCt]},$$scope:{ctx:L}}}),Y6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),H0=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[GCt]},$$scope:{ctx:L}}}),K6=new ee({}),Z6=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L827"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),J0=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[OCt]},$$scope:{ctx:L}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),rT=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[VCt]},$$scope:{ctx:L}}}),ty=new ee({}),ay=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_auto.py#L836"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),aT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[XCt]},$$scope:{ctx:L}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),lT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[zCt]},$$scope:{ctx:L}}}),iy=new ee({}),dy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),fy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),dT=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[QCt]},$$scope:{ctx:L}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),e7=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[WCt]},$$scope:{ctx:L}}}),gy=new ee({}),hy=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),uy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),r7=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[HCt]},$$scope:{ctx:L}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),A7=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[UCt]},$$scope:{ctx:L}}}),by=new ee({}),vy=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),L7=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[JCt]},$$scope:{ctx:L}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),G7=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[YCt]},$$scope:{ctx:L}}}),Ey=new ee({}),Cy=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),V7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[KCt]},$$scope:{ctx:L}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),W7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ZCt]},$$scope:{ctx:L}}}),Ly=new ee({}),xy=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),ky=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),U7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[e3t]},$$scope:{ctx:L}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),u9=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[o3t]},$$scope:{ctx:L}}}),Ry=new ee({}),By=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),b9=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[r3t]},$$scope:{ctx:L}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),x9=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[t3t]},$$scope:{ctx:L}}}),Ny=new ee({}),jy=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),k9=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[a3t]},$$scope:{ctx:L}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),aM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[n3t]},$$scope:{ctx:L}}}),Vy=new ee({}),Xy=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),sM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[s3t]},$$scope:{ctx:L}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),CM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[l3t]},$$scope:{ctx:L}}}),Hy=new ee({}),Uy=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),AM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[i3t]},$$scope:{ctx:L}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),LM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[d3t]},$$scope:{ctx:L}}}),Zy=new ee({}),eL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),rL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),$M=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[c3t]},$$scope:{ctx:L}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),YM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[f3t]},$$scope:{ctx:L}}}),aL=new ee({}),nL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),lL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),ZM=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[m3t]},$$scope:{ctx:L}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),F4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[g3t]},$$scope:{ctx:L}}}),dL=new ee({}),cL=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),mL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),M4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[h3t]},$$scope:{ctx:L}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),C4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[p3t]},$$scope:{ctx:L}}}),hL=new ee({}),pL=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),_L=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),A4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[u3t]},$$scope:{ctx:L}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),L4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[_3t]},$$scope:{ctx:L}}}),vL=new ee({}),FL=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),ML=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),$4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[b3t]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),rE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[v3t]},$$scope:{ctx:L}}}),CL=new ee({}),wL=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),yL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),aE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[F3t]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[T3t]},$$scope:{ctx:L}}}),xL=new ee({}),$L=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),SL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),uE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[M3t]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),xE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[E3t]},$$scope:{ctx:L}}}),BL=new ee({}),PL=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),qL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),kE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[C3t]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),OE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[w3t]},$$scope:{ctx:L}}}),jL=new ee({}),DL=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),OL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),XE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[A3t]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[y3t]},$$scope:{ctx:L}}}),XL=new ee({}),zL=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),WL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[L3t]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),g5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[x3t]},$$scope:{ctx:L}}}),UL=new ee({}),JL=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),KL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),p5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[$3t]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),A5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[k3t]},$$scope:{ctx:L}}}),e8=new ee({}),o8=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),t8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),L5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[S3t]},$$scope:{ctx:L}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),q5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[R3t]},$$scope:{ctx:L}}}),n8=new ee({}),s8=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),i8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),j5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[B3t]},$$scope:{ctx:L}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),H5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[P3t]},$$scope:{ctx:L}}}),c8=new ee({}),f8=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),g8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),J5=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[I3t]},$$scope:{ctx:L}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),K5=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[q3t]},$$scope:{ctx:L}}}),p8=new ee({}),u8=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),b8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),eC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[N3t]},$$scope:{ctx:L}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[j3t]},$$scope:{ctx:L}}}),T8=new ee({}),M8=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),C8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L389"}}),nC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[D3t]},$$scope:{ctx:L}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17109/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17109/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17109/src/transformers/models/auto/auto_factory.py#L417"}}),lC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[G3t]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ri=o("Auto Classes"),tf=l(),Kr=a("p"),ti=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ai=a("code"),Ew=o("from_pretrained()"),af=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ni=o("Instantiating one of "),Mn=a("a"),Cw=o("AutoConfig"),En=o(", "),Cn=a("a"),ww=o("AutoModel"),si=o(`, and
`),wn=a("a"),Aw=o("AutoTokenizer"),li=o(" will directly create a class of the relevant architecture. For instance"),nf=l(),F(va.$$.fragment),ze=l(),Ae=a("p"),jx=o("will create a model that is an instance of "),ii=a("a"),Dx=o("BertModel"),Gx=o("."),Eo=l(),Fa=a("p"),Ox=o("There is one class of "),sf=a("code"),Vx=o("AutoModel"),RNe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),yBe=l(),di=a("h2"),lf=a("a"),gZ=a("span"),F(yw.$$.fragment),BNe=l(),hZ=a("span"),PNe=o("Extending the Auto Classes"),LBe=l(),An=a("p"),INe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),pZ=a("code"),qNe=o("NewModel"),NNe=o(", make sure you have a "),uZ=a("code"),jNe=o("NewModelConfig"),DNe=o(` then you can add those to the auto
classes like this:`),xBe=l(),F(Lw.$$.fragment),$Be=l(),Xx=a("p"),GNe=o("You will then be able to use the auto classes like you would usually do!"),kBe=l(),F(df.$$.fragment),SBe=l(),ci=a("h2"),cf=a("a"),_Z=a("span"),F(xw.$$.fragment),ONe=l(),bZ=a("span"),VNe=o("AutoConfig"),RBe=l(),Co=a("div"),F($w.$$.fragment),XNe=l(),kw=a("p"),zNe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),zx=a("a"),QNe=o("from_pretrained()"),WNe=o(" class method."),HNe=l(),Sw=a("p"),UNe=o("This class cannot be instantiated directly using "),vZ=a("code"),JNe=o("__init__()"),YNe=o(" (throws an error)."),KNe=l(),Mr=a("div"),F(Rw.$$.fragment),ZNe=l(),FZ=a("p"),eje=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),oje=l(),fi=a("p"),rje=o("The configuration class to instantiate is selected based on the "),TZ=a("code"),tje=o("model_type"),aje=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),MZ=a("code"),nje=o("pretrained_model_name_or_path"),sje=o(":"),lje=l(),A=a("ul"),ff=a("li"),EZ=a("strong"),ije=o("albert"),dje=o(" \u2014 "),Qx=a("a"),cje=o("AlbertConfig"),fje=o(" (ALBERT model)"),mje=l(),mf=a("li"),CZ=a("strong"),gje=o("bart"),hje=o(" \u2014 "),Wx=a("a"),pje=o("BartConfig"),uje=o(" (BART model)"),_je=l(),gf=a("li"),wZ=a("strong"),bje=o("beit"),vje=o(" \u2014 "),Hx=a("a"),Fje=o("BeitConfig"),Tje=o(" (BEiT model)"),Mje=l(),hf=a("li"),AZ=a("strong"),Eje=o("bert"),Cje=o(" \u2014 "),Ux=a("a"),wje=o("BertConfig"),Aje=o(" (BERT model)"),yje=l(),pf=a("li"),yZ=a("strong"),Lje=o("bert-generation"),xje=o(" \u2014 "),Jx=a("a"),$je=o("BertGenerationConfig"),kje=o(" (Bert Generation model)"),Sje=l(),uf=a("li"),LZ=a("strong"),Rje=o("big_bird"),Bje=o(" \u2014 "),Yx=a("a"),Pje=o("BigBirdConfig"),Ije=o(" (BigBird model)"),qje=l(),_f=a("li"),xZ=a("strong"),Nje=o("bigbird_pegasus"),jje=o(" \u2014 "),Kx=a("a"),Dje=o("BigBirdPegasusConfig"),Gje=o(" (BigBirdPegasus model)"),Oje=l(),bf=a("li"),$Z=a("strong"),Vje=o("blenderbot"),Xje=o(" \u2014 "),Zx=a("a"),zje=o("BlenderbotConfig"),Qje=o(" (Blenderbot model)"),Wje=l(),vf=a("li"),kZ=a("strong"),Hje=o("blenderbot-small"),Uje=o(" \u2014 "),e$=a("a"),Jje=o("BlenderbotSmallConfig"),Yje=o(" (BlenderbotSmall model)"),Kje=l(),Ff=a("li"),SZ=a("strong"),Zje=o("camembert"),eDe=o(" \u2014 "),o$=a("a"),oDe=o("CamembertConfig"),rDe=o(" (CamemBERT model)"),tDe=l(),Tf=a("li"),RZ=a("strong"),aDe=o("canine"),nDe=o(" \u2014 "),r$=a("a"),sDe=o("CanineConfig"),lDe=o(" (Canine model)"),iDe=l(),Mf=a("li"),BZ=a("strong"),dDe=o("clip"),cDe=o(" \u2014 "),t$=a("a"),fDe=o("CLIPConfig"),mDe=o(" (CLIP model)"),gDe=l(),Ef=a("li"),PZ=a("strong"),hDe=o("convbert"),pDe=o(" \u2014 "),a$=a("a"),uDe=o("ConvBertConfig"),_De=o(" (ConvBERT model)"),bDe=l(),Cf=a("li"),IZ=a("strong"),vDe=o("convnext"),FDe=o(" \u2014 "),n$=a("a"),TDe=o("ConvNextConfig"),MDe=o(" (ConvNext model)"),EDe=l(),wf=a("li"),qZ=a("strong"),CDe=o("ctrl"),wDe=o(" \u2014 "),s$=a("a"),ADe=o("CTRLConfig"),yDe=o(" (CTRL model)"),LDe=l(),Af=a("li"),NZ=a("strong"),xDe=o("data2vec-audio"),$De=o(" \u2014 "),l$=a("a"),kDe=o("Data2VecAudioConfig"),SDe=o(" (Data2VecAudio model)"),RDe=l(),yf=a("li"),jZ=a("strong"),BDe=o("data2vec-text"),PDe=o(" \u2014 "),i$=a("a"),IDe=o("Data2VecTextConfig"),qDe=o(" (Data2VecText model)"),NDe=l(),Lf=a("li"),DZ=a("strong"),jDe=o("data2vec-vision"),DDe=o(" \u2014 "),d$=a("a"),GDe=o("Data2VecVisionConfig"),ODe=o(" (Data2VecVision model)"),VDe=l(),xf=a("li"),GZ=a("strong"),XDe=o("deberta"),zDe=o(" \u2014 "),c$=a("a"),QDe=o("DebertaConfig"),WDe=o(" (DeBERTa model)"),HDe=l(),$f=a("li"),OZ=a("strong"),UDe=o("deberta-v2"),JDe=o(" \u2014 "),f$=a("a"),YDe=o("DebertaV2Config"),KDe=o(" (DeBERTa-v2 model)"),ZDe=l(),kf=a("li"),VZ=a("strong"),eGe=o("decision_transformer"),oGe=o(" \u2014 "),m$=a("a"),rGe=o("DecisionTransformerConfig"),tGe=o(" (Decision Transformer model)"),aGe=l(),Sf=a("li"),XZ=a("strong"),nGe=o("deit"),sGe=o(" \u2014 "),g$=a("a"),lGe=o("DeiTConfig"),iGe=o(" (DeiT model)"),dGe=l(),Rf=a("li"),zZ=a("strong"),cGe=o("detr"),fGe=o(" \u2014 "),h$=a("a"),mGe=o("DetrConfig"),gGe=o(" (DETR model)"),hGe=l(),Bf=a("li"),QZ=a("strong"),pGe=o("distilbert"),uGe=o(" \u2014 "),p$=a("a"),_Ge=o("DistilBertConfig"),bGe=o(" (DistilBERT model)"),vGe=l(),Pf=a("li"),WZ=a("strong"),FGe=o("dpr"),TGe=o(" \u2014 "),u$=a("a"),MGe=o("DPRConfig"),EGe=o(" (DPR model)"),CGe=l(),If=a("li"),HZ=a("strong"),wGe=o("dpt"),AGe=o(" \u2014 "),_$=a("a"),yGe=o("DPTConfig"),LGe=o(" (DPT model)"),xGe=l(),qf=a("li"),UZ=a("strong"),$Ge=o("electra"),kGe=o(" \u2014 "),b$=a("a"),SGe=o("ElectraConfig"),RGe=o(" (ELECTRA model)"),BGe=l(),Nf=a("li"),JZ=a("strong"),PGe=o("encoder-decoder"),IGe=o(" \u2014 "),v$=a("a"),qGe=o("EncoderDecoderConfig"),NGe=o(" (Encoder decoder model)"),jGe=l(),jf=a("li"),YZ=a("strong"),DGe=o("flaubert"),GGe=o(" \u2014 "),F$=a("a"),OGe=o("FlaubertConfig"),VGe=o(" (FlauBERT model)"),XGe=l(),Df=a("li"),KZ=a("strong"),zGe=o("fnet"),QGe=o(" \u2014 "),T$=a("a"),WGe=o("FNetConfig"),HGe=o(" (FNet model)"),UGe=l(),Gf=a("li"),ZZ=a("strong"),JGe=o("fsmt"),YGe=o(" \u2014 "),M$=a("a"),KGe=o("FSMTConfig"),ZGe=o(" (FairSeq Machine-Translation model)"),eOe=l(),Of=a("li"),eee=a("strong"),oOe=o("funnel"),rOe=o(" \u2014 "),E$=a("a"),tOe=o("FunnelConfig"),aOe=o(" (Funnel Transformer model)"),nOe=l(),Vf=a("li"),oee=a("strong"),sOe=o("glpn"),lOe=o(" \u2014 "),C$=a("a"),iOe=o("GLPNConfig"),dOe=o(" (GLPN model)"),cOe=l(),Xf=a("li"),ree=a("strong"),fOe=o("gpt2"),mOe=o(" \u2014 "),w$=a("a"),gOe=o("GPT2Config"),hOe=o(" (OpenAI GPT-2 model)"),pOe=l(),zf=a("li"),tee=a("strong"),uOe=o("gpt_neo"),_Oe=o(" \u2014 "),A$=a("a"),bOe=o("GPTNeoConfig"),vOe=o(" (GPT Neo model)"),FOe=l(),Qf=a("li"),aee=a("strong"),TOe=o("gptj"),MOe=o(" \u2014 "),y$=a("a"),EOe=o("GPTJConfig"),COe=o(" (GPT-J model)"),wOe=l(),Wf=a("li"),nee=a("strong"),AOe=o("hubert"),yOe=o(" \u2014 "),L$=a("a"),LOe=o("HubertConfig"),xOe=o(" (Hubert model)"),$Oe=l(),Hf=a("li"),see=a("strong"),kOe=o("ibert"),SOe=o(" \u2014 "),x$=a("a"),ROe=o("IBertConfig"),BOe=o(" (I-BERT model)"),POe=l(),Uf=a("li"),lee=a("strong"),IOe=o("imagegpt"),qOe=o(" \u2014 "),$$=a("a"),NOe=o("ImageGPTConfig"),jOe=o(" (ImageGPT model)"),DOe=l(),Jf=a("li"),iee=a("strong"),GOe=o("layoutlm"),OOe=o(" \u2014 "),k$=a("a"),VOe=o("LayoutLMConfig"),XOe=o(" (LayoutLM model)"),zOe=l(),Yf=a("li"),dee=a("strong"),QOe=o("layoutlmv2"),WOe=o(" \u2014 "),S$=a("a"),HOe=o("LayoutLMv2Config"),UOe=o(" (LayoutLMv2 model)"),JOe=l(),Kf=a("li"),cee=a("strong"),YOe=o("led"),KOe=o(" \u2014 "),R$=a("a"),ZOe=o("LEDConfig"),eVe=o(" (LED model)"),oVe=l(),Zf=a("li"),fee=a("strong"),rVe=o("longformer"),tVe=o(" \u2014 "),B$=a("a"),aVe=o("LongformerConfig"),nVe=o(" (Longformer model)"),sVe=l(),em=a("li"),mee=a("strong"),lVe=o("luke"),iVe=o(" \u2014 "),P$=a("a"),dVe=o("LukeConfig"),cVe=o(" (LUKE model)"),fVe=l(),om=a("li"),gee=a("strong"),mVe=o("lxmert"),gVe=o(" \u2014 "),I$=a("a"),hVe=o("LxmertConfig"),pVe=o(" (LXMERT model)"),uVe=l(),rm=a("li"),hee=a("strong"),_Ve=o("m2m_100"),bVe=o(" \u2014 "),q$=a("a"),vVe=o("M2M100Config"),FVe=o(" (M2M100 model)"),TVe=l(),tm=a("li"),pee=a("strong"),MVe=o("marian"),EVe=o(" \u2014 "),N$=a("a"),CVe=o("MarianConfig"),wVe=o(" (Marian model)"),AVe=l(),am=a("li"),uee=a("strong"),yVe=o("maskformer"),LVe=o(" \u2014 "),j$=a("a"),xVe=o("MaskFormerConfig"),$Ve=o(" (MaskFormer model)"),kVe=l(),nm=a("li"),_ee=a("strong"),SVe=o("mbart"),RVe=o(" \u2014 "),D$=a("a"),BVe=o("MBartConfig"),PVe=o(" (mBART model)"),IVe=l(),sm=a("li"),bee=a("strong"),qVe=o("megatron-bert"),NVe=o(" \u2014 "),G$=a("a"),jVe=o("MegatronBertConfig"),DVe=o(" (MegatronBert model)"),GVe=l(),lm=a("li"),vee=a("strong"),OVe=o("mobilebert"),VVe=o(" \u2014 "),O$=a("a"),XVe=o("MobileBertConfig"),zVe=o(" (MobileBERT model)"),QVe=l(),im=a("li"),Fee=a("strong"),WVe=o("mpnet"),HVe=o(" \u2014 "),V$=a("a"),UVe=o("MPNetConfig"),JVe=o(" (MPNet model)"),YVe=l(),dm=a("li"),Tee=a("strong"),KVe=o("mt5"),ZVe=o(" \u2014 "),X$=a("a"),eXe=o("MT5Config"),oXe=o(" (mT5 model)"),rXe=l(),cm=a("li"),Mee=a("strong"),tXe=o("nystromformer"),aXe=o(" \u2014 "),z$=a("a"),nXe=o("NystromformerConfig"),sXe=o(" (Nystromformer model)"),lXe=l(),fm=a("li"),Eee=a("strong"),iXe=o("ofa"),dXe=o(" \u2014 "),Q$=a("a"),cXe=o("OFAConfig"),fXe=o(" (OFA model)"),mXe=l(),mm=a("li"),Cee=a("strong"),gXe=o("openai-gpt"),hXe=o(" \u2014 "),W$=a("a"),pXe=o("OpenAIGPTConfig"),uXe=o(" (OpenAI GPT model)"),_Xe=l(),gm=a("li"),wee=a("strong"),bXe=o("pegasus"),vXe=o(" \u2014 "),H$=a("a"),FXe=o("PegasusConfig"),TXe=o(" (Pegasus model)"),MXe=l(),hm=a("li"),Aee=a("strong"),EXe=o("perceiver"),CXe=o(" \u2014 "),U$=a("a"),wXe=o("PerceiverConfig"),AXe=o(" (Perceiver model)"),yXe=l(),pm=a("li"),yee=a("strong"),LXe=o("plbart"),xXe=o(" \u2014 "),J$=a("a"),$Xe=o("PLBartConfig"),kXe=o(" (PLBart model)"),SXe=l(),um=a("li"),Lee=a("strong"),RXe=o("poolformer"),BXe=o(" \u2014 "),Y$=a("a"),PXe=o("PoolFormerConfig"),IXe=o(" (PoolFormer model)"),qXe=l(),_m=a("li"),xee=a("strong"),NXe=o("prophetnet"),jXe=o(" \u2014 "),K$=a("a"),DXe=o("ProphetNetConfig"),GXe=o(" (ProphetNet model)"),OXe=l(),bm=a("li"),$ee=a("strong"),VXe=o("qdqbert"),XXe=o(" \u2014 "),Z$=a("a"),zXe=o("QDQBertConfig"),QXe=o(" (QDQBert model)"),WXe=l(),vm=a("li"),kee=a("strong"),HXe=o("rag"),UXe=o(" \u2014 "),ek=a("a"),JXe=o("RagConfig"),YXe=o(" (RAG model)"),KXe=l(),Fm=a("li"),See=a("strong"),ZXe=o("realm"),eze=o(" \u2014 "),ok=a("a"),oze=o("RealmConfig"),rze=o(" (Realm model)"),tze=l(),Tm=a("li"),Ree=a("strong"),aze=o("reformer"),nze=o(" \u2014 "),rk=a("a"),sze=o("ReformerConfig"),lze=o(" (Reformer model)"),ize=l(),Mm=a("li"),Bee=a("strong"),dze=o("regnet"),cze=o(" \u2014 "),tk=a("a"),fze=o("RegNetConfig"),mze=o(" (RegNet model)"),gze=l(),Em=a("li"),Pee=a("strong"),hze=o("rembert"),pze=o(" \u2014 "),ak=a("a"),uze=o("RemBertConfig"),_ze=o(" (RemBERT model)"),bze=l(),Cm=a("li"),Iee=a("strong"),vze=o("resnet"),Fze=o(" \u2014 "),nk=a("a"),Tze=o("ResNetConfig"),Mze=o(" (ResNet model)"),Eze=l(),wm=a("li"),qee=a("strong"),Cze=o("retribert"),wze=o(" \u2014 "),sk=a("a"),Aze=o("RetriBertConfig"),yze=o(" (RetriBERT model)"),Lze=l(),Am=a("li"),Nee=a("strong"),xze=o("roberta"),$ze=o(" \u2014 "),lk=a("a"),kze=o("RobertaConfig"),Sze=o(" (RoBERTa model)"),Rze=l(),ym=a("li"),jee=a("strong"),Bze=o("roformer"),Pze=o(" \u2014 "),ik=a("a"),Ize=o("RoFormerConfig"),qze=o(" (RoFormer model)"),Nze=l(),Lm=a("li"),Dee=a("strong"),jze=o("segformer"),Dze=o(" \u2014 "),dk=a("a"),Gze=o("SegformerConfig"),Oze=o(" (SegFormer model)"),Vze=l(),xm=a("li"),Gee=a("strong"),Xze=o("sew"),zze=o(" \u2014 "),ck=a("a"),Qze=o("SEWConfig"),Wze=o(" (SEW model)"),Hze=l(),$m=a("li"),Oee=a("strong"),Uze=o("sew-d"),Jze=o(" \u2014 "),fk=a("a"),Yze=o("SEWDConfig"),Kze=o(" (SEW-D model)"),Zze=l(),km=a("li"),Vee=a("strong"),eQe=o("speech-encoder-decoder"),oQe=o(" \u2014 "),mk=a("a"),rQe=o("SpeechEncoderDecoderConfig"),tQe=o(" (Speech Encoder decoder model)"),aQe=l(),Sm=a("li"),Xee=a("strong"),nQe=o("speech_to_text"),sQe=o(" \u2014 "),gk=a("a"),lQe=o("Speech2TextConfig"),iQe=o(" (Speech2Text model)"),dQe=l(),Rm=a("li"),zee=a("strong"),cQe=o("speech_to_text_2"),fQe=o(" \u2014 "),hk=a("a"),mQe=o("Speech2Text2Config"),gQe=o(" (Speech2Text2 model)"),hQe=l(),Bm=a("li"),Qee=a("strong"),pQe=o("splinter"),uQe=o(" \u2014 "),pk=a("a"),_Qe=o("SplinterConfig"),bQe=o(" (Splinter model)"),vQe=l(),Pm=a("li"),Wee=a("strong"),FQe=o("squeezebert"),TQe=o(" \u2014 "),uk=a("a"),MQe=o("SqueezeBertConfig"),EQe=o(" (SqueezeBERT model)"),CQe=l(),Im=a("li"),Hee=a("strong"),wQe=o("swin"),AQe=o(" \u2014 "),_k=a("a"),yQe=o("SwinConfig"),LQe=o(" (Swin model)"),xQe=l(),qm=a("li"),Uee=a("strong"),$Qe=o("t5"),kQe=o(" \u2014 "),bk=a("a"),SQe=o("T5Config"),RQe=o(" (T5 model)"),BQe=l(),Nm=a("li"),Jee=a("strong"),PQe=o("tapas"),IQe=o(" \u2014 "),vk=a("a"),qQe=o("TapasConfig"),NQe=o(" (TAPAS model)"),jQe=l(),jm=a("li"),Yee=a("strong"),DQe=o("tapex"),GQe=o(" \u2014 "),Fk=a("a"),OQe=o("BartConfig"),VQe=o(" (TAPEX model)"),XQe=l(),Dm=a("li"),Kee=a("strong"),zQe=o("transfo-xl"),QQe=o(" \u2014 "),Tk=a("a"),WQe=o("TransfoXLConfig"),HQe=o(" (Transformer-XL model)"),UQe=l(),Gm=a("li"),Zee=a("strong"),JQe=o("trocr"),YQe=o(" \u2014 "),Mk=a("a"),KQe=o("TrOCRConfig"),ZQe=o(" (TrOCR model)"),eWe=l(),Om=a("li"),eoe=a("strong"),oWe=o("unispeech"),rWe=o(" \u2014 "),Ek=a("a"),tWe=o("UniSpeechConfig"),aWe=o(" (UniSpeech model)"),nWe=l(),Vm=a("li"),ooe=a("strong"),sWe=o("unispeech-sat"),lWe=o(" \u2014 "),Ck=a("a"),iWe=o("UniSpeechSatConfig"),dWe=o(" (UniSpeechSat model)"),cWe=l(),Xm=a("li"),roe=a("strong"),fWe=o("van"),mWe=o(" \u2014 "),wk=a("a"),gWe=o("VanConfig"),hWe=o(" (VAN model)"),pWe=l(),zm=a("li"),toe=a("strong"),uWe=o("vilt"),_We=o(" \u2014 "),Ak=a("a"),bWe=o("ViltConfig"),vWe=o(" (ViLT model)"),FWe=l(),Qm=a("li"),aoe=a("strong"),TWe=o("vision-encoder-decoder"),MWe=o(" \u2014 "),yk=a("a"),EWe=o("VisionEncoderDecoderConfig"),CWe=o(" (Vision Encoder decoder model)"),wWe=l(),Wm=a("li"),noe=a("strong"),AWe=o("vision-text-dual-encoder"),yWe=o(" \u2014 "),Lk=a("a"),LWe=o("VisionTextDualEncoderConfig"),xWe=o(" (VisionTextDualEncoder model)"),$We=l(),Hm=a("li"),soe=a("strong"),kWe=o("visual_bert"),SWe=o(" \u2014 "),xk=a("a"),RWe=o("VisualBertConfig"),BWe=o(" (VisualBert model)"),PWe=l(),Um=a("li"),loe=a("strong"),IWe=o("vit"),qWe=o(" \u2014 "),$k=a("a"),NWe=o("ViTConfig"),jWe=o(" (ViT model)"),DWe=l(),Jm=a("li"),ioe=a("strong"),GWe=o("vit_mae"),OWe=o(" \u2014 "),kk=a("a"),VWe=o("ViTMAEConfig"),XWe=o(" (ViTMAE model)"),zWe=l(),Ym=a("li"),doe=a("strong"),QWe=o("wav2vec2"),WWe=o(" \u2014 "),Sk=a("a"),HWe=o("Wav2Vec2Config"),UWe=o(" (Wav2Vec2 model)"),JWe=l(),Km=a("li"),coe=a("strong"),YWe=o("wavlm"),KWe=o(" \u2014 "),Rk=a("a"),ZWe=o("WavLMConfig"),eHe=o(" (WavLM model)"),oHe=l(),Zm=a("li"),foe=a("strong"),rHe=o("xglm"),tHe=o(" \u2014 "),Bk=a("a"),aHe=o("XGLMConfig"),nHe=o(" (XGLM model)"),sHe=l(),eg=a("li"),moe=a("strong"),lHe=o("xlm"),iHe=o(" \u2014 "),Pk=a("a"),dHe=o("XLMConfig"),cHe=o(" (XLM model)"),fHe=l(),og=a("li"),goe=a("strong"),mHe=o("xlm-prophetnet"),gHe=o(" \u2014 "),Ik=a("a"),hHe=o("XLMProphetNetConfig"),pHe=o(" (XLMProphetNet model)"),uHe=l(),rg=a("li"),hoe=a("strong"),_He=o("xlm-roberta"),bHe=o(" \u2014 "),qk=a("a"),vHe=o("XLMRobertaConfig"),FHe=o(" (XLM-RoBERTa model)"),THe=l(),tg=a("li"),poe=a("strong"),MHe=o("xlm-roberta-xl"),EHe=o(" \u2014 "),Nk=a("a"),CHe=o("XLMRobertaXLConfig"),wHe=o(" (XLM-RoBERTa-XL model)"),AHe=l(),ag=a("li"),uoe=a("strong"),yHe=o("xlnet"),LHe=o(" \u2014 "),jk=a("a"),xHe=o("XLNetConfig"),$He=o(" (XLNet model)"),kHe=l(),ng=a("li"),_oe=a("strong"),SHe=o("yolos"),RHe=o(" \u2014 "),Dk=a("a"),BHe=o("YolosConfig"),PHe=o(" (YOLOS model)"),IHe=l(),sg=a("li"),boe=a("strong"),qHe=o("yoso"),NHe=o(" \u2014 "),Gk=a("a"),jHe=o("YosoConfig"),DHe=o(" (YOSO model)"),GHe=l(),F(lg.$$.fragment),OHe=l(),ig=a("div"),F(Bw.$$.fragment),VHe=l(),voe=a("p"),XHe=o("Register a new configuration for this class."),BBe=l(),mi=a("h2"),dg=a("a"),Foe=a("span"),F(Pw.$$.fragment),zHe=l(),Toe=a("span"),QHe=o("AutoTokenizer"),PBe=l(),wo=a("div"),F(Iw.$$.fragment),WHe=l(),qw=a("p"),HHe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Ok=a("a"),UHe=o("AutoTokenizer.from_pretrained()"),JHe=o(" class method."),YHe=l(),Nw=a("p"),KHe=o("This class cannot be instantiated directly using "),Moe=a("code"),ZHe=o("__init__()"),eUe=o(" (throws an error)."),oUe=l(),Er=a("div"),F(jw.$$.fragment),rUe=l(),Eoe=a("p"),tUe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),aUe=l(),Ta=a("p"),nUe=o("The tokenizer class to instantiate is selected based on the "),Coe=a("code"),sUe=o("model_type"),lUe=o(` property of the config object (either
passed as an argument or loaded from `),woe=a("code"),iUe=o("pretrained_model_name_or_path"),dUe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aoe=a("code"),cUe=o("pretrained_model_name_or_path"),fUe=o(":"),mUe=l(),k=a("ul"),yn=a("li"),yoe=a("strong"),gUe=o("albert"),hUe=o(" \u2014 "),Vk=a("a"),pUe=o("AlbertTokenizer"),uUe=o(" or "),Xk=a("a"),_Ue=o("AlbertTokenizerFast"),bUe=o(" (ALBERT model)"),vUe=l(),Ln=a("li"),Loe=a("strong"),FUe=o("bart"),TUe=o(" \u2014 "),zk=a("a"),MUe=o("BartTokenizer"),EUe=o(" or "),Qk=a("a"),CUe=o("BartTokenizerFast"),wUe=o(" (BART model)"),AUe=l(),xn=a("li"),xoe=a("strong"),yUe=o("barthez"),LUe=o(" \u2014 "),Wk=a("a"),xUe=o("BarthezTokenizer"),$Ue=o(" or "),Hk=a("a"),kUe=o("BarthezTokenizerFast"),SUe=o(" (BARThez model)"),RUe=l(),cg=a("li"),$oe=a("strong"),BUe=o("bartpho"),PUe=o(" \u2014 "),Uk=a("a"),IUe=o("BartphoTokenizer"),qUe=o(" (BARTpho model)"),NUe=l(),$n=a("li"),koe=a("strong"),jUe=o("bert"),DUe=o(" \u2014 "),Jk=a("a"),GUe=o("BertTokenizer"),OUe=o(" or "),Yk=a("a"),VUe=o("BertTokenizerFast"),XUe=o(" (BERT model)"),zUe=l(),fg=a("li"),Soe=a("strong"),QUe=o("bert-generation"),WUe=o(" \u2014 "),Kk=a("a"),HUe=o("BertGenerationTokenizer"),UUe=o(" (Bert Generation model)"),JUe=l(),mg=a("li"),Roe=a("strong"),YUe=o("bert-japanese"),KUe=o(" \u2014 "),Zk=a("a"),ZUe=o("BertJapaneseTokenizer"),eJe=o(" (BertJapanese model)"),oJe=l(),gg=a("li"),Boe=a("strong"),rJe=o("bertweet"),tJe=o(" \u2014 "),eS=a("a"),aJe=o("BertweetTokenizer"),nJe=o(" (Bertweet model)"),sJe=l(),kn=a("li"),Poe=a("strong"),lJe=o("big_bird"),iJe=o(" \u2014 "),oS=a("a"),dJe=o("BigBirdTokenizer"),cJe=o(" or "),rS=a("a"),fJe=o("BigBirdTokenizerFast"),mJe=o(" (BigBird model)"),gJe=l(),Sn=a("li"),Ioe=a("strong"),hJe=o("bigbird_pegasus"),pJe=o(" \u2014 "),tS=a("a"),uJe=o("PegasusTokenizer"),_Je=o(" or "),aS=a("a"),bJe=o("PegasusTokenizerFast"),vJe=o(" (BigBirdPegasus model)"),FJe=l(),Rn=a("li"),qoe=a("strong"),TJe=o("blenderbot"),MJe=o(" \u2014 "),nS=a("a"),EJe=o("BlenderbotTokenizer"),CJe=o(" or "),sS=a("a"),wJe=o("BlenderbotTokenizerFast"),AJe=o(" (Blenderbot model)"),yJe=l(),hg=a("li"),Noe=a("strong"),LJe=o("blenderbot-small"),xJe=o(" \u2014 "),lS=a("a"),$Je=o("BlenderbotSmallTokenizer"),kJe=o(" (BlenderbotSmall model)"),SJe=l(),pg=a("li"),joe=a("strong"),RJe=o("byt5"),BJe=o(" \u2014 "),iS=a("a"),PJe=o("ByT5Tokenizer"),IJe=o(" (ByT5 model)"),qJe=l(),Bn=a("li"),Doe=a("strong"),NJe=o("camembert"),jJe=o(" \u2014 "),dS=a("a"),DJe=o("CamembertTokenizer"),GJe=o(" or "),cS=a("a"),OJe=o("CamembertTokenizerFast"),VJe=o(" (CamemBERT model)"),XJe=l(),ug=a("li"),Goe=a("strong"),zJe=o("canine"),QJe=o(" \u2014 "),fS=a("a"),WJe=o("CanineTokenizer"),HJe=o(" (Canine model)"),UJe=l(),Pn=a("li"),Ooe=a("strong"),JJe=o("clip"),YJe=o(" \u2014 "),mS=a("a"),KJe=o("CLIPTokenizer"),ZJe=o(" or "),gS=a("a"),eYe=o("CLIPTokenizerFast"),oYe=o(" (CLIP model)"),rYe=l(),In=a("li"),Voe=a("strong"),tYe=o("convbert"),aYe=o(" \u2014 "),hS=a("a"),nYe=o("ConvBertTokenizer"),sYe=o(" or "),pS=a("a"),lYe=o("ConvBertTokenizerFast"),iYe=o(" (ConvBERT model)"),dYe=l(),qn=a("li"),Xoe=a("strong"),cYe=o("cpm"),fYe=o(" \u2014 "),uS=a("a"),mYe=o("CpmTokenizer"),gYe=o(" or "),_S=a("a"),hYe=o("CpmTokenizerFast"),pYe=o(" (CPM model)"),uYe=l(),_g=a("li"),zoe=a("strong"),_Ye=o("ctrl"),bYe=o(" \u2014 "),bS=a("a"),vYe=o("CTRLTokenizer"),FYe=o(" (CTRL model)"),TYe=l(),Nn=a("li"),Qoe=a("strong"),MYe=o("data2vec-text"),EYe=o(" \u2014 "),vS=a("a"),CYe=o("RobertaTokenizer"),wYe=o(" or "),FS=a("a"),AYe=o("RobertaTokenizerFast"),yYe=o(" (Data2VecText model)"),LYe=l(),jn=a("li"),Woe=a("strong"),xYe=o("deberta"),$Ye=o(" \u2014 "),TS=a("a"),kYe=o("DebertaTokenizer"),SYe=o(" or "),MS=a("a"),RYe=o("DebertaTokenizerFast"),BYe=o(" (DeBERTa model)"),PYe=l(),Dn=a("li"),Hoe=a("strong"),IYe=o("deberta-v2"),qYe=o(" \u2014 "),ES=a("a"),NYe=o("DebertaV2Tokenizer"),jYe=o(" or "),CS=a("a"),DYe=o("DebertaV2TokenizerFast"),GYe=o(" (DeBERTa-v2 model)"),OYe=l(),Gn=a("li"),Uoe=a("strong"),VYe=o("distilbert"),XYe=o(" \u2014 "),wS=a("a"),zYe=o("DistilBertTokenizer"),QYe=o(" or "),AS=a("a"),WYe=o("DistilBertTokenizerFast"),HYe=o(" (DistilBERT model)"),UYe=l(),On=a("li"),Joe=a("strong"),JYe=o("dpr"),YYe=o(" \u2014 "),yS=a("a"),KYe=o("DPRQuestionEncoderTokenizer"),ZYe=o(" or "),LS=a("a"),eKe=o("DPRQuestionEncoderTokenizerFast"),oKe=o(" (DPR model)"),rKe=l(),Vn=a("li"),Yoe=a("strong"),tKe=o("electra"),aKe=o(" \u2014 "),xS=a("a"),nKe=o("ElectraTokenizer"),sKe=o(" or "),$S=a("a"),lKe=o("ElectraTokenizerFast"),iKe=o(" (ELECTRA model)"),dKe=l(),bg=a("li"),Koe=a("strong"),cKe=o("flaubert"),fKe=o(" \u2014 "),kS=a("a"),mKe=o("FlaubertTokenizer"),gKe=o(" (FlauBERT model)"),hKe=l(),Xn=a("li"),Zoe=a("strong"),pKe=o("fnet"),uKe=o(" \u2014 "),SS=a("a"),_Ke=o("FNetTokenizer"),bKe=o(" or "),RS=a("a"),vKe=o("FNetTokenizerFast"),FKe=o(" (FNet model)"),TKe=l(),vg=a("li"),ere=a("strong"),MKe=o("fsmt"),EKe=o(" \u2014 "),BS=a("a"),CKe=o("FSMTTokenizer"),wKe=o(" (FairSeq Machine-Translation model)"),AKe=l(),zn=a("li"),ore=a("strong"),yKe=o("funnel"),LKe=o(" \u2014 "),PS=a("a"),xKe=o("FunnelTokenizer"),$Ke=o(" or "),IS=a("a"),kKe=o("FunnelTokenizerFast"),SKe=o(" (Funnel Transformer model)"),RKe=l(),Qn=a("li"),rre=a("strong"),BKe=o("gpt2"),PKe=o(" \u2014 "),qS=a("a"),IKe=o("GPT2Tokenizer"),qKe=o(" or "),NS=a("a"),NKe=o("GPT2TokenizerFast"),jKe=o(" (OpenAI GPT-2 model)"),DKe=l(),Wn=a("li"),tre=a("strong"),GKe=o("gpt_neo"),OKe=o(" \u2014 "),jS=a("a"),VKe=o("GPT2Tokenizer"),XKe=o(" or "),DS=a("a"),zKe=o("GPT2TokenizerFast"),QKe=o(" (GPT Neo model)"),WKe=l(),Hn=a("li"),are=a("strong"),HKe=o("gptj"),UKe=o(" \u2014 "),GS=a("a"),JKe=o("GPT2Tokenizer"),YKe=o(" or "),OS=a("a"),KKe=o("GPT2TokenizerFast"),ZKe=o(" (GPT-J model)"),eZe=l(),Un=a("li"),nre=a("strong"),oZe=o("herbert"),rZe=o(" \u2014 "),VS=a("a"),tZe=o("HerbertTokenizer"),aZe=o(" or "),XS=a("a"),nZe=o("HerbertTokenizerFast"),sZe=o(" (HerBERT model)"),lZe=l(),Fg=a("li"),sre=a("strong"),iZe=o("hubert"),dZe=o(" \u2014 "),zS=a("a"),cZe=o("Wav2Vec2CTCTokenizer"),fZe=o(" (Hubert model)"),mZe=l(),Jn=a("li"),lre=a("strong"),gZe=o("ibert"),hZe=o(" \u2014 "),QS=a("a"),pZe=o("RobertaTokenizer"),uZe=o(" or "),WS=a("a"),_Ze=o("RobertaTokenizerFast"),bZe=o(" (I-BERT model)"),vZe=l(),Yn=a("li"),ire=a("strong"),FZe=o("layoutlm"),TZe=o(" \u2014 "),HS=a("a"),MZe=o("LayoutLMTokenizer"),EZe=o(" or "),US=a("a"),CZe=o("LayoutLMTokenizerFast"),wZe=o(" (LayoutLM model)"),AZe=l(),Kn=a("li"),dre=a("strong"),yZe=o("layoutlmv2"),LZe=o(" \u2014 "),JS=a("a"),xZe=o("LayoutLMv2Tokenizer"),$Ze=o(" or "),YS=a("a"),kZe=o("LayoutLMv2TokenizerFast"),SZe=o(" (LayoutLMv2 model)"),RZe=l(),Zn=a("li"),cre=a("strong"),BZe=o("layoutxlm"),PZe=o(" \u2014 "),KS=a("a"),IZe=o("LayoutXLMTokenizer"),qZe=o(" or "),ZS=a("a"),NZe=o("LayoutXLMTokenizerFast"),jZe=o(" (LayoutXLM model)"),DZe=l(),es=a("li"),fre=a("strong"),GZe=o("led"),OZe=o(" \u2014 "),eR=a("a"),VZe=o("LEDTokenizer"),XZe=o(" or "),oR=a("a"),zZe=o("LEDTokenizerFast"),QZe=o(" (LED model)"),WZe=l(),os=a("li"),mre=a("strong"),HZe=o("longformer"),UZe=o(" \u2014 "),rR=a("a"),JZe=o("LongformerTokenizer"),YZe=o(" or "),tR=a("a"),KZe=o("LongformerTokenizerFast"),ZZe=o(" (Longformer model)"),eeo=l(),Tg=a("li"),gre=a("strong"),oeo=o("luke"),reo=o(" \u2014 "),aR=a("a"),teo=o("LukeTokenizer"),aeo=o(" (LUKE model)"),neo=l(),rs=a("li"),hre=a("strong"),seo=o("lxmert"),leo=o(" \u2014 "),nR=a("a"),ieo=o("LxmertTokenizer"),deo=o(" or "),sR=a("a"),ceo=o("LxmertTokenizerFast"),feo=o(" (LXMERT model)"),meo=l(),Mg=a("li"),pre=a("strong"),geo=o("m2m_100"),heo=o(" \u2014 "),lR=a("a"),peo=o("M2M100Tokenizer"),ueo=o(" (M2M100 model)"),_eo=l(),Eg=a("li"),ure=a("strong"),beo=o("marian"),veo=o(" \u2014 "),iR=a("a"),Feo=o("MarianTokenizer"),Teo=o(" (Marian model)"),Meo=l(),ts=a("li"),_re=a("strong"),Eeo=o("mbart"),Ceo=o(" \u2014 "),dR=a("a"),weo=o("MBartTokenizer"),Aeo=o(" or "),cR=a("a"),yeo=o("MBartTokenizerFast"),Leo=o(" (mBART model)"),xeo=l(),as=a("li"),bre=a("strong"),$eo=o("mbart50"),keo=o(" \u2014 "),fR=a("a"),Seo=o("MBart50Tokenizer"),Reo=o(" or "),mR=a("a"),Beo=o("MBart50TokenizerFast"),Peo=o(" (mBART-50 model)"),Ieo=l(),ns=a("li"),vre=a("strong"),qeo=o("megatron-bert"),Neo=o(" \u2014 "),gR=a("a"),jeo=o("BertTokenizer"),Deo=o(" or "),hR=a("a"),Geo=o("BertTokenizerFast"),Oeo=o(" (MegatronBert model)"),Veo=l(),Cg=a("li"),Fre=a("strong"),Xeo=o("mluke"),zeo=o(" \u2014 "),pR=a("a"),Qeo=o("MLukeTokenizer"),Weo=o(" (mLUKE model)"),Heo=l(),ss=a("li"),Tre=a("strong"),Ueo=o("mobilebert"),Jeo=o(" \u2014 "),uR=a("a"),Yeo=o("MobileBertTokenizer"),Keo=o(" or "),_R=a("a"),Zeo=o("MobileBertTokenizerFast"),eoo=o(" (MobileBERT model)"),ooo=l(),ls=a("li"),Mre=a("strong"),roo=o("mpnet"),too=o(" \u2014 "),bR=a("a"),aoo=o("MPNetTokenizer"),noo=o(" or "),vR=a("a"),soo=o("MPNetTokenizerFast"),loo=o(" (MPNet model)"),ioo=l(),is=a("li"),Ere=a("strong"),doo=o("mt5"),coo=o(" \u2014 "),FR=a("a"),foo=o("MT5Tokenizer"),moo=o(" or "),TR=a("a"),goo=o("MT5TokenizerFast"),hoo=o(" (mT5 model)"),poo=l(),ds=a("li"),Cre=a("strong"),uoo=o("nystromformer"),_oo=o(" \u2014 "),MR=a("a"),boo=o("AlbertTokenizer"),voo=o(" or "),ER=a("a"),Foo=o("AlbertTokenizerFast"),Too=o(" (Nystromformer model)"),Moo=l(),cs=a("li"),wre=a("strong"),Eoo=o("ofa"),Coo=o(" \u2014 "),CR=a("a"),woo=o("OFATokenizer"),Aoo=o(" or "),wR=a("a"),yoo=o("OFATokenizerFast"),Loo=o(" (OFA model)"),xoo=l(),fs=a("li"),Are=a("strong"),$oo=o("openai-gpt"),koo=o(" \u2014 "),AR=a("a"),Soo=o("OpenAIGPTTokenizer"),Roo=o(" or "),yR=a("a"),Boo=o("OpenAIGPTTokenizerFast"),Poo=o(" (OpenAI GPT model)"),Ioo=l(),ms=a("li"),yre=a("strong"),qoo=o("pegasus"),Noo=o(" \u2014 "),LR=a("a"),joo=o("PegasusTokenizer"),Doo=o(" or "),xR=a("a"),Goo=o("PegasusTokenizerFast"),Ooo=o(" (Pegasus model)"),Voo=l(),wg=a("li"),Lre=a("strong"),Xoo=o("perceiver"),zoo=o(" \u2014 "),$R=a("a"),Qoo=o("PerceiverTokenizer"),Woo=o(" (Perceiver model)"),Hoo=l(),Ag=a("li"),xre=a("strong"),Uoo=o("phobert"),Joo=o(" \u2014 "),kR=a("a"),Yoo=o("PhobertTokenizer"),Koo=o(" (PhoBERT model)"),Zoo=l(),yg=a("li"),$re=a("strong"),ero=o("plbart"),oro=o(" \u2014 "),SR=a("a"),rro=o("PLBartTokenizer"),tro=o(" (PLBart model)"),aro=l(),Lg=a("li"),kre=a("strong"),nro=o("prophetnet"),sro=o(" \u2014 "),RR=a("a"),lro=o("ProphetNetTokenizer"),iro=o(" (ProphetNet model)"),dro=l(),gs=a("li"),Sre=a("strong"),cro=o("qdqbert"),fro=o(" \u2014 "),BR=a("a"),mro=o("BertTokenizer"),gro=o(" or "),PR=a("a"),hro=o("BertTokenizerFast"),pro=o(" (QDQBert model)"),uro=l(),xg=a("li"),Rre=a("strong"),_ro=o("rag"),bro=o(" \u2014 "),IR=a("a"),vro=o("RagTokenizer"),Fro=o(" (RAG model)"),Tro=l(),hs=a("li"),Bre=a("strong"),Mro=o("realm"),Ero=o(" \u2014 "),qR=a("a"),Cro=o("RealmTokenizer"),wro=o(" or "),NR=a("a"),Aro=o("RealmTokenizerFast"),yro=o(" (Realm model)"),Lro=l(),ps=a("li"),Pre=a("strong"),xro=o("reformer"),$ro=o(" \u2014 "),jR=a("a"),kro=o("ReformerTokenizer"),Sro=o(" or "),DR=a("a"),Rro=o("ReformerTokenizerFast"),Bro=o(" (Reformer model)"),Pro=l(),us=a("li"),Ire=a("strong"),Iro=o("rembert"),qro=o(" \u2014 "),GR=a("a"),Nro=o("RemBertTokenizer"),jro=o(" or "),OR=a("a"),Dro=o("RemBertTokenizerFast"),Gro=o(" (RemBERT model)"),Oro=l(),_s=a("li"),qre=a("strong"),Vro=o("retribert"),Xro=o(" \u2014 "),VR=a("a"),zro=o("RetriBertTokenizer"),Qro=o(" or "),XR=a("a"),Wro=o("RetriBertTokenizerFast"),Hro=o(" (RetriBERT model)"),Uro=l(),bs=a("li"),Nre=a("strong"),Jro=o("roberta"),Yro=o(" \u2014 "),zR=a("a"),Kro=o("RobertaTokenizer"),Zro=o(" or "),QR=a("a"),eto=o("RobertaTokenizerFast"),oto=o(" (RoBERTa model)"),rto=l(),vs=a("li"),jre=a("strong"),tto=o("roformer"),ato=o(" \u2014 "),WR=a("a"),nto=o("RoFormerTokenizer"),sto=o(" or "),HR=a("a"),lto=o("RoFormerTokenizerFast"),ito=o(" (RoFormer model)"),dto=l(),$g=a("li"),Dre=a("strong"),cto=o("speech_to_text"),fto=o(" \u2014 "),UR=a("a"),mto=o("Speech2TextTokenizer"),gto=o(" (Speech2Text model)"),hto=l(),kg=a("li"),Gre=a("strong"),pto=o("speech_to_text_2"),uto=o(" \u2014 "),JR=a("a"),_to=o("Speech2Text2Tokenizer"),bto=o(" (Speech2Text2 model)"),vto=l(),Fs=a("li"),Ore=a("strong"),Fto=o("splinter"),Tto=o(" \u2014 "),YR=a("a"),Mto=o("SplinterTokenizer"),Eto=o(" or "),KR=a("a"),Cto=o("SplinterTokenizerFast"),wto=o(" (Splinter model)"),Ato=l(),Ts=a("li"),Vre=a("strong"),yto=o("squeezebert"),Lto=o(" \u2014 "),ZR=a("a"),xto=o("SqueezeBertTokenizer"),$to=o(" or "),eB=a("a"),kto=o("SqueezeBertTokenizerFast"),Sto=o(" (SqueezeBERT model)"),Rto=l(),Ms=a("li"),Xre=a("strong"),Bto=o("t5"),Pto=o(" \u2014 "),oB=a("a"),Ito=o("T5Tokenizer"),qto=o(" or "),rB=a("a"),Nto=o("T5TokenizerFast"),jto=o(" (T5 model)"),Dto=l(),Sg=a("li"),zre=a("strong"),Gto=o("tapas"),Oto=o(" \u2014 "),tB=a("a"),Vto=o("TapasTokenizer"),Xto=o(" (TAPAS model)"),zto=l(),Rg=a("li"),Qre=a("strong"),Qto=o("tapex"),Wto=o(" \u2014 "),aB=a("a"),Hto=o("TapexTokenizer"),Uto=o(" (TAPEX model)"),Jto=l(),Bg=a("li"),Wre=a("strong"),Yto=o("transfo-xl"),Kto=o(" \u2014 "),nB=a("a"),Zto=o("TransfoXLTokenizer"),eao=o(" (Transformer-XL model)"),oao=l(),Es=a("li"),Hre=a("strong"),rao=o("visual_bert"),tao=o(" \u2014 "),sB=a("a"),aao=o("BertTokenizer"),nao=o(" or "),lB=a("a"),sao=o("BertTokenizerFast"),lao=o(" (VisualBert model)"),iao=l(),Pg=a("li"),Ure=a("strong"),dao=o("wav2vec2"),cao=o(" \u2014 "),iB=a("a"),fao=o("Wav2Vec2CTCTokenizer"),mao=o(" (Wav2Vec2 model)"),gao=l(),Ig=a("li"),Jre=a("strong"),hao=o("wav2vec2_phoneme"),pao=o(" \u2014 "),dB=a("a"),uao=o("Wav2Vec2PhonemeCTCTokenizer"),_ao=o(" (Wav2Vec2Phoneme model)"),bao=l(),Cs=a("li"),Yre=a("strong"),vao=o("xglm"),Fao=o(" \u2014 "),cB=a("a"),Tao=o("XGLMTokenizer"),Mao=o(" or "),fB=a("a"),Eao=o("XGLMTokenizerFast"),Cao=o(" (XGLM model)"),wao=l(),qg=a("li"),Kre=a("strong"),Aao=o("xlm"),yao=o(" \u2014 "),mB=a("a"),Lao=o("XLMTokenizer"),xao=o(" (XLM model)"),$ao=l(),Ng=a("li"),Zre=a("strong"),kao=o("xlm-prophetnet"),Sao=o(" \u2014 "),gB=a("a"),Rao=o("XLMProphetNetTokenizer"),Bao=o(" (XLMProphetNet model)"),Pao=l(),ws=a("li"),ete=a("strong"),Iao=o("xlm-roberta"),qao=o(" \u2014 "),hB=a("a"),Nao=o("XLMRobertaTokenizer"),jao=o(" or "),pB=a("a"),Dao=o("XLMRobertaTokenizerFast"),Gao=o(" (XLM-RoBERTa model)"),Oao=l(),As=a("li"),ote=a("strong"),Vao=o("xlm-roberta-xl"),Xao=o(" \u2014 "),uB=a("a"),zao=o("RobertaTokenizer"),Qao=o(" or "),_B=a("a"),Wao=o("RobertaTokenizerFast"),Hao=o(" (XLM-RoBERTa-XL model)"),Uao=l(),ys=a("li"),rte=a("strong"),Jao=o("xlnet"),Yao=o(" \u2014 "),bB=a("a"),Kao=o("XLNetTokenizer"),Zao=o(" or "),vB=a("a"),eno=o("XLNetTokenizerFast"),ono=o(" (XLNet model)"),rno=l(),Ls=a("li"),tte=a("strong"),tno=o("yoso"),ano=o(" \u2014 "),FB=a("a"),nno=o("AlbertTokenizer"),sno=o(" or "),TB=a("a"),lno=o("AlbertTokenizerFast"),ino=o(" (YOSO model)"),dno=l(),F(jg.$$.fragment),cno=l(),Dg=a("div"),F(Dw.$$.fragment),fno=l(),ate=a("p"),mno=o("Register a new tokenizer in this mapping."),IBe=l(),gi=a("h2"),Gg=a("a"),nte=a("span"),F(Gw.$$.fragment),gno=l(),ste=a("span"),hno=o("AutoFeatureExtractor"),qBe=l(),Ao=a("div"),F(Ow.$$.fragment),pno=l(),Vw=a("p"),uno=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),MB=a("a"),_no=o("AutoFeatureExtractor.from_pretrained()"),bno=o(" class method."),vno=l(),Xw=a("p"),Fno=o("This class cannot be instantiated directly using "),lte=a("code"),Tno=o("__init__()"),Mno=o(" (throws an error)."),Eno=l(),Qe=a("div"),F(zw.$$.fragment),Cno=l(),ite=a("p"),wno=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Ano=l(),Ma=a("p"),yno=o("The feature extractor class to instantiate is selected based on the "),dte=a("code"),Lno=o("model_type"),xno=o(` property of the config object
(either passed as an argument or loaded from `),cte=a("code"),$no=o("pretrained_model_name_or_path"),kno=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),fte=a("code"),Sno=o("pretrained_model_name_or_path"),Rno=o(":"),Bno=l(),te=a("ul"),Og=a("li"),mte=a("strong"),Pno=o("beit"),Ino=o(" \u2014 "),EB=a("a"),qno=o("BeitFeatureExtractor"),Nno=o(" (BEiT model)"),jno=l(),Vg=a("li"),gte=a("strong"),Dno=o("clip"),Gno=o(" \u2014 "),CB=a("a"),Ono=o("CLIPFeatureExtractor"),Vno=o(" (CLIP model)"),Xno=l(),Xg=a("li"),hte=a("strong"),zno=o("convnext"),Qno=o(" \u2014 "),wB=a("a"),Wno=o("ConvNextFeatureExtractor"),Hno=o(" (ConvNext model)"),Uno=l(),zg=a("li"),pte=a("strong"),Jno=o("data2vec-audio"),Yno=o(" \u2014 "),AB=a("a"),Kno=o("Wav2Vec2FeatureExtractor"),Zno=o(" (Data2VecAudio model)"),eso=l(),Qg=a("li"),ute=a("strong"),oso=o("data2vec-vision"),rso=o(" \u2014 "),yB=a("a"),tso=o("BeitFeatureExtractor"),aso=o(" (Data2VecVision model)"),nso=l(),Wg=a("li"),_te=a("strong"),sso=o("deit"),lso=o(" \u2014 "),LB=a("a"),iso=o("DeiTFeatureExtractor"),dso=o(" (DeiT model)"),cso=l(),Hg=a("li"),bte=a("strong"),fso=o("detr"),mso=o(" \u2014 "),xB=a("a"),gso=o("DetrFeatureExtractor"),hso=o(" (DETR model)"),pso=l(),Ug=a("li"),vte=a("strong"),uso=o("dpt"),_so=o(" \u2014 "),$B=a("a"),bso=o("DPTFeatureExtractor"),vso=o(" (DPT model)"),Fso=l(),Jg=a("li"),Fte=a("strong"),Tso=o("glpn"),Mso=o(" \u2014 "),kB=a("a"),Eso=o("GLPNFeatureExtractor"),Cso=o(" (GLPN model)"),wso=l(),Yg=a("li"),Tte=a("strong"),Aso=o("hubert"),yso=o(" \u2014 "),SB=a("a"),Lso=o("Wav2Vec2FeatureExtractor"),xso=o(" (Hubert model)"),$so=l(),Kg=a("li"),Mte=a("strong"),kso=o("layoutlmv2"),Sso=o(" \u2014 "),RB=a("a"),Rso=o("LayoutLMv2FeatureExtractor"),Bso=o(" (LayoutLMv2 model)"),Pso=l(),Zg=a("li"),Ete=a("strong"),Iso=o("maskformer"),qso=o(" \u2014 "),BB=a("a"),Nso=o("MaskFormerFeatureExtractor"),jso=o(" (MaskFormer model)"),Dso=l(),eh=a("li"),Cte=a("strong"),Gso=o("perceiver"),Oso=o(" \u2014 "),PB=a("a"),Vso=o("PerceiverFeatureExtractor"),Xso=o(" (Perceiver model)"),zso=l(),oh=a("li"),wte=a("strong"),Qso=o("poolformer"),Wso=o(" \u2014 "),IB=a("a"),Hso=o("PoolFormerFeatureExtractor"),Uso=o(" (PoolFormer model)"),Jso=l(),rh=a("li"),Ate=a("strong"),Yso=o("regnet"),Kso=o(" \u2014 "),qB=a("a"),Zso=o("ConvNextFeatureExtractor"),elo=o(" (RegNet model)"),olo=l(),th=a("li"),yte=a("strong"),rlo=o("resnet"),tlo=o(" \u2014 "),NB=a("a"),alo=o("ConvNextFeatureExtractor"),nlo=o(" (ResNet model)"),slo=l(),ah=a("li"),Lte=a("strong"),llo=o("segformer"),ilo=o(" \u2014 "),jB=a("a"),dlo=o("SegformerFeatureExtractor"),clo=o(" (SegFormer model)"),flo=l(),nh=a("li"),xte=a("strong"),mlo=o("speech_to_text"),glo=o(" \u2014 "),DB=a("a"),hlo=o("Speech2TextFeatureExtractor"),plo=o(" (Speech2Text model)"),ulo=l(),sh=a("li"),$te=a("strong"),_lo=o("swin"),blo=o(" \u2014 "),GB=a("a"),vlo=o("ViTFeatureExtractor"),Flo=o(" (Swin model)"),Tlo=l(),lh=a("li"),kte=a("strong"),Mlo=o("van"),Elo=o(" \u2014 "),OB=a("a"),Clo=o("ConvNextFeatureExtractor"),wlo=o(" (VAN model)"),Alo=l(),ih=a("li"),Ste=a("strong"),ylo=o("vit"),Llo=o(" \u2014 "),VB=a("a"),xlo=o("ViTFeatureExtractor"),$lo=o(" (ViT model)"),klo=l(),dh=a("li"),Rte=a("strong"),Slo=o("vit_mae"),Rlo=o(" \u2014 "),XB=a("a"),Blo=o("ViTFeatureExtractor"),Plo=o(" (ViTMAE model)"),Ilo=l(),ch=a("li"),Bte=a("strong"),qlo=o("wav2vec2"),Nlo=o(" \u2014 "),zB=a("a"),jlo=o("Wav2Vec2FeatureExtractor"),Dlo=o(" (Wav2Vec2 model)"),Glo=l(),fh=a("li"),Pte=a("strong"),Olo=o("yolos"),Vlo=o(" \u2014 "),QB=a("a"),Xlo=o("YolosFeatureExtractor"),zlo=o(" (YOLOS model)"),Qlo=l(),F(mh.$$.fragment),Wlo=l(),F(gh.$$.fragment),Hlo=l(),hh=a("div"),F(Qw.$$.fragment),Ulo=l(),Ite=a("p"),Jlo=o("Register a new feature extractor for this class."),NBe=l(),hi=a("h2"),ph=a("a"),qte=a("span"),F(Ww.$$.fragment),Ylo=l(),Nte=a("span"),Klo=o("AutoProcessor"),jBe=l(),yo=a("div"),F(Hw.$$.fragment),Zlo=l(),Uw=a("p"),eio=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),WB=a("a"),oio=o("AutoProcessor.from_pretrained()"),rio=o(" class method."),tio=l(),Jw=a("p"),aio=o("This class cannot be instantiated directly using "),jte=a("code"),nio=o("__init__()"),sio=o(" (throws an error)."),lio=l(),We=a("div"),F(Yw.$$.fragment),iio=l(),Dte=a("p"),dio=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),cio=l(),pi=a("p"),fio=o("The processor class to instantiate is selected based on the "),Gte=a("code"),mio=o("model_type"),gio=o(` property of the config object (either
passed as an argument or loaded from `),Ote=a("code"),hio=o("pretrained_model_name_or_path"),pio=o(" if possible):"),uio=l(),be=a("ul"),uh=a("li"),Vte=a("strong"),_io=o("clip"),bio=o(" \u2014 "),HB=a("a"),vio=o("CLIPProcessor"),Fio=o(" (CLIP model)"),Tio=l(),_h=a("li"),Xte=a("strong"),Mio=o("layoutlmv2"),Eio=o(" \u2014 "),UB=a("a"),Cio=o("LayoutLMv2Processor"),wio=o(" (LayoutLMv2 model)"),Aio=l(),bh=a("li"),zte=a("strong"),yio=o("layoutxlm"),Lio=o(" \u2014 "),JB=a("a"),xio=o("LayoutXLMProcessor"),$io=o(" (LayoutXLM model)"),kio=l(),vh=a("li"),Qte=a("strong"),Sio=o("sew"),Rio=o(" \u2014 "),YB=a("a"),Bio=o("Wav2Vec2Processor"),Pio=o(" (SEW model)"),Iio=l(),Fh=a("li"),Wte=a("strong"),qio=o("sew-d"),Nio=o(" \u2014 "),KB=a("a"),jio=o("Wav2Vec2Processor"),Dio=o(" (SEW-D model)"),Gio=l(),Th=a("li"),Hte=a("strong"),Oio=o("speech_to_text"),Vio=o(" \u2014 "),ZB=a("a"),Xio=o("Speech2TextProcessor"),zio=o(" (Speech2Text model)"),Qio=l(),Mh=a("li"),Ute=a("strong"),Wio=o("speech_to_text_2"),Hio=o(" \u2014 "),eP=a("a"),Uio=o("Speech2Text2Processor"),Jio=o(" (Speech2Text2 model)"),Yio=l(),Eh=a("li"),Jte=a("strong"),Kio=o("trocr"),Zio=o(" \u2014 "),oP=a("a"),edo=o("TrOCRProcessor"),odo=o(" (TrOCR model)"),rdo=l(),Ch=a("li"),Yte=a("strong"),tdo=o("unispeech"),ado=o(" \u2014 "),rP=a("a"),ndo=o("Wav2Vec2Processor"),sdo=o(" (UniSpeech model)"),ldo=l(),wh=a("li"),Kte=a("strong"),ido=o("unispeech-sat"),ddo=o(" \u2014 "),tP=a("a"),cdo=o("Wav2Vec2Processor"),fdo=o(" (UniSpeechSat model)"),mdo=l(),Ah=a("li"),Zte=a("strong"),gdo=o("vilt"),hdo=o(" \u2014 "),aP=a("a"),pdo=o("ViltProcessor"),udo=o(" (ViLT model)"),_do=l(),yh=a("li"),eae=a("strong"),bdo=o("vision-text-dual-encoder"),vdo=o(" \u2014 "),nP=a("a"),Fdo=o("VisionTextDualEncoderProcessor"),Tdo=o(" (VisionTextDualEncoder model)"),Mdo=l(),Lh=a("li"),oae=a("strong"),Edo=o("wav2vec2"),Cdo=o(" \u2014 "),sP=a("a"),wdo=o("Wav2Vec2Processor"),Ado=o(" (Wav2Vec2 model)"),ydo=l(),xh=a("li"),rae=a("strong"),Ldo=o("wavlm"),xdo=o(" \u2014 "),lP=a("a"),$do=o("Wav2Vec2Processor"),kdo=o(" (WavLM model)"),Sdo=l(),F($h.$$.fragment),Rdo=l(),F(kh.$$.fragment),Bdo=l(),Sh=a("div"),F(Kw.$$.fragment),Pdo=l(),tae=a("p"),Ido=o("Register a new processor for this class."),DBe=l(),ui=a("h2"),Rh=a("a"),aae=a("span"),F(Zw.$$.fragment),qdo=l(),nae=a("span"),Ndo=o("AutoModel"),GBe=l(),Lo=a("div"),F(eA.$$.fragment),jdo=l(),_i=a("p"),Ddo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iP=a("a"),Gdo=o("from_pretrained()"),Odo=o(" class method or the "),dP=a("a"),Vdo=o("from_config()"),Xdo=o(` class
method.`),zdo=l(),oA=a("p"),Qdo=o("This class cannot be instantiated directly using "),sae=a("code"),Wdo=o("__init__()"),Hdo=o(" (throws an error)."),Udo=l(),Zr=a("div"),F(rA.$$.fragment),Jdo=l(),lae=a("p"),Ydo=o("Instantiates one of the base model classes of the library from a configuration."),Kdo=l(),bi=a("p"),Zdo=o(`Note:
Loading a model from its configuration file does `),iae=a("strong"),eco=o("not"),oco=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cP=a("a"),rco=o("from_pretrained()"),tco=o(" to load the model weights."),aco=l(),F(Bh.$$.fragment),nco=l(),He=a("div"),F(tA.$$.fragment),sco=l(),dae=a("p"),lco=o("Instantiate one of the base model classes of the library from a pretrained model."),ico=l(),Ea=a("p"),dco=o("The model class to instantiate is selected based on the "),cae=a("code"),cco=o("model_type"),fco=o(` property of the config object (either
passed as an argument or loaded from `),fae=a("code"),mco=o("pretrained_model_name_or_path"),gco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mae=a("code"),hco=o("pretrained_model_name_or_path"),pco=o(":"),uco=l(),x=a("ul"),Ph=a("li"),gae=a("strong"),_co=o("albert"),bco=o(" \u2014 "),fP=a("a"),vco=o("AlbertModel"),Fco=o(" (ALBERT model)"),Tco=l(),Ih=a("li"),hae=a("strong"),Mco=o("bart"),Eco=o(" \u2014 "),mP=a("a"),Cco=o("BartModel"),wco=o(" (BART model)"),Aco=l(),qh=a("li"),pae=a("strong"),yco=o("beit"),Lco=o(" \u2014 "),gP=a("a"),xco=o("BeitModel"),$co=o(" (BEiT model)"),kco=l(),Nh=a("li"),uae=a("strong"),Sco=o("bert"),Rco=o(" \u2014 "),hP=a("a"),Bco=o("BertModel"),Pco=o(" (BERT model)"),Ico=l(),jh=a("li"),_ae=a("strong"),qco=o("bert-generation"),Nco=o(" \u2014 "),pP=a("a"),jco=o("BertGenerationEncoder"),Dco=o(" (Bert Generation model)"),Gco=l(),Dh=a("li"),bae=a("strong"),Oco=o("big_bird"),Vco=o(" \u2014 "),uP=a("a"),Xco=o("BigBirdModel"),zco=o(" (BigBird model)"),Qco=l(),Gh=a("li"),vae=a("strong"),Wco=o("bigbird_pegasus"),Hco=o(" \u2014 "),_P=a("a"),Uco=o("BigBirdPegasusModel"),Jco=o(" (BigBirdPegasus model)"),Yco=l(),Oh=a("li"),Fae=a("strong"),Kco=o("blenderbot"),Zco=o(" \u2014 "),bP=a("a"),efo=o("BlenderbotModel"),ofo=o(" (Blenderbot model)"),rfo=l(),Vh=a("li"),Tae=a("strong"),tfo=o("blenderbot-small"),afo=o(" \u2014 "),vP=a("a"),nfo=o("BlenderbotSmallModel"),sfo=o(" (BlenderbotSmall model)"),lfo=l(),Xh=a("li"),Mae=a("strong"),ifo=o("camembert"),dfo=o(" \u2014 "),FP=a("a"),cfo=o("CamembertModel"),ffo=o(" (CamemBERT model)"),mfo=l(),zh=a("li"),Eae=a("strong"),gfo=o("canine"),hfo=o(" \u2014 "),TP=a("a"),pfo=o("CanineModel"),ufo=o(" (Canine model)"),_fo=l(),Qh=a("li"),Cae=a("strong"),bfo=o("clip"),vfo=o(" \u2014 "),MP=a("a"),Ffo=o("CLIPModel"),Tfo=o(" (CLIP model)"),Mfo=l(),Wh=a("li"),wae=a("strong"),Efo=o("convbert"),Cfo=o(" \u2014 "),EP=a("a"),wfo=o("ConvBertModel"),Afo=o(" (ConvBERT model)"),yfo=l(),Hh=a("li"),Aae=a("strong"),Lfo=o("convnext"),xfo=o(" \u2014 "),CP=a("a"),$fo=o("ConvNextModel"),kfo=o(" (ConvNext model)"),Sfo=l(),Uh=a("li"),yae=a("strong"),Rfo=o("ctrl"),Bfo=o(" \u2014 "),wP=a("a"),Pfo=o("CTRLModel"),Ifo=o(" (CTRL model)"),qfo=l(),Jh=a("li"),Lae=a("strong"),Nfo=o("data2vec-audio"),jfo=o(" \u2014 "),AP=a("a"),Dfo=o("Data2VecAudioModel"),Gfo=o(" (Data2VecAudio model)"),Ofo=l(),Yh=a("li"),xae=a("strong"),Vfo=o("data2vec-text"),Xfo=o(" \u2014 "),yP=a("a"),zfo=o("Data2VecTextModel"),Qfo=o(" (Data2VecText model)"),Wfo=l(),Kh=a("li"),$ae=a("strong"),Hfo=o("data2vec-vision"),Ufo=o(" \u2014 "),LP=a("a"),Jfo=o("Data2VecVisionModel"),Yfo=o(" (Data2VecVision model)"),Kfo=l(),Zh=a("li"),kae=a("strong"),Zfo=o("deberta"),emo=o(" \u2014 "),xP=a("a"),omo=o("DebertaModel"),rmo=o(" (DeBERTa model)"),tmo=l(),ep=a("li"),Sae=a("strong"),amo=o("deberta-v2"),nmo=o(" \u2014 "),$P=a("a"),smo=o("DebertaV2Model"),lmo=o(" (DeBERTa-v2 model)"),imo=l(),op=a("li"),Rae=a("strong"),dmo=o("decision_transformer"),cmo=o(" \u2014 "),kP=a("a"),fmo=o("DecisionTransformerModel"),mmo=o(" (Decision Transformer model)"),gmo=l(),rp=a("li"),Bae=a("strong"),hmo=o("deit"),pmo=o(" \u2014 "),SP=a("a"),umo=o("DeiTModel"),_mo=o(" (DeiT model)"),bmo=l(),tp=a("li"),Pae=a("strong"),vmo=o("detr"),Fmo=o(" \u2014 "),RP=a("a"),Tmo=o("DetrModel"),Mmo=o(" (DETR model)"),Emo=l(),ap=a("li"),Iae=a("strong"),Cmo=o("distilbert"),wmo=o(" \u2014 "),BP=a("a"),Amo=o("DistilBertModel"),ymo=o(" (DistilBERT model)"),Lmo=l(),np=a("li"),qae=a("strong"),xmo=o("dpr"),$mo=o(" \u2014 "),PP=a("a"),kmo=o("DPRQuestionEncoder"),Smo=o(" (DPR model)"),Rmo=l(),sp=a("li"),Nae=a("strong"),Bmo=o("dpt"),Pmo=o(" \u2014 "),IP=a("a"),Imo=o("DPTModel"),qmo=o(" (DPT model)"),Nmo=l(),lp=a("li"),jae=a("strong"),jmo=o("electra"),Dmo=o(" \u2014 "),qP=a("a"),Gmo=o("ElectraModel"),Omo=o(" (ELECTRA model)"),Vmo=l(),ip=a("li"),Dae=a("strong"),Xmo=o("flaubert"),zmo=o(" \u2014 "),NP=a("a"),Qmo=o("FlaubertModel"),Wmo=o(" (FlauBERT model)"),Hmo=l(),dp=a("li"),Gae=a("strong"),Umo=o("fnet"),Jmo=o(" \u2014 "),jP=a("a"),Ymo=o("FNetModel"),Kmo=o(" (FNet model)"),Zmo=l(),cp=a("li"),Oae=a("strong"),ego=o("fsmt"),ogo=o(" \u2014 "),DP=a("a"),rgo=o("FSMTModel"),tgo=o(" (FairSeq Machine-Translation model)"),ago=l(),xs=a("li"),Vae=a("strong"),ngo=o("funnel"),sgo=o(" \u2014 "),GP=a("a"),lgo=o("FunnelModel"),igo=o(" or "),OP=a("a"),dgo=o("FunnelBaseModel"),cgo=o(" (Funnel Transformer model)"),fgo=l(),fp=a("li"),Xae=a("strong"),mgo=o("glpn"),ggo=o(" \u2014 "),VP=a("a"),hgo=o("GLPNModel"),pgo=o(" (GLPN model)"),ugo=l(),mp=a("li"),zae=a("strong"),_go=o("gpt2"),bgo=o(" \u2014 "),XP=a("a"),vgo=o("GPT2Model"),Fgo=o(" (OpenAI GPT-2 model)"),Tgo=l(),gp=a("li"),Qae=a("strong"),Mgo=o("gpt_neo"),Ego=o(" \u2014 "),zP=a("a"),Cgo=o("GPTNeoModel"),wgo=o(" (GPT Neo model)"),Ago=l(),hp=a("li"),Wae=a("strong"),ygo=o("gptj"),Lgo=o(" \u2014 "),QP=a("a"),xgo=o("GPTJModel"),$go=o(" (GPT-J model)"),kgo=l(),pp=a("li"),Hae=a("strong"),Sgo=o("hubert"),Rgo=o(" \u2014 "),WP=a("a"),Bgo=o("HubertModel"),Pgo=o(" (Hubert model)"),Igo=l(),up=a("li"),Uae=a("strong"),qgo=o("ibert"),Ngo=o(" \u2014 "),HP=a("a"),jgo=o("IBertModel"),Dgo=o(" (I-BERT model)"),Ggo=l(),_p=a("li"),Jae=a("strong"),Ogo=o("imagegpt"),Vgo=o(" \u2014 "),UP=a("a"),Xgo=o("ImageGPTModel"),zgo=o(" (ImageGPT model)"),Qgo=l(),bp=a("li"),Yae=a("strong"),Wgo=o("layoutlm"),Hgo=o(" \u2014 "),JP=a("a"),Ugo=o("LayoutLMModel"),Jgo=o(" (LayoutLM model)"),Ygo=l(),vp=a("li"),Kae=a("strong"),Kgo=o("layoutlmv2"),Zgo=o(" \u2014 "),YP=a("a"),eho=o("LayoutLMv2Model"),oho=o(" (LayoutLMv2 model)"),rho=l(),Fp=a("li"),Zae=a("strong"),tho=o("led"),aho=o(" \u2014 "),KP=a("a"),nho=o("LEDModel"),sho=o(" (LED model)"),lho=l(),Tp=a("li"),ene=a("strong"),iho=o("longformer"),dho=o(" \u2014 "),ZP=a("a"),cho=o("LongformerModel"),fho=o(" (Longformer model)"),mho=l(),Mp=a("li"),one=a("strong"),gho=o("luke"),hho=o(" \u2014 "),eI=a("a"),pho=o("LukeModel"),uho=o(" (LUKE model)"),_ho=l(),Ep=a("li"),rne=a("strong"),bho=o("lxmert"),vho=o(" \u2014 "),oI=a("a"),Fho=o("LxmertModel"),Tho=o(" (LXMERT model)"),Mho=l(),Cp=a("li"),tne=a("strong"),Eho=o("m2m_100"),Cho=o(" \u2014 "),rI=a("a"),who=o("M2M100Model"),Aho=o(" (M2M100 model)"),yho=l(),wp=a("li"),ane=a("strong"),Lho=o("marian"),xho=o(" \u2014 "),tI=a("a"),$ho=o("MarianModel"),kho=o(" (Marian model)"),Sho=l(),Ap=a("li"),nne=a("strong"),Rho=o("maskformer"),Bho=o(" \u2014 "),aI=a("a"),Pho=o("MaskFormerModel"),Iho=o(" (MaskFormer model)"),qho=l(),yp=a("li"),sne=a("strong"),Nho=o("mbart"),jho=o(" \u2014 "),nI=a("a"),Dho=o("MBartModel"),Gho=o(" (mBART model)"),Oho=l(),Lp=a("li"),lne=a("strong"),Vho=o("megatron-bert"),Xho=o(" \u2014 "),sI=a("a"),zho=o("MegatronBertModel"),Qho=o(" (MegatronBert model)"),Who=l(),xp=a("li"),ine=a("strong"),Hho=o("mobilebert"),Uho=o(" \u2014 "),lI=a("a"),Jho=o("MobileBertModel"),Yho=o(" (MobileBERT model)"),Kho=l(),$p=a("li"),dne=a("strong"),Zho=o("mpnet"),epo=o(" \u2014 "),iI=a("a"),opo=o("MPNetModel"),rpo=o(" (MPNet model)"),tpo=l(),kp=a("li"),cne=a("strong"),apo=o("mt5"),npo=o(" \u2014 "),dI=a("a"),spo=o("MT5Model"),lpo=o(" (mT5 model)"),ipo=l(),Sp=a("li"),fne=a("strong"),dpo=o("nystromformer"),cpo=o(" \u2014 "),cI=a("a"),fpo=o("NystromformerModel"),mpo=o(" (Nystromformer model)"),gpo=l(),Rp=a("li"),mne=a("strong"),hpo=o("ofa"),ppo=o(" \u2014 "),fI=a("a"),upo=o("OFAModel"),_po=o(" (OFA model)"),bpo=l(),Bp=a("li"),gne=a("strong"),vpo=o("openai-gpt"),Fpo=o(" \u2014 "),mI=a("a"),Tpo=o("OpenAIGPTModel"),Mpo=o(" (OpenAI GPT model)"),Epo=l(),Pp=a("li"),hne=a("strong"),Cpo=o("pegasus"),wpo=o(" \u2014 "),gI=a("a"),Apo=o("PegasusModel"),ypo=o(" (Pegasus model)"),Lpo=l(),Ip=a("li"),pne=a("strong"),xpo=o("perceiver"),$po=o(" \u2014 "),hI=a("a"),kpo=o("PerceiverModel"),Spo=o(" (Perceiver model)"),Rpo=l(),qp=a("li"),une=a("strong"),Bpo=o("plbart"),Ppo=o(" \u2014 "),pI=a("a"),Ipo=o("PLBartModel"),qpo=o(" (PLBart model)"),Npo=l(),Np=a("li"),_ne=a("strong"),jpo=o("poolformer"),Dpo=o(" \u2014 "),uI=a("a"),Gpo=o("PoolFormerModel"),Opo=o(" (PoolFormer model)"),Vpo=l(),jp=a("li"),bne=a("strong"),Xpo=o("prophetnet"),zpo=o(" \u2014 "),_I=a("a"),Qpo=o("ProphetNetModel"),Wpo=o(" (ProphetNet model)"),Hpo=l(),Dp=a("li"),vne=a("strong"),Upo=o("qdqbert"),Jpo=o(" \u2014 "),bI=a("a"),Ypo=o("QDQBertModel"),Kpo=o(" (QDQBert model)"),Zpo=l(),Gp=a("li"),Fne=a("strong"),euo=o("reformer"),ouo=o(" \u2014 "),vI=a("a"),ruo=o("ReformerModel"),tuo=o(" (Reformer model)"),auo=l(),Op=a("li"),Tne=a("strong"),nuo=o("regnet"),suo=o(" \u2014 "),FI=a("a"),luo=o("RegNetModel"),iuo=o(" (RegNet model)"),duo=l(),Vp=a("li"),Mne=a("strong"),cuo=o("rembert"),fuo=o(" \u2014 "),TI=a("a"),muo=o("RemBertModel"),guo=o(" (RemBERT model)"),huo=l(),Xp=a("li"),Ene=a("strong"),puo=o("resnet"),uuo=o(" \u2014 "),MI=a("a"),_uo=o("ResNetModel"),buo=o(" (ResNet model)"),vuo=l(),zp=a("li"),Cne=a("strong"),Fuo=o("retribert"),Tuo=o(" \u2014 "),EI=a("a"),Muo=o("RetriBertModel"),Euo=o(" (RetriBERT model)"),Cuo=l(),Qp=a("li"),wne=a("strong"),wuo=o("roberta"),Auo=o(" \u2014 "),CI=a("a"),yuo=o("RobertaModel"),Luo=o(" (RoBERTa model)"),xuo=l(),Wp=a("li"),Ane=a("strong"),$uo=o("roformer"),kuo=o(" \u2014 "),wI=a("a"),Suo=o("RoFormerModel"),Ruo=o(" (RoFormer model)"),Buo=l(),Hp=a("li"),yne=a("strong"),Puo=o("segformer"),Iuo=o(" \u2014 "),AI=a("a"),quo=o("SegformerModel"),Nuo=o(" (SegFormer model)"),juo=l(),Up=a("li"),Lne=a("strong"),Duo=o("sew"),Guo=o(" \u2014 "),yI=a("a"),Ouo=o("SEWModel"),Vuo=o(" (SEW model)"),Xuo=l(),Jp=a("li"),xne=a("strong"),zuo=o("sew-d"),Quo=o(" \u2014 "),LI=a("a"),Wuo=o("SEWDModel"),Huo=o(" (SEW-D model)"),Uuo=l(),Yp=a("li"),$ne=a("strong"),Juo=o("speech_to_text"),Yuo=o(" \u2014 "),xI=a("a"),Kuo=o("Speech2TextModel"),Zuo=o(" (Speech2Text model)"),e_o=l(),Kp=a("li"),kne=a("strong"),o_o=o("splinter"),r_o=o(" \u2014 "),$I=a("a"),t_o=o("SplinterModel"),a_o=o(" (Splinter model)"),n_o=l(),Zp=a("li"),Sne=a("strong"),s_o=o("squeezebert"),l_o=o(" \u2014 "),kI=a("a"),i_o=o("SqueezeBertModel"),d_o=o(" (SqueezeBERT model)"),c_o=l(),eu=a("li"),Rne=a("strong"),f_o=o("swin"),m_o=o(" \u2014 "),SI=a("a"),g_o=o("SwinModel"),h_o=o(" (Swin model)"),p_o=l(),ou=a("li"),Bne=a("strong"),u_o=o("t5"),__o=o(" \u2014 "),RI=a("a"),b_o=o("T5Model"),v_o=o(" (T5 model)"),F_o=l(),ru=a("li"),Pne=a("strong"),T_o=o("tapas"),M_o=o(" \u2014 "),BI=a("a"),E_o=o("TapasModel"),C_o=o(" (TAPAS model)"),w_o=l(),tu=a("li"),Ine=a("strong"),A_o=o("transfo-xl"),y_o=o(" \u2014 "),PI=a("a"),L_o=o("TransfoXLModel"),x_o=o(" (Transformer-XL model)"),$_o=l(),au=a("li"),qne=a("strong"),k_o=o("unispeech"),S_o=o(" \u2014 "),II=a("a"),R_o=o("UniSpeechModel"),B_o=o(" (UniSpeech model)"),P_o=l(),nu=a("li"),Nne=a("strong"),I_o=o("unispeech-sat"),q_o=o(" \u2014 "),qI=a("a"),N_o=o("UniSpeechSatModel"),j_o=o(" (UniSpeechSat model)"),D_o=l(),su=a("li"),jne=a("strong"),G_o=o("van"),O_o=o(" \u2014 "),NI=a("a"),V_o=o("VanModel"),X_o=o(" (VAN model)"),z_o=l(),lu=a("li"),Dne=a("strong"),Q_o=o("vilt"),W_o=o(" \u2014 "),jI=a("a"),H_o=o("ViltModel"),U_o=o(" (ViLT model)"),J_o=l(),iu=a("li"),Gne=a("strong"),Y_o=o("vision-text-dual-encoder"),K_o=o(" \u2014 "),DI=a("a"),Z_o=o("VisionTextDualEncoderModel"),e1o=o(" (VisionTextDualEncoder model)"),o1o=l(),du=a("li"),One=a("strong"),r1o=o("visual_bert"),t1o=o(" \u2014 "),GI=a("a"),a1o=o("VisualBertModel"),n1o=o(" (VisualBert model)"),s1o=l(),cu=a("li"),Vne=a("strong"),l1o=o("vit"),i1o=o(" \u2014 "),OI=a("a"),d1o=o("ViTModel"),c1o=o(" (ViT model)"),f1o=l(),fu=a("li"),Xne=a("strong"),m1o=o("vit_mae"),g1o=o(" \u2014 "),VI=a("a"),h1o=o("ViTMAEModel"),p1o=o(" (ViTMAE model)"),u1o=l(),mu=a("li"),zne=a("strong"),_1o=o("wav2vec2"),b1o=o(" \u2014 "),XI=a("a"),v1o=o("Wav2Vec2Model"),F1o=o(" (Wav2Vec2 model)"),T1o=l(),gu=a("li"),Qne=a("strong"),M1o=o("wavlm"),E1o=o(" \u2014 "),zI=a("a"),C1o=o("WavLMModel"),w1o=o(" (WavLM model)"),A1o=l(),hu=a("li"),Wne=a("strong"),y1o=o("xglm"),L1o=o(" \u2014 "),QI=a("a"),x1o=o("XGLMModel"),$1o=o(" (XGLM model)"),k1o=l(),pu=a("li"),Hne=a("strong"),S1o=o("xlm"),R1o=o(" \u2014 "),WI=a("a"),B1o=o("XLMModel"),P1o=o(" (XLM model)"),I1o=l(),uu=a("li"),Une=a("strong"),q1o=o("xlm-prophetnet"),N1o=o(" \u2014 "),HI=a("a"),j1o=o("XLMProphetNetModel"),D1o=o(" (XLMProphetNet model)"),G1o=l(),_u=a("li"),Jne=a("strong"),O1o=o("xlm-roberta"),V1o=o(" \u2014 "),UI=a("a"),X1o=o("XLMRobertaModel"),z1o=o(" (XLM-RoBERTa model)"),Q1o=l(),bu=a("li"),Yne=a("strong"),W1o=o("xlm-roberta-xl"),H1o=o(" \u2014 "),JI=a("a"),U1o=o("XLMRobertaXLModel"),J1o=o(" (XLM-RoBERTa-XL model)"),Y1o=l(),vu=a("li"),Kne=a("strong"),K1o=o("xlnet"),Z1o=o(" \u2014 "),YI=a("a"),ebo=o("XLNetModel"),obo=o(" (XLNet model)"),rbo=l(),Fu=a("li"),Zne=a("strong"),tbo=o("yolos"),abo=o(" \u2014 "),KI=a("a"),nbo=o("YolosModel"),sbo=o(" (YOLOS model)"),lbo=l(),Tu=a("li"),ese=a("strong"),ibo=o("yoso"),dbo=o(" \u2014 "),ZI=a("a"),cbo=o("YosoModel"),fbo=o(" (YOSO model)"),mbo=l(),Mu=a("p"),gbo=o("The model is set in evaluation mode by default using "),ose=a("code"),hbo=o("model.eval()"),pbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rse=a("code"),ubo=o("model.train()"),_bo=l(),F(Eu.$$.fragment),OBe=l(),vi=a("h2"),Cu=a("a"),tse=a("span"),F(aA.$$.fragment),bbo=l(),ase=a("span"),vbo=o("AutoModelForPreTraining"),VBe=l(),xo=a("div"),F(nA.$$.fragment),Fbo=l(),Fi=a("p"),Tbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eq=a("a"),Mbo=o("from_pretrained()"),Ebo=o(" class method or the "),oq=a("a"),Cbo=o("from_config()"),wbo=o(` class
method.`),Abo=l(),sA=a("p"),ybo=o("This class cannot be instantiated directly using "),nse=a("code"),Lbo=o("__init__()"),xbo=o(" (throws an error)."),$bo=l(),et=a("div"),F(lA.$$.fragment),kbo=l(),sse=a("p"),Sbo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Rbo=l(),Ti=a("p"),Bbo=o(`Note:
Loading a model from its configuration file does `),lse=a("strong"),Pbo=o("not"),Ibo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rq=a("a"),qbo=o("from_pretrained()"),Nbo=o(" to load the model weights."),jbo=l(),F(wu.$$.fragment),Dbo=l(),Ue=a("div"),F(iA.$$.fragment),Gbo=l(),ise=a("p"),Obo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Vbo=l(),Ca=a("p"),Xbo=o("The model class to instantiate is selected based on the "),dse=a("code"),zbo=o("model_type"),Qbo=o(` property of the config object (either
passed as an argument or loaded from `),cse=a("code"),Wbo=o("pretrained_model_name_or_path"),Hbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fse=a("code"),Ubo=o("pretrained_model_name_or_path"),Jbo=o(":"),Ybo=l(),G=a("ul"),Au=a("li"),mse=a("strong"),Kbo=o("albert"),Zbo=o(" \u2014 "),tq=a("a"),e2o=o("AlbertForPreTraining"),o2o=o(" (ALBERT model)"),r2o=l(),yu=a("li"),gse=a("strong"),t2o=o("bart"),a2o=o(" \u2014 "),aq=a("a"),n2o=o("BartForConditionalGeneration"),s2o=o(" (BART model)"),l2o=l(),Lu=a("li"),hse=a("strong"),i2o=o("bert"),d2o=o(" \u2014 "),nq=a("a"),c2o=o("BertForPreTraining"),f2o=o(" (BERT model)"),m2o=l(),xu=a("li"),pse=a("strong"),g2o=o("big_bird"),h2o=o(" \u2014 "),sq=a("a"),p2o=o("BigBirdForPreTraining"),u2o=o(" (BigBird model)"),_2o=l(),$u=a("li"),use=a("strong"),b2o=o("camembert"),v2o=o(" \u2014 "),lq=a("a"),F2o=o("CamembertForMaskedLM"),T2o=o(" (CamemBERT model)"),M2o=l(),ku=a("li"),_se=a("strong"),E2o=o("ctrl"),C2o=o(" \u2014 "),iq=a("a"),w2o=o("CTRLLMHeadModel"),A2o=o(" (CTRL model)"),y2o=l(),Su=a("li"),bse=a("strong"),L2o=o("data2vec-text"),x2o=o(" \u2014 "),dq=a("a"),$2o=o("Data2VecTextForMaskedLM"),k2o=o(" (Data2VecText model)"),S2o=l(),Ru=a("li"),vse=a("strong"),R2o=o("deberta"),B2o=o(" \u2014 "),cq=a("a"),P2o=o("DebertaForMaskedLM"),I2o=o(" (DeBERTa model)"),q2o=l(),Bu=a("li"),Fse=a("strong"),N2o=o("deberta-v2"),j2o=o(" \u2014 "),fq=a("a"),D2o=o("DebertaV2ForMaskedLM"),G2o=o(" (DeBERTa-v2 model)"),O2o=l(),Pu=a("li"),Tse=a("strong"),V2o=o("distilbert"),X2o=o(" \u2014 "),mq=a("a"),z2o=o("DistilBertForMaskedLM"),Q2o=o(" (DistilBERT model)"),W2o=l(),Iu=a("li"),Mse=a("strong"),H2o=o("electra"),U2o=o(" \u2014 "),gq=a("a"),J2o=o("ElectraForPreTraining"),Y2o=o(" (ELECTRA model)"),K2o=l(),qu=a("li"),Ese=a("strong"),Z2o=o("flaubert"),evo=o(" \u2014 "),hq=a("a"),ovo=o("FlaubertWithLMHeadModel"),rvo=o(" (FlauBERT model)"),tvo=l(),Nu=a("li"),Cse=a("strong"),avo=o("fnet"),nvo=o(" \u2014 "),pq=a("a"),svo=o("FNetForPreTraining"),lvo=o(" (FNet model)"),ivo=l(),ju=a("li"),wse=a("strong"),dvo=o("fsmt"),cvo=o(" \u2014 "),uq=a("a"),fvo=o("FSMTForConditionalGeneration"),mvo=o(" (FairSeq Machine-Translation model)"),gvo=l(),Du=a("li"),Ase=a("strong"),hvo=o("funnel"),pvo=o(" \u2014 "),_q=a("a"),uvo=o("FunnelForPreTraining"),_vo=o(" (Funnel Transformer model)"),bvo=l(),Gu=a("li"),yse=a("strong"),vvo=o("gpt2"),Fvo=o(" \u2014 "),bq=a("a"),Tvo=o("GPT2LMHeadModel"),Mvo=o(" (OpenAI GPT-2 model)"),Evo=l(),Ou=a("li"),Lse=a("strong"),Cvo=o("ibert"),wvo=o(" \u2014 "),vq=a("a"),Avo=o("IBertForMaskedLM"),yvo=o(" (I-BERT model)"),Lvo=l(),Vu=a("li"),xse=a("strong"),xvo=o("layoutlm"),$vo=o(" \u2014 "),Fq=a("a"),kvo=o("LayoutLMForMaskedLM"),Svo=o(" (LayoutLM model)"),Rvo=l(),Xu=a("li"),$se=a("strong"),Bvo=o("longformer"),Pvo=o(" \u2014 "),Tq=a("a"),Ivo=o("LongformerForMaskedLM"),qvo=o(" (Longformer model)"),Nvo=l(),zu=a("li"),kse=a("strong"),jvo=o("lxmert"),Dvo=o(" \u2014 "),Mq=a("a"),Gvo=o("LxmertForPreTraining"),Ovo=o(" (LXMERT model)"),Vvo=l(),Qu=a("li"),Sse=a("strong"),Xvo=o("megatron-bert"),zvo=o(" \u2014 "),Eq=a("a"),Qvo=o("MegatronBertForPreTraining"),Wvo=o(" (MegatronBert model)"),Hvo=l(),Wu=a("li"),Rse=a("strong"),Uvo=o("mobilebert"),Jvo=o(" \u2014 "),Cq=a("a"),Yvo=o("MobileBertForPreTraining"),Kvo=o(" (MobileBERT model)"),Zvo=l(),Hu=a("li"),Bse=a("strong"),eFo=o("mpnet"),oFo=o(" \u2014 "),wq=a("a"),rFo=o("MPNetForMaskedLM"),tFo=o(" (MPNet model)"),aFo=l(),Uu=a("li"),Pse=a("strong"),nFo=o("openai-gpt"),sFo=o(" \u2014 "),Aq=a("a"),lFo=o("OpenAIGPTLMHeadModel"),iFo=o(" (OpenAI GPT model)"),dFo=l(),Ju=a("li"),Ise=a("strong"),cFo=o("retribert"),fFo=o(" \u2014 "),yq=a("a"),mFo=o("RetriBertModel"),gFo=o(" (RetriBERT model)"),hFo=l(),Yu=a("li"),qse=a("strong"),pFo=o("roberta"),uFo=o(" \u2014 "),Lq=a("a"),_Fo=o("RobertaForMaskedLM"),bFo=o(" (RoBERTa model)"),vFo=l(),Ku=a("li"),Nse=a("strong"),FFo=o("squeezebert"),TFo=o(" \u2014 "),xq=a("a"),MFo=o("SqueezeBertForMaskedLM"),EFo=o(" (SqueezeBERT model)"),CFo=l(),Zu=a("li"),jse=a("strong"),wFo=o("t5"),AFo=o(" \u2014 "),$q=a("a"),yFo=o("T5ForConditionalGeneration"),LFo=o(" (T5 model)"),xFo=l(),e_=a("li"),Dse=a("strong"),$Fo=o("tapas"),kFo=o(" \u2014 "),kq=a("a"),SFo=o("TapasForMaskedLM"),RFo=o(" (TAPAS model)"),BFo=l(),o_=a("li"),Gse=a("strong"),PFo=o("transfo-xl"),IFo=o(" \u2014 "),Sq=a("a"),qFo=o("TransfoXLLMHeadModel"),NFo=o(" (Transformer-XL model)"),jFo=l(),r_=a("li"),Ose=a("strong"),DFo=o("unispeech"),GFo=o(" \u2014 "),Rq=a("a"),OFo=o("UniSpeechForPreTraining"),VFo=o(" (UniSpeech model)"),XFo=l(),t_=a("li"),Vse=a("strong"),zFo=o("unispeech-sat"),QFo=o(" \u2014 "),Bq=a("a"),WFo=o("UniSpeechSatForPreTraining"),HFo=o(" (UniSpeechSat model)"),UFo=l(),a_=a("li"),Xse=a("strong"),JFo=o("visual_bert"),YFo=o(" \u2014 "),Pq=a("a"),KFo=o("VisualBertForPreTraining"),ZFo=o(" (VisualBert model)"),e0o=l(),n_=a("li"),zse=a("strong"),o0o=o("vit_mae"),r0o=o(" \u2014 "),Iq=a("a"),t0o=o("ViTMAEForPreTraining"),a0o=o(" (ViTMAE model)"),n0o=l(),s_=a("li"),Qse=a("strong"),s0o=o("wav2vec2"),l0o=o(" \u2014 "),qq=a("a"),i0o=o("Wav2Vec2ForPreTraining"),d0o=o(" (Wav2Vec2 model)"),c0o=l(),l_=a("li"),Wse=a("strong"),f0o=o("xlm"),m0o=o(" \u2014 "),Nq=a("a"),g0o=o("XLMWithLMHeadModel"),h0o=o(" (XLM model)"),p0o=l(),i_=a("li"),Hse=a("strong"),u0o=o("xlm-roberta"),_0o=o(" \u2014 "),jq=a("a"),b0o=o("XLMRobertaForMaskedLM"),v0o=o(" (XLM-RoBERTa model)"),F0o=l(),d_=a("li"),Use=a("strong"),T0o=o("xlm-roberta-xl"),M0o=o(" \u2014 "),Dq=a("a"),E0o=o("XLMRobertaXLForMaskedLM"),C0o=o(" (XLM-RoBERTa-XL model)"),w0o=l(),c_=a("li"),Jse=a("strong"),A0o=o("xlnet"),y0o=o(" \u2014 "),Gq=a("a"),L0o=o("XLNetLMHeadModel"),x0o=o(" (XLNet model)"),$0o=l(),f_=a("p"),k0o=o("The model is set in evaluation mode by default using "),Yse=a("code"),S0o=o("model.eval()"),R0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kse=a("code"),B0o=o("model.train()"),P0o=l(),F(m_.$$.fragment),XBe=l(),Mi=a("h2"),g_=a("a"),Zse=a("span"),F(dA.$$.fragment),I0o=l(),ele=a("span"),q0o=o("AutoModelForCausalLM"),zBe=l(),$o=a("div"),F(cA.$$.fragment),N0o=l(),Ei=a("p"),j0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Oq=a("a"),D0o=o("from_pretrained()"),G0o=o(" class method or the "),Vq=a("a"),O0o=o("from_config()"),V0o=o(` class
method.`),X0o=l(),fA=a("p"),z0o=o("This class cannot be instantiated directly using "),ole=a("code"),Q0o=o("__init__()"),W0o=o(" (throws an error)."),H0o=l(),ot=a("div"),F(mA.$$.fragment),U0o=l(),rle=a("p"),J0o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Y0o=l(),Ci=a("p"),K0o=o(`Note:
Loading a model from its configuration file does `),tle=a("strong"),Z0o=o("not"),eTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xq=a("a"),oTo=o("from_pretrained()"),rTo=o(" to load the model weights."),tTo=l(),F(h_.$$.fragment),aTo=l(),Je=a("div"),F(gA.$$.fragment),nTo=l(),ale=a("p"),sTo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),lTo=l(),wa=a("p"),iTo=o("The model class to instantiate is selected based on the "),nle=a("code"),dTo=o("model_type"),cTo=o(` property of the config object (either
passed as an argument or loaded from `),sle=a("code"),fTo=o("pretrained_model_name_or_path"),mTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lle=a("code"),gTo=o("pretrained_model_name_or_path"),hTo=o(":"),pTo=l(),z=a("ul"),p_=a("li"),ile=a("strong"),uTo=o("bart"),_To=o(" \u2014 "),zq=a("a"),bTo=o("BartForCausalLM"),vTo=o(" (BART model)"),FTo=l(),u_=a("li"),dle=a("strong"),TTo=o("bert"),MTo=o(" \u2014 "),Qq=a("a"),ETo=o("BertLMHeadModel"),CTo=o(" (BERT model)"),wTo=l(),__=a("li"),cle=a("strong"),ATo=o("bert-generation"),yTo=o(" \u2014 "),Wq=a("a"),LTo=o("BertGenerationDecoder"),xTo=o(" (Bert Generation model)"),$To=l(),b_=a("li"),fle=a("strong"),kTo=o("big_bird"),STo=o(" \u2014 "),Hq=a("a"),RTo=o("BigBirdForCausalLM"),BTo=o(" (BigBird model)"),PTo=l(),v_=a("li"),mle=a("strong"),ITo=o("bigbird_pegasus"),qTo=o(" \u2014 "),Uq=a("a"),NTo=o("BigBirdPegasusForCausalLM"),jTo=o(" (BigBirdPegasus model)"),DTo=l(),F_=a("li"),gle=a("strong"),GTo=o("blenderbot"),OTo=o(" \u2014 "),Jq=a("a"),VTo=o("BlenderbotForCausalLM"),XTo=o(" (Blenderbot model)"),zTo=l(),T_=a("li"),hle=a("strong"),QTo=o("blenderbot-small"),WTo=o(" \u2014 "),Yq=a("a"),HTo=o("BlenderbotSmallForCausalLM"),UTo=o(" (BlenderbotSmall model)"),JTo=l(),M_=a("li"),ple=a("strong"),YTo=o("camembert"),KTo=o(" \u2014 "),Kq=a("a"),ZTo=o("CamembertForCausalLM"),e7o=o(" (CamemBERT model)"),o7o=l(),E_=a("li"),ule=a("strong"),r7o=o("ctrl"),t7o=o(" \u2014 "),Zq=a("a"),a7o=o("CTRLLMHeadModel"),n7o=o(" (CTRL model)"),s7o=l(),C_=a("li"),_le=a("strong"),l7o=o("data2vec-text"),i7o=o(" \u2014 "),eN=a("a"),d7o=o("Data2VecTextForCausalLM"),c7o=o(" (Data2VecText model)"),f7o=l(),w_=a("li"),ble=a("strong"),m7o=o("electra"),g7o=o(" \u2014 "),oN=a("a"),h7o=o("ElectraForCausalLM"),p7o=o(" (ELECTRA model)"),u7o=l(),A_=a("li"),vle=a("strong"),_7o=o("gpt2"),b7o=o(" \u2014 "),rN=a("a"),v7o=o("GPT2LMHeadModel"),F7o=o(" (OpenAI GPT-2 model)"),T7o=l(),y_=a("li"),Fle=a("strong"),M7o=o("gpt_neo"),E7o=o(" \u2014 "),tN=a("a"),C7o=o("GPTNeoForCausalLM"),w7o=o(" (GPT Neo model)"),A7o=l(),L_=a("li"),Tle=a("strong"),y7o=o("gptj"),L7o=o(" \u2014 "),aN=a("a"),x7o=o("GPTJForCausalLM"),$7o=o(" (GPT-J model)"),k7o=l(),x_=a("li"),Mle=a("strong"),S7o=o("marian"),R7o=o(" \u2014 "),nN=a("a"),B7o=o("MarianForCausalLM"),P7o=o(" (Marian model)"),I7o=l(),$_=a("li"),Ele=a("strong"),q7o=o("mbart"),N7o=o(" \u2014 "),sN=a("a"),j7o=o("MBartForCausalLM"),D7o=o(" (mBART model)"),G7o=l(),k_=a("li"),Cle=a("strong"),O7o=o("megatron-bert"),V7o=o(" \u2014 "),lN=a("a"),X7o=o("MegatronBertForCausalLM"),z7o=o(" (MegatronBert model)"),Q7o=l(),S_=a("li"),wle=a("strong"),W7o=o("openai-gpt"),H7o=o(" \u2014 "),iN=a("a"),U7o=o("OpenAIGPTLMHeadModel"),J7o=o(" (OpenAI GPT model)"),Y7o=l(),R_=a("li"),Ale=a("strong"),K7o=o("pegasus"),Z7o=o(" \u2014 "),dN=a("a"),e9o=o("PegasusForCausalLM"),o9o=o(" (Pegasus model)"),r9o=l(),B_=a("li"),yle=a("strong"),t9o=o("plbart"),a9o=o(" \u2014 "),cN=a("a"),n9o=o("PLBartForCausalLM"),s9o=o(" (PLBart model)"),l9o=l(),P_=a("li"),Lle=a("strong"),i9o=o("prophetnet"),d9o=o(" \u2014 "),fN=a("a"),c9o=o("ProphetNetForCausalLM"),f9o=o(" (ProphetNet model)"),m9o=l(),I_=a("li"),xle=a("strong"),g9o=o("qdqbert"),h9o=o(" \u2014 "),mN=a("a"),p9o=o("QDQBertLMHeadModel"),u9o=o(" (QDQBert model)"),_9o=l(),q_=a("li"),$le=a("strong"),b9o=o("reformer"),v9o=o(" \u2014 "),gN=a("a"),F9o=o("ReformerModelWithLMHead"),T9o=o(" (Reformer model)"),M9o=l(),N_=a("li"),kle=a("strong"),E9o=o("rembert"),C9o=o(" \u2014 "),hN=a("a"),w9o=o("RemBertForCausalLM"),A9o=o(" (RemBERT model)"),y9o=l(),j_=a("li"),Sle=a("strong"),L9o=o("roberta"),x9o=o(" \u2014 "),pN=a("a"),$9o=o("RobertaForCausalLM"),k9o=o(" (RoBERTa model)"),S9o=l(),D_=a("li"),Rle=a("strong"),R9o=o("roformer"),B9o=o(" \u2014 "),uN=a("a"),P9o=o("RoFormerForCausalLM"),I9o=o(" (RoFormer model)"),q9o=l(),G_=a("li"),Ble=a("strong"),N9o=o("speech_to_text_2"),j9o=o(" \u2014 "),_N=a("a"),D9o=o("Speech2Text2ForCausalLM"),G9o=o(" (Speech2Text2 model)"),O9o=l(),O_=a("li"),Ple=a("strong"),V9o=o("transfo-xl"),X9o=o(" \u2014 "),bN=a("a"),z9o=o("TransfoXLLMHeadModel"),Q9o=o(" (Transformer-XL model)"),W9o=l(),V_=a("li"),Ile=a("strong"),H9o=o("trocr"),U9o=o(" \u2014 "),vN=a("a"),J9o=o("TrOCRForCausalLM"),Y9o=o(" (TrOCR model)"),K9o=l(),X_=a("li"),qle=a("strong"),Z9o=o("xglm"),eMo=o(" \u2014 "),FN=a("a"),oMo=o("XGLMForCausalLM"),rMo=o(" (XGLM model)"),tMo=l(),z_=a("li"),Nle=a("strong"),aMo=o("xlm"),nMo=o(" \u2014 "),TN=a("a"),sMo=o("XLMWithLMHeadModel"),lMo=o(" (XLM model)"),iMo=l(),Q_=a("li"),jle=a("strong"),dMo=o("xlm-prophetnet"),cMo=o(" \u2014 "),MN=a("a"),fMo=o("XLMProphetNetForCausalLM"),mMo=o(" (XLMProphetNet model)"),gMo=l(),W_=a("li"),Dle=a("strong"),hMo=o("xlm-roberta"),pMo=o(" \u2014 "),EN=a("a"),uMo=o("XLMRobertaForCausalLM"),_Mo=o(" (XLM-RoBERTa model)"),bMo=l(),H_=a("li"),Gle=a("strong"),vMo=o("xlm-roberta-xl"),FMo=o(" \u2014 "),CN=a("a"),TMo=o("XLMRobertaXLForCausalLM"),MMo=o(" (XLM-RoBERTa-XL model)"),EMo=l(),U_=a("li"),Ole=a("strong"),CMo=o("xlnet"),wMo=o(" \u2014 "),wN=a("a"),AMo=o("XLNetLMHeadModel"),yMo=o(" (XLNet model)"),LMo=l(),J_=a("p"),xMo=o("The model is set in evaluation mode by default using "),Vle=a("code"),$Mo=o("model.eval()"),kMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xle=a("code"),SMo=o("model.train()"),RMo=l(),F(Y_.$$.fragment),QBe=l(),wi=a("h2"),K_=a("a"),zle=a("span"),F(hA.$$.fragment),BMo=l(),Qle=a("span"),PMo=o("AutoModelForMaskedLM"),WBe=l(),ko=a("div"),F(pA.$$.fragment),IMo=l(),Ai=a("p"),qMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AN=a("a"),NMo=o("from_pretrained()"),jMo=o(" class method or the "),yN=a("a"),DMo=o("from_config()"),GMo=o(` class
method.`),OMo=l(),uA=a("p"),VMo=o("This class cannot be instantiated directly using "),Wle=a("code"),XMo=o("__init__()"),zMo=o(" (throws an error)."),QMo=l(),rt=a("div"),F(_A.$$.fragment),WMo=l(),Hle=a("p"),HMo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),UMo=l(),yi=a("p"),JMo=o(`Note:
Loading a model from its configuration file does `),Ule=a("strong"),YMo=o("not"),KMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LN=a("a"),ZMo=o("from_pretrained()"),e4o=o(" to load the model weights."),o4o=l(),F(Z_.$$.fragment),r4o=l(),Ye=a("div"),F(bA.$$.fragment),t4o=l(),Jle=a("p"),a4o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),n4o=l(),Aa=a("p"),s4o=o("The model class to instantiate is selected based on the "),Yle=a("code"),l4o=o("model_type"),i4o=o(` property of the config object (either
passed as an argument or loaded from `),Kle=a("code"),d4o=o("pretrained_model_name_or_path"),c4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zle=a("code"),f4o=o("pretrained_model_name_or_path"),m4o=o(":"),g4o=l(),Q=a("ul"),e1=a("li"),eie=a("strong"),h4o=o("albert"),p4o=o(" \u2014 "),xN=a("a"),u4o=o("AlbertForMaskedLM"),_4o=o(" (ALBERT model)"),b4o=l(),o1=a("li"),oie=a("strong"),v4o=o("bart"),F4o=o(" \u2014 "),$N=a("a"),T4o=o("BartForConditionalGeneration"),M4o=o(" (BART model)"),E4o=l(),r1=a("li"),rie=a("strong"),C4o=o("bert"),w4o=o(" \u2014 "),kN=a("a"),A4o=o("BertForMaskedLM"),y4o=o(" (BERT model)"),L4o=l(),t1=a("li"),tie=a("strong"),x4o=o("big_bird"),$4o=o(" \u2014 "),SN=a("a"),k4o=o("BigBirdForMaskedLM"),S4o=o(" (BigBird model)"),R4o=l(),a1=a("li"),aie=a("strong"),B4o=o("camembert"),P4o=o(" \u2014 "),RN=a("a"),I4o=o("CamembertForMaskedLM"),q4o=o(" (CamemBERT model)"),N4o=l(),n1=a("li"),nie=a("strong"),j4o=o("convbert"),D4o=o(" \u2014 "),BN=a("a"),G4o=o("ConvBertForMaskedLM"),O4o=o(" (ConvBERT model)"),V4o=l(),s1=a("li"),sie=a("strong"),X4o=o("data2vec-text"),z4o=o(" \u2014 "),PN=a("a"),Q4o=o("Data2VecTextForMaskedLM"),W4o=o(" (Data2VecText model)"),H4o=l(),l1=a("li"),lie=a("strong"),U4o=o("deberta"),J4o=o(" \u2014 "),IN=a("a"),Y4o=o("DebertaForMaskedLM"),K4o=o(" (DeBERTa model)"),Z4o=l(),i1=a("li"),iie=a("strong"),eEo=o("deberta-v2"),oEo=o(" \u2014 "),qN=a("a"),rEo=o("DebertaV2ForMaskedLM"),tEo=o(" (DeBERTa-v2 model)"),aEo=l(),d1=a("li"),die=a("strong"),nEo=o("distilbert"),sEo=o(" \u2014 "),NN=a("a"),lEo=o("DistilBertForMaskedLM"),iEo=o(" (DistilBERT model)"),dEo=l(),c1=a("li"),cie=a("strong"),cEo=o("electra"),fEo=o(" \u2014 "),jN=a("a"),mEo=o("ElectraForMaskedLM"),gEo=o(" (ELECTRA model)"),hEo=l(),f1=a("li"),fie=a("strong"),pEo=o("flaubert"),uEo=o(" \u2014 "),DN=a("a"),_Eo=o("FlaubertWithLMHeadModel"),bEo=o(" (FlauBERT model)"),vEo=l(),m1=a("li"),mie=a("strong"),FEo=o("fnet"),TEo=o(" \u2014 "),GN=a("a"),MEo=o("FNetForMaskedLM"),EEo=o(" (FNet model)"),CEo=l(),g1=a("li"),gie=a("strong"),wEo=o("funnel"),AEo=o(" \u2014 "),ON=a("a"),yEo=o("FunnelForMaskedLM"),LEo=o(" (Funnel Transformer model)"),xEo=l(),h1=a("li"),hie=a("strong"),$Eo=o("ibert"),kEo=o(" \u2014 "),VN=a("a"),SEo=o("IBertForMaskedLM"),REo=o(" (I-BERT model)"),BEo=l(),p1=a("li"),pie=a("strong"),PEo=o("layoutlm"),IEo=o(" \u2014 "),XN=a("a"),qEo=o("LayoutLMForMaskedLM"),NEo=o(" (LayoutLM model)"),jEo=l(),u1=a("li"),uie=a("strong"),DEo=o("longformer"),GEo=o(" \u2014 "),zN=a("a"),OEo=o("LongformerForMaskedLM"),VEo=o(" (Longformer model)"),XEo=l(),_1=a("li"),_ie=a("strong"),zEo=o("mbart"),QEo=o(" \u2014 "),QN=a("a"),WEo=o("MBartForConditionalGeneration"),HEo=o(" (mBART model)"),UEo=l(),b1=a("li"),bie=a("strong"),JEo=o("megatron-bert"),YEo=o(" \u2014 "),WN=a("a"),KEo=o("MegatronBertForMaskedLM"),ZEo=o(" (MegatronBert model)"),e5o=l(),v1=a("li"),vie=a("strong"),o5o=o("mobilebert"),r5o=o(" \u2014 "),HN=a("a"),t5o=o("MobileBertForMaskedLM"),a5o=o(" (MobileBERT model)"),n5o=l(),F1=a("li"),Fie=a("strong"),s5o=o("mpnet"),l5o=o(" \u2014 "),UN=a("a"),i5o=o("MPNetForMaskedLM"),d5o=o(" (MPNet model)"),c5o=l(),T1=a("li"),Tie=a("strong"),f5o=o("nystromformer"),m5o=o(" \u2014 "),JN=a("a"),g5o=o("NystromformerForMaskedLM"),h5o=o(" (Nystromformer model)"),p5o=l(),M1=a("li"),Mie=a("strong"),u5o=o("perceiver"),_5o=o(" \u2014 "),YN=a("a"),b5o=o("PerceiverForMaskedLM"),v5o=o(" (Perceiver model)"),F5o=l(),E1=a("li"),Eie=a("strong"),T5o=o("qdqbert"),M5o=o(" \u2014 "),KN=a("a"),E5o=o("QDQBertForMaskedLM"),C5o=o(" (QDQBert model)"),w5o=l(),C1=a("li"),Cie=a("strong"),A5o=o("reformer"),y5o=o(" \u2014 "),ZN=a("a"),L5o=o("ReformerForMaskedLM"),x5o=o(" (Reformer model)"),$5o=l(),w1=a("li"),wie=a("strong"),k5o=o("rembert"),S5o=o(" \u2014 "),ej=a("a"),R5o=o("RemBertForMaskedLM"),B5o=o(" (RemBERT model)"),P5o=l(),A1=a("li"),Aie=a("strong"),I5o=o("roberta"),q5o=o(" \u2014 "),oj=a("a"),N5o=o("RobertaForMaskedLM"),j5o=o(" (RoBERTa model)"),D5o=l(),y1=a("li"),yie=a("strong"),G5o=o("roformer"),O5o=o(" \u2014 "),rj=a("a"),V5o=o("RoFormerForMaskedLM"),X5o=o(" (RoFormer model)"),z5o=l(),L1=a("li"),Lie=a("strong"),Q5o=o("squeezebert"),W5o=o(" \u2014 "),tj=a("a"),H5o=o("SqueezeBertForMaskedLM"),U5o=o(" (SqueezeBERT model)"),J5o=l(),x1=a("li"),xie=a("strong"),Y5o=o("tapas"),K5o=o(" \u2014 "),aj=a("a"),Z5o=o("TapasForMaskedLM"),eCo=o(" (TAPAS model)"),oCo=l(),$1=a("li"),$ie=a("strong"),rCo=o("wav2vec2"),tCo=o(" \u2014 "),kie=a("code"),aCo=o("Wav2Vec2ForMaskedLM"),nCo=o(" (Wav2Vec2 model)"),sCo=l(),k1=a("li"),Sie=a("strong"),lCo=o("xlm"),iCo=o(" \u2014 "),nj=a("a"),dCo=o("XLMWithLMHeadModel"),cCo=o(" (XLM model)"),fCo=l(),S1=a("li"),Rie=a("strong"),mCo=o("xlm-roberta"),gCo=o(" \u2014 "),sj=a("a"),hCo=o("XLMRobertaForMaskedLM"),pCo=o(" (XLM-RoBERTa model)"),uCo=l(),R1=a("li"),Bie=a("strong"),_Co=o("xlm-roberta-xl"),bCo=o(" \u2014 "),lj=a("a"),vCo=o("XLMRobertaXLForMaskedLM"),FCo=o(" (XLM-RoBERTa-XL model)"),TCo=l(),B1=a("li"),Pie=a("strong"),MCo=o("yoso"),ECo=o(" \u2014 "),ij=a("a"),CCo=o("YosoForMaskedLM"),wCo=o(" (YOSO model)"),ACo=l(),P1=a("p"),yCo=o("The model is set in evaluation mode by default using "),Iie=a("code"),LCo=o("model.eval()"),xCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qie=a("code"),$Co=o("model.train()"),kCo=l(),F(I1.$$.fragment),HBe=l(),Li=a("h2"),q1=a("a"),Nie=a("span"),F(vA.$$.fragment),SCo=l(),jie=a("span"),RCo=o("AutoModelForSeq2SeqLM"),UBe=l(),So=a("div"),F(FA.$$.fragment),BCo=l(),xi=a("p"),PCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dj=a("a"),ICo=o("from_pretrained()"),qCo=o(" class method or the "),cj=a("a"),NCo=o("from_config()"),jCo=o(` class
method.`),DCo=l(),TA=a("p"),GCo=o("This class cannot be instantiated directly using "),Die=a("code"),OCo=o("__init__()"),VCo=o(" (throws an error)."),XCo=l(),tt=a("div"),F(MA.$$.fragment),zCo=l(),Gie=a("p"),QCo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),WCo=l(),$i=a("p"),HCo=o(`Note:
Loading a model from its configuration file does `),Oie=a("strong"),UCo=o("not"),JCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fj=a("a"),YCo=o("from_pretrained()"),KCo=o(" to load the model weights."),ZCo=l(),F(N1.$$.fragment),e3o=l(),Ke=a("div"),F(EA.$$.fragment),o3o=l(),Vie=a("p"),r3o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),t3o=l(),ya=a("p"),a3o=o("The model class to instantiate is selected based on the "),Xie=a("code"),n3o=o("model_type"),s3o=o(` property of the config object (either
passed as an argument or loaded from `),zie=a("code"),l3o=o("pretrained_model_name_or_path"),i3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qie=a("code"),d3o=o("pretrained_model_name_or_path"),c3o=o(":"),f3o=l(),he=a("ul"),j1=a("li"),Wie=a("strong"),m3o=o("bart"),g3o=o(" \u2014 "),mj=a("a"),h3o=o("BartForConditionalGeneration"),p3o=o(" (BART model)"),u3o=l(),D1=a("li"),Hie=a("strong"),_3o=o("bigbird_pegasus"),b3o=o(" \u2014 "),gj=a("a"),v3o=o("BigBirdPegasusForConditionalGeneration"),F3o=o(" (BigBirdPegasus model)"),T3o=l(),G1=a("li"),Uie=a("strong"),M3o=o("blenderbot"),E3o=o(" \u2014 "),hj=a("a"),C3o=o("BlenderbotForConditionalGeneration"),w3o=o(" (Blenderbot model)"),A3o=l(),O1=a("li"),Jie=a("strong"),y3o=o("blenderbot-small"),L3o=o(" \u2014 "),pj=a("a"),x3o=o("BlenderbotSmallForConditionalGeneration"),$3o=o(" (BlenderbotSmall model)"),k3o=l(),V1=a("li"),Yie=a("strong"),S3o=o("encoder-decoder"),R3o=o(" \u2014 "),uj=a("a"),B3o=o("EncoderDecoderModel"),P3o=o(" (Encoder decoder model)"),I3o=l(),X1=a("li"),Kie=a("strong"),q3o=o("fsmt"),N3o=o(" \u2014 "),_j=a("a"),j3o=o("FSMTForConditionalGeneration"),D3o=o(" (FairSeq Machine-Translation model)"),G3o=l(),z1=a("li"),Zie=a("strong"),O3o=o("led"),V3o=o(" \u2014 "),bj=a("a"),X3o=o("LEDForConditionalGeneration"),z3o=o(" (LED model)"),Q3o=l(),Q1=a("li"),ede=a("strong"),W3o=o("m2m_100"),H3o=o(" \u2014 "),vj=a("a"),U3o=o("M2M100ForConditionalGeneration"),J3o=o(" (M2M100 model)"),Y3o=l(),W1=a("li"),ode=a("strong"),K3o=o("marian"),Z3o=o(" \u2014 "),Fj=a("a"),ewo=o("MarianMTModel"),owo=o(" (Marian model)"),rwo=l(),H1=a("li"),rde=a("strong"),two=o("mbart"),awo=o(" \u2014 "),Tj=a("a"),nwo=o("MBartForConditionalGeneration"),swo=o(" (mBART model)"),lwo=l(),U1=a("li"),tde=a("strong"),iwo=o("mt5"),dwo=o(" \u2014 "),Mj=a("a"),cwo=o("MT5ForConditionalGeneration"),fwo=o(" (mT5 model)"),mwo=l(),J1=a("li"),ade=a("strong"),gwo=o("pegasus"),hwo=o(" \u2014 "),Ej=a("a"),pwo=o("PegasusForConditionalGeneration"),uwo=o(" (Pegasus model)"),_wo=l(),Y1=a("li"),nde=a("strong"),bwo=o("plbart"),vwo=o(" \u2014 "),Cj=a("a"),Fwo=o("PLBartForConditionalGeneration"),Two=o(" (PLBart model)"),Mwo=l(),K1=a("li"),sde=a("strong"),Ewo=o("prophetnet"),Cwo=o(" \u2014 "),wj=a("a"),wwo=o("ProphetNetForConditionalGeneration"),Awo=o(" (ProphetNet model)"),ywo=l(),Z1=a("li"),lde=a("strong"),Lwo=o("t5"),xwo=o(" \u2014 "),Aj=a("a"),$wo=o("T5ForConditionalGeneration"),kwo=o(" (T5 model)"),Swo=l(),eb=a("li"),ide=a("strong"),Rwo=o("tapex"),Bwo=o(" \u2014 "),yj=a("a"),Pwo=o("BartForConditionalGeneration"),Iwo=o(" (TAPEX model)"),qwo=l(),ob=a("li"),dde=a("strong"),Nwo=o("xlm-prophetnet"),jwo=o(" \u2014 "),Lj=a("a"),Dwo=o("XLMProphetNetForConditionalGeneration"),Gwo=o(" (XLMProphetNet model)"),Owo=l(),rb=a("p"),Vwo=o("The model is set in evaluation mode by default using "),cde=a("code"),Xwo=o("model.eval()"),zwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fde=a("code"),Qwo=o("model.train()"),Wwo=l(),F(tb.$$.fragment),JBe=l(),ki=a("h2"),ab=a("a"),mde=a("span"),F(CA.$$.fragment),Hwo=l(),gde=a("span"),Uwo=o("AutoModelForSequenceClassification"),YBe=l(),Ro=a("div"),F(wA.$$.fragment),Jwo=l(),Si=a("p"),Ywo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xj=a("a"),Kwo=o("from_pretrained()"),Zwo=o(" class method or the "),$j=a("a"),eAo=o("from_config()"),oAo=o(` class
method.`),rAo=l(),AA=a("p"),tAo=o("This class cannot be instantiated directly using "),hde=a("code"),aAo=o("__init__()"),nAo=o(" (throws an error)."),sAo=l(),at=a("div"),F(yA.$$.fragment),lAo=l(),pde=a("p"),iAo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dAo=l(),Ri=a("p"),cAo=o(`Note:
Loading a model from its configuration file does `),ude=a("strong"),fAo=o("not"),mAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kj=a("a"),gAo=o("from_pretrained()"),hAo=o(" to load the model weights."),pAo=l(),F(nb.$$.fragment),uAo=l(),Ze=a("div"),F(LA.$$.fragment),_Ao=l(),_de=a("p"),bAo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vAo=l(),La=a("p"),FAo=o("The model class to instantiate is selected based on the "),bde=a("code"),TAo=o("model_type"),MAo=o(` property of the config object (either
passed as an argument or loaded from `),vde=a("code"),EAo=o("pretrained_model_name_or_path"),CAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=a("code"),wAo=o("pretrained_model_name_or_path"),AAo=o(":"),yAo=l(),q=a("ul"),sb=a("li"),Tde=a("strong"),LAo=o("albert"),xAo=o(" \u2014 "),Sj=a("a"),$Ao=o("AlbertForSequenceClassification"),kAo=o(" (ALBERT model)"),SAo=l(),lb=a("li"),Mde=a("strong"),RAo=o("bart"),BAo=o(" \u2014 "),Rj=a("a"),PAo=o("BartForSequenceClassification"),IAo=o(" (BART model)"),qAo=l(),ib=a("li"),Ede=a("strong"),NAo=o("bert"),jAo=o(" \u2014 "),Bj=a("a"),DAo=o("BertForSequenceClassification"),GAo=o(" (BERT model)"),OAo=l(),db=a("li"),Cde=a("strong"),VAo=o("big_bird"),XAo=o(" \u2014 "),Pj=a("a"),zAo=o("BigBirdForSequenceClassification"),QAo=o(" (BigBird model)"),WAo=l(),cb=a("li"),wde=a("strong"),HAo=o("bigbird_pegasus"),UAo=o(" \u2014 "),Ij=a("a"),JAo=o("BigBirdPegasusForSequenceClassification"),YAo=o(" (BigBirdPegasus model)"),KAo=l(),fb=a("li"),Ade=a("strong"),ZAo=o("camembert"),e6o=o(" \u2014 "),qj=a("a"),o6o=o("CamembertForSequenceClassification"),r6o=o(" (CamemBERT model)"),t6o=l(),mb=a("li"),yde=a("strong"),a6o=o("canine"),n6o=o(" \u2014 "),Nj=a("a"),s6o=o("CanineForSequenceClassification"),l6o=o(" (Canine model)"),i6o=l(),gb=a("li"),Lde=a("strong"),d6o=o("convbert"),c6o=o(" \u2014 "),jj=a("a"),f6o=o("ConvBertForSequenceClassification"),m6o=o(" (ConvBERT model)"),g6o=l(),hb=a("li"),xde=a("strong"),h6o=o("ctrl"),p6o=o(" \u2014 "),Dj=a("a"),u6o=o("CTRLForSequenceClassification"),_6o=o(" (CTRL model)"),b6o=l(),pb=a("li"),$de=a("strong"),v6o=o("data2vec-text"),F6o=o(" \u2014 "),Gj=a("a"),T6o=o("Data2VecTextForSequenceClassification"),M6o=o(" (Data2VecText model)"),E6o=l(),ub=a("li"),kde=a("strong"),C6o=o("deberta"),w6o=o(" \u2014 "),Oj=a("a"),A6o=o("DebertaForSequenceClassification"),y6o=o(" (DeBERTa model)"),L6o=l(),_b=a("li"),Sde=a("strong"),x6o=o("deberta-v2"),$6o=o(" \u2014 "),Vj=a("a"),k6o=o("DebertaV2ForSequenceClassification"),S6o=o(" (DeBERTa-v2 model)"),R6o=l(),bb=a("li"),Rde=a("strong"),B6o=o("distilbert"),P6o=o(" \u2014 "),Xj=a("a"),I6o=o("DistilBertForSequenceClassification"),q6o=o(" (DistilBERT model)"),N6o=l(),vb=a("li"),Bde=a("strong"),j6o=o("electra"),D6o=o(" \u2014 "),zj=a("a"),G6o=o("ElectraForSequenceClassification"),O6o=o(" (ELECTRA model)"),V6o=l(),Fb=a("li"),Pde=a("strong"),X6o=o("flaubert"),z6o=o(" \u2014 "),Qj=a("a"),Q6o=o("FlaubertForSequenceClassification"),W6o=o(" (FlauBERT model)"),H6o=l(),Tb=a("li"),Ide=a("strong"),U6o=o("fnet"),J6o=o(" \u2014 "),Wj=a("a"),Y6o=o("FNetForSequenceClassification"),K6o=o(" (FNet model)"),Z6o=l(),Mb=a("li"),qde=a("strong"),eyo=o("funnel"),oyo=o(" \u2014 "),Hj=a("a"),ryo=o("FunnelForSequenceClassification"),tyo=o(" (Funnel Transformer model)"),ayo=l(),Eb=a("li"),Nde=a("strong"),nyo=o("gpt2"),syo=o(" \u2014 "),Uj=a("a"),lyo=o("GPT2ForSequenceClassification"),iyo=o(" (OpenAI GPT-2 model)"),dyo=l(),Cb=a("li"),jde=a("strong"),cyo=o("gpt_neo"),fyo=o(" \u2014 "),Jj=a("a"),myo=o("GPTNeoForSequenceClassification"),gyo=o(" (GPT Neo model)"),hyo=l(),wb=a("li"),Dde=a("strong"),pyo=o("gptj"),uyo=o(" \u2014 "),Yj=a("a"),_yo=o("GPTJForSequenceClassification"),byo=o(" (GPT-J model)"),vyo=l(),Ab=a("li"),Gde=a("strong"),Fyo=o("ibert"),Tyo=o(" \u2014 "),Kj=a("a"),Myo=o("IBertForSequenceClassification"),Eyo=o(" (I-BERT model)"),Cyo=l(),yb=a("li"),Ode=a("strong"),wyo=o("layoutlm"),Ayo=o(" \u2014 "),Zj=a("a"),yyo=o("LayoutLMForSequenceClassification"),Lyo=o(" (LayoutLM model)"),xyo=l(),Lb=a("li"),Vde=a("strong"),$yo=o("layoutlmv2"),kyo=o(" \u2014 "),eD=a("a"),Syo=o("LayoutLMv2ForSequenceClassification"),Ryo=o(" (LayoutLMv2 model)"),Byo=l(),xb=a("li"),Xde=a("strong"),Pyo=o("led"),Iyo=o(" \u2014 "),oD=a("a"),qyo=o("LEDForSequenceClassification"),Nyo=o(" (LED model)"),jyo=l(),$b=a("li"),zde=a("strong"),Dyo=o("longformer"),Gyo=o(" \u2014 "),rD=a("a"),Oyo=o("LongformerForSequenceClassification"),Vyo=o(" (Longformer model)"),Xyo=l(),kb=a("li"),Qde=a("strong"),zyo=o("mbart"),Qyo=o(" \u2014 "),tD=a("a"),Wyo=o("MBartForSequenceClassification"),Hyo=o(" (mBART model)"),Uyo=l(),Sb=a("li"),Wde=a("strong"),Jyo=o("megatron-bert"),Yyo=o(" \u2014 "),aD=a("a"),Kyo=o("MegatronBertForSequenceClassification"),Zyo=o(" (MegatronBert model)"),eLo=l(),Rb=a("li"),Hde=a("strong"),oLo=o("mobilebert"),rLo=o(" \u2014 "),nD=a("a"),tLo=o("MobileBertForSequenceClassification"),aLo=o(" (MobileBERT model)"),nLo=l(),Bb=a("li"),Ude=a("strong"),sLo=o("mpnet"),lLo=o(" \u2014 "),sD=a("a"),iLo=o("MPNetForSequenceClassification"),dLo=o(" (MPNet model)"),cLo=l(),Pb=a("li"),Jde=a("strong"),fLo=o("nystromformer"),mLo=o(" \u2014 "),lD=a("a"),gLo=o("NystromformerForSequenceClassification"),hLo=o(" (Nystromformer model)"),pLo=l(),Ib=a("li"),Yde=a("strong"),uLo=o("openai-gpt"),_Lo=o(" \u2014 "),iD=a("a"),bLo=o("OpenAIGPTForSequenceClassification"),vLo=o(" (OpenAI GPT model)"),FLo=l(),qb=a("li"),Kde=a("strong"),TLo=o("perceiver"),MLo=o(" \u2014 "),dD=a("a"),ELo=o("PerceiverForSequenceClassification"),CLo=o(" (Perceiver model)"),wLo=l(),Nb=a("li"),Zde=a("strong"),ALo=o("plbart"),yLo=o(" \u2014 "),cD=a("a"),LLo=o("PLBartForSequenceClassification"),xLo=o(" (PLBart model)"),$Lo=l(),jb=a("li"),ece=a("strong"),kLo=o("qdqbert"),SLo=o(" \u2014 "),fD=a("a"),RLo=o("QDQBertForSequenceClassification"),BLo=o(" (QDQBert model)"),PLo=l(),Db=a("li"),oce=a("strong"),ILo=o("reformer"),qLo=o(" \u2014 "),mD=a("a"),NLo=o("ReformerForSequenceClassification"),jLo=o(" (Reformer model)"),DLo=l(),Gb=a("li"),rce=a("strong"),GLo=o("rembert"),OLo=o(" \u2014 "),gD=a("a"),VLo=o("RemBertForSequenceClassification"),XLo=o(" (RemBERT model)"),zLo=l(),Ob=a("li"),tce=a("strong"),QLo=o("roberta"),WLo=o(" \u2014 "),hD=a("a"),HLo=o("RobertaForSequenceClassification"),ULo=o(" (RoBERTa model)"),JLo=l(),Vb=a("li"),ace=a("strong"),YLo=o("roformer"),KLo=o(" \u2014 "),pD=a("a"),ZLo=o("RoFormerForSequenceClassification"),e8o=o(" (RoFormer model)"),o8o=l(),Xb=a("li"),nce=a("strong"),r8o=o("squeezebert"),t8o=o(" \u2014 "),uD=a("a"),a8o=o("SqueezeBertForSequenceClassification"),n8o=o(" (SqueezeBERT model)"),s8o=l(),zb=a("li"),sce=a("strong"),l8o=o("tapas"),i8o=o(" \u2014 "),_D=a("a"),d8o=o("TapasForSequenceClassification"),c8o=o(" (TAPAS model)"),f8o=l(),Qb=a("li"),lce=a("strong"),m8o=o("tapex"),g8o=o(" \u2014 "),bD=a("a"),h8o=o("BartForSequenceClassification"),p8o=o(" (TAPEX model)"),u8o=l(),Wb=a("li"),ice=a("strong"),_8o=o("transfo-xl"),b8o=o(" \u2014 "),vD=a("a"),v8o=o("TransfoXLForSequenceClassification"),F8o=o(" (Transformer-XL model)"),T8o=l(),Hb=a("li"),dce=a("strong"),M8o=o("xlm"),E8o=o(" \u2014 "),FD=a("a"),C8o=o("XLMForSequenceClassification"),w8o=o(" (XLM model)"),A8o=l(),Ub=a("li"),cce=a("strong"),y8o=o("xlm-roberta"),L8o=o(" \u2014 "),TD=a("a"),x8o=o("XLMRobertaForSequenceClassification"),$8o=o(" (XLM-RoBERTa model)"),k8o=l(),Jb=a("li"),fce=a("strong"),S8o=o("xlm-roberta-xl"),R8o=o(" \u2014 "),MD=a("a"),B8o=o("XLMRobertaXLForSequenceClassification"),P8o=o(" (XLM-RoBERTa-XL model)"),I8o=l(),Yb=a("li"),mce=a("strong"),q8o=o("xlnet"),N8o=o(" \u2014 "),ED=a("a"),j8o=o("XLNetForSequenceClassification"),D8o=o(" (XLNet model)"),G8o=l(),Kb=a("li"),gce=a("strong"),O8o=o("yoso"),V8o=o(" \u2014 "),CD=a("a"),X8o=o("YosoForSequenceClassification"),z8o=o(" (YOSO model)"),Q8o=l(),Zb=a("p"),W8o=o("The model is set in evaluation mode by default using "),hce=a("code"),H8o=o("model.eval()"),U8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pce=a("code"),J8o=o("model.train()"),Y8o=l(),F(e2.$$.fragment),KBe=l(),Bi=a("h2"),o2=a("a"),uce=a("span"),F(xA.$$.fragment),K8o=l(),_ce=a("span"),Z8o=o("AutoModelForMultipleChoice"),ZBe=l(),Bo=a("div"),F($A.$$.fragment),exo=l(),Pi=a("p"),oxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wD=a("a"),rxo=o("from_pretrained()"),txo=o(" class method or the "),AD=a("a"),axo=o("from_config()"),nxo=o(` class
method.`),sxo=l(),kA=a("p"),lxo=o("This class cannot be instantiated directly using "),bce=a("code"),ixo=o("__init__()"),dxo=o(" (throws an error)."),cxo=l(),nt=a("div"),F(SA.$$.fragment),fxo=l(),vce=a("p"),mxo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gxo=l(),Ii=a("p"),hxo=o(`Note:
Loading a model from its configuration file does `),Fce=a("strong"),pxo=o("not"),uxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yD=a("a"),_xo=o("from_pretrained()"),bxo=o(" to load the model weights."),vxo=l(),F(r2.$$.fragment),Fxo=l(),eo=a("div"),F(RA.$$.fragment),Txo=l(),Tce=a("p"),Mxo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Exo=l(),xa=a("p"),Cxo=o("The model class to instantiate is selected based on the "),Mce=a("code"),wxo=o("model_type"),Axo=o(` property of the config object (either
passed as an argument or loaded from `),Ece=a("code"),yxo=o("pretrained_model_name_or_path"),Lxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cce=a("code"),xxo=o("pretrained_model_name_or_path"),$xo=o(":"),kxo=l(),Y=a("ul"),t2=a("li"),wce=a("strong"),Sxo=o("albert"),Rxo=o(" \u2014 "),LD=a("a"),Bxo=o("AlbertForMultipleChoice"),Pxo=o(" (ALBERT model)"),Ixo=l(),a2=a("li"),Ace=a("strong"),qxo=o("bert"),Nxo=o(" \u2014 "),xD=a("a"),jxo=o("BertForMultipleChoice"),Dxo=o(" (BERT model)"),Gxo=l(),n2=a("li"),yce=a("strong"),Oxo=o("big_bird"),Vxo=o(" \u2014 "),$D=a("a"),Xxo=o("BigBirdForMultipleChoice"),zxo=o(" (BigBird model)"),Qxo=l(),s2=a("li"),Lce=a("strong"),Wxo=o("camembert"),Hxo=o(" \u2014 "),kD=a("a"),Uxo=o("CamembertForMultipleChoice"),Jxo=o(" (CamemBERT model)"),Yxo=l(),l2=a("li"),xce=a("strong"),Kxo=o("canine"),Zxo=o(" \u2014 "),SD=a("a"),e$o=o("CanineForMultipleChoice"),o$o=o(" (Canine model)"),r$o=l(),i2=a("li"),$ce=a("strong"),t$o=o("convbert"),a$o=o(" \u2014 "),RD=a("a"),n$o=o("ConvBertForMultipleChoice"),s$o=o(" (ConvBERT model)"),l$o=l(),d2=a("li"),kce=a("strong"),i$o=o("data2vec-text"),d$o=o(" \u2014 "),BD=a("a"),c$o=o("Data2VecTextForMultipleChoice"),f$o=o(" (Data2VecText model)"),m$o=l(),c2=a("li"),Sce=a("strong"),g$o=o("distilbert"),h$o=o(" \u2014 "),PD=a("a"),p$o=o("DistilBertForMultipleChoice"),u$o=o(" (DistilBERT model)"),_$o=l(),f2=a("li"),Rce=a("strong"),b$o=o("electra"),v$o=o(" \u2014 "),ID=a("a"),F$o=o("ElectraForMultipleChoice"),T$o=o(" (ELECTRA model)"),M$o=l(),m2=a("li"),Bce=a("strong"),E$o=o("flaubert"),C$o=o(" \u2014 "),qD=a("a"),w$o=o("FlaubertForMultipleChoice"),A$o=o(" (FlauBERT model)"),y$o=l(),g2=a("li"),Pce=a("strong"),L$o=o("fnet"),x$o=o(" \u2014 "),ND=a("a"),$$o=o("FNetForMultipleChoice"),k$o=o(" (FNet model)"),S$o=l(),h2=a("li"),Ice=a("strong"),R$o=o("funnel"),B$o=o(" \u2014 "),jD=a("a"),P$o=o("FunnelForMultipleChoice"),I$o=o(" (Funnel Transformer model)"),q$o=l(),p2=a("li"),qce=a("strong"),N$o=o("ibert"),j$o=o(" \u2014 "),DD=a("a"),D$o=o("IBertForMultipleChoice"),G$o=o(" (I-BERT model)"),O$o=l(),u2=a("li"),Nce=a("strong"),V$o=o("longformer"),X$o=o(" \u2014 "),GD=a("a"),z$o=o("LongformerForMultipleChoice"),Q$o=o(" (Longformer model)"),W$o=l(),_2=a("li"),jce=a("strong"),H$o=o("megatron-bert"),U$o=o(" \u2014 "),OD=a("a"),J$o=o("MegatronBertForMultipleChoice"),Y$o=o(" (MegatronBert model)"),K$o=l(),b2=a("li"),Dce=a("strong"),Z$o=o("mobilebert"),eko=o(" \u2014 "),VD=a("a"),oko=o("MobileBertForMultipleChoice"),rko=o(" (MobileBERT model)"),tko=l(),v2=a("li"),Gce=a("strong"),ako=o("mpnet"),nko=o(" \u2014 "),XD=a("a"),sko=o("MPNetForMultipleChoice"),lko=o(" (MPNet model)"),iko=l(),F2=a("li"),Oce=a("strong"),dko=o("nystromformer"),cko=o(" \u2014 "),zD=a("a"),fko=o("NystromformerForMultipleChoice"),mko=o(" (Nystromformer model)"),gko=l(),T2=a("li"),Vce=a("strong"),hko=o("qdqbert"),pko=o(" \u2014 "),QD=a("a"),uko=o("QDQBertForMultipleChoice"),_ko=o(" (QDQBert model)"),bko=l(),M2=a("li"),Xce=a("strong"),vko=o("rembert"),Fko=o(" \u2014 "),WD=a("a"),Tko=o("RemBertForMultipleChoice"),Mko=o(" (RemBERT model)"),Eko=l(),E2=a("li"),zce=a("strong"),Cko=o("roberta"),wko=o(" \u2014 "),HD=a("a"),Ako=o("RobertaForMultipleChoice"),yko=o(" (RoBERTa model)"),Lko=l(),C2=a("li"),Qce=a("strong"),xko=o("roformer"),$ko=o(" \u2014 "),UD=a("a"),kko=o("RoFormerForMultipleChoice"),Sko=o(" (RoFormer model)"),Rko=l(),w2=a("li"),Wce=a("strong"),Bko=o("squeezebert"),Pko=o(" \u2014 "),JD=a("a"),Iko=o("SqueezeBertForMultipleChoice"),qko=o(" (SqueezeBERT model)"),Nko=l(),A2=a("li"),Hce=a("strong"),jko=o("xlm"),Dko=o(" \u2014 "),YD=a("a"),Gko=o("XLMForMultipleChoice"),Oko=o(" (XLM model)"),Vko=l(),y2=a("li"),Uce=a("strong"),Xko=o("xlm-roberta"),zko=o(" \u2014 "),KD=a("a"),Qko=o("XLMRobertaForMultipleChoice"),Wko=o(" (XLM-RoBERTa model)"),Hko=l(),L2=a("li"),Jce=a("strong"),Uko=o("xlm-roberta-xl"),Jko=o(" \u2014 "),ZD=a("a"),Yko=o("XLMRobertaXLForMultipleChoice"),Kko=o(" (XLM-RoBERTa-XL model)"),Zko=l(),x2=a("li"),Yce=a("strong"),eSo=o("xlnet"),oSo=o(" \u2014 "),eG=a("a"),rSo=o("XLNetForMultipleChoice"),tSo=o(" (XLNet model)"),aSo=l(),$2=a("li"),Kce=a("strong"),nSo=o("yoso"),sSo=o(" \u2014 "),oG=a("a"),lSo=o("YosoForMultipleChoice"),iSo=o(" (YOSO model)"),dSo=l(),k2=a("p"),cSo=o("The model is set in evaluation mode by default using "),Zce=a("code"),fSo=o("model.eval()"),mSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),efe=a("code"),gSo=o("model.train()"),hSo=l(),F(S2.$$.fragment),ePe=l(),qi=a("h2"),R2=a("a"),ofe=a("span"),F(BA.$$.fragment),pSo=l(),rfe=a("span"),uSo=o("AutoModelForNextSentencePrediction"),oPe=l(),Po=a("div"),F(PA.$$.fragment),_So=l(),Ni=a("p"),bSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rG=a("a"),vSo=o("from_pretrained()"),FSo=o(" class method or the "),tG=a("a"),TSo=o("from_config()"),MSo=o(` class
method.`),ESo=l(),IA=a("p"),CSo=o("This class cannot be instantiated directly using "),tfe=a("code"),wSo=o("__init__()"),ASo=o(" (throws an error)."),ySo=l(),st=a("div"),F(qA.$$.fragment),LSo=l(),afe=a("p"),xSo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$So=l(),ji=a("p"),kSo=o(`Note:
Loading a model from its configuration file does `),nfe=a("strong"),SSo=o("not"),RSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aG=a("a"),BSo=o("from_pretrained()"),PSo=o(" to load the model weights."),ISo=l(),F(B2.$$.fragment),qSo=l(),oo=a("div"),F(NA.$$.fragment),NSo=l(),sfe=a("p"),jSo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DSo=l(),$a=a("p"),GSo=o("The model class to instantiate is selected based on the "),lfe=a("code"),OSo=o("model_type"),VSo=o(` property of the config object (either
passed as an argument or loaded from `),ife=a("code"),XSo=o("pretrained_model_name_or_path"),zSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=a("code"),QSo=o("pretrained_model_name_or_path"),WSo=o(":"),HSo=l(),Ur=a("ul"),P2=a("li"),cfe=a("strong"),USo=o("bert"),JSo=o(" \u2014 "),nG=a("a"),YSo=o("BertForNextSentencePrediction"),KSo=o(" (BERT model)"),ZSo=l(),I2=a("li"),ffe=a("strong"),eRo=o("fnet"),oRo=o(" \u2014 "),sG=a("a"),rRo=o("FNetForNextSentencePrediction"),tRo=o(" (FNet model)"),aRo=l(),q2=a("li"),mfe=a("strong"),nRo=o("megatron-bert"),sRo=o(" \u2014 "),lG=a("a"),lRo=o("MegatronBertForNextSentencePrediction"),iRo=o(" (MegatronBert model)"),dRo=l(),N2=a("li"),gfe=a("strong"),cRo=o("mobilebert"),fRo=o(" \u2014 "),iG=a("a"),mRo=o("MobileBertForNextSentencePrediction"),gRo=o(" (MobileBERT model)"),hRo=l(),j2=a("li"),hfe=a("strong"),pRo=o("qdqbert"),uRo=o(" \u2014 "),dG=a("a"),_Ro=o("QDQBertForNextSentencePrediction"),bRo=o(" (QDQBert model)"),vRo=l(),D2=a("p"),FRo=o("The model is set in evaluation mode by default using "),pfe=a("code"),TRo=o("model.eval()"),MRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=a("code"),ERo=o("model.train()"),CRo=l(),F(G2.$$.fragment),rPe=l(),Di=a("h2"),O2=a("a"),_fe=a("span"),F(jA.$$.fragment),wRo=l(),bfe=a("span"),ARo=o("AutoModelForTokenClassification"),tPe=l(),Io=a("div"),F(DA.$$.fragment),yRo=l(),Gi=a("p"),LRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cG=a("a"),xRo=o("from_pretrained()"),$Ro=o(" class method or the "),fG=a("a"),kRo=o("from_config()"),SRo=o(` class
method.`),RRo=l(),GA=a("p"),BRo=o("This class cannot be instantiated directly using "),vfe=a("code"),PRo=o("__init__()"),IRo=o(" (throws an error)."),qRo=l(),lt=a("div"),F(OA.$$.fragment),NRo=l(),Ffe=a("p"),jRo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),DRo=l(),Oi=a("p"),GRo=o(`Note:
Loading a model from its configuration file does `),Tfe=a("strong"),ORo=o("not"),VRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mG=a("a"),XRo=o("from_pretrained()"),zRo=o(" to load the model weights."),QRo=l(),F(V2.$$.fragment),WRo=l(),ro=a("div"),F(VA.$$.fragment),HRo=l(),Mfe=a("p"),URo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JRo=l(),ka=a("p"),YRo=o("The model class to instantiate is selected based on the "),Efe=a("code"),KRo=o("model_type"),ZRo=o(` property of the config object (either
passed as an argument or loaded from `),Cfe=a("code"),eBo=o("pretrained_model_name_or_path"),oBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=a("code"),rBo=o("pretrained_model_name_or_path"),tBo=o(":"),aBo=l(),U=a("ul"),X2=a("li"),Afe=a("strong"),nBo=o("albert"),sBo=o(" \u2014 "),gG=a("a"),lBo=o("AlbertForTokenClassification"),iBo=o(" (ALBERT model)"),dBo=l(),z2=a("li"),yfe=a("strong"),cBo=o("bert"),fBo=o(" \u2014 "),hG=a("a"),mBo=o("BertForTokenClassification"),gBo=o(" (BERT model)"),hBo=l(),Q2=a("li"),Lfe=a("strong"),pBo=o("big_bird"),uBo=o(" \u2014 "),pG=a("a"),_Bo=o("BigBirdForTokenClassification"),bBo=o(" (BigBird model)"),vBo=l(),W2=a("li"),xfe=a("strong"),FBo=o("camembert"),TBo=o(" \u2014 "),uG=a("a"),MBo=o("CamembertForTokenClassification"),EBo=o(" (CamemBERT model)"),CBo=l(),H2=a("li"),$fe=a("strong"),wBo=o("canine"),ABo=o(" \u2014 "),_G=a("a"),yBo=o("CanineForTokenClassification"),LBo=o(" (Canine model)"),xBo=l(),U2=a("li"),kfe=a("strong"),$Bo=o("convbert"),kBo=o(" \u2014 "),bG=a("a"),SBo=o("ConvBertForTokenClassification"),RBo=o(" (ConvBERT model)"),BBo=l(),J2=a("li"),Sfe=a("strong"),PBo=o("data2vec-text"),IBo=o(" \u2014 "),vG=a("a"),qBo=o("Data2VecTextForTokenClassification"),NBo=o(" (Data2VecText model)"),jBo=l(),Y2=a("li"),Rfe=a("strong"),DBo=o("deberta"),GBo=o(" \u2014 "),FG=a("a"),OBo=o("DebertaForTokenClassification"),VBo=o(" (DeBERTa model)"),XBo=l(),K2=a("li"),Bfe=a("strong"),zBo=o("deberta-v2"),QBo=o(" \u2014 "),TG=a("a"),WBo=o("DebertaV2ForTokenClassification"),HBo=o(" (DeBERTa-v2 model)"),UBo=l(),Z2=a("li"),Pfe=a("strong"),JBo=o("distilbert"),YBo=o(" \u2014 "),MG=a("a"),KBo=o("DistilBertForTokenClassification"),ZBo=o(" (DistilBERT model)"),ePo=l(),ev=a("li"),Ife=a("strong"),oPo=o("electra"),rPo=o(" \u2014 "),EG=a("a"),tPo=o("ElectraForTokenClassification"),aPo=o(" (ELECTRA model)"),nPo=l(),ov=a("li"),qfe=a("strong"),sPo=o("flaubert"),lPo=o(" \u2014 "),CG=a("a"),iPo=o("FlaubertForTokenClassification"),dPo=o(" (FlauBERT model)"),cPo=l(),rv=a("li"),Nfe=a("strong"),fPo=o("fnet"),mPo=o(" \u2014 "),wG=a("a"),gPo=o("FNetForTokenClassification"),hPo=o(" (FNet model)"),pPo=l(),tv=a("li"),jfe=a("strong"),uPo=o("funnel"),_Po=o(" \u2014 "),AG=a("a"),bPo=o("FunnelForTokenClassification"),vPo=o(" (Funnel Transformer model)"),FPo=l(),av=a("li"),Dfe=a("strong"),TPo=o("gpt2"),MPo=o(" \u2014 "),yG=a("a"),EPo=o("GPT2ForTokenClassification"),CPo=o(" (OpenAI GPT-2 model)"),wPo=l(),nv=a("li"),Gfe=a("strong"),APo=o("ibert"),yPo=o(" \u2014 "),LG=a("a"),LPo=o("IBertForTokenClassification"),xPo=o(" (I-BERT model)"),$Po=l(),sv=a("li"),Ofe=a("strong"),kPo=o("layoutlm"),SPo=o(" \u2014 "),xG=a("a"),RPo=o("LayoutLMForTokenClassification"),BPo=o(" (LayoutLM model)"),PPo=l(),lv=a("li"),Vfe=a("strong"),IPo=o("layoutlmv2"),qPo=o(" \u2014 "),$G=a("a"),NPo=o("LayoutLMv2ForTokenClassification"),jPo=o(" (LayoutLMv2 model)"),DPo=l(),iv=a("li"),Xfe=a("strong"),GPo=o("longformer"),OPo=o(" \u2014 "),kG=a("a"),VPo=o("LongformerForTokenClassification"),XPo=o(" (Longformer model)"),zPo=l(),dv=a("li"),zfe=a("strong"),QPo=o("megatron-bert"),WPo=o(" \u2014 "),SG=a("a"),HPo=o("MegatronBertForTokenClassification"),UPo=o(" (MegatronBert model)"),JPo=l(),cv=a("li"),Qfe=a("strong"),YPo=o("mobilebert"),KPo=o(" \u2014 "),RG=a("a"),ZPo=o("MobileBertForTokenClassification"),eIo=o(" (MobileBERT model)"),oIo=l(),fv=a("li"),Wfe=a("strong"),rIo=o("mpnet"),tIo=o(" \u2014 "),BG=a("a"),aIo=o("MPNetForTokenClassification"),nIo=o(" (MPNet model)"),sIo=l(),mv=a("li"),Hfe=a("strong"),lIo=o("nystromformer"),iIo=o(" \u2014 "),PG=a("a"),dIo=o("NystromformerForTokenClassification"),cIo=o(" (Nystromformer model)"),fIo=l(),gv=a("li"),Ufe=a("strong"),mIo=o("qdqbert"),gIo=o(" \u2014 "),IG=a("a"),hIo=o("QDQBertForTokenClassification"),pIo=o(" (QDQBert model)"),uIo=l(),hv=a("li"),Jfe=a("strong"),_Io=o("rembert"),bIo=o(" \u2014 "),qG=a("a"),vIo=o("RemBertForTokenClassification"),FIo=o(" (RemBERT model)"),TIo=l(),pv=a("li"),Yfe=a("strong"),MIo=o("roberta"),EIo=o(" \u2014 "),NG=a("a"),CIo=o("RobertaForTokenClassification"),wIo=o(" (RoBERTa model)"),AIo=l(),uv=a("li"),Kfe=a("strong"),yIo=o("roformer"),LIo=o(" \u2014 "),jG=a("a"),xIo=o("RoFormerForTokenClassification"),$Io=o(" (RoFormer model)"),kIo=l(),_v=a("li"),Zfe=a("strong"),SIo=o("squeezebert"),RIo=o(" \u2014 "),DG=a("a"),BIo=o("SqueezeBertForTokenClassification"),PIo=o(" (SqueezeBERT model)"),IIo=l(),bv=a("li"),eme=a("strong"),qIo=o("xlm"),NIo=o(" \u2014 "),GG=a("a"),jIo=o("XLMForTokenClassification"),DIo=o(" (XLM model)"),GIo=l(),vv=a("li"),ome=a("strong"),OIo=o("xlm-roberta"),VIo=o(" \u2014 "),OG=a("a"),XIo=o("XLMRobertaForTokenClassification"),zIo=o(" (XLM-RoBERTa model)"),QIo=l(),Fv=a("li"),rme=a("strong"),WIo=o("xlm-roberta-xl"),HIo=o(" \u2014 "),VG=a("a"),UIo=o("XLMRobertaXLForTokenClassification"),JIo=o(" (XLM-RoBERTa-XL model)"),YIo=l(),Tv=a("li"),tme=a("strong"),KIo=o("xlnet"),ZIo=o(" \u2014 "),XG=a("a"),eqo=o("XLNetForTokenClassification"),oqo=o(" (XLNet model)"),rqo=l(),Mv=a("li"),ame=a("strong"),tqo=o("yoso"),aqo=o(" \u2014 "),zG=a("a"),nqo=o("YosoForTokenClassification"),sqo=o(" (YOSO model)"),lqo=l(),Ev=a("p"),iqo=o("The model is set in evaluation mode by default using "),nme=a("code"),dqo=o("model.eval()"),cqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sme=a("code"),fqo=o("model.train()"),mqo=l(),F(Cv.$$.fragment),aPe=l(),Vi=a("h2"),wv=a("a"),lme=a("span"),F(XA.$$.fragment),gqo=l(),ime=a("span"),hqo=o("AutoModelForQuestionAnswering"),nPe=l(),qo=a("div"),F(zA.$$.fragment),pqo=l(),Xi=a("p"),uqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),QG=a("a"),_qo=o("from_pretrained()"),bqo=o(" class method or the "),WG=a("a"),vqo=o("from_config()"),Fqo=o(` class
method.`),Tqo=l(),QA=a("p"),Mqo=o("This class cannot be instantiated directly using "),dme=a("code"),Eqo=o("__init__()"),Cqo=o(" (throws an error)."),wqo=l(),it=a("div"),F(WA.$$.fragment),Aqo=l(),cme=a("p"),yqo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Lqo=l(),zi=a("p"),xqo=o(`Note:
Loading a model from its configuration file does `),fme=a("strong"),$qo=o("not"),kqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=a("a"),Sqo=o("from_pretrained()"),Rqo=o(" to load the model weights."),Bqo=l(),F(Av.$$.fragment),Pqo=l(),to=a("div"),F(HA.$$.fragment),Iqo=l(),mme=a("p"),qqo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Nqo=l(),Sa=a("p"),jqo=o("The model class to instantiate is selected based on the "),gme=a("code"),Dqo=o("model_type"),Gqo=o(` property of the config object (either
passed as an argument or loaded from `),hme=a("code"),Oqo=o("pretrained_model_name_or_path"),Vqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pme=a("code"),Xqo=o("pretrained_model_name_or_path"),zqo=o(":"),Qqo=l(),O=a("ul"),yv=a("li"),ume=a("strong"),Wqo=o("albert"),Hqo=o(" \u2014 "),UG=a("a"),Uqo=o("AlbertForQuestionAnswering"),Jqo=o(" (ALBERT model)"),Yqo=l(),Lv=a("li"),_me=a("strong"),Kqo=o("bart"),Zqo=o(" \u2014 "),JG=a("a"),eNo=o("BartForQuestionAnswering"),oNo=o(" (BART model)"),rNo=l(),xv=a("li"),bme=a("strong"),tNo=o("bert"),aNo=o(" \u2014 "),YG=a("a"),nNo=o("BertForQuestionAnswering"),sNo=o(" (BERT model)"),lNo=l(),$v=a("li"),vme=a("strong"),iNo=o("big_bird"),dNo=o(" \u2014 "),KG=a("a"),cNo=o("BigBirdForQuestionAnswering"),fNo=o(" (BigBird model)"),mNo=l(),kv=a("li"),Fme=a("strong"),gNo=o("bigbird_pegasus"),hNo=o(" \u2014 "),ZG=a("a"),pNo=o("BigBirdPegasusForQuestionAnswering"),uNo=o(" (BigBirdPegasus model)"),_No=l(),Sv=a("li"),Tme=a("strong"),bNo=o("camembert"),vNo=o(" \u2014 "),eO=a("a"),FNo=o("CamembertForQuestionAnswering"),TNo=o(" (CamemBERT model)"),MNo=l(),Rv=a("li"),Mme=a("strong"),ENo=o("canine"),CNo=o(" \u2014 "),oO=a("a"),wNo=o("CanineForQuestionAnswering"),ANo=o(" (Canine model)"),yNo=l(),Bv=a("li"),Eme=a("strong"),LNo=o("convbert"),xNo=o(" \u2014 "),rO=a("a"),$No=o("ConvBertForQuestionAnswering"),kNo=o(" (ConvBERT model)"),SNo=l(),Pv=a("li"),Cme=a("strong"),RNo=o("data2vec-text"),BNo=o(" \u2014 "),tO=a("a"),PNo=o("Data2VecTextForQuestionAnswering"),INo=o(" (Data2VecText model)"),qNo=l(),Iv=a("li"),wme=a("strong"),NNo=o("deberta"),jNo=o(" \u2014 "),aO=a("a"),DNo=o("DebertaForQuestionAnswering"),GNo=o(" (DeBERTa model)"),ONo=l(),qv=a("li"),Ame=a("strong"),VNo=o("deberta-v2"),XNo=o(" \u2014 "),nO=a("a"),zNo=o("DebertaV2ForQuestionAnswering"),QNo=o(" (DeBERTa-v2 model)"),WNo=l(),Nv=a("li"),yme=a("strong"),HNo=o("distilbert"),UNo=o(" \u2014 "),sO=a("a"),JNo=o("DistilBertForQuestionAnswering"),YNo=o(" (DistilBERT model)"),KNo=l(),jv=a("li"),Lme=a("strong"),ZNo=o("electra"),ejo=o(" \u2014 "),lO=a("a"),ojo=o("ElectraForQuestionAnswering"),rjo=o(" (ELECTRA model)"),tjo=l(),Dv=a("li"),xme=a("strong"),ajo=o("flaubert"),njo=o(" \u2014 "),iO=a("a"),sjo=o("FlaubertForQuestionAnsweringSimple"),ljo=o(" (FlauBERT model)"),ijo=l(),Gv=a("li"),$me=a("strong"),djo=o("fnet"),cjo=o(" \u2014 "),dO=a("a"),fjo=o("FNetForQuestionAnswering"),mjo=o(" (FNet model)"),gjo=l(),Ov=a("li"),kme=a("strong"),hjo=o("funnel"),pjo=o(" \u2014 "),cO=a("a"),ujo=o("FunnelForQuestionAnswering"),_jo=o(" (Funnel Transformer model)"),bjo=l(),Vv=a("li"),Sme=a("strong"),vjo=o("gptj"),Fjo=o(" \u2014 "),fO=a("a"),Tjo=o("GPTJForQuestionAnswering"),Mjo=o(" (GPT-J model)"),Ejo=l(),Xv=a("li"),Rme=a("strong"),Cjo=o("ibert"),wjo=o(" \u2014 "),mO=a("a"),Ajo=o("IBertForQuestionAnswering"),yjo=o(" (I-BERT model)"),Ljo=l(),zv=a("li"),Bme=a("strong"),xjo=o("layoutlmv2"),$jo=o(" \u2014 "),gO=a("a"),kjo=o("LayoutLMv2ForQuestionAnswering"),Sjo=o(" (LayoutLMv2 model)"),Rjo=l(),Qv=a("li"),Pme=a("strong"),Bjo=o("led"),Pjo=o(" \u2014 "),hO=a("a"),Ijo=o("LEDForQuestionAnswering"),qjo=o(" (LED model)"),Njo=l(),Wv=a("li"),Ime=a("strong"),jjo=o("longformer"),Djo=o(" \u2014 "),pO=a("a"),Gjo=o("LongformerForQuestionAnswering"),Ojo=o(" (Longformer model)"),Vjo=l(),Hv=a("li"),qme=a("strong"),Xjo=o("lxmert"),zjo=o(" \u2014 "),uO=a("a"),Qjo=o("LxmertForQuestionAnswering"),Wjo=o(" (LXMERT model)"),Hjo=l(),Uv=a("li"),Nme=a("strong"),Ujo=o("mbart"),Jjo=o(" \u2014 "),_O=a("a"),Yjo=o("MBartForQuestionAnswering"),Kjo=o(" (mBART model)"),Zjo=l(),Jv=a("li"),jme=a("strong"),eDo=o("megatron-bert"),oDo=o(" \u2014 "),bO=a("a"),rDo=o("MegatronBertForQuestionAnswering"),tDo=o(" (MegatronBert model)"),aDo=l(),Yv=a("li"),Dme=a("strong"),nDo=o("mobilebert"),sDo=o(" \u2014 "),vO=a("a"),lDo=o("MobileBertForQuestionAnswering"),iDo=o(" (MobileBERT model)"),dDo=l(),Kv=a("li"),Gme=a("strong"),cDo=o("mpnet"),fDo=o(" \u2014 "),FO=a("a"),mDo=o("MPNetForQuestionAnswering"),gDo=o(" (MPNet model)"),hDo=l(),Zv=a("li"),Ome=a("strong"),pDo=o("nystromformer"),uDo=o(" \u2014 "),TO=a("a"),_Do=o("NystromformerForQuestionAnswering"),bDo=o(" (Nystromformer model)"),vDo=l(),eF=a("li"),Vme=a("strong"),FDo=o("qdqbert"),TDo=o(" \u2014 "),MO=a("a"),MDo=o("QDQBertForQuestionAnswering"),EDo=o(" (QDQBert model)"),CDo=l(),oF=a("li"),Xme=a("strong"),wDo=o("reformer"),ADo=o(" \u2014 "),EO=a("a"),yDo=o("ReformerForQuestionAnswering"),LDo=o(" (Reformer model)"),xDo=l(),rF=a("li"),zme=a("strong"),$Do=o("rembert"),kDo=o(" \u2014 "),CO=a("a"),SDo=o("RemBertForQuestionAnswering"),RDo=o(" (RemBERT model)"),BDo=l(),tF=a("li"),Qme=a("strong"),PDo=o("roberta"),IDo=o(" \u2014 "),wO=a("a"),qDo=o("RobertaForQuestionAnswering"),NDo=o(" (RoBERTa model)"),jDo=l(),aF=a("li"),Wme=a("strong"),DDo=o("roformer"),GDo=o(" \u2014 "),AO=a("a"),ODo=o("RoFormerForQuestionAnswering"),VDo=o(" (RoFormer model)"),XDo=l(),nF=a("li"),Hme=a("strong"),zDo=o("splinter"),QDo=o(" \u2014 "),yO=a("a"),WDo=o("SplinterForQuestionAnswering"),HDo=o(" (Splinter model)"),UDo=l(),sF=a("li"),Ume=a("strong"),JDo=o("squeezebert"),YDo=o(" \u2014 "),LO=a("a"),KDo=o("SqueezeBertForQuestionAnswering"),ZDo=o(" (SqueezeBERT model)"),eGo=l(),lF=a("li"),Jme=a("strong"),oGo=o("xlm"),rGo=o(" \u2014 "),xO=a("a"),tGo=o("XLMForQuestionAnsweringSimple"),aGo=o(" (XLM model)"),nGo=l(),iF=a("li"),Yme=a("strong"),sGo=o("xlm-roberta"),lGo=o(" \u2014 "),$O=a("a"),iGo=o("XLMRobertaForQuestionAnswering"),dGo=o(" (XLM-RoBERTa model)"),cGo=l(),dF=a("li"),Kme=a("strong"),fGo=o("xlm-roberta-xl"),mGo=o(" \u2014 "),kO=a("a"),gGo=o("XLMRobertaXLForQuestionAnswering"),hGo=o(" (XLM-RoBERTa-XL model)"),pGo=l(),cF=a("li"),Zme=a("strong"),uGo=o("xlnet"),_Go=o(" \u2014 "),SO=a("a"),bGo=o("XLNetForQuestionAnsweringSimple"),vGo=o(" (XLNet model)"),FGo=l(),fF=a("li"),ege=a("strong"),TGo=o("yoso"),MGo=o(" \u2014 "),RO=a("a"),EGo=o("YosoForQuestionAnswering"),CGo=o(" (YOSO model)"),wGo=l(),mF=a("p"),AGo=o("The model is set in evaluation mode by default using "),oge=a("code"),yGo=o("model.eval()"),LGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rge=a("code"),xGo=o("model.train()"),$Go=l(),F(gF.$$.fragment),sPe=l(),Qi=a("h2"),hF=a("a"),tge=a("span"),F(UA.$$.fragment),kGo=l(),age=a("span"),SGo=o("AutoModelForTableQuestionAnswering"),lPe=l(),No=a("div"),F(JA.$$.fragment),RGo=l(),Wi=a("p"),BGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BO=a("a"),PGo=o("from_pretrained()"),IGo=o(" class method or the "),PO=a("a"),qGo=o("from_config()"),NGo=o(` class
method.`),jGo=l(),YA=a("p"),DGo=o("This class cannot be instantiated directly using "),nge=a("code"),GGo=o("__init__()"),OGo=o(" (throws an error)."),VGo=l(),dt=a("div"),F(KA.$$.fragment),XGo=l(),sge=a("p"),zGo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),QGo=l(),Hi=a("p"),WGo=o(`Note:
Loading a model from its configuration file does `),lge=a("strong"),HGo=o("not"),UGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=a("a"),JGo=o("from_pretrained()"),YGo=o(" to load the model weights."),KGo=l(),F(pF.$$.fragment),ZGo=l(),ao=a("div"),F(ZA.$$.fragment),eOo=l(),ige=a("p"),oOo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),rOo=l(),Ra=a("p"),tOo=o("The model class to instantiate is selected based on the "),dge=a("code"),aOo=o("model_type"),nOo=o(` property of the config object (either
passed as an argument or loaded from `),cge=a("code"),sOo=o("pretrained_model_name_or_path"),lOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fge=a("code"),iOo=o("pretrained_model_name_or_path"),dOo=o(":"),cOo=l(),mge=a("ul"),uF=a("li"),gge=a("strong"),fOo=o("tapas"),mOo=o(" \u2014 "),qO=a("a"),gOo=o("TapasForQuestionAnswering"),hOo=o(" (TAPAS model)"),pOo=l(),_F=a("p"),uOo=o("The model is set in evaluation mode by default using "),hge=a("code"),_Oo=o("model.eval()"),bOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=a("code"),vOo=o("model.train()"),FOo=l(),F(bF.$$.fragment),iPe=l(),Ui=a("h2"),vF=a("a"),uge=a("span"),F(e6.$$.fragment),TOo=l(),_ge=a("span"),MOo=o("AutoModelForImageClassification"),dPe=l(),jo=a("div"),F(o6.$$.fragment),EOo=l(),Ji=a("p"),COo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NO=a("a"),wOo=o("from_pretrained()"),AOo=o(" class method or the "),jO=a("a"),yOo=o("from_config()"),LOo=o(` class
method.`),xOo=l(),r6=a("p"),$Oo=o("This class cannot be instantiated directly using "),bge=a("code"),kOo=o("__init__()"),SOo=o(" (throws an error)."),ROo=l(),ct=a("div"),F(t6.$$.fragment),BOo=l(),vge=a("p"),POo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),IOo=l(),Yi=a("p"),qOo=o(`Note:
Loading a model from its configuration file does `),Fge=a("strong"),NOo=o("not"),jOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=a("a"),DOo=o("from_pretrained()"),GOo=o(" to load the model weights."),OOo=l(),F(FF.$$.fragment),VOo=l(),no=a("div"),F(a6.$$.fragment),XOo=l(),Tge=a("p"),zOo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),QOo=l(),Ba=a("p"),WOo=o("The model class to instantiate is selected based on the "),Mge=a("code"),HOo=o("model_type"),UOo=o(` property of the config object (either
passed as an argument or loaded from `),Ege=a("code"),JOo=o("pretrained_model_name_or_path"),YOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=a("code"),KOo=o("pretrained_model_name_or_path"),ZOo=o(":"),eVo=l(),ve=a("ul"),TF=a("li"),wge=a("strong"),oVo=o("beit"),rVo=o(" \u2014 "),GO=a("a"),tVo=o("BeitForImageClassification"),aVo=o(" (BEiT model)"),nVo=l(),MF=a("li"),Age=a("strong"),sVo=o("convnext"),lVo=o(" \u2014 "),OO=a("a"),iVo=o("ConvNextForImageClassification"),dVo=o(" (ConvNext model)"),cVo=l(),EF=a("li"),yge=a("strong"),fVo=o("data2vec-vision"),mVo=o(" \u2014 "),VO=a("a"),gVo=o("Data2VecVisionForImageClassification"),hVo=o(" (Data2VecVision model)"),pVo=l(),$s=a("li"),Lge=a("strong"),uVo=o("deit"),_Vo=o(" \u2014 "),XO=a("a"),bVo=o("DeiTForImageClassification"),vVo=o(" or "),zO=a("a"),FVo=o("DeiTForImageClassificationWithTeacher"),TVo=o(" (DeiT model)"),MVo=l(),CF=a("li"),xge=a("strong"),EVo=o("imagegpt"),CVo=o(" \u2014 "),QO=a("a"),wVo=o("ImageGPTForImageClassification"),AVo=o(" (ImageGPT model)"),yVo=l(),ft=a("li"),$ge=a("strong"),LVo=o("perceiver"),xVo=o(" \u2014 "),WO=a("a"),$Vo=o("PerceiverForImageClassificationLearned"),kVo=o(" or "),HO=a("a"),SVo=o("PerceiverForImageClassificationFourier"),RVo=o(" or "),UO=a("a"),BVo=o("PerceiverForImageClassificationConvProcessing"),PVo=o(" (Perceiver model)"),IVo=l(),wF=a("li"),kge=a("strong"),qVo=o("poolformer"),NVo=o(" \u2014 "),JO=a("a"),jVo=o("PoolFormerForImageClassification"),DVo=o(" (PoolFormer model)"),GVo=l(),AF=a("li"),Sge=a("strong"),OVo=o("regnet"),VVo=o(" \u2014 "),YO=a("a"),XVo=o("RegNetForImageClassification"),zVo=o(" (RegNet model)"),QVo=l(),yF=a("li"),Rge=a("strong"),WVo=o("resnet"),HVo=o(" \u2014 "),KO=a("a"),UVo=o("ResNetForImageClassification"),JVo=o(" (ResNet model)"),YVo=l(),LF=a("li"),Bge=a("strong"),KVo=o("segformer"),ZVo=o(" \u2014 "),ZO=a("a"),eXo=o("SegformerForImageClassification"),oXo=o(" (SegFormer model)"),rXo=l(),xF=a("li"),Pge=a("strong"),tXo=o("swin"),aXo=o(" \u2014 "),eV=a("a"),nXo=o("SwinForImageClassification"),sXo=o(" (Swin model)"),lXo=l(),$F=a("li"),Ige=a("strong"),iXo=o("van"),dXo=o(" \u2014 "),oV=a("a"),cXo=o("VanForImageClassification"),fXo=o(" (VAN model)"),mXo=l(),kF=a("li"),qge=a("strong"),gXo=o("vit"),hXo=o(" \u2014 "),rV=a("a"),pXo=o("ViTForImageClassification"),uXo=o(" (ViT model)"),_Xo=l(),SF=a("p"),bXo=o("The model is set in evaluation mode by default using "),Nge=a("code"),vXo=o("model.eval()"),FXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jge=a("code"),TXo=o("model.train()"),MXo=l(),F(RF.$$.fragment),cPe=l(),Ki=a("h2"),BF=a("a"),Dge=a("span"),F(n6.$$.fragment),EXo=l(),Gge=a("span"),CXo=o("AutoModelForVision2Seq"),fPe=l(),Do=a("div"),F(s6.$$.fragment),wXo=l(),Zi=a("p"),AXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tV=a("a"),yXo=o("from_pretrained()"),LXo=o(" class method or the "),aV=a("a"),xXo=o("from_config()"),$Xo=o(` class
method.`),kXo=l(),l6=a("p"),SXo=o("This class cannot be instantiated directly using "),Oge=a("code"),RXo=o("__init__()"),BXo=o(" (throws an error)."),PXo=l(),mt=a("div"),F(i6.$$.fragment),IXo=l(),Vge=a("p"),qXo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),NXo=l(),ed=a("p"),jXo=o(`Note:
Loading a model from its configuration file does `),Xge=a("strong"),DXo=o("not"),GXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nV=a("a"),OXo=o("from_pretrained()"),VXo=o(" to load the model weights."),XXo=l(),F(PF.$$.fragment),zXo=l(),so=a("div"),F(d6.$$.fragment),QXo=l(),zge=a("p"),WXo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),HXo=l(),Pa=a("p"),UXo=o("The model class to instantiate is selected based on the "),Qge=a("code"),JXo=o("model_type"),YXo=o(` property of the config object (either
passed as an argument or loaded from `),Wge=a("code"),KXo=o("pretrained_model_name_or_path"),ZXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hge=a("code"),ezo=o("pretrained_model_name_or_path"),ozo=o(":"),rzo=l(),Uge=a("ul"),IF=a("li"),Jge=a("strong"),tzo=o("vision-encoder-decoder"),azo=o(" \u2014 "),sV=a("a"),nzo=o("VisionEncoderDecoderModel"),szo=o(" (Vision Encoder decoder model)"),lzo=l(),qF=a("p"),izo=o("The model is set in evaluation mode by default using "),Yge=a("code"),dzo=o("model.eval()"),czo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=a("code"),fzo=o("model.train()"),mzo=l(),F(NF.$$.fragment),mPe=l(),od=a("h2"),jF=a("a"),Zge=a("span"),F(c6.$$.fragment),gzo=l(),ehe=a("span"),hzo=o("AutoModelForAudioClassification"),gPe=l(),Go=a("div"),F(f6.$$.fragment),pzo=l(),rd=a("p"),uzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),lV=a("a"),_zo=o("from_pretrained()"),bzo=o(" class method or the "),iV=a("a"),vzo=o("from_config()"),Fzo=o(` class
method.`),Tzo=l(),m6=a("p"),Mzo=o("This class cannot be instantiated directly using "),ohe=a("code"),Ezo=o("__init__()"),Czo=o(" (throws an error)."),wzo=l(),gt=a("div"),F(g6.$$.fragment),Azo=l(),rhe=a("p"),yzo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Lzo=l(),td=a("p"),xzo=o(`Note:
Loading a model from its configuration file does `),the=a("strong"),$zo=o("not"),kzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dV=a("a"),Szo=o("from_pretrained()"),Rzo=o(" to load the model weights."),Bzo=l(),F(DF.$$.fragment),Pzo=l(),lo=a("div"),F(h6.$$.fragment),Izo=l(),ahe=a("p"),qzo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Nzo=l(),Ia=a("p"),jzo=o("The model class to instantiate is selected based on the "),nhe=a("code"),Dzo=o("model_type"),Gzo=o(` property of the config object (either
passed as an argument or loaded from `),she=a("code"),Ozo=o("pretrained_model_name_or_path"),Vzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lhe=a("code"),Xzo=o("pretrained_model_name_or_path"),zzo=o(":"),Qzo=l(),Ne=a("ul"),GF=a("li"),ihe=a("strong"),Wzo=o("data2vec-audio"),Hzo=o(" \u2014 "),cV=a("a"),Uzo=o("Data2VecAudioForSequenceClassification"),Jzo=o(" (Data2VecAudio model)"),Yzo=l(),OF=a("li"),dhe=a("strong"),Kzo=o("hubert"),Zzo=o(" \u2014 "),fV=a("a"),eQo=o("HubertForSequenceClassification"),oQo=o(" (Hubert model)"),rQo=l(),VF=a("li"),che=a("strong"),tQo=o("sew"),aQo=o(" \u2014 "),mV=a("a"),nQo=o("SEWForSequenceClassification"),sQo=o(" (SEW model)"),lQo=l(),XF=a("li"),fhe=a("strong"),iQo=o("sew-d"),dQo=o(" \u2014 "),gV=a("a"),cQo=o("SEWDForSequenceClassification"),fQo=o(" (SEW-D model)"),mQo=l(),zF=a("li"),mhe=a("strong"),gQo=o("unispeech"),hQo=o(" \u2014 "),hV=a("a"),pQo=o("UniSpeechForSequenceClassification"),uQo=o(" (UniSpeech model)"),_Qo=l(),QF=a("li"),ghe=a("strong"),bQo=o("unispeech-sat"),vQo=o(" \u2014 "),pV=a("a"),FQo=o("UniSpeechSatForSequenceClassification"),TQo=o(" (UniSpeechSat model)"),MQo=l(),WF=a("li"),hhe=a("strong"),EQo=o("wav2vec2"),CQo=o(" \u2014 "),uV=a("a"),wQo=o("Wav2Vec2ForSequenceClassification"),AQo=o(" (Wav2Vec2 model)"),yQo=l(),HF=a("li"),phe=a("strong"),LQo=o("wavlm"),xQo=o(" \u2014 "),_V=a("a"),$Qo=o("WavLMForSequenceClassification"),kQo=o(" (WavLM model)"),SQo=l(),UF=a("p"),RQo=o("The model is set in evaluation mode by default using "),uhe=a("code"),BQo=o("model.eval()"),PQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_he=a("code"),IQo=o("model.train()"),qQo=l(),F(JF.$$.fragment),hPe=l(),ad=a("h2"),YF=a("a"),bhe=a("span"),F(p6.$$.fragment),NQo=l(),vhe=a("span"),jQo=o("AutoModelForAudioFrameClassification"),pPe=l(),Oo=a("div"),F(u6.$$.fragment),DQo=l(),nd=a("p"),GQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bV=a("a"),OQo=o("from_pretrained()"),VQo=o(" class method or the "),vV=a("a"),XQo=o("from_config()"),zQo=o(` class
method.`),QQo=l(),_6=a("p"),WQo=o("This class cannot be instantiated directly using "),Fhe=a("code"),HQo=o("__init__()"),UQo=o(" (throws an error)."),JQo=l(),ht=a("div"),F(b6.$$.fragment),YQo=l(),The=a("p"),KQo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ZQo=l(),sd=a("p"),eWo=o(`Note:
Loading a model from its configuration file does `),Mhe=a("strong"),oWo=o("not"),rWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FV=a("a"),tWo=o("from_pretrained()"),aWo=o(" to load the model weights."),nWo=l(),F(KF.$$.fragment),sWo=l(),io=a("div"),F(v6.$$.fragment),lWo=l(),Ehe=a("p"),iWo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),dWo=l(),qa=a("p"),cWo=o("The model class to instantiate is selected based on the "),Che=a("code"),fWo=o("model_type"),mWo=o(` property of the config object (either
passed as an argument or loaded from `),whe=a("code"),gWo=o("pretrained_model_name_or_path"),hWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=a("code"),pWo=o("pretrained_model_name_or_path"),uWo=o(":"),_Wo=l(),Na=a("ul"),ZF=a("li"),yhe=a("strong"),bWo=o("data2vec-audio"),vWo=o(" \u2014 "),TV=a("a"),FWo=o("Data2VecAudioForAudioFrameClassification"),TWo=o(" (Data2VecAudio model)"),MWo=l(),e0=a("li"),Lhe=a("strong"),EWo=o("unispeech-sat"),CWo=o(" \u2014 "),MV=a("a"),wWo=o("UniSpeechSatForAudioFrameClassification"),AWo=o(" (UniSpeechSat model)"),yWo=l(),o0=a("li"),xhe=a("strong"),LWo=o("wav2vec2"),xWo=o(" \u2014 "),EV=a("a"),$Wo=o("Wav2Vec2ForAudioFrameClassification"),kWo=o(" (Wav2Vec2 model)"),SWo=l(),r0=a("li"),$he=a("strong"),RWo=o("wavlm"),BWo=o(" \u2014 "),CV=a("a"),PWo=o("WavLMForAudioFrameClassification"),IWo=o(" (WavLM model)"),qWo=l(),t0=a("p"),NWo=o("The model is set in evaluation mode by default using "),khe=a("code"),jWo=o("model.eval()"),DWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),She=a("code"),GWo=o("model.train()"),OWo=l(),F(a0.$$.fragment),uPe=l(),ld=a("h2"),n0=a("a"),Rhe=a("span"),F(F6.$$.fragment),VWo=l(),Bhe=a("span"),XWo=o("AutoModelForCTC"),_Pe=l(),Vo=a("div"),F(T6.$$.fragment),zWo=l(),id=a("p"),QWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),wV=a("a"),WWo=o("from_pretrained()"),HWo=o(" class method or the "),AV=a("a"),UWo=o("from_config()"),JWo=o(` class
method.`),YWo=l(),M6=a("p"),KWo=o("This class cannot be instantiated directly using "),Phe=a("code"),ZWo=o("__init__()"),eHo=o(" (throws an error)."),oHo=l(),pt=a("div"),F(E6.$$.fragment),rHo=l(),Ihe=a("p"),tHo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),aHo=l(),dd=a("p"),nHo=o(`Note:
Loading a model from its configuration file does `),qhe=a("strong"),sHo=o("not"),lHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=a("a"),iHo=o("from_pretrained()"),dHo=o(" to load the model weights."),cHo=l(),F(s0.$$.fragment),fHo=l(),co=a("div"),F(C6.$$.fragment),mHo=l(),Nhe=a("p"),gHo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),hHo=l(),ja=a("p"),pHo=o("The model class to instantiate is selected based on the "),jhe=a("code"),uHo=o("model_type"),_Ho=o(` property of the config object (either
passed as an argument or loaded from `),Dhe=a("code"),bHo=o("pretrained_model_name_or_path"),vHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ghe=a("code"),FHo=o("pretrained_model_name_or_path"),THo=o(":"),MHo=l(),je=a("ul"),l0=a("li"),Ohe=a("strong"),EHo=o("data2vec-audio"),CHo=o(" \u2014 "),LV=a("a"),wHo=o("Data2VecAudioForCTC"),AHo=o(" (Data2VecAudio model)"),yHo=l(),i0=a("li"),Vhe=a("strong"),LHo=o("hubert"),xHo=o(" \u2014 "),xV=a("a"),$Ho=o("HubertForCTC"),kHo=o(" (Hubert model)"),SHo=l(),d0=a("li"),Xhe=a("strong"),RHo=o("sew"),BHo=o(" \u2014 "),$V=a("a"),PHo=o("SEWForCTC"),IHo=o(" (SEW model)"),qHo=l(),c0=a("li"),zhe=a("strong"),NHo=o("sew-d"),jHo=o(" \u2014 "),kV=a("a"),DHo=o("SEWDForCTC"),GHo=o(" (SEW-D model)"),OHo=l(),f0=a("li"),Qhe=a("strong"),VHo=o("unispeech"),XHo=o(" \u2014 "),SV=a("a"),zHo=o("UniSpeechForCTC"),QHo=o(" (UniSpeech model)"),WHo=l(),m0=a("li"),Whe=a("strong"),HHo=o("unispeech-sat"),UHo=o(" \u2014 "),RV=a("a"),JHo=o("UniSpeechSatForCTC"),YHo=o(" (UniSpeechSat model)"),KHo=l(),g0=a("li"),Hhe=a("strong"),ZHo=o("wav2vec2"),eUo=o(" \u2014 "),BV=a("a"),oUo=o("Wav2Vec2ForCTC"),rUo=o(" (Wav2Vec2 model)"),tUo=l(),h0=a("li"),Uhe=a("strong"),aUo=o("wavlm"),nUo=o(" \u2014 "),PV=a("a"),sUo=o("WavLMForCTC"),lUo=o(" (WavLM model)"),iUo=l(),p0=a("p"),dUo=o("The model is set in evaluation mode by default using "),Jhe=a("code"),cUo=o("model.eval()"),fUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=a("code"),mUo=o("model.train()"),gUo=l(),F(u0.$$.fragment),bPe=l(),cd=a("h2"),_0=a("a"),Khe=a("span"),F(w6.$$.fragment),hUo=l(),Zhe=a("span"),pUo=o("AutoModelForSpeechSeq2Seq"),vPe=l(),Xo=a("div"),F(A6.$$.fragment),uUo=l(),fd=a("p"),_Uo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IV=a("a"),bUo=o("from_pretrained()"),vUo=o(" class method or the "),qV=a("a"),FUo=o("from_config()"),TUo=o(` class
method.`),MUo=l(),y6=a("p"),EUo=o("This class cannot be instantiated directly using "),epe=a("code"),CUo=o("__init__()"),wUo=o(" (throws an error)."),AUo=l(),ut=a("div"),F(L6.$$.fragment),yUo=l(),ope=a("p"),LUo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xUo=l(),md=a("p"),$Uo=o(`Note:
Loading a model from its configuration file does `),rpe=a("strong"),kUo=o("not"),SUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=a("a"),RUo=o("from_pretrained()"),BUo=o(" to load the model weights."),PUo=l(),F(b0.$$.fragment),IUo=l(),fo=a("div"),F(x6.$$.fragment),qUo=l(),tpe=a("p"),NUo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jUo=l(),Da=a("p"),DUo=o("The model class to instantiate is selected based on the "),ape=a("code"),GUo=o("model_type"),OUo=o(` property of the config object (either
passed as an argument or loaded from `),npe=a("code"),VUo=o("pretrained_model_name_or_path"),XUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=a("code"),zUo=o("pretrained_model_name_or_path"),QUo=o(":"),WUo=l(),$6=a("ul"),v0=a("li"),lpe=a("strong"),HUo=o("speech-encoder-decoder"),UUo=o(" \u2014 "),jV=a("a"),JUo=o("SpeechEncoderDecoderModel"),YUo=o(" (Speech Encoder decoder model)"),KUo=l(),F0=a("li"),ipe=a("strong"),ZUo=o("speech_to_text"),eJo=o(" \u2014 "),DV=a("a"),oJo=o("Speech2TextForConditionalGeneration"),rJo=o(" (Speech2Text model)"),tJo=l(),T0=a("p"),aJo=o("The model is set in evaluation mode by default using "),dpe=a("code"),nJo=o("model.eval()"),sJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=a("code"),lJo=o("model.train()"),iJo=l(),F(M0.$$.fragment),FPe=l(),gd=a("h2"),E0=a("a"),fpe=a("span"),F(k6.$$.fragment),dJo=l(),mpe=a("span"),cJo=o("AutoModelForAudioXVector"),TPe=l(),zo=a("div"),F(S6.$$.fragment),fJo=l(),hd=a("p"),mJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),GV=a("a"),gJo=o("from_pretrained()"),hJo=o(" class method or the "),OV=a("a"),pJo=o("from_config()"),uJo=o(` class
method.`),_Jo=l(),R6=a("p"),bJo=o("This class cannot be instantiated directly using "),gpe=a("code"),vJo=o("__init__()"),FJo=o(" (throws an error)."),TJo=l(),_t=a("div"),F(B6.$$.fragment),MJo=l(),hpe=a("p"),EJo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),CJo=l(),pd=a("p"),wJo=o(`Note:
Loading a model from its configuration file does `),ppe=a("strong"),AJo=o("not"),yJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=a("a"),LJo=o("from_pretrained()"),xJo=o(" to load the model weights."),$Jo=l(),F(C0.$$.fragment),kJo=l(),mo=a("div"),F(P6.$$.fragment),SJo=l(),upe=a("p"),RJo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),BJo=l(),Ga=a("p"),PJo=o("The model class to instantiate is selected based on the "),_pe=a("code"),IJo=o("model_type"),qJo=o(` property of the config object (either
passed as an argument or loaded from `),bpe=a("code"),NJo=o("pretrained_model_name_or_path"),jJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=a("code"),DJo=o("pretrained_model_name_or_path"),GJo=o(":"),OJo=l(),Oa=a("ul"),w0=a("li"),Fpe=a("strong"),VJo=o("data2vec-audio"),XJo=o(" \u2014 "),XV=a("a"),zJo=o("Data2VecAudioForXVector"),QJo=o(" (Data2VecAudio model)"),WJo=l(),A0=a("li"),Tpe=a("strong"),HJo=o("unispeech-sat"),UJo=o(" \u2014 "),zV=a("a"),JJo=o("UniSpeechSatForXVector"),YJo=o(" (UniSpeechSat model)"),KJo=l(),y0=a("li"),Mpe=a("strong"),ZJo=o("wav2vec2"),eYo=o(" \u2014 "),QV=a("a"),oYo=o("Wav2Vec2ForXVector"),rYo=o(" (Wav2Vec2 model)"),tYo=l(),L0=a("li"),Epe=a("strong"),aYo=o("wavlm"),nYo=o(" \u2014 "),WV=a("a"),sYo=o("WavLMForXVector"),lYo=o(" (WavLM model)"),iYo=l(),x0=a("p"),dYo=o("The model is set in evaluation mode by default using "),Cpe=a("code"),cYo=o("model.eval()"),fYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wpe=a("code"),mYo=o("model.train()"),gYo=l(),F($0.$$.fragment),MPe=l(),ud=a("h2"),k0=a("a"),Ape=a("span"),F(I6.$$.fragment),hYo=l(),ype=a("span"),pYo=o("AutoModelForMaskedImageModeling"),EPe=l(),Qo=a("div"),F(q6.$$.fragment),uYo=l(),_d=a("p"),_Yo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),HV=a("a"),bYo=o("from_pretrained()"),vYo=o(" class method or the "),UV=a("a"),FYo=o("from_config()"),TYo=o(` class
method.`),MYo=l(),N6=a("p"),EYo=o("This class cannot be instantiated directly using "),Lpe=a("code"),CYo=o("__init__()"),wYo=o(" (throws an error)."),AYo=l(),bt=a("div"),F(j6.$$.fragment),yYo=l(),xpe=a("p"),LYo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),xYo=l(),bd=a("p"),$Yo=o(`Note:
Loading a model from its configuration file does `),$pe=a("strong"),kYo=o("not"),SYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=a("a"),RYo=o("from_pretrained()"),BYo=o(" to load the model weights."),PYo=l(),F(S0.$$.fragment),IYo=l(),go=a("div"),F(D6.$$.fragment),qYo=l(),kpe=a("p"),NYo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),jYo=l(),Va=a("p"),DYo=o("The model class to instantiate is selected based on the "),Spe=a("code"),GYo=o("model_type"),OYo=o(` property of the config object (either
passed as an argument or loaded from `),Rpe=a("code"),VYo=o("pretrained_model_name_or_path"),XYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=a("code"),zYo=o("pretrained_model_name_or_path"),QYo=o(":"),WYo=l(),vd=a("ul"),R0=a("li"),Ppe=a("strong"),HYo=o("deit"),UYo=o(" \u2014 "),YV=a("a"),JYo=o("DeiTForMaskedImageModeling"),YYo=o(" (DeiT model)"),KYo=l(),B0=a("li"),Ipe=a("strong"),ZYo=o("swin"),eKo=o(" \u2014 "),KV=a("a"),oKo=o("SwinForMaskedImageModeling"),rKo=o(" (Swin model)"),tKo=l(),P0=a("li"),qpe=a("strong"),aKo=o("vit"),nKo=o(" \u2014 "),ZV=a("a"),sKo=o("ViTForMaskedImageModeling"),lKo=o(" (ViT model)"),iKo=l(),I0=a("p"),dKo=o("The model is set in evaluation mode by default using "),Npe=a("code"),cKo=o("model.eval()"),fKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jpe=a("code"),mKo=o("model.train()"),gKo=l(),F(q0.$$.fragment),CPe=l(),Fd=a("h2"),N0=a("a"),Dpe=a("span"),F(G6.$$.fragment),hKo=l(),Gpe=a("span"),pKo=o("AutoModelForObjectDetection"),wPe=l(),Wo=a("div"),F(O6.$$.fragment),uKo=l(),Td=a("p"),_Ko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),eX=a("a"),bKo=o("from_pretrained()"),vKo=o(" class method or the "),oX=a("a"),FKo=o("from_config()"),TKo=o(` class
method.`),MKo=l(),V6=a("p"),EKo=o("This class cannot be instantiated directly using "),Ope=a("code"),CKo=o("__init__()"),wKo=o(" (throws an error)."),AKo=l(),vt=a("div"),F(X6.$$.fragment),yKo=l(),Vpe=a("p"),LKo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),xKo=l(),Md=a("p"),$Ko=o(`Note:
Loading a model from its configuration file does `),Xpe=a("strong"),kKo=o("not"),SKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=a("a"),RKo=o("from_pretrained()"),BKo=o(" to load the model weights."),PKo=l(),F(j0.$$.fragment),IKo=l(),ho=a("div"),F(z6.$$.fragment),qKo=l(),zpe=a("p"),NKo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),jKo=l(),Xa=a("p"),DKo=o("The model class to instantiate is selected based on the "),Qpe=a("code"),GKo=o("model_type"),OKo=o(` property of the config object (either
passed as an argument or loaded from `),Wpe=a("code"),VKo=o("pretrained_model_name_or_path"),XKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hpe=a("code"),zKo=o("pretrained_model_name_or_path"),QKo=o(":"),WKo=l(),Q6=a("ul"),D0=a("li"),Upe=a("strong"),HKo=o("detr"),UKo=o(" \u2014 "),tX=a("a"),JKo=o("DetrForObjectDetection"),YKo=o(" (DETR model)"),KKo=l(),G0=a("li"),Jpe=a("strong"),ZKo=o("yolos"),eZo=o(" \u2014 "),aX=a("a"),oZo=o("YolosForObjectDetection"),rZo=o(" (YOLOS model)"),tZo=l(),O0=a("p"),aZo=o("The model is set in evaluation mode by default using "),Ype=a("code"),nZo=o("model.eval()"),sZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kpe=a("code"),lZo=o("model.train()"),iZo=l(),F(V0.$$.fragment),APe=l(),Ed=a("h2"),X0=a("a"),Zpe=a("span"),F(W6.$$.fragment),dZo=l(),eue=a("span"),cZo=o("AutoModelForImageSegmentation"),yPe=l(),Ho=a("div"),F(H6.$$.fragment),fZo=l(),Cd=a("p"),mZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),nX=a("a"),gZo=o("from_pretrained()"),hZo=o(" class method or the "),sX=a("a"),pZo=o("from_config()"),uZo=o(` class
method.`),_Zo=l(),U6=a("p"),bZo=o("This class cannot be instantiated directly using "),oue=a("code"),vZo=o("__init__()"),FZo=o(" (throws an error)."),TZo=l(),Ft=a("div"),F(J6.$$.fragment),MZo=l(),rue=a("p"),EZo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),CZo=l(),wd=a("p"),wZo=o(`Note:
Loading a model from its configuration file does `),tue=a("strong"),AZo=o("not"),yZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=a("a"),LZo=o("from_pretrained()"),xZo=o(" to load the model weights."),$Zo=l(),F(z0.$$.fragment),kZo=l(),po=a("div"),F(Y6.$$.fragment),SZo=l(),aue=a("p"),RZo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),BZo=l(),za=a("p"),PZo=o("The model class to instantiate is selected based on the "),nue=a("code"),IZo=o("model_type"),qZo=o(` property of the config object (either
passed as an argument or loaded from `),sue=a("code"),NZo=o("pretrained_model_name_or_path"),jZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lue=a("code"),DZo=o("pretrained_model_name_or_path"),GZo=o(":"),OZo=l(),iue=a("ul"),Q0=a("li"),due=a("strong"),VZo=o("detr"),XZo=o(" \u2014 "),iX=a("a"),zZo=o("DetrForSegmentation"),QZo=o(" (DETR model)"),WZo=l(),W0=a("p"),HZo=o("The model is set in evaluation mode by default using "),cue=a("code"),UZo=o("model.eval()"),JZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fue=a("code"),YZo=o("model.train()"),KZo=l(),F(H0.$$.fragment),LPe=l(),Ad=a("h2"),U0=a("a"),mue=a("span"),F(K6.$$.fragment),ZZo=l(),gue=a("span"),eer=o("AutoModelForSemanticSegmentation"),xPe=l(),Uo=a("div"),F(Z6.$$.fragment),oer=l(),yd=a("p"),rer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),dX=a("a"),ter=o("from_pretrained()"),aer=o(" class method or the "),cX=a("a"),ner=o("from_config()"),ser=o(` class
method.`),ler=l(),ey=a("p"),ier=o("This class cannot be instantiated directly using "),hue=a("code"),der=o("__init__()"),cer=o(" (throws an error)."),fer=l(),Tt=a("div"),F(oy.$$.fragment),mer=l(),pue=a("p"),ger=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),her=l(),Ld=a("p"),per=o(`Note:
Loading a model from its configuration file does `),uue=a("strong"),uer=o("not"),_er=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=a("a"),ber=o("from_pretrained()"),ver=o(" to load the model weights."),Fer=l(),F(J0.$$.fragment),Ter=l(),uo=a("div"),F(ry.$$.fragment),Mer=l(),_ue=a("p"),Eer=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Cer=l(),Qa=a("p"),wer=o("The model class to instantiate is selected based on the "),bue=a("code"),Aer=o("model_type"),yer=o(` property of the config object (either
passed as an argument or loaded from `),vue=a("code"),Ler=o("pretrained_model_name_or_path"),xer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fue=a("code"),$er=o("pretrained_model_name_or_path"),ker=o(":"),Ser=l(),Wa=a("ul"),Y0=a("li"),Tue=a("strong"),Rer=o("beit"),Ber=o(" \u2014 "),mX=a("a"),Per=o("BeitForSemanticSegmentation"),Ier=o(" (BEiT model)"),qer=l(),K0=a("li"),Mue=a("strong"),Ner=o("data2vec-vision"),jer=o(" \u2014 "),gX=a("a"),Der=o("Data2VecVisionForSemanticSegmentation"),Ger=o(" (Data2VecVision model)"),Oer=l(),Z0=a("li"),Eue=a("strong"),Ver=o("dpt"),Xer=o(" \u2014 "),hX=a("a"),zer=o("DPTForSemanticSegmentation"),Qer=o(" (DPT model)"),Wer=l(),eT=a("li"),Cue=a("strong"),Her=o("segformer"),Uer=o(" \u2014 "),pX=a("a"),Jer=o("SegformerForSemanticSegmentation"),Yer=o(" (SegFormer model)"),Ker=l(),oT=a("p"),Zer=o("The model is set in evaluation mode by default using "),wue=a("code"),eor=o("model.eval()"),oor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=a("code"),ror=o("model.train()"),tor=l(),F(rT.$$.fragment),$Pe=l(),xd=a("h2"),tT=a("a"),yue=a("span"),F(ty.$$.fragment),aor=l(),Lue=a("span"),nor=o("AutoModelForInstanceSegmentation"),kPe=l(),Jo=a("div"),F(ay.$$.fragment),sor=l(),$d=a("p"),lor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),uX=a("a"),ior=o("from_pretrained()"),dor=o(" class method or the "),_X=a("a"),cor=o("from_config()"),mor=o(` class
method.`),gor=l(),ny=a("p"),hor=o("This class cannot be instantiated directly using "),xue=a("code"),por=o("__init__()"),uor=o(" (throws an error)."),_or=l(),Mt=a("div"),F(sy.$$.fragment),bor=l(),$ue=a("p"),vor=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),For=l(),kd=a("p"),Tor=o(`Note:
Loading a model from its configuration file does `),kue=a("strong"),Mor=o("not"),Eor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=a("a"),Cor=o("from_pretrained()"),wor=o(" to load the model weights."),Aor=l(),F(aT.$$.fragment),yor=l(),_o=a("div"),F(ly.$$.fragment),Lor=l(),Sue=a("p"),xor=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),$or=l(),Ha=a("p"),kor=o("The model class to instantiate is selected based on the "),Rue=a("code"),Sor=o("model_type"),Ror=o(` property of the config object (either
passed as an argument or loaded from `),Bue=a("code"),Bor=o("pretrained_model_name_or_path"),Por=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=a("code"),Ior=o("pretrained_model_name_or_path"),qor=o(":"),Nor=l(),Iue=a("ul"),nT=a("li"),que=a("strong"),jor=o("maskformer"),Dor=o(" \u2014 "),vX=a("a"),Gor=o("MaskFormerForInstanceSegmentation"),Oor=o(" (MaskFormer model)"),Vor=l(),sT=a("p"),Xor=o("The model is set in evaluation mode by default using "),Nue=a("code"),zor=o("model.eval()"),Qor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jue=a("code"),Wor=o("model.train()"),Hor=l(),F(lT.$$.fragment),SPe=l(),Sd=a("h2"),iT=a("a"),Due=a("span"),F(iy.$$.fragment),Uor=l(),Gue=a("span"),Jor=o("TFAutoModel"),RPe=l(),Yo=a("div"),F(dy.$$.fragment),Yor=l(),Rd=a("p"),Kor=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FX=a("a"),Zor=o("from_pretrained()"),err=o(" class method or the "),TX=a("a"),orr=o("from_config()"),rrr=o(` class
method.`),trr=l(),cy=a("p"),arr=o("This class cannot be instantiated directly using "),Oue=a("code"),nrr=o("__init__()"),srr=o(" (throws an error)."),lrr=l(),Et=a("div"),F(fy.$$.fragment),irr=l(),Vue=a("p"),drr=o("Instantiates one of the base model classes of the library from a configuration."),crr=l(),Bd=a("p"),frr=o(`Note:
Loading a model from its configuration file does `),Xue=a("strong"),mrr=o("not"),grr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),hrr=o("from_pretrained()"),prr=o(" to load the model weights."),urr=l(),F(dT.$$.fragment),_rr=l(),Cr=a("div"),F(my.$$.fragment),brr=l(),zue=a("p"),vrr=o("Instantiate one of the base model classes of the library from a pretrained model."),Frr=l(),Ua=a("p"),Trr=o("The model class to instantiate is selected based on the "),Que=a("code"),Mrr=o("model_type"),Err=o(` property of the config object (either
passed as an argument or loaded from `),Wue=a("code"),Crr=o("pretrained_model_name_or_path"),wrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=a("code"),Arr=o("pretrained_model_name_or_path"),yrr=o(":"),Lrr=l(),j=a("ul"),cT=a("li"),Uue=a("strong"),xrr=o("albert"),$rr=o(" \u2014 "),EX=a("a"),krr=o("TFAlbertModel"),Srr=o(" (ALBERT model)"),Rrr=l(),fT=a("li"),Jue=a("strong"),Brr=o("bart"),Prr=o(" \u2014 "),CX=a("a"),Irr=o("TFBartModel"),qrr=o(" (BART model)"),Nrr=l(),mT=a("li"),Yue=a("strong"),jrr=o("bert"),Drr=o(" \u2014 "),wX=a("a"),Grr=o("TFBertModel"),Orr=o(" (BERT model)"),Vrr=l(),gT=a("li"),Kue=a("strong"),Xrr=o("blenderbot"),zrr=o(" \u2014 "),AX=a("a"),Qrr=o("TFBlenderbotModel"),Wrr=o(" (Blenderbot model)"),Hrr=l(),hT=a("li"),Zue=a("strong"),Urr=o("blenderbot-small"),Jrr=o(" \u2014 "),yX=a("a"),Yrr=o("TFBlenderbotSmallModel"),Krr=o(" (BlenderbotSmall model)"),Zrr=l(),pT=a("li"),e_e=a("strong"),etr=o("camembert"),otr=o(" \u2014 "),LX=a("a"),rtr=o("TFCamembertModel"),ttr=o(" (CamemBERT model)"),atr=l(),uT=a("li"),o_e=a("strong"),ntr=o("clip"),str=o(" \u2014 "),xX=a("a"),ltr=o("TFCLIPModel"),itr=o(" (CLIP model)"),dtr=l(),_T=a("li"),r_e=a("strong"),ctr=o("convbert"),ftr=o(" \u2014 "),$X=a("a"),mtr=o("TFConvBertModel"),gtr=o(" (ConvBERT model)"),htr=l(),bT=a("li"),t_e=a("strong"),ptr=o("convnext"),utr=o(" \u2014 "),kX=a("a"),_tr=o("TFConvNextModel"),btr=o(" (ConvNext model)"),vtr=l(),vT=a("li"),a_e=a("strong"),Ftr=o("ctrl"),Ttr=o(" \u2014 "),SX=a("a"),Mtr=o("TFCTRLModel"),Etr=o(" (CTRL model)"),Ctr=l(),FT=a("li"),n_e=a("strong"),wtr=o("data2vec-vision"),Atr=o(" \u2014 "),RX=a("a"),ytr=o("TFData2VecVisionModel"),Ltr=o(" (Data2VecVision model)"),xtr=l(),TT=a("li"),s_e=a("strong"),$tr=o("deberta"),ktr=o(" \u2014 "),BX=a("a"),Str=o("TFDebertaModel"),Rtr=o(" (DeBERTa model)"),Btr=l(),MT=a("li"),l_e=a("strong"),Ptr=o("deberta-v2"),Itr=o(" \u2014 "),PX=a("a"),qtr=o("TFDebertaV2Model"),Ntr=o(" (DeBERTa-v2 model)"),jtr=l(),ET=a("li"),i_e=a("strong"),Dtr=o("distilbert"),Gtr=o(" \u2014 "),IX=a("a"),Otr=o("TFDistilBertModel"),Vtr=o(" (DistilBERT model)"),Xtr=l(),CT=a("li"),d_e=a("strong"),ztr=o("dpr"),Qtr=o(" \u2014 "),qX=a("a"),Wtr=o("TFDPRQuestionEncoder"),Htr=o(" (DPR model)"),Utr=l(),wT=a("li"),c_e=a("strong"),Jtr=o("electra"),Ytr=o(" \u2014 "),NX=a("a"),Ktr=o("TFElectraModel"),Ztr=o(" (ELECTRA model)"),ear=l(),AT=a("li"),f_e=a("strong"),oar=o("flaubert"),rar=o(" \u2014 "),jX=a("a"),tar=o("TFFlaubertModel"),aar=o(" (FlauBERT model)"),nar=l(),ks=a("li"),m_e=a("strong"),sar=o("funnel"),lar=o(" \u2014 "),DX=a("a"),iar=o("TFFunnelModel"),dar=o(" or "),GX=a("a"),car=o("TFFunnelBaseModel"),far=o(" (Funnel Transformer model)"),mar=l(),yT=a("li"),g_e=a("strong"),gar=o("gpt2"),har=o(" \u2014 "),OX=a("a"),par=o("TFGPT2Model"),uar=o(" (OpenAI GPT-2 model)"),_ar=l(),LT=a("li"),h_e=a("strong"),bar=o("gptj"),Far=o(" \u2014 "),VX=a("a"),Tar=o("TFGPTJModel"),Mar=o(" (GPT-J model)"),Ear=l(),xT=a("li"),p_e=a("strong"),Car=o("hubert"),war=o(" \u2014 "),XX=a("a"),Aar=o("TFHubertModel"),yar=o(" (Hubert model)"),Lar=l(),$T=a("li"),u_e=a("strong"),xar=o("layoutlm"),$ar=o(" \u2014 "),zX=a("a"),kar=o("TFLayoutLMModel"),Sar=o(" (LayoutLM model)"),Rar=l(),kT=a("li"),__e=a("strong"),Bar=o("led"),Par=o(" \u2014 "),QX=a("a"),Iar=o("TFLEDModel"),qar=o(" (LED model)"),Nar=l(),ST=a("li"),b_e=a("strong"),jar=o("longformer"),Dar=o(" \u2014 "),WX=a("a"),Gar=o("TFLongformerModel"),Oar=o(" (Longformer model)"),Var=l(),RT=a("li"),v_e=a("strong"),Xar=o("lxmert"),zar=o(" \u2014 "),HX=a("a"),Qar=o("TFLxmertModel"),War=o(" (LXMERT model)"),Har=l(),BT=a("li"),F_e=a("strong"),Uar=o("marian"),Jar=o(" \u2014 "),UX=a("a"),Yar=o("TFMarianModel"),Kar=o(" (Marian model)"),Zar=l(),PT=a("li"),T_e=a("strong"),enr=o("mbart"),onr=o(" \u2014 "),JX=a("a"),rnr=o("TFMBartModel"),tnr=o(" (mBART model)"),anr=l(),IT=a("li"),M_e=a("strong"),nnr=o("mobilebert"),snr=o(" \u2014 "),YX=a("a"),lnr=o("TFMobileBertModel"),inr=o(" (MobileBERT model)"),dnr=l(),qT=a("li"),E_e=a("strong"),cnr=o("mpnet"),fnr=o(" \u2014 "),KX=a("a"),mnr=o("TFMPNetModel"),gnr=o(" (MPNet model)"),hnr=l(),NT=a("li"),C_e=a("strong"),pnr=o("mt5"),unr=o(" \u2014 "),ZX=a("a"),_nr=o("TFMT5Model"),bnr=o(" (mT5 model)"),vnr=l(),jT=a("li"),w_e=a("strong"),Fnr=o("openai-gpt"),Tnr=o(" \u2014 "),ez=a("a"),Mnr=o("TFOpenAIGPTModel"),Enr=o(" (OpenAI GPT model)"),Cnr=l(),DT=a("li"),A_e=a("strong"),wnr=o("pegasus"),Anr=o(" \u2014 "),oz=a("a"),ynr=o("TFPegasusModel"),Lnr=o(" (Pegasus model)"),xnr=l(),GT=a("li"),y_e=a("strong"),$nr=o("rembert"),knr=o(" \u2014 "),rz=a("a"),Snr=o("TFRemBertModel"),Rnr=o(" (RemBERT model)"),Bnr=l(),OT=a("li"),L_e=a("strong"),Pnr=o("roberta"),Inr=o(" \u2014 "),tz=a("a"),qnr=o("TFRobertaModel"),Nnr=o(" (RoBERTa model)"),jnr=l(),VT=a("li"),x_e=a("strong"),Dnr=o("roformer"),Gnr=o(" \u2014 "),az=a("a"),Onr=o("TFRoFormerModel"),Vnr=o(" (RoFormer model)"),Xnr=l(),XT=a("li"),$_e=a("strong"),znr=o("speech_to_text"),Qnr=o(" \u2014 "),nz=a("a"),Wnr=o("TFSpeech2TextModel"),Hnr=o(" (Speech2Text model)"),Unr=l(),zT=a("li"),k_e=a("strong"),Jnr=o("t5"),Ynr=o(" \u2014 "),sz=a("a"),Knr=o("TFT5Model"),Znr=o(" (T5 model)"),esr=l(),QT=a("li"),S_e=a("strong"),osr=o("tapas"),rsr=o(" \u2014 "),lz=a("a"),tsr=o("TFTapasModel"),asr=o(" (TAPAS model)"),nsr=l(),WT=a("li"),R_e=a("strong"),ssr=o("transfo-xl"),lsr=o(" \u2014 "),iz=a("a"),isr=o("TFTransfoXLModel"),dsr=o(" (Transformer-XL model)"),csr=l(),HT=a("li"),B_e=a("strong"),fsr=o("vit"),msr=o(" \u2014 "),dz=a("a"),gsr=o("TFViTModel"),hsr=o(" (ViT model)"),psr=l(),UT=a("li"),P_e=a("strong"),usr=o("vit_mae"),_sr=o(" \u2014 "),cz=a("a"),bsr=o("TFViTMAEModel"),vsr=o(" (ViTMAE model)"),Fsr=l(),JT=a("li"),I_e=a("strong"),Tsr=o("wav2vec2"),Msr=o(" \u2014 "),fz=a("a"),Esr=o("TFWav2Vec2Model"),Csr=o(" (Wav2Vec2 model)"),wsr=l(),YT=a("li"),q_e=a("strong"),Asr=o("xlm"),ysr=o(" \u2014 "),mz=a("a"),Lsr=o("TFXLMModel"),xsr=o(" (XLM model)"),$sr=l(),KT=a("li"),N_e=a("strong"),ksr=o("xlm-roberta"),Ssr=o(" \u2014 "),gz=a("a"),Rsr=o("TFXLMRobertaModel"),Bsr=o(" (XLM-RoBERTa model)"),Psr=l(),ZT=a("li"),j_e=a("strong"),Isr=o("xlnet"),qsr=o(" \u2014 "),hz=a("a"),Nsr=o("TFXLNetModel"),jsr=o(" (XLNet model)"),Dsr=l(),F(e7.$$.fragment),BPe=l(),Pd=a("h2"),o7=a("a"),D_e=a("span"),F(gy.$$.fragment),Gsr=l(),G_e=a("span"),Osr=o("TFAutoModelForPreTraining"),PPe=l(),Ko=a("div"),F(hy.$$.fragment),Vsr=l(),Id=a("p"),Xsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pz=a("a"),zsr=o("from_pretrained()"),Qsr=o(" class method or the "),uz=a("a"),Wsr=o("from_config()"),Hsr=o(` class
method.`),Usr=l(),py=a("p"),Jsr=o("This class cannot be instantiated directly using "),O_e=a("code"),Ysr=o("__init__()"),Ksr=o(" (throws an error)."),Zsr=l(),Ct=a("div"),F(uy.$$.fragment),elr=l(),V_e=a("p"),olr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rlr=l(),qd=a("p"),tlr=o(`Note:
Loading a model from its configuration file does `),X_e=a("strong"),alr=o("not"),nlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),slr=o("from_pretrained()"),llr=o(" to load the model weights."),ilr=l(),F(r7.$$.fragment),dlr=l(),wr=a("div"),F(_y.$$.fragment),clr=l(),z_e=a("p"),flr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mlr=l(),Ja=a("p"),glr=o("The model class to instantiate is selected based on the "),Q_e=a("code"),hlr=o("model_type"),plr=o(` property of the config object (either
passed as an argument or loaded from `),W_e=a("code"),ulr=o("pretrained_model_name_or_path"),_lr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H_e=a("code"),blr=o("pretrained_model_name_or_path"),vlr=o(":"),Flr=l(),ne=a("ul"),t7=a("li"),U_e=a("strong"),Tlr=o("albert"),Mlr=o(" \u2014 "),bz=a("a"),Elr=o("TFAlbertForPreTraining"),Clr=o(" (ALBERT model)"),wlr=l(),a7=a("li"),J_e=a("strong"),Alr=o("bart"),ylr=o(" \u2014 "),vz=a("a"),Llr=o("TFBartForConditionalGeneration"),xlr=o(" (BART model)"),$lr=l(),n7=a("li"),Y_e=a("strong"),klr=o("bert"),Slr=o(" \u2014 "),Fz=a("a"),Rlr=o("TFBertForPreTraining"),Blr=o(" (BERT model)"),Plr=l(),s7=a("li"),K_e=a("strong"),Ilr=o("camembert"),qlr=o(" \u2014 "),Tz=a("a"),Nlr=o("TFCamembertForMaskedLM"),jlr=o(" (CamemBERT model)"),Dlr=l(),l7=a("li"),Z_e=a("strong"),Glr=o("ctrl"),Olr=o(" \u2014 "),Mz=a("a"),Vlr=o("TFCTRLLMHeadModel"),Xlr=o(" (CTRL model)"),zlr=l(),i7=a("li"),e1e=a("strong"),Qlr=o("distilbert"),Wlr=o(" \u2014 "),Ez=a("a"),Hlr=o("TFDistilBertForMaskedLM"),Ulr=o(" (DistilBERT model)"),Jlr=l(),d7=a("li"),o1e=a("strong"),Ylr=o("electra"),Klr=o(" \u2014 "),Cz=a("a"),Zlr=o("TFElectraForPreTraining"),eir=o(" (ELECTRA model)"),oir=l(),c7=a("li"),r1e=a("strong"),rir=o("flaubert"),tir=o(" \u2014 "),wz=a("a"),air=o("TFFlaubertWithLMHeadModel"),nir=o(" (FlauBERT model)"),sir=l(),f7=a("li"),t1e=a("strong"),lir=o("funnel"),iir=o(" \u2014 "),Az=a("a"),dir=o("TFFunnelForPreTraining"),cir=o(" (Funnel Transformer model)"),fir=l(),m7=a("li"),a1e=a("strong"),mir=o("gpt2"),gir=o(" \u2014 "),yz=a("a"),hir=o("TFGPT2LMHeadModel"),pir=o(" (OpenAI GPT-2 model)"),uir=l(),g7=a("li"),n1e=a("strong"),_ir=o("layoutlm"),bir=o(" \u2014 "),Lz=a("a"),vir=o("TFLayoutLMForMaskedLM"),Fir=o(" (LayoutLM model)"),Tir=l(),h7=a("li"),s1e=a("strong"),Mir=o("lxmert"),Eir=o(" \u2014 "),xz=a("a"),Cir=o("TFLxmertForPreTraining"),wir=o(" (LXMERT model)"),Air=l(),p7=a("li"),l1e=a("strong"),yir=o("mobilebert"),Lir=o(" \u2014 "),$z=a("a"),xir=o("TFMobileBertForPreTraining"),$ir=o(" (MobileBERT model)"),kir=l(),u7=a("li"),i1e=a("strong"),Sir=o("mpnet"),Rir=o(" \u2014 "),kz=a("a"),Bir=o("TFMPNetForMaskedLM"),Pir=o(" (MPNet model)"),Iir=l(),_7=a("li"),d1e=a("strong"),qir=o("openai-gpt"),Nir=o(" \u2014 "),Sz=a("a"),jir=o("TFOpenAIGPTLMHeadModel"),Dir=o(" (OpenAI GPT model)"),Gir=l(),b7=a("li"),c1e=a("strong"),Oir=o("roberta"),Vir=o(" \u2014 "),Rz=a("a"),Xir=o("TFRobertaForMaskedLM"),zir=o(" (RoBERTa model)"),Qir=l(),v7=a("li"),f1e=a("strong"),Wir=o("t5"),Hir=o(" \u2014 "),Bz=a("a"),Uir=o("TFT5ForConditionalGeneration"),Jir=o(" (T5 model)"),Yir=l(),F7=a("li"),m1e=a("strong"),Kir=o("tapas"),Zir=o(" \u2014 "),Pz=a("a"),edr=o("TFTapasForMaskedLM"),odr=o(" (TAPAS model)"),rdr=l(),T7=a("li"),g1e=a("strong"),tdr=o("transfo-xl"),adr=o(" \u2014 "),Iz=a("a"),ndr=o("TFTransfoXLLMHeadModel"),sdr=o(" (Transformer-XL model)"),ldr=l(),M7=a("li"),h1e=a("strong"),idr=o("vit_mae"),ddr=o(" \u2014 "),qz=a("a"),cdr=o("TFViTMAEForPreTraining"),fdr=o(" (ViTMAE model)"),mdr=l(),E7=a("li"),p1e=a("strong"),gdr=o("xlm"),hdr=o(" \u2014 "),Nz=a("a"),pdr=o("TFXLMWithLMHeadModel"),udr=o(" (XLM model)"),_dr=l(),C7=a("li"),u1e=a("strong"),bdr=o("xlm-roberta"),vdr=o(" \u2014 "),jz=a("a"),Fdr=o("TFXLMRobertaForMaskedLM"),Tdr=o(" (XLM-RoBERTa model)"),Mdr=l(),w7=a("li"),_1e=a("strong"),Edr=o("xlnet"),Cdr=o(" \u2014 "),Dz=a("a"),wdr=o("TFXLNetLMHeadModel"),Adr=o(" (XLNet model)"),ydr=l(),F(A7.$$.fragment),IPe=l(),Nd=a("h2"),y7=a("a"),b1e=a("span"),F(by.$$.fragment),Ldr=l(),v1e=a("span"),xdr=o("TFAutoModelForCausalLM"),qPe=l(),Zo=a("div"),F(vy.$$.fragment),$dr=l(),jd=a("p"),kdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Gz=a("a"),Sdr=o("from_pretrained()"),Rdr=o(" class method or the "),Oz=a("a"),Bdr=o("from_config()"),Pdr=o(` class
method.`),Idr=l(),Fy=a("p"),qdr=o("This class cannot be instantiated directly using "),F1e=a("code"),Ndr=o("__init__()"),jdr=o(" (throws an error)."),Ddr=l(),wt=a("div"),F(Ty.$$.fragment),Gdr=l(),T1e=a("p"),Odr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vdr=l(),Dd=a("p"),Xdr=o(`Note:
Loading a model from its configuration file does `),M1e=a("strong"),zdr=o("not"),Qdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),Wdr=o("from_pretrained()"),Hdr=o(" to load the model weights."),Udr=l(),F(L7.$$.fragment),Jdr=l(),Ar=a("div"),F(My.$$.fragment),Ydr=l(),E1e=a("p"),Kdr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Zdr=l(),Ya=a("p"),ecr=o("The model class to instantiate is selected based on the "),C1e=a("code"),ocr=o("model_type"),rcr=o(` property of the config object (either
passed as an argument or loaded from `),w1e=a("code"),tcr=o("pretrained_model_name_or_path"),acr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=a("code"),ncr=o("pretrained_model_name_or_path"),scr=o(":"),lcr=l(),Te=a("ul"),x7=a("li"),y1e=a("strong"),icr=o("bert"),dcr=o(" \u2014 "),Xz=a("a"),ccr=o("TFBertLMHeadModel"),fcr=o(" (BERT model)"),mcr=l(),$7=a("li"),L1e=a("strong"),gcr=o("camembert"),hcr=o(" \u2014 "),zz=a("a"),pcr=o("TFCamembertForCausalLM"),ucr=o(" (CamemBERT model)"),_cr=l(),k7=a("li"),x1e=a("strong"),bcr=o("ctrl"),vcr=o(" \u2014 "),Qz=a("a"),Fcr=o("TFCTRLLMHeadModel"),Tcr=o(" (CTRL model)"),Mcr=l(),S7=a("li"),$1e=a("strong"),Ecr=o("gpt2"),Ccr=o(" \u2014 "),Wz=a("a"),wcr=o("TFGPT2LMHeadModel"),Acr=o(" (OpenAI GPT-2 model)"),ycr=l(),R7=a("li"),k1e=a("strong"),Lcr=o("gptj"),xcr=o(" \u2014 "),Hz=a("a"),$cr=o("TFGPTJForCausalLM"),kcr=o(" (GPT-J model)"),Scr=l(),B7=a("li"),S1e=a("strong"),Rcr=o("openai-gpt"),Bcr=o(" \u2014 "),Uz=a("a"),Pcr=o("TFOpenAIGPTLMHeadModel"),Icr=o(" (OpenAI GPT model)"),qcr=l(),P7=a("li"),R1e=a("strong"),Ncr=o("rembert"),jcr=o(" \u2014 "),Jz=a("a"),Dcr=o("TFRemBertForCausalLM"),Gcr=o(" (RemBERT model)"),Ocr=l(),I7=a("li"),B1e=a("strong"),Vcr=o("roberta"),Xcr=o(" \u2014 "),Yz=a("a"),zcr=o("TFRobertaForCausalLM"),Qcr=o(" (RoBERTa model)"),Wcr=l(),q7=a("li"),P1e=a("strong"),Hcr=o("roformer"),Ucr=o(" \u2014 "),Kz=a("a"),Jcr=o("TFRoFormerForCausalLM"),Ycr=o(" (RoFormer model)"),Kcr=l(),N7=a("li"),I1e=a("strong"),Zcr=o("transfo-xl"),efr=o(" \u2014 "),Zz=a("a"),ofr=o("TFTransfoXLLMHeadModel"),rfr=o(" (Transformer-XL model)"),tfr=l(),j7=a("li"),q1e=a("strong"),afr=o("xlm"),nfr=o(" \u2014 "),eQ=a("a"),sfr=o("TFXLMWithLMHeadModel"),lfr=o(" (XLM model)"),ifr=l(),D7=a("li"),N1e=a("strong"),dfr=o("xlnet"),cfr=o(" \u2014 "),oQ=a("a"),ffr=o("TFXLNetLMHeadModel"),mfr=o(" (XLNet model)"),gfr=l(),F(G7.$$.fragment),NPe=l(),Gd=a("h2"),O7=a("a"),j1e=a("span"),F(Ey.$$.fragment),hfr=l(),D1e=a("span"),pfr=o("TFAutoModelForImageClassification"),jPe=l(),er=a("div"),F(Cy.$$.fragment),ufr=l(),Od=a("p"),_fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rQ=a("a"),bfr=o("from_pretrained()"),vfr=o(" class method or the "),tQ=a("a"),Ffr=o("from_config()"),Tfr=o(` class
method.`),Mfr=l(),wy=a("p"),Efr=o("This class cannot be instantiated directly using "),G1e=a("code"),Cfr=o("__init__()"),wfr=o(" (throws an error)."),Afr=l(),At=a("div"),F(Ay.$$.fragment),yfr=l(),O1e=a("p"),Lfr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xfr=l(),Vd=a("p"),$fr=o(`Note:
Loading a model from its configuration file does `),V1e=a("strong"),kfr=o("not"),Sfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=a("a"),Rfr=o("from_pretrained()"),Bfr=o(" to load the model weights."),Pfr=l(),F(V7.$$.fragment),Ifr=l(),yr=a("div"),F(yy.$$.fragment),qfr=l(),X1e=a("p"),Nfr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jfr=l(),Ka=a("p"),Dfr=o("The model class to instantiate is selected based on the "),z1e=a("code"),Gfr=o("model_type"),Ofr=o(` property of the config object (either
passed as an argument or loaded from `),Q1e=a("code"),Vfr=o("pretrained_model_name_or_path"),Xfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=a("code"),zfr=o("pretrained_model_name_or_path"),Qfr=o(":"),Wfr=l(),Xd=a("ul"),X7=a("li"),H1e=a("strong"),Hfr=o("convnext"),Ufr=o(" \u2014 "),nQ=a("a"),Jfr=o("TFConvNextForImageClassification"),Yfr=o(" (ConvNext model)"),Kfr=l(),z7=a("li"),U1e=a("strong"),Zfr=o("data2vec-vision"),emr=o(" \u2014 "),sQ=a("a"),omr=o("TFData2VecVisionForImageClassification"),rmr=o(" (Data2VecVision model)"),tmr=l(),Q7=a("li"),J1e=a("strong"),amr=o("vit"),nmr=o(" \u2014 "),lQ=a("a"),smr=o("TFViTForImageClassification"),lmr=o(" (ViT model)"),imr=l(),F(W7.$$.fragment),DPe=l(),zd=a("h2"),H7=a("a"),Y1e=a("span"),F(Ly.$$.fragment),dmr=l(),K1e=a("span"),cmr=o("TFAutoModelForMaskedLM"),GPe=l(),or=a("div"),F(xy.$$.fragment),fmr=l(),Qd=a("p"),mmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iQ=a("a"),gmr=o("from_pretrained()"),hmr=o(" class method or the "),dQ=a("a"),pmr=o("from_config()"),umr=o(` class
method.`),_mr=l(),$y=a("p"),bmr=o("This class cannot be instantiated directly using "),Z1e=a("code"),vmr=o("__init__()"),Fmr=o(" (throws an error)."),Tmr=l(),yt=a("div"),F(ky.$$.fragment),Mmr=l(),ebe=a("p"),Emr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Cmr=l(),Wd=a("p"),wmr=o(`Note:
Loading a model from its configuration file does `),obe=a("strong"),Amr=o("not"),ymr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=a("a"),Lmr=o("from_pretrained()"),xmr=o(" to load the model weights."),$mr=l(),F(U7.$$.fragment),kmr=l(),Lr=a("div"),F(Sy.$$.fragment),Smr=l(),rbe=a("p"),Rmr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Bmr=l(),Za=a("p"),Pmr=o("The model class to instantiate is selected based on the "),tbe=a("code"),Imr=o("model_type"),qmr=o(` property of the config object (either
passed as an argument or loaded from `),abe=a("code"),Nmr=o("pretrained_model_name_or_path"),jmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=a("code"),Dmr=o("pretrained_model_name_or_path"),Gmr=o(":"),Omr=l(),ie=a("ul"),J7=a("li"),sbe=a("strong"),Vmr=o("albert"),Xmr=o(" \u2014 "),fQ=a("a"),zmr=o("TFAlbertForMaskedLM"),Qmr=o(" (ALBERT model)"),Wmr=l(),Y7=a("li"),lbe=a("strong"),Hmr=o("bert"),Umr=o(" \u2014 "),mQ=a("a"),Jmr=o("TFBertForMaskedLM"),Ymr=o(" (BERT model)"),Kmr=l(),K7=a("li"),ibe=a("strong"),Zmr=o("camembert"),egr=o(" \u2014 "),gQ=a("a"),ogr=o("TFCamembertForMaskedLM"),rgr=o(" (CamemBERT model)"),tgr=l(),Z7=a("li"),dbe=a("strong"),agr=o("convbert"),ngr=o(" \u2014 "),hQ=a("a"),sgr=o("TFConvBertForMaskedLM"),lgr=o(" (ConvBERT model)"),igr=l(),e9=a("li"),cbe=a("strong"),dgr=o("deberta"),cgr=o(" \u2014 "),pQ=a("a"),fgr=o("TFDebertaForMaskedLM"),mgr=o(" (DeBERTa model)"),ggr=l(),o9=a("li"),fbe=a("strong"),hgr=o("deberta-v2"),pgr=o(" \u2014 "),uQ=a("a"),ugr=o("TFDebertaV2ForMaskedLM"),_gr=o(" (DeBERTa-v2 model)"),bgr=l(),r9=a("li"),mbe=a("strong"),vgr=o("distilbert"),Fgr=o(" \u2014 "),_Q=a("a"),Tgr=o("TFDistilBertForMaskedLM"),Mgr=o(" (DistilBERT model)"),Egr=l(),t9=a("li"),gbe=a("strong"),Cgr=o("electra"),wgr=o(" \u2014 "),bQ=a("a"),Agr=o("TFElectraForMaskedLM"),ygr=o(" (ELECTRA model)"),Lgr=l(),a9=a("li"),hbe=a("strong"),xgr=o("flaubert"),$gr=o(" \u2014 "),vQ=a("a"),kgr=o("TFFlaubertWithLMHeadModel"),Sgr=o(" (FlauBERT model)"),Rgr=l(),n9=a("li"),pbe=a("strong"),Bgr=o("funnel"),Pgr=o(" \u2014 "),FQ=a("a"),Igr=o("TFFunnelForMaskedLM"),qgr=o(" (Funnel Transformer model)"),Ngr=l(),s9=a("li"),ube=a("strong"),jgr=o("layoutlm"),Dgr=o(" \u2014 "),TQ=a("a"),Ggr=o("TFLayoutLMForMaskedLM"),Ogr=o(" (LayoutLM model)"),Vgr=l(),l9=a("li"),_be=a("strong"),Xgr=o("longformer"),zgr=o(" \u2014 "),MQ=a("a"),Qgr=o("TFLongformerForMaskedLM"),Wgr=o(" (Longformer model)"),Hgr=l(),i9=a("li"),bbe=a("strong"),Ugr=o("mobilebert"),Jgr=o(" \u2014 "),EQ=a("a"),Ygr=o("TFMobileBertForMaskedLM"),Kgr=o(" (MobileBERT model)"),Zgr=l(),d9=a("li"),vbe=a("strong"),ehr=o("mpnet"),ohr=o(" \u2014 "),CQ=a("a"),rhr=o("TFMPNetForMaskedLM"),thr=o(" (MPNet model)"),ahr=l(),c9=a("li"),Fbe=a("strong"),nhr=o("rembert"),shr=o(" \u2014 "),wQ=a("a"),lhr=o("TFRemBertForMaskedLM"),ihr=o(" (RemBERT model)"),dhr=l(),f9=a("li"),Tbe=a("strong"),chr=o("roberta"),fhr=o(" \u2014 "),AQ=a("a"),mhr=o("TFRobertaForMaskedLM"),ghr=o(" (RoBERTa model)"),hhr=l(),m9=a("li"),Mbe=a("strong"),phr=o("roformer"),uhr=o(" \u2014 "),yQ=a("a"),_hr=o("TFRoFormerForMaskedLM"),bhr=o(" (RoFormer model)"),vhr=l(),g9=a("li"),Ebe=a("strong"),Fhr=o("tapas"),Thr=o(" \u2014 "),LQ=a("a"),Mhr=o("TFTapasForMaskedLM"),Ehr=o(" (TAPAS model)"),Chr=l(),h9=a("li"),Cbe=a("strong"),whr=o("xlm"),Ahr=o(" \u2014 "),xQ=a("a"),yhr=o("TFXLMWithLMHeadModel"),Lhr=o(" (XLM model)"),xhr=l(),p9=a("li"),wbe=a("strong"),$hr=o("xlm-roberta"),khr=o(" \u2014 "),$Q=a("a"),Shr=o("TFXLMRobertaForMaskedLM"),Rhr=o(" (XLM-RoBERTa model)"),Bhr=l(),F(u9.$$.fragment),OPe=l(),Hd=a("h2"),_9=a("a"),Abe=a("span"),F(Ry.$$.fragment),Phr=l(),ybe=a("span"),Ihr=o("TFAutoModelForSeq2SeqLM"),VPe=l(),rr=a("div"),F(By.$$.fragment),qhr=l(),Ud=a("p"),Nhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kQ=a("a"),jhr=o("from_pretrained()"),Dhr=o(" class method or the "),SQ=a("a"),Ghr=o("from_config()"),Ohr=o(` class
method.`),Vhr=l(),Py=a("p"),Xhr=o("This class cannot be instantiated directly using "),Lbe=a("code"),zhr=o("__init__()"),Qhr=o(" (throws an error)."),Whr=l(),Lt=a("div"),F(Iy.$$.fragment),Hhr=l(),xbe=a("p"),Uhr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jhr=l(),Jd=a("p"),Yhr=o(`Note:
Loading a model from its configuration file does `),$be=a("strong"),Khr=o("not"),Zhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=a("a"),epr=o("from_pretrained()"),opr=o(" to load the model weights."),rpr=l(),F(b9.$$.fragment),tpr=l(),xr=a("div"),F(qy.$$.fragment),apr=l(),kbe=a("p"),npr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),spr=l(),en=a("p"),lpr=o("The model class to instantiate is selected based on the "),Sbe=a("code"),ipr=o("model_type"),dpr=o(` property of the config object (either
passed as an argument or loaded from `),Rbe=a("code"),cpr=o("pretrained_model_name_or_path"),fpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=a("code"),mpr=o("pretrained_model_name_or_path"),gpr=o(":"),hpr=l(),ye=a("ul"),v9=a("li"),Pbe=a("strong"),ppr=o("bart"),upr=o(" \u2014 "),BQ=a("a"),_pr=o("TFBartForConditionalGeneration"),bpr=o(" (BART model)"),vpr=l(),F9=a("li"),Ibe=a("strong"),Fpr=o("blenderbot"),Tpr=o(" \u2014 "),PQ=a("a"),Mpr=o("TFBlenderbotForConditionalGeneration"),Epr=o(" (Blenderbot model)"),Cpr=l(),T9=a("li"),qbe=a("strong"),wpr=o("blenderbot-small"),Apr=o(" \u2014 "),IQ=a("a"),ypr=o("TFBlenderbotSmallForConditionalGeneration"),Lpr=o(" (BlenderbotSmall model)"),xpr=l(),M9=a("li"),Nbe=a("strong"),$pr=o("encoder-decoder"),kpr=o(" \u2014 "),qQ=a("a"),Spr=o("TFEncoderDecoderModel"),Rpr=o(" (Encoder decoder model)"),Bpr=l(),E9=a("li"),jbe=a("strong"),Ppr=o("led"),Ipr=o(" \u2014 "),NQ=a("a"),qpr=o("TFLEDForConditionalGeneration"),Npr=o(" (LED model)"),jpr=l(),C9=a("li"),Dbe=a("strong"),Dpr=o("marian"),Gpr=o(" \u2014 "),jQ=a("a"),Opr=o("TFMarianMTModel"),Vpr=o(" (Marian model)"),Xpr=l(),w9=a("li"),Gbe=a("strong"),zpr=o("mbart"),Qpr=o(" \u2014 "),DQ=a("a"),Wpr=o("TFMBartForConditionalGeneration"),Hpr=o(" (mBART model)"),Upr=l(),A9=a("li"),Obe=a("strong"),Jpr=o("mt5"),Ypr=o(" \u2014 "),GQ=a("a"),Kpr=o("TFMT5ForConditionalGeneration"),Zpr=o(" (mT5 model)"),eur=l(),y9=a("li"),Vbe=a("strong"),our=o("pegasus"),rur=o(" \u2014 "),OQ=a("a"),tur=o("TFPegasusForConditionalGeneration"),aur=o(" (Pegasus model)"),nur=l(),L9=a("li"),Xbe=a("strong"),sur=o("t5"),lur=o(" \u2014 "),VQ=a("a"),iur=o("TFT5ForConditionalGeneration"),dur=o(" (T5 model)"),cur=l(),F(x9.$$.fragment),XPe=l(),Yd=a("h2"),$9=a("a"),zbe=a("span"),F(Ny.$$.fragment),fur=l(),Qbe=a("span"),mur=o("TFAutoModelForSequenceClassification"),zPe=l(),tr=a("div"),F(jy.$$.fragment),gur=l(),Kd=a("p"),hur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XQ=a("a"),pur=o("from_pretrained()"),uur=o(" class method or the "),zQ=a("a"),_ur=o("from_config()"),bur=o(` class
method.`),vur=l(),Dy=a("p"),Fur=o("This class cannot be instantiated directly using "),Wbe=a("code"),Tur=o("__init__()"),Mur=o(" (throws an error)."),Eur=l(),xt=a("div"),F(Gy.$$.fragment),Cur=l(),Hbe=a("p"),wur=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Aur=l(),Zd=a("p"),yur=o(`Note:
Loading a model from its configuration file does `),Ube=a("strong"),Lur=o("not"),xur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),$ur=o("from_pretrained()"),kur=o(" to load the model weights."),Sur=l(),F(k9.$$.fragment),Rur=l(),$r=a("div"),F(Oy.$$.fragment),Bur=l(),Jbe=a("p"),Pur=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Iur=l(),on=a("p"),qur=o("The model class to instantiate is selected based on the "),Ybe=a("code"),Nur=o("model_type"),jur=o(` property of the config object (either
passed as an argument or loaded from `),Kbe=a("code"),Dur=o("pretrained_model_name_or_path"),Gur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=a("code"),Our=o("pretrained_model_name_or_path"),Vur=o(":"),Xur=l(),Z=a("ul"),S9=a("li"),e2e=a("strong"),zur=o("albert"),Qur=o(" \u2014 "),WQ=a("a"),Wur=o("TFAlbertForSequenceClassification"),Hur=o(" (ALBERT model)"),Uur=l(),R9=a("li"),o2e=a("strong"),Jur=o("bert"),Yur=o(" \u2014 "),HQ=a("a"),Kur=o("TFBertForSequenceClassification"),Zur=o(" (BERT model)"),e_r=l(),B9=a("li"),r2e=a("strong"),o_r=o("camembert"),r_r=o(" \u2014 "),UQ=a("a"),t_r=o("TFCamembertForSequenceClassification"),a_r=o(" (CamemBERT model)"),n_r=l(),P9=a("li"),t2e=a("strong"),s_r=o("convbert"),l_r=o(" \u2014 "),JQ=a("a"),i_r=o("TFConvBertForSequenceClassification"),d_r=o(" (ConvBERT model)"),c_r=l(),I9=a("li"),a2e=a("strong"),f_r=o("ctrl"),m_r=o(" \u2014 "),YQ=a("a"),g_r=o("TFCTRLForSequenceClassification"),h_r=o(" (CTRL model)"),p_r=l(),q9=a("li"),n2e=a("strong"),u_r=o("deberta"),__r=o(" \u2014 "),KQ=a("a"),b_r=o("TFDebertaForSequenceClassification"),v_r=o(" (DeBERTa model)"),F_r=l(),N9=a("li"),s2e=a("strong"),T_r=o("deberta-v2"),M_r=o(" \u2014 "),ZQ=a("a"),E_r=o("TFDebertaV2ForSequenceClassification"),C_r=o(" (DeBERTa-v2 model)"),w_r=l(),j9=a("li"),l2e=a("strong"),A_r=o("distilbert"),y_r=o(" \u2014 "),eW=a("a"),L_r=o("TFDistilBertForSequenceClassification"),x_r=o(" (DistilBERT model)"),$_r=l(),D9=a("li"),i2e=a("strong"),k_r=o("electra"),S_r=o(" \u2014 "),oW=a("a"),R_r=o("TFElectraForSequenceClassification"),B_r=o(" (ELECTRA model)"),P_r=l(),G9=a("li"),d2e=a("strong"),I_r=o("flaubert"),q_r=o(" \u2014 "),rW=a("a"),N_r=o("TFFlaubertForSequenceClassification"),j_r=o(" (FlauBERT model)"),D_r=l(),O9=a("li"),c2e=a("strong"),G_r=o("funnel"),O_r=o(" \u2014 "),tW=a("a"),V_r=o("TFFunnelForSequenceClassification"),X_r=o(" (Funnel Transformer model)"),z_r=l(),V9=a("li"),f2e=a("strong"),Q_r=o("gpt2"),W_r=o(" \u2014 "),aW=a("a"),H_r=o("TFGPT2ForSequenceClassification"),U_r=o(" (OpenAI GPT-2 model)"),J_r=l(),X9=a("li"),m2e=a("strong"),Y_r=o("gptj"),K_r=o(" \u2014 "),nW=a("a"),Z_r=o("TFGPTJForSequenceClassification"),e1r=o(" (GPT-J model)"),o1r=l(),z9=a("li"),g2e=a("strong"),r1r=o("layoutlm"),t1r=o(" \u2014 "),sW=a("a"),a1r=o("TFLayoutLMForSequenceClassification"),n1r=o(" (LayoutLM model)"),s1r=l(),Q9=a("li"),h2e=a("strong"),l1r=o("longformer"),i1r=o(" \u2014 "),lW=a("a"),d1r=o("TFLongformerForSequenceClassification"),c1r=o(" (Longformer model)"),f1r=l(),W9=a("li"),p2e=a("strong"),m1r=o("mobilebert"),g1r=o(" \u2014 "),iW=a("a"),h1r=o("TFMobileBertForSequenceClassification"),p1r=o(" (MobileBERT model)"),u1r=l(),H9=a("li"),u2e=a("strong"),_1r=o("mpnet"),b1r=o(" \u2014 "),dW=a("a"),v1r=o("TFMPNetForSequenceClassification"),F1r=o(" (MPNet model)"),T1r=l(),U9=a("li"),_2e=a("strong"),M1r=o("openai-gpt"),E1r=o(" \u2014 "),cW=a("a"),C1r=o("TFOpenAIGPTForSequenceClassification"),w1r=o(" (OpenAI GPT model)"),A1r=l(),J9=a("li"),b2e=a("strong"),y1r=o("rembert"),L1r=o(" \u2014 "),fW=a("a"),x1r=o("TFRemBertForSequenceClassification"),$1r=o(" (RemBERT model)"),k1r=l(),Y9=a("li"),v2e=a("strong"),S1r=o("roberta"),R1r=o(" \u2014 "),mW=a("a"),B1r=o("TFRobertaForSequenceClassification"),P1r=o(" (RoBERTa model)"),I1r=l(),K9=a("li"),F2e=a("strong"),q1r=o("roformer"),N1r=o(" \u2014 "),gW=a("a"),j1r=o("TFRoFormerForSequenceClassification"),D1r=o(" (RoFormer model)"),G1r=l(),Z9=a("li"),T2e=a("strong"),O1r=o("tapas"),V1r=o(" \u2014 "),hW=a("a"),X1r=o("TFTapasForSequenceClassification"),z1r=o(" (TAPAS model)"),Q1r=l(),eM=a("li"),M2e=a("strong"),W1r=o("transfo-xl"),H1r=o(" \u2014 "),pW=a("a"),U1r=o("TFTransfoXLForSequenceClassification"),J1r=o(" (Transformer-XL model)"),Y1r=l(),oM=a("li"),E2e=a("strong"),K1r=o("xlm"),Z1r=o(" \u2014 "),uW=a("a"),ebr=o("TFXLMForSequenceClassification"),obr=o(" (XLM model)"),rbr=l(),rM=a("li"),C2e=a("strong"),tbr=o("xlm-roberta"),abr=o(" \u2014 "),_W=a("a"),nbr=o("TFXLMRobertaForSequenceClassification"),sbr=o(" (XLM-RoBERTa model)"),lbr=l(),tM=a("li"),w2e=a("strong"),ibr=o("xlnet"),dbr=o(" \u2014 "),bW=a("a"),cbr=o("TFXLNetForSequenceClassification"),fbr=o(" (XLNet model)"),mbr=l(),F(aM.$$.fragment),QPe=l(),ec=a("h2"),nM=a("a"),A2e=a("span"),F(Vy.$$.fragment),gbr=l(),y2e=a("span"),hbr=o("TFAutoModelForMultipleChoice"),WPe=l(),ar=a("div"),F(Xy.$$.fragment),pbr=l(),oc=a("p"),ubr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vW=a("a"),_br=o("from_pretrained()"),bbr=o(" class method or the "),FW=a("a"),vbr=o("from_config()"),Fbr=o(` class
method.`),Tbr=l(),zy=a("p"),Mbr=o("This class cannot be instantiated directly using "),L2e=a("code"),Ebr=o("__init__()"),Cbr=o(" (throws an error)."),wbr=l(),$t=a("div"),F(Qy.$$.fragment),Abr=l(),x2e=a("p"),ybr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Lbr=l(),rc=a("p"),xbr=o(`Note:
Loading a model from its configuration file does `),$2e=a("strong"),$br=o("not"),kbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),Sbr=o("from_pretrained()"),Rbr=o(" to load the model weights."),Bbr=l(),F(sM.$$.fragment),Pbr=l(),kr=a("div"),F(Wy.$$.fragment),Ibr=l(),k2e=a("p"),qbr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Nbr=l(),rn=a("p"),jbr=o("The model class to instantiate is selected based on the "),S2e=a("code"),Dbr=o("model_type"),Gbr=o(` property of the config object (either
passed as an argument or loaded from `),R2e=a("code"),Obr=o("pretrained_model_name_or_path"),Vbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=a("code"),Xbr=o("pretrained_model_name_or_path"),zbr=o(":"),Qbr=l(),pe=a("ul"),lM=a("li"),P2e=a("strong"),Wbr=o("albert"),Hbr=o(" \u2014 "),MW=a("a"),Ubr=o("TFAlbertForMultipleChoice"),Jbr=o(" (ALBERT model)"),Ybr=l(),iM=a("li"),I2e=a("strong"),Kbr=o("bert"),Zbr=o(" \u2014 "),EW=a("a"),e2r=o("TFBertForMultipleChoice"),o2r=o(" (BERT model)"),r2r=l(),dM=a("li"),q2e=a("strong"),t2r=o("camembert"),a2r=o(" \u2014 "),CW=a("a"),n2r=o("TFCamembertForMultipleChoice"),s2r=o(" (CamemBERT model)"),l2r=l(),cM=a("li"),N2e=a("strong"),i2r=o("convbert"),d2r=o(" \u2014 "),wW=a("a"),c2r=o("TFConvBertForMultipleChoice"),f2r=o(" (ConvBERT model)"),m2r=l(),fM=a("li"),j2e=a("strong"),g2r=o("distilbert"),h2r=o(" \u2014 "),AW=a("a"),p2r=o("TFDistilBertForMultipleChoice"),u2r=o(" (DistilBERT model)"),_2r=l(),mM=a("li"),D2e=a("strong"),b2r=o("electra"),v2r=o(" \u2014 "),yW=a("a"),F2r=o("TFElectraForMultipleChoice"),T2r=o(" (ELECTRA model)"),M2r=l(),gM=a("li"),G2e=a("strong"),E2r=o("flaubert"),C2r=o(" \u2014 "),LW=a("a"),w2r=o("TFFlaubertForMultipleChoice"),A2r=o(" (FlauBERT model)"),y2r=l(),hM=a("li"),O2e=a("strong"),L2r=o("funnel"),x2r=o(" \u2014 "),xW=a("a"),$2r=o("TFFunnelForMultipleChoice"),k2r=o(" (Funnel Transformer model)"),S2r=l(),pM=a("li"),V2e=a("strong"),R2r=o("longformer"),B2r=o(" \u2014 "),$W=a("a"),P2r=o("TFLongformerForMultipleChoice"),I2r=o(" (Longformer model)"),q2r=l(),uM=a("li"),X2e=a("strong"),N2r=o("mobilebert"),j2r=o(" \u2014 "),kW=a("a"),D2r=o("TFMobileBertForMultipleChoice"),G2r=o(" (MobileBERT model)"),O2r=l(),_M=a("li"),z2e=a("strong"),V2r=o("mpnet"),X2r=o(" \u2014 "),SW=a("a"),z2r=o("TFMPNetForMultipleChoice"),Q2r=o(" (MPNet model)"),W2r=l(),bM=a("li"),Q2e=a("strong"),H2r=o("rembert"),U2r=o(" \u2014 "),RW=a("a"),J2r=o("TFRemBertForMultipleChoice"),Y2r=o(" (RemBERT model)"),K2r=l(),vM=a("li"),W2e=a("strong"),Z2r=o("roberta"),evr=o(" \u2014 "),BW=a("a"),ovr=o("TFRobertaForMultipleChoice"),rvr=o(" (RoBERTa model)"),tvr=l(),FM=a("li"),H2e=a("strong"),avr=o("roformer"),nvr=o(" \u2014 "),PW=a("a"),svr=o("TFRoFormerForMultipleChoice"),lvr=o(" (RoFormer model)"),ivr=l(),TM=a("li"),U2e=a("strong"),dvr=o("xlm"),cvr=o(" \u2014 "),IW=a("a"),fvr=o("TFXLMForMultipleChoice"),mvr=o(" (XLM model)"),gvr=l(),MM=a("li"),J2e=a("strong"),hvr=o("xlm-roberta"),pvr=o(" \u2014 "),qW=a("a"),uvr=o("TFXLMRobertaForMultipleChoice"),_vr=o(" (XLM-RoBERTa model)"),bvr=l(),EM=a("li"),Y2e=a("strong"),vvr=o("xlnet"),Fvr=o(" \u2014 "),NW=a("a"),Tvr=o("TFXLNetForMultipleChoice"),Mvr=o(" (XLNet model)"),Evr=l(),F(CM.$$.fragment),HPe=l(),tc=a("h2"),wM=a("a"),K2e=a("span"),F(Hy.$$.fragment),Cvr=l(),Z2e=a("span"),wvr=o("TFAutoModelForTableQuestionAnswering"),UPe=l(),nr=a("div"),F(Uy.$$.fragment),Avr=l(),ac=a("p"),yvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),jW=a("a"),Lvr=o("from_pretrained()"),xvr=o(" class method or the "),DW=a("a"),$vr=o("from_config()"),kvr=o(` class
method.`),Svr=l(),Jy=a("p"),Rvr=o("This class cannot be instantiated directly using "),eve=a("code"),Bvr=o("__init__()"),Pvr=o(" (throws an error)."),Ivr=l(),kt=a("div"),F(Yy.$$.fragment),qvr=l(),ove=a("p"),Nvr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),jvr=l(),nc=a("p"),Dvr=o(`Note:
Loading a model from its configuration file does `),rve=a("strong"),Gvr=o("not"),Ovr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),Vvr=o("from_pretrained()"),Xvr=o(" to load the model weights."),zvr=l(),F(AM.$$.fragment),Qvr=l(),Sr=a("div"),F(Ky.$$.fragment),Wvr=l(),tve=a("p"),Hvr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Uvr=l(),tn=a("p"),Jvr=o("The model class to instantiate is selected based on the "),ave=a("code"),Yvr=o("model_type"),Kvr=o(` property of the config object (either
passed as an argument or loaded from `),nve=a("code"),Zvr=o("pretrained_model_name_or_path"),eFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=a("code"),oFr=o("pretrained_model_name_or_path"),rFr=o(":"),tFr=l(),lve=a("ul"),yM=a("li"),ive=a("strong"),aFr=o("tapas"),nFr=o(" \u2014 "),OW=a("a"),sFr=o("TFTapasForQuestionAnswering"),lFr=o(" (TAPAS model)"),iFr=l(),F(LM.$$.fragment),JPe=l(),sc=a("h2"),xM=a("a"),dve=a("span"),F(Zy.$$.fragment),dFr=l(),cve=a("span"),cFr=o("TFAutoModelForTokenClassification"),YPe=l(),sr=a("div"),F(eL.$$.fragment),fFr=l(),lc=a("p"),mFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VW=a("a"),gFr=o("from_pretrained()"),hFr=o(" class method or the "),XW=a("a"),pFr=o("from_config()"),uFr=o(` class
method.`),_Fr=l(),oL=a("p"),bFr=o("This class cannot be instantiated directly using "),fve=a("code"),vFr=o("__init__()"),FFr=o(" (throws an error)."),TFr=l(),St=a("div"),F(rL.$$.fragment),MFr=l(),mve=a("p"),EFr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CFr=l(),ic=a("p"),wFr=o(`Note:
Loading a model from its configuration file does `),gve=a("strong"),AFr=o("not"),yFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=a("a"),LFr=o("from_pretrained()"),xFr=o(" to load the model weights."),$Fr=l(),F($M.$$.fragment),kFr=l(),Rr=a("div"),F(tL.$$.fragment),SFr=l(),hve=a("p"),RFr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),BFr=l(),an=a("p"),PFr=o("The model class to instantiate is selected based on the "),pve=a("code"),IFr=o("model_type"),qFr=o(` property of the config object (either
passed as an argument or loaded from `),uve=a("code"),NFr=o("pretrained_model_name_or_path"),jFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=a("code"),DFr=o("pretrained_model_name_or_path"),GFr=o(":"),OFr=l(),de=a("ul"),kM=a("li"),bve=a("strong"),VFr=o("albert"),XFr=o(" \u2014 "),QW=a("a"),zFr=o("TFAlbertForTokenClassification"),QFr=o(" (ALBERT model)"),WFr=l(),SM=a("li"),vve=a("strong"),HFr=o("bert"),UFr=o(" \u2014 "),WW=a("a"),JFr=o("TFBertForTokenClassification"),YFr=o(" (BERT model)"),KFr=l(),RM=a("li"),Fve=a("strong"),ZFr=o("camembert"),e0r=o(" \u2014 "),HW=a("a"),o0r=o("TFCamembertForTokenClassification"),r0r=o(" (CamemBERT model)"),t0r=l(),BM=a("li"),Tve=a("strong"),a0r=o("convbert"),n0r=o(" \u2014 "),UW=a("a"),s0r=o("TFConvBertForTokenClassification"),l0r=o(" (ConvBERT model)"),i0r=l(),PM=a("li"),Mve=a("strong"),d0r=o("deberta"),c0r=o(" \u2014 "),JW=a("a"),f0r=o("TFDebertaForTokenClassification"),m0r=o(" (DeBERTa model)"),g0r=l(),IM=a("li"),Eve=a("strong"),h0r=o("deberta-v2"),p0r=o(" \u2014 "),YW=a("a"),u0r=o("TFDebertaV2ForTokenClassification"),_0r=o(" (DeBERTa-v2 model)"),b0r=l(),qM=a("li"),Cve=a("strong"),v0r=o("distilbert"),F0r=o(" \u2014 "),KW=a("a"),T0r=o("TFDistilBertForTokenClassification"),M0r=o(" (DistilBERT model)"),E0r=l(),NM=a("li"),wve=a("strong"),C0r=o("electra"),w0r=o(" \u2014 "),ZW=a("a"),A0r=o("TFElectraForTokenClassification"),y0r=o(" (ELECTRA model)"),L0r=l(),jM=a("li"),Ave=a("strong"),x0r=o("flaubert"),$0r=o(" \u2014 "),eH=a("a"),k0r=o("TFFlaubertForTokenClassification"),S0r=o(" (FlauBERT model)"),R0r=l(),DM=a("li"),yve=a("strong"),B0r=o("funnel"),P0r=o(" \u2014 "),oH=a("a"),I0r=o("TFFunnelForTokenClassification"),q0r=o(" (Funnel Transformer model)"),N0r=l(),GM=a("li"),Lve=a("strong"),j0r=o("layoutlm"),D0r=o(" \u2014 "),rH=a("a"),G0r=o("TFLayoutLMForTokenClassification"),O0r=o(" (LayoutLM model)"),V0r=l(),OM=a("li"),xve=a("strong"),X0r=o("longformer"),z0r=o(" \u2014 "),tH=a("a"),Q0r=o("TFLongformerForTokenClassification"),W0r=o(" (Longformer model)"),H0r=l(),VM=a("li"),$ve=a("strong"),U0r=o("mobilebert"),J0r=o(" \u2014 "),aH=a("a"),Y0r=o("TFMobileBertForTokenClassification"),K0r=o(" (MobileBERT model)"),Z0r=l(),XM=a("li"),kve=a("strong"),eTr=o("mpnet"),oTr=o(" \u2014 "),nH=a("a"),rTr=o("TFMPNetForTokenClassification"),tTr=o(" (MPNet model)"),aTr=l(),zM=a("li"),Sve=a("strong"),nTr=o("rembert"),sTr=o(" \u2014 "),sH=a("a"),lTr=o("TFRemBertForTokenClassification"),iTr=o(" (RemBERT model)"),dTr=l(),QM=a("li"),Rve=a("strong"),cTr=o("roberta"),fTr=o(" \u2014 "),lH=a("a"),mTr=o("TFRobertaForTokenClassification"),gTr=o(" (RoBERTa model)"),hTr=l(),WM=a("li"),Bve=a("strong"),pTr=o("roformer"),uTr=o(" \u2014 "),iH=a("a"),_Tr=o("TFRoFormerForTokenClassification"),bTr=o(" (RoFormer model)"),vTr=l(),HM=a("li"),Pve=a("strong"),FTr=o("xlm"),TTr=o(" \u2014 "),dH=a("a"),MTr=o("TFXLMForTokenClassification"),ETr=o(" (XLM model)"),CTr=l(),UM=a("li"),Ive=a("strong"),wTr=o("xlm-roberta"),ATr=o(" \u2014 "),cH=a("a"),yTr=o("TFXLMRobertaForTokenClassification"),LTr=o(" (XLM-RoBERTa model)"),xTr=l(),JM=a("li"),qve=a("strong"),$Tr=o("xlnet"),kTr=o(" \u2014 "),fH=a("a"),STr=o("TFXLNetForTokenClassification"),RTr=o(" (XLNet model)"),BTr=l(),F(YM.$$.fragment),KPe=l(),dc=a("h2"),KM=a("a"),Nve=a("span"),F(aL.$$.fragment),PTr=l(),jve=a("span"),ITr=o("TFAutoModelForQuestionAnswering"),ZPe=l(),lr=a("div"),F(nL.$$.fragment),qTr=l(),cc=a("p"),NTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mH=a("a"),jTr=o("from_pretrained()"),DTr=o(" class method or the "),gH=a("a"),GTr=o("from_config()"),OTr=o(` class
method.`),VTr=l(),sL=a("p"),XTr=o("This class cannot be instantiated directly using "),Dve=a("code"),zTr=o("__init__()"),QTr=o(" (throws an error)."),WTr=l(),Rt=a("div"),F(lL.$$.fragment),HTr=l(),Gve=a("p"),UTr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),JTr=l(),fc=a("p"),YTr=o(`Note:
Loading a model from its configuration file does `),Ove=a("strong"),KTr=o("not"),ZTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),e7r=o("from_pretrained()"),o7r=o(" to load the model weights."),r7r=l(),F(ZM.$$.fragment),t7r=l(),Br=a("div"),F(iL.$$.fragment),a7r=l(),Vve=a("p"),n7r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),s7r=l(),nn=a("p"),l7r=o("The model class to instantiate is selected based on the "),Xve=a("code"),i7r=o("model_type"),d7r=o(` property of the config object (either
passed as an argument or loaded from `),zve=a("code"),c7r=o("pretrained_model_name_or_path"),f7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=a("code"),m7r=o("pretrained_model_name_or_path"),g7r=o(":"),h7r=l(),ce=a("ul"),e4=a("li"),Wve=a("strong"),p7r=o("albert"),u7r=o(" \u2014 "),pH=a("a"),_7r=o("TFAlbertForQuestionAnswering"),b7r=o(" (ALBERT model)"),v7r=l(),o4=a("li"),Hve=a("strong"),F7r=o("bert"),T7r=o(" \u2014 "),uH=a("a"),M7r=o("TFBertForQuestionAnswering"),E7r=o(" (BERT model)"),C7r=l(),r4=a("li"),Uve=a("strong"),w7r=o("camembert"),A7r=o(" \u2014 "),_H=a("a"),y7r=o("TFCamembertForQuestionAnswering"),L7r=o(" (CamemBERT model)"),x7r=l(),t4=a("li"),Jve=a("strong"),$7r=o("convbert"),k7r=o(" \u2014 "),bH=a("a"),S7r=o("TFConvBertForQuestionAnswering"),R7r=o(" (ConvBERT model)"),B7r=l(),a4=a("li"),Yve=a("strong"),P7r=o("deberta"),I7r=o(" \u2014 "),vH=a("a"),q7r=o("TFDebertaForQuestionAnswering"),N7r=o(" (DeBERTa model)"),j7r=l(),n4=a("li"),Kve=a("strong"),D7r=o("deberta-v2"),G7r=o(" \u2014 "),FH=a("a"),O7r=o("TFDebertaV2ForQuestionAnswering"),V7r=o(" (DeBERTa-v2 model)"),X7r=l(),s4=a("li"),Zve=a("strong"),z7r=o("distilbert"),Q7r=o(" \u2014 "),TH=a("a"),W7r=o("TFDistilBertForQuestionAnswering"),H7r=o(" (DistilBERT model)"),U7r=l(),l4=a("li"),eFe=a("strong"),J7r=o("electra"),Y7r=o(" \u2014 "),MH=a("a"),K7r=o("TFElectraForQuestionAnswering"),Z7r=o(" (ELECTRA model)"),e9r=l(),i4=a("li"),oFe=a("strong"),o9r=o("flaubert"),r9r=o(" \u2014 "),EH=a("a"),t9r=o("TFFlaubertForQuestionAnsweringSimple"),a9r=o(" (FlauBERT model)"),n9r=l(),d4=a("li"),rFe=a("strong"),s9r=o("funnel"),l9r=o(" \u2014 "),CH=a("a"),i9r=o("TFFunnelForQuestionAnswering"),d9r=o(" (Funnel Transformer model)"),c9r=l(),c4=a("li"),tFe=a("strong"),f9r=o("gptj"),m9r=o(" \u2014 "),wH=a("a"),g9r=o("TFGPTJForQuestionAnswering"),h9r=o(" (GPT-J model)"),p9r=l(),f4=a("li"),aFe=a("strong"),u9r=o("longformer"),_9r=o(" \u2014 "),AH=a("a"),b9r=o("TFLongformerForQuestionAnswering"),v9r=o(" (Longformer model)"),F9r=l(),m4=a("li"),nFe=a("strong"),T9r=o("mobilebert"),M9r=o(" \u2014 "),yH=a("a"),E9r=o("TFMobileBertForQuestionAnswering"),C9r=o(" (MobileBERT model)"),w9r=l(),g4=a("li"),sFe=a("strong"),A9r=o("mpnet"),y9r=o(" \u2014 "),LH=a("a"),L9r=o("TFMPNetForQuestionAnswering"),x9r=o(" (MPNet model)"),$9r=l(),h4=a("li"),lFe=a("strong"),k9r=o("rembert"),S9r=o(" \u2014 "),xH=a("a"),R9r=o("TFRemBertForQuestionAnswering"),B9r=o(" (RemBERT model)"),P9r=l(),p4=a("li"),iFe=a("strong"),I9r=o("roberta"),q9r=o(" \u2014 "),$H=a("a"),N9r=o("TFRobertaForQuestionAnswering"),j9r=o(" (RoBERTa model)"),D9r=l(),u4=a("li"),dFe=a("strong"),G9r=o("roformer"),O9r=o(" \u2014 "),kH=a("a"),V9r=o("TFRoFormerForQuestionAnswering"),X9r=o(" (RoFormer model)"),z9r=l(),_4=a("li"),cFe=a("strong"),Q9r=o("xlm"),W9r=o(" \u2014 "),SH=a("a"),H9r=o("TFXLMForQuestionAnsweringSimple"),U9r=o(" (XLM model)"),J9r=l(),b4=a("li"),fFe=a("strong"),Y9r=o("xlm-roberta"),K9r=o(" \u2014 "),RH=a("a"),Z9r=o("TFXLMRobertaForQuestionAnswering"),eMr=o(" (XLM-RoBERTa model)"),oMr=l(),v4=a("li"),mFe=a("strong"),rMr=o("xlnet"),tMr=o(" \u2014 "),BH=a("a"),aMr=o("TFXLNetForQuestionAnsweringSimple"),nMr=o(" (XLNet model)"),sMr=l(),F(F4.$$.fragment),eIe=l(),mc=a("h2"),T4=a("a"),gFe=a("span"),F(dL.$$.fragment),lMr=l(),hFe=a("span"),iMr=o("TFAutoModelForVision2Seq"),oIe=l(),ir=a("div"),F(cL.$$.fragment),dMr=l(),gc=a("p"),cMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PH=a("a"),fMr=o("from_pretrained()"),mMr=o(" class method or the "),IH=a("a"),gMr=o("from_config()"),hMr=o(` class
method.`),pMr=l(),fL=a("p"),uMr=o("This class cannot be instantiated directly using "),pFe=a("code"),_Mr=o("__init__()"),bMr=o(" (throws an error)."),vMr=l(),Bt=a("div"),F(mL.$$.fragment),FMr=l(),uFe=a("p"),TMr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),MMr=l(),hc=a("p"),EMr=o(`Note:
Loading a model from its configuration file does `),_Fe=a("strong"),CMr=o("not"),wMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=a("a"),AMr=o("from_pretrained()"),yMr=o(" to load the model weights."),LMr=l(),F(M4.$$.fragment),xMr=l(),Pr=a("div"),F(gL.$$.fragment),$Mr=l(),bFe=a("p"),kMr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),SMr=l(),sn=a("p"),RMr=o("The model class to instantiate is selected based on the "),vFe=a("code"),BMr=o("model_type"),PMr=o(` property of the config object (either
passed as an argument or loaded from `),FFe=a("code"),IMr=o("pretrained_model_name_or_path"),qMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=a("code"),NMr=o("pretrained_model_name_or_path"),jMr=o(":"),DMr=l(),MFe=a("ul"),E4=a("li"),EFe=a("strong"),GMr=o("vision-encoder-decoder"),OMr=o(" \u2014 "),NH=a("a"),VMr=o("TFVisionEncoderDecoderModel"),XMr=o(" (Vision Encoder decoder model)"),zMr=l(),F(C4.$$.fragment),rIe=l(),pc=a("h2"),w4=a("a"),CFe=a("span"),F(hL.$$.fragment),QMr=l(),wFe=a("span"),WMr=o("TFAutoModelForSpeechSeq2Seq"),tIe=l(),dr=a("div"),F(pL.$$.fragment),HMr=l(),uc=a("p"),UMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jH=a("a"),JMr=o("from_pretrained()"),YMr=o(" class method or the "),DH=a("a"),KMr=o("from_config()"),ZMr=o(` class
method.`),e4r=l(),uL=a("p"),o4r=o("This class cannot be instantiated directly using "),AFe=a("code"),r4r=o("__init__()"),t4r=o(" (throws an error)."),a4r=l(),Pt=a("div"),F(_L.$$.fragment),n4r=l(),yFe=a("p"),s4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),l4r=l(),_c=a("p"),i4r=o(`Note:
Loading a model from its configuration file does `),LFe=a("strong"),d4r=o("not"),c4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=a("a"),f4r=o("from_pretrained()"),m4r=o(" to load the model weights."),g4r=l(),F(A4.$$.fragment),h4r=l(),Ir=a("div"),F(bL.$$.fragment),p4r=l(),xFe=a("p"),u4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_4r=l(),ln=a("p"),b4r=o("The model class to instantiate is selected based on the "),$Fe=a("code"),v4r=o("model_type"),F4r=o(` property of the config object (either
passed as an argument or loaded from `),kFe=a("code"),T4r=o("pretrained_model_name_or_path"),M4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=a("code"),E4r=o("pretrained_model_name_or_path"),C4r=o(":"),w4r=l(),RFe=a("ul"),y4=a("li"),BFe=a("strong"),A4r=o("speech_to_text"),y4r=o(" \u2014 "),OH=a("a"),L4r=o("TFSpeech2TextForConditionalGeneration"),x4r=o(" (Speech2Text model)"),$4r=l(),F(L4.$$.fragment),aIe=l(),bc=a("h2"),x4=a("a"),PFe=a("span"),F(vL.$$.fragment),k4r=l(),IFe=a("span"),S4r=o("FlaxAutoModel"),nIe=l(),cr=a("div"),F(FL.$$.fragment),R4r=l(),vc=a("p"),B4r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VH=a("a"),P4r=o("from_pretrained()"),I4r=o(" class method or the "),XH=a("a"),q4r=o("from_config()"),N4r=o(` class
method.`),j4r=l(),TL=a("p"),D4r=o("This class cannot be instantiated directly using "),qFe=a("code"),G4r=o("__init__()"),O4r=o(" (throws an error)."),V4r=l(),It=a("div"),F(ML.$$.fragment),X4r=l(),NFe=a("p"),z4r=o("Instantiates one of the base model classes of the library from a configuration."),Q4r=l(),Fc=a("p"),W4r=o(`Note:
Loading a model from its configuration file does `),jFe=a("strong"),H4r=o("not"),U4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=a("a"),J4r=o("from_pretrained()"),Y4r=o(" to load the model weights."),K4r=l(),F($4.$$.fragment),Z4r=l(),qr=a("div"),F(EL.$$.fragment),eEr=l(),DFe=a("p"),oEr=o("Instantiate one of the base model classes of the library from a pretrained model."),rEr=l(),dn=a("p"),tEr=o("The model class to instantiate is selected based on the "),GFe=a("code"),aEr=o("model_type"),nEr=o(` property of the config object (either
passed as an argument or loaded from `),OFe=a("code"),sEr=o("pretrained_model_name_or_path"),lEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=a("code"),iEr=o("pretrained_model_name_or_path"),dEr=o(":"),cEr=l(),oe=a("ul"),k4=a("li"),XFe=a("strong"),fEr=o("albert"),mEr=o(" \u2014 "),QH=a("a"),gEr=o("FlaxAlbertModel"),hEr=o(" (ALBERT model)"),pEr=l(),S4=a("li"),zFe=a("strong"),uEr=o("bart"),_Er=o(" \u2014 "),WH=a("a"),bEr=o("FlaxBartModel"),vEr=o(" (BART model)"),FEr=l(),R4=a("li"),QFe=a("strong"),TEr=o("beit"),MEr=o(" \u2014 "),HH=a("a"),EEr=o("FlaxBeitModel"),CEr=o(" (BEiT model)"),wEr=l(),B4=a("li"),WFe=a("strong"),AEr=o("bert"),yEr=o(" \u2014 "),UH=a("a"),LEr=o("FlaxBertModel"),xEr=o(" (BERT model)"),$Er=l(),P4=a("li"),HFe=a("strong"),kEr=o("big_bird"),SEr=o(" \u2014 "),JH=a("a"),REr=o("FlaxBigBirdModel"),BEr=o(" (BigBird model)"),PEr=l(),I4=a("li"),UFe=a("strong"),IEr=o("blenderbot"),qEr=o(" \u2014 "),YH=a("a"),NEr=o("FlaxBlenderbotModel"),jEr=o(" (Blenderbot model)"),DEr=l(),q4=a("li"),JFe=a("strong"),GEr=o("blenderbot-small"),OEr=o(" \u2014 "),KH=a("a"),VEr=o("FlaxBlenderbotSmallModel"),XEr=o(" (BlenderbotSmall model)"),zEr=l(),N4=a("li"),YFe=a("strong"),QEr=o("clip"),WEr=o(" \u2014 "),ZH=a("a"),HEr=o("FlaxCLIPModel"),UEr=o(" (CLIP model)"),JEr=l(),j4=a("li"),KFe=a("strong"),YEr=o("distilbert"),KEr=o(" \u2014 "),eU=a("a"),ZEr=o("FlaxDistilBertModel"),e5r=o(" (DistilBERT model)"),o5r=l(),D4=a("li"),ZFe=a("strong"),r5r=o("electra"),t5r=o(" \u2014 "),oU=a("a"),a5r=o("FlaxElectraModel"),n5r=o(" (ELECTRA model)"),s5r=l(),G4=a("li"),e0e=a("strong"),l5r=o("gpt2"),i5r=o(" \u2014 "),rU=a("a"),d5r=o("FlaxGPT2Model"),c5r=o(" (OpenAI GPT-2 model)"),f5r=l(),O4=a("li"),o0e=a("strong"),m5r=o("gpt_neo"),g5r=o(" \u2014 "),tU=a("a"),h5r=o("FlaxGPTNeoModel"),p5r=o(" (GPT Neo model)"),u5r=l(),V4=a("li"),r0e=a("strong"),_5r=o("gptj"),b5r=o(" \u2014 "),aU=a("a"),v5r=o("FlaxGPTJModel"),F5r=o(" (GPT-J model)"),T5r=l(),X4=a("li"),t0e=a("strong"),M5r=o("marian"),E5r=o(" \u2014 "),nU=a("a"),C5r=o("FlaxMarianModel"),w5r=o(" (Marian model)"),A5r=l(),z4=a("li"),a0e=a("strong"),y5r=o("mbart"),L5r=o(" \u2014 "),sU=a("a"),x5r=o("FlaxMBartModel"),$5r=o(" (mBART model)"),k5r=l(),Q4=a("li"),n0e=a("strong"),S5r=o("mt5"),R5r=o(" \u2014 "),lU=a("a"),B5r=o("FlaxMT5Model"),P5r=o(" (mT5 model)"),I5r=l(),W4=a("li"),s0e=a("strong"),q5r=o("pegasus"),N5r=o(" \u2014 "),iU=a("a"),j5r=o("FlaxPegasusModel"),D5r=o(" (Pegasus model)"),G5r=l(),H4=a("li"),l0e=a("strong"),O5r=o("roberta"),V5r=o(" \u2014 "),dU=a("a"),X5r=o("FlaxRobertaModel"),z5r=o(" (RoBERTa model)"),Q5r=l(),U4=a("li"),i0e=a("strong"),W5r=o("roformer"),H5r=o(" \u2014 "),cU=a("a"),U5r=o("FlaxRoFormerModel"),J5r=o(" (RoFormer model)"),Y5r=l(),J4=a("li"),d0e=a("strong"),K5r=o("t5"),Z5r=o(" \u2014 "),fU=a("a"),eCr=o("FlaxT5Model"),oCr=o(" (T5 model)"),rCr=l(),Y4=a("li"),c0e=a("strong"),tCr=o("vision-text-dual-encoder"),aCr=o(" \u2014 "),mU=a("a"),nCr=o("FlaxVisionTextDualEncoderModel"),sCr=o(" (VisionTextDualEncoder model)"),lCr=l(),K4=a("li"),f0e=a("strong"),iCr=o("vit"),dCr=o(" \u2014 "),gU=a("a"),cCr=o("FlaxViTModel"),fCr=o(" (ViT model)"),mCr=l(),Z4=a("li"),m0e=a("strong"),gCr=o("wav2vec2"),hCr=o(" \u2014 "),hU=a("a"),pCr=o("FlaxWav2Vec2Model"),uCr=o(" (Wav2Vec2 model)"),_Cr=l(),eE=a("li"),g0e=a("strong"),bCr=o("xglm"),vCr=o(" \u2014 "),pU=a("a"),FCr=o("FlaxXGLMModel"),TCr=o(" (XGLM model)"),MCr=l(),oE=a("li"),h0e=a("strong"),ECr=o("xlm-roberta"),CCr=o(" \u2014 "),uU=a("a"),wCr=o("FlaxXLMRobertaModel"),ACr=o(" (XLM-RoBERTa model)"),yCr=l(),F(rE.$$.fragment),sIe=l(),Tc=a("h2"),tE=a("a"),p0e=a("span"),F(CL.$$.fragment),LCr=l(),u0e=a("span"),xCr=o("FlaxAutoModelForCausalLM"),lIe=l(),fr=a("div"),F(wL.$$.fragment),$Cr=l(),Mc=a("p"),kCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_U=a("a"),SCr=o("from_pretrained()"),RCr=o(" class method or the "),bU=a("a"),BCr=o("from_config()"),PCr=o(` class
method.`),ICr=l(),AL=a("p"),qCr=o("This class cannot be instantiated directly using "),_0e=a("code"),NCr=o("__init__()"),jCr=o(" (throws an error)."),DCr=l(),qt=a("div"),F(yL.$$.fragment),GCr=l(),b0e=a("p"),OCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VCr=l(),Ec=a("p"),XCr=o(`Note:
Loading a model from its configuration file does `),v0e=a("strong"),zCr=o("not"),QCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),WCr=o("from_pretrained()"),HCr=o(" to load the model weights."),UCr=l(),F(aE.$$.fragment),JCr=l(),Nr=a("div"),F(LL.$$.fragment),YCr=l(),F0e=a("p"),KCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ZCr=l(),cn=a("p"),e3r=o("The model class to instantiate is selected based on the "),T0e=a("code"),o3r=o("model_type"),r3r=o(` property of the config object (either
passed as an argument or loaded from `),M0e=a("code"),t3r=o("pretrained_model_name_or_path"),a3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E0e=a("code"),n3r=o("pretrained_model_name_or_path"),s3r=o(":"),l3r=l(),ke=a("ul"),nE=a("li"),C0e=a("strong"),i3r=o("bart"),d3r=o(" \u2014 "),FU=a("a"),c3r=o("FlaxBartForCausalLM"),f3r=o(" (BART model)"),m3r=l(),sE=a("li"),w0e=a("strong"),g3r=o("bert"),h3r=o(" \u2014 "),TU=a("a"),p3r=o("FlaxBertForCausalLM"),u3r=o(" (BERT model)"),_3r=l(),lE=a("li"),A0e=a("strong"),b3r=o("big_bird"),v3r=o(" \u2014 "),MU=a("a"),F3r=o("FlaxBigBirdForCausalLM"),T3r=o(" (BigBird model)"),M3r=l(),iE=a("li"),y0e=a("strong"),E3r=o("electra"),C3r=o(" \u2014 "),EU=a("a"),w3r=o("FlaxElectraForCausalLM"),A3r=o(" (ELECTRA model)"),y3r=l(),dE=a("li"),L0e=a("strong"),L3r=o("gpt2"),x3r=o(" \u2014 "),CU=a("a"),$3r=o("FlaxGPT2LMHeadModel"),k3r=o(" (OpenAI GPT-2 model)"),S3r=l(),cE=a("li"),x0e=a("strong"),R3r=o("gpt_neo"),B3r=o(" \u2014 "),wU=a("a"),P3r=o("FlaxGPTNeoForCausalLM"),I3r=o(" (GPT Neo model)"),q3r=l(),fE=a("li"),$0e=a("strong"),N3r=o("gptj"),j3r=o(" \u2014 "),AU=a("a"),D3r=o("FlaxGPTJForCausalLM"),G3r=o(" (GPT-J model)"),O3r=l(),mE=a("li"),k0e=a("strong"),V3r=o("roberta"),X3r=o(" \u2014 "),yU=a("a"),z3r=o("FlaxRobertaForCausalLM"),Q3r=o(" (RoBERTa model)"),W3r=l(),gE=a("li"),S0e=a("strong"),H3r=o("xglm"),U3r=o(" \u2014 "),LU=a("a"),J3r=o("FlaxXGLMForCausalLM"),Y3r=o(" (XGLM model)"),K3r=l(),F(hE.$$.fragment),iIe=l(),Cc=a("h2"),pE=a("a"),R0e=a("span"),F(xL.$$.fragment),Z3r=l(),B0e=a("span"),ewr=o("FlaxAutoModelForPreTraining"),dIe=l(),mr=a("div"),F($L.$$.fragment),owr=l(),wc=a("p"),rwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xU=a("a"),twr=o("from_pretrained()"),awr=o(" class method or the "),$U=a("a"),nwr=o("from_config()"),swr=o(` class
method.`),lwr=l(),kL=a("p"),iwr=o("This class cannot be instantiated directly using "),P0e=a("code"),dwr=o("__init__()"),cwr=o(" (throws an error)."),fwr=l(),Nt=a("div"),F(SL.$$.fragment),mwr=l(),I0e=a("p"),gwr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hwr=l(),Ac=a("p"),pwr=o(`Note:
Loading a model from its configuration file does `),q0e=a("strong"),uwr=o("not"),_wr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=a("a"),bwr=o("from_pretrained()"),vwr=o(" to load the model weights."),Fwr=l(),F(uE.$$.fragment),Twr=l(),jr=a("div"),F(RL.$$.fragment),Mwr=l(),N0e=a("p"),Ewr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Cwr=l(),fn=a("p"),wwr=o("The model class to instantiate is selected based on the "),j0e=a("code"),Awr=o("model_type"),ywr=o(` property of the config object (either
passed as an argument or loaded from `),D0e=a("code"),Lwr=o("pretrained_model_name_or_path"),xwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G0e=a("code"),$wr=o("pretrained_model_name_or_path"),kwr=o(":"),Swr=l(),Me=a("ul"),_E=a("li"),O0e=a("strong"),Rwr=o("albert"),Bwr=o(" \u2014 "),SU=a("a"),Pwr=o("FlaxAlbertForPreTraining"),Iwr=o(" (ALBERT model)"),qwr=l(),bE=a("li"),V0e=a("strong"),Nwr=o("bart"),jwr=o(" \u2014 "),RU=a("a"),Dwr=o("FlaxBartForConditionalGeneration"),Gwr=o(" (BART model)"),Owr=l(),vE=a("li"),X0e=a("strong"),Vwr=o("bert"),Xwr=o(" \u2014 "),BU=a("a"),zwr=o("FlaxBertForPreTraining"),Qwr=o(" (BERT model)"),Wwr=l(),FE=a("li"),z0e=a("strong"),Hwr=o("big_bird"),Uwr=o(" \u2014 "),PU=a("a"),Jwr=o("FlaxBigBirdForPreTraining"),Ywr=o(" (BigBird model)"),Kwr=l(),TE=a("li"),Q0e=a("strong"),Zwr=o("electra"),eAr=o(" \u2014 "),IU=a("a"),oAr=o("FlaxElectraForPreTraining"),rAr=o(" (ELECTRA model)"),tAr=l(),ME=a("li"),W0e=a("strong"),aAr=o("mbart"),nAr=o(" \u2014 "),qU=a("a"),sAr=o("FlaxMBartForConditionalGeneration"),lAr=o(" (mBART model)"),iAr=l(),EE=a("li"),H0e=a("strong"),dAr=o("mt5"),cAr=o(" \u2014 "),NU=a("a"),fAr=o("FlaxMT5ForConditionalGeneration"),mAr=o(" (mT5 model)"),gAr=l(),CE=a("li"),U0e=a("strong"),hAr=o("roberta"),pAr=o(" \u2014 "),jU=a("a"),uAr=o("FlaxRobertaForMaskedLM"),_Ar=o(" (RoBERTa model)"),bAr=l(),wE=a("li"),J0e=a("strong"),vAr=o("roformer"),FAr=o(" \u2014 "),DU=a("a"),TAr=o("FlaxRoFormerForMaskedLM"),MAr=o(" (RoFormer model)"),EAr=l(),AE=a("li"),Y0e=a("strong"),CAr=o("t5"),wAr=o(" \u2014 "),GU=a("a"),AAr=o("FlaxT5ForConditionalGeneration"),yAr=o(" (T5 model)"),LAr=l(),yE=a("li"),K0e=a("strong"),xAr=o("wav2vec2"),$Ar=o(" \u2014 "),OU=a("a"),kAr=o("FlaxWav2Vec2ForPreTraining"),SAr=o(" (Wav2Vec2 model)"),RAr=l(),LE=a("li"),Z0e=a("strong"),BAr=o("xlm-roberta"),PAr=o(" \u2014 "),VU=a("a"),IAr=o("FlaxXLMRobertaForMaskedLM"),qAr=o(" (XLM-RoBERTa model)"),NAr=l(),F(xE.$$.fragment),cIe=l(),yc=a("h2"),$E=a("a"),eTe=a("span"),F(BL.$$.fragment),jAr=l(),oTe=a("span"),DAr=o("FlaxAutoModelForMaskedLM"),fIe=l(),gr=a("div"),F(PL.$$.fragment),GAr=l(),Lc=a("p"),OAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XU=a("a"),VAr=o("from_pretrained()"),XAr=o(" class method or the "),zU=a("a"),zAr=o("from_config()"),QAr=o(` class
method.`),WAr=l(),IL=a("p"),HAr=o("This class cannot be instantiated directly using "),rTe=a("code"),UAr=o("__init__()"),JAr=o(" (throws an error)."),YAr=l(),jt=a("div"),F(qL.$$.fragment),KAr=l(),tTe=a("p"),ZAr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),e6r=l(),xc=a("p"),o6r=o(`Note:
Loading a model from its configuration file does `),aTe=a("strong"),r6r=o("not"),t6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),a6r=o("from_pretrained()"),n6r=o(" to load the model weights."),s6r=l(),F(kE.$$.fragment),l6r=l(),Dr=a("div"),F(NL.$$.fragment),i6r=l(),nTe=a("p"),d6r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),c6r=l(),mn=a("p"),f6r=o("The model class to instantiate is selected based on the "),sTe=a("code"),m6r=o("model_type"),g6r=o(` property of the config object (either
passed as an argument or loaded from `),lTe=a("code"),h6r=o("pretrained_model_name_or_path"),p6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iTe=a("code"),u6r=o("pretrained_model_name_or_path"),_6r=o(":"),b6r=l(),Le=a("ul"),SE=a("li"),dTe=a("strong"),v6r=o("albert"),F6r=o(" \u2014 "),WU=a("a"),T6r=o("FlaxAlbertForMaskedLM"),M6r=o(" (ALBERT model)"),E6r=l(),RE=a("li"),cTe=a("strong"),C6r=o("bart"),w6r=o(" \u2014 "),HU=a("a"),A6r=o("FlaxBartForConditionalGeneration"),y6r=o(" (BART model)"),L6r=l(),BE=a("li"),fTe=a("strong"),x6r=o("bert"),$6r=o(" \u2014 "),UU=a("a"),k6r=o("FlaxBertForMaskedLM"),S6r=o(" (BERT model)"),R6r=l(),PE=a("li"),mTe=a("strong"),B6r=o("big_bird"),P6r=o(" \u2014 "),JU=a("a"),I6r=o("FlaxBigBirdForMaskedLM"),q6r=o(" (BigBird model)"),N6r=l(),IE=a("li"),gTe=a("strong"),j6r=o("distilbert"),D6r=o(" \u2014 "),YU=a("a"),G6r=o("FlaxDistilBertForMaskedLM"),O6r=o(" (DistilBERT model)"),V6r=l(),qE=a("li"),hTe=a("strong"),X6r=o("electra"),z6r=o(" \u2014 "),KU=a("a"),Q6r=o("FlaxElectraForMaskedLM"),W6r=o(" (ELECTRA model)"),H6r=l(),NE=a("li"),pTe=a("strong"),U6r=o("mbart"),J6r=o(" \u2014 "),ZU=a("a"),Y6r=o("FlaxMBartForConditionalGeneration"),K6r=o(" (mBART model)"),Z6r=l(),jE=a("li"),uTe=a("strong"),eyr=o("roberta"),oyr=o(" \u2014 "),eJ=a("a"),ryr=o("FlaxRobertaForMaskedLM"),tyr=o(" (RoBERTa model)"),ayr=l(),DE=a("li"),_Te=a("strong"),nyr=o("roformer"),syr=o(" \u2014 "),oJ=a("a"),lyr=o("FlaxRoFormerForMaskedLM"),iyr=o(" (RoFormer model)"),dyr=l(),GE=a("li"),bTe=a("strong"),cyr=o("xlm-roberta"),fyr=o(" \u2014 "),rJ=a("a"),myr=o("FlaxXLMRobertaForMaskedLM"),gyr=o(" (XLM-RoBERTa model)"),hyr=l(),F(OE.$$.fragment),mIe=l(),$c=a("h2"),VE=a("a"),vTe=a("span"),F(jL.$$.fragment),pyr=l(),FTe=a("span"),uyr=o("FlaxAutoModelForSeq2SeqLM"),gIe=l(),hr=a("div"),F(DL.$$.fragment),_yr=l(),kc=a("p"),byr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tJ=a("a"),vyr=o("from_pretrained()"),Fyr=o(" class method or the "),aJ=a("a"),Tyr=o("from_config()"),Myr=o(` class
method.`),Eyr=l(),GL=a("p"),Cyr=o("This class cannot be instantiated directly using "),TTe=a("code"),wyr=o("__init__()"),Ayr=o(" (throws an error)."),yyr=l(),Dt=a("div"),F(OL.$$.fragment),Lyr=l(),MTe=a("p"),xyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$yr=l(),Sc=a("p"),kyr=o(`Note:
Loading a model from its configuration file does `),ETe=a("strong"),Syr=o("not"),Ryr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("a"),Byr=o("from_pretrained()"),Pyr=o(" to load the model weights."),Iyr=l(),F(XE.$$.fragment),qyr=l(),Gr=a("div"),F(VL.$$.fragment),Nyr=l(),CTe=a("p"),jyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Dyr=l(),gn=a("p"),Gyr=o("The model class to instantiate is selected based on the "),wTe=a("code"),Oyr=o("model_type"),Vyr=o(` property of the config object (either
passed as an argument or loaded from `),ATe=a("code"),Xyr=o("pretrained_model_name_or_path"),zyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yTe=a("code"),Qyr=o("pretrained_model_name_or_path"),Wyr=o(":"),Hyr=l(),Se=a("ul"),zE=a("li"),LTe=a("strong"),Uyr=o("bart"),Jyr=o(" \u2014 "),sJ=a("a"),Yyr=o("FlaxBartForConditionalGeneration"),Kyr=o(" (BART model)"),Zyr=l(),QE=a("li"),xTe=a("strong"),eLr=o("blenderbot"),oLr=o(" \u2014 "),lJ=a("a"),rLr=o("FlaxBlenderbotForConditionalGeneration"),tLr=o(" (Blenderbot model)"),aLr=l(),WE=a("li"),$Te=a("strong"),nLr=o("blenderbot-small"),sLr=o(" \u2014 "),iJ=a("a"),lLr=o("FlaxBlenderbotSmallForConditionalGeneration"),iLr=o(" (BlenderbotSmall model)"),dLr=l(),HE=a("li"),kTe=a("strong"),cLr=o("encoder-decoder"),fLr=o(" \u2014 "),dJ=a("a"),mLr=o("FlaxEncoderDecoderModel"),gLr=o(" (Encoder decoder model)"),hLr=l(),UE=a("li"),STe=a("strong"),pLr=o("marian"),uLr=o(" \u2014 "),cJ=a("a"),_Lr=o("FlaxMarianMTModel"),bLr=o(" (Marian model)"),vLr=l(),JE=a("li"),RTe=a("strong"),FLr=o("mbart"),TLr=o(" \u2014 "),fJ=a("a"),MLr=o("FlaxMBartForConditionalGeneration"),ELr=o(" (mBART model)"),CLr=l(),YE=a("li"),BTe=a("strong"),wLr=o("mt5"),ALr=o(" \u2014 "),mJ=a("a"),yLr=o("FlaxMT5ForConditionalGeneration"),LLr=o(" (mT5 model)"),xLr=l(),KE=a("li"),PTe=a("strong"),$Lr=o("pegasus"),kLr=o(" \u2014 "),gJ=a("a"),SLr=o("FlaxPegasusForConditionalGeneration"),RLr=o(" (Pegasus model)"),BLr=l(),ZE=a("li"),ITe=a("strong"),PLr=o("t5"),ILr=o(" \u2014 "),hJ=a("a"),qLr=o("FlaxT5ForConditionalGeneration"),NLr=o(" (T5 model)"),jLr=l(),F(e5.$$.fragment),hIe=l(),Rc=a("h2"),o5=a("a"),qTe=a("span"),F(XL.$$.fragment),DLr=l(),NTe=a("span"),GLr=o("FlaxAutoModelForSequenceClassification"),pIe=l(),pr=a("div"),F(zL.$$.fragment),OLr=l(),Bc=a("p"),VLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pJ=a("a"),XLr=o("from_pretrained()"),zLr=o(" class method or the "),uJ=a("a"),QLr=o("from_config()"),WLr=o(` class
method.`),HLr=l(),QL=a("p"),ULr=o("This class cannot be instantiated directly using "),jTe=a("code"),JLr=o("__init__()"),YLr=o(" (throws an error)."),KLr=l(),Gt=a("div"),F(WL.$$.fragment),ZLr=l(),DTe=a("p"),e8r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),o8r=l(),Pc=a("p"),r8r=o(`Note:
Loading a model from its configuration file does `),GTe=a("strong"),t8r=o("not"),a8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=a("a"),n8r=o("from_pretrained()"),s8r=o(" to load the model weights."),l8r=l(),F(r5.$$.fragment),i8r=l(),Or=a("div"),F(HL.$$.fragment),d8r=l(),OTe=a("p"),c8r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),f8r=l(),hn=a("p"),m8r=o("The model class to instantiate is selected based on the "),VTe=a("code"),g8r=o("model_type"),h8r=o(` property of the config object (either
passed as an argument or loaded from `),XTe=a("code"),p8r=o("pretrained_model_name_or_path"),u8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zTe=a("code"),_8r=o("pretrained_model_name_or_path"),b8r=o(":"),v8r=l(),xe=a("ul"),t5=a("li"),QTe=a("strong"),F8r=o("albert"),T8r=o(" \u2014 "),bJ=a("a"),M8r=o("FlaxAlbertForSequenceClassification"),E8r=o(" (ALBERT model)"),C8r=l(),a5=a("li"),WTe=a("strong"),w8r=o("bart"),A8r=o(" \u2014 "),vJ=a("a"),y8r=o("FlaxBartForSequenceClassification"),L8r=o(" (BART model)"),x8r=l(),n5=a("li"),HTe=a("strong"),$8r=o("bert"),k8r=o(" \u2014 "),FJ=a("a"),S8r=o("FlaxBertForSequenceClassification"),R8r=o(" (BERT model)"),B8r=l(),s5=a("li"),UTe=a("strong"),P8r=o("big_bird"),I8r=o(" \u2014 "),TJ=a("a"),q8r=o("FlaxBigBirdForSequenceClassification"),N8r=o(" (BigBird model)"),j8r=l(),l5=a("li"),JTe=a("strong"),D8r=o("distilbert"),G8r=o(" \u2014 "),MJ=a("a"),O8r=o("FlaxDistilBertForSequenceClassification"),V8r=o(" (DistilBERT model)"),X8r=l(),i5=a("li"),YTe=a("strong"),z8r=o("electra"),Q8r=o(" \u2014 "),EJ=a("a"),W8r=o("FlaxElectraForSequenceClassification"),H8r=o(" (ELECTRA model)"),U8r=l(),d5=a("li"),KTe=a("strong"),J8r=o("mbart"),Y8r=o(" \u2014 "),CJ=a("a"),K8r=o("FlaxMBartForSequenceClassification"),Z8r=o(" (mBART model)"),exr=l(),c5=a("li"),ZTe=a("strong"),oxr=o("roberta"),rxr=o(" \u2014 "),wJ=a("a"),txr=o("FlaxRobertaForSequenceClassification"),axr=o(" (RoBERTa model)"),nxr=l(),f5=a("li"),e7e=a("strong"),sxr=o("roformer"),lxr=o(" \u2014 "),AJ=a("a"),ixr=o("FlaxRoFormerForSequenceClassification"),dxr=o(" (RoFormer model)"),cxr=l(),m5=a("li"),o7e=a("strong"),fxr=o("xlm-roberta"),mxr=o(" \u2014 "),yJ=a("a"),gxr=o("FlaxXLMRobertaForSequenceClassification"),hxr=o(" (XLM-RoBERTa model)"),pxr=l(),F(g5.$$.fragment),uIe=l(),Ic=a("h2"),h5=a("a"),r7e=a("span"),F(UL.$$.fragment),uxr=l(),t7e=a("span"),_xr=o("FlaxAutoModelForQuestionAnswering"),_Ie=l(),ur=a("div"),F(JL.$$.fragment),bxr=l(),qc=a("p"),vxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),LJ=a("a"),Fxr=o("from_pretrained()"),Txr=o(" class method or the "),xJ=a("a"),Mxr=o("from_config()"),Exr=o(` class
method.`),Cxr=l(),YL=a("p"),wxr=o("This class cannot be instantiated directly using "),a7e=a("code"),Axr=o("__init__()"),yxr=o(" (throws an error)."),Lxr=l(),Ot=a("div"),F(KL.$$.fragment),xxr=l(),n7e=a("p"),$xr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kxr=l(),Nc=a("p"),Sxr=o(`Note:
Loading a model from its configuration file does `),s7e=a("strong"),Rxr=o("not"),Bxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=a("a"),Pxr=o("from_pretrained()"),Ixr=o(" to load the model weights."),qxr=l(),F(p5.$$.fragment),Nxr=l(),Vr=a("div"),F(ZL.$$.fragment),jxr=l(),l7e=a("p"),Dxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Gxr=l(),pn=a("p"),Oxr=o("The model class to instantiate is selected based on the "),i7e=a("code"),Vxr=o("model_type"),Xxr=o(` property of the config object (either
passed as an argument or loaded from `),d7e=a("code"),zxr=o("pretrained_model_name_or_path"),Qxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c7e=a("code"),Wxr=o("pretrained_model_name_or_path"),Hxr=o(":"),Uxr=l(),$e=a("ul"),u5=a("li"),f7e=a("strong"),Jxr=o("albert"),Yxr=o(" \u2014 "),kJ=a("a"),Kxr=o("FlaxAlbertForQuestionAnswering"),Zxr=o(" (ALBERT model)"),e$r=l(),_5=a("li"),m7e=a("strong"),o$r=o("bart"),r$r=o(" \u2014 "),SJ=a("a"),t$r=o("FlaxBartForQuestionAnswering"),a$r=o(" (BART model)"),n$r=l(),b5=a("li"),g7e=a("strong"),s$r=o("bert"),l$r=o(" \u2014 "),RJ=a("a"),i$r=o("FlaxBertForQuestionAnswering"),d$r=o(" (BERT model)"),c$r=l(),v5=a("li"),h7e=a("strong"),f$r=o("big_bird"),m$r=o(" \u2014 "),BJ=a("a"),g$r=o("FlaxBigBirdForQuestionAnswering"),h$r=o(" (BigBird model)"),p$r=l(),F5=a("li"),p7e=a("strong"),u$r=o("distilbert"),_$r=o(" \u2014 "),PJ=a("a"),b$r=o("FlaxDistilBertForQuestionAnswering"),v$r=o(" (DistilBERT model)"),F$r=l(),T5=a("li"),u7e=a("strong"),T$r=o("electra"),M$r=o(" \u2014 "),IJ=a("a"),E$r=o("FlaxElectraForQuestionAnswering"),C$r=o(" (ELECTRA model)"),w$r=l(),M5=a("li"),_7e=a("strong"),A$r=o("mbart"),y$r=o(" \u2014 "),qJ=a("a"),L$r=o("FlaxMBartForQuestionAnswering"),x$r=o(" (mBART model)"),$$r=l(),E5=a("li"),b7e=a("strong"),k$r=o("roberta"),S$r=o(" \u2014 "),NJ=a("a"),R$r=o("FlaxRobertaForQuestionAnswering"),B$r=o(" (RoBERTa model)"),P$r=l(),C5=a("li"),v7e=a("strong"),I$r=o("roformer"),q$r=o(" \u2014 "),jJ=a("a"),N$r=o("FlaxRoFormerForQuestionAnswering"),j$r=o(" (RoFormer model)"),D$r=l(),w5=a("li"),F7e=a("strong"),G$r=o("xlm-roberta"),O$r=o(" \u2014 "),DJ=a("a"),V$r=o("FlaxXLMRobertaForQuestionAnswering"),X$r=o(" (XLM-RoBERTa model)"),z$r=l(),F(A5.$$.fragment),bIe=l(),jc=a("h2"),y5=a("a"),T7e=a("span"),F(e8.$$.fragment),Q$r=l(),M7e=a("span"),W$r=o("FlaxAutoModelForTokenClassification"),vIe=l(),_r=a("div"),F(o8.$$.fragment),H$r=l(),Dc=a("p"),U$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GJ=a("a"),J$r=o("from_pretrained()"),Y$r=o(" class method or the "),OJ=a("a"),K$r=o("from_config()"),Z$r=o(` class
method.`),ekr=l(),r8=a("p"),okr=o("This class cannot be instantiated directly using "),E7e=a("code"),rkr=o("__init__()"),tkr=o(" (throws an error)."),akr=l(),Vt=a("div"),F(t8.$$.fragment),nkr=l(),C7e=a("p"),skr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),lkr=l(),Gc=a("p"),ikr=o(`Note:
Loading a model from its configuration file does `),w7e=a("strong"),dkr=o("not"),ckr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),fkr=o("from_pretrained()"),mkr=o(" to load the model weights."),gkr=l(),F(L5.$$.fragment),hkr=l(),Xr=a("div"),F(a8.$$.fragment),pkr=l(),A7e=a("p"),ukr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_kr=l(),un=a("p"),bkr=o("The model class to instantiate is selected based on the "),y7e=a("code"),vkr=o("model_type"),Fkr=o(` property of the config object (either
passed as an argument or loaded from `),L7e=a("code"),Tkr=o("pretrained_model_name_or_path"),Mkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x7e=a("code"),Ekr=o("pretrained_model_name_or_path"),Ckr=o(":"),wkr=l(),De=a("ul"),x5=a("li"),$7e=a("strong"),Akr=o("albert"),ykr=o(" \u2014 "),XJ=a("a"),Lkr=o("FlaxAlbertForTokenClassification"),xkr=o(" (ALBERT model)"),$kr=l(),$5=a("li"),k7e=a("strong"),kkr=o("bert"),Skr=o(" \u2014 "),zJ=a("a"),Rkr=o("FlaxBertForTokenClassification"),Bkr=o(" (BERT model)"),Pkr=l(),k5=a("li"),S7e=a("strong"),Ikr=o("big_bird"),qkr=o(" \u2014 "),QJ=a("a"),Nkr=o("FlaxBigBirdForTokenClassification"),jkr=o(" (BigBird model)"),Dkr=l(),S5=a("li"),R7e=a("strong"),Gkr=o("distilbert"),Okr=o(" \u2014 "),WJ=a("a"),Vkr=o("FlaxDistilBertForTokenClassification"),Xkr=o(" (DistilBERT model)"),zkr=l(),R5=a("li"),B7e=a("strong"),Qkr=o("electra"),Wkr=o(" \u2014 "),HJ=a("a"),Hkr=o("FlaxElectraForTokenClassification"),Ukr=o(" (ELECTRA model)"),Jkr=l(),B5=a("li"),P7e=a("strong"),Ykr=o("roberta"),Kkr=o(" \u2014 "),UJ=a("a"),Zkr=o("FlaxRobertaForTokenClassification"),eSr=o(" (RoBERTa model)"),oSr=l(),P5=a("li"),I7e=a("strong"),rSr=o("roformer"),tSr=o(" \u2014 "),JJ=a("a"),aSr=o("FlaxRoFormerForTokenClassification"),nSr=o(" (RoFormer model)"),sSr=l(),I5=a("li"),q7e=a("strong"),lSr=o("xlm-roberta"),iSr=o(" \u2014 "),YJ=a("a"),dSr=o("FlaxXLMRobertaForTokenClassification"),cSr=o(" (XLM-RoBERTa model)"),fSr=l(),F(q5.$$.fragment),FIe=l(),Oc=a("h2"),N5=a("a"),N7e=a("span"),F(n8.$$.fragment),mSr=l(),j7e=a("span"),gSr=o("FlaxAutoModelForMultipleChoice"),TIe=l(),br=a("div"),F(s8.$$.fragment),hSr=l(),Vc=a("p"),pSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KJ=a("a"),uSr=o("from_pretrained()"),_Sr=o(" class method or the "),ZJ=a("a"),bSr=o("from_config()"),vSr=o(` class
method.`),FSr=l(),l8=a("p"),TSr=o("This class cannot be instantiated directly using "),D7e=a("code"),MSr=o("__init__()"),ESr=o(" (throws an error)."),CSr=l(),Xt=a("div"),F(i8.$$.fragment),wSr=l(),G7e=a("p"),ASr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ySr=l(),Xc=a("p"),LSr=o(`Note:
Loading a model from its configuration file does `),O7e=a("strong"),xSr=o("not"),$Sr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=a("a"),kSr=o("from_pretrained()"),SSr=o(" to load the model weights."),RSr=l(),F(j5.$$.fragment),BSr=l(),zr=a("div"),F(d8.$$.fragment),PSr=l(),V7e=a("p"),ISr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),qSr=l(),_n=a("p"),NSr=o("The model class to instantiate is selected based on the "),X7e=a("code"),jSr=o("model_type"),DSr=o(` property of the config object (either
passed as an argument or loaded from `),z7e=a("code"),GSr=o("pretrained_model_name_or_path"),OSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=a("code"),VSr=o("pretrained_model_name_or_path"),XSr=o(":"),zSr=l(),Ge=a("ul"),D5=a("li"),W7e=a("strong"),QSr=o("albert"),WSr=o(" \u2014 "),oY=a("a"),HSr=o("FlaxAlbertForMultipleChoice"),USr=o(" (ALBERT model)"),JSr=l(),G5=a("li"),H7e=a("strong"),YSr=o("bert"),KSr=o(" \u2014 "),rY=a("a"),ZSr=o("FlaxBertForMultipleChoice"),eRr=o(" (BERT model)"),oRr=l(),O5=a("li"),U7e=a("strong"),rRr=o("big_bird"),tRr=o(" \u2014 "),tY=a("a"),aRr=o("FlaxBigBirdForMultipleChoice"),nRr=o(" (BigBird model)"),sRr=l(),V5=a("li"),J7e=a("strong"),lRr=o("distilbert"),iRr=o(" \u2014 "),aY=a("a"),dRr=o("FlaxDistilBertForMultipleChoice"),cRr=o(" (DistilBERT model)"),fRr=l(),X5=a("li"),Y7e=a("strong"),mRr=o("electra"),gRr=o(" \u2014 "),nY=a("a"),hRr=o("FlaxElectraForMultipleChoice"),pRr=o(" (ELECTRA model)"),uRr=l(),z5=a("li"),K7e=a("strong"),_Rr=o("roberta"),bRr=o(" \u2014 "),sY=a("a"),vRr=o("FlaxRobertaForMultipleChoice"),FRr=o(" (RoBERTa model)"),TRr=l(),Q5=a("li"),Z7e=a("strong"),MRr=o("roformer"),ERr=o(" \u2014 "),lY=a("a"),CRr=o("FlaxRoFormerForMultipleChoice"),wRr=o(" (RoFormer model)"),ARr=l(),W5=a("li"),e9e=a("strong"),yRr=o("xlm-roberta"),LRr=o(" \u2014 "),iY=a("a"),xRr=o("FlaxXLMRobertaForMultipleChoice"),$Rr=o(" (XLM-RoBERTa model)"),kRr=l(),F(H5.$$.fragment),MIe=l(),zc=a("h2"),U5=a("a"),o9e=a("span"),F(c8.$$.fragment),SRr=l(),r9e=a("span"),RRr=o("FlaxAutoModelForNextSentencePrediction"),EIe=l(),vr=a("div"),F(f8.$$.fragment),BRr=l(),Qc=a("p"),PRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dY=a("a"),IRr=o("from_pretrained()"),qRr=o(" class method or the "),cY=a("a"),NRr=o("from_config()"),jRr=o(` class
method.`),DRr=l(),m8=a("p"),GRr=o("This class cannot be instantiated directly using "),t9e=a("code"),ORr=o("__init__()"),VRr=o(" (throws an error)."),XRr=l(),zt=a("div"),F(g8.$$.fragment),zRr=l(),a9e=a("p"),QRr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),WRr=l(),Wc=a("p"),HRr=o(`Note:
Loading a model from its configuration file does `),n9e=a("strong"),URr=o("not"),JRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),YRr=o("from_pretrained()"),KRr=o(" to load the model weights."),ZRr=l(),F(J5.$$.fragment),eBr=l(),Qr=a("div"),F(h8.$$.fragment),oBr=l(),s9e=a("p"),rBr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tBr=l(),bn=a("p"),aBr=o("The model class to instantiate is selected based on the "),l9e=a("code"),nBr=o("model_type"),sBr=o(` property of the config object (either
passed as an argument or loaded from `),i9e=a("code"),lBr=o("pretrained_model_name_or_path"),iBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d9e=a("code"),dBr=o("pretrained_model_name_or_path"),cBr=o(":"),fBr=l(),c9e=a("ul"),Y5=a("li"),f9e=a("strong"),mBr=o("bert"),gBr=o(" \u2014 "),mY=a("a"),hBr=o("FlaxBertForNextSentencePrediction"),pBr=o(" (BERT model)"),uBr=l(),F(K5.$$.fragment),CIe=l(),Hc=a("h2"),Z5=a("a"),m9e=a("span"),F(p8.$$.fragment),_Br=l(),g9e=a("span"),bBr=o("FlaxAutoModelForImageClassification"),wIe=l(),Fr=a("div"),F(u8.$$.fragment),vBr=l(),Uc=a("p"),FBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gY=a("a"),TBr=o("from_pretrained()"),MBr=o(" class method or the "),hY=a("a"),EBr=o("from_config()"),CBr=o(` class
method.`),wBr=l(),_8=a("p"),ABr=o("This class cannot be instantiated directly using "),h9e=a("code"),yBr=o("__init__()"),LBr=o(" (throws an error)."),xBr=l(),Qt=a("div"),F(b8.$$.fragment),$Br=l(),p9e=a("p"),kBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),SBr=l(),Jc=a("p"),RBr=o(`Note:
Loading a model from its configuration file does `),u9e=a("strong"),BBr=o("not"),PBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=a("a"),IBr=o("from_pretrained()"),qBr=o(" to load the model weights."),NBr=l(),F(eC.$$.fragment),jBr=l(),Wr=a("div"),F(v8.$$.fragment),DBr=l(),_9e=a("p"),GBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),OBr=l(),vn=a("p"),VBr=o("The model class to instantiate is selected based on the "),b9e=a("code"),XBr=o("model_type"),zBr=o(` property of the config object (either
passed as an argument or loaded from `),v9e=a("code"),QBr=o("pretrained_model_name_or_path"),WBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F9e=a("code"),HBr=o("pretrained_model_name_or_path"),UBr=o(":"),JBr=l(),F8=a("ul"),oC=a("li"),T9e=a("strong"),YBr=o("beit"),KBr=o(" \u2014 "),uY=a("a"),ZBr=o("FlaxBeitForImageClassification"),ePr=o(" (BEiT model)"),oPr=l(),rC=a("li"),M9e=a("strong"),rPr=o("vit"),tPr=o(" \u2014 "),_Y=a("a"),aPr=o("FlaxViTForImageClassification"),nPr=o(" (ViT model)"),sPr=l(),F(tC.$$.fragment),AIe=l(),Yc=a("h2"),aC=a("a"),E9e=a("span"),F(T8.$$.fragment),lPr=l(),C9e=a("span"),iPr=o("FlaxAutoModelForVision2Seq"),yIe=l(),Tr=a("div"),F(M8.$$.fragment),dPr=l(),Kc=a("p"),cPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bY=a("a"),fPr=o("from_pretrained()"),mPr=o(" class method or the "),vY=a("a"),gPr=o("from_config()"),hPr=o(` class
method.`),pPr=l(),E8=a("p"),uPr=o("This class cannot be instantiated directly using "),w9e=a("code"),_Pr=o("__init__()"),bPr=o(" (throws an error)."),vPr=l(),Wt=a("div"),F(C8.$$.fragment),FPr=l(),A9e=a("p"),TPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),MPr=l(),Zc=a("p"),EPr=o(`Note:
Loading a model from its configuration file does `),y9e=a("strong"),CPr=o("not"),wPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),APr=o("from_pretrained()"),yPr=o(" to load the model weights."),LPr=l(),F(nC.$$.fragment),xPr=l(),Hr=a("div"),F(w8.$$.fragment),$Pr=l(),L9e=a("p"),kPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),SPr=l(),Fn=a("p"),RPr=o("The model class to instantiate is selected based on the "),x9e=a("code"),BPr=o("model_type"),PPr=o(` property of the config object (either
passed as an argument or loaded from `),$9e=a("code"),IPr=o("pretrained_model_name_or_path"),qPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k9e=a("code"),NPr=o("pretrained_model_name_or_path"),jPr=o(":"),DPr=l(),S9e=a("ul"),sC=a("li"),R9e=a("strong"),GPr=o("vision-encoder-decoder"),OPr=o(" \u2014 "),TY=a("a"),VPr=o("FlaxVisionEncoderDecoderModel"),XPr=o(" (Vision Encoder decoder model)"),zPr=l(),F(lC.$$.fragment),this.h()},l(f){const _=z5t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var A8=s(p);m=n(A8,"A",{id:!0,class:!0,href:!0});var B9e=s(m);u=n(B9e,"SPAN",{});var P9e=s(u);T(d.$$.fragment,P9e),P9e.forEach(t),B9e.forEach(t),h=i(A8),Mo=n(A8,"SPAN",{});var I9e=s(Mo);ri=r(I9e,"Auto Classes"),I9e.forEach(t),A8.forEach(t),tf=i(f),Kr=n(f,"P",{});var y8=s(Kr);ti=r(y8,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ai=n(y8,"CODE",{});var q9e=s(ai);Ew=r(q9e,"from_pretrained()"),q9e.forEach(t),af=r(y8,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),y8.forEach(t),qe=i(f),Xe=n(f,"P",{});var Tn=s(Xe);ni=r(Tn,"Instantiating one of "),Mn=n(Tn,"A",{href:!0});var N9e=s(Mn);Cw=r(N9e,"AutoConfig"),N9e.forEach(t),En=r(Tn,", "),Cn=n(Tn,"A",{href:!0});var j9e=s(Cn);ww=r(j9e,"AutoModel"),j9e.forEach(t),si=r(Tn,`, and
`),wn=n(Tn,"A",{href:!0});var D9e=s(wn);Aw=r(D9e,"AutoTokenizer"),D9e.forEach(t),li=r(Tn," will directly create a class of the relevant architecture. For instance"),Tn.forEach(t),nf=i(f),T(va.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var L8=s(Ae);jx=r(L8,"will create a model that is an instance of "),ii=n(L8,"A",{href:!0});var G9e=s(ii);Dx=r(G9e,"BertModel"),G9e.forEach(t),Gx=r(L8,"."),L8.forEach(t),Eo=i(f),Fa=n(f,"P",{});var x8=s(Fa);Ox=r(x8,"There is one class of "),sf=n(x8,"CODE",{});var O9e=s(sf);Vx=r(O9e,"AutoModel"),O9e.forEach(t),RNe=r(x8," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),x8.forEach(t),yBe=i(f),di=n(f,"H2",{class:!0});var $8=s(di);lf=n($8,"A",{id:!0,class:!0,href:!0});var V9e=s(lf);gZ=n(V9e,"SPAN",{});var X9e=s(gZ);T(yw.$$.fragment,X9e),X9e.forEach(t),V9e.forEach(t),BNe=i($8),hZ=n($8,"SPAN",{});var z9e=s(hZ);PNe=r(z9e,"Extending the Auto Classes"),z9e.forEach(t),$8.forEach(t),LBe=i(f),An=n(f,"P",{});var ef=s(An);INe=r(ef,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),pZ=n(ef,"CODE",{});var Q9e=s(pZ);qNe=r(Q9e,"NewModel"),Q9e.forEach(t),NNe=r(ef,", make sure you have a "),uZ=n(ef,"CODE",{});var W9e=s(uZ);jNe=r(W9e,"NewModelConfig"),W9e.forEach(t),DNe=r(ef,` then you can add those to the auto
classes like this:`),ef.forEach(t),xBe=i(f),T(Lw.$$.fragment,f),$Be=i(f),Xx=n(f,"P",{});var H9e=s(Xx);GNe=r(H9e,"You will then be able to use the auto classes like you would usually do!"),H9e.forEach(t),kBe=i(f),T(df.$$.fragment,f),SBe=i(f),ci=n(f,"H2",{class:!0});var k8=s(ci);cf=n(k8,"A",{id:!0,class:!0,href:!0});var U9e=s(cf);_Z=n(U9e,"SPAN",{});var J9e=s(_Z);T(xw.$$.fragment,J9e),J9e.forEach(t),U9e.forEach(t),ONe=i(k8),bZ=n(k8,"SPAN",{});var Y9e=s(bZ);VNe=r(Y9e,"AutoConfig"),Y9e.forEach(t),k8.forEach(t),RBe=i(f),Co=n(f,"DIV",{class:!0});var Jr=s(Co);T($w.$$.fragment,Jr),XNe=i(Jr),kw=n(Jr,"P",{});var S8=s(kw);zNe=r(S8,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),zx=n(S8,"A",{href:!0});var K9e=s(zx);QNe=r(K9e,"from_pretrained()"),K9e.forEach(t),WNe=r(S8," class method."),S8.forEach(t),HNe=i(Jr),Sw=n(Jr,"P",{});var R8=s(Sw);UNe=r(R8,"This class cannot be instantiated directly using "),vZ=n(R8,"CODE",{});var Z9e=s(vZ);JNe=r(Z9e,"__init__()"),Z9e.forEach(t),YNe=r(R8," (throws an error)."),R8.forEach(t),KNe=i(Jr),Mr=n(Jr,"DIV",{class:!0});var Yr=s(Mr);T(Rw.$$.fragment,Yr),ZNe=i(Yr),FZ=n(Yr,"P",{});var eMe=s(FZ);eje=r(eMe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),eMe.forEach(t),oje=i(Yr),fi=n(Yr,"P",{});var of=s(fi);rje=r(of,"The configuration class to instantiate is selected based on the "),TZ=n(of,"CODE",{});var oMe=s(TZ);tje=r(oMe,"model_type"),oMe.forEach(t),aje=r(of,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),MZ=n(of,"CODE",{});var rMe=s(MZ);nje=r(rMe,"pretrained_model_name_or_path"),rMe.forEach(t),sje=r(of,":"),of.forEach(t),lje=i(Yr),A=n(Yr,"UL",{});var y=s(A);ff=n(y,"LI",{});var iC=s(ff);EZ=n(iC,"STRONG",{});var tMe=s(EZ);ije=r(tMe,"albert"),tMe.forEach(t),dje=r(iC," \u2014 "),Qx=n(iC,"A",{href:!0});var aMe=s(Qx);cje=r(aMe,"AlbertConfig"),aMe.forEach(t),fje=r(iC," (ALBERT model)"),iC.forEach(t),mje=i(y),mf=n(y,"LI",{});var dC=s(mf);CZ=n(dC,"STRONG",{});var nMe=s(CZ);gje=r(nMe,"bart"),nMe.forEach(t),hje=r(dC," \u2014 "),Wx=n(dC,"A",{href:!0});var sMe=s(Wx);pje=r(sMe,"BartConfig"),sMe.forEach(t),uje=r(dC," (BART model)"),dC.forEach(t),_je=i(y),gf=n(y,"LI",{});var cC=s(gf);wZ=n(cC,"STRONG",{});var lMe=s(wZ);bje=r(lMe,"beit"),lMe.forEach(t),vje=r(cC," \u2014 "),Hx=n(cC,"A",{href:!0});var iMe=s(Hx);Fje=r(iMe,"BeitConfig"),iMe.forEach(t),Tje=r(cC," (BEiT model)"),cC.forEach(t),Mje=i(y),hf=n(y,"LI",{});var fC=s(hf);AZ=n(fC,"STRONG",{});var dMe=s(AZ);Eje=r(dMe,"bert"),dMe.forEach(t),Cje=r(fC," \u2014 "),Ux=n(fC,"A",{href:!0});var cMe=s(Ux);wje=r(cMe,"BertConfig"),cMe.forEach(t),Aje=r(fC," (BERT model)"),fC.forEach(t),yje=i(y),pf=n(y,"LI",{});var mC=s(pf);yZ=n(mC,"STRONG",{});var fMe=s(yZ);Lje=r(fMe,"bert-generation"),fMe.forEach(t),xje=r(mC," \u2014 "),Jx=n(mC,"A",{href:!0});var mMe=s(Jx);$je=r(mMe,"BertGenerationConfig"),mMe.forEach(t),kje=r(mC," (Bert Generation model)"),mC.forEach(t),Sje=i(y),uf=n(y,"LI",{});var gC=s(uf);LZ=n(gC,"STRONG",{});var gMe=s(LZ);Rje=r(gMe,"big_bird"),gMe.forEach(t),Bje=r(gC," \u2014 "),Yx=n(gC,"A",{href:!0});var hMe=s(Yx);Pje=r(hMe,"BigBirdConfig"),hMe.forEach(t),Ije=r(gC," (BigBird model)"),gC.forEach(t),qje=i(y),_f=n(y,"LI",{});var hC=s(_f);xZ=n(hC,"STRONG",{});var pMe=s(xZ);Nje=r(pMe,"bigbird_pegasus"),pMe.forEach(t),jje=r(hC," \u2014 "),Kx=n(hC,"A",{href:!0});var uMe=s(Kx);Dje=r(uMe,"BigBirdPegasusConfig"),uMe.forEach(t),Gje=r(hC," (BigBirdPegasus model)"),hC.forEach(t),Oje=i(y),bf=n(y,"LI",{});var pC=s(bf);$Z=n(pC,"STRONG",{});var _Me=s($Z);Vje=r(_Me,"blenderbot"),_Me.forEach(t),Xje=r(pC," \u2014 "),Zx=n(pC,"A",{href:!0});var bMe=s(Zx);zje=r(bMe,"BlenderbotConfig"),bMe.forEach(t),Qje=r(pC," (Blenderbot model)"),pC.forEach(t),Wje=i(y),vf=n(y,"LI",{});var uC=s(vf);kZ=n(uC,"STRONG",{});var vMe=s(kZ);Hje=r(vMe,"blenderbot-small"),vMe.forEach(t),Uje=r(uC," \u2014 "),e$=n(uC,"A",{href:!0});var FMe=s(e$);Jje=r(FMe,"BlenderbotSmallConfig"),FMe.forEach(t),Yje=r(uC," (BlenderbotSmall model)"),uC.forEach(t),Kje=i(y),Ff=n(y,"LI",{});var _C=s(Ff);SZ=n(_C,"STRONG",{});var TMe=s(SZ);Zje=r(TMe,"camembert"),TMe.forEach(t),eDe=r(_C," \u2014 "),o$=n(_C,"A",{href:!0});var MMe=s(o$);oDe=r(MMe,"CamembertConfig"),MMe.forEach(t),rDe=r(_C," (CamemBERT model)"),_C.forEach(t),tDe=i(y),Tf=n(y,"LI",{});var bC=s(Tf);RZ=n(bC,"STRONG",{});var EMe=s(RZ);aDe=r(EMe,"canine"),EMe.forEach(t),nDe=r(bC," \u2014 "),r$=n(bC,"A",{href:!0});var CMe=s(r$);sDe=r(CMe,"CanineConfig"),CMe.forEach(t),lDe=r(bC," (Canine model)"),bC.forEach(t),iDe=i(y),Mf=n(y,"LI",{});var vC=s(Mf);BZ=n(vC,"STRONG",{});var wMe=s(BZ);dDe=r(wMe,"clip"),wMe.forEach(t),cDe=r(vC," \u2014 "),t$=n(vC,"A",{href:!0});var AMe=s(t$);fDe=r(AMe,"CLIPConfig"),AMe.forEach(t),mDe=r(vC," (CLIP model)"),vC.forEach(t),gDe=i(y),Ef=n(y,"LI",{});var FC=s(Ef);PZ=n(FC,"STRONG",{});var yMe=s(PZ);hDe=r(yMe,"convbert"),yMe.forEach(t),pDe=r(FC," \u2014 "),a$=n(FC,"A",{href:!0});var LMe=s(a$);uDe=r(LMe,"ConvBertConfig"),LMe.forEach(t),_De=r(FC," (ConvBERT model)"),FC.forEach(t),bDe=i(y),Cf=n(y,"LI",{});var TC=s(Cf);IZ=n(TC,"STRONG",{});var xMe=s(IZ);vDe=r(xMe,"convnext"),xMe.forEach(t),FDe=r(TC," \u2014 "),n$=n(TC,"A",{href:!0});var $Me=s(n$);TDe=r($Me,"ConvNextConfig"),$Me.forEach(t),MDe=r(TC," (ConvNext model)"),TC.forEach(t),EDe=i(y),wf=n(y,"LI",{});var MC=s(wf);qZ=n(MC,"STRONG",{});var kMe=s(qZ);CDe=r(kMe,"ctrl"),kMe.forEach(t),wDe=r(MC," \u2014 "),s$=n(MC,"A",{href:!0});var SMe=s(s$);ADe=r(SMe,"CTRLConfig"),SMe.forEach(t),yDe=r(MC," (CTRL model)"),MC.forEach(t),LDe=i(y),Af=n(y,"LI",{});var EC=s(Af);NZ=n(EC,"STRONG",{});var RMe=s(NZ);xDe=r(RMe,"data2vec-audio"),RMe.forEach(t),$De=r(EC," \u2014 "),l$=n(EC,"A",{href:!0});var BMe=s(l$);kDe=r(BMe,"Data2VecAudioConfig"),BMe.forEach(t),SDe=r(EC," (Data2VecAudio model)"),EC.forEach(t),RDe=i(y),yf=n(y,"LI",{});var CC=s(yf);jZ=n(CC,"STRONG",{});var PMe=s(jZ);BDe=r(PMe,"data2vec-text"),PMe.forEach(t),PDe=r(CC," \u2014 "),i$=n(CC,"A",{href:!0});var IMe=s(i$);IDe=r(IMe,"Data2VecTextConfig"),IMe.forEach(t),qDe=r(CC," (Data2VecText model)"),CC.forEach(t),NDe=i(y),Lf=n(y,"LI",{});var wC=s(Lf);DZ=n(wC,"STRONG",{});var qMe=s(DZ);jDe=r(qMe,"data2vec-vision"),qMe.forEach(t),DDe=r(wC," \u2014 "),d$=n(wC,"A",{href:!0});var NMe=s(d$);GDe=r(NMe,"Data2VecVisionConfig"),NMe.forEach(t),ODe=r(wC," (Data2VecVision model)"),wC.forEach(t),VDe=i(y),xf=n(y,"LI",{});var AC=s(xf);GZ=n(AC,"STRONG",{});var jMe=s(GZ);XDe=r(jMe,"deberta"),jMe.forEach(t),zDe=r(AC," \u2014 "),c$=n(AC,"A",{href:!0});var DMe=s(c$);QDe=r(DMe,"DebertaConfig"),DMe.forEach(t),WDe=r(AC," (DeBERTa model)"),AC.forEach(t),HDe=i(y),$f=n(y,"LI",{});var yC=s($f);OZ=n(yC,"STRONG",{});var GMe=s(OZ);UDe=r(GMe,"deberta-v2"),GMe.forEach(t),JDe=r(yC," \u2014 "),f$=n(yC,"A",{href:!0});var OMe=s(f$);YDe=r(OMe,"DebertaV2Config"),OMe.forEach(t),KDe=r(yC," (DeBERTa-v2 model)"),yC.forEach(t),ZDe=i(y),kf=n(y,"LI",{});var LC=s(kf);VZ=n(LC,"STRONG",{});var VMe=s(VZ);eGe=r(VMe,"decision_transformer"),VMe.forEach(t),oGe=r(LC," \u2014 "),m$=n(LC,"A",{href:!0});var XMe=s(m$);rGe=r(XMe,"DecisionTransformerConfig"),XMe.forEach(t),tGe=r(LC," (Decision Transformer model)"),LC.forEach(t),aGe=i(y),Sf=n(y,"LI",{});var xC=s(Sf);XZ=n(xC,"STRONG",{});var zMe=s(XZ);nGe=r(zMe,"deit"),zMe.forEach(t),sGe=r(xC," \u2014 "),g$=n(xC,"A",{href:!0});var QMe=s(g$);lGe=r(QMe,"DeiTConfig"),QMe.forEach(t),iGe=r(xC," (DeiT model)"),xC.forEach(t),dGe=i(y),Rf=n(y,"LI",{});var WMe=s(Rf);zZ=n(WMe,"STRONG",{});var WPr=s(zZ);cGe=r(WPr,"detr"),WPr.forEach(t),fGe=r(WMe," \u2014 "),h$=n(WMe,"A",{href:!0});var HPr=s(h$);mGe=r(HPr,"DetrConfig"),HPr.forEach(t),gGe=r(WMe," (DETR model)"),WMe.forEach(t),hGe=i(y),Bf=n(y,"LI",{});var HMe=s(Bf);QZ=n(HMe,"STRONG",{});var UPr=s(QZ);pGe=r(UPr,"distilbert"),UPr.forEach(t),uGe=r(HMe," \u2014 "),p$=n(HMe,"A",{href:!0});var JPr=s(p$);_Ge=r(JPr,"DistilBertConfig"),JPr.forEach(t),bGe=r(HMe," (DistilBERT model)"),HMe.forEach(t),vGe=i(y),Pf=n(y,"LI",{});var UMe=s(Pf);WZ=n(UMe,"STRONG",{});var YPr=s(WZ);FGe=r(YPr,"dpr"),YPr.forEach(t),TGe=r(UMe," \u2014 "),u$=n(UMe,"A",{href:!0});var KPr=s(u$);MGe=r(KPr,"DPRConfig"),KPr.forEach(t),EGe=r(UMe," (DPR model)"),UMe.forEach(t),CGe=i(y),If=n(y,"LI",{});var JMe=s(If);HZ=n(JMe,"STRONG",{});var ZPr=s(HZ);wGe=r(ZPr,"dpt"),ZPr.forEach(t),AGe=r(JMe," \u2014 "),_$=n(JMe,"A",{href:!0});var eIr=s(_$);yGe=r(eIr,"DPTConfig"),eIr.forEach(t),LGe=r(JMe," (DPT model)"),JMe.forEach(t),xGe=i(y),qf=n(y,"LI",{});var YMe=s(qf);UZ=n(YMe,"STRONG",{});var oIr=s(UZ);$Ge=r(oIr,"electra"),oIr.forEach(t),kGe=r(YMe," \u2014 "),b$=n(YMe,"A",{href:!0});var rIr=s(b$);SGe=r(rIr,"ElectraConfig"),rIr.forEach(t),RGe=r(YMe," (ELECTRA model)"),YMe.forEach(t),BGe=i(y),Nf=n(y,"LI",{});var KMe=s(Nf);JZ=n(KMe,"STRONG",{});var tIr=s(JZ);PGe=r(tIr,"encoder-decoder"),tIr.forEach(t),IGe=r(KMe," \u2014 "),v$=n(KMe,"A",{href:!0});var aIr=s(v$);qGe=r(aIr,"EncoderDecoderConfig"),aIr.forEach(t),NGe=r(KMe," (Encoder decoder model)"),KMe.forEach(t),jGe=i(y),jf=n(y,"LI",{});var ZMe=s(jf);YZ=n(ZMe,"STRONG",{});var nIr=s(YZ);DGe=r(nIr,"flaubert"),nIr.forEach(t),GGe=r(ZMe," \u2014 "),F$=n(ZMe,"A",{href:!0});var sIr=s(F$);OGe=r(sIr,"FlaubertConfig"),sIr.forEach(t),VGe=r(ZMe," (FlauBERT model)"),ZMe.forEach(t),XGe=i(y),Df=n(y,"LI",{});var e4e=s(Df);KZ=n(e4e,"STRONG",{});var lIr=s(KZ);zGe=r(lIr,"fnet"),lIr.forEach(t),QGe=r(e4e," \u2014 "),T$=n(e4e,"A",{href:!0});var iIr=s(T$);WGe=r(iIr,"FNetConfig"),iIr.forEach(t),HGe=r(e4e," (FNet model)"),e4e.forEach(t),UGe=i(y),Gf=n(y,"LI",{});var o4e=s(Gf);ZZ=n(o4e,"STRONG",{});var dIr=s(ZZ);JGe=r(dIr,"fsmt"),dIr.forEach(t),YGe=r(o4e," \u2014 "),M$=n(o4e,"A",{href:!0});var cIr=s(M$);KGe=r(cIr,"FSMTConfig"),cIr.forEach(t),ZGe=r(o4e," (FairSeq Machine-Translation model)"),o4e.forEach(t),eOe=i(y),Of=n(y,"LI",{});var r4e=s(Of);eee=n(r4e,"STRONG",{});var fIr=s(eee);oOe=r(fIr,"funnel"),fIr.forEach(t),rOe=r(r4e," \u2014 "),E$=n(r4e,"A",{href:!0});var mIr=s(E$);tOe=r(mIr,"FunnelConfig"),mIr.forEach(t),aOe=r(r4e," (Funnel Transformer model)"),r4e.forEach(t),nOe=i(y),Vf=n(y,"LI",{});var t4e=s(Vf);oee=n(t4e,"STRONG",{});var gIr=s(oee);sOe=r(gIr,"glpn"),gIr.forEach(t),lOe=r(t4e," \u2014 "),C$=n(t4e,"A",{href:!0});var hIr=s(C$);iOe=r(hIr,"GLPNConfig"),hIr.forEach(t),dOe=r(t4e," (GLPN model)"),t4e.forEach(t),cOe=i(y),Xf=n(y,"LI",{});var a4e=s(Xf);ree=n(a4e,"STRONG",{});var pIr=s(ree);fOe=r(pIr,"gpt2"),pIr.forEach(t),mOe=r(a4e," \u2014 "),w$=n(a4e,"A",{href:!0});var uIr=s(w$);gOe=r(uIr,"GPT2Config"),uIr.forEach(t),hOe=r(a4e," (OpenAI GPT-2 model)"),a4e.forEach(t),pOe=i(y),zf=n(y,"LI",{});var n4e=s(zf);tee=n(n4e,"STRONG",{});var _Ir=s(tee);uOe=r(_Ir,"gpt_neo"),_Ir.forEach(t),_Oe=r(n4e," \u2014 "),A$=n(n4e,"A",{href:!0});var bIr=s(A$);bOe=r(bIr,"GPTNeoConfig"),bIr.forEach(t),vOe=r(n4e," (GPT Neo model)"),n4e.forEach(t),FOe=i(y),Qf=n(y,"LI",{});var s4e=s(Qf);aee=n(s4e,"STRONG",{});var vIr=s(aee);TOe=r(vIr,"gptj"),vIr.forEach(t),MOe=r(s4e," \u2014 "),y$=n(s4e,"A",{href:!0});var FIr=s(y$);EOe=r(FIr,"GPTJConfig"),FIr.forEach(t),COe=r(s4e," (GPT-J model)"),s4e.forEach(t),wOe=i(y),Wf=n(y,"LI",{});var l4e=s(Wf);nee=n(l4e,"STRONG",{});var TIr=s(nee);AOe=r(TIr,"hubert"),TIr.forEach(t),yOe=r(l4e," \u2014 "),L$=n(l4e,"A",{href:!0});var MIr=s(L$);LOe=r(MIr,"HubertConfig"),MIr.forEach(t),xOe=r(l4e," (Hubert model)"),l4e.forEach(t),$Oe=i(y),Hf=n(y,"LI",{});var i4e=s(Hf);see=n(i4e,"STRONG",{});var EIr=s(see);kOe=r(EIr,"ibert"),EIr.forEach(t),SOe=r(i4e," \u2014 "),x$=n(i4e,"A",{href:!0});var CIr=s(x$);ROe=r(CIr,"IBertConfig"),CIr.forEach(t),BOe=r(i4e," (I-BERT model)"),i4e.forEach(t),POe=i(y),Uf=n(y,"LI",{});var d4e=s(Uf);lee=n(d4e,"STRONG",{});var wIr=s(lee);IOe=r(wIr,"imagegpt"),wIr.forEach(t),qOe=r(d4e," \u2014 "),$$=n(d4e,"A",{href:!0});var AIr=s($$);NOe=r(AIr,"ImageGPTConfig"),AIr.forEach(t),jOe=r(d4e," (ImageGPT model)"),d4e.forEach(t),DOe=i(y),Jf=n(y,"LI",{});var c4e=s(Jf);iee=n(c4e,"STRONG",{});var yIr=s(iee);GOe=r(yIr,"layoutlm"),yIr.forEach(t),OOe=r(c4e," \u2014 "),k$=n(c4e,"A",{href:!0});var LIr=s(k$);VOe=r(LIr,"LayoutLMConfig"),LIr.forEach(t),XOe=r(c4e," (LayoutLM model)"),c4e.forEach(t),zOe=i(y),Yf=n(y,"LI",{});var f4e=s(Yf);dee=n(f4e,"STRONG",{});var xIr=s(dee);QOe=r(xIr,"layoutlmv2"),xIr.forEach(t),WOe=r(f4e," \u2014 "),S$=n(f4e,"A",{href:!0});var $Ir=s(S$);HOe=r($Ir,"LayoutLMv2Config"),$Ir.forEach(t),UOe=r(f4e," (LayoutLMv2 model)"),f4e.forEach(t),JOe=i(y),Kf=n(y,"LI",{});var m4e=s(Kf);cee=n(m4e,"STRONG",{});var kIr=s(cee);YOe=r(kIr,"led"),kIr.forEach(t),KOe=r(m4e," \u2014 "),R$=n(m4e,"A",{href:!0});var SIr=s(R$);ZOe=r(SIr,"LEDConfig"),SIr.forEach(t),eVe=r(m4e," (LED model)"),m4e.forEach(t),oVe=i(y),Zf=n(y,"LI",{});var g4e=s(Zf);fee=n(g4e,"STRONG",{});var RIr=s(fee);rVe=r(RIr,"longformer"),RIr.forEach(t),tVe=r(g4e," \u2014 "),B$=n(g4e,"A",{href:!0});var BIr=s(B$);aVe=r(BIr,"LongformerConfig"),BIr.forEach(t),nVe=r(g4e," (Longformer model)"),g4e.forEach(t),sVe=i(y),em=n(y,"LI",{});var h4e=s(em);mee=n(h4e,"STRONG",{});var PIr=s(mee);lVe=r(PIr,"luke"),PIr.forEach(t),iVe=r(h4e," \u2014 "),P$=n(h4e,"A",{href:!0});var IIr=s(P$);dVe=r(IIr,"LukeConfig"),IIr.forEach(t),cVe=r(h4e," (LUKE model)"),h4e.forEach(t),fVe=i(y),om=n(y,"LI",{});var p4e=s(om);gee=n(p4e,"STRONG",{});var qIr=s(gee);mVe=r(qIr,"lxmert"),qIr.forEach(t),gVe=r(p4e," \u2014 "),I$=n(p4e,"A",{href:!0});var NIr=s(I$);hVe=r(NIr,"LxmertConfig"),NIr.forEach(t),pVe=r(p4e," (LXMERT model)"),p4e.forEach(t),uVe=i(y),rm=n(y,"LI",{});var u4e=s(rm);hee=n(u4e,"STRONG",{});var jIr=s(hee);_Ve=r(jIr,"m2m_100"),jIr.forEach(t),bVe=r(u4e," \u2014 "),q$=n(u4e,"A",{href:!0});var DIr=s(q$);vVe=r(DIr,"M2M100Config"),DIr.forEach(t),FVe=r(u4e," (M2M100 model)"),u4e.forEach(t),TVe=i(y),tm=n(y,"LI",{});var _4e=s(tm);pee=n(_4e,"STRONG",{});var GIr=s(pee);MVe=r(GIr,"marian"),GIr.forEach(t),EVe=r(_4e," \u2014 "),N$=n(_4e,"A",{href:!0});var OIr=s(N$);CVe=r(OIr,"MarianConfig"),OIr.forEach(t),wVe=r(_4e," (Marian model)"),_4e.forEach(t),AVe=i(y),am=n(y,"LI",{});var b4e=s(am);uee=n(b4e,"STRONG",{});var VIr=s(uee);yVe=r(VIr,"maskformer"),VIr.forEach(t),LVe=r(b4e," \u2014 "),j$=n(b4e,"A",{href:!0});var XIr=s(j$);xVe=r(XIr,"MaskFormerConfig"),XIr.forEach(t),$Ve=r(b4e," (MaskFormer model)"),b4e.forEach(t),kVe=i(y),nm=n(y,"LI",{});var v4e=s(nm);_ee=n(v4e,"STRONG",{});var zIr=s(_ee);SVe=r(zIr,"mbart"),zIr.forEach(t),RVe=r(v4e," \u2014 "),D$=n(v4e,"A",{href:!0});var QIr=s(D$);BVe=r(QIr,"MBartConfig"),QIr.forEach(t),PVe=r(v4e," (mBART model)"),v4e.forEach(t),IVe=i(y),sm=n(y,"LI",{});var F4e=s(sm);bee=n(F4e,"STRONG",{});var WIr=s(bee);qVe=r(WIr,"megatron-bert"),WIr.forEach(t),NVe=r(F4e," \u2014 "),G$=n(F4e,"A",{href:!0});var HIr=s(G$);jVe=r(HIr,"MegatronBertConfig"),HIr.forEach(t),DVe=r(F4e," (MegatronBert model)"),F4e.forEach(t),GVe=i(y),lm=n(y,"LI",{});var T4e=s(lm);vee=n(T4e,"STRONG",{});var UIr=s(vee);OVe=r(UIr,"mobilebert"),UIr.forEach(t),VVe=r(T4e," \u2014 "),O$=n(T4e,"A",{href:!0});var JIr=s(O$);XVe=r(JIr,"MobileBertConfig"),JIr.forEach(t),zVe=r(T4e," (MobileBERT model)"),T4e.forEach(t),QVe=i(y),im=n(y,"LI",{});var M4e=s(im);Fee=n(M4e,"STRONG",{});var YIr=s(Fee);WVe=r(YIr,"mpnet"),YIr.forEach(t),HVe=r(M4e," \u2014 "),V$=n(M4e,"A",{href:!0});var KIr=s(V$);UVe=r(KIr,"MPNetConfig"),KIr.forEach(t),JVe=r(M4e," (MPNet model)"),M4e.forEach(t),YVe=i(y),dm=n(y,"LI",{});var E4e=s(dm);Tee=n(E4e,"STRONG",{});var ZIr=s(Tee);KVe=r(ZIr,"mt5"),ZIr.forEach(t),ZVe=r(E4e," \u2014 "),X$=n(E4e,"A",{href:!0});var eqr=s(X$);eXe=r(eqr,"MT5Config"),eqr.forEach(t),oXe=r(E4e," (mT5 model)"),E4e.forEach(t),rXe=i(y),cm=n(y,"LI",{});var C4e=s(cm);Mee=n(C4e,"STRONG",{});var oqr=s(Mee);tXe=r(oqr,"nystromformer"),oqr.forEach(t),aXe=r(C4e," \u2014 "),z$=n(C4e,"A",{href:!0});var rqr=s(z$);nXe=r(rqr,"NystromformerConfig"),rqr.forEach(t),sXe=r(C4e," (Nystromformer model)"),C4e.forEach(t),lXe=i(y),fm=n(y,"LI",{});var w4e=s(fm);Eee=n(w4e,"STRONG",{});var tqr=s(Eee);iXe=r(tqr,"ofa"),tqr.forEach(t),dXe=r(w4e," \u2014 "),Q$=n(w4e,"A",{href:!0});var aqr=s(Q$);cXe=r(aqr,"OFAConfig"),aqr.forEach(t),fXe=r(w4e," (OFA model)"),w4e.forEach(t),mXe=i(y),mm=n(y,"LI",{});var A4e=s(mm);Cee=n(A4e,"STRONG",{});var nqr=s(Cee);gXe=r(nqr,"openai-gpt"),nqr.forEach(t),hXe=r(A4e," \u2014 "),W$=n(A4e,"A",{href:!0});var sqr=s(W$);pXe=r(sqr,"OpenAIGPTConfig"),sqr.forEach(t),uXe=r(A4e," (OpenAI GPT model)"),A4e.forEach(t),_Xe=i(y),gm=n(y,"LI",{});var y4e=s(gm);wee=n(y4e,"STRONG",{});var lqr=s(wee);bXe=r(lqr,"pegasus"),lqr.forEach(t),vXe=r(y4e," \u2014 "),H$=n(y4e,"A",{href:!0});var iqr=s(H$);FXe=r(iqr,"PegasusConfig"),iqr.forEach(t),TXe=r(y4e," (Pegasus model)"),y4e.forEach(t),MXe=i(y),hm=n(y,"LI",{});var L4e=s(hm);Aee=n(L4e,"STRONG",{});var dqr=s(Aee);EXe=r(dqr,"perceiver"),dqr.forEach(t),CXe=r(L4e," \u2014 "),U$=n(L4e,"A",{href:!0});var cqr=s(U$);wXe=r(cqr,"PerceiverConfig"),cqr.forEach(t),AXe=r(L4e," (Perceiver model)"),L4e.forEach(t),yXe=i(y),pm=n(y,"LI",{});var x4e=s(pm);yee=n(x4e,"STRONG",{});var fqr=s(yee);LXe=r(fqr,"plbart"),fqr.forEach(t),xXe=r(x4e," \u2014 "),J$=n(x4e,"A",{href:!0});var mqr=s(J$);$Xe=r(mqr,"PLBartConfig"),mqr.forEach(t),kXe=r(x4e," (PLBart model)"),x4e.forEach(t),SXe=i(y),um=n(y,"LI",{});var $4e=s(um);Lee=n($4e,"STRONG",{});var gqr=s(Lee);RXe=r(gqr,"poolformer"),gqr.forEach(t),BXe=r($4e," \u2014 "),Y$=n($4e,"A",{href:!0});var hqr=s(Y$);PXe=r(hqr,"PoolFormerConfig"),hqr.forEach(t),IXe=r($4e," (PoolFormer model)"),$4e.forEach(t),qXe=i(y),_m=n(y,"LI",{});var k4e=s(_m);xee=n(k4e,"STRONG",{});var pqr=s(xee);NXe=r(pqr,"prophetnet"),pqr.forEach(t),jXe=r(k4e," \u2014 "),K$=n(k4e,"A",{href:!0});var uqr=s(K$);DXe=r(uqr,"ProphetNetConfig"),uqr.forEach(t),GXe=r(k4e," (ProphetNet model)"),k4e.forEach(t),OXe=i(y),bm=n(y,"LI",{});var S4e=s(bm);$ee=n(S4e,"STRONG",{});var _qr=s($ee);VXe=r(_qr,"qdqbert"),_qr.forEach(t),XXe=r(S4e," \u2014 "),Z$=n(S4e,"A",{href:!0});var bqr=s(Z$);zXe=r(bqr,"QDQBertConfig"),bqr.forEach(t),QXe=r(S4e," (QDQBert model)"),S4e.forEach(t),WXe=i(y),vm=n(y,"LI",{});var R4e=s(vm);kee=n(R4e,"STRONG",{});var vqr=s(kee);HXe=r(vqr,"rag"),vqr.forEach(t),UXe=r(R4e," \u2014 "),ek=n(R4e,"A",{href:!0});var Fqr=s(ek);JXe=r(Fqr,"RagConfig"),Fqr.forEach(t),YXe=r(R4e," (RAG model)"),R4e.forEach(t),KXe=i(y),Fm=n(y,"LI",{});var B4e=s(Fm);See=n(B4e,"STRONG",{});var Tqr=s(See);ZXe=r(Tqr,"realm"),Tqr.forEach(t),eze=r(B4e," \u2014 "),ok=n(B4e,"A",{href:!0});var Mqr=s(ok);oze=r(Mqr,"RealmConfig"),Mqr.forEach(t),rze=r(B4e," (Realm model)"),B4e.forEach(t),tze=i(y),Tm=n(y,"LI",{});var P4e=s(Tm);Ree=n(P4e,"STRONG",{});var Eqr=s(Ree);aze=r(Eqr,"reformer"),Eqr.forEach(t),nze=r(P4e," \u2014 "),rk=n(P4e,"A",{href:!0});var Cqr=s(rk);sze=r(Cqr,"ReformerConfig"),Cqr.forEach(t),lze=r(P4e," (Reformer model)"),P4e.forEach(t),ize=i(y),Mm=n(y,"LI",{});var I4e=s(Mm);Bee=n(I4e,"STRONG",{});var wqr=s(Bee);dze=r(wqr,"regnet"),wqr.forEach(t),cze=r(I4e," \u2014 "),tk=n(I4e,"A",{href:!0});var Aqr=s(tk);fze=r(Aqr,"RegNetConfig"),Aqr.forEach(t),mze=r(I4e," (RegNet model)"),I4e.forEach(t),gze=i(y),Em=n(y,"LI",{});var q4e=s(Em);Pee=n(q4e,"STRONG",{});var yqr=s(Pee);hze=r(yqr,"rembert"),yqr.forEach(t),pze=r(q4e," \u2014 "),ak=n(q4e,"A",{href:!0});var Lqr=s(ak);uze=r(Lqr,"RemBertConfig"),Lqr.forEach(t),_ze=r(q4e," (RemBERT model)"),q4e.forEach(t),bze=i(y),Cm=n(y,"LI",{});var N4e=s(Cm);Iee=n(N4e,"STRONG",{});var xqr=s(Iee);vze=r(xqr,"resnet"),xqr.forEach(t),Fze=r(N4e," \u2014 "),nk=n(N4e,"A",{href:!0});var $qr=s(nk);Tze=r($qr,"ResNetConfig"),$qr.forEach(t),Mze=r(N4e," (ResNet model)"),N4e.forEach(t),Eze=i(y),wm=n(y,"LI",{});var j4e=s(wm);qee=n(j4e,"STRONG",{});var kqr=s(qee);Cze=r(kqr,"retribert"),kqr.forEach(t),wze=r(j4e," \u2014 "),sk=n(j4e,"A",{href:!0});var Sqr=s(sk);Aze=r(Sqr,"RetriBertConfig"),Sqr.forEach(t),yze=r(j4e," (RetriBERT model)"),j4e.forEach(t),Lze=i(y),Am=n(y,"LI",{});var D4e=s(Am);Nee=n(D4e,"STRONG",{});var Rqr=s(Nee);xze=r(Rqr,"roberta"),Rqr.forEach(t),$ze=r(D4e," \u2014 "),lk=n(D4e,"A",{href:!0});var Bqr=s(lk);kze=r(Bqr,"RobertaConfig"),Bqr.forEach(t),Sze=r(D4e," (RoBERTa model)"),D4e.forEach(t),Rze=i(y),ym=n(y,"LI",{});var G4e=s(ym);jee=n(G4e,"STRONG",{});var Pqr=s(jee);Bze=r(Pqr,"roformer"),Pqr.forEach(t),Pze=r(G4e," \u2014 "),ik=n(G4e,"A",{href:!0});var Iqr=s(ik);Ize=r(Iqr,"RoFormerConfig"),Iqr.forEach(t),qze=r(G4e," (RoFormer model)"),G4e.forEach(t),Nze=i(y),Lm=n(y,"LI",{});var O4e=s(Lm);Dee=n(O4e,"STRONG",{});var qqr=s(Dee);jze=r(qqr,"segformer"),qqr.forEach(t),Dze=r(O4e," \u2014 "),dk=n(O4e,"A",{href:!0});var Nqr=s(dk);Gze=r(Nqr,"SegformerConfig"),Nqr.forEach(t),Oze=r(O4e," (SegFormer model)"),O4e.forEach(t),Vze=i(y),xm=n(y,"LI",{});var V4e=s(xm);Gee=n(V4e,"STRONG",{});var jqr=s(Gee);Xze=r(jqr,"sew"),jqr.forEach(t),zze=r(V4e," \u2014 "),ck=n(V4e,"A",{href:!0});var Dqr=s(ck);Qze=r(Dqr,"SEWConfig"),Dqr.forEach(t),Wze=r(V4e," (SEW model)"),V4e.forEach(t),Hze=i(y),$m=n(y,"LI",{});var X4e=s($m);Oee=n(X4e,"STRONG",{});var Gqr=s(Oee);Uze=r(Gqr,"sew-d"),Gqr.forEach(t),Jze=r(X4e," \u2014 "),fk=n(X4e,"A",{href:!0});var Oqr=s(fk);Yze=r(Oqr,"SEWDConfig"),Oqr.forEach(t),Kze=r(X4e," (SEW-D model)"),X4e.forEach(t),Zze=i(y),km=n(y,"LI",{});var z4e=s(km);Vee=n(z4e,"STRONG",{});var Vqr=s(Vee);eQe=r(Vqr,"speech-encoder-decoder"),Vqr.forEach(t),oQe=r(z4e," \u2014 "),mk=n(z4e,"A",{href:!0});var Xqr=s(mk);rQe=r(Xqr,"SpeechEncoderDecoderConfig"),Xqr.forEach(t),tQe=r(z4e," (Speech Encoder decoder model)"),z4e.forEach(t),aQe=i(y),Sm=n(y,"LI",{});var Q4e=s(Sm);Xee=n(Q4e,"STRONG",{});var zqr=s(Xee);nQe=r(zqr,"speech_to_text"),zqr.forEach(t),sQe=r(Q4e," \u2014 "),gk=n(Q4e,"A",{href:!0});var Qqr=s(gk);lQe=r(Qqr,"Speech2TextConfig"),Qqr.forEach(t),iQe=r(Q4e," (Speech2Text model)"),Q4e.forEach(t),dQe=i(y),Rm=n(y,"LI",{});var W4e=s(Rm);zee=n(W4e,"STRONG",{});var Wqr=s(zee);cQe=r(Wqr,"speech_to_text_2"),Wqr.forEach(t),fQe=r(W4e," \u2014 "),hk=n(W4e,"A",{href:!0});var Hqr=s(hk);mQe=r(Hqr,"Speech2Text2Config"),Hqr.forEach(t),gQe=r(W4e," (Speech2Text2 model)"),W4e.forEach(t),hQe=i(y),Bm=n(y,"LI",{});var H4e=s(Bm);Qee=n(H4e,"STRONG",{});var Uqr=s(Qee);pQe=r(Uqr,"splinter"),Uqr.forEach(t),uQe=r(H4e," \u2014 "),pk=n(H4e,"A",{href:!0});var Jqr=s(pk);_Qe=r(Jqr,"SplinterConfig"),Jqr.forEach(t),bQe=r(H4e," (Splinter model)"),H4e.forEach(t),vQe=i(y),Pm=n(y,"LI",{});var U4e=s(Pm);Wee=n(U4e,"STRONG",{});var Yqr=s(Wee);FQe=r(Yqr,"squeezebert"),Yqr.forEach(t),TQe=r(U4e," \u2014 "),uk=n(U4e,"A",{href:!0});var Kqr=s(uk);MQe=r(Kqr,"SqueezeBertConfig"),Kqr.forEach(t),EQe=r(U4e," (SqueezeBERT model)"),U4e.forEach(t),CQe=i(y),Im=n(y,"LI",{});var J4e=s(Im);Hee=n(J4e,"STRONG",{});var Zqr=s(Hee);wQe=r(Zqr,"swin"),Zqr.forEach(t),AQe=r(J4e," \u2014 "),_k=n(J4e,"A",{href:!0});var eNr=s(_k);yQe=r(eNr,"SwinConfig"),eNr.forEach(t),LQe=r(J4e," (Swin model)"),J4e.forEach(t),xQe=i(y),qm=n(y,"LI",{});var Y4e=s(qm);Uee=n(Y4e,"STRONG",{});var oNr=s(Uee);$Qe=r(oNr,"t5"),oNr.forEach(t),kQe=r(Y4e," \u2014 "),bk=n(Y4e,"A",{href:!0});var rNr=s(bk);SQe=r(rNr,"T5Config"),rNr.forEach(t),RQe=r(Y4e," (T5 model)"),Y4e.forEach(t),BQe=i(y),Nm=n(y,"LI",{});var K4e=s(Nm);Jee=n(K4e,"STRONG",{});var tNr=s(Jee);PQe=r(tNr,"tapas"),tNr.forEach(t),IQe=r(K4e," \u2014 "),vk=n(K4e,"A",{href:!0});var aNr=s(vk);qQe=r(aNr,"TapasConfig"),aNr.forEach(t),NQe=r(K4e," (TAPAS model)"),K4e.forEach(t),jQe=i(y),jm=n(y,"LI",{});var Z4e=s(jm);Yee=n(Z4e,"STRONG",{});var nNr=s(Yee);DQe=r(nNr,"tapex"),nNr.forEach(t),GQe=r(Z4e," \u2014 "),Fk=n(Z4e,"A",{href:!0});var sNr=s(Fk);OQe=r(sNr,"BartConfig"),sNr.forEach(t),VQe=r(Z4e," (TAPEX model)"),Z4e.forEach(t),XQe=i(y),Dm=n(y,"LI",{});var eEe=s(Dm);Kee=n(eEe,"STRONG",{});var lNr=s(Kee);zQe=r(lNr,"transfo-xl"),lNr.forEach(t),QQe=r(eEe," \u2014 "),Tk=n(eEe,"A",{href:!0});var iNr=s(Tk);WQe=r(iNr,"TransfoXLConfig"),iNr.forEach(t),HQe=r(eEe," (Transformer-XL model)"),eEe.forEach(t),UQe=i(y),Gm=n(y,"LI",{});var oEe=s(Gm);Zee=n(oEe,"STRONG",{});var dNr=s(Zee);JQe=r(dNr,"trocr"),dNr.forEach(t),YQe=r(oEe," \u2014 "),Mk=n(oEe,"A",{href:!0});var cNr=s(Mk);KQe=r(cNr,"TrOCRConfig"),cNr.forEach(t),ZQe=r(oEe," (TrOCR model)"),oEe.forEach(t),eWe=i(y),Om=n(y,"LI",{});var rEe=s(Om);eoe=n(rEe,"STRONG",{});var fNr=s(eoe);oWe=r(fNr,"unispeech"),fNr.forEach(t),rWe=r(rEe," \u2014 "),Ek=n(rEe,"A",{href:!0});var mNr=s(Ek);tWe=r(mNr,"UniSpeechConfig"),mNr.forEach(t),aWe=r(rEe," (UniSpeech model)"),rEe.forEach(t),nWe=i(y),Vm=n(y,"LI",{});var tEe=s(Vm);ooe=n(tEe,"STRONG",{});var gNr=s(ooe);sWe=r(gNr,"unispeech-sat"),gNr.forEach(t),lWe=r(tEe," \u2014 "),Ck=n(tEe,"A",{href:!0});var hNr=s(Ck);iWe=r(hNr,"UniSpeechSatConfig"),hNr.forEach(t),dWe=r(tEe," (UniSpeechSat model)"),tEe.forEach(t),cWe=i(y),Xm=n(y,"LI",{});var aEe=s(Xm);roe=n(aEe,"STRONG",{});var pNr=s(roe);fWe=r(pNr,"van"),pNr.forEach(t),mWe=r(aEe," \u2014 "),wk=n(aEe,"A",{href:!0});var uNr=s(wk);gWe=r(uNr,"VanConfig"),uNr.forEach(t),hWe=r(aEe," (VAN model)"),aEe.forEach(t),pWe=i(y),zm=n(y,"LI",{});var nEe=s(zm);toe=n(nEe,"STRONG",{});var _Nr=s(toe);uWe=r(_Nr,"vilt"),_Nr.forEach(t),_We=r(nEe," \u2014 "),Ak=n(nEe,"A",{href:!0});var bNr=s(Ak);bWe=r(bNr,"ViltConfig"),bNr.forEach(t),vWe=r(nEe," (ViLT model)"),nEe.forEach(t),FWe=i(y),Qm=n(y,"LI",{});var sEe=s(Qm);aoe=n(sEe,"STRONG",{});var vNr=s(aoe);TWe=r(vNr,"vision-encoder-decoder"),vNr.forEach(t),MWe=r(sEe," \u2014 "),yk=n(sEe,"A",{href:!0});var FNr=s(yk);EWe=r(FNr,"VisionEncoderDecoderConfig"),FNr.forEach(t),CWe=r(sEe," (Vision Encoder decoder model)"),sEe.forEach(t),wWe=i(y),Wm=n(y,"LI",{});var lEe=s(Wm);noe=n(lEe,"STRONG",{});var TNr=s(noe);AWe=r(TNr,"vision-text-dual-encoder"),TNr.forEach(t),yWe=r(lEe," \u2014 "),Lk=n(lEe,"A",{href:!0});var MNr=s(Lk);LWe=r(MNr,"VisionTextDualEncoderConfig"),MNr.forEach(t),xWe=r(lEe," (VisionTextDualEncoder model)"),lEe.forEach(t),$We=i(y),Hm=n(y,"LI",{});var iEe=s(Hm);soe=n(iEe,"STRONG",{});var ENr=s(soe);kWe=r(ENr,"visual_bert"),ENr.forEach(t),SWe=r(iEe," \u2014 "),xk=n(iEe,"A",{href:!0});var CNr=s(xk);RWe=r(CNr,"VisualBertConfig"),CNr.forEach(t),BWe=r(iEe," (VisualBert model)"),iEe.forEach(t),PWe=i(y),Um=n(y,"LI",{});var dEe=s(Um);loe=n(dEe,"STRONG",{});var wNr=s(loe);IWe=r(wNr,"vit"),wNr.forEach(t),qWe=r(dEe," \u2014 "),$k=n(dEe,"A",{href:!0});var ANr=s($k);NWe=r(ANr,"ViTConfig"),ANr.forEach(t),jWe=r(dEe," (ViT model)"),dEe.forEach(t),DWe=i(y),Jm=n(y,"LI",{});var cEe=s(Jm);ioe=n(cEe,"STRONG",{});var yNr=s(ioe);GWe=r(yNr,"vit_mae"),yNr.forEach(t),OWe=r(cEe," \u2014 "),kk=n(cEe,"A",{href:!0});var LNr=s(kk);VWe=r(LNr,"ViTMAEConfig"),LNr.forEach(t),XWe=r(cEe," (ViTMAE model)"),cEe.forEach(t),zWe=i(y),Ym=n(y,"LI",{});var fEe=s(Ym);doe=n(fEe,"STRONG",{});var xNr=s(doe);QWe=r(xNr,"wav2vec2"),xNr.forEach(t),WWe=r(fEe," \u2014 "),Sk=n(fEe,"A",{href:!0});var $Nr=s(Sk);HWe=r($Nr,"Wav2Vec2Config"),$Nr.forEach(t),UWe=r(fEe," (Wav2Vec2 model)"),fEe.forEach(t),JWe=i(y),Km=n(y,"LI",{});var mEe=s(Km);coe=n(mEe,"STRONG",{});var kNr=s(coe);YWe=r(kNr,"wavlm"),kNr.forEach(t),KWe=r(mEe," \u2014 "),Rk=n(mEe,"A",{href:!0});var SNr=s(Rk);ZWe=r(SNr,"WavLMConfig"),SNr.forEach(t),eHe=r(mEe," (WavLM model)"),mEe.forEach(t),oHe=i(y),Zm=n(y,"LI",{});var gEe=s(Zm);foe=n(gEe,"STRONG",{});var RNr=s(foe);rHe=r(RNr,"xglm"),RNr.forEach(t),tHe=r(gEe," \u2014 "),Bk=n(gEe,"A",{href:!0});var BNr=s(Bk);aHe=r(BNr,"XGLMConfig"),BNr.forEach(t),nHe=r(gEe," (XGLM model)"),gEe.forEach(t),sHe=i(y),eg=n(y,"LI",{});var hEe=s(eg);moe=n(hEe,"STRONG",{});var PNr=s(moe);lHe=r(PNr,"xlm"),PNr.forEach(t),iHe=r(hEe," \u2014 "),Pk=n(hEe,"A",{href:!0});var INr=s(Pk);dHe=r(INr,"XLMConfig"),INr.forEach(t),cHe=r(hEe," (XLM model)"),hEe.forEach(t),fHe=i(y),og=n(y,"LI",{});var pEe=s(og);goe=n(pEe,"STRONG",{});var qNr=s(goe);mHe=r(qNr,"xlm-prophetnet"),qNr.forEach(t),gHe=r(pEe," \u2014 "),Ik=n(pEe,"A",{href:!0});var NNr=s(Ik);hHe=r(NNr,"XLMProphetNetConfig"),NNr.forEach(t),pHe=r(pEe," (XLMProphetNet model)"),pEe.forEach(t),uHe=i(y),rg=n(y,"LI",{});var uEe=s(rg);hoe=n(uEe,"STRONG",{});var jNr=s(hoe);_He=r(jNr,"xlm-roberta"),jNr.forEach(t),bHe=r(uEe," \u2014 "),qk=n(uEe,"A",{href:!0});var DNr=s(qk);vHe=r(DNr,"XLMRobertaConfig"),DNr.forEach(t),FHe=r(uEe," (XLM-RoBERTa model)"),uEe.forEach(t),THe=i(y),tg=n(y,"LI",{});var _Ee=s(tg);poe=n(_Ee,"STRONG",{});var GNr=s(poe);MHe=r(GNr,"xlm-roberta-xl"),GNr.forEach(t),EHe=r(_Ee," \u2014 "),Nk=n(_Ee,"A",{href:!0});var ONr=s(Nk);CHe=r(ONr,"XLMRobertaXLConfig"),ONr.forEach(t),wHe=r(_Ee," (XLM-RoBERTa-XL model)"),_Ee.forEach(t),AHe=i(y),ag=n(y,"LI",{});var bEe=s(ag);uoe=n(bEe,"STRONG",{});var VNr=s(uoe);yHe=r(VNr,"xlnet"),VNr.forEach(t),LHe=r(bEe," \u2014 "),jk=n(bEe,"A",{href:!0});var XNr=s(jk);xHe=r(XNr,"XLNetConfig"),XNr.forEach(t),$He=r(bEe," (XLNet model)"),bEe.forEach(t),kHe=i(y),ng=n(y,"LI",{});var vEe=s(ng);_oe=n(vEe,"STRONG",{});var zNr=s(_oe);SHe=r(zNr,"yolos"),zNr.forEach(t),RHe=r(vEe," \u2014 "),Dk=n(vEe,"A",{href:!0});var QNr=s(Dk);BHe=r(QNr,"YolosConfig"),QNr.forEach(t),PHe=r(vEe," (YOLOS model)"),vEe.forEach(t),IHe=i(y),sg=n(y,"LI",{});var FEe=s(sg);boe=n(FEe,"STRONG",{});var WNr=s(boe);qHe=r(WNr,"yoso"),WNr.forEach(t),NHe=r(FEe," \u2014 "),Gk=n(FEe,"A",{href:!0});var HNr=s(Gk);jHe=r(HNr,"YosoConfig"),HNr.forEach(t),DHe=r(FEe," (YOSO model)"),FEe.forEach(t),y.forEach(t),GHe=i(Yr),T(lg.$$.fragment,Yr),Yr.forEach(t),OHe=i(Jr),ig=n(Jr,"DIV",{class:!0});var xIe=s(ig);T(Bw.$$.fragment,xIe),VHe=i(xIe),voe=n(xIe,"P",{});var UNr=s(voe);XHe=r(UNr,"Register a new configuration for this class."),UNr.forEach(t),xIe.forEach(t),Jr.forEach(t),BBe=i(f),mi=n(f,"H2",{class:!0});var $Ie=s(mi);dg=n($Ie,"A",{id:!0,class:!0,href:!0});var JNr=s(dg);Foe=n(JNr,"SPAN",{});var YNr=s(Foe);T(Pw.$$.fragment,YNr),YNr.forEach(t),JNr.forEach(t),zHe=i($Ie),Toe=n($Ie,"SPAN",{});var KNr=s(Toe);QHe=r(KNr,"AutoTokenizer"),KNr.forEach(t),$Ie.forEach(t),PBe=i(f),wo=n(f,"DIV",{class:!0});var Ss=s(wo);T(Iw.$$.fragment,Ss),WHe=i(Ss),qw=n(Ss,"P",{});var kIe=s(qw);HHe=r(kIe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Ok=n(kIe,"A",{href:!0});var ZNr=s(Ok);UHe=r(ZNr,"AutoTokenizer.from_pretrained()"),ZNr.forEach(t),JHe=r(kIe," class method."),kIe.forEach(t),YHe=i(Ss),Nw=n(Ss,"P",{});var SIe=s(Nw);KHe=r(SIe,"This class cannot be instantiated directly using "),Moe=n(SIe,"CODE",{});var ejr=s(Moe);ZHe=r(ejr,"__init__()"),ejr.forEach(t),eUe=r(SIe," (throws an error)."),SIe.forEach(t),oUe=i(Ss),Er=n(Ss,"DIV",{class:!0});var Rs=s(Er);T(jw.$$.fragment,Rs),rUe=i(Rs),Eoe=n(Rs,"P",{});var ojr=s(Eoe);tUe=r(ojr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),ojr.forEach(t),aUe=i(Rs),Ta=n(Rs,"P",{});var $C=s(Ta);nUe=r($C,"The tokenizer class to instantiate is selected based on the "),Coe=n($C,"CODE",{});var rjr=s(Coe);sUe=r(rjr,"model_type"),rjr.forEach(t),lUe=r($C,` property of the config object (either
passed as an argument or loaded from `),woe=n($C,"CODE",{});var tjr=s(woe);iUe=r(tjr,"pretrained_model_name_or_path"),tjr.forEach(t),dUe=r($C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aoe=n($C,"CODE",{});var ajr=s(Aoe);cUe=r(ajr,"pretrained_model_name_or_path"),ajr.forEach(t),fUe=r($C,":"),$C.forEach(t),mUe=i(Rs),k=n(Rs,"UL",{});var S=s(k);yn=n(S,"LI",{});var B8=s(yn);yoe=n(B8,"STRONG",{});var njr=s(yoe);gUe=r(njr,"albert"),njr.forEach(t),hUe=r(B8," \u2014 "),Vk=n(B8,"A",{href:!0});var sjr=s(Vk);pUe=r(sjr,"AlbertTokenizer"),sjr.forEach(t),uUe=r(B8," or "),Xk=n(B8,"A",{href:!0});var ljr=s(Xk);_Ue=r(ljr,"AlbertTokenizerFast"),ljr.forEach(t),bUe=r(B8," (ALBERT model)"),B8.forEach(t),vUe=i(S),Ln=n(S,"LI",{});var P8=s(Ln);Loe=n(P8,"STRONG",{});var ijr=s(Loe);FUe=r(ijr,"bart"),ijr.forEach(t),TUe=r(P8," \u2014 "),zk=n(P8,"A",{href:!0});var djr=s(zk);MUe=r(djr,"BartTokenizer"),djr.forEach(t),EUe=r(P8," or "),Qk=n(P8,"A",{href:!0});var cjr=s(Qk);CUe=r(cjr,"BartTokenizerFast"),cjr.forEach(t),wUe=r(P8," (BART model)"),P8.forEach(t),AUe=i(S),xn=n(S,"LI",{});var I8=s(xn);xoe=n(I8,"STRONG",{});var fjr=s(xoe);yUe=r(fjr,"barthez"),fjr.forEach(t),LUe=r(I8," \u2014 "),Wk=n(I8,"A",{href:!0});var mjr=s(Wk);xUe=r(mjr,"BarthezTokenizer"),mjr.forEach(t),$Ue=r(I8," or "),Hk=n(I8,"A",{href:!0});var gjr=s(Hk);kUe=r(gjr,"BarthezTokenizerFast"),gjr.forEach(t),SUe=r(I8," (BARThez model)"),I8.forEach(t),RUe=i(S),cg=n(S,"LI",{});var TEe=s(cg);$oe=n(TEe,"STRONG",{});var hjr=s($oe);BUe=r(hjr,"bartpho"),hjr.forEach(t),PUe=r(TEe," \u2014 "),Uk=n(TEe,"A",{href:!0});var pjr=s(Uk);IUe=r(pjr,"BartphoTokenizer"),pjr.forEach(t),qUe=r(TEe," (BARTpho model)"),TEe.forEach(t),NUe=i(S),$n=n(S,"LI",{});var q8=s($n);koe=n(q8,"STRONG",{});var ujr=s(koe);jUe=r(ujr,"bert"),ujr.forEach(t),DUe=r(q8," \u2014 "),Jk=n(q8,"A",{href:!0});var _jr=s(Jk);GUe=r(_jr,"BertTokenizer"),_jr.forEach(t),OUe=r(q8," or "),Yk=n(q8,"A",{href:!0});var bjr=s(Yk);VUe=r(bjr,"BertTokenizerFast"),bjr.forEach(t),XUe=r(q8," (BERT model)"),q8.forEach(t),zUe=i(S),fg=n(S,"LI",{});var MEe=s(fg);Soe=n(MEe,"STRONG",{});var vjr=s(Soe);QUe=r(vjr,"bert-generation"),vjr.forEach(t),WUe=r(MEe," \u2014 "),Kk=n(MEe,"A",{href:!0});var Fjr=s(Kk);HUe=r(Fjr,"BertGenerationTokenizer"),Fjr.forEach(t),UUe=r(MEe," (Bert Generation model)"),MEe.forEach(t),JUe=i(S),mg=n(S,"LI",{});var EEe=s(mg);Roe=n(EEe,"STRONG",{});var Tjr=s(Roe);YUe=r(Tjr,"bert-japanese"),Tjr.forEach(t),KUe=r(EEe," \u2014 "),Zk=n(EEe,"A",{href:!0});var Mjr=s(Zk);ZUe=r(Mjr,"BertJapaneseTokenizer"),Mjr.forEach(t),eJe=r(EEe," (BertJapanese model)"),EEe.forEach(t),oJe=i(S),gg=n(S,"LI",{});var CEe=s(gg);Boe=n(CEe,"STRONG",{});var Ejr=s(Boe);rJe=r(Ejr,"bertweet"),Ejr.forEach(t),tJe=r(CEe," \u2014 "),eS=n(CEe,"A",{href:!0});var Cjr=s(eS);aJe=r(Cjr,"BertweetTokenizer"),Cjr.forEach(t),nJe=r(CEe," (Bertweet model)"),CEe.forEach(t),sJe=i(S),kn=n(S,"LI",{});var N8=s(kn);Poe=n(N8,"STRONG",{});var wjr=s(Poe);lJe=r(wjr,"big_bird"),wjr.forEach(t),iJe=r(N8," \u2014 "),oS=n(N8,"A",{href:!0});var Ajr=s(oS);dJe=r(Ajr,"BigBirdTokenizer"),Ajr.forEach(t),cJe=r(N8," or "),rS=n(N8,"A",{href:!0});var yjr=s(rS);fJe=r(yjr,"BigBirdTokenizerFast"),yjr.forEach(t),mJe=r(N8," (BigBird model)"),N8.forEach(t),gJe=i(S),Sn=n(S,"LI",{});var j8=s(Sn);Ioe=n(j8,"STRONG",{});var Ljr=s(Ioe);hJe=r(Ljr,"bigbird_pegasus"),Ljr.forEach(t),pJe=r(j8," \u2014 "),tS=n(j8,"A",{href:!0});var xjr=s(tS);uJe=r(xjr,"PegasusTokenizer"),xjr.forEach(t),_Je=r(j8," or "),aS=n(j8,"A",{href:!0});var $jr=s(aS);bJe=r($jr,"PegasusTokenizerFast"),$jr.forEach(t),vJe=r(j8," (BigBirdPegasus model)"),j8.forEach(t),FJe=i(S),Rn=n(S,"LI",{});var D8=s(Rn);qoe=n(D8,"STRONG",{});var kjr=s(qoe);TJe=r(kjr,"blenderbot"),kjr.forEach(t),MJe=r(D8," \u2014 "),nS=n(D8,"A",{href:!0});var Sjr=s(nS);EJe=r(Sjr,"BlenderbotTokenizer"),Sjr.forEach(t),CJe=r(D8," or "),sS=n(D8,"A",{href:!0});var Rjr=s(sS);wJe=r(Rjr,"BlenderbotTokenizerFast"),Rjr.forEach(t),AJe=r(D8," (Blenderbot model)"),D8.forEach(t),yJe=i(S),hg=n(S,"LI",{});var wEe=s(hg);Noe=n(wEe,"STRONG",{});var Bjr=s(Noe);LJe=r(Bjr,"blenderbot-small"),Bjr.forEach(t),xJe=r(wEe," \u2014 "),lS=n(wEe,"A",{href:!0});var Pjr=s(lS);$Je=r(Pjr,"BlenderbotSmallTokenizer"),Pjr.forEach(t),kJe=r(wEe," (BlenderbotSmall model)"),wEe.forEach(t),SJe=i(S),pg=n(S,"LI",{});var AEe=s(pg);joe=n(AEe,"STRONG",{});var Ijr=s(joe);RJe=r(Ijr,"byt5"),Ijr.forEach(t),BJe=r(AEe," \u2014 "),iS=n(AEe,"A",{href:!0});var qjr=s(iS);PJe=r(qjr,"ByT5Tokenizer"),qjr.forEach(t),IJe=r(AEe," (ByT5 model)"),AEe.forEach(t),qJe=i(S),Bn=n(S,"LI",{});var G8=s(Bn);Doe=n(G8,"STRONG",{});var Njr=s(Doe);NJe=r(Njr,"camembert"),Njr.forEach(t),jJe=r(G8," \u2014 "),dS=n(G8,"A",{href:!0});var jjr=s(dS);DJe=r(jjr,"CamembertTokenizer"),jjr.forEach(t),GJe=r(G8," or "),cS=n(G8,"A",{href:!0});var Djr=s(cS);OJe=r(Djr,"CamembertTokenizerFast"),Djr.forEach(t),VJe=r(G8," (CamemBERT model)"),G8.forEach(t),XJe=i(S),ug=n(S,"LI",{});var yEe=s(ug);Goe=n(yEe,"STRONG",{});var Gjr=s(Goe);zJe=r(Gjr,"canine"),Gjr.forEach(t),QJe=r(yEe," \u2014 "),fS=n(yEe,"A",{href:!0});var Ojr=s(fS);WJe=r(Ojr,"CanineTokenizer"),Ojr.forEach(t),HJe=r(yEe," (Canine model)"),yEe.forEach(t),UJe=i(S),Pn=n(S,"LI",{});var O8=s(Pn);Ooe=n(O8,"STRONG",{});var Vjr=s(Ooe);JJe=r(Vjr,"clip"),Vjr.forEach(t),YJe=r(O8," \u2014 "),mS=n(O8,"A",{href:!0});var Xjr=s(mS);KJe=r(Xjr,"CLIPTokenizer"),Xjr.forEach(t),ZJe=r(O8," or "),gS=n(O8,"A",{href:!0});var zjr=s(gS);eYe=r(zjr,"CLIPTokenizerFast"),zjr.forEach(t),oYe=r(O8," (CLIP model)"),O8.forEach(t),rYe=i(S),In=n(S,"LI",{});var V8=s(In);Voe=n(V8,"STRONG",{});var Qjr=s(Voe);tYe=r(Qjr,"convbert"),Qjr.forEach(t),aYe=r(V8," \u2014 "),hS=n(V8,"A",{href:!0});var Wjr=s(hS);nYe=r(Wjr,"ConvBertTokenizer"),Wjr.forEach(t),sYe=r(V8," or "),pS=n(V8,"A",{href:!0});var Hjr=s(pS);lYe=r(Hjr,"ConvBertTokenizerFast"),Hjr.forEach(t),iYe=r(V8," (ConvBERT model)"),V8.forEach(t),dYe=i(S),qn=n(S,"LI",{});var X8=s(qn);Xoe=n(X8,"STRONG",{});var Ujr=s(Xoe);cYe=r(Ujr,"cpm"),Ujr.forEach(t),fYe=r(X8," \u2014 "),uS=n(X8,"A",{href:!0});var Jjr=s(uS);mYe=r(Jjr,"CpmTokenizer"),Jjr.forEach(t),gYe=r(X8," or "),_S=n(X8,"A",{href:!0});var Yjr=s(_S);hYe=r(Yjr,"CpmTokenizerFast"),Yjr.forEach(t),pYe=r(X8," (CPM model)"),X8.forEach(t),uYe=i(S),_g=n(S,"LI",{});var LEe=s(_g);zoe=n(LEe,"STRONG",{});var Kjr=s(zoe);_Ye=r(Kjr,"ctrl"),Kjr.forEach(t),bYe=r(LEe," \u2014 "),bS=n(LEe,"A",{href:!0});var Zjr=s(bS);vYe=r(Zjr,"CTRLTokenizer"),Zjr.forEach(t),FYe=r(LEe," (CTRL model)"),LEe.forEach(t),TYe=i(S),Nn=n(S,"LI",{});var z8=s(Nn);Qoe=n(z8,"STRONG",{});var eDr=s(Qoe);MYe=r(eDr,"data2vec-text"),eDr.forEach(t),EYe=r(z8," \u2014 "),vS=n(z8,"A",{href:!0});var oDr=s(vS);CYe=r(oDr,"RobertaTokenizer"),oDr.forEach(t),wYe=r(z8," or "),FS=n(z8,"A",{href:!0});var rDr=s(FS);AYe=r(rDr,"RobertaTokenizerFast"),rDr.forEach(t),yYe=r(z8," (Data2VecText model)"),z8.forEach(t),LYe=i(S),jn=n(S,"LI",{});var Q8=s(jn);Woe=n(Q8,"STRONG",{});var tDr=s(Woe);xYe=r(tDr,"deberta"),tDr.forEach(t),$Ye=r(Q8," \u2014 "),TS=n(Q8,"A",{href:!0});var aDr=s(TS);kYe=r(aDr,"DebertaTokenizer"),aDr.forEach(t),SYe=r(Q8," or "),MS=n(Q8,"A",{href:!0});var nDr=s(MS);RYe=r(nDr,"DebertaTokenizerFast"),nDr.forEach(t),BYe=r(Q8," (DeBERTa model)"),Q8.forEach(t),PYe=i(S),Dn=n(S,"LI",{});var W8=s(Dn);Hoe=n(W8,"STRONG",{});var sDr=s(Hoe);IYe=r(sDr,"deberta-v2"),sDr.forEach(t),qYe=r(W8," \u2014 "),ES=n(W8,"A",{href:!0});var lDr=s(ES);NYe=r(lDr,"DebertaV2Tokenizer"),lDr.forEach(t),jYe=r(W8," or "),CS=n(W8,"A",{href:!0});var iDr=s(CS);DYe=r(iDr,"DebertaV2TokenizerFast"),iDr.forEach(t),GYe=r(W8," (DeBERTa-v2 model)"),W8.forEach(t),OYe=i(S),Gn=n(S,"LI",{});var H8=s(Gn);Uoe=n(H8,"STRONG",{});var dDr=s(Uoe);VYe=r(dDr,"distilbert"),dDr.forEach(t),XYe=r(H8," \u2014 "),wS=n(H8,"A",{href:!0});var cDr=s(wS);zYe=r(cDr,"DistilBertTokenizer"),cDr.forEach(t),QYe=r(H8," or "),AS=n(H8,"A",{href:!0});var fDr=s(AS);WYe=r(fDr,"DistilBertTokenizerFast"),fDr.forEach(t),HYe=r(H8," (DistilBERT model)"),H8.forEach(t),UYe=i(S),On=n(S,"LI",{});var U8=s(On);Joe=n(U8,"STRONG",{});var mDr=s(Joe);JYe=r(mDr,"dpr"),mDr.forEach(t),YYe=r(U8," \u2014 "),yS=n(U8,"A",{href:!0});var gDr=s(yS);KYe=r(gDr,"DPRQuestionEncoderTokenizer"),gDr.forEach(t),ZYe=r(U8," or "),LS=n(U8,"A",{href:!0});var hDr=s(LS);eKe=r(hDr,"DPRQuestionEncoderTokenizerFast"),hDr.forEach(t),oKe=r(U8," (DPR model)"),U8.forEach(t),rKe=i(S),Vn=n(S,"LI",{});var J8=s(Vn);Yoe=n(J8,"STRONG",{});var pDr=s(Yoe);tKe=r(pDr,"electra"),pDr.forEach(t),aKe=r(J8," \u2014 "),xS=n(J8,"A",{href:!0});var uDr=s(xS);nKe=r(uDr,"ElectraTokenizer"),uDr.forEach(t),sKe=r(J8," or "),$S=n(J8,"A",{href:!0});var _Dr=s($S);lKe=r(_Dr,"ElectraTokenizerFast"),_Dr.forEach(t),iKe=r(J8," (ELECTRA model)"),J8.forEach(t),dKe=i(S),bg=n(S,"LI",{});var xEe=s(bg);Koe=n(xEe,"STRONG",{});var bDr=s(Koe);cKe=r(bDr,"flaubert"),bDr.forEach(t),fKe=r(xEe," \u2014 "),kS=n(xEe,"A",{href:!0});var vDr=s(kS);mKe=r(vDr,"FlaubertTokenizer"),vDr.forEach(t),gKe=r(xEe," (FlauBERT model)"),xEe.forEach(t),hKe=i(S),Xn=n(S,"LI",{});var Y8=s(Xn);Zoe=n(Y8,"STRONG",{});var FDr=s(Zoe);pKe=r(FDr,"fnet"),FDr.forEach(t),uKe=r(Y8," \u2014 "),SS=n(Y8,"A",{href:!0});var TDr=s(SS);_Ke=r(TDr,"FNetTokenizer"),TDr.forEach(t),bKe=r(Y8," or "),RS=n(Y8,"A",{href:!0});var MDr=s(RS);vKe=r(MDr,"FNetTokenizerFast"),MDr.forEach(t),FKe=r(Y8," (FNet model)"),Y8.forEach(t),TKe=i(S),vg=n(S,"LI",{});var $Ee=s(vg);ere=n($Ee,"STRONG",{});var EDr=s(ere);MKe=r(EDr,"fsmt"),EDr.forEach(t),EKe=r($Ee," \u2014 "),BS=n($Ee,"A",{href:!0});var CDr=s(BS);CKe=r(CDr,"FSMTTokenizer"),CDr.forEach(t),wKe=r($Ee," (FairSeq Machine-Translation model)"),$Ee.forEach(t),AKe=i(S),zn=n(S,"LI",{});var K8=s(zn);ore=n(K8,"STRONG",{});var wDr=s(ore);yKe=r(wDr,"funnel"),wDr.forEach(t),LKe=r(K8," \u2014 "),PS=n(K8,"A",{href:!0});var ADr=s(PS);xKe=r(ADr,"FunnelTokenizer"),ADr.forEach(t),$Ke=r(K8," or "),IS=n(K8,"A",{href:!0});var yDr=s(IS);kKe=r(yDr,"FunnelTokenizerFast"),yDr.forEach(t),SKe=r(K8," (Funnel Transformer model)"),K8.forEach(t),RKe=i(S),Qn=n(S,"LI",{});var Z8=s(Qn);rre=n(Z8,"STRONG",{});var LDr=s(rre);BKe=r(LDr,"gpt2"),LDr.forEach(t),PKe=r(Z8," \u2014 "),qS=n(Z8,"A",{href:!0});var xDr=s(qS);IKe=r(xDr,"GPT2Tokenizer"),xDr.forEach(t),qKe=r(Z8," or "),NS=n(Z8,"A",{href:!0});var $Dr=s(NS);NKe=r($Dr,"GPT2TokenizerFast"),$Dr.forEach(t),jKe=r(Z8," (OpenAI GPT-2 model)"),Z8.forEach(t),DKe=i(S),Wn=n(S,"LI",{});var ex=s(Wn);tre=n(ex,"STRONG",{});var kDr=s(tre);GKe=r(kDr,"gpt_neo"),kDr.forEach(t),OKe=r(ex," \u2014 "),jS=n(ex,"A",{href:!0});var SDr=s(jS);VKe=r(SDr,"GPT2Tokenizer"),SDr.forEach(t),XKe=r(ex," or "),DS=n(ex,"A",{href:!0});var RDr=s(DS);zKe=r(RDr,"GPT2TokenizerFast"),RDr.forEach(t),QKe=r(ex," (GPT Neo model)"),ex.forEach(t),WKe=i(S),Hn=n(S,"LI",{});var ox=s(Hn);are=n(ox,"STRONG",{});var BDr=s(are);HKe=r(BDr,"gptj"),BDr.forEach(t),UKe=r(ox," \u2014 "),GS=n(ox,"A",{href:!0});var PDr=s(GS);JKe=r(PDr,"GPT2Tokenizer"),PDr.forEach(t),YKe=r(ox," or "),OS=n(ox,"A",{href:!0});var IDr=s(OS);KKe=r(IDr,"GPT2TokenizerFast"),IDr.forEach(t),ZKe=r(ox," (GPT-J model)"),ox.forEach(t),eZe=i(S),Un=n(S,"LI",{});var rx=s(Un);nre=n(rx,"STRONG",{});var qDr=s(nre);oZe=r(qDr,"herbert"),qDr.forEach(t),rZe=r(rx," \u2014 "),VS=n(rx,"A",{href:!0});var NDr=s(VS);tZe=r(NDr,"HerbertTokenizer"),NDr.forEach(t),aZe=r(rx," or "),XS=n(rx,"A",{href:!0});var jDr=s(XS);nZe=r(jDr,"HerbertTokenizerFast"),jDr.forEach(t),sZe=r(rx," (HerBERT model)"),rx.forEach(t),lZe=i(S),Fg=n(S,"LI",{});var kEe=s(Fg);sre=n(kEe,"STRONG",{});var DDr=s(sre);iZe=r(DDr,"hubert"),DDr.forEach(t),dZe=r(kEe," \u2014 "),zS=n(kEe,"A",{href:!0});var GDr=s(zS);cZe=r(GDr,"Wav2Vec2CTCTokenizer"),GDr.forEach(t),fZe=r(kEe," (Hubert model)"),kEe.forEach(t),mZe=i(S),Jn=n(S,"LI",{});var tx=s(Jn);lre=n(tx,"STRONG",{});var ODr=s(lre);gZe=r(ODr,"ibert"),ODr.forEach(t),hZe=r(tx," \u2014 "),QS=n(tx,"A",{href:!0});var VDr=s(QS);pZe=r(VDr,"RobertaTokenizer"),VDr.forEach(t),uZe=r(tx," or "),WS=n(tx,"A",{href:!0});var XDr=s(WS);_Ze=r(XDr,"RobertaTokenizerFast"),XDr.forEach(t),bZe=r(tx," (I-BERT model)"),tx.forEach(t),vZe=i(S),Yn=n(S,"LI",{});var ax=s(Yn);ire=n(ax,"STRONG",{});var zDr=s(ire);FZe=r(zDr,"layoutlm"),zDr.forEach(t),TZe=r(ax," \u2014 "),HS=n(ax,"A",{href:!0});var QDr=s(HS);MZe=r(QDr,"LayoutLMTokenizer"),QDr.forEach(t),EZe=r(ax," or "),US=n(ax,"A",{href:!0});var WDr=s(US);CZe=r(WDr,"LayoutLMTokenizerFast"),WDr.forEach(t),wZe=r(ax," (LayoutLM model)"),ax.forEach(t),AZe=i(S),Kn=n(S,"LI",{});var nx=s(Kn);dre=n(nx,"STRONG",{});var HDr=s(dre);yZe=r(HDr,"layoutlmv2"),HDr.forEach(t),LZe=r(nx," \u2014 "),JS=n(nx,"A",{href:!0});var UDr=s(JS);xZe=r(UDr,"LayoutLMv2Tokenizer"),UDr.forEach(t),$Ze=r(nx," or "),YS=n(nx,"A",{href:!0});var JDr=s(YS);kZe=r(JDr,"LayoutLMv2TokenizerFast"),JDr.forEach(t),SZe=r(nx," (LayoutLMv2 model)"),nx.forEach(t),RZe=i(S),Zn=n(S,"LI",{});var sx=s(Zn);cre=n(sx,"STRONG",{});var YDr=s(cre);BZe=r(YDr,"layoutxlm"),YDr.forEach(t),PZe=r(sx," \u2014 "),KS=n(sx,"A",{href:!0});var KDr=s(KS);IZe=r(KDr,"LayoutXLMTokenizer"),KDr.forEach(t),qZe=r(sx," or "),ZS=n(sx,"A",{href:!0});var ZDr=s(ZS);NZe=r(ZDr,"LayoutXLMTokenizerFast"),ZDr.forEach(t),jZe=r(sx," (LayoutXLM model)"),sx.forEach(t),DZe=i(S),es=n(S,"LI",{});var lx=s(es);fre=n(lx,"STRONG",{});var eGr=s(fre);GZe=r(eGr,"led"),eGr.forEach(t),OZe=r(lx," \u2014 "),eR=n(lx,"A",{href:!0});var oGr=s(eR);VZe=r(oGr,"LEDTokenizer"),oGr.forEach(t),XZe=r(lx," or "),oR=n(lx,"A",{href:!0});var rGr=s(oR);zZe=r(rGr,"LEDTokenizerFast"),rGr.forEach(t),QZe=r(lx," (LED model)"),lx.forEach(t),WZe=i(S),os=n(S,"LI",{});var ix=s(os);mre=n(ix,"STRONG",{});var tGr=s(mre);HZe=r(tGr,"longformer"),tGr.forEach(t),UZe=r(ix," \u2014 "),rR=n(ix,"A",{href:!0});var aGr=s(rR);JZe=r(aGr,"LongformerTokenizer"),aGr.forEach(t),YZe=r(ix," or "),tR=n(ix,"A",{href:!0});var nGr=s(tR);KZe=r(nGr,"LongformerTokenizerFast"),nGr.forEach(t),ZZe=r(ix," (Longformer model)"),ix.forEach(t),eeo=i(S),Tg=n(S,"LI",{});var SEe=s(Tg);gre=n(SEe,"STRONG",{});var sGr=s(gre);oeo=r(sGr,"luke"),sGr.forEach(t),reo=r(SEe," \u2014 "),aR=n(SEe,"A",{href:!0});var lGr=s(aR);teo=r(lGr,"LukeTokenizer"),lGr.forEach(t),aeo=r(SEe," (LUKE model)"),SEe.forEach(t),neo=i(S),rs=n(S,"LI",{});var dx=s(rs);hre=n(dx,"STRONG",{});var iGr=s(hre);seo=r(iGr,"lxmert"),iGr.forEach(t),leo=r(dx," \u2014 "),nR=n(dx,"A",{href:!0});var dGr=s(nR);ieo=r(dGr,"LxmertTokenizer"),dGr.forEach(t),deo=r(dx," or "),sR=n(dx,"A",{href:!0});var cGr=s(sR);ceo=r(cGr,"LxmertTokenizerFast"),cGr.forEach(t),feo=r(dx," (LXMERT model)"),dx.forEach(t),meo=i(S),Mg=n(S,"LI",{});var REe=s(Mg);pre=n(REe,"STRONG",{});var fGr=s(pre);geo=r(fGr,"m2m_100"),fGr.forEach(t),heo=r(REe," \u2014 "),lR=n(REe,"A",{href:!0});var mGr=s(lR);peo=r(mGr,"M2M100Tokenizer"),mGr.forEach(t),ueo=r(REe," (M2M100 model)"),REe.forEach(t),_eo=i(S),Eg=n(S,"LI",{});var BEe=s(Eg);ure=n(BEe,"STRONG",{});var gGr=s(ure);beo=r(gGr,"marian"),gGr.forEach(t),veo=r(BEe," \u2014 "),iR=n(BEe,"A",{href:!0});var hGr=s(iR);Feo=r(hGr,"MarianTokenizer"),hGr.forEach(t),Teo=r(BEe," (Marian model)"),BEe.forEach(t),Meo=i(S),ts=n(S,"LI",{});var cx=s(ts);_re=n(cx,"STRONG",{});var pGr=s(_re);Eeo=r(pGr,"mbart"),pGr.forEach(t),Ceo=r(cx," \u2014 "),dR=n(cx,"A",{href:!0});var uGr=s(dR);weo=r(uGr,"MBartTokenizer"),uGr.forEach(t),Aeo=r(cx," or "),cR=n(cx,"A",{href:!0});var _Gr=s(cR);yeo=r(_Gr,"MBartTokenizerFast"),_Gr.forEach(t),Leo=r(cx," (mBART model)"),cx.forEach(t),xeo=i(S),as=n(S,"LI",{});var fx=s(as);bre=n(fx,"STRONG",{});var bGr=s(bre);$eo=r(bGr,"mbart50"),bGr.forEach(t),keo=r(fx," \u2014 "),fR=n(fx,"A",{href:!0});var vGr=s(fR);Seo=r(vGr,"MBart50Tokenizer"),vGr.forEach(t),Reo=r(fx," or "),mR=n(fx,"A",{href:!0});var FGr=s(mR);Beo=r(FGr,"MBart50TokenizerFast"),FGr.forEach(t),Peo=r(fx," (mBART-50 model)"),fx.forEach(t),Ieo=i(S),ns=n(S,"LI",{});var mx=s(ns);vre=n(mx,"STRONG",{});var TGr=s(vre);qeo=r(TGr,"megatron-bert"),TGr.forEach(t),Neo=r(mx," \u2014 "),gR=n(mx,"A",{href:!0});var MGr=s(gR);jeo=r(MGr,"BertTokenizer"),MGr.forEach(t),Deo=r(mx," or "),hR=n(mx,"A",{href:!0});var EGr=s(hR);Geo=r(EGr,"BertTokenizerFast"),EGr.forEach(t),Oeo=r(mx," (MegatronBert model)"),mx.forEach(t),Veo=i(S),Cg=n(S,"LI",{});var PEe=s(Cg);Fre=n(PEe,"STRONG",{});var CGr=s(Fre);Xeo=r(CGr,"mluke"),CGr.forEach(t),zeo=r(PEe," \u2014 "),pR=n(PEe,"A",{href:!0});var wGr=s(pR);Qeo=r(wGr,"MLukeTokenizer"),wGr.forEach(t),Weo=r(PEe," (mLUKE model)"),PEe.forEach(t),Heo=i(S),ss=n(S,"LI",{});var gx=s(ss);Tre=n(gx,"STRONG",{});var AGr=s(Tre);Ueo=r(AGr,"mobilebert"),AGr.forEach(t),Jeo=r(gx," \u2014 "),uR=n(gx,"A",{href:!0});var yGr=s(uR);Yeo=r(yGr,"MobileBertTokenizer"),yGr.forEach(t),Keo=r(gx," or "),_R=n(gx,"A",{href:!0});var LGr=s(_R);Zeo=r(LGr,"MobileBertTokenizerFast"),LGr.forEach(t),eoo=r(gx," (MobileBERT model)"),gx.forEach(t),ooo=i(S),ls=n(S,"LI",{});var hx=s(ls);Mre=n(hx,"STRONG",{});var xGr=s(Mre);roo=r(xGr,"mpnet"),xGr.forEach(t),too=r(hx," \u2014 "),bR=n(hx,"A",{href:!0});var $Gr=s(bR);aoo=r($Gr,"MPNetTokenizer"),$Gr.forEach(t),noo=r(hx," or "),vR=n(hx,"A",{href:!0});var kGr=s(vR);soo=r(kGr,"MPNetTokenizerFast"),kGr.forEach(t),loo=r(hx," (MPNet model)"),hx.forEach(t),ioo=i(S),is=n(S,"LI",{});var px=s(is);Ere=n(px,"STRONG",{});var SGr=s(Ere);doo=r(SGr,"mt5"),SGr.forEach(t),coo=r(px," \u2014 "),FR=n(px,"A",{href:!0});var RGr=s(FR);foo=r(RGr,"MT5Tokenizer"),RGr.forEach(t),moo=r(px," or "),TR=n(px,"A",{href:!0});var BGr=s(TR);goo=r(BGr,"MT5TokenizerFast"),BGr.forEach(t),hoo=r(px," (mT5 model)"),px.forEach(t),poo=i(S),ds=n(S,"LI",{});var ux=s(ds);Cre=n(ux,"STRONG",{});var PGr=s(Cre);uoo=r(PGr,"nystromformer"),PGr.forEach(t),_oo=r(ux," \u2014 "),MR=n(ux,"A",{href:!0});var IGr=s(MR);boo=r(IGr,"AlbertTokenizer"),IGr.forEach(t),voo=r(ux," or "),ER=n(ux,"A",{href:!0});var qGr=s(ER);Foo=r(qGr,"AlbertTokenizerFast"),qGr.forEach(t),Too=r(ux," (Nystromformer model)"),ux.forEach(t),Moo=i(S),cs=n(S,"LI",{});var _x=s(cs);wre=n(_x,"STRONG",{});var NGr=s(wre);Eoo=r(NGr,"ofa"),NGr.forEach(t),Coo=r(_x," \u2014 "),CR=n(_x,"A",{href:!0});var jGr=s(CR);woo=r(jGr,"OFATokenizer"),jGr.forEach(t),Aoo=r(_x," or "),wR=n(_x,"A",{href:!0});var DGr=s(wR);yoo=r(DGr,"OFATokenizerFast"),DGr.forEach(t),Loo=r(_x," (OFA model)"),_x.forEach(t),xoo=i(S),fs=n(S,"LI",{});var bx=s(fs);Are=n(bx,"STRONG",{});var GGr=s(Are);$oo=r(GGr,"openai-gpt"),GGr.forEach(t),koo=r(bx," \u2014 "),AR=n(bx,"A",{href:!0});var OGr=s(AR);Soo=r(OGr,"OpenAIGPTTokenizer"),OGr.forEach(t),Roo=r(bx," or "),yR=n(bx,"A",{href:!0});var VGr=s(yR);Boo=r(VGr,"OpenAIGPTTokenizerFast"),VGr.forEach(t),Poo=r(bx," (OpenAI GPT model)"),bx.forEach(t),Ioo=i(S),ms=n(S,"LI",{});var vx=s(ms);yre=n(vx,"STRONG",{});var XGr=s(yre);qoo=r(XGr,"pegasus"),XGr.forEach(t),Noo=r(vx," \u2014 "),LR=n(vx,"A",{href:!0});var zGr=s(LR);joo=r(zGr,"PegasusTokenizer"),zGr.forEach(t),Doo=r(vx," or "),xR=n(vx,"A",{href:!0});var QGr=s(xR);Goo=r(QGr,"PegasusTokenizerFast"),QGr.forEach(t),Ooo=r(vx," (Pegasus model)"),vx.forEach(t),Voo=i(S),wg=n(S,"LI",{});var IEe=s(wg);Lre=n(IEe,"STRONG",{});var WGr=s(Lre);Xoo=r(WGr,"perceiver"),WGr.forEach(t),zoo=r(IEe," \u2014 "),$R=n(IEe,"A",{href:!0});var HGr=s($R);Qoo=r(HGr,"PerceiverTokenizer"),HGr.forEach(t),Woo=r(IEe," (Perceiver model)"),IEe.forEach(t),Hoo=i(S),Ag=n(S,"LI",{});var qEe=s(Ag);xre=n(qEe,"STRONG",{});var UGr=s(xre);Uoo=r(UGr,"phobert"),UGr.forEach(t),Joo=r(qEe," \u2014 "),kR=n(qEe,"A",{href:!0});var JGr=s(kR);Yoo=r(JGr,"PhobertTokenizer"),JGr.forEach(t),Koo=r(qEe," (PhoBERT model)"),qEe.forEach(t),Zoo=i(S),yg=n(S,"LI",{});var NEe=s(yg);$re=n(NEe,"STRONG",{});var YGr=s($re);ero=r(YGr,"plbart"),YGr.forEach(t),oro=r(NEe," \u2014 "),SR=n(NEe,"A",{href:!0});var KGr=s(SR);rro=r(KGr,"PLBartTokenizer"),KGr.forEach(t),tro=r(NEe," (PLBart model)"),NEe.forEach(t),aro=i(S),Lg=n(S,"LI",{});var jEe=s(Lg);kre=n(jEe,"STRONG",{});var ZGr=s(kre);nro=r(ZGr,"prophetnet"),ZGr.forEach(t),sro=r(jEe," \u2014 "),RR=n(jEe,"A",{href:!0});var eOr=s(RR);lro=r(eOr,"ProphetNetTokenizer"),eOr.forEach(t),iro=r(jEe," (ProphetNet model)"),jEe.forEach(t),dro=i(S),gs=n(S,"LI",{});var Fx=s(gs);Sre=n(Fx,"STRONG",{});var oOr=s(Sre);cro=r(oOr,"qdqbert"),oOr.forEach(t),fro=r(Fx," \u2014 "),BR=n(Fx,"A",{href:!0});var rOr=s(BR);mro=r(rOr,"BertTokenizer"),rOr.forEach(t),gro=r(Fx," or "),PR=n(Fx,"A",{href:!0});var tOr=s(PR);hro=r(tOr,"BertTokenizerFast"),tOr.forEach(t),pro=r(Fx," (QDQBert model)"),Fx.forEach(t),uro=i(S),xg=n(S,"LI",{});var DEe=s(xg);Rre=n(DEe,"STRONG",{});var aOr=s(Rre);_ro=r(aOr,"rag"),aOr.forEach(t),bro=r(DEe," \u2014 "),IR=n(DEe,"A",{href:!0});var nOr=s(IR);vro=r(nOr,"RagTokenizer"),nOr.forEach(t),Fro=r(DEe," (RAG model)"),DEe.forEach(t),Tro=i(S),hs=n(S,"LI",{});var Tx=s(hs);Bre=n(Tx,"STRONG",{});var sOr=s(Bre);Mro=r(sOr,"realm"),sOr.forEach(t),Ero=r(Tx," \u2014 "),qR=n(Tx,"A",{href:!0});var lOr=s(qR);Cro=r(lOr,"RealmTokenizer"),lOr.forEach(t),wro=r(Tx," or "),NR=n(Tx,"A",{href:!0});var iOr=s(NR);Aro=r(iOr,"RealmTokenizerFast"),iOr.forEach(t),yro=r(Tx," (Realm model)"),Tx.forEach(t),Lro=i(S),ps=n(S,"LI",{});var Mx=s(ps);Pre=n(Mx,"STRONG",{});var dOr=s(Pre);xro=r(dOr,"reformer"),dOr.forEach(t),$ro=r(Mx," \u2014 "),jR=n(Mx,"A",{href:!0});var cOr=s(jR);kro=r(cOr,"ReformerTokenizer"),cOr.forEach(t),Sro=r(Mx," or "),DR=n(Mx,"A",{href:!0});var fOr=s(DR);Rro=r(fOr,"ReformerTokenizerFast"),fOr.forEach(t),Bro=r(Mx," (Reformer model)"),Mx.forEach(t),Pro=i(S),us=n(S,"LI",{});var Ex=s(us);Ire=n(Ex,"STRONG",{});var mOr=s(Ire);Iro=r(mOr,"rembert"),mOr.forEach(t),qro=r(Ex," \u2014 "),GR=n(Ex,"A",{href:!0});var gOr=s(GR);Nro=r(gOr,"RemBertTokenizer"),gOr.forEach(t),jro=r(Ex," or "),OR=n(Ex,"A",{href:!0});var hOr=s(OR);Dro=r(hOr,"RemBertTokenizerFast"),hOr.forEach(t),Gro=r(Ex," (RemBERT model)"),Ex.forEach(t),Oro=i(S),_s=n(S,"LI",{});var Cx=s(_s);qre=n(Cx,"STRONG",{});var pOr=s(qre);Vro=r(pOr,"retribert"),pOr.forEach(t),Xro=r(Cx," \u2014 "),VR=n(Cx,"A",{href:!0});var uOr=s(VR);zro=r(uOr,"RetriBertTokenizer"),uOr.forEach(t),Qro=r(Cx," or "),XR=n(Cx,"A",{href:!0});var _Or=s(XR);Wro=r(_Or,"RetriBertTokenizerFast"),_Or.forEach(t),Hro=r(Cx," (RetriBERT model)"),Cx.forEach(t),Uro=i(S),bs=n(S,"LI",{});var wx=s(bs);Nre=n(wx,"STRONG",{});var bOr=s(Nre);Jro=r(bOr,"roberta"),bOr.forEach(t),Yro=r(wx," \u2014 "),zR=n(wx,"A",{href:!0});var vOr=s(zR);Kro=r(vOr,"RobertaTokenizer"),vOr.forEach(t),Zro=r(wx," or "),QR=n(wx,"A",{href:!0});var FOr=s(QR);eto=r(FOr,"RobertaTokenizerFast"),FOr.forEach(t),oto=r(wx," (RoBERTa model)"),wx.forEach(t),rto=i(S),vs=n(S,"LI",{});var Ax=s(vs);jre=n(Ax,"STRONG",{});var TOr=s(jre);tto=r(TOr,"roformer"),TOr.forEach(t),ato=r(Ax," \u2014 "),WR=n(Ax,"A",{href:!0});var MOr=s(WR);nto=r(MOr,"RoFormerTokenizer"),MOr.forEach(t),sto=r(Ax," or "),HR=n(Ax,"A",{href:!0});var EOr=s(HR);lto=r(EOr,"RoFormerTokenizerFast"),EOr.forEach(t),ito=r(Ax," (RoFormer model)"),Ax.forEach(t),dto=i(S),$g=n(S,"LI",{});var GEe=s($g);Dre=n(GEe,"STRONG",{});var COr=s(Dre);cto=r(COr,"speech_to_text"),COr.forEach(t),fto=r(GEe," \u2014 "),UR=n(GEe,"A",{href:!0});var wOr=s(UR);mto=r(wOr,"Speech2TextTokenizer"),wOr.forEach(t),gto=r(GEe," (Speech2Text model)"),GEe.forEach(t),hto=i(S),kg=n(S,"LI",{});var OEe=s(kg);Gre=n(OEe,"STRONG",{});var AOr=s(Gre);pto=r(AOr,"speech_to_text_2"),AOr.forEach(t),uto=r(OEe," \u2014 "),JR=n(OEe,"A",{href:!0});var yOr=s(JR);_to=r(yOr,"Speech2Text2Tokenizer"),yOr.forEach(t),bto=r(OEe," (Speech2Text2 model)"),OEe.forEach(t),vto=i(S),Fs=n(S,"LI",{});var yx=s(Fs);Ore=n(yx,"STRONG",{});var LOr=s(Ore);Fto=r(LOr,"splinter"),LOr.forEach(t),Tto=r(yx," \u2014 "),YR=n(yx,"A",{href:!0});var xOr=s(YR);Mto=r(xOr,"SplinterTokenizer"),xOr.forEach(t),Eto=r(yx," or "),KR=n(yx,"A",{href:!0});var $Or=s(KR);Cto=r($Or,"SplinterTokenizerFast"),$Or.forEach(t),wto=r(yx," (Splinter model)"),yx.forEach(t),Ato=i(S),Ts=n(S,"LI",{});var Lx=s(Ts);Vre=n(Lx,"STRONG",{});var kOr=s(Vre);yto=r(kOr,"squeezebert"),kOr.forEach(t),Lto=r(Lx," \u2014 "),ZR=n(Lx,"A",{href:!0});var SOr=s(ZR);xto=r(SOr,"SqueezeBertTokenizer"),SOr.forEach(t),$to=r(Lx," or "),eB=n(Lx,"A",{href:!0});var ROr=s(eB);kto=r(ROr,"SqueezeBertTokenizerFast"),ROr.forEach(t),Sto=r(Lx," (SqueezeBERT model)"),Lx.forEach(t),Rto=i(S),Ms=n(S,"LI",{});var xx=s(Ms);Xre=n(xx,"STRONG",{});var BOr=s(Xre);Bto=r(BOr,"t5"),BOr.forEach(t),Pto=r(xx," \u2014 "),oB=n(xx,"A",{href:!0});var POr=s(oB);Ito=r(POr,"T5Tokenizer"),POr.forEach(t),qto=r(xx," or "),rB=n(xx,"A",{href:!0});var IOr=s(rB);Nto=r(IOr,"T5TokenizerFast"),IOr.forEach(t),jto=r(xx," (T5 model)"),xx.forEach(t),Dto=i(S),Sg=n(S,"LI",{});var VEe=s(Sg);zre=n(VEe,"STRONG",{});var qOr=s(zre);Gto=r(qOr,"tapas"),qOr.forEach(t),Oto=r(VEe," \u2014 "),tB=n(VEe,"A",{href:!0});var NOr=s(tB);Vto=r(NOr,"TapasTokenizer"),NOr.forEach(t),Xto=r(VEe," (TAPAS model)"),VEe.forEach(t),zto=i(S),Rg=n(S,"LI",{});var XEe=s(Rg);Qre=n(XEe,"STRONG",{});var jOr=s(Qre);Qto=r(jOr,"tapex"),jOr.forEach(t),Wto=r(XEe," \u2014 "),aB=n(XEe,"A",{href:!0});var DOr=s(aB);Hto=r(DOr,"TapexTokenizer"),DOr.forEach(t),Uto=r(XEe," (TAPEX model)"),XEe.forEach(t),Jto=i(S),Bg=n(S,"LI",{});var zEe=s(Bg);Wre=n(zEe,"STRONG",{});var GOr=s(Wre);Yto=r(GOr,"transfo-xl"),GOr.forEach(t),Kto=r(zEe," \u2014 "),nB=n(zEe,"A",{href:!0});var OOr=s(nB);Zto=r(OOr,"TransfoXLTokenizer"),OOr.forEach(t),eao=r(zEe," (Transformer-XL model)"),zEe.forEach(t),oao=i(S),Es=n(S,"LI",{});var $x=s(Es);Hre=n($x,"STRONG",{});var VOr=s(Hre);rao=r(VOr,"visual_bert"),VOr.forEach(t),tao=r($x," \u2014 "),sB=n($x,"A",{href:!0});var XOr=s(sB);aao=r(XOr,"BertTokenizer"),XOr.forEach(t),nao=r($x," or "),lB=n($x,"A",{href:!0});var zOr=s(lB);sao=r(zOr,"BertTokenizerFast"),zOr.forEach(t),lao=r($x," (VisualBert model)"),$x.forEach(t),iao=i(S),Pg=n(S,"LI",{});var QEe=s(Pg);Ure=n(QEe,"STRONG",{});var QOr=s(Ure);dao=r(QOr,"wav2vec2"),QOr.forEach(t),cao=r(QEe," \u2014 "),iB=n(QEe,"A",{href:!0});var WOr=s(iB);fao=r(WOr,"Wav2Vec2CTCTokenizer"),WOr.forEach(t),mao=r(QEe," (Wav2Vec2 model)"),QEe.forEach(t),gao=i(S),Ig=n(S,"LI",{});var WEe=s(Ig);Jre=n(WEe,"STRONG",{});var HOr=s(Jre);hao=r(HOr,"wav2vec2_phoneme"),HOr.forEach(t),pao=r(WEe," \u2014 "),dB=n(WEe,"A",{href:!0});var UOr=s(dB);uao=r(UOr,"Wav2Vec2PhonemeCTCTokenizer"),UOr.forEach(t),_ao=r(WEe," (Wav2Vec2Phoneme model)"),WEe.forEach(t),bao=i(S),Cs=n(S,"LI",{});var kx=s(Cs);Yre=n(kx,"STRONG",{});var JOr=s(Yre);vao=r(JOr,"xglm"),JOr.forEach(t),Fao=r(kx," \u2014 "),cB=n(kx,"A",{href:!0});var YOr=s(cB);Tao=r(YOr,"XGLMTokenizer"),YOr.forEach(t),Mao=r(kx," or "),fB=n(kx,"A",{href:!0});var KOr=s(fB);Eao=r(KOr,"XGLMTokenizerFast"),KOr.forEach(t),Cao=r(kx," (XGLM model)"),kx.forEach(t),wao=i(S),qg=n(S,"LI",{});var HEe=s(qg);Kre=n(HEe,"STRONG",{});var ZOr=s(Kre);Aao=r(ZOr,"xlm"),ZOr.forEach(t),yao=r(HEe," \u2014 "),mB=n(HEe,"A",{href:!0});var eVr=s(mB);Lao=r(eVr,"XLMTokenizer"),eVr.forEach(t),xao=r(HEe," (XLM model)"),HEe.forEach(t),$ao=i(S),Ng=n(S,"LI",{});var UEe=s(Ng);Zre=n(UEe,"STRONG",{});var oVr=s(Zre);kao=r(oVr,"xlm-prophetnet"),oVr.forEach(t),Sao=r(UEe," \u2014 "),gB=n(UEe,"A",{href:!0});var rVr=s(gB);Rao=r(rVr,"XLMProphetNetTokenizer"),rVr.forEach(t),Bao=r(UEe," (XLMProphetNet model)"),UEe.forEach(t),Pao=i(S),ws=n(S,"LI",{});var Sx=s(ws);ete=n(Sx,"STRONG",{});var tVr=s(ete);Iao=r(tVr,"xlm-roberta"),tVr.forEach(t),qao=r(Sx," \u2014 "),hB=n(Sx,"A",{href:!0});var aVr=s(hB);Nao=r(aVr,"XLMRobertaTokenizer"),aVr.forEach(t),jao=r(Sx," or "),pB=n(Sx,"A",{href:!0});var nVr=s(pB);Dao=r(nVr,"XLMRobertaTokenizerFast"),nVr.forEach(t),Gao=r(Sx," (XLM-RoBERTa model)"),Sx.forEach(t),Oao=i(S),As=n(S,"LI",{});var Rx=s(As);ote=n(Rx,"STRONG",{});var sVr=s(ote);Vao=r(sVr,"xlm-roberta-xl"),sVr.forEach(t),Xao=r(Rx," \u2014 "),uB=n(Rx,"A",{href:!0});var lVr=s(uB);zao=r(lVr,"RobertaTokenizer"),lVr.forEach(t),Qao=r(Rx," or "),_B=n(Rx,"A",{href:!0});var iVr=s(_B);Wao=r(iVr,"RobertaTokenizerFast"),iVr.forEach(t),Hao=r(Rx," (XLM-RoBERTa-XL model)"),Rx.forEach(t),Uao=i(S),ys=n(S,"LI",{});var Bx=s(ys);rte=n(Bx,"STRONG",{});var dVr=s(rte);Jao=r(dVr,"xlnet"),dVr.forEach(t),Yao=r(Bx," \u2014 "),bB=n(Bx,"A",{href:!0});var cVr=s(bB);Kao=r(cVr,"XLNetTokenizer"),cVr.forEach(t),Zao=r(Bx," or "),vB=n(Bx,"A",{href:!0});var fVr=s(vB);eno=r(fVr,"XLNetTokenizerFast"),fVr.forEach(t),ono=r(Bx," (XLNet model)"),Bx.forEach(t),rno=i(S),Ls=n(S,"LI",{});var Px=s(Ls);tte=n(Px,"STRONG",{});var mVr=s(tte);tno=r(mVr,"yoso"),mVr.forEach(t),ano=r(Px," \u2014 "),FB=n(Px,"A",{href:!0});var gVr=s(FB);nno=r(gVr,"AlbertTokenizer"),gVr.forEach(t),sno=r(Px," or "),TB=n(Px,"A",{href:!0});var hVr=s(TB);lno=r(hVr,"AlbertTokenizerFast"),hVr.forEach(t),ino=r(Px," (YOSO model)"),Px.forEach(t),S.forEach(t),dno=i(Rs),T(jg.$$.fragment,Rs),Rs.forEach(t),cno=i(Ss),Dg=n(Ss,"DIV",{class:!0});var RIe=s(Dg);T(Dw.$$.fragment,RIe),fno=i(RIe),ate=n(RIe,"P",{});var pVr=s(ate);mno=r(pVr,"Register a new tokenizer in this mapping."),pVr.forEach(t),RIe.forEach(t),Ss.forEach(t),IBe=i(f),gi=n(f,"H2",{class:!0});var BIe=s(gi);Gg=n(BIe,"A",{id:!0,class:!0,href:!0});var uVr=s(Gg);nte=n(uVr,"SPAN",{});var _Vr=s(nte);T(Gw.$$.fragment,_Vr),_Vr.forEach(t),uVr.forEach(t),gno=i(BIe),ste=n(BIe,"SPAN",{});var bVr=s(ste);hno=r(bVr,"AutoFeatureExtractor"),bVr.forEach(t),BIe.forEach(t),qBe=i(f),Ao=n(f,"DIV",{class:!0});var Bs=s(Ao);T(Ow.$$.fragment,Bs),pno=i(Bs),Vw=n(Bs,"P",{});var PIe=s(Vw);uno=r(PIe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),MB=n(PIe,"A",{href:!0});var vVr=s(MB);_no=r(vVr,"AutoFeatureExtractor.from_pretrained()"),vVr.forEach(t),bno=r(PIe," class method."),PIe.forEach(t),vno=i(Bs),Xw=n(Bs,"P",{});var IIe=s(Xw);Fno=r(IIe,"This class cannot be instantiated directly using "),lte=n(IIe,"CODE",{});var FVr=s(lte);Tno=r(FVr,"__init__()"),FVr.forEach(t),Mno=r(IIe," (throws an error)."),IIe.forEach(t),Eno=i(Bs),Qe=n(Bs,"DIV",{class:!0});var Ht=s(Qe);T(zw.$$.fragment,Ht),Cno=i(Ht),ite=n(Ht,"P",{});var TVr=s(ite);wno=r(TVr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),TVr.forEach(t),Ano=i(Ht),Ma=n(Ht,"P",{});var kC=s(Ma);yno=r(kC,"The feature extractor class to instantiate is selected based on the "),dte=n(kC,"CODE",{});var MVr=s(dte);Lno=r(MVr,"model_type"),MVr.forEach(t),xno=r(kC,` property of the config object
(either passed as an argument or loaded from `),cte=n(kC,"CODE",{});var EVr=s(cte);$no=r(EVr,"pretrained_model_name_or_path"),EVr.forEach(t),kno=r(kC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),fte=n(kC,"CODE",{});var CVr=s(fte);Sno=r(CVr,"pretrained_model_name_or_path"),CVr.forEach(t),Rno=r(kC,":"),kC.forEach(t),Bno=i(Ht),te=n(Ht,"UL",{});var se=s(te);Og=n(se,"LI",{});var JEe=s(Og);mte=n(JEe,"STRONG",{});var wVr=s(mte);Pno=r(wVr,"beit"),wVr.forEach(t),Ino=r(JEe," \u2014 "),EB=n(JEe,"A",{href:!0});var AVr=s(EB);qno=r(AVr,"BeitFeatureExtractor"),AVr.forEach(t),Nno=r(JEe," (BEiT model)"),JEe.forEach(t),jno=i(se),Vg=n(se,"LI",{});var YEe=s(Vg);gte=n(YEe,"STRONG",{});var yVr=s(gte);Dno=r(yVr,"clip"),yVr.forEach(t),Gno=r(YEe," \u2014 "),CB=n(YEe,"A",{href:!0});var LVr=s(CB);Ono=r(LVr,"CLIPFeatureExtractor"),LVr.forEach(t),Vno=r(YEe," (CLIP model)"),YEe.forEach(t),Xno=i(se),Xg=n(se,"LI",{});var KEe=s(Xg);hte=n(KEe,"STRONG",{});var xVr=s(hte);zno=r(xVr,"convnext"),xVr.forEach(t),Qno=r(KEe," \u2014 "),wB=n(KEe,"A",{href:!0});var $Vr=s(wB);Wno=r($Vr,"ConvNextFeatureExtractor"),$Vr.forEach(t),Hno=r(KEe," (ConvNext model)"),KEe.forEach(t),Uno=i(se),zg=n(se,"LI",{});var ZEe=s(zg);pte=n(ZEe,"STRONG",{});var kVr=s(pte);Jno=r(kVr,"data2vec-audio"),kVr.forEach(t),Yno=r(ZEe," \u2014 "),AB=n(ZEe,"A",{href:!0});var SVr=s(AB);Kno=r(SVr,"Wav2Vec2FeatureExtractor"),SVr.forEach(t),Zno=r(ZEe," (Data2VecAudio model)"),ZEe.forEach(t),eso=i(se),Qg=n(se,"LI",{});var e5e=s(Qg);ute=n(e5e,"STRONG",{});var RVr=s(ute);oso=r(RVr,"data2vec-vision"),RVr.forEach(t),rso=r(e5e," \u2014 "),yB=n(e5e,"A",{href:!0});var BVr=s(yB);tso=r(BVr,"BeitFeatureExtractor"),BVr.forEach(t),aso=r(e5e," (Data2VecVision model)"),e5e.forEach(t),nso=i(se),Wg=n(se,"LI",{});var o5e=s(Wg);_te=n(o5e,"STRONG",{});var PVr=s(_te);sso=r(PVr,"deit"),PVr.forEach(t),lso=r(o5e," \u2014 "),LB=n(o5e,"A",{href:!0});var IVr=s(LB);iso=r(IVr,"DeiTFeatureExtractor"),IVr.forEach(t),dso=r(o5e," (DeiT model)"),o5e.forEach(t),cso=i(se),Hg=n(se,"LI",{});var r5e=s(Hg);bte=n(r5e,"STRONG",{});var qVr=s(bte);fso=r(qVr,"detr"),qVr.forEach(t),mso=r(r5e," \u2014 "),xB=n(r5e,"A",{href:!0});var NVr=s(xB);gso=r(NVr,"DetrFeatureExtractor"),NVr.forEach(t),hso=r(r5e," (DETR model)"),r5e.forEach(t),pso=i(se),Ug=n(se,"LI",{});var t5e=s(Ug);vte=n(t5e,"STRONG",{});var jVr=s(vte);uso=r(jVr,"dpt"),jVr.forEach(t),_so=r(t5e," \u2014 "),$B=n(t5e,"A",{href:!0});var DVr=s($B);bso=r(DVr,"DPTFeatureExtractor"),DVr.forEach(t),vso=r(t5e," (DPT model)"),t5e.forEach(t),Fso=i(se),Jg=n(se,"LI",{});var a5e=s(Jg);Fte=n(a5e,"STRONG",{});var GVr=s(Fte);Tso=r(GVr,"glpn"),GVr.forEach(t),Mso=r(a5e," \u2014 "),kB=n(a5e,"A",{href:!0});var OVr=s(kB);Eso=r(OVr,"GLPNFeatureExtractor"),OVr.forEach(t),Cso=r(a5e," (GLPN model)"),a5e.forEach(t),wso=i(se),Yg=n(se,"LI",{});var n5e=s(Yg);Tte=n(n5e,"STRONG",{});var VVr=s(Tte);Aso=r(VVr,"hubert"),VVr.forEach(t),yso=r(n5e," \u2014 "),SB=n(n5e,"A",{href:!0});var XVr=s(SB);Lso=r(XVr,"Wav2Vec2FeatureExtractor"),XVr.forEach(t),xso=r(n5e," (Hubert model)"),n5e.forEach(t),$so=i(se),Kg=n(se,"LI",{});var s5e=s(Kg);Mte=n(s5e,"STRONG",{});var zVr=s(Mte);kso=r(zVr,"layoutlmv2"),zVr.forEach(t),Sso=r(s5e," \u2014 "),RB=n(s5e,"A",{href:!0});var QVr=s(RB);Rso=r(QVr,"LayoutLMv2FeatureExtractor"),QVr.forEach(t),Bso=r(s5e," (LayoutLMv2 model)"),s5e.forEach(t),Pso=i(se),Zg=n(se,"LI",{});var l5e=s(Zg);Ete=n(l5e,"STRONG",{});var WVr=s(Ete);Iso=r(WVr,"maskformer"),WVr.forEach(t),qso=r(l5e," \u2014 "),BB=n(l5e,"A",{href:!0});var HVr=s(BB);Nso=r(HVr,"MaskFormerFeatureExtractor"),HVr.forEach(t),jso=r(l5e," (MaskFormer model)"),l5e.forEach(t),Dso=i(se),eh=n(se,"LI",{});var i5e=s(eh);Cte=n(i5e,"STRONG",{});var UVr=s(Cte);Gso=r(UVr,"perceiver"),UVr.forEach(t),Oso=r(i5e," \u2014 "),PB=n(i5e,"A",{href:!0});var JVr=s(PB);Vso=r(JVr,"PerceiverFeatureExtractor"),JVr.forEach(t),Xso=r(i5e," (Perceiver model)"),i5e.forEach(t),zso=i(se),oh=n(se,"LI",{});var d5e=s(oh);wte=n(d5e,"STRONG",{});var YVr=s(wte);Qso=r(YVr,"poolformer"),YVr.forEach(t),Wso=r(d5e," \u2014 "),IB=n(d5e,"A",{href:!0});var KVr=s(IB);Hso=r(KVr,"PoolFormerFeatureExtractor"),KVr.forEach(t),Uso=r(d5e," (PoolFormer model)"),d5e.forEach(t),Jso=i(se),rh=n(se,"LI",{});var c5e=s(rh);Ate=n(c5e,"STRONG",{});var ZVr=s(Ate);Yso=r(ZVr,"regnet"),ZVr.forEach(t),Kso=r(c5e," \u2014 "),qB=n(c5e,"A",{href:!0});var eXr=s(qB);Zso=r(eXr,"ConvNextFeatureExtractor"),eXr.forEach(t),elo=r(c5e," (RegNet model)"),c5e.forEach(t),olo=i(se),th=n(se,"LI",{});var f5e=s(th);yte=n(f5e,"STRONG",{});var oXr=s(yte);rlo=r(oXr,"resnet"),oXr.forEach(t),tlo=r(f5e," \u2014 "),NB=n(f5e,"A",{href:!0});var rXr=s(NB);alo=r(rXr,"ConvNextFeatureExtractor"),rXr.forEach(t),nlo=r(f5e," (ResNet model)"),f5e.forEach(t),slo=i(se),ah=n(se,"LI",{});var m5e=s(ah);Lte=n(m5e,"STRONG",{});var tXr=s(Lte);llo=r(tXr,"segformer"),tXr.forEach(t),ilo=r(m5e," \u2014 "),jB=n(m5e,"A",{href:!0});var aXr=s(jB);dlo=r(aXr,"SegformerFeatureExtractor"),aXr.forEach(t),clo=r(m5e," (SegFormer model)"),m5e.forEach(t),flo=i(se),nh=n(se,"LI",{});var g5e=s(nh);xte=n(g5e,"STRONG",{});var nXr=s(xte);mlo=r(nXr,"speech_to_text"),nXr.forEach(t),glo=r(g5e," \u2014 "),DB=n(g5e,"A",{href:!0});var sXr=s(DB);hlo=r(sXr,"Speech2TextFeatureExtractor"),sXr.forEach(t),plo=r(g5e," (Speech2Text model)"),g5e.forEach(t),ulo=i(se),sh=n(se,"LI",{});var h5e=s(sh);$te=n(h5e,"STRONG",{});var lXr=s($te);_lo=r(lXr,"swin"),lXr.forEach(t),blo=r(h5e," \u2014 "),GB=n(h5e,"A",{href:!0});var iXr=s(GB);vlo=r(iXr,"ViTFeatureExtractor"),iXr.forEach(t),Flo=r(h5e," (Swin model)"),h5e.forEach(t),Tlo=i(se),lh=n(se,"LI",{});var p5e=s(lh);kte=n(p5e,"STRONG",{});var dXr=s(kte);Mlo=r(dXr,"van"),dXr.forEach(t),Elo=r(p5e," \u2014 "),OB=n(p5e,"A",{href:!0});var cXr=s(OB);Clo=r(cXr,"ConvNextFeatureExtractor"),cXr.forEach(t),wlo=r(p5e," (VAN model)"),p5e.forEach(t),Alo=i(se),ih=n(se,"LI",{});var u5e=s(ih);Ste=n(u5e,"STRONG",{});var fXr=s(Ste);ylo=r(fXr,"vit"),fXr.forEach(t),Llo=r(u5e," \u2014 "),VB=n(u5e,"A",{href:!0});var mXr=s(VB);xlo=r(mXr,"ViTFeatureExtractor"),mXr.forEach(t),$lo=r(u5e," (ViT model)"),u5e.forEach(t),klo=i(se),dh=n(se,"LI",{});var _5e=s(dh);Rte=n(_5e,"STRONG",{});var gXr=s(Rte);Slo=r(gXr,"vit_mae"),gXr.forEach(t),Rlo=r(_5e," \u2014 "),XB=n(_5e,"A",{href:!0});var hXr=s(XB);Blo=r(hXr,"ViTFeatureExtractor"),hXr.forEach(t),Plo=r(_5e," (ViTMAE model)"),_5e.forEach(t),Ilo=i(se),ch=n(se,"LI",{});var b5e=s(ch);Bte=n(b5e,"STRONG",{});var pXr=s(Bte);qlo=r(pXr,"wav2vec2"),pXr.forEach(t),Nlo=r(b5e," \u2014 "),zB=n(b5e,"A",{href:!0});var uXr=s(zB);jlo=r(uXr,"Wav2Vec2FeatureExtractor"),uXr.forEach(t),Dlo=r(b5e," (Wav2Vec2 model)"),b5e.forEach(t),Glo=i(se),fh=n(se,"LI",{});var v5e=s(fh);Pte=n(v5e,"STRONG",{});var _Xr=s(Pte);Olo=r(_Xr,"yolos"),_Xr.forEach(t),Vlo=r(v5e," \u2014 "),QB=n(v5e,"A",{href:!0});var bXr=s(QB);Xlo=r(bXr,"YolosFeatureExtractor"),bXr.forEach(t),zlo=r(v5e," (YOLOS model)"),v5e.forEach(t),se.forEach(t),Qlo=i(Ht),T(mh.$$.fragment,Ht),Wlo=i(Ht),T(gh.$$.fragment,Ht),Ht.forEach(t),Hlo=i(Bs),hh=n(Bs,"DIV",{class:!0});var qIe=s(hh);T(Qw.$$.fragment,qIe),Ulo=i(qIe),Ite=n(qIe,"P",{});var vXr=s(Ite);Jlo=r(vXr,"Register a new feature extractor for this class."),vXr.forEach(t),qIe.forEach(t),Bs.forEach(t),NBe=i(f),hi=n(f,"H2",{class:!0});var NIe=s(hi);ph=n(NIe,"A",{id:!0,class:!0,href:!0});var FXr=s(ph);qte=n(FXr,"SPAN",{});var TXr=s(qte);T(Ww.$$.fragment,TXr),TXr.forEach(t),FXr.forEach(t),Ylo=i(NIe),Nte=n(NIe,"SPAN",{});var MXr=s(Nte);Klo=r(MXr,"AutoProcessor"),MXr.forEach(t),NIe.forEach(t),jBe=i(f),yo=n(f,"DIV",{class:!0});var Ps=s(yo);T(Hw.$$.fragment,Ps),Zlo=i(Ps),Uw=n(Ps,"P",{});var jIe=s(Uw);eio=r(jIe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),WB=n(jIe,"A",{href:!0});var EXr=s(WB);oio=r(EXr,"AutoProcessor.from_pretrained()"),EXr.forEach(t),rio=r(jIe," class method."),jIe.forEach(t),tio=i(Ps),Jw=n(Ps,"P",{});var DIe=s(Jw);aio=r(DIe,"This class cannot be instantiated directly using "),jte=n(DIe,"CODE",{});var CXr=s(jte);nio=r(CXr,"__init__()"),CXr.forEach(t),sio=r(DIe," (throws an error)."),DIe.forEach(t),lio=i(Ps),We=n(Ps,"DIV",{class:!0});var Ut=s(We);T(Yw.$$.fragment,Ut),iio=i(Ut),Dte=n(Ut,"P",{});var wXr=s(Dte);dio=r(wXr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),wXr.forEach(t),cio=i(Ut),pi=n(Ut,"P",{});var MY=s(pi);fio=r(MY,"The processor class to instantiate is selected based on the "),Gte=n(MY,"CODE",{});var AXr=s(Gte);mio=r(AXr,"model_type"),AXr.forEach(t),gio=r(MY,` property of the config object (either
passed as an argument or loaded from `),Ote=n(MY,"CODE",{});var yXr=s(Ote);hio=r(yXr,"pretrained_model_name_or_path"),yXr.forEach(t),pio=r(MY," if possible):"),MY.forEach(t),uio=i(Ut),be=n(Ut,"UL",{});var Fe=s(be);uh=n(Fe,"LI",{});var F5e=s(uh);Vte=n(F5e,"STRONG",{});var LXr=s(Vte);_io=r(LXr,"clip"),LXr.forEach(t),bio=r(F5e," \u2014 "),HB=n(F5e,"A",{href:!0});var xXr=s(HB);vio=r(xXr,"CLIPProcessor"),xXr.forEach(t),Fio=r(F5e," (CLIP model)"),F5e.forEach(t),Tio=i(Fe),_h=n(Fe,"LI",{});var T5e=s(_h);Xte=n(T5e,"STRONG",{});var $Xr=s(Xte);Mio=r($Xr,"layoutlmv2"),$Xr.forEach(t),Eio=r(T5e," \u2014 "),UB=n(T5e,"A",{href:!0});var kXr=s(UB);Cio=r(kXr,"LayoutLMv2Processor"),kXr.forEach(t),wio=r(T5e," (LayoutLMv2 model)"),T5e.forEach(t),Aio=i(Fe),bh=n(Fe,"LI",{});var M5e=s(bh);zte=n(M5e,"STRONG",{});var SXr=s(zte);yio=r(SXr,"layoutxlm"),SXr.forEach(t),Lio=r(M5e," \u2014 "),JB=n(M5e,"A",{href:!0});var RXr=s(JB);xio=r(RXr,"LayoutXLMProcessor"),RXr.forEach(t),$io=r(M5e," (LayoutXLM model)"),M5e.forEach(t),kio=i(Fe),vh=n(Fe,"LI",{});var E5e=s(vh);Qte=n(E5e,"STRONG",{});var BXr=s(Qte);Sio=r(BXr,"sew"),BXr.forEach(t),Rio=r(E5e," \u2014 "),YB=n(E5e,"A",{href:!0});var PXr=s(YB);Bio=r(PXr,"Wav2Vec2Processor"),PXr.forEach(t),Pio=r(E5e," (SEW model)"),E5e.forEach(t),Iio=i(Fe),Fh=n(Fe,"LI",{});var C5e=s(Fh);Wte=n(C5e,"STRONG",{});var IXr=s(Wte);qio=r(IXr,"sew-d"),IXr.forEach(t),Nio=r(C5e," \u2014 "),KB=n(C5e,"A",{href:!0});var qXr=s(KB);jio=r(qXr,"Wav2Vec2Processor"),qXr.forEach(t),Dio=r(C5e," (SEW-D model)"),C5e.forEach(t),Gio=i(Fe),Th=n(Fe,"LI",{});var w5e=s(Th);Hte=n(w5e,"STRONG",{});var NXr=s(Hte);Oio=r(NXr,"speech_to_text"),NXr.forEach(t),Vio=r(w5e," \u2014 "),ZB=n(w5e,"A",{href:!0});var jXr=s(ZB);Xio=r(jXr,"Speech2TextProcessor"),jXr.forEach(t),zio=r(w5e," (Speech2Text model)"),w5e.forEach(t),Qio=i(Fe),Mh=n(Fe,"LI",{});var A5e=s(Mh);Ute=n(A5e,"STRONG",{});var DXr=s(Ute);Wio=r(DXr,"speech_to_text_2"),DXr.forEach(t),Hio=r(A5e," \u2014 "),eP=n(A5e,"A",{href:!0});var GXr=s(eP);Uio=r(GXr,"Speech2Text2Processor"),GXr.forEach(t),Jio=r(A5e," (Speech2Text2 model)"),A5e.forEach(t),Yio=i(Fe),Eh=n(Fe,"LI",{});var y5e=s(Eh);Jte=n(y5e,"STRONG",{});var OXr=s(Jte);Kio=r(OXr,"trocr"),OXr.forEach(t),Zio=r(y5e," \u2014 "),oP=n(y5e,"A",{href:!0});var VXr=s(oP);edo=r(VXr,"TrOCRProcessor"),VXr.forEach(t),odo=r(y5e," (TrOCR model)"),y5e.forEach(t),rdo=i(Fe),Ch=n(Fe,"LI",{});var L5e=s(Ch);Yte=n(L5e,"STRONG",{});var XXr=s(Yte);tdo=r(XXr,"unispeech"),XXr.forEach(t),ado=r(L5e," \u2014 "),rP=n(L5e,"A",{href:!0});var zXr=s(rP);ndo=r(zXr,"Wav2Vec2Processor"),zXr.forEach(t),sdo=r(L5e," (UniSpeech model)"),L5e.forEach(t),ldo=i(Fe),wh=n(Fe,"LI",{});var x5e=s(wh);Kte=n(x5e,"STRONG",{});var QXr=s(Kte);ido=r(QXr,"unispeech-sat"),QXr.forEach(t),ddo=r(x5e," \u2014 "),tP=n(x5e,"A",{href:!0});var WXr=s(tP);cdo=r(WXr,"Wav2Vec2Processor"),WXr.forEach(t),fdo=r(x5e," (UniSpeechSat model)"),x5e.forEach(t),mdo=i(Fe),Ah=n(Fe,"LI",{});var $5e=s(Ah);Zte=n($5e,"STRONG",{});var HXr=s(Zte);gdo=r(HXr,"vilt"),HXr.forEach(t),hdo=r($5e," \u2014 "),aP=n($5e,"A",{href:!0});var UXr=s(aP);pdo=r(UXr,"ViltProcessor"),UXr.forEach(t),udo=r($5e," (ViLT model)"),$5e.forEach(t),_do=i(Fe),yh=n(Fe,"LI",{});var k5e=s(yh);eae=n(k5e,"STRONG",{});var JXr=s(eae);bdo=r(JXr,"vision-text-dual-encoder"),JXr.forEach(t),vdo=r(k5e," \u2014 "),nP=n(k5e,"A",{href:!0});var YXr=s(nP);Fdo=r(YXr,"VisionTextDualEncoderProcessor"),YXr.forEach(t),Tdo=r(k5e," (VisionTextDualEncoder model)"),k5e.forEach(t),Mdo=i(Fe),Lh=n(Fe,"LI",{});var S5e=s(Lh);oae=n(S5e,"STRONG",{});var KXr=s(oae);Edo=r(KXr,"wav2vec2"),KXr.forEach(t),Cdo=r(S5e," \u2014 "),sP=n(S5e,"A",{href:!0});var ZXr=s(sP);wdo=r(ZXr,"Wav2Vec2Processor"),ZXr.forEach(t),Ado=r(S5e," (Wav2Vec2 model)"),S5e.forEach(t),ydo=i(Fe),xh=n(Fe,"LI",{});var R5e=s(xh);rae=n(R5e,"STRONG",{});var ezr=s(rae);Ldo=r(ezr,"wavlm"),ezr.forEach(t),xdo=r(R5e," \u2014 "),lP=n(R5e,"A",{href:!0});var ozr=s(lP);$do=r(ozr,"Wav2Vec2Processor"),ozr.forEach(t),kdo=r(R5e," (WavLM model)"),R5e.forEach(t),Fe.forEach(t),Sdo=i(Ut),T($h.$$.fragment,Ut),Rdo=i(Ut),T(kh.$$.fragment,Ut),Ut.forEach(t),Bdo=i(Ps),Sh=n(Ps,"DIV",{class:!0});var GIe=s(Sh);T(Kw.$$.fragment,GIe),Pdo=i(GIe),tae=n(GIe,"P",{});var rzr=s(tae);Ido=r(rzr,"Register a new processor for this class."),rzr.forEach(t),GIe.forEach(t),Ps.forEach(t),DBe=i(f),ui=n(f,"H2",{class:!0});var OIe=s(ui);Rh=n(OIe,"A",{id:!0,class:!0,href:!0});var tzr=s(Rh);aae=n(tzr,"SPAN",{});var azr=s(aae);T(Zw.$$.fragment,azr),azr.forEach(t),tzr.forEach(t),qdo=i(OIe),nae=n(OIe,"SPAN",{});var nzr=s(nae);Ndo=r(nzr,"AutoModel"),nzr.forEach(t),OIe.forEach(t),GBe=i(f),Lo=n(f,"DIV",{class:!0});var Is=s(Lo);T(eA.$$.fragment,Is),jdo=i(Is),_i=n(Is,"P",{});var EY=s(_i);Ddo=r(EY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iP=n(EY,"A",{href:!0});var szr=s(iP);Gdo=r(szr,"from_pretrained()"),szr.forEach(t),Odo=r(EY," class method or the "),dP=n(EY,"A",{href:!0});var lzr=s(dP);Vdo=r(lzr,"from_config()"),lzr.forEach(t),Xdo=r(EY,` class
method.`),EY.forEach(t),zdo=i(Is),oA=n(Is,"P",{});var VIe=s(oA);Qdo=r(VIe,"This class cannot be instantiated directly using "),sae=n(VIe,"CODE",{});var izr=s(sae);Wdo=r(izr,"__init__()"),izr.forEach(t),Hdo=r(VIe," (throws an error)."),VIe.forEach(t),Udo=i(Is),Zr=n(Is,"DIV",{class:!0});var SC=s(Zr);T(rA.$$.fragment,SC),Jdo=i(SC),lae=n(SC,"P",{});var dzr=s(lae);Ydo=r(dzr,"Instantiates one of the base model classes of the library from a configuration."),dzr.forEach(t),Kdo=i(SC),bi=n(SC,"P",{});var CY=s(bi);Zdo=r(CY,`Note:
Loading a model from its configuration file does `),iae=n(CY,"STRONG",{});var czr=s(iae);eco=r(czr,"not"),czr.forEach(t),oco=r(CY,` load the model weights. It only affects the
model\u2019s configuration. Use `),cP=n(CY,"A",{href:!0});var fzr=s(cP);rco=r(fzr,"from_pretrained()"),fzr.forEach(t),tco=r(CY," to load the model weights."),CY.forEach(t),aco=i(SC),T(Bh.$$.fragment,SC),SC.forEach(t),nco=i(Is),He=n(Is,"DIV",{class:!0});var Jt=s(He);T(tA.$$.fragment,Jt),sco=i(Jt),dae=n(Jt,"P",{});var mzr=s(dae);lco=r(mzr,"Instantiate one of the base model classes of the library from a pretrained model."),mzr.forEach(t),ico=i(Jt),Ea=n(Jt,"P",{});var RC=s(Ea);dco=r(RC,"The model class to instantiate is selected based on the "),cae=n(RC,"CODE",{});var gzr=s(cae);cco=r(gzr,"model_type"),gzr.forEach(t),fco=r(RC,` property of the config object (either
passed as an argument or loaded from `),fae=n(RC,"CODE",{});var hzr=s(fae);mco=r(hzr,"pretrained_model_name_or_path"),hzr.forEach(t),gco=r(RC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mae=n(RC,"CODE",{});var pzr=s(mae);hco=r(pzr,"pretrained_model_name_or_path"),pzr.forEach(t),pco=r(RC,":"),RC.forEach(t),uco=i(Jt),x=n(Jt,"UL",{});var $=s(x);Ph=n($,"LI",{});var B5e=s(Ph);gae=n(B5e,"STRONG",{});var uzr=s(gae);_co=r(uzr,"albert"),uzr.forEach(t),bco=r(B5e," \u2014 "),fP=n(B5e,"A",{href:!0});var _zr=s(fP);vco=r(_zr,"AlbertModel"),_zr.forEach(t),Fco=r(B5e," (ALBERT model)"),B5e.forEach(t),Tco=i($),Ih=n($,"LI",{});var P5e=s(Ih);hae=n(P5e,"STRONG",{});var bzr=s(hae);Mco=r(bzr,"bart"),bzr.forEach(t),Eco=r(P5e," \u2014 "),mP=n(P5e,"A",{href:!0});var vzr=s(mP);Cco=r(vzr,"BartModel"),vzr.forEach(t),wco=r(P5e," (BART model)"),P5e.forEach(t),Aco=i($),qh=n($,"LI",{});var I5e=s(qh);pae=n(I5e,"STRONG",{});var Fzr=s(pae);yco=r(Fzr,"beit"),Fzr.forEach(t),Lco=r(I5e," \u2014 "),gP=n(I5e,"A",{href:!0});var Tzr=s(gP);xco=r(Tzr,"BeitModel"),Tzr.forEach(t),$co=r(I5e," (BEiT model)"),I5e.forEach(t),kco=i($),Nh=n($,"LI",{});var q5e=s(Nh);uae=n(q5e,"STRONG",{});var Mzr=s(uae);Sco=r(Mzr,"bert"),Mzr.forEach(t),Rco=r(q5e," \u2014 "),hP=n(q5e,"A",{href:!0});var Ezr=s(hP);Bco=r(Ezr,"BertModel"),Ezr.forEach(t),Pco=r(q5e," (BERT model)"),q5e.forEach(t),Ico=i($),jh=n($,"LI",{});var N5e=s(jh);_ae=n(N5e,"STRONG",{});var Czr=s(_ae);qco=r(Czr,"bert-generation"),Czr.forEach(t),Nco=r(N5e," \u2014 "),pP=n(N5e,"A",{href:!0});var wzr=s(pP);jco=r(wzr,"BertGenerationEncoder"),wzr.forEach(t),Dco=r(N5e," (Bert Generation model)"),N5e.forEach(t),Gco=i($),Dh=n($,"LI",{});var j5e=s(Dh);bae=n(j5e,"STRONG",{});var Azr=s(bae);Oco=r(Azr,"big_bird"),Azr.forEach(t),Vco=r(j5e," \u2014 "),uP=n(j5e,"A",{href:!0});var yzr=s(uP);Xco=r(yzr,"BigBirdModel"),yzr.forEach(t),zco=r(j5e," (BigBird model)"),j5e.forEach(t),Qco=i($),Gh=n($,"LI",{});var D5e=s(Gh);vae=n(D5e,"STRONG",{});var Lzr=s(vae);Wco=r(Lzr,"bigbird_pegasus"),Lzr.forEach(t),Hco=r(D5e," \u2014 "),_P=n(D5e,"A",{href:!0});var xzr=s(_P);Uco=r(xzr,"BigBirdPegasusModel"),xzr.forEach(t),Jco=r(D5e," (BigBirdPegasus model)"),D5e.forEach(t),Yco=i($),Oh=n($,"LI",{});var G5e=s(Oh);Fae=n(G5e,"STRONG",{});var $zr=s(Fae);Kco=r($zr,"blenderbot"),$zr.forEach(t),Zco=r(G5e," \u2014 "),bP=n(G5e,"A",{href:!0});var kzr=s(bP);efo=r(kzr,"BlenderbotModel"),kzr.forEach(t),ofo=r(G5e," (Blenderbot model)"),G5e.forEach(t),rfo=i($),Vh=n($,"LI",{});var O5e=s(Vh);Tae=n(O5e,"STRONG",{});var Szr=s(Tae);tfo=r(Szr,"blenderbot-small"),Szr.forEach(t),afo=r(O5e," \u2014 "),vP=n(O5e,"A",{href:!0});var Rzr=s(vP);nfo=r(Rzr,"BlenderbotSmallModel"),Rzr.forEach(t),sfo=r(O5e," (BlenderbotSmall model)"),O5e.forEach(t),lfo=i($),Xh=n($,"LI",{});var V5e=s(Xh);Mae=n(V5e,"STRONG",{});var Bzr=s(Mae);ifo=r(Bzr,"camembert"),Bzr.forEach(t),dfo=r(V5e," \u2014 "),FP=n(V5e,"A",{href:!0});var Pzr=s(FP);cfo=r(Pzr,"CamembertModel"),Pzr.forEach(t),ffo=r(V5e," (CamemBERT model)"),V5e.forEach(t),mfo=i($),zh=n($,"LI",{});var X5e=s(zh);Eae=n(X5e,"STRONG",{});var Izr=s(Eae);gfo=r(Izr,"canine"),Izr.forEach(t),hfo=r(X5e," \u2014 "),TP=n(X5e,"A",{href:!0});var qzr=s(TP);pfo=r(qzr,"CanineModel"),qzr.forEach(t),ufo=r(X5e," (Canine model)"),X5e.forEach(t),_fo=i($),Qh=n($,"LI",{});var z5e=s(Qh);Cae=n(z5e,"STRONG",{});var Nzr=s(Cae);bfo=r(Nzr,"clip"),Nzr.forEach(t),vfo=r(z5e," \u2014 "),MP=n(z5e,"A",{href:!0});var jzr=s(MP);Ffo=r(jzr,"CLIPModel"),jzr.forEach(t),Tfo=r(z5e," (CLIP model)"),z5e.forEach(t),Mfo=i($),Wh=n($,"LI",{});var Q5e=s(Wh);wae=n(Q5e,"STRONG",{});var Dzr=s(wae);Efo=r(Dzr,"convbert"),Dzr.forEach(t),Cfo=r(Q5e," \u2014 "),EP=n(Q5e,"A",{href:!0});var Gzr=s(EP);wfo=r(Gzr,"ConvBertModel"),Gzr.forEach(t),Afo=r(Q5e," (ConvBERT model)"),Q5e.forEach(t),yfo=i($),Hh=n($,"LI",{});var W5e=s(Hh);Aae=n(W5e,"STRONG",{});var Ozr=s(Aae);Lfo=r(Ozr,"convnext"),Ozr.forEach(t),xfo=r(W5e," \u2014 "),CP=n(W5e,"A",{href:!0});var Vzr=s(CP);$fo=r(Vzr,"ConvNextModel"),Vzr.forEach(t),kfo=r(W5e," (ConvNext model)"),W5e.forEach(t),Sfo=i($),Uh=n($,"LI",{});var H5e=s(Uh);yae=n(H5e,"STRONG",{});var Xzr=s(yae);Rfo=r(Xzr,"ctrl"),Xzr.forEach(t),Bfo=r(H5e," \u2014 "),wP=n(H5e,"A",{href:!0});var zzr=s(wP);Pfo=r(zzr,"CTRLModel"),zzr.forEach(t),Ifo=r(H5e," (CTRL model)"),H5e.forEach(t),qfo=i($),Jh=n($,"LI",{});var U5e=s(Jh);Lae=n(U5e,"STRONG",{});var Qzr=s(Lae);Nfo=r(Qzr,"data2vec-audio"),Qzr.forEach(t),jfo=r(U5e," \u2014 "),AP=n(U5e,"A",{href:!0});var Wzr=s(AP);Dfo=r(Wzr,"Data2VecAudioModel"),Wzr.forEach(t),Gfo=r(U5e," (Data2VecAudio model)"),U5e.forEach(t),Ofo=i($),Yh=n($,"LI",{});var J5e=s(Yh);xae=n(J5e,"STRONG",{});var Hzr=s(xae);Vfo=r(Hzr,"data2vec-text"),Hzr.forEach(t),Xfo=r(J5e," \u2014 "),yP=n(J5e,"A",{href:!0});var Uzr=s(yP);zfo=r(Uzr,"Data2VecTextModel"),Uzr.forEach(t),Qfo=r(J5e," (Data2VecText model)"),J5e.forEach(t),Wfo=i($),Kh=n($,"LI",{});var Y5e=s(Kh);$ae=n(Y5e,"STRONG",{});var Jzr=s($ae);Hfo=r(Jzr,"data2vec-vision"),Jzr.forEach(t),Ufo=r(Y5e," \u2014 "),LP=n(Y5e,"A",{href:!0});var Yzr=s(LP);Jfo=r(Yzr,"Data2VecVisionModel"),Yzr.forEach(t),Yfo=r(Y5e," (Data2VecVision model)"),Y5e.forEach(t),Kfo=i($),Zh=n($,"LI",{});var K5e=s(Zh);kae=n(K5e,"STRONG",{});var Kzr=s(kae);Zfo=r(Kzr,"deberta"),Kzr.forEach(t),emo=r(K5e," \u2014 "),xP=n(K5e,"A",{href:!0});var Zzr=s(xP);omo=r(Zzr,"DebertaModel"),Zzr.forEach(t),rmo=r(K5e," (DeBERTa model)"),K5e.forEach(t),tmo=i($),ep=n($,"LI",{});var Z5e=s(ep);Sae=n(Z5e,"STRONG",{});var eQr=s(Sae);amo=r(eQr,"deberta-v2"),eQr.forEach(t),nmo=r(Z5e," \u2014 "),$P=n(Z5e,"A",{href:!0});var oQr=s($P);smo=r(oQr,"DebertaV2Model"),oQr.forEach(t),lmo=r(Z5e," (DeBERTa-v2 model)"),Z5e.forEach(t),imo=i($),op=n($,"LI",{});var eCe=s(op);Rae=n(eCe,"STRONG",{});var rQr=s(Rae);dmo=r(rQr,"decision_transformer"),rQr.forEach(t),cmo=r(eCe," \u2014 "),kP=n(eCe,"A",{href:!0});var tQr=s(kP);fmo=r(tQr,"DecisionTransformerModel"),tQr.forEach(t),mmo=r(eCe," (Decision Transformer model)"),eCe.forEach(t),gmo=i($),rp=n($,"LI",{});var oCe=s(rp);Bae=n(oCe,"STRONG",{});var aQr=s(Bae);hmo=r(aQr,"deit"),aQr.forEach(t),pmo=r(oCe," \u2014 "),SP=n(oCe,"A",{href:!0});var nQr=s(SP);umo=r(nQr,"DeiTModel"),nQr.forEach(t),_mo=r(oCe," (DeiT model)"),oCe.forEach(t),bmo=i($),tp=n($,"LI",{});var rCe=s(tp);Pae=n(rCe,"STRONG",{});var sQr=s(Pae);vmo=r(sQr,"detr"),sQr.forEach(t),Fmo=r(rCe," \u2014 "),RP=n(rCe,"A",{href:!0});var lQr=s(RP);Tmo=r(lQr,"DetrModel"),lQr.forEach(t),Mmo=r(rCe," (DETR model)"),rCe.forEach(t),Emo=i($),ap=n($,"LI",{});var tCe=s(ap);Iae=n(tCe,"STRONG",{});var iQr=s(Iae);Cmo=r(iQr,"distilbert"),iQr.forEach(t),wmo=r(tCe," \u2014 "),BP=n(tCe,"A",{href:!0});var dQr=s(BP);Amo=r(dQr,"DistilBertModel"),dQr.forEach(t),ymo=r(tCe," (DistilBERT model)"),tCe.forEach(t),Lmo=i($),np=n($,"LI",{});var aCe=s(np);qae=n(aCe,"STRONG",{});var cQr=s(qae);xmo=r(cQr,"dpr"),cQr.forEach(t),$mo=r(aCe," \u2014 "),PP=n(aCe,"A",{href:!0});var fQr=s(PP);kmo=r(fQr,"DPRQuestionEncoder"),fQr.forEach(t),Smo=r(aCe," (DPR model)"),aCe.forEach(t),Rmo=i($),sp=n($,"LI",{});var nCe=s(sp);Nae=n(nCe,"STRONG",{});var mQr=s(Nae);Bmo=r(mQr,"dpt"),mQr.forEach(t),Pmo=r(nCe," \u2014 "),IP=n(nCe,"A",{href:!0});var gQr=s(IP);Imo=r(gQr,"DPTModel"),gQr.forEach(t),qmo=r(nCe," (DPT model)"),nCe.forEach(t),Nmo=i($),lp=n($,"LI",{});var sCe=s(lp);jae=n(sCe,"STRONG",{});var hQr=s(jae);jmo=r(hQr,"electra"),hQr.forEach(t),Dmo=r(sCe," \u2014 "),qP=n(sCe,"A",{href:!0});var pQr=s(qP);Gmo=r(pQr,"ElectraModel"),pQr.forEach(t),Omo=r(sCe," (ELECTRA model)"),sCe.forEach(t),Vmo=i($),ip=n($,"LI",{});var lCe=s(ip);Dae=n(lCe,"STRONG",{});var uQr=s(Dae);Xmo=r(uQr,"flaubert"),uQr.forEach(t),zmo=r(lCe," \u2014 "),NP=n(lCe,"A",{href:!0});var _Qr=s(NP);Qmo=r(_Qr,"FlaubertModel"),_Qr.forEach(t),Wmo=r(lCe," (FlauBERT model)"),lCe.forEach(t),Hmo=i($),dp=n($,"LI",{});var iCe=s(dp);Gae=n(iCe,"STRONG",{});var bQr=s(Gae);Umo=r(bQr,"fnet"),bQr.forEach(t),Jmo=r(iCe," \u2014 "),jP=n(iCe,"A",{href:!0});var vQr=s(jP);Ymo=r(vQr,"FNetModel"),vQr.forEach(t),Kmo=r(iCe," (FNet model)"),iCe.forEach(t),Zmo=i($),cp=n($,"LI",{});var dCe=s(cp);Oae=n(dCe,"STRONG",{});var FQr=s(Oae);ego=r(FQr,"fsmt"),FQr.forEach(t),ogo=r(dCe," \u2014 "),DP=n(dCe,"A",{href:!0});var TQr=s(DP);rgo=r(TQr,"FSMTModel"),TQr.forEach(t),tgo=r(dCe," (FairSeq Machine-Translation model)"),dCe.forEach(t),ago=i($),xs=n($,"LI",{});var Ix=s(xs);Vae=n(Ix,"STRONG",{});var MQr=s(Vae);ngo=r(MQr,"funnel"),MQr.forEach(t),sgo=r(Ix," \u2014 "),GP=n(Ix,"A",{href:!0});var EQr=s(GP);lgo=r(EQr,"FunnelModel"),EQr.forEach(t),igo=r(Ix," or "),OP=n(Ix,"A",{href:!0});var CQr=s(OP);dgo=r(CQr,"FunnelBaseModel"),CQr.forEach(t),cgo=r(Ix," (Funnel Transformer model)"),Ix.forEach(t),fgo=i($),fp=n($,"LI",{});var cCe=s(fp);Xae=n(cCe,"STRONG",{});var wQr=s(Xae);mgo=r(wQr,"glpn"),wQr.forEach(t),ggo=r(cCe," \u2014 "),VP=n(cCe,"A",{href:!0});var AQr=s(VP);hgo=r(AQr,"GLPNModel"),AQr.forEach(t),pgo=r(cCe," (GLPN model)"),cCe.forEach(t),ugo=i($),mp=n($,"LI",{});var fCe=s(mp);zae=n(fCe,"STRONG",{});var yQr=s(zae);_go=r(yQr,"gpt2"),yQr.forEach(t),bgo=r(fCe," \u2014 "),XP=n(fCe,"A",{href:!0});var LQr=s(XP);vgo=r(LQr,"GPT2Model"),LQr.forEach(t),Fgo=r(fCe," (OpenAI GPT-2 model)"),fCe.forEach(t),Tgo=i($),gp=n($,"LI",{});var mCe=s(gp);Qae=n(mCe,"STRONG",{});var xQr=s(Qae);Mgo=r(xQr,"gpt_neo"),xQr.forEach(t),Ego=r(mCe," \u2014 "),zP=n(mCe,"A",{href:!0});var $Qr=s(zP);Cgo=r($Qr,"GPTNeoModel"),$Qr.forEach(t),wgo=r(mCe," (GPT Neo model)"),mCe.forEach(t),Ago=i($),hp=n($,"LI",{});var gCe=s(hp);Wae=n(gCe,"STRONG",{});var kQr=s(Wae);ygo=r(kQr,"gptj"),kQr.forEach(t),Lgo=r(gCe," \u2014 "),QP=n(gCe,"A",{href:!0});var SQr=s(QP);xgo=r(SQr,"GPTJModel"),SQr.forEach(t),$go=r(gCe," (GPT-J model)"),gCe.forEach(t),kgo=i($),pp=n($,"LI",{});var hCe=s(pp);Hae=n(hCe,"STRONG",{});var RQr=s(Hae);Sgo=r(RQr,"hubert"),RQr.forEach(t),Rgo=r(hCe," \u2014 "),WP=n(hCe,"A",{href:!0});var BQr=s(WP);Bgo=r(BQr,"HubertModel"),BQr.forEach(t),Pgo=r(hCe," (Hubert model)"),hCe.forEach(t),Igo=i($),up=n($,"LI",{});var pCe=s(up);Uae=n(pCe,"STRONG",{});var PQr=s(Uae);qgo=r(PQr,"ibert"),PQr.forEach(t),Ngo=r(pCe," \u2014 "),HP=n(pCe,"A",{href:!0});var IQr=s(HP);jgo=r(IQr,"IBertModel"),IQr.forEach(t),Dgo=r(pCe," (I-BERT model)"),pCe.forEach(t),Ggo=i($),_p=n($,"LI",{});var uCe=s(_p);Jae=n(uCe,"STRONG",{});var qQr=s(Jae);Ogo=r(qQr,"imagegpt"),qQr.forEach(t),Vgo=r(uCe," \u2014 "),UP=n(uCe,"A",{href:!0});var NQr=s(UP);Xgo=r(NQr,"ImageGPTModel"),NQr.forEach(t),zgo=r(uCe," (ImageGPT model)"),uCe.forEach(t),Qgo=i($),bp=n($,"LI",{});var _Ce=s(bp);Yae=n(_Ce,"STRONG",{});var jQr=s(Yae);Wgo=r(jQr,"layoutlm"),jQr.forEach(t),Hgo=r(_Ce," \u2014 "),JP=n(_Ce,"A",{href:!0});var DQr=s(JP);Ugo=r(DQr,"LayoutLMModel"),DQr.forEach(t),Jgo=r(_Ce," (LayoutLM model)"),_Ce.forEach(t),Ygo=i($),vp=n($,"LI",{});var bCe=s(vp);Kae=n(bCe,"STRONG",{});var GQr=s(Kae);Kgo=r(GQr,"layoutlmv2"),GQr.forEach(t),Zgo=r(bCe," \u2014 "),YP=n(bCe,"A",{href:!0});var OQr=s(YP);eho=r(OQr,"LayoutLMv2Model"),OQr.forEach(t),oho=r(bCe," (LayoutLMv2 model)"),bCe.forEach(t),rho=i($),Fp=n($,"LI",{});var vCe=s(Fp);Zae=n(vCe,"STRONG",{});var VQr=s(Zae);tho=r(VQr,"led"),VQr.forEach(t),aho=r(vCe," \u2014 "),KP=n(vCe,"A",{href:!0});var XQr=s(KP);nho=r(XQr,"LEDModel"),XQr.forEach(t),sho=r(vCe," (LED model)"),vCe.forEach(t),lho=i($),Tp=n($,"LI",{});var FCe=s(Tp);ene=n(FCe,"STRONG",{});var zQr=s(ene);iho=r(zQr,"longformer"),zQr.forEach(t),dho=r(FCe," \u2014 "),ZP=n(FCe,"A",{href:!0});var QQr=s(ZP);cho=r(QQr,"LongformerModel"),QQr.forEach(t),fho=r(FCe," (Longformer model)"),FCe.forEach(t),mho=i($),Mp=n($,"LI",{});var TCe=s(Mp);one=n(TCe,"STRONG",{});var WQr=s(one);gho=r(WQr,"luke"),WQr.forEach(t),hho=r(TCe," \u2014 "),eI=n(TCe,"A",{href:!0});var HQr=s(eI);pho=r(HQr,"LukeModel"),HQr.forEach(t),uho=r(TCe," (LUKE model)"),TCe.forEach(t),_ho=i($),Ep=n($,"LI",{});var MCe=s(Ep);rne=n(MCe,"STRONG",{});var UQr=s(rne);bho=r(UQr,"lxmert"),UQr.forEach(t),vho=r(MCe," \u2014 "),oI=n(MCe,"A",{href:!0});var JQr=s(oI);Fho=r(JQr,"LxmertModel"),JQr.forEach(t),Tho=r(MCe," (LXMERT model)"),MCe.forEach(t),Mho=i($),Cp=n($,"LI",{});var ECe=s(Cp);tne=n(ECe,"STRONG",{});var YQr=s(tne);Eho=r(YQr,"m2m_100"),YQr.forEach(t),Cho=r(ECe," \u2014 "),rI=n(ECe,"A",{href:!0});var KQr=s(rI);who=r(KQr,"M2M100Model"),KQr.forEach(t),Aho=r(ECe," (M2M100 model)"),ECe.forEach(t),yho=i($),wp=n($,"LI",{});var CCe=s(wp);ane=n(CCe,"STRONG",{});var ZQr=s(ane);Lho=r(ZQr,"marian"),ZQr.forEach(t),xho=r(CCe," \u2014 "),tI=n(CCe,"A",{href:!0});var eWr=s(tI);$ho=r(eWr,"MarianModel"),eWr.forEach(t),kho=r(CCe," (Marian model)"),CCe.forEach(t),Sho=i($),Ap=n($,"LI",{});var wCe=s(Ap);nne=n(wCe,"STRONG",{});var oWr=s(nne);Rho=r(oWr,"maskformer"),oWr.forEach(t),Bho=r(wCe," \u2014 "),aI=n(wCe,"A",{href:!0});var rWr=s(aI);Pho=r(rWr,"MaskFormerModel"),rWr.forEach(t),Iho=r(wCe," (MaskFormer model)"),wCe.forEach(t),qho=i($),yp=n($,"LI",{});var ACe=s(yp);sne=n(ACe,"STRONG",{});var tWr=s(sne);Nho=r(tWr,"mbart"),tWr.forEach(t),jho=r(ACe," \u2014 "),nI=n(ACe,"A",{href:!0});var aWr=s(nI);Dho=r(aWr,"MBartModel"),aWr.forEach(t),Gho=r(ACe," (mBART model)"),ACe.forEach(t),Oho=i($),Lp=n($,"LI",{});var yCe=s(Lp);lne=n(yCe,"STRONG",{});var nWr=s(lne);Vho=r(nWr,"megatron-bert"),nWr.forEach(t),Xho=r(yCe," \u2014 "),sI=n(yCe,"A",{href:!0});var sWr=s(sI);zho=r(sWr,"MegatronBertModel"),sWr.forEach(t),Qho=r(yCe," (MegatronBert model)"),yCe.forEach(t),Who=i($),xp=n($,"LI",{});var LCe=s(xp);ine=n(LCe,"STRONG",{});var lWr=s(ine);Hho=r(lWr,"mobilebert"),lWr.forEach(t),Uho=r(LCe," \u2014 "),lI=n(LCe,"A",{href:!0});var iWr=s(lI);Jho=r(iWr,"MobileBertModel"),iWr.forEach(t),Yho=r(LCe," (MobileBERT model)"),LCe.forEach(t),Kho=i($),$p=n($,"LI",{});var xCe=s($p);dne=n(xCe,"STRONG",{});var dWr=s(dne);Zho=r(dWr,"mpnet"),dWr.forEach(t),epo=r(xCe," \u2014 "),iI=n(xCe,"A",{href:!0});var cWr=s(iI);opo=r(cWr,"MPNetModel"),cWr.forEach(t),rpo=r(xCe," (MPNet model)"),xCe.forEach(t),tpo=i($),kp=n($,"LI",{});var $Ce=s(kp);cne=n($Ce,"STRONG",{});var fWr=s(cne);apo=r(fWr,"mt5"),fWr.forEach(t),npo=r($Ce," \u2014 "),dI=n($Ce,"A",{href:!0});var mWr=s(dI);spo=r(mWr,"MT5Model"),mWr.forEach(t),lpo=r($Ce," (mT5 model)"),$Ce.forEach(t),ipo=i($),Sp=n($,"LI",{});var kCe=s(Sp);fne=n(kCe,"STRONG",{});var gWr=s(fne);dpo=r(gWr,"nystromformer"),gWr.forEach(t),cpo=r(kCe," \u2014 "),cI=n(kCe,"A",{href:!0});var hWr=s(cI);fpo=r(hWr,"NystromformerModel"),hWr.forEach(t),mpo=r(kCe," (Nystromformer model)"),kCe.forEach(t),gpo=i($),Rp=n($,"LI",{});var SCe=s(Rp);mne=n(SCe,"STRONG",{});var pWr=s(mne);hpo=r(pWr,"ofa"),pWr.forEach(t),ppo=r(SCe," \u2014 "),fI=n(SCe,"A",{href:!0});var uWr=s(fI);upo=r(uWr,"OFAModel"),uWr.forEach(t),_po=r(SCe," (OFA model)"),SCe.forEach(t),bpo=i($),Bp=n($,"LI",{});var RCe=s(Bp);gne=n(RCe,"STRONG",{});var _Wr=s(gne);vpo=r(_Wr,"openai-gpt"),_Wr.forEach(t),Fpo=r(RCe," \u2014 "),mI=n(RCe,"A",{href:!0});var bWr=s(mI);Tpo=r(bWr,"OpenAIGPTModel"),bWr.forEach(t),Mpo=r(RCe," (OpenAI GPT model)"),RCe.forEach(t),Epo=i($),Pp=n($,"LI",{});var BCe=s(Pp);hne=n(BCe,"STRONG",{});var vWr=s(hne);Cpo=r(vWr,"pegasus"),vWr.forEach(t),wpo=r(BCe," \u2014 "),gI=n(BCe,"A",{href:!0});var FWr=s(gI);Apo=r(FWr,"PegasusModel"),FWr.forEach(t),ypo=r(BCe," (Pegasus model)"),BCe.forEach(t),Lpo=i($),Ip=n($,"LI",{});var PCe=s(Ip);pne=n(PCe,"STRONG",{});var TWr=s(pne);xpo=r(TWr,"perceiver"),TWr.forEach(t),$po=r(PCe," \u2014 "),hI=n(PCe,"A",{href:!0});var MWr=s(hI);kpo=r(MWr,"PerceiverModel"),MWr.forEach(t),Spo=r(PCe," (Perceiver model)"),PCe.forEach(t),Rpo=i($),qp=n($,"LI",{});var ICe=s(qp);une=n(ICe,"STRONG",{});var EWr=s(une);Bpo=r(EWr,"plbart"),EWr.forEach(t),Ppo=r(ICe," \u2014 "),pI=n(ICe,"A",{href:!0});var CWr=s(pI);Ipo=r(CWr,"PLBartModel"),CWr.forEach(t),qpo=r(ICe," (PLBart model)"),ICe.forEach(t),Npo=i($),Np=n($,"LI",{});var qCe=s(Np);_ne=n(qCe,"STRONG",{});var wWr=s(_ne);jpo=r(wWr,"poolformer"),wWr.forEach(t),Dpo=r(qCe," \u2014 "),uI=n(qCe,"A",{href:!0});var AWr=s(uI);Gpo=r(AWr,"PoolFormerModel"),AWr.forEach(t),Opo=r(qCe," (PoolFormer model)"),qCe.forEach(t),Vpo=i($),jp=n($,"LI",{});var NCe=s(jp);bne=n(NCe,"STRONG",{});var yWr=s(bne);Xpo=r(yWr,"prophetnet"),yWr.forEach(t),zpo=r(NCe," \u2014 "),_I=n(NCe,"A",{href:!0});var LWr=s(_I);Qpo=r(LWr,"ProphetNetModel"),LWr.forEach(t),Wpo=r(NCe," (ProphetNet model)"),NCe.forEach(t),Hpo=i($),Dp=n($,"LI",{});var jCe=s(Dp);vne=n(jCe,"STRONG",{});var xWr=s(vne);Upo=r(xWr,"qdqbert"),xWr.forEach(t),Jpo=r(jCe," \u2014 "),bI=n(jCe,"A",{href:!0});var $Wr=s(bI);Ypo=r($Wr,"QDQBertModel"),$Wr.forEach(t),Kpo=r(jCe," (QDQBert model)"),jCe.forEach(t),Zpo=i($),Gp=n($,"LI",{});var DCe=s(Gp);Fne=n(DCe,"STRONG",{});var kWr=s(Fne);euo=r(kWr,"reformer"),kWr.forEach(t),ouo=r(DCe," \u2014 "),vI=n(DCe,"A",{href:!0});var SWr=s(vI);ruo=r(SWr,"ReformerModel"),SWr.forEach(t),tuo=r(DCe," (Reformer model)"),DCe.forEach(t),auo=i($),Op=n($,"LI",{});var GCe=s(Op);Tne=n(GCe,"STRONG",{});var RWr=s(Tne);nuo=r(RWr,"regnet"),RWr.forEach(t),suo=r(GCe," \u2014 "),FI=n(GCe,"A",{href:!0});var BWr=s(FI);luo=r(BWr,"RegNetModel"),BWr.forEach(t),iuo=r(GCe," (RegNet model)"),GCe.forEach(t),duo=i($),Vp=n($,"LI",{});var OCe=s(Vp);Mne=n(OCe,"STRONG",{});var PWr=s(Mne);cuo=r(PWr,"rembert"),PWr.forEach(t),fuo=r(OCe," \u2014 "),TI=n(OCe,"A",{href:!0});var IWr=s(TI);muo=r(IWr,"RemBertModel"),IWr.forEach(t),guo=r(OCe," (RemBERT model)"),OCe.forEach(t),huo=i($),Xp=n($,"LI",{});var VCe=s(Xp);Ene=n(VCe,"STRONG",{});var qWr=s(Ene);puo=r(qWr,"resnet"),qWr.forEach(t),uuo=r(VCe," \u2014 "),MI=n(VCe,"A",{href:!0});var NWr=s(MI);_uo=r(NWr,"ResNetModel"),NWr.forEach(t),buo=r(VCe," (ResNet model)"),VCe.forEach(t),vuo=i($),zp=n($,"LI",{});var XCe=s(zp);Cne=n(XCe,"STRONG",{});var jWr=s(Cne);Fuo=r(jWr,"retribert"),jWr.forEach(t),Tuo=r(XCe," \u2014 "),EI=n(XCe,"A",{href:!0});var DWr=s(EI);Muo=r(DWr,"RetriBertModel"),DWr.forEach(t),Euo=r(XCe," (RetriBERT model)"),XCe.forEach(t),Cuo=i($),Qp=n($,"LI",{});var zCe=s(Qp);wne=n(zCe,"STRONG",{});var GWr=s(wne);wuo=r(GWr,"roberta"),GWr.forEach(t),Auo=r(zCe," \u2014 "),CI=n(zCe,"A",{href:!0});var OWr=s(CI);yuo=r(OWr,"RobertaModel"),OWr.forEach(t),Luo=r(zCe," (RoBERTa model)"),zCe.forEach(t),xuo=i($),Wp=n($,"LI",{});var QCe=s(Wp);Ane=n(QCe,"STRONG",{});var VWr=s(Ane);$uo=r(VWr,"roformer"),VWr.forEach(t),kuo=r(QCe," \u2014 "),wI=n(QCe,"A",{href:!0});var XWr=s(wI);Suo=r(XWr,"RoFormerModel"),XWr.forEach(t),Ruo=r(QCe," (RoFormer model)"),QCe.forEach(t),Buo=i($),Hp=n($,"LI",{});var WCe=s(Hp);yne=n(WCe,"STRONG",{});var zWr=s(yne);Puo=r(zWr,"segformer"),zWr.forEach(t),Iuo=r(WCe," \u2014 "),AI=n(WCe,"A",{href:!0});var QWr=s(AI);quo=r(QWr,"SegformerModel"),QWr.forEach(t),Nuo=r(WCe," (SegFormer model)"),WCe.forEach(t),juo=i($),Up=n($,"LI",{});var HCe=s(Up);Lne=n(HCe,"STRONG",{});var WWr=s(Lne);Duo=r(WWr,"sew"),WWr.forEach(t),Guo=r(HCe," \u2014 "),yI=n(HCe,"A",{href:!0});var HWr=s(yI);Ouo=r(HWr,"SEWModel"),HWr.forEach(t),Vuo=r(HCe," (SEW model)"),HCe.forEach(t),Xuo=i($),Jp=n($,"LI",{});var UCe=s(Jp);xne=n(UCe,"STRONG",{});var UWr=s(xne);zuo=r(UWr,"sew-d"),UWr.forEach(t),Quo=r(UCe," \u2014 "),LI=n(UCe,"A",{href:!0});var JWr=s(LI);Wuo=r(JWr,"SEWDModel"),JWr.forEach(t),Huo=r(UCe," (SEW-D model)"),UCe.forEach(t),Uuo=i($),Yp=n($,"LI",{});var JCe=s(Yp);$ne=n(JCe,"STRONG",{});var YWr=s($ne);Juo=r(YWr,"speech_to_text"),YWr.forEach(t),Yuo=r(JCe," \u2014 "),xI=n(JCe,"A",{href:!0});var KWr=s(xI);Kuo=r(KWr,"Speech2TextModel"),KWr.forEach(t),Zuo=r(JCe," (Speech2Text model)"),JCe.forEach(t),e_o=i($),Kp=n($,"LI",{});var YCe=s(Kp);kne=n(YCe,"STRONG",{});var ZWr=s(kne);o_o=r(ZWr,"splinter"),ZWr.forEach(t),r_o=r(YCe," \u2014 "),$I=n(YCe,"A",{href:!0});var eHr=s($I);t_o=r(eHr,"SplinterModel"),eHr.forEach(t),a_o=r(YCe," (Splinter model)"),YCe.forEach(t),n_o=i($),Zp=n($,"LI",{});var KCe=s(Zp);Sne=n(KCe,"STRONG",{});var oHr=s(Sne);s_o=r(oHr,"squeezebert"),oHr.forEach(t),l_o=r(KCe," \u2014 "),kI=n(KCe,"A",{href:!0});var rHr=s(kI);i_o=r(rHr,"SqueezeBertModel"),rHr.forEach(t),d_o=r(KCe," (SqueezeBERT model)"),KCe.forEach(t),c_o=i($),eu=n($,"LI",{});var ZCe=s(eu);Rne=n(ZCe,"STRONG",{});var tHr=s(Rne);f_o=r(tHr,"swin"),tHr.forEach(t),m_o=r(ZCe," \u2014 "),SI=n(ZCe,"A",{href:!0});var aHr=s(SI);g_o=r(aHr,"SwinModel"),aHr.forEach(t),h_o=r(ZCe," (Swin model)"),ZCe.forEach(t),p_o=i($),ou=n($,"LI",{});var e3e=s(ou);Bne=n(e3e,"STRONG",{});var nHr=s(Bne);u_o=r(nHr,"t5"),nHr.forEach(t),__o=r(e3e," \u2014 "),RI=n(e3e,"A",{href:!0});var sHr=s(RI);b_o=r(sHr,"T5Model"),sHr.forEach(t),v_o=r(e3e," (T5 model)"),e3e.forEach(t),F_o=i($),ru=n($,"LI",{});var o3e=s(ru);Pne=n(o3e,"STRONG",{});var lHr=s(Pne);T_o=r(lHr,"tapas"),lHr.forEach(t),M_o=r(o3e," \u2014 "),BI=n(o3e,"A",{href:!0});var iHr=s(BI);E_o=r(iHr,"TapasModel"),iHr.forEach(t),C_o=r(o3e," (TAPAS model)"),o3e.forEach(t),w_o=i($),tu=n($,"LI",{});var r3e=s(tu);Ine=n(r3e,"STRONG",{});var dHr=s(Ine);A_o=r(dHr,"transfo-xl"),dHr.forEach(t),y_o=r(r3e," \u2014 "),PI=n(r3e,"A",{href:!0});var cHr=s(PI);L_o=r(cHr,"TransfoXLModel"),cHr.forEach(t),x_o=r(r3e," (Transformer-XL model)"),r3e.forEach(t),$_o=i($),au=n($,"LI",{});var t3e=s(au);qne=n(t3e,"STRONG",{});var fHr=s(qne);k_o=r(fHr,"unispeech"),fHr.forEach(t),S_o=r(t3e," \u2014 "),II=n(t3e,"A",{href:!0});var mHr=s(II);R_o=r(mHr,"UniSpeechModel"),mHr.forEach(t),B_o=r(t3e," (UniSpeech model)"),t3e.forEach(t),P_o=i($),nu=n($,"LI",{});var a3e=s(nu);Nne=n(a3e,"STRONG",{});var gHr=s(Nne);I_o=r(gHr,"unispeech-sat"),gHr.forEach(t),q_o=r(a3e," \u2014 "),qI=n(a3e,"A",{href:!0});var hHr=s(qI);N_o=r(hHr,"UniSpeechSatModel"),hHr.forEach(t),j_o=r(a3e," (UniSpeechSat model)"),a3e.forEach(t),D_o=i($),su=n($,"LI",{});var n3e=s(su);jne=n(n3e,"STRONG",{});var pHr=s(jne);G_o=r(pHr,"van"),pHr.forEach(t),O_o=r(n3e," \u2014 "),NI=n(n3e,"A",{href:!0});var uHr=s(NI);V_o=r(uHr,"VanModel"),uHr.forEach(t),X_o=r(n3e," (VAN model)"),n3e.forEach(t),z_o=i($),lu=n($,"LI",{});var s3e=s(lu);Dne=n(s3e,"STRONG",{});var _Hr=s(Dne);Q_o=r(_Hr,"vilt"),_Hr.forEach(t),W_o=r(s3e," \u2014 "),jI=n(s3e,"A",{href:!0});var bHr=s(jI);H_o=r(bHr,"ViltModel"),bHr.forEach(t),U_o=r(s3e," (ViLT model)"),s3e.forEach(t),J_o=i($),iu=n($,"LI",{});var l3e=s(iu);Gne=n(l3e,"STRONG",{});var vHr=s(Gne);Y_o=r(vHr,"vision-text-dual-encoder"),vHr.forEach(t),K_o=r(l3e," \u2014 "),DI=n(l3e,"A",{href:!0});var FHr=s(DI);Z_o=r(FHr,"VisionTextDualEncoderModel"),FHr.forEach(t),e1o=r(l3e," (VisionTextDualEncoder model)"),l3e.forEach(t),o1o=i($),du=n($,"LI",{});var i3e=s(du);One=n(i3e,"STRONG",{});var THr=s(One);r1o=r(THr,"visual_bert"),THr.forEach(t),t1o=r(i3e," \u2014 "),GI=n(i3e,"A",{href:!0});var MHr=s(GI);a1o=r(MHr,"VisualBertModel"),MHr.forEach(t),n1o=r(i3e," (VisualBert model)"),i3e.forEach(t),s1o=i($),cu=n($,"LI",{});var d3e=s(cu);Vne=n(d3e,"STRONG",{});var EHr=s(Vne);l1o=r(EHr,"vit"),EHr.forEach(t),i1o=r(d3e," \u2014 "),OI=n(d3e,"A",{href:!0});var CHr=s(OI);d1o=r(CHr,"ViTModel"),CHr.forEach(t),c1o=r(d3e," (ViT model)"),d3e.forEach(t),f1o=i($),fu=n($,"LI",{});var c3e=s(fu);Xne=n(c3e,"STRONG",{});var wHr=s(Xne);m1o=r(wHr,"vit_mae"),wHr.forEach(t),g1o=r(c3e," \u2014 "),VI=n(c3e,"A",{href:!0});var AHr=s(VI);h1o=r(AHr,"ViTMAEModel"),AHr.forEach(t),p1o=r(c3e," (ViTMAE model)"),c3e.forEach(t),u1o=i($),mu=n($,"LI",{});var f3e=s(mu);zne=n(f3e,"STRONG",{});var yHr=s(zne);_1o=r(yHr,"wav2vec2"),yHr.forEach(t),b1o=r(f3e," \u2014 "),XI=n(f3e,"A",{href:!0});var LHr=s(XI);v1o=r(LHr,"Wav2Vec2Model"),LHr.forEach(t),F1o=r(f3e," (Wav2Vec2 model)"),f3e.forEach(t),T1o=i($),gu=n($,"LI",{});var m3e=s(gu);Qne=n(m3e,"STRONG",{});var xHr=s(Qne);M1o=r(xHr,"wavlm"),xHr.forEach(t),E1o=r(m3e," \u2014 "),zI=n(m3e,"A",{href:!0});var $Hr=s(zI);C1o=r($Hr,"WavLMModel"),$Hr.forEach(t),w1o=r(m3e," (WavLM model)"),m3e.forEach(t),A1o=i($),hu=n($,"LI",{});var g3e=s(hu);Wne=n(g3e,"STRONG",{});var kHr=s(Wne);y1o=r(kHr,"xglm"),kHr.forEach(t),L1o=r(g3e," \u2014 "),QI=n(g3e,"A",{href:!0});var SHr=s(QI);x1o=r(SHr,"XGLMModel"),SHr.forEach(t),$1o=r(g3e," (XGLM model)"),g3e.forEach(t),k1o=i($),pu=n($,"LI",{});var h3e=s(pu);Hne=n(h3e,"STRONG",{});var RHr=s(Hne);S1o=r(RHr,"xlm"),RHr.forEach(t),R1o=r(h3e," \u2014 "),WI=n(h3e,"A",{href:!0});var BHr=s(WI);B1o=r(BHr,"XLMModel"),BHr.forEach(t),P1o=r(h3e," (XLM model)"),h3e.forEach(t),I1o=i($),uu=n($,"LI",{});var p3e=s(uu);Une=n(p3e,"STRONG",{});var PHr=s(Une);q1o=r(PHr,"xlm-prophetnet"),PHr.forEach(t),N1o=r(p3e," \u2014 "),HI=n(p3e,"A",{href:!0});var IHr=s(HI);j1o=r(IHr,"XLMProphetNetModel"),IHr.forEach(t),D1o=r(p3e," (XLMProphetNet model)"),p3e.forEach(t),G1o=i($),_u=n($,"LI",{});var u3e=s(_u);Jne=n(u3e,"STRONG",{});var qHr=s(Jne);O1o=r(qHr,"xlm-roberta"),qHr.forEach(t),V1o=r(u3e," \u2014 "),UI=n(u3e,"A",{href:!0});var NHr=s(UI);X1o=r(NHr,"XLMRobertaModel"),NHr.forEach(t),z1o=r(u3e," (XLM-RoBERTa model)"),u3e.forEach(t),Q1o=i($),bu=n($,"LI",{});var _3e=s(bu);Yne=n(_3e,"STRONG",{});var jHr=s(Yne);W1o=r(jHr,"xlm-roberta-xl"),jHr.forEach(t),H1o=r(_3e," \u2014 "),JI=n(_3e,"A",{href:!0});var DHr=s(JI);U1o=r(DHr,"XLMRobertaXLModel"),DHr.forEach(t),J1o=r(_3e," (XLM-RoBERTa-XL model)"),_3e.forEach(t),Y1o=i($),vu=n($,"LI",{});var b3e=s(vu);Kne=n(b3e,"STRONG",{});var GHr=s(Kne);K1o=r(GHr,"xlnet"),GHr.forEach(t),Z1o=r(b3e," \u2014 "),YI=n(b3e,"A",{href:!0});var OHr=s(YI);ebo=r(OHr,"XLNetModel"),OHr.forEach(t),obo=r(b3e," (XLNet model)"),b3e.forEach(t),rbo=i($),Fu=n($,"LI",{});var v3e=s(Fu);Zne=n(v3e,"STRONG",{});var VHr=s(Zne);tbo=r(VHr,"yolos"),VHr.forEach(t),abo=r(v3e," \u2014 "),KI=n(v3e,"A",{href:!0});var XHr=s(KI);nbo=r(XHr,"YolosModel"),XHr.forEach(t),sbo=r(v3e," (YOLOS model)"),v3e.forEach(t),lbo=i($),Tu=n($,"LI",{});var F3e=s(Tu);ese=n(F3e,"STRONG",{});var zHr=s(ese);ibo=r(zHr,"yoso"),zHr.forEach(t),dbo=r(F3e," \u2014 "),ZI=n(F3e,"A",{href:!0});var QHr=s(ZI);cbo=r(QHr,"YosoModel"),QHr.forEach(t),fbo=r(F3e," (YOSO model)"),F3e.forEach(t),$.forEach(t),mbo=i(Jt),Mu=n(Jt,"P",{});var T3e=s(Mu);gbo=r(T3e,"The model is set in evaluation mode by default using "),ose=n(T3e,"CODE",{});var WHr=s(ose);hbo=r(WHr,"model.eval()"),WHr.forEach(t),pbo=r(T3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rse=n(T3e,"CODE",{});var HHr=s(rse);ubo=r(HHr,"model.train()"),HHr.forEach(t),T3e.forEach(t),_bo=i(Jt),T(Eu.$$.fragment,Jt),Jt.forEach(t),Is.forEach(t),OBe=i(f),vi=n(f,"H2",{class:!0});var XIe=s(vi);Cu=n(XIe,"A",{id:!0,class:!0,href:!0});var UHr=s(Cu);tse=n(UHr,"SPAN",{});var JHr=s(tse);T(aA.$$.fragment,JHr),JHr.forEach(t),UHr.forEach(t),bbo=i(XIe),ase=n(XIe,"SPAN",{});var YHr=s(ase);vbo=r(YHr,"AutoModelForPreTraining"),YHr.forEach(t),XIe.forEach(t),VBe=i(f),xo=n(f,"DIV",{class:!0});var qs=s(xo);T(nA.$$.fragment,qs),Fbo=i(qs),Fi=n(qs,"P",{});var wY=s(Fi);Tbo=r(wY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eq=n(wY,"A",{href:!0});var KHr=s(eq);Mbo=r(KHr,"from_pretrained()"),KHr.forEach(t),Ebo=r(wY," class method or the "),oq=n(wY,"A",{href:!0});var ZHr=s(oq);Cbo=r(ZHr,"from_config()"),ZHr.forEach(t),wbo=r(wY,` class
method.`),wY.forEach(t),Abo=i(qs),sA=n(qs,"P",{});var zIe=s(sA);ybo=r(zIe,"This class cannot be instantiated directly using "),nse=n(zIe,"CODE",{});var eUr=s(nse);Lbo=r(eUr,"__init__()"),eUr.forEach(t),xbo=r(zIe," (throws an error)."),zIe.forEach(t),$bo=i(qs),et=n(qs,"DIV",{class:!0});var BC=s(et);T(lA.$$.fragment,BC),kbo=i(BC),sse=n(BC,"P",{});var oUr=s(sse);Sbo=r(oUr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oUr.forEach(t),Rbo=i(BC),Ti=n(BC,"P",{});var AY=s(Ti);Bbo=r(AY,`Note:
Loading a model from its configuration file does `),lse=n(AY,"STRONG",{});var rUr=s(lse);Pbo=r(rUr,"not"),rUr.forEach(t),Ibo=r(AY,` load the model weights. It only affects the
model\u2019s configuration. Use `),rq=n(AY,"A",{href:!0});var tUr=s(rq);qbo=r(tUr,"from_pretrained()"),tUr.forEach(t),Nbo=r(AY," to load the model weights."),AY.forEach(t),jbo=i(BC),T(wu.$$.fragment,BC),BC.forEach(t),Dbo=i(qs),Ue=n(qs,"DIV",{class:!0});var Yt=s(Ue);T(iA.$$.fragment,Yt),Gbo=i(Yt),ise=n(Yt,"P",{});var aUr=s(ise);Obo=r(aUr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),aUr.forEach(t),Vbo=i(Yt),Ca=n(Yt,"P",{});var PC=s(Ca);Xbo=r(PC,"The model class to instantiate is selected based on the "),dse=n(PC,"CODE",{});var nUr=s(dse);zbo=r(nUr,"model_type"),nUr.forEach(t),Qbo=r(PC,` property of the config object (either
passed as an argument or loaded from `),cse=n(PC,"CODE",{});var sUr=s(cse);Wbo=r(sUr,"pretrained_model_name_or_path"),sUr.forEach(t),Hbo=r(PC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fse=n(PC,"CODE",{});var lUr=s(fse);Ubo=r(lUr,"pretrained_model_name_or_path"),lUr.forEach(t),Jbo=r(PC,":"),PC.forEach(t),Ybo=i(Yt),G=n(Yt,"UL",{});var V=s(G);Au=n(V,"LI",{});var M3e=s(Au);mse=n(M3e,"STRONG",{});var iUr=s(mse);Kbo=r(iUr,"albert"),iUr.forEach(t),Zbo=r(M3e," \u2014 "),tq=n(M3e,"A",{href:!0});var dUr=s(tq);e2o=r(dUr,"AlbertForPreTraining"),dUr.forEach(t),o2o=r(M3e," (ALBERT model)"),M3e.forEach(t),r2o=i(V),yu=n(V,"LI",{});var E3e=s(yu);gse=n(E3e,"STRONG",{});var cUr=s(gse);t2o=r(cUr,"bart"),cUr.forEach(t),a2o=r(E3e," \u2014 "),aq=n(E3e,"A",{href:!0});var fUr=s(aq);n2o=r(fUr,"BartForConditionalGeneration"),fUr.forEach(t),s2o=r(E3e," (BART model)"),E3e.forEach(t),l2o=i(V),Lu=n(V,"LI",{});var C3e=s(Lu);hse=n(C3e,"STRONG",{});var mUr=s(hse);i2o=r(mUr,"bert"),mUr.forEach(t),d2o=r(C3e," \u2014 "),nq=n(C3e,"A",{href:!0});var gUr=s(nq);c2o=r(gUr,"BertForPreTraining"),gUr.forEach(t),f2o=r(C3e," (BERT model)"),C3e.forEach(t),m2o=i(V),xu=n(V,"LI",{});var w3e=s(xu);pse=n(w3e,"STRONG",{});var hUr=s(pse);g2o=r(hUr,"big_bird"),hUr.forEach(t),h2o=r(w3e," \u2014 "),sq=n(w3e,"A",{href:!0});var pUr=s(sq);p2o=r(pUr,"BigBirdForPreTraining"),pUr.forEach(t),u2o=r(w3e," (BigBird model)"),w3e.forEach(t),_2o=i(V),$u=n(V,"LI",{});var A3e=s($u);use=n(A3e,"STRONG",{});var uUr=s(use);b2o=r(uUr,"camembert"),uUr.forEach(t),v2o=r(A3e," \u2014 "),lq=n(A3e,"A",{href:!0});var _Ur=s(lq);F2o=r(_Ur,"CamembertForMaskedLM"),_Ur.forEach(t),T2o=r(A3e," (CamemBERT model)"),A3e.forEach(t),M2o=i(V),ku=n(V,"LI",{});var y3e=s(ku);_se=n(y3e,"STRONG",{});var bUr=s(_se);E2o=r(bUr,"ctrl"),bUr.forEach(t),C2o=r(y3e," \u2014 "),iq=n(y3e,"A",{href:!0});var vUr=s(iq);w2o=r(vUr,"CTRLLMHeadModel"),vUr.forEach(t),A2o=r(y3e," (CTRL model)"),y3e.forEach(t),y2o=i(V),Su=n(V,"LI",{});var L3e=s(Su);bse=n(L3e,"STRONG",{});var FUr=s(bse);L2o=r(FUr,"data2vec-text"),FUr.forEach(t),x2o=r(L3e," \u2014 "),dq=n(L3e,"A",{href:!0});var TUr=s(dq);$2o=r(TUr,"Data2VecTextForMaskedLM"),TUr.forEach(t),k2o=r(L3e," (Data2VecText model)"),L3e.forEach(t),S2o=i(V),Ru=n(V,"LI",{});var x3e=s(Ru);vse=n(x3e,"STRONG",{});var MUr=s(vse);R2o=r(MUr,"deberta"),MUr.forEach(t),B2o=r(x3e," \u2014 "),cq=n(x3e,"A",{href:!0});var EUr=s(cq);P2o=r(EUr,"DebertaForMaskedLM"),EUr.forEach(t),I2o=r(x3e," (DeBERTa model)"),x3e.forEach(t),q2o=i(V),Bu=n(V,"LI",{});var $3e=s(Bu);Fse=n($3e,"STRONG",{});var CUr=s(Fse);N2o=r(CUr,"deberta-v2"),CUr.forEach(t),j2o=r($3e," \u2014 "),fq=n($3e,"A",{href:!0});var wUr=s(fq);D2o=r(wUr,"DebertaV2ForMaskedLM"),wUr.forEach(t),G2o=r($3e," (DeBERTa-v2 model)"),$3e.forEach(t),O2o=i(V),Pu=n(V,"LI",{});var k3e=s(Pu);Tse=n(k3e,"STRONG",{});var AUr=s(Tse);V2o=r(AUr,"distilbert"),AUr.forEach(t),X2o=r(k3e," \u2014 "),mq=n(k3e,"A",{href:!0});var yUr=s(mq);z2o=r(yUr,"DistilBertForMaskedLM"),yUr.forEach(t),Q2o=r(k3e," (DistilBERT model)"),k3e.forEach(t),W2o=i(V),Iu=n(V,"LI",{});var S3e=s(Iu);Mse=n(S3e,"STRONG",{});var LUr=s(Mse);H2o=r(LUr,"electra"),LUr.forEach(t),U2o=r(S3e," \u2014 "),gq=n(S3e,"A",{href:!0});var xUr=s(gq);J2o=r(xUr,"ElectraForPreTraining"),xUr.forEach(t),Y2o=r(S3e," (ELECTRA model)"),S3e.forEach(t),K2o=i(V),qu=n(V,"LI",{});var R3e=s(qu);Ese=n(R3e,"STRONG",{});var $Ur=s(Ese);Z2o=r($Ur,"flaubert"),$Ur.forEach(t),evo=r(R3e," \u2014 "),hq=n(R3e,"A",{href:!0});var kUr=s(hq);ovo=r(kUr,"FlaubertWithLMHeadModel"),kUr.forEach(t),rvo=r(R3e," (FlauBERT model)"),R3e.forEach(t),tvo=i(V),Nu=n(V,"LI",{});var B3e=s(Nu);Cse=n(B3e,"STRONG",{});var SUr=s(Cse);avo=r(SUr,"fnet"),SUr.forEach(t),nvo=r(B3e," \u2014 "),pq=n(B3e,"A",{href:!0});var RUr=s(pq);svo=r(RUr,"FNetForPreTraining"),RUr.forEach(t),lvo=r(B3e," (FNet model)"),B3e.forEach(t),ivo=i(V),ju=n(V,"LI",{});var P3e=s(ju);wse=n(P3e,"STRONG",{});var BUr=s(wse);dvo=r(BUr,"fsmt"),BUr.forEach(t),cvo=r(P3e," \u2014 "),uq=n(P3e,"A",{href:!0});var PUr=s(uq);fvo=r(PUr,"FSMTForConditionalGeneration"),PUr.forEach(t),mvo=r(P3e," (FairSeq Machine-Translation model)"),P3e.forEach(t),gvo=i(V),Du=n(V,"LI",{});var I3e=s(Du);Ase=n(I3e,"STRONG",{});var IUr=s(Ase);hvo=r(IUr,"funnel"),IUr.forEach(t),pvo=r(I3e," \u2014 "),_q=n(I3e,"A",{href:!0});var qUr=s(_q);uvo=r(qUr,"FunnelForPreTraining"),qUr.forEach(t),_vo=r(I3e," (Funnel Transformer model)"),I3e.forEach(t),bvo=i(V),Gu=n(V,"LI",{});var q3e=s(Gu);yse=n(q3e,"STRONG",{});var NUr=s(yse);vvo=r(NUr,"gpt2"),NUr.forEach(t),Fvo=r(q3e," \u2014 "),bq=n(q3e,"A",{href:!0});var jUr=s(bq);Tvo=r(jUr,"GPT2LMHeadModel"),jUr.forEach(t),Mvo=r(q3e," (OpenAI GPT-2 model)"),q3e.forEach(t),Evo=i(V),Ou=n(V,"LI",{});var N3e=s(Ou);Lse=n(N3e,"STRONG",{});var DUr=s(Lse);Cvo=r(DUr,"ibert"),DUr.forEach(t),wvo=r(N3e," \u2014 "),vq=n(N3e,"A",{href:!0});var GUr=s(vq);Avo=r(GUr,"IBertForMaskedLM"),GUr.forEach(t),yvo=r(N3e," (I-BERT model)"),N3e.forEach(t),Lvo=i(V),Vu=n(V,"LI",{});var j3e=s(Vu);xse=n(j3e,"STRONG",{});var OUr=s(xse);xvo=r(OUr,"layoutlm"),OUr.forEach(t),$vo=r(j3e," \u2014 "),Fq=n(j3e,"A",{href:!0});var VUr=s(Fq);kvo=r(VUr,"LayoutLMForMaskedLM"),VUr.forEach(t),Svo=r(j3e," (LayoutLM model)"),j3e.forEach(t),Rvo=i(V),Xu=n(V,"LI",{});var D3e=s(Xu);$se=n(D3e,"STRONG",{});var XUr=s($se);Bvo=r(XUr,"longformer"),XUr.forEach(t),Pvo=r(D3e," \u2014 "),Tq=n(D3e,"A",{href:!0});var zUr=s(Tq);Ivo=r(zUr,"LongformerForMaskedLM"),zUr.forEach(t),qvo=r(D3e," (Longformer model)"),D3e.forEach(t),Nvo=i(V),zu=n(V,"LI",{});var G3e=s(zu);kse=n(G3e,"STRONG",{});var QUr=s(kse);jvo=r(QUr,"lxmert"),QUr.forEach(t),Dvo=r(G3e," \u2014 "),Mq=n(G3e,"A",{href:!0});var WUr=s(Mq);Gvo=r(WUr,"LxmertForPreTraining"),WUr.forEach(t),Ovo=r(G3e," (LXMERT model)"),G3e.forEach(t),Vvo=i(V),Qu=n(V,"LI",{});var O3e=s(Qu);Sse=n(O3e,"STRONG",{});var HUr=s(Sse);Xvo=r(HUr,"megatron-bert"),HUr.forEach(t),zvo=r(O3e," \u2014 "),Eq=n(O3e,"A",{href:!0});var UUr=s(Eq);Qvo=r(UUr,"MegatronBertForPreTraining"),UUr.forEach(t),Wvo=r(O3e," (MegatronBert model)"),O3e.forEach(t),Hvo=i(V),Wu=n(V,"LI",{});var V3e=s(Wu);Rse=n(V3e,"STRONG",{});var JUr=s(Rse);Uvo=r(JUr,"mobilebert"),JUr.forEach(t),Jvo=r(V3e," \u2014 "),Cq=n(V3e,"A",{href:!0});var YUr=s(Cq);Yvo=r(YUr,"MobileBertForPreTraining"),YUr.forEach(t),Kvo=r(V3e," (MobileBERT model)"),V3e.forEach(t),Zvo=i(V),Hu=n(V,"LI",{});var X3e=s(Hu);Bse=n(X3e,"STRONG",{});var KUr=s(Bse);eFo=r(KUr,"mpnet"),KUr.forEach(t),oFo=r(X3e," \u2014 "),wq=n(X3e,"A",{href:!0});var ZUr=s(wq);rFo=r(ZUr,"MPNetForMaskedLM"),ZUr.forEach(t),tFo=r(X3e," (MPNet model)"),X3e.forEach(t),aFo=i(V),Uu=n(V,"LI",{});var z3e=s(Uu);Pse=n(z3e,"STRONG",{});var eJr=s(Pse);nFo=r(eJr,"openai-gpt"),eJr.forEach(t),sFo=r(z3e," \u2014 "),Aq=n(z3e,"A",{href:!0});var oJr=s(Aq);lFo=r(oJr,"OpenAIGPTLMHeadModel"),oJr.forEach(t),iFo=r(z3e," (OpenAI GPT model)"),z3e.forEach(t),dFo=i(V),Ju=n(V,"LI",{});var Q3e=s(Ju);Ise=n(Q3e,"STRONG",{});var rJr=s(Ise);cFo=r(rJr,"retribert"),rJr.forEach(t),fFo=r(Q3e," \u2014 "),yq=n(Q3e,"A",{href:!0});var tJr=s(yq);mFo=r(tJr,"RetriBertModel"),tJr.forEach(t),gFo=r(Q3e," (RetriBERT model)"),Q3e.forEach(t),hFo=i(V),Yu=n(V,"LI",{});var W3e=s(Yu);qse=n(W3e,"STRONG",{});var aJr=s(qse);pFo=r(aJr,"roberta"),aJr.forEach(t),uFo=r(W3e," \u2014 "),Lq=n(W3e,"A",{href:!0});var nJr=s(Lq);_Fo=r(nJr,"RobertaForMaskedLM"),nJr.forEach(t),bFo=r(W3e," (RoBERTa model)"),W3e.forEach(t),vFo=i(V),Ku=n(V,"LI",{});var H3e=s(Ku);Nse=n(H3e,"STRONG",{});var sJr=s(Nse);FFo=r(sJr,"squeezebert"),sJr.forEach(t),TFo=r(H3e," \u2014 "),xq=n(H3e,"A",{href:!0});var lJr=s(xq);MFo=r(lJr,"SqueezeBertForMaskedLM"),lJr.forEach(t),EFo=r(H3e," (SqueezeBERT model)"),H3e.forEach(t),CFo=i(V),Zu=n(V,"LI",{});var U3e=s(Zu);jse=n(U3e,"STRONG",{});var iJr=s(jse);wFo=r(iJr,"t5"),iJr.forEach(t),AFo=r(U3e," \u2014 "),$q=n(U3e,"A",{href:!0});var dJr=s($q);yFo=r(dJr,"T5ForConditionalGeneration"),dJr.forEach(t),LFo=r(U3e," (T5 model)"),U3e.forEach(t),xFo=i(V),e_=n(V,"LI",{});var J3e=s(e_);Dse=n(J3e,"STRONG",{});var cJr=s(Dse);$Fo=r(cJr,"tapas"),cJr.forEach(t),kFo=r(J3e," \u2014 "),kq=n(J3e,"A",{href:!0});var fJr=s(kq);SFo=r(fJr,"TapasForMaskedLM"),fJr.forEach(t),RFo=r(J3e," (TAPAS model)"),J3e.forEach(t),BFo=i(V),o_=n(V,"LI",{});var Y3e=s(o_);Gse=n(Y3e,"STRONG",{});var mJr=s(Gse);PFo=r(mJr,"transfo-xl"),mJr.forEach(t),IFo=r(Y3e," \u2014 "),Sq=n(Y3e,"A",{href:!0});var gJr=s(Sq);qFo=r(gJr,"TransfoXLLMHeadModel"),gJr.forEach(t),NFo=r(Y3e," (Transformer-XL model)"),Y3e.forEach(t),jFo=i(V),r_=n(V,"LI",{});var K3e=s(r_);Ose=n(K3e,"STRONG",{});var hJr=s(Ose);DFo=r(hJr,"unispeech"),hJr.forEach(t),GFo=r(K3e," \u2014 "),Rq=n(K3e,"A",{href:!0});var pJr=s(Rq);OFo=r(pJr,"UniSpeechForPreTraining"),pJr.forEach(t),VFo=r(K3e," (UniSpeech model)"),K3e.forEach(t),XFo=i(V),t_=n(V,"LI",{});var Z3e=s(t_);Vse=n(Z3e,"STRONG",{});var uJr=s(Vse);zFo=r(uJr,"unispeech-sat"),uJr.forEach(t),QFo=r(Z3e," \u2014 "),Bq=n(Z3e,"A",{href:!0});var _Jr=s(Bq);WFo=r(_Jr,"UniSpeechSatForPreTraining"),_Jr.forEach(t),HFo=r(Z3e," (UniSpeechSat model)"),Z3e.forEach(t),UFo=i(V),a_=n(V,"LI",{});var ewe=s(a_);Xse=n(ewe,"STRONG",{});var bJr=s(Xse);JFo=r(bJr,"visual_bert"),bJr.forEach(t),YFo=r(ewe," \u2014 "),Pq=n(ewe,"A",{href:!0});var vJr=s(Pq);KFo=r(vJr,"VisualBertForPreTraining"),vJr.forEach(t),ZFo=r(ewe," (VisualBert model)"),ewe.forEach(t),e0o=i(V),n_=n(V,"LI",{});var owe=s(n_);zse=n(owe,"STRONG",{});var FJr=s(zse);o0o=r(FJr,"vit_mae"),FJr.forEach(t),r0o=r(owe," \u2014 "),Iq=n(owe,"A",{href:!0});var TJr=s(Iq);t0o=r(TJr,"ViTMAEForPreTraining"),TJr.forEach(t),a0o=r(owe," (ViTMAE model)"),owe.forEach(t),n0o=i(V),s_=n(V,"LI",{});var rwe=s(s_);Qse=n(rwe,"STRONG",{});var MJr=s(Qse);s0o=r(MJr,"wav2vec2"),MJr.forEach(t),l0o=r(rwe," \u2014 "),qq=n(rwe,"A",{href:!0});var EJr=s(qq);i0o=r(EJr,"Wav2Vec2ForPreTraining"),EJr.forEach(t),d0o=r(rwe," (Wav2Vec2 model)"),rwe.forEach(t),c0o=i(V),l_=n(V,"LI",{});var twe=s(l_);Wse=n(twe,"STRONG",{});var CJr=s(Wse);f0o=r(CJr,"xlm"),CJr.forEach(t),m0o=r(twe," \u2014 "),Nq=n(twe,"A",{href:!0});var wJr=s(Nq);g0o=r(wJr,"XLMWithLMHeadModel"),wJr.forEach(t),h0o=r(twe," (XLM model)"),twe.forEach(t),p0o=i(V),i_=n(V,"LI",{});var awe=s(i_);Hse=n(awe,"STRONG",{});var AJr=s(Hse);u0o=r(AJr,"xlm-roberta"),AJr.forEach(t),_0o=r(awe," \u2014 "),jq=n(awe,"A",{href:!0});var yJr=s(jq);b0o=r(yJr,"XLMRobertaForMaskedLM"),yJr.forEach(t),v0o=r(awe," (XLM-RoBERTa model)"),awe.forEach(t),F0o=i(V),d_=n(V,"LI",{});var nwe=s(d_);Use=n(nwe,"STRONG",{});var LJr=s(Use);T0o=r(LJr,"xlm-roberta-xl"),LJr.forEach(t),M0o=r(nwe," \u2014 "),Dq=n(nwe,"A",{href:!0});var xJr=s(Dq);E0o=r(xJr,"XLMRobertaXLForMaskedLM"),xJr.forEach(t),C0o=r(nwe," (XLM-RoBERTa-XL model)"),nwe.forEach(t),w0o=i(V),c_=n(V,"LI",{});var swe=s(c_);Jse=n(swe,"STRONG",{});var $Jr=s(Jse);A0o=r($Jr,"xlnet"),$Jr.forEach(t),y0o=r(swe," \u2014 "),Gq=n(swe,"A",{href:!0});var kJr=s(Gq);L0o=r(kJr,"XLNetLMHeadModel"),kJr.forEach(t),x0o=r(swe," (XLNet model)"),swe.forEach(t),V.forEach(t),$0o=i(Yt),f_=n(Yt,"P",{});var lwe=s(f_);k0o=r(lwe,"The model is set in evaluation mode by default using "),Yse=n(lwe,"CODE",{});var SJr=s(Yse);S0o=r(SJr,"model.eval()"),SJr.forEach(t),R0o=r(lwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kse=n(lwe,"CODE",{});var RJr=s(Kse);B0o=r(RJr,"model.train()"),RJr.forEach(t),lwe.forEach(t),P0o=i(Yt),T(m_.$$.fragment,Yt),Yt.forEach(t),qs.forEach(t),XBe=i(f),Mi=n(f,"H2",{class:!0});var QIe=s(Mi);g_=n(QIe,"A",{id:!0,class:!0,href:!0});var BJr=s(g_);Zse=n(BJr,"SPAN",{});var PJr=s(Zse);T(dA.$$.fragment,PJr),PJr.forEach(t),BJr.forEach(t),I0o=i(QIe),ele=n(QIe,"SPAN",{});var IJr=s(ele);q0o=r(IJr,"AutoModelForCausalLM"),IJr.forEach(t),QIe.forEach(t),zBe=i(f),$o=n(f,"DIV",{class:!0});var Ns=s($o);T(cA.$$.fragment,Ns),N0o=i(Ns),Ei=n(Ns,"P",{});var yY=s(Ei);j0o=r(yY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Oq=n(yY,"A",{href:!0});var qJr=s(Oq);D0o=r(qJr,"from_pretrained()"),qJr.forEach(t),G0o=r(yY," class method or the "),Vq=n(yY,"A",{href:!0});var NJr=s(Vq);O0o=r(NJr,"from_config()"),NJr.forEach(t),V0o=r(yY,` class
method.`),yY.forEach(t),X0o=i(Ns),fA=n(Ns,"P",{});var WIe=s(fA);z0o=r(WIe,"This class cannot be instantiated directly using "),ole=n(WIe,"CODE",{});var jJr=s(ole);Q0o=r(jJr,"__init__()"),jJr.forEach(t),W0o=r(WIe," (throws an error)."),WIe.forEach(t),H0o=i(Ns),ot=n(Ns,"DIV",{class:!0});var IC=s(ot);T(mA.$$.fragment,IC),U0o=i(IC),rle=n(IC,"P",{});var DJr=s(rle);J0o=r(DJr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),DJr.forEach(t),Y0o=i(IC),Ci=n(IC,"P",{});var LY=s(Ci);K0o=r(LY,`Note:
Loading a model from its configuration file does `),tle=n(LY,"STRONG",{});var GJr=s(tle);Z0o=r(GJr,"not"),GJr.forEach(t),eTo=r(LY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xq=n(LY,"A",{href:!0});var OJr=s(Xq);oTo=r(OJr,"from_pretrained()"),OJr.forEach(t),rTo=r(LY," to load the model weights."),LY.forEach(t),tTo=i(IC),T(h_.$$.fragment,IC),IC.forEach(t),aTo=i(Ns),Je=n(Ns,"DIV",{class:!0});var Kt=s(Je);T(gA.$$.fragment,Kt),nTo=i(Kt),ale=n(Kt,"P",{});var VJr=s(ale);sTo=r(VJr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),VJr.forEach(t),lTo=i(Kt),wa=n(Kt,"P",{});var qC=s(wa);iTo=r(qC,"The model class to instantiate is selected based on the "),nle=n(qC,"CODE",{});var XJr=s(nle);dTo=r(XJr,"model_type"),XJr.forEach(t),cTo=r(qC,` property of the config object (either
passed as an argument or loaded from `),sle=n(qC,"CODE",{});var zJr=s(sle);fTo=r(zJr,"pretrained_model_name_or_path"),zJr.forEach(t),mTo=r(qC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lle=n(qC,"CODE",{});var QJr=s(lle);gTo=r(QJr,"pretrained_model_name_or_path"),QJr.forEach(t),hTo=r(qC,":"),qC.forEach(t),pTo=i(Kt),z=n(Kt,"UL",{});var W=s(z);p_=n(W,"LI",{});var iwe=s(p_);ile=n(iwe,"STRONG",{});var WJr=s(ile);uTo=r(WJr,"bart"),WJr.forEach(t),_To=r(iwe," \u2014 "),zq=n(iwe,"A",{href:!0});var HJr=s(zq);bTo=r(HJr,"BartForCausalLM"),HJr.forEach(t),vTo=r(iwe," (BART model)"),iwe.forEach(t),FTo=i(W),u_=n(W,"LI",{});var dwe=s(u_);dle=n(dwe,"STRONG",{});var UJr=s(dle);TTo=r(UJr,"bert"),UJr.forEach(t),MTo=r(dwe," \u2014 "),Qq=n(dwe,"A",{href:!0});var JJr=s(Qq);ETo=r(JJr,"BertLMHeadModel"),JJr.forEach(t),CTo=r(dwe," (BERT model)"),dwe.forEach(t),wTo=i(W),__=n(W,"LI",{});var cwe=s(__);cle=n(cwe,"STRONG",{});var YJr=s(cle);ATo=r(YJr,"bert-generation"),YJr.forEach(t),yTo=r(cwe," \u2014 "),Wq=n(cwe,"A",{href:!0});var KJr=s(Wq);LTo=r(KJr,"BertGenerationDecoder"),KJr.forEach(t),xTo=r(cwe," (Bert Generation model)"),cwe.forEach(t),$To=i(W),b_=n(W,"LI",{});var fwe=s(b_);fle=n(fwe,"STRONG",{});var ZJr=s(fle);kTo=r(ZJr,"big_bird"),ZJr.forEach(t),STo=r(fwe," \u2014 "),Hq=n(fwe,"A",{href:!0});var eYr=s(Hq);RTo=r(eYr,"BigBirdForCausalLM"),eYr.forEach(t),BTo=r(fwe," (BigBird model)"),fwe.forEach(t),PTo=i(W),v_=n(W,"LI",{});var mwe=s(v_);mle=n(mwe,"STRONG",{});var oYr=s(mle);ITo=r(oYr,"bigbird_pegasus"),oYr.forEach(t),qTo=r(mwe," \u2014 "),Uq=n(mwe,"A",{href:!0});var rYr=s(Uq);NTo=r(rYr,"BigBirdPegasusForCausalLM"),rYr.forEach(t),jTo=r(mwe," (BigBirdPegasus model)"),mwe.forEach(t),DTo=i(W),F_=n(W,"LI",{});var gwe=s(F_);gle=n(gwe,"STRONG",{});var tYr=s(gle);GTo=r(tYr,"blenderbot"),tYr.forEach(t),OTo=r(gwe," \u2014 "),Jq=n(gwe,"A",{href:!0});var aYr=s(Jq);VTo=r(aYr,"BlenderbotForCausalLM"),aYr.forEach(t),XTo=r(gwe," (Blenderbot model)"),gwe.forEach(t),zTo=i(W),T_=n(W,"LI",{});var hwe=s(T_);hle=n(hwe,"STRONG",{});var nYr=s(hle);QTo=r(nYr,"blenderbot-small"),nYr.forEach(t),WTo=r(hwe," \u2014 "),Yq=n(hwe,"A",{href:!0});var sYr=s(Yq);HTo=r(sYr,"BlenderbotSmallForCausalLM"),sYr.forEach(t),UTo=r(hwe," (BlenderbotSmall model)"),hwe.forEach(t),JTo=i(W),M_=n(W,"LI",{});var pwe=s(M_);ple=n(pwe,"STRONG",{});var lYr=s(ple);YTo=r(lYr,"camembert"),lYr.forEach(t),KTo=r(pwe," \u2014 "),Kq=n(pwe,"A",{href:!0});var iYr=s(Kq);ZTo=r(iYr,"CamembertForCausalLM"),iYr.forEach(t),e7o=r(pwe," (CamemBERT model)"),pwe.forEach(t),o7o=i(W),E_=n(W,"LI",{});var uwe=s(E_);ule=n(uwe,"STRONG",{});var dYr=s(ule);r7o=r(dYr,"ctrl"),dYr.forEach(t),t7o=r(uwe," \u2014 "),Zq=n(uwe,"A",{href:!0});var cYr=s(Zq);a7o=r(cYr,"CTRLLMHeadModel"),cYr.forEach(t),n7o=r(uwe," (CTRL model)"),uwe.forEach(t),s7o=i(W),C_=n(W,"LI",{});var _we=s(C_);_le=n(_we,"STRONG",{});var fYr=s(_le);l7o=r(fYr,"data2vec-text"),fYr.forEach(t),i7o=r(_we," \u2014 "),eN=n(_we,"A",{href:!0});var mYr=s(eN);d7o=r(mYr,"Data2VecTextForCausalLM"),mYr.forEach(t),c7o=r(_we," (Data2VecText model)"),_we.forEach(t),f7o=i(W),w_=n(W,"LI",{});var bwe=s(w_);ble=n(bwe,"STRONG",{});var gYr=s(ble);m7o=r(gYr,"electra"),gYr.forEach(t),g7o=r(bwe," \u2014 "),oN=n(bwe,"A",{href:!0});var hYr=s(oN);h7o=r(hYr,"ElectraForCausalLM"),hYr.forEach(t),p7o=r(bwe," (ELECTRA model)"),bwe.forEach(t),u7o=i(W),A_=n(W,"LI",{});var vwe=s(A_);vle=n(vwe,"STRONG",{});var pYr=s(vle);_7o=r(pYr,"gpt2"),pYr.forEach(t),b7o=r(vwe," \u2014 "),rN=n(vwe,"A",{href:!0});var uYr=s(rN);v7o=r(uYr,"GPT2LMHeadModel"),uYr.forEach(t),F7o=r(vwe," (OpenAI GPT-2 model)"),vwe.forEach(t),T7o=i(W),y_=n(W,"LI",{});var Fwe=s(y_);Fle=n(Fwe,"STRONG",{});var _Yr=s(Fle);M7o=r(_Yr,"gpt_neo"),_Yr.forEach(t),E7o=r(Fwe," \u2014 "),tN=n(Fwe,"A",{href:!0});var bYr=s(tN);C7o=r(bYr,"GPTNeoForCausalLM"),bYr.forEach(t),w7o=r(Fwe," (GPT Neo model)"),Fwe.forEach(t),A7o=i(W),L_=n(W,"LI",{});var Twe=s(L_);Tle=n(Twe,"STRONG",{});var vYr=s(Tle);y7o=r(vYr,"gptj"),vYr.forEach(t),L7o=r(Twe," \u2014 "),aN=n(Twe,"A",{href:!0});var FYr=s(aN);x7o=r(FYr,"GPTJForCausalLM"),FYr.forEach(t),$7o=r(Twe," (GPT-J model)"),Twe.forEach(t),k7o=i(W),x_=n(W,"LI",{});var Mwe=s(x_);Mle=n(Mwe,"STRONG",{});var TYr=s(Mle);S7o=r(TYr,"marian"),TYr.forEach(t),R7o=r(Mwe," \u2014 "),nN=n(Mwe,"A",{href:!0});var MYr=s(nN);B7o=r(MYr,"MarianForCausalLM"),MYr.forEach(t),P7o=r(Mwe," (Marian model)"),Mwe.forEach(t),I7o=i(W),$_=n(W,"LI",{});var Ewe=s($_);Ele=n(Ewe,"STRONG",{});var EYr=s(Ele);q7o=r(EYr,"mbart"),EYr.forEach(t),N7o=r(Ewe," \u2014 "),sN=n(Ewe,"A",{href:!0});var CYr=s(sN);j7o=r(CYr,"MBartForCausalLM"),CYr.forEach(t),D7o=r(Ewe," (mBART model)"),Ewe.forEach(t),G7o=i(W),k_=n(W,"LI",{});var Cwe=s(k_);Cle=n(Cwe,"STRONG",{});var wYr=s(Cle);O7o=r(wYr,"megatron-bert"),wYr.forEach(t),V7o=r(Cwe," \u2014 "),lN=n(Cwe,"A",{href:!0});var AYr=s(lN);X7o=r(AYr,"MegatronBertForCausalLM"),AYr.forEach(t),z7o=r(Cwe," (MegatronBert model)"),Cwe.forEach(t),Q7o=i(W),S_=n(W,"LI",{});var wwe=s(S_);wle=n(wwe,"STRONG",{});var yYr=s(wle);W7o=r(yYr,"openai-gpt"),yYr.forEach(t),H7o=r(wwe," \u2014 "),iN=n(wwe,"A",{href:!0});var LYr=s(iN);U7o=r(LYr,"OpenAIGPTLMHeadModel"),LYr.forEach(t),J7o=r(wwe," (OpenAI GPT model)"),wwe.forEach(t),Y7o=i(W),R_=n(W,"LI",{});var Awe=s(R_);Ale=n(Awe,"STRONG",{});var xYr=s(Ale);K7o=r(xYr,"pegasus"),xYr.forEach(t),Z7o=r(Awe," \u2014 "),dN=n(Awe,"A",{href:!0});var $Yr=s(dN);e9o=r($Yr,"PegasusForCausalLM"),$Yr.forEach(t),o9o=r(Awe," (Pegasus model)"),Awe.forEach(t),r9o=i(W),B_=n(W,"LI",{});var ywe=s(B_);yle=n(ywe,"STRONG",{});var kYr=s(yle);t9o=r(kYr,"plbart"),kYr.forEach(t),a9o=r(ywe," \u2014 "),cN=n(ywe,"A",{href:!0});var SYr=s(cN);n9o=r(SYr,"PLBartForCausalLM"),SYr.forEach(t),s9o=r(ywe," (PLBart model)"),ywe.forEach(t),l9o=i(W),P_=n(W,"LI",{});var Lwe=s(P_);Lle=n(Lwe,"STRONG",{});var RYr=s(Lle);i9o=r(RYr,"prophetnet"),RYr.forEach(t),d9o=r(Lwe," \u2014 "),fN=n(Lwe,"A",{href:!0});var BYr=s(fN);c9o=r(BYr,"ProphetNetForCausalLM"),BYr.forEach(t),f9o=r(Lwe," (ProphetNet model)"),Lwe.forEach(t),m9o=i(W),I_=n(W,"LI",{});var xwe=s(I_);xle=n(xwe,"STRONG",{});var PYr=s(xle);g9o=r(PYr,"qdqbert"),PYr.forEach(t),h9o=r(xwe," \u2014 "),mN=n(xwe,"A",{href:!0});var IYr=s(mN);p9o=r(IYr,"QDQBertLMHeadModel"),IYr.forEach(t),u9o=r(xwe," (QDQBert model)"),xwe.forEach(t),_9o=i(W),q_=n(W,"LI",{});var $we=s(q_);$le=n($we,"STRONG",{});var qYr=s($le);b9o=r(qYr,"reformer"),qYr.forEach(t),v9o=r($we," \u2014 "),gN=n($we,"A",{href:!0});var NYr=s(gN);F9o=r(NYr,"ReformerModelWithLMHead"),NYr.forEach(t),T9o=r($we," (Reformer model)"),$we.forEach(t),M9o=i(W),N_=n(W,"LI",{});var kwe=s(N_);kle=n(kwe,"STRONG",{});var jYr=s(kle);E9o=r(jYr,"rembert"),jYr.forEach(t),C9o=r(kwe," \u2014 "),hN=n(kwe,"A",{href:!0});var DYr=s(hN);w9o=r(DYr,"RemBertForCausalLM"),DYr.forEach(t),A9o=r(kwe," (RemBERT model)"),kwe.forEach(t),y9o=i(W),j_=n(W,"LI",{});var Swe=s(j_);Sle=n(Swe,"STRONG",{});var GYr=s(Sle);L9o=r(GYr,"roberta"),GYr.forEach(t),x9o=r(Swe," \u2014 "),pN=n(Swe,"A",{href:!0});var OYr=s(pN);$9o=r(OYr,"RobertaForCausalLM"),OYr.forEach(t),k9o=r(Swe," (RoBERTa model)"),Swe.forEach(t),S9o=i(W),D_=n(W,"LI",{});var Rwe=s(D_);Rle=n(Rwe,"STRONG",{});var VYr=s(Rle);R9o=r(VYr,"roformer"),VYr.forEach(t),B9o=r(Rwe," \u2014 "),uN=n(Rwe,"A",{href:!0});var XYr=s(uN);P9o=r(XYr,"RoFormerForCausalLM"),XYr.forEach(t),I9o=r(Rwe," (RoFormer model)"),Rwe.forEach(t),q9o=i(W),G_=n(W,"LI",{});var Bwe=s(G_);Ble=n(Bwe,"STRONG",{});var zYr=s(Ble);N9o=r(zYr,"speech_to_text_2"),zYr.forEach(t),j9o=r(Bwe," \u2014 "),_N=n(Bwe,"A",{href:!0});var QYr=s(_N);D9o=r(QYr,"Speech2Text2ForCausalLM"),QYr.forEach(t),G9o=r(Bwe," (Speech2Text2 model)"),Bwe.forEach(t),O9o=i(W),O_=n(W,"LI",{});var Pwe=s(O_);Ple=n(Pwe,"STRONG",{});var WYr=s(Ple);V9o=r(WYr,"transfo-xl"),WYr.forEach(t),X9o=r(Pwe," \u2014 "),bN=n(Pwe,"A",{href:!0});var HYr=s(bN);z9o=r(HYr,"TransfoXLLMHeadModel"),HYr.forEach(t),Q9o=r(Pwe," (Transformer-XL model)"),Pwe.forEach(t),W9o=i(W),V_=n(W,"LI",{});var Iwe=s(V_);Ile=n(Iwe,"STRONG",{});var UYr=s(Ile);H9o=r(UYr,"trocr"),UYr.forEach(t),U9o=r(Iwe," \u2014 "),vN=n(Iwe,"A",{href:!0});var JYr=s(vN);J9o=r(JYr,"TrOCRForCausalLM"),JYr.forEach(t),Y9o=r(Iwe," (TrOCR model)"),Iwe.forEach(t),K9o=i(W),X_=n(W,"LI",{});var qwe=s(X_);qle=n(qwe,"STRONG",{});var YYr=s(qle);Z9o=r(YYr,"xglm"),YYr.forEach(t),eMo=r(qwe," \u2014 "),FN=n(qwe,"A",{href:!0});var KYr=s(FN);oMo=r(KYr,"XGLMForCausalLM"),KYr.forEach(t),rMo=r(qwe," (XGLM model)"),qwe.forEach(t),tMo=i(W),z_=n(W,"LI",{});var Nwe=s(z_);Nle=n(Nwe,"STRONG",{});var ZYr=s(Nle);aMo=r(ZYr,"xlm"),ZYr.forEach(t),nMo=r(Nwe," \u2014 "),TN=n(Nwe,"A",{href:!0});var eKr=s(TN);sMo=r(eKr,"XLMWithLMHeadModel"),eKr.forEach(t),lMo=r(Nwe," (XLM model)"),Nwe.forEach(t),iMo=i(W),Q_=n(W,"LI",{});var jwe=s(Q_);jle=n(jwe,"STRONG",{});var oKr=s(jle);dMo=r(oKr,"xlm-prophetnet"),oKr.forEach(t),cMo=r(jwe," \u2014 "),MN=n(jwe,"A",{href:!0});var rKr=s(MN);fMo=r(rKr,"XLMProphetNetForCausalLM"),rKr.forEach(t),mMo=r(jwe," (XLMProphetNet model)"),jwe.forEach(t),gMo=i(W),W_=n(W,"LI",{});var Dwe=s(W_);Dle=n(Dwe,"STRONG",{});var tKr=s(Dle);hMo=r(tKr,"xlm-roberta"),tKr.forEach(t),pMo=r(Dwe," \u2014 "),EN=n(Dwe,"A",{href:!0});var aKr=s(EN);uMo=r(aKr,"XLMRobertaForCausalLM"),aKr.forEach(t),_Mo=r(Dwe," (XLM-RoBERTa model)"),Dwe.forEach(t),bMo=i(W),H_=n(W,"LI",{});var Gwe=s(H_);Gle=n(Gwe,"STRONG",{});var nKr=s(Gle);vMo=r(nKr,"xlm-roberta-xl"),nKr.forEach(t),FMo=r(Gwe," \u2014 "),CN=n(Gwe,"A",{href:!0});var sKr=s(CN);TMo=r(sKr,"XLMRobertaXLForCausalLM"),sKr.forEach(t),MMo=r(Gwe," (XLM-RoBERTa-XL model)"),Gwe.forEach(t),EMo=i(W),U_=n(W,"LI",{});var Owe=s(U_);Ole=n(Owe,"STRONG",{});var lKr=s(Ole);CMo=r(lKr,"xlnet"),lKr.forEach(t),wMo=r(Owe," \u2014 "),wN=n(Owe,"A",{href:!0});var iKr=s(wN);AMo=r(iKr,"XLNetLMHeadModel"),iKr.forEach(t),yMo=r(Owe," (XLNet model)"),Owe.forEach(t),W.forEach(t),LMo=i(Kt),J_=n(Kt,"P",{});var Vwe=s(J_);xMo=r(Vwe,"The model is set in evaluation mode by default using "),Vle=n(Vwe,"CODE",{});var dKr=s(Vle);$Mo=r(dKr,"model.eval()"),dKr.forEach(t),kMo=r(Vwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xle=n(Vwe,"CODE",{});var cKr=s(Xle);SMo=r(cKr,"model.train()"),cKr.forEach(t),Vwe.forEach(t),RMo=i(Kt),T(Y_.$$.fragment,Kt),Kt.forEach(t),Ns.forEach(t),QBe=i(f),wi=n(f,"H2",{class:!0});var HIe=s(wi);K_=n(HIe,"A",{id:!0,class:!0,href:!0});var fKr=s(K_);zle=n(fKr,"SPAN",{});var mKr=s(zle);T(hA.$$.fragment,mKr),mKr.forEach(t),fKr.forEach(t),BMo=i(HIe),Qle=n(HIe,"SPAN",{});var gKr=s(Qle);PMo=r(gKr,"AutoModelForMaskedLM"),gKr.forEach(t),HIe.forEach(t),WBe=i(f),ko=n(f,"DIV",{class:!0});var js=s(ko);T(pA.$$.fragment,js),IMo=i(js),Ai=n(js,"P",{});var xY=s(Ai);qMo=r(xY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AN=n(xY,"A",{href:!0});var hKr=s(AN);NMo=r(hKr,"from_pretrained()"),hKr.forEach(t),jMo=r(xY," class method or the "),yN=n(xY,"A",{href:!0});var pKr=s(yN);DMo=r(pKr,"from_config()"),pKr.forEach(t),GMo=r(xY,` class
method.`),xY.forEach(t),OMo=i(js),uA=n(js,"P",{});var UIe=s(uA);VMo=r(UIe,"This class cannot be instantiated directly using "),Wle=n(UIe,"CODE",{});var uKr=s(Wle);XMo=r(uKr,"__init__()"),uKr.forEach(t),zMo=r(UIe," (throws an error)."),UIe.forEach(t),QMo=i(js),rt=n(js,"DIV",{class:!0});var NC=s(rt);T(_A.$$.fragment,NC),WMo=i(NC),Hle=n(NC,"P",{});var _Kr=s(Hle);HMo=r(_Kr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Kr.forEach(t),UMo=i(NC),yi=n(NC,"P",{});var $Y=s(yi);JMo=r($Y,`Note:
Loading a model from its configuration file does `),Ule=n($Y,"STRONG",{});var bKr=s(Ule);YMo=r(bKr,"not"),bKr.forEach(t),KMo=r($Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),LN=n($Y,"A",{href:!0});var vKr=s(LN);ZMo=r(vKr,"from_pretrained()"),vKr.forEach(t),e4o=r($Y," to load the model weights."),$Y.forEach(t),o4o=i(NC),T(Z_.$$.fragment,NC),NC.forEach(t),r4o=i(js),Ye=n(js,"DIV",{class:!0});var Zt=s(Ye);T(bA.$$.fragment,Zt),t4o=i(Zt),Jle=n(Zt,"P",{});var FKr=s(Jle);a4o=r(FKr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),FKr.forEach(t),n4o=i(Zt),Aa=n(Zt,"P",{});var jC=s(Aa);s4o=r(jC,"The model class to instantiate is selected based on the "),Yle=n(jC,"CODE",{});var TKr=s(Yle);l4o=r(TKr,"model_type"),TKr.forEach(t),i4o=r(jC,` property of the config object (either
passed as an argument or loaded from `),Kle=n(jC,"CODE",{});var MKr=s(Kle);d4o=r(MKr,"pretrained_model_name_or_path"),MKr.forEach(t),c4o=r(jC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zle=n(jC,"CODE",{});var EKr=s(Zle);f4o=r(EKr,"pretrained_model_name_or_path"),EKr.forEach(t),m4o=r(jC,":"),jC.forEach(t),g4o=i(Zt),Q=n(Zt,"UL",{});var H=s(Q);e1=n(H,"LI",{});var Xwe=s(e1);eie=n(Xwe,"STRONG",{});var CKr=s(eie);h4o=r(CKr,"albert"),CKr.forEach(t),p4o=r(Xwe," \u2014 "),xN=n(Xwe,"A",{href:!0});var wKr=s(xN);u4o=r(wKr,"AlbertForMaskedLM"),wKr.forEach(t),_4o=r(Xwe," (ALBERT model)"),Xwe.forEach(t),b4o=i(H),o1=n(H,"LI",{});var zwe=s(o1);oie=n(zwe,"STRONG",{});var AKr=s(oie);v4o=r(AKr,"bart"),AKr.forEach(t),F4o=r(zwe," \u2014 "),$N=n(zwe,"A",{href:!0});var yKr=s($N);T4o=r(yKr,"BartForConditionalGeneration"),yKr.forEach(t),M4o=r(zwe," (BART model)"),zwe.forEach(t),E4o=i(H),r1=n(H,"LI",{});var Qwe=s(r1);rie=n(Qwe,"STRONG",{});var LKr=s(rie);C4o=r(LKr,"bert"),LKr.forEach(t),w4o=r(Qwe," \u2014 "),kN=n(Qwe,"A",{href:!0});var xKr=s(kN);A4o=r(xKr,"BertForMaskedLM"),xKr.forEach(t),y4o=r(Qwe," (BERT model)"),Qwe.forEach(t),L4o=i(H),t1=n(H,"LI",{});var Wwe=s(t1);tie=n(Wwe,"STRONG",{});var $Kr=s(tie);x4o=r($Kr,"big_bird"),$Kr.forEach(t),$4o=r(Wwe," \u2014 "),SN=n(Wwe,"A",{href:!0});var kKr=s(SN);k4o=r(kKr,"BigBirdForMaskedLM"),kKr.forEach(t),S4o=r(Wwe," (BigBird model)"),Wwe.forEach(t),R4o=i(H),a1=n(H,"LI",{});var Hwe=s(a1);aie=n(Hwe,"STRONG",{});var SKr=s(aie);B4o=r(SKr,"camembert"),SKr.forEach(t),P4o=r(Hwe," \u2014 "),RN=n(Hwe,"A",{href:!0});var RKr=s(RN);I4o=r(RKr,"CamembertForMaskedLM"),RKr.forEach(t),q4o=r(Hwe," (CamemBERT model)"),Hwe.forEach(t),N4o=i(H),n1=n(H,"LI",{});var Uwe=s(n1);nie=n(Uwe,"STRONG",{});var BKr=s(nie);j4o=r(BKr,"convbert"),BKr.forEach(t),D4o=r(Uwe," \u2014 "),BN=n(Uwe,"A",{href:!0});var PKr=s(BN);G4o=r(PKr,"ConvBertForMaskedLM"),PKr.forEach(t),O4o=r(Uwe," (ConvBERT model)"),Uwe.forEach(t),V4o=i(H),s1=n(H,"LI",{});var Jwe=s(s1);sie=n(Jwe,"STRONG",{});var IKr=s(sie);X4o=r(IKr,"data2vec-text"),IKr.forEach(t),z4o=r(Jwe," \u2014 "),PN=n(Jwe,"A",{href:!0});var qKr=s(PN);Q4o=r(qKr,"Data2VecTextForMaskedLM"),qKr.forEach(t),W4o=r(Jwe," (Data2VecText model)"),Jwe.forEach(t),H4o=i(H),l1=n(H,"LI",{});var Ywe=s(l1);lie=n(Ywe,"STRONG",{});var NKr=s(lie);U4o=r(NKr,"deberta"),NKr.forEach(t),J4o=r(Ywe," \u2014 "),IN=n(Ywe,"A",{href:!0});var jKr=s(IN);Y4o=r(jKr,"DebertaForMaskedLM"),jKr.forEach(t),K4o=r(Ywe," (DeBERTa model)"),Ywe.forEach(t),Z4o=i(H),i1=n(H,"LI",{});var Kwe=s(i1);iie=n(Kwe,"STRONG",{});var DKr=s(iie);eEo=r(DKr,"deberta-v2"),DKr.forEach(t),oEo=r(Kwe," \u2014 "),qN=n(Kwe,"A",{href:!0});var GKr=s(qN);rEo=r(GKr,"DebertaV2ForMaskedLM"),GKr.forEach(t),tEo=r(Kwe," (DeBERTa-v2 model)"),Kwe.forEach(t),aEo=i(H),d1=n(H,"LI",{});var Zwe=s(d1);die=n(Zwe,"STRONG",{});var OKr=s(die);nEo=r(OKr,"distilbert"),OKr.forEach(t),sEo=r(Zwe," \u2014 "),NN=n(Zwe,"A",{href:!0});var VKr=s(NN);lEo=r(VKr,"DistilBertForMaskedLM"),VKr.forEach(t),iEo=r(Zwe," (DistilBERT model)"),Zwe.forEach(t),dEo=i(H),c1=n(H,"LI",{});var eAe=s(c1);cie=n(eAe,"STRONG",{});var XKr=s(cie);cEo=r(XKr,"electra"),XKr.forEach(t),fEo=r(eAe," \u2014 "),jN=n(eAe,"A",{href:!0});var zKr=s(jN);mEo=r(zKr,"ElectraForMaskedLM"),zKr.forEach(t),gEo=r(eAe," (ELECTRA model)"),eAe.forEach(t),hEo=i(H),f1=n(H,"LI",{});var oAe=s(f1);fie=n(oAe,"STRONG",{});var QKr=s(fie);pEo=r(QKr,"flaubert"),QKr.forEach(t),uEo=r(oAe," \u2014 "),DN=n(oAe,"A",{href:!0});var WKr=s(DN);_Eo=r(WKr,"FlaubertWithLMHeadModel"),WKr.forEach(t),bEo=r(oAe," (FlauBERT model)"),oAe.forEach(t),vEo=i(H),m1=n(H,"LI",{});var rAe=s(m1);mie=n(rAe,"STRONG",{});var HKr=s(mie);FEo=r(HKr,"fnet"),HKr.forEach(t),TEo=r(rAe," \u2014 "),GN=n(rAe,"A",{href:!0});var UKr=s(GN);MEo=r(UKr,"FNetForMaskedLM"),UKr.forEach(t),EEo=r(rAe," (FNet model)"),rAe.forEach(t),CEo=i(H),g1=n(H,"LI",{});var tAe=s(g1);gie=n(tAe,"STRONG",{});var JKr=s(gie);wEo=r(JKr,"funnel"),JKr.forEach(t),AEo=r(tAe," \u2014 "),ON=n(tAe,"A",{href:!0});var YKr=s(ON);yEo=r(YKr,"FunnelForMaskedLM"),YKr.forEach(t),LEo=r(tAe," (Funnel Transformer model)"),tAe.forEach(t),xEo=i(H),h1=n(H,"LI",{});var aAe=s(h1);hie=n(aAe,"STRONG",{});var KKr=s(hie);$Eo=r(KKr,"ibert"),KKr.forEach(t),kEo=r(aAe," \u2014 "),VN=n(aAe,"A",{href:!0});var ZKr=s(VN);SEo=r(ZKr,"IBertForMaskedLM"),ZKr.forEach(t),REo=r(aAe," (I-BERT model)"),aAe.forEach(t),BEo=i(H),p1=n(H,"LI",{});var nAe=s(p1);pie=n(nAe,"STRONG",{});var eZr=s(pie);PEo=r(eZr,"layoutlm"),eZr.forEach(t),IEo=r(nAe," \u2014 "),XN=n(nAe,"A",{href:!0});var oZr=s(XN);qEo=r(oZr,"LayoutLMForMaskedLM"),oZr.forEach(t),NEo=r(nAe," (LayoutLM model)"),nAe.forEach(t),jEo=i(H),u1=n(H,"LI",{});var sAe=s(u1);uie=n(sAe,"STRONG",{});var rZr=s(uie);DEo=r(rZr,"longformer"),rZr.forEach(t),GEo=r(sAe," \u2014 "),zN=n(sAe,"A",{href:!0});var tZr=s(zN);OEo=r(tZr,"LongformerForMaskedLM"),tZr.forEach(t),VEo=r(sAe," (Longformer model)"),sAe.forEach(t),XEo=i(H),_1=n(H,"LI",{});var lAe=s(_1);_ie=n(lAe,"STRONG",{});var aZr=s(_ie);zEo=r(aZr,"mbart"),aZr.forEach(t),QEo=r(lAe," \u2014 "),QN=n(lAe,"A",{href:!0});var nZr=s(QN);WEo=r(nZr,"MBartForConditionalGeneration"),nZr.forEach(t),HEo=r(lAe," (mBART model)"),lAe.forEach(t),UEo=i(H),b1=n(H,"LI",{});var iAe=s(b1);bie=n(iAe,"STRONG",{});var sZr=s(bie);JEo=r(sZr,"megatron-bert"),sZr.forEach(t),YEo=r(iAe," \u2014 "),WN=n(iAe,"A",{href:!0});var lZr=s(WN);KEo=r(lZr,"MegatronBertForMaskedLM"),lZr.forEach(t),ZEo=r(iAe," (MegatronBert model)"),iAe.forEach(t),e5o=i(H),v1=n(H,"LI",{});var dAe=s(v1);vie=n(dAe,"STRONG",{});var iZr=s(vie);o5o=r(iZr,"mobilebert"),iZr.forEach(t),r5o=r(dAe," \u2014 "),HN=n(dAe,"A",{href:!0});var dZr=s(HN);t5o=r(dZr,"MobileBertForMaskedLM"),dZr.forEach(t),a5o=r(dAe," (MobileBERT model)"),dAe.forEach(t),n5o=i(H),F1=n(H,"LI",{});var cAe=s(F1);Fie=n(cAe,"STRONG",{});var cZr=s(Fie);s5o=r(cZr,"mpnet"),cZr.forEach(t),l5o=r(cAe," \u2014 "),UN=n(cAe,"A",{href:!0});var fZr=s(UN);i5o=r(fZr,"MPNetForMaskedLM"),fZr.forEach(t),d5o=r(cAe," (MPNet model)"),cAe.forEach(t),c5o=i(H),T1=n(H,"LI",{});var fAe=s(T1);Tie=n(fAe,"STRONG",{});var mZr=s(Tie);f5o=r(mZr,"nystromformer"),mZr.forEach(t),m5o=r(fAe," \u2014 "),JN=n(fAe,"A",{href:!0});var gZr=s(JN);g5o=r(gZr,"NystromformerForMaskedLM"),gZr.forEach(t),h5o=r(fAe," (Nystromformer model)"),fAe.forEach(t),p5o=i(H),M1=n(H,"LI",{});var mAe=s(M1);Mie=n(mAe,"STRONG",{});var hZr=s(Mie);u5o=r(hZr,"perceiver"),hZr.forEach(t),_5o=r(mAe," \u2014 "),YN=n(mAe,"A",{href:!0});var pZr=s(YN);b5o=r(pZr,"PerceiverForMaskedLM"),pZr.forEach(t),v5o=r(mAe," (Perceiver model)"),mAe.forEach(t),F5o=i(H),E1=n(H,"LI",{});var gAe=s(E1);Eie=n(gAe,"STRONG",{});var uZr=s(Eie);T5o=r(uZr,"qdqbert"),uZr.forEach(t),M5o=r(gAe," \u2014 "),KN=n(gAe,"A",{href:!0});var _Zr=s(KN);E5o=r(_Zr,"QDQBertForMaskedLM"),_Zr.forEach(t),C5o=r(gAe," (QDQBert model)"),gAe.forEach(t),w5o=i(H),C1=n(H,"LI",{});var hAe=s(C1);Cie=n(hAe,"STRONG",{});var bZr=s(Cie);A5o=r(bZr,"reformer"),bZr.forEach(t),y5o=r(hAe," \u2014 "),ZN=n(hAe,"A",{href:!0});var vZr=s(ZN);L5o=r(vZr,"ReformerForMaskedLM"),vZr.forEach(t),x5o=r(hAe," (Reformer model)"),hAe.forEach(t),$5o=i(H),w1=n(H,"LI",{});var pAe=s(w1);wie=n(pAe,"STRONG",{});var FZr=s(wie);k5o=r(FZr,"rembert"),FZr.forEach(t),S5o=r(pAe," \u2014 "),ej=n(pAe,"A",{href:!0});var TZr=s(ej);R5o=r(TZr,"RemBertForMaskedLM"),TZr.forEach(t),B5o=r(pAe," (RemBERT model)"),pAe.forEach(t),P5o=i(H),A1=n(H,"LI",{});var uAe=s(A1);Aie=n(uAe,"STRONG",{});var MZr=s(Aie);I5o=r(MZr,"roberta"),MZr.forEach(t),q5o=r(uAe," \u2014 "),oj=n(uAe,"A",{href:!0});var EZr=s(oj);N5o=r(EZr,"RobertaForMaskedLM"),EZr.forEach(t),j5o=r(uAe," (RoBERTa model)"),uAe.forEach(t),D5o=i(H),y1=n(H,"LI",{});var _Ae=s(y1);yie=n(_Ae,"STRONG",{});var CZr=s(yie);G5o=r(CZr,"roformer"),CZr.forEach(t),O5o=r(_Ae," \u2014 "),rj=n(_Ae,"A",{href:!0});var wZr=s(rj);V5o=r(wZr,"RoFormerForMaskedLM"),wZr.forEach(t),X5o=r(_Ae," (RoFormer model)"),_Ae.forEach(t),z5o=i(H),L1=n(H,"LI",{});var bAe=s(L1);Lie=n(bAe,"STRONG",{});var AZr=s(Lie);Q5o=r(AZr,"squeezebert"),AZr.forEach(t),W5o=r(bAe," \u2014 "),tj=n(bAe,"A",{href:!0});var yZr=s(tj);H5o=r(yZr,"SqueezeBertForMaskedLM"),yZr.forEach(t),U5o=r(bAe," (SqueezeBERT model)"),bAe.forEach(t),J5o=i(H),x1=n(H,"LI",{});var vAe=s(x1);xie=n(vAe,"STRONG",{});var LZr=s(xie);Y5o=r(LZr,"tapas"),LZr.forEach(t),K5o=r(vAe," \u2014 "),aj=n(vAe,"A",{href:!0});var xZr=s(aj);Z5o=r(xZr,"TapasForMaskedLM"),xZr.forEach(t),eCo=r(vAe," (TAPAS model)"),vAe.forEach(t),oCo=i(H),$1=n(H,"LI",{});var FAe=s($1);$ie=n(FAe,"STRONG",{});var $Zr=s($ie);rCo=r($Zr,"wav2vec2"),$Zr.forEach(t),tCo=r(FAe," \u2014 "),kie=n(FAe,"CODE",{});var kZr=s(kie);aCo=r(kZr,"Wav2Vec2ForMaskedLM"),kZr.forEach(t),nCo=r(FAe," (Wav2Vec2 model)"),FAe.forEach(t),sCo=i(H),k1=n(H,"LI",{});var TAe=s(k1);Sie=n(TAe,"STRONG",{});var SZr=s(Sie);lCo=r(SZr,"xlm"),SZr.forEach(t),iCo=r(TAe," \u2014 "),nj=n(TAe,"A",{href:!0});var RZr=s(nj);dCo=r(RZr,"XLMWithLMHeadModel"),RZr.forEach(t),cCo=r(TAe," (XLM model)"),TAe.forEach(t),fCo=i(H),S1=n(H,"LI",{});var MAe=s(S1);Rie=n(MAe,"STRONG",{});var BZr=s(Rie);mCo=r(BZr,"xlm-roberta"),BZr.forEach(t),gCo=r(MAe," \u2014 "),sj=n(MAe,"A",{href:!0});var PZr=s(sj);hCo=r(PZr,"XLMRobertaForMaskedLM"),PZr.forEach(t),pCo=r(MAe," (XLM-RoBERTa model)"),MAe.forEach(t),uCo=i(H),R1=n(H,"LI",{});var EAe=s(R1);Bie=n(EAe,"STRONG",{});var IZr=s(Bie);_Co=r(IZr,"xlm-roberta-xl"),IZr.forEach(t),bCo=r(EAe," \u2014 "),lj=n(EAe,"A",{href:!0});var qZr=s(lj);vCo=r(qZr,"XLMRobertaXLForMaskedLM"),qZr.forEach(t),FCo=r(EAe," (XLM-RoBERTa-XL model)"),EAe.forEach(t),TCo=i(H),B1=n(H,"LI",{});var CAe=s(B1);Pie=n(CAe,"STRONG",{});var NZr=s(Pie);MCo=r(NZr,"yoso"),NZr.forEach(t),ECo=r(CAe," \u2014 "),ij=n(CAe,"A",{href:!0});var jZr=s(ij);CCo=r(jZr,"YosoForMaskedLM"),jZr.forEach(t),wCo=r(CAe," (YOSO model)"),CAe.forEach(t),H.forEach(t),ACo=i(Zt),P1=n(Zt,"P",{});var wAe=s(P1);yCo=r(wAe,"The model is set in evaluation mode by default using "),Iie=n(wAe,"CODE",{});var DZr=s(Iie);LCo=r(DZr,"model.eval()"),DZr.forEach(t),xCo=r(wAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qie=n(wAe,"CODE",{});var GZr=s(qie);$Co=r(GZr,"model.train()"),GZr.forEach(t),wAe.forEach(t),kCo=i(Zt),T(I1.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),HBe=i(f),Li=n(f,"H2",{class:!0});var JIe=s(Li);q1=n(JIe,"A",{id:!0,class:!0,href:!0});var OZr=s(q1);Nie=n(OZr,"SPAN",{});var VZr=s(Nie);T(vA.$$.fragment,VZr),VZr.forEach(t),OZr.forEach(t),SCo=i(JIe),jie=n(JIe,"SPAN",{});var XZr=s(jie);RCo=r(XZr,"AutoModelForSeq2SeqLM"),XZr.forEach(t),JIe.forEach(t),UBe=i(f),So=n(f,"DIV",{class:!0});var Ds=s(So);T(FA.$$.fragment,Ds),BCo=i(Ds),xi=n(Ds,"P",{});var kY=s(xi);PCo=r(kY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dj=n(kY,"A",{href:!0});var zZr=s(dj);ICo=r(zZr,"from_pretrained()"),zZr.forEach(t),qCo=r(kY," class method or the "),cj=n(kY,"A",{href:!0});var QZr=s(cj);NCo=r(QZr,"from_config()"),QZr.forEach(t),jCo=r(kY,` class
method.`),kY.forEach(t),DCo=i(Ds),TA=n(Ds,"P",{});var YIe=s(TA);GCo=r(YIe,"This class cannot be instantiated directly using "),Die=n(YIe,"CODE",{});var WZr=s(Die);OCo=r(WZr,"__init__()"),WZr.forEach(t),VCo=r(YIe," (throws an error)."),YIe.forEach(t),XCo=i(Ds),tt=n(Ds,"DIV",{class:!0});var DC=s(tt);T(MA.$$.fragment,DC),zCo=i(DC),Gie=n(DC,"P",{});var HZr=s(Gie);QCo=r(HZr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),HZr.forEach(t),WCo=i(DC),$i=n(DC,"P",{});var SY=s($i);HCo=r(SY,`Note:
Loading a model from its configuration file does `),Oie=n(SY,"STRONG",{});var UZr=s(Oie);UCo=r(UZr,"not"),UZr.forEach(t),JCo=r(SY,` load the model weights. It only affects the
model\u2019s configuration. Use `),fj=n(SY,"A",{href:!0});var JZr=s(fj);YCo=r(JZr,"from_pretrained()"),JZr.forEach(t),KCo=r(SY," to load the model weights."),SY.forEach(t),ZCo=i(DC),T(N1.$$.fragment,DC),DC.forEach(t),e3o=i(Ds),Ke=n(Ds,"DIV",{class:!0});var ea=s(Ke);T(EA.$$.fragment,ea),o3o=i(ea),Vie=n(ea,"P",{});var YZr=s(Vie);r3o=r(YZr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),YZr.forEach(t),t3o=i(ea),ya=n(ea,"P",{});var GC=s(ya);a3o=r(GC,"The model class to instantiate is selected based on the "),Xie=n(GC,"CODE",{});var KZr=s(Xie);n3o=r(KZr,"model_type"),KZr.forEach(t),s3o=r(GC,` property of the config object (either
passed as an argument or loaded from `),zie=n(GC,"CODE",{});var ZZr=s(zie);l3o=r(ZZr,"pretrained_model_name_or_path"),ZZr.forEach(t),i3o=r(GC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qie=n(GC,"CODE",{});var eet=s(Qie);d3o=r(eet,"pretrained_model_name_or_path"),eet.forEach(t),c3o=r(GC,":"),GC.forEach(t),f3o=i(ea),he=n(ea,"UL",{});var ue=s(he);j1=n(ue,"LI",{});var AAe=s(j1);Wie=n(AAe,"STRONG",{});var oet=s(Wie);m3o=r(oet,"bart"),oet.forEach(t),g3o=r(AAe," \u2014 "),mj=n(AAe,"A",{href:!0});var ret=s(mj);h3o=r(ret,"BartForConditionalGeneration"),ret.forEach(t),p3o=r(AAe," (BART model)"),AAe.forEach(t),u3o=i(ue),D1=n(ue,"LI",{});var yAe=s(D1);Hie=n(yAe,"STRONG",{});var tet=s(Hie);_3o=r(tet,"bigbird_pegasus"),tet.forEach(t),b3o=r(yAe," \u2014 "),gj=n(yAe,"A",{href:!0});var aet=s(gj);v3o=r(aet,"BigBirdPegasusForConditionalGeneration"),aet.forEach(t),F3o=r(yAe," (BigBirdPegasus model)"),yAe.forEach(t),T3o=i(ue),G1=n(ue,"LI",{});var LAe=s(G1);Uie=n(LAe,"STRONG",{});var net=s(Uie);M3o=r(net,"blenderbot"),net.forEach(t),E3o=r(LAe," \u2014 "),hj=n(LAe,"A",{href:!0});var set=s(hj);C3o=r(set,"BlenderbotForConditionalGeneration"),set.forEach(t),w3o=r(LAe," (Blenderbot model)"),LAe.forEach(t),A3o=i(ue),O1=n(ue,"LI",{});var xAe=s(O1);Jie=n(xAe,"STRONG",{});var iet=s(Jie);y3o=r(iet,"blenderbot-small"),iet.forEach(t),L3o=r(xAe," \u2014 "),pj=n(xAe,"A",{href:!0});var det=s(pj);x3o=r(det,"BlenderbotSmallForConditionalGeneration"),det.forEach(t),$3o=r(xAe," (BlenderbotSmall model)"),xAe.forEach(t),k3o=i(ue),V1=n(ue,"LI",{});var $Ae=s(V1);Yie=n($Ae,"STRONG",{});var cet=s(Yie);S3o=r(cet,"encoder-decoder"),cet.forEach(t),R3o=r($Ae," \u2014 "),uj=n($Ae,"A",{href:!0});var fet=s(uj);B3o=r(fet,"EncoderDecoderModel"),fet.forEach(t),P3o=r($Ae," (Encoder decoder model)"),$Ae.forEach(t),I3o=i(ue),X1=n(ue,"LI",{});var kAe=s(X1);Kie=n(kAe,"STRONG",{});var met=s(Kie);q3o=r(met,"fsmt"),met.forEach(t),N3o=r(kAe," \u2014 "),_j=n(kAe,"A",{href:!0});var get=s(_j);j3o=r(get,"FSMTForConditionalGeneration"),get.forEach(t),D3o=r(kAe," (FairSeq Machine-Translation model)"),kAe.forEach(t),G3o=i(ue),z1=n(ue,"LI",{});var SAe=s(z1);Zie=n(SAe,"STRONG",{});var het=s(Zie);O3o=r(het,"led"),het.forEach(t),V3o=r(SAe," \u2014 "),bj=n(SAe,"A",{href:!0});var pet=s(bj);X3o=r(pet,"LEDForConditionalGeneration"),pet.forEach(t),z3o=r(SAe," (LED model)"),SAe.forEach(t),Q3o=i(ue),Q1=n(ue,"LI",{});var RAe=s(Q1);ede=n(RAe,"STRONG",{});var uet=s(ede);W3o=r(uet,"m2m_100"),uet.forEach(t),H3o=r(RAe," \u2014 "),vj=n(RAe,"A",{href:!0});var _et=s(vj);U3o=r(_et,"M2M100ForConditionalGeneration"),_et.forEach(t),J3o=r(RAe," (M2M100 model)"),RAe.forEach(t),Y3o=i(ue),W1=n(ue,"LI",{});var BAe=s(W1);ode=n(BAe,"STRONG",{});var bet=s(ode);K3o=r(bet,"marian"),bet.forEach(t),Z3o=r(BAe," \u2014 "),Fj=n(BAe,"A",{href:!0});var vet=s(Fj);ewo=r(vet,"MarianMTModel"),vet.forEach(t),owo=r(BAe," (Marian model)"),BAe.forEach(t),rwo=i(ue),H1=n(ue,"LI",{});var PAe=s(H1);rde=n(PAe,"STRONG",{});var Fet=s(rde);two=r(Fet,"mbart"),Fet.forEach(t),awo=r(PAe," \u2014 "),Tj=n(PAe,"A",{href:!0});var Tet=s(Tj);nwo=r(Tet,"MBartForConditionalGeneration"),Tet.forEach(t),swo=r(PAe," (mBART model)"),PAe.forEach(t),lwo=i(ue),U1=n(ue,"LI",{});var IAe=s(U1);tde=n(IAe,"STRONG",{});var Met=s(tde);iwo=r(Met,"mt5"),Met.forEach(t),dwo=r(IAe," \u2014 "),Mj=n(IAe,"A",{href:!0});var Eet=s(Mj);cwo=r(Eet,"MT5ForConditionalGeneration"),Eet.forEach(t),fwo=r(IAe," (mT5 model)"),IAe.forEach(t),mwo=i(ue),J1=n(ue,"LI",{});var qAe=s(J1);ade=n(qAe,"STRONG",{});var Cet=s(ade);gwo=r(Cet,"pegasus"),Cet.forEach(t),hwo=r(qAe," \u2014 "),Ej=n(qAe,"A",{href:!0});var wet=s(Ej);pwo=r(wet,"PegasusForConditionalGeneration"),wet.forEach(t),uwo=r(qAe," (Pegasus model)"),qAe.forEach(t),_wo=i(ue),Y1=n(ue,"LI",{});var NAe=s(Y1);nde=n(NAe,"STRONG",{});var Aet=s(nde);bwo=r(Aet,"plbart"),Aet.forEach(t),vwo=r(NAe," \u2014 "),Cj=n(NAe,"A",{href:!0});var yet=s(Cj);Fwo=r(yet,"PLBartForConditionalGeneration"),yet.forEach(t),Two=r(NAe," (PLBart model)"),NAe.forEach(t),Mwo=i(ue),K1=n(ue,"LI",{});var jAe=s(K1);sde=n(jAe,"STRONG",{});var Let=s(sde);Ewo=r(Let,"prophetnet"),Let.forEach(t),Cwo=r(jAe," \u2014 "),wj=n(jAe,"A",{href:!0});var xet=s(wj);wwo=r(xet,"ProphetNetForConditionalGeneration"),xet.forEach(t),Awo=r(jAe," (ProphetNet model)"),jAe.forEach(t),ywo=i(ue),Z1=n(ue,"LI",{});var DAe=s(Z1);lde=n(DAe,"STRONG",{});var $et=s(lde);Lwo=r($et,"t5"),$et.forEach(t),xwo=r(DAe," \u2014 "),Aj=n(DAe,"A",{href:!0});var ket=s(Aj);$wo=r(ket,"T5ForConditionalGeneration"),ket.forEach(t),kwo=r(DAe," (T5 model)"),DAe.forEach(t),Swo=i(ue),eb=n(ue,"LI",{});var GAe=s(eb);ide=n(GAe,"STRONG",{});var Set=s(ide);Rwo=r(Set,"tapex"),Set.forEach(t),Bwo=r(GAe," \u2014 "),yj=n(GAe,"A",{href:!0});var Ret=s(yj);Pwo=r(Ret,"BartForConditionalGeneration"),Ret.forEach(t),Iwo=r(GAe," (TAPEX model)"),GAe.forEach(t),qwo=i(ue),ob=n(ue,"LI",{});var OAe=s(ob);dde=n(OAe,"STRONG",{});var Bet=s(dde);Nwo=r(Bet,"xlm-prophetnet"),Bet.forEach(t),jwo=r(OAe," \u2014 "),Lj=n(OAe,"A",{href:!0});var Pet=s(Lj);Dwo=r(Pet,"XLMProphetNetForConditionalGeneration"),Pet.forEach(t),Gwo=r(OAe," (XLMProphetNet model)"),OAe.forEach(t),ue.forEach(t),Owo=i(ea),rb=n(ea,"P",{});var VAe=s(rb);Vwo=r(VAe,"The model is set in evaluation mode by default using "),cde=n(VAe,"CODE",{});var Iet=s(cde);Xwo=r(Iet,"model.eval()"),Iet.forEach(t),zwo=r(VAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fde=n(VAe,"CODE",{});var qet=s(fde);Qwo=r(qet,"model.train()"),qet.forEach(t),VAe.forEach(t),Wwo=i(ea),T(tb.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),JBe=i(f),ki=n(f,"H2",{class:!0});var KIe=s(ki);ab=n(KIe,"A",{id:!0,class:!0,href:!0});var Net=s(ab);mde=n(Net,"SPAN",{});var jet=s(mde);T(CA.$$.fragment,jet),jet.forEach(t),Net.forEach(t),Hwo=i(KIe),gde=n(KIe,"SPAN",{});var Det=s(gde);Uwo=r(Det,"AutoModelForSequenceClassification"),Det.forEach(t),KIe.forEach(t),YBe=i(f),Ro=n(f,"DIV",{class:!0});var Gs=s(Ro);T(wA.$$.fragment,Gs),Jwo=i(Gs),Si=n(Gs,"P",{});var RY=s(Si);Ywo=r(RY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xj=n(RY,"A",{href:!0});var Get=s(xj);Kwo=r(Get,"from_pretrained()"),Get.forEach(t),Zwo=r(RY," class method or the "),$j=n(RY,"A",{href:!0});var Oet=s($j);eAo=r(Oet,"from_config()"),Oet.forEach(t),oAo=r(RY,` class
method.`),RY.forEach(t),rAo=i(Gs),AA=n(Gs,"P",{});var ZIe=s(AA);tAo=r(ZIe,"This class cannot be instantiated directly using "),hde=n(ZIe,"CODE",{});var Vet=s(hde);aAo=r(Vet,"__init__()"),Vet.forEach(t),nAo=r(ZIe," (throws an error)."),ZIe.forEach(t),sAo=i(Gs),at=n(Gs,"DIV",{class:!0});var OC=s(at);T(yA.$$.fragment,OC),lAo=i(OC),pde=n(OC,"P",{});var Xet=s(pde);iAo=r(Xet,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Xet.forEach(t),dAo=i(OC),Ri=n(OC,"P",{});var BY=s(Ri);cAo=r(BY,`Note:
Loading a model from its configuration file does `),ude=n(BY,"STRONG",{});var zet=s(ude);fAo=r(zet,"not"),zet.forEach(t),mAo=r(BY,` load the model weights. It only affects the
model\u2019s configuration. Use `),kj=n(BY,"A",{href:!0});var Qet=s(kj);gAo=r(Qet,"from_pretrained()"),Qet.forEach(t),hAo=r(BY," to load the model weights."),BY.forEach(t),pAo=i(OC),T(nb.$$.fragment,OC),OC.forEach(t),uAo=i(Gs),Ze=n(Gs,"DIV",{class:!0});var oa=s(Ze);T(LA.$$.fragment,oa),_Ao=i(oa),_de=n(oa,"P",{});var Wet=s(_de);bAo=r(Wet,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Wet.forEach(t),vAo=i(oa),La=n(oa,"P",{});var VC=s(La);FAo=r(VC,"The model class to instantiate is selected based on the "),bde=n(VC,"CODE",{});var Het=s(bde);TAo=r(Het,"model_type"),Het.forEach(t),MAo=r(VC,` property of the config object (either
passed as an argument or loaded from `),vde=n(VC,"CODE",{});var Uet=s(vde);EAo=r(Uet,"pretrained_model_name_or_path"),Uet.forEach(t),CAo=r(VC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=n(VC,"CODE",{});var Jet=s(Fde);wAo=r(Jet,"pretrained_model_name_or_path"),Jet.forEach(t),AAo=r(VC,":"),VC.forEach(t),yAo=i(oa),q=n(oa,"UL",{});var N=s(q);sb=n(N,"LI",{});var XAe=s(sb);Tde=n(XAe,"STRONG",{});var Yet=s(Tde);LAo=r(Yet,"albert"),Yet.forEach(t),xAo=r(XAe," \u2014 "),Sj=n(XAe,"A",{href:!0});var Ket=s(Sj);$Ao=r(Ket,"AlbertForSequenceClassification"),Ket.forEach(t),kAo=r(XAe," (ALBERT model)"),XAe.forEach(t),SAo=i(N),lb=n(N,"LI",{});var zAe=s(lb);Mde=n(zAe,"STRONG",{});var Zet=s(Mde);RAo=r(Zet,"bart"),Zet.forEach(t),BAo=r(zAe," \u2014 "),Rj=n(zAe,"A",{href:!0});var eot=s(Rj);PAo=r(eot,"BartForSequenceClassification"),eot.forEach(t),IAo=r(zAe," (BART model)"),zAe.forEach(t),qAo=i(N),ib=n(N,"LI",{});var QAe=s(ib);Ede=n(QAe,"STRONG",{});var oot=s(Ede);NAo=r(oot,"bert"),oot.forEach(t),jAo=r(QAe," \u2014 "),Bj=n(QAe,"A",{href:!0});var rot=s(Bj);DAo=r(rot,"BertForSequenceClassification"),rot.forEach(t),GAo=r(QAe," (BERT model)"),QAe.forEach(t),OAo=i(N),db=n(N,"LI",{});var WAe=s(db);Cde=n(WAe,"STRONG",{});var tot=s(Cde);VAo=r(tot,"big_bird"),tot.forEach(t),XAo=r(WAe," \u2014 "),Pj=n(WAe,"A",{href:!0});var aot=s(Pj);zAo=r(aot,"BigBirdForSequenceClassification"),aot.forEach(t),QAo=r(WAe," (BigBird model)"),WAe.forEach(t),WAo=i(N),cb=n(N,"LI",{});var HAe=s(cb);wde=n(HAe,"STRONG",{});var not=s(wde);HAo=r(not,"bigbird_pegasus"),not.forEach(t),UAo=r(HAe," \u2014 "),Ij=n(HAe,"A",{href:!0});var sot=s(Ij);JAo=r(sot,"BigBirdPegasusForSequenceClassification"),sot.forEach(t),YAo=r(HAe," (BigBirdPegasus model)"),HAe.forEach(t),KAo=i(N),fb=n(N,"LI",{});var UAe=s(fb);Ade=n(UAe,"STRONG",{});var lot=s(Ade);ZAo=r(lot,"camembert"),lot.forEach(t),e6o=r(UAe," \u2014 "),qj=n(UAe,"A",{href:!0});var iot=s(qj);o6o=r(iot,"CamembertForSequenceClassification"),iot.forEach(t),r6o=r(UAe," (CamemBERT model)"),UAe.forEach(t),t6o=i(N),mb=n(N,"LI",{});var JAe=s(mb);yde=n(JAe,"STRONG",{});var dot=s(yde);a6o=r(dot,"canine"),dot.forEach(t),n6o=r(JAe," \u2014 "),Nj=n(JAe,"A",{href:!0});var cot=s(Nj);s6o=r(cot,"CanineForSequenceClassification"),cot.forEach(t),l6o=r(JAe," (Canine model)"),JAe.forEach(t),i6o=i(N),gb=n(N,"LI",{});var YAe=s(gb);Lde=n(YAe,"STRONG",{});var fot=s(Lde);d6o=r(fot,"convbert"),fot.forEach(t),c6o=r(YAe," \u2014 "),jj=n(YAe,"A",{href:!0});var mot=s(jj);f6o=r(mot,"ConvBertForSequenceClassification"),mot.forEach(t),m6o=r(YAe," (ConvBERT model)"),YAe.forEach(t),g6o=i(N),hb=n(N,"LI",{});var KAe=s(hb);xde=n(KAe,"STRONG",{});var got=s(xde);h6o=r(got,"ctrl"),got.forEach(t),p6o=r(KAe," \u2014 "),Dj=n(KAe,"A",{href:!0});var hot=s(Dj);u6o=r(hot,"CTRLForSequenceClassification"),hot.forEach(t),_6o=r(KAe," (CTRL model)"),KAe.forEach(t),b6o=i(N),pb=n(N,"LI",{});var ZAe=s(pb);$de=n(ZAe,"STRONG",{});var pot=s($de);v6o=r(pot,"data2vec-text"),pot.forEach(t),F6o=r(ZAe," \u2014 "),Gj=n(ZAe,"A",{href:!0});var uot=s(Gj);T6o=r(uot,"Data2VecTextForSequenceClassification"),uot.forEach(t),M6o=r(ZAe," (Data2VecText model)"),ZAe.forEach(t),E6o=i(N),ub=n(N,"LI",{});var e6e=s(ub);kde=n(e6e,"STRONG",{});var _ot=s(kde);C6o=r(_ot,"deberta"),_ot.forEach(t),w6o=r(e6e," \u2014 "),Oj=n(e6e,"A",{href:!0});var bot=s(Oj);A6o=r(bot,"DebertaForSequenceClassification"),bot.forEach(t),y6o=r(e6e," (DeBERTa model)"),e6e.forEach(t),L6o=i(N),_b=n(N,"LI",{});var o6e=s(_b);Sde=n(o6e,"STRONG",{});var vot=s(Sde);x6o=r(vot,"deberta-v2"),vot.forEach(t),$6o=r(o6e," \u2014 "),Vj=n(o6e,"A",{href:!0});var Fot=s(Vj);k6o=r(Fot,"DebertaV2ForSequenceClassification"),Fot.forEach(t),S6o=r(o6e," (DeBERTa-v2 model)"),o6e.forEach(t),R6o=i(N),bb=n(N,"LI",{});var r6e=s(bb);Rde=n(r6e,"STRONG",{});var Tot=s(Rde);B6o=r(Tot,"distilbert"),Tot.forEach(t),P6o=r(r6e," \u2014 "),Xj=n(r6e,"A",{href:!0});var Mot=s(Xj);I6o=r(Mot,"DistilBertForSequenceClassification"),Mot.forEach(t),q6o=r(r6e," (DistilBERT model)"),r6e.forEach(t),N6o=i(N),vb=n(N,"LI",{});var t6e=s(vb);Bde=n(t6e,"STRONG",{});var Eot=s(Bde);j6o=r(Eot,"electra"),Eot.forEach(t),D6o=r(t6e," \u2014 "),zj=n(t6e,"A",{href:!0});var Cot=s(zj);G6o=r(Cot,"ElectraForSequenceClassification"),Cot.forEach(t),O6o=r(t6e," (ELECTRA model)"),t6e.forEach(t),V6o=i(N),Fb=n(N,"LI",{});var a6e=s(Fb);Pde=n(a6e,"STRONG",{});var wot=s(Pde);X6o=r(wot,"flaubert"),wot.forEach(t),z6o=r(a6e," \u2014 "),Qj=n(a6e,"A",{href:!0});var Aot=s(Qj);Q6o=r(Aot,"FlaubertForSequenceClassification"),Aot.forEach(t),W6o=r(a6e," (FlauBERT model)"),a6e.forEach(t),H6o=i(N),Tb=n(N,"LI",{});var n6e=s(Tb);Ide=n(n6e,"STRONG",{});var yot=s(Ide);U6o=r(yot,"fnet"),yot.forEach(t),J6o=r(n6e," \u2014 "),Wj=n(n6e,"A",{href:!0});var Lot=s(Wj);Y6o=r(Lot,"FNetForSequenceClassification"),Lot.forEach(t),K6o=r(n6e," (FNet model)"),n6e.forEach(t),Z6o=i(N),Mb=n(N,"LI",{});var s6e=s(Mb);qde=n(s6e,"STRONG",{});var xot=s(qde);eyo=r(xot,"funnel"),xot.forEach(t),oyo=r(s6e," \u2014 "),Hj=n(s6e,"A",{href:!0});var $ot=s(Hj);ryo=r($ot,"FunnelForSequenceClassification"),$ot.forEach(t),tyo=r(s6e," (Funnel Transformer model)"),s6e.forEach(t),ayo=i(N),Eb=n(N,"LI",{});var l6e=s(Eb);Nde=n(l6e,"STRONG",{});var kot=s(Nde);nyo=r(kot,"gpt2"),kot.forEach(t),syo=r(l6e," \u2014 "),Uj=n(l6e,"A",{href:!0});var Sot=s(Uj);lyo=r(Sot,"GPT2ForSequenceClassification"),Sot.forEach(t),iyo=r(l6e," (OpenAI GPT-2 model)"),l6e.forEach(t),dyo=i(N),Cb=n(N,"LI",{});var i6e=s(Cb);jde=n(i6e,"STRONG",{});var Rot=s(jde);cyo=r(Rot,"gpt_neo"),Rot.forEach(t),fyo=r(i6e," \u2014 "),Jj=n(i6e,"A",{href:!0});var Bot=s(Jj);myo=r(Bot,"GPTNeoForSequenceClassification"),Bot.forEach(t),gyo=r(i6e," (GPT Neo model)"),i6e.forEach(t),hyo=i(N),wb=n(N,"LI",{});var d6e=s(wb);Dde=n(d6e,"STRONG",{});var Pot=s(Dde);pyo=r(Pot,"gptj"),Pot.forEach(t),uyo=r(d6e," \u2014 "),Yj=n(d6e,"A",{href:!0});var Iot=s(Yj);_yo=r(Iot,"GPTJForSequenceClassification"),Iot.forEach(t),byo=r(d6e," (GPT-J model)"),d6e.forEach(t),vyo=i(N),Ab=n(N,"LI",{});var c6e=s(Ab);Gde=n(c6e,"STRONG",{});var qot=s(Gde);Fyo=r(qot,"ibert"),qot.forEach(t),Tyo=r(c6e," \u2014 "),Kj=n(c6e,"A",{href:!0});var Not=s(Kj);Myo=r(Not,"IBertForSequenceClassification"),Not.forEach(t),Eyo=r(c6e," (I-BERT model)"),c6e.forEach(t),Cyo=i(N),yb=n(N,"LI",{});var f6e=s(yb);Ode=n(f6e,"STRONG",{});var jot=s(Ode);wyo=r(jot,"layoutlm"),jot.forEach(t),Ayo=r(f6e," \u2014 "),Zj=n(f6e,"A",{href:!0});var Dot=s(Zj);yyo=r(Dot,"LayoutLMForSequenceClassification"),Dot.forEach(t),Lyo=r(f6e," (LayoutLM model)"),f6e.forEach(t),xyo=i(N),Lb=n(N,"LI",{});var m6e=s(Lb);Vde=n(m6e,"STRONG",{});var Got=s(Vde);$yo=r(Got,"layoutlmv2"),Got.forEach(t),kyo=r(m6e," \u2014 "),eD=n(m6e,"A",{href:!0});var Oot=s(eD);Syo=r(Oot,"LayoutLMv2ForSequenceClassification"),Oot.forEach(t),Ryo=r(m6e," (LayoutLMv2 model)"),m6e.forEach(t),Byo=i(N),xb=n(N,"LI",{});var g6e=s(xb);Xde=n(g6e,"STRONG",{});var Vot=s(Xde);Pyo=r(Vot,"led"),Vot.forEach(t),Iyo=r(g6e," \u2014 "),oD=n(g6e,"A",{href:!0});var Xot=s(oD);qyo=r(Xot,"LEDForSequenceClassification"),Xot.forEach(t),Nyo=r(g6e," (LED model)"),g6e.forEach(t),jyo=i(N),$b=n(N,"LI",{});var h6e=s($b);zde=n(h6e,"STRONG",{});var zot=s(zde);Dyo=r(zot,"longformer"),zot.forEach(t),Gyo=r(h6e," \u2014 "),rD=n(h6e,"A",{href:!0});var Qot=s(rD);Oyo=r(Qot,"LongformerForSequenceClassification"),Qot.forEach(t),Vyo=r(h6e," (Longformer model)"),h6e.forEach(t),Xyo=i(N),kb=n(N,"LI",{});var p6e=s(kb);Qde=n(p6e,"STRONG",{});var Wot=s(Qde);zyo=r(Wot,"mbart"),Wot.forEach(t),Qyo=r(p6e," \u2014 "),tD=n(p6e,"A",{href:!0});var Hot=s(tD);Wyo=r(Hot,"MBartForSequenceClassification"),Hot.forEach(t),Hyo=r(p6e," (mBART model)"),p6e.forEach(t),Uyo=i(N),Sb=n(N,"LI",{});var u6e=s(Sb);Wde=n(u6e,"STRONG",{});var Uot=s(Wde);Jyo=r(Uot,"megatron-bert"),Uot.forEach(t),Yyo=r(u6e," \u2014 "),aD=n(u6e,"A",{href:!0});var Jot=s(aD);Kyo=r(Jot,"MegatronBertForSequenceClassification"),Jot.forEach(t),Zyo=r(u6e," (MegatronBert model)"),u6e.forEach(t),eLo=i(N),Rb=n(N,"LI",{});var _6e=s(Rb);Hde=n(_6e,"STRONG",{});var Yot=s(Hde);oLo=r(Yot,"mobilebert"),Yot.forEach(t),rLo=r(_6e," \u2014 "),nD=n(_6e,"A",{href:!0});var Kot=s(nD);tLo=r(Kot,"MobileBertForSequenceClassification"),Kot.forEach(t),aLo=r(_6e," (MobileBERT model)"),_6e.forEach(t),nLo=i(N),Bb=n(N,"LI",{});var b6e=s(Bb);Ude=n(b6e,"STRONG",{});var Zot=s(Ude);sLo=r(Zot,"mpnet"),Zot.forEach(t),lLo=r(b6e," \u2014 "),sD=n(b6e,"A",{href:!0});var ert=s(sD);iLo=r(ert,"MPNetForSequenceClassification"),ert.forEach(t),dLo=r(b6e," (MPNet model)"),b6e.forEach(t),cLo=i(N),Pb=n(N,"LI",{});var v6e=s(Pb);Jde=n(v6e,"STRONG",{});var ort=s(Jde);fLo=r(ort,"nystromformer"),ort.forEach(t),mLo=r(v6e," \u2014 "),lD=n(v6e,"A",{href:!0});var rrt=s(lD);gLo=r(rrt,"NystromformerForSequenceClassification"),rrt.forEach(t),hLo=r(v6e," (Nystromformer model)"),v6e.forEach(t),pLo=i(N),Ib=n(N,"LI",{});var F6e=s(Ib);Yde=n(F6e,"STRONG",{});var trt=s(Yde);uLo=r(trt,"openai-gpt"),trt.forEach(t),_Lo=r(F6e," \u2014 "),iD=n(F6e,"A",{href:!0});var art=s(iD);bLo=r(art,"OpenAIGPTForSequenceClassification"),art.forEach(t),vLo=r(F6e," (OpenAI GPT model)"),F6e.forEach(t),FLo=i(N),qb=n(N,"LI",{});var T6e=s(qb);Kde=n(T6e,"STRONG",{});var nrt=s(Kde);TLo=r(nrt,"perceiver"),nrt.forEach(t),MLo=r(T6e," \u2014 "),dD=n(T6e,"A",{href:!0});var srt=s(dD);ELo=r(srt,"PerceiverForSequenceClassification"),srt.forEach(t),CLo=r(T6e," (Perceiver model)"),T6e.forEach(t),wLo=i(N),Nb=n(N,"LI",{});var M6e=s(Nb);Zde=n(M6e,"STRONG",{});var lrt=s(Zde);ALo=r(lrt,"plbart"),lrt.forEach(t),yLo=r(M6e," \u2014 "),cD=n(M6e,"A",{href:!0});var irt=s(cD);LLo=r(irt,"PLBartForSequenceClassification"),irt.forEach(t),xLo=r(M6e," (PLBart model)"),M6e.forEach(t),$Lo=i(N),jb=n(N,"LI",{});var E6e=s(jb);ece=n(E6e,"STRONG",{});var drt=s(ece);kLo=r(drt,"qdqbert"),drt.forEach(t),SLo=r(E6e," \u2014 "),fD=n(E6e,"A",{href:!0});var crt=s(fD);RLo=r(crt,"QDQBertForSequenceClassification"),crt.forEach(t),BLo=r(E6e," (QDQBert model)"),E6e.forEach(t),PLo=i(N),Db=n(N,"LI",{});var C6e=s(Db);oce=n(C6e,"STRONG",{});var frt=s(oce);ILo=r(frt,"reformer"),frt.forEach(t),qLo=r(C6e," \u2014 "),mD=n(C6e,"A",{href:!0});var mrt=s(mD);NLo=r(mrt,"ReformerForSequenceClassification"),mrt.forEach(t),jLo=r(C6e," (Reformer model)"),C6e.forEach(t),DLo=i(N),Gb=n(N,"LI",{});var w6e=s(Gb);rce=n(w6e,"STRONG",{});var grt=s(rce);GLo=r(grt,"rembert"),grt.forEach(t),OLo=r(w6e," \u2014 "),gD=n(w6e,"A",{href:!0});var hrt=s(gD);VLo=r(hrt,"RemBertForSequenceClassification"),hrt.forEach(t),XLo=r(w6e," (RemBERT model)"),w6e.forEach(t),zLo=i(N),Ob=n(N,"LI",{});var A6e=s(Ob);tce=n(A6e,"STRONG",{});var prt=s(tce);QLo=r(prt,"roberta"),prt.forEach(t),WLo=r(A6e," \u2014 "),hD=n(A6e,"A",{href:!0});var urt=s(hD);HLo=r(urt,"RobertaForSequenceClassification"),urt.forEach(t),ULo=r(A6e," (RoBERTa model)"),A6e.forEach(t),JLo=i(N),Vb=n(N,"LI",{});var y6e=s(Vb);ace=n(y6e,"STRONG",{});var _rt=s(ace);YLo=r(_rt,"roformer"),_rt.forEach(t),KLo=r(y6e," \u2014 "),pD=n(y6e,"A",{href:!0});var brt=s(pD);ZLo=r(brt,"RoFormerForSequenceClassification"),brt.forEach(t),e8o=r(y6e," (RoFormer model)"),y6e.forEach(t),o8o=i(N),Xb=n(N,"LI",{});var L6e=s(Xb);nce=n(L6e,"STRONG",{});var vrt=s(nce);r8o=r(vrt,"squeezebert"),vrt.forEach(t),t8o=r(L6e," \u2014 "),uD=n(L6e,"A",{href:!0});var Frt=s(uD);a8o=r(Frt,"SqueezeBertForSequenceClassification"),Frt.forEach(t),n8o=r(L6e," (SqueezeBERT model)"),L6e.forEach(t),s8o=i(N),zb=n(N,"LI",{});var x6e=s(zb);sce=n(x6e,"STRONG",{});var Trt=s(sce);l8o=r(Trt,"tapas"),Trt.forEach(t),i8o=r(x6e," \u2014 "),_D=n(x6e,"A",{href:!0});var Mrt=s(_D);d8o=r(Mrt,"TapasForSequenceClassification"),Mrt.forEach(t),c8o=r(x6e," (TAPAS model)"),x6e.forEach(t),f8o=i(N),Qb=n(N,"LI",{});var $6e=s(Qb);lce=n($6e,"STRONG",{});var Ert=s(lce);m8o=r(Ert,"tapex"),Ert.forEach(t),g8o=r($6e," \u2014 "),bD=n($6e,"A",{href:!0});var Crt=s(bD);h8o=r(Crt,"BartForSequenceClassification"),Crt.forEach(t),p8o=r($6e," (TAPEX model)"),$6e.forEach(t),u8o=i(N),Wb=n(N,"LI",{});var k6e=s(Wb);ice=n(k6e,"STRONG",{});var wrt=s(ice);_8o=r(wrt,"transfo-xl"),wrt.forEach(t),b8o=r(k6e," \u2014 "),vD=n(k6e,"A",{href:!0});var Art=s(vD);v8o=r(Art,"TransfoXLForSequenceClassification"),Art.forEach(t),F8o=r(k6e," (Transformer-XL model)"),k6e.forEach(t),T8o=i(N),Hb=n(N,"LI",{});var S6e=s(Hb);dce=n(S6e,"STRONG",{});var yrt=s(dce);M8o=r(yrt,"xlm"),yrt.forEach(t),E8o=r(S6e," \u2014 "),FD=n(S6e,"A",{href:!0});var Lrt=s(FD);C8o=r(Lrt,"XLMForSequenceClassification"),Lrt.forEach(t),w8o=r(S6e," (XLM model)"),S6e.forEach(t),A8o=i(N),Ub=n(N,"LI",{});var R6e=s(Ub);cce=n(R6e,"STRONG",{});var xrt=s(cce);y8o=r(xrt,"xlm-roberta"),xrt.forEach(t),L8o=r(R6e," \u2014 "),TD=n(R6e,"A",{href:!0});var $rt=s(TD);x8o=r($rt,"XLMRobertaForSequenceClassification"),$rt.forEach(t),$8o=r(R6e," (XLM-RoBERTa model)"),R6e.forEach(t),k8o=i(N),Jb=n(N,"LI",{});var B6e=s(Jb);fce=n(B6e,"STRONG",{});var krt=s(fce);S8o=r(krt,"xlm-roberta-xl"),krt.forEach(t),R8o=r(B6e," \u2014 "),MD=n(B6e,"A",{href:!0});var Srt=s(MD);B8o=r(Srt,"XLMRobertaXLForSequenceClassification"),Srt.forEach(t),P8o=r(B6e," (XLM-RoBERTa-XL model)"),B6e.forEach(t),I8o=i(N),Yb=n(N,"LI",{});var P6e=s(Yb);mce=n(P6e,"STRONG",{});var Rrt=s(mce);q8o=r(Rrt,"xlnet"),Rrt.forEach(t),N8o=r(P6e," \u2014 "),ED=n(P6e,"A",{href:!0});var Brt=s(ED);j8o=r(Brt,"XLNetForSequenceClassification"),Brt.forEach(t),D8o=r(P6e," (XLNet model)"),P6e.forEach(t),G8o=i(N),Kb=n(N,"LI",{});var I6e=s(Kb);gce=n(I6e,"STRONG",{});var Prt=s(gce);O8o=r(Prt,"yoso"),Prt.forEach(t),V8o=r(I6e," \u2014 "),CD=n(I6e,"A",{href:!0});var Irt=s(CD);X8o=r(Irt,"YosoForSequenceClassification"),Irt.forEach(t),z8o=r(I6e," (YOSO model)"),I6e.forEach(t),N.forEach(t),Q8o=i(oa),Zb=n(oa,"P",{});var q6e=s(Zb);W8o=r(q6e,"The model is set in evaluation mode by default using "),hce=n(q6e,"CODE",{});var qrt=s(hce);H8o=r(qrt,"model.eval()"),qrt.forEach(t),U8o=r(q6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pce=n(q6e,"CODE",{});var Nrt=s(pce);J8o=r(Nrt,"model.train()"),Nrt.forEach(t),q6e.forEach(t),Y8o=i(oa),T(e2.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),KBe=i(f),Bi=n(f,"H2",{class:!0});var eqe=s(Bi);o2=n(eqe,"A",{id:!0,class:!0,href:!0});var jrt=s(o2);uce=n(jrt,"SPAN",{});var Drt=s(uce);T(xA.$$.fragment,Drt),Drt.forEach(t),jrt.forEach(t),K8o=i(eqe),_ce=n(eqe,"SPAN",{});var Grt=s(_ce);Z8o=r(Grt,"AutoModelForMultipleChoice"),Grt.forEach(t),eqe.forEach(t),ZBe=i(f),Bo=n(f,"DIV",{class:!0});var Os=s(Bo);T($A.$$.fragment,Os),exo=i(Os),Pi=n(Os,"P",{});var PY=s(Pi);oxo=r(PY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wD=n(PY,"A",{href:!0});var Ort=s(wD);rxo=r(Ort,"from_pretrained()"),Ort.forEach(t),txo=r(PY," class method or the "),AD=n(PY,"A",{href:!0});var Vrt=s(AD);axo=r(Vrt,"from_config()"),Vrt.forEach(t),nxo=r(PY,` class
method.`),PY.forEach(t),sxo=i(Os),kA=n(Os,"P",{});var oqe=s(kA);lxo=r(oqe,"This class cannot be instantiated directly using "),bce=n(oqe,"CODE",{});var Xrt=s(bce);ixo=r(Xrt,"__init__()"),Xrt.forEach(t),dxo=r(oqe," (throws an error)."),oqe.forEach(t),cxo=i(Os),nt=n(Os,"DIV",{class:!0});var XC=s(nt);T(SA.$$.fragment,XC),fxo=i(XC),vce=n(XC,"P",{});var zrt=s(vce);mxo=r(zrt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zrt.forEach(t),gxo=i(XC),Ii=n(XC,"P",{});var IY=s(Ii);hxo=r(IY,`Note:
Loading a model from its configuration file does `),Fce=n(IY,"STRONG",{});var Qrt=s(Fce);pxo=r(Qrt,"not"),Qrt.forEach(t),uxo=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),yD=n(IY,"A",{href:!0});var Wrt=s(yD);_xo=r(Wrt,"from_pretrained()"),Wrt.forEach(t),bxo=r(IY," to load the model weights."),IY.forEach(t),vxo=i(XC),T(r2.$$.fragment,XC),XC.forEach(t),Fxo=i(Os),eo=n(Os,"DIV",{class:!0});var ra=s(eo);T(RA.$$.fragment,ra),Txo=i(ra),Tce=n(ra,"P",{});var Hrt=s(Tce);Mxo=r(Hrt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Hrt.forEach(t),Exo=i(ra),xa=n(ra,"P",{});var zC=s(xa);Cxo=r(zC,"The model class to instantiate is selected based on the "),Mce=n(zC,"CODE",{});var Urt=s(Mce);wxo=r(Urt,"model_type"),Urt.forEach(t),Axo=r(zC,` property of the config object (either
passed as an argument or loaded from `),Ece=n(zC,"CODE",{});var Jrt=s(Ece);yxo=r(Jrt,"pretrained_model_name_or_path"),Jrt.forEach(t),Lxo=r(zC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cce=n(zC,"CODE",{});var Yrt=s(Cce);xxo=r(Yrt,"pretrained_model_name_or_path"),Yrt.forEach(t),$xo=r(zC,":"),zC.forEach(t),kxo=i(ra),Y=n(ra,"UL",{});var K=s(Y);t2=n(K,"LI",{});var N6e=s(t2);wce=n(N6e,"STRONG",{});var Krt=s(wce);Sxo=r(Krt,"albert"),Krt.forEach(t),Rxo=r(N6e," \u2014 "),LD=n(N6e,"A",{href:!0});var Zrt=s(LD);Bxo=r(Zrt,"AlbertForMultipleChoice"),Zrt.forEach(t),Pxo=r(N6e," (ALBERT model)"),N6e.forEach(t),Ixo=i(K),a2=n(K,"LI",{});var j6e=s(a2);Ace=n(j6e,"STRONG",{});var ett=s(Ace);qxo=r(ett,"bert"),ett.forEach(t),Nxo=r(j6e," \u2014 "),xD=n(j6e,"A",{href:!0});var ott=s(xD);jxo=r(ott,"BertForMultipleChoice"),ott.forEach(t),Dxo=r(j6e," (BERT model)"),j6e.forEach(t),Gxo=i(K),n2=n(K,"LI",{});var D6e=s(n2);yce=n(D6e,"STRONG",{});var rtt=s(yce);Oxo=r(rtt,"big_bird"),rtt.forEach(t),Vxo=r(D6e," \u2014 "),$D=n(D6e,"A",{href:!0});var ttt=s($D);Xxo=r(ttt,"BigBirdForMultipleChoice"),ttt.forEach(t),zxo=r(D6e," (BigBird model)"),D6e.forEach(t),Qxo=i(K),s2=n(K,"LI",{});var G6e=s(s2);Lce=n(G6e,"STRONG",{});var att=s(Lce);Wxo=r(att,"camembert"),att.forEach(t),Hxo=r(G6e," \u2014 "),kD=n(G6e,"A",{href:!0});var ntt=s(kD);Uxo=r(ntt,"CamembertForMultipleChoice"),ntt.forEach(t),Jxo=r(G6e," (CamemBERT model)"),G6e.forEach(t),Yxo=i(K),l2=n(K,"LI",{});var O6e=s(l2);xce=n(O6e,"STRONG",{});var stt=s(xce);Kxo=r(stt,"canine"),stt.forEach(t),Zxo=r(O6e," \u2014 "),SD=n(O6e,"A",{href:!0});var ltt=s(SD);e$o=r(ltt,"CanineForMultipleChoice"),ltt.forEach(t),o$o=r(O6e," (Canine model)"),O6e.forEach(t),r$o=i(K),i2=n(K,"LI",{});var V6e=s(i2);$ce=n(V6e,"STRONG",{});var itt=s($ce);t$o=r(itt,"convbert"),itt.forEach(t),a$o=r(V6e," \u2014 "),RD=n(V6e,"A",{href:!0});var dtt=s(RD);n$o=r(dtt,"ConvBertForMultipleChoice"),dtt.forEach(t),s$o=r(V6e," (ConvBERT model)"),V6e.forEach(t),l$o=i(K),d2=n(K,"LI",{});var X6e=s(d2);kce=n(X6e,"STRONG",{});var ctt=s(kce);i$o=r(ctt,"data2vec-text"),ctt.forEach(t),d$o=r(X6e," \u2014 "),BD=n(X6e,"A",{href:!0});var ftt=s(BD);c$o=r(ftt,"Data2VecTextForMultipleChoice"),ftt.forEach(t),f$o=r(X6e," (Data2VecText model)"),X6e.forEach(t),m$o=i(K),c2=n(K,"LI",{});var z6e=s(c2);Sce=n(z6e,"STRONG",{});var mtt=s(Sce);g$o=r(mtt,"distilbert"),mtt.forEach(t),h$o=r(z6e," \u2014 "),PD=n(z6e,"A",{href:!0});var gtt=s(PD);p$o=r(gtt,"DistilBertForMultipleChoice"),gtt.forEach(t),u$o=r(z6e," (DistilBERT model)"),z6e.forEach(t),_$o=i(K),f2=n(K,"LI",{});var Q6e=s(f2);Rce=n(Q6e,"STRONG",{});var htt=s(Rce);b$o=r(htt,"electra"),htt.forEach(t),v$o=r(Q6e," \u2014 "),ID=n(Q6e,"A",{href:!0});var ptt=s(ID);F$o=r(ptt,"ElectraForMultipleChoice"),ptt.forEach(t),T$o=r(Q6e," (ELECTRA model)"),Q6e.forEach(t),M$o=i(K),m2=n(K,"LI",{});var W6e=s(m2);Bce=n(W6e,"STRONG",{});var utt=s(Bce);E$o=r(utt,"flaubert"),utt.forEach(t),C$o=r(W6e," \u2014 "),qD=n(W6e,"A",{href:!0});var _tt=s(qD);w$o=r(_tt,"FlaubertForMultipleChoice"),_tt.forEach(t),A$o=r(W6e," (FlauBERT model)"),W6e.forEach(t),y$o=i(K),g2=n(K,"LI",{});var H6e=s(g2);Pce=n(H6e,"STRONG",{});var btt=s(Pce);L$o=r(btt,"fnet"),btt.forEach(t),x$o=r(H6e," \u2014 "),ND=n(H6e,"A",{href:!0});var vtt=s(ND);$$o=r(vtt,"FNetForMultipleChoice"),vtt.forEach(t),k$o=r(H6e," (FNet model)"),H6e.forEach(t),S$o=i(K),h2=n(K,"LI",{});var U6e=s(h2);Ice=n(U6e,"STRONG",{});var Ftt=s(Ice);R$o=r(Ftt,"funnel"),Ftt.forEach(t),B$o=r(U6e," \u2014 "),jD=n(U6e,"A",{href:!0});var Ttt=s(jD);P$o=r(Ttt,"FunnelForMultipleChoice"),Ttt.forEach(t),I$o=r(U6e," (Funnel Transformer model)"),U6e.forEach(t),q$o=i(K),p2=n(K,"LI",{});var J6e=s(p2);qce=n(J6e,"STRONG",{});var Mtt=s(qce);N$o=r(Mtt,"ibert"),Mtt.forEach(t),j$o=r(J6e," \u2014 "),DD=n(J6e,"A",{href:!0});var Ett=s(DD);D$o=r(Ett,"IBertForMultipleChoice"),Ett.forEach(t),G$o=r(J6e," (I-BERT model)"),J6e.forEach(t),O$o=i(K),u2=n(K,"LI",{});var Y6e=s(u2);Nce=n(Y6e,"STRONG",{});var Ctt=s(Nce);V$o=r(Ctt,"longformer"),Ctt.forEach(t),X$o=r(Y6e," \u2014 "),GD=n(Y6e,"A",{href:!0});var wtt=s(GD);z$o=r(wtt,"LongformerForMultipleChoice"),wtt.forEach(t),Q$o=r(Y6e," (Longformer model)"),Y6e.forEach(t),W$o=i(K),_2=n(K,"LI",{});var K6e=s(_2);jce=n(K6e,"STRONG",{});var Att=s(jce);H$o=r(Att,"megatron-bert"),Att.forEach(t),U$o=r(K6e," \u2014 "),OD=n(K6e,"A",{href:!0});var ytt=s(OD);J$o=r(ytt,"MegatronBertForMultipleChoice"),ytt.forEach(t),Y$o=r(K6e," (MegatronBert model)"),K6e.forEach(t),K$o=i(K),b2=n(K,"LI",{});var Z6e=s(b2);Dce=n(Z6e,"STRONG",{});var Ltt=s(Dce);Z$o=r(Ltt,"mobilebert"),Ltt.forEach(t),eko=r(Z6e," \u2014 "),VD=n(Z6e,"A",{href:!0});var xtt=s(VD);oko=r(xtt,"MobileBertForMultipleChoice"),xtt.forEach(t),rko=r(Z6e," (MobileBERT model)"),Z6e.forEach(t),tko=i(K),v2=n(K,"LI",{});var eye=s(v2);Gce=n(eye,"STRONG",{});var $tt=s(Gce);ako=r($tt,"mpnet"),$tt.forEach(t),nko=r(eye," \u2014 "),XD=n(eye,"A",{href:!0});var ktt=s(XD);sko=r(ktt,"MPNetForMultipleChoice"),ktt.forEach(t),lko=r(eye," (MPNet model)"),eye.forEach(t),iko=i(K),F2=n(K,"LI",{});var oye=s(F2);Oce=n(oye,"STRONG",{});var Stt=s(Oce);dko=r(Stt,"nystromformer"),Stt.forEach(t),cko=r(oye," \u2014 "),zD=n(oye,"A",{href:!0});var Rtt=s(zD);fko=r(Rtt,"NystromformerForMultipleChoice"),Rtt.forEach(t),mko=r(oye," (Nystromformer model)"),oye.forEach(t),gko=i(K),T2=n(K,"LI",{});var rye=s(T2);Vce=n(rye,"STRONG",{});var Btt=s(Vce);hko=r(Btt,"qdqbert"),Btt.forEach(t),pko=r(rye," \u2014 "),QD=n(rye,"A",{href:!0});var Ptt=s(QD);uko=r(Ptt,"QDQBertForMultipleChoice"),Ptt.forEach(t),_ko=r(rye," (QDQBert model)"),rye.forEach(t),bko=i(K),M2=n(K,"LI",{});var tye=s(M2);Xce=n(tye,"STRONG",{});var Itt=s(Xce);vko=r(Itt,"rembert"),Itt.forEach(t),Fko=r(tye," \u2014 "),WD=n(tye,"A",{href:!0});var qtt=s(WD);Tko=r(qtt,"RemBertForMultipleChoice"),qtt.forEach(t),Mko=r(tye," (RemBERT model)"),tye.forEach(t),Eko=i(K),E2=n(K,"LI",{});var aye=s(E2);zce=n(aye,"STRONG",{});var Ntt=s(zce);Cko=r(Ntt,"roberta"),Ntt.forEach(t),wko=r(aye," \u2014 "),HD=n(aye,"A",{href:!0});var jtt=s(HD);Ako=r(jtt,"RobertaForMultipleChoice"),jtt.forEach(t),yko=r(aye," (RoBERTa model)"),aye.forEach(t),Lko=i(K),C2=n(K,"LI",{});var nye=s(C2);Qce=n(nye,"STRONG",{});var Dtt=s(Qce);xko=r(Dtt,"roformer"),Dtt.forEach(t),$ko=r(nye," \u2014 "),UD=n(nye,"A",{href:!0});var Gtt=s(UD);kko=r(Gtt,"RoFormerForMultipleChoice"),Gtt.forEach(t),Sko=r(nye," (RoFormer model)"),nye.forEach(t),Rko=i(K),w2=n(K,"LI",{});var sye=s(w2);Wce=n(sye,"STRONG",{});var Ott=s(Wce);Bko=r(Ott,"squeezebert"),Ott.forEach(t),Pko=r(sye," \u2014 "),JD=n(sye,"A",{href:!0});var Vtt=s(JD);Iko=r(Vtt,"SqueezeBertForMultipleChoice"),Vtt.forEach(t),qko=r(sye," (SqueezeBERT model)"),sye.forEach(t),Nko=i(K),A2=n(K,"LI",{});var lye=s(A2);Hce=n(lye,"STRONG",{});var Xtt=s(Hce);jko=r(Xtt,"xlm"),Xtt.forEach(t),Dko=r(lye," \u2014 "),YD=n(lye,"A",{href:!0});var ztt=s(YD);Gko=r(ztt,"XLMForMultipleChoice"),ztt.forEach(t),Oko=r(lye," (XLM model)"),lye.forEach(t),Vko=i(K),y2=n(K,"LI",{});var iye=s(y2);Uce=n(iye,"STRONG",{});var Qtt=s(Uce);Xko=r(Qtt,"xlm-roberta"),Qtt.forEach(t),zko=r(iye," \u2014 "),KD=n(iye,"A",{href:!0});var Wtt=s(KD);Qko=r(Wtt,"XLMRobertaForMultipleChoice"),Wtt.forEach(t),Wko=r(iye," (XLM-RoBERTa model)"),iye.forEach(t),Hko=i(K),L2=n(K,"LI",{});var dye=s(L2);Jce=n(dye,"STRONG",{});var Htt=s(Jce);Uko=r(Htt,"xlm-roberta-xl"),Htt.forEach(t),Jko=r(dye," \u2014 "),ZD=n(dye,"A",{href:!0});var Utt=s(ZD);Yko=r(Utt,"XLMRobertaXLForMultipleChoice"),Utt.forEach(t),Kko=r(dye," (XLM-RoBERTa-XL model)"),dye.forEach(t),Zko=i(K),x2=n(K,"LI",{});var cye=s(x2);Yce=n(cye,"STRONG",{});var Jtt=s(Yce);eSo=r(Jtt,"xlnet"),Jtt.forEach(t),oSo=r(cye," \u2014 "),eG=n(cye,"A",{href:!0});var Ytt=s(eG);rSo=r(Ytt,"XLNetForMultipleChoice"),Ytt.forEach(t),tSo=r(cye," (XLNet model)"),cye.forEach(t),aSo=i(K),$2=n(K,"LI",{});var fye=s($2);Kce=n(fye,"STRONG",{});var Ktt=s(Kce);nSo=r(Ktt,"yoso"),Ktt.forEach(t),sSo=r(fye," \u2014 "),oG=n(fye,"A",{href:!0});var Ztt=s(oG);lSo=r(Ztt,"YosoForMultipleChoice"),Ztt.forEach(t),iSo=r(fye," (YOSO model)"),fye.forEach(t),K.forEach(t),dSo=i(ra),k2=n(ra,"P",{});var mye=s(k2);cSo=r(mye,"The model is set in evaluation mode by default using "),Zce=n(mye,"CODE",{});var eat=s(Zce);fSo=r(eat,"model.eval()"),eat.forEach(t),mSo=r(mye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),efe=n(mye,"CODE",{});var oat=s(efe);gSo=r(oat,"model.train()"),oat.forEach(t),mye.forEach(t),hSo=i(ra),T(S2.$$.fragment,ra),ra.forEach(t),Os.forEach(t),ePe=i(f),qi=n(f,"H2",{class:!0});var rqe=s(qi);R2=n(rqe,"A",{id:!0,class:!0,href:!0});var rat=s(R2);ofe=n(rat,"SPAN",{});var tat=s(ofe);T(BA.$$.fragment,tat),tat.forEach(t),rat.forEach(t),pSo=i(rqe),rfe=n(rqe,"SPAN",{});var aat=s(rfe);uSo=r(aat,"AutoModelForNextSentencePrediction"),aat.forEach(t),rqe.forEach(t),oPe=i(f),Po=n(f,"DIV",{class:!0});var Vs=s(Po);T(PA.$$.fragment,Vs),_So=i(Vs),Ni=n(Vs,"P",{});var qY=s(Ni);bSo=r(qY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rG=n(qY,"A",{href:!0});var nat=s(rG);vSo=r(nat,"from_pretrained()"),nat.forEach(t),FSo=r(qY," class method or the "),tG=n(qY,"A",{href:!0});var sat=s(tG);TSo=r(sat,"from_config()"),sat.forEach(t),MSo=r(qY,` class
method.`),qY.forEach(t),ESo=i(Vs),IA=n(Vs,"P",{});var tqe=s(IA);CSo=r(tqe,"This class cannot be instantiated directly using "),tfe=n(tqe,"CODE",{});var lat=s(tfe);wSo=r(lat,"__init__()"),lat.forEach(t),ASo=r(tqe," (throws an error)."),tqe.forEach(t),ySo=i(Vs),st=n(Vs,"DIV",{class:!0});var QC=s(st);T(qA.$$.fragment,QC),LSo=i(QC),afe=n(QC,"P",{});var iat=s(afe);xSo=r(iat,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),iat.forEach(t),$So=i(QC),ji=n(QC,"P",{});var NY=s(ji);kSo=r(NY,`Note:
Loading a model from its configuration file does `),nfe=n(NY,"STRONG",{});var dat=s(nfe);SSo=r(dat,"not"),dat.forEach(t),RSo=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),aG=n(NY,"A",{href:!0});var cat=s(aG);BSo=r(cat,"from_pretrained()"),cat.forEach(t),PSo=r(NY," to load the model weights."),NY.forEach(t),ISo=i(QC),T(B2.$$.fragment,QC),QC.forEach(t),qSo=i(Vs),oo=n(Vs,"DIV",{class:!0});var ta=s(oo);T(NA.$$.fragment,ta),NSo=i(ta),sfe=n(ta,"P",{});var fat=s(sfe);jSo=r(fat,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fat.forEach(t),DSo=i(ta),$a=n(ta,"P",{});var WC=s($a);GSo=r(WC,"The model class to instantiate is selected based on the "),lfe=n(WC,"CODE",{});var mat=s(lfe);OSo=r(mat,"model_type"),mat.forEach(t),VSo=r(WC,` property of the config object (either
passed as an argument or loaded from `),ife=n(WC,"CODE",{});var gat=s(ife);XSo=r(gat,"pretrained_model_name_or_path"),gat.forEach(t),zSo=r(WC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=n(WC,"CODE",{});var hat=s(dfe);QSo=r(hat,"pretrained_model_name_or_path"),hat.forEach(t),WSo=r(WC,":"),WC.forEach(t),HSo=i(ta),Ur=n(ta,"UL",{});var Xs=s(Ur);P2=n(Xs,"LI",{});var gye=s(P2);cfe=n(gye,"STRONG",{});var pat=s(cfe);USo=r(pat,"bert"),pat.forEach(t),JSo=r(gye," \u2014 "),nG=n(gye,"A",{href:!0});var uat=s(nG);YSo=r(uat,"BertForNextSentencePrediction"),uat.forEach(t),KSo=r(gye," (BERT model)"),gye.forEach(t),ZSo=i(Xs),I2=n(Xs,"LI",{});var hye=s(I2);ffe=n(hye,"STRONG",{});var _at=s(ffe);eRo=r(_at,"fnet"),_at.forEach(t),oRo=r(hye," \u2014 "),sG=n(hye,"A",{href:!0});var bat=s(sG);rRo=r(bat,"FNetForNextSentencePrediction"),bat.forEach(t),tRo=r(hye," (FNet model)"),hye.forEach(t),aRo=i(Xs),q2=n(Xs,"LI",{});var pye=s(q2);mfe=n(pye,"STRONG",{});var vat=s(mfe);nRo=r(vat,"megatron-bert"),vat.forEach(t),sRo=r(pye," \u2014 "),lG=n(pye,"A",{href:!0});var Fat=s(lG);lRo=r(Fat,"MegatronBertForNextSentencePrediction"),Fat.forEach(t),iRo=r(pye," (MegatronBert model)"),pye.forEach(t),dRo=i(Xs),N2=n(Xs,"LI",{});var uye=s(N2);gfe=n(uye,"STRONG",{});var Tat=s(gfe);cRo=r(Tat,"mobilebert"),Tat.forEach(t),fRo=r(uye," \u2014 "),iG=n(uye,"A",{href:!0});var Mat=s(iG);mRo=r(Mat,"MobileBertForNextSentencePrediction"),Mat.forEach(t),gRo=r(uye," (MobileBERT model)"),uye.forEach(t),hRo=i(Xs),j2=n(Xs,"LI",{});var _ye=s(j2);hfe=n(_ye,"STRONG",{});var Eat=s(hfe);pRo=r(Eat,"qdqbert"),Eat.forEach(t),uRo=r(_ye," \u2014 "),dG=n(_ye,"A",{href:!0});var Cat=s(dG);_Ro=r(Cat,"QDQBertForNextSentencePrediction"),Cat.forEach(t),bRo=r(_ye," (QDQBert model)"),_ye.forEach(t),Xs.forEach(t),vRo=i(ta),D2=n(ta,"P",{});var bye=s(D2);FRo=r(bye,"The model is set in evaluation mode by default using "),pfe=n(bye,"CODE",{});var wat=s(pfe);TRo=r(wat,"model.eval()"),wat.forEach(t),MRo=r(bye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=n(bye,"CODE",{});var Aat=s(ufe);ERo=r(Aat,"model.train()"),Aat.forEach(t),bye.forEach(t),CRo=i(ta),T(G2.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),rPe=i(f),Di=n(f,"H2",{class:!0});var aqe=s(Di);O2=n(aqe,"A",{id:!0,class:!0,href:!0});var yat=s(O2);_fe=n(yat,"SPAN",{});var Lat=s(_fe);T(jA.$$.fragment,Lat),Lat.forEach(t),yat.forEach(t),wRo=i(aqe),bfe=n(aqe,"SPAN",{});var xat=s(bfe);ARo=r(xat,"AutoModelForTokenClassification"),xat.forEach(t),aqe.forEach(t),tPe=i(f),Io=n(f,"DIV",{class:!0});var zs=s(Io);T(DA.$$.fragment,zs),yRo=i(zs),Gi=n(zs,"P",{});var jY=s(Gi);LRo=r(jY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cG=n(jY,"A",{href:!0});var $at=s(cG);xRo=r($at,"from_pretrained()"),$at.forEach(t),$Ro=r(jY," class method or the "),fG=n(jY,"A",{href:!0});var kat=s(fG);kRo=r(kat,"from_config()"),kat.forEach(t),SRo=r(jY,` class
method.`),jY.forEach(t),RRo=i(zs),GA=n(zs,"P",{});var nqe=s(GA);BRo=r(nqe,"This class cannot be instantiated directly using "),vfe=n(nqe,"CODE",{});var Sat=s(vfe);PRo=r(Sat,"__init__()"),Sat.forEach(t),IRo=r(nqe," (throws an error)."),nqe.forEach(t),qRo=i(zs),lt=n(zs,"DIV",{class:!0});var HC=s(lt);T(OA.$$.fragment,HC),NRo=i(HC),Ffe=n(HC,"P",{});var Rat=s(Ffe);jRo=r(Rat,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Rat.forEach(t),DRo=i(HC),Oi=n(HC,"P",{});var DY=s(Oi);GRo=r(DY,`Note:
Loading a model from its configuration file does `),Tfe=n(DY,"STRONG",{});var Bat=s(Tfe);ORo=r(Bat,"not"),Bat.forEach(t),VRo=r(DY,` load the model weights. It only affects the
model\u2019s configuration. Use `),mG=n(DY,"A",{href:!0});var Pat=s(mG);XRo=r(Pat,"from_pretrained()"),Pat.forEach(t),zRo=r(DY," to load the model weights."),DY.forEach(t),QRo=i(HC),T(V2.$$.fragment,HC),HC.forEach(t),WRo=i(zs),ro=n(zs,"DIV",{class:!0});var aa=s(ro);T(VA.$$.fragment,aa),HRo=i(aa),Mfe=n(aa,"P",{});var Iat=s(Mfe);URo=r(Iat,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Iat.forEach(t),JRo=i(aa),ka=n(aa,"P",{});var UC=s(ka);YRo=r(UC,"The model class to instantiate is selected based on the "),Efe=n(UC,"CODE",{});var qat=s(Efe);KRo=r(qat,"model_type"),qat.forEach(t),ZRo=r(UC,` property of the config object (either
passed as an argument or loaded from `),Cfe=n(UC,"CODE",{});var Nat=s(Cfe);eBo=r(Nat,"pretrained_model_name_or_path"),Nat.forEach(t),oBo=r(UC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=n(UC,"CODE",{});var jat=s(wfe);rBo=r(jat,"pretrained_model_name_or_path"),jat.forEach(t),tBo=r(UC,":"),UC.forEach(t),aBo=i(aa),U=n(aa,"UL",{});var J=s(U);X2=n(J,"LI",{});var vye=s(X2);Afe=n(vye,"STRONG",{});var Dat=s(Afe);nBo=r(Dat,"albert"),Dat.forEach(t),sBo=r(vye," \u2014 "),gG=n(vye,"A",{href:!0});var Gat=s(gG);lBo=r(Gat,"AlbertForTokenClassification"),Gat.forEach(t),iBo=r(vye," (ALBERT model)"),vye.forEach(t),dBo=i(J),z2=n(J,"LI",{});var Fye=s(z2);yfe=n(Fye,"STRONG",{});var Oat=s(yfe);cBo=r(Oat,"bert"),Oat.forEach(t),fBo=r(Fye," \u2014 "),hG=n(Fye,"A",{href:!0});var Vat=s(hG);mBo=r(Vat,"BertForTokenClassification"),Vat.forEach(t),gBo=r(Fye," (BERT model)"),Fye.forEach(t),hBo=i(J),Q2=n(J,"LI",{});var Tye=s(Q2);Lfe=n(Tye,"STRONG",{});var Xat=s(Lfe);pBo=r(Xat,"big_bird"),Xat.forEach(t),uBo=r(Tye," \u2014 "),pG=n(Tye,"A",{href:!0});var zat=s(pG);_Bo=r(zat,"BigBirdForTokenClassification"),zat.forEach(t),bBo=r(Tye," (BigBird model)"),Tye.forEach(t),vBo=i(J),W2=n(J,"LI",{});var Mye=s(W2);xfe=n(Mye,"STRONG",{});var Qat=s(xfe);FBo=r(Qat,"camembert"),Qat.forEach(t),TBo=r(Mye," \u2014 "),uG=n(Mye,"A",{href:!0});var Wat=s(uG);MBo=r(Wat,"CamembertForTokenClassification"),Wat.forEach(t),EBo=r(Mye," (CamemBERT model)"),Mye.forEach(t),CBo=i(J),H2=n(J,"LI",{});var Eye=s(H2);$fe=n(Eye,"STRONG",{});var Hat=s($fe);wBo=r(Hat,"canine"),Hat.forEach(t),ABo=r(Eye," \u2014 "),_G=n(Eye,"A",{href:!0});var Uat=s(_G);yBo=r(Uat,"CanineForTokenClassification"),Uat.forEach(t),LBo=r(Eye," (Canine model)"),Eye.forEach(t),xBo=i(J),U2=n(J,"LI",{});var Cye=s(U2);kfe=n(Cye,"STRONG",{});var Jat=s(kfe);$Bo=r(Jat,"convbert"),Jat.forEach(t),kBo=r(Cye," \u2014 "),bG=n(Cye,"A",{href:!0});var Yat=s(bG);SBo=r(Yat,"ConvBertForTokenClassification"),Yat.forEach(t),RBo=r(Cye," (ConvBERT model)"),Cye.forEach(t),BBo=i(J),J2=n(J,"LI",{});var wye=s(J2);Sfe=n(wye,"STRONG",{});var Kat=s(Sfe);PBo=r(Kat,"data2vec-text"),Kat.forEach(t),IBo=r(wye," \u2014 "),vG=n(wye,"A",{href:!0});var Zat=s(vG);qBo=r(Zat,"Data2VecTextForTokenClassification"),Zat.forEach(t),NBo=r(wye," (Data2VecText model)"),wye.forEach(t),jBo=i(J),Y2=n(J,"LI",{});var Aye=s(Y2);Rfe=n(Aye,"STRONG",{});var ent=s(Rfe);DBo=r(ent,"deberta"),ent.forEach(t),GBo=r(Aye," \u2014 "),FG=n(Aye,"A",{href:!0});var ont=s(FG);OBo=r(ont,"DebertaForTokenClassification"),ont.forEach(t),VBo=r(Aye," (DeBERTa model)"),Aye.forEach(t),XBo=i(J),K2=n(J,"LI",{});var yye=s(K2);Bfe=n(yye,"STRONG",{});var rnt=s(Bfe);zBo=r(rnt,"deberta-v2"),rnt.forEach(t),QBo=r(yye," \u2014 "),TG=n(yye,"A",{href:!0});var tnt=s(TG);WBo=r(tnt,"DebertaV2ForTokenClassification"),tnt.forEach(t),HBo=r(yye," (DeBERTa-v2 model)"),yye.forEach(t),UBo=i(J),Z2=n(J,"LI",{});var Lye=s(Z2);Pfe=n(Lye,"STRONG",{});var ant=s(Pfe);JBo=r(ant,"distilbert"),ant.forEach(t),YBo=r(Lye," \u2014 "),MG=n(Lye,"A",{href:!0});var nnt=s(MG);KBo=r(nnt,"DistilBertForTokenClassification"),nnt.forEach(t),ZBo=r(Lye," (DistilBERT model)"),Lye.forEach(t),ePo=i(J),ev=n(J,"LI",{});var xye=s(ev);Ife=n(xye,"STRONG",{});var snt=s(Ife);oPo=r(snt,"electra"),snt.forEach(t),rPo=r(xye," \u2014 "),EG=n(xye,"A",{href:!0});var lnt=s(EG);tPo=r(lnt,"ElectraForTokenClassification"),lnt.forEach(t),aPo=r(xye," (ELECTRA model)"),xye.forEach(t),nPo=i(J),ov=n(J,"LI",{});var $ye=s(ov);qfe=n($ye,"STRONG",{});var int=s(qfe);sPo=r(int,"flaubert"),int.forEach(t),lPo=r($ye," \u2014 "),CG=n($ye,"A",{href:!0});var dnt=s(CG);iPo=r(dnt,"FlaubertForTokenClassification"),dnt.forEach(t),dPo=r($ye," (FlauBERT model)"),$ye.forEach(t),cPo=i(J),rv=n(J,"LI",{});var kye=s(rv);Nfe=n(kye,"STRONG",{});var cnt=s(Nfe);fPo=r(cnt,"fnet"),cnt.forEach(t),mPo=r(kye," \u2014 "),wG=n(kye,"A",{href:!0});var fnt=s(wG);gPo=r(fnt,"FNetForTokenClassification"),fnt.forEach(t),hPo=r(kye," (FNet model)"),kye.forEach(t),pPo=i(J),tv=n(J,"LI",{});var Sye=s(tv);jfe=n(Sye,"STRONG",{});var mnt=s(jfe);uPo=r(mnt,"funnel"),mnt.forEach(t),_Po=r(Sye," \u2014 "),AG=n(Sye,"A",{href:!0});var gnt=s(AG);bPo=r(gnt,"FunnelForTokenClassification"),gnt.forEach(t),vPo=r(Sye," (Funnel Transformer model)"),Sye.forEach(t),FPo=i(J),av=n(J,"LI",{});var Rye=s(av);Dfe=n(Rye,"STRONG",{});var hnt=s(Dfe);TPo=r(hnt,"gpt2"),hnt.forEach(t),MPo=r(Rye," \u2014 "),yG=n(Rye,"A",{href:!0});var pnt=s(yG);EPo=r(pnt,"GPT2ForTokenClassification"),pnt.forEach(t),CPo=r(Rye," (OpenAI GPT-2 model)"),Rye.forEach(t),wPo=i(J),nv=n(J,"LI",{});var Bye=s(nv);Gfe=n(Bye,"STRONG",{});var unt=s(Gfe);APo=r(unt,"ibert"),unt.forEach(t),yPo=r(Bye," \u2014 "),LG=n(Bye,"A",{href:!0});var _nt=s(LG);LPo=r(_nt,"IBertForTokenClassification"),_nt.forEach(t),xPo=r(Bye," (I-BERT model)"),Bye.forEach(t),$Po=i(J),sv=n(J,"LI",{});var Pye=s(sv);Ofe=n(Pye,"STRONG",{});var bnt=s(Ofe);kPo=r(bnt,"layoutlm"),bnt.forEach(t),SPo=r(Pye," \u2014 "),xG=n(Pye,"A",{href:!0});var vnt=s(xG);RPo=r(vnt,"LayoutLMForTokenClassification"),vnt.forEach(t),BPo=r(Pye," (LayoutLM model)"),Pye.forEach(t),PPo=i(J),lv=n(J,"LI",{});var Iye=s(lv);Vfe=n(Iye,"STRONG",{});var Fnt=s(Vfe);IPo=r(Fnt,"layoutlmv2"),Fnt.forEach(t),qPo=r(Iye," \u2014 "),$G=n(Iye,"A",{href:!0});var Tnt=s($G);NPo=r(Tnt,"LayoutLMv2ForTokenClassification"),Tnt.forEach(t),jPo=r(Iye," (LayoutLMv2 model)"),Iye.forEach(t),DPo=i(J),iv=n(J,"LI",{});var qye=s(iv);Xfe=n(qye,"STRONG",{});var Mnt=s(Xfe);GPo=r(Mnt,"longformer"),Mnt.forEach(t),OPo=r(qye," \u2014 "),kG=n(qye,"A",{href:!0});var Ent=s(kG);VPo=r(Ent,"LongformerForTokenClassification"),Ent.forEach(t),XPo=r(qye," (Longformer model)"),qye.forEach(t),zPo=i(J),dv=n(J,"LI",{});var Nye=s(dv);zfe=n(Nye,"STRONG",{});var Cnt=s(zfe);QPo=r(Cnt,"megatron-bert"),Cnt.forEach(t),WPo=r(Nye," \u2014 "),SG=n(Nye,"A",{href:!0});var wnt=s(SG);HPo=r(wnt,"MegatronBertForTokenClassification"),wnt.forEach(t),UPo=r(Nye," (MegatronBert model)"),Nye.forEach(t),JPo=i(J),cv=n(J,"LI",{});var jye=s(cv);Qfe=n(jye,"STRONG",{});var Ant=s(Qfe);YPo=r(Ant,"mobilebert"),Ant.forEach(t),KPo=r(jye," \u2014 "),RG=n(jye,"A",{href:!0});var ynt=s(RG);ZPo=r(ynt,"MobileBertForTokenClassification"),ynt.forEach(t),eIo=r(jye," (MobileBERT model)"),jye.forEach(t),oIo=i(J),fv=n(J,"LI",{});var Dye=s(fv);Wfe=n(Dye,"STRONG",{});var Lnt=s(Wfe);rIo=r(Lnt,"mpnet"),Lnt.forEach(t),tIo=r(Dye," \u2014 "),BG=n(Dye,"A",{href:!0});var xnt=s(BG);aIo=r(xnt,"MPNetForTokenClassification"),xnt.forEach(t),nIo=r(Dye," (MPNet model)"),Dye.forEach(t),sIo=i(J),mv=n(J,"LI",{});var Gye=s(mv);Hfe=n(Gye,"STRONG",{});var $nt=s(Hfe);lIo=r($nt,"nystromformer"),$nt.forEach(t),iIo=r(Gye," \u2014 "),PG=n(Gye,"A",{href:!0});var knt=s(PG);dIo=r(knt,"NystromformerForTokenClassification"),knt.forEach(t),cIo=r(Gye," (Nystromformer model)"),Gye.forEach(t),fIo=i(J),gv=n(J,"LI",{});var Oye=s(gv);Ufe=n(Oye,"STRONG",{});var Snt=s(Ufe);mIo=r(Snt,"qdqbert"),Snt.forEach(t),gIo=r(Oye," \u2014 "),IG=n(Oye,"A",{href:!0});var Rnt=s(IG);hIo=r(Rnt,"QDQBertForTokenClassification"),Rnt.forEach(t),pIo=r(Oye," (QDQBert model)"),Oye.forEach(t),uIo=i(J),hv=n(J,"LI",{});var Vye=s(hv);Jfe=n(Vye,"STRONG",{});var Bnt=s(Jfe);_Io=r(Bnt,"rembert"),Bnt.forEach(t),bIo=r(Vye," \u2014 "),qG=n(Vye,"A",{href:!0});var Pnt=s(qG);vIo=r(Pnt,"RemBertForTokenClassification"),Pnt.forEach(t),FIo=r(Vye," (RemBERT model)"),Vye.forEach(t),TIo=i(J),pv=n(J,"LI",{});var Xye=s(pv);Yfe=n(Xye,"STRONG",{});var Int=s(Yfe);MIo=r(Int,"roberta"),Int.forEach(t),EIo=r(Xye," \u2014 "),NG=n(Xye,"A",{href:!0});var qnt=s(NG);CIo=r(qnt,"RobertaForTokenClassification"),qnt.forEach(t),wIo=r(Xye," (RoBERTa model)"),Xye.forEach(t),AIo=i(J),uv=n(J,"LI",{});var zye=s(uv);Kfe=n(zye,"STRONG",{});var Nnt=s(Kfe);yIo=r(Nnt,"roformer"),Nnt.forEach(t),LIo=r(zye," \u2014 "),jG=n(zye,"A",{href:!0});var jnt=s(jG);xIo=r(jnt,"RoFormerForTokenClassification"),jnt.forEach(t),$Io=r(zye," (RoFormer model)"),zye.forEach(t),kIo=i(J),_v=n(J,"LI",{});var Qye=s(_v);Zfe=n(Qye,"STRONG",{});var Dnt=s(Zfe);SIo=r(Dnt,"squeezebert"),Dnt.forEach(t),RIo=r(Qye," \u2014 "),DG=n(Qye,"A",{href:!0});var Gnt=s(DG);BIo=r(Gnt,"SqueezeBertForTokenClassification"),Gnt.forEach(t),PIo=r(Qye," (SqueezeBERT model)"),Qye.forEach(t),IIo=i(J),bv=n(J,"LI",{});var Wye=s(bv);eme=n(Wye,"STRONG",{});var Ont=s(eme);qIo=r(Ont,"xlm"),Ont.forEach(t),NIo=r(Wye," \u2014 "),GG=n(Wye,"A",{href:!0});var Vnt=s(GG);jIo=r(Vnt,"XLMForTokenClassification"),Vnt.forEach(t),DIo=r(Wye," (XLM model)"),Wye.forEach(t),GIo=i(J),vv=n(J,"LI",{});var Hye=s(vv);ome=n(Hye,"STRONG",{});var Xnt=s(ome);OIo=r(Xnt,"xlm-roberta"),Xnt.forEach(t),VIo=r(Hye," \u2014 "),OG=n(Hye,"A",{href:!0});var znt=s(OG);XIo=r(znt,"XLMRobertaForTokenClassification"),znt.forEach(t),zIo=r(Hye," (XLM-RoBERTa model)"),Hye.forEach(t),QIo=i(J),Fv=n(J,"LI",{});var Uye=s(Fv);rme=n(Uye,"STRONG",{});var Qnt=s(rme);WIo=r(Qnt,"xlm-roberta-xl"),Qnt.forEach(t),HIo=r(Uye," \u2014 "),VG=n(Uye,"A",{href:!0});var Wnt=s(VG);UIo=r(Wnt,"XLMRobertaXLForTokenClassification"),Wnt.forEach(t),JIo=r(Uye," (XLM-RoBERTa-XL model)"),Uye.forEach(t),YIo=i(J),Tv=n(J,"LI",{});var Jye=s(Tv);tme=n(Jye,"STRONG",{});var Hnt=s(tme);KIo=r(Hnt,"xlnet"),Hnt.forEach(t),ZIo=r(Jye," \u2014 "),XG=n(Jye,"A",{href:!0});var Unt=s(XG);eqo=r(Unt,"XLNetForTokenClassification"),Unt.forEach(t),oqo=r(Jye," (XLNet model)"),Jye.forEach(t),rqo=i(J),Mv=n(J,"LI",{});var Yye=s(Mv);ame=n(Yye,"STRONG",{});var Jnt=s(ame);tqo=r(Jnt,"yoso"),Jnt.forEach(t),aqo=r(Yye," \u2014 "),zG=n(Yye,"A",{href:!0});var Ynt=s(zG);nqo=r(Ynt,"YosoForTokenClassification"),Ynt.forEach(t),sqo=r(Yye," (YOSO model)"),Yye.forEach(t),J.forEach(t),lqo=i(aa),Ev=n(aa,"P",{});var Kye=s(Ev);iqo=r(Kye,"The model is set in evaluation mode by default using "),nme=n(Kye,"CODE",{});var Knt=s(nme);dqo=r(Knt,"model.eval()"),Knt.forEach(t),cqo=r(Kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sme=n(Kye,"CODE",{});var Znt=s(sme);fqo=r(Znt,"model.train()"),Znt.forEach(t),Kye.forEach(t),mqo=i(aa),T(Cv.$$.fragment,aa),aa.forEach(t),zs.forEach(t),aPe=i(f),Vi=n(f,"H2",{class:!0});var sqe=s(Vi);wv=n(sqe,"A",{id:!0,class:!0,href:!0});var est=s(wv);lme=n(est,"SPAN",{});var ost=s(lme);T(XA.$$.fragment,ost),ost.forEach(t),est.forEach(t),gqo=i(sqe),ime=n(sqe,"SPAN",{});var rst=s(ime);hqo=r(rst,"AutoModelForQuestionAnswering"),rst.forEach(t),sqe.forEach(t),nPe=i(f),qo=n(f,"DIV",{class:!0});var Qs=s(qo);T(zA.$$.fragment,Qs),pqo=i(Qs),Xi=n(Qs,"P",{});var GY=s(Xi);uqo=r(GY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),QG=n(GY,"A",{href:!0});var tst=s(QG);_qo=r(tst,"from_pretrained()"),tst.forEach(t),bqo=r(GY," class method or the "),WG=n(GY,"A",{href:!0});var ast=s(WG);vqo=r(ast,"from_config()"),ast.forEach(t),Fqo=r(GY,` class
method.`),GY.forEach(t),Tqo=i(Qs),QA=n(Qs,"P",{});var lqe=s(QA);Mqo=r(lqe,"This class cannot be instantiated directly using "),dme=n(lqe,"CODE",{});var nst=s(dme);Eqo=r(nst,"__init__()"),nst.forEach(t),Cqo=r(lqe," (throws an error)."),lqe.forEach(t),wqo=i(Qs),it=n(Qs,"DIV",{class:!0});var JC=s(it);T(WA.$$.fragment,JC),Aqo=i(JC),cme=n(JC,"P",{});var sst=s(cme);yqo=r(sst,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sst.forEach(t),Lqo=i(JC),zi=n(JC,"P",{});var OY=s(zi);xqo=r(OY,`Note:
Loading a model from its configuration file does `),fme=n(OY,"STRONG",{});var lst=s(fme);$qo=r(lst,"not"),lst.forEach(t),kqo=r(OY,` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=n(OY,"A",{href:!0});var ist=s(HG);Sqo=r(ist,"from_pretrained()"),ist.forEach(t),Rqo=r(OY," to load the model weights."),OY.forEach(t),Bqo=i(JC),T(Av.$$.fragment,JC),JC.forEach(t),Pqo=i(Qs),to=n(Qs,"DIV",{class:!0});var na=s(to);T(HA.$$.fragment,na),Iqo=i(na),mme=n(na,"P",{});var dst=s(mme);qqo=r(dst,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),dst.forEach(t),Nqo=i(na),Sa=n(na,"P",{});var YC=s(Sa);jqo=r(YC,"The model class to instantiate is selected based on the "),gme=n(YC,"CODE",{});var cst=s(gme);Dqo=r(cst,"model_type"),cst.forEach(t),Gqo=r(YC,` property of the config object (either
passed as an argument or loaded from `),hme=n(YC,"CODE",{});var fst=s(hme);Oqo=r(fst,"pretrained_model_name_or_path"),fst.forEach(t),Vqo=r(YC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pme=n(YC,"CODE",{});var mst=s(pme);Xqo=r(mst,"pretrained_model_name_or_path"),mst.forEach(t),zqo=r(YC,":"),YC.forEach(t),Qqo=i(na),O=n(na,"UL",{});var X=s(O);yv=n(X,"LI",{});var Zye=s(yv);ume=n(Zye,"STRONG",{});var gst=s(ume);Wqo=r(gst,"albert"),gst.forEach(t),Hqo=r(Zye," \u2014 "),UG=n(Zye,"A",{href:!0});var hst=s(UG);Uqo=r(hst,"AlbertForQuestionAnswering"),hst.forEach(t),Jqo=r(Zye," (ALBERT model)"),Zye.forEach(t),Yqo=i(X),Lv=n(X,"LI",{});var eLe=s(Lv);_me=n(eLe,"STRONG",{});var pst=s(_me);Kqo=r(pst,"bart"),pst.forEach(t),Zqo=r(eLe," \u2014 "),JG=n(eLe,"A",{href:!0});var ust=s(JG);eNo=r(ust,"BartForQuestionAnswering"),ust.forEach(t),oNo=r(eLe," (BART model)"),eLe.forEach(t),rNo=i(X),xv=n(X,"LI",{});var oLe=s(xv);bme=n(oLe,"STRONG",{});var _st=s(bme);tNo=r(_st,"bert"),_st.forEach(t),aNo=r(oLe," \u2014 "),YG=n(oLe,"A",{href:!0});var bst=s(YG);nNo=r(bst,"BertForQuestionAnswering"),bst.forEach(t),sNo=r(oLe," (BERT model)"),oLe.forEach(t),lNo=i(X),$v=n(X,"LI",{});var rLe=s($v);vme=n(rLe,"STRONG",{});var vst=s(vme);iNo=r(vst,"big_bird"),vst.forEach(t),dNo=r(rLe," \u2014 "),KG=n(rLe,"A",{href:!0});var Fst=s(KG);cNo=r(Fst,"BigBirdForQuestionAnswering"),Fst.forEach(t),fNo=r(rLe," (BigBird model)"),rLe.forEach(t),mNo=i(X),kv=n(X,"LI",{});var tLe=s(kv);Fme=n(tLe,"STRONG",{});var Tst=s(Fme);gNo=r(Tst,"bigbird_pegasus"),Tst.forEach(t),hNo=r(tLe," \u2014 "),ZG=n(tLe,"A",{href:!0});var Mst=s(ZG);pNo=r(Mst,"BigBirdPegasusForQuestionAnswering"),Mst.forEach(t),uNo=r(tLe," (BigBirdPegasus model)"),tLe.forEach(t),_No=i(X),Sv=n(X,"LI",{});var aLe=s(Sv);Tme=n(aLe,"STRONG",{});var Est=s(Tme);bNo=r(Est,"camembert"),Est.forEach(t),vNo=r(aLe," \u2014 "),eO=n(aLe,"A",{href:!0});var Cst=s(eO);FNo=r(Cst,"CamembertForQuestionAnswering"),Cst.forEach(t),TNo=r(aLe," (CamemBERT model)"),aLe.forEach(t),MNo=i(X),Rv=n(X,"LI",{});var nLe=s(Rv);Mme=n(nLe,"STRONG",{});var wst=s(Mme);ENo=r(wst,"canine"),wst.forEach(t),CNo=r(nLe," \u2014 "),oO=n(nLe,"A",{href:!0});var Ast=s(oO);wNo=r(Ast,"CanineForQuestionAnswering"),Ast.forEach(t),ANo=r(nLe," (Canine model)"),nLe.forEach(t),yNo=i(X),Bv=n(X,"LI",{});var sLe=s(Bv);Eme=n(sLe,"STRONG",{});var yst=s(Eme);LNo=r(yst,"convbert"),yst.forEach(t),xNo=r(sLe," \u2014 "),rO=n(sLe,"A",{href:!0});var Lst=s(rO);$No=r(Lst,"ConvBertForQuestionAnswering"),Lst.forEach(t),kNo=r(sLe," (ConvBERT model)"),sLe.forEach(t),SNo=i(X),Pv=n(X,"LI",{});var lLe=s(Pv);Cme=n(lLe,"STRONG",{});var xst=s(Cme);RNo=r(xst,"data2vec-text"),xst.forEach(t),BNo=r(lLe," \u2014 "),tO=n(lLe,"A",{href:!0});var $st=s(tO);PNo=r($st,"Data2VecTextForQuestionAnswering"),$st.forEach(t),INo=r(lLe," (Data2VecText model)"),lLe.forEach(t),qNo=i(X),Iv=n(X,"LI",{});var iLe=s(Iv);wme=n(iLe,"STRONG",{});var kst=s(wme);NNo=r(kst,"deberta"),kst.forEach(t),jNo=r(iLe," \u2014 "),aO=n(iLe,"A",{href:!0});var Sst=s(aO);DNo=r(Sst,"DebertaForQuestionAnswering"),Sst.forEach(t),GNo=r(iLe," (DeBERTa model)"),iLe.forEach(t),ONo=i(X),qv=n(X,"LI",{});var dLe=s(qv);Ame=n(dLe,"STRONG",{});var Rst=s(Ame);VNo=r(Rst,"deberta-v2"),Rst.forEach(t),XNo=r(dLe," \u2014 "),nO=n(dLe,"A",{href:!0});var Bst=s(nO);zNo=r(Bst,"DebertaV2ForQuestionAnswering"),Bst.forEach(t),QNo=r(dLe," (DeBERTa-v2 model)"),dLe.forEach(t),WNo=i(X),Nv=n(X,"LI",{});var cLe=s(Nv);yme=n(cLe,"STRONG",{});var Pst=s(yme);HNo=r(Pst,"distilbert"),Pst.forEach(t),UNo=r(cLe," \u2014 "),sO=n(cLe,"A",{href:!0});var Ist=s(sO);JNo=r(Ist,"DistilBertForQuestionAnswering"),Ist.forEach(t),YNo=r(cLe," (DistilBERT model)"),cLe.forEach(t),KNo=i(X),jv=n(X,"LI",{});var fLe=s(jv);Lme=n(fLe,"STRONG",{});var qst=s(Lme);ZNo=r(qst,"electra"),qst.forEach(t),ejo=r(fLe," \u2014 "),lO=n(fLe,"A",{href:!0});var Nst=s(lO);ojo=r(Nst,"ElectraForQuestionAnswering"),Nst.forEach(t),rjo=r(fLe," (ELECTRA model)"),fLe.forEach(t),tjo=i(X),Dv=n(X,"LI",{});var mLe=s(Dv);xme=n(mLe,"STRONG",{});var jst=s(xme);ajo=r(jst,"flaubert"),jst.forEach(t),njo=r(mLe," \u2014 "),iO=n(mLe,"A",{href:!0});var Dst=s(iO);sjo=r(Dst,"FlaubertForQuestionAnsweringSimple"),Dst.forEach(t),ljo=r(mLe," (FlauBERT model)"),mLe.forEach(t),ijo=i(X),Gv=n(X,"LI",{});var gLe=s(Gv);$me=n(gLe,"STRONG",{});var Gst=s($me);djo=r(Gst,"fnet"),Gst.forEach(t),cjo=r(gLe," \u2014 "),dO=n(gLe,"A",{href:!0});var Ost=s(dO);fjo=r(Ost,"FNetForQuestionAnswering"),Ost.forEach(t),mjo=r(gLe," (FNet model)"),gLe.forEach(t),gjo=i(X),Ov=n(X,"LI",{});var hLe=s(Ov);kme=n(hLe,"STRONG",{});var Vst=s(kme);hjo=r(Vst,"funnel"),Vst.forEach(t),pjo=r(hLe," \u2014 "),cO=n(hLe,"A",{href:!0});var Xst=s(cO);ujo=r(Xst,"FunnelForQuestionAnswering"),Xst.forEach(t),_jo=r(hLe," (Funnel Transformer model)"),hLe.forEach(t),bjo=i(X),Vv=n(X,"LI",{});var pLe=s(Vv);Sme=n(pLe,"STRONG",{});var zst=s(Sme);vjo=r(zst,"gptj"),zst.forEach(t),Fjo=r(pLe," \u2014 "),fO=n(pLe,"A",{href:!0});var Qst=s(fO);Tjo=r(Qst,"GPTJForQuestionAnswering"),Qst.forEach(t),Mjo=r(pLe," (GPT-J model)"),pLe.forEach(t),Ejo=i(X),Xv=n(X,"LI",{});var uLe=s(Xv);Rme=n(uLe,"STRONG",{});var Wst=s(Rme);Cjo=r(Wst,"ibert"),Wst.forEach(t),wjo=r(uLe," \u2014 "),mO=n(uLe,"A",{href:!0});var Hst=s(mO);Ajo=r(Hst,"IBertForQuestionAnswering"),Hst.forEach(t),yjo=r(uLe," (I-BERT model)"),uLe.forEach(t),Ljo=i(X),zv=n(X,"LI",{});var _Le=s(zv);Bme=n(_Le,"STRONG",{});var Ust=s(Bme);xjo=r(Ust,"layoutlmv2"),Ust.forEach(t),$jo=r(_Le," \u2014 "),gO=n(_Le,"A",{href:!0});var Jst=s(gO);kjo=r(Jst,"LayoutLMv2ForQuestionAnswering"),Jst.forEach(t),Sjo=r(_Le," (LayoutLMv2 model)"),_Le.forEach(t),Rjo=i(X),Qv=n(X,"LI",{});var bLe=s(Qv);Pme=n(bLe,"STRONG",{});var Yst=s(Pme);Bjo=r(Yst,"led"),Yst.forEach(t),Pjo=r(bLe," \u2014 "),hO=n(bLe,"A",{href:!0});var Kst=s(hO);Ijo=r(Kst,"LEDForQuestionAnswering"),Kst.forEach(t),qjo=r(bLe," (LED model)"),bLe.forEach(t),Njo=i(X),Wv=n(X,"LI",{});var vLe=s(Wv);Ime=n(vLe,"STRONG",{});var Zst=s(Ime);jjo=r(Zst,"longformer"),Zst.forEach(t),Djo=r(vLe," \u2014 "),pO=n(vLe,"A",{href:!0});var elt=s(pO);Gjo=r(elt,"LongformerForQuestionAnswering"),elt.forEach(t),Ojo=r(vLe," (Longformer model)"),vLe.forEach(t),Vjo=i(X),Hv=n(X,"LI",{});var FLe=s(Hv);qme=n(FLe,"STRONG",{});var olt=s(qme);Xjo=r(olt,"lxmert"),olt.forEach(t),zjo=r(FLe," \u2014 "),uO=n(FLe,"A",{href:!0});var rlt=s(uO);Qjo=r(rlt,"LxmertForQuestionAnswering"),rlt.forEach(t),Wjo=r(FLe," (LXMERT model)"),FLe.forEach(t),Hjo=i(X),Uv=n(X,"LI",{});var TLe=s(Uv);Nme=n(TLe,"STRONG",{});var tlt=s(Nme);Ujo=r(tlt,"mbart"),tlt.forEach(t),Jjo=r(TLe," \u2014 "),_O=n(TLe,"A",{href:!0});var alt=s(_O);Yjo=r(alt,"MBartForQuestionAnswering"),alt.forEach(t),Kjo=r(TLe," (mBART model)"),TLe.forEach(t),Zjo=i(X),Jv=n(X,"LI",{});var MLe=s(Jv);jme=n(MLe,"STRONG",{});var nlt=s(jme);eDo=r(nlt,"megatron-bert"),nlt.forEach(t),oDo=r(MLe," \u2014 "),bO=n(MLe,"A",{href:!0});var slt=s(bO);rDo=r(slt,"MegatronBertForQuestionAnswering"),slt.forEach(t),tDo=r(MLe," (MegatronBert model)"),MLe.forEach(t),aDo=i(X),Yv=n(X,"LI",{});var ELe=s(Yv);Dme=n(ELe,"STRONG",{});var llt=s(Dme);nDo=r(llt,"mobilebert"),llt.forEach(t),sDo=r(ELe," \u2014 "),vO=n(ELe,"A",{href:!0});var ilt=s(vO);lDo=r(ilt,"MobileBertForQuestionAnswering"),ilt.forEach(t),iDo=r(ELe," (MobileBERT model)"),ELe.forEach(t),dDo=i(X),Kv=n(X,"LI",{});var CLe=s(Kv);Gme=n(CLe,"STRONG",{});var dlt=s(Gme);cDo=r(dlt,"mpnet"),dlt.forEach(t),fDo=r(CLe," \u2014 "),FO=n(CLe,"A",{href:!0});var clt=s(FO);mDo=r(clt,"MPNetForQuestionAnswering"),clt.forEach(t),gDo=r(CLe," (MPNet model)"),CLe.forEach(t),hDo=i(X),Zv=n(X,"LI",{});var wLe=s(Zv);Ome=n(wLe,"STRONG",{});var flt=s(Ome);pDo=r(flt,"nystromformer"),flt.forEach(t),uDo=r(wLe," \u2014 "),TO=n(wLe,"A",{href:!0});var mlt=s(TO);_Do=r(mlt,"NystromformerForQuestionAnswering"),mlt.forEach(t),bDo=r(wLe," (Nystromformer model)"),wLe.forEach(t),vDo=i(X),eF=n(X,"LI",{});var ALe=s(eF);Vme=n(ALe,"STRONG",{});var glt=s(Vme);FDo=r(glt,"qdqbert"),glt.forEach(t),TDo=r(ALe," \u2014 "),MO=n(ALe,"A",{href:!0});var hlt=s(MO);MDo=r(hlt,"QDQBertForQuestionAnswering"),hlt.forEach(t),EDo=r(ALe," (QDQBert model)"),ALe.forEach(t),CDo=i(X),oF=n(X,"LI",{});var yLe=s(oF);Xme=n(yLe,"STRONG",{});var plt=s(Xme);wDo=r(plt,"reformer"),plt.forEach(t),ADo=r(yLe," \u2014 "),EO=n(yLe,"A",{href:!0});var ult=s(EO);yDo=r(ult,"ReformerForQuestionAnswering"),ult.forEach(t),LDo=r(yLe," (Reformer model)"),yLe.forEach(t),xDo=i(X),rF=n(X,"LI",{});var LLe=s(rF);zme=n(LLe,"STRONG",{});var _lt=s(zme);$Do=r(_lt,"rembert"),_lt.forEach(t),kDo=r(LLe," \u2014 "),CO=n(LLe,"A",{href:!0});var blt=s(CO);SDo=r(blt,"RemBertForQuestionAnswering"),blt.forEach(t),RDo=r(LLe," (RemBERT model)"),LLe.forEach(t),BDo=i(X),tF=n(X,"LI",{});var xLe=s(tF);Qme=n(xLe,"STRONG",{});var vlt=s(Qme);PDo=r(vlt,"roberta"),vlt.forEach(t),IDo=r(xLe," \u2014 "),wO=n(xLe,"A",{href:!0});var Flt=s(wO);qDo=r(Flt,"RobertaForQuestionAnswering"),Flt.forEach(t),NDo=r(xLe," (RoBERTa model)"),xLe.forEach(t),jDo=i(X),aF=n(X,"LI",{});var $Le=s(aF);Wme=n($Le,"STRONG",{});var Tlt=s(Wme);DDo=r(Tlt,"roformer"),Tlt.forEach(t),GDo=r($Le," \u2014 "),AO=n($Le,"A",{href:!0});var Mlt=s(AO);ODo=r(Mlt,"RoFormerForQuestionAnswering"),Mlt.forEach(t),VDo=r($Le," (RoFormer model)"),$Le.forEach(t),XDo=i(X),nF=n(X,"LI",{});var kLe=s(nF);Hme=n(kLe,"STRONG",{});var Elt=s(Hme);zDo=r(Elt,"splinter"),Elt.forEach(t),QDo=r(kLe," \u2014 "),yO=n(kLe,"A",{href:!0});var Clt=s(yO);WDo=r(Clt,"SplinterForQuestionAnswering"),Clt.forEach(t),HDo=r(kLe," (Splinter model)"),kLe.forEach(t),UDo=i(X),sF=n(X,"LI",{});var SLe=s(sF);Ume=n(SLe,"STRONG",{});var wlt=s(Ume);JDo=r(wlt,"squeezebert"),wlt.forEach(t),YDo=r(SLe," \u2014 "),LO=n(SLe,"A",{href:!0});var Alt=s(LO);KDo=r(Alt,"SqueezeBertForQuestionAnswering"),Alt.forEach(t),ZDo=r(SLe," (SqueezeBERT model)"),SLe.forEach(t),eGo=i(X),lF=n(X,"LI",{});var RLe=s(lF);Jme=n(RLe,"STRONG",{});var ylt=s(Jme);oGo=r(ylt,"xlm"),ylt.forEach(t),rGo=r(RLe," \u2014 "),xO=n(RLe,"A",{href:!0});var Llt=s(xO);tGo=r(Llt,"XLMForQuestionAnsweringSimple"),Llt.forEach(t),aGo=r(RLe," (XLM model)"),RLe.forEach(t),nGo=i(X),iF=n(X,"LI",{});var BLe=s(iF);Yme=n(BLe,"STRONG",{});var xlt=s(Yme);sGo=r(xlt,"xlm-roberta"),xlt.forEach(t),lGo=r(BLe," \u2014 "),$O=n(BLe,"A",{href:!0});var $lt=s($O);iGo=r($lt,"XLMRobertaForQuestionAnswering"),$lt.forEach(t),dGo=r(BLe," (XLM-RoBERTa model)"),BLe.forEach(t),cGo=i(X),dF=n(X,"LI",{});var PLe=s(dF);Kme=n(PLe,"STRONG",{});var klt=s(Kme);fGo=r(klt,"xlm-roberta-xl"),klt.forEach(t),mGo=r(PLe," \u2014 "),kO=n(PLe,"A",{href:!0});var Slt=s(kO);gGo=r(Slt,"XLMRobertaXLForQuestionAnswering"),Slt.forEach(t),hGo=r(PLe," (XLM-RoBERTa-XL model)"),PLe.forEach(t),pGo=i(X),cF=n(X,"LI",{});var ILe=s(cF);Zme=n(ILe,"STRONG",{});var Rlt=s(Zme);uGo=r(Rlt,"xlnet"),Rlt.forEach(t),_Go=r(ILe," \u2014 "),SO=n(ILe,"A",{href:!0});var Blt=s(SO);bGo=r(Blt,"XLNetForQuestionAnsweringSimple"),Blt.forEach(t),vGo=r(ILe," (XLNet model)"),ILe.forEach(t),FGo=i(X),fF=n(X,"LI",{});var qLe=s(fF);ege=n(qLe,"STRONG",{});var Plt=s(ege);TGo=r(Plt,"yoso"),Plt.forEach(t),MGo=r(qLe," \u2014 "),RO=n(qLe,"A",{href:!0});var Ilt=s(RO);EGo=r(Ilt,"YosoForQuestionAnswering"),Ilt.forEach(t),CGo=r(qLe," (YOSO model)"),qLe.forEach(t),X.forEach(t),wGo=i(na),mF=n(na,"P",{});var NLe=s(mF);AGo=r(NLe,"The model is set in evaluation mode by default using "),oge=n(NLe,"CODE",{});var qlt=s(oge);yGo=r(qlt,"model.eval()"),qlt.forEach(t),LGo=r(NLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rge=n(NLe,"CODE",{});var Nlt=s(rge);xGo=r(Nlt,"model.train()"),Nlt.forEach(t),NLe.forEach(t),$Go=i(na),T(gF.$$.fragment,na),na.forEach(t),Qs.forEach(t),sPe=i(f),Qi=n(f,"H2",{class:!0});var iqe=s(Qi);hF=n(iqe,"A",{id:!0,class:!0,href:!0});var jlt=s(hF);tge=n(jlt,"SPAN",{});var Dlt=s(tge);T(UA.$$.fragment,Dlt),Dlt.forEach(t),jlt.forEach(t),kGo=i(iqe),age=n(iqe,"SPAN",{});var Glt=s(age);SGo=r(Glt,"AutoModelForTableQuestionAnswering"),Glt.forEach(t),iqe.forEach(t),lPe=i(f),No=n(f,"DIV",{class:!0});var Ws=s(No);T(JA.$$.fragment,Ws),RGo=i(Ws),Wi=n(Ws,"P",{});var VY=s(Wi);BGo=r(VY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BO=n(VY,"A",{href:!0});var Olt=s(BO);PGo=r(Olt,"from_pretrained()"),Olt.forEach(t),IGo=r(VY," class method or the "),PO=n(VY,"A",{href:!0});var Vlt=s(PO);qGo=r(Vlt,"from_config()"),Vlt.forEach(t),NGo=r(VY,` class
method.`),VY.forEach(t),jGo=i(Ws),YA=n(Ws,"P",{});var dqe=s(YA);DGo=r(dqe,"This class cannot be instantiated directly using "),nge=n(dqe,"CODE",{});var Xlt=s(nge);GGo=r(Xlt,"__init__()"),Xlt.forEach(t),OGo=r(dqe," (throws an error)."),dqe.forEach(t),VGo=i(Ws),dt=n(Ws,"DIV",{class:!0});var KC=s(dt);T(KA.$$.fragment,KC),XGo=i(KC),sge=n(KC,"P",{});var zlt=s(sge);zGo=r(zlt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),zlt.forEach(t),QGo=i(KC),Hi=n(KC,"P",{});var XY=s(Hi);WGo=r(XY,`Note:
Loading a model from its configuration file does `),lge=n(XY,"STRONG",{});var Qlt=s(lge);HGo=r(Qlt,"not"),Qlt.forEach(t),UGo=r(XY,` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=n(XY,"A",{href:!0});var Wlt=s(IO);JGo=r(Wlt,"from_pretrained()"),Wlt.forEach(t),YGo=r(XY," to load the model weights."),XY.forEach(t),KGo=i(KC),T(pF.$$.fragment,KC),KC.forEach(t),ZGo=i(Ws),ao=n(Ws,"DIV",{class:!0});var sa=s(ao);T(ZA.$$.fragment,sa),eOo=i(sa),ige=n(sa,"P",{});var Hlt=s(ige);oOo=r(Hlt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Hlt.forEach(t),rOo=i(sa),Ra=n(sa,"P",{});var ZC=s(Ra);tOo=r(ZC,"The model class to instantiate is selected based on the "),dge=n(ZC,"CODE",{});var Ult=s(dge);aOo=r(Ult,"model_type"),Ult.forEach(t),nOo=r(ZC,` property of the config object (either
passed as an argument or loaded from `),cge=n(ZC,"CODE",{});var Jlt=s(cge);sOo=r(Jlt,"pretrained_model_name_or_path"),Jlt.forEach(t),lOo=r(ZC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fge=n(ZC,"CODE",{});var Ylt=s(fge);iOo=r(Ylt,"pretrained_model_name_or_path"),Ylt.forEach(t),dOo=r(ZC,":"),ZC.forEach(t),cOo=i(sa),mge=n(sa,"UL",{});var Klt=s(mge);uF=n(Klt,"LI",{});var jLe=s(uF);gge=n(jLe,"STRONG",{});var Zlt=s(gge);fOo=r(Zlt,"tapas"),Zlt.forEach(t),mOo=r(jLe," \u2014 "),qO=n(jLe,"A",{href:!0});var eit=s(qO);gOo=r(eit,"TapasForQuestionAnswering"),eit.forEach(t),hOo=r(jLe," (TAPAS model)"),jLe.forEach(t),Klt.forEach(t),pOo=i(sa),_F=n(sa,"P",{});var DLe=s(_F);uOo=r(DLe,"The model is set in evaluation mode by default using "),hge=n(DLe,"CODE",{});var oit=s(hge);_Oo=r(oit,"model.eval()"),oit.forEach(t),bOo=r(DLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=n(DLe,"CODE",{});var rit=s(pge);vOo=r(rit,"model.train()"),rit.forEach(t),DLe.forEach(t),FOo=i(sa),T(bF.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),iPe=i(f),Ui=n(f,"H2",{class:!0});var cqe=s(Ui);vF=n(cqe,"A",{id:!0,class:!0,href:!0});var tit=s(vF);uge=n(tit,"SPAN",{});var ait=s(uge);T(e6.$$.fragment,ait),ait.forEach(t),tit.forEach(t),TOo=i(cqe),_ge=n(cqe,"SPAN",{});var nit=s(_ge);MOo=r(nit,"AutoModelForImageClassification"),nit.forEach(t),cqe.forEach(t),dPe=i(f),jo=n(f,"DIV",{class:!0});var Hs=s(jo);T(o6.$$.fragment,Hs),EOo=i(Hs),Ji=n(Hs,"P",{});var zY=s(Ji);COo=r(zY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NO=n(zY,"A",{href:!0});var sit=s(NO);wOo=r(sit,"from_pretrained()"),sit.forEach(t),AOo=r(zY," class method or the "),jO=n(zY,"A",{href:!0});var lit=s(jO);yOo=r(lit,"from_config()"),lit.forEach(t),LOo=r(zY,` class
method.`),zY.forEach(t),xOo=i(Hs),r6=n(Hs,"P",{});var fqe=s(r6);$Oo=r(fqe,"This class cannot be instantiated directly using "),bge=n(fqe,"CODE",{});var iit=s(bge);kOo=r(iit,"__init__()"),iit.forEach(t),SOo=r(fqe," (throws an error)."),fqe.forEach(t),ROo=i(Hs),ct=n(Hs,"DIV",{class:!0});var e3=s(ct);T(t6.$$.fragment,e3),BOo=i(e3),vge=n(e3,"P",{});var dit=s(vge);POo=r(dit,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dit.forEach(t),IOo=i(e3),Yi=n(e3,"P",{});var QY=s(Yi);qOo=r(QY,`Note:
Loading a model from its configuration file does `),Fge=n(QY,"STRONG",{});var cit=s(Fge);NOo=r(cit,"not"),cit.forEach(t),jOo=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=n(QY,"A",{href:!0});var fit=s(DO);DOo=r(fit,"from_pretrained()"),fit.forEach(t),GOo=r(QY," to load the model weights."),QY.forEach(t),OOo=i(e3),T(FF.$$.fragment,e3),e3.forEach(t),VOo=i(Hs),no=n(Hs,"DIV",{class:!0});var la=s(no);T(a6.$$.fragment,la),XOo=i(la),Tge=n(la,"P",{});var mit=s(Tge);zOo=r(mit,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mit.forEach(t),QOo=i(la),Ba=n(la,"P",{});var o3=s(Ba);WOo=r(o3,"The model class to instantiate is selected based on the "),Mge=n(o3,"CODE",{});var git=s(Mge);HOo=r(git,"model_type"),git.forEach(t),UOo=r(o3,` property of the config object (either
passed as an argument or loaded from `),Ege=n(o3,"CODE",{});var hit=s(Ege);JOo=r(hit,"pretrained_model_name_or_path"),hit.forEach(t),YOo=r(o3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=n(o3,"CODE",{});var pit=s(Cge);KOo=r(pit,"pretrained_model_name_or_path"),pit.forEach(t),ZOo=r(o3,":"),o3.forEach(t),eVo=i(la),ve=n(la,"UL",{});var Ee=s(ve);TF=n(Ee,"LI",{});var GLe=s(TF);wge=n(GLe,"STRONG",{});var uit=s(wge);oVo=r(uit,"beit"),uit.forEach(t),rVo=r(GLe," \u2014 "),GO=n(GLe,"A",{href:!0});var _it=s(GO);tVo=r(_it,"BeitForImageClassification"),_it.forEach(t),aVo=r(GLe," (BEiT model)"),GLe.forEach(t),nVo=i(Ee),MF=n(Ee,"LI",{});var OLe=s(MF);Age=n(OLe,"STRONG",{});var bit=s(Age);sVo=r(bit,"convnext"),bit.forEach(t),lVo=r(OLe," \u2014 "),OO=n(OLe,"A",{href:!0});var vit=s(OO);iVo=r(vit,"ConvNextForImageClassification"),vit.forEach(t),dVo=r(OLe," (ConvNext model)"),OLe.forEach(t),cVo=i(Ee),EF=n(Ee,"LI",{});var VLe=s(EF);yge=n(VLe,"STRONG",{});var Fit=s(yge);fVo=r(Fit,"data2vec-vision"),Fit.forEach(t),mVo=r(VLe," \u2014 "),VO=n(VLe,"A",{href:!0});var Tit=s(VO);gVo=r(Tit,"Data2VecVisionForImageClassification"),Tit.forEach(t),hVo=r(VLe," (Data2VecVision model)"),VLe.forEach(t),pVo=i(Ee),$s=n(Ee,"LI",{});var qx=s($s);Lge=n(qx,"STRONG",{});var Mit=s(Lge);uVo=r(Mit,"deit"),Mit.forEach(t),_Vo=r(qx," \u2014 "),XO=n(qx,"A",{href:!0});var Eit=s(XO);bVo=r(Eit,"DeiTForImageClassification"),Eit.forEach(t),vVo=r(qx," or "),zO=n(qx,"A",{href:!0});var Cit=s(zO);FVo=r(Cit,"DeiTForImageClassificationWithTeacher"),Cit.forEach(t),TVo=r(qx," (DeiT model)"),qx.forEach(t),MVo=i(Ee),CF=n(Ee,"LI",{});var XLe=s(CF);xge=n(XLe,"STRONG",{});var wit=s(xge);EVo=r(wit,"imagegpt"),wit.forEach(t),CVo=r(XLe," \u2014 "),QO=n(XLe,"A",{href:!0});var Ait=s(QO);wVo=r(Ait,"ImageGPTForImageClassification"),Ait.forEach(t),AVo=r(XLe," (ImageGPT model)"),XLe.forEach(t),yVo=i(Ee),ft=n(Ee,"LI",{});var rf=s(ft);$ge=n(rf,"STRONG",{});var yit=s($ge);LVo=r(yit,"perceiver"),yit.forEach(t),xVo=r(rf," \u2014 "),WO=n(rf,"A",{href:!0});var Lit=s(WO);$Vo=r(Lit,"PerceiverForImageClassificationLearned"),Lit.forEach(t),kVo=r(rf," or "),HO=n(rf,"A",{href:!0});var xit=s(HO);SVo=r(xit,"PerceiverForImageClassificationFourier"),xit.forEach(t),RVo=r(rf," or "),UO=n(rf,"A",{href:!0});var $it=s(UO);BVo=r($it,"PerceiverForImageClassificationConvProcessing"),$it.forEach(t),PVo=r(rf," (Perceiver model)"),rf.forEach(t),IVo=i(Ee),wF=n(Ee,"LI",{});var zLe=s(wF);kge=n(zLe,"STRONG",{});var kit=s(kge);qVo=r(kit,"poolformer"),kit.forEach(t),NVo=r(zLe," \u2014 "),JO=n(zLe,"A",{href:!0});var Sit=s(JO);jVo=r(Sit,"PoolFormerForImageClassification"),Sit.forEach(t),DVo=r(zLe," (PoolFormer model)"),zLe.forEach(t),GVo=i(Ee),AF=n(Ee,"LI",{});var QLe=s(AF);Sge=n(QLe,"STRONG",{});var Rit=s(Sge);OVo=r(Rit,"regnet"),Rit.forEach(t),VVo=r(QLe," \u2014 "),YO=n(QLe,"A",{href:!0});var Bit=s(YO);XVo=r(Bit,"RegNetForImageClassification"),Bit.forEach(t),zVo=r(QLe," (RegNet model)"),QLe.forEach(t),QVo=i(Ee),yF=n(Ee,"LI",{});var WLe=s(yF);Rge=n(WLe,"STRONG",{});var Pit=s(Rge);WVo=r(Pit,"resnet"),Pit.forEach(t),HVo=r(WLe," \u2014 "),KO=n(WLe,"A",{href:!0});var Iit=s(KO);UVo=r(Iit,"ResNetForImageClassification"),Iit.forEach(t),JVo=r(WLe," (ResNet model)"),WLe.forEach(t),YVo=i(Ee),LF=n(Ee,"LI",{});var HLe=s(LF);Bge=n(HLe,"STRONG",{});var qit=s(Bge);KVo=r(qit,"segformer"),qit.forEach(t),ZVo=r(HLe," \u2014 "),ZO=n(HLe,"A",{href:!0});var Nit=s(ZO);eXo=r(Nit,"SegformerForImageClassification"),Nit.forEach(t),oXo=r(HLe," (SegFormer model)"),HLe.forEach(t),rXo=i(Ee),xF=n(Ee,"LI",{});var ULe=s(xF);Pge=n(ULe,"STRONG",{});var jit=s(Pge);tXo=r(jit,"swin"),jit.forEach(t),aXo=r(ULe," \u2014 "),eV=n(ULe,"A",{href:!0});var Dit=s(eV);nXo=r(Dit,"SwinForImageClassification"),Dit.forEach(t),sXo=r(ULe," (Swin model)"),ULe.forEach(t),lXo=i(Ee),$F=n(Ee,"LI",{});var JLe=s($F);Ige=n(JLe,"STRONG",{});var Git=s(Ige);iXo=r(Git,"van"),Git.forEach(t),dXo=r(JLe," \u2014 "),oV=n(JLe,"A",{href:!0});var Oit=s(oV);cXo=r(Oit,"VanForImageClassification"),Oit.forEach(t),fXo=r(JLe," (VAN model)"),JLe.forEach(t),mXo=i(Ee),kF=n(Ee,"LI",{});var YLe=s(kF);qge=n(YLe,"STRONG",{});var Vit=s(qge);gXo=r(Vit,"vit"),Vit.forEach(t),hXo=r(YLe," \u2014 "),rV=n(YLe,"A",{href:!0});var Xit=s(rV);pXo=r(Xit,"ViTForImageClassification"),Xit.forEach(t),uXo=r(YLe," (ViT model)"),YLe.forEach(t),Ee.forEach(t),_Xo=i(la),SF=n(la,"P",{});var KLe=s(SF);bXo=r(KLe,"The model is set in evaluation mode by default using "),Nge=n(KLe,"CODE",{});var zit=s(Nge);vXo=r(zit,"model.eval()"),zit.forEach(t),FXo=r(KLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jge=n(KLe,"CODE",{});var Qit=s(jge);TXo=r(Qit,"model.train()"),Qit.forEach(t),KLe.forEach(t),MXo=i(la),T(RF.$$.fragment,la),la.forEach(t),Hs.forEach(t),cPe=i(f),Ki=n(f,"H2",{class:!0});var mqe=s(Ki);BF=n(mqe,"A",{id:!0,class:!0,href:!0});var Wit=s(BF);Dge=n(Wit,"SPAN",{});var Hit=s(Dge);T(n6.$$.fragment,Hit),Hit.forEach(t),Wit.forEach(t),EXo=i(mqe),Gge=n(mqe,"SPAN",{});var Uit=s(Gge);CXo=r(Uit,"AutoModelForVision2Seq"),Uit.forEach(t),mqe.forEach(t),fPe=i(f),Do=n(f,"DIV",{class:!0});var Us=s(Do);T(s6.$$.fragment,Us),wXo=i(Us),Zi=n(Us,"P",{});var WY=s(Zi);AXo=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tV=n(WY,"A",{href:!0});var Jit=s(tV);yXo=r(Jit,"from_pretrained()"),Jit.forEach(t),LXo=r(WY," class method or the "),aV=n(WY,"A",{href:!0});var Yit=s(aV);xXo=r(Yit,"from_config()"),Yit.forEach(t),$Xo=r(WY,` class
method.`),WY.forEach(t),kXo=i(Us),l6=n(Us,"P",{});var gqe=s(l6);SXo=r(gqe,"This class cannot be instantiated directly using "),Oge=n(gqe,"CODE",{});var Kit=s(Oge);RXo=r(Kit,"__init__()"),Kit.forEach(t),BXo=r(gqe," (throws an error)."),gqe.forEach(t),PXo=i(Us),mt=n(Us,"DIV",{class:!0});var r3=s(mt);T(i6.$$.fragment,r3),IXo=i(r3),Vge=n(r3,"P",{});var Zit=s(Vge);qXo=r(Zit,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Zit.forEach(t),NXo=i(r3),ed=n(r3,"P",{});var HY=s(ed);jXo=r(HY,`Note:
Loading a model from its configuration file does `),Xge=n(HY,"STRONG",{});var edt=s(Xge);DXo=r(edt,"not"),edt.forEach(t),GXo=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),nV=n(HY,"A",{href:!0});var odt=s(nV);OXo=r(odt,"from_pretrained()"),odt.forEach(t),VXo=r(HY," to load the model weights."),HY.forEach(t),XXo=i(r3),T(PF.$$.fragment,r3),r3.forEach(t),zXo=i(Us),so=n(Us,"DIV",{class:!0});var ia=s(so);T(d6.$$.fragment,ia),QXo=i(ia),zge=n(ia,"P",{});var rdt=s(zge);WXo=r(rdt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rdt.forEach(t),HXo=i(ia),Pa=n(ia,"P",{});var t3=s(Pa);UXo=r(t3,"The model class to instantiate is selected based on the "),Qge=n(t3,"CODE",{});var tdt=s(Qge);JXo=r(tdt,"model_type"),tdt.forEach(t),YXo=r(t3,` property of the config object (either
passed as an argument or loaded from `),Wge=n(t3,"CODE",{});var adt=s(Wge);KXo=r(adt,"pretrained_model_name_or_path"),adt.forEach(t),ZXo=r(t3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hge=n(t3,"CODE",{});var ndt=s(Hge);ezo=r(ndt,"pretrained_model_name_or_path"),ndt.forEach(t),ozo=r(t3,":"),t3.forEach(t),rzo=i(ia),Uge=n(ia,"UL",{});var sdt=s(Uge);IF=n(sdt,"LI",{});var ZLe=s(IF);Jge=n(ZLe,"STRONG",{});var ldt=s(Jge);tzo=r(ldt,"vision-encoder-decoder"),ldt.forEach(t),azo=r(ZLe," \u2014 "),sV=n(ZLe,"A",{href:!0});var idt=s(sV);nzo=r(idt,"VisionEncoderDecoderModel"),idt.forEach(t),szo=r(ZLe," (Vision Encoder decoder model)"),ZLe.forEach(t),sdt.forEach(t),lzo=i(ia),qF=n(ia,"P",{});var e8e=s(qF);izo=r(e8e,"The model is set in evaluation mode by default using "),Yge=n(e8e,"CODE",{});var ddt=s(Yge);dzo=r(ddt,"model.eval()"),ddt.forEach(t),czo=r(e8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=n(e8e,"CODE",{});var cdt=s(Kge);fzo=r(cdt,"model.train()"),cdt.forEach(t),e8e.forEach(t),mzo=i(ia),T(NF.$$.fragment,ia),ia.forEach(t),Us.forEach(t),mPe=i(f),od=n(f,"H2",{class:!0});var hqe=s(od);jF=n(hqe,"A",{id:!0,class:!0,href:!0});var fdt=s(jF);Zge=n(fdt,"SPAN",{});var mdt=s(Zge);T(c6.$$.fragment,mdt),mdt.forEach(t),fdt.forEach(t),gzo=i(hqe),ehe=n(hqe,"SPAN",{});var gdt=s(ehe);hzo=r(gdt,"AutoModelForAudioClassification"),gdt.forEach(t),hqe.forEach(t),gPe=i(f),Go=n(f,"DIV",{class:!0});var Js=s(Go);T(f6.$$.fragment,Js),pzo=i(Js),rd=n(Js,"P",{});var UY=s(rd);uzo=r(UY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),lV=n(UY,"A",{href:!0});var hdt=s(lV);_zo=r(hdt,"from_pretrained()"),hdt.forEach(t),bzo=r(UY," class method or the "),iV=n(UY,"A",{href:!0});var pdt=s(iV);vzo=r(pdt,"from_config()"),pdt.forEach(t),Fzo=r(UY,` class
method.`),UY.forEach(t),Tzo=i(Js),m6=n(Js,"P",{});var pqe=s(m6);Mzo=r(pqe,"This class cannot be instantiated directly using "),ohe=n(pqe,"CODE",{});var udt=s(ohe);Ezo=r(udt,"__init__()"),udt.forEach(t),Czo=r(pqe," (throws an error)."),pqe.forEach(t),wzo=i(Js),gt=n(Js,"DIV",{class:!0});var a3=s(gt);T(g6.$$.fragment,a3),Azo=i(a3),rhe=n(a3,"P",{});var _dt=s(rhe);yzo=r(_dt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),_dt.forEach(t),Lzo=i(a3),td=n(a3,"P",{});var JY=s(td);xzo=r(JY,`Note:
Loading a model from its configuration file does `),the=n(JY,"STRONG",{});var bdt=s(the);$zo=r(bdt,"not"),bdt.forEach(t),kzo=r(JY,` load the model weights. It only affects the
model\u2019s configuration. Use `),dV=n(JY,"A",{href:!0});var vdt=s(dV);Szo=r(vdt,"from_pretrained()"),vdt.forEach(t),Rzo=r(JY," to load the model weights."),JY.forEach(t),Bzo=i(a3),T(DF.$$.fragment,a3),a3.forEach(t),Pzo=i(Js),lo=n(Js,"DIV",{class:!0});var da=s(lo);T(h6.$$.fragment,da),Izo=i(da),ahe=n(da,"P",{});var Fdt=s(ahe);qzo=r(Fdt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Fdt.forEach(t),Nzo=i(da),Ia=n(da,"P",{});var n3=s(Ia);jzo=r(n3,"The model class to instantiate is selected based on the "),nhe=n(n3,"CODE",{});var Tdt=s(nhe);Dzo=r(Tdt,"model_type"),Tdt.forEach(t),Gzo=r(n3,` property of the config object (either
passed as an argument or loaded from `),she=n(n3,"CODE",{});var Mdt=s(she);Ozo=r(Mdt,"pretrained_model_name_or_path"),Mdt.forEach(t),Vzo=r(n3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lhe=n(n3,"CODE",{});var Edt=s(lhe);Xzo=r(Edt,"pretrained_model_name_or_path"),Edt.forEach(t),zzo=r(n3,":"),n3.forEach(t),Qzo=i(da),Ne=n(da,"UL",{});var bo=s(Ne);GF=n(bo,"LI",{});var o8e=s(GF);ihe=n(o8e,"STRONG",{});var Cdt=s(ihe);Wzo=r(Cdt,"data2vec-audio"),Cdt.forEach(t),Hzo=r(o8e," \u2014 "),cV=n(o8e,"A",{href:!0});var wdt=s(cV);Uzo=r(wdt,"Data2VecAudioForSequenceClassification"),wdt.forEach(t),Jzo=r(o8e," (Data2VecAudio model)"),o8e.forEach(t),Yzo=i(bo),OF=n(bo,"LI",{});var r8e=s(OF);dhe=n(r8e,"STRONG",{});var Adt=s(dhe);Kzo=r(Adt,"hubert"),Adt.forEach(t),Zzo=r(r8e," \u2014 "),fV=n(r8e,"A",{href:!0});var ydt=s(fV);eQo=r(ydt,"HubertForSequenceClassification"),ydt.forEach(t),oQo=r(r8e," (Hubert model)"),r8e.forEach(t),rQo=i(bo),VF=n(bo,"LI",{});var t8e=s(VF);che=n(t8e,"STRONG",{});var Ldt=s(che);tQo=r(Ldt,"sew"),Ldt.forEach(t),aQo=r(t8e," \u2014 "),mV=n(t8e,"A",{href:!0});var xdt=s(mV);nQo=r(xdt,"SEWForSequenceClassification"),xdt.forEach(t),sQo=r(t8e," (SEW model)"),t8e.forEach(t),lQo=i(bo),XF=n(bo,"LI",{});var a8e=s(XF);fhe=n(a8e,"STRONG",{});var $dt=s(fhe);iQo=r($dt,"sew-d"),$dt.forEach(t),dQo=r(a8e," \u2014 "),gV=n(a8e,"A",{href:!0});var kdt=s(gV);cQo=r(kdt,"SEWDForSequenceClassification"),kdt.forEach(t),fQo=r(a8e," (SEW-D model)"),a8e.forEach(t),mQo=i(bo),zF=n(bo,"LI",{});var n8e=s(zF);mhe=n(n8e,"STRONG",{});var Sdt=s(mhe);gQo=r(Sdt,"unispeech"),Sdt.forEach(t),hQo=r(n8e," \u2014 "),hV=n(n8e,"A",{href:!0});var Rdt=s(hV);pQo=r(Rdt,"UniSpeechForSequenceClassification"),Rdt.forEach(t),uQo=r(n8e," (UniSpeech model)"),n8e.forEach(t),_Qo=i(bo),QF=n(bo,"LI",{});var s8e=s(QF);ghe=n(s8e,"STRONG",{});var Bdt=s(ghe);bQo=r(Bdt,"unispeech-sat"),Bdt.forEach(t),vQo=r(s8e," \u2014 "),pV=n(s8e,"A",{href:!0});var Pdt=s(pV);FQo=r(Pdt,"UniSpeechSatForSequenceClassification"),Pdt.forEach(t),TQo=r(s8e," (UniSpeechSat model)"),s8e.forEach(t),MQo=i(bo),WF=n(bo,"LI",{});var l8e=s(WF);hhe=n(l8e,"STRONG",{});var Idt=s(hhe);EQo=r(Idt,"wav2vec2"),Idt.forEach(t),CQo=r(l8e," \u2014 "),uV=n(l8e,"A",{href:!0});var qdt=s(uV);wQo=r(qdt,"Wav2Vec2ForSequenceClassification"),qdt.forEach(t),AQo=r(l8e," (Wav2Vec2 model)"),l8e.forEach(t),yQo=i(bo),HF=n(bo,"LI",{});var i8e=s(HF);phe=n(i8e,"STRONG",{});var Ndt=s(phe);LQo=r(Ndt,"wavlm"),Ndt.forEach(t),xQo=r(i8e," \u2014 "),_V=n(i8e,"A",{href:!0});var jdt=s(_V);$Qo=r(jdt,"WavLMForSequenceClassification"),jdt.forEach(t),kQo=r(i8e," (WavLM model)"),i8e.forEach(t),bo.forEach(t),SQo=i(da),UF=n(da,"P",{});var d8e=s(UF);RQo=r(d8e,"The model is set in evaluation mode by default using "),uhe=n(d8e,"CODE",{});var Ddt=s(uhe);BQo=r(Ddt,"model.eval()"),Ddt.forEach(t),PQo=r(d8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_he=n(d8e,"CODE",{});var Gdt=s(_he);IQo=r(Gdt,"model.train()"),Gdt.forEach(t),d8e.forEach(t),qQo=i(da),T(JF.$$.fragment,da),da.forEach(t),Js.forEach(t),hPe=i(f),ad=n(f,"H2",{class:!0});var uqe=s(ad);YF=n(uqe,"A",{id:!0,class:!0,href:!0});var Odt=s(YF);bhe=n(Odt,"SPAN",{});var Vdt=s(bhe);T(p6.$$.fragment,Vdt),Vdt.forEach(t),Odt.forEach(t),NQo=i(uqe),vhe=n(uqe,"SPAN",{});var Xdt=s(vhe);jQo=r(Xdt,"AutoModelForAudioFrameClassification"),Xdt.forEach(t),uqe.forEach(t),pPe=i(f),Oo=n(f,"DIV",{class:!0});var Ys=s(Oo);T(u6.$$.fragment,Ys),DQo=i(Ys),nd=n(Ys,"P",{});var YY=s(nd);GQo=r(YY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bV=n(YY,"A",{href:!0});var zdt=s(bV);OQo=r(zdt,"from_pretrained()"),zdt.forEach(t),VQo=r(YY," class method or the "),vV=n(YY,"A",{href:!0});var Qdt=s(vV);XQo=r(Qdt,"from_config()"),Qdt.forEach(t),zQo=r(YY,` class
method.`),YY.forEach(t),QQo=i(Ys),_6=n(Ys,"P",{});var _qe=s(_6);WQo=r(_qe,"This class cannot be instantiated directly using "),Fhe=n(_qe,"CODE",{});var Wdt=s(Fhe);HQo=r(Wdt,"__init__()"),Wdt.forEach(t),UQo=r(_qe," (throws an error)."),_qe.forEach(t),JQo=i(Ys),ht=n(Ys,"DIV",{class:!0});var s3=s(ht);T(b6.$$.fragment,s3),YQo=i(s3),The=n(s3,"P",{});var Hdt=s(The);KQo=r(Hdt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Hdt.forEach(t),ZQo=i(s3),sd=n(s3,"P",{});var KY=s(sd);eWo=r(KY,`Note:
Loading a model from its configuration file does `),Mhe=n(KY,"STRONG",{});var Udt=s(Mhe);oWo=r(Udt,"not"),Udt.forEach(t),rWo=r(KY,` load the model weights. It only affects the
model\u2019s configuration. Use `),FV=n(KY,"A",{href:!0});var Jdt=s(FV);tWo=r(Jdt,"from_pretrained()"),Jdt.forEach(t),aWo=r(KY," to load the model weights."),KY.forEach(t),nWo=i(s3),T(KF.$$.fragment,s3),s3.forEach(t),sWo=i(Ys),io=n(Ys,"DIV",{class:!0});var ca=s(io);T(v6.$$.fragment,ca),lWo=i(ca),Ehe=n(ca,"P",{});var Ydt=s(Ehe);iWo=r(Ydt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Ydt.forEach(t),dWo=i(ca),qa=n(ca,"P",{});var l3=s(qa);cWo=r(l3,"The model class to instantiate is selected based on the "),Che=n(l3,"CODE",{});var Kdt=s(Che);fWo=r(Kdt,"model_type"),Kdt.forEach(t),mWo=r(l3,` property of the config object (either
passed as an argument or loaded from `),whe=n(l3,"CODE",{});var Zdt=s(whe);gWo=r(Zdt,"pretrained_model_name_or_path"),Zdt.forEach(t),hWo=r(l3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=n(l3,"CODE",{});var ect=s(Ahe);pWo=r(ect,"pretrained_model_name_or_path"),ect.forEach(t),uWo=r(l3,":"),l3.forEach(t),_Wo=i(ca),Na=n(ca,"UL",{});var i3=s(Na);ZF=n(i3,"LI",{});var c8e=s(ZF);yhe=n(c8e,"STRONG",{});var oct=s(yhe);bWo=r(oct,"data2vec-audio"),oct.forEach(t),vWo=r(c8e," \u2014 "),TV=n(c8e,"A",{href:!0});var rct=s(TV);FWo=r(rct,"Data2VecAudioForAudioFrameClassification"),rct.forEach(t),TWo=r(c8e," (Data2VecAudio model)"),c8e.forEach(t),MWo=i(i3),e0=n(i3,"LI",{});var f8e=s(e0);Lhe=n(f8e,"STRONG",{});var tct=s(Lhe);EWo=r(tct,"unispeech-sat"),tct.forEach(t),CWo=r(f8e," \u2014 "),MV=n(f8e,"A",{href:!0});var act=s(MV);wWo=r(act,"UniSpeechSatForAudioFrameClassification"),act.forEach(t),AWo=r(f8e," (UniSpeechSat model)"),f8e.forEach(t),yWo=i(i3),o0=n(i3,"LI",{});var m8e=s(o0);xhe=n(m8e,"STRONG",{});var nct=s(xhe);LWo=r(nct,"wav2vec2"),nct.forEach(t),xWo=r(m8e," \u2014 "),EV=n(m8e,"A",{href:!0});var sct=s(EV);$Wo=r(sct,"Wav2Vec2ForAudioFrameClassification"),sct.forEach(t),kWo=r(m8e," (Wav2Vec2 model)"),m8e.forEach(t),SWo=i(i3),r0=n(i3,"LI",{});var g8e=s(r0);$he=n(g8e,"STRONG",{});var lct=s($he);RWo=r(lct,"wavlm"),lct.forEach(t),BWo=r(g8e," \u2014 "),CV=n(g8e,"A",{href:!0});var ict=s(CV);PWo=r(ict,"WavLMForAudioFrameClassification"),ict.forEach(t),IWo=r(g8e," (WavLM model)"),g8e.forEach(t),i3.forEach(t),qWo=i(ca),t0=n(ca,"P",{});var h8e=s(t0);NWo=r(h8e,"The model is set in evaluation mode by default using "),khe=n(h8e,"CODE",{});var dct=s(khe);jWo=r(dct,"model.eval()"),dct.forEach(t),DWo=r(h8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),She=n(h8e,"CODE",{});var cct=s(She);GWo=r(cct,"model.train()"),cct.forEach(t),h8e.forEach(t),OWo=i(ca),T(a0.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),uPe=i(f),ld=n(f,"H2",{class:!0});var bqe=s(ld);n0=n(bqe,"A",{id:!0,class:!0,href:!0});var fct=s(n0);Rhe=n(fct,"SPAN",{});var mct=s(Rhe);T(F6.$$.fragment,mct),mct.forEach(t),fct.forEach(t),VWo=i(bqe),Bhe=n(bqe,"SPAN",{});var gct=s(Bhe);XWo=r(gct,"AutoModelForCTC"),gct.forEach(t),bqe.forEach(t),_Pe=i(f),Vo=n(f,"DIV",{class:!0});var Ks=s(Vo);T(T6.$$.fragment,Ks),zWo=i(Ks),id=n(Ks,"P",{});var ZY=s(id);QWo=r(ZY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),wV=n(ZY,"A",{href:!0});var hct=s(wV);WWo=r(hct,"from_pretrained()"),hct.forEach(t),HWo=r(ZY," class method or the "),AV=n(ZY,"A",{href:!0});var pct=s(AV);UWo=r(pct,"from_config()"),pct.forEach(t),JWo=r(ZY,` class
method.`),ZY.forEach(t),YWo=i(Ks),M6=n(Ks,"P",{});var vqe=s(M6);KWo=r(vqe,"This class cannot be instantiated directly using "),Phe=n(vqe,"CODE",{});var uct=s(Phe);ZWo=r(uct,"__init__()"),uct.forEach(t),eHo=r(vqe," (throws an error)."),vqe.forEach(t),oHo=i(Ks),pt=n(Ks,"DIV",{class:!0});var d3=s(pt);T(E6.$$.fragment,d3),rHo=i(d3),Ihe=n(d3,"P",{});var _ct=s(Ihe);tHo=r(_ct,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),_ct.forEach(t),aHo=i(d3),dd=n(d3,"P",{});var eK=s(dd);nHo=r(eK,`Note:
Loading a model from its configuration file does `),qhe=n(eK,"STRONG",{});var bct=s(qhe);sHo=r(bct,"not"),bct.forEach(t),lHo=r(eK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=n(eK,"A",{href:!0});var vct=s(yV);iHo=r(vct,"from_pretrained()"),vct.forEach(t),dHo=r(eK," to load the model weights."),eK.forEach(t),cHo=i(d3),T(s0.$$.fragment,d3),d3.forEach(t),fHo=i(Ks),co=n(Ks,"DIV",{class:!0});var fa=s(co);T(C6.$$.fragment,fa),mHo=i(fa),Nhe=n(fa,"P",{});var Fct=s(Nhe);gHo=r(Fct,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Fct.forEach(t),hHo=i(fa),ja=n(fa,"P",{});var c3=s(ja);pHo=r(c3,"The model class to instantiate is selected based on the "),jhe=n(c3,"CODE",{});var Tct=s(jhe);uHo=r(Tct,"model_type"),Tct.forEach(t),_Ho=r(c3,` property of the config object (either
passed as an argument or loaded from `),Dhe=n(c3,"CODE",{});var Mct=s(Dhe);bHo=r(Mct,"pretrained_model_name_or_path"),Mct.forEach(t),vHo=r(c3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ghe=n(c3,"CODE",{});var Ect=s(Ghe);FHo=r(Ect,"pretrained_model_name_or_path"),Ect.forEach(t),THo=r(c3,":"),c3.forEach(t),MHo=i(fa),je=n(fa,"UL",{});var vo=s(je);l0=n(vo,"LI",{});var p8e=s(l0);Ohe=n(p8e,"STRONG",{});var Cct=s(Ohe);EHo=r(Cct,"data2vec-audio"),Cct.forEach(t),CHo=r(p8e," \u2014 "),LV=n(p8e,"A",{href:!0});var wct=s(LV);wHo=r(wct,"Data2VecAudioForCTC"),wct.forEach(t),AHo=r(p8e," (Data2VecAudio model)"),p8e.forEach(t),yHo=i(vo),i0=n(vo,"LI",{});var u8e=s(i0);Vhe=n(u8e,"STRONG",{});var Act=s(Vhe);LHo=r(Act,"hubert"),Act.forEach(t),xHo=r(u8e," \u2014 "),xV=n(u8e,"A",{href:!0});var yct=s(xV);$Ho=r(yct,"HubertForCTC"),yct.forEach(t),kHo=r(u8e," (Hubert model)"),u8e.forEach(t),SHo=i(vo),d0=n(vo,"LI",{});var _8e=s(d0);Xhe=n(_8e,"STRONG",{});var Lct=s(Xhe);RHo=r(Lct,"sew"),Lct.forEach(t),BHo=r(_8e," \u2014 "),$V=n(_8e,"A",{href:!0});var xct=s($V);PHo=r(xct,"SEWForCTC"),xct.forEach(t),IHo=r(_8e," (SEW model)"),_8e.forEach(t),qHo=i(vo),c0=n(vo,"LI",{});var b8e=s(c0);zhe=n(b8e,"STRONG",{});var $ct=s(zhe);NHo=r($ct,"sew-d"),$ct.forEach(t),jHo=r(b8e," \u2014 "),kV=n(b8e,"A",{href:!0});var kct=s(kV);DHo=r(kct,"SEWDForCTC"),kct.forEach(t),GHo=r(b8e," (SEW-D model)"),b8e.forEach(t),OHo=i(vo),f0=n(vo,"LI",{});var v8e=s(f0);Qhe=n(v8e,"STRONG",{});var Sct=s(Qhe);VHo=r(Sct,"unispeech"),Sct.forEach(t),XHo=r(v8e," \u2014 "),SV=n(v8e,"A",{href:!0});var Rct=s(SV);zHo=r(Rct,"UniSpeechForCTC"),Rct.forEach(t),QHo=r(v8e," (UniSpeech model)"),v8e.forEach(t),WHo=i(vo),m0=n(vo,"LI",{});var F8e=s(m0);Whe=n(F8e,"STRONG",{});var Bct=s(Whe);HHo=r(Bct,"unispeech-sat"),Bct.forEach(t),UHo=r(F8e," \u2014 "),RV=n(F8e,"A",{href:!0});var Pct=s(RV);JHo=r(Pct,"UniSpeechSatForCTC"),Pct.forEach(t),YHo=r(F8e," (UniSpeechSat model)"),F8e.forEach(t),KHo=i(vo),g0=n(vo,"LI",{});var T8e=s(g0);Hhe=n(T8e,"STRONG",{});var Ict=s(Hhe);ZHo=r(Ict,"wav2vec2"),Ict.forEach(t),eUo=r(T8e," \u2014 "),BV=n(T8e,"A",{href:!0});var qct=s(BV);oUo=r(qct,"Wav2Vec2ForCTC"),qct.forEach(t),rUo=r(T8e," (Wav2Vec2 model)"),T8e.forEach(t),tUo=i(vo),h0=n(vo,"LI",{});var M8e=s(h0);Uhe=n(M8e,"STRONG",{});var Nct=s(Uhe);aUo=r(Nct,"wavlm"),Nct.forEach(t),nUo=r(M8e," \u2014 "),PV=n(M8e,"A",{href:!0});var jct=s(PV);sUo=r(jct,"WavLMForCTC"),jct.forEach(t),lUo=r(M8e," (WavLM model)"),M8e.forEach(t),vo.forEach(t),iUo=i(fa),p0=n(fa,"P",{});var E8e=s(p0);dUo=r(E8e,"The model is set in evaluation mode by default using "),Jhe=n(E8e,"CODE",{});var Dct=s(Jhe);cUo=r(Dct,"model.eval()"),Dct.forEach(t),fUo=r(E8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=n(E8e,"CODE",{});var Gct=s(Yhe);mUo=r(Gct,"model.train()"),Gct.forEach(t),E8e.forEach(t),gUo=i(fa),T(u0.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),bPe=i(f),cd=n(f,"H2",{class:!0});var Fqe=s(cd);_0=n(Fqe,"A",{id:!0,class:!0,href:!0});var Oct=s(_0);Khe=n(Oct,"SPAN",{});var Vct=s(Khe);T(w6.$$.fragment,Vct),Vct.forEach(t),Oct.forEach(t),hUo=i(Fqe),Zhe=n(Fqe,"SPAN",{});var Xct=s(Zhe);pUo=r(Xct,"AutoModelForSpeechSeq2Seq"),Xct.forEach(t),Fqe.forEach(t),vPe=i(f),Xo=n(f,"DIV",{class:!0});var Zs=s(Xo);T(A6.$$.fragment,Zs),uUo=i(Zs),fd=n(Zs,"P",{});var oK=s(fd);_Uo=r(oK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IV=n(oK,"A",{href:!0});var zct=s(IV);bUo=r(zct,"from_pretrained()"),zct.forEach(t),vUo=r(oK," class method or the "),qV=n(oK,"A",{href:!0});var Qct=s(qV);FUo=r(Qct,"from_config()"),Qct.forEach(t),TUo=r(oK,` class
method.`),oK.forEach(t),MUo=i(Zs),y6=n(Zs,"P",{});var Tqe=s(y6);EUo=r(Tqe,"This class cannot be instantiated directly using "),epe=n(Tqe,"CODE",{});var Wct=s(epe);CUo=r(Wct,"__init__()"),Wct.forEach(t),wUo=r(Tqe," (throws an error)."),Tqe.forEach(t),AUo=i(Zs),ut=n(Zs,"DIV",{class:!0});var f3=s(ut);T(L6.$$.fragment,f3),yUo=i(f3),ope=n(f3,"P",{});var Hct=s(ope);LUo=r(Hct,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Hct.forEach(t),xUo=i(f3),md=n(f3,"P",{});var rK=s(md);$Uo=r(rK,`Note:
Loading a model from its configuration file does `),rpe=n(rK,"STRONG",{});var Uct=s(rpe);kUo=r(Uct,"not"),Uct.forEach(t),SUo=r(rK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=n(rK,"A",{href:!0});var Jct=s(NV);RUo=r(Jct,"from_pretrained()"),Jct.forEach(t),BUo=r(rK," to load the model weights."),rK.forEach(t),PUo=i(f3),T(b0.$$.fragment,f3),f3.forEach(t),IUo=i(Zs),fo=n(Zs,"DIV",{class:!0});var ma=s(fo);T(x6.$$.fragment,ma),qUo=i(ma),tpe=n(ma,"P",{});var Yct=s(tpe);NUo=r(Yct,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Yct.forEach(t),jUo=i(ma),Da=n(ma,"P",{});var m3=s(Da);DUo=r(m3,"The model class to instantiate is selected based on the "),ape=n(m3,"CODE",{});var Kct=s(ape);GUo=r(Kct,"model_type"),Kct.forEach(t),OUo=r(m3,` property of the config object (either
passed as an argument or loaded from `),npe=n(m3,"CODE",{});var Zct=s(npe);VUo=r(Zct,"pretrained_model_name_or_path"),Zct.forEach(t),XUo=r(m3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=n(m3,"CODE",{});var eft=s(spe);zUo=r(eft,"pretrained_model_name_or_path"),eft.forEach(t),QUo=r(m3,":"),m3.forEach(t),WUo=i(ma),$6=n(ma,"UL",{});var Mqe=s($6);v0=n(Mqe,"LI",{});var C8e=s(v0);lpe=n(C8e,"STRONG",{});var oft=s(lpe);HUo=r(oft,"speech-encoder-decoder"),oft.forEach(t),UUo=r(C8e," \u2014 "),jV=n(C8e,"A",{href:!0});var rft=s(jV);JUo=r(rft,"SpeechEncoderDecoderModel"),rft.forEach(t),YUo=r(C8e," (Speech Encoder decoder model)"),C8e.forEach(t),KUo=i(Mqe),F0=n(Mqe,"LI",{});var w8e=s(F0);ipe=n(w8e,"STRONG",{});var tft=s(ipe);ZUo=r(tft,"speech_to_text"),tft.forEach(t),eJo=r(w8e," \u2014 "),DV=n(w8e,"A",{href:!0});var aft=s(DV);oJo=r(aft,"Speech2TextForConditionalGeneration"),aft.forEach(t),rJo=r(w8e," (Speech2Text model)"),w8e.forEach(t),Mqe.forEach(t),tJo=i(ma),T0=n(ma,"P",{});var A8e=s(T0);aJo=r(A8e,"The model is set in evaluation mode by default using "),dpe=n(A8e,"CODE",{});var nft=s(dpe);nJo=r(nft,"model.eval()"),nft.forEach(t),sJo=r(A8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=n(A8e,"CODE",{});var sft=s(cpe);lJo=r(sft,"model.train()"),sft.forEach(t),A8e.forEach(t),iJo=i(ma),T(M0.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),FPe=i(f),gd=n(f,"H2",{class:!0});var Eqe=s(gd);E0=n(Eqe,"A",{id:!0,class:!0,href:!0});var lft=s(E0);fpe=n(lft,"SPAN",{});var ift=s(fpe);T(k6.$$.fragment,ift),ift.forEach(t),lft.forEach(t),dJo=i(Eqe),mpe=n(Eqe,"SPAN",{});var dft=s(mpe);cJo=r(dft,"AutoModelForAudioXVector"),dft.forEach(t),Eqe.forEach(t),TPe=i(f),zo=n(f,"DIV",{class:!0});var el=s(zo);T(S6.$$.fragment,el),fJo=i(el),hd=n(el,"P",{});var tK=s(hd);mJo=r(tK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),GV=n(tK,"A",{href:!0});var cft=s(GV);gJo=r(cft,"from_pretrained()"),cft.forEach(t),hJo=r(tK," class method or the "),OV=n(tK,"A",{href:!0});var fft=s(OV);pJo=r(fft,"from_config()"),fft.forEach(t),uJo=r(tK,` class
method.`),tK.forEach(t),_Jo=i(el),R6=n(el,"P",{});var Cqe=s(R6);bJo=r(Cqe,"This class cannot be instantiated directly using "),gpe=n(Cqe,"CODE",{});var mft=s(gpe);vJo=r(mft,"__init__()"),mft.forEach(t),FJo=r(Cqe," (throws an error)."),Cqe.forEach(t),TJo=i(el),_t=n(el,"DIV",{class:!0});var g3=s(_t);T(B6.$$.fragment,g3),MJo=i(g3),hpe=n(g3,"P",{});var gft=s(hpe);EJo=r(gft,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),gft.forEach(t),CJo=i(g3),pd=n(g3,"P",{});var aK=s(pd);wJo=r(aK,`Note:
Loading a model from its configuration file does `),ppe=n(aK,"STRONG",{});var hft=s(ppe);AJo=r(hft,"not"),hft.forEach(t),yJo=r(aK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=n(aK,"A",{href:!0});var pft=s(VV);LJo=r(pft,"from_pretrained()"),pft.forEach(t),xJo=r(aK," to load the model weights."),aK.forEach(t),$Jo=i(g3),T(C0.$$.fragment,g3),g3.forEach(t),kJo=i(el),mo=n(el,"DIV",{class:!0});var ga=s(mo);T(P6.$$.fragment,ga),SJo=i(ga),upe=n(ga,"P",{});var uft=s(upe);RJo=r(uft,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),uft.forEach(t),BJo=i(ga),Ga=n(ga,"P",{});var h3=s(Ga);PJo=r(h3,"The model class to instantiate is selected based on the "),_pe=n(h3,"CODE",{});var _ft=s(_pe);IJo=r(_ft,"model_type"),_ft.forEach(t),qJo=r(h3,` property of the config object (either
passed as an argument or loaded from `),bpe=n(h3,"CODE",{});var bft=s(bpe);NJo=r(bft,"pretrained_model_name_or_path"),bft.forEach(t),jJo=r(h3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=n(h3,"CODE",{});var vft=s(vpe);DJo=r(vft,"pretrained_model_name_or_path"),vft.forEach(t),GJo=r(h3,":"),h3.forEach(t),OJo=i(ga),Oa=n(ga,"UL",{});var p3=s(Oa);w0=n(p3,"LI",{});var y8e=s(w0);Fpe=n(y8e,"STRONG",{});var Fft=s(Fpe);VJo=r(Fft,"data2vec-audio"),Fft.forEach(t),XJo=r(y8e," \u2014 "),XV=n(y8e,"A",{href:!0});var Tft=s(XV);zJo=r(Tft,"Data2VecAudioForXVector"),Tft.forEach(t),QJo=r(y8e," (Data2VecAudio model)"),y8e.forEach(t),WJo=i(p3),A0=n(p3,"LI",{});var L8e=s(A0);Tpe=n(L8e,"STRONG",{});var Mft=s(Tpe);HJo=r(Mft,"unispeech-sat"),Mft.forEach(t),UJo=r(L8e," \u2014 "),zV=n(L8e,"A",{href:!0});var Eft=s(zV);JJo=r(Eft,"UniSpeechSatForXVector"),Eft.forEach(t),YJo=r(L8e," (UniSpeechSat model)"),L8e.forEach(t),KJo=i(p3),y0=n(p3,"LI",{});var x8e=s(y0);Mpe=n(x8e,"STRONG",{});var Cft=s(Mpe);ZJo=r(Cft,"wav2vec2"),Cft.forEach(t),eYo=r(x8e," \u2014 "),QV=n(x8e,"A",{href:!0});var wft=s(QV);oYo=r(wft,"Wav2Vec2ForXVector"),wft.forEach(t),rYo=r(x8e," (Wav2Vec2 model)"),x8e.forEach(t),tYo=i(p3),L0=n(p3,"LI",{});var $8e=s(L0);Epe=n($8e,"STRONG",{});var Aft=s(Epe);aYo=r(Aft,"wavlm"),Aft.forEach(t),nYo=r($8e," \u2014 "),WV=n($8e,"A",{href:!0});var yft=s(WV);sYo=r(yft,"WavLMForXVector"),yft.forEach(t),lYo=r($8e," (WavLM model)"),$8e.forEach(t),p3.forEach(t),iYo=i(ga),x0=n(ga,"P",{});var k8e=s(x0);dYo=r(k8e,"The model is set in evaluation mode by default using "),Cpe=n(k8e,"CODE",{});var Lft=s(Cpe);cYo=r(Lft,"model.eval()"),Lft.forEach(t),fYo=r(k8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wpe=n(k8e,"CODE",{});var xft=s(wpe);mYo=r(xft,"model.train()"),xft.forEach(t),k8e.forEach(t),gYo=i(ga),T($0.$$.fragment,ga),ga.forEach(t),el.forEach(t),MPe=i(f),ud=n(f,"H2",{class:!0});var wqe=s(ud);k0=n(wqe,"A",{id:!0,class:!0,href:!0});var $ft=s(k0);Ape=n($ft,"SPAN",{});var kft=s(Ape);T(I6.$$.fragment,kft),kft.forEach(t),$ft.forEach(t),hYo=i(wqe),ype=n(wqe,"SPAN",{});var Sft=s(ype);pYo=r(Sft,"AutoModelForMaskedImageModeling"),Sft.forEach(t),wqe.forEach(t),EPe=i(f),Qo=n(f,"DIV",{class:!0});var ol=s(Qo);T(q6.$$.fragment,ol),uYo=i(ol),_d=n(ol,"P",{});var nK=s(_d);_Yo=r(nK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),HV=n(nK,"A",{href:!0});var Rft=s(HV);bYo=r(Rft,"from_pretrained()"),Rft.forEach(t),vYo=r(nK," class method or the "),UV=n(nK,"A",{href:!0});var Bft=s(UV);FYo=r(Bft,"from_config()"),Bft.forEach(t),TYo=r(nK,` class
method.`),nK.forEach(t),MYo=i(ol),N6=n(ol,"P",{});var Aqe=s(N6);EYo=r(Aqe,"This class cannot be instantiated directly using "),Lpe=n(Aqe,"CODE",{});var Pft=s(Lpe);CYo=r(Pft,"__init__()"),Pft.forEach(t),wYo=r(Aqe," (throws an error)."),Aqe.forEach(t),AYo=i(ol),bt=n(ol,"DIV",{class:!0});var u3=s(bt);T(j6.$$.fragment,u3),yYo=i(u3),xpe=n(u3,"P",{});var Ift=s(xpe);LYo=r(Ift,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Ift.forEach(t),xYo=i(u3),bd=n(u3,"P",{});var sK=s(bd);$Yo=r(sK,`Note:
Loading a model from its configuration file does `),$pe=n(sK,"STRONG",{});var qft=s($pe);kYo=r(qft,"not"),qft.forEach(t),SYo=r(sK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=n(sK,"A",{href:!0});var Nft=s(JV);RYo=r(Nft,"from_pretrained()"),Nft.forEach(t),BYo=r(sK," to load the model weights."),sK.forEach(t),PYo=i(u3),T(S0.$$.fragment,u3),u3.forEach(t),IYo=i(ol),go=n(ol,"DIV",{class:!0});var ha=s(go);T(D6.$$.fragment,ha),qYo=i(ha),kpe=n(ha,"P",{});var jft=s(kpe);NYo=r(jft,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),jft.forEach(t),jYo=i(ha),Va=n(ha,"P",{});var _3=s(Va);DYo=r(_3,"The model class to instantiate is selected based on the "),Spe=n(_3,"CODE",{});var Dft=s(Spe);GYo=r(Dft,"model_type"),Dft.forEach(t),OYo=r(_3,` property of the config object (either
passed as an argument or loaded from `),Rpe=n(_3,"CODE",{});var Gft=s(Rpe);VYo=r(Gft,"pretrained_model_name_or_path"),Gft.forEach(t),XYo=r(_3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=n(_3,"CODE",{});var Oft=s(Bpe);zYo=r(Oft,"pretrained_model_name_or_path"),Oft.forEach(t),QYo=r(_3,":"),_3.forEach(t),WYo=i(ha),vd=n(ha,"UL",{});var lK=s(vd);R0=n(lK,"LI",{});var S8e=s(R0);Ppe=n(S8e,"STRONG",{});var Vft=s(Ppe);HYo=r(Vft,"deit"),Vft.forEach(t),UYo=r(S8e," \u2014 "),YV=n(S8e,"A",{href:!0});var Xft=s(YV);JYo=r(Xft,"DeiTForMaskedImageModeling"),Xft.forEach(t),YYo=r(S8e," (DeiT model)"),S8e.forEach(t),KYo=i(lK),B0=n(lK,"LI",{});var R8e=s(B0);Ipe=n(R8e,"STRONG",{});var zft=s(Ipe);ZYo=r(zft,"swin"),zft.forEach(t),eKo=r(R8e," \u2014 "),KV=n(R8e,"A",{href:!0});var Qft=s(KV);oKo=r(Qft,"SwinForMaskedImageModeling"),Qft.forEach(t),rKo=r(R8e," (Swin model)"),R8e.forEach(t),tKo=i(lK),P0=n(lK,"LI",{});var B8e=s(P0);qpe=n(B8e,"STRONG",{});var Wft=s(qpe);aKo=r(Wft,"vit"),Wft.forEach(t),nKo=r(B8e," \u2014 "),ZV=n(B8e,"A",{href:!0});var Hft=s(ZV);sKo=r(Hft,"ViTForMaskedImageModeling"),Hft.forEach(t),lKo=r(B8e," (ViT model)"),B8e.forEach(t),lK.forEach(t),iKo=i(ha),I0=n(ha,"P",{});var P8e=s(I0);dKo=r(P8e,"The model is set in evaluation mode by default using "),Npe=n(P8e,"CODE",{});var Uft=s(Npe);cKo=r(Uft,"model.eval()"),Uft.forEach(t),fKo=r(P8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jpe=n(P8e,"CODE",{});var Jft=s(jpe);mKo=r(Jft,"model.train()"),Jft.forEach(t),P8e.forEach(t),gKo=i(ha),T(q0.$$.fragment,ha),ha.forEach(t),ol.forEach(t),CPe=i(f),Fd=n(f,"H2",{class:!0});var yqe=s(Fd);N0=n(yqe,"A",{id:!0,class:!0,href:!0});var Yft=s(N0);Dpe=n(Yft,"SPAN",{});var Kft=s(Dpe);T(G6.$$.fragment,Kft),Kft.forEach(t),Yft.forEach(t),hKo=i(yqe),Gpe=n(yqe,"SPAN",{});var Zft=s(Gpe);pKo=r(Zft,"AutoModelForObjectDetection"),Zft.forEach(t),yqe.forEach(t),wPe=i(f),Wo=n(f,"DIV",{class:!0});var rl=s(Wo);T(O6.$$.fragment,rl),uKo=i(rl),Td=n(rl,"P",{});var iK=s(Td);_Ko=r(iK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),eX=n(iK,"A",{href:!0});var emt=s(eX);bKo=r(emt,"from_pretrained()"),emt.forEach(t),vKo=r(iK," class method or the "),oX=n(iK,"A",{href:!0});var omt=s(oX);FKo=r(omt,"from_config()"),omt.forEach(t),TKo=r(iK,` class
method.`),iK.forEach(t),MKo=i(rl),V6=n(rl,"P",{});var Lqe=s(V6);EKo=r(Lqe,"This class cannot be instantiated directly using "),Ope=n(Lqe,"CODE",{});var rmt=s(Ope);CKo=r(rmt,"__init__()"),rmt.forEach(t),wKo=r(Lqe," (throws an error)."),Lqe.forEach(t),AKo=i(rl),vt=n(rl,"DIV",{class:!0});var b3=s(vt);T(X6.$$.fragment,b3),yKo=i(b3),Vpe=n(b3,"P",{});var tmt=s(Vpe);LKo=r(tmt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),tmt.forEach(t),xKo=i(b3),Md=n(b3,"P",{});var dK=s(Md);$Ko=r(dK,`Note:
Loading a model from its configuration file does `),Xpe=n(dK,"STRONG",{});var amt=s(Xpe);kKo=r(amt,"not"),amt.forEach(t),SKo=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=n(dK,"A",{href:!0});var nmt=s(rX);RKo=r(nmt,"from_pretrained()"),nmt.forEach(t),BKo=r(dK," to load the model weights."),dK.forEach(t),PKo=i(b3),T(j0.$$.fragment,b3),b3.forEach(t),IKo=i(rl),ho=n(rl,"DIV",{class:!0});var pa=s(ho);T(z6.$$.fragment,pa),qKo=i(pa),zpe=n(pa,"P",{});var smt=s(zpe);NKo=r(smt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),smt.forEach(t),jKo=i(pa),Xa=n(pa,"P",{});var v3=s(Xa);DKo=r(v3,"The model class to instantiate is selected based on the "),Qpe=n(v3,"CODE",{});var lmt=s(Qpe);GKo=r(lmt,"model_type"),lmt.forEach(t),OKo=r(v3,` property of the config object (either
passed as an argument or loaded from `),Wpe=n(v3,"CODE",{});var imt=s(Wpe);VKo=r(imt,"pretrained_model_name_or_path"),imt.forEach(t),XKo=r(v3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hpe=n(v3,"CODE",{});var dmt=s(Hpe);zKo=r(dmt,"pretrained_model_name_or_path"),dmt.forEach(t),QKo=r(v3,":"),v3.forEach(t),WKo=i(pa),Q6=n(pa,"UL",{});var xqe=s(Q6);D0=n(xqe,"LI",{});var I8e=s(D0);Upe=n(I8e,"STRONG",{});var cmt=s(Upe);HKo=r(cmt,"detr"),cmt.forEach(t),UKo=r(I8e," \u2014 "),tX=n(I8e,"A",{href:!0});var fmt=s(tX);JKo=r(fmt,"DetrForObjectDetection"),fmt.forEach(t),YKo=r(I8e," (DETR model)"),I8e.forEach(t),KKo=i(xqe),G0=n(xqe,"LI",{});var q8e=s(G0);Jpe=n(q8e,"STRONG",{});var mmt=s(Jpe);ZKo=r(mmt,"yolos"),mmt.forEach(t),eZo=r(q8e," \u2014 "),aX=n(q8e,"A",{href:!0});var gmt=s(aX);oZo=r(gmt,"YolosForObjectDetection"),gmt.forEach(t),rZo=r(q8e," (YOLOS model)"),q8e.forEach(t),xqe.forEach(t),tZo=i(pa),O0=n(pa,"P",{});var N8e=s(O0);aZo=r(N8e,"The model is set in evaluation mode by default using "),Ype=n(N8e,"CODE",{});var hmt=s(Ype);nZo=r(hmt,"model.eval()"),hmt.forEach(t),sZo=r(N8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kpe=n(N8e,"CODE",{});var pmt=s(Kpe);lZo=r(pmt,"model.train()"),pmt.forEach(t),N8e.forEach(t),iZo=i(pa),T(V0.$$.fragment,pa),pa.forEach(t),rl.forEach(t),APe=i(f),Ed=n(f,"H2",{class:!0});var $qe=s(Ed);X0=n($qe,"A",{id:!0,class:!0,href:!0});var umt=s(X0);Zpe=n(umt,"SPAN",{});var _mt=s(Zpe);T(W6.$$.fragment,_mt),_mt.forEach(t),umt.forEach(t),dZo=i($qe),eue=n($qe,"SPAN",{});var bmt=s(eue);cZo=r(bmt,"AutoModelForImageSegmentation"),bmt.forEach(t),$qe.forEach(t),yPe=i(f),Ho=n(f,"DIV",{class:!0});var tl=s(Ho);T(H6.$$.fragment,tl),fZo=i(tl),Cd=n(tl,"P",{});var cK=s(Cd);mZo=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),nX=n(cK,"A",{href:!0});var vmt=s(nX);gZo=r(vmt,"from_pretrained()"),vmt.forEach(t),hZo=r(cK," class method or the "),sX=n(cK,"A",{href:!0});var Fmt=s(sX);pZo=r(Fmt,"from_config()"),Fmt.forEach(t),uZo=r(cK,` class
method.`),cK.forEach(t),_Zo=i(tl),U6=n(tl,"P",{});var kqe=s(U6);bZo=r(kqe,"This class cannot be instantiated directly using "),oue=n(kqe,"CODE",{});var Tmt=s(oue);vZo=r(Tmt,"__init__()"),Tmt.forEach(t),FZo=r(kqe," (throws an error)."),kqe.forEach(t),TZo=i(tl),Ft=n(tl,"DIV",{class:!0});var F3=s(Ft);T(J6.$$.fragment,F3),MZo=i(F3),rue=n(F3,"P",{});var Mmt=s(rue);EZo=r(Mmt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Mmt.forEach(t),CZo=i(F3),wd=n(F3,"P",{});var fK=s(wd);wZo=r(fK,`Note:
Loading a model from its configuration file does `),tue=n(fK,"STRONG",{});var Emt=s(tue);AZo=r(Emt,"not"),Emt.forEach(t),yZo=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=n(fK,"A",{href:!0});var Cmt=s(lX);LZo=r(Cmt,"from_pretrained()"),Cmt.forEach(t),xZo=r(fK," to load the model weights."),fK.forEach(t),$Zo=i(F3),T(z0.$$.fragment,F3),F3.forEach(t),kZo=i(tl),po=n(tl,"DIV",{class:!0});var ua=s(po);T(Y6.$$.fragment,ua),SZo=i(ua),aue=n(ua,"P",{});var wmt=s(aue);RZo=r(wmt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),wmt.forEach(t),BZo=i(ua),za=n(ua,"P",{});var T3=s(za);PZo=r(T3,"The model class to instantiate is selected based on the "),nue=n(T3,"CODE",{});var Amt=s(nue);IZo=r(Amt,"model_type"),Amt.forEach(t),qZo=r(T3,` property of the config object (either
passed as an argument or loaded from `),sue=n(T3,"CODE",{});var ymt=s(sue);NZo=r(ymt,"pretrained_model_name_or_path"),ymt.forEach(t),jZo=r(T3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lue=n(T3,"CODE",{});var Lmt=s(lue);DZo=r(Lmt,"pretrained_model_name_or_path"),Lmt.forEach(t),GZo=r(T3,":"),T3.forEach(t),OZo=i(ua),iue=n(ua,"UL",{});var xmt=s(iue);Q0=n(xmt,"LI",{});var j8e=s(Q0);due=n(j8e,"STRONG",{});var $mt=s(due);VZo=r($mt,"detr"),$mt.forEach(t),XZo=r(j8e," \u2014 "),iX=n(j8e,"A",{href:!0});var kmt=s(iX);zZo=r(kmt,"DetrForSegmentation"),kmt.forEach(t),QZo=r(j8e," (DETR model)"),j8e.forEach(t),xmt.forEach(t),WZo=i(ua),W0=n(ua,"P",{});var D8e=s(W0);HZo=r(D8e,"The model is set in evaluation mode by default using "),cue=n(D8e,"CODE",{});var Smt=s(cue);UZo=r(Smt,"model.eval()"),Smt.forEach(t),JZo=r(D8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fue=n(D8e,"CODE",{});var Rmt=s(fue);YZo=r(Rmt,"model.train()"),Rmt.forEach(t),D8e.forEach(t),KZo=i(ua),T(H0.$$.fragment,ua),ua.forEach(t),tl.forEach(t),LPe=i(f),Ad=n(f,"H2",{class:!0});var Sqe=s(Ad);U0=n(Sqe,"A",{id:!0,class:!0,href:!0});var Bmt=s(U0);mue=n(Bmt,"SPAN",{});var Pmt=s(mue);T(K6.$$.fragment,Pmt),Pmt.forEach(t),Bmt.forEach(t),ZZo=i(Sqe),gue=n(Sqe,"SPAN",{});var Imt=s(gue);eer=r(Imt,"AutoModelForSemanticSegmentation"),Imt.forEach(t),Sqe.forEach(t),xPe=i(f),Uo=n(f,"DIV",{class:!0});var al=s(Uo);T(Z6.$$.fragment,al),oer=i(al),yd=n(al,"P",{});var mK=s(yd);rer=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),dX=n(mK,"A",{href:!0});var qmt=s(dX);ter=r(qmt,"from_pretrained()"),qmt.forEach(t),aer=r(mK," class method or the "),cX=n(mK,"A",{href:!0});var Nmt=s(cX);ner=r(Nmt,"from_config()"),Nmt.forEach(t),ser=r(mK,` class
method.`),mK.forEach(t),ler=i(al),ey=n(al,"P",{});var Rqe=s(ey);ier=r(Rqe,"This class cannot be instantiated directly using "),hue=n(Rqe,"CODE",{});var jmt=s(hue);der=r(jmt,"__init__()"),jmt.forEach(t),cer=r(Rqe," (throws an error)."),Rqe.forEach(t),fer=i(al),Tt=n(al,"DIV",{class:!0});var M3=s(Tt);T(oy.$$.fragment,M3),mer=i(M3),pue=n(M3,"P",{});var Dmt=s(pue);ger=r(Dmt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Dmt.forEach(t),her=i(M3),Ld=n(M3,"P",{});var gK=s(Ld);per=r(gK,`Note:
Loading a model from its configuration file does `),uue=n(gK,"STRONG",{});var Gmt=s(uue);uer=r(Gmt,"not"),Gmt.forEach(t),_er=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=n(gK,"A",{href:!0});var Omt=s(fX);ber=r(Omt,"from_pretrained()"),Omt.forEach(t),ver=r(gK," to load the model weights."),gK.forEach(t),Fer=i(M3),T(J0.$$.fragment,M3),M3.forEach(t),Ter=i(al),uo=n(al,"DIV",{class:!0});var _a=s(uo);T(ry.$$.fragment,_a),Mer=i(_a),_ue=n(_a,"P",{});var Vmt=s(_ue);Eer=r(Vmt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Vmt.forEach(t),Cer=i(_a),Qa=n(_a,"P",{});var E3=s(Qa);wer=r(E3,"The model class to instantiate is selected based on the "),bue=n(E3,"CODE",{});var Xmt=s(bue);Aer=r(Xmt,"model_type"),Xmt.forEach(t),yer=r(E3,` property of the config object (either
passed as an argument or loaded from `),vue=n(E3,"CODE",{});var zmt=s(vue);Ler=r(zmt,"pretrained_model_name_or_path"),zmt.forEach(t),xer=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fue=n(E3,"CODE",{});var Qmt=s(Fue);$er=r(Qmt,"pretrained_model_name_or_path"),Qmt.forEach(t),ker=r(E3,":"),E3.forEach(t),Ser=i(_a),Wa=n(_a,"UL",{});var C3=s(Wa);Y0=n(C3,"LI",{});var G8e=s(Y0);Tue=n(G8e,"STRONG",{});var Wmt=s(Tue);Rer=r(Wmt,"beit"),Wmt.forEach(t),Ber=r(G8e," \u2014 "),mX=n(G8e,"A",{href:!0});var Hmt=s(mX);Per=r(Hmt,"BeitForSemanticSegmentation"),Hmt.forEach(t),Ier=r(G8e," (BEiT model)"),G8e.forEach(t),qer=i(C3),K0=n(C3,"LI",{});var O8e=s(K0);Mue=n(O8e,"STRONG",{});var Umt=s(Mue);Ner=r(Umt,"data2vec-vision"),Umt.forEach(t),jer=r(O8e," \u2014 "),gX=n(O8e,"A",{href:!0});var Jmt=s(gX);Der=r(Jmt,"Data2VecVisionForSemanticSegmentation"),Jmt.forEach(t),Ger=r(O8e," (Data2VecVision model)"),O8e.forEach(t),Oer=i(C3),Z0=n(C3,"LI",{});var V8e=s(Z0);Eue=n(V8e,"STRONG",{});var Ymt=s(Eue);Ver=r(Ymt,"dpt"),Ymt.forEach(t),Xer=r(V8e," \u2014 "),hX=n(V8e,"A",{href:!0});var Kmt=s(hX);zer=r(Kmt,"DPTForSemanticSegmentation"),Kmt.forEach(t),Qer=r(V8e," (DPT model)"),V8e.forEach(t),Wer=i(C3),eT=n(C3,"LI",{});var X8e=s(eT);Cue=n(X8e,"STRONG",{});var Zmt=s(Cue);Her=r(Zmt,"segformer"),Zmt.forEach(t),Uer=r(X8e," \u2014 "),pX=n(X8e,"A",{href:!0});var egt=s(pX);Jer=r(egt,"SegformerForSemanticSegmentation"),egt.forEach(t),Yer=r(X8e," (SegFormer model)"),X8e.forEach(t),C3.forEach(t),Ker=i(_a),oT=n(_a,"P",{});var z8e=s(oT);Zer=r(z8e,"The model is set in evaluation mode by default using "),wue=n(z8e,"CODE",{});var ogt=s(wue);eor=r(ogt,"model.eval()"),ogt.forEach(t),oor=r(z8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=n(z8e,"CODE",{});var rgt=s(Aue);ror=r(rgt,"model.train()"),rgt.forEach(t),z8e.forEach(t),tor=i(_a),T(rT.$$.fragment,_a),_a.forEach(t),al.forEach(t),$Pe=i(f),xd=n(f,"H2",{class:!0});var Bqe=s(xd);tT=n(Bqe,"A",{id:!0,class:!0,href:!0});var tgt=s(tT);yue=n(tgt,"SPAN",{});var agt=s(yue);T(ty.$$.fragment,agt),agt.forEach(t),tgt.forEach(t),aor=i(Bqe),Lue=n(Bqe,"SPAN",{});var ngt=s(Lue);nor=r(ngt,"AutoModelForInstanceSegmentation"),ngt.forEach(t),Bqe.forEach(t),kPe=i(f),Jo=n(f,"DIV",{class:!0});var nl=s(Jo);T(ay.$$.fragment,nl),sor=i(nl),$d=n(nl,"P",{});var hK=s($d);lor=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),uX=n(hK,"A",{href:!0});var sgt=s(uX);ior=r(sgt,"from_pretrained()"),sgt.forEach(t),dor=r(hK," class method or the "),_X=n(hK,"A",{href:!0});var lgt=s(_X);cor=r(lgt,"from_config()"),lgt.forEach(t),mor=r(hK,` class
method.`),hK.forEach(t),gor=i(nl),ny=n(nl,"P",{});var Pqe=s(ny);hor=r(Pqe,"This class cannot be instantiated directly using "),xue=n(Pqe,"CODE",{});var igt=s(xue);por=r(igt,"__init__()"),igt.forEach(t),uor=r(Pqe," (throws an error)."),Pqe.forEach(t),_or=i(nl),Mt=n(nl,"DIV",{class:!0});var w3=s(Mt);T(sy.$$.fragment,w3),bor=i(w3),$ue=n(w3,"P",{});var dgt=s($ue);vor=r(dgt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),dgt.forEach(t),For=i(w3),kd=n(w3,"P",{});var pK=s(kd);Tor=r(pK,`Note:
Loading a model from its configuration file does `),kue=n(pK,"STRONG",{});var cgt=s(kue);Mor=r(cgt,"not"),cgt.forEach(t),Eor=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=n(pK,"A",{href:!0});var fgt=s(bX);Cor=r(fgt,"from_pretrained()"),fgt.forEach(t),wor=r(pK," to load the model weights."),pK.forEach(t),Aor=i(w3),T(aT.$$.fragment,w3),w3.forEach(t),yor=i(nl),_o=n(nl,"DIV",{class:!0});var ba=s(_o);T(ly.$$.fragment,ba),Lor=i(ba),Sue=n(ba,"P",{});var mgt=s(Sue);xor=r(mgt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),mgt.forEach(t),$or=i(ba),Ha=n(ba,"P",{});var A3=s(Ha);kor=r(A3,"The model class to instantiate is selected based on the "),Rue=n(A3,"CODE",{});var ggt=s(Rue);Sor=r(ggt,"model_type"),ggt.forEach(t),Ror=r(A3,` property of the config object (either
passed as an argument or loaded from `),Bue=n(A3,"CODE",{});var hgt=s(Bue);Bor=r(hgt,"pretrained_model_name_or_path"),hgt.forEach(t),Por=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=n(A3,"CODE",{});var pgt=s(Pue);Ior=r(pgt,"pretrained_model_name_or_path"),pgt.forEach(t),qor=r(A3,":"),A3.forEach(t),Nor=i(ba),Iue=n(ba,"UL",{});var ugt=s(Iue);nT=n(ugt,"LI",{});var Q8e=s(nT);que=n(Q8e,"STRONG",{});var _gt=s(que);jor=r(_gt,"maskformer"),_gt.forEach(t),Dor=r(Q8e," \u2014 "),vX=n(Q8e,"A",{href:!0});var bgt=s(vX);Gor=r(bgt,"MaskFormerForInstanceSegmentation"),bgt.forEach(t),Oor=r(Q8e," (MaskFormer model)"),Q8e.forEach(t),ugt.forEach(t),Vor=i(ba),sT=n(ba,"P",{});var W8e=s(sT);Xor=r(W8e,"The model is set in evaluation mode by default using "),Nue=n(W8e,"CODE",{});var vgt=s(Nue);zor=r(vgt,"model.eval()"),vgt.forEach(t),Qor=r(W8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jue=n(W8e,"CODE",{});var Fgt=s(jue);Wor=r(Fgt,"model.train()"),Fgt.forEach(t),W8e.forEach(t),Hor=i(ba),T(lT.$$.fragment,ba),ba.forEach(t),nl.forEach(t),SPe=i(f),Sd=n(f,"H2",{class:!0});var Iqe=s(Sd);iT=n(Iqe,"A",{id:!0,class:!0,href:!0});var Tgt=s(iT);Due=n(Tgt,"SPAN",{});var Mgt=s(Due);T(iy.$$.fragment,Mgt),Mgt.forEach(t),Tgt.forEach(t),Uor=i(Iqe),Gue=n(Iqe,"SPAN",{});var Egt=s(Gue);Jor=r(Egt,"TFAutoModel"),Egt.forEach(t),Iqe.forEach(t),RPe=i(f),Yo=n(f,"DIV",{class:!0});var sl=s(Yo);T(dy.$$.fragment,sl),Yor=i(sl),Rd=n(sl,"P",{});var uK=s(Rd);Kor=r(uK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FX=n(uK,"A",{href:!0});var Cgt=s(FX);Zor=r(Cgt,"from_pretrained()"),Cgt.forEach(t),err=r(uK," class method or the "),TX=n(uK,"A",{href:!0});var wgt=s(TX);orr=r(wgt,"from_config()"),wgt.forEach(t),rrr=r(uK,` class
method.`),uK.forEach(t),trr=i(sl),cy=n(sl,"P",{});var qqe=s(cy);arr=r(qqe,"This class cannot be instantiated directly using "),Oue=n(qqe,"CODE",{});var Agt=s(Oue);nrr=r(Agt,"__init__()"),Agt.forEach(t),srr=r(qqe," (throws an error)."),qqe.forEach(t),lrr=i(sl),Et=n(sl,"DIV",{class:!0});var y3=s(Et);T(fy.$$.fragment,y3),irr=i(y3),Vue=n(y3,"P",{});var ygt=s(Vue);drr=r(ygt,"Instantiates one of the base model classes of the library from a configuration."),ygt.forEach(t),crr=i(y3),Bd=n(y3,"P",{});var _K=s(Bd);frr=r(_K,`Note:
Loading a model from its configuration file does `),Xue=n(_K,"STRONG",{});var Lgt=s(Xue);mrr=r(Lgt,"not"),Lgt.forEach(t),grr=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(_K,"A",{href:!0});var xgt=s(MX);hrr=r(xgt,"from_pretrained()"),xgt.forEach(t),prr=r(_K," to load the model weights."),_K.forEach(t),urr=i(y3),T(dT.$$.fragment,y3),y3.forEach(t),_rr=i(sl),Cr=n(sl,"DIV",{class:!0});var ll=s(Cr);T(my.$$.fragment,ll),brr=i(ll),zue=n(ll,"P",{});var $gt=s(zue);vrr=r($gt,"Instantiate one of the base model classes of the library from a pretrained model."),$gt.forEach(t),Frr=i(ll),Ua=n(ll,"P",{});var L3=s(Ua);Trr=r(L3,"The model class to instantiate is selected based on the "),Que=n(L3,"CODE",{});var kgt=s(Que);Mrr=r(kgt,"model_type"),kgt.forEach(t),Err=r(L3,` property of the config object (either
passed as an argument or loaded from `),Wue=n(L3,"CODE",{});var Sgt=s(Wue);Crr=r(Sgt,"pretrained_model_name_or_path"),Sgt.forEach(t),wrr=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=n(L3,"CODE",{});var Rgt=s(Hue);Arr=r(Rgt,"pretrained_model_name_or_path"),Rgt.forEach(t),yrr=r(L3,":"),L3.forEach(t),Lrr=i(ll),j=n(ll,"UL",{});var D=s(j);cT=n(D,"LI",{});var H8e=s(cT);Uue=n(H8e,"STRONG",{});var Bgt=s(Uue);xrr=r(Bgt,"albert"),Bgt.forEach(t),$rr=r(H8e," \u2014 "),EX=n(H8e,"A",{href:!0});var Pgt=s(EX);krr=r(Pgt,"TFAlbertModel"),Pgt.forEach(t),Srr=r(H8e," (ALBERT model)"),H8e.forEach(t),Rrr=i(D),fT=n(D,"LI",{});var U8e=s(fT);Jue=n(U8e,"STRONG",{});var Igt=s(Jue);Brr=r(Igt,"bart"),Igt.forEach(t),Prr=r(U8e," \u2014 "),CX=n(U8e,"A",{href:!0});var qgt=s(CX);Irr=r(qgt,"TFBartModel"),qgt.forEach(t),qrr=r(U8e," (BART model)"),U8e.forEach(t),Nrr=i(D),mT=n(D,"LI",{});var J8e=s(mT);Yue=n(J8e,"STRONG",{});var Ngt=s(Yue);jrr=r(Ngt,"bert"),Ngt.forEach(t),Drr=r(J8e," \u2014 "),wX=n(J8e,"A",{href:!0});var jgt=s(wX);Grr=r(jgt,"TFBertModel"),jgt.forEach(t),Orr=r(J8e," (BERT model)"),J8e.forEach(t),Vrr=i(D),gT=n(D,"LI",{});var Y8e=s(gT);Kue=n(Y8e,"STRONG",{});var Dgt=s(Kue);Xrr=r(Dgt,"blenderbot"),Dgt.forEach(t),zrr=r(Y8e," \u2014 "),AX=n(Y8e,"A",{href:!0});var Ggt=s(AX);Qrr=r(Ggt,"TFBlenderbotModel"),Ggt.forEach(t),Wrr=r(Y8e," (Blenderbot model)"),Y8e.forEach(t),Hrr=i(D),hT=n(D,"LI",{});var K8e=s(hT);Zue=n(K8e,"STRONG",{});var Ogt=s(Zue);Urr=r(Ogt,"blenderbot-small"),Ogt.forEach(t),Jrr=r(K8e," \u2014 "),yX=n(K8e,"A",{href:!0});var Vgt=s(yX);Yrr=r(Vgt,"TFBlenderbotSmallModel"),Vgt.forEach(t),Krr=r(K8e," (BlenderbotSmall model)"),K8e.forEach(t),Zrr=i(D),pT=n(D,"LI",{});var Z8e=s(pT);e_e=n(Z8e,"STRONG",{});var Xgt=s(e_e);etr=r(Xgt,"camembert"),Xgt.forEach(t),otr=r(Z8e," \u2014 "),LX=n(Z8e,"A",{href:!0});var zgt=s(LX);rtr=r(zgt,"TFCamembertModel"),zgt.forEach(t),ttr=r(Z8e," (CamemBERT model)"),Z8e.forEach(t),atr=i(D),uT=n(D,"LI",{});var exe=s(uT);o_e=n(exe,"STRONG",{});var Qgt=s(o_e);ntr=r(Qgt,"clip"),Qgt.forEach(t),str=r(exe," \u2014 "),xX=n(exe,"A",{href:!0});var Wgt=s(xX);ltr=r(Wgt,"TFCLIPModel"),Wgt.forEach(t),itr=r(exe," (CLIP model)"),exe.forEach(t),dtr=i(D),_T=n(D,"LI",{});var oxe=s(_T);r_e=n(oxe,"STRONG",{});var Hgt=s(r_e);ctr=r(Hgt,"convbert"),Hgt.forEach(t),ftr=r(oxe," \u2014 "),$X=n(oxe,"A",{href:!0});var Ugt=s($X);mtr=r(Ugt,"TFConvBertModel"),Ugt.forEach(t),gtr=r(oxe," (ConvBERT model)"),oxe.forEach(t),htr=i(D),bT=n(D,"LI",{});var rxe=s(bT);t_e=n(rxe,"STRONG",{});var Jgt=s(t_e);ptr=r(Jgt,"convnext"),Jgt.forEach(t),utr=r(rxe," \u2014 "),kX=n(rxe,"A",{href:!0});var Ygt=s(kX);_tr=r(Ygt,"TFConvNextModel"),Ygt.forEach(t),btr=r(rxe," (ConvNext model)"),rxe.forEach(t),vtr=i(D),vT=n(D,"LI",{});var txe=s(vT);a_e=n(txe,"STRONG",{});var Kgt=s(a_e);Ftr=r(Kgt,"ctrl"),Kgt.forEach(t),Ttr=r(txe," \u2014 "),SX=n(txe,"A",{href:!0});var Zgt=s(SX);Mtr=r(Zgt,"TFCTRLModel"),Zgt.forEach(t),Etr=r(txe," (CTRL model)"),txe.forEach(t),Ctr=i(D),FT=n(D,"LI",{});var axe=s(FT);n_e=n(axe,"STRONG",{});var eht=s(n_e);wtr=r(eht,"data2vec-vision"),eht.forEach(t),Atr=r(axe," \u2014 "),RX=n(axe,"A",{href:!0});var oht=s(RX);ytr=r(oht,"TFData2VecVisionModel"),oht.forEach(t),Ltr=r(axe," (Data2VecVision model)"),axe.forEach(t),xtr=i(D),TT=n(D,"LI",{});var nxe=s(TT);s_e=n(nxe,"STRONG",{});var rht=s(s_e);$tr=r(rht,"deberta"),rht.forEach(t),ktr=r(nxe," \u2014 "),BX=n(nxe,"A",{href:!0});var tht=s(BX);Str=r(tht,"TFDebertaModel"),tht.forEach(t),Rtr=r(nxe," (DeBERTa model)"),nxe.forEach(t),Btr=i(D),MT=n(D,"LI",{});var sxe=s(MT);l_e=n(sxe,"STRONG",{});var aht=s(l_e);Ptr=r(aht,"deberta-v2"),aht.forEach(t),Itr=r(sxe," \u2014 "),PX=n(sxe,"A",{href:!0});var nht=s(PX);qtr=r(nht,"TFDebertaV2Model"),nht.forEach(t),Ntr=r(sxe," (DeBERTa-v2 model)"),sxe.forEach(t),jtr=i(D),ET=n(D,"LI",{});var lxe=s(ET);i_e=n(lxe,"STRONG",{});var sht=s(i_e);Dtr=r(sht,"distilbert"),sht.forEach(t),Gtr=r(lxe," \u2014 "),IX=n(lxe,"A",{href:!0});var lht=s(IX);Otr=r(lht,"TFDistilBertModel"),lht.forEach(t),Vtr=r(lxe," (DistilBERT model)"),lxe.forEach(t),Xtr=i(D),CT=n(D,"LI",{});var ixe=s(CT);d_e=n(ixe,"STRONG",{});var iht=s(d_e);ztr=r(iht,"dpr"),iht.forEach(t),Qtr=r(ixe," \u2014 "),qX=n(ixe,"A",{href:!0});var dht=s(qX);Wtr=r(dht,"TFDPRQuestionEncoder"),dht.forEach(t),Htr=r(ixe," (DPR model)"),ixe.forEach(t),Utr=i(D),wT=n(D,"LI",{});var dxe=s(wT);c_e=n(dxe,"STRONG",{});var cht=s(c_e);Jtr=r(cht,"electra"),cht.forEach(t),Ytr=r(dxe," \u2014 "),NX=n(dxe,"A",{href:!0});var fht=s(NX);Ktr=r(fht,"TFElectraModel"),fht.forEach(t),Ztr=r(dxe," (ELECTRA model)"),dxe.forEach(t),ear=i(D),AT=n(D,"LI",{});var cxe=s(AT);f_e=n(cxe,"STRONG",{});var mht=s(f_e);oar=r(mht,"flaubert"),mht.forEach(t),rar=r(cxe," \u2014 "),jX=n(cxe,"A",{href:!0});var ght=s(jX);tar=r(ght,"TFFlaubertModel"),ght.forEach(t),aar=r(cxe," (FlauBERT model)"),cxe.forEach(t),nar=i(D),ks=n(D,"LI",{});var Nx=s(ks);m_e=n(Nx,"STRONG",{});var hht=s(m_e);sar=r(hht,"funnel"),hht.forEach(t),lar=r(Nx," \u2014 "),DX=n(Nx,"A",{href:!0});var pht=s(DX);iar=r(pht,"TFFunnelModel"),pht.forEach(t),dar=r(Nx," or "),GX=n(Nx,"A",{href:!0});var uht=s(GX);car=r(uht,"TFFunnelBaseModel"),uht.forEach(t),far=r(Nx," (Funnel Transformer model)"),Nx.forEach(t),mar=i(D),yT=n(D,"LI",{});var fxe=s(yT);g_e=n(fxe,"STRONG",{});var _ht=s(g_e);gar=r(_ht,"gpt2"),_ht.forEach(t),har=r(fxe," \u2014 "),OX=n(fxe,"A",{href:!0});var bht=s(OX);par=r(bht,"TFGPT2Model"),bht.forEach(t),uar=r(fxe," (OpenAI GPT-2 model)"),fxe.forEach(t),_ar=i(D),LT=n(D,"LI",{});var mxe=s(LT);h_e=n(mxe,"STRONG",{});var vht=s(h_e);bar=r(vht,"gptj"),vht.forEach(t),Far=r(mxe," \u2014 "),VX=n(mxe,"A",{href:!0});var Fht=s(VX);Tar=r(Fht,"TFGPTJModel"),Fht.forEach(t),Mar=r(mxe," (GPT-J model)"),mxe.forEach(t),Ear=i(D),xT=n(D,"LI",{});var gxe=s(xT);p_e=n(gxe,"STRONG",{});var Tht=s(p_e);Car=r(Tht,"hubert"),Tht.forEach(t),war=r(gxe," \u2014 "),XX=n(gxe,"A",{href:!0});var Mht=s(XX);Aar=r(Mht,"TFHubertModel"),Mht.forEach(t),yar=r(gxe," (Hubert model)"),gxe.forEach(t),Lar=i(D),$T=n(D,"LI",{});var hxe=s($T);u_e=n(hxe,"STRONG",{});var Eht=s(u_e);xar=r(Eht,"layoutlm"),Eht.forEach(t),$ar=r(hxe," \u2014 "),zX=n(hxe,"A",{href:!0});var Cht=s(zX);kar=r(Cht,"TFLayoutLMModel"),Cht.forEach(t),Sar=r(hxe," (LayoutLM model)"),hxe.forEach(t),Rar=i(D),kT=n(D,"LI",{});var pxe=s(kT);__e=n(pxe,"STRONG",{});var wht=s(__e);Bar=r(wht,"led"),wht.forEach(t),Par=r(pxe," \u2014 "),QX=n(pxe,"A",{href:!0});var Aht=s(QX);Iar=r(Aht,"TFLEDModel"),Aht.forEach(t),qar=r(pxe," (LED model)"),pxe.forEach(t),Nar=i(D),ST=n(D,"LI",{});var uxe=s(ST);b_e=n(uxe,"STRONG",{});var yht=s(b_e);jar=r(yht,"longformer"),yht.forEach(t),Dar=r(uxe," \u2014 "),WX=n(uxe,"A",{href:!0});var Lht=s(WX);Gar=r(Lht,"TFLongformerModel"),Lht.forEach(t),Oar=r(uxe," (Longformer model)"),uxe.forEach(t),Var=i(D),RT=n(D,"LI",{});var _xe=s(RT);v_e=n(_xe,"STRONG",{});var xht=s(v_e);Xar=r(xht,"lxmert"),xht.forEach(t),zar=r(_xe," \u2014 "),HX=n(_xe,"A",{href:!0});var $ht=s(HX);Qar=r($ht,"TFLxmertModel"),$ht.forEach(t),War=r(_xe," (LXMERT model)"),_xe.forEach(t),Har=i(D),BT=n(D,"LI",{});var bxe=s(BT);F_e=n(bxe,"STRONG",{});var kht=s(F_e);Uar=r(kht,"marian"),kht.forEach(t),Jar=r(bxe," \u2014 "),UX=n(bxe,"A",{href:!0});var Sht=s(UX);Yar=r(Sht,"TFMarianModel"),Sht.forEach(t),Kar=r(bxe," (Marian model)"),bxe.forEach(t),Zar=i(D),PT=n(D,"LI",{});var vxe=s(PT);T_e=n(vxe,"STRONG",{});var Rht=s(T_e);enr=r(Rht,"mbart"),Rht.forEach(t),onr=r(vxe," \u2014 "),JX=n(vxe,"A",{href:!0});var Bht=s(JX);rnr=r(Bht,"TFMBartModel"),Bht.forEach(t),tnr=r(vxe," (mBART model)"),vxe.forEach(t),anr=i(D),IT=n(D,"LI",{});var Fxe=s(IT);M_e=n(Fxe,"STRONG",{});var Pht=s(M_e);nnr=r(Pht,"mobilebert"),Pht.forEach(t),snr=r(Fxe," \u2014 "),YX=n(Fxe,"A",{href:!0});var Iht=s(YX);lnr=r(Iht,"TFMobileBertModel"),Iht.forEach(t),inr=r(Fxe," (MobileBERT model)"),Fxe.forEach(t),dnr=i(D),qT=n(D,"LI",{});var Txe=s(qT);E_e=n(Txe,"STRONG",{});var qht=s(E_e);cnr=r(qht,"mpnet"),qht.forEach(t),fnr=r(Txe," \u2014 "),KX=n(Txe,"A",{href:!0});var Nht=s(KX);mnr=r(Nht,"TFMPNetModel"),Nht.forEach(t),gnr=r(Txe," (MPNet model)"),Txe.forEach(t),hnr=i(D),NT=n(D,"LI",{});var Mxe=s(NT);C_e=n(Mxe,"STRONG",{});var jht=s(C_e);pnr=r(jht,"mt5"),jht.forEach(t),unr=r(Mxe," \u2014 "),ZX=n(Mxe,"A",{href:!0});var Dht=s(ZX);_nr=r(Dht,"TFMT5Model"),Dht.forEach(t),bnr=r(Mxe," (mT5 model)"),Mxe.forEach(t),vnr=i(D),jT=n(D,"LI",{});var Exe=s(jT);w_e=n(Exe,"STRONG",{});var Ght=s(w_e);Fnr=r(Ght,"openai-gpt"),Ght.forEach(t),Tnr=r(Exe," \u2014 "),ez=n(Exe,"A",{href:!0});var Oht=s(ez);Mnr=r(Oht,"TFOpenAIGPTModel"),Oht.forEach(t),Enr=r(Exe," (OpenAI GPT model)"),Exe.forEach(t),Cnr=i(D),DT=n(D,"LI",{});var Cxe=s(DT);A_e=n(Cxe,"STRONG",{});var Vht=s(A_e);wnr=r(Vht,"pegasus"),Vht.forEach(t),Anr=r(Cxe," \u2014 "),oz=n(Cxe,"A",{href:!0});var Xht=s(oz);ynr=r(Xht,"TFPegasusModel"),Xht.forEach(t),Lnr=r(Cxe," (Pegasus model)"),Cxe.forEach(t),xnr=i(D),GT=n(D,"LI",{});var wxe=s(GT);y_e=n(wxe,"STRONG",{});var zht=s(y_e);$nr=r(zht,"rembert"),zht.forEach(t),knr=r(wxe," \u2014 "),rz=n(wxe,"A",{href:!0});var Qht=s(rz);Snr=r(Qht,"TFRemBertModel"),Qht.forEach(t),Rnr=r(wxe," (RemBERT model)"),wxe.forEach(t),Bnr=i(D),OT=n(D,"LI",{});var Axe=s(OT);L_e=n(Axe,"STRONG",{});var Wht=s(L_e);Pnr=r(Wht,"roberta"),Wht.forEach(t),Inr=r(Axe," \u2014 "),tz=n(Axe,"A",{href:!0});var Hht=s(tz);qnr=r(Hht,"TFRobertaModel"),Hht.forEach(t),Nnr=r(Axe," (RoBERTa model)"),Axe.forEach(t),jnr=i(D),VT=n(D,"LI",{});var yxe=s(VT);x_e=n(yxe,"STRONG",{});var Uht=s(x_e);Dnr=r(Uht,"roformer"),Uht.forEach(t),Gnr=r(yxe," \u2014 "),az=n(yxe,"A",{href:!0});var Jht=s(az);Onr=r(Jht,"TFRoFormerModel"),Jht.forEach(t),Vnr=r(yxe," (RoFormer model)"),yxe.forEach(t),Xnr=i(D),XT=n(D,"LI",{});var Lxe=s(XT);$_e=n(Lxe,"STRONG",{});var Yht=s($_e);znr=r(Yht,"speech_to_text"),Yht.forEach(t),Qnr=r(Lxe," \u2014 "),nz=n(Lxe,"A",{href:!0});var Kht=s(nz);Wnr=r(Kht,"TFSpeech2TextModel"),Kht.forEach(t),Hnr=r(Lxe," (Speech2Text model)"),Lxe.forEach(t),Unr=i(D),zT=n(D,"LI",{});var xxe=s(zT);k_e=n(xxe,"STRONG",{});var Zht=s(k_e);Jnr=r(Zht,"t5"),Zht.forEach(t),Ynr=r(xxe," \u2014 "),sz=n(xxe,"A",{href:!0});var ept=s(sz);Knr=r(ept,"TFT5Model"),ept.forEach(t),Znr=r(xxe," (T5 model)"),xxe.forEach(t),esr=i(D),QT=n(D,"LI",{});var $xe=s(QT);S_e=n($xe,"STRONG",{});var opt=s(S_e);osr=r(opt,"tapas"),opt.forEach(t),rsr=r($xe," \u2014 "),lz=n($xe,"A",{href:!0});var rpt=s(lz);tsr=r(rpt,"TFTapasModel"),rpt.forEach(t),asr=r($xe," (TAPAS model)"),$xe.forEach(t),nsr=i(D),WT=n(D,"LI",{});var kxe=s(WT);R_e=n(kxe,"STRONG",{});var tpt=s(R_e);ssr=r(tpt,"transfo-xl"),tpt.forEach(t),lsr=r(kxe," \u2014 "),iz=n(kxe,"A",{href:!0});var apt=s(iz);isr=r(apt,"TFTransfoXLModel"),apt.forEach(t),dsr=r(kxe," (Transformer-XL model)"),kxe.forEach(t),csr=i(D),HT=n(D,"LI",{});var Sxe=s(HT);B_e=n(Sxe,"STRONG",{});var npt=s(B_e);fsr=r(npt,"vit"),npt.forEach(t),msr=r(Sxe," \u2014 "),dz=n(Sxe,"A",{href:!0});var spt=s(dz);gsr=r(spt,"TFViTModel"),spt.forEach(t),hsr=r(Sxe," (ViT model)"),Sxe.forEach(t),psr=i(D),UT=n(D,"LI",{});var Rxe=s(UT);P_e=n(Rxe,"STRONG",{});var lpt=s(P_e);usr=r(lpt,"vit_mae"),lpt.forEach(t),_sr=r(Rxe," \u2014 "),cz=n(Rxe,"A",{href:!0});var ipt=s(cz);bsr=r(ipt,"TFViTMAEModel"),ipt.forEach(t),vsr=r(Rxe," (ViTMAE model)"),Rxe.forEach(t),Fsr=i(D),JT=n(D,"LI",{});var Bxe=s(JT);I_e=n(Bxe,"STRONG",{});var dpt=s(I_e);Tsr=r(dpt,"wav2vec2"),dpt.forEach(t),Msr=r(Bxe," \u2014 "),fz=n(Bxe,"A",{href:!0});var cpt=s(fz);Esr=r(cpt,"TFWav2Vec2Model"),cpt.forEach(t),Csr=r(Bxe," (Wav2Vec2 model)"),Bxe.forEach(t),wsr=i(D),YT=n(D,"LI",{});var Pxe=s(YT);q_e=n(Pxe,"STRONG",{});var fpt=s(q_e);Asr=r(fpt,"xlm"),fpt.forEach(t),ysr=r(Pxe," \u2014 "),mz=n(Pxe,"A",{href:!0});var mpt=s(mz);Lsr=r(mpt,"TFXLMModel"),mpt.forEach(t),xsr=r(Pxe," (XLM model)"),Pxe.forEach(t),$sr=i(D),KT=n(D,"LI",{});var Ixe=s(KT);N_e=n(Ixe,"STRONG",{});var gpt=s(N_e);ksr=r(gpt,"xlm-roberta"),gpt.forEach(t),Ssr=r(Ixe," \u2014 "),gz=n(Ixe,"A",{href:!0});var hpt=s(gz);Rsr=r(hpt,"TFXLMRobertaModel"),hpt.forEach(t),Bsr=r(Ixe," (XLM-RoBERTa model)"),Ixe.forEach(t),Psr=i(D),ZT=n(D,"LI",{});var qxe=s(ZT);j_e=n(qxe,"STRONG",{});var ppt=s(j_e);Isr=r(ppt,"xlnet"),ppt.forEach(t),qsr=r(qxe," \u2014 "),hz=n(qxe,"A",{href:!0});var upt=s(hz);Nsr=r(upt,"TFXLNetModel"),upt.forEach(t),jsr=r(qxe," (XLNet model)"),qxe.forEach(t),D.forEach(t),Dsr=i(ll),T(e7.$$.fragment,ll),ll.forEach(t),sl.forEach(t),BPe=i(f),Pd=n(f,"H2",{class:!0});var Nqe=s(Pd);o7=n(Nqe,"A",{id:!0,class:!0,href:!0});var _pt=s(o7);D_e=n(_pt,"SPAN",{});var bpt=s(D_e);T(gy.$$.fragment,bpt),bpt.forEach(t),_pt.forEach(t),Gsr=i(Nqe),G_e=n(Nqe,"SPAN",{});var vpt=s(G_e);Osr=r(vpt,"TFAutoModelForPreTraining"),vpt.forEach(t),Nqe.forEach(t),PPe=i(f),Ko=n(f,"DIV",{class:!0});var il=s(Ko);T(hy.$$.fragment,il),Vsr=i(il),Id=n(il,"P",{});var bK=s(Id);Xsr=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pz=n(bK,"A",{href:!0});var Fpt=s(pz);zsr=r(Fpt,"from_pretrained()"),Fpt.forEach(t),Qsr=r(bK," class method or the "),uz=n(bK,"A",{href:!0});var Tpt=s(uz);Wsr=r(Tpt,"from_config()"),Tpt.forEach(t),Hsr=r(bK,` class
method.`),bK.forEach(t),Usr=i(il),py=n(il,"P",{});var jqe=s(py);Jsr=r(jqe,"This class cannot be instantiated directly using "),O_e=n(jqe,"CODE",{});var Mpt=s(O_e);Ysr=r(Mpt,"__init__()"),Mpt.forEach(t),Ksr=r(jqe," (throws an error)."),jqe.forEach(t),Zsr=i(il),Ct=n(il,"DIV",{class:!0});var x3=s(Ct);T(uy.$$.fragment,x3),elr=i(x3),V_e=n(x3,"P",{});var Ept=s(V_e);olr=r(Ept,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ept.forEach(t),rlr=i(x3),qd=n(x3,"P",{});var vK=s(qd);tlr=r(vK,`Note:
Loading a model from its configuration file does `),X_e=n(vK,"STRONG",{});var Cpt=s(X_e);alr=r(Cpt,"not"),Cpt.forEach(t),nlr=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(vK,"A",{href:!0});var wpt=s(_z);slr=r(wpt,"from_pretrained()"),wpt.forEach(t),llr=r(vK," to load the model weights."),vK.forEach(t),ilr=i(x3),T(r7.$$.fragment,x3),x3.forEach(t),dlr=i(il),wr=n(il,"DIV",{class:!0});var dl=s(wr);T(_y.$$.fragment,dl),clr=i(dl),z_e=n(dl,"P",{});var Apt=s(z_e);flr=r(Apt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Apt.forEach(t),mlr=i(dl),Ja=n(dl,"P",{});var $3=s(Ja);glr=r($3,"The model class to instantiate is selected based on the "),Q_e=n($3,"CODE",{});var ypt=s(Q_e);hlr=r(ypt,"model_type"),ypt.forEach(t),plr=r($3,` property of the config object (either
passed as an argument or loaded from `),W_e=n($3,"CODE",{});var Lpt=s(W_e);ulr=r(Lpt,"pretrained_model_name_or_path"),Lpt.forEach(t),_lr=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H_e=n($3,"CODE",{});var xpt=s(H_e);blr=r(xpt,"pretrained_model_name_or_path"),xpt.forEach(t),vlr=r($3,":"),$3.forEach(t),Flr=i(dl),ne=n(dl,"UL",{});var le=s(ne);t7=n(le,"LI",{});var Nxe=s(t7);U_e=n(Nxe,"STRONG",{});var $pt=s(U_e);Tlr=r($pt,"albert"),$pt.forEach(t),Mlr=r(Nxe," \u2014 "),bz=n(Nxe,"A",{href:!0});var kpt=s(bz);Elr=r(kpt,"TFAlbertForPreTraining"),kpt.forEach(t),Clr=r(Nxe," (ALBERT model)"),Nxe.forEach(t),wlr=i(le),a7=n(le,"LI",{});var jxe=s(a7);J_e=n(jxe,"STRONG",{});var Spt=s(J_e);Alr=r(Spt,"bart"),Spt.forEach(t),ylr=r(jxe," \u2014 "),vz=n(jxe,"A",{href:!0});var Rpt=s(vz);Llr=r(Rpt,"TFBartForConditionalGeneration"),Rpt.forEach(t),xlr=r(jxe," (BART model)"),jxe.forEach(t),$lr=i(le),n7=n(le,"LI",{});var Dxe=s(n7);Y_e=n(Dxe,"STRONG",{});var Bpt=s(Y_e);klr=r(Bpt,"bert"),Bpt.forEach(t),Slr=r(Dxe," \u2014 "),Fz=n(Dxe,"A",{href:!0});var Ppt=s(Fz);Rlr=r(Ppt,"TFBertForPreTraining"),Ppt.forEach(t),Blr=r(Dxe," (BERT model)"),Dxe.forEach(t),Plr=i(le),s7=n(le,"LI",{});var Gxe=s(s7);K_e=n(Gxe,"STRONG",{});var Ipt=s(K_e);Ilr=r(Ipt,"camembert"),Ipt.forEach(t),qlr=r(Gxe," \u2014 "),Tz=n(Gxe,"A",{href:!0});var qpt=s(Tz);Nlr=r(qpt,"TFCamembertForMaskedLM"),qpt.forEach(t),jlr=r(Gxe," (CamemBERT model)"),Gxe.forEach(t),Dlr=i(le),l7=n(le,"LI",{});var Oxe=s(l7);Z_e=n(Oxe,"STRONG",{});var Npt=s(Z_e);Glr=r(Npt,"ctrl"),Npt.forEach(t),Olr=r(Oxe," \u2014 "),Mz=n(Oxe,"A",{href:!0});var jpt=s(Mz);Vlr=r(jpt,"TFCTRLLMHeadModel"),jpt.forEach(t),Xlr=r(Oxe," (CTRL model)"),Oxe.forEach(t),zlr=i(le),i7=n(le,"LI",{});var Vxe=s(i7);e1e=n(Vxe,"STRONG",{});var Dpt=s(e1e);Qlr=r(Dpt,"distilbert"),Dpt.forEach(t),Wlr=r(Vxe," \u2014 "),Ez=n(Vxe,"A",{href:!0});var Gpt=s(Ez);Hlr=r(Gpt,"TFDistilBertForMaskedLM"),Gpt.forEach(t),Ulr=r(Vxe," (DistilBERT model)"),Vxe.forEach(t),Jlr=i(le),d7=n(le,"LI",{});var Xxe=s(d7);o1e=n(Xxe,"STRONG",{});var Opt=s(o1e);Ylr=r(Opt,"electra"),Opt.forEach(t),Klr=r(Xxe," \u2014 "),Cz=n(Xxe,"A",{href:!0});var Vpt=s(Cz);Zlr=r(Vpt,"TFElectraForPreTraining"),Vpt.forEach(t),eir=r(Xxe," (ELECTRA model)"),Xxe.forEach(t),oir=i(le),c7=n(le,"LI",{});var zxe=s(c7);r1e=n(zxe,"STRONG",{});var Xpt=s(r1e);rir=r(Xpt,"flaubert"),Xpt.forEach(t),tir=r(zxe," \u2014 "),wz=n(zxe,"A",{href:!0});var zpt=s(wz);air=r(zpt,"TFFlaubertWithLMHeadModel"),zpt.forEach(t),nir=r(zxe," (FlauBERT model)"),zxe.forEach(t),sir=i(le),f7=n(le,"LI",{});var Qxe=s(f7);t1e=n(Qxe,"STRONG",{});var Qpt=s(t1e);lir=r(Qpt,"funnel"),Qpt.forEach(t),iir=r(Qxe," \u2014 "),Az=n(Qxe,"A",{href:!0});var Wpt=s(Az);dir=r(Wpt,"TFFunnelForPreTraining"),Wpt.forEach(t),cir=r(Qxe," (Funnel Transformer model)"),Qxe.forEach(t),fir=i(le),m7=n(le,"LI",{});var Wxe=s(m7);a1e=n(Wxe,"STRONG",{});var Hpt=s(a1e);mir=r(Hpt,"gpt2"),Hpt.forEach(t),gir=r(Wxe," \u2014 "),yz=n(Wxe,"A",{href:!0});var Upt=s(yz);hir=r(Upt,"TFGPT2LMHeadModel"),Upt.forEach(t),pir=r(Wxe," (OpenAI GPT-2 model)"),Wxe.forEach(t),uir=i(le),g7=n(le,"LI",{});var Hxe=s(g7);n1e=n(Hxe,"STRONG",{});var Jpt=s(n1e);_ir=r(Jpt,"layoutlm"),Jpt.forEach(t),bir=r(Hxe," \u2014 "),Lz=n(Hxe,"A",{href:!0});var Ypt=s(Lz);vir=r(Ypt,"TFLayoutLMForMaskedLM"),Ypt.forEach(t),Fir=r(Hxe," (LayoutLM model)"),Hxe.forEach(t),Tir=i(le),h7=n(le,"LI",{});var Uxe=s(h7);s1e=n(Uxe,"STRONG",{});var Kpt=s(s1e);Mir=r(Kpt,"lxmert"),Kpt.forEach(t),Eir=r(Uxe," \u2014 "),xz=n(Uxe,"A",{href:!0});var Zpt=s(xz);Cir=r(Zpt,"TFLxmertForPreTraining"),Zpt.forEach(t),wir=r(Uxe," (LXMERT model)"),Uxe.forEach(t),Air=i(le),p7=n(le,"LI",{});var Jxe=s(p7);l1e=n(Jxe,"STRONG",{});var eut=s(l1e);yir=r(eut,"mobilebert"),eut.forEach(t),Lir=r(Jxe," \u2014 "),$z=n(Jxe,"A",{href:!0});var out=s($z);xir=r(out,"TFMobileBertForPreTraining"),out.forEach(t),$ir=r(Jxe," (MobileBERT model)"),Jxe.forEach(t),kir=i(le),u7=n(le,"LI",{});var Yxe=s(u7);i1e=n(Yxe,"STRONG",{});var rut=s(i1e);Sir=r(rut,"mpnet"),rut.forEach(t),Rir=r(Yxe," \u2014 "),kz=n(Yxe,"A",{href:!0});var tut=s(kz);Bir=r(tut,"TFMPNetForMaskedLM"),tut.forEach(t),Pir=r(Yxe," (MPNet model)"),Yxe.forEach(t),Iir=i(le),_7=n(le,"LI",{});var Kxe=s(_7);d1e=n(Kxe,"STRONG",{});var aut=s(d1e);qir=r(aut,"openai-gpt"),aut.forEach(t),Nir=r(Kxe," \u2014 "),Sz=n(Kxe,"A",{href:!0});var nut=s(Sz);jir=r(nut,"TFOpenAIGPTLMHeadModel"),nut.forEach(t),Dir=r(Kxe," (OpenAI GPT model)"),Kxe.forEach(t),Gir=i(le),b7=n(le,"LI",{});var Zxe=s(b7);c1e=n(Zxe,"STRONG",{});var sut=s(c1e);Oir=r(sut,"roberta"),sut.forEach(t),Vir=r(Zxe," \u2014 "),Rz=n(Zxe,"A",{href:!0});var lut=s(Rz);Xir=r(lut,"TFRobertaForMaskedLM"),lut.forEach(t),zir=r(Zxe," (RoBERTa model)"),Zxe.forEach(t),Qir=i(le),v7=n(le,"LI",{});var e$e=s(v7);f1e=n(e$e,"STRONG",{});var iut=s(f1e);Wir=r(iut,"t5"),iut.forEach(t),Hir=r(e$e," \u2014 "),Bz=n(e$e,"A",{href:!0});var dut=s(Bz);Uir=r(dut,"TFT5ForConditionalGeneration"),dut.forEach(t),Jir=r(e$e," (T5 model)"),e$e.forEach(t),Yir=i(le),F7=n(le,"LI",{});var o$e=s(F7);m1e=n(o$e,"STRONG",{});var cut=s(m1e);Kir=r(cut,"tapas"),cut.forEach(t),Zir=r(o$e," \u2014 "),Pz=n(o$e,"A",{href:!0});var fut=s(Pz);edr=r(fut,"TFTapasForMaskedLM"),fut.forEach(t),odr=r(o$e," (TAPAS model)"),o$e.forEach(t),rdr=i(le),T7=n(le,"LI",{});var r$e=s(T7);g1e=n(r$e,"STRONG",{});var mut=s(g1e);tdr=r(mut,"transfo-xl"),mut.forEach(t),adr=r(r$e," \u2014 "),Iz=n(r$e,"A",{href:!0});var gut=s(Iz);ndr=r(gut,"TFTransfoXLLMHeadModel"),gut.forEach(t),sdr=r(r$e," (Transformer-XL model)"),r$e.forEach(t),ldr=i(le),M7=n(le,"LI",{});var t$e=s(M7);h1e=n(t$e,"STRONG",{});var hut=s(h1e);idr=r(hut,"vit_mae"),hut.forEach(t),ddr=r(t$e," \u2014 "),qz=n(t$e,"A",{href:!0});var put=s(qz);cdr=r(put,"TFViTMAEForPreTraining"),put.forEach(t),fdr=r(t$e," (ViTMAE model)"),t$e.forEach(t),mdr=i(le),E7=n(le,"LI",{});var a$e=s(E7);p1e=n(a$e,"STRONG",{});var uut=s(p1e);gdr=r(uut,"xlm"),uut.forEach(t),hdr=r(a$e," \u2014 "),Nz=n(a$e,"A",{href:!0});var _ut=s(Nz);pdr=r(_ut,"TFXLMWithLMHeadModel"),_ut.forEach(t),udr=r(a$e," (XLM model)"),a$e.forEach(t),_dr=i(le),C7=n(le,"LI",{});var n$e=s(C7);u1e=n(n$e,"STRONG",{});var but=s(u1e);bdr=r(but,"xlm-roberta"),but.forEach(t),vdr=r(n$e," \u2014 "),jz=n(n$e,"A",{href:!0});var vut=s(jz);Fdr=r(vut,"TFXLMRobertaForMaskedLM"),vut.forEach(t),Tdr=r(n$e," (XLM-RoBERTa model)"),n$e.forEach(t),Mdr=i(le),w7=n(le,"LI",{});var s$e=s(w7);_1e=n(s$e,"STRONG",{});var Fut=s(_1e);Edr=r(Fut,"xlnet"),Fut.forEach(t),Cdr=r(s$e," \u2014 "),Dz=n(s$e,"A",{href:!0});var Tut=s(Dz);wdr=r(Tut,"TFXLNetLMHeadModel"),Tut.forEach(t),Adr=r(s$e," (XLNet model)"),s$e.forEach(t),le.forEach(t),ydr=i(dl),T(A7.$$.fragment,dl),dl.forEach(t),il.forEach(t),IPe=i(f),Nd=n(f,"H2",{class:!0});var Dqe=s(Nd);y7=n(Dqe,"A",{id:!0,class:!0,href:!0});var Mut=s(y7);b1e=n(Mut,"SPAN",{});var Eut=s(b1e);T(by.$$.fragment,Eut),Eut.forEach(t),Mut.forEach(t),Ldr=i(Dqe),v1e=n(Dqe,"SPAN",{});var Cut=s(v1e);xdr=r(Cut,"TFAutoModelForCausalLM"),Cut.forEach(t),Dqe.forEach(t),qPe=i(f),Zo=n(f,"DIV",{class:!0});var cl=s(Zo);T(vy.$$.fragment,cl),$dr=i(cl),jd=n(cl,"P",{});var FK=s(jd);kdr=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Gz=n(FK,"A",{href:!0});var wut=s(Gz);Sdr=r(wut,"from_pretrained()"),wut.forEach(t),Rdr=r(FK," class method or the "),Oz=n(FK,"A",{href:!0});var Aut=s(Oz);Bdr=r(Aut,"from_config()"),Aut.forEach(t),Pdr=r(FK,` class
method.`),FK.forEach(t),Idr=i(cl),Fy=n(cl,"P",{});var Gqe=s(Fy);qdr=r(Gqe,"This class cannot be instantiated directly using "),F1e=n(Gqe,"CODE",{});var yut=s(F1e);Ndr=r(yut,"__init__()"),yut.forEach(t),jdr=r(Gqe," (throws an error)."),Gqe.forEach(t),Ddr=i(cl),wt=n(cl,"DIV",{class:!0});var k3=s(wt);T(Ty.$$.fragment,k3),Gdr=i(k3),T1e=n(k3,"P",{});var Lut=s(T1e);Odr=r(Lut,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Lut.forEach(t),Vdr=i(k3),Dd=n(k3,"P",{});var TK=s(Dd);Xdr=r(TK,`Note:
Loading a model from its configuration file does `),M1e=n(TK,"STRONG",{});var xut=s(M1e);zdr=r(xut,"not"),xut.forEach(t),Qdr=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(TK,"A",{href:!0});var $ut=s(Vz);Wdr=r($ut,"from_pretrained()"),$ut.forEach(t),Hdr=r(TK," to load the model weights."),TK.forEach(t),Udr=i(k3),T(L7.$$.fragment,k3),k3.forEach(t),Jdr=i(cl),Ar=n(cl,"DIV",{class:!0});var fl=s(Ar);T(My.$$.fragment,fl),Ydr=i(fl),E1e=n(fl,"P",{});var kut=s(E1e);Kdr=r(kut,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kut.forEach(t),Zdr=i(fl),Ya=n(fl,"P",{});var S3=s(Ya);ecr=r(S3,"The model class to instantiate is selected based on the "),C1e=n(S3,"CODE",{});var Sut=s(C1e);ocr=r(Sut,"model_type"),Sut.forEach(t),rcr=r(S3,` property of the config object (either
passed as an argument or loaded from `),w1e=n(S3,"CODE",{});var Rut=s(w1e);tcr=r(Rut,"pretrained_model_name_or_path"),Rut.forEach(t),acr=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=n(S3,"CODE",{});var But=s(A1e);ncr=r(But,"pretrained_model_name_or_path"),But.forEach(t),scr=r(S3,":"),S3.forEach(t),lcr=i(fl),Te=n(fl,"UL",{});var Ce=s(Te);x7=n(Ce,"LI",{});var l$e=s(x7);y1e=n(l$e,"STRONG",{});var Put=s(y1e);icr=r(Put,"bert"),Put.forEach(t),dcr=r(l$e," \u2014 "),Xz=n(l$e,"A",{href:!0});var Iut=s(Xz);ccr=r(Iut,"TFBertLMHeadModel"),Iut.forEach(t),fcr=r(l$e," (BERT model)"),l$e.forEach(t),mcr=i(Ce),$7=n(Ce,"LI",{});var i$e=s($7);L1e=n(i$e,"STRONG",{});var qut=s(L1e);gcr=r(qut,"camembert"),qut.forEach(t),hcr=r(i$e," \u2014 "),zz=n(i$e,"A",{href:!0});var Nut=s(zz);pcr=r(Nut,"TFCamembertForCausalLM"),Nut.forEach(t),ucr=r(i$e," (CamemBERT model)"),i$e.forEach(t),_cr=i(Ce),k7=n(Ce,"LI",{});var d$e=s(k7);x1e=n(d$e,"STRONG",{});var jut=s(x1e);bcr=r(jut,"ctrl"),jut.forEach(t),vcr=r(d$e," \u2014 "),Qz=n(d$e,"A",{href:!0});var Dut=s(Qz);Fcr=r(Dut,"TFCTRLLMHeadModel"),Dut.forEach(t),Tcr=r(d$e," (CTRL model)"),d$e.forEach(t),Mcr=i(Ce),S7=n(Ce,"LI",{});var c$e=s(S7);$1e=n(c$e,"STRONG",{});var Gut=s($1e);Ecr=r(Gut,"gpt2"),Gut.forEach(t),Ccr=r(c$e," \u2014 "),Wz=n(c$e,"A",{href:!0});var Out=s(Wz);wcr=r(Out,"TFGPT2LMHeadModel"),Out.forEach(t),Acr=r(c$e," (OpenAI GPT-2 model)"),c$e.forEach(t),ycr=i(Ce),R7=n(Ce,"LI",{});var f$e=s(R7);k1e=n(f$e,"STRONG",{});var Vut=s(k1e);Lcr=r(Vut,"gptj"),Vut.forEach(t),xcr=r(f$e," \u2014 "),Hz=n(f$e,"A",{href:!0});var Xut=s(Hz);$cr=r(Xut,"TFGPTJForCausalLM"),Xut.forEach(t),kcr=r(f$e," (GPT-J model)"),f$e.forEach(t),Scr=i(Ce),B7=n(Ce,"LI",{});var m$e=s(B7);S1e=n(m$e,"STRONG",{});var zut=s(S1e);Rcr=r(zut,"openai-gpt"),zut.forEach(t),Bcr=r(m$e," \u2014 "),Uz=n(m$e,"A",{href:!0});var Qut=s(Uz);Pcr=r(Qut,"TFOpenAIGPTLMHeadModel"),Qut.forEach(t),Icr=r(m$e," (OpenAI GPT model)"),m$e.forEach(t),qcr=i(Ce),P7=n(Ce,"LI",{});var g$e=s(P7);R1e=n(g$e,"STRONG",{});var Wut=s(R1e);Ncr=r(Wut,"rembert"),Wut.forEach(t),jcr=r(g$e," \u2014 "),Jz=n(g$e,"A",{href:!0});var Hut=s(Jz);Dcr=r(Hut,"TFRemBertForCausalLM"),Hut.forEach(t),Gcr=r(g$e," (RemBERT model)"),g$e.forEach(t),Ocr=i(Ce),I7=n(Ce,"LI",{});var h$e=s(I7);B1e=n(h$e,"STRONG",{});var Uut=s(B1e);Vcr=r(Uut,"roberta"),Uut.forEach(t),Xcr=r(h$e," \u2014 "),Yz=n(h$e,"A",{href:!0});var Jut=s(Yz);zcr=r(Jut,"TFRobertaForCausalLM"),Jut.forEach(t),Qcr=r(h$e," (RoBERTa model)"),h$e.forEach(t),Wcr=i(Ce),q7=n(Ce,"LI",{});var p$e=s(q7);P1e=n(p$e,"STRONG",{});var Yut=s(P1e);Hcr=r(Yut,"roformer"),Yut.forEach(t),Ucr=r(p$e," \u2014 "),Kz=n(p$e,"A",{href:!0});var Kut=s(Kz);Jcr=r(Kut,"TFRoFormerForCausalLM"),Kut.forEach(t),Ycr=r(p$e," (RoFormer model)"),p$e.forEach(t),Kcr=i(Ce),N7=n(Ce,"LI",{});var u$e=s(N7);I1e=n(u$e,"STRONG",{});var Zut=s(I1e);Zcr=r(Zut,"transfo-xl"),Zut.forEach(t),efr=r(u$e," \u2014 "),Zz=n(u$e,"A",{href:!0});var e_t=s(Zz);ofr=r(e_t,"TFTransfoXLLMHeadModel"),e_t.forEach(t),rfr=r(u$e," (Transformer-XL model)"),u$e.forEach(t),tfr=i(Ce),j7=n(Ce,"LI",{});var _$e=s(j7);q1e=n(_$e,"STRONG",{});var o_t=s(q1e);afr=r(o_t,"xlm"),o_t.forEach(t),nfr=r(_$e," \u2014 "),eQ=n(_$e,"A",{href:!0});var r_t=s(eQ);sfr=r(r_t,"TFXLMWithLMHeadModel"),r_t.forEach(t),lfr=r(_$e," (XLM model)"),_$e.forEach(t),ifr=i(Ce),D7=n(Ce,"LI",{});var b$e=s(D7);N1e=n(b$e,"STRONG",{});var t_t=s(N1e);dfr=r(t_t,"xlnet"),t_t.forEach(t),cfr=r(b$e," \u2014 "),oQ=n(b$e,"A",{href:!0});var a_t=s(oQ);ffr=r(a_t,"TFXLNetLMHeadModel"),a_t.forEach(t),mfr=r(b$e," (XLNet model)"),b$e.forEach(t),Ce.forEach(t),gfr=i(fl),T(G7.$$.fragment,fl),fl.forEach(t),cl.forEach(t),NPe=i(f),Gd=n(f,"H2",{class:!0});var Oqe=s(Gd);O7=n(Oqe,"A",{id:!0,class:!0,href:!0});var n_t=s(O7);j1e=n(n_t,"SPAN",{});var s_t=s(j1e);T(Ey.$$.fragment,s_t),s_t.forEach(t),n_t.forEach(t),hfr=i(Oqe),D1e=n(Oqe,"SPAN",{});var l_t=s(D1e);pfr=r(l_t,"TFAutoModelForImageClassification"),l_t.forEach(t),Oqe.forEach(t),jPe=i(f),er=n(f,"DIV",{class:!0});var ml=s(er);T(Cy.$$.fragment,ml),ufr=i(ml),Od=n(ml,"P",{});var MK=s(Od);_fr=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rQ=n(MK,"A",{href:!0});var i_t=s(rQ);bfr=r(i_t,"from_pretrained()"),i_t.forEach(t),vfr=r(MK," class method or the "),tQ=n(MK,"A",{href:!0});var d_t=s(tQ);Ffr=r(d_t,"from_config()"),d_t.forEach(t),Tfr=r(MK,` class
method.`),MK.forEach(t),Mfr=i(ml),wy=n(ml,"P",{});var Vqe=s(wy);Efr=r(Vqe,"This class cannot be instantiated directly using "),G1e=n(Vqe,"CODE",{});var c_t=s(G1e);Cfr=r(c_t,"__init__()"),c_t.forEach(t),wfr=r(Vqe," (throws an error)."),Vqe.forEach(t),Afr=i(ml),At=n(ml,"DIV",{class:!0});var R3=s(At);T(Ay.$$.fragment,R3),yfr=i(R3),O1e=n(R3,"P",{});var f_t=s(O1e);Lfr=r(f_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),f_t.forEach(t),xfr=i(R3),Vd=n(R3,"P",{});var EK=s(Vd);$fr=r(EK,`Note:
Loading a model from its configuration file does `),V1e=n(EK,"STRONG",{});var m_t=s(V1e);kfr=r(m_t,"not"),m_t.forEach(t),Sfr=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=n(EK,"A",{href:!0});var g_t=s(aQ);Rfr=r(g_t,"from_pretrained()"),g_t.forEach(t),Bfr=r(EK," to load the model weights."),EK.forEach(t),Pfr=i(R3),T(V7.$$.fragment,R3),R3.forEach(t),Ifr=i(ml),yr=n(ml,"DIV",{class:!0});var gl=s(yr);T(yy.$$.fragment,gl),qfr=i(gl),X1e=n(gl,"P",{});var h_t=s(X1e);Nfr=r(h_t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),h_t.forEach(t),jfr=i(gl),Ka=n(gl,"P",{});var B3=s(Ka);Dfr=r(B3,"The model class to instantiate is selected based on the "),z1e=n(B3,"CODE",{});var p_t=s(z1e);Gfr=r(p_t,"model_type"),p_t.forEach(t),Ofr=r(B3,` property of the config object (either
passed as an argument or loaded from `),Q1e=n(B3,"CODE",{});var u_t=s(Q1e);Vfr=r(u_t,"pretrained_model_name_or_path"),u_t.forEach(t),Xfr=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=n(B3,"CODE",{});var __t=s(W1e);zfr=r(__t,"pretrained_model_name_or_path"),__t.forEach(t),Qfr=r(B3,":"),B3.forEach(t),Wfr=i(gl),Xd=n(gl,"UL",{});var CK=s(Xd);X7=n(CK,"LI",{});var v$e=s(X7);H1e=n(v$e,"STRONG",{});var b_t=s(H1e);Hfr=r(b_t,"convnext"),b_t.forEach(t),Ufr=r(v$e," \u2014 "),nQ=n(v$e,"A",{href:!0});var v_t=s(nQ);Jfr=r(v_t,"TFConvNextForImageClassification"),v_t.forEach(t),Yfr=r(v$e," (ConvNext model)"),v$e.forEach(t),Kfr=i(CK),z7=n(CK,"LI",{});var F$e=s(z7);U1e=n(F$e,"STRONG",{});var F_t=s(U1e);Zfr=r(F_t,"data2vec-vision"),F_t.forEach(t),emr=r(F$e," \u2014 "),sQ=n(F$e,"A",{href:!0});var T_t=s(sQ);omr=r(T_t,"TFData2VecVisionForImageClassification"),T_t.forEach(t),rmr=r(F$e," (Data2VecVision model)"),F$e.forEach(t),tmr=i(CK),Q7=n(CK,"LI",{});var T$e=s(Q7);J1e=n(T$e,"STRONG",{});var M_t=s(J1e);amr=r(M_t,"vit"),M_t.forEach(t),nmr=r(T$e," \u2014 "),lQ=n(T$e,"A",{href:!0});var E_t=s(lQ);smr=r(E_t,"TFViTForImageClassification"),E_t.forEach(t),lmr=r(T$e," (ViT model)"),T$e.forEach(t),CK.forEach(t),imr=i(gl),T(W7.$$.fragment,gl),gl.forEach(t),ml.forEach(t),DPe=i(f),zd=n(f,"H2",{class:!0});var Xqe=s(zd);H7=n(Xqe,"A",{id:!0,class:!0,href:!0});var C_t=s(H7);Y1e=n(C_t,"SPAN",{});var w_t=s(Y1e);T(Ly.$$.fragment,w_t),w_t.forEach(t),C_t.forEach(t),dmr=i(Xqe),K1e=n(Xqe,"SPAN",{});var A_t=s(K1e);cmr=r(A_t,"TFAutoModelForMaskedLM"),A_t.forEach(t),Xqe.forEach(t),GPe=i(f),or=n(f,"DIV",{class:!0});var hl=s(or);T(xy.$$.fragment,hl),fmr=i(hl),Qd=n(hl,"P",{});var wK=s(Qd);mmr=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iQ=n(wK,"A",{href:!0});var y_t=s(iQ);gmr=r(y_t,"from_pretrained()"),y_t.forEach(t),hmr=r(wK," class method or the "),dQ=n(wK,"A",{href:!0});var L_t=s(dQ);pmr=r(L_t,"from_config()"),L_t.forEach(t),umr=r(wK,` class
method.`),wK.forEach(t),_mr=i(hl),$y=n(hl,"P",{});var zqe=s($y);bmr=r(zqe,"This class cannot be instantiated directly using "),Z1e=n(zqe,"CODE",{});var x_t=s(Z1e);vmr=r(x_t,"__init__()"),x_t.forEach(t),Fmr=r(zqe," (throws an error)."),zqe.forEach(t),Tmr=i(hl),yt=n(hl,"DIV",{class:!0});var P3=s(yt);T(ky.$$.fragment,P3),Mmr=i(P3),ebe=n(P3,"P",{});var $_t=s(ebe);Emr=r($_t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$_t.forEach(t),Cmr=i(P3),Wd=n(P3,"P",{});var AK=s(Wd);wmr=r(AK,`Note:
Loading a model from its configuration file does `),obe=n(AK,"STRONG",{});var k_t=s(obe);Amr=r(k_t,"not"),k_t.forEach(t),ymr=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=n(AK,"A",{href:!0});var S_t=s(cQ);Lmr=r(S_t,"from_pretrained()"),S_t.forEach(t),xmr=r(AK," to load the model weights."),AK.forEach(t),$mr=i(P3),T(U7.$$.fragment,P3),P3.forEach(t),kmr=i(hl),Lr=n(hl,"DIV",{class:!0});var pl=s(Lr);T(Sy.$$.fragment,pl),Smr=i(pl),rbe=n(pl,"P",{});var R_t=s(rbe);Rmr=r(R_t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),R_t.forEach(t),Bmr=i(pl),Za=n(pl,"P",{});var I3=s(Za);Pmr=r(I3,"The model class to instantiate is selected based on the "),tbe=n(I3,"CODE",{});var B_t=s(tbe);Imr=r(B_t,"model_type"),B_t.forEach(t),qmr=r(I3,` property of the config object (either
passed as an argument or loaded from `),abe=n(I3,"CODE",{});var P_t=s(abe);Nmr=r(P_t,"pretrained_model_name_or_path"),P_t.forEach(t),jmr=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=n(I3,"CODE",{});var I_t=s(nbe);Dmr=r(I_t,"pretrained_model_name_or_path"),I_t.forEach(t),Gmr=r(I3,":"),I3.forEach(t),Omr=i(pl),ie=n(pl,"UL",{});var fe=s(ie);J7=n(fe,"LI",{});var M$e=s(J7);sbe=n(M$e,"STRONG",{});var q_t=s(sbe);Vmr=r(q_t,"albert"),q_t.forEach(t),Xmr=r(M$e," \u2014 "),fQ=n(M$e,"A",{href:!0});var N_t=s(fQ);zmr=r(N_t,"TFAlbertForMaskedLM"),N_t.forEach(t),Qmr=r(M$e," (ALBERT model)"),M$e.forEach(t),Wmr=i(fe),Y7=n(fe,"LI",{});var E$e=s(Y7);lbe=n(E$e,"STRONG",{});var j_t=s(lbe);Hmr=r(j_t,"bert"),j_t.forEach(t),Umr=r(E$e," \u2014 "),mQ=n(E$e,"A",{href:!0});var D_t=s(mQ);Jmr=r(D_t,"TFBertForMaskedLM"),D_t.forEach(t),Ymr=r(E$e," (BERT model)"),E$e.forEach(t),Kmr=i(fe),K7=n(fe,"LI",{});var C$e=s(K7);ibe=n(C$e,"STRONG",{});var G_t=s(ibe);Zmr=r(G_t,"camembert"),G_t.forEach(t),egr=r(C$e," \u2014 "),gQ=n(C$e,"A",{href:!0});var O_t=s(gQ);ogr=r(O_t,"TFCamembertForMaskedLM"),O_t.forEach(t),rgr=r(C$e," (CamemBERT model)"),C$e.forEach(t),tgr=i(fe),Z7=n(fe,"LI",{});var w$e=s(Z7);dbe=n(w$e,"STRONG",{});var V_t=s(dbe);agr=r(V_t,"convbert"),V_t.forEach(t),ngr=r(w$e," \u2014 "),hQ=n(w$e,"A",{href:!0});var X_t=s(hQ);sgr=r(X_t,"TFConvBertForMaskedLM"),X_t.forEach(t),lgr=r(w$e," (ConvBERT model)"),w$e.forEach(t),igr=i(fe),e9=n(fe,"LI",{});var A$e=s(e9);cbe=n(A$e,"STRONG",{});var z_t=s(cbe);dgr=r(z_t,"deberta"),z_t.forEach(t),cgr=r(A$e," \u2014 "),pQ=n(A$e,"A",{href:!0});var Q_t=s(pQ);fgr=r(Q_t,"TFDebertaForMaskedLM"),Q_t.forEach(t),mgr=r(A$e," (DeBERTa model)"),A$e.forEach(t),ggr=i(fe),o9=n(fe,"LI",{});var y$e=s(o9);fbe=n(y$e,"STRONG",{});var W_t=s(fbe);hgr=r(W_t,"deberta-v2"),W_t.forEach(t),pgr=r(y$e," \u2014 "),uQ=n(y$e,"A",{href:!0});var H_t=s(uQ);ugr=r(H_t,"TFDebertaV2ForMaskedLM"),H_t.forEach(t),_gr=r(y$e," (DeBERTa-v2 model)"),y$e.forEach(t),bgr=i(fe),r9=n(fe,"LI",{});var L$e=s(r9);mbe=n(L$e,"STRONG",{});var U_t=s(mbe);vgr=r(U_t,"distilbert"),U_t.forEach(t),Fgr=r(L$e," \u2014 "),_Q=n(L$e,"A",{href:!0});var J_t=s(_Q);Tgr=r(J_t,"TFDistilBertForMaskedLM"),J_t.forEach(t),Mgr=r(L$e," (DistilBERT model)"),L$e.forEach(t),Egr=i(fe),t9=n(fe,"LI",{});var x$e=s(t9);gbe=n(x$e,"STRONG",{});var Y_t=s(gbe);Cgr=r(Y_t,"electra"),Y_t.forEach(t),wgr=r(x$e," \u2014 "),bQ=n(x$e,"A",{href:!0});var K_t=s(bQ);Agr=r(K_t,"TFElectraForMaskedLM"),K_t.forEach(t),ygr=r(x$e," (ELECTRA model)"),x$e.forEach(t),Lgr=i(fe),a9=n(fe,"LI",{});var $$e=s(a9);hbe=n($$e,"STRONG",{});var Z_t=s(hbe);xgr=r(Z_t,"flaubert"),Z_t.forEach(t),$gr=r($$e," \u2014 "),vQ=n($$e,"A",{href:!0});var e1t=s(vQ);kgr=r(e1t,"TFFlaubertWithLMHeadModel"),e1t.forEach(t),Sgr=r($$e," (FlauBERT model)"),$$e.forEach(t),Rgr=i(fe),n9=n(fe,"LI",{});var k$e=s(n9);pbe=n(k$e,"STRONG",{});var o1t=s(pbe);Bgr=r(o1t,"funnel"),o1t.forEach(t),Pgr=r(k$e," \u2014 "),FQ=n(k$e,"A",{href:!0});var r1t=s(FQ);Igr=r(r1t,"TFFunnelForMaskedLM"),r1t.forEach(t),qgr=r(k$e," (Funnel Transformer model)"),k$e.forEach(t),Ngr=i(fe),s9=n(fe,"LI",{});var S$e=s(s9);ube=n(S$e,"STRONG",{});var t1t=s(ube);jgr=r(t1t,"layoutlm"),t1t.forEach(t),Dgr=r(S$e," \u2014 "),TQ=n(S$e,"A",{href:!0});var a1t=s(TQ);Ggr=r(a1t,"TFLayoutLMForMaskedLM"),a1t.forEach(t),Ogr=r(S$e," (LayoutLM model)"),S$e.forEach(t),Vgr=i(fe),l9=n(fe,"LI",{});var R$e=s(l9);_be=n(R$e,"STRONG",{});var n1t=s(_be);Xgr=r(n1t,"longformer"),n1t.forEach(t),zgr=r(R$e," \u2014 "),MQ=n(R$e,"A",{href:!0});var s1t=s(MQ);Qgr=r(s1t,"TFLongformerForMaskedLM"),s1t.forEach(t),Wgr=r(R$e," (Longformer model)"),R$e.forEach(t),Hgr=i(fe),i9=n(fe,"LI",{});var B$e=s(i9);bbe=n(B$e,"STRONG",{});var l1t=s(bbe);Ugr=r(l1t,"mobilebert"),l1t.forEach(t),Jgr=r(B$e," \u2014 "),EQ=n(B$e,"A",{href:!0});var i1t=s(EQ);Ygr=r(i1t,"TFMobileBertForMaskedLM"),i1t.forEach(t),Kgr=r(B$e," (MobileBERT model)"),B$e.forEach(t),Zgr=i(fe),d9=n(fe,"LI",{});var P$e=s(d9);vbe=n(P$e,"STRONG",{});var d1t=s(vbe);ehr=r(d1t,"mpnet"),d1t.forEach(t),ohr=r(P$e," \u2014 "),CQ=n(P$e,"A",{href:!0});var c1t=s(CQ);rhr=r(c1t,"TFMPNetForMaskedLM"),c1t.forEach(t),thr=r(P$e," (MPNet model)"),P$e.forEach(t),ahr=i(fe),c9=n(fe,"LI",{});var I$e=s(c9);Fbe=n(I$e,"STRONG",{});var f1t=s(Fbe);nhr=r(f1t,"rembert"),f1t.forEach(t),shr=r(I$e," \u2014 "),wQ=n(I$e,"A",{href:!0});var m1t=s(wQ);lhr=r(m1t,"TFRemBertForMaskedLM"),m1t.forEach(t),ihr=r(I$e," (RemBERT model)"),I$e.forEach(t),dhr=i(fe),f9=n(fe,"LI",{});var q$e=s(f9);Tbe=n(q$e,"STRONG",{});var g1t=s(Tbe);chr=r(g1t,"roberta"),g1t.forEach(t),fhr=r(q$e," \u2014 "),AQ=n(q$e,"A",{href:!0});var h1t=s(AQ);mhr=r(h1t,"TFRobertaForMaskedLM"),h1t.forEach(t),ghr=r(q$e," (RoBERTa model)"),q$e.forEach(t),hhr=i(fe),m9=n(fe,"LI",{});var N$e=s(m9);Mbe=n(N$e,"STRONG",{});var p1t=s(Mbe);phr=r(p1t,"roformer"),p1t.forEach(t),uhr=r(N$e," \u2014 "),yQ=n(N$e,"A",{href:!0});var u1t=s(yQ);_hr=r(u1t,"TFRoFormerForMaskedLM"),u1t.forEach(t),bhr=r(N$e," (RoFormer model)"),N$e.forEach(t),vhr=i(fe),g9=n(fe,"LI",{});var j$e=s(g9);Ebe=n(j$e,"STRONG",{});var _1t=s(Ebe);Fhr=r(_1t,"tapas"),_1t.forEach(t),Thr=r(j$e," \u2014 "),LQ=n(j$e,"A",{href:!0});var b1t=s(LQ);Mhr=r(b1t,"TFTapasForMaskedLM"),b1t.forEach(t),Ehr=r(j$e," (TAPAS model)"),j$e.forEach(t),Chr=i(fe),h9=n(fe,"LI",{});var D$e=s(h9);Cbe=n(D$e,"STRONG",{});var v1t=s(Cbe);whr=r(v1t,"xlm"),v1t.forEach(t),Ahr=r(D$e," \u2014 "),xQ=n(D$e,"A",{href:!0});var F1t=s(xQ);yhr=r(F1t,"TFXLMWithLMHeadModel"),F1t.forEach(t),Lhr=r(D$e," (XLM model)"),D$e.forEach(t),xhr=i(fe),p9=n(fe,"LI",{});var G$e=s(p9);wbe=n(G$e,"STRONG",{});var T1t=s(wbe);$hr=r(T1t,"xlm-roberta"),T1t.forEach(t),khr=r(G$e," \u2014 "),$Q=n(G$e,"A",{href:!0});var M1t=s($Q);Shr=r(M1t,"TFXLMRobertaForMaskedLM"),M1t.forEach(t),Rhr=r(G$e," (XLM-RoBERTa model)"),G$e.forEach(t),fe.forEach(t),Bhr=i(pl),T(u9.$$.fragment,pl),pl.forEach(t),hl.forEach(t),OPe=i(f),Hd=n(f,"H2",{class:!0});var Qqe=s(Hd);_9=n(Qqe,"A",{id:!0,class:!0,href:!0});var E1t=s(_9);Abe=n(E1t,"SPAN",{});var C1t=s(Abe);T(Ry.$$.fragment,C1t),C1t.forEach(t),E1t.forEach(t),Phr=i(Qqe),ybe=n(Qqe,"SPAN",{});var w1t=s(ybe);Ihr=r(w1t,"TFAutoModelForSeq2SeqLM"),w1t.forEach(t),Qqe.forEach(t),VPe=i(f),rr=n(f,"DIV",{class:!0});var ul=s(rr);T(By.$$.fragment,ul),qhr=i(ul),Ud=n(ul,"P",{});var yK=s(Ud);Nhr=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kQ=n(yK,"A",{href:!0});var A1t=s(kQ);jhr=r(A1t,"from_pretrained()"),A1t.forEach(t),Dhr=r(yK," class method or the "),SQ=n(yK,"A",{href:!0});var y1t=s(SQ);Ghr=r(y1t,"from_config()"),y1t.forEach(t),Ohr=r(yK,` class
method.`),yK.forEach(t),Vhr=i(ul),Py=n(ul,"P",{});var Wqe=s(Py);Xhr=r(Wqe,"This class cannot be instantiated directly using "),Lbe=n(Wqe,"CODE",{});var L1t=s(Lbe);zhr=r(L1t,"__init__()"),L1t.forEach(t),Qhr=r(Wqe," (throws an error)."),Wqe.forEach(t),Whr=i(ul),Lt=n(ul,"DIV",{class:!0});var q3=s(Lt);T(Iy.$$.fragment,q3),Hhr=i(q3),xbe=n(q3,"P",{});var x1t=s(xbe);Uhr=r(x1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),x1t.forEach(t),Jhr=i(q3),Jd=n(q3,"P",{});var LK=s(Jd);Yhr=r(LK,`Note:
Loading a model from its configuration file does `),$be=n(LK,"STRONG",{});var $1t=s($be);Khr=r($1t,"not"),$1t.forEach(t),Zhr=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=n(LK,"A",{href:!0});var k1t=s(RQ);epr=r(k1t,"from_pretrained()"),k1t.forEach(t),opr=r(LK," to load the model weights."),LK.forEach(t),rpr=i(q3),T(b9.$$.fragment,q3),q3.forEach(t),tpr=i(ul),xr=n(ul,"DIV",{class:!0});var _l=s(xr);T(qy.$$.fragment,_l),apr=i(_l),kbe=n(_l,"P",{});var S1t=s(kbe);npr=r(S1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),S1t.forEach(t),spr=i(_l),en=n(_l,"P",{});var N3=s(en);lpr=r(N3,"The model class to instantiate is selected based on the "),Sbe=n(N3,"CODE",{});var R1t=s(Sbe);ipr=r(R1t,"model_type"),R1t.forEach(t),dpr=r(N3,` property of the config object (either
passed as an argument or loaded from `),Rbe=n(N3,"CODE",{});var B1t=s(Rbe);cpr=r(B1t,"pretrained_model_name_or_path"),B1t.forEach(t),fpr=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=n(N3,"CODE",{});var P1t=s(Bbe);mpr=r(P1t,"pretrained_model_name_or_path"),P1t.forEach(t),gpr=r(N3,":"),N3.forEach(t),hpr=i(_l),ye=n(_l,"UL",{});var Re=s(ye);v9=n(Re,"LI",{});var O$e=s(v9);Pbe=n(O$e,"STRONG",{});var I1t=s(Pbe);ppr=r(I1t,"bart"),I1t.forEach(t),upr=r(O$e," \u2014 "),BQ=n(O$e,"A",{href:!0});var q1t=s(BQ);_pr=r(q1t,"TFBartForConditionalGeneration"),q1t.forEach(t),bpr=r(O$e," (BART model)"),O$e.forEach(t),vpr=i(Re),F9=n(Re,"LI",{});var V$e=s(F9);Ibe=n(V$e,"STRONG",{});var N1t=s(Ibe);Fpr=r(N1t,"blenderbot"),N1t.forEach(t),Tpr=r(V$e," \u2014 "),PQ=n(V$e,"A",{href:!0});var j1t=s(PQ);Mpr=r(j1t,"TFBlenderbotForConditionalGeneration"),j1t.forEach(t),Epr=r(V$e," (Blenderbot model)"),V$e.forEach(t),Cpr=i(Re),T9=n(Re,"LI",{});var X$e=s(T9);qbe=n(X$e,"STRONG",{});var D1t=s(qbe);wpr=r(D1t,"blenderbot-small"),D1t.forEach(t),Apr=r(X$e," \u2014 "),IQ=n(X$e,"A",{href:!0});var G1t=s(IQ);ypr=r(G1t,"TFBlenderbotSmallForConditionalGeneration"),G1t.forEach(t),Lpr=r(X$e," (BlenderbotSmall model)"),X$e.forEach(t),xpr=i(Re),M9=n(Re,"LI",{});var z$e=s(M9);Nbe=n(z$e,"STRONG",{});var O1t=s(Nbe);$pr=r(O1t,"encoder-decoder"),O1t.forEach(t),kpr=r(z$e," \u2014 "),qQ=n(z$e,"A",{href:!0});var V1t=s(qQ);Spr=r(V1t,"TFEncoderDecoderModel"),V1t.forEach(t),Rpr=r(z$e," (Encoder decoder model)"),z$e.forEach(t),Bpr=i(Re),E9=n(Re,"LI",{});var Q$e=s(E9);jbe=n(Q$e,"STRONG",{});var X1t=s(jbe);Ppr=r(X1t,"led"),X1t.forEach(t),Ipr=r(Q$e," \u2014 "),NQ=n(Q$e,"A",{href:!0});var z1t=s(NQ);qpr=r(z1t,"TFLEDForConditionalGeneration"),z1t.forEach(t),Npr=r(Q$e," (LED model)"),Q$e.forEach(t),jpr=i(Re),C9=n(Re,"LI",{});var W$e=s(C9);Dbe=n(W$e,"STRONG",{});var Q1t=s(Dbe);Dpr=r(Q1t,"marian"),Q1t.forEach(t),Gpr=r(W$e," \u2014 "),jQ=n(W$e,"A",{href:!0});var W1t=s(jQ);Opr=r(W1t,"TFMarianMTModel"),W1t.forEach(t),Vpr=r(W$e," (Marian model)"),W$e.forEach(t),Xpr=i(Re),w9=n(Re,"LI",{});var H$e=s(w9);Gbe=n(H$e,"STRONG",{});var H1t=s(Gbe);zpr=r(H1t,"mbart"),H1t.forEach(t),Qpr=r(H$e," \u2014 "),DQ=n(H$e,"A",{href:!0});var U1t=s(DQ);Wpr=r(U1t,"TFMBartForConditionalGeneration"),U1t.forEach(t),Hpr=r(H$e," (mBART model)"),H$e.forEach(t),Upr=i(Re),A9=n(Re,"LI",{});var U$e=s(A9);Obe=n(U$e,"STRONG",{});var J1t=s(Obe);Jpr=r(J1t,"mt5"),J1t.forEach(t),Ypr=r(U$e," \u2014 "),GQ=n(U$e,"A",{href:!0});var Y1t=s(GQ);Kpr=r(Y1t,"TFMT5ForConditionalGeneration"),Y1t.forEach(t),Zpr=r(U$e," (mT5 model)"),U$e.forEach(t),eur=i(Re),y9=n(Re,"LI",{});var J$e=s(y9);Vbe=n(J$e,"STRONG",{});var K1t=s(Vbe);our=r(K1t,"pegasus"),K1t.forEach(t),rur=r(J$e," \u2014 "),OQ=n(J$e,"A",{href:!0});var Z1t=s(OQ);tur=r(Z1t,"TFPegasusForConditionalGeneration"),Z1t.forEach(t),aur=r(J$e," (Pegasus model)"),J$e.forEach(t),nur=i(Re),L9=n(Re,"LI",{});var Y$e=s(L9);Xbe=n(Y$e,"STRONG",{});var ebt=s(Xbe);sur=r(ebt,"t5"),ebt.forEach(t),lur=r(Y$e," \u2014 "),VQ=n(Y$e,"A",{href:!0});var obt=s(VQ);iur=r(obt,"TFT5ForConditionalGeneration"),obt.forEach(t),dur=r(Y$e," (T5 model)"),Y$e.forEach(t),Re.forEach(t),cur=i(_l),T(x9.$$.fragment,_l),_l.forEach(t),ul.forEach(t),XPe=i(f),Yd=n(f,"H2",{class:!0});var Hqe=s(Yd);$9=n(Hqe,"A",{id:!0,class:!0,href:!0});var rbt=s($9);zbe=n(rbt,"SPAN",{});var tbt=s(zbe);T(Ny.$$.fragment,tbt),tbt.forEach(t),rbt.forEach(t),fur=i(Hqe),Qbe=n(Hqe,"SPAN",{});var abt=s(Qbe);mur=r(abt,"TFAutoModelForSequenceClassification"),abt.forEach(t),Hqe.forEach(t),zPe=i(f),tr=n(f,"DIV",{class:!0});var bl=s(tr);T(jy.$$.fragment,bl),gur=i(bl),Kd=n(bl,"P",{});var xK=s(Kd);hur=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XQ=n(xK,"A",{href:!0});var nbt=s(XQ);pur=r(nbt,"from_pretrained()"),nbt.forEach(t),uur=r(xK," class method or the "),zQ=n(xK,"A",{href:!0});var sbt=s(zQ);_ur=r(sbt,"from_config()"),sbt.forEach(t),bur=r(xK,` class
method.`),xK.forEach(t),vur=i(bl),Dy=n(bl,"P",{});var Uqe=s(Dy);Fur=r(Uqe,"This class cannot be instantiated directly using "),Wbe=n(Uqe,"CODE",{});var lbt=s(Wbe);Tur=r(lbt,"__init__()"),lbt.forEach(t),Mur=r(Uqe," (throws an error)."),Uqe.forEach(t),Eur=i(bl),xt=n(bl,"DIV",{class:!0});var j3=s(xt);T(Gy.$$.fragment,j3),Cur=i(j3),Hbe=n(j3,"P",{});var ibt=s(Hbe);wur=r(ibt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ibt.forEach(t),Aur=i(j3),Zd=n(j3,"P",{});var $K=s(Zd);yur=r($K,`Note:
Loading a model from its configuration file does `),Ube=n($K,"STRONG",{});var dbt=s(Ube);Lur=r(dbt,"not"),dbt.forEach(t),xur=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n($K,"A",{href:!0});var cbt=s(QQ);$ur=r(cbt,"from_pretrained()"),cbt.forEach(t),kur=r($K," to load the model weights."),$K.forEach(t),Sur=i(j3),T(k9.$$.fragment,j3),j3.forEach(t),Rur=i(bl),$r=n(bl,"DIV",{class:!0});var vl=s($r);T(Oy.$$.fragment,vl),Bur=i(vl),Jbe=n(vl,"P",{});var fbt=s(Jbe);Pur=r(fbt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fbt.forEach(t),Iur=i(vl),on=n(vl,"P",{});var D3=s(on);qur=r(D3,"The model class to instantiate is selected based on the "),Ybe=n(D3,"CODE",{});var mbt=s(Ybe);Nur=r(mbt,"model_type"),mbt.forEach(t),jur=r(D3,` property of the config object (either
passed as an argument or loaded from `),Kbe=n(D3,"CODE",{});var gbt=s(Kbe);Dur=r(gbt,"pretrained_model_name_or_path"),gbt.forEach(t),Gur=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=n(D3,"CODE",{});var hbt=s(Zbe);Our=r(hbt,"pretrained_model_name_or_path"),hbt.forEach(t),Vur=r(D3,":"),D3.forEach(t),Xur=i(vl),Z=n(vl,"UL",{});var re=s(Z);S9=n(re,"LI",{});var K$e=s(S9);e2e=n(K$e,"STRONG",{});var pbt=s(e2e);zur=r(pbt,"albert"),pbt.forEach(t),Qur=r(K$e," \u2014 "),WQ=n(K$e,"A",{href:!0});var ubt=s(WQ);Wur=r(ubt,"TFAlbertForSequenceClassification"),ubt.forEach(t),Hur=r(K$e," (ALBERT model)"),K$e.forEach(t),Uur=i(re),R9=n(re,"LI",{});var Z$e=s(R9);o2e=n(Z$e,"STRONG",{});var _bt=s(o2e);Jur=r(_bt,"bert"),_bt.forEach(t),Yur=r(Z$e," \u2014 "),HQ=n(Z$e,"A",{href:!0});var bbt=s(HQ);Kur=r(bbt,"TFBertForSequenceClassification"),bbt.forEach(t),Zur=r(Z$e," (BERT model)"),Z$e.forEach(t),e_r=i(re),B9=n(re,"LI",{});var eke=s(B9);r2e=n(eke,"STRONG",{});var vbt=s(r2e);o_r=r(vbt,"camembert"),vbt.forEach(t),r_r=r(eke," \u2014 "),UQ=n(eke,"A",{href:!0});var Fbt=s(UQ);t_r=r(Fbt,"TFCamembertForSequenceClassification"),Fbt.forEach(t),a_r=r(eke," (CamemBERT model)"),eke.forEach(t),n_r=i(re),P9=n(re,"LI",{});var oke=s(P9);t2e=n(oke,"STRONG",{});var Tbt=s(t2e);s_r=r(Tbt,"convbert"),Tbt.forEach(t),l_r=r(oke," \u2014 "),JQ=n(oke,"A",{href:!0});var Mbt=s(JQ);i_r=r(Mbt,"TFConvBertForSequenceClassification"),Mbt.forEach(t),d_r=r(oke," (ConvBERT model)"),oke.forEach(t),c_r=i(re),I9=n(re,"LI",{});var rke=s(I9);a2e=n(rke,"STRONG",{});var Ebt=s(a2e);f_r=r(Ebt,"ctrl"),Ebt.forEach(t),m_r=r(rke," \u2014 "),YQ=n(rke,"A",{href:!0});var Cbt=s(YQ);g_r=r(Cbt,"TFCTRLForSequenceClassification"),Cbt.forEach(t),h_r=r(rke," (CTRL model)"),rke.forEach(t),p_r=i(re),q9=n(re,"LI",{});var tke=s(q9);n2e=n(tke,"STRONG",{});var wbt=s(n2e);u_r=r(wbt,"deberta"),wbt.forEach(t),__r=r(tke," \u2014 "),KQ=n(tke,"A",{href:!0});var Abt=s(KQ);b_r=r(Abt,"TFDebertaForSequenceClassification"),Abt.forEach(t),v_r=r(tke," (DeBERTa model)"),tke.forEach(t),F_r=i(re),N9=n(re,"LI",{});var ake=s(N9);s2e=n(ake,"STRONG",{});var ybt=s(s2e);T_r=r(ybt,"deberta-v2"),ybt.forEach(t),M_r=r(ake," \u2014 "),ZQ=n(ake,"A",{href:!0});var Lbt=s(ZQ);E_r=r(Lbt,"TFDebertaV2ForSequenceClassification"),Lbt.forEach(t),C_r=r(ake," (DeBERTa-v2 model)"),ake.forEach(t),w_r=i(re),j9=n(re,"LI",{});var nke=s(j9);l2e=n(nke,"STRONG",{});var xbt=s(l2e);A_r=r(xbt,"distilbert"),xbt.forEach(t),y_r=r(nke," \u2014 "),eW=n(nke,"A",{href:!0});var $bt=s(eW);L_r=r($bt,"TFDistilBertForSequenceClassification"),$bt.forEach(t),x_r=r(nke," (DistilBERT model)"),nke.forEach(t),$_r=i(re),D9=n(re,"LI",{});var ske=s(D9);i2e=n(ske,"STRONG",{});var kbt=s(i2e);k_r=r(kbt,"electra"),kbt.forEach(t),S_r=r(ske," \u2014 "),oW=n(ske,"A",{href:!0});var Sbt=s(oW);R_r=r(Sbt,"TFElectraForSequenceClassification"),Sbt.forEach(t),B_r=r(ske," (ELECTRA model)"),ske.forEach(t),P_r=i(re),G9=n(re,"LI",{});var lke=s(G9);d2e=n(lke,"STRONG",{});var Rbt=s(d2e);I_r=r(Rbt,"flaubert"),Rbt.forEach(t),q_r=r(lke," \u2014 "),rW=n(lke,"A",{href:!0});var Bbt=s(rW);N_r=r(Bbt,"TFFlaubertForSequenceClassification"),Bbt.forEach(t),j_r=r(lke," (FlauBERT model)"),lke.forEach(t),D_r=i(re),O9=n(re,"LI",{});var ike=s(O9);c2e=n(ike,"STRONG",{});var Pbt=s(c2e);G_r=r(Pbt,"funnel"),Pbt.forEach(t),O_r=r(ike," \u2014 "),tW=n(ike,"A",{href:!0});var Ibt=s(tW);V_r=r(Ibt,"TFFunnelForSequenceClassification"),Ibt.forEach(t),X_r=r(ike," (Funnel Transformer model)"),ike.forEach(t),z_r=i(re),V9=n(re,"LI",{});var dke=s(V9);f2e=n(dke,"STRONG",{});var qbt=s(f2e);Q_r=r(qbt,"gpt2"),qbt.forEach(t),W_r=r(dke," \u2014 "),aW=n(dke,"A",{href:!0});var Nbt=s(aW);H_r=r(Nbt,"TFGPT2ForSequenceClassification"),Nbt.forEach(t),U_r=r(dke," (OpenAI GPT-2 model)"),dke.forEach(t),J_r=i(re),X9=n(re,"LI",{});var cke=s(X9);m2e=n(cke,"STRONG",{});var jbt=s(m2e);Y_r=r(jbt,"gptj"),jbt.forEach(t),K_r=r(cke," \u2014 "),nW=n(cke,"A",{href:!0});var Dbt=s(nW);Z_r=r(Dbt,"TFGPTJForSequenceClassification"),Dbt.forEach(t),e1r=r(cke," (GPT-J model)"),cke.forEach(t),o1r=i(re),z9=n(re,"LI",{});var fke=s(z9);g2e=n(fke,"STRONG",{});var Gbt=s(g2e);r1r=r(Gbt,"layoutlm"),Gbt.forEach(t),t1r=r(fke," \u2014 "),sW=n(fke,"A",{href:!0});var Obt=s(sW);a1r=r(Obt,"TFLayoutLMForSequenceClassification"),Obt.forEach(t),n1r=r(fke," (LayoutLM model)"),fke.forEach(t),s1r=i(re),Q9=n(re,"LI",{});var mke=s(Q9);h2e=n(mke,"STRONG",{});var Vbt=s(h2e);l1r=r(Vbt,"longformer"),Vbt.forEach(t),i1r=r(mke," \u2014 "),lW=n(mke,"A",{href:!0});var Xbt=s(lW);d1r=r(Xbt,"TFLongformerForSequenceClassification"),Xbt.forEach(t),c1r=r(mke," (Longformer model)"),mke.forEach(t),f1r=i(re),W9=n(re,"LI",{});var gke=s(W9);p2e=n(gke,"STRONG",{});var zbt=s(p2e);m1r=r(zbt,"mobilebert"),zbt.forEach(t),g1r=r(gke," \u2014 "),iW=n(gke,"A",{href:!0});var Qbt=s(iW);h1r=r(Qbt,"TFMobileBertForSequenceClassification"),Qbt.forEach(t),p1r=r(gke," (MobileBERT model)"),gke.forEach(t),u1r=i(re),H9=n(re,"LI",{});var hke=s(H9);u2e=n(hke,"STRONG",{});var Wbt=s(u2e);_1r=r(Wbt,"mpnet"),Wbt.forEach(t),b1r=r(hke," \u2014 "),dW=n(hke,"A",{href:!0});var Hbt=s(dW);v1r=r(Hbt,"TFMPNetForSequenceClassification"),Hbt.forEach(t),F1r=r(hke," (MPNet model)"),hke.forEach(t),T1r=i(re),U9=n(re,"LI",{});var pke=s(U9);_2e=n(pke,"STRONG",{});var Ubt=s(_2e);M1r=r(Ubt,"openai-gpt"),Ubt.forEach(t),E1r=r(pke," \u2014 "),cW=n(pke,"A",{href:!0});var Jbt=s(cW);C1r=r(Jbt,"TFOpenAIGPTForSequenceClassification"),Jbt.forEach(t),w1r=r(pke," (OpenAI GPT model)"),pke.forEach(t),A1r=i(re),J9=n(re,"LI",{});var uke=s(J9);b2e=n(uke,"STRONG",{});var Ybt=s(b2e);y1r=r(Ybt,"rembert"),Ybt.forEach(t),L1r=r(uke," \u2014 "),fW=n(uke,"A",{href:!0});var Kbt=s(fW);x1r=r(Kbt,"TFRemBertForSequenceClassification"),Kbt.forEach(t),$1r=r(uke," (RemBERT model)"),uke.forEach(t),k1r=i(re),Y9=n(re,"LI",{});var _ke=s(Y9);v2e=n(_ke,"STRONG",{});var Zbt=s(v2e);S1r=r(Zbt,"roberta"),Zbt.forEach(t),R1r=r(_ke," \u2014 "),mW=n(_ke,"A",{href:!0});var e2t=s(mW);B1r=r(e2t,"TFRobertaForSequenceClassification"),e2t.forEach(t),P1r=r(_ke," (RoBERTa model)"),_ke.forEach(t),I1r=i(re),K9=n(re,"LI",{});var bke=s(K9);F2e=n(bke,"STRONG",{});var o2t=s(F2e);q1r=r(o2t,"roformer"),o2t.forEach(t),N1r=r(bke," \u2014 "),gW=n(bke,"A",{href:!0});var r2t=s(gW);j1r=r(r2t,"TFRoFormerForSequenceClassification"),r2t.forEach(t),D1r=r(bke," (RoFormer model)"),bke.forEach(t),G1r=i(re),Z9=n(re,"LI",{});var vke=s(Z9);T2e=n(vke,"STRONG",{});var t2t=s(T2e);O1r=r(t2t,"tapas"),t2t.forEach(t),V1r=r(vke," \u2014 "),hW=n(vke,"A",{href:!0});var a2t=s(hW);X1r=r(a2t,"TFTapasForSequenceClassification"),a2t.forEach(t),z1r=r(vke," (TAPAS model)"),vke.forEach(t),Q1r=i(re),eM=n(re,"LI",{});var Fke=s(eM);M2e=n(Fke,"STRONG",{});var n2t=s(M2e);W1r=r(n2t,"transfo-xl"),n2t.forEach(t),H1r=r(Fke," \u2014 "),pW=n(Fke,"A",{href:!0});var s2t=s(pW);U1r=r(s2t,"TFTransfoXLForSequenceClassification"),s2t.forEach(t),J1r=r(Fke," (Transformer-XL model)"),Fke.forEach(t),Y1r=i(re),oM=n(re,"LI",{});var Tke=s(oM);E2e=n(Tke,"STRONG",{});var l2t=s(E2e);K1r=r(l2t,"xlm"),l2t.forEach(t),Z1r=r(Tke," \u2014 "),uW=n(Tke,"A",{href:!0});var i2t=s(uW);ebr=r(i2t,"TFXLMForSequenceClassification"),i2t.forEach(t),obr=r(Tke," (XLM model)"),Tke.forEach(t),rbr=i(re),rM=n(re,"LI",{});var Mke=s(rM);C2e=n(Mke,"STRONG",{});var d2t=s(C2e);tbr=r(d2t,"xlm-roberta"),d2t.forEach(t),abr=r(Mke," \u2014 "),_W=n(Mke,"A",{href:!0});var c2t=s(_W);nbr=r(c2t,"TFXLMRobertaForSequenceClassification"),c2t.forEach(t),sbr=r(Mke," (XLM-RoBERTa model)"),Mke.forEach(t),lbr=i(re),tM=n(re,"LI",{});var Eke=s(tM);w2e=n(Eke,"STRONG",{});var f2t=s(w2e);ibr=r(f2t,"xlnet"),f2t.forEach(t),dbr=r(Eke," \u2014 "),bW=n(Eke,"A",{href:!0});var m2t=s(bW);cbr=r(m2t,"TFXLNetForSequenceClassification"),m2t.forEach(t),fbr=r(Eke," (XLNet model)"),Eke.forEach(t),re.forEach(t),mbr=i(vl),T(aM.$$.fragment,vl),vl.forEach(t),bl.forEach(t),QPe=i(f),ec=n(f,"H2",{class:!0});var Jqe=s(ec);nM=n(Jqe,"A",{id:!0,class:!0,href:!0});var g2t=s(nM);A2e=n(g2t,"SPAN",{});var h2t=s(A2e);T(Vy.$$.fragment,h2t),h2t.forEach(t),g2t.forEach(t),gbr=i(Jqe),y2e=n(Jqe,"SPAN",{});var p2t=s(y2e);hbr=r(p2t,"TFAutoModelForMultipleChoice"),p2t.forEach(t),Jqe.forEach(t),WPe=i(f),ar=n(f,"DIV",{class:!0});var Fl=s(ar);T(Xy.$$.fragment,Fl),pbr=i(Fl),oc=n(Fl,"P",{});var kK=s(oc);ubr=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vW=n(kK,"A",{href:!0});var u2t=s(vW);_br=r(u2t,"from_pretrained()"),u2t.forEach(t),bbr=r(kK," class method or the "),FW=n(kK,"A",{href:!0});var _2t=s(FW);vbr=r(_2t,"from_config()"),_2t.forEach(t),Fbr=r(kK,` class
method.`),kK.forEach(t),Tbr=i(Fl),zy=n(Fl,"P",{});var Yqe=s(zy);Mbr=r(Yqe,"This class cannot be instantiated directly using "),L2e=n(Yqe,"CODE",{});var b2t=s(L2e);Ebr=r(b2t,"__init__()"),b2t.forEach(t),Cbr=r(Yqe," (throws an error)."),Yqe.forEach(t),wbr=i(Fl),$t=n(Fl,"DIV",{class:!0});var G3=s($t);T(Qy.$$.fragment,G3),Abr=i(G3),x2e=n(G3,"P",{});var v2t=s(x2e);ybr=r(v2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),v2t.forEach(t),Lbr=i(G3),rc=n(G3,"P",{});var SK=s(rc);xbr=r(SK,`Note:
Loading a model from its configuration file does `),$2e=n(SK,"STRONG",{});var F2t=s($2e);$br=r(F2t,"not"),F2t.forEach(t),kbr=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(SK,"A",{href:!0});var T2t=s(TW);Sbr=r(T2t,"from_pretrained()"),T2t.forEach(t),Rbr=r(SK," to load the model weights."),SK.forEach(t),Bbr=i(G3),T(sM.$$.fragment,G3),G3.forEach(t),Pbr=i(Fl),kr=n(Fl,"DIV",{class:!0});var Tl=s(kr);T(Wy.$$.fragment,Tl),Ibr=i(Tl),k2e=n(Tl,"P",{});var M2t=s(k2e);qbr=r(M2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),M2t.forEach(t),Nbr=i(Tl),rn=n(Tl,"P",{});var O3=s(rn);jbr=r(O3,"The model class to instantiate is selected based on the "),S2e=n(O3,"CODE",{});var E2t=s(S2e);Dbr=r(E2t,"model_type"),E2t.forEach(t),Gbr=r(O3,` property of the config object (either
passed as an argument or loaded from `),R2e=n(O3,"CODE",{});var C2t=s(R2e);Obr=r(C2t,"pretrained_model_name_or_path"),C2t.forEach(t),Vbr=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=n(O3,"CODE",{});var w2t=s(B2e);Xbr=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),zbr=r(O3,":"),O3.forEach(t),Qbr=i(Tl),pe=n(Tl,"UL",{});var _e=s(pe);lM=n(_e,"LI",{});var Cke=s(lM);P2e=n(Cke,"STRONG",{});var A2t=s(P2e);Wbr=r(A2t,"albert"),A2t.forEach(t),Hbr=r(Cke," \u2014 "),MW=n(Cke,"A",{href:!0});var y2t=s(MW);Ubr=r(y2t,"TFAlbertForMultipleChoice"),y2t.forEach(t),Jbr=r(Cke," (ALBERT model)"),Cke.forEach(t),Ybr=i(_e),iM=n(_e,"LI",{});var wke=s(iM);I2e=n(wke,"STRONG",{});var L2t=s(I2e);Kbr=r(L2t,"bert"),L2t.forEach(t),Zbr=r(wke," \u2014 "),EW=n(wke,"A",{href:!0});var x2t=s(EW);e2r=r(x2t,"TFBertForMultipleChoice"),x2t.forEach(t),o2r=r(wke," (BERT model)"),wke.forEach(t),r2r=i(_e),dM=n(_e,"LI",{});var Ake=s(dM);q2e=n(Ake,"STRONG",{});var $2t=s(q2e);t2r=r($2t,"camembert"),$2t.forEach(t),a2r=r(Ake," \u2014 "),CW=n(Ake,"A",{href:!0});var k2t=s(CW);n2r=r(k2t,"TFCamembertForMultipleChoice"),k2t.forEach(t),s2r=r(Ake," (CamemBERT model)"),Ake.forEach(t),l2r=i(_e),cM=n(_e,"LI",{});var yke=s(cM);N2e=n(yke,"STRONG",{});var S2t=s(N2e);i2r=r(S2t,"convbert"),S2t.forEach(t),d2r=r(yke," \u2014 "),wW=n(yke,"A",{href:!0});var R2t=s(wW);c2r=r(R2t,"TFConvBertForMultipleChoice"),R2t.forEach(t),f2r=r(yke," (ConvBERT model)"),yke.forEach(t),m2r=i(_e),fM=n(_e,"LI",{});var Lke=s(fM);j2e=n(Lke,"STRONG",{});var B2t=s(j2e);g2r=r(B2t,"distilbert"),B2t.forEach(t),h2r=r(Lke," \u2014 "),AW=n(Lke,"A",{href:!0});var P2t=s(AW);p2r=r(P2t,"TFDistilBertForMultipleChoice"),P2t.forEach(t),u2r=r(Lke," (DistilBERT model)"),Lke.forEach(t),_2r=i(_e),mM=n(_e,"LI",{});var xke=s(mM);D2e=n(xke,"STRONG",{});var I2t=s(D2e);b2r=r(I2t,"electra"),I2t.forEach(t),v2r=r(xke," \u2014 "),yW=n(xke,"A",{href:!0});var q2t=s(yW);F2r=r(q2t,"TFElectraForMultipleChoice"),q2t.forEach(t),T2r=r(xke," (ELECTRA model)"),xke.forEach(t),M2r=i(_e),gM=n(_e,"LI",{});var $ke=s(gM);G2e=n($ke,"STRONG",{});var N2t=s(G2e);E2r=r(N2t,"flaubert"),N2t.forEach(t),C2r=r($ke," \u2014 "),LW=n($ke,"A",{href:!0});var j2t=s(LW);w2r=r(j2t,"TFFlaubertForMultipleChoice"),j2t.forEach(t),A2r=r($ke," (FlauBERT model)"),$ke.forEach(t),y2r=i(_e),hM=n(_e,"LI",{});var kke=s(hM);O2e=n(kke,"STRONG",{});var D2t=s(O2e);L2r=r(D2t,"funnel"),D2t.forEach(t),x2r=r(kke," \u2014 "),xW=n(kke,"A",{href:!0});var G2t=s(xW);$2r=r(G2t,"TFFunnelForMultipleChoice"),G2t.forEach(t),k2r=r(kke," (Funnel Transformer model)"),kke.forEach(t),S2r=i(_e),pM=n(_e,"LI",{});var Ske=s(pM);V2e=n(Ske,"STRONG",{});var O2t=s(V2e);R2r=r(O2t,"longformer"),O2t.forEach(t),B2r=r(Ske," \u2014 "),$W=n(Ske,"A",{href:!0});var V2t=s($W);P2r=r(V2t,"TFLongformerForMultipleChoice"),V2t.forEach(t),I2r=r(Ske," (Longformer model)"),Ske.forEach(t),q2r=i(_e),uM=n(_e,"LI",{});var Rke=s(uM);X2e=n(Rke,"STRONG",{});var X2t=s(X2e);N2r=r(X2t,"mobilebert"),X2t.forEach(t),j2r=r(Rke," \u2014 "),kW=n(Rke,"A",{href:!0});var z2t=s(kW);D2r=r(z2t,"TFMobileBertForMultipleChoice"),z2t.forEach(t),G2r=r(Rke," (MobileBERT model)"),Rke.forEach(t),O2r=i(_e),_M=n(_e,"LI",{});var Bke=s(_M);z2e=n(Bke,"STRONG",{});var Q2t=s(z2e);V2r=r(Q2t,"mpnet"),Q2t.forEach(t),X2r=r(Bke," \u2014 "),SW=n(Bke,"A",{href:!0});var W2t=s(SW);z2r=r(W2t,"TFMPNetForMultipleChoice"),W2t.forEach(t),Q2r=r(Bke," (MPNet model)"),Bke.forEach(t),W2r=i(_e),bM=n(_e,"LI",{});var Pke=s(bM);Q2e=n(Pke,"STRONG",{});var H2t=s(Q2e);H2r=r(H2t,"rembert"),H2t.forEach(t),U2r=r(Pke," \u2014 "),RW=n(Pke,"A",{href:!0});var U2t=s(RW);J2r=r(U2t,"TFRemBertForMultipleChoice"),U2t.forEach(t),Y2r=r(Pke," (RemBERT model)"),Pke.forEach(t),K2r=i(_e),vM=n(_e,"LI",{});var Ike=s(vM);W2e=n(Ike,"STRONG",{});var J2t=s(W2e);Z2r=r(J2t,"roberta"),J2t.forEach(t),evr=r(Ike," \u2014 "),BW=n(Ike,"A",{href:!0});var Y2t=s(BW);ovr=r(Y2t,"TFRobertaForMultipleChoice"),Y2t.forEach(t),rvr=r(Ike," (RoBERTa model)"),Ike.forEach(t),tvr=i(_e),FM=n(_e,"LI",{});var qke=s(FM);H2e=n(qke,"STRONG",{});var K2t=s(H2e);avr=r(K2t,"roformer"),K2t.forEach(t),nvr=r(qke," \u2014 "),PW=n(qke,"A",{href:!0});var Z2t=s(PW);svr=r(Z2t,"TFRoFormerForMultipleChoice"),Z2t.forEach(t),lvr=r(qke," (RoFormer model)"),qke.forEach(t),ivr=i(_e),TM=n(_e,"LI",{});var Nke=s(TM);U2e=n(Nke,"STRONG",{});var evt=s(U2e);dvr=r(evt,"xlm"),evt.forEach(t),cvr=r(Nke," \u2014 "),IW=n(Nke,"A",{href:!0});var ovt=s(IW);fvr=r(ovt,"TFXLMForMultipleChoice"),ovt.forEach(t),mvr=r(Nke," (XLM model)"),Nke.forEach(t),gvr=i(_e),MM=n(_e,"LI",{});var jke=s(MM);J2e=n(jke,"STRONG",{});var rvt=s(J2e);hvr=r(rvt,"xlm-roberta"),rvt.forEach(t),pvr=r(jke," \u2014 "),qW=n(jke,"A",{href:!0});var tvt=s(qW);uvr=r(tvt,"TFXLMRobertaForMultipleChoice"),tvt.forEach(t),_vr=r(jke," (XLM-RoBERTa model)"),jke.forEach(t),bvr=i(_e),EM=n(_e,"LI",{});var Dke=s(EM);Y2e=n(Dke,"STRONG",{});var avt=s(Y2e);vvr=r(avt,"xlnet"),avt.forEach(t),Fvr=r(Dke," \u2014 "),NW=n(Dke,"A",{href:!0});var nvt=s(NW);Tvr=r(nvt,"TFXLNetForMultipleChoice"),nvt.forEach(t),Mvr=r(Dke," (XLNet model)"),Dke.forEach(t),_e.forEach(t),Evr=i(Tl),T(CM.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),HPe=i(f),tc=n(f,"H2",{class:!0});var Kqe=s(tc);wM=n(Kqe,"A",{id:!0,class:!0,href:!0});var svt=s(wM);K2e=n(svt,"SPAN",{});var lvt=s(K2e);T(Hy.$$.fragment,lvt),lvt.forEach(t),svt.forEach(t),Cvr=i(Kqe),Z2e=n(Kqe,"SPAN",{});var ivt=s(Z2e);wvr=r(ivt,"TFAutoModelForTableQuestionAnswering"),ivt.forEach(t),Kqe.forEach(t),UPe=i(f),nr=n(f,"DIV",{class:!0});var Ml=s(nr);T(Uy.$$.fragment,Ml),Avr=i(Ml),ac=n(Ml,"P",{});var RK=s(ac);yvr=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),jW=n(RK,"A",{href:!0});var dvt=s(jW);Lvr=r(dvt,"from_pretrained()"),dvt.forEach(t),xvr=r(RK," class method or the "),DW=n(RK,"A",{href:!0});var cvt=s(DW);$vr=r(cvt,"from_config()"),cvt.forEach(t),kvr=r(RK,` class
method.`),RK.forEach(t),Svr=i(Ml),Jy=n(Ml,"P",{});var Zqe=s(Jy);Rvr=r(Zqe,"This class cannot be instantiated directly using "),eve=n(Zqe,"CODE",{});var fvt=s(eve);Bvr=r(fvt,"__init__()"),fvt.forEach(t),Pvr=r(Zqe," (throws an error)."),Zqe.forEach(t),Ivr=i(Ml),kt=n(Ml,"DIV",{class:!0});var V3=s(kt);T(Yy.$$.fragment,V3),qvr=i(V3),ove=n(V3,"P",{});var mvt=s(ove);Nvr=r(mvt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),mvt.forEach(t),jvr=i(V3),nc=n(V3,"P",{});var BK=s(nc);Dvr=r(BK,`Note:
Loading a model from its configuration file does `),rve=n(BK,"STRONG",{});var gvt=s(rve);Gvr=r(gvt,"not"),gvt.forEach(t),Ovr=r(BK,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(BK,"A",{href:!0});var hvt=s(GW);Vvr=r(hvt,"from_pretrained()"),hvt.forEach(t),Xvr=r(BK," to load the model weights."),BK.forEach(t),zvr=i(V3),T(AM.$$.fragment,V3),V3.forEach(t),Qvr=i(Ml),Sr=n(Ml,"DIV",{class:!0});var El=s(Sr);T(Ky.$$.fragment,El),Wvr=i(El),tve=n(El,"P",{});var pvt=s(tve);Hvr=r(pvt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),pvt.forEach(t),Uvr=i(El),tn=n(El,"P",{});var X3=s(tn);Jvr=r(X3,"The model class to instantiate is selected based on the "),ave=n(X3,"CODE",{});var uvt=s(ave);Yvr=r(uvt,"model_type"),uvt.forEach(t),Kvr=r(X3,` property of the config object (either
passed as an argument or loaded from `),nve=n(X3,"CODE",{});var _vt=s(nve);Zvr=r(_vt,"pretrained_model_name_or_path"),_vt.forEach(t),eFr=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=n(X3,"CODE",{});var bvt=s(sve);oFr=r(bvt,"pretrained_model_name_or_path"),bvt.forEach(t),rFr=r(X3,":"),X3.forEach(t),tFr=i(El),lve=n(El,"UL",{});var vvt=s(lve);yM=n(vvt,"LI",{});var Gke=s(yM);ive=n(Gke,"STRONG",{});var Fvt=s(ive);aFr=r(Fvt,"tapas"),Fvt.forEach(t),nFr=r(Gke," \u2014 "),OW=n(Gke,"A",{href:!0});var Tvt=s(OW);sFr=r(Tvt,"TFTapasForQuestionAnswering"),Tvt.forEach(t),lFr=r(Gke," (TAPAS model)"),Gke.forEach(t),vvt.forEach(t),iFr=i(El),T(LM.$$.fragment,El),El.forEach(t),Ml.forEach(t),JPe=i(f),sc=n(f,"H2",{class:!0});var eNe=s(sc);xM=n(eNe,"A",{id:!0,class:!0,href:!0});var Mvt=s(xM);dve=n(Mvt,"SPAN",{});var Evt=s(dve);T(Zy.$$.fragment,Evt),Evt.forEach(t),Mvt.forEach(t),dFr=i(eNe),cve=n(eNe,"SPAN",{});var Cvt=s(cve);cFr=r(Cvt,"TFAutoModelForTokenClassification"),Cvt.forEach(t),eNe.forEach(t),YPe=i(f),sr=n(f,"DIV",{class:!0});var Cl=s(sr);T(eL.$$.fragment,Cl),fFr=i(Cl),lc=n(Cl,"P",{});var PK=s(lc);mFr=r(PK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VW=n(PK,"A",{href:!0});var wvt=s(VW);gFr=r(wvt,"from_pretrained()"),wvt.forEach(t),hFr=r(PK," class method or the "),XW=n(PK,"A",{href:!0});var Avt=s(XW);pFr=r(Avt,"from_config()"),Avt.forEach(t),uFr=r(PK,` class
method.`),PK.forEach(t),_Fr=i(Cl),oL=n(Cl,"P",{});var oNe=s(oL);bFr=r(oNe,"This class cannot be instantiated directly using "),fve=n(oNe,"CODE",{});var yvt=s(fve);vFr=r(yvt,"__init__()"),yvt.forEach(t),FFr=r(oNe," (throws an error)."),oNe.forEach(t),TFr=i(Cl),St=n(Cl,"DIV",{class:!0});var z3=s(St);T(rL.$$.fragment,z3),MFr=i(z3),mve=n(z3,"P",{});var Lvt=s(mve);EFr=r(Lvt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Lvt.forEach(t),CFr=i(z3),ic=n(z3,"P",{});var IK=s(ic);wFr=r(IK,`Note:
Loading a model from its configuration file does `),gve=n(IK,"STRONG",{});var xvt=s(gve);AFr=r(xvt,"not"),xvt.forEach(t),yFr=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=n(IK,"A",{href:!0});var $vt=s(zW);LFr=r($vt,"from_pretrained()"),$vt.forEach(t),xFr=r(IK," to load the model weights."),IK.forEach(t),$Fr=i(z3),T($M.$$.fragment,z3),z3.forEach(t),kFr=i(Cl),Rr=n(Cl,"DIV",{class:!0});var wl=s(Rr);T(tL.$$.fragment,wl),SFr=i(wl),hve=n(wl,"P",{});var kvt=s(hve);RFr=r(kvt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kvt.forEach(t),BFr=i(wl),an=n(wl,"P",{});var Q3=s(an);PFr=r(Q3,"The model class to instantiate is selected based on the "),pve=n(Q3,"CODE",{});var Svt=s(pve);IFr=r(Svt,"model_type"),Svt.forEach(t),qFr=r(Q3,` property of the config object (either
passed as an argument or loaded from `),uve=n(Q3,"CODE",{});var Rvt=s(uve);NFr=r(Rvt,"pretrained_model_name_or_path"),Rvt.forEach(t),jFr=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=n(Q3,"CODE",{});var Bvt=s(_ve);DFr=r(Bvt,"pretrained_model_name_or_path"),Bvt.forEach(t),GFr=r(Q3,":"),Q3.forEach(t),OFr=i(wl),de=n(wl,"UL",{});var me=s(de);kM=n(me,"LI",{});var Oke=s(kM);bve=n(Oke,"STRONG",{});var Pvt=s(bve);VFr=r(Pvt,"albert"),Pvt.forEach(t),XFr=r(Oke," \u2014 "),QW=n(Oke,"A",{href:!0});var Ivt=s(QW);zFr=r(Ivt,"TFAlbertForTokenClassification"),Ivt.forEach(t),QFr=r(Oke," (ALBERT model)"),Oke.forEach(t),WFr=i(me),SM=n(me,"LI",{});var Vke=s(SM);vve=n(Vke,"STRONG",{});var qvt=s(vve);HFr=r(qvt,"bert"),qvt.forEach(t),UFr=r(Vke," \u2014 "),WW=n(Vke,"A",{href:!0});var Nvt=s(WW);JFr=r(Nvt,"TFBertForTokenClassification"),Nvt.forEach(t),YFr=r(Vke," (BERT model)"),Vke.forEach(t),KFr=i(me),RM=n(me,"LI",{});var Xke=s(RM);Fve=n(Xke,"STRONG",{});var jvt=s(Fve);ZFr=r(jvt,"camembert"),jvt.forEach(t),e0r=r(Xke," \u2014 "),HW=n(Xke,"A",{href:!0});var Dvt=s(HW);o0r=r(Dvt,"TFCamembertForTokenClassification"),Dvt.forEach(t),r0r=r(Xke," (CamemBERT model)"),Xke.forEach(t),t0r=i(me),BM=n(me,"LI",{});var zke=s(BM);Tve=n(zke,"STRONG",{});var Gvt=s(Tve);a0r=r(Gvt,"convbert"),Gvt.forEach(t),n0r=r(zke," \u2014 "),UW=n(zke,"A",{href:!0});var Ovt=s(UW);s0r=r(Ovt,"TFConvBertForTokenClassification"),Ovt.forEach(t),l0r=r(zke," (ConvBERT model)"),zke.forEach(t),i0r=i(me),PM=n(me,"LI",{});var Qke=s(PM);Mve=n(Qke,"STRONG",{});var Vvt=s(Mve);d0r=r(Vvt,"deberta"),Vvt.forEach(t),c0r=r(Qke," \u2014 "),JW=n(Qke,"A",{href:!0});var Xvt=s(JW);f0r=r(Xvt,"TFDebertaForTokenClassification"),Xvt.forEach(t),m0r=r(Qke," (DeBERTa model)"),Qke.forEach(t),g0r=i(me),IM=n(me,"LI",{});var Wke=s(IM);Eve=n(Wke,"STRONG",{});var zvt=s(Eve);h0r=r(zvt,"deberta-v2"),zvt.forEach(t),p0r=r(Wke," \u2014 "),YW=n(Wke,"A",{href:!0});var Qvt=s(YW);u0r=r(Qvt,"TFDebertaV2ForTokenClassification"),Qvt.forEach(t),_0r=r(Wke," (DeBERTa-v2 model)"),Wke.forEach(t),b0r=i(me),qM=n(me,"LI",{});var Hke=s(qM);Cve=n(Hke,"STRONG",{});var Wvt=s(Cve);v0r=r(Wvt,"distilbert"),Wvt.forEach(t),F0r=r(Hke," \u2014 "),KW=n(Hke,"A",{href:!0});var Hvt=s(KW);T0r=r(Hvt,"TFDistilBertForTokenClassification"),Hvt.forEach(t),M0r=r(Hke," (DistilBERT model)"),Hke.forEach(t),E0r=i(me),NM=n(me,"LI",{});var Uke=s(NM);wve=n(Uke,"STRONG",{});var Uvt=s(wve);C0r=r(Uvt,"electra"),Uvt.forEach(t),w0r=r(Uke," \u2014 "),ZW=n(Uke,"A",{href:!0});var Jvt=s(ZW);A0r=r(Jvt,"TFElectraForTokenClassification"),Jvt.forEach(t),y0r=r(Uke," (ELECTRA model)"),Uke.forEach(t),L0r=i(me),jM=n(me,"LI",{});var Jke=s(jM);Ave=n(Jke,"STRONG",{});var Yvt=s(Ave);x0r=r(Yvt,"flaubert"),Yvt.forEach(t),$0r=r(Jke," \u2014 "),eH=n(Jke,"A",{href:!0});var Kvt=s(eH);k0r=r(Kvt,"TFFlaubertForTokenClassification"),Kvt.forEach(t),S0r=r(Jke," (FlauBERT model)"),Jke.forEach(t),R0r=i(me),DM=n(me,"LI",{});var Yke=s(DM);yve=n(Yke,"STRONG",{});var Zvt=s(yve);B0r=r(Zvt,"funnel"),Zvt.forEach(t),P0r=r(Yke," \u2014 "),oH=n(Yke,"A",{href:!0});var eFt=s(oH);I0r=r(eFt,"TFFunnelForTokenClassification"),eFt.forEach(t),q0r=r(Yke," (Funnel Transformer model)"),Yke.forEach(t),N0r=i(me),GM=n(me,"LI",{});var Kke=s(GM);Lve=n(Kke,"STRONG",{});var oFt=s(Lve);j0r=r(oFt,"layoutlm"),oFt.forEach(t),D0r=r(Kke," \u2014 "),rH=n(Kke,"A",{href:!0});var rFt=s(rH);G0r=r(rFt,"TFLayoutLMForTokenClassification"),rFt.forEach(t),O0r=r(Kke," (LayoutLM model)"),Kke.forEach(t),V0r=i(me),OM=n(me,"LI",{});var Zke=s(OM);xve=n(Zke,"STRONG",{});var tFt=s(xve);X0r=r(tFt,"longformer"),tFt.forEach(t),z0r=r(Zke," \u2014 "),tH=n(Zke,"A",{href:!0});var aFt=s(tH);Q0r=r(aFt,"TFLongformerForTokenClassification"),aFt.forEach(t),W0r=r(Zke," (Longformer model)"),Zke.forEach(t),H0r=i(me),VM=n(me,"LI",{});var eSe=s(VM);$ve=n(eSe,"STRONG",{});var nFt=s($ve);U0r=r(nFt,"mobilebert"),nFt.forEach(t),J0r=r(eSe," \u2014 "),aH=n(eSe,"A",{href:!0});var sFt=s(aH);Y0r=r(sFt,"TFMobileBertForTokenClassification"),sFt.forEach(t),K0r=r(eSe," (MobileBERT model)"),eSe.forEach(t),Z0r=i(me),XM=n(me,"LI",{});var oSe=s(XM);kve=n(oSe,"STRONG",{});var lFt=s(kve);eTr=r(lFt,"mpnet"),lFt.forEach(t),oTr=r(oSe," \u2014 "),nH=n(oSe,"A",{href:!0});var iFt=s(nH);rTr=r(iFt,"TFMPNetForTokenClassification"),iFt.forEach(t),tTr=r(oSe," (MPNet model)"),oSe.forEach(t),aTr=i(me),zM=n(me,"LI",{});var rSe=s(zM);Sve=n(rSe,"STRONG",{});var dFt=s(Sve);nTr=r(dFt,"rembert"),dFt.forEach(t),sTr=r(rSe," \u2014 "),sH=n(rSe,"A",{href:!0});var cFt=s(sH);lTr=r(cFt,"TFRemBertForTokenClassification"),cFt.forEach(t),iTr=r(rSe," (RemBERT model)"),rSe.forEach(t),dTr=i(me),QM=n(me,"LI",{});var tSe=s(QM);Rve=n(tSe,"STRONG",{});var fFt=s(Rve);cTr=r(fFt,"roberta"),fFt.forEach(t),fTr=r(tSe," \u2014 "),lH=n(tSe,"A",{href:!0});var mFt=s(lH);mTr=r(mFt,"TFRobertaForTokenClassification"),mFt.forEach(t),gTr=r(tSe," (RoBERTa model)"),tSe.forEach(t),hTr=i(me),WM=n(me,"LI",{});var aSe=s(WM);Bve=n(aSe,"STRONG",{});var gFt=s(Bve);pTr=r(gFt,"roformer"),gFt.forEach(t),uTr=r(aSe," \u2014 "),iH=n(aSe,"A",{href:!0});var hFt=s(iH);_Tr=r(hFt,"TFRoFormerForTokenClassification"),hFt.forEach(t),bTr=r(aSe," (RoFormer model)"),aSe.forEach(t),vTr=i(me),HM=n(me,"LI",{});var nSe=s(HM);Pve=n(nSe,"STRONG",{});var pFt=s(Pve);FTr=r(pFt,"xlm"),pFt.forEach(t),TTr=r(nSe," \u2014 "),dH=n(nSe,"A",{href:!0});var uFt=s(dH);MTr=r(uFt,"TFXLMForTokenClassification"),uFt.forEach(t),ETr=r(nSe," (XLM model)"),nSe.forEach(t),CTr=i(me),UM=n(me,"LI",{});var sSe=s(UM);Ive=n(sSe,"STRONG",{});var _Ft=s(Ive);wTr=r(_Ft,"xlm-roberta"),_Ft.forEach(t),ATr=r(sSe," \u2014 "),cH=n(sSe,"A",{href:!0});var bFt=s(cH);yTr=r(bFt,"TFXLMRobertaForTokenClassification"),bFt.forEach(t),LTr=r(sSe," (XLM-RoBERTa model)"),sSe.forEach(t),xTr=i(me),JM=n(me,"LI",{});var lSe=s(JM);qve=n(lSe,"STRONG",{});var vFt=s(qve);$Tr=r(vFt,"xlnet"),vFt.forEach(t),kTr=r(lSe," \u2014 "),fH=n(lSe,"A",{href:!0});var FFt=s(fH);STr=r(FFt,"TFXLNetForTokenClassification"),FFt.forEach(t),RTr=r(lSe," (XLNet model)"),lSe.forEach(t),me.forEach(t),BTr=i(wl),T(YM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),KPe=i(f),dc=n(f,"H2",{class:!0});var rNe=s(dc);KM=n(rNe,"A",{id:!0,class:!0,href:!0});var TFt=s(KM);Nve=n(TFt,"SPAN",{});var MFt=s(Nve);T(aL.$$.fragment,MFt),MFt.forEach(t),TFt.forEach(t),PTr=i(rNe),jve=n(rNe,"SPAN",{});var EFt=s(jve);ITr=r(EFt,"TFAutoModelForQuestionAnswering"),EFt.forEach(t),rNe.forEach(t),ZPe=i(f),lr=n(f,"DIV",{class:!0});var Al=s(lr);T(nL.$$.fragment,Al),qTr=i(Al),cc=n(Al,"P",{});var qK=s(cc);NTr=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mH=n(qK,"A",{href:!0});var CFt=s(mH);jTr=r(CFt,"from_pretrained()"),CFt.forEach(t),DTr=r(qK," class method or the "),gH=n(qK,"A",{href:!0});var wFt=s(gH);GTr=r(wFt,"from_config()"),wFt.forEach(t),OTr=r(qK,` class
method.`),qK.forEach(t),VTr=i(Al),sL=n(Al,"P",{});var tNe=s(sL);XTr=r(tNe,"This class cannot be instantiated directly using "),Dve=n(tNe,"CODE",{});var AFt=s(Dve);zTr=r(AFt,"__init__()"),AFt.forEach(t),QTr=r(tNe," (throws an error)."),tNe.forEach(t),WTr=i(Al),Rt=n(Al,"DIV",{class:!0});var W3=s(Rt);T(lL.$$.fragment,W3),HTr=i(W3),Gve=n(W3,"P",{});var yFt=s(Gve);UTr=r(yFt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yFt.forEach(t),JTr=i(W3),fc=n(W3,"P",{});var NK=s(fc);YTr=r(NK,`Note:
Loading a model from its configuration file does `),Ove=n(NK,"STRONG",{});var LFt=s(Ove);KTr=r(LFt,"not"),LFt.forEach(t),ZTr=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(NK,"A",{href:!0});var xFt=s(hH);e7r=r(xFt,"from_pretrained()"),xFt.forEach(t),o7r=r(NK," to load the model weights."),NK.forEach(t),r7r=i(W3),T(ZM.$$.fragment,W3),W3.forEach(t),t7r=i(Al),Br=n(Al,"DIV",{class:!0});var yl=s(Br);T(iL.$$.fragment,yl),a7r=i(yl),Vve=n(yl,"P",{});var $Ft=s(Vve);n7r=r($Ft,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$Ft.forEach(t),s7r=i(yl),nn=n(yl,"P",{});var H3=s(nn);l7r=r(H3,"The model class to instantiate is selected based on the "),Xve=n(H3,"CODE",{});var kFt=s(Xve);i7r=r(kFt,"model_type"),kFt.forEach(t),d7r=r(H3,` property of the config object (either
passed as an argument or loaded from `),zve=n(H3,"CODE",{});var SFt=s(zve);c7r=r(SFt,"pretrained_model_name_or_path"),SFt.forEach(t),f7r=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=n(H3,"CODE",{});var RFt=s(Qve);m7r=r(RFt,"pretrained_model_name_or_path"),RFt.forEach(t),g7r=r(H3,":"),H3.forEach(t),h7r=i(yl),ce=n(yl,"UL",{});var ge=s(ce);e4=n(ge,"LI",{});var iSe=s(e4);Wve=n(iSe,"STRONG",{});var BFt=s(Wve);p7r=r(BFt,"albert"),BFt.forEach(t),u7r=r(iSe," \u2014 "),pH=n(iSe,"A",{href:!0});var PFt=s(pH);_7r=r(PFt,"TFAlbertForQuestionAnswering"),PFt.forEach(t),b7r=r(iSe," (ALBERT model)"),iSe.forEach(t),v7r=i(ge),o4=n(ge,"LI",{});var dSe=s(o4);Hve=n(dSe,"STRONG",{});var IFt=s(Hve);F7r=r(IFt,"bert"),IFt.forEach(t),T7r=r(dSe," \u2014 "),uH=n(dSe,"A",{href:!0});var qFt=s(uH);M7r=r(qFt,"TFBertForQuestionAnswering"),qFt.forEach(t),E7r=r(dSe," (BERT model)"),dSe.forEach(t),C7r=i(ge),r4=n(ge,"LI",{});var cSe=s(r4);Uve=n(cSe,"STRONG",{});var NFt=s(Uve);w7r=r(NFt,"camembert"),NFt.forEach(t),A7r=r(cSe," \u2014 "),_H=n(cSe,"A",{href:!0});var jFt=s(_H);y7r=r(jFt,"TFCamembertForQuestionAnswering"),jFt.forEach(t),L7r=r(cSe," (CamemBERT model)"),cSe.forEach(t),x7r=i(ge),t4=n(ge,"LI",{});var fSe=s(t4);Jve=n(fSe,"STRONG",{});var DFt=s(Jve);$7r=r(DFt,"convbert"),DFt.forEach(t),k7r=r(fSe," \u2014 "),bH=n(fSe,"A",{href:!0});var GFt=s(bH);S7r=r(GFt,"TFConvBertForQuestionAnswering"),GFt.forEach(t),R7r=r(fSe," (ConvBERT model)"),fSe.forEach(t),B7r=i(ge),a4=n(ge,"LI",{});var mSe=s(a4);Yve=n(mSe,"STRONG",{});var OFt=s(Yve);P7r=r(OFt,"deberta"),OFt.forEach(t),I7r=r(mSe," \u2014 "),vH=n(mSe,"A",{href:!0});var VFt=s(vH);q7r=r(VFt,"TFDebertaForQuestionAnswering"),VFt.forEach(t),N7r=r(mSe," (DeBERTa model)"),mSe.forEach(t),j7r=i(ge),n4=n(ge,"LI",{});var gSe=s(n4);Kve=n(gSe,"STRONG",{});var XFt=s(Kve);D7r=r(XFt,"deberta-v2"),XFt.forEach(t),G7r=r(gSe," \u2014 "),FH=n(gSe,"A",{href:!0});var zFt=s(FH);O7r=r(zFt,"TFDebertaV2ForQuestionAnswering"),zFt.forEach(t),V7r=r(gSe," (DeBERTa-v2 model)"),gSe.forEach(t),X7r=i(ge),s4=n(ge,"LI",{});var hSe=s(s4);Zve=n(hSe,"STRONG",{});var QFt=s(Zve);z7r=r(QFt,"distilbert"),QFt.forEach(t),Q7r=r(hSe," \u2014 "),TH=n(hSe,"A",{href:!0});var WFt=s(TH);W7r=r(WFt,"TFDistilBertForQuestionAnswering"),WFt.forEach(t),H7r=r(hSe," (DistilBERT model)"),hSe.forEach(t),U7r=i(ge),l4=n(ge,"LI",{});var pSe=s(l4);eFe=n(pSe,"STRONG",{});var HFt=s(eFe);J7r=r(HFt,"electra"),HFt.forEach(t),Y7r=r(pSe," \u2014 "),MH=n(pSe,"A",{href:!0});var UFt=s(MH);K7r=r(UFt,"TFElectraForQuestionAnswering"),UFt.forEach(t),Z7r=r(pSe," (ELECTRA model)"),pSe.forEach(t),e9r=i(ge),i4=n(ge,"LI",{});var uSe=s(i4);oFe=n(uSe,"STRONG",{});var JFt=s(oFe);o9r=r(JFt,"flaubert"),JFt.forEach(t),r9r=r(uSe," \u2014 "),EH=n(uSe,"A",{href:!0});var YFt=s(EH);t9r=r(YFt,"TFFlaubertForQuestionAnsweringSimple"),YFt.forEach(t),a9r=r(uSe," (FlauBERT model)"),uSe.forEach(t),n9r=i(ge),d4=n(ge,"LI",{});var _Se=s(d4);rFe=n(_Se,"STRONG",{});var KFt=s(rFe);s9r=r(KFt,"funnel"),KFt.forEach(t),l9r=r(_Se," \u2014 "),CH=n(_Se,"A",{href:!0});var ZFt=s(CH);i9r=r(ZFt,"TFFunnelForQuestionAnswering"),ZFt.forEach(t),d9r=r(_Se," (Funnel Transformer model)"),_Se.forEach(t),c9r=i(ge),c4=n(ge,"LI",{});var bSe=s(c4);tFe=n(bSe,"STRONG",{});var e0t=s(tFe);f9r=r(e0t,"gptj"),e0t.forEach(t),m9r=r(bSe," \u2014 "),wH=n(bSe,"A",{href:!0});var o0t=s(wH);g9r=r(o0t,"TFGPTJForQuestionAnswering"),o0t.forEach(t),h9r=r(bSe," (GPT-J model)"),bSe.forEach(t),p9r=i(ge),f4=n(ge,"LI",{});var vSe=s(f4);aFe=n(vSe,"STRONG",{});var r0t=s(aFe);u9r=r(r0t,"longformer"),r0t.forEach(t),_9r=r(vSe," \u2014 "),AH=n(vSe,"A",{href:!0});var t0t=s(AH);b9r=r(t0t,"TFLongformerForQuestionAnswering"),t0t.forEach(t),v9r=r(vSe," (Longformer model)"),vSe.forEach(t),F9r=i(ge),m4=n(ge,"LI",{});var FSe=s(m4);nFe=n(FSe,"STRONG",{});var a0t=s(nFe);T9r=r(a0t,"mobilebert"),a0t.forEach(t),M9r=r(FSe," \u2014 "),yH=n(FSe,"A",{href:!0});var n0t=s(yH);E9r=r(n0t,"TFMobileBertForQuestionAnswering"),n0t.forEach(t),C9r=r(FSe," (MobileBERT model)"),FSe.forEach(t),w9r=i(ge),g4=n(ge,"LI",{});var TSe=s(g4);sFe=n(TSe,"STRONG",{});var s0t=s(sFe);A9r=r(s0t,"mpnet"),s0t.forEach(t),y9r=r(TSe," \u2014 "),LH=n(TSe,"A",{href:!0});var l0t=s(LH);L9r=r(l0t,"TFMPNetForQuestionAnswering"),l0t.forEach(t),x9r=r(TSe," (MPNet model)"),TSe.forEach(t),$9r=i(ge),h4=n(ge,"LI",{});var MSe=s(h4);lFe=n(MSe,"STRONG",{});var i0t=s(lFe);k9r=r(i0t,"rembert"),i0t.forEach(t),S9r=r(MSe," \u2014 "),xH=n(MSe,"A",{href:!0});var d0t=s(xH);R9r=r(d0t,"TFRemBertForQuestionAnswering"),d0t.forEach(t),B9r=r(MSe," (RemBERT model)"),MSe.forEach(t),P9r=i(ge),p4=n(ge,"LI",{});var ESe=s(p4);iFe=n(ESe,"STRONG",{});var c0t=s(iFe);I9r=r(c0t,"roberta"),c0t.forEach(t),q9r=r(ESe," \u2014 "),$H=n(ESe,"A",{href:!0});var f0t=s($H);N9r=r(f0t,"TFRobertaForQuestionAnswering"),f0t.forEach(t),j9r=r(ESe," (RoBERTa model)"),ESe.forEach(t),D9r=i(ge),u4=n(ge,"LI",{});var CSe=s(u4);dFe=n(CSe,"STRONG",{});var m0t=s(dFe);G9r=r(m0t,"roformer"),m0t.forEach(t),O9r=r(CSe," \u2014 "),kH=n(CSe,"A",{href:!0});var g0t=s(kH);V9r=r(g0t,"TFRoFormerForQuestionAnswering"),g0t.forEach(t),X9r=r(CSe," (RoFormer model)"),CSe.forEach(t),z9r=i(ge),_4=n(ge,"LI",{});var wSe=s(_4);cFe=n(wSe,"STRONG",{});var h0t=s(cFe);Q9r=r(h0t,"xlm"),h0t.forEach(t),W9r=r(wSe," \u2014 "),SH=n(wSe,"A",{href:!0});var p0t=s(SH);H9r=r(p0t,"TFXLMForQuestionAnsweringSimple"),p0t.forEach(t),U9r=r(wSe," (XLM model)"),wSe.forEach(t),J9r=i(ge),b4=n(ge,"LI",{});var ASe=s(b4);fFe=n(ASe,"STRONG",{});var u0t=s(fFe);Y9r=r(u0t,"xlm-roberta"),u0t.forEach(t),K9r=r(ASe," \u2014 "),RH=n(ASe,"A",{href:!0});var _0t=s(RH);Z9r=r(_0t,"TFXLMRobertaForQuestionAnswering"),_0t.forEach(t),eMr=r(ASe," (XLM-RoBERTa model)"),ASe.forEach(t),oMr=i(ge),v4=n(ge,"LI",{});var ySe=s(v4);mFe=n(ySe,"STRONG",{});var b0t=s(mFe);rMr=r(b0t,"xlnet"),b0t.forEach(t),tMr=r(ySe," \u2014 "),BH=n(ySe,"A",{href:!0});var v0t=s(BH);aMr=r(v0t,"TFXLNetForQuestionAnsweringSimple"),v0t.forEach(t),nMr=r(ySe," (XLNet model)"),ySe.forEach(t),ge.forEach(t),sMr=i(yl),T(F4.$$.fragment,yl),yl.forEach(t),Al.forEach(t),eIe=i(f),mc=n(f,"H2",{class:!0});var aNe=s(mc);T4=n(aNe,"A",{id:!0,class:!0,href:!0});var F0t=s(T4);gFe=n(F0t,"SPAN",{});var T0t=s(gFe);T(dL.$$.fragment,T0t),T0t.forEach(t),F0t.forEach(t),lMr=i(aNe),hFe=n(aNe,"SPAN",{});var M0t=s(hFe);iMr=r(M0t,"TFAutoModelForVision2Seq"),M0t.forEach(t),aNe.forEach(t),oIe=i(f),ir=n(f,"DIV",{class:!0});var Ll=s(ir);T(cL.$$.fragment,Ll),dMr=i(Ll),gc=n(Ll,"P",{});var jK=s(gc);cMr=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PH=n(jK,"A",{href:!0});var E0t=s(PH);fMr=r(E0t,"from_pretrained()"),E0t.forEach(t),mMr=r(jK," class method or the "),IH=n(jK,"A",{href:!0});var C0t=s(IH);gMr=r(C0t,"from_config()"),C0t.forEach(t),hMr=r(jK,` class
method.`),jK.forEach(t),pMr=i(Ll),fL=n(Ll,"P",{});var nNe=s(fL);uMr=r(nNe,"This class cannot be instantiated directly using "),pFe=n(nNe,"CODE",{});var w0t=s(pFe);_Mr=r(w0t,"__init__()"),w0t.forEach(t),bMr=r(nNe," (throws an error)."),nNe.forEach(t),vMr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var U3=s(Bt);T(mL.$$.fragment,U3),FMr=i(U3),uFe=n(U3,"P",{});var A0t=s(uFe);TMr=r(A0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),A0t.forEach(t),MMr=i(U3),hc=n(U3,"P",{});var DK=s(hc);EMr=r(DK,`Note:
Loading a model from its configuration file does `),_Fe=n(DK,"STRONG",{});var y0t=s(_Fe);CMr=r(y0t,"not"),y0t.forEach(t),wMr=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=n(DK,"A",{href:!0});var L0t=s(qH);AMr=r(L0t,"from_pretrained()"),L0t.forEach(t),yMr=r(DK," to load the model weights."),DK.forEach(t),LMr=i(U3),T(M4.$$.fragment,U3),U3.forEach(t),xMr=i(Ll),Pr=n(Ll,"DIV",{class:!0});var xl=s(Pr);T(gL.$$.fragment,xl),$Mr=i(xl),bFe=n(xl,"P",{});var x0t=s(bFe);kMr=r(x0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),x0t.forEach(t),SMr=i(xl),sn=n(xl,"P",{});var J3=s(sn);RMr=r(J3,"The model class to instantiate is selected based on the "),vFe=n(J3,"CODE",{});var $0t=s(vFe);BMr=r($0t,"model_type"),$0t.forEach(t),PMr=r(J3,` property of the config object (either
passed as an argument or loaded from `),FFe=n(J3,"CODE",{});var k0t=s(FFe);IMr=r(k0t,"pretrained_model_name_or_path"),k0t.forEach(t),qMr=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=n(J3,"CODE",{});var S0t=s(TFe);NMr=r(S0t,"pretrained_model_name_or_path"),S0t.forEach(t),jMr=r(J3,":"),J3.forEach(t),DMr=i(xl),MFe=n(xl,"UL",{});var R0t=s(MFe);E4=n(R0t,"LI",{});var LSe=s(E4);EFe=n(LSe,"STRONG",{});var B0t=s(EFe);GMr=r(B0t,"vision-encoder-decoder"),B0t.forEach(t),OMr=r(LSe," \u2014 "),NH=n(LSe,"A",{href:!0});var P0t=s(NH);VMr=r(P0t,"TFVisionEncoderDecoderModel"),P0t.forEach(t),XMr=r(LSe," (Vision Encoder decoder model)"),LSe.forEach(t),R0t.forEach(t),zMr=i(xl),T(C4.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),rIe=i(f),pc=n(f,"H2",{class:!0});var sNe=s(pc);w4=n(sNe,"A",{id:!0,class:!0,href:!0});var I0t=s(w4);CFe=n(I0t,"SPAN",{});var q0t=s(CFe);T(hL.$$.fragment,q0t),q0t.forEach(t),I0t.forEach(t),QMr=i(sNe),wFe=n(sNe,"SPAN",{});var N0t=s(wFe);WMr=r(N0t,"TFAutoModelForSpeechSeq2Seq"),N0t.forEach(t),sNe.forEach(t),tIe=i(f),dr=n(f,"DIV",{class:!0});var $l=s(dr);T(pL.$$.fragment,$l),HMr=i($l),uc=n($l,"P",{});var GK=s(uc);UMr=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jH=n(GK,"A",{href:!0});var j0t=s(jH);JMr=r(j0t,"from_pretrained()"),j0t.forEach(t),YMr=r(GK," class method or the "),DH=n(GK,"A",{href:!0});var D0t=s(DH);KMr=r(D0t,"from_config()"),D0t.forEach(t),ZMr=r(GK,` class
method.`),GK.forEach(t),e4r=i($l),uL=n($l,"P",{});var lNe=s(uL);o4r=r(lNe,"This class cannot be instantiated directly using "),AFe=n(lNe,"CODE",{});var G0t=s(AFe);r4r=r(G0t,"__init__()"),G0t.forEach(t),t4r=r(lNe," (throws an error)."),lNe.forEach(t),a4r=i($l),Pt=n($l,"DIV",{class:!0});var Y3=s(Pt);T(_L.$$.fragment,Y3),n4r=i(Y3),yFe=n(Y3,"P",{});var O0t=s(yFe);s4r=r(O0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),O0t.forEach(t),l4r=i(Y3),_c=n(Y3,"P",{});var OK=s(_c);i4r=r(OK,`Note:
Loading a model from its configuration file does `),LFe=n(OK,"STRONG",{});var V0t=s(LFe);d4r=r(V0t,"not"),V0t.forEach(t),c4r=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=n(OK,"A",{href:!0});var X0t=s(GH);f4r=r(X0t,"from_pretrained()"),X0t.forEach(t),m4r=r(OK," to load the model weights."),OK.forEach(t),g4r=i(Y3),T(A4.$$.fragment,Y3),Y3.forEach(t),h4r=i($l),Ir=n($l,"DIV",{class:!0});var kl=s(Ir);T(bL.$$.fragment,kl),p4r=i(kl),xFe=n(kl,"P",{});var z0t=s(xFe);u4r=r(z0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),z0t.forEach(t),_4r=i(kl),ln=n(kl,"P",{});var K3=s(ln);b4r=r(K3,"The model class to instantiate is selected based on the "),$Fe=n(K3,"CODE",{});var Q0t=s($Fe);v4r=r(Q0t,"model_type"),Q0t.forEach(t),F4r=r(K3,` property of the config object (either
passed as an argument or loaded from `),kFe=n(K3,"CODE",{});var W0t=s(kFe);T4r=r(W0t,"pretrained_model_name_or_path"),W0t.forEach(t),M4r=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=n(K3,"CODE",{});var H0t=s(SFe);E4r=r(H0t,"pretrained_model_name_or_path"),H0t.forEach(t),C4r=r(K3,":"),K3.forEach(t),w4r=i(kl),RFe=n(kl,"UL",{});var U0t=s(RFe);y4=n(U0t,"LI",{});var xSe=s(y4);BFe=n(xSe,"STRONG",{});var J0t=s(BFe);A4r=r(J0t,"speech_to_text"),J0t.forEach(t),y4r=r(xSe," \u2014 "),OH=n(xSe,"A",{href:!0});var Y0t=s(OH);L4r=r(Y0t,"TFSpeech2TextForConditionalGeneration"),Y0t.forEach(t),x4r=r(xSe," (Speech2Text model)"),xSe.forEach(t),U0t.forEach(t),$4r=i(kl),T(L4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),aIe=i(f),bc=n(f,"H2",{class:!0});var iNe=s(bc);x4=n(iNe,"A",{id:!0,class:!0,href:!0});var K0t=s(x4);PFe=n(K0t,"SPAN",{});var Z0t=s(PFe);T(vL.$$.fragment,Z0t),Z0t.forEach(t),K0t.forEach(t),k4r=i(iNe),IFe=n(iNe,"SPAN",{});var eTt=s(IFe);S4r=r(eTt,"FlaxAutoModel"),eTt.forEach(t),iNe.forEach(t),nIe=i(f),cr=n(f,"DIV",{class:!0});var Sl=s(cr);T(FL.$$.fragment,Sl),R4r=i(Sl),vc=n(Sl,"P",{});var VK=s(vc);B4r=r(VK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VH=n(VK,"A",{href:!0});var oTt=s(VH);P4r=r(oTt,"from_pretrained()"),oTt.forEach(t),I4r=r(VK," class method or the "),XH=n(VK,"A",{href:!0});var rTt=s(XH);q4r=r(rTt,"from_config()"),rTt.forEach(t),N4r=r(VK,` class
method.`),VK.forEach(t),j4r=i(Sl),TL=n(Sl,"P",{});var dNe=s(TL);D4r=r(dNe,"This class cannot be instantiated directly using "),qFe=n(dNe,"CODE",{});var tTt=s(qFe);G4r=r(tTt,"__init__()"),tTt.forEach(t),O4r=r(dNe," (throws an error)."),dNe.forEach(t),V4r=i(Sl),It=n(Sl,"DIV",{class:!0});var Z3=s(It);T(ML.$$.fragment,Z3),X4r=i(Z3),NFe=n(Z3,"P",{});var aTt=s(NFe);z4r=r(aTt,"Instantiates one of the base model classes of the library from a configuration."),aTt.forEach(t),Q4r=i(Z3),Fc=n(Z3,"P",{});var XK=s(Fc);W4r=r(XK,`Note:
Loading a model from its configuration file does `),jFe=n(XK,"STRONG",{});var nTt=s(jFe);H4r=r(nTt,"not"),nTt.forEach(t),U4r=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=n(XK,"A",{href:!0});var sTt=s(zH);J4r=r(sTt,"from_pretrained()"),sTt.forEach(t),Y4r=r(XK," to load the model weights."),XK.forEach(t),K4r=i(Z3),T($4.$$.fragment,Z3),Z3.forEach(t),Z4r=i(Sl),qr=n(Sl,"DIV",{class:!0});var Rl=s(qr);T(EL.$$.fragment,Rl),eEr=i(Rl),DFe=n(Rl,"P",{});var lTt=s(DFe);oEr=r(lTt,"Instantiate one of the base model classes of the library from a pretrained model."),lTt.forEach(t),rEr=i(Rl),dn=n(Rl,"P",{});var ew=s(dn);tEr=r(ew,"The model class to instantiate is selected based on the "),GFe=n(ew,"CODE",{});var iTt=s(GFe);aEr=r(iTt,"model_type"),iTt.forEach(t),nEr=r(ew,` property of the config object (either
passed as an argument or loaded from `),OFe=n(ew,"CODE",{});var dTt=s(OFe);sEr=r(dTt,"pretrained_model_name_or_path"),dTt.forEach(t),lEr=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=n(ew,"CODE",{});var cTt=s(VFe);iEr=r(cTt,"pretrained_model_name_or_path"),cTt.forEach(t),dEr=r(ew,":"),ew.forEach(t),cEr=i(Rl),oe=n(Rl,"UL",{});var ae=s(oe);k4=n(ae,"LI",{});var $Se=s(k4);XFe=n($Se,"STRONG",{});var fTt=s(XFe);fEr=r(fTt,"albert"),fTt.forEach(t),mEr=r($Se," \u2014 "),QH=n($Se,"A",{href:!0});var mTt=s(QH);gEr=r(mTt,"FlaxAlbertModel"),mTt.forEach(t),hEr=r($Se," (ALBERT model)"),$Se.forEach(t),pEr=i(ae),S4=n(ae,"LI",{});var kSe=s(S4);zFe=n(kSe,"STRONG",{});var gTt=s(zFe);uEr=r(gTt,"bart"),gTt.forEach(t),_Er=r(kSe," \u2014 "),WH=n(kSe,"A",{href:!0});var hTt=s(WH);bEr=r(hTt,"FlaxBartModel"),hTt.forEach(t),vEr=r(kSe," (BART model)"),kSe.forEach(t),FEr=i(ae),R4=n(ae,"LI",{});var SSe=s(R4);QFe=n(SSe,"STRONG",{});var pTt=s(QFe);TEr=r(pTt,"beit"),pTt.forEach(t),MEr=r(SSe," \u2014 "),HH=n(SSe,"A",{href:!0});var uTt=s(HH);EEr=r(uTt,"FlaxBeitModel"),uTt.forEach(t),CEr=r(SSe," (BEiT model)"),SSe.forEach(t),wEr=i(ae),B4=n(ae,"LI",{});var RSe=s(B4);WFe=n(RSe,"STRONG",{});var _Tt=s(WFe);AEr=r(_Tt,"bert"),_Tt.forEach(t),yEr=r(RSe," \u2014 "),UH=n(RSe,"A",{href:!0});var bTt=s(UH);LEr=r(bTt,"FlaxBertModel"),bTt.forEach(t),xEr=r(RSe," (BERT model)"),RSe.forEach(t),$Er=i(ae),P4=n(ae,"LI",{});var BSe=s(P4);HFe=n(BSe,"STRONG",{});var vTt=s(HFe);kEr=r(vTt,"big_bird"),vTt.forEach(t),SEr=r(BSe," \u2014 "),JH=n(BSe,"A",{href:!0});var FTt=s(JH);REr=r(FTt,"FlaxBigBirdModel"),FTt.forEach(t),BEr=r(BSe," (BigBird model)"),BSe.forEach(t),PEr=i(ae),I4=n(ae,"LI",{});var PSe=s(I4);UFe=n(PSe,"STRONG",{});var TTt=s(UFe);IEr=r(TTt,"blenderbot"),TTt.forEach(t),qEr=r(PSe," \u2014 "),YH=n(PSe,"A",{href:!0});var MTt=s(YH);NEr=r(MTt,"FlaxBlenderbotModel"),MTt.forEach(t),jEr=r(PSe," (Blenderbot model)"),PSe.forEach(t),DEr=i(ae),q4=n(ae,"LI",{});var ISe=s(q4);JFe=n(ISe,"STRONG",{});var ETt=s(JFe);GEr=r(ETt,"blenderbot-small"),ETt.forEach(t),OEr=r(ISe," \u2014 "),KH=n(ISe,"A",{href:!0});var CTt=s(KH);VEr=r(CTt,"FlaxBlenderbotSmallModel"),CTt.forEach(t),XEr=r(ISe," (BlenderbotSmall model)"),ISe.forEach(t),zEr=i(ae),N4=n(ae,"LI",{});var qSe=s(N4);YFe=n(qSe,"STRONG",{});var wTt=s(YFe);QEr=r(wTt,"clip"),wTt.forEach(t),WEr=r(qSe," \u2014 "),ZH=n(qSe,"A",{href:!0});var ATt=s(ZH);HEr=r(ATt,"FlaxCLIPModel"),ATt.forEach(t),UEr=r(qSe," (CLIP model)"),qSe.forEach(t),JEr=i(ae),j4=n(ae,"LI",{});var NSe=s(j4);KFe=n(NSe,"STRONG",{});var yTt=s(KFe);YEr=r(yTt,"distilbert"),yTt.forEach(t),KEr=r(NSe," \u2014 "),eU=n(NSe,"A",{href:!0});var LTt=s(eU);ZEr=r(LTt,"FlaxDistilBertModel"),LTt.forEach(t),e5r=r(NSe," (DistilBERT model)"),NSe.forEach(t),o5r=i(ae),D4=n(ae,"LI",{});var jSe=s(D4);ZFe=n(jSe,"STRONG",{});var xTt=s(ZFe);r5r=r(xTt,"electra"),xTt.forEach(t),t5r=r(jSe," \u2014 "),oU=n(jSe,"A",{href:!0});var $Tt=s(oU);a5r=r($Tt,"FlaxElectraModel"),$Tt.forEach(t),n5r=r(jSe," (ELECTRA model)"),jSe.forEach(t),s5r=i(ae),G4=n(ae,"LI",{});var DSe=s(G4);e0e=n(DSe,"STRONG",{});var kTt=s(e0e);l5r=r(kTt,"gpt2"),kTt.forEach(t),i5r=r(DSe," \u2014 "),rU=n(DSe,"A",{href:!0});var STt=s(rU);d5r=r(STt,"FlaxGPT2Model"),STt.forEach(t),c5r=r(DSe," (OpenAI GPT-2 model)"),DSe.forEach(t),f5r=i(ae),O4=n(ae,"LI",{});var GSe=s(O4);o0e=n(GSe,"STRONG",{});var RTt=s(o0e);m5r=r(RTt,"gpt_neo"),RTt.forEach(t),g5r=r(GSe," \u2014 "),tU=n(GSe,"A",{href:!0});var BTt=s(tU);h5r=r(BTt,"FlaxGPTNeoModel"),BTt.forEach(t),p5r=r(GSe," (GPT Neo model)"),GSe.forEach(t),u5r=i(ae),V4=n(ae,"LI",{});var OSe=s(V4);r0e=n(OSe,"STRONG",{});var PTt=s(r0e);_5r=r(PTt,"gptj"),PTt.forEach(t),b5r=r(OSe," \u2014 "),aU=n(OSe,"A",{href:!0});var ITt=s(aU);v5r=r(ITt,"FlaxGPTJModel"),ITt.forEach(t),F5r=r(OSe," (GPT-J model)"),OSe.forEach(t),T5r=i(ae),X4=n(ae,"LI",{});var VSe=s(X4);t0e=n(VSe,"STRONG",{});var qTt=s(t0e);M5r=r(qTt,"marian"),qTt.forEach(t),E5r=r(VSe," \u2014 "),nU=n(VSe,"A",{href:!0});var NTt=s(nU);C5r=r(NTt,"FlaxMarianModel"),NTt.forEach(t),w5r=r(VSe," (Marian model)"),VSe.forEach(t),A5r=i(ae),z4=n(ae,"LI",{});var XSe=s(z4);a0e=n(XSe,"STRONG",{});var jTt=s(a0e);y5r=r(jTt,"mbart"),jTt.forEach(t),L5r=r(XSe," \u2014 "),sU=n(XSe,"A",{href:!0});var DTt=s(sU);x5r=r(DTt,"FlaxMBartModel"),DTt.forEach(t),$5r=r(XSe," (mBART model)"),XSe.forEach(t),k5r=i(ae),Q4=n(ae,"LI",{});var zSe=s(Q4);n0e=n(zSe,"STRONG",{});var GTt=s(n0e);S5r=r(GTt,"mt5"),GTt.forEach(t),R5r=r(zSe," \u2014 "),lU=n(zSe,"A",{href:!0});var OTt=s(lU);B5r=r(OTt,"FlaxMT5Model"),OTt.forEach(t),P5r=r(zSe," (mT5 model)"),zSe.forEach(t),I5r=i(ae),W4=n(ae,"LI",{});var QSe=s(W4);s0e=n(QSe,"STRONG",{});var VTt=s(s0e);q5r=r(VTt,"pegasus"),VTt.forEach(t),N5r=r(QSe," \u2014 "),iU=n(QSe,"A",{href:!0});var XTt=s(iU);j5r=r(XTt,"FlaxPegasusModel"),XTt.forEach(t),D5r=r(QSe," (Pegasus model)"),QSe.forEach(t),G5r=i(ae),H4=n(ae,"LI",{});var WSe=s(H4);l0e=n(WSe,"STRONG",{});var zTt=s(l0e);O5r=r(zTt,"roberta"),zTt.forEach(t),V5r=r(WSe," \u2014 "),dU=n(WSe,"A",{href:!0});var QTt=s(dU);X5r=r(QTt,"FlaxRobertaModel"),QTt.forEach(t),z5r=r(WSe," (RoBERTa model)"),WSe.forEach(t),Q5r=i(ae),U4=n(ae,"LI",{});var HSe=s(U4);i0e=n(HSe,"STRONG",{});var WTt=s(i0e);W5r=r(WTt,"roformer"),WTt.forEach(t),H5r=r(HSe," \u2014 "),cU=n(HSe,"A",{href:!0});var HTt=s(cU);U5r=r(HTt,"FlaxRoFormerModel"),HTt.forEach(t),J5r=r(HSe," (RoFormer model)"),HSe.forEach(t),Y5r=i(ae),J4=n(ae,"LI",{});var USe=s(J4);d0e=n(USe,"STRONG",{});var UTt=s(d0e);K5r=r(UTt,"t5"),UTt.forEach(t),Z5r=r(USe," \u2014 "),fU=n(USe,"A",{href:!0});var JTt=s(fU);eCr=r(JTt,"FlaxT5Model"),JTt.forEach(t),oCr=r(USe," (T5 model)"),USe.forEach(t),rCr=i(ae),Y4=n(ae,"LI",{});var JSe=s(Y4);c0e=n(JSe,"STRONG",{});var YTt=s(c0e);tCr=r(YTt,"vision-text-dual-encoder"),YTt.forEach(t),aCr=r(JSe," \u2014 "),mU=n(JSe,"A",{href:!0});var KTt=s(mU);nCr=r(KTt,"FlaxVisionTextDualEncoderModel"),KTt.forEach(t),sCr=r(JSe," (VisionTextDualEncoder model)"),JSe.forEach(t),lCr=i(ae),K4=n(ae,"LI",{});var YSe=s(K4);f0e=n(YSe,"STRONG",{});var ZTt=s(f0e);iCr=r(ZTt,"vit"),ZTt.forEach(t),dCr=r(YSe," \u2014 "),gU=n(YSe,"A",{href:!0});var e7t=s(gU);cCr=r(e7t,"FlaxViTModel"),e7t.forEach(t),fCr=r(YSe," (ViT model)"),YSe.forEach(t),mCr=i(ae),Z4=n(ae,"LI",{});var KSe=s(Z4);m0e=n(KSe,"STRONG",{});var o7t=s(m0e);gCr=r(o7t,"wav2vec2"),o7t.forEach(t),hCr=r(KSe," \u2014 "),hU=n(KSe,"A",{href:!0});var r7t=s(hU);pCr=r(r7t,"FlaxWav2Vec2Model"),r7t.forEach(t),uCr=r(KSe," (Wav2Vec2 model)"),KSe.forEach(t),_Cr=i(ae),eE=n(ae,"LI",{});var ZSe=s(eE);g0e=n(ZSe,"STRONG",{});var t7t=s(g0e);bCr=r(t7t,"xglm"),t7t.forEach(t),vCr=r(ZSe," \u2014 "),pU=n(ZSe,"A",{href:!0});var a7t=s(pU);FCr=r(a7t,"FlaxXGLMModel"),a7t.forEach(t),TCr=r(ZSe," (XGLM model)"),ZSe.forEach(t),MCr=i(ae),oE=n(ae,"LI",{});var eRe=s(oE);h0e=n(eRe,"STRONG",{});var n7t=s(h0e);ECr=r(n7t,"xlm-roberta"),n7t.forEach(t),CCr=r(eRe," \u2014 "),uU=n(eRe,"A",{href:!0});var s7t=s(uU);wCr=r(s7t,"FlaxXLMRobertaModel"),s7t.forEach(t),ACr=r(eRe," (XLM-RoBERTa model)"),eRe.forEach(t),ae.forEach(t),yCr=i(Rl),T(rE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),sIe=i(f),Tc=n(f,"H2",{class:!0});var cNe=s(Tc);tE=n(cNe,"A",{id:!0,class:!0,href:!0});var l7t=s(tE);p0e=n(l7t,"SPAN",{});var i7t=s(p0e);T(CL.$$.fragment,i7t),i7t.forEach(t),l7t.forEach(t),LCr=i(cNe),u0e=n(cNe,"SPAN",{});var d7t=s(u0e);xCr=r(d7t,"FlaxAutoModelForCausalLM"),d7t.forEach(t),cNe.forEach(t),lIe=i(f),fr=n(f,"DIV",{class:!0});var Bl=s(fr);T(wL.$$.fragment,Bl),$Cr=i(Bl),Mc=n(Bl,"P",{});var zK=s(Mc);kCr=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_U=n(zK,"A",{href:!0});var c7t=s(_U);SCr=r(c7t,"from_pretrained()"),c7t.forEach(t),RCr=r(zK," class method or the "),bU=n(zK,"A",{href:!0});var f7t=s(bU);BCr=r(f7t,"from_config()"),f7t.forEach(t),PCr=r(zK,` class
method.`),zK.forEach(t),ICr=i(Bl),AL=n(Bl,"P",{});var fNe=s(AL);qCr=r(fNe,"This class cannot be instantiated directly using "),_0e=n(fNe,"CODE",{});var m7t=s(_0e);NCr=r(m7t,"__init__()"),m7t.forEach(t),jCr=r(fNe," (throws an error)."),fNe.forEach(t),DCr=i(Bl),qt=n(Bl,"DIV",{class:!0});var ow=s(qt);T(yL.$$.fragment,ow),GCr=i(ow),b0e=n(ow,"P",{});var g7t=s(b0e);OCr=r(g7t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),g7t.forEach(t),VCr=i(ow),Ec=n(ow,"P",{});var QK=s(Ec);XCr=r(QK,`Note:
Loading a model from its configuration file does `),v0e=n(QK,"STRONG",{});var h7t=s(v0e);zCr=r(h7t,"not"),h7t.forEach(t),QCr=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(QK,"A",{href:!0});var p7t=s(vU);WCr=r(p7t,"from_pretrained()"),p7t.forEach(t),HCr=r(QK," to load the model weights."),QK.forEach(t),UCr=i(ow),T(aE.$$.fragment,ow),ow.forEach(t),JCr=i(Bl),Nr=n(Bl,"DIV",{class:!0});var Pl=s(Nr);T(LL.$$.fragment,Pl),YCr=i(Pl),F0e=n(Pl,"P",{});var u7t=s(F0e);KCr=r(u7t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),u7t.forEach(t),ZCr=i(Pl),cn=n(Pl,"P",{});var rw=s(cn);e3r=r(rw,"The model class to instantiate is selected based on the "),T0e=n(rw,"CODE",{});var _7t=s(T0e);o3r=r(_7t,"model_type"),_7t.forEach(t),r3r=r(rw,` property of the config object (either
passed as an argument or loaded from `),M0e=n(rw,"CODE",{});var b7t=s(M0e);t3r=r(b7t,"pretrained_model_name_or_path"),b7t.forEach(t),a3r=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E0e=n(rw,"CODE",{});var v7t=s(E0e);n3r=r(v7t,"pretrained_model_name_or_path"),v7t.forEach(t),s3r=r(rw,":"),rw.forEach(t),l3r=i(Pl),ke=n(Pl,"UL",{});var Oe=s(ke);nE=n(Oe,"LI",{});var oRe=s(nE);C0e=n(oRe,"STRONG",{});var F7t=s(C0e);i3r=r(F7t,"bart"),F7t.forEach(t),d3r=r(oRe," \u2014 "),FU=n(oRe,"A",{href:!0});var T7t=s(FU);c3r=r(T7t,"FlaxBartForCausalLM"),T7t.forEach(t),f3r=r(oRe," (BART model)"),oRe.forEach(t),m3r=i(Oe),sE=n(Oe,"LI",{});var rRe=s(sE);w0e=n(rRe,"STRONG",{});var M7t=s(w0e);g3r=r(M7t,"bert"),M7t.forEach(t),h3r=r(rRe," \u2014 "),TU=n(rRe,"A",{href:!0});var E7t=s(TU);p3r=r(E7t,"FlaxBertForCausalLM"),E7t.forEach(t),u3r=r(rRe," (BERT model)"),rRe.forEach(t),_3r=i(Oe),lE=n(Oe,"LI",{});var tRe=s(lE);A0e=n(tRe,"STRONG",{});var C7t=s(A0e);b3r=r(C7t,"big_bird"),C7t.forEach(t),v3r=r(tRe," \u2014 "),MU=n(tRe,"A",{href:!0});var w7t=s(MU);F3r=r(w7t,"FlaxBigBirdForCausalLM"),w7t.forEach(t),T3r=r(tRe," (BigBird model)"),tRe.forEach(t),M3r=i(Oe),iE=n(Oe,"LI",{});var aRe=s(iE);y0e=n(aRe,"STRONG",{});var A7t=s(y0e);E3r=r(A7t,"electra"),A7t.forEach(t),C3r=r(aRe," \u2014 "),EU=n(aRe,"A",{href:!0});var y7t=s(EU);w3r=r(y7t,"FlaxElectraForCausalLM"),y7t.forEach(t),A3r=r(aRe," (ELECTRA model)"),aRe.forEach(t),y3r=i(Oe),dE=n(Oe,"LI",{});var nRe=s(dE);L0e=n(nRe,"STRONG",{});var L7t=s(L0e);L3r=r(L7t,"gpt2"),L7t.forEach(t),x3r=r(nRe," \u2014 "),CU=n(nRe,"A",{href:!0});var x7t=s(CU);$3r=r(x7t,"FlaxGPT2LMHeadModel"),x7t.forEach(t),k3r=r(nRe," (OpenAI GPT-2 model)"),nRe.forEach(t),S3r=i(Oe),cE=n(Oe,"LI",{});var sRe=s(cE);x0e=n(sRe,"STRONG",{});var $7t=s(x0e);R3r=r($7t,"gpt_neo"),$7t.forEach(t),B3r=r(sRe," \u2014 "),wU=n(sRe,"A",{href:!0});var k7t=s(wU);P3r=r(k7t,"FlaxGPTNeoForCausalLM"),k7t.forEach(t),I3r=r(sRe," (GPT Neo model)"),sRe.forEach(t),q3r=i(Oe),fE=n(Oe,"LI",{});var lRe=s(fE);$0e=n(lRe,"STRONG",{});var S7t=s($0e);N3r=r(S7t,"gptj"),S7t.forEach(t),j3r=r(lRe," \u2014 "),AU=n(lRe,"A",{href:!0});var R7t=s(AU);D3r=r(R7t,"FlaxGPTJForCausalLM"),R7t.forEach(t),G3r=r(lRe," (GPT-J model)"),lRe.forEach(t),O3r=i(Oe),mE=n(Oe,"LI",{});var iRe=s(mE);k0e=n(iRe,"STRONG",{});var B7t=s(k0e);V3r=r(B7t,"roberta"),B7t.forEach(t),X3r=r(iRe," \u2014 "),yU=n(iRe,"A",{href:!0});var P7t=s(yU);z3r=r(P7t,"FlaxRobertaForCausalLM"),P7t.forEach(t),Q3r=r(iRe," (RoBERTa model)"),iRe.forEach(t),W3r=i(Oe),gE=n(Oe,"LI",{});var dRe=s(gE);S0e=n(dRe,"STRONG",{});var I7t=s(S0e);H3r=r(I7t,"xglm"),I7t.forEach(t),U3r=r(dRe," \u2014 "),LU=n(dRe,"A",{href:!0});var q7t=s(LU);J3r=r(q7t,"FlaxXGLMForCausalLM"),q7t.forEach(t),Y3r=r(dRe," (XGLM model)"),dRe.forEach(t),Oe.forEach(t),K3r=i(Pl),T(hE.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),iIe=i(f),Cc=n(f,"H2",{class:!0});var mNe=s(Cc);pE=n(mNe,"A",{id:!0,class:!0,href:!0});var N7t=s(pE);R0e=n(N7t,"SPAN",{});var j7t=s(R0e);T(xL.$$.fragment,j7t),j7t.forEach(t),N7t.forEach(t),Z3r=i(mNe),B0e=n(mNe,"SPAN",{});var D7t=s(B0e);ewr=r(D7t,"FlaxAutoModelForPreTraining"),D7t.forEach(t),mNe.forEach(t),dIe=i(f),mr=n(f,"DIV",{class:!0});var Il=s(mr);T($L.$$.fragment,Il),owr=i(Il),wc=n(Il,"P",{});var WK=s(wc);rwr=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xU=n(WK,"A",{href:!0});var G7t=s(xU);twr=r(G7t,"from_pretrained()"),G7t.forEach(t),awr=r(WK," class method or the "),$U=n(WK,"A",{href:!0});var O7t=s($U);nwr=r(O7t,"from_config()"),O7t.forEach(t),swr=r(WK,` class
method.`),WK.forEach(t),lwr=i(Il),kL=n(Il,"P",{});var gNe=s(kL);iwr=r(gNe,"This class cannot be instantiated directly using "),P0e=n(gNe,"CODE",{});var V7t=s(P0e);dwr=r(V7t,"__init__()"),V7t.forEach(t),cwr=r(gNe," (throws an error)."),gNe.forEach(t),fwr=i(Il),Nt=n(Il,"DIV",{class:!0});var tw=s(Nt);T(SL.$$.fragment,tw),mwr=i(tw),I0e=n(tw,"P",{});var X7t=s(I0e);gwr=r(X7t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),X7t.forEach(t),hwr=i(tw),Ac=n(tw,"P",{});var HK=s(Ac);pwr=r(HK,`Note:
Loading a model from its configuration file does `),q0e=n(HK,"STRONG",{});var z7t=s(q0e);uwr=r(z7t,"not"),z7t.forEach(t),_wr=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=n(HK,"A",{href:!0});var Q7t=s(kU);bwr=r(Q7t,"from_pretrained()"),Q7t.forEach(t),vwr=r(HK," to load the model weights."),HK.forEach(t),Fwr=i(tw),T(uE.$$.fragment,tw),tw.forEach(t),Twr=i(Il),jr=n(Il,"DIV",{class:!0});var ql=s(jr);T(RL.$$.fragment,ql),Mwr=i(ql),N0e=n(ql,"P",{});var W7t=s(N0e);Ewr=r(W7t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),W7t.forEach(t),Cwr=i(ql),fn=n(ql,"P",{});var aw=s(fn);wwr=r(aw,"The model class to instantiate is selected based on the "),j0e=n(aw,"CODE",{});var H7t=s(j0e);Awr=r(H7t,"model_type"),H7t.forEach(t),ywr=r(aw,` property of the config object (either
passed as an argument or loaded from `),D0e=n(aw,"CODE",{});var U7t=s(D0e);Lwr=r(U7t,"pretrained_model_name_or_path"),U7t.forEach(t),xwr=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G0e=n(aw,"CODE",{});var J7t=s(G0e);$wr=r(J7t,"pretrained_model_name_or_path"),J7t.forEach(t),kwr=r(aw,":"),aw.forEach(t),Swr=i(ql),Me=n(ql,"UL",{});var we=s(Me);_E=n(we,"LI",{});var cRe=s(_E);O0e=n(cRe,"STRONG",{});var Y7t=s(O0e);Rwr=r(Y7t,"albert"),Y7t.forEach(t),Bwr=r(cRe," \u2014 "),SU=n(cRe,"A",{href:!0});var K7t=s(SU);Pwr=r(K7t,"FlaxAlbertForPreTraining"),K7t.forEach(t),Iwr=r(cRe," (ALBERT model)"),cRe.forEach(t),qwr=i(we),bE=n(we,"LI",{});var fRe=s(bE);V0e=n(fRe,"STRONG",{});var Z7t=s(V0e);Nwr=r(Z7t,"bart"),Z7t.forEach(t),jwr=r(fRe," \u2014 "),RU=n(fRe,"A",{href:!0});var e9t=s(RU);Dwr=r(e9t,"FlaxBartForConditionalGeneration"),e9t.forEach(t),Gwr=r(fRe," (BART model)"),fRe.forEach(t),Owr=i(we),vE=n(we,"LI",{});var mRe=s(vE);X0e=n(mRe,"STRONG",{});var o9t=s(X0e);Vwr=r(o9t,"bert"),o9t.forEach(t),Xwr=r(mRe," \u2014 "),BU=n(mRe,"A",{href:!0});var r9t=s(BU);zwr=r(r9t,"FlaxBertForPreTraining"),r9t.forEach(t),Qwr=r(mRe," (BERT model)"),mRe.forEach(t),Wwr=i(we),FE=n(we,"LI",{});var gRe=s(FE);z0e=n(gRe,"STRONG",{});var t9t=s(z0e);Hwr=r(t9t,"big_bird"),t9t.forEach(t),Uwr=r(gRe," \u2014 "),PU=n(gRe,"A",{href:!0});var a9t=s(PU);Jwr=r(a9t,"FlaxBigBirdForPreTraining"),a9t.forEach(t),Ywr=r(gRe," (BigBird model)"),gRe.forEach(t),Kwr=i(we),TE=n(we,"LI",{});var hRe=s(TE);Q0e=n(hRe,"STRONG",{});var n9t=s(Q0e);Zwr=r(n9t,"electra"),n9t.forEach(t),eAr=r(hRe," \u2014 "),IU=n(hRe,"A",{href:!0});var s9t=s(IU);oAr=r(s9t,"FlaxElectraForPreTraining"),s9t.forEach(t),rAr=r(hRe," (ELECTRA model)"),hRe.forEach(t),tAr=i(we),ME=n(we,"LI",{});var pRe=s(ME);W0e=n(pRe,"STRONG",{});var l9t=s(W0e);aAr=r(l9t,"mbart"),l9t.forEach(t),nAr=r(pRe," \u2014 "),qU=n(pRe,"A",{href:!0});var i9t=s(qU);sAr=r(i9t,"FlaxMBartForConditionalGeneration"),i9t.forEach(t),lAr=r(pRe," (mBART model)"),pRe.forEach(t),iAr=i(we),EE=n(we,"LI",{});var uRe=s(EE);H0e=n(uRe,"STRONG",{});var d9t=s(H0e);dAr=r(d9t,"mt5"),d9t.forEach(t),cAr=r(uRe," \u2014 "),NU=n(uRe,"A",{href:!0});var c9t=s(NU);fAr=r(c9t,"FlaxMT5ForConditionalGeneration"),c9t.forEach(t),mAr=r(uRe," (mT5 model)"),uRe.forEach(t),gAr=i(we),CE=n(we,"LI",{});var _Re=s(CE);U0e=n(_Re,"STRONG",{});var f9t=s(U0e);hAr=r(f9t,"roberta"),f9t.forEach(t),pAr=r(_Re," \u2014 "),jU=n(_Re,"A",{href:!0});var m9t=s(jU);uAr=r(m9t,"FlaxRobertaForMaskedLM"),m9t.forEach(t),_Ar=r(_Re," (RoBERTa model)"),_Re.forEach(t),bAr=i(we),wE=n(we,"LI",{});var bRe=s(wE);J0e=n(bRe,"STRONG",{});var g9t=s(J0e);vAr=r(g9t,"roformer"),g9t.forEach(t),FAr=r(bRe," \u2014 "),DU=n(bRe,"A",{href:!0});var h9t=s(DU);TAr=r(h9t,"FlaxRoFormerForMaskedLM"),h9t.forEach(t),MAr=r(bRe," (RoFormer model)"),bRe.forEach(t),EAr=i(we),AE=n(we,"LI",{});var vRe=s(AE);Y0e=n(vRe,"STRONG",{});var p9t=s(Y0e);CAr=r(p9t,"t5"),p9t.forEach(t),wAr=r(vRe," \u2014 "),GU=n(vRe,"A",{href:!0});var u9t=s(GU);AAr=r(u9t,"FlaxT5ForConditionalGeneration"),u9t.forEach(t),yAr=r(vRe," (T5 model)"),vRe.forEach(t),LAr=i(we),yE=n(we,"LI",{});var FRe=s(yE);K0e=n(FRe,"STRONG",{});var _9t=s(K0e);xAr=r(_9t,"wav2vec2"),_9t.forEach(t),$Ar=r(FRe," \u2014 "),OU=n(FRe,"A",{href:!0});var b9t=s(OU);kAr=r(b9t,"FlaxWav2Vec2ForPreTraining"),b9t.forEach(t),SAr=r(FRe," (Wav2Vec2 model)"),FRe.forEach(t),RAr=i(we),LE=n(we,"LI",{});var TRe=s(LE);Z0e=n(TRe,"STRONG",{});var v9t=s(Z0e);BAr=r(v9t,"xlm-roberta"),v9t.forEach(t),PAr=r(TRe," \u2014 "),VU=n(TRe,"A",{href:!0});var F9t=s(VU);IAr=r(F9t,"FlaxXLMRobertaForMaskedLM"),F9t.forEach(t),qAr=r(TRe," (XLM-RoBERTa model)"),TRe.forEach(t),we.forEach(t),NAr=i(ql),T(xE.$$.fragment,ql),ql.forEach(t),Il.forEach(t),cIe=i(f),yc=n(f,"H2",{class:!0});var hNe=s(yc);$E=n(hNe,"A",{id:!0,class:!0,href:!0});var T9t=s($E);eTe=n(T9t,"SPAN",{});var M9t=s(eTe);T(BL.$$.fragment,M9t),M9t.forEach(t),T9t.forEach(t),jAr=i(hNe),oTe=n(hNe,"SPAN",{});var E9t=s(oTe);DAr=r(E9t,"FlaxAutoModelForMaskedLM"),E9t.forEach(t),hNe.forEach(t),fIe=i(f),gr=n(f,"DIV",{class:!0});var Nl=s(gr);T(PL.$$.fragment,Nl),GAr=i(Nl),Lc=n(Nl,"P",{});var UK=s(Lc);OAr=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XU=n(UK,"A",{href:!0});var C9t=s(XU);VAr=r(C9t,"from_pretrained()"),C9t.forEach(t),XAr=r(UK," class method or the "),zU=n(UK,"A",{href:!0});var w9t=s(zU);zAr=r(w9t,"from_config()"),w9t.forEach(t),QAr=r(UK,` class
method.`),UK.forEach(t),WAr=i(Nl),IL=n(Nl,"P",{});var pNe=s(IL);HAr=r(pNe,"This class cannot be instantiated directly using "),rTe=n(pNe,"CODE",{});var A9t=s(rTe);UAr=r(A9t,"__init__()"),A9t.forEach(t),JAr=r(pNe," (throws an error)."),pNe.forEach(t),YAr=i(Nl),jt=n(Nl,"DIV",{class:!0});var nw=s(jt);T(qL.$$.fragment,nw),KAr=i(nw),tTe=n(nw,"P",{});var y9t=s(tTe);ZAr=r(y9t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),y9t.forEach(t),e6r=i(nw),xc=n(nw,"P",{});var JK=s(xc);o6r=r(JK,`Note:
Loading a model from its configuration file does `),aTe=n(JK,"STRONG",{});var L9t=s(aTe);r6r=r(L9t,"not"),L9t.forEach(t),t6r=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(JK,"A",{href:!0});var x9t=s(QU);a6r=r(x9t,"from_pretrained()"),x9t.forEach(t),n6r=r(JK," to load the model weights."),JK.forEach(t),s6r=i(nw),T(kE.$$.fragment,nw),nw.forEach(t),l6r=i(Nl),Dr=n(Nl,"DIV",{class:!0});var jl=s(Dr);T(NL.$$.fragment,jl),i6r=i(jl),nTe=n(jl,"P",{});var $9t=s(nTe);d6r=r($9t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$9t.forEach(t),c6r=i(jl),mn=n(jl,"P",{});var sw=s(mn);f6r=r(sw,"The model class to instantiate is selected based on the "),sTe=n(sw,"CODE",{});var k9t=s(sTe);m6r=r(k9t,"model_type"),k9t.forEach(t),g6r=r(sw,` property of the config object (either
passed as an argument or loaded from `),lTe=n(sw,"CODE",{});var S9t=s(lTe);h6r=r(S9t,"pretrained_model_name_or_path"),S9t.forEach(t),p6r=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iTe=n(sw,"CODE",{});var R9t=s(iTe);u6r=r(R9t,"pretrained_model_name_or_path"),R9t.forEach(t),_6r=r(sw,":"),sw.forEach(t),b6r=i(jl),Le=n(jl,"UL",{});var Be=s(Le);SE=n(Be,"LI",{});var MRe=s(SE);dTe=n(MRe,"STRONG",{});var B9t=s(dTe);v6r=r(B9t,"albert"),B9t.forEach(t),F6r=r(MRe," \u2014 "),WU=n(MRe,"A",{href:!0});var P9t=s(WU);T6r=r(P9t,"FlaxAlbertForMaskedLM"),P9t.forEach(t),M6r=r(MRe," (ALBERT model)"),MRe.forEach(t),E6r=i(Be),RE=n(Be,"LI",{});var ERe=s(RE);cTe=n(ERe,"STRONG",{});var I9t=s(cTe);C6r=r(I9t,"bart"),I9t.forEach(t),w6r=r(ERe," \u2014 "),HU=n(ERe,"A",{href:!0});var q9t=s(HU);A6r=r(q9t,"FlaxBartForConditionalGeneration"),q9t.forEach(t),y6r=r(ERe," (BART model)"),ERe.forEach(t),L6r=i(Be),BE=n(Be,"LI",{});var CRe=s(BE);fTe=n(CRe,"STRONG",{});var N9t=s(fTe);x6r=r(N9t,"bert"),N9t.forEach(t),$6r=r(CRe," \u2014 "),UU=n(CRe,"A",{href:!0});var j9t=s(UU);k6r=r(j9t,"FlaxBertForMaskedLM"),j9t.forEach(t),S6r=r(CRe," (BERT model)"),CRe.forEach(t),R6r=i(Be),PE=n(Be,"LI",{});var wRe=s(PE);mTe=n(wRe,"STRONG",{});var D9t=s(mTe);B6r=r(D9t,"big_bird"),D9t.forEach(t),P6r=r(wRe," \u2014 "),JU=n(wRe,"A",{href:!0});var G9t=s(JU);I6r=r(G9t,"FlaxBigBirdForMaskedLM"),G9t.forEach(t),q6r=r(wRe," (BigBird model)"),wRe.forEach(t),N6r=i(Be),IE=n(Be,"LI",{});var ARe=s(IE);gTe=n(ARe,"STRONG",{});var O9t=s(gTe);j6r=r(O9t,"distilbert"),O9t.forEach(t),D6r=r(ARe," \u2014 "),YU=n(ARe,"A",{href:!0});var V9t=s(YU);G6r=r(V9t,"FlaxDistilBertForMaskedLM"),V9t.forEach(t),O6r=r(ARe," (DistilBERT model)"),ARe.forEach(t),V6r=i(Be),qE=n(Be,"LI",{});var yRe=s(qE);hTe=n(yRe,"STRONG",{});var X9t=s(hTe);X6r=r(X9t,"electra"),X9t.forEach(t),z6r=r(yRe," \u2014 "),KU=n(yRe,"A",{href:!0});var z9t=s(KU);Q6r=r(z9t,"FlaxElectraForMaskedLM"),z9t.forEach(t),W6r=r(yRe," (ELECTRA model)"),yRe.forEach(t),H6r=i(Be),NE=n(Be,"LI",{});var LRe=s(NE);pTe=n(LRe,"STRONG",{});var Q9t=s(pTe);U6r=r(Q9t,"mbart"),Q9t.forEach(t),J6r=r(LRe," \u2014 "),ZU=n(LRe,"A",{href:!0});var W9t=s(ZU);Y6r=r(W9t,"FlaxMBartForConditionalGeneration"),W9t.forEach(t),K6r=r(LRe," (mBART model)"),LRe.forEach(t),Z6r=i(Be),jE=n(Be,"LI",{});var xRe=s(jE);uTe=n(xRe,"STRONG",{});var H9t=s(uTe);eyr=r(H9t,"roberta"),H9t.forEach(t),oyr=r(xRe," \u2014 "),eJ=n(xRe,"A",{href:!0});var U9t=s(eJ);ryr=r(U9t,"FlaxRobertaForMaskedLM"),U9t.forEach(t),tyr=r(xRe," (RoBERTa model)"),xRe.forEach(t),ayr=i(Be),DE=n(Be,"LI",{});var $Re=s(DE);_Te=n($Re,"STRONG",{});var J9t=s(_Te);nyr=r(J9t,"roformer"),J9t.forEach(t),syr=r($Re," \u2014 "),oJ=n($Re,"A",{href:!0});var Y9t=s(oJ);lyr=r(Y9t,"FlaxRoFormerForMaskedLM"),Y9t.forEach(t),iyr=r($Re," (RoFormer model)"),$Re.forEach(t),dyr=i(Be),GE=n(Be,"LI",{});var kRe=s(GE);bTe=n(kRe,"STRONG",{});var K9t=s(bTe);cyr=r(K9t,"xlm-roberta"),K9t.forEach(t),fyr=r(kRe," \u2014 "),rJ=n(kRe,"A",{href:!0});var Z9t=s(rJ);myr=r(Z9t,"FlaxXLMRobertaForMaskedLM"),Z9t.forEach(t),gyr=r(kRe," (XLM-RoBERTa model)"),kRe.forEach(t),Be.forEach(t),hyr=i(jl),T(OE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),mIe=i(f),$c=n(f,"H2",{class:!0});var uNe=s($c);VE=n(uNe,"A",{id:!0,class:!0,href:!0});var eMt=s(VE);vTe=n(eMt,"SPAN",{});var oMt=s(vTe);T(jL.$$.fragment,oMt),oMt.forEach(t),eMt.forEach(t),pyr=i(uNe),FTe=n(uNe,"SPAN",{});var rMt=s(FTe);uyr=r(rMt,"FlaxAutoModelForSeq2SeqLM"),rMt.forEach(t),uNe.forEach(t),gIe=i(f),hr=n(f,"DIV",{class:!0});var Dl=s(hr);T(DL.$$.fragment,Dl),_yr=i(Dl),kc=n(Dl,"P",{});var YK=s(kc);byr=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tJ=n(YK,"A",{href:!0});var tMt=s(tJ);vyr=r(tMt,"from_pretrained()"),tMt.forEach(t),Fyr=r(YK," class method or the "),aJ=n(YK,"A",{href:!0});var aMt=s(aJ);Tyr=r(aMt,"from_config()"),aMt.forEach(t),Myr=r(YK,` class
method.`),YK.forEach(t),Eyr=i(Dl),GL=n(Dl,"P",{});var _Ne=s(GL);Cyr=r(_Ne,"This class cannot be instantiated directly using "),TTe=n(_Ne,"CODE",{});var nMt=s(TTe);wyr=r(nMt,"__init__()"),nMt.forEach(t),Ayr=r(_Ne," (throws an error)."),_Ne.forEach(t),yyr=i(Dl),Dt=n(Dl,"DIV",{class:!0});var lw=s(Dt);T(OL.$$.fragment,lw),Lyr=i(lw),MTe=n(lw,"P",{});var sMt=s(MTe);xyr=r(sMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),sMt.forEach(t),$yr=i(lw),Sc=n(lw,"P",{});var KK=s(Sc);kyr=r(KK,`Note:
Loading a model from its configuration file does `),ETe=n(KK,"STRONG",{});var lMt=s(ETe);Syr=r(lMt,"not"),lMt.forEach(t),Ryr=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(KK,"A",{href:!0});var iMt=s(nJ);Byr=r(iMt,"from_pretrained()"),iMt.forEach(t),Pyr=r(KK," to load the model weights."),KK.forEach(t),Iyr=i(lw),T(XE.$$.fragment,lw),lw.forEach(t),qyr=i(Dl),Gr=n(Dl,"DIV",{class:!0});var Gl=s(Gr);T(VL.$$.fragment,Gl),Nyr=i(Gl),CTe=n(Gl,"P",{});var dMt=s(CTe);jyr=r(dMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dMt.forEach(t),Dyr=i(Gl),gn=n(Gl,"P",{});var iw=s(gn);Gyr=r(iw,"The model class to instantiate is selected based on the "),wTe=n(iw,"CODE",{});var cMt=s(wTe);Oyr=r(cMt,"model_type"),cMt.forEach(t),Vyr=r(iw,` property of the config object (either
passed as an argument or loaded from `),ATe=n(iw,"CODE",{});var fMt=s(ATe);Xyr=r(fMt,"pretrained_model_name_or_path"),fMt.forEach(t),zyr=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yTe=n(iw,"CODE",{});var mMt=s(yTe);Qyr=r(mMt,"pretrained_model_name_or_path"),mMt.forEach(t),Wyr=r(iw,":"),iw.forEach(t),Hyr=i(Gl),Se=n(Gl,"UL",{});var Ve=s(Se);zE=n(Ve,"LI",{});var SRe=s(zE);LTe=n(SRe,"STRONG",{});var gMt=s(LTe);Uyr=r(gMt,"bart"),gMt.forEach(t),Jyr=r(SRe," \u2014 "),sJ=n(SRe,"A",{href:!0});var hMt=s(sJ);Yyr=r(hMt,"FlaxBartForConditionalGeneration"),hMt.forEach(t),Kyr=r(SRe," (BART model)"),SRe.forEach(t),Zyr=i(Ve),QE=n(Ve,"LI",{});var RRe=s(QE);xTe=n(RRe,"STRONG",{});var pMt=s(xTe);eLr=r(pMt,"blenderbot"),pMt.forEach(t),oLr=r(RRe," \u2014 "),lJ=n(RRe,"A",{href:!0});var uMt=s(lJ);rLr=r(uMt,"FlaxBlenderbotForConditionalGeneration"),uMt.forEach(t),tLr=r(RRe," (Blenderbot model)"),RRe.forEach(t),aLr=i(Ve),WE=n(Ve,"LI",{});var BRe=s(WE);$Te=n(BRe,"STRONG",{});var _Mt=s($Te);nLr=r(_Mt,"blenderbot-small"),_Mt.forEach(t),sLr=r(BRe," \u2014 "),iJ=n(BRe,"A",{href:!0});var bMt=s(iJ);lLr=r(bMt,"FlaxBlenderbotSmallForConditionalGeneration"),bMt.forEach(t),iLr=r(BRe," (BlenderbotSmall model)"),BRe.forEach(t),dLr=i(Ve),HE=n(Ve,"LI",{});var PRe=s(HE);kTe=n(PRe,"STRONG",{});var vMt=s(kTe);cLr=r(vMt,"encoder-decoder"),vMt.forEach(t),fLr=r(PRe," \u2014 "),dJ=n(PRe,"A",{href:!0});var FMt=s(dJ);mLr=r(FMt,"FlaxEncoderDecoderModel"),FMt.forEach(t),gLr=r(PRe," (Encoder decoder model)"),PRe.forEach(t),hLr=i(Ve),UE=n(Ve,"LI",{});var IRe=s(UE);STe=n(IRe,"STRONG",{});var TMt=s(STe);pLr=r(TMt,"marian"),TMt.forEach(t),uLr=r(IRe," \u2014 "),cJ=n(IRe,"A",{href:!0});var MMt=s(cJ);_Lr=r(MMt,"FlaxMarianMTModel"),MMt.forEach(t),bLr=r(IRe," (Marian model)"),IRe.forEach(t),vLr=i(Ve),JE=n(Ve,"LI",{});var qRe=s(JE);RTe=n(qRe,"STRONG",{});var EMt=s(RTe);FLr=r(EMt,"mbart"),EMt.forEach(t),TLr=r(qRe," \u2014 "),fJ=n(qRe,"A",{href:!0});var CMt=s(fJ);MLr=r(CMt,"FlaxMBartForConditionalGeneration"),CMt.forEach(t),ELr=r(qRe," (mBART model)"),qRe.forEach(t),CLr=i(Ve),YE=n(Ve,"LI",{});var NRe=s(YE);BTe=n(NRe,"STRONG",{});var wMt=s(BTe);wLr=r(wMt,"mt5"),wMt.forEach(t),ALr=r(NRe," \u2014 "),mJ=n(NRe,"A",{href:!0});var AMt=s(mJ);yLr=r(AMt,"FlaxMT5ForConditionalGeneration"),AMt.forEach(t),LLr=r(NRe," (mT5 model)"),NRe.forEach(t),xLr=i(Ve),KE=n(Ve,"LI",{});var jRe=s(KE);PTe=n(jRe,"STRONG",{});var yMt=s(PTe);$Lr=r(yMt,"pegasus"),yMt.forEach(t),kLr=r(jRe," \u2014 "),gJ=n(jRe,"A",{href:!0});var LMt=s(gJ);SLr=r(LMt,"FlaxPegasusForConditionalGeneration"),LMt.forEach(t),RLr=r(jRe," (Pegasus model)"),jRe.forEach(t),BLr=i(Ve),ZE=n(Ve,"LI",{});var DRe=s(ZE);ITe=n(DRe,"STRONG",{});var xMt=s(ITe);PLr=r(xMt,"t5"),xMt.forEach(t),ILr=r(DRe," \u2014 "),hJ=n(DRe,"A",{href:!0});var $Mt=s(hJ);qLr=r($Mt,"FlaxT5ForConditionalGeneration"),$Mt.forEach(t),NLr=r(DRe," (T5 model)"),DRe.forEach(t),Ve.forEach(t),jLr=i(Gl),T(e5.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),hIe=i(f),Rc=n(f,"H2",{class:!0});var bNe=s(Rc);o5=n(bNe,"A",{id:!0,class:!0,href:!0});var kMt=s(o5);qTe=n(kMt,"SPAN",{});var SMt=s(qTe);T(XL.$$.fragment,SMt),SMt.forEach(t),kMt.forEach(t),DLr=i(bNe),NTe=n(bNe,"SPAN",{});var RMt=s(NTe);GLr=r(RMt,"FlaxAutoModelForSequenceClassification"),RMt.forEach(t),bNe.forEach(t),pIe=i(f),pr=n(f,"DIV",{class:!0});var Ol=s(pr);T(zL.$$.fragment,Ol),OLr=i(Ol),Bc=n(Ol,"P",{});var ZK=s(Bc);VLr=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pJ=n(ZK,"A",{href:!0});var BMt=s(pJ);XLr=r(BMt,"from_pretrained()"),BMt.forEach(t),zLr=r(ZK," class method or the "),uJ=n(ZK,"A",{href:!0});var PMt=s(uJ);QLr=r(PMt,"from_config()"),PMt.forEach(t),WLr=r(ZK,` class
method.`),ZK.forEach(t),HLr=i(Ol),QL=n(Ol,"P",{});var vNe=s(QL);ULr=r(vNe,"This class cannot be instantiated directly using "),jTe=n(vNe,"CODE",{});var IMt=s(jTe);JLr=r(IMt,"__init__()"),IMt.forEach(t),YLr=r(vNe," (throws an error)."),vNe.forEach(t),KLr=i(Ol),Gt=n(Ol,"DIV",{class:!0});var dw=s(Gt);T(WL.$$.fragment,dw),ZLr=i(dw),DTe=n(dw,"P",{});var qMt=s(DTe);e8r=r(qMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qMt.forEach(t),o8r=i(dw),Pc=n(dw,"P",{});var eZ=s(Pc);r8r=r(eZ,`Note:
Loading a model from its configuration file does `),GTe=n(eZ,"STRONG",{});var NMt=s(GTe);t8r=r(NMt,"not"),NMt.forEach(t),a8r=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=n(eZ,"A",{href:!0});var jMt=s(_J);n8r=r(jMt,"from_pretrained()"),jMt.forEach(t),s8r=r(eZ," to load the model weights."),eZ.forEach(t),l8r=i(dw),T(r5.$$.fragment,dw),dw.forEach(t),i8r=i(Ol),Or=n(Ol,"DIV",{class:!0});var Vl=s(Or);T(HL.$$.fragment,Vl),d8r=i(Vl),OTe=n(Vl,"P",{});var DMt=s(OTe);c8r=r(DMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),DMt.forEach(t),f8r=i(Vl),hn=n(Vl,"P",{});var cw=s(hn);m8r=r(cw,"The model class to instantiate is selected based on the "),VTe=n(cw,"CODE",{});var GMt=s(VTe);g8r=r(GMt,"model_type"),GMt.forEach(t),h8r=r(cw,` property of the config object (either
passed as an argument or loaded from `),XTe=n(cw,"CODE",{});var OMt=s(XTe);p8r=r(OMt,"pretrained_model_name_or_path"),OMt.forEach(t),u8r=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zTe=n(cw,"CODE",{});var VMt=s(zTe);_8r=r(VMt,"pretrained_model_name_or_path"),VMt.forEach(t),b8r=r(cw,":"),cw.forEach(t),v8r=i(Vl),xe=n(Vl,"UL",{});var Pe=s(xe);t5=n(Pe,"LI",{});var GRe=s(t5);QTe=n(GRe,"STRONG",{});var XMt=s(QTe);F8r=r(XMt,"albert"),XMt.forEach(t),T8r=r(GRe," \u2014 "),bJ=n(GRe,"A",{href:!0});var zMt=s(bJ);M8r=r(zMt,"FlaxAlbertForSequenceClassification"),zMt.forEach(t),E8r=r(GRe," (ALBERT model)"),GRe.forEach(t),C8r=i(Pe),a5=n(Pe,"LI",{});var ORe=s(a5);WTe=n(ORe,"STRONG",{});var QMt=s(WTe);w8r=r(QMt,"bart"),QMt.forEach(t),A8r=r(ORe," \u2014 "),vJ=n(ORe,"A",{href:!0});var WMt=s(vJ);y8r=r(WMt,"FlaxBartForSequenceClassification"),WMt.forEach(t),L8r=r(ORe," (BART model)"),ORe.forEach(t),x8r=i(Pe),n5=n(Pe,"LI",{});var VRe=s(n5);HTe=n(VRe,"STRONG",{});var HMt=s(HTe);$8r=r(HMt,"bert"),HMt.forEach(t),k8r=r(VRe," \u2014 "),FJ=n(VRe,"A",{href:!0});var UMt=s(FJ);S8r=r(UMt,"FlaxBertForSequenceClassification"),UMt.forEach(t),R8r=r(VRe," (BERT model)"),VRe.forEach(t),B8r=i(Pe),s5=n(Pe,"LI",{});var XRe=s(s5);UTe=n(XRe,"STRONG",{});var JMt=s(UTe);P8r=r(JMt,"big_bird"),JMt.forEach(t),I8r=r(XRe," \u2014 "),TJ=n(XRe,"A",{href:!0});var YMt=s(TJ);q8r=r(YMt,"FlaxBigBirdForSequenceClassification"),YMt.forEach(t),N8r=r(XRe," (BigBird model)"),XRe.forEach(t),j8r=i(Pe),l5=n(Pe,"LI",{});var zRe=s(l5);JTe=n(zRe,"STRONG",{});var KMt=s(JTe);D8r=r(KMt,"distilbert"),KMt.forEach(t),G8r=r(zRe," \u2014 "),MJ=n(zRe,"A",{href:!0});var ZMt=s(MJ);O8r=r(ZMt,"FlaxDistilBertForSequenceClassification"),ZMt.forEach(t),V8r=r(zRe," (DistilBERT model)"),zRe.forEach(t),X8r=i(Pe),i5=n(Pe,"LI",{});var QRe=s(i5);YTe=n(QRe,"STRONG",{});var e4t=s(YTe);z8r=r(e4t,"electra"),e4t.forEach(t),Q8r=r(QRe," \u2014 "),EJ=n(QRe,"A",{href:!0});var o4t=s(EJ);W8r=r(o4t,"FlaxElectraForSequenceClassification"),o4t.forEach(t),H8r=r(QRe," (ELECTRA model)"),QRe.forEach(t),U8r=i(Pe),d5=n(Pe,"LI",{});var WRe=s(d5);KTe=n(WRe,"STRONG",{});var r4t=s(KTe);J8r=r(r4t,"mbart"),r4t.forEach(t),Y8r=r(WRe," \u2014 "),CJ=n(WRe,"A",{href:!0});var t4t=s(CJ);K8r=r(t4t,"FlaxMBartForSequenceClassification"),t4t.forEach(t),Z8r=r(WRe," (mBART model)"),WRe.forEach(t),exr=i(Pe),c5=n(Pe,"LI",{});var HRe=s(c5);ZTe=n(HRe,"STRONG",{});var a4t=s(ZTe);oxr=r(a4t,"roberta"),a4t.forEach(t),rxr=r(HRe," \u2014 "),wJ=n(HRe,"A",{href:!0});var n4t=s(wJ);txr=r(n4t,"FlaxRobertaForSequenceClassification"),n4t.forEach(t),axr=r(HRe," (RoBERTa model)"),HRe.forEach(t),nxr=i(Pe),f5=n(Pe,"LI",{});var URe=s(f5);e7e=n(URe,"STRONG",{});var s4t=s(e7e);sxr=r(s4t,"roformer"),s4t.forEach(t),lxr=r(URe," \u2014 "),AJ=n(URe,"A",{href:!0});var l4t=s(AJ);ixr=r(l4t,"FlaxRoFormerForSequenceClassification"),l4t.forEach(t),dxr=r(URe," (RoFormer model)"),URe.forEach(t),cxr=i(Pe),m5=n(Pe,"LI",{});var JRe=s(m5);o7e=n(JRe,"STRONG",{});var i4t=s(o7e);fxr=r(i4t,"xlm-roberta"),i4t.forEach(t),mxr=r(JRe," \u2014 "),yJ=n(JRe,"A",{href:!0});var d4t=s(yJ);gxr=r(d4t,"FlaxXLMRobertaForSequenceClassification"),d4t.forEach(t),hxr=r(JRe," (XLM-RoBERTa model)"),JRe.forEach(t),Pe.forEach(t),pxr=i(Vl),T(g5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),uIe=i(f),Ic=n(f,"H2",{class:!0});var FNe=s(Ic);h5=n(FNe,"A",{id:!0,class:!0,href:!0});var c4t=s(h5);r7e=n(c4t,"SPAN",{});var f4t=s(r7e);T(UL.$$.fragment,f4t),f4t.forEach(t),c4t.forEach(t),uxr=i(FNe),t7e=n(FNe,"SPAN",{});var m4t=s(t7e);_xr=r(m4t,"FlaxAutoModelForQuestionAnswering"),m4t.forEach(t),FNe.forEach(t),_Ie=i(f),ur=n(f,"DIV",{class:!0});var Xl=s(ur);T(JL.$$.fragment,Xl),bxr=i(Xl),qc=n(Xl,"P",{});var oZ=s(qc);vxr=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),LJ=n(oZ,"A",{href:!0});var g4t=s(LJ);Fxr=r(g4t,"from_pretrained()"),g4t.forEach(t),Txr=r(oZ," class method or the "),xJ=n(oZ,"A",{href:!0});var h4t=s(xJ);Mxr=r(h4t,"from_config()"),h4t.forEach(t),Exr=r(oZ,` class
method.`),oZ.forEach(t),Cxr=i(Xl),YL=n(Xl,"P",{});var TNe=s(YL);wxr=r(TNe,"This class cannot be instantiated directly using "),a7e=n(TNe,"CODE",{});var p4t=s(a7e);Axr=r(p4t,"__init__()"),p4t.forEach(t),yxr=r(TNe," (throws an error)."),TNe.forEach(t),Lxr=i(Xl),Ot=n(Xl,"DIV",{class:!0});var fw=s(Ot);T(KL.$$.fragment,fw),xxr=i(fw),n7e=n(fw,"P",{});var u4t=s(n7e);$xr=r(u4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),u4t.forEach(t),kxr=i(fw),Nc=n(fw,"P",{});var rZ=s(Nc);Sxr=r(rZ,`Note:
Loading a model from its configuration file does `),s7e=n(rZ,"STRONG",{});var _4t=s(s7e);Rxr=r(_4t,"not"),_4t.forEach(t),Bxr=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=n(rZ,"A",{href:!0});var b4t=s($J);Pxr=r(b4t,"from_pretrained()"),b4t.forEach(t),Ixr=r(rZ," to load the model weights."),rZ.forEach(t),qxr=i(fw),T(p5.$$.fragment,fw),fw.forEach(t),Nxr=i(Xl),Vr=n(Xl,"DIV",{class:!0});var zl=s(Vr);T(ZL.$$.fragment,zl),jxr=i(zl),l7e=n(zl,"P",{});var v4t=s(l7e);Dxr=r(v4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),v4t.forEach(t),Gxr=i(zl),pn=n(zl,"P",{});var mw=s(pn);Oxr=r(mw,"The model class to instantiate is selected based on the "),i7e=n(mw,"CODE",{});var F4t=s(i7e);Vxr=r(F4t,"model_type"),F4t.forEach(t),Xxr=r(mw,` property of the config object (either
passed as an argument or loaded from `),d7e=n(mw,"CODE",{});var T4t=s(d7e);zxr=r(T4t,"pretrained_model_name_or_path"),T4t.forEach(t),Qxr=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c7e=n(mw,"CODE",{});var M4t=s(c7e);Wxr=r(M4t,"pretrained_model_name_or_path"),M4t.forEach(t),Hxr=r(mw,":"),mw.forEach(t),Uxr=i(zl),$e=n(zl,"UL",{});var Ie=s($e);u5=n(Ie,"LI",{});var YRe=s(u5);f7e=n(YRe,"STRONG",{});var E4t=s(f7e);Jxr=r(E4t,"albert"),E4t.forEach(t),Yxr=r(YRe," \u2014 "),kJ=n(YRe,"A",{href:!0});var C4t=s(kJ);Kxr=r(C4t,"FlaxAlbertForQuestionAnswering"),C4t.forEach(t),Zxr=r(YRe," (ALBERT model)"),YRe.forEach(t),e$r=i(Ie),_5=n(Ie,"LI",{});var KRe=s(_5);m7e=n(KRe,"STRONG",{});var w4t=s(m7e);o$r=r(w4t,"bart"),w4t.forEach(t),r$r=r(KRe," \u2014 "),SJ=n(KRe,"A",{href:!0});var A4t=s(SJ);t$r=r(A4t,"FlaxBartForQuestionAnswering"),A4t.forEach(t),a$r=r(KRe," (BART model)"),KRe.forEach(t),n$r=i(Ie),b5=n(Ie,"LI",{});var ZRe=s(b5);g7e=n(ZRe,"STRONG",{});var y4t=s(g7e);s$r=r(y4t,"bert"),y4t.forEach(t),l$r=r(ZRe," \u2014 "),RJ=n(ZRe,"A",{href:!0});var L4t=s(RJ);i$r=r(L4t,"FlaxBertForQuestionAnswering"),L4t.forEach(t),d$r=r(ZRe," (BERT model)"),ZRe.forEach(t),c$r=i(Ie),v5=n(Ie,"LI",{});var eBe=s(v5);h7e=n(eBe,"STRONG",{});var x4t=s(h7e);f$r=r(x4t,"big_bird"),x4t.forEach(t),m$r=r(eBe," \u2014 "),BJ=n(eBe,"A",{href:!0});var $4t=s(BJ);g$r=r($4t,"FlaxBigBirdForQuestionAnswering"),$4t.forEach(t),h$r=r(eBe," (BigBird model)"),eBe.forEach(t),p$r=i(Ie),F5=n(Ie,"LI",{});var oBe=s(F5);p7e=n(oBe,"STRONG",{});var k4t=s(p7e);u$r=r(k4t,"distilbert"),k4t.forEach(t),_$r=r(oBe," \u2014 "),PJ=n(oBe,"A",{href:!0});var S4t=s(PJ);b$r=r(S4t,"FlaxDistilBertForQuestionAnswering"),S4t.forEach(t),v$r=r(oBe," (DistilBERT model)"),oBe.forEach(t),F$r=i(Ie),T5=n(Ie,"LI",{});var rBe=s(T5);u7e=n(rBe,"STRONG",{});var R4t=s(u7e);T$r=r(R4t,"electra"),R4t.forEach(t),M$r=r(rBe," \u2014 "),IJ=n(rBe,"A",{href:!0});var B4t=s(IJ);E$r=r(B4t,"FlaxElectraForQuestionAnswering"),B4t.forEach(t),C$r=r(rBe," (ELECTRA model)"),rBe.forEach(t),w$r=i(Ie),M5=n(Ie,"LI",{});var tBe=s(M5);_7e=n(tBe,"STRONG",{});var P4t=s(_7e);A$r=r(P4t,"mbart"),P4t.forEach(t),y$r=r(tBe," \u2014 "),qJ=n(tBe,"A",{href:!0});var I4t=s(qJ);L$r=r(I4t,"FlaxMBartForQuestionAnswering"),I4t.forEach(t),x$r=r(tBe," (mBART model)"),tBe.forEach(t),$$r=i(Ie),E5=n(Ie,"LI",{});var aBe=s(E5);b7e=n(aBe,"STRONG",{});var q4t=s(b7e);k$r=r(q4t,"roberta"),q4t.forEach(t),S$r=r(aBe," \u2014 "),NJ=n(aBe,"A",{href:!0});var N4t=s(NJ);R$r=r(N4t,"FlaxRobertaForQuestionAnswering"),N4t.forEach(t),B$r=r(aBe," (RoBERTa model)"),aBe.forEach(t),P$r=i(Ie),C5=n(Ie,"LI",{});var nBe=s(C5);v7e=n(nBe,"STRONG",{});var j4t=s(v7e);I$r=r(j4t,"roformer"),j4t.forEach(t),q$r=r(nBe," \u2014 "),jJ=n(nBe,"A",{href:!0});var D4t=s(jJ);N$r=r(D4t,"FlaxRoFormerForQuestionAnswering"),D4t.forEach(t),j$r=r(nBe," (RoFormer model)"),nBe.forEach(t),D$r=i(Ie),w5=n(Ie,"LI",{});var sBe=s(w5);F7e=n(sBe,"STRONG",{});var G4t=s(F7e);G$r=r(G4t,"xlm-roberta"),G4t.forEach(t),O$r=r(sBe," \u2014 "),DJ=n(sBe,"A",{href:!0});var O4t=s(DJ);V$r=r(O4t,"FlaxXLMRobertaForQuestionAnswering"),O4t.forEach(t),X$r=r(sBe," (XLM-RoBERTa model)"),sBe.forEach(t),Ie.forEach(t),z$r=i(zl),T(A5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),bIe=i(f),jc=n(f,"H2",{class:!0});var MNe=s(jc);y5=n(MNe,"A",{id:!0,class:!0,href:!0});var V4t=s(y5);T7e=n(V4t,"SPAN",{});var X4t=s(T7e);T(e8.$$.fragment,X4t),X4t.forEach(t),V4t.forEach(t),Q$r=i(MNe),M7e=n(MNe,"SPAN",{});var z4t=s(M7e);W$r=r(z4t,"FlaxAutoModelForTokenClassification"),z4t.forEach(t),MNe.forEach(t),vIe=i(f),_r=n(f,"DIV",{class:!0});var Ql=s(_r);T(o8.$$.fragment,Ql),H$r=i(Ql),Dc=n(Ql,"P",{});var tZ=s(Dc);U$r=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GJ=n(tZ,"A",{href:!0});var Q4t=s(GJ);J$r=r(Q4t,"from_pretrained()"),Q4t.forEach(t),Y$r=r(tZ," class method or the "),OJ=n(tZ,"A",{href:!0});var W4t=s(OJ);K$r=r(W4t,"from_config()"),W4t.forEach(t),Z$r=r(tZ,` class
method.`),tZ.forEach(t),ekr=i(Ql),r8=n(Ql,"P",{});var ENe=s(r8);okr=r(ENe,"This class cannot be instantiated directly using "),E7e=n(ENe,"CODE",{});var H4t=s(E7e);rkr=r(H4t,"__init__()"),H4t.forEach(t),tkr=r(ENe," (throws an error)."),ENe.forEach(t),akr=i(Ql),Vt=n(Ql,"DIV",{class:!0});var gw=s(Vt);T(t8.$$.fragment,gw),nkr=i(gw),C7e=n(gw,"P",{});var U4t=s(C7e);skr=r(U4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),U4t.forEach(t),lkr=i(gw),Gc=n(gw,"P",{});var aZ=s(Gc);ikr=r(aZ,`Note:
Loading a model from its configuration file does `),w7e=n(aZ,"STRONG",{});var J4t=s(w7e);dkr=r(J4t,"not"),J4t.forEach(t),ckr=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(aZ,"A",{href:!0});var Y4t=s(VJ);fkr=r(Y4t,"from_pretrained()"),Y4t.forEach(t),mkr=r(aZ," to load the model weights."),aZ.forEach(t),gkr=i(gw),T(L5.$$.fragment,gw),gw.forEach(t),hkr=i(Ql),Xr=n(Ql,"DIV",{class:!0});var Wl=s(Xr);T(a8.$$.fragment,Wl),pkr=i(Wl),A7e=n(Wl,"P",{});var K4t=s(A7e);ukr=r(K4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),K4t.forEach(t),_kr=i(Wl),un=n(Wl,"P",{});var hw=s(un);bkr=r(hw,"The model class to instantiate is selected based on the "),y7e=n(hw,"CODE",{});var Z4t=s(y7e);vkr=r(Z4t,"model_type"),Z4t.forEach(t),Fkr=r(hw,` property of the config object (either
passed as an argument or loaded from `),L7e=n(hw,"CODE",{});var eEt=s(L7e);Tkr=r(eEt,"pretrained_model_name_or_path"),eEt.forEach(t),Mkr=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x7e=n(hw,"CODE",{});var oEt=s(x7e);Ekr=r(oEt,"pretrained_model_name_or_path"),oEt.forEach(t),Ckr=r(hw,":"),hw.forEach(t),wkr=i(Wl),De=n(Wl,"UL",{});var Fo=s(De);x5=n(Fo,"LI",{});var lBe=s(x5);$7e=n(lBe,"STRONG",{});var rEt=s($7e);Akr=r(rEt,"albert"),rEt.forEach(t),ykr=r(lBe," \u2014 "),XJ=n(lBe,"A",{href:!0});var tEt=s(XJ);Lkr=r(tEt,"FlaxAlbertForTokenClassification"),tEt.forEach(t),xkr=r(lBe," (ALBERT model)"),lBe.forEach(t),$kr=i(Fo),$5=n(Fo,"LI",{});var iBe=s($5);k7e=n(iBe,"STRONG",{});var aEt=s(k7e);kkr=r(aEt,"bert"),aEt.forEach(t),Skr=r(iBe," \u2014 "),zJ=n(iBe,"A",{href:!0});var nEt=s(zJ);Rkr=r(nEt,"FlaxBertForTokenClassification"),nEt.forEach(t),Bkr=r(iBe," (BERT model)"),iBe.forEach(t),Pkr=i(Fo),k5=n(Fo,"LI",{});var dBe=s(k5);S7e=n(dBe,"STRONG",{});var sEt=s(S7e);Ikr=r(sEt,"big_bird"),sEt.forEach(t),qkr=r(dBe," \u2014 "),QJ=n(dBe,"A",{href:!0});var lEt=s(QJ);Nkr=r(lEt,"FlaxBigBirdForTokenClassification"),lEt.forEach(t),jkr=r(dBe," (BigBird model)"),dBe.forEach(t),Dkr=i(Fo),S5=n(Fo,"LI",{});var cBe=s(S5);R7e=n(cBe,"STRONG",{});var iEt=s(R7e);Gkr=r(iEt,"distilbert"),iEt.forEach(t),Okr=r(cBe," \u2014 "),WJ=n(cBe,"A",{href:!0});var dEt=s(WJ);Vkr=r(dEt,"FlaxDistilBertForTokenClassification"),dEt.forEach(t),Xkr=r(cBe," (DistilBERT model)"),cBe.forEach(t),zkr=i(Fo),R5=n(Fo,"LI",{});var fBe=s(R5);B7e=n(fBe,"STRONG",{});var cEt=s(B7e);Qkr=r(cEt,"electra"),cEt.forEach(t),Wkr=r(fBe," \u2014 "),HJ=n(fBe,"A",{href:!0});var fEt=s(HJ);Hkr=r(fEt,"FlaxElectraForTokenClassification"),fEt.forEach(t),Ukr=r(fBe," (ELECTRA model)"),fBe.forEach(t),Jkr=i(Fo),B5=n(Fo,"LI",{});var mBe=s(B5);P7e=n(mBe,"STRONG",{});var mEt=s(P7e);Ykr=r(mEt,"roberta"),mEt.forEach(t),Kkr=r(mBe," \u2014 "),UJ=n(mBe,"A",{href:!0});var gEt=s(UJ);Zkr=r(gEt,"FlaxRobertaForTokenClassification"),gEt.forEach(t),eSr=r(mBe," (RoBERTa model)"),mBe.forEach(t),oSr=i(Fo),P5=n(Fo,"LI",{});var gBe=s(P5);I7e=n(gBe,"STRONG",{});var hEt=s(I7e);rSr=r(hEt,"roformer"),hEt.forEach(t),tSr=r(gBe," \u2014 "),JJ=n(gBe,"A",{href:!0});var pEt=s(JJ);aSr=r(pEt,"FlaxRoFormerForTokenClassification"),pEt.forEach(t),nSr=r(gBe," (RoFormer model)"),gBe.forEach(t),sSr=i(Fo),I5=n(Fo,"LI",{});var hBe=s(I5);q7e=n(hBe,"STRONG",{});var uEt=s(q7e);lSr=r(uEt,"xlm-roberta"),uEt.forEach(t),iSr=r(hBe," \u2014 "),YJ=n(hBe,"A",{href:!0});var _Et=s(YJ);dSr=r(_Et,"FlaxXLMRobertaForTokenClassification"),_Et.forEach(t),cSr=r(hBe," (XLM-RoBERTa model)"),hBe.forEach(t),Fo.forEach(t),fSr=i(Wl),T(q5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),FIe=i(f),Oc=n(f,"H2",{class:!0});var CNe=s(Oc);N5=n(CNe,"A",{id:!0,class:!0,href:!0});var bEt=s(N5);N7e=n(bEt,"SPAN",{});var vEt=s(N7e);T(n8.$$.fragment,vEt),vEt.forEach(t),bEt.forEach(t),mSr=i(CNe),j7e=n(CNe,"SPAN",{});var FEt=s(j7e);gSr=r(FEt,"FlaxAutoModelForMultipleChoice"),FEt.forEach(t),CNe.forEach(t),TIe=i(f),br=n(f,"DIV",{class:!0});var Hl=s(br);T(s8.$$.fragment,Hl),hSr=i(Hl),Vc=n(Hl,"P",{});var nZ=s(Vc);pSr=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KJ=n(nZ,"A",{href:!0});var TEt=s(KJ);uSr=r(TEt,"from_pretrained()"),TEt.forEach(t),_Sr=r(nZ," class method or the "),ZJ=n(nZ,"A",{href:!0});var MEt=s(ZJ);bSr=r(MEt,"from_config()"),MEt.forEach(t),vSr=r(nZ,` class
method.`),nZ.forEach(t),FSr=i(Hl),l8=n(Hl,"P",{});var wNe=s(l8);TSr=r(wNe,"This class cannot be instantiated directly using "),D7e=n(wNe,"CODE",{});var EEt=s(D7e);MSr=r(EEt,"__init__()"),EEt.forEach(t),ESr=r(wNe," (throws an error)."),wNe.forEach(t),CSr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var pw=s(Xt);T(i8.$$.fragment,pw),wSr=i(pw),G7e=n(pw,"P",{});var CEt=s(G7e);ASr=r(CEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),CEt.forEach(t),ySr=i(pw),Xc=n(pw,"P",{});var sZ=s(Xc);LSr=r(sZ,`Note:
Loading a model from its configuration file does `),O7e=n(sZ,"STRONG",{});var wEt=s(O7e);xSr=r(wEt,"not"),wEt.forEach(t),$Sr=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=n(sZ,"A",{href:!0});var AEt=s(eY);kSr=r(AEt,"from_pretrained()"),AEt.forEach(t),SSr=r(sZ," to load the model weights."),sZ.forEach(t),RSr=i(pw),T(j5.$$.fragment,pw),pw.forEach(t),BSr=i(Hl),zr=n(Hl,"DIV",{class:!0});var Ul=s(zr);T(d8.$$.fragment,Ul),PSr=i(Ul),V7e=n(Ul,"P",{});var yEt=s(V7e);ISr=r(yEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yEt.forEach(t),qSr=i(Ul),_n=n(Ul,"P",{});var uw=s(_n);NSr=r(uw,"The model class to instantiate is selected based on the "),X7e=n(uw,"CODE",{});var LEt=s(X7e);jSr=r(LEt,"model_type"),LEt.forEach(t),DSr=r(uw,` property of the config object (either
passed as an argument or loaded from `),z7e=n(uw,"CODE",{});var xEt=s(z7e);GSr=r(xEt,"pretrained_model_name_or_path"),xEt.forEach(t),OSr=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=n(uw,"CODE",{});var $Et=s(Q7e);VSr=r($Et,"pretrained_model_name_or_path"),$Et.forEach(t),XSr=r(uw,":"),uw.forEach(t),zSr=i(Ul),Ge=n(Ul,"UL",{});var To=s(Ge);D5=n(To,"LI",{});var pBe=s(D5);W7e=n(pBe,"STRONG",{});var kEt=s(W7e);QSr=r(kEt,"albert"),kEt.forEach(t),WSr=r(pBe," \u2014 "),oY=n(pBe,"A",{href:!0});var SEt=s(oY);HSr=r(SEt,"FlaxAlbertForMultipleChoice"),SEt.forEach(t),USr=r(pBe," (ALBERT model)"),pBe.forEach(t),JSr=i(To),G5=n(To,"LI",{});var uBe=s(G5);H7e=n(uBe,"STRONG",{});var REt=s(H7e);YSr=r(REt,"bert"),REt.forEach(t),KSr=r(uBe," \u2014 "),rY=n(uBe,"A",{href:!0});var BEt=s(rY);ZSr=r(BEt,"FlaxBertForMultipleChoice"),BEt.forEach(t),eRr=r(uBe," (BERT model)"),uBe.forEach(t),oRr=i(To),O5=n(To,"LI",{});var _Be=s(O5);U7e=n(_Be,"STRONG",{});var PEt=s(U7e);rRr=r(PEt,"big_bird"),PEt.forEach(t),tRr=r(_Be," \u2014 "),tY=n(_Be,"A",{href:!0});var IEt=s(tY);aRr=r(IEt,"FlaxBigBirdForMultipleChoice"),IEt.forEach(t),nRr=r(_Be," (BigBird model)"),_Be.forEach(t),sRr=i(To),V5=n(To,"LI",{});var bBe=s(V5);J7e=n(bBe,"STRONG",{});var qEt=s(J7e);lRr=r(qEt,"distilbert"),qEt.forEach(t),iRr=r(bBe," \u2014 "),aY=n(bBe,"A",{href:!0});var NEt=s(aY);dRr=r(NEt,"FlaxDistilBertForMultipleChoice"),NEt.forEach(t),cRr=r(bBe," (DistilBERT model)"),bBe.forEach(t),fRr=i(To),X5=n(To,"LI",{});var vBe=s(X5);Y7e=n(vBe,"STRONG",{});var jEt=s(Y7e);mRr=r(jEt,"electra"),jEt.forEach(t),gRr=r(vBe," \u2014 "),nY=n(vBe,"A",{href:!0});var DEt=s(nY);hRr=r(DEt,"FlaxElectraForMultipleChoice"),DEt.forEach(t),pRr=r(vBe," (ELECTRA model)"),vBe.forEach(t),uRr=i(To),z5=n(To,"LI",{});var FBe=s(z5);K7e=n(FBe,"STRONG",{});var GEt=s(K7e);_Rr=r(GEt,"roberta"),GEt.forEach(t),bRr=r(FBe," \u2014 "),sY=n(FBe,"A",{href:!0});var OEt=s(sY);vRr=r(OEt,"FlaxRobertaForMultipleChoice"),OEt.forEach(t),FRr=r(FBe," (RoBERTa model)"),FBe.forEach(t),TRr=i(To),Q5=n(To,"LI",{});var TBe=s(Q5);Z7e=n(TBe,"STRONG",{});var VEt=s(Z7e);MRr=r(VEt,"roformer"),VEt.forEach(t),ERr=r(TBe," \u2014 "),lY=n(TBe,"A",{href:!0});var XEt=s(lY);CRr=r(XEt,"FlaxRoFormerForMultipleChoice"),XEt.forEach(t),wRr=r(TBe," (RoFormer model)"),TBe.forEach(t),ARr=i(To),W5=n(To,"LI",{});var MBe=s(W5);e9e=n(MBe,"STRONG",{});var zEt=s(e9e);yRr=r(zEt,"xlm-roberta"),zEt.forEach(t),LRr=r(MBe," \u2014 "),iY=n(MBe,"A",{href:!0});var QEt=s(iY);xRr=r(QEt,"FlaxXLMRobertaForMultipleChoice"),QEt.forEach(t),$Rr=r(MBe," (XLM-RoBERTa model)"),MBe.forEach(t),To.forEach(t),kRr=i(Ul),T(H5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),MIe=i(f),zc=n(f,"H2",{class:!0});var ANe=s(zc);U5=n(ANe,"A",{id:!0,class:!0,href:!0});var WEt=s(U5);o9e=n(WEt,"SPAN",{});var HEt=s(o9e);T(c8.$$.fragment,HEt),HEt.forEach(t),WEt.forEach(t),SRr=i(ANe),r9e=n(ANe,"SPAN",{});var UEt=s(r9e);RRr=r(UEt,"FlaxAutoModelForNextSentencePrediction"),UEt.forEach(t),ANe.forEach(t),EIe=i(f),vr=n(f,"DIV",{class:!0});var Jl=s(vr);T(f8.$$.fragment,Jl),BRr=i(Jl),Qc=n(Jl,"P",{});var lZ=s(Qc);PRr=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dY=n(lZ,"A",{href:!0});var JEt=s(dY);IRr=r(JEt,"from_pretrained()"),JEt.forEach(t),qRr=r(lZ," class method or the "),cY=n(lZ,"A",{href:!0});var YEt=s(cY);NRr=r(YEt,"from_config()"),YEt.forEach(t),jRr=r(lZ,` class
method.`),lZ.forEach(t),DRr=i(Jl),m8=n(Jl,"P",{});var yNe=s(m8);GRr=r(yNe,"This class cannot be instantiated directly using "),t9e=n(yNe,"CODE",{});var KEt=s(t9e);ORr=r(KEt,"__init__()"),KEt.forEach(t),VRr=r(yNe," (throws an error)."),yNe.forEach(t),XRr=i(Jl),zt=n(Jl,"DIV",{class:!0});var _w=s(zt);T(g8.$$.fragment,_w),zRr=i(_w),a9e=n(_w,"P",{});var ZEt=s(a9e);QRr=r(ZEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ZEt.forEach(t),WRr=i(_w),Wc=n(_w,"P",{});var iZ=s(Wc);HRr=r(iZ,`Note:
Loading a model from its configuration file does `),n9e=n(iZ,"STRONG",{});var e5t=s(n9e);URr=r(e5t,"not"),e5t.forEach(t),JRr=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(iZ,"A",{href:!0});var o5t=s(fY);YRr=r(o5t,"from_pretrained()"),o5t.forEach(t),KRr=r(iZ," to load the model weights."),iZ.forEach(t),ZRr=i(_w),T(J5.$$.fragment,_w),_w.forEach(t),eBr=i(Jl),Qr=n(Jl,"DIV",{class:!0});var Yl=s(Qr);T(h8.$$.fragment,Yl),oBr=i(Yl),s9e=n(Yl,"P",{});var r5t=s(s9e);rBr=r(r5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),r5t.forEach(t),tBr=i(Yl),bn=n(Yl,"P",{});var bw=s(bn);aBr=r(bw,"The model class to instantiate is selected based on the "),l9e=n(bw,"CODE",{});var t5t=s(l9e);nBr=r(t5t,"model_type"),t5t.forEach(t),sBr=r(bw,` property of the config object (either
passed as an argument or loaded from `),i9e=n(bw,"CODE",{});var a5t=s(i9e);lBr=r(a5t,"pretrained_model_name_or_path"),a5t.forEach(t),iBr=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d9e=n(bw,"CODE",{});var n5t=s(d9e);dBr=r(n5t,"pretrained_model_name_or_path"),n5t.forEach(t),cBr=r(bw,":"),bw.forEach(t),fBr=i(Yl),c9e=n(Yl,"UL",{});var s5t=s(c9e);Y5=n(s5t,"LI",{});var EBe=s(Y5);f9e=n(EBe,"STRONG",{});var l5t=s(f9e);mBr=r(l5t,"bert"),l5t.forEach(t),gBr=r(EBe," \u2014 "),mY=n(EBe,"A",{href:!0});var i5t=s(mY);hBr=r(i5t,"FlaxBertForNextSentencePrediction"),i5t.forEach(t),pBr=r(EBe," (BERT model)"),EBe.forEach(t),s5t.forEach(t),uBr=i(Yl),T(K5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),CIe=i(f),Hc=n(f,"H2",{class:!0});var LNe=s(Hc);Z5=n(LNe,"A",{id:!0,class:!0,href:!0});var d5t=s(Z5);m9e=n(d5t,"SPAN",{});var c5t=s(m9e);T(p8.$$.fragment,c5t),c5t.forEach(t),d5t.forEach(t),_Br=i(LNe),g9e=n(LNe,"SPAN",{});var f5t=s(g9e);bBr=r(f5t,"FlaxAutoModelForImageClassification"),f5t.forEach(t),LNe.forEach(t),wIe=i(f),Fr=n(f,"DIV",{class:!0});var Kl=s(Fr);T(u8.$$.fragment,Kl),vBr=i(Kl),Uc=n(Kl,"P",{});var dZ=s(Uc);FBr=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gY=n(dZ,"A",{href:!0});var m5t=s(gY);TBr=r(m5t,"from_pretrained()"),m5t.forEach(t),MBr=r(dZ," class method or the "),hY=n(dZ,"A",{href:!0});var g5t=s(hY);EBr=r(g5t,"from_config()"),g5t.forEach(t),CBr=r(dZ,` class
method.`),dZ.forEach(t),wBr=i(Kl),_8=n(Kl,"P",{});var xNe=s(_8);ABr=r(xNe,"This class cannot be instantiated directly using "),h9e=n(xNe,"CODE",{});var h5t=s(h9e);yBr=r(h5t,"__init__()"),h5t.forEach(t),LBr=r(xNe," (throws an error)."),xNe.forEach(t),xBr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var vw=s(Qt);T(b8.$$.fragment,vw),$Br=i(vw),p9e=n(vw,"P",{});var p5t=s(p9e);kBr=r(p5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),p5t.forEach(t),SBr=i(vw),Jc=n(vw,"P",{});var cZ=s(Jc);RBr=r(cZ,`Note:
Loading a model from its configuration file does `),u9e=n(cZ,"STRONG",{});var u5t=s(u9e);BBr=r(u5t,"not"),u5t.forEach(t),PBr=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=n(cZ,"A",{href:!0});var _5t=s(pY);IBr=r(_5t,"from_pretrained()"),_5t.forEach(t),qBr=r(cZ," to load the model weights."),cZ.forEach(t),NBr=i(vw),T(eC.$$.fragment,vw),vw.forEach(t),jBr=i(Kl),Wr=n(Kl,"DIV",{class:!0});var Zl=s(Wr);T(v8.$$.fragment,Zl),DBr=i(Zl),_9e=n(Zl,"P",{});var b5t=s(_9e);GBr=r(b5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),b5t.forEach(t),OBr=i(Zl),vn=n(Zl,"P",{});var Fw=s(vn);VBr=r(Fw,"The model class to instantiate is selected based on the "),b9e=n(Fw,"CODE",{});var v5t=s(b9e);XBr=r(v5t,"model_type"),v5t.forEach(t),zBr=r(Fw,` property of the config object (either
passed as an argument or loaded from `),v9e=n(Fw,"CODE",{});var F5t=s(v9e);QBr=r(F5t,"pretrained_model_name_or_path"),F5t.forEach(t),WBr=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F9e=n(Fw,"CODE",{});var T5t=s(F9e);HBr=r(T5t,"pretrained_model_name_or_path"),T5t.forEach(t),UBr=r(Fw,":"),Fw.forEach(t),JBr=i(Zl),F8=n(Zl,"UL",{});var $Ne=s(F8);oC=n($Ne,"LI",{});var CBe=s(oC);T9e=n(CBe,"STRONG",{});var M5t=s(T9e);YBr=r(M5t,"beit"),M5t.forEach(t),KBr=r(CBe," \u2014 "),uY=n(CBe,"A",{href:!0});var E5t=s(uY);ZBr=r(E5t,"FlaxBeitForImageClassification"),E5t.forEach(t),ePr=r(CBe," (BEiT model)"),CBe.forEach(t),oPr=i($Ne),rC=n($Ne,"LI",{});var wBe=s(rC);M9e=n(wBe,"STRONG",{});var C5t=s(M9e);rPr=r(C5t,"vit"),C5t.forEach(t),tPr=r(wBe," \u2014 "),_Y=n(wBe,"A",{href:!0});var w5t=s(_Y);aPr=r(w5t,"FlaxViTForImageClassification"),w5t.forEach(t),nPr=r(wBe," (ViT model)"),wBe.forEach(t),$Ne.forEach(t),sPr=i(Zl),T(tC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),AIe=i(f),Yc=n(f,"H2",{class:!0});var kNe=s(Yc);aC=n(kNe,"A",{id:!0,class:!0,href:!0});var A5t=s(aC);E9e=n(A5t,"SPAN",{});var y5t=s(E9e);T(T8.$$.fragment,y5t),y5t.forEach(t),A5t.forEach(t),lPr=i(kNe),C9e=n(kNe,"SPAN",{});var L5t=s(C9e);iPr=r(L5t,"FlaxAutoModelForVision2Seq"),L5t.forEach(t),kNe.forEach(t),yIe=i(f),Tr=n(f,"DIV",{class:!0});var ei=s(Tr);T(M8.$$.fragment,ei),dPr=i(ei),Kc=n(ei,"P",{});var fZ=s(Kc);cPr=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bY=n(fZ,"A",{href:!0});var x5t=s(bY);fPr=r(x5t,"from_pretrained()"),x5t.forEach(t),mPr=r(fZ," class method or the "),vY=n(fZ,"A",{href:!0});var $5t=s(vY);gPr=r($5t,"from_config()"),$5t.forEach(t),hPr=r(fZ,` class
method.`),fZ.forEach(t),pPr=i(ei),E8=n(ei,"P",{});var SNe=s(E8);uPr=r(SNe,"This class cannot be instantiated directly using "),w9e=n(SNe,"CODE",{});var k5t=s(w9e);_Pr=r(k5t,"__init__()"),k5t.forEach(t),bPr=r(SNe," (throws an error)."),SNe.forEach(t),vPr=i(ei),Wt=n(ei,"DIV",{class:!0});var Tw=s(Wt);T(C8.$$.fragment,Tw),FPr=i(Tw),A9e=n(Tw,"P",{});var S5t=s(A9e);TPr=r(S5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),S5t.forEach(t),MPr=i(Tw),Zc=n(Tw,"P",{});var mZ=s(Zc);EPr=r(mZ,`Note:
Loading a model from its configuration file does `),y9e=n(mZ,"STRONG",{});var R5t=s(y9e);CPr=r(R5t,"not"),R5t.forEach(t),wPr=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(mZ,"A",{href:!0});var B5t=s(FY);APr=r(B5t,"from_pretrained()"),B5t.forEach(t),yPr=r(mZ," to load the model weights."),mZ.forEach(t),LPr=i(Tw),T(nC.$$.fragment,Tw),Tw.forEach(t),xPr=i(ei),Hr=n(ei,"DIV",{class:!0});var oi=s(Hr);T(w8.$$.fragment,oi),$Pr=i(oi),L9e=n(oi,"P",{});var P5t=s(L9e);kPr=r(P5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),P5t.forEach(t),SPr=i(oi),Fn=n(oi,"P",{});var Mw=s(Fn);RPr=r(Mw,"The model class to instantiate is selected based on the "),x9e=n(Mw,"CODE",{});var I5t=s(x9e);BPr=r(I5t,"model_type"),I5t.forEach(t),PPr=r(Mw,` property of the config object (either
passed as an argument or loaded from `),$9e=n(Mw,"CODE",{});var q5t=s($9e);IPr=r(q5t,"pretrained_model_name_or_path"),q5t.forEach(t),qPr=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k9e=n(Mw,"CODE",{});var N5t=s(k9e);NPr=r(N5t,"pretrained_model_name_or_path"),N5t.forEach(t),jPr=r(Mw,":"),Mw.forEach(t),DPr=i(oi),S9e=n(oi,"UL",{});var j5t=s(S9e);sC=n(j5t,"LI",{});var ABe=s(sC);R9e=n(ABe,"STRONG",{});var D5t=s(R9e);GPr=r(D5t,"vision-encoder-decoder"),D5t.forEach(t),OPr=r(ABe," \u2014 "),TY=n(ABe,"A",{href:!0});var G5t=s(TY);VPr=r(G5t,"FlaxVisionEncoderDecoderModel"),G5t.forEach(t),XPr=r(ABe," (Vision Encoder decoder model)"),ABe.forEach(t),j5t.forEach(t),zPr=i(oi),T(lC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(V3t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Mn,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.AutoConfig"),c(Cn,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.AutoModel"),c(wn,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.AutoTokenizer"),c(ii,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertModel"),c(lf,"id","extending-the-auto-classes"),c(lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lf,"href","#extending-the-auto-classes"),c(di,"class","relative group"),c(cf,"id","transformers.AutoConfig"),c(cf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cf,"href","#transformers.AutoConfig"),c(ci,"class","relative group"),c(zx,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Qx,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertConfig"),c(Wx,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig"),c(Hx,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitConfig"),c(Ux,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertConfig"),c(Jx,"href","/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Yx,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Kx,"href","/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Zx,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(e$,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(o$,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertConfig"),c(r$,"href","/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineConfig"),c(t$,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPConfig"),c(a$,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertConfig"),c(n$,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextConfig"),c(s$,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLConfig"),c(l$,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(i$,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(d$,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(c$,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaConfig"),c(f$,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(m$,"href","/docs/transformers/pr_17109/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(g$,"href","/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTConfig"),c(h$,"href","/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrConfig"),c(p$,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertConfig"),c(u$,"href","/docs/transformers/pr_17109/en/model_doc/dpr#transformers.DPRConfig"),c(_$,"href","/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTConfig"),c(b$,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraConfig"),c(v$,"href","/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(F$,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertConfig"),c(T$,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetConfig"),c(M$,"href","/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTConfig"),c(E$,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelConfig"),c(C$,"href","/docs/transformers/pr_17109/en/model_doc/glpn#transformers.GLPNConfig"),c(w$,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Config"),c(A$,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(y$,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJConfig"),c(L$,"href","/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertConfig"),c(x$,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertConfig"),c($$,"href","/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(k$,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(S$,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(R$,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDConfig"),c(B$,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerConfig"),c(P$,"href","/docs/transformers/pr_17109/en/model_doc/luke#transformers.LukeConfig"),c(I$,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertConfig"),c(q$,"href","/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100Config"),c(N$,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianConfig"),c(j$,"href","/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(D$,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartConfig"),c(G$,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(O$,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(V$,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetConfig"),c(X$,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Config"),c(z$,"href","/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Q$,"href","/docs/transformers/pr_17109/en/model_doc/ofa#transformers.OFAConfig"),c(W$,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(H$,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusConfig"),c(U$,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverConfig"),c(J$,"href","/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartConfig"),c(Y$,"href","/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(K$,"href","/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Z$,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(ek,"href","/docs/transformers/pr_17109/en/model_doc/rag#transformers.RagConfig"),c(ok,"href","/docs/transformers/pr_17109/en/model_doc/realm#transformers.RealmConfig"),c(rk,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerConfig"),c(tk,"href","/docs/transformers/pr_17109/en/model_doc/regnet#transformers.RegNetConfig"),c(ak,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertConfig"),c(nk,"href","/docs/transformers/pr_17109/en/model_doc/resnet#transformers.ResNetConfig"),c(sk,"href","/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertConfig"),c(lk,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaConfig"),c(ik,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerConfig"),c(dk,"href","/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerConfig"),c(ck,"href","/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWConfig"),c(fk,"href","/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDConfig"),c(mk,"href","/docs/transformers/pr_17109/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(gk,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(hk,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(pk,"href","/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterConfig"),c(uk,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(_k,"href","/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinConfig"),c(bk,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Config"),c(vk,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasConfig"),c(Fk,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartConfig"),c(Tk,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Mk,"href","/docs/transformers/pr_17109/en/model_doc/trocr#transformers.TrOCRConfig"),c(Ek,"href","/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Ck,"href","/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(wk,"href","/docs/transformers/pr_17109/en/model_doc/van#transformers.VanConfig"),c(Ak,"href","/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltConfig"),c(yk,"href","/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Lk,"href","/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(xk,"href","/docs/transformers/pr_17109/en/model_doc/visual_bert#transformers.VisualBertConfig"),c($k,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTConfig"),c(kk,"href","/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(Sk,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Rk,"href","/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMConfig"),c(Bk,"href","/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMConfig"),c(Pk,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMConfig"),c(Ik,"href","/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(qk,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(Nk,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(jk,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetConfig"),c(Dk,"href","/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosConfig"),c(Gk,"href","/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoConfig"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ig,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dg,"id","transformers.AutoTokenizer"),c(dg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dg,"href","#transformers.AutoTokenizer"),c(mi,"class","relative group"),c(Ok,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(Vk,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertTokenizer"),c(Xk,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(zk,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartTokenizer"),c(Qk,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartTokenizerFast"),c(Wk,"href","/docs/transformers/pr_17109/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Hk,"href","/docs/transformers/pr_17109/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(Uk,"href","/docs/transformers/pr_17109/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Jk,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizer"),c(Yk,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizerFast"),c(Kk,"href","/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Zk,"href","/docs/transformers/pr_17109/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(eS,"href","/docs/transformers/pr_17109/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(oS,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(rS,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(tS,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(aS,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(nS,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(sS,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(lS,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(iS,"href","/docs/transformers/pr_17109/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(dS,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertTokenizer"),c(cS,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(fS,"href","/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineTokenizer"),c(mS,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPTokenizer"),c(gS,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(hS,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(pS,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(uS,"href","/docs/transformers/pr_17109/en/model_doc/cpm#transformers.CpmTokenizer"),c(_S,"href","/docs/transformers/pr_17109/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(bS,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(vS,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizer"),c(FS,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(TS,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaTokenizer"),c(MS,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(ES,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(CS,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(wS,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(AS,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(yS,"href","/docs/transformers/pr_17109/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(LS,"href","/docs/transformers/pr_17109/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(xS,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraTokenizer"),c($S,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(kS,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(SS,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetTokenizer"),c(RS,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(BS,"href","/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(PS,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelTokenizer"),c(IS,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(qS,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(NS,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(jS,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(DS,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(GS,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(OS,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(VS,"href","/docs/transformers/pr_17109/en/model_doc/herbert#transformers.HerbertTokenizer"),c(XS,"href","/docs/transformers/pr_17109/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(zS,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(QS,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizer"),c(WS,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(HS,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(US,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(JS,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(YS,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(KS,"href","/docs/transformers/pr_17109/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(ZS,"href","/docs/transformers/pr_17109/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(eR,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDTokenizer"),c(oR,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDTokenizerFast"),c(rR,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerTokenizer"),c(tR,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(aR,"href","/docs/transformers/pr_17109/en/model_doc/luke#transformers.LukeTokenizer"),c(nR,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(sR,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(lR,"href","/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(iR,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianTokenizer"),c(dR,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartTokenizer"),c(cR,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(fR,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(mR,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(gR,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizer"),c(hR,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizerFast"),c(pR,"href","/docs/transformers/pr_17109/en/model_doc/mluke#transformers.MLukeTokenizer"),c(uR,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(_R,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(bR,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(vR,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(FR,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.T5Tokenizer"),c(TR,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.T5TokenizerFast"),c(MR,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertTokenizer"),c(ER,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(CR,"href","/docs/transformers/pr_17109/en/model_doc/ofa#transformers.OFATokenizer"),c(wR,"href","/docs/transformers/pr_17109/en/model_doc/ofa#transformers.OFATokenizerFast"),c(AR,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(yR,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(LR,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(xR,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c($R,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(kR,"href","/docs/transformers/pr_17109/en/model_doc/phobert#transformers.PhobertTokenizer"),c(SR,"href","/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartTokenizer"),c(RR,"href","/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(BR,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizer"),c(PR,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizerFast"),c(IR,"href","/docs/transformers/pr_17109/en/model_doc/rag#transformers.RagTokenizer"),c(qR,"href","/docs/transformers/pr_17109/en/model_doc/realm#transformers.RealmTokenizer"),c(NR,"href","/docs/transformers/pr_17109/en/model_doc/realm#transformers.RealmTokenizerFast"),c(jR,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerTokenizer"),c(DR,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(GR,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertTokenizer"),c(OR,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(VR,"href","/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(XR,"href","/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(zR,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizer"),c(QR,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(WR,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(HR,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(UR,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(JR,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(YR,"href","/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterTokenizer"),c(KR,"href","/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(eB,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(oB,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.T5Tokenizer"),c(rB,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.T5TokenizerFast"),c(tB,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasTokenizer"),c(aB,"href","/docs/transformers/pr_17109/en/model_doc/tapex#transformers.TapexTokenizer"),c(nB,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(sB,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizer"),c(lB,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertTokenizerFast"),c(iB,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(dB,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(cB,"href","/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMTokenizer"),c(fB,"href","/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(mB,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMTokenizer"),c(gB,"href","/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(hB,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(pB,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(uB,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_B,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bB,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(vB,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(FB,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertTokenizer"),c(TB,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gg,"id","transformers.AutoFeatureExtractor"),c(Gg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gg,"href","#transformers.AutoFeatureExtractor"),c(gi,"class","relative group"),c(MB,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(EB,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(CB,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(wB,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AB,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(yB,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(LB,"href","/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(xB,"href","/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrFeatureExtractor"),c($B,"href","/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(kB,"href","/docs/transformers/pr_17109/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(SB,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(RB,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(BB,"href","/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(PB,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(IB,"href","/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(qB,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(NB,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(jB,"href","/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(DB,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(QB,"href","/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ph,"id","transformers.AutoProcessor"),c(ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ph,"href","#transformers.AutoProcessor"),c(hi,"class","relative group"),c(WB,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(HB,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPProcessor"),c(UB,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(JB,"href","/docs/transformers/pr_17109/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(YB,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KB,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ZB,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(eP,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(oP,"href","/docs/transformers/pr_17109/en/model_doc/trocr#transformers.TrOCRProcessor"),c(rP,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tP,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(aP,"href","/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltProcessor"),c(nP,"href","/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(sP,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(lP,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"id","transformers.AutoModel"),c(Rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rh,"href","#transformers.AutoModel"),c(ui,"class","relative group"),c(iP,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dP,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cP,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fP,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertModel"),c(mP,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartModel"),c(gP,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitModel"),c(hP,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertModel"),c(pP,"href","/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(uP,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdModel"),c(_P,"href","/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(bP,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(vP,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(FP,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertModel"),c(TP,"href","/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineModel"),c(MP,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.CLIPModel"),c(EP,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertModel"),c(CP,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextModel"),c(wP,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLModel"),c(AP,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(yP,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(LP,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(xP,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaModel"),c($P,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(kP,"href","/docs/transformers/pr_17109/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(SP,"href","/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTModel"),c(RP,"href","/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrModel"),c(BP,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertModel"),c(PP,"href","/docs/transformers/pr_17109/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(IP,"href","/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTModel"),c(qP,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraModel"),c(NP,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertModel"),c(jP,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetModel"),c(DP,"href","/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTModel"),c(GP,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelModel"),c(OP,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelBaseModel"),c(VP,"href","/docs/transformers/pr_17109/en/model_doc/glpn#transformers.GLPNModel"),c(XP,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2Model"),c(zP,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(QP,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJModel"),c(WP,"href","/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertModel"),c(HP,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertModel"),c(UP,"href","/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(JP,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(YP,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(KP,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDModel"),c(ZP,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerModel"),c(eI,"href","/docs/transformers/pr_17109/en/model_doc/luke#transformers.LukeModel"),c(oI,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertModel"),c(rI,"href","/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100Model"),c(tI,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianModel"),c(aI,"href","/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerModel"),c(nI,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartModel"),c(sI,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(lI,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertModel"),c(iI,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetModel"),c(dI,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5Model"),c(cI,"href","/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerModel"),c(fI,"href","/docs/transformers/pr_17109/en/model_doc/ofa#transformers.OFAModel"),c(mI,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(gI,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusModel"),c(hI,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverModel"),c(pI,"href","/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartModel"),c(uI,"href","/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerModel"),c(_I,"href","/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(bI,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertModel"),c(vI,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerModel"),c(FI,"href","/docs/transformers/pr_17109/en/model_doc/regnet#transformers.RegNetModel"),c(TI,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertModel"),c(MI,"href","/docs/transformers/pr_17109/en/model_doc/resnet#transformers.ResNetModel"),c(EI,"href","/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertModel"),c(CI,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaModel"),c(wI,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerModel"),c(AI,"href","/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerModel"),c(yI,"href","/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWModel"),c(LI,"href","/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDModel"),c(xI,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c($I,"href","/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterModel"),c(kI,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(SI,"href","/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinModel"),c(RI,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5Model"),c(BI,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasModel"),c(PI,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(II,"href","/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechModel"),c(qI,"href","/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(NI,"href","/docs/transformers/pr_17109/en/model_doc/van#transformers.VanModel"),c(jI,"href","/docs/transformers/pr_17109/en/model_doc/vilt#transformers.ViltModel"),c(DI,"href","/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(GI,"href","/docs/transformers/pr_17109/en/model_doc/visual_bert#transformers.VisualBertModel"),c(OI,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTModel"),c(VI,"href","/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(XI,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(zI,"href","/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMModel"),c(QI,"href","/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMModel"),c(WI,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMModel"),c(HI,"href","/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(UI,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(JI,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(YI,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetModel"),c(KI,"href","/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosModel"),c(ZI,"href","/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cu,"id","transformers.AutoModelForPreTraining"),c(Cu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cu,"href","#transformers.AutoModelForPreTraining"),c(vi,"class","relative group"),c(eq,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oq,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rq,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tq,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForPreTraining"),c(aq,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(nq,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForPreTraining"),c(sq,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(lq,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(iq,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(dq,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(cq,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(fq,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(mq,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(gq,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForPreTraining"),c(hq,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(pq,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForPreTraining"),c(uq,"href","/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(_q,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(bq,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(vq,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Fq,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Tq,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Mq,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Eq,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Cq,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(wq,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Aq,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(yq,"href","/docs/transformers/pr_17109/en/model_doc/retribert#transformers.RetriBertModel"),c(Lq,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(xq,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c($q,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(kq,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Sq,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Rq,"href","/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Bq,"href","/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Pq,"href","/docs/transformers/pr_17109/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Iq,"href","/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(qq,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Nq,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(jq,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Dq,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Gq,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g_,"id","transformers.AutoModelForCausalLM"),c(g_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g_,"href","#transformers.AutoModelForCausalLM"),c(Mi,"class","relative group"),c(Oq,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vq,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xq,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zq,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForCausalLM"),c(Qq,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertLMHeadModel"),c(Wq,"href","/docs/transformers/pr_17109/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Hq,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Uq,"href","/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Jq,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Yq,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Kq,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Zq,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(eN,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(oN,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForCausalLM"),c(rN,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(tN,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(aN,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(nN,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianForCausalLM"),c(sN,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForCausalLM"),c(lN,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(iN,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(dN,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(cN,"href","/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(fN,"href","/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(mN,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(gN,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(hN,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(pN,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(uN,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(_N,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(bN,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(vN,"href","/docs/transformers/pr_17109/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(FN,"href","/docs/transformers/pr_17109/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(TN,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(MN,"href","/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(EN,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(CN,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(wN,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K_,"id","transformers.AutoModelForMaskedLM"),c(K_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K_,"href","#transformers.AutoModelForMaskedLM"),c(wi,"class","relative group"),c(AN,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yN,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LN,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xN,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForMaskedLM"),c($N,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(kN,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForMaskedLM"),c(SN,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(RN,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(BN,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(PN,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(IN,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(qN,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(NN,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(jN,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(DN,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(GN,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(ON,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(VN,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(XN,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(zN,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(QN,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(WN,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(HN,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(UN,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(JN,"href","/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(YN,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(KN,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(ZN,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(ej,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(oj,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(rj,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(tj,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(aj,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(nj,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(sj,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(lj,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(ij,"href","/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q1,"id","transformers.AutoModelForSeq2SeqLM"),c(q1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Li,"class","relative group"),c(dj,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cj,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fj,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mj,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gj,"href","/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(hj,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(pj,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(uj,"href","/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(_j,"href","/docs/transformers/pr_17109/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(bj,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(vj,"href","/docs/transformers/pr_17109/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Fj,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.MarianMTModel"),c(Tj,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Mj,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Ej,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Cj,"href","/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(wj,"href","/docs/transformers/pr_17109/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Aj,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(yj,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Lj,"href","/docs/transformers/pr_17109/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ab,"id","transformers.AutoModelForSequenceClassification"),c(ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ab,"href","#transformers.AutoModelForSequenceClassification"),c(ki,"class","relative group"),c(xj,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($j,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kj,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sj,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Rj,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Bj,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Pj,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Ij,"href","/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(qj,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Nj,"href","/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(jj,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(zj,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(eD,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(oD,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDForSequenceClassification"),c(rD,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(tD,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(aD,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(nD,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(sD,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(lD,"href","/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(iD,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(dD,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(cD,"href","/docs/transformers/pr_17109/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(fD,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(mD,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(gD,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(hD,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(pD,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(uD,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(_D,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(bD,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForSequenceClassification"),c(vD,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(FD,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(TD,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o2,"id","transformers.AutoModelForMultipleChoice"),c(o2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o2,"href","#transformers.AutoModelForMultipleChoice"),c(Bi,"class","relative group"),c(wD,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AD,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yD,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LD,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(xD,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForMultipleChoice"),c($D,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(kD,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(SD,"href","/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(RD,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(BD,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(PD,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(ID,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(qD,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(ND,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(jD,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(DD,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(GD,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(OD,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(VD,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(XD,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(zD,"href","/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(QD,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(WD,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(HD,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(UD,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(JD,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(YD,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(KD,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(ZD,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(eG,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(oG,"href","/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R2,"id","transformers.AutoModelForNextSentencePrediction"),c(R2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R2,"href","#transformers.AutoModelForNextSentencePrediction"),c(qi,"class","relative group"),c(rG,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tG,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aG,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nG,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(sG,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(lG,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(iG,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(dG,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O2,"id","transformers.AutoModelForTokenClassification"),c(O2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O2,"href","#transformers.AutoModelForTokenClassification"),c(Di,"class","relative group"),c(cG,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fG,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mG,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gG,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(hG,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForTokenClassification"),c(pG,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(uG,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(_G,"href","/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForTokenClassification"),c(bG,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(vG,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(FG,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(TG,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(MG,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(EG,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(CG,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(wG,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(AG,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(yG,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(LG,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(xG,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c($G,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(kG,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(SG,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(RG,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(BG,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(PG,"href","/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(IG,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(qG,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(NG,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(jG,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(DG,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(GG,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(OG,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(VG,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(XG,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(zG,"href","/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wv,"id","transformers.AutoModelForQuestionAnswering"),c(wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wv,"href","#transformers.AutoModelForQuestionAnswering"),c(Vi,"class","relative group"),c(QG,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WG,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HG,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UG,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(JG,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(YG,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(KG,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(ZG,"href","/docs/transformers/pr_17109/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(eO,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(oO,"href","/docs/transformers/pr_17109/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(rO,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(tO,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(aO,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(nO,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(lO,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(iO,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(dO,"href","/docs/transformers/pr_17109/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(cO,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(fO,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(mO,"href","/docs/transformers/pr_17109/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(gO,"href","/docs/transformers/pr_17109/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(hO,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(pO,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(uO,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(_O,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(bO,"href","/docs/transformers/pr_17109/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(vO,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(FO,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(TO,"href","/docs/transformers/pr_17109/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(MO,"href","/docs/transformers/pr_17109/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(EO,"href","/docs/transformers/pr_17109/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_17109/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_17109/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c($O,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(RO,"href","/docs/transformers/pr_17109/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hF,"id","transformers.AutoModelForTableQuestionAnswering"),c(hF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Qi,"class","relative group"),c(BO,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PO,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IO,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qO,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vF,"id","transformers.AutoModelForImageClassification"),c(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vF,"href","#transformers.AutoModelForImageClassification"),c(Ui,"class","relative group"),c(NO,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jO,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DO,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GO,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitForImageClassification"),c(OO,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(VO,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(XO,"href","/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTForImageClassification"),c(zO,"href","/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(QO,"href","/docs/transformers/pr_17109/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(WO,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(HO,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(UO,"href","/docs/transformers/pr_17109/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(JO,"href","/docs/transformers/pr_17109/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(YO,"href","/docs/transformers/pr_17109/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(KO,"href","/docs/transformers/pr_17109/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(ZO,"href","/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(eV,"href","/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinForImageClassification"),c(oV,"href","/docs/transformers/pr_17109/en/model_doc/van#transformers.VanForImageClassification"),c(rV,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForVision2Seq"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForVision2Seq"),c(Ki,"class","relative group"),c(tV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sV,"href","/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jF,"id","transformers.AutoModelForAudioClassification"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.AutoModelForAudioClassification"),c(od,"class","relative group"),c(lV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cV,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YF,"id","transformers.AutoModelForAudioFrameClassification"),c(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YF,"href","#transformers.AutoModelForAudioFrameClassification"),c(ad,"class","relative group"),c(bV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TV,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(MV,"href","/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(EV,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(CV,"href","/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n0,"id","transformers.AutoModelForCTC"),c(n0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n0,"href","#transformers.AutoModelForCTC"),c(ld,"class","relative group"),c(wV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LV,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(xV,"href","/docs/transformers/pr_17109/en/model_doc/hubert#transformers.HubertForCTC"),c($V,"href","/docs/transformers/pr_17109/en/model_doc/sew#transformers.SEWForCTC"),c(kV,"href","/docs/transformers/pr_17109/en/model_doc/sew-d#transformers.SEWDForCTC"),c(SV,"href","/docs/transformers/pr_17109/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(RV,"href","/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(BV,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(PV,"href","/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_0,"id","transformers.AutoModelForSpeechSeq2Seq"),c(_0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_0,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(cd,"class","relative group"),c(IV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jV,"href","/docs/transformers/pr_17109/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(DV,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E0,"id","transformers.AutoModelForAudioXVector"),c(E0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E0,"href","#transformers.AutoModelForAudioXVector"),c(gd,"class","relative group"),c(GV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XV,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(zV,"href","/docs/transformers/pr_17109/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(QV,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(WV,"href","/docs/transformers/pr_17109/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k0,"id","transformers.AutoModelForMaskedImageModeling"),c(k0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k0,"href","#transformers.AutoModelForMaskedImageModeling"),c(ud,"class","relative group"),c(HV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JV,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YV,"href","/docs/transformers/pr_17109/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(KV,"href","/docs/transformers/pr_17109/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(ZV,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N0,"id","transformers.AutoModelForObjectDetection"),c(N0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N0,"href","#transformers.AutoModelForObjectDetection"),c(Fd,"class","relative group"),c(eX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tX,"href","/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrForObjectDetection"),c(aX,"href","/docs/transformers/pr_17109/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X0,"id","transformers.AutoModelForImageSegmentation"),c(X0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X0,"href","#transformers.AutoModelForImageSegmentation"),c(Ed,"class","relative group"),c(nX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iX,"href","/docs/transformers/pr_17109/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U0,"id","transformers.AutoModelForSemanticSegmentation"),c(U0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U0,"href","#transformers.AutoModelForSemanticSegmentation"),c(Ad,"class","relative group"),c(dX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mX,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(gX,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(hX,"href","/docs/transformers/pr_17109/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(pX,"href","/docs/transformers/pr_17109/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tT,"id","transformers.AutoModelForInstanceSegmentation"),c(tT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tT,"href","#transformers.AutoModelForInstanceSegmentation"),c(xd,"class","relative group"),c(uX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_X,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vX,"href","/docs/transformers/pr_17109/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iT,"id","transformers.TFAutoModel"),c(iT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iT,"href","#transformers.TFAutoModel"),c(Sd,"class","relative group"),c(FX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertModel"),c(CX,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.TFBartModel"),c(wX,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertModel"),c(AX,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(yX,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(LX,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertModel"),c(xX,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.TFCLIPModel"),c($X,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertModel"),c(kX,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.TFConvNextModel"),c(SX,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLModel"),c(RX,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(BX,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaModel"),c(PX,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(IX,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(qX,"href","/docs/transformers/pr_17109/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(NX,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraModel"),c(jX,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(DX,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelModel"),c(GX,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(OX,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2Model"),c(VX,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJModel"),c(XX,"href","/docs/transformers/pr_17109/en/model_doc/hubert#transformers.TFHubertModel"),c(zX,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(QX,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.TFLEDModel"),c(WX,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerModel"),c(HX,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.TFLxmertModel"),c(UX,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.TFMarianModel"),c(JX,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.TFMBartModel"),c(YX,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(KX,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetModel"),c(ZX,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.TFMT5Model"),c(ez,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(oz,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.TFPegasusModel"),c(rz,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertModel"),c(tz,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaModel"),c(az,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerModel"),c(nz,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(sz,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.TFT5Model"),c(lz,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasModel"),c(iz,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(dz,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.TFViTModel"),c(cz,"href","/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(fz,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(mz,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMModel"),c(gz,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(hz,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o7,"id","transformers.TFAutoModelForPreTraining"),c(o7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o7,"href","#transformers.TFAutoModelForPreTraining"),c(Pd,"class","relative group"),c(pz,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uz,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bz,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(vz,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Fz,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Tz,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Mz,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Ez,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Cz,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(wz,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Az,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(yz,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Lz,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(xz,"href","/docs/transformers/pr_17109/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c($z,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(kz,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Sz,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Rz,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Bz,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pz,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Iz,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(qz,"href","/docs/transformers/pr_17109/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(Nz,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(jz,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Dz,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y7,"id","transformers.TFAutoModelForCausalLM"),c(y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y7,"href","#transformers.TFAutoModelForCausalLM"),c(Nd,"class","relative group"),c(Gz,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(zz,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(Qz,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Wz,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Hz,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(Uz,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Jz,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(Yz,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(Kz,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(Zz,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(eQ,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oQ,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O7,"id","transformers.TFAutoModelForImageClassification"),c(O7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O7,"href","#transformers.TFAutoModelForImageClassification"),c(Gd,"class","relative group"),c(rQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nQ,"href","/docs/transformers/pr_17109/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(sQ,"href","/docs/transformers/pr_17109/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(lQ,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H7,"id","transformers.TFAutoModelForMaskedLM"),c(H7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H7,"href","#transformers.TFAutoModelForMaskedLM"),c(zd,"class","relative group"),c(iQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fQ,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(mQ,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(gQ,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(hQ,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(pQ,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(uQ,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(_Q,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(bQ,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(vQ,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(FQ,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(TQ,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(EQ,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(AQ,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(yQ,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(xQ,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c($Q,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_9,"id","transformers.TFAutoModelForSeq2SeqLM"),c(_9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_9,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Hd,"class","relative group"),c(kQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(PQ,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(IQ,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(qQ,"href","/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(NQ,"href","/docs/transformers/pr_17109/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(jQ,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.TFMarianMTModel"),c(DQ,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(GQ,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(OQ,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(VQ,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($9,"id","transformers.TFAutoModelForSequenceClassification"),c($9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($9,"href","#transformers.TFAutoModelForSequenceClassification"),c(Yd,"class","relative group"),c(XQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QQ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WQ,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(HQ,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(UQ,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(JQ,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(YQ,"href","/docs/transformers/pr_17109/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(KQ,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(ZQ,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(eW,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(oW,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(rW,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(tW,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(aW,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(nW,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(sW,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(lW,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(iW,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(dW,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(cW,"href","/docs/transformers/pr_17109/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(fW,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(mW,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(gW,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(hW,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(pW,"href","/docs/transformers/pr_17109/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(uW,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(_W,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(bW,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nM,"id","transformers.TFAutoModelForMultipleChoice"),c(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nM,"href","#transformers.TFAutoModelForMultipleChoice"),c(ec,"class","relative group"),c(vW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(EW,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(CW,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(wW,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(AW,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(yW,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(LW,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(xW,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c($W,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(kW,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(SW,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(RW,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(BW,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(PW,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(IW,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(qW,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(NW,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(tc,"class","relative group"),c(jW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/pr_17109/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xM,"id","transformers.TFAutoModelForTokenClassification"),c(xM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xM,"href","#transformers.TFAutoModelForTokenClassification"),c(sc,"class","relative group"),c(VW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zW,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QW,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(WW,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(HW,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(UW,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(JW,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(YW,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(KW,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(ZW,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(eH,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(oH,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(rH,"href","/docs/transformers/pr_17109/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(tH,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(aH,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(nH,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(sH,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(lH,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(iH,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(dH,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(cH,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(fH,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KM,"id","transformers.TFAutoModelForQuestionAnswering"),c(KM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KM,"href","#transformers.TFAutoModelForQuestionAnswering"),c(dc,"class","relative group"),c(mH,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gH,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hH,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pH,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(uH,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(_H,"href","/docs/transformers/pr_17109/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(bH,"href","/docs/transformers/pr_17109/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(vH,"href","/docs/transformers/pr_17109/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(FH,"href","/docs/transformers/pr_17109/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(TH,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(MH,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(EH,"href","/docs/transformers/pr_17109/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(CH,"href","/docs/transformers/pr_17109/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(wH,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(AH,"href","/docs/transformers/pr_17109/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(yH,"href","/docs/transformers/pr_17109/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(LH,"href","/docs/transformers/pr_17109/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(xH,"href","/docs/transformers/pr_17109/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c($H,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(kH,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(SH,"href","/docs/transformers/pr_17109/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(RH,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(BH,"href","/docs/transformers/pr_17109/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T4,"id","transformers.TFAutoModelForVision2Seq"),c(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T4,"href","#transformers.TFAutoModelForVision2Seq"),c(mc,"class","relative group"),c(PH,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qH,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NH,"href","/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(w4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(pc,"class","relative group"),c(jH,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DH,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GH,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OH,"href","/docs/transformers/pr_17109/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x4,"id","transformers.FlaxAutoModel"),c(x4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x4,"href","#transformers.FlaxAutoModel"),c(bc,"class","relative group"),c(VH,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XH,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zH,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QH,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertModel"),c(WH,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartModel"),c(HH,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.FlaxBeitModel"),c(UH,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertModel"),c(JH,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(YH,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(KH,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(ZH,"href","/docs/transformers/pr_17109/en/model_doc/clip#transformers.FlaxCLIPModel"),c(eU,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(oU,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraModel"),c(rU,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(tU,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(aU,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(nU,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.FlaxMarianModel"),c(sU,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartModel"),c(lU,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.FlaxMT5Model"),c(iU,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(dU,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(cU,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(fU,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.FlaxT5Model"),c(mU,"href","/docs/transformers/pr_17109/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(gU,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.FlaxViTModel"),c(hU,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(pU,"href","/docs/transformers/pr_17109/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(uU,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tE,"id","transformers.FlaxAutoModelForCausalLM"),c(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Tc,"class","relative group"),c(_U,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(TU,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(MU,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(EU,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(CU,"href","/docs/transformers/pr_17109/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(wU,"href","/docs/transformers/pr_17109/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(AU,"href","/docs/transformers/pr_17109/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(yU,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(LU,"href","/docs/transformers/pr_17109/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.FlaxAutoModelForPreTraining"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Cc,"class","relative group"),c(xU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($U,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SU,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(RU,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(BU,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(PU,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(IU,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(qU,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(NU,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(jU,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(DU,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(GU,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(OU,"href","/docs/transformers/pr_17109/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(VU,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($E,"id","transformers.FlaxAutoModelForMaskedLM"),c($E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($E,"href","#transformers.FlaxAutoModelForMaskedLM"),c(yc,"class","relative group"),c(XU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WU,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(HU,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(UU,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(JU,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(YU,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(KU,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(ZU,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(eJ,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(oJ,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(rJ,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(VE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c($c,"class","relative group"),c(tJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sJ,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(lJ,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(iJ,"href","/docs/transformers/pr_17109/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(dJ,"href","/docs/transformers/pr_17109/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(cJ,"href","/docs/transformers/pr_17109/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(fJ,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(mJ,"href","/docs/transformers/pr_17109/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(gJ,"href","/docs/transformers/pr_17109/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(hJ,"href","/docs/transformers/pr_17109/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Rc,"class","relative group"),c(pJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_J,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bJ,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(vJ,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(FJ,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(TJ,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(MJ,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(EJ,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(CJ,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(wJ,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(AJ,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(yJ,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(h5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Ic,"class","relative group"),c(LJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($J,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kJ,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(SJ,"href","/docs/transformers/pr_17109/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(RJ,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(BJ,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(PJ,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(IJ,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(qJ,"href","/docs/transformers/pr_17109/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(NJ,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(jJ,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(DJ,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y5,"id","transformers.FlaxAutoModelForTokenClassification"),c(y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(jc,"class","relative group"),c(GJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(zJ,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(QJ,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(WJ,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(HJ,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(UJ,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(JJ,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(YJ,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(N5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Oc,"class","relative group"),c(KJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZJ,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oY,"href","/docs/transformers/pr_17109/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(rY,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(tY,"href","/docs/transformers/pr_17109/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(aY,"href","/docs/transformers/pr_17109/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(nY,"href","/docs/transformers/pr_17109/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(sY,"href","/docs/transformers/pr_17109/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(lY,"href","/docs/transformers/pr_17109/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(iY,"href","/docs/transformers/pr_17109/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(U5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(zc,"class","relative group"),c(dY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_17109/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z5,"id","transformers.FlaxAutoModelForImageClassification"),c(Z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z5,"href","#transformers.FlaxAutoModelForImageClassification"),c(Hc,"class","relative group"),c(gY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uY,"href","/docs/transformers/pr_17109/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(_Y,"href","/docs/transformers/pr_17109/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aC,"id","transformers.FlaxAutoModelForVision2Seq"),c(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Yc,"class","relative group"),c(bY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FY,"href","/docs/transformers/pr_17109/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TY,"href","/docs/transformers/pr_17109/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,ri),b(f,tf,_),b(f,Kr,_),e(Kr,ti),e(Kr,ai),e(ai,Ew),e(Kr,af),b(f,qe,_),b(f,Xe,_),e(Xe,ni),e(Xe,Mn),e(Mn,Cw),e(Xe,En),e(Xe,Cn),e(Cn,ww),e(Xe,si),e(Xe,wn),e(wn,Aw),e(Xe,li),b(f,nf,_),M(va,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,jx),e(Ae,ii),e(ii,Dx),e(Ae,Gx),b(f,Eo,_),b(f,Fa,_),e(Fa,Ox),e(Fa,sf),e(sf,Vx),e(Fa,RNe),b(f,yBe,_),b(f,di,_),e(di,lf),e(lf,gZ),M(yw,gZ,null),e(di,BNe),e(di,hZ),e(hZ,PNe),b(f,LBe,_),b(f,An,_),e(An,INe),e(An,pZ),e(pZ,qNe),e(An,NNe),e(An,uZ),e(uZ,jNe),e(An,DNe),b(f,xBe,_),M(Lw,f,_),b(f,$Be,_),b(f,Xx,_),e(Xx,GNe),b(f,kBe,_),M(df,f,_),b(f,SBe,_),b(f,ci,_),e(ci,cf),e(cf,_Z),M(xw,_Z,null),e(ci,ONe),e(ci,bZ),e(bZ,VNe),b(f,RBe,_),b(f,Co,_),M($w,Co,null),e(Co,XNe),e(Co,kw),e(kw,zNe),e(kw,zx),e(zx,QNe),e(kw,WNe),e(Co,HNe),e(Co,Sw),e(Sw,UNe),e(Sw,vZ),e(vZ,JNe),e(Sw,YNe),e(Co,KNe),e(Co,Mr),M(Rw,Mr,null),e(Mr,ZNe),e(Mr,FZ),e(FZ,eje),e(Mr,oje),e(Mr,fi),e(fi,rje),e(fi,TZ),e(TZ,tje),e(fi,aje),e(fi,MZ),e(MZ,nje),e(fi,sje),e(Mr,lje),e(Mr,A),e(A,ff),e(ff,EZ),e(EZ,ije),e(ff,dje),e(ff,Qx),e(Qx,cje),e(ff,fje),e(A,mje),e(A,mf),e(mf,CZ),e(CZ,gje),e(mf,hje),e(mf,Wx),e(Wx,pje),e(mf,uje),e(A,_je),e(A,gf),e(gf,wZ),e(wZ,bje),e(gf,vje),e(gf,Hx),e(Hx,Fje),e(gf,Tje),e(A,Mje),e(A,hf),e(hf,AZ),e(AZ,Eje),e(hf,Cje),e(hf,Ux),e(Ux,wje),e(hf,Aje),e(A,yje),e(A,pf),e(pf,yZ),e(yZ,Lje),e(pf,xje),e(pf,Jx),e(Jx,$je),e(pf,kje),e(A,Sje),e(A,uf),e(uf,LZ),e(LZ,Rje),e(uf,Bje),e(uf,Yx),e(Yx,Pje),e(uf,Ije),e(A,qje),e(A,_f),e(_f,xZ),e(xZ,Nje),e(_f,jje),e(_f,Kx),e(Kx,Dje),e(_f,Gje),e(A,Oje),e(A,bf),e(bf,$Z),e($Z,Vje),e(bf,Xje),e(bf,Zx),e(Zx,zje),e(bf,Qje),e(A,Wje),e(A,vf),e(vf,kZ),e(kZ,Hje),e(vf,Uje),e(vf,e$),e(e$,Jje),e(vf,Yje),e(A,Kje),e(A,Ff),e(Ff,SZ),e(SZ,Zje),e(Ff,eDe),e(Ff,o$),e(o$,oDe),e(Ff,rDe),e(A,tDe),e(A,Tf),e(Tf,RZ),e(RZ,aDe),e(Tf,nDe),e(Tf,r$),e(r$,sDe),e(Tf,lDe),e(A,iDe),e(A,Mf),e(Mf,BZ),e(BZ,dDe),e(Mf,cDe),e(Mf,t$),e(t$,fDe),e(Mf,mDe),e(A,gDe),e(A,Ef),e(Ef,PZ),e(PZ,hDe),e(Ef,pDe),e(Ef,a$),e(a$,uDe),e(Ef,_De),e(A,bDe),e(A,Cf),e(Cf,IZ),e(IZ,vDe),e(Cf,FDe),e(Cf,n$),e(n$,TDe),e(Cf,MDe),e(A,EDe),e(A,wf),e(wf,qZ),e(qZ,CDe),e(wf,wDe),e(wf,s$),e(s$,ADe),e(wf,yDe),e(A,LDe),e(A,Af),e(Af,NZ),e(NZ,xDe),e(Af,$De),e(Af,l$),e(l$,kDe),e(Af,SDe),e(A,RDe),e(A,yf),e(yf,jZ),e(jZ,BDe),e(yf,PDe),e(yf,i$),e(i$,IDe),e(yf,qDe),e(A,NDe),e(A,Lf),e(Lf,DZ),e(DZ,jDe),e(Lf,DDe),e(Lf,d$),e(d$,GDe),e(Lf,ODe),e(A,VDe),e(A,xf),e(xf,GZ),e(GZ,XDe),e(xf,zDe),e(xf,c$),e(c$,QDe),e(xf,WDe),e(A,HDe),e(A,$f),e($f,OZ),e(OZ,UDe),e($f,JDe),e($f,f$),e(f$,YDe),e($f,KDe),e(A,ZDe),e(A,kf),e(kf,VZ),e(VZ,eGe),e(kf,oGe),e(kf,m$),e(m$,rGe),e(kf,tGe),e(A,aGe),e(A,Sf),e(Sf,XZ),e(XZ,nGe),e(Sf,sGe),e(Sf,g$),e(g$,lGe),e(Sf,iGe),e(A,dGe),e(A,Rf),e(Rf,zZ),e(zZ,cGe),e(Rf,fGe),e(Rf,h$),e(h$,mGe),e(Rf,gGe),e(A,hGe),e(A,Bf),e(Bf,QZ),e(QZ,pGe),e(Bf,uGe),e(Bf,p$),e(p$,_Ge),e(Bf,bGe),e(A,vGe),e(A,Pf),e(Pf,WZ),e(WZ,FGe),e(Pf,TGe),e(Pf,u$),e(u$,MGe),e(Pf,EGe),e(A,CGe),e(A,If),e(If,HZ),e(HZ,wGe),e(If,AGe),e(If,_$),e(_$,yGe),e(If,LGe),e(A,xGe),e(A,qf),e(qf,UZ),e(UZ,$Ge),e(qf,kGe),e(qf,b$),e(b$,SGe),e(qf,RGe),e(A,BGe),e(A,Nf),e(Nf,JZ),e(JZ,PGe),e(Nf,IGe),e(Nf,v$),e(v$,qGe),e(Nf,NGe),e(A,jGe),e(A,jf),e(jf,YZ),e(YZ,DGe),e(jf,GGe),e(jf,F$),e(F$,OGe),e(jf,VGe),e(A,XGe),e(A,Df),e(Df,KZ),e(KZ,zGe),e(Df,QGe),e(Df,T$),e(T$,WGe),e(Df,HGe),e(A,UGe),e(A,Gf),e(Gf,ZZ),e(ZZ,JGe),e(Gf,YGe),e(Gf,M$),e(M$,KGe),e(Gf,ZGe),e(A,eOe),e(A,Of),e(Of,eee),e(eee,oOe),e(Of,rOe),e(Of,E$),e(E$,tOe),e(Of,aOe),e(A,nOe),e(A,Vf),e(Vf,oee),e(oee,sOe),e(Vf,lOe),e(Vf,C$),e(C$,iOe),e(Vf,dOe),e(A,cOe),e(A,Xf),e(Xf,ree),e(ree,fOe),e(Xf,mOe),e(Xf,w$),e(w$,gOe),e(Xf,hOe),e(A,pOe),e(A,zf),e(zf,tee),e(tee,uOe),e(zf,_Oe),e(zf,A$),e(A$,bOe),e(zf,vOe),e(A,FOe),e(A,Qf),e(Qf,aee),e(aee,TOe),e(Qf,MOe),e(Qf,y$),e(y$,EOe),e(Qf,COe),e(A,wOe),e(A,Wf),e(Wf,nee),e(nee,AOe),e(Wf,yOe),e(Wf,L$),e(L$,LOe),e(Wf,xOe),e(A,$Oe),e(A,Hf),e(Hf,see),e(see,kOe),e(Hf,SOe),e(Hf,x$),e(x$,ROe),e(Hf,BOe),e(A,POe),e(A,Uf),e(Uf,lee),e(lee,IOe),e(Uf,qOe),e(Uf,$$),e($$,NOe),e(Uf,jOe),e(A,DOe),e(A,Jf),e(Jf,iee),e(iee,GOe),e(Jf,OOe),e(Jf,k$),e(k$,VOe),e(Jf,XOe),e(A,zOe),e(A,Yf),e(Yf,dee),e(dee,QOe),e(Yf,WOe),e(Yf,S$),e(S$,HOe),e(Yf,UOe),e(A,JOe),e(A,Kf),e(Kf,cee),e(cee,YOe),e(Kf,KOe),e(Kf,R$),e(R$,ZOe),e(Kf,eVe),e(A,oVe),e(A,Zf),e(Zf,fee),e(fee,rVe),e(Zf,tVe),e(Zf,B$),e(B$,aVe),e(Zf,nVe),e(A,sVe),e(A,em),e(em,mee),e(mee,lVe),e(em,iVe),e(em,P$),e(P$,dVe),e(em,cVe),e(A,fVe),e(A,om),e(om,gee),e(gee,mVe),e(om,gVe),e(om,I$),e(I$,hVe),e(om,pVe),e(A,uVe),e(A,rm),e(rm,hee),e(hee,_Ve),e(rm,bVe),e(rm,q$),e(q$,vVe),e(rm,FVe),e(A,TVe),e(A,tm),e(tm,pee),e(pee,MVe),e(tm,EVe),e(tm,N$),e(N$,CVe),e(tm,wVe),e(A,AVe),e(A,am),e(am,uee),e(uee,yVe),e(am,LVe),e(am,j$),e(j$,xVe),e(am,$Ve),e(A,kVe),e(A,nm),e(nm,_ee),e(_ee,SVe),e(nm,RVe),e(nm,D$),e(D$,BVe),e(nm,PVe),e(A,IVe),e(A,sm),e(sm,bee),e(bee,qVe),e(sm,NVe),e(sm,G$),e(G$,jVe),e(sm,DVe),e(A,GVe),e(A,lm),e(lm,vee),e(vee,OVe),e(lm,VVe),e(lm,O$),e(O$,XVe),e(lm,zVe),e(A,QVe),e(A,im),e(im,Fee),e(Fee,WVe),e(im,HVe),e(im,V$),e(V$,UVe),e(im,JVe),e(A,YVe),e(A,dm),e(dm,Tee),e(Tee,KVe),e(dm,ZVe),e(dm,X$),e(X$,eXe),e(dm,oXe),e(A,rXe),e(A,cm),e(cm,Mee),e(Mee,tXe),e(cm,aXe),e(cm,z$),e(z$,nXe),e(cm,sXe),e(A,lXe),e(A,fm),e(fm,Eee),e(Eee,iXe),e(fm,dXe),e(fm,Q$),e(Q$,cXe),e(fm,fXe),e(A,mXe),e(A,mm),e(mm,Cee),e(Cee,gXe),e(mm,hXe),e(mm,W$),e(W$,pXe),e(mm,uXe),e(A,_Xe),e(A,gm),e(gm,wee),e(wee,bXe),e(gm,vXe),e(gm,H$),e(H$,FXe),e(gm,TXe),e(A,MXe),e(A,hm),e(hm,Aee),e(Aee,EXe),e(hm,CXe),e(hm,U$),e(U$,wXe),e(hm,AXe),e(A,yXe),e(A,pm),e(pm,yee),e(yee,LXe),e(pm,xXe),e(pm,J$),e(J$,$Xe),e(pm,kXe),e(A,SXe),e(A,um),e(um,Lee),e(Lee,RXe),e(um,BXe),e(um,Y$),e(Y$,PXe),e(um,IXe),e(A,qXe),e(A,_m),e(_m,xee),e(xee,NXe),e(_m,jXe),e(_m,K$),e(K$,DXe),e(_m,GXe),e(A,OXe),e(A,bm),e(bm,$ee),e($ee,VXe),e(bm,XXe),e(bm,Z$),e(Z$,zXe),e(bm,QXe),e(A,WXe),e(A,vm),e(vm,kee),e(kee,HXe),e(vm,UXe),e(vm,ek),e(ek,JXe),e(vm,YXe),e(A,KXe),e(A,Fm),e(Fm,See),e(See,ZXe),e(Fm,eze),e(Fm,ok),e(ok,oze),e(Fm,rze),e(A,tze),e(A,Tm),e(Tm,Ree),e(Ree,aze),e(Tm,nze),e(Tm,rk),e(rk,sze),e(Tm,lze),e(A,ize),e(A,Mm),e(Mm,Bee),e(Bee,dze),e(Mm,cze),e(Mm,tk),e(tk,fze),e(Mm,mze),e(A,gze),e(A,Em),e(Em,Pee),e(Pee,hze),e(Em,pze),e(Em,ak),e(ak,uze),e(Em,_ze),e(A,bze),e(A,Cm),e(Cm,Iee),e(Iee,vze),e(Cm,Fze),e(Cm,nk),e(nk,Tze),e(Cm,Mze),e(A,Eze),e(A,wm),e(wm,qee),e(qee,Cze),e(wm,wze),e(wm,sk),e(sk,Aze),e(wm,yze),e(A,Lze),e(A,Am),e(Am,Nee),e(Nee,xze),e(Am,$ze),e(Am,lk),e(lk,kze),e(Am,Sze),e(A,Rze),e(A,ym),e(ym,jee),e(jee,Bze),e(ym,Pze),e(ym,ik),e(ik,Ize),e(ym,qze),e(A,Nze),e(A,Lm),e(Lm,Dee),e(Dee,jze),e(Lm,Dze),e(Lm,dk),e(dk,Gze),e(Lm,Oze),e(A,Vze),e(A,xm),e(xm,Gee),e(Gee,Xze),e(xm,zze),e(xm,ck),e(ck,Qze),e(xm,Wze),e(A,Hze),e(A,$m),e($m,Oee),e(Oee,Uze),e($m,Jze),e($m,fk),e(fk,Yze),e($m,Kze),e(A,Zze),e(A,km),e(km,Vee),e(Vee,eQe),e(km,oQe),e(km,mk),e(mk,rQe),e(km,tQe),e(A,aQe),e(A,Sm),e(Sm,Xee),e(Xee,nQe),e(Sm,sQe),e(Sm,gk),e(gk,lQe),e(Sm,iQe),e(A,dQe),e(A,Rm),e(Rm,zee),e(zee,cQe),e(Rm,fQe),e(Rm,hk),e(hk,mQe),e(Rm,gQe),e(A,hQe),e(A,Bm),e(Bm,Qee),e(Qee,pQe),e(Bm,uQe),e(Bm,pk),e(pk,_Qe),e(Bm,bQe),e(A,vQe),e(A,Pm),e(Pm,Wee),e(Wee,FQe),e(Pm,TQe),e(Pm,uk),e(uk,MQe),e(Pm,EQe),e(A,CQe),e(A,Im),e(Im,Hee),e(Hee,wQe),e(Im,AQe),e(Im,_k),e(_k,yQe),e(Im,LQe),e(A,xQe),e(A,qm),e(qm,Uee),e(Uee,$Qe),e(qm,kQe),e(qm,bk),e(bk,SQe),e(qm,RQe),e(A,BQe),e(A,Nm),e(Nm,Jee),e(Jee,PQe),e(Nm,IQe),e(Nm,vk),e(vk,qQe),e(Nm,NQe),e(A,jQe),e(A,jm),e(jm,Yee),e(Yee,DQe),e(jm,GQe),e(jm,Fk),e(Fk,OQe),e(jm,VQe),e(A,XQe),e(A,Dm),e(Dm,Kee),e(Kee,zQe),e(Dm,QQe),e(Dm,Tk),e(Tk,WQe),e(Dm,HQe),e(A,UQe),e(A,Gm),e(Gm,Zee),e(Zee,JQe),e(Gm,YQe),e(Gm,Mk),e(Mk,KQe),e(Gm,ZQe),e(A,eWe),e(A,Om),e(Om,eoe),e(eoe,oWe),e(Om,rWe),e(Om,Ek),e(Ek,tWe),e(Om,aWe),e(A,nWe),e(A,Vm),e(Vm,ooe),e(ooe,sWe),e(Vm,lWe),e(Vm,Ck),e(Ck,iWe),e(Vm,dWe),e(A,cWe),e(A,Xm),e(Xm,roe),e(roe,fWe),e(Xm,mWe),e(Xm,wk),e(wk,gWe),e(Xm,hWe),e(A,pWe),e(A,zm),e(zm,toe),e(toe,uWe),e(zm,_We),e(zm,Ak),e(Ak,bWe),e(zm,vWe),e(A,FWe),e(A,Qm),e(Qm,aoe),e(aoe,TWe),e(Qm,MWe),e(Qm,yk),e(yk,EWe),e(Qm,CWe),e(A,wWe),e(A,Wm),e(Wm,noe),e(noe,AWe),e(Wm,yWe),e(Wm,Lk),e(Lk,LWe),e(Wm,xWe),e(A,$We),e(A,Hm),e(Hm,soe),e(soe,kWe),e(Hm,SWe),e(Hm,xk),e(xk,RWe),e(Hm,BWe),e(A,PWe),e(A,Um),e(Um,loe),e(loe,IWe),e(Um,qWe),e(Um,$k),e($k,NWe),e(Um,jWe),e(A,DWe),e(A,Jm),e(Jm,ioe),e(ioe,GWe),e(Jm,OWe),e(Jm,kk),e(kk,VWe),e(Jm,XWe),e(A,zWe),e(A,Ym),e(Ym,doe),e(doe,QWe),e(Ym,WWe),e(Ym,Sk),e(Sk,HWe),e(Ym,UWe),e(A,JWe),e(A,Km),e(Km,coe),e(coe,YWe),e(Km,KWe),e(Km,Rk),e(Rk,ZWe),e(Km,eHe),e(A,oHe),e(A,Zm),e(Zm,foe),e(foe,rHe),e(Zm,tHe),e(Zm,Bk),e(Bk,aHe),e(Zm,nHe),e(A,sHe),e(A,eg),e(eg,moe),e(moe,lHe),e(eg,iHe),e(eg,Pk),e(Pk,dHe),e(eg,cHe),e(A,fHe),e(A,og),e(og,goe),e(goe,mHe),e(og,gHe),e(og,Ik),e(Ik,hHe),e(og,pHe),e(A,uHe),e(A,rg),e(rg,hoe),e(hoe,_He),e(rg,bHe),e(rg,qk),e(qk,vHe),e(rg,FHe),e(A,THe),e(A,tg),e(tg,poe),e(poe,MHe),e(tg,EHe),e(tg,Nk),e(Nk,CHe),e(tg,wHe),e(A,AHe),e(A,ag),e(ag,uoe),e(uoe,yHe),e(ag,LHe),e(ag,jk),e(jk,xHe),e(ag,$He),e(A,kHe),e(A,ng),e(ng,_oe),e(_oe,SHe),e(ng,RHe),e(ng,Dk),e(Dk,BHe),e(ng,PHe),e(A,IHe),e(A,sg),e(sg,boe),e(boe,qHe),e(sg,NHe),e(sg,Gk),e(Gk,jHe),e(sg,DHe),e(Mr,GHe),M(lg,Mr,null),e(Co,OHe),e(Co,ig),M(Bw,ig,null),e(ig,VHe),e(ig,voe),e(voe,XHe),b(f,BBe,_),b(f,mi,_),e(mi,dg),e(dg,Foe),M(Pw,Foe,null),e(mi,zHe),e(mi,Toe),e(Toe,QHe),b(f,PBe,_),b(f,wo,_),M(Iw,wo,null),e(wo,WHe),e(wo,qw),e(qw,HHe),e(qw,Ok),e(Ok,UHe),e(qw,JHe),e(wo,YHe),e(wo,Nw),e(Nw,KHe),e(Nw,Moe),e(Moe,ZHe),e(Nw,eUe),e(wo,oUe),e(wo,Er),M(jw,Er,null),e(Er,rUe),e(Er,Eoe),e(Eoe,tUe),e(Er,aUe),e(Er,Ta),e(Ta,nUe),e(Ta,Coe),e(Coe,sUe),e(Ta,lUe),e(Ta,woe),e(woe,iUe),e(Ta,dUe),e(Ta,Aoe),e(Aoe,cUe),e(Ta,fUe),e(Er,mUe),e(Er,k),e(k,yn),e(yn,yoe),e(yoe,gUe),e(yn,hUe),e(yn,Vk),e(Vk,pUe),e(yn,uUe),e(yn,Xk),e(Xk,_Ue),e(yn,bUe),e(k,vUe),e(k,Ln),e(Ln,Loe),e(Loe,FUe),e(Ln,TUe),e(Ln,zk),e(zk,MUe),e(Ln,EUe),e(Ln,Qk),e(Qk,CUe),e(Ln,wUe),e(k,AUe),e(k,xn),e(xn,xoe),e(xoe,yUe),e(xn,LUe),e(xn,Wk),e(Wk,xUe),e(xn,$Ue),e(xn,Hk),e(Hk,kUe),e(xn,SUe),e(k,RUe),e(k,cg),e(cg,$oe),e($oe,BUe),e(cg,PUe),e(cg,Uk),e(Uk,IUe),e(cg,qUe),e(k,NUe),e(k,$n),e($n,koe),e(koe,jUe),e($n,DUe),e($n,Jk),e(Jk,GUe),e($n,OUe),e($n,Yk),e(Yk,VUe),e($n,XUe),e(k,zUe),e(k,fg),e(fg,Soe),e(Soe,QUe),e(fg,WUe),e(fg,Kk),e(Kk,HUe),e(fg,UUe),e(k,JUe),e(k,mg),e(mg,Roe),e(Roe,YUe),e(mg,KUe),e(mg,Zk),e(Zk,ZUe),e(mg,eJe),e(k,oJe),e(k,gg),e(gg,Boe),e(Boe,rJe),e(gg,tJe),e(gg,eS),e(eS,aJe),e(gg,nJe),e(k,sJe),e(k,kn),e(kn,Poe),e(Poe,lJe),e(kn,iJe),e(kn,oS),e(oS,dJe),e(kn,cJe),e(kn,rS),e(rS,fJe),e(kn,mJe),e(k,gJe),e(k,Sn),e(Sn,Ioe),e(Ioe,hJe),e(Sn,pJe),e(Sn,tS),e(tS,uJe),e(Sn,_Je),e(Sn,aS),e(aS,bJe),e(Sn,vJe),e(k,FJe),e(k,Rn),e(Rn,qoe),e(qoe,TJe),e(Rn,MJe),e(Rn,nS),e(nS,EJe),e(Rn,CJe),e(Rn,sS),e(sS,wJe),e(Rn,AJe),e(k,yJe),e(k,hg),e(hg,Noe),e(Noe,LJe),e(hg,xJe),e(hg,lS),e(lS,$Je),e(hg,kJe),e(k,SJe),e(k,pg),e(pg,joe),e(joe,RJe),e(pg,BJe),e(pg,iS),e(iS,PJe),e(pg,IJe),e(k,qJe),e(k,Bn),e(Bn,Doe),e(Doe,NJe),e(Bn,jJe),e(Bn,dS),e(dS,DJe),e(Bn,GJe),e(Bn,cS),e(cS,OJe),e(Bn,VJe),e(k,XJe),e(k,ug),e(ug,Goe),e(Goe,zJe),e(ug,QJe),e(ug,fS),e(fS,WJe),e(ug,HJe),e(k,UJe),e(k,Pn),e(Pn,Ooe),e(Ooe,JJe),e(Pn,YJe),e(Pn,mS),e(mS,KJe),e(Pn,ZJe),e(Pn,gS),e(gS,eYe),e(Pn,oYe),e(k,rYe),e(k,In),e(In,Voe),e(Voe,tYe),e(In,aYe),e(In,hS),e(hS,nYe),e(In,sYe),e(In,pS),e(pS,lYe),e(In,iYe),e(k,dYe),e(k,qn),e(qn,Xoe),e(Xoe,cYe),e(qn,fYe),e(qn,uS),e(uS,mYe),e(qn,gYe),e(qn,_S),e(_S,hYe),e(qn,pYe),e(k,uYe),e(k,_g),e(_g,zoe),e(zoe,_Ye),e(_g,bYe),e(_g,bS),e(bS,vYe),e(_g,FYe),e(k,TYe),e(k,Nn),e(Nn,Qoe),e(Qoe,MYe),e(Nn,EYe),e(Nn,vS),e(vS,CYe),e(Nn,wYe),e(Nn,FS),e(FS,AYe),e(Nn,yYe),e(k,LYe),e(k,jn),e(jn,Woe),e(Woe,xYe),e(jn,$Ye),e(jn,TS),e(TS,kYe),e(jn,SYe),e(jn,MS),e(MS,RYe),e(jn,BYe),e(k,PYe),e(k,Dn),e(Dn,Hoe),e(Hoe,IYe),e(Dn,qYe),e(Dn,ES),e(ES,NYe),e(Dn,jYe),e(Dn,CS),e(CS,DYe),e(Dn,GYe),e(k,OYe),e(k,Gn),e(Gn,Uoe),e(Uoe,VYe),e(Gn,XYe),e(Gn,wS),e(wS,zYe),e(Gn,QYe),e(Gn,AS),e(AS,WYe),e(Gn,HYe),e(k,UYe),e(k,On),e(On,Joe),e(Joe,JYe),e(On,YYe),e(On,yS),e(yS,KYe),e(On,ZYe),e(On,LS),e(LS,eKe),e(On,oKe),e(k,rKe),e(k,Vn),e(Vn,Yoe),e(Yoe,tKe),e(Vn,aKe),e(Vn,xS),e(xS,nKe),e(Vn,sKe),e(Vn,$S),e($S,lKe),e(Vn,iKe),e(k,dKe),e(k,bg),e(bg,Koe),e(Koe,cKe),e(bg,fKe),e(bg,kS),e(kS,mKe),e(bg,gKe),e(k,hKe),e(k,Xn),e(Xn,Zoe),e(Zoe,pKe),e(Xn,uKe),e(Xn,SS),e(SS,_Ke),e(Xn,bKe),e(Xn,RS),e(RS,vKe),e(Xn,FKe),e(k,TKe),e(k,vg),e(vg,ere),e(ere,MKe),e(vg,EKe),e(vg,BS),e(BS,CKe),e(vg,wKe),e(k,AKe),e(k,zn),e(zn,ore),e(ore,yKe),e(zn,LKe),e(zn,PS),e(PS,xKe),e(zn,$Ke),e(zn,IS),e(IS,kKe),e(zn,SKe),e(k,RKe),e(k,Qn),e(Qn,rre),e(rre,BKe),e(Qn,PKe),e(Qn,qS),e(qS,IKe),e(Qn,qKe),e(Qn,NS),e(NS,NKe),e(Qn,jKe),e(k,DKe),e(k,Wn),e(Wn,tre),e(tre,GKe),e(Wn,OKe),e(Wn,jS),e(jS,VKe),e(Wn,XKe),e(Wn,DS),e(DS,zKe),e(Wn,QKe),e(k,WKe),e(k,Hn),e(Hn,are),e(are,HKe),e(Hn,UKe),e(Hn,GS),e(GS,JKe),e(Hn,YKe),e(Hn,OS),e(OS,KKe),e(Hn,ZKe),e(k,eZe),e(k,Un),e(Un,nre),e(nre,oZe),e(Un,rZe),e(Un,VS),e(VS,tZe),e(Un,aZe),e(Un,XS),e(XS,nZe),e(Un,sZe),e(k,lZe),e(k,Fg),e(Fg,sre),e(sre,iZe),e(Fg,dZe),e(Fg,zS),e(zS,cZe),e(Fg,fZe),e(k,mZe),e(k,Jn),e(Jn,lre),e(lre,gZe),e(Jn,hZe),e(Jn,QS),e(QS,pZe),e(Jn,uZe),e(Jn,WS),e(WS,_Ze),e(Jn,bZe),e(k,vZe),e(k,Yn),e(Yn,ire),e(ire,FZe),e(Yn,TZe),e(Yn,HS),e(HS,MZe),e(Yn,EZe),e(Yn,US),e(US,CZe),e(Yn,wZe),e(k,AZe),e(k,Kn),e(Kn,dre),e(dre,yZe),e(Kn,LZe),e(Kn,JS),e(JS,xZe),e(Kn,$Ze),e(Kn,YS),e(YS,kZe),e(Kn,SZe),e(k,RZe),e(k,Zn),e(Zn,cre),e(cre,BZe),e(Zn,PZe),e(Zn,KS),e(KS,IZe),e(Zn,qZe),e(Zn,ZS),e(ZS,NZe),e(Zn,jZe),e(k,DZe),e(k,es),e(es,fre),e(fre,GZe),e(es,OZe),e(es,eR),e(eR,VZe),e(es,XZe),e(es,oR),e(oR,zZe),e(es,QZe),e(k,WZe),e(k,os),e(os,mre),e(mre,HZe),e(os,UZe),e(os,rR),e(rR,JZe),e(os,YZe),e(os,tR),e(tR,KZe),e(os,ZZe),e(k,eeo),e(k,Tg),e(Tg,gre),e(gre,oeo),e(Tg,reo),e(Tg,aR),e(aR,teo),e(Tg,aeo),e(k,neo),e(k,rs),e(rs,hre),e(hre,seo),e(rs,leo),e(rs,nR),e(nR,ieo),e(rs,deo),e(rs,sR),e(sR,ceo),e(rs,feo),e(k,meo),e(k,Mg),e(Mg,pre),e(pre,geo),e(Mg,heo),e(Mg,lR),e(lR,peo),e(Mg,ueo),e(k,_eo),e(k,Eg),e(Eg,ure),e(ure,beo),e(Eg,veo),e(Eg,iR),e(iR,Feo),e(Eg,Teo),e(k,Meo),e(k,ts),e(ts,_re),e(_re,Eeo),e(ts,Ceo),e(ts,dR),e(dR,weo),e(ts,Aeo),e(ts,cR),e(cR,yeo),e(ts,Leo),e(k,xeo),e(k,as),e(as,bre),e(bre,$eo),e(as,keo),e(as,fR),e(fR,Seo),e(as,Reo),e(as,mR),e(mR,Beo),e(as,Peo),e(k,Ieo),e(k,ns),e(ns,vre),e(vre,qeo),e(ns,Neo),e(ns,gR),e(gR,jeo),e(ns,Deo),e(ns,hR),e(hR,Geo),e(ns,Oeo),e(k,Veo),e(k,Cg),e(Cg,Fre),e(Fre,Xeo),e(Cg,zeo),e(Cg,pR),e(pR,Qeo),e(Cg,Weo),e(k,Heo),e(k,ss),e(ss,Tre),e(Tre,Ueo),e(ss,Jeo),e(ss,uR),e(uR,Yeo),e(ss,Keo),e(ss,_R),e(_R,Zeo),e(ss,eoo),e(k,ooo),e(k,ls),e(ls,Mre),e(Mre,roo),e(ls,too),e(ls,bR),e(bR,aoo),e(ls,noo),e(ls,vR),e(vR,soo),e(ls,loo),e(k,ioo),e(k,is),e(is,Ere),e(Ere,doo),e(is,coo),e(is,FR),e(FR,foo),e(is,moo),e(is,TR),e(TR,goo),e(is,hoo),e(k,poo),e(k,ds),e(ds,Cre),e(Cre,uoo),e(ds,_oo),e(ds,MR),e(MR,boo),e(ds,voo),e(ds,ER),e(ER,Foo),e(ds,Too),e(k,Moo),e(k,cs),e(cs,wre),e(wre,Eoo),e(cs,Coo),e(cs,CR),e(CR,woo),e(cs,Aoo),e(cs,wR),e(wR,yoo),e(cs,Loo),e(k,xoo),e(k,fs),e(fs,Are),e(Are,$oo),e(fs,koo),e(fs,AR),e(AR,Soo),e(fs,Roo),e(fs,yR),e(yR,Boo),e(fs,Poo),e(k,Ioo),e(k,ms),e(ms,yre),e(yre,qoo),e(ms,Noo),e(ms,LR),e(LR,joo),e(ms,Doo),e(ms,xR),e(xR,Goo),e(ms,Ooo),e(k,Voo),e(k,wg),e(wg,Lre),e(Lre,Xoo),e(wg,zoo),e(wg,$R),e($R,Qoo),e(wg,Woo),e(k,Hoo),e(k,Ag),e(Ag,xre),e(xre,Uoo),e(Ag,Joo),e(Ag,kR),e(kR,Yoo),e(Ag,Koo),e(k,Zoo),e(k,yg),e(yg,$re),e($re,ero),e(yg,oro),e(yg,SR),e(SR,rro),e(yg,tro),e(k,aro),e(k,Lg),e(Lg,kre),e(kre,nro),e(Lg,sro),e(Lg,RR),e(RR,lro),e(Lg,iro),e(k,dro),e(k,gs),e(gs,Sre),e(Sre,cro),e(gs,fro),e(gs,BR),e(BR,mro),e(gs,gro),e(gs,PR),e(PR,hro),e(gs,pro),e(k,uro),e(k,xg),e(xg,Rre),e(Rre,_ro),e(xg,bro),e(xg,IR),e(IR,vro),e(xg,Fro),e(k,Tro),e(k,hs),e(hs,Bre),e(Bre,Mro),e(hs,Ero),e(hs,qR),e(qR,Cro),e(hs,wro),e(hs,NR),e(NR,Aro),e(hs,yro),e(k,Lro),e(k,ps),e(ps,Pre),e(Pre,xro),e(ps,$ro),e(ps,jR),e(jR,kro),e(ps,Sro),e(ps,DR),e(DR,Rro),e(ps,Bro),e(k,Pro),e(k,us),e(us,Ire),e(Ire,Iro),e(us,qro),e(us,GR),e(GR,Nro),e(us,jro),e(us,OR),e(OR,Dro),e(us,Gro),e(k,Oro),e(k,_s),e(_s,qre),e(qre,Vro),e(_s,Xro),e(_s,VR),e(VR,zro),e(_s,Qro),e(_s,XR),e(XR,Wro),e(_s,Hro),e(k,Uro),e(k,bs),e(bs,Nre),e(Nre,Jro),e(bs,Yro),e(bs,zR),e(zR,Kro),e(bs,Zro),e(bs,QR),e(QR,eto),e(bs,oto),e(k,rto),e(k,vs),e(vs,jre),e(jre,tto),e(vs,ato),e(vs,WR),e(WR,nto),e(vs,sto),e(vs,HR),e(HR,lto),e(vs,ito),e(k,dto),e(k,$g),e($g,Dre),e(Dre,cto),e($g,fto),e($g,UR),e(UR,mto),e($g,gto),e(k,hto),e(k,kg),e(kg,Gre),e(Gre,pto),e(kg,uto),e(kg,JR),e(JR,_to),e(kg,bto),e(k,vto),e(k,Fs),e(Fs,Ore),e(Ore,Fto),e(Fs,Tto),e(Fs,YR),e(YR,Mto),e(Fs,Eto),e(Fs,KR),e(KR,Cto),e(Fs,wto),e(k,Ato),e(k,Ts),e(Ts,Vre),e(Vre,yto),e(Ts,Lto),e(Ts,ZR),e(ZR,xto),e(Ts,$to),e(Ts,eB),e(eB,kto),e(Ts,Sto),e(k,Rto),e(k,Ms),e(Ms,Xre),e(Xre,Bto),e(Ms,Pto),e(Ms,oB),e(oB,Ito),e(Ms,qto),e(Ms,rB),e(rB,Nto),e(Ms,jto),e(k,Dto),e(k,Sg),e(Sg,zre),e(zre,Gto),e(Sg,Oto),e(Sg,tB),e(tB,Vto),e(Sg,Xto),e(k,zto),e(k,Rg),e(Rg,Qre),e(Qre,Qto),e(Rg,Wto),e(Rg,aB),e(aB,Hto),e(Rg,Uto),e(k,Jto),e(k,Bg),e(Bg,Wre),e(Wre,Yto),e(Bg,Kto),e(Bg,nB),e(nB,Zto),e(Bg,eao),e(k,oao),e(k,Es),e(Es,Hre),e(Hre,rao),e(Es,tao),e(Es,sB),e(sB,aao),e(Es,nao),e(Es,lB),e(lB,sao),e(Es,lao),e(k,iao),e(k,Pg),e(Pg,Ure),e(Ure,dao),e(Pg,cao),e(Pg,iB),e(iB,fao),e(Pg,mao),e(k,gao),e(k,Ig),e(Ig,Jre),e(Jre,hao),e(Ig,pao),e(Ig,dB),e(dB,uao),e(Ig,_ao),e(k,bao),e(k,Cs),e(Cs,Yre),e(Yre,vao),e(Cs,Fao),e(Cs,cB),e(cB,Tao),e(Cs,Mao),e(Cs,fB),e(fB,Eao),e(Cs,Cao),e(k,wao),e(k,qg),e(qg,Kre),e(Kre,Aao),e(qg,yao),e(qg,mB),e(mB,Lao),e(qg,xao),e(k,$ao),e(k,Ng),e(Ng,Zre),e(Zre,kao),e(Ng,Sao),e(Ng,gB),e(gB,Rao),e(Ng,Bao),e(k,Pao),e(k,ws),e(ws,ete),e(ete,Iao),e(ws,qao),e(ws,hB),e(hB,Nao),e(ws,jao),e(ws,pB),e(pB,Dao),e(ws,Gao),e(k,Oao),e(k,As),e(As,ote),e(ote,Vao),e(As,Xao),e(As,uB),e(uB,zao),e(As,Qao),e(As,_B),e(_B,Wao),e(As,Hao),e(k,Uao),e(k,ys),e(ys,rte),e(rte,Jao),e(ys,Yao),e(ys,bB),e(bB,Kao),e(ys,Zao),e(ys,vB),e(vB,eno),e(ys,ono),e(k,rno),e(k,Ls),e(Ls,tte),e(tte,tno),e(Ls,ano),e(Ls,FB),e(FB,nno),e(Ls,sno),e(Ls,TB),e(TB,lno),e(Ls,ino),e(Er,dno),M(jg,Er,null),e(wo,cno),e(wo,Dg),M(Dw,Dg,null),e(Dg,fno),e(Dg,ate),e(ate,mno),b(f,IBe,_),b(f,gi,_),e(gi,Gg),e(Gg,nte),M(Gw,nte,null),e(gi,gno),e(gi,ste),e(ste,hno),b(f,qBe,_),b(f,Ao,_),M(Ow,Ao,null),e(Ao,pno),e(Ao,Vw),e(Vw,uno),e(Vw,MB),e(MB,_no),e(Vw,bno),e(Ao,vno),e(Ao,Xw),e(Xw,Fno),e(Xw,lte),e(lte,Tno),e(Xw,Mno),e(Ao,Eno),e(Ao,Qe),M(zw,Qe,null),e(Qe,Cno),e(Qe,ite),e(ite,wno),e(Qe,Ano),e(Qe,Ma),e(Ma,yno),e(Ma,dte),e(dte,Lno),e(Ma,xno),e(Ma,cte),e(cte,$no),e(Ma,kno),e(Ma,fte),e(fte,Sno),e(Ma,Rno),e(Qe,Bno),e(Qe,te),e(te,Og),e(Og,mte),e(mte,Pno),e(Og,Ino),e(Og,EB),e(EB,qno),e(Og,Nno),e(te,jno),e(te,Vg),e(Vg,gte),e(gte,Dno),e(Vg,Gno),e(Vg,CB),e(CB,Ono),e(Vg,Vno),e(te,Xno),e(te,Xg),e(Xg,hte),e(hte,zno),e(Xg,Qno),e(Xg,wB),e(wB,Wno),e(Xg,Hno),e(te,Uno),e(te,zg),e(zg,pte),e(pte,Jno),e(zg,Yno),e(zg,AB),e(AB,Kno),e(zg,Zno),e(te,eso),e(te,Qg),e(Qg,ute),e(ute,oso),e(Qg,rso),e(Qg,yB),e(yB,tso),e(Qg,aso),e(te,nso),e(te,Wg),e(Wg,_te),e(_te,sso),e(Wg,lso),e(Wg,LB),e(LB,iso),e(Wg,dso),e(te,cso),e(te,Hg),e(Hg,bte),e(bte,fso),e(Hg,mso),e(Hg,xB),e(xB,gso),e(Hg,hso),e(te,pso),e(te,Ug),e(Ug,vte),e(vte,uso),e(Ug,_so),e(Ug,$B),e($B,bso),e(Ug,vso),e(te,Fso),e(te,Jg),e(Jg,Fte),e(Fte,Tso),e(Jg,Mso),e(Jg,kB),e(kB,Eso),e(Jg,Cso),e(te,wso),e(te,Yg),e(Yg,Tte),e(Tte,Aso),e(Yg,yso),e(Yg,SB),e(SB,Lso),e(Yg,xso),e(te,$so),e(te,Kg),e(Kg,Mte),e(Mte,kso),e(Kg,Sso),e(Kg,RB),e(RB,Rso),e(Kg,Bso),e(te,Pso),e(te,Zg),e(Zg,Ete),e(Ete,Iso),e(Zg,qso),e(Zg,BB),e(BB,Nso),e(Zg,jso),e(te,Dso),e(te,eh),e(eh,Cte),e(Cte,Gso),e(eh,Oso),e(eh,PB),e(PB,Vso),e(eh,Xso),e(te,zso),e(te,oh),e(oh,wte),e(wte,Qso),e(oh,Wso),e(oh,IB),e(IB,Hso),e(oh,Uso),e(te,Jso),e(te,rh),e(rh,Ate),e(Ate,Yso),e(rh,Kso),e(rh,qB),e(qB,Zso),e(rh,elo),e(te,olo),e(te,th),e(th,yte),e(yte,rlo),e(th,tlo),e(th,NB),e(NB,alo),e(th,nlo),e(te,slo),e(te,ah),e(ah,Lte),e(Lte,llo),e(ah,ilo),e(ah,jB),e(jB,dlo),e(ah,clo),e(te,flo),e(te,nh),e(nh,xte),e(xte,mlo),e(nh,glo),e(nh,DB),e(DB,hlo),e(nh,plo),e(te,ulo),e(te,sh),e(sh,$te),e($te,_lo),e(sh,blo),e(sh,GB),e(GB,vlo),e(sh,Flo),e(te,Tlo),e(te,lh),e(lh,kte),e(kte,Mlo),e(lh,Elo),e(lh,OB),e(OB,Clo),e(lh,wlo),e(te,Alo),e(te,ih),e(ih,Ste),e(Ste,ylo),e(ih,Llo),e(ih,VB),e(VB,xlo),e(ih,$lo),e(te,klo),e(te,dh),e(dh,Rte),e(Rte,Slo),e(dh,Rlo),e(dh,XB),e(XB,Blo),e(dh,Plo),e(te,Ilo),e(te,ch),e(ch,Bte),e(Bte,qlo),e(ch,Nlo),e(ch,zB),e(zB,jlo),e(ch,Dlo),e(te,Glo),e(te,fh),e(fh,Pte),e(Pte,Olo),e(fh,Vlo),e(fh,QB),e(QB,Xlo),e(fh,zlo),e(Qe,Qlo),M(mh,Qe,null),e(Qe,Wlo),M(gh,Qe,null),e(Ao,Hlo),e(Ao,hh),M(Qw,hh,null),e(hh,Ulo),e(hh,Ite),e(Ite,Jlo),b(f,NBe,_),b(f,hi,_),e(hi,ph),e(ph,qte),M(Ww,qte,null),e(hi,Ylo),e(hi,Nte),e(Nte,Klo),b(f,jBe,_),b(f,yo,_),M(Hw,yo,null),e(yo,Zlo),e(yo,Uw),e(Uw,eio),e(Uw,WB),e(WB,oio),e(Uw,rio),e(yo,tio),e(yo,Jw),e(Jw,aio),e(Jw,jte),e(jte,nio),e(Jw,sio),e(yo,lio),e(yo,We),M(Yw,We,null),e(We,iio),e(We,Dte),e(Dte,dio),e(We,cio),e(We,pi),e(pi,fio),e(pi,Gte),e(Gte,mio),e(pi,gio),e(pi,Ote),e(Ote,hio),e(pi,pio),e(We,uio),e(We,be),e(be,uh),e(uh,Vte),e(Vte,_io),e(uh,bio),e(uh,HB),e(HB,vio),e(uh,Fio),e(be,Tio),e(be,_h),e(_h,Xte),e(Xte,Mio),e(_h,Eio),e(_h,UB),e(UB,Cio),e(_h,wio),e(be,Aio),e(be,bh),e(bh,zte),e(zte,yio),e(bh,Lio),e(bh,JB),e(JB,xio),e(bh,$io),e(be,kio),e(be,vh),e(vh,Qte),e(Qte,Sio),e(vh,Rio),e(vh,YB),e(YB,Bio),e(vh,Pio),e(be,Iio),e(be,Fh),e(Fh,Wte),e(Wte,qio),e(Fh,Nio),e(Fh,KB),e(KB,jio),e(Fh,Dio),e(be,Gio),e(be,Th),e(Th,Hte),e(Hte,Oio),e(Th,Vio),e(Th,ZB),e(ZB,Xio),e(Th,zio),e(be,Qio),e(be,Mh),e(Mh,Ute),e(Ute,Wio),e(Mh,Hio),e(Mh,eP),e(eP,Uio),e(Mh,Jio),e(be,Yio),e(be,Eh),e(Eh,Jte),e(Jte,Kio),e(Eh,Zio),e(Eh,oP),e(oP,edo),e(Eh,odo),e(be,rdo),e(be,Ch),e(Ch,Yte),e(Yte,tdo),e(Ch,ado),e(Ch,rP),e(rP,ndo),e(Ch,sdo),e(be,ldo),e(be,wh),e(wh,Kte),e(Kte,ido),e(wh,ddo),e(wh,tP),e(tP,cdo),e(wh,fdo),e(be,mdo),e(be,Ah),e(Ah,Zte),e(Zte,gdo),e(Ah,hdo),e(Ah,aP),e(aP,pdo),e(Ah,udo),e(be,_do),e(be,yh),e(yh,eae),e(eae,bdo),e(yh,vdo),e(yh,nP),e(nP,Fdo),e(yh,Tdo),e(be,Mdo),e(be,Lh),e(Lh,oae),e(oae,Edo),e(Lh,Cdo),e(Lh,sP),e(sP,wdo),e(Lh,Ado),e(be,ydo),e(be,xh),e(xh,rae),e(rae,Ldo),e(xh,xdo),e(xh,lP),e(lP,$do),e(xh,kdo),e(We,Sdo),M($h,We,null),e(We,Rdo),M(kh,We,null),e(yo,Bdo),e(yo,Sh),M(Kw,Sh,null),e(Sh,Pdo),e(Sh,tae),e(tae,Ido),b(f,DBe,_),b(f,ui,_),e(ui,Rh),e(Rh,aae),M(Zw,aae,null),e(ui,qdo),e(ui,nae),e(nae,Ndo),b(f,GBe,_),b(f,Lo,_),M(eA,Lo,null),e(Lo,jdo),e(Lo,_i),e(_i,Ddo),e(_i,iP),e(iP,Gdo),e(_i,Odo),e(_i,dP),e(dP,Vdo),e(_i,Xdo),e(Lo,zdo),e(Lo,oA),e(oA,Qdo),e(oA,sae),e(sae,Wdo),e(oA,Hdo),e(Lo,Udo),e(Lo,Zr),M(rA,Zr,null),e(Zr,Jdo),e(Zr,lae),e(lae,Ydo),e(Zr,Kdo),e(Zr,bi),e(bi,Zdo),e(bi,iae),e(iae,eco),e(bi,oco),e(bi,cP),e(cP,rco),e(bi,tco),e(Zr,aco),M(Bh,Zr,null),e(Lo,nco),e(Lo,He),M(tA,He,null),e(He,sco),e(He,dae),e(dae,lco),e(He,ico),e(He,Ea),e(Ea,dco),e(Ea,cae),e(cae,cco),e(Ea,fco),e(Ea,fae),e(fae,mco),e(Ea,gco),e(Ea,mae),e(mae,hco),e(Ea,pco),e(He,uco),e(He,x),e(x,Ph),e(Ph,gae),e(gae,_co),e(Ph,bco),e(Ph,fP),e(fP,vco),e(Ph,Fco),e(x,Tco),e(x,Ih),e(Ih,hae),e(hae,Mco),e(Ih,Eco),e(Ih,mP),e(mP,Cco),e(Ih,wco),e(x,Aco),e(x,qh),e(qh,pae),e(pae,yco),e(qh,Lco),e(qh,gP),e(gP,xco),e(qh,$co),e(x,kco),e(x,Nh),e(Nh,uae),e(uae,Sco),e(Nh,Rco),e(Nh,hP),e(hP,Bco),e(Nh,Pco),e(x,Ico),e(x,jh),e(jh,_ae),e(_ae,qco),e(jh,Nco),e(jh,pP),e(pP,jco),e(jh,Dco),e(x,Gco),e(x,Dh),e(Dh,bae),e(bae,Oco),e(Dh,Vco),e(Dh,uP),e(uP,Xco),e(Dh,zco),e(x,Qco),e(x,Gh),e(Gh,vae),e(vae,Wco),e(Gh,Hco),e(Gh,_P),e(_P,Uco),e(Gh,Jco),e(x,Yco),e(x,Oh),e(Oh,Fae),e(Fae,Kco),e(Oh,Zco),e(Oh,bP),e(bP,efo),e(Oh,ofo),e(x,rfo),e(x,Vh),e(Vh,Tae),e(Tae,tfo),e(Vh,afo),e(Vh,vP),e(vP,nfo),e(Vh,sfo),e(x,lfo),e(x,Xh),e(Xh,Mae),e(Mae,ifo),e(Xh,dfo),e(Xh,FP),e(FP,cfo),e(Xh,ffo),e(x,mfo),e(x,zh),e(zh,Eae),e(Eae,gfo),e(zh,hfo),e(zh,TP),e(TP,pfo),e(zh,ufo),e(x,_fo),e(x,Qh),e(Qh,Cae),e(Cae,bfo),e(Qh,vfo),e(Qh,MP),e(MP,Ffo),e(Qh,Tfo),e(x,Mfo),e(x,Wh),e(Wh,wae),e(wae,Efo),e(Wh,Cfo),e(Wh,EP),e(EP,wfo),e(Wh,Afo),e(x,yfo),e(x,Hh),e(Hh,Aae),e(Aae,Lfo),e(Hh,xfo),e(Hh,CP),e(CP,$fo),e(Hh,kfo),e(x,Sfo),e(x,Uh),e(Uh,yae),e(yae,Rfo),e(Uh,Bfo),e(Uh,wP),e(wP,Pfo),e(Uh,Ifo),e(x,qfo),e(x,Jh),e(Jh,Lae),e(Lae,Nfo),e(Jh,jfo),e(Jh,AP),e(AP,Dfo),e(Jh,Gfo),e(x,Ofo),e(x,Yh),e(Yh,xae),e(xae,Vfo),e(Yh,Xfo),e(Yh,yP),e(yP,zfo),e(Yh,Qfo),e(x,Wfo),e(x,Kh),e(Kh,$ae),e($ae,Hfo),e(Kh,Ufo),e(Kh,LP),e(LP,Jfo),e(Kh,Yfo),e(x,Kfo),e(x,Zh),e(Zh,kae),e(kae,Zfo),e(Zh,emo),e(Zh,xP),e(xP,omo),e(Zh,rmo),e(x,tmo),e(x,ep),e(ep,Sae),e(Sae,amo),e(ep,nmo),e(ep,$P),e($P,smo),e(ep,lmo),e(x,imo),e(x,op),e(op,Rae),e(Rae,dmo),e(op,cmo),e(op,kP),e(kP,fmo),e(op,mmo),e(x,gmo),e(x,rp),e(rp,Bae),e(Bae,hmo),e(rp,pmo),e(rp,SP),e(SP,umo),e(rp,_mo),e(x,bmo),e(x,tp),e(tp,Pae),e(Pae,vmo),e(tp,Fmo),e(tp,RP),e(RP,Tmo),e(tp,Mmo),e(x,Emo),e(x,ap),e(ap,Iae),e(Iae,Cmo),e(ap,wmo),e(ap,BP),e(BP,Amo),e(ap,ymo),e(x,Lmo),e(x,np),e(np,qae),e(qae,xmo),e(np,$mo),e(np,PP),e(PP,kmo),e(np,Smo),e(x,Rmo),e(x,sp),e(sp,Nae),e(Nae,Bmo),e(sp,Pmo),e(sp,IP),e(IP,Imo),e(sp,qmo),e(x,Nmo),e(x,lp),e(lp,jae),e(jae,jmo),e(lp,Dmo),e(lp,qP),e(qP,Gmo),e(lp,Omo),e(x,Vmo),e(x,ip),e(ip,Dae),e(Dae,Xmo),e(ip,zmo),e(ip,NP),e(NP,Qmo),e(ip,Wmo),e(x,Hmo),e(x,dp),e(dp,Gae),e(Gae,Umo),e(dp,Jmo),e(dp,jP),e(jP,Ymo),e(dp,Kmo),e(x,Zmo),e(x,cp),e(cp,Oae),e(Oae,ego),e(cp,ogo),e(cp,DP),e(DP,rgo),e(cp,tgo),e(x,ago),e(x,xs),e(xs,Vae),e(Vae,ngo),e(xs,sgo),e(xs,GP),e(GP,lgo),e(xs,igo),e(xs,OP),e(OP,dgo),e(xs,cgo),e(x,fgo),e(x,fp),e(fp,Xae),e(Xae,mgo),e(fp,ggo),e(fp,VP),e(VP,hgo),e(fp,pgo),e(x,ugo),e(x,mp),e(mp,zae),e(zae,_go),e(mp,bgo),e(mp,XP),e(XP,vgo),e(mp,Fgo),e(x,Tgo),e(x,gp),e(gp,Qae),e(Qae,Mgo),e(gp,Ego),e(gp,zP),e(zP,Cgo),e(gp,wgo),e(x,Ago),e(x,hp),e(hp,Wae),e(Wae,ygo),e(hp,Lgo),e(hp,QP),e(QP,xgo),e(hp,$go),e(x,kgo),e(x,pp),e(pp,Hae),e(Hae,Sgo),e(pp,Rgo),e(pp,WP),e(WP,Bgo),e(pp,Pgo),e(x,Igo),e(x,up),e(up,Uae),e(Uae,qgo),e(up,Ngo),e(up,HP),e(HP,jgo),e(up,Dgo),e(x,Ggo),e(x,_p),e(_p,Jae),e(Jae,Ogo),e(_p,Vgo),e(_p,UP),e(UP,Xgo),e(_p,zgo),e(x,Qgo),e(x,bp),e(bp,Yae),e(Yae,Wgo),e(bp,Hgo),e(bp,JP),e(JP,Ugo),e(bp,Jgo),e(x,Ygo),e(x,vp),e(vp,Kae),e(Kae,Kgo),e(vp,Zgo),e(vp,YP),e(YP,eho),e(vp,oho),e(x,rho),e(x,Fp),e(Fp,Zae),e(Zae,tho),e(Fp,aho),e(Fp,KP),e(KP,nho),e(Fp,sho),e(x,lho),e(x,Tp),e(Tp,ene),e(ene,iho),e(Tp,dho),e(Tp,ZP),e(ZP,cho),e(Tp,fho),e(x,mho),e(x,Mp),e(Mp,one),e(one,gho),e(Mp,hho),e(Mp,eI),e(eI,pho),e(Mp,uho),e(x,_ho),e(x,Ep),e(Ep,rne),e(rne,bho),e(Ep,vho),e(Ep,oI),e(oI,Fho),e(Ep,Tho),e(x,Mho),e(x,Cp),e(Cp,tne),e(tne,Eho),e(Cp,Cho),e(Cp,rI),e(rI,who),e(Cp,Aho),e(x,yho),e(x,wp),e(wp,ane),e(ane,Lho),e(wp,xho),e(wp,tI),e(tI,$ho),e(wp,kho),e(x,Sho),e(x,Ap),e(Ap,nne),e(nne,Rho),e(Ap,Bho),e(Ap,aI),e(aI,Pho),e(Ap,Iho),e(x,qho),e(x,yp),e(yp,sne),e(sne,Nho),e(yp,jho),e(yp,nI),e(nI,Dho),e(yp,Gho),e(x,Oho),e(x,Lp),e(Lp,lne),e(lne,Vho),e(Lp,Xho),e(Lp,sI),e(sI,zho),e(Lp,Qho),e(x,Who),e(x,xp),e(xp,ine),e(ine,Hho),e(xp,Uho),e(xp,lI),e(lI,Jho),e(xp,Yho),e(x,Kho),e(x,$p),e($p,dne),e(dne,Zho),e($p,epo),e($p,iI),e(iI,opo),e($p,rpo),e(x,tpo),e(x,kp),e(kp,cne),e(cne,apo),e(kp,npo),e(kp,dI),e(dI,spo),e(kp,lpo),e(x,ipo),e(x,Sp),e(Sp,fne),e(fne,dpo),e(Sp,cpo),e(Sp,cI),e(cI,fpo),e(Sp,mpo),e(x,gpo),e(x,Rp),e(Rp,mne),e(mne,hpo),e(Rp,ppo),e(Rp,fI),e(fI,upo),e(Rp,_po),e(x,bpo),e(x,Bp),e(Bp,gne),e(gne,vpo),e(Bp,Fpo),e(Bp,mI),e(mI,Tpo),e(Bp,Mpo),e(x,Epo),e(x,Pp),e(Pp,hne),e(hne,Cpo),e(Pp,wpo),e(Pp,gI),e(gI,Apo),e(Pp,ypo),e(x,Lpo),e(x,Ip),e(Ip,pne),e(pne,xpo),e(Ip,$po),e(Ip,hI),e(hI,kpo),e(Ip,Spo),e(x,Rpo),e(x,qp),e(qp,une),e(une,Bpo),e(qp,Ppo),e(qp,pI),e(pI,Ipo),e(qp,qpo),e(x,Npo),e(x,Np),e(Np,_ne),e(_ne,jpo),e(Np,Dpo),e(Np,uI),e(uI,Gpo),e(Np,Opo),e(x,Vpo),e(x,jp),e(jp,bne),e(bne,Xpo),e(jp,zpo),e(jp,_I),e(_I,Qpo),e(jp,Wpo),e(x,Hpo),e(x,Dp),e(Dp,vne),e(vne,Upo),e(Dp,Jpo),e(Dp,bI),e(bI,Ypo),e(Dp,Kpo),e(x,Zpo),e(x,Gp),e(Gp,Fne),e(Fne,euo),e(Gp,ouo),e(Gp,vI),e(vI,ruo),e(Gp,tuo),e(x,auo),e(x,Op),e(Op,Tne),e(Tne,nuo),e(Op,suo),e(Op,FI),e(FI,luo),e(Op,iuo),e(x,duo),e(x,Vp),e(Vp,Mne),e(Mne,cuo),e(Vp,fuo),e(Vp,TI),e(TI,muo),e(Vp,guo),e(x,huo),e(x,Xp),e(Xp,Ene),e(Ene,puo),e(Xp,uuo),e(Xp,MI),e(MI,_uo),e(Xp,buo),e(x,vuo),e(x,zp),e(zp,Cne),e(Cne,Fuo),e(zp,Tuo),e(zp,EI),e(EI,Muo),e(zp,Euo),e(x,Cuo),e(x,Qp),e(Qp,wne),e(wne,wuo),e(Qp,Auo),e(Qp,CI),e(CI,yuo),e(Qp,Luo),e(x,xuo),e(x,Wp),e(Wp,Ane),e(Ane,$uo),e(Wp,kuo),e(Wp,wI),e(wI,Suo),e(Wp,Ruo),e(x,Buo),e(x,Hp),e(Hp,yne),e(yne,Puo),e(Hp,Iuo),e(Hp,AI),e(AI,quo),e(Hp,Nuo),e(x,juo),e(x,Up),e(Up,Lne),e(Lne,Duo),e(Up,Guo),e(Up,yI),e(yI,Ouo),e(Up,Vuo),e(x,Xuo),e(x,Jp),e(Jp,xne),e(xne,zuo),e(Jp,Quo),e(Jp,LI),e(LI,Wuo),e(Jp,Huo),e(x,Uuo),e(x,Yp),e(Yp,$ne),e($ne,Juo),e(Yp,Yuo),e(Yp,xI),e(xI,Kuo),e(Yp,Zuo),e(x,e_o),e(x,Kp),e(Kp,kne),e(kne,o_o),e(Kp,r_o),e(Kp,$I),e($I,t_o),e(Kp,a_o),e(x,n_o),e(x,Zp),e(Zp,Sne),e(Sne,s_o),e(Zp,l_o),e(Zp,kI),e(kI,i_o),e(Zp,d_o),e(x,c_o),e(x,eu),e(eu,Rne),e(Rne,f_o),e(eu,m_o),e(eu,SI),e(SI,g_o),e(eu,h_o),e(x,p_o),e(x,ou),e(ou,Bne),e(Bne,u_o),e(ou,__o),e(ou,RI),e(RI,b_o),e(ou,v_o),e(x,F_o),e(x,ru),e(ru,Pne),e(Pne,T_o),e(ru,M_o),e(ru,BI),e(BI,E_o),e(ru,C_o),e(x,w_o),e(x,tu),e(tu,Ine),e(Ine,A_o),e(tu,y_o),e(tu,PI),e(PI,L_o),e(tu,x_o),e(x,$_o),e(x,au),e(au,qne),e(qne,k_o),e(au,S_o),e(au,II),e(II,R_o),e(au,B_o),e(x,P_o),e(x,nu),e(nu,Nne),e(Nne,I_o),e(nu,q_o),e(nu,qI),e(qI,N_o),e(nu,j_o),e(x,D_o),e(x,su),e(su,jne),e(jne,G_o),e(su,O_o),e(su,NI),e(NI,V_o),e(su,X_o),e(x,z_o),e(x,lu),e(lu,Dne),e(Dne,Q_o),e(lu,W_o),e(lu,jI),e(jI,H_o),e(lu,U_o),e(x,J_o),e(x,iu),e(iu,Gne),e(Gne,Y_o),e(iu,K_o),e(iu,DI),e(DI,Z_o),e(iu,e1o),e(x,o1o),e(x,du),e(du,One),e(One,r1o),e(du,t1o),e(du,GI),e(GI,a1o),e(du,n1o),e(x,s1o),e(x,cu),e(cu,Vne),e(Vne,l1o),e(cu,i1o),e(cu,OI),e(OI,d1o),e(cu,c1o),e(x,f1o),e(x,fu),e(fu,Xne),e(Xne,m1o),e(fu,g1o),e(fu,VI),e(VI,h1o),e(fu,p1o),e(x,u1o),e(x,mu),e(mu,zne),e(zne,_1o),e(mu,b1o),e(mu,XI),e(XI,v1o),e(mu,F1o),e(x,T1o),e(x,gu),e(gu,Qne),e(Qne,M1o),e(gu,E1o),e(gu,zI),e(zI,C1o),e(gu,w1o),e(x,A1o),e(x,hu),e(hu,Wne),e(Wne,y1o),e(hu,L1o),e(hu,QI),e(QI,x1o),e(hu,$1o),e(x,k1o),e(x,pu),e(pu,Hne),e(Hne,S1o),e(pu,R1o),e(pu,WI),e(WI,B1o),e(pu,P1o),e(x,I1o),e(x,uu),e(uu,Une),e(Une,q1o),e(uu,N1o),e(uu,HI),e(HI,j1o),e(uu,D1o),e(x,G1o),e(x,_u),e(_u,Jne),e(Jne,O1o),e(_u,V1o),e(_u,UI),e(UI,X1o),e(_u,z1o),e(x,Q1o),e(x,bu),e(bu,Yne),e(Yne,W1o),e(bu,H1o),e(bu,JI),e(JI,U1o),e(bu,J1o),e(x,Y1o),e(x,vu),e(vu,Kne),e(Kne,K1o),e(vu,Z1o),e(vu,YI),e(YI,ebo),e(vu,obo),e(x,rbo),e(x,Fu),e(Fu,Zne),e(Zne,tbo),e(Fu,abo),e(Fu,KI),e(KI,nbo),e(Fu,sbo),e(x,lbo),e(x,Tu),e(Tu,ese),e(ese,ibo),e(Tu,dbo),e(Tu,ZI),e(ZI,cbo),e(Tu,fbo),e(He,mbo),e(He,Mu),e(Mu,gbo),e(Mu,ose),e(ose,hbo),e(Mu,pbo),e(Mu,rse),e(rse,ubo),e(He,_bo),M(Eu,He,null),b(f,OBe,_),b(f,vi,_),e(vi,Cu),e(Cu,tse),M(aA,tse,null),e(vi,bbo),e(vi,ase),e(ase,vbo),b(f,VBe,_),b(f,xo,_),M(nA,xo,null),e(xo,Fbo),e(xo,Fi),e(Fi,Tbo),e(Fi,eq),e(eq,Mbo),e(Fi,Ebo),e(Fi,oq),e(oq,Cbo),e(Fi,wbo),e(xo,Abo),e(xo,sA),e(sA,ybo),e(sA,nse),e(nse,Lbo),e(sA,xbo),e(xo,$bo),e(xo,et),M(lA,et,null),e(et,kbo),e(et,sse),e(sse,Sbo),e(et,Rbo),e(et,Ti),e(Ti,Bbo),e(Ti,lse),e(lse,Pbo),e(Ti,Ibo),e(Ti,rq),e(rq,qbo),e(Ti,Nbo),e(et,jbo),M(wu,et,null),e(xo,Dbo),e(xo,Ue),M(iA,Ue,null),e(Ue,Gbo),e(Ue,ise),e(ise,Obo),e(Ue,Vbo),e(Ue,Ca),e(Ca,Xbo),e(Ca,dse),e(dse,zbo),e(Ca,Qbo),e(Ca,cse),e(cse,Wbo),e(Ca,Hbo),e(Ca,fse),e(fse,Ubo),e(Ca,Jbo),e(Ue,Ybo),e(Ue,G),e(G,Au),e(Au,mse),e(mse,Kbo),e(Au,Zbo),e(Au,tq),e(tq,e2o),e(Au,o2o),e(G,r2o),e(G,yu),e(yu,gse),e(gse,t2o),e(yu,a2o),e(yu,aq),e(aq,n2o),e(yu,s2o),e(G,l2o),e(G,Lu),e(Lu,hse),e(hse,i2o),e(Lu,d2o),e(Lu,nq),e(nq,c2o),e(Lu,f2o),e(G,m2o),e(G,xu),e(xu,pse),e(pse,g2o),e(xu,h2o),e(xu,sq),e(sq,p2o),e(xu,u2o),e(G,_2o),e(G,$u),e($u,use),e(use,b2o),e($u,v2o),e($u,lq),e(lq,F2o),e($u,T2o),e(G,M2o),e(G,ku),e(ku,_se),e(_se,E2o),e(ku,C2o),e(ku,iq),e(iq,w2o),e(ku,A2o),e(G,y2o),e(G,Su),e(Su,bse),e(bse,L2o),e(Su,x2o),e(Su,dq),e(dq,$2o),e(Su,k2o),e(G,S2o),e(G,Ru),e(Ru,vse),e(vse,R2o),e(Ru,B2o),e(Ru,cq),e(cq,P2o),e(Ru,I2o),e(G,q2o),e(G,Bu),e(Bu,Fse),e(Fse,N2o),e(Bu,j2o),e(Bu,fq),e(fq,D2o),e(Bu,G2o),e(G,O2o),e(G,Pu),e(Pu,Tse),e(Tse,V2o),e(Pu,X2o),e(Pu,mq),e(mq,z2o),e(Pu,Q2o),e(G,W2o),e(G,Iu),e(Iu,Mse),e(Mse,H2o),e(Iu,U2o),e(Iu,gq),e(gq,J2o),e(Iu,Y2o),e(G,K2o),e(G,qu),e(qu,Ese),e(Ese,Z2o),e(qu,evo),e(qu,hq),e(hq,ovo),e(qu,rvo),e(G,tvo),e(G,Nu),e(Nu,Cse),e(Cse,avo),e(Nu,nvo),e(Nu,pq),e(pq,svo),e(Nu,lvo),e(G,ivo),e(G,ju),e(ju,wse),e(wse,dvo),e(ju,cvo),e(ju,uq),e(uq,fvo),e(ju,mvo),e(G,gvo),e(G,Du),e(Du,Ase),e(Ase,hvo),e(Du,pvo),e(Du,_q),e(_q,uvo),e(Du,_vo),e(G,bvo),e(G,Gu),e(Gu,yse),e(yse,vvo),e(Gu,Fvo),e(Gu,bq),e(bq,Tvo),e(Gu,Mvo),e(G,Evo),e(G,Ou),e(Ou,Lse),e(Lse,Cvo),e(Ou,wvo),e(Ou,vq),e(vq,Avo),e(Ou,yvo),e(G,Lvo),e(G,Vu),e(Vu,xse),e(xse,xvo),e(Vu,$vo),e(Vu,Fq),e(Fq,kvo),e(Vu,Svo),e(G,Rvo),e(G,Xu),e(Xu,$se),e($se,Bvo),e(Xu,Pvo),e(Xu,Tq),e(Tq,Ivo),e(Xu,qvo),e(G,Nvo),e(G,zu),e(zu,kse),e(kse,jvo),e(zu,Dvo),e(zu,Mq),e(Mq,Gvo),e(zu,Ovo),e(G,Vvo),e(G,Qu),e(Qu,Sse),e(Sse,Xvo),e(Qu,zvo),e(Qu,Eq),e(Eq,Qvo),e(Qu,Wvo),e(G,Hvo),e(G,Wu),e(Wu,Rse),e(Rse,Uvo),e(Wu,Jvo),e(Wu,Cq),e(Cq,Yvo),e(Wu,Kvo),e(G,Zvo),e(G,Hu),e(Hu,Bse),e(Bse,eFo),e(Hu,oFo),e(Hu,wq),e(wq,rFo),e(Hu,tFo),e(G,aFo),e(G,Uu),e(Uu,Pse),e(Pse,nFo),e(Uu,sFo),e(Uu,Aq),e(Aq,lFo),e(Uu,iFo),e(G,dFo),e(G,Ju),e(Ju,Ise),e(Ise,cFo),e(Ju,fFo),e(Ju,yq),e(yq,mFo),e(Ju,gFo),e(G,hFo),e(G,Yu),e(Yu,qse),e(qse,pFo),e(Yu,uFo),e(Yu,Lq),e(Lq,_Fo),e(Yu,bFo),e(G,vFo),e(G,Ku),e(Ku,Nse),e(Nse,FFo),e(Ku,TFo),e(Ku,xq),e(xq,MFo),e(Ku,EFo),e(G,CFo),e(G,Zu),e(Zu,jse),e(jse,wFo),e(Zu,AFo),e(Zu,$q),e($q,yFo),e(Zu,LFo),e(G,xFo),e(G,e_),e(e_,Dse),e(Dse,$Fo),e(e_,kFo),e(e_,kq),e(kq,SFo),e(e_,RFo),e(G,BFo),e(G,o_),e(o_,Gse),e(Gse,PFo),e(o_,IFo),e(o_,Sq),e(Sq,qFo),e(o_,NFo),e(G,jFo),e(G,r_),e(r_,Ose),e(Ose,DFo),e(r_,GFo),e(r_,Rq),e(Rq,OFo),e(r_,VFo),e(G,XFo),e(G,t_),e(t_,Vse),e(Vse,zFo),e(t_,QFo),e(t_,Bq),e(Bq,WFo),e(t_,HFo),e(G,UFo),e(G,a_),e(a_,Xse),e(Xse,JFo),e(a_,YFo),e(a_,Pq),e(Pq,KFo),e(a_,ZFo),e(G,e0o),e(G,n_),e(n_,zse),e(zse,o0o),e(n_,r0o),e(n_,Iq),e(Iq,t0o),e(n_,a0o),e(G,n0o),e(G,s_),e(s_,Qse),e(Qse,s0o),e(s_,l0o),e(s_,qq),e(qq,i0o),e(s_,d0o),e(G,c0o),e(G,l_),e(l_,Wse),e(Wse,f0o),e(l_,m0o),e(l_,Nq),e(Nq,g0o),e(l_,h0o),e(G,p0o),e(G,i_),e(i_,Hse),e(Hse,u0o),e(i_,_0o),e(i_,jq),e(jq,b0o),e(i_,v0o),e(G,F0o),e(G,d_),e(d_,Use),e(Use,T0o),e(d_,M0o),e(d_,Dq),e(Dq,E0o),e(d_,C0o),e(G,w0o),e(G,c_),e(c_,Jse),e(Jse,A0o),e(c_,y0o),e(c_,Gq),e(Gq,L0o),e(c_,x0o),e(Ue,$0o),e(Ue,f_),e(f_,k0o),e(f_,Yse),e(Yse,S0o),e(f_,R0o),e(f_,Kse),e(Kse,B0o),e(Ue,P0o),M(m_,Ue,null),b(f,XBe,_),b(f,Mi,_),e(Mi,g_),e(g_,Zse),M(dA,Zse,null),e(Mi,I0o),e(Mi,ele),e(ele,q0o),b(f,zBe,_),b(f,$o,_),M(cA,$o,null),e($o,N0o),e($o,Ei),e(Ei,j0o),e(Ei,Oq),e(Oq,D0o),e(Ei,G0o),e(Ei,Vq),e(Vq,O0o),e(Ei,V0o),e($o,X0o),e($o,fA),e(fA,z0o),e(fA,ole),e(ole,Q0o),e(fA,W0o),e($o,H0o),e($o,ot),M(mA,ot,null),e(ot,U0o),e(ot,rle),e(rle,J0o),e(ot,Y0o),e(ot,Ci),e(Ci,K0o),e(Ci,tle),e(tle,Z0o),e(Ci,eTo),e(Ci,Xq),e(Xq,oTo),e(Ci,rTo),e(ot,tTo),M(h_,ot,null),e($o,aTo),e($o,Je),M(gA,Je,null),e(Je,nTo),e(Je,ale),e(ale,sTo),e(Je,lTo),e(Je,wa),e(wa,iTo),e(wa,nle),e(nle,dTo),e(wa,cTo),e(wa,sle),e(sle,fTo),e(wa,mTo),e(wa,lle),e(lle,gTo),e(wa,hTo),e(Je,pTo),e(Je,z),e(z,p_),e(p_,ile),e(ile,uTo),e(p_,_To),e(p_,zq),e(zq,bTo),e(p_,vTo),e(z,FTo),e(z,u_),e(u_,dle),e(dle,TTo),e(u_,MTo),e(u_,Qq),e(Qq,ETo),e(u_,CTo),e(z,wTo),e(z,__),e(__,cle),e(cle,ATo),e(__,yTo),e(__,Wq),e(Wq,LTo),e(__,xTo),e(z,$To),e(z,b_),e(b_,fle),e(fle,kTo),e(b_,STo),e(b_,Hq),e(Hq,RTo),e(b_,BTo),e(z,PTo),e(z,v_),e(v_,mle),e(mle,ITo),e(v_,qTo),e(v_,Uq),e(Uq,NTo),e(v_,jTo),e(z,DTo),e(z,F_),e(F_,gle),e(gle,GTo),e(F_,OTo),e(F_,Jq),e(Jq,VTo),e(F_,XTo),e(z,zTo),e(z,T_),e(T_,hle),e(hle,QTo),e(T_,WTo),e(T_,Yq),e(Yq,HTo),e(T_,UTo),e(z,JTo),e(z,M_),e(M_,ple),e(ple,YTo),e(M_,KTo),e(M_,Kq),e(Kq,ZTo),e(M_,e7o),e(z,o7o),e(z,E_),e(E_,ule),e(ule,r7o),e(E_,t7o),e(E_,Zq),e(Zq,a7o),e(E_,n7o),e(z,s7o),e(z,C_),e(C_,_le),e(_le,l7o),e(C_,i7o),e(C_,eN),e(eN,d7o),e(C_,c7o),e(z,f7o),e(z,w_),e(w_,ble),e(ble,m7o),e(w_,g7o),e(w_,oN),e(oN,h7o),e(w_,p7o),e(z,u7o),e(z,A_),e(A_,vle),e(vle,_7o),e(A_,b7o),e(A_,rN),e(rN,v7o),e(A_,F7o),e(z,T7o),e(z,y_),e(y_,Fle),e(Fle,M7o),e(y_,E7o),e(y_,tN),e(tN,C7o),e(y_,w7o),e(z,A7o),e(z,L_),e(L_,Tle),e(Tle,y7o),e(L_,L7o),e(L_,aN),e(aN,x7o),e(L_,$7o),e(z,k7o),e(z,x_),e(x_,Mle),e(Mle,S7o),e(x_,R7o),e(x_,nN),e(nN,B7o),e(x_,P7o),e(z,I7o),e(z,$_),e($_,Ele),e(Ele,q7o),e($_,N7o),e($_,sN),e(sN,j7o),e($_,D7o),e(z,G7o),e(z,k_),e(k_,Cle),e(Cle,O7o),e(k_,V7o),e(k_,lN),e(lN,X7o),e(k_,z7o),e(z,Q7o),e(z,S_),e(S_,wle),e(wle,W7o),e(S_,H7o),e(S_,iN),e(iN,U7o),e(S_,J7o),e(z,Y7o),e(z,R_),e(R_,Ale),e(Ale,K7o),e(R_,Z7o),e(R_,dN),e(dN,e9o),e(R_,o9o),e(z,r9o),e(z,B_),e(B_,yle),e(yle,t9o),e(B_,a9o),e(B_,cN),e(cN,n9o),e(B_,s9o),e(z,l9o),e(z,P_),e(P_,Lle),e(Lle,i9o),e(P_,d9o),e(P_,fN),e(fN,c9o),e(P_,f9o),e(z,m9o),e(z,I_),e(I_,xle),e(xle,g9o),e(I_,h9o),e(I_,mN),e(mN,p9o),e(I_,u9o),e(z,_9o),e(z,q_),e(q_,$le),e($le,b9o),e(q_,v9o),e(q_,gN),e(gN,F9o),e(q_,T9o),e(z,M9o),e(z,N_),e(N_,kle),e(kle,E9o),e(N_,C9o),e(N_,hN),e(hN,w9o),e(N_,A9o),e(z,y9o),e(z,j_),e(j_,Sle),e(Sle,L9o),e(j_,x9o),e(j_,pN),e(pN,$9o),e(j_,k9o),e(z,S9o),e(z,D_),e(D_,Rle),e(Rle,R9o),e(D_,B9o),e(D_,uN),e(uN,P9o),e(D_,I9o),e(z,q9o),e(z,G_),e(G_,Ble),e(Ble,N9o),e(G_,j9o),e(G_,_N),e(_N,D9o),e(G_,G9o),e(z,O9o),e(z,O_),e(O_,Ple),e(Ple,V9o),e(O_,X9o),e(O_,bN),e(bN,z9o),e(O_,Q9o),e(z,W9o),e(z,V_),e(V_,Ile),e(Ile,H9o),e(V_,U9o),e(V_,vN),e(vN,J9o),e(V_,Y9o),e(z,K9o),e(z,X_),e(X_,qle),e(qle,Z9o),e(X_,eMo),e(X_,FN),e(FN,oMo),e(X_,rMo),e(z,tMo),e(z,z_),e(z_,Nle),e(Nle,aMo),e(z_,nMo),e(z_,TN),e(TN,sMo),e(z_,lMo),e(z,iMo),e(z,Q_),e(Q_,jle),e(jle,dMo),e(Q_,cMo),e(Q_,MN),e(MN,fMo),e(Q_,mMo),e(z,gMo),e(z,W_),e(W_,Dle),e(Dle,hMo),e(W_,pMo),e(W_,EN),e(EN,uMo),e(W_,_Mo),e(z,bMo),e(z,H_),e(H_,Gle),e(Gle,vMo),e(H_,FMo),e(H_,CN),e(CN,TMo),e(H_,MMo),e(z,EMo),e(z,U_),e(U_,Ole),e(Ole,CMo),e(U_,wMo),e(U_,wN),e(wN,AMo),e(U_,yMo),e(Je,LMo),e(Je,J_),e(J_,xMo),e(J_,Vle),e(Vle,$Mo),e(J_,kMo),e(J_,Xle),e(Xle,SMo),e(Je,RMo),M(Y_,Je,null),b(f,QBe,_),b(f,wi,_),e(wi,K_),e(K_,zle),M(hA,zle,null),e(wi,BMo),e(wi,Qle),e(Qle,PMo),b(f,WBe,_),b(f,ko,_),M(pA,ko,null),e(ko,IMo),e(ko,Ai),e(Ai,qMo),e(Ai,AN),e(AN,NMo),e(Ai,jMo),e(Ai,yN),e(yN,DMo),e(Ai,GMo),e(ko,OMo),e(ko,uA),e(uA,VMo),e(uA,Wle),e(Wle,XMo),e(uA,zMo),e(ko,QMo),e(ko,rt),M(_A,rt,null),e(rt,WMo),e(rt,Hle),e(Hle,HMo),e(rt,UMo),e(rt,yi),e(yi,JMo),e(yi,Ule),e(Ule,YMo),e(yi,KMo),e(yi,LN),e(LN,ZMo),e(yi,e4o),e(rt,o4o),M(Z_,rt,null),e(ko,r4o),e(ko,Ye),M(bA,Ye,null),e(Ye,t4o),e(Ye,Jle),e(Jle,a4o),e(Ye,n4o),e(Ye,Aa),e(Aa,s4o),e(Aa,Yle),e(Yle,l4o),e(Aa,i4o),e(Aa,Kle),e(Kle,d4o),e(Aa,c4o),e(Aa,Zle),e(Zle,f4o),e(Aa,m4o),e(Ye,g4o),e(Ye,Q),e(Q,e1),e(e1,eie),e(eie,h4o),e(e1,p4o),e(e1,xN),e(xN,u4o),e(e1,_4o),e(Q,b4o),e(Q,o1),e(o1,oie),e(oie,v4o),e(o1,F4o),e(o1,$N),e($N,T4o),e(o1,M4o),e(Q,E4o),e(Q,r1),e(r1,rie),e(rie,C4o),e(r1,w4o),e(r1,kN),e(kN,A4o),e(r1,y4o),e(Q,L4o),e(Q,t1),e(t1,tie),e(tie,x4o),e(t1,$4o),e(t1,SN),e(SN,k4o),e(t1,S4o),e(Q,R4o),e(Q,a1),e(a1,aie),e(aie,B4o),e(a1,P4o),e(a1,RN),e(RN,I4o),e(a1,q4o),e(Q,N4o),e(Q,n1),e(n1,nie),e(nie,j4o),e(n1,D4o),e(n1,BN),e(BN,G4o),e(n1,O4o),e(Q,V4o),e(Q,s1),e(s1,sie),e(sie,X4o),e(s1,z4o),e(s1,PN),e(PN,Q4o),e(s1,W4o),e(Q,H4o),e(Q,l1),e(l1,lie),e(lie,U4o),e(l1,J4o),e(l1,IN),e(IN,Y4o),e(l1,K4o),e(Q,Z4o),e(Q,i1),e(i1,iie),e(iie,eEo),e(i1,oEo),e(i1,qN),e(qN,rEo),e(i1,tEo),e(Q,aEo),e(Q,d1),e(d1,die),e(die,nEo),e(d1,sEo),e(d1,NN),e(NN,lEo),e(d1,iEo),e(Q,dEo),e(Q,c1),e(c1,cie),e(cie,cEo),e(c1,fEo),e(c1,jN),e(jN,mEo),e(c1,gEo),e(Q,hEo),e(Q,f1),e(f1,fie),e(fie,pEo),e(f1,uEo),e(f1,DN),e(DN,_Eo),e(f1,bEo),e(Q,vEo),e(Q,m1),e(m1,mie),e(mie,FEo),e(m1,TEo),e(m1,GN),e(GN,MEo),e(m1,EEo),e(Q,CEo),e(Q,g1),e(g1,gie),e(gie,wEo),e(g1,AEo),e(g1,ON),e(ON,yEo),e(g1,LEo),e(Q,xEo),e(Q,h1),e(h1,hie),e(hie,$Eo),e(h1,kEo),e(h1,VN),e(VN,SEo),e(h1,REo),e(Q,BEo),e(Q,p1),e(p1,pie),e(pie,PEo),e(p1,IEo),e(p1,XN),e(XN,qEo),e(p1,NEo),e(Q,jEo),e(Q,u1),e(u1,uie),e(uie,DEo),e(u1,GEo),e(u1,zN),e(zN,OEo),e(u1,VEo),e(Q,XEo),e(Q,_1),e(_1,_ie),e(_ie,zEo),e(_1,QEo),e(_1,QN),e(QN,WEo),e(_1,HEo),e(Q,UEo),e(Q,b1),e(b1,bie),e(bie,JEo),e(b1,YEo),e(b1,WN),e(WN,KEo),e(b1,ZEo),e(Q,e5o),e(Q,v1),e(v1,vie),e(vie,o5o),e(v1,r5o),e(v1,HN),e(HN,t5o),e(v1,a5o),e(Q,n5o),e(Q,F1),e(F1,Fie),e(Fie,s5o),e(F1,l5o),e(F1,UN),e(UN,i5o),e(F1,d5o),e(Q,c5o),e(Q,T1),e(T1,Tie),e(Tie,f5o),e(T1,m5o),e(T1,JN),e(JN,g5o),e(T1,h5o),e(Q,p5o),e(Q,M1),e(M1,Mie),e(Mie,u5o),e(M1,_5o),e(M1,YN),e(YN,b5o),e(M1,v5o),e(Q,F5o),e(Q,E1),e(E1,Eie),e(Eie,T5o),e(E1,M5o),e(E1,KN),e(KN,E5o),e(E1,C5o),e(Q,w5o),e(Q,C1),e(C1,Cie),e(Cie,A5o),e(C1,y5o),e(C1,ZN),e(ZN,L5o),e(C1,x5o),e(Q,$5o),e(Q,w1),e(w1,wie),e(wie,k5o),e(w1,S5o),e(w1,ej),e(ej,R5o),e(w1,B5o),e(Q,P5o),e(Q,A1),e(A1,Aie),e(Aie,I5o),e(A1,q5o),e(A1,oj),e(oj,N5o),e(A1,j5o),e(Q,D5o),e(Q,y1),e(y1,yie),e(yie,G5o),e(y1,O5o),e(y1,rj),e(rj,V5o),e(y1,X5o),e(Q,z5o),e(Q,L1),e(L1,Lie),e(Lie,Q5o),e(L1,W5o),e(L1,tj),e(tj,H5o),e(L1,U5o),e(Q,J5o),e(Q,x1),e(x1,xie),e(xie,Y5o),e(x1,K5o),e(x1,aj),e(aj,Z5o),e(x1,eCo),e(Q,oCo),e(Q,$1),e($1,$ie),e($ie,rCo),e($1,tCo),e($1,kie),e(kie,aCo),e($1,nCo),e(Q,sCo),e(Q,k1),e(k1,Sie),e(Sie,lCo),e(k1,iCo),e(k1,nj),e(nj,dCo),e(k1,cCo),e(Q,fCo),e(Q,S1),e(S1,Rie),e(Rie,mCo),e(S1,gCo),e(S1,sj),e(sj,hCo),e(S1,pCo),e(Q,uCo),e(Q,R1),e(R1,Bie),e(Bie,_Co),e(R1,bCo),e(R1,lj),e(lj,vCo),e(R1,FCo),e(Q,TCo),e(Q,B1),e(B1,Pie),e(Pie,MCo),e(B1,ECo),e(B1,ij),e(ij,CCo),e(B1,wCo),e(Ye,ACo),e(Ye,P1),e(P1,yCo),e(P1,Iie),e(Iie,LCo),e(P1,xCo),e(P1,qie),e(qie,$Co),e(Ye,kCo),M(I1,Ye,null),b(f,HBe,_),b(f,Li,_),e(Li,q1),e(q1,Nie),M(vA,Nie,null),e(Li,SCo),e(Li,jie),e(jie,RCo),b(f,UBe,_),b(f,So,_),M(FA,So,null),e(So,BCo),e(So,xi),e(xi,PCo),e(xi,dj),e(dj,ICo),e(xi,qCo),e(xi,cj),e(cj,NCo),e(xi,jCo),e(So,DCo),e(So,TA),e(TA,GCo),e(TA,Die),e(Die,OCo),e(TA,VCo),e(So,XCo),e(So,tt),M(MA,tt,null),e(tt,zCo),e(tt,Gie),e(Gie,QCo),e(tt,WCo),e(tt,$i),e($i,HCo),e($i,Oie),e(Oie,UCo),e($i,JCo),e($i,fj),e(fj,YCo),e($i,KCo),e(tt,ZCo),M(N1,tt,null),e(So,e3o),e(So,Ke),M(EA,Ke,null),e(Ke,o3o),e(Ke,Vie),e(Vie,r3o),e(Ke,t3o),e(Ke,ya),e(ya,a3o),e(ya,Xie),e(Xie,n3o),e(ya,s3o),e(ya,zie),e(zie,l3o),e(ya,i3o),e(ya,Qie),e(Qie,d3o),e(ya,c3o),e(Ke,f3o),e(Ke,he),e(he,j1),e(j1,Wie),e(Wie,m3o),e(j1,g3o),e(j1,mj),e(mj,h3o),e(j1,p3o),e(he,u3o),e(he,D1),e(D1,Hie),e(Hie,_3o),e(D1,b3o),e(D1,gj),e(gj,v3o),e(D1,F3o),e(he,T3o),e(he,G1),e(G1,Uie),e(Uie,M3o),e(G1,E3o),e(G1,hj),e(hj,C3o),e(G1,w3o),e(he,A3o),e(he,O1),e(O1,Jie),e(Jie,y3o),e(O1,L3o),e(O1,pj),e(pj,x3o),e(O1,$3o),e(he,k3o),e(he,V1),e(V1,Yie),e(Yie,S3o),e(V1,R3o),e(V1,uj),e(uj,B3o),e(V1,P3o),e(he,I3o),e(he,X1),e(X1,Kie),e(Kie,q3o),e(X1,N3o),e(X1,_j),e(_j,j3o),e(X1,D3o),e(he,G3o),e(he,z1),e(z1,Zie),e(Zie,O3o),e(z1,V3o),e(z1,bj),e(bj,X3o),e(z1,z3o),e(he,Q3o),e(he,Q1),e(Q1,ede),e(ede,W3o),e(Q1,H3o),e(Q1,vj),e(vj,U3o),e(Q1,J3o),e(he,Y3o),e(he,W1),e(W1,ode),e(ode,K3o),e(W1,Z3o),e(W1,Fj),e(Fj,ewo),e(W1,owo),e(he,rwo),e(he,H1),e(H1,rde),e(rde,two),e(H1,awo),e(H1,Tj),e(Tj,nwo),e(H1,swo),e(he,lwo),e(he,U1),e(U1,tde),e(tde,iwo),e(U1,dwo),e(U1,Mj),e(Mj,cwo),e(U1,fwo),e(he,mwo),e(he,J1),e(J1,ade),e(ade,gwo),e(J1,hwo),e(J1,Ej),e(Ej,pwo),e(J1,uwo),e(he,_wo),e(he,Y1),e(Y1,nde),e(nde,bwo),e(Y1,vwo),e(Y1,Cj),e(Cj,Fwo),e(Y1,Two),e(he,Mwo),e(he,K1),e(K1,sde),e(sde,Ewo),e(K1,Cwo),e(K1,wj),e(wj,wwo),e(K1,Awo),e(he,ywo),e(he,Z1),e(Z1,lde),e(lde,Lwo),e(Z1,xwo),e(Z1,Aj),e(Aj,$wo),e(Z1,kwo),e(he,Swo),e(he,eb),e(eb,ide),e(ide,Rwo),e(eb,Bwo),e(eb,yj),e(yj,Pwo),e(eb,Iwo),e(he,qwo),e(he,ob),e(ob,dde),e(dde,Nwo),e(ob,jwo),e(ob,Lj),e(Lj,Dwo),e(ob,Gwo),e(Ke,Owo),e(Ke,rb),e(rb,Vwo),e(rb,cde),e(cde,Xwo),e(rb,zwo),e(rb,fde),e(fde,Qwo),e(Ke,Wwo),M(tb,Ke,null),b(f,JBe,_),b(f,ki,_),e(ki,ab),e(ab,mde),M(CA,mde,null),e(ki,Hwo),e(ki,gde),e(gde,Uwo),b(f,YBe,_),b(f,Ro,_),M(wA,Ro,null),e(Ro,Jwo),e(Ro,Si),e(Si,Ywo),e(Si,xj),e(xj,Kwo),e(Si,Zwo),e(Si,$j),e($j,eAo),e(Si,oAo),e(Ro,rAo),e(Ro,AA),e(AA,tAo),e(AA,hde),e(hde,aAo),e(AA,nAo),e(Ro,sAo),e(Ro,at),M(yA,at,null),e(at,lAo),e(at,pde),e(pde,iAo),e(at,dAo),e(at,Ri),e(Ri,cAo),e(Ri,ude),e(ude,fAo),e(Ri,mAo),e(Ri,kj),e(kj,gAo),e(Ri,hAo),e(at,pAo),M(nb,at,null),e(Ro,uAo),e(Ro,Ze),M(LA,Ze,null),e(Ze,_Ao),e(Ze,_de),e(_de,bAo),e(Ze,vAo),e(Ze,La),e(La,FAo),e(La,bde),e(bde,TAo),e(La,MAo),e(La,vde),e(vde,EAo),e(La,CAo),e(La,Fde),e(Fde,wAo),e(La,AAo),e(Ze,yAo),e(Ze,q),e(q,sb),e(sb,Tde),e(Tde,LAo),e(sb,xAo),e(sb,Sj),e(Sj,$Ao),e(sb,kAo),e(q,SAo),e(q,lb),e(lb,Mde),e(Mde,RAo),e(lb,BAo),e(lb,Rj),e(Rj,PAo),e(lb,IAo),e(q,qAo),e(q,ib),e(ib,Ede),e(Ede,NAo),e(ib,jAo),e(ib,Bj),e(Bj,DAo),e(ib,GAo),e(q,OAo),e(q,db),e(db,Cde),e(Cde,VAo),e(db,XAo),e(db,Pj),e(Pj,zAo),e(db,QAo),e(q,WAo),e(q,cb),e(cb,wde),e(wde,HAo),e(cb,UAo),e(cb,Ij),e(Ij,JAo),e(cb,YAo),e(q,KAo),e(q,fb),e(fb,Ade),e(Ade,ZAo),e(fb,e6o),e(fb,qj),e(qj,o6o),e(fb,r6o),e(q,t6o),e(q,mb),e(mb,yde),e(yde,a6o),e(mb,n6o),e(mb,Nj),e(Nj,s6o),e(mb,l6o),e(q,i6o),e(q,gb),e(gb,Lde),e(Lde,d6o),e(gb,c6o),e(gb,jj),e(jj,f6o),e(gb,m6o),e(q,g6o),e(q,hb),e(hb,xde),e(xde,h6o),e(hb,p6o),e(hb,Dj),e(Dj,u6o),e(hb,_6o),e(q,b6o),e(q,pb),e(pb,$de),e($de,v6o),e(pb,F6o),e(pb,Gj),e(Gj,T6o),e(pb,M6o),e(q,E6o),e(q,ub),e(ub,kde),e(kde,C6o),e(ub,w6o),e(ub,Oj),e(Oj,A6o),e(ub,y6o),e(q,L6o),e(q,_b),e(_b,Sde),e(Sde,x6o),e(_b,$6o),e(_b,Vj),e(Vj,k6o),e(_b,S6o),e(q,R6o),e(q,bb),e(bb,Rde),e(Rde,B6o),e(bb,P6o),e(bb,Xj),e(Xj,I6o),e(bb,q6o),e(q,N6o),e(q,vb),e(vb,Bde),e(Bde,j6o),e(vb,D6o),e(vb,zj),e(zj,G6o),e(vb,O6o),e(q,V6o),e(q,Fb),e(Fb,Pde),e(Pde,X6o),e(Fb,z6o),e(Fb,Qj),e(Qj,Q6o),e(Fb,W6o),e(q,H6o),e(q,Tb),e(Tb,Ide),e(Ide,U6o),e(Tb,J6o),e(Tb,Wj),e(Wj,Y6o),e(Tb,K6o),e(q,Z6o),e(q,Mb),e(Mb,qde),e(qde,eyo),e(Mb,oyo),e(Mb,Hj),e(Hj,ryo),e(Mb,tyo),e(q,ayo),e(q,Eb),e(Eb,Nde),e(Nde,nyo),e(Eb,syo),e(Eb,Uj),e(Uj,lyo),e(Eb,iyo),e(q,dyo),e(q,Cb),e(Cb,jde),e(jde,cyo),e(Cb,fyo),e(Cb,Jj),e(Jj,myo),e(Cb,gyo),e(q,hyo),e(q,wb),e(wb,Dde),e(Dde,pyo),e(wb,uyo),e(wb,Yj),e(Yj,_yo),e(wb,byo),e(q,vyo),e(q,Ab),e(Ab,Gde),e(Gde,Fyo),e(Ab,Tyo),e(Ab,Kj),e(Kj,Myo),e(Ab,Eyo),e(q,Cyo),e(q,yb),e(yb,Ode),e(Ode,wyo),e(yb,Ayo),e(yb,Zj),e(Zj,yyo),e(yb,Lyo),e(q,xyo),e(q,Lb),e(Lb,Vde),e(Vde,$yo),e(Lb,kyo),e(Lb,eD),e(eD,Syo),e(Lb,Ryo),e(q,Byo),e(q,xb),e(xb,Xde),e(Xde,Pyo),e(xb,Iyo),e(xb,oD),e(oD,qyo),e(xb,Nyo),e(q,jyo),e(q,$b),e($b,zde),e(zde,Dyo),e($b,Gyo),e($b,rD),e(rD,Oyo),e($b,Vyo),e(q,Xyo),e(q,kb),e(kb,Qde),e(Qde,zyo),e(kb,Qyo),e(kb,tD),e(tD,Wyo),e(kb,Hyo),e(q,Uyo),e(q,Sb),e(Sb,Wde),e(Wde,Jyo),e(Sb,Yyo),e(Sb,aD),e(aD,Kyo),e(Sb,Zyo),e(q,eLo),e(q,Rb),e(Rb,Hde),e(Hde,oLo),e(Rb,rLo),e(Rb,nD),e(nD,tLo),e(Rb,aLo),e(q,nLo),e(q,Bb),e(Bb,Ude),e(Ude,sLo),e(Bb,lLo),e(Bb,sD),e(sD,iLo),e(Bb,dLo),e(q,cLo),e(q,Pb),e(Pb,Jde),e(Jde,fLo),e(Pb,mLo),e(Pb,lD),e(lD,gLo),e(Pb,hLo),e(q,pLo),e(q,Ib),e(Ib,Yde),e(Yde,uLo),e(Ib,_Lo),e(Ib,iD),e(iD,bLo),e(Ib,vLo),e(q,FLo),e(q,qb),e(qb,Kde),e(Kde,TLo),e(qb,MLo),e(qb,dD),e(dD,ELo),e(qb,CLo),e(q,wLo),e(q,Nb),e(Nb,Zde),e(Zde,ALo),e(Nb,yLo),e(Nb,cD),e(cD,LLo),e(Nb,xLo),e(q,$Lo),e(q,jb),e(jb,ece),e(ece,kLo),e(jb,SLo),e(jb,fD),e(fD,RLo),e(jb,BLo),e(q,PLo),e(q,Db),e(Db,oce),e(oce,ILo),e(Db,qLo),e(Db,mD),e(mD,NLo),e(Db,jLo),e(q,DLo),e(q,Gb),e(Gb,rce),e(rce,GLo),e(Gb,OLo),e(Gb,gD),e(gD,VLo),e(Gb,XLo),e(q,zLo),e(q,Ob),e(Ob,tce),e(tce,QLo),e(Ob,WLo),e(Ob,hD),e(hD,HLo),e(Ob,ULo),e(q,JLo),e(q,Vb),e(Vb,ace),e(ace,YLo),e(Vb,KLo),e(Vb,pD),e(pD,ZLo),e(Vb,e8o),e(q,o8o),e(q,Xb),e(Xb,nce),e(nce,r8o),e(Xb,t8o),e(Xb,uD),e(uD,a8o),e(Xb,n8o),e(q,s8o),e(q,zb),e(zb,sce),e(sce,l8o),e(zb,i8o),e(zb,_D),e(_D,d8o),e(zb,c8o),e(q,f8o),e(q,Qb),e(Qb,lce),e(lce,m8o),e(Qb,g8o),e(Qb,bD),e(bD,h8o),e(Qb,p8o),e(q,u8o),e(q,Wb),e(Wb,ice),e(ice,_8o),e(Wb,b8o),e(Wb,vD),e(vD,v8o),e(Wb,F8o),e(q,T8o),e(q,Hb),e(Hb,dce),e(dce,M8o),e(Hb,E8o),e(Hb,FD),e(FD,C8o),e(Hb,w8o),e(q,A8o),e(q,Ub),e(Ub,cce),e(cce,y8o),e(Ub,L8o),e(Ub,TD),e(TD,x8o),e(Ub,$8o),e(q,k8o),e(q,Jb),e(Jb,fce),e(fce,S8o),e(Jb,R8o),e(Jb,MD),e(MD,B8o),e(Jb,P8o),e(q,I8o),e(q,Yb),e(Yb,mce),e(mce,q8o),e(Yb,N8o),e(Yb,ED),e(ED,j8o),e(Yb,D8o),e(q,G8o),e(q,Kb),e(Kb,gce),e(gce,O8o),e(Kb,V8o),e(Kb,CD),e(CD,X8o),e(Kb,z8o),e(Ze,Q8o),e(Ze,Zb),e(Zb,W8o),e(Zb,hce),e(hce,H8o),e(Zb,U8o),e(Zb,pce),e(pce,J8o),e(Ze,Y8o),M(e2,Ze,null),b(f,KBe,_),b(f,Bi,_),e(Bi,o2),e(o2,uce),M(xA,uce,null),e(Bi,K8o),e(Bi,_ce),e(_ce,Z8o),b(f,ZBe,_),b(f,Bo,_),M($A,Bo,null),e(Bo,exo),e(Bo,Pi),e(Pi,oxo),e(Pi,wD),e(wD,rxo),e(Pi,txo),e(Pi,AD),e(AD,axo),e(Pi,nxo),e(Bo,sxo),e(Bo,kA),e(kA,lxo),e(kA,bce),e(bce,ixo),e(kA,dxo),e(Bo,cxo),e(Bo,nt),M(SA,nt,null),e(nt,fxo),e(nt,vce),e(vce,mxo),e(nt,gxo),e(nt,Ii),e(Ii,hxo),e(Ii,Fce),e(Fce,pxo),e(Ii,uxo),e(Ii,yD),e(yD,_xo),e(Ii,bxo),e(nt,vxo),M(r2,nt,null),e(Bo,Fxo),e(Bo,eo),M(RA,eo,null),e(eo,Txo),e(eo,Tce),e(Tce,Mxo),e(eo,Exo),e(eo,xa),e(xa,Cxo),e(xa,Mce),e(Mce,wxo),e(xa,Axo),e(xa,Ece),e(Ece,yxo),e(xa,Lxo),e(xa,Cce),e(Cce,xxo),e(xa,$xo),e(eo,kxo),e(eo,Y),e(Y,t2),e(t2,wce),e(wce,Sxo),e(t2,Rxo),e(t2,LD),e(LD,Bxo),e(t2,Pxo),e(Y,Ixo),e(Y,a2),e(a2,Ace),e(Ace,qxo),e(a2,Nxo),e(a2,xD),e(xD,jxo),e(a2,Dxo),e(Y,Gxo),e(Y,n2),e(n2,yce),e(yce,Oxo),e(n2,Vxo),e(n2,$D),e($D,Xxo),e(n2,zxo),e(Y,Qxo),e(Y,s2),e(s2,Lce),e(Lce,Wxo),e(s2,Hxo),e(s2,kD),e(kD,Uxo),e(s2,Jxo),e(Y,Yxo),e(Y,l2),e(l2,xce),e(xce,Kxo),e(l2,Zxo),e(l2,SD),e(SD,e$o),e(l2,o$o),e(Y,r$o),e(Y,i2),e(i2,$ce),e($ce,t$o),e(i2,a$o),e(i2,RD),e(RD,n$o),e(i2,s$o),e(Y,l$o),e(Y,d2),e(d2,kce),e(kce,i$o),e(d2,d$o),e(d2,BD),e(BD,c$o),e(d2,f$o),e(Y,m$o),e(Y,c2),e(c2,Sce),e(Sce,g$o),e(c2,h$o),e(c2,PD),e(PD,p$o),e(c2,u$o),e(Y,_$o),e(Y,f2),e(f2,Rce),e(Rce,b$o),e(f2,v$o),e(f2,ID),e(ID,F$o),e(f2,T$o),e(Y,M$o),e(Y,m2),e(m2,Bce),e(Bce,E$o),e(m2,C$o),e(m2,qD),e(qD,w$o),e(m2,A$o),e(Y,y$o),e(Y,g2),e(g2,Pce),e(Pce,L$o),e(g2,x$o),e(g2,ND),e(ND,$$o),e(g2,k$o),e(Y,S$o),e(Y,h2),e(h2,Ice),e(Ice,R$o),e(h2,B$o),e(h2,jD),e(jD,P$o),e(h2,I$o),e(Y,q$o),e(Y,p2),e(p2,qce),e(qce,N$o),e(p2,j$o),e(p2,DD),e(DD,D$o),e(p2,G$o),e(Y,O$o),e(Y,u2),e(u2,Nce),e(Nce,V$o),e(u2,X$o),e(u2,GD),e(GD,z$o),e(u2,Q$o),e(Y,W$o),e(Y,_2),e(_2,jce),e(jce,H$o),e(_2,U$o),e(_2,OD),e(OD,J$o),e(_2,Y$o),e(Y,K$o),e(Y,b2),e(b2,Dce),e(Dce,Z$o),e(b2,eko),e(b2,VD),e(VD,oko),e(b2,rko),e(Y,tko),e(Y,v2),e(v2,Gce),e(Gce,ako),e(v2,nko),e(v2,XD),e(XD,sko),e(v2,lko),e(Y,iko),e(Y,F2),e(F2,Oce),e(Oce,dko),e(F2,cko),e(F2,zD),e(zD,fko),e(F2,mko),e(Y,gko),e(Y,T2),e(T2,Vce),e(Vce,hko),e(T2,pko),e(T2,QD),e(QD,uko),e(T2,_ko),e(Y,bko),e(Y,M2),e(M2,Xce),e(Xce,vko),e(M2,Fko),e(M2,WD),e(WD,Tko),e(M2,Mko),e(Y,Eko),e(Y,E2),e(E2,zce),e(zce,Cko),e(E2,wko),e(E2,HD),e(HD,Ako),e(E2,yko),e(Y,Lko),e(Y,C2),e(C2,Qce),e(Qce,xko),e(C2,$ko),e(C2,UD),e(UD,kko),e(C2,Sko),e(Y,Rko),e(Y,w2),e(w2,Wce),e(Wce,Bko),e(w2,Pko),e(w2,JD),e(JD,Iko),e(w2,qko),e(Y,Nko),e(Y,A2),e(A2,Hce),e(Hce,jko),e(A2,Dko),e(A2,YD),e(YD,Gko),e(A2,Oko),e(Y,Vko),e(Y,y2),e(y2,Uce),e(Uce,Xko),e(y2,zko),e(y2,KD),e(KD,Qko),e(y2,Wko),e(Y,Hko),e(Y,L2),e(L2,Jce),e(Jce,Uko),e(L2,Jko),e(L2,ZD),e(ZD,Yko),e(L2,Kko),e(Y,Zko),e(Y,x2),e(x2,Yce),e(Yce,eSo),e(x2,oSo),e(x2,eG),e(eG,rSo),e(x2,tSo),e(Y,aSo),e(Y,$2),e($2,Kce),e(Kce,nSo),e($2,sSo),e($2,oG),e(oG,lSo),e($2,iSo),e(eo,dSo),e(eo,k2),e(k2,cSo),e(k2,Zce),e(Zce,fSo),e(k2,mSo),e(k2,efe),e(efe,gSo),e(eo,hSo),M(S2,eo,null),b(f,ePe,_),b(f,qi,_),e(qi,R2),e(R2,ofe),M(BA,ofe,null),e(qi,pSo),e(qi,rfe),e(rfe,uSo),b(f,oPe,_),b(f,Po,_),M(PA,Po,null),e(Po,_So),e(Po,Ni),e(Ni,bSo),e(Ni,rG),e(rG,vSo),e(Ni,FSo),e(Ni,tG),e(tG,TSo),e(Ni,MSo),e(Po,ESo),e(Po,IA),e(IA,CSo),e(IA,tfe),e(tfe,wSo),e(IA,ASo),e(Po,ySo),e(Po,st),M(qA,st,null),e(st,LSo),e(st,afe),e(afe,xSo),e(st,$So),e(st,ji),e(ji,kSo),e(ji,nfe),e(nfe,SSo),e(ji,RSo),e(ji,aG),e(aG,BSo),e(ji,PSo),e(st,ISo),M(B2,st,null),e(Po,qSo),e(Po,oo),M(NA,oo,null),e(oo,NSo),e(oo,sfe),e(sfe,jSo),e(oo,DSo),e(oo,$a),e($a,GSo),e($a,lfe),e(lfe,OSo),e($a,VSo),e($a,ife),e(ife,XSo),e($a,zSo),e($a,dfe),e(dfe,QSo),e($a,WSo),e(oo,HSo),e(oo,Ur),e(Ur,P2),e(P2,cfe),e(cfe,USo),e(P2,JSo),e(P2,nG),e(nG,YSo),e(P2,KSo),e(Ur,ZSo),e(Ur,I2),e(I2,ffe),e(ffe,eRo),e(I2,oRo),e(I2,sG),e(sG,rRo),e(I2,tRo),e(Ur,aRo),e(Ur,q2),e(q2,mfe),e(mfe,nRo),e(q2,sRo),e(q2,lG),e(lG,lRo),e(q2,iRo),e(Ur,dRo),e(Ur,N2),e(N2,gfe),e(gfe,cRo),e(N2,fRo),e(N2,iG),e(iG,mRo),e(N2,gRo),e(Ur,hRo),e(Ur,j2),e(j2,hfe),e(hfe,pRo),e(j2,uRo),e(j2,dG),e(dG,_Ro),e(j2,bRo),e(oo,vRo),e(oo,D2),e(D2,FRo),e(D2,pfe),e(pfe,TRo),e(D2,MRo),e(D2,ufe),e(ufe,ERo),e(oo,CRo),M(G2,oo,null),b(f,rPe,_),b(f,Di,_),e(Di,O2),e(O2,_fe),M(jA,_fe,null),e(Di,wRo),e(Di,bfe),e(bfe,ARo),b(f,tPe,_),b(f,Io,_),M(DA,Io,null),e(Io,yRo),e(Io,Gi),e(Gi,LRo),e(Gi,cG),e(cG,xRo),e(Gi,$Ro),e(Gi,fG),e(fG,kRo),e(Gi,SRo),e(Io,RRo),e(Io,GA),e(GA,BRo),e(GA,vfe),e(vfe,PRo),e(GA,IRo),e(Io,qRo),e(Io,lt),M(OA,lt,null),e(lt,NRo),e(lt,Ffe),e(Ffe,jRo),e(lt,DRo),e(lt,Oi),e(Oi,GRo),e(Oi,Tfe),e(Tfe,ORo),e(Oi,VRo),e(Oi,mG),e(mG,XRo),e(Oi,zRo),e(lt,QRo),M(V2,lt,null),e(Io,WRo),e(Io,ro),M(VA,ro,null),e(ro,HRo),e(ro,Mfe),e(Mfe,URo),e(ro,JRo),e(ro,ka),e(ka,YRo),e(ka,Efe),e(Efe,KRo),e(ka,ZRo),e(ka,Cfe),e(Cfe,eBo),e(ka,oBo),e(ka,wfe),e(wfe,rBo),e(ka,tBo),e(ro,aBo),e(ro,U),e(U,X2),e(X2,Afe),e(Afe,nBo),e(X2,sBo),e(X2,gG),e(gG,lBo),e(X2,iBo),e(U,dBo),e(U,z2),e(z2,yfe),e(yfe,cBo),e(z2,fBo),e(z2,hG),e(hG,mBo),e(z2,gBo),e(U,hBo),e(U,Q2),e(Q2,Lfe),e(Lfe,pBo),e(Q2,uBo),e(Q2,pG),e(pG,_Bo),e(Q2,bBo),e(U,vBo),e(U,W2),e(W2,xfe),e(xfe,FBo),e(W2,TBo),e(W2,uG),e(uG,MBo),e(W2,EBo),e(U,CBo),e(U,H2),e(H2,$fe),e($fe,wBo),e(H2,ABo),e(H2,_G),e(_G,yBo),e(H2,LBo),e(U,xBo),e(U,U2),e(U2,kfe),e(kfe,$Bo),e(U2,kBo),e(U2,bG),e(bG,SBo),e(U2,RBo),e(U,BBo),e(U,J2),e(J2,Sfe),e(Sfe,PBo),e(J2,IBo),e(J2,vG),e(vG,qBo),e(J2,NBo),e(U,jBo),e(U,Y2),e(Y2,Rfe),e(Rfe,DBo),e(Y2,GBo),e(Y2,FG),e(FG,OBo),e(Y2,VBo),e(U,XBo),e(U,K2),e(K2,Bfe),e(Bfe,zBo),e(K2,QBo),e(K2,TG),e(TG,WBo),e(K2,HBo),e(U,UBo),e(U,Z2),e(Z2,Pfe),e(Pfe,JBo),e(Z2,YBo),e(Z2,MG),e(MG,KBo),e(Z2,ZBo),e(U,ePo),e(U,ev),e(ev,Ife),e(Ife,oPo),e(ev,rPo),e(ev,EG),e(EG,tPo),e(ev,aPo),e(U,nPo),e(U,ov),e(ov,qfe),e(qfe,sPo),e(ov,lPo),e(ov,CG),e(CG,iPo),e(ov,dPo),e(U,cPo),e(U,rv),e(rv,Nfe),e(Nfe,fPo),e(rv,mPo),e(rv,wG),e(wG,gPo),e(rv,hPo),e(U,pPo),e(U,tv),e(tv,jfe),e(jfe,uPo),e(tv,_Po),e(tv,AG),e(AG,bPo),e(tv,vPo),e(U,FPo),e(U,av),e(av,Dfe),e(Dfe,TPo),e(av,MPo),e(av,yG),e(yG,EPo),e(av,CPo),e(U,wPo),e(U,nv),e(nv,Gfe),e(Gfe,APo),e(nv,yPo),e(nv,LG),e(LG,LPo),e(nv,xPo),e(U,$Po),e(U,sv),e(sv,Ofe),e(Ofe,kPo),e(sv,SPo),e(sv,xG),e(xG,RPo),e(sv,BPo),e(U,PPo),e(U,lv),e(lv,Vfe),e(Vfe,IPo),e(lv,qPo),e(lv,$G),e($G,NPo),e(lv,jPo),e(U,DPo),e(U,iv),e(iv,Xfe),e(Xfe,GPo),e(iv,OPo),e(iv,kG),e(kG,VPo),e(iv,XPo),e(U,zPo),e(U,dv),e(dv,zfe),e(zfe,QPo),e(dv,WPo),e(dv,SG),e(SG,HPo),e(dv,UPo),e(U,JPo),e(U,cv),e(cv,Qfe),e(Qfe,YPo),e(cv,KPo),e(cv,RG),e(RG,ZPo),e(cv,eIo),e(U,oIo),e(U,fv),e(fv,Wfe),e(Wfe,rIo),e(fv,tIo),e(fv,BG),e(BG,aIo),e(fv,nIo),e(U,sIo),e(U,mv),e(mv,Hfe),e(Hfe,lIo),e(mv,iIo),e(mv,PG),e(PG,dIo),e(mv,cIo),e(U,fIo),e(U,gv),e(gv,Ufe),e(Ufe,mIo),e(gv,gIo),e(gv,IG),e(IG,hIo),e(gv,pIo),e(U,uIo),e(U,hv),e(hv,Jfe),e(Jfe,_Io),e(hv,bIo),e(hv,qG),e(qG,vIo),e(hv,FIo),e(U,TIo),e(U,pv),e(pv,Yfe),e(Yfe,MIo),e(pv,EIo),e(pv,NG),e(NG,CIo),e(pv,wIo),e(U,AIo),e(U,uv),e(uv,Kfe),e(Kfe,yIo),e(uv,LIo),e(uv,jG),e(jG,xIo),e(uv,$Io),e(U,kIo),e(U,_v),e(_v,Zfe),e(Zfe,SIo),e(_v,RIo),e(_v,DG),e(DG,BIo),e(_v,PIo),e(U,IIo),e(U,bv),e(bv,eme),e(eme,qIo),e(bv,NIo),e(bv,GG),e(GG,jIo),e(bv,DIo),e(U,GIo),e(U,vv),e(vv,ome),e(ome,OIo),e(vv,VIo),e(vv,OG),e(OG,XIo),e(vv,zIo),e(U,QIo),e(U,Fv),e(Fv,rme),e(rme,WIo),e(Fv,HIo),e(Fv,VG),e(VG,UIo),e(Fv,JIo),e(U,YIo),e(U,Tv),e(Tv,tme),e(tme,KIo),e(Tv,ZIo),e(Tv,XG),e(XG,eqo),e(Tv,oqo),e(U,rqo),e(U,Mv),e(Mv,ame),e(ame,tqo),e(Mv,aqo),e(Mv,zG),e(zG,nqo),e(Mv,sqo),e(ro,lqo),e(ro,Ev),e(Ev,iqo),e(Ev,nme),e(nme,dqo),e(Ev,cqo),e(Ev,sme),e(sme,fqo),e(ro,mqo),M(Cv,ro,null),b(f,aPe,_),b(f,Vi,_),e(Vi,wv),e(wv,lme),M(XA,lme,null),e(Vi,gqo),e(Vi,ime),e(ime,hqo),b(f,nPe,_),b(f,qo,_),M(zA,qo,null),e(qo,pqo),e(qo,Xi),e(Xi,uqo),e(Xi,QG),e(QG,_qo),e(Xi,bqo),e(Xi,WG),e(WG,vqo),e(Xi,Fqo),e(qo,Tqo),e(qo,QA),e(QA,Mqo),e(QA,dme),e(dme,Eqo),e(QA,Cqo),e(qo,wqo),e(qo,it),M(WA,it,null),e(it,Aqo),e(it,cme),e(cme,yqo),e(it,Lqo),e(it,zi),e(zi,xqo),e(zi,fme),e(fme,$qo),e(zi,kqo),e(zi,HG),e(HG,Sqo),e(zi,Rqo),e(it,Bqo),M(Av,it,null),e(qo,Pqo),e(qo,to),M(HA,to,null),e(to,Iqo),e(to,mme),e(mme,qqo),e(to,Nqo),e(to,Sa),e(Sa,jqo),e(Sa,gme),e(gme,Dqo),e(Sa,Gqo),e(Sa,hme),e(hme,Oqo),e(Sa,Vqo),e(Sa,pme),e(pme,Xqo),e(Sa,zqo),e(to,Qqo),e(to,O),e(O,yv),e(yv,ume),e(ume,Wqo),e(yv,Hqo),e(yv,UG),e(UG,Uqo),e(yv,Jqo),e(O,Yqo),e(O,Lv),e(Lv,_me),e(_me,Kqo),e(Lv,Zqo),e(Lv,JG),e(JG,eNo),e(Lv,oNo),e(O,rNo),e(O,xv),e(xv,bme),e(bme,tNo),e(xv,aNo),e(xv,YG),e(YG,nNo),e(xv,sNo),e(O,lNo),e(O,$v),e($v,vme),e(vme,iNo),e($v,dNo),e($v,KG),e(KG,cNo),e($v,fNo),e(O,mNo),e(O,kv),e(kv,Fme),e(Fme,gNo),e(kv,hNo),e(kv,ZG),e(ZG,pNo),e(kv,uNo),e(O,_No),e(O,Sv),e(Sv,Tme),e(Tme,bNo),e(Sv,vNo),e(Sv,eO),e(eO,FNo),e(Sv,TNo),e(O,MNo),e(O,Rv),e(Rv,Mme),e(Mme,ENo),e(Rv,CNo),e(Rv,oO),e(oO,wNo),e(Rv,ANo),e(O,yNo),e(O,Bv),e(Bv,Eme),e(Eme,LNo),e(Bv,xNo),e(Bv,rO),e(rO,$No),e(Bv,kNo),e(O,SNo),e(O,Pv),e(Pv,Cme),e(Cme,RNo),e(Pv,BNo),e(Pv,tO),e(tO,PNo),e(Pv,INo),e(O,qNo),e(O,Iv),e(Iv,wme),e(wme,NNo),e(Iv,jNo),e(Iv,aO),e(aO,DNo),e(Iv,GNo),e(O,ONo),e(O,qv),e(qv,Ame),e(Ame,VNo),e(qv,XNo),e(qv,nO),e(nO,zNo),e(qv,QNo),e(O,WNo),e(O,Nv),e(Nv,yme),e(yme,HNo),e(Nv,UNo),e(Nv,sO),e(sO,JNo),e(Nv,YNo),e(O,KNo),e(O,jv),e(jv,Lme),e(Lme,ZNo),e(jv,ejo),e(jv,lO),e(lO,ojo),e(jv,rjo),e(O,tjo),e(O,Dv),e(Dv,xme),e(xme,ajo),e(Dv,njo),e(Dv,iO),e(iO,sjo),e(Dv,ljo),e(O,ijo),e(O,Gv),e(Gv,$me),e($me,djo),e(Gv,cjo),e(Gv,dO),e(dO,fjo),e(Gv,mjo),e(O,gjo),e(O,Ov),e(Ov,kme),e(kme,hjo),e(Ov,pjo),e(Ov,cO),e(cO,ujo),e(Ov,_jo),e(O,bjo),e(O,Vv),e(Vv,Sme),e(Sme,vjo),e(Vv,Fjo),e(Vv,fO),e(fO,Tjo),e(Vv,Mjo),e(O,Ejo),e(O,Xv),e(Xv,Rme),e(Rme,Cjo),e(Xv,wjo),e(Xv,mO),e(mO,Ajo),e(Xv,yjo),e(O,Ljo),e(O,zv),e(zv,Bme),e(Bme,xjo),e(zv,$jo),e(zv,gO),e(gO,kjo),e(zv,Sjo),e(O,Rjo),e(O,Qv),e(Qv,Pme),e(Pme,Bjo),e(Qv,Pjo),e(Qv,hO),e(hO,Ijo),e(Qv,qjo),e(O,Njo),e(O,Wv),e(Wv,Ime),e(Ime,jjo),e(Wv,Djo),e(Wv,pO),e(pO,Gjo),e(Wv,Ojo),e(O,Vjo),e(O,Hv),e(Hv,qme),e(qme,Xjo),e(Hv,zjo),e(Hv,uO),e(uO,Qjo),e(Hv,Wjo),e(O,Hjo),e(O,Uv),e(Uv,Nme),e(Nme,Ujo),e(Uv,Jjo),e(Uv,_O),e(_O,Yjo),e(Uv,Kjo),e(O,Zjo),e(O,Jv),e(Jv,jme),e(jme,eDo),e(Jv,oDo),e(Jv,bO),e(bO,rDo),e(Jv,tDo),e(O,aDo),e(O,Yv),e(Yv,Dme),e(Dme,nDo),e(Yv,sDo),e(Yv,vO),e(vO,lDo),e(Yv,iDo),e(O,dDo),e(O,Kv),e(Kv,Gme),e(Gme,cDo),e(Kv,fDo),e(Kv,FO),e(FO,mDo),e(Kv,gDo),e(O,hDo),e(O,Zv),e(Zv,Ome),e(Ome,pDo),e(Zv,uDo),e(Zv,TO),e(TO,_Do),e(Zv,bDo),e(O,vDo),e(O,eF),e(eF,Vme),e(Vme,FDo),e(eF,TDo),e(eF,MO),e(MO,MDo),e(eF,EDo),e(O,CDo),e(O,oF),e(oF,Xme),e(Xme,wDo),e(oF,ADo),e(oF,EO),e(EO,yDo),e(oF,LDo),e(O,xDo),e(O,rF),e(rF,zme),e(zme,$Do),e(rF,kDo),e(rF,CO),e(CO,SDo),e(rF,RDo),e(O,BDo),e(O,tF),e(tF,Qme),e(Qme,PDo),e(tF,IDo),e(tF,wO),e(wO,qDo),e(tF,NDo),e(O,jDo),e(O,aF),e(aF,Wme),e(Wme,DDo),e(aF,GDo),e(aF,AO),e(AO,ODo),e(aF,VDo),e(O,XDo),e(O,nF),e(nF,Hme),e(Hme,zDo),e(nF,QDo),e(nF,yO),e(yO,WDo),e(nF,HDo),e(O,UDo),e(O,sF),e(sF,Ume),e(Ume,JDo),e(sF,YDo),e(sF,LO),e(LO,KDo),e(sF,ZDo),e(O,eGo),e(O,lF),e(lF,Jme),e(Jme,oGo),e(lF,rGo),e(lF,xO),e(xO,tGo),e(lF,aGo),e(O,nGo),e(O,iF),e(iF,Yme),e(Yme,sGo),e(iF,lGo),e(iF,$O),e($O,iGo),e(iF,dGo),e(O,cGo),e(O,dF),e(dF,Kme),e(Kme,fGo),e(dF,mGo),e(dF,kO),e(kO,gGo),e(dF,hGo),e(O,pGo),e(O,cF),e(cF,Zme),e(Zme,uGo),e(cF,_Go),e(cF,SO),e(SO,bGo),e(cF,vGo),e(O,FGo),e(O,fF),e(fF,ege),e(ege,TGo),e(fF,MGo),e(fF,RO),e(RO,EGo),e(fF,CGo),e(to,wGo),e(to,mF),e(mF,AGo),e(mF,oge),e(oge,yGo),e(mF,LGo),e(mF,rge),e(rge,xGo),e(to,$Go),M(gF,to,null),b(f,sPe,_),b(f,Qi,_),e(Qi,hF),e(hF,tge),M(UA,tge,null),e(Qi,kGo),e(Qi,age),e(age,SGo),b(f,lPe,_),b(f,No,_),M(JA,No,null),e(No,RGo),e(No,Wi),e(Wi,BGo),e(Wi,BO),e(BO,PGo),e(Wi,IGo),e(Wi,PO),e(PO,qGo),e(Wi,NGo),e(No,jGo),e(No,YA),e(YA,DGo),e(YA,nge),e(nge,GGo),e(YA,OGo),e(No,VGo),e(No,dt),M(KA,dt,null),e(dt,XGo),e(dt,sge),e(sge,zGo),e(dt,QGo),e(dt,Hi),e(Hi,WGo),e(Hi,lge),e(lge,HGo),e(Hi,UGo),e(Hi,IO),e(IO,JGo),e(Hi,YGo),e(dt,KGo),M(pF,dt,null),e(No,ZGo),e(No,ao),M(ZA,ao,null),e(ao,eOo),e(ao,ige),e(ige,oOo),e(ao,rOo),e(ao,Ra),e(Ra,tOo),e(Ra,dge),e(dge,aOo),e(Ra,nOo),e(Ra,cge),e(cge,sOo),e(Ra,lOo),e(Ra,fge),e(fge,iOo),e(Ra,dOo),e(ao,cOo),e(ao,mge),e(mge,uF),e(uF,gge),e(gge,fOo),e(uF,mOo),e(uF,qO),e(qO,gOo),e(uF,hOo),e(ao,pOo),e(ao,_F),e(_F,uOo),e(_F,hge),e(hge,_Oo),e(_F,bOo),e(_F,pge),e(pge,vOo),e(ao,FOo),M(bF,ao,null),b(f,iPe,_),b(f,Ui,_),e(Ui,vF),e(vF,uge),M(e6,uge,null),e(Ui,TOo),e(Ui,_ge),e(_ge,MOo),b(f,dPe,_),b(f,jo,_),M(o6,jo,null),e(jo,EOo),e(jo,Ji),e(Ji,COo),e(Ji,NO),e(NO,wOo),e(Ji,AOo),e(Ji,jO),e(jO,yOo),e(Ji,LOo),e(jo,xOo),e(jo,r6),e(r6,$Oo),e(r6,bge),e(bge,kOo),e(r6,SOo),e(jo,ROo),e(jo,ct),M(t6,ct,null),e(ct,BOo),e(ct,vge),e(vge,POo),e(ct,IOo),e(ct,Yi),e(Yi,qOo),e(Yi,Fge),e(Fge,NOo),e(Yi,jOo),e(Yi,DO),e(DO,DOo),e(Yi,GOo),e(ct,OOo),M(FF,ct,null),e(jo,VOo),e(jo,no),M(a6,no,null),e(no,XOo),e(no,Tge),e(Tge,zOo),e(no,QOo),e(no,Ba),e(Ba,WOo),e(Ba,Mge),e(Mge,HOo),e(Ba,UOo),e(Ba,Ege),e(Ege,JOo),e(Ba,YOo),e(Ba,Cge),e(Cge,KOo),e(Ba,ZOo),e(no,eVo),e(no,ve),e(ve,TF),e(TF,wge),e(wge,oVo),e(TF,rVo),e(TF,GO),e(GO,tVo),e(TF,aVo),e(ve,nVo),e(ve,MF),e(MF,Age),e(Age,sVo),e(MF,lVo),e(MF,OO),e(OO,iVo),e(MF,dVo),e(ve,cVo),e(ve,EF),e(EF,yge),e(yge,fVo),e(EF,mVo),e(EF,VO),e(VO,gVo),e(EF,hVo),e(ve,pVo),e(ve,$s),e($s,Lge),e(Lge,uVo),e($s,_Vo),e($s,XO),e(XO,bVo),e($s,vVo),e($s,zO),e(zO,FVo),e($s,TVo),e(ve,MVo),e(ve,CF),e(CF,xge),e(xge,EVo),e(CF,CVo),e(CF,QO),e(QO,wVo),e(CF,AVo),e(ve,yVo),e(ve,ft),e(ft,$ge),e($ge,LVo),e(ft,xVo),e(ft,WO),e(WO,$Vo),e(ft,kVo),e(ft,HO),e(HO,SVo),e(ft,RVo),e(ft,UO),e(UO,BVo),e(ft,PVo),e(ve,IVo),e(ve,wF),e(wF,kge),e(kge,qVo),e(wF,NVo),e(wF,JO),e(JO,jVo),e(wF,DVo),e(ve,GVo),e(ve,AF),e(AF,Sge),e(Sge,OVo),e(AF,VVo),e(AF,YO),e(YO,XVo),e(AF,zVo),e(ve,QVo),e(ve,yF),e(yF,Rge),e(Rge,WVo),e(yF,HVo),e(yF,KO),e(KO,UVo),e(yF,JVo),e(ve,YVo),e(ve,LF),e(LF,Bge),e(Bge,KVo),e(LF,ZVo),e(LF,ZO),e(ZO,eXo),e(LF,oXo),e(ve,rXo),e(ve,xF),e(xF,Pge),e(Pge,tXo),e(xF,aXo),e(xF,eV),e(eV,nXo),e(xF,sXo),e(ve,lXo),e(ve,$F),e($F,Ige),e(Ige,iXo),e($F,dXo),e($F,oV),e(oV,cXo),e($F,fXo),e(ve,mXo),e(ve,kF),e(kF,qge),e(qge,gXo),e(kF,hXo),e(kF,rV),e(rV,pXo),e(kF,uXo),e(no,_Xo),e(no,SF),e(SF,bXo),e(SF,Nge),e(Nge,vXo),e(SF,FXo),e(SF,jge),e(jge,TXo),e(no,MXo),M(RF,no,null),b(f,cPe,_),b(f,Ki,_),e(Ki,BF),e(BF,Dge),M(n6,Dge,null),e(Ki,EXo),e(Ki,Gge),e(Gge,CXo),b(f,fPe,_),b(f,Do,_),M(s6,Do,null),e(Do,wXo),e(Do,Zi),e(Zi,AXo),e(Zi,tV),e(tV,yXo),e(Zi,LXo),e(Zi,aV),e(aV,xXo),e(Zi,$Xo),e(Do,kXo),e(Do,l6),e(l6,SXo),e(l6,Oge),e(Oge,RXo),e(l6,BXo),e(Do,PXo),e(Do,mt),M(i6,mt,null),e(mt,IXo),e(mt,Vge),e(Vge,qXo),e(mt,NXo),e(mt,ed),e(ed,jXo),e(ed,Xge),e(Xge,DXo),e(ed,GXo),e(ed,nV),e(nV,OXo),e(ed,VXo),e(mt,XXo),M(PF,mt,null),e(Do,zXo),e(Do,so),M(d6,so,null),e(so,QXo),e(so,zge),e(zge,WXo),e(so,HXo),e(so,Pa),e(Pa,UXo),e(Pa,Qge),e(Qge,JXo),e(Pa,YXo),e(Pa,Wge),e(Wge,KXo),e(Pa,ZXo),e(Pa,Hge),e(Hge,ezo),e(Pa,ozo),e(so,rzo),e(so,Uge),e(Uge,IF),e(IF,Jge),e(Jge,tzo),e(IF,azo),e(IF,sV),e(sV,nzo),e(IF,szo),e(so,lzo),e(so,qF),e(qF,izo),e(qF,Yge),e(Yge,dzo),e(qF,czo),e(qF,Kge),e(Kge,fzo),e(so,mzo),M(NF,so,null),b(f,mPe,_),b(f,od,_),e(od,jF),e(jF,Zge),M(c6,Zge,null),e(od,gzo),e(od,ehe),e(ehe,hzo),b(f,gPe,_),b(f,Go,_),M(f6,Go,null),e(Go,pzo),e(Go,rd),e(rd,uzo),e(rd,lV),e(lV,_zo),e(rd,bzo),e(rd,iV),e(iV,vzo),e(rd,Fzo),e(Go,Tzo),e(Go,m6),e(m6,Mzo),e(m6,ohe),e(ohe,Ezo),e(m6,Czo),e(Go,wzo),e(Go,gt),M(g6,gt,null),e(gt,Azo),e(gt,rhe),e(rhe,yzo),e(gt,Lzo),e(gt,td),e(td,xzo),e(td,the),e(the,$zo),e(td,kzo),e(td,dV),e(dV,Szo),e(td,Rzo),e(gt,Bzo),M(DF,gt,null),e(Go,Pzo),e(Go,lo),M(h6,lo,null),e(lo,Izo),e(lo,ahe),e(ahe,qzo),e(lo,Nzo),e(lo,Ia),e(Ia,jzo),e(Ia,nhe),e(nhe,Dzo),e(Ia,Gzo),e(Ia,she),e(she,Ozo),e(Ia,Vzo),e(Ia,lhe),e(lhe,Xzo),e(Ia,zzo),e(lo,Qzo),e(lo,Ne),e(Ne,GF),e(GF,ihe),e(ihe,Wzo),e(GF,Hzo),e(GF,cV),e(cV,Uzo),e(GF,Jzo),e(Ne,Yzo),e(Ne,OF),e(OF,dhe),e(dhe,Kzo),e(OF,Zzo),e(OF,fV),e(fV,eQo),e(OF,oQo),e(Ne,rQo),e(Ne,VF),e(VF,che),e(che,tQo),e(VF,aQo),e(VF,mV),e(mV,nQo),e(VF,sQo),e(Ne,lQo),e(Ne,XF),e(XF,fhe),e(fhe,iQo),e(XF,dQo),e(XF,gV),e(gV,cQo),e(XF,fQo),e(Ne,mQo),e(Ne,zF),e(zF,mhe),e(mhe,gQo),e(zF,hQo),e(zF,hV),e(hV,pQo),e(zF,uQo),e(Ne,_Qo),e(Ne,QF),e(QF,ghe),e(ghe,bQo),e(QF,vQo),e(QF,pV),e(pV,FQo),e(QF,TQo),e(Ne,MQo),e(Ne,WF),e(WF,hhe),e(hhe,EQo),e(WF,CQo),e(WF,uV),e(uV,wQo),e(WF,AQo),e(Ne,yQo),e(Ne,HF),e(HF,phe),e(phe,LQo),e(HF,xQo),e(HF,_V),e(_V,$Qo),e(HF,kQo),e(lo,SQo),e(lo,UF),e(UF,RQo),e(UF,uhe),e(uhe,BQo),e(UF,PQo),e(UF,_he),e(_he,IQo),e(lo,qQo),M(JF,lo,null),b(f,hPe,_),b(f,ad,_),e(ad,YF),e(YF,bhe),M(p6,bhe,null),e(ad,NQo),e(ad,vhe),e(vhe,jQo),b(f,pPe,_),b(f,Oo,_),M(u6,Oo,null),e(Oo,DQo),e(Oo,nd),e(nd,GQo),e(nd,bV),e(bV,OQo),e(nd,VQo),e(nd,vV),e(vV,XQo),e(nd,zQo),e(Oo,QQo),e(Oo,_6),e(_6,WQo),e(_6,Fhe),e(Fhe,HQo),e(_6,UQo),e(Oo,JQo),e(Oo,ht),M(b6,ht,null),e(ht,YQo),e(ht,The),e(The,KQo),e(ht,ZQo),e(ht,sd),e(sd,eWo),e(sd,Mhe),e(Mhe,oWo),e(sd,rWo),e(sd,FV),e(FV,tWo),e(sd,aWo),e(ht,nWo),M(KF,ht,null),e(Oo,sWo),e(Oo,io),M(v6,io,null),e(io,lWo),e(io,Ehe),e(Ehe,iWo),e(io,dWo),e(io,qa),e(qa,cWo),e(qa,Che),e(Che,fWo),e(qa,mWo),e(qa,whe),e(whe,gWo),e(qa,hWo),e(qa,Ahe),e(Ahe,pWo),e(qa,uWo),e(io,_Wo),e(io,Na),e(Na,ZF),e(ZF,yhe),e(yhe,bWo),e(ZF,vWo),e(ZF,TV),e(TV,FWo),e(ZF,TWo),e(Na,MWo),e(Na,e0),e(e0,Lhe),e(Lhe,EWo),e(e0,CWo),e(e0,MV),e(MV,wWo),e(e0,AWo),e(Na,yWo),e(Na,o0),e(o0,xhe),e(xhe,LWo),e(o0,xWo),e(o0,EV),e(EV,$Wo),e(o0,kWo),e(Na,SWo),e(Na,r0),e(r0,$he),e($he,RWo),e(r0,BWo),e(r0,CV),e(CV,PWo),e(r0,IWo),e(io,qWo),e(io,t0),e(t0,NWo),e(t0,khe),e(khe,jWo),e(t0,DWo),e(t0,She),e(She,GWo),e(io,OWo),M(a0,io,null),b(f,uPe,_),b(f,ld,_),e(ld,n0),e(n0,Rhe),M(F6,Rhe,null),e(ld,VWo),e(ld,Bhe),e(Bhe,XWo),b(f,_Pe,_),b(f,Vo,_),M(T6,Vo,null),e(Vo,zWo),e(Vo,id),e(id,QWo),e(id,wV),e(wV,WWo),e(id,HWo),e(id,AV),e(AV,UWo),e(id,JWo),e(Vo,YWo),e(Vo,M6),e(M6,KWo),e(M6,Phe),e(Phe,ZWo),e(M6,eHo),e(Vo,oHo),e(Vo,pt),M(E6,pt,null),e(pt,rHo),e(pt,Ihe),e(Ihe,tHo),e(pt,aHo),e(pt,dd),e(dd,nHo),e(dd,qhe),e(qhe,sHo),e(dd,lHo),e(dd,yV),e(yV,iHo),e(dd,dHo),e(pt,cHo),M(s0,pt,null),e(Vo,fHo),e(Vo,co),M(C6,co,null),e(co,mHo),e(co,Nhe),e(Nhe,gHo),e(co,hHo),e(co,ja),e(ja,pHo),e(ja,jhe),e(jhe,uHo),e(ja,_Ho),e(ja,Dhe),e(Dhe,bHo),e(ja,vHo),e(ja,Ghe),e(Ghe,FHo),e(ja,THo),e(co,MHo),e(co,je),e(je,l0),e(l0,Ohe),e(Ohe,EHo),e(l0,CHo),e(l0,LV),e(LV,wHo),e(l0,AHo),e(je,yHo),e(je,i0),e(i0,Vhe),e(Vhe,LHo),e(i0,xHo),e(i0,xV),e(xV,$Ho),e(i0,kHo),e(je,SHo),e(je,d0),e(d0,Xhe),e(Xhe,RHo),e(d0,BHo),e(d0,$V),e($V,PHo),e(d0,IHo),e(je,qHo),e(je,c0),e(c0,zhe),e(zhe,NHo),e(c0,jHo),e(c0,kV),e(kV,DHo),e(c0,GHo),e(je,OHo),e(je,f0),e(f0,Qhe),e(Qhe,VHo),e(f0,XHo),e(f0,SV),e(SV,zHo),e(f0,QHo),e(je,WHo),e(je,m0),e(m0,Whe),e(Whe,HHo),e(m0,UHo),e(m0,RV),e(RV,JHo),e(m0,YHo),e(je,KHo),e(je,g0),e(g0,Hhe),e(Hhe,ZHo),e(g0,eUo),e(g0,BV),e(BV,oUo),e(g0,rUo),e(je,tUo),e(je,h0),e(h0,Uhe),e(Uhe,aUo),e(h0,nUo),e(h0,PV),e(PV,sUo),e(h0,lUo),e(co,iUo),e(co,p0),e(p0,dUo),e(p0,Jhe),e(Jhe,cUo),e(p0,fUo),e(p0,Yhe),e(Yhe,mUo),e(co,gUo),M(u0,co,null),b(f,bPe,_),b(f,cd,_),e(cd,_0),e(_0,Khe),M(w6,Khe,null),e(cd,hUo),e(cd,Zhe),e(Zhe,pUo),b(f,vPe,_),b(f,Xo,_),M(A6,Xo,null),e(Xo,uUo),e(Xo,fd),e(fd,_Uo),e(fd,IV),e(IV,bUo),e(fd,vUo),e(fd,qV),e(qV,FUo),e(fd,TUo),e(Xo,MUo),e(Xo,y6),e(y6,EUo),e(y6,epe),e(epe,CUo),e(y6,wUo),e(Xo,AUo),e(Xo,ut),M(L6,ut,null),e(ut,yUo),e(ut,ope),e(ope,LUo),e(ut,xUo),e(ut,md),e(md,$Uo),e(md,rpe),e(rpe,kUo),e(md,SUo),e(md,NV),e(NV,RUo),e(md,BUo),e(ut,PUo),M(b0,ut,null),e(Xo,IUo),e(Xo,fo),M(x6,fo,null),e(fo,qUo),e(fo,tpe),e(tpe,NUo),e(fo,jUo),e(fo,Da),e(Da,DUo),e(Da,ape),e(ape,GUo),e(Da,OUo),e(Da,npe),e(npe,VUo),e(Da,XUo),e(Da,spe),e(spe,zUo),e(Da,QUo),e(fo,WUo),e(fo,$6),e($6,v0),e(v0,lpe),e(lpe,HUo),e(v0,UUo),e(v0,jV),e(jV,JUo),e(v0,YUo),e($6,KUo),e($6,F0),e(F0,ipe),e(ipe,ZUo),e(F0,eJo),e(F0,DV),e(DV,oJo),e(F0,rJo),e(fo,tJo),e(fo,T0),e(T0,aJo),e(T0,dpe),e(dpe,nJo),e(T0,sJo),e(T0,cpe),e(cpe,lJo),e(fo,iJo),M(M0,fo,null),b(f,FPe,_),b(f,gd,_),e(gd,E0),e(E0,fpe),M(k6,fpe,null),e(gd,dJo),e(gd,mpe),e(mpe,cJo),b(f,TPe,_),b(f,zo,_),M(S6,zo,null),e(zo,fJo),e(zo,hd),e(hd,mJo),e(hd,GV),e(GV,gJo),e(hd,hJo),e(hd,OV),e(OV,pJo),e(hd,uJo),e(zo,_Jo),e(zo,R6),e(R6,bJo),e(R6,gpe),e(gpe,vJo),e(R6,FJo),e(zo,TJo),e(zo,_t),M(B6,_t,null),e(_t,MJo),e(_t,hpe),e(hpe,EJo),e(_t,CJo),e(_t,pd),e(pd,wJo),e(pd,ppe),e(ppe,AJo),e(pd,yJo),e(pd,VV),e(VV,LJo),e(pd,xJo),e(_t,$Jo),M(C0,_t,null),e(zo,kJo),e(zo,mo),M(P6,mo,null),e(mo,SJo),e(mo,upe),e(upe,RJo),e(mo,BJo),e(mo,Ga),e(Ga,PJo),e(Ga,_pe),e(_pe,IJo),e(Ga,qJo),e(Ga,bpe),e(bpe,NJo),e(Ga,jJo),e(Ga,vpe),e(vpe,DJo),e(Ga,GJo),e(mo,OJo),e(mo,Oa),e(Oa,w0),e(w0,Fpe),e(Fpe,VJo),e(w0,XJo),e(w0,XV),e(XV,zJo),e(w0,QJo),e(Oa,WJo),e(Oa,A0),e(A0,Tpe),e(Tpe,HJo),e(A0,UJo),e(A0,zV),e(zV,JJo),e(A0,YJo),e(Oa,KJo),e(Oa,y0),e(y0,Mpe),e(Mpe,ZJo),e(y0,eYo),e(y0,QV),e(QV,oYo),e(y0,rYo),e(Oa,tYo),e(Oa,L0),e(L0,Epe),e(Epe,aYo),e(L0,nYo),e(L0,WV),e(WV,sYo),e(L0,lYo),e(mo,iYo),e(mo,x0),e(x0,dYo),e(x0,Cpe),e(Cpe,cYo),e(x0,fYo),e(x0,wpe),e(wpe,mYo),e(mo,gYo),M($0,mo,null),b(f,MPe,_),b(f,ud,_),e(ud,k0),e(k0,Ape),M(I6,Ape,null),e(ud,hYo),e(ud,ype),e(ype,pYo),b(f,EPe,_),b(f,Qo,_),M(q6,Qo,null),e(Qo,uYo),e(Qo,_d),e(_d,_Yo),e(_d,HV),e(HV,bYo),e(_d,vYo),e(_d,UV),e(UV,FYo),e(_d,TYo),e(Qo,MYo),e(Qo,N6),e(N6,EYo),e(N6,Lpe),e(Lpe,CYo),e(N6,wYo),e(Qo,AYo),e(Qo,bt),M(j6,bt,null),e(bt,yYo),e(bt,xpe),e(xpe,LYo),e(bt,xYo),e(bt,bd),e(bd,$Yo),e(bd,$pe),e($pe,kYo),e(bd,SYo),e(bd,JV),e(JV,RYo),e(bd,BYo),e(bt,PYo),M(S0,bt,null),e(Qo,IYo),e(Qo,go),M(D6,go,null),e(go,qYo),e(go,kpe),e(kpe,NYo),e(go,jYo),e(go,Va),e(Va,DYo),e(Va,Spe),e(Spe,GYo),e(Va,OYo),e(Va,Rpe),e(Rpe,VYo),e(Va,XYo),e(Va,Bpe),e(Bpe,zYo),e(Va,QYo),e(go,WYo),e(go,vd),e(vd,R0),e(R0,Ppe),e(Ppe,HYo),e(R0,UYo),e(R0,YV),e(YV,JYo),e(R0,YYo),e(vd,KYo),e(vd,B0),e(B0,Ipe),e(Ipe,ZYo),e(B0,eKo),e(B0,KV),e(KV,oKo),e(B0,rKo),e(vd,tKo),e(vd,P0),e(P0,qpe),e(qpe,aKo),e(P0,nKo),e(P0,ZV),e(ZV,sKo),e(P0,lKo),e(go,iKo),e(go,I0),e(I0,dKo),e(I0,Npe),e(Npe,cKo),e(I0,fKo),e(I0,jpe),e(jpe,mKo),e(go,gKo),M(q0,go,null),b(f,CPe,_),b(f,Fd,_),e(Fd,N0),e(N0,Dpe),M(G6,Dpe,null),e(Fd,hKo),e(Fd,Gpe),e(Gpe,pKo),b(f,wPe,_),b(f,Wo,_),M(O6,Wo,null),e(Wo,uKo),e(Wo,Td),e(Td,_Ko),e(Td,eX),e(eX,bKo),e(Td,vKo),e(Td,oX),e(oX,FKo),e(Td,TKo),e(Wo,MKo),e(Wo,V6),e(V6,EKo),e(V6,Ope),e(Ope,CKo),e(V6,wKo),e(Wo,AKo),e(Wo,vt),M(X6,vt,null),e(vt,yKo),e(vt,Vpe),e(Vpe,LKo),e(vt,xKo),e(vt,Md),e(Md,$Ko),e(Md,Xpe),e(Xpe,kKo),e(Md,SKo),e(Md,rX),e(rX,RKo),e(Md,BKo),e(vt,PKo),M(j0,vt,null),e(Wo,IKo),e(Wo,ho),M(z6,ho,null),e(ho,qKo),e(ho,zpe),e(zpe,NKo),e(ho,jKo),e(ho,Xa),e(Xa,DKo),e(Xa,Qpe),e(Qpe,GKo),e(Xa,OKo),e(Xa,Wpe),e(Wpe,VKo),e(Xa,XKo),e(Xa,Hpe),e(Hpe,zKo),e(Xa,QKo),e(ho,WKo),e(ho,Q6),e(Q6,D0),e(D0,Upe),e(Upe,HKo),e(D0,UKo),e(D0,tX),e(tX,JKo),e(D0,YKo),e(Q6,KKo),e(Q6,G0),e(G0,Jpe),e(Jpe,ZKo),e(G0,eZo),e(G0,aX),e(aX,oZo),e(G0,rZo),e(ho,tZo),e(ho,O0),e(O0,aZo),e(O0,Ype),e(Ype,nZo),e(O0,sZo),e(O0,Kpe),e(Kpe,lZo),e(ho,iZo),M(V0,ho,null),b(f,APe,_),b(f,Ed,_),e(Ed,X0),e(X0,Zpe),M(W6,Zpe,null),e(Ed,dZo),e(Ed,eue),e(eue,cZo),b(f,yPe,_),b(f,Ho,_),M(H6,Ho,null),e(Ho,fZo),e(Ho,Cd),e(Cd,mZo),e(Cd,nX),e(nX,gZo),e(Cd,hZo),e(Cd,sX),e(sX,pZo),e(Cd,uZo),e(Ho,_Zo),e(Ho,U6),e(U6,bZo),e(U6,oue),e(oue,vZo),e(U6,FZo),e(Ho,TZo),e(Ho,Ft),M(J6,Ft,null),e(Ft,MZo),e(Ft,rue),e(rue,EZo),e(Ft,CZo),e(Ft,wd),e(wd,wZo),e(wd,tue),e(tue,AZo),e(wd,yZo),e(wd,lX),e(lX,LZo),e(wd,xZo),e(Ft,$Zo),M(z0,Ft,null),e(Ho,kZo),e(Ho,po),M(Y6,po,null),e(po,SZo),e(po,aue),e(aue,RZo),e(po,BZo),e(po,za),e(za,PZo),e(za,nue),e(nue,IZo),e(za,qZo),e(za,sue),e(sue,NZo),e(za,jZo),e(za,lue),e(lue,DZo),e(za,GZo),e(po,OZo),e(po,iue),e(iue,Q0),e(Q0,due),e(due,VZo),e(Q0,XZo),e(Q0,iX),e(iX,zZo),e(Q0,QZo),e(po,WZo),e(po,W0),e(W0,HZo),e(W0,cue),e(cue,UZo),e(W0,JZo),e(W0,fue),e(fue,YZo),e(po,KZo),M(H0,po,null),b(f,LPe,_),b(f,Ad,_),e(Ad,U0),e(U0,mue),M(K6,mue,null),e(Ad,ZZo),e(Ad,gue),e(gue,eer),b(f,xPe,_),b(f,Uo,_),M(Z6,Uo,null),e(Uo,oer),e(Uo,yd),e(yd,rer),e(yd,dX),e(dX,ter),e(yd,aer),e(yd,cX),e(cX,ner),e(yd,ser),e(Uo,ler),e(Uo,ey),e(ey,ier),e(ey,hue),e(hue,der),e(ey,cer),e(Uo,fer),e(Uo,Tt),M(oy,Tt,null),e(Tt,mer),e(Tt,pue),e(pue,ger),e(Tt,her),e(Tt,Ld),e(Ld,per),e(Ld,uue),e(uue,uer),e(Ld,_er),e(Ld,fX),e(fX,ber),e(Ld,ver),e(Tt,Fer),M(J0,Tt,null),e(Uo,Ter),e(Uo,uo),M(ry,uo,null),e(uo,Mer),e(uo,_ue),e(_ue,Eer),e(uo,Cer),e(uo,Qa),e(Qa,wer),e(Qa,bue),e(bue,Aer),e(Qa,yer),e(Qa,vue),e(vue,Ler),e(Qa,xer),e(Qa,Fue),e(Fue,$er),e(Qa,ker),e(uo,Ser),e(uo,Wa),e(Wa,Y0),e(Y0,Tue),e(Tue,Rer),e(Y0,Ber),e(Y0,mX),e(mX,Per),e(Y0,Ier),e(Wa,qer),e(Wa,K0),e(K0,Mue),e(Mue,Ner),e(K0,jer),e(K0,gX),e(gX,Der),e(K0,Ger),e(Wa,Oer),e(Wa,Z0),e(Z0,Eue),e(Eue,Ver),e(Z0,Xer),e(Z0,hX),e(hX,zer),e(Z0,Qer),e(Wa,Wer),e(Wa,eT),e(eT,Cue),e(Cue,Her),e(eT,Uer),e(eT,pX),e(pX,Jer),e(eT,Yer),e(uo,Ker),e(uo,oT),e(oT,Zer),e(oT,wue),e(wue,eor),e(oT,oor),e(oT,Aue),e(Aue,ror),e(uo,tor),M(rT,uo,null),b(f,$Pe,_),b(f,xd,_),e(xd,tT),e(tT,yue),M(ty,yue,null),e(xd,aor),e(xd,Lue),e(Lue,nor),b(f,kPe,_),b(f,Jo,_),M(ay,Jo,null),e(Jo,sor),e(Jo,$d),e($d,lor),e($d,uX),e(uX,ior),e($d,dor),e($d,_X),e(_X,cor),e($d,mor),e(Jo,gor),e(Jo,ny),e(ny,hor),e(ny,xue),e(xue,por),e(ny,uor),e(Jo,_or),e(Jo,Mt),M(sy,Mt,null),e(Mt,bor),e(Mt,$ue),e($ue,vor),e(Mt,For),e(Mt,kd),e(kd,Tor),e(kd,kue),e(kue,Mor),e(kd,Eor),e(kd,bX),e(bX,Cor),e(kd,wor),e(Mt,Aor),M(aT,Mt,null),e(Jo,yor),e(Jo,_o),M(ly,_o,null),e(_o,Lor),e(_o,Sue),e(Sue,xor),e(_o,$or),e(_o,Ha),e(Ha,kor),e(Ha,Rue),e(Rue,Sor),e(Ha,Ror),e(Ha,Bue),e(Bue,Bor),e(Ha,Por),e(Ha,Pue),e(Pue,Ior),e(Ha,qor),e(_o,Nor),e(_o,Iue),e(Iue,nT),e(nT,que),e(que,jor),e(nT,Dor),e(nT,vX),e(vX,Gor),e(nT,Oor),e(_o,Vor),e(_o,sT),e(sT,Xor),e(sT,Nue),e(Nue,zor),e(sT,Qor),e(sT,jue),e(jue,Wor),e(_o,Hor),M(lT,_o,null),b(f,SPe,_),b(f,Sd,_),e(Sd,iT),e(iT,Due),M(iy,Due,null),e(Sd,Uor),e(Sd,Gue),e(Gue,Jor),b(f,RPe,_),b(f,Yo,_),M(dy,Yo,null),e(Yo,Yor),e(Yo,Rd),e(Rd,Kor),e(Rd,FX),e(FX,Zor),e(Rd,err),e(Rd,TX),e(TX,orr),e(Rd,rrr),e(Yo,trr),e(Yo,cy),e(cy,arr),e(cy,Oue),e(Oue,nrr),e(cy,srr),e(Yo,lrr),e(Yo,Et),M(fy,Et,null),e(Et,irr),e(Et,Vue),e(Vue,drr),e(Et,crr),e(Et,Bd),e(Bd,frr),e(Bd,Xue),e(Xue,mrr),e(Bd,grr),e(Bd,MX),e(MX,hrr),e(Bd,prr),e(Et,urr),M(dT,Et,null),e(Yo,_rr),e(Yo,Cr),M(my,Cr,null),e(Cr,brr),e(Cr,zue),e(zue,vrr),e(Cr,Frr),e(Cr,Ua),e(Ua,Trr),e(Ua,Que),e(Que,Mrr),e(Ua,Err),e(Ua,Wue),e(Wue,Crr),e(Ua,wrr),e(Ua,Hue),e(Hue,Arr),e(Ua,yrr),e(Cr,Lrr),e(Cr,j),e(j,cT),e(cT,Uue),e(Uue,xrr),e(cT,$rr),e(cT,EX),e(EX,krr),e(cT,Srr),e(j,Rrr),e(j,fT),e(fT,Jue),e(Jue,Brr),e(fT,Prr),e(fT,CX),e(CX,Irr),e(fT,qrr),e(j,Nrr),e(j,mT),e(mT,Yue),e(Yue,jrr),e(mT,Drr),e(mT,wX),e(wX,Grr),e(mT,Orr),e(j,Vrr),e(j,gT),e(gT,Kue),e(Kue,Xrr),e(gT,zrr),e(gT,AX),e(AX,Qrr),e(gT,Wrr),e(j,Hrr),e(j,hT),e(hT,Zue),e(Zue,Urr),e(hT,Jrr),e(hT,yX),e(yX,Yrr),e(hT,Krr),e(j,Zrr),e(j,pT),e(pT,e_e),e(e_e,etr),e(pT,otr),e(pT,LX),e(LX,rtr),e(pT,ttr),e(j,atr),e(j,uT),e(uT,o_e),e(o_e,ntr),e(uT,str),e(uT,xX),e(xX,ltr),e(uT,itr),e(j,dtr),e(j,_T),e(_T,r_e),e(r_e,ctr),e(_T,ftr),e(_T,$X),e($X,mtr),e(_T,gtr),e(j,htr),e(j,bT),e(bT,t_e),e(t_e,ptr),e(bT,utr),e(bT,kX),e(kX,_tr),e(bT,btr),e(j,vtr),e(j,vT),e(vT,a_e),e(a_e,Ftr),e(vT,Ttr),e(vT,SX),e(SX,Mtr),e(vT,Etr),e(j,Ctr),e(j,FT),e(FT,n_e),e(n_e,wtr),e(FT,Atr),e(FT,RX),e(RX,ytr),e(FT,Ltr),e(j,xtr),e(j,TT),e(TT,s_e),e(s_e,$tr),e(TT,ktr),e(TT,BX),e(BX,Str),e(TT,Rtr),e(j,Btr),e(j,MT),e(MT,l_e),e(l_e,Ptr),e(MT,Itr),e(MT,PX),e(PX,qtr),e(MT,Ntr),e(j,jtr),e(j,ET),e(ET,i_e),e(i_e,Dtr),e(ET,Gtr),e(ET,IX),e(IX,Otr),e(ET,Vtr),e(j,Xtr),e(j,CT),e(CT,d_e),e(d_e,ztr),e(CT,Qtr),e(CT,qX),e(qX,Wtr),e(CT,Htr),e(j,Utr),e(j,wT),e(wT,c_e),e(c_e,Jtr),e(wT,Ytr),e(wT,NX),e(NX,Ktr),e(wT,Ztr),e(j,ear),e(j,AT),e(AT,f_e),e(f_e,oar),e(AT,rar),e(AT,jX),e(jX,tar),e(AT,aar),e(j,nar),e(j,ks),e(ks,m_e),e(m_e,sar),e(ks,lar),e(ks,DX),e(DX,iar),e(ks,dar),e(ks,GX),e(GX,car),e(ks,far),e(j,mar),e(j,yT),e(yT,g_e),e(g_e,gar),e(yT,har),e(yT,OX),e(OX,par),e(yT,uar),e(j,_ar),e(j,LT),e(LT,h_e),e(h_e,bar),e(LT,Far),e(LT,VX),e(VX,Tar),e(LT,Mar),e(j,Ear),e(j,xT),e(xT,p_e),e(p_e,Car),e(xT,war),e(xT,XX),e(XX,Aar),e(xT,yar),e(j,Lar),e(j,$T),e($T,u_e),e(u_e,xar),e($T,$ar),e($T,zX),e(zX,kar),e($T,Sar),e(j,Rar),e(j,kT),e(kT,__e),e(__e,Bar),e(kT,Par),e(kT,QX),e(QX,Iar),e(kT,qar),e(j,Nar),e(j,ST),e(ST,b_e),e(b_e,jar),e(ST,Dar),e(ST,WX),e(WX,Gar),e(ST,Oar),e(j,Var),e(j,RT),e(RT,v_e),e(v_e,Xar),e(RT,zar),e(RT,HX),e(HX,Qar),e(RT,War),e(j,Har),e(j,BT),e(BT,F_e),e(F_e,Uar),e(BT,Jar),e(BT,UX),e(UX,Yar),e(BT,Kar),e(j,Zar),e(j,PT),e(PT,T_e),e(T_e,enr),e(PT,onr),e(PT,JX),e(JX,rnr),e(PT,tnr),e(j,anr),e(j,IT),e(IT,M_e),e(M_e,nnr),e(IT,snr),e(IT,YX),e(YX,lnr),e(IT,inr),e(j,dnr),e(j,qT),e(qT,E_e),e(E_e,cnr),e(qT,fnr),e(qT,KX),e(KX,mnr),e(qT,gnr),e(j,hnr),e(j,NT),e(NT,C_e),e(C_e,pnr),e(NT,unr),e(NT,ZX),e(ZX,_nr),e(NT,bnr),e(j,vnr),e(j,jT),e(jT,w_e),e(w_e,Fnr),e(jT,Tnr),e(jT,ez),e(ez,Mnr),e(jT,Enr),e(j,Cnr),e(j,DT),e(DT,A_e),e(A_e,wnr),e(DT,Anr),e(DT,oz),e(oz,ynr),e(DT,Lnr),e(j,xnr),e(j,GT),e(GT,y_e),e(y_e,$nr),e(GT,knr),e(GT,rz),e(rz,Snr),e(GT,Rnr),e(j,Bnr),e(j,OT),e(OT,L_e),e(L_e,Pnr),e(OT,Inr),e(OT,tz),e(tz,qnr),e(OT,Nnr),e(j,jnr),e(j,VT),e(VT,x_e),e(x_e,Dnr),e(VT,Gnr),e(VT,az),e(az,Onr),e(VT,Vnr),e(j,Xnr),e(j,XT),e(XT,$_e),e($_e,znr),e(XT,Qnr),e(XT,nz),e(nz,Wnr),e(XT,Hnr),e(j,Unr),e(j,zT),e(zT,k_e),e(k_e,Jnr),e(zT,Ynr),e(zT,sz),e(sz,Knr),e(zT,Znr),e(j,esr),e(j,QT),e(QT,S_e),e(S_e,osr),e(QT,rsr),e(QT,lz),e(lz,tsr),e(QT,asr),e(j,nsr),e(j,WT),e(WT,R_e),e(R_e,ssr),e(WT,lsr),e(WT,iz),e(iz,isr),e(WT,dsr),e(j,csr),e(j,HT),e(HT,B_e),e(B_e,fsr),e(HT,msr),e(HT,dz),e(dz,gsr),e(HT,hsr),e(j,psr),e(j,UT),e(UT,P_e),e(P_e,usr),e(UT,_sr),e(UT,cz),e(cz,bsr),e(UT,vsr),e(j,Fsr),e(j,JT),e(JT,I_e),e(I_e,Tsr),e(JT,Msr),e(JT,fz),e(fz,Esr),e(JT,Csr),e(j,wsr),e(j,YT),e(YT,q_e),e(q_e,Asr),e(YT,ysr),e(YT,mz),e(mz,Lsr),e(YT,xsr),e(j,$sr),e(j,KT),e(KT,N_e),e(N_e,ksr),e(KT,Ssr),e(KT,gz),e(gz,Rsr),e(KT,Bsr),e(j,Psr),e(j,ZT),e(ZT,j_e),e(j_e,Isr),e(ZT,qsr),e(ZT,hz),e(hz,Nsr),e(ZT,jsr),e(Cr,Dsr),M(e7,Cr,null),b(f,BPe,_),b(f,Pd,_),e(Pd,o7),e(o7,D_e),M(gy,D_e,null),e(Pd,Gsr),e(Pd,G_e),e(G_e,Osr),b(f,PPe,_),b(f,Ko,_),M(hy,Ko,null),e(Ko,Vsr),e(Ko,Id),e(Id,Xsr),e(Id,pz),e(pz,zsr),e(Id,Qsr),e(Id,uz),e(uz,Wsr),e(Id,Hsr),e(Ko,Usr),e(Ko,py),e(py,Jsr),e(py,O_e),e(O_e,Ysr),e(py,Ksr),e(Ko,Zsr),e(Ko,Ct),M(uy,Ct,null),e(Ct,elr),e(Ct,V_e),e(V_e,olr),e(Ct,rlr),e(Ct,qd),e(qd,tlr),e(qd,X_e),e(X_e,alr),e(qd,nlr),e(qd,_z),e(_z,slr),e(qd,llr),e(Ct,ilr),M(r7,Ct,null),e(Ko,dlr),e(Ko,wr),M(_y,wr,null),e(wr,clr),e(wr,z_e),e(z_e,flr),e(wr,mlr),e(wr,Ja),e(Ja,glr),e(Ja,Q_e),e(Q_e,hlr),e(Ja,plr),e(Ja,W_e),e(W_e,ulr),e(Ja,_lr),e(Ja,H_e),e(H_e,blr),e(Ja,vlr),e(wr,Flr),e(wr,ne),e(ne,t7),e(t7,U_e),e(U_e,Tlr),e(t7,Mlr),e(t7,bz),e(bz,Elr),e(t7,Clr),e(ne,wlr),e(ne,a7),e(a7,J_e),e(J_e,Alr),e(a7,ylr),e(a7,vz),e(vz,Llr),e(a7,xlr),e(ne,$lr),e(ne,n7),e(n7,Y_e),e(Y_e,klr),e(n7,Slr),e(n7,Fz),e(Fz,Rlr),e(n7,Blr),e(ne,Plr),e(ne,s7),e(s7,K_e),e(K_e,Ilr),e(s7,qlr),e(s7,Tz),e(Tz,Nlr),e(s7,jlr),e(ne,Dlr),e(ne,l7),e(l7,Z_e),e(Z_e,Glr),e(l7,Olr),e(l7,Mz),e(Mz,Vlr),e(l7,Xlr),e(ne,zlr),e(ne,i7),e(i7,e1e),e(e1e,Qlr),e(i7,Wlr),e(i7,Ez),e(Ez,Hlr),e(i7,Ulr),e(ne,Jlr),e(ne,d7),e(d7,o1e),e(o1e,Ylr),e(d7,Klr),e(d7,Cz),e(Cz,Zlr),e(d7,eir),e(ne,oir),e(ne,c7),e(c7,r1e),e(r1e,rir),e(c7,tir),e(c7,wz),e(wz,air),e(c7,nir),e(ne,sir),e(ne,f7),e(f7,t1e),e(t1e,lir),e(f7,iir),e(f7,Az),e(Az,dir),e(f7,cir),e(ne,fir),e(ne,m7),e(m7,a1e),e(a1e,mir),e(m7,gir),e(m7,yz),e(yz,hir),e(m7,pir),e(ne,uir),e(ne,g7),e(g7,n1e),e(n1e,_ir),e(g7,bir),e(g7,Lz),e(Lz,vir),e(g7,Fir),e(ne,Tir),e(ne,h7),e(h7,s1e),e(s1e,Mir),e(h7,Eir),e(h7,xz),e(xz,Cir),e(h7,wir),e(ne,Air),e(ne,p7),e(p7,l1e),e(l1e,yir),e(p7,Lir),e(p7,$z),e($z,xir),e(p7,$ir),e(ne,kir),e(ne,u7),e(u7,i1e),e(i1e,Sir),e(u7,Rir),e(u7,kz),e(kz,Bir),e(u7,Pir),e(ne,Iir),e(ne,_7),e(_7,d1e),e(d1e,qir),e(_7,Nir),e(_7,Sz),e(Sz,jir),e(_7,Dir),e(ne,Gir),e(ne,b7),e(b7,c1e),e(c1e,Oir),e(b7,Vir),e(b7,Rz),e(Rz,Xir),e(b7,zir),e(ne,Qir),e(ne,v7),e(v7,f1e),e(f1e,Wir),e(v7,Hir),e(v7,Bz),e(Bz,Uir),e(v7,Jir),e(ne,Yir),e(ne,F7),e(F7,m1e),e(m1e,Kir),e(F7,Zir),e(F7,Pz),e(Pz,edr),e(F7,odr),e(ne,rdr),e(ne,T7),e(T7,g1e),e(g1e,tdr),e(T7,adr),e(T7,Iz),e(Iz,ndr),e(T7,sdr),e(ne,ldr),e(ne,M7),e(M7,h1e),e(h1e,idr),e(M7,ddr),e(M7,qz),e(qz,cdr),e(M7,fdr),e(ne,mdr),e(ne,E7),e(E7,p1e),e(p1e,gdr),e(E7,hdr),e(E7,Nz),e(Nz,pdr),e(E7,udr),e(ne,_dr),e(ne,C7),e(C7,u1e),e(u1e,bdr),e(C7,vdr),e(C7,jz),e(jz,Fdr),e(C7,Tdr),e(ne,Mdr),e(ne,w7),e(w7,_1e),e(_1e,Edr),e(w7,Cdr),e(w7,Dz),e(Dz,wdr),e(w7,Adr),e(wr,ydr),M(A7,wr,null),b(f,IPe,_),b(f,Nd,_),e(Nd,y7),e(y7,b1e),M(by,b1e,null),e(Nd,Ldr),e(Nd,v1e),e(v1e,xdr),b(f,qPe,_),b(f,Zo,_),M(vy,Zo,null),e(Zo,$dr),e(Zo,jd),e(jd,kdr),e(jd,Gz),e(Gz,Sdr),e(jd,Rdr),e(jd,Oz),e(Oz,Bdr),e(jd,Pdr),e(Zo,Idr),e(Zo,Fy),e(Fy,qdr),e(Fy,F1e),e(F1e,Ndr),e(Fy,jdr),e(Zo,Ddr),e(Zo,wt),M(Ty,wt,null),e(wt,Gdr),e(wt,T1e),e(T1e,Odr),e(wt,Vdr),e(wt,Dd),e(Dd,Xdr),e(Dd,M1e),e(M1e,zdr),e(Dd,Qdr),e(Dd,Vz),e(Vz,Wdr),e(Dd,Hdr),e(wt,Udr),M(L7,wt,null),e(Zo,Jdr),e(Zo,Ar),M(My,Ar,null),e(Ar,Ydr),e(Ar,E1e),e(E1e,Kdr),e(Ar,Zdr),e(Ar,Ya),e(Ya,ecr),e(Ya,C1e),e(C1e,ocr),e(Ya,rcr),e(Ya,w1e),e(w1e,tcr),e(Ya,acr),e(Ya,A1e),e(A1e,ncr),e(Ya,scr),e(Ar,lcr),e(Ar,Te),e(Te,x7),e(x7,y1e),e(y1e,icr),e(x7,dcr),e(x7,Xz),e(Xz,ccr),e(x7,fcr),e(Te,mcr),e(Te,$7),e($7,L1e),e(L1e,gcr),e($7,hcr),e($7,zz),e(zz,pcr),e($7,ucr),e(Te,_cr),e(Te,k7),e(k7,x1e),e(x1e,bcr),e(k7,vcr),e(k7,Qz),e(Qz,Fcr),e(k7,Tcr),e(Te,Mcr),e(Te,S7),e(S7,$1e),e($1e,Ecr),e(S7,Ccr),e(S7,Wz),e(Wz,wcr),e(S7,Acr),e(Te,ycr),e(Te,R7),e(R7,k1e),e(k1e,Lcr),e(R7,xcr),e(R7,Hz),e(Hz,$cr),e(R7,kcr),e(Te,Scr),e(Te,B7),e(B7,S1e),e(S1e,Rcr),e(B7,Bcr),e(B7,Uz),e(Uz,Pcr),e(B7,Icr),e(Te,qcr),e(Te,P7),e(P7,R1e),e(R1e,Ncr),e(P7,jcr),e(P7,Jz),e(Jz,Dcr),e(P7,Gcr),e(Te,Ocr),e(Te,I7),e(I7,B1e),e(B1e,Vcr),e(I7,Xcr),e(I7,Yz),e(Yz,zcr),e(I7,Qcr),e(Te,Wcr),e(Te,q7),e(q7,P1e),e(P1e,Hcr),e(q7,Ucr),e(q7,Kz),e(Kz,Jcr),e(q7,Ycr),e(Te,Kcr),e(Te,N7),e(N7,I1e),e(I1e,Zcr),e(N7,efr),e(N7,Zz),e(Zz,ofr),e(N7,rfr),e(Te,tfr),e(Te,j7),e(j7,q1e),e(q1e,afr),e(j7,nfr),e(j7,eQ),e(eQ,sfr),e(j7,lfr),e(Te,ifr),e(Te,D7),e(D7,N1e),e(N1e,dfr),e(D7,cfr),e(D7,oQ),e(oQ,ffr),e(D7,mfr),e(Ar,gfr),M(G7,Ar,null),b(f,NPe,_),b(f,Gd,_),e(Gd,O7),e(O7,j1e),M(Ey,j1e,null),e(Gd,hfr),e(Gd,D1e),e(D1e,pfr),b(f,jPe,_),b(f,er,_),M(Cy,er,null),e(er,ufr),e(er,Od),e(Od,_fr),e(Od,rQ),e(rQ,bfr),e(Od,vfr),e(Od,tQ),e(tQ,Ffr),e(Od,Tfr),e(er,Mfr),e(er,wy),e(wy,Efr),e(wy,G1e),e(G1e,Cfr),e(wy,wfr),e(er,Afr),e(er,At),M(Ay,At,null),e(At,yfr),e(At,O1e),e(O1e,Lfr),e(At,xfr),e(At,Vd),e(Vd,$fr),e(Vd,V1e),e(V1e,kfr),e(Vd,Sfr),e(Vd,aQ),e(aQ,Rfr),e(Vd,Bfr),e(At,Pfr),M(V7,At,null),e(er,Ifr),e(er,yr),M(yy,yr,null),e(yr,qfr),e(yr,X1e),e(X1e,Nfr),e(yr,jfr),e(yr,Ka),e(Ka,Dfr),e(Ka,z1e),e(z1e,Gfr),e(Ka,Ofr),e(Ka,Q1e),e(Q1e,Vfr),e(Ka,Xfr),e(Ka,W1e),e(W1e,zfr),e(Ka,Qfr),e(yr,Wfr),e(yr,Xd),e(Xd,X7),e(X7,H1e),e(H1e,Hfr),e(X7,Ufr),e(X7,nQ),e(nQ,Jfr),e(X7,Yfr),e(Xd,Kfr),e(Xd,z7),e(z7,U1e),e(U1e,Zfr),e(z7,emr),e(z7,sQ),e(sQ,omr),e(z7,rmr),e(Xd,tmr),e(Xd,Q7),e(Q7,J1e),e(J1e,amr),e(Q7,nmr),e(Q7,lQ),e(lQ,smr),e(Q7,lmr),e(yr,imr),M(W7,yr,null),b(f,DPe,_),b(f,zd,_),e(zd,H7),e(H7,Y1e),M(Ly,Y1e,null),e(zd,dmr),e(zd,K1e),e(K1e,cmr),b(f,GPe,_),b(f,or,_),M(xy,or,null),e(or,fmr),e(or,Qd),e(Qd,mmr),e(Qd,iQ),e(iQ,gmr),e(Qd,hmr),e(Qd,dQ),e(dQ,pmr),e(Qd,umr),e(or,_mr),e(or,$y),e($y,bmr),e($y,Z1e),e(Z1e,vmr),e($y,Fmr),e(or,Tmr),e(or,yt),M(ky,yt,null),e(yt,Mmr),e(yt,ebe),e(ebe,Emr),e(yt,Cmr),e(yt,Wd),e(Wd,wmr),e(Wd,obe),e(obe,Amr),e(Wd,ymr),e(Wd,cQ),e(cQ,Lmr),e(Wd,xmr),e(yt,$mr),M(U7,yt,null),e(or,kmr),e(or,Lr),M(Sy,Lr,null),e(Lr,Smr),e(Lr,rbe),e(rbe,Rmr),e(Lr,Bmr),e(Lr,Za),e(Za,Pmr),e(Za,tbe),e(tbe,Imr),e(Za,qmr),e(Za,abe),e(abe,Nmr),e(Za,jmr),e(Za,nbe),e(nbe,Dmr),e(Za,Gmr),e(Lr,Omr),e(Lr,ie),e(ie,J7),e(J7,sbe),e(sbe,Vmr),e(J7,Xmr),e(J7,fQ),e(fQ,zmr),e(J7,Qmr),e(ie,Wmr),e(ie,Y7),e(Y7,lbe),e(lbe,Hmr),e(Y7,Umr),e(Y7,mQ),e(mQ,Jmr),e(Y7,Ymr),e(ie,Kmr),e(ie,K7),e(K7,ibe),e(ibe,Zmr),e(K7,egr),e(K7,gQ),e(gQ,ogr),e(K7,rgr),e(ie,tgr),e(ie,Z7),e(Z7,dbe),e(dbe,agr),e(Z7,ngr),e(Z7,hQ),e(hQ,sgr),e(Z7,lgr),e(ie,igr),e(ie,e9),e(e9,cbe),e(cbe,dgr),e(e9,cgr),e(e9,pQ),e(pQ,fgr),e(e9,mgr),e(ie,ggr),e(ie,o9),e(o9,fbe),e(fbe,hgr),e(o9,pgr),e(o9,uQ),e(uQ,ugr),e(o9,_gr),e(ie,bgr),e(ie,r9),e(r9,mbe),e(mbe,vgr),e(r9,Fgr),e(r9,_Q),e(_Q,Tgr),e(r9,Mgr),e(ie,Egr),e(ie,t9),e(t9,gbe),e(gbe,Cgr),e(t9,wgr),e(t9,bQ),e(bQ,Agr),e(t9,ygr),e(ie,Lgr),e(ie,a9),e(a9,hbe),e(hbe,xgr),e(a9,$gr),e(a9,vQ),e(vQ,kgr),e(a9,Sgr),e(ie,Rgr),e(ie,n9),e(n9,pbe),e(pbe,Bgr),e(n9,Pgr),e(n9,FQ),e(FQ,Igr),e(n9,qgr),e(ie,Ngr),e(ie,s9),e(s9,ube),e(ube,jgr),e(s9,Dgr),e(s9,TQ),e(TQ,Ggr),e(s9,Ogr),e(ie,Vgr),e(ie,l9),e(l9,_be),e(_be,Xgr),e(l9,zgr),e(l9,MQ),e(MQ,Qgr),e(l9,Wgr),e(ie,Hgr),e(ie,i9),e(i9,bbe),e(bbe,Ugr),e(i9,Jgr),e(i9,EQ),e(EQ,Ygr),e(i9,Kgr),e(ie,Zgr),e(ie,d9),e(d9,vbe),e(vbe,ehr),e(d9,ohr),e(d9,CQ),e(CQ,rhr),e(d9,thr),e(ie,ahr),e(ie,c9),e(c9,Fbe),e(Fbe,nhr),e(c9,shr),e(c9,wQ),e(wQ,lhr),e(c9,ihr),e(ie,dhr),e(ie,f9),e(f9,Tbe),e(Tbe,chr),e(f9,fhr),e(f9,AQ),e(AQ,mhr),e(f9,ghr),e(ie,hhr),e(ie,m9),e(m9,Mbe),e(Mbe,phr),e(m9,uhr),e(m9,yQ),e(yQ,_hr),e(m9,bhr),e(ie,vhr),e(ie,g9),e(g9,Ebe),e(Ebe,Fhr),e(g9,Thr),e(g9,LQ),e(LQ,Mhr),e(g9,Ehr),e(ie,Chr),e(ie,h9),e(h9,Cbe),e(Cbe,whr),e(h9,Ahr),e(h9,xQ),e(xQ,yhr),e(h9,Lhr),e(ie,xhr),e(ie,p9),e(p9,wbe),e(wbe,$hr),e(p9,khr),e(p9,$Q),e($Q,Shr),e(p9,Rhr),e(Lr,Bhr),M(u9,Lr,null),b(f,OPe,_),b(f,Hd,_),e(Hd,_9),e(_9,Abe),M(Ry,Abe,null),e(Hd,Phr),e(Hd,ybe),e(ybe,Ihr),b(f,VPe,_),b(f,rr,_),M(By,rr,null),e(rr,qhr),e(rr,Ud),e(Ud,Nhr),e(Ud,kQ),e(kQ,jhr),e(Ud,Dhr),e(Ud,SQ),e(SQ,Ghr),e(Ud,Ohr),e(rr,Vhr),e(rr,Py),e(Py,Xhr),e(Py,Lbe),e(Lbe,zhr),e(Py,Qhr),e(rr,Whr),e(rr,Lt),M(Iy,Lt,null),e(Lt,Hhr),e(Lt,xbe),e(xbe,Uhr),e(Lt,Jhr),e(Lt,Jd),e(Jd,Yhr),e(Jd,$be),e($be,Khr),e(Jd,Zhr),e(Jd,RQ),e(RQ,epr),e(Jd,opr),e(Lt,rpr),M(b9,Lt,null),e(rr,tpr),e(rr,xr),M(qy,xr,null),e(xr,apr),e(xr,kbe),e(kbe,npr),e(xr,spr),e(xr,en),e(en,lpr),e(en,Sbe),e(Sbe,ipr),e(en,dpr),e(en,Rbe),e(Rbe,cpr),e(en,fpr),e(en,Bbe),e(Bbe,mpr),e(en,gpr),e(xr,hpr),e(xr,ye),e(ye,v9),e(v9,Pbe),e(Pbe,ppr),e(v9,upr),e(v9,BQ),e(BQ,_pr),e(v9,bpr),e(ye,vpr),e(ye,F9),e(F9,Ibe),e(Ibe,Fpr),e(F9,Tpr),e(F9,PQ),e(PQ,Mpr),e(F9,Epr),e(ye,Cpr),e(ye,T9),e(T9,qbe),e(qbe,wpr),e(T9,Apr),e(T9,IQ),e(IQ,ypr),e(T9,Lpr),e(ye,xpr),e(ye,M9),e(M9,Nbe),e(Nbe,$pr),e(M9,kpr),e(M9,qQ),e(qQ,Spr),e(M9,Rpr),e(ye,Bpr),e(ye,E9),e(E9,jbe),e(jbe,Ppr),e(E9,Ipr),e(E9,NQ),e(NQ,qpr),e(E9,Npr),e(ye,jpr),e(ye,C9),e(C9,Dbe),e(Dbe,Dpr),e(C9,Gpr),e(C9,jQ),e(jQ,Opr),e(C9,Vpr),e(ye,Xpr),e(ye,w9),e(w9,Gbe),e(Gbe,zpr),e(w9,Qpr),e(w9,DQ),e(DQ,Wpr),e(w9,Hpr),e(ye,Upr),e(ye,A9),e(A9,Obe),e(Obe,Jpr),e(A9,Ypr),e(A9,GQ),e(GQ,Kpr),e(A9,Zpr),e(ye,eur),e(ye,y9),e(y9,Vbe),e(Vbe,our),e(y9,rur),e(y9,OQ),e(OQ,tur),e(y9,aur),e(ye,nur),e(ye,L9),e(L9,Xbe),e(Xbe,sur),e(L9,lur),e(L9,VQ),e(VQ,iur),e(L9,dur),e(xr,cur),M(x9,xr,null),b(f,XPe,_),b(f,Yd,_),e(Yd,$9),e($9,zbe),M(Ny,zbe,null),e(Yd,fur),e(Yd,Qbe),e(Qbe,mur),b(f,zPe,_),b(f,tr,_),M(jy,tr,null),e(tr,gur),e(tr,Kd),e(Kd,hur),e(Kd,XQ),e(XQ,pur),e(Kd,uur),e(Kd,zQ),e(zQ,_ur),e(Kd,bur),e(tr,vur),e(tr,Dy),e(Dy,Fur),e(Dy,Wbe),e(Wbe,Tur),e(Dy,Mur),e(tr,Eur),e(tr,xt),M(Gy,xt,null),e(xt,Cur),e(xt,Hbe),e(Hbe,wur),e(xt,Aur),e(xt,Zd),e(Zd,yur),e(Zd,Ube),e(Ube,Lur),e(Zd,xur),e(Zd,QQ),e(QQ,$ur),e(Zd,kur),e(xt,Sur),M(k9,xt,null),e(tr,Rur),e(tr,$r),M(Oy,$r,null),e($r,Bur),e($r,Jbe),e(Jbe,Pur),e($r,Iur),e($r,on),e(on,qur),e(on,Ybe),e(Ybe,Nur),e(on,jur),e(on,Kbe),e(Kbe,Dur),e(on,Gur),e(on,Zbe),e(Zbe,Our),e(on,Vur),e($r,Xur),e($r,Z),e(Z,S9),e(S9,e2e),e(e2e,zur),e(S9,Qur),e(S9,WQ),e(WQ,Wur),e(S9,Hur),e(Z,Uur),e(Z,R9),e(R9,o2e),e(o2e,Jur),e(R9,Yur),e(R9,HQ),e(HQ,Kur),e(R9,Zur),e(Z,e_r),e(Z,B9),e(B9,r2e),e(r2e,o_r),e(B9,r_r),e(B9,UQ),e(UQ,t_r),e(B9,a_r),e(Z,n_r),e(Z,P9),e(P9,t2e),e(t2e,s_r),e(P9,l_r),e(P9,JQ),e(JQ,i_r),e(P9,d_r),e(Z,c_r),e(Z,I9),e(I9,a2e),e(a2e,f_r),e(I9,m_r),e(I9,YQ),e(YQ,g_r),e(I9,h_r),e(Z,p_r),e(Z,q9),e(q9,n2e),e(n2e,u_r),e(q9,__r),e(q9,KQ),e(KQ,b_r),e(q9,v_r),e(Z,F_r),e(Z,N9),e(N9,s2e),e(s2e,T_r),e(N9,M_r),e(N9,ZQ),e(ZQ,E_r),e(N9,C_r),e(Z,w_r),e(Z,j9),e(j9,l2e),e(l2e,A_r),e(j9,y_r),e(j9,eW),e(eW,L_r),e(j9,x_r),e(Z,$_r),e(Z,D9),e(D9,i2e),e(i2e,k_r),e(D9,S_r),e(D9,oW),e(oW,R_r),e(D9,B_r),e(Z,P_r),e(Z,G9),e(G9,d2e),e(d2e,I_r),e(G9,q_r),e(G9,rW),e(rW,N_r),e(G9,j_r),e(Z,D_r),e(Z,O9),e(O9,c2e),e(c2e,G_r),e(O9,O_r),e(O9,tW),e(tW,V_r),e(O9,X_r),e(Z,z_r),e(Z,V9),e(V9,f2e),e(f2e,Q_r),e(V9,W_r),e(V9,aW),e(aW,H_r),e(V9,U_r),e(Z,J_r),e(Z,X9),e(X9,m2e),e(m2e,Y_r),e(X9,K_r),e(X9,nW),e(nW,Z_r),e(X9,e1r),e(Z,o1r),e(Z,z9),e(z9,g2e),e(g2e,r1r),e(z9,t1r),e(z9,sW),e(sW,a1r),e(z9,n1r),e(Z,s1r),e(Z,Q9),e(Q9,h2e),e(h2e,l1r),e(Q9,i1r),e(Q9,lW),e(lW,d1r),e(Q9,c1r),e(Z,f1r),e(Z,W9),e(W9,p2e),e(p2e,m1r),e(W9,g1r),e(W9,iW),e(iW,h1r),e(W9,p1r),e(Z,u1r),e(Z,H9),e(H9,u2e),e(u2e,_1r),e(H9,b1r),e(H9,dW),e(dW,v1r),e(H9,F1r),e(Z,T1r),e(Z,U9),e(U9,_2e),e(_2e,M1r),e(U9,E1r),e(U9,cW),e(cW,C1r),e(U9,w1r),e(Z,A1r),e(Z,J9),e(J9,b2e),e(b2e,y1r),e(J9,L1r),e(J9,fW),e(fW,x1r),e(J9,$1r),e(Z,k1r),e(Z,Y9),e(Y9,v2e),e(v2e,S1r),e(Y9,R1r),e(Y9,mW),e(mW,B1r),e(Y9,P1r),e(Z,I1r),e(Z,K9),e(K9,F2e),e(F2e,q1r),e(K9,N1r),e(K9,gW),e(gW,j1r),e(K9,D1r),e(Z,G1r),e(Z,Z9),e(Z9,T2e),e(T2e,O1r),e(Z9,V1r),e(Z9,hW),e(hW,X1r),e(Z9,z1r),e(Z,Q1r),e(Z,eM),e(eM,M2e),e(M2e,W1r),e(eM,H1r),e(eM,pW),e(pW,U1r),e(eM,J1r),e(Z,Y1r),e(Z,oM),e(oM,E2e),e(E2e,K1r),e(oM,Z1r),e(oM,uW),e(uW,ebr),e(oM,obr),e(Z,rbr),e(Z,rM),e(rM,C2e),e(C2e,tbr),e(rM,abr),e(rM,_W),e(_W,nbr),e(rM,sbr),e(Z,lbr),e(Z,tM),e(tM,w2e),e(w2e,ibr),e(tM,dbr),e(tM,bW),e(bW,cbr),e(tM,fbr),e($r,mbr),M(aM,$r,null),b(f,QPe,_),b(f,ec,_),e(ec,nM),e(nM,A2e),M(Vy,A2e,null),e(ec,gbr),e(ec,y2e),e(y2e,hbr),b(f,WPe,_),b(f,ar,_),M(Xy,ar,null),e(ar,pbr),e(ar,oc),e(oc,ubr),e(oc,vW),e(vW,_br),e(oc,bbr),e(oc,FW),e(FW,vbr),e(oc,Fbr),e(ar,Tbr),e(ar,zy),e(zy,Mbr),e(zy,L2e),e(L2e,Ebr),e(zy,Cbr),e(ar,wbr),e(ar,$t),M(Qy,$t,null),e($t,Abr),e($t,x2e),e(x2e,ybr),e($t,Lbr),e($t,rc),e(rc,xbr),e(rc,$2e),e($2e,$br),e(rc,kbr),e(rc,TW),e(TW,Sbr),e(rc,Rbr),e($t,Bbr),M(sM,$t,null),e(ar,Pbr),e(ar,kr),M(Wy,kr,null),e(kr,Ibr),e(kr,k2e),e(k2e,qbr),e(kr,Nbr),e(kr,rn),e(rn,jbr),e(rn,S2e),e(S2e,Dbr),e(rn,Gbr),e(rn,R2e),e(R2e,Obr),e(rn,Vbr),e(rn,B2e),e(B2e,Xbr),e(rn,zbr),e(kr,Qbr),e(kr,pe),e(pe,lM),e(lM,P2e),e(P2e,Wbr),e(lM,Hbr),e(lM,MW),e(MW,Ubr),e(lM,Jbr),e(pe,Ybr),e(pe,iM),e(iM,I2e),e(I2e,Kbr),e(iM,Zbr),e(iM,EW),e(EW,e2r),e(iM,o2r),e(pe,r2r),e(pe,dM),e(dM,q2e),e(q2e,t2r),e(dM,a2r),e(dM,CW),e(CW,n2r),e(dM,s2r),e(pe,l2r),e(pe,cM),e(cM,N2e),e(N2e,i2r),e(cM,d2r),e(cM,wW),e(wW,c2r),e(cM,f2r),e(pe,m2r),e(pe,fM),e(fM,j2e),e(j2e,g2r),e(fM,h2r),e(fM,AW),e(AW,p2r),e(fM,u2r),e(pe,_2r),e(pe,mM),e(mM,D2e),e(D2e,b2r),e(mM,v2r),e(mM,yW),e(yW,F2r),e(mM,T2r),e(pe,M2r),e(pe,gM),e(gM,G2e),e(G2e,E2r),e(gM,C2r),e(gM,LW),e(LW,w2r),e(gM,A2r),e(pe,y2r),e(pe,hM),e(hM,O2e),e(O2e,L2r),e(hM,x2r),e(hM,xW),e(xW,$2r),e(hM,k2r),e(pe,S2r),e(pe,pM),e(pM,V2e),e(V2e,R2r),e(pM,B2r),e(pM,$W),e($W,P2r),e(pM,I2r),e(pe,q2r),e(pe,uM),e(uM,X2e),e(X2e,N2r),e(uM,j2r),e(uM,kW),e(kW,D2r),e(uM,G2r),e(pe,O2r),e(pe,_M),e(_M,z2e),e(z2e,V2r),e(_M,X2r),e(_M,SW),e(SW,z2r),e(_M,Q2r),e(pe,W2r),e(pe,bM),e(bM,Q2e),e(Q2e,H2r),e(bM,U2r),e(bM,RW),e(RW,J2r),e(bM,Y2r),e(pe,K2r),e(pe,vM),e(vM,W2e),e(W2e,Z2r),e(vM,evr),e(vM,BW),e(BW,ovr),e(vM,rvr),e(pe,tvr),e(pe,FM),e(FM,H2e),e(H2e,avr),e(FM,nvr),e(FM,PW),e(PW,svr),e(FM,lvr),e(pe,ivr),e(pe,TM),e(TM,U2e),e(U2e,dvr),e(TM,cvr),e(TM,IW),e(IW,fvr),e(TM,mvr),e(pe,gvr),e(pe,MM),e(MM,J2e),e(J2e,hvr),e(MM,pvr),e(MM,qW),e(qW,uvr),e(MM,_vr),e(pe,bvr),e(pe,EM),e(EM,Y2e),e(Y2e,vvr),e(EM,Fvr),e(EM,NW),e(NW,Tvr),e(EM,Mvr),e(kr,Evr),M(CM,kr,null),b(f,HPe,_),b(f,tc,_),e(tc,wM),e(wM,K2e),M(Hy,K2e,null),e(tc,Cvr),e(tc,Z2e),e(Z2e,wvr),b(f,UPe,_),b(f,nr,_),M(Uy,nr,null),e(nr,Avr),e(nr,ac),e(ac,yvr),e(ac,jW),e(jW,Lvr),e(ac,xvr),e(ac,DW),e(DW,$vr),e(ac,kvr),e(nr,Svr),e(nr,Jy),e(Jy,Rvr),e(Jy,eve),e(eve,Bvr),e(Jy,Pvr),e(nr,Ivr),e(nr,kt),M(Yy,kt,null),e(kt,qvr),e(kt,ove),e(ove,Nvr),e(kt,jvr),e(kt,nc),e(nc,Dvr),e(nc,rve),e(rve,Gvr),e(nc,Ovr),e(nc,GW),e(GW,Vvr),e(nc,Xvr),e(kt,zvr),M(AM,kt,null),e(nr,Qvr),e(nr,Sr),M(Ky,Sr,null),e(Sr,Wvr),e(Sr,tve),e(tve,Hvr),e(Sr,Uvr),e(Sr,tn),e(tn,Jvr),e(tn,ave),e(ave,Yvr),e(tn,Kvr),e(tn,nve),e(nve,Zvr),e(tn,eFr),e(tn,sve),e(sve,oFr),e(tn,rFr),e(Sr,tFr),e(Sr,lve),e(lve,yM),e(yM,ive),e(ive,aFr),e(yM,nFr),e(yM,OW),e(OW,sFr),e(yM,lFr),e(Sr,iFr),M(LM,Sr,null),b(f,JPe,_),b(f,sc,_),e(sc,xM),e(xM,dve),M(Zy,dve,null),e(sc,dFr),e(sc,cve),e(cve,cFr),b(f,YPe,_),b(f,sr,_),M(eL,sr,null),e(sr,fFr),e(sr,lc),e(lc,mFr),e(lc,VW),e(VW,gFr),e(lc,hFr),e(lc,XW),e(XW,pFr),e(lc,uFr),e(sr,_Fr),e(sr,oL),e(oL,bFr),e(oL,fve),e(fve,vFr),e(oL,FFr),e(sr,TFr),e(sr,St),M(rL,St,null),e(St,MFr),e(St,mve),e(mve,EFr),e(St,CFr),e(St,ic),e(ic,wFr),e(ic,gve),e(gve,AFr),e(ic,yFr),e(ic,zW),e(zW,LFr),e(ic,xFr),e(St,$Fr),M($M,St,null),e(sr,kFr),e(sr,Rr),M(tL,Rr,null),e(Rr,SFr),e(Rr,hve),e(hve,RFr),e(Rr,BFr),e(Rr,an),e(an,PFr),e(an,pve),e(pve,IFr),e(an,qFr),e(an,uve),e(uve,NFr),e(an,jFr),e(an,_ve),e(_ve,DFr),e(an,GFr),e(Rr,OFr),e(Rr,de),e(de,kM),e(kM,bve),e(bve,VFr),e(kM,XFr),e(kM,QW),e(QW,zFr),e(kM,QFr),e(de,WFr),e(de,SM),e(SM,vve),e(vve,HFr),e(SM,UFr),e(SM,WW),e(WW,JFr),e(SM,YFr),e(de,KFr),e(de,RM),e(RM,Fve),e(Fve,ZFr),e(RM,e0r),e(RM,HW),e(HW,o0r),e(RM,r0r),e(de,t0r),e(de,BM),e(BM,Tve),e(Tve,a0r),e(BM,n0r),e(BM,UW),e(UW,s0r),e(BM,l0r),e(de,i0r),e(de,PM),e(PM,Mve),e(Mve,d0r),e(PM,c0r),e(PM,JW),e(JW,f0r),e(PM,m0r),e(de,g0r),e(de,IM),e(IM,Eve),e(Eve,h0r),e(IM,p0r),e(IM,YW),e(YW,u0r),e(IM,_0r),e(de,b0r),e(de,qM),e(qM,Cve),e(Cve,v0r),e(qM,F0r),e(qM,KW),e(KW,T0r),e(qM,M0r),e(de,E0r),e(de,NM),e(NM,wve),e(wve,C0r),e(NM,w0r),e(NM,ZW),e(ZW,A0r),e(NM,y0r),e(de,L0r),e(de,jM),e(jM,Ave),e(Ave,x0r),e(jM,$0r),e(jM,eH),e(eH,k0r),e(jM,S0r),e(de,R0r),e(de,DM),e(DM,yve),e(yve,B0r),e(DM,P0r),e(DM,oH),e(oH,I0r),e(DM,q0r),e(de,N0r),e(de,GM),e(GM,Lve),e(Lve,j0r),e(GM,D0r),e(GM,rH),e(rH,G0r),e(GM,O0r),e(de,V0r),e(de,OM),e(OM,xve),e(xve,X0r),e(OM,z0r),e(OM,tH),e(tH,Q0r),e(OM,W0r),e(de,H0r),e(de,VM),e(VM,$ve),e($ve,U0r),e(VM,J0r),e(VM,aH),e(aH,Y0r),e(VM,K0r),e(de,Z0r),e(de,XM),e(XM,kve),e(kve,eTr),e(XM,oTr),e(XM,nH),e(nH,rTr),e(XM,tTr),e(de,aTr),e(de,zM),e(zM,Sve),e(Sve,nTr),e(zM,sTr),e(zM,sH),e(sH,lTr),e(zM,iTr),e(de,dTr),e(de,QM),e(QM,Rve),e(Rve,cTr),e(QM,fTr),e(QM,lH),e(lH,mTr),e(QM,gTr),e(de,hTr),e(de,WM),e(WM,Bve),e(Bve,pTr),e(WM,uTr),e(WM,iH),e(iH,_Tr),e(WM,bTr),e(de,vTr),e(de,HM),e(HM,Pve),e(Pve,FTr),e(HM,TTr),e(HM,dH),e(dH,MTr),e(HM,ETr),e(de,CTr),e(de,UM),e(UM,Ive),e(Ive,wTr),e(UM,ATr),e(UM,cH),e(cH,yTr),e(UM,LTr),e(de,xTr),e(de,JM),e(JM,qve),e(qve,$Tr),e(JM,kTr),e(JM,fH),e(fH,STr),e(JM,RTr),e(Rr,BTr),M(YM,Rr,null),b(f,KPe,_),b(f,dc,_),e(dc,KM),e(KM,Nve),M(aL,Nve,null),e(dc,PTr),e(dc,jve),e(jve,ITr),b(f,ZPe,_),b(f,lr,_),M(nL,lr,null),e(lr,qTr),e(lr,cc),e(cc,NTr),e(cc,mH),e(mH,jTr),e(cc,DTr),e(cc,gH),e(gH,GTr),e(cc,OTr),e(lr,VTr),e(lr,sL),e(sL,XTr),e(sL,Dve),e(Dve,zTr),e(sL,QTr),e(lr,WTr),e(lr,Rt),M(lL,Rt,null),e(Rt,HTr),e(Rt,Gve),e(Gve,UTr),e(Rt,JTr),e(Rt,fc),e(fc,YTr),e(fc,Ove),e(Ove,KTr),e(fc,ZTr),e(fc,hH),e(hH,e7r),e(fc,o7r),e(Rt,r7r),M(ZM,Rt,null),e(lr,t7r),e(lr,Br),M(iL,Br,null),e(Br,a7r),e(Br,Vve),e(Vve,n7r),e(Br,s7r),e(Br,nn),e(nn,l7r),e(nn,Xve),e(Xve,i7r),e(nn,d7r),e(nn,zve),e(zve,c7r),e(nn,f7r),e(nn,Qve),e(Qve,m7r),e(nn,g7r),e(Br,h7r),e(Br,ce),e(ce,e4),e(e4,Wve),e(Wve,p7r),e(e4,u7r),e(e4,pH),e(pH,_7r),e(e4,b7r),e(ce,v7r),e(ce,o4),e(o4,Hve),e(Hve,F7r),e(o4,T7r),e(o4,uH),e(uH,M7r),e(o4,E7r),e(ce,C7r),e(ce,r4),e(r4,Uve),e(Uve,w7r),e(r4,A7r),e(r4,_H),e(_H,y7r),e(r4,L7r),e(ce,x7r),e(ce,t4),e(t4,Jve),e(Jve,$7r),e(t4,k7r),e(t4,bH),e(bH,S7r),e(t4,R7r),e(ce,B7r),e(ce,a4),e(a4,Yve),e(Yve,P7r),e(a4,I7r),e(a4,vH),e(vH,q7r),e(a4,N7r),e(ce,j7r),e(ce,n4),e(n4,Kve),e(Kve,D7r),e(n4,G7r),e(n4,FH),e(FH,O7r),e(n4,V7r),e(ce,X7r),e(ce,s4),e(s4,Zve),e(Zve,z7r),e(s4,Q7r),e(s4,TH),e(TH,W7r),e(s4,H7r),e(ce,U7r),e(ce,l4),e(l4,eFe),e(eFe,J7r),e(l4,Y7r),e(l4,MH),e(MH,K7r),e(l4,Z7r),e(ce,e9r),e(ce,i4),e(i4,oFe),e(oFe,o9r),e(i4,r9r),e(i4,EH),e(EH,t9r),e(i4,a9r),e(ce,n9r),e(ce,d4),e(d4,rFe),e(rFe,s9r),e(d4,l9r),e(d4,CH),e(CH,i9r),e(d4,d9r),e(ce,c9r),e(ce,c4),e(c4,tFe),e(tFe,f9r),e(c4,m9r),e(c4,wH),e(wH,g9r),e(c4,h9r),e(ce,p9r),e(ce,f4),e(f4,aFe),e(aFe,u9r),e(f4,_9r),e(f4,AH),e(AH,b9r),e(f4,v9r),e(ce,F9r),e(ce,m4),e(m4,nFe),e(nFe,T9r),e(m4,M9r),e(m4,yH),e(yH,E9r),e(m4,C9r),e(ce,w9r),e(ce,g4),e(g4,sFe),e(sFe,A9r),e(g4,y9r),e(g4,LH),e(LH,L9r),e(g4,x9r),e(ce,$9r),e(ce,h4),e(h4,lFe),e(lFe,k9r),e(h4,S9r),e(h4,xH),e(xH,R9r),e(h4,B9r),e(ce,P9r),e(ce,p4),e(p4,iFe),e(iFe,I9r),e(p4,q9r),e(p4,$H),e($H,N9r),e(p4,j9r),e(ce,D9r),e(ce,u4),e(u4,dFe),e(dFe,G9r),e(u4,O9r),e(u4,kH),e(kH,V9r),e(u4,X9r),e(ce,z9r),e(ce,_4),e(_4,cFe),e(cFe,Q9r),e(_4,W9r),e(_4,SH),e(SH,H9r),e(_4,U9r),e(ce,J9r),e(ce,b4),e(b4,fFe),e(fFe,Y9r),e(b4,K9r),e(b4,RH),e(RH,Z9r),e(b4,eMr),e(ce,oMr),e(ce,v4),e(v4,mFe),e(mFe,rMr),e(v4,tMr),e(v4,BH),e(BH,aMr),e(v4,nMr),e(Br,sMr),M(F4,Br,null),b(f,eIe,_),b(f,mc,_),e(mc,T4),e(T4,gFe),M(dL,gFe,null),e(mc,lMr),e(mc,hFe),e(hFe,iMr),b(f,oIe,_),b(f,ir,_),M(cL,ir,null),e(ir,dMr),e(ir,gc),e(gc,cMr),e(gc,PH),e(PH,fMr),e(gc,mMr),e(gc,IH),e(IH,gMr),e(gc,hMr),e(ir,pMr),e(ir,fL),e(fL,uMr),e(fL,pFe),e(pFe,_Mr),e(fL,bMr),e(ir,vMr),e(ir,Bt),M(mL,Bt,null),e(Bt,FMr),e(Bt,uFe),e(uFe,TMr),e(Bt,MMr),e(Bt,hc),e(hc,EMr),e(hc,_Fe),e(_Fe,CMr),e(hc,wMr),e(hc,qH),e(qH,AMr),e(hc,yMr),e(Bt,LMr),M(M4,Bt,null),e(ir,xMr),e(ir,Pr),M(gL,Pr,null),e(Pr,$Mr),e(Pr,bFe),e(bFe,kMr),e(Pr,SMr),e(Pr,sn),e(sn,RMr),e(sn,vFe),e(vFe,BMr),e(sn,PMr),e(sn,FFe),e(FFe,IMr),e(sn,qMr),e(sn,TFe),e(TFe,NMr),e(sn,jMr),e(Pr,DMr),e(Pr,MFe),e(MFe,E4),e(E4,EFe),e(EFe,GMr),e(E4,OMr),e(E4,NH),e(NH,VMr),e(E4,XMr),e(Pr,zMr),M(C4,Pr,null),b(f,rIe,_),b(f,pc,_),e(pc,w4),e(w4,CFe),M(hL,CFe,null),e(pc,QMr),e(pc,wFe),e(wFe,WMr),b(f,tIe,_),b(f,dr,_),M(pL,dr,null),e(dr,HMr),e(dr,uc),e(uc,UMr),e(uc,jH),e(jH,JMr),e(uc,YMr),e(uc,DH),e(DH,KMr),e(uc,ZMr),e(dr,e4r),e(dr,uL),e(uL,o4r),e(uL,AFe),e(AFe,r4r),e(uL,t4r),e(dr,a4r),e(dr,Pt),M(_L,Pt,null),e(Pt,n4r),e(Pt,yFe),e(yFe,s4r),e(Pt,l4r),e(Pt,_c),e(_c,i4r),e(_c,LFe),e(LFe,d4r),e(_c,c4r),e(_c,GH),e(GH,f4r),e(_c,m4r),e(Pt,g4r),M(A4,Pt,null),e(dr,h4r),e(dr,Ir),M(bL,Ir,null),e(Ir,p4r),e(Ir,xFe),e(xFe,u4r),e(Ir,_4r),e(Ir,ln),e(ln,b4r),e(ln,$Fe),e($Fe,v4r),e(ln,F4r),e(ln,kFe),e(kFe,T4r),e(ln,M4r),e(ln,SFe),e(SFe,E4r),e(ln,C4r),e(Ir,w4r),e(Ir,RFe),e(RFe,y4),e(y4,BFe),e(BFe,A4r),e(y4,y4r),e(y4,OH),e(OH,L4r),e(y4,x4r),e(Ir,$4r),M(L4,Ir,null),b(f,aIe,_),b(f,bc,_),e(bc,x4),e(x4,PFe),M(vL,PFe,null),e(bc,k4r),e(bc,IFe),e(IFe,S4r),b(f,nIe,_),b(f,cr,_),M(FL,cr,null),e(cr,R4r),e(cr,vc),e(vc,B4r),e(vc,VH),e(VH,P4r),e(vc,I4r),e(vc,XH),e(XH,q4r),e(vc,N4r),e(cr,j4r),e(cr,TL),e(TL,D4r),e(TL,qFe),e(qFe,G4r),e(TL,O4r),e(cr,V4r),e(cr,It),M(ML,It,null),e(It,X4r),e(It,NFe),e(NFe,z4r),e(It,Q4r),e(It,Fc),e(Fc,W4r),e(Fc,jFe),e(jFe,H4r),e(Fc,U4r),e(Fc,zH),e(zH,J4r),e(Fc,Y4r),e(It,K4r),M($4,It,null),e(cr,Z4r),e(cr,qr),M(EL,qr,null),e(qr,eEr),e(qr,DFe),e(DFe,oEr),e(qr,rEr),e(qr,dn),e(dn,tEr),e(dn,GFe),e(GFe,aEr),e(dn,nEr),e(dn,OFe),e(OFe,sEr),e(dn,lEr),e(dn,VFe),e(VFe,iEr),e(dn,dEr),e(qr,cEr),e(qr,oe),e(oe,k4),e(k4,XFe),e(XFe,fEr),e(k4,mEr),e(k4,QH),e(QH,gEr),e(k4,hEr),e(oe,pEr),e(oe,S4),e(S4,zFe),e(zFe,uEr),e(S4,_Er),e(S4,WH),e(WH,bEr),e(S4,vEr),e(oe,FEr),e(oe,R4),e(R4,QFe),e(QFe,TEr),e(R4,MEr),e(R4,HH),e(HH,EEr),e(R4,CEr),e(oe,wEr),e(oe,B4),e(B4,WFe),e(WFe,AEr),e(B4,yEr),e(B4,UH),e(UH,LEr),e(B4,xEr),e(oe,$Er),e(oe,P4),e(P4,HFe),e(HFe,kEr),e(P4,SEr),e(P4,JH),e(JH,REr),e(P4,BEr),e(oe,PEr),e(oe,I4),e(I4,UFe),e(UFe,IEr),e(I4,qEr),e(I4,YH),e(YH,NEr),e(I4,jEr),e(oe,DEr),e(oe,q4),e(q4,JFe),e(JFe,GEr),e(q4,OEr),e(q4,KH),e(KH,VEr),e(q4,XEr),e(oe,zEr),e(oe,N4),e(N4,YFe),e(YFe,QEr),e(N4,WEr),e(N4,ZH),e(ZH,HEr),e(N4,UEr),e(oe,JEr),e(oe,j4),e(j4,KFe),e(KFe,YEr),e(j4,KEr),e(j4,eU),e(eU,ZEr),e(j4,e5r),e(oe,o5r),e(oe,D4),e(D4,ZFe),e(ZFe,r5r),e(D4,t5r),e(D4,oU),e(oU,a5r),e(D4,n5r),e(oe,s5r),e(oe,G4),e(G4,e0e),e(e0e,l5r),e(G4,i5r),e(G4,rU),e(rU,d5r),e(G4,c5r),e(oe,f5r),e(oe,O4),e(O4,o0e),e(o0e,m5r),e(O4,g5r),e(O4,tU),e(tU,h5r),e(O4,p5r),e(oe,u5r),e(oe,V4),e(V4,r0e),e(r0e,_5r),e(V4,b5r),e(V4,aU),e(aU,v5r),e(V4,F5r),e(oe,T5r),e(oe,X4),e(X4,t0e),e(t0e,M5r),e(X4,E5r),e(X4,nU),e(nU,C5r),e(X4,w5r),e(oe,A5r),e(oe,z4),e(z4,a0e),e(a0e,y5r),e(z4,L5r),e(z4,sU),e(sU,x5r),e(z4,$5r),e(oe,k5r),e(oe,Q4),e(Q4,n0e),e(n0e,S5r),e(Q4,R5r),e(Q4,lU),e(lU,B5r),e(Q4,P5r),e(oe,I5r),e(oe,W4),e(W4,s0e),e(s0e,q5r),e(W4,N5r),e(W4,iU),e(iU,j5r),e(W4,D5r),e(oe,G5r),e(oe,H4),e(H4,l0e),e(l0e,O5r),e(H4,V5r),e(H4,dU),e(dU,X5r),e(H4,z5r),e(oe,Q5r),e(oe,U4),e(U4,i0e),e(i0e,W5r),e(U4,H5r),e(U4,cU),e(cU,U5r),e(U4,J5r),e(oe,Y5r),e(oe,J4),e(J4,d0e),e(d0e,K5r),e(J4,Z5r),e(J4,fU),e(fU,eCr),e(J4,oCr),e(oe,rCr),e(oe,Y4),e(Y4,c0e),e(c0e,tCr),e(Y4,aCr),e(Y4,mU),e(mU,nCr),e(Y4,sCr),e(oe,lCr),e(oe,K4),e(K4,f0e),e(f0e,iCr),e(K4,dCr),e(K4,gU),e(gU,cCr),e(K4,fCr),e(oe,mCr),e(oe,Z4),e(Z4,m0e),e(m0e,gCr),e(Z4,hCr),e(Z4,hU),e(hU,pCr),e(Z4,uCr),e(oe,_Cr),e(oe,eE),e(eE,g0e),e(g0e,bCr),e(eE,vCr),e(eE,pU),e(pU,FCr),e(eE,TCr),e(oe,MCr),e(oe,oE),e(oE,h0e),e(h0e,ECr),e(oE,CCr),e(oE,uU),e(uU,wCr),e(oE,ACr),e(qr,yCr),M(rE,qr,null),b(f,sIe,_),b(f,Tc,_),e(Tc,tE),e(tE,p0e),M(CL,p0e,null),e(Tc,LCr),e(Tc,u0e),e(u0e,xCr),b(f,lIe,_),b(f,fr,_),M(wL,fr,null),e(fr,$Cr),e(fr,Mc),e(Mc,kCr),e(Mc,_U),e(_U,SCr),e(Mc,RCr),e(Mc,bU),e(bU,BCr),e(Mc,PCr),e(fr,ICr),e(fr,AL),e(AL,qCr),e(AL,_0e),e(_0e,NCr),e(AL,jCr),e(fr,DCr),e(fr,qt),M(yL,qt,null),e(qt,GCr),e(qt,b0e),e(b0e,OCr),e(qt,VCr),e(qt,Ec),e(Ec,XCr),e(Ec,v0e),e(v0e,zCr),e(Ec,QCr),e(Ec,vU),e(vU,WCr),e(Ec,HCr),e(qt,UCr),M(aE,qt,null),e(fr,JCr),e(fr,Nr),M(LL,Nr,null),e(Nr,YCr),e(Nr,F0e),e(F0e,KCr),e(Nr,ZCr),e(Nr,cn),e(cn,e3r),e(cn,T0e),e(T0e,o3r),e(cn,r3r),e(cn,M0e),e(M0e,t3r),e(cn,a3r),e(cn,E0e),e(E0e,n3r),e(cn,s3r),e(Nr,l3r),e(Nr,ke),e(ke,nE),e(nE,C0e),e(C0e,i3r),e(nE,d3r),e(nE,FU),e(FU,c3r),e(nE,f3r),e(ke,m3r),e(ke,sE),e(sE,w0e),e(w0e,g3r),e(sE,h3r),e(sE,TU),e(TU,p3r),e(sE,u3r),e(ke,_3r),e(ke,lE),e(lE,A0e),e(A0e,b3r),e(lE,v3r),e(lE,MU),e(MU,F3r),e(lE,T3r),e(ke,M3r),e(ke,iE),e(iE,y0e),e(y0e,E3r),e(iE,C3r),e(iE,EU),e(EU,w3r),e(iE,A3r),e(ke,y3r),e(ke,dE),e(dE,L0e),e(L0e,L3r),e(dE,x3r),e(dE,CU),e(CU,$3r),e(dE,k3r),e(ke,S3r),e(ke,cE),e(cE,x0e),e(x0e,R3r),e(cE,B3r),e(cE,wU),e(wU,P3r),e(cE,I3r),e(ke,q3r),e(ke,fE),e(fE,$0e),e($0e,N3r),e(fE,j3r),e(fE,AU),e(AU,D3r),e(fE,G3r),e(ke,O3r),e(ke,mE),e(mE,k0e),e(k0e,V3r),e(mE,X3r),e(mE,yU),e(yU,z3r),e(mE,Q3r),e(ke,W3r),e(ke,gE),e(gE,S0e),e(S0e,H3r),e(gE,U3r),e(gE,LU),e(LU,J3r),e(gE,Y3r),e(Nr,K3r),M(hE,Nr,null),b(f,iIe,_),b(f,Cc,_),e(Cc,pE),e(pE,R0e),M(xL,R0e,null),e(Cc,Z3r),e(Cc,B0e),e(B0e,ewr),b(f,dIe,_),b(f,mr,_),M($L,mr,null),e(mr,owr),e(mr,wc),e(wc,rwr),e(wc,xU),e(xU,twr),e(wc,awr),e(wc,$U),e($U,nwr),e(wc,swr),e(mr,lwr),e(mr,kL),e(kL,iwr),e(kL,P0e),e(P0e,dwr),e(kL,cwr),e(mr,fwr),e(mr,Nt),M(SL,Nt,null),e(Nt,mwr),e(Nt,I0e),e(I0e,gwr),e(Nt,hwr),e(Nt,Ac),e(Ac,pwr),e(Ac,q0e),e(q0e,uwr),e(Ac,_wr),e(Ac,kU),e(kU,bwr),e(Ac,vwr),e(Nt,Fwr),M(uE,Nt,null),e(mr,Twr),e(mr,jr),M(RL,jr,null),e(jr,Mwr),e(jr,N0e),e(N0e,Ewr),e(jr,Cwr),e(jr,fn),e(fn,wwr),e(fn,j0e),e(j0e,Awr),e(fn,ywr),e(fn,D0e),e(D0e,Lwr),e(fn,xwr),e(fn,G0e),e(G0e,$wr),e(fn,kwr),e(jr,Swr),e(jr,Me),e(Me,_E),e(_E,O0e),e(O0e,Rwr),e(_E,Bwr),e(_E,SU),e(SU,Pwr),e(_E,Iwr),e(Me,qwr),e(Me,bE),e(bE,V0e),e(V0e,Nwr),e(bE,jwr),e(bE,RU),e(RU,Dwr),e(bE,Gwr),e(Me,Owr),e(Me,vE),e(vE,X0e),e(X0e,Vwr),e(vE,Xwr),e(vE,BU),e(BU,zwr),e(vE,Qwr),e(Me,Wwr),e(Me,FE),e(FE,z0e),e(z0e,Hwr),e(FE,Uwr),e(FE,PU),e(PU,Jwr),e(FE,Ywr),e(Me,Kwr),e(Me,TE),e(TE,Q0e),e(Q0e,Zwr),e(TE,eAr),e(TE,IU),e(IU,oAr),e(TE,rAr),e(Me,tAr),e(Me,ME),e(ME,W0e),e(W0e,aAr),e(ME,nAr),e(ME,qU),e(qU,sAr),e(ME,lAr),e(Me,iAr),e(Me,EE),e(EE,H0e),e(H0e,dAr),e(EE,cAr),e(EE,NU),e(NU,fAr),e(EE,mAr),e(Me,gAr),e(Me,CE),e(CE,U0e),e(U0e,hAr),e(CE,pAr),e(CE,jU),e(jU,uAr),e(CE,_Ar),e(Me,bAr),e(Me,wE),e(wE,J0e),e(J0e,vAr),e(wE,FAr),e(wE,DU),e(DU,TAr),e(wE,MAr),e(Me,EAr),e(Me,AE),e(AE,Y0e),e(Y0e,CAr),e(AE,wAr),e(AE,GU),e(GU,AAr),e(AE,yAr),e(Me,LAr),e(Me,yE),e(yE,K0e),e(K0e,xAr),e(yE,$Ar),e(yE,OU),e(OU,kAr),e(yE,SAr),e(Me,RAr),e(Me,LE),e(LE,Z0e),e(Z0e,BAr),e(LE,PAr),e(LE,VU),e(VU,IAr),e(LE,qAr),e(jr,NAr),M(xE,jr,null),b(f,cIe,_),b(f,yc,_),e(yc,$E),e($E,eTe),M(BL,eTe,null),e(yc,jAr),e(yc,oTe),e(oTe,DAr),b(f,fIe,_),b(f,gr,_),M(PL,gr,null),e(gr,GAr),e(gr,Lc),e(Lc,OAr),e(Lc,XU),e(XU,VAr),e(Lc,XAr),e(Lc,zU),e(zU,zAr),e(Lc,QAr),e(gr,WAr),e(gr,IL),e(IL,HAr),e(IL,rTe),e(rTe,UAr),e(IL,JAr),e(gr,YAr),e(gr,jt),M(qL,jt,null),e(jt,KAr),e(jt,tTe),e(tTe,ZAr),e(jt,e6r),e(jt,xc),e(xc,o6r),e(xc,aTe),e(aTe,r6r),e(xc,t6r),e(xc,QU),e(QU,a6r),e(xc,n6r),e(jt,s6r),M(kE,jt,null),e(gr,l6r),e(gr,Dr),M(NL,Dr,null),e(Dr,i6r),e(Dr,nTe),e(nTe,d6r),e(Dr,c6r),e(Dr,mn),e(mn,f6r),e(mn,sTe),e(sTe,m6r),e(mn,g6r),e(mn,lTe),e(lTe,h6r),e(mn,p6r),e(mn,iTe),e(iTe,u6r),e(mn,_6r),e(Dr,b6r),e(Dr,Le),e(Le,SE),e(SE,dTe),e(dTe,v6r),e(SE,F6r),e(SE,WU),e(WU,T6r),e(SE,M6r),e(Le,E6r),e(Le,RE),e(RE,cTe),e(cTe,C6r),e(RE,w6r),e(RE,HU),e(HU,A6r),e(RE,y6r),e(Le,L6r),e(Le,BE),e(BE,fTe),e(fTe,x6r),e(BE,$6r),e(BE,UU),e(UU,k6r),e(BE,S6r),e(Le,R6r),e(Le,PE),e(PE,mTe),e(mTe,B6r),e(PE,P6r),e(PE,JU),e(JU,I6r),e(PE,q6r),e(Le,N6r),e(Le,IE),e(IE,gTe),e(gTe,j6r),e(IE,D6r),e(IE,YU),e(YU,G6r),e(IE,O6r),e(Le,V6r),e(Le,qE),e(qE,hTe),e(hTe,X6r),e(qE,z6r),e(qE,KU),e(KU,Q6r),e(qE,W6r),e(Le,H6r),e(Le,NE),e(NE,pTe),e(pTe,U6r),e(NE,J6r),e(NE,ZU),e(ZU,Y6r),e(NE,K6r),e(Le,Z6r),e(Le,jE),e(jE,uTe),e(uTe,eyr),e(jE,oyr),e(jE,eJ),e(eJ,ryr),e(jE,tyr),e(Le,ayr),e(Le,DE),e(DE,_Te),e(_Te,nyr),e(DE,syr),e(DE,oJ),e(oJ,lyr),e(DE,iyr),e(Le,dyr),e(Le,GE),e(GE,bTe),e(bTe,cyr),e(GE,fyr),e(GE,rJ),e(rJ,myr),e(GE,gyr),e(Dr,hyr),M(OE,Dr,null),b(f,mIe,_),b(f,$c,_),e($c,VE),e(VE,vTe),M(jL,vTe,null),e($c,pyr),e($c,FTe),e(FTe,uyr),b(f,gIe,_),b(f,hr,_),M(DL,hr,null),e(hr,_yr),e(hr,kc),e(kc,byr),e(kc,tJ),e(tJ,vyr),e(kc,Fyr),e(kc,aJ),e(aJ,Tyr),e(kc,Myr),e(hr,Eyr),e(hr,GL),e(GL,Cyr),e(GL,TTe),e(TTe,wyr),e(GL,Ayr),e(hr,yyr),e(hr,Dt),M(OL,Dt,null),e(Dt,Lyr),e(Dt,MTe),e(MTe,xyr),e(Dt,$yr),e(Dt,Sc),e(Sc,kyr),e(Sc,ETe),e(ETe,Syr),e(Sc,Ryr),e(Sc,nJ),e(nJ,Byr),e(Sc,Pyr),e(Dt,Iyr),M(XE,Dt,null),e(hr,qyr),e(hr,Gr),M(VL,Gr,null),e(Gr,Nyr),e(Gr,CTe),e(CTe,jyr),e(Gr,Dyr),e(Gr,gn),e(gn,Gyr),e(gn,wTe),e(wTe,Oyr),e(gn,Vyr),e(gn,ATe),e(ATe,Xyr),e(gn,zyr),e(gn,yTe),e(yTe,Qyr),e(gn,Wyr),e(Gr,Hyr),e(Gr,Se),e(Se,zE),e(zE,LTe),e(LTe,Uyr),e(zE,Jyr),e(zE,sJ),e(sJ,Yyr),e(zE,Kyr),e(Se,Zyr),e(Se,QE),e(QE,xTe),e(xTe,eLr),e(QE,oLr),e(QE,lJ),e(lJ,rLr),e(QE,tLr),e(Se,aLr),e(Se,WE),e(WE,$Te),e($Te,nLr),e(WE,sLr),e(WE,iJ),e(iJ,lLr),e(WE,iLr),e(Se,dLr),e(Se,HE),e(HE,kTe),e(kTe,cLr),e(HE,fLr),e(HE,dJ),e(dJ,mLr),e(HE,gLr),e(Se,hLr),e(Se,UE),e(UE,STe),e(STe,pLr),e(UE,uLr),e(UE,cJ),e(cJ,_Lr),e(UE,bLr),e(Se,vLr),e(Se,JE),e(JE,RTe),e(RTe,FLr),e(JE,TLr),e(JE,fJ),e(fJ,MLr),e(JE,ELr),e(Se,CLr),e(Se,YE),e(YE,BTe),e(BTe,wLr),e(YE,ALr),e(YE,mJ),e(mJ,yLr),e(YE,LLr),e(Se,xLr),e(Se,KE),e(KE,PTe),e(PTe,$Lr),e(KE,kLr),e(KE,gJ),e(gJ,SLr),e(KE,RLr),e(Se,BLr),e(Se,ZE),e(ZE,ITe),e(ITe,PLr),e(ZE,ILr),e(ZE,hJ),e(hJ,qLr),e(ZE,NLr),e(Gr,jLr),M(e5,Gr,null),b(f,hIe,_),b(f,Rc,_),e(Rc,o5),e(o5,qTe),M(XL,qTe,null),e(Rc,DLr),e(Rc,NTe),e(NTe,GLr),b(f,pIe,_),b(f,pr,_),M(zL,pr,null),e(pr,OLr),e(pr,Bc),e(Bc,VLr),e(Bc,pJ),e(pJ,XLr),e(Bc,zLr),e(Bc,uJ),e(uJ,QLr),e(Bc,WLr),e(pr,HLr),e(pr,QL),e(QL,ULr),e(QL,jTe),e(jTe,JLr),e(QL,YLr),e(pr,KLr),e(pr,Gt),M(WL,Gt,null),e(Gt,ZLr),e(Gt,DTe),e(DTe,e8r),e(Gt,o8r),e(Gt,Pc),e(Pc,r8r),e(Pc,GTe),e(GTe,t8r),e(Pc,a8r),e(Pc,_J),e(_J,n8r),e(Pc,s8r),e(Gt,l8r),M(r5,Gt,null),e(pr,i8r),e(pr,Or),M(HL,Or,null),e(Or,d8r),e(Or,OTe),e(OTe,c8r),e(Or,f8r),e(Or,hn),e(hn,m8r),e(hn,VTe),e(VTe,g8r),e(hn,h8r),e(hn,XTe),e(XTe,p8r),e(hn,u8r),e(hn,zTe),e(zTe,_8r),e(hn,b8r),e(Or,v8r),e(Or,xe),e(xe,t5),e(t5,QTe),e(QTe,F8r),e(t5,T8r),e(t5,bJ),e(bJ,M8r),e(t5,E8r),e(xe,C8r),e(xe,a5),e(a5,WTe),e(WTe,w8r),e(a5,A8r),e(a5,vJ),e(vJ,y8r),e(a5,L8r),e(xe,x8r),e(xe,n5),e(n5,HTe),e(HTe,$8r),e(n5,k8r),e(n5,FJ),e(FJ,S8r),e(n5,R8r),e(xe,B8r),e(xe,s5),e(s5,UTe),e(UTe,P8r),e(s5,I8r),e(s5,TJ),e(TJ,q8r),e(s5,N8r),e(xe,j8r),e(xe,l5),e(l5,JTe),e(JTe,D8r),e(l5,G8r),e(l5,MJ),e(MJ,O8r),e(l5,V8r),e(xe,X8r),e(xe,i5),e(i5,YTe),e(YTe,z8r),e(i5,Q8r),e(i5,EJ),e(EJ,W8r),e(i5,H8r),e(xe,U8r),e(xe,d5),e(d5,KTe),e(KTe,J8r),e(d5,Y8r),e(d5,CJ),e(CJ,K8r),e(d5,Z8r),e(xe,exr),e(xe,c5),e(c5,ZTe),e(ZTe,oxr),e(c5,rxr),e(c5,wJ),e(wJ,txr),e(c5,axr),e(xe,nxr),e(xe,f5),e(f5,e7e),e(e7e,sxr),e(f5,lxr),e(f5,AJ),e(AJ,ixr),e(f5,dxr),e(xe,cxr),e(xe,m5),e(m5,o7e),e(o7e,fxr),e(m5,mxr),e(m5,yJ),e(yJ,gxr),e(m5,hxr),e(Or,pxr),M(g5,Or,null),b(f,uIe,_),b(f,Ic,_),e(Ic,h5),e(h5,r7e),M(UL,r7e,null),e(Ic,uxr),e(Ic,t7e),e(t7e,_xr),b(f,_Ie,_),b(f,ur,_),M(JL,ur,null),e(ur,bxr),e(ur,qc),e(qc,vxr),e(qc,LJ),e(LJ,Fxr),e(qc,Txr),e(qc,xJ),e(xJ,Mxr),e(qc,Exr),e(ur,Cxr),e(ur,YL),e(YL,wxr),e(YL,a7e),e(a7e,Axr),e(YL,yxr),e(ur,Lxr),e(ur,Ot),M(KL,Ot,null),e(Ot,xxr),e(Ot,n7e),e(n7e,$xr),e(Ot,kxr),e(Ot,Nc),e(Nc,Sxr),e(Nc,s7e),e(s7e,Rxr),e(Nc,Bxr),e(Nc,$J),e($J,Pxr),e(Nc,Ixr),e(Ot,qxr),M(p5,Ot,null),e(ur,Nxr),e(ur,Vr),M(ZL,Vr,null),e(Vr,jxr),e(Vr,l7e),e(l7e,Dxr),e(Vr,Gxr),e(Vr,pn),e(pn,Oxr),e(pn,i7e),e(i7e,Vxr),e(pn,Xxr),e(pn,d7e),e(d7e,zxr),e(pn,Qxr),e(pn,c7e),e(c7e,Wxr),e(pn,Hxr),e(Vr,Uxr),e(Vr,$e),e($e,u5),e(u5,f7e),e(f7e,Jxr),e(u5,Yxr),e(u5,kJ),e(kJ,Kxr),e(u5,Zxr),e($e,e$r),e($e,_5),e(_5,m7e),e(m7e,o$r),e(_5,r$r),e(_5,SJ),e(SJ,t$r),e(_5,a$r),e($e,n$r),e($e,b5),e(b5,g7e),e(g7e,s$r),e(b5,l$r),e(b5,RJ),e(RJ,i$r),e(b5,d$r),e($e,c$r),e($e,v5),e(v5,h7e),e(h7e,f$r),e(v5,m$r),e(v5,BJ),e(BJ,g$r),e(v5,h$r),e($e,p$r),e($e,F5),e(F5,p7e),e(p7e,u$r),e(F5,_$r),e(F5,PJ),e(PJ,b$r),e(F5,v$r),e($e,F$r),e($e,T5),e(T5,u7e),e(u7e,T$r),e(T5,M$r),e(T5,IJ),e(IJ,E$r),e(T5,C$r),e($e,w$r),e($e,M5),e(M5,_7e),e(_7e,A$r),e(M5,y$r),e(M5,qJ),e(qJ,L$r),e(M5,x$r),e($e,$$r),e($e,E5),e(E5,b7e),e(b7e,k$r),e(E5,S$r),e(E5,NJ),e(NJ,R$r),e(E5,B$r),e($e,P$r),e($e,C5),e(C5,v7e),e(v7e,I$r),e(C5,q$r),e(C5,jJ),e(jJ,N$r),e(C5,j$r),e($e,D$r),e($e,w5),e(w5,F7e),e(F7e,G$r),e(w5,O$r),e(w5,DJ),e(DJ,V$r),e(w5,X$r),e(Vr,z$r),M(A5,Vr,null),b(f,bIe,_),b(f,jc,_),e(jc,y5),e(y5,T7e),M(e8,T7e,null),e(jc,Q$r),e(jc,M7e),e(M7e,W$r),b(f,vIe,_),b(f,_r,_),M(o8,_r,null),e(_r,H$r),e(_r,Dc),e(Dc,U$r),e(Dc,GJ),e(GJ,J$r),e(Dc,Y$r),e(Dc,OJ),e(OJ,K$r),e(Dc,Z$r),e(_r,ekr),e(_r,r8),e(r8,okr),e(r8,E7e),e(E7e,rkr),e(r8,tkr),e(_r,akr),e(_r,Vt),M(t8,Vt,null),e(Vt,nkr),e(Vt,C7e),e(C7e,skr),e(Vt,lkr),e(Vt,Gc),e(Gc,ikr),e(Gc,w7e),e(w7e,dkr),e(Gc,ckr),e(Gc,VJ),e(VJ,fkr),e(Gc,mkr),e(Vt,gkr),M(L5,Vt,null),e(_r,hkr),e(_r,Xr),M(a8,Xr,null),e(Xr,pkr),e(Xr,A7e),e(A7e,ukr),e(Xr,_kr),e(Xr,un),e(un,bkr),e(un,y7e),e(y7e,vkr),e(un,Fkr),e(un,L7e),e(L7e,Tkr),e(un,Mkr),e(un,x7e),e(x7e,Ekr),e(un,Ckr),e(Xr,wkr),e(Xr,De),e(De,x5),e(x5,$7e),e($7e,Akr),e(x5,ykr),e(x5,XJ),e(XJ,Lkr),e(x5,xkr),e(De,$kr),e(De,$5),e($5,k7e),e(k7e,kkr),e($5,Skr),e($5,zJ),e(zJ,Rkr),e($5,Bkr),e(De,Pkr),e(De,k5),e(k5,S7e),e(S7e,Ikr),e(k5,qkr),e(k5,QJ),e(QJ,Nkr),e(k5,jkr),e(De,Dkr),e(De,S5),e(S5,R7e),e(R7e,Gkr),e(S5,Okr),e(S5,WJ),e(WJ,Vkr),e(S5,Xkr),e(De,zkr),e(De,R5),e(R5,B7e),e(B7e,Qkr),e(R5,Wkr),e(R5,HJ),e(HJ,Hkr),e(R5,Ukr),e(De,Jkr),e(De,B5),e(B5,P7e),e(P7e,Ykr),e(B5,Kkr),e(B5,UJ),e(UJ,Zkr),e(B5,eSr),e(De,oSr),e(De,P5),e(P5,I7e),e(I7e,rSr),e(P5,tSr),e(P5,JJ),e(JJ,aSr),e(P5,nSr),e(De,sSr),e(De,I5),e(I5,q7e),e(q7e,lSr),e(I5,iSr),e(I5,YJ),e(YJ,dSr),e(I5,cSr),e(Xr,fSr),M(q5,Xr,null),b(f,FIe,_),b(f,Oc,_),e(Oc,N5),e(N5,N7e),M(n8,N7e,null),e(Oc,mSr),e(Oc,j7e),e(j7e,gSr),b(f,TIe,_),b(f,br,_),M(s8,br,null),e(br,hSr),e(br,Vc),e(Vc,pSr),e(Vc,KJ),e(KJ,uSr),e(Vc,_Sr),e(Vc,ZJ),e(ZJ,bSr),e(Vc,vSr),e(br,FSr),e(br,l8),e(l8,TSr),e(l8,D7e),e(D7e,MSr),e(l8,ESr),e(br,CSr),e(br,Xt),M(i8,Xt,null),e(Xt,wSr),e(Xt,G7e),e(G7e,ASr),e(Xt,ySr),e(Xt,Xc),e(Xc,LSr),e(Xc,O7e),e(O7e,xSr),e(Xc,$Sr),e(Xc,eY),e(eY,kSr),e(Xc,SSr),e(Xt,RSr),M(j5,Xt,null),e(br,BSr),e(br,zr),M(d8,zr,null),e(zr,PSr),e(zr,V7e),e(V7e,ISr),e(zr,qSr),e(zr,_n),e(_n,NSr),e(_n,X7e),e(X7e,jSr),e(_n,DSr),e(_n,z7e),e(z7e,GSr),e(_n,OSr),e(_n,Q7e),e(Q7e,VSr),e(_n,XSr),e(zr,zSr),e(zr,Ge),e(Ge,D5),e(D5,W7e),e(W7e,QSr),e(D5,WSr),e(D5,oY),e(oY,HSr),e(D5,USr),e(Ge,JSr),e(Ge,G5),e(G5,H7e),e(H7e,YSr),e(G5,KSr),e(G5,rY),e(rY,ZSr),e(G5,eRr),e(Ge,oRr),e(Ge,O5),e(O5,U7e),e(U7e,rRr),e(O5,tRr),e(O5,tY),e(tY,aRr),e(O5,nRr),e(Ge,sRr),e(Ge,V5),e(V5,J7e),e(J7e,lRr),e(V5,iRr),e(V5,aY),e(aY,dRr),e(V5,cRr),e(Ge,fRr),e(Ge,X5),e(X5,Y7e),e(Y7e,mRr),e(X5,gRr),e(X5,nY),e(nY,hRr),e(X5,pRr),e(Ge,uRr),e(Ge,z5),e(z5,K7e),e(K7e,_Rr),e(z5,bRr),e(z5,sY),e(sY,vRr),e(z5,FRr),e(Ge,TRr),e(Ge,Q5),e(Q5,Z7e),e(Z7e,MRr),e(Q5,ERr),e(Q5,lY),e(lY,CRr),e(Q5,wRr),e(Ge,ARr),e(Ge,W5),e(W5,e9e),e(e9e,yRr),e(W5,LRr),e(W5,iY),e(iY,xRr),e(W5,$Rr),e(zr,kRr),M(H5,zr,null),b(f,MIe,_),b(f,zc,_),e(zc,U5),e(U5,o9e),M(c8,o9e,null),e(zc,SRr),e(zc,r9e),e(r9e,RRr),b(f,EIe,_),b(f,vr,_),M(f8,vr,null),e(vr,BRr),e(vr,Qc),e(Qc,PRr),e(Qc,dY),e(dY,IRr),e(Qc,qRr),e(Qc,cY),e(cY,NRr),e(Qc,jRr),e(vr,DRr),e(vr,m8),e(m8,GRr),e(m8,t9e),e(t9e,ORr),e(m8,VRr),e(vr,XRr),e(vr,zt),M(g8,zt,null),e(zt,zRr),e(zt,a9e),e(a9e,QRr),e(zt,WRr),e(zt,Wc),e(Wc,HRr),e(Wc,n9e),e(n9e,URr),e(Wc,JRr),e(Wc,fY),e(fY,YRr),e(Wc,KRr),e(zt,ZRr),M(J5,zt,null),e(vr,eBr),e(vr,Qr),M(h8,Qr,null),e(Qr,oBr),e(Qr,s9e),e(s9e,rBr),e(Qr,tBr),e(Qr,bn),e(bn,aBr),e(bn,l9e),e(l9e,nBr),e(bn,sBr),e(bn,i9e),e(i9e,lBr),e(bn,iBr),e(bn,d9e),e(d9e,dBr),e(bn,cBr),e(Qr,fBr),e(Qr,c9e),e(c9e,Y5),e(Y5,f9e),e(f9e,mBr),e(Y5,gBr),e(Y5,mY),e(mY,hBr),e(Y5,pBr),e(Qr,uBr),M(K5,Qr,null),b(f,CIe,_),b(f,Hc,_),e(Hc,Z5),e(Z5,m9e),M(p8,m9e,null),e(Hc,_Br),e(Hc,g9e),e(g9e,bBr),b(f,wIe,_),b(f,Fr,_),M(u8,Fr,null),e(Fr,vBr),e(Fr,Uc),e(Uc,FBr),e(Uc,gY),e(gY,TBr),e(Uc,MBr),e(Uc,hY),e(hY,EBr),e(Uc,CBr),e(Fr,wBr),e(Fr,_8),e(_8,ABr),e(_8,h9e),e(h9e,yBr),e(_8,LBr),e(Fr,xBr),e(Fr,Qt),M(b8,Qt,null),e(Qt,$Br),e(Qt,p9e),e(p9e,kBr),e(Qt,SBr),e(Qt,Jc),e(Jc,RBr),e(Jc,u9e),e(u9e,BBr),e(Jc,PBr),e(Jc,pY),e(pY,IBr),e(Jc,qBr),e(Qt,NBr),M(eC,Qt,null),e(Fr,jBr),e(Fr,Wr),M(v8,Wr,null),e(Wr,DBr),e(Wr,_9e),e(_9e,GBr),e(Wr,OBr),e(Wr,vn),e(vn,VBr),e(vn,b9e),e(b9e,XBr),e(vn,zBr),e(vn,v9e),e(v9e,QBr),e(vn,WBr),e(vn,F9e),e(F9e,HBr),e(vn,UBr),e(Wr,JBr),e(Wr,F8),e(F8,oC),e(oC,T9e),e(T9e,YBr),e(oC,KBr),e(oC,uY),e(uY,ZBr),e(oC,ePr),e(F8,oPr),e(F8,rC),e(rC,M9e),e(M9e,rPr),e(rC,tPr),e(rC,_Y),e(_Y,aPr),e(rC,nPr),e(Wr,sPr),M(tC,Wr,null),b(f,AIe,_),b(f,Yc,_),e(Yc,aC),e(aC,E9e),M(T8,E9e,null),e(Yc,lPr),e(Yc,C9e),e(C9e,iPr),b(f,yIe,_),b(f,Tr,_),M(M8,Tr,null),e(Tr,dPr),e(Tr,Kc),e(Kc,cPr),e(Kc,bY),e(bY,fPr),e(Kc,mPr),e(Kc,vY),e(vY,gPr),e(Kc,hPr),e(Tr,pPr),e(Tr,E8),e(E8,uPr),e(E8,w9e),e(w9e,_Pr),e(E8,bPr),e(Tr,vPr),e(Tr,Wt),M(C8,Wt,null),e(Wt,FPr),e(Wt,A9e),e(A9e,TPr),e(Wt,MPr),e(Wt,Zc),e(Zc,EPr),e(Zc,y9e),e(y9e,CPr),e(Zc,wPr),e(Zc,FY),e(FY,APr),e(Zc,yPr),e(Wt,LPr),M(nC,Wt,null),e(Tr,xPr),e(Tr,Hr),M(w8,Hr,null),e(Hr,$Pr),e(Hr,L9e),e(L9e,kPr),e(Hr,SPr),e(Hr,Fn),e(Fn,RPr),e(Fn,x9e),e(x9e,BPr),e(Fn,PPr),e(Fn,$9e),e($9e,IPr),e(Fn,qPr),e(Fn,k9e),e(k9e,NPr),e(Fn,jPr),e(Hr,DPr),e(Hr,S9e),e(S9e,sC),e(sC,R9e),e(R9e,GPr),e(sC,OPr),e(sC,TY),e(TY,VPr),e(sC,XPr),e(Hr,zPr),M(lC,Hr,null),LIe=!0},p(f,[_]){const A8={};_&2&&(A8.$$scope={dirty:_,ctx:f}),df.$set(A8);const B9e={};_&2&&(B9e.$$scope={dirty:_,ctx:f}),lg.$set(B9e);const P9e={};_&2&&(P9e.$$scope={dirty:_,ctx:f}),jg.$set(P9e);const I9e={};_&2&&(I9e.$$scope={dirty:_,ctx:f}),mh.$set(I9e);const y8={};_&2&&(y8.$$scope={dirty:_,ctx:f}),gh.$set(y8);const q9e={};_&2&&(q9e.$$scope={dirty:_,ctx:f}),$h.$set(q9e);const Tn={};_&2&&(Tn.$$scope={dirty:_,ctx:f}),kh.$set(Tn);const N9e={};_&2&&(N9e.$$scope={dirty:_,ctx:f}),Bh.$set(N9e);const j9e={};_&2&&(j9e.$$scope={dirty:_,ctx:f}),Eu.$set(j9e);const D9e={};_&2&&(D9e.$$scope={dirty:_,ctx:f}),wu.$set(D9e);const L8={};_&2&&(L8.$$scope={dirty:_,ctx:f}),m_.$set(L8);const G9e={};_&2&&(G9e.$$scope={dirty:_,ctx:f}),h_.$set(G9e);const x8={};_&2&&(x8.$$scope={dirty:_,ctx:f}),Y_.$set(x8);const O9e={};_&2&&(O9e.$$scope={dirty:_,ctx:f}),Z_.$set(O9e);const $8={};_&2&&($8.$$scope={dirty:_,ctx:f}),I1.$set($8);const V9e={};_&2&&(V9e.$$scope={dirty:_,ctx:f}),N1.$set(V9e);const X9e={};_&2&&(X9e.$$scope={dirty:_,ctx:f}),tb.$set(X9e);const z9e={};_&2&&(z9e.$$scope={dirty:_,ctx:f}),nb.$set(z9e);const ef={};_&2&&(ef.$$scope={dirty:_,ctx:f}),e2.$set(ef);const Q9e={};_&2&&(Q9e.$$scope={dirty:_,ctx:f}),r2.$set(Q9e);const W9e={};_&2&&(W9e.$$scope={dirty:_,ctx:f}),S2.$set(W9e);const H9e={};_&2&&(H9e.$$scope={dirty:_,ctx:f}),B2.$set(H9e);const k8={};_&2&&(k8.$$scope={dirty:_,ctx:f}),G2.$set(k8);const U9e={};_&2&&(U9e.$$scope={dirty:_,ctx:f}),V2.$set(U9e);const J9e={};_&2&&(J9e.$$scope={dirty:_,ctx:f}),Cv.$set(J9e);const Y9e={};_&2&&(Y9e.$$scope={dirty:_,ctx:f}),Av.$set(Y9e);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),gF.$set(Jr);const S8={};_&2&&(S8.$$scope={dirty:_,ctx:f}),pF.$set(S8);const K9e={};_&2&&(K9e.$$scope={dirty:_,ctx:f}),bF.$set(K9e);const R8={};_&2&&(R8.$$scope={dirty:_,ctx:f}),FF.$set(R8);const Z9e={};_&2&&(Z9e.$$scope={dirty:_,ctx:f}),RF.$set(Z9e);const Yr={};_&2&&(Yr.$$scope={dirty:_,ctx:f}),PF.$set(Yr);const eMe={};_&2&&(eMe.$$scope={dirty:_,ctx:f}),NF.$set(eMe);const of={};_&2&&(of.$$scope={dirty:_,ctx:f}),DF.$set(of);const oMe={};_&2&&(oMe.$$scope={dirty:_,ctx:f}),JF.$set(oMe);const rMe={};_&2&&(rMe.$$scope={dirty:_,ctx:f}),KF.$set(rMe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),a0.$set(y);const iC={};_&2&&(iC.$$scope={dirty:_,ctx:f}),s0.$set(iC);const tMe={};_&2&&(tMe.$$scope={dirty:_,ctx:f}),u0.$set(tMe);const aMe={};_&2&&(aMe.$$scope={dirty:_,ctx:f}),b0.$set(aMe);const dC={};_&2&&(dC.$$scope={dirty:_,ctx:f}),M0.$set(dC);const nMe={};_&2&&(nMe.$$scope={dirty:_,ctx:f}),C0.$set(nMe);const sMe={};_&2&&(sMe.$$scope={dirty:_,ctx:f}),$0.$set(sMe);const cC={};_&2&&(cC.$$scope={dirty:_,ctx:f}),S0.$set(cC);const lMe={};_&2&&(lMe.$$scope={dirty:_,ctx:f}),q0.$set(lMe);const iMe={};_&2&&(iMe.$$scope={dirty:_,ctx:f}),j0.$set(iMe);const fC={};_&2&&(fC.$$scope={dirty:_,ctx:f}),V0.$set(fC);const dMe={};_&2&&(dMe.$$scope={dirty:_,ctx:f}),z0.$set(dMe);const cMe={};_&2&&(cMe.$$scope={dirty:_,ctx:f}),H0.$set(cMe);const mC={};_&2&&(mC.$$scope={dirty:_,ctx:f}),J0.$set(mC);const fMe={};_&2&&(fMe.$$scope={dirty:_,ctx:f}),rT.$set(fMe);const mMe={};_&2&&(mMe.$$scope={dirty:_,ctx:f}),aT.$set(mMe);const gC={};_&2&&(gC.$$scope={dirty:_,ctx:f}),lT.$set(gC);const gMe={};_&2&&(gMe.$$scope={dirty:_,ctx:f}),dT.$set(gMe);const hMe={};_&2&&(hMe.$$scope={dirty:_,ctx:f}),e7.$set(hMe);const hC={};_&2&&(hC.$$scope={dirty:_,ctx:f}),r7.$set(hC);const pMe={};_&2&&(pMe.$$scope={dirty:_,ctx:f}),A7.$set(pMe);const uMe={};_&2&&(uMe.$$scope={dirty:_,ctx:f}),L7.$set(uMe);const pC={};_&2&&(pC.$$scope={dirty:_,ctx:f}),G7.$set(pC);const _Me={};_&2&&(_Me.$$scope={dirty:_,ctx:f}),V7.$set(_Me);const bMe={};_&2&&(bMe.$$scope={dirty:_,ctx:f}),W7.$set(bMe);const uC={};_&2&&(uC.$$scope={dirty:_,ctx:f}),U7.$set(uC);const vMe={};_&2&&(vMe.$$scope={dirty:_,ctx:f}),u9.$set(vMe);const FMe={};_&2&&(FMe.$$scope={dirty:_,ctx:f}),b9.$set(FMe);const _C={};_&2&&(_C.$$scope={dirty:_,ctx:f}),x9.$set(_C);const TMe={};_&2&&(TMe.$$scope={dirty:_,ctx:f}),k9.$set(TMe);const MMe={};_&2&&(MMe.$$scope={dirty:_,ctx:f}),aM.$set(MMe);const bC={};_&2&&(bC.$$scope={dirty:_,ctx:f}),sM.$set(bC);const EMe={};_&2&&(EMe.$$scope={dirty:_,ctx:f}),CM.$set(EMe);const CMe={};_&2&&(CMe.$$scope={dirty:_,ctx:f}),AM.$set(CMe);const vC={};_&2&&(vC.$$scope={dirty:_,ctx:f}),LM.$set(vC);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),$M.$set(wMe);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),YM.$set(AMe);const FC={};_&2&&(FC.$$scope={dirty:_,ctx:f}),ZM.$set(FC);const yMe={};_&2&&(yMe.$$scope={dirty:_,ctx:f}),F4.$set(yMe);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),M4.$set(LMe);const TC={};_&2&&(TC.$$scope={dirty:_,ctx:f}),C4.$set(TC);const xMe={};_&2&&(xMe.$$scope={dirty:_,ctx:f}),A4.$set(xMe);const $Me={};_&2&&($Me.$$scope={dirty:_,ctx:f}),L4.$set($Me);const MC={};_&2&&(MC.$$scope={dirty:_,ctx:f}),$4.$set(MC);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),rE.$set(kMe);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),aE.$set(SMe);const EC={};_&2&&(EC.$$scope={dirty:_,ctx:f}),hE.$set(EC);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),uE.$set(RMe);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),xE.$set(BMe);const CC={};_&2&&(CC.$$scope={dirty:_,ctx:f}),kE.$set(CC);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),OE.$set(PMe);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),XE.$set(IMe);const wC={};_&2&&(wC.$$scope={dirty:_,ctx:f}),e5.$set(wC);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),r5.$set(qMe);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),g5.$set(NMe);const AC={};_&2&&(AC.$$scope={dirty:_,ctx:f}),p5.$set(AC);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),A5.$set(jMe);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),L5.$set(DMe);const yC={};_&2&&(yC.$$scope={dirty:_,ctx:f}),q5.$set(yC);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),j5.$set(GMe);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),H5.$set(OMe);const LC={};_&2&&(LC.$$scope={dirty:_,ctx:f}),J5.$set(LC);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),K5.$set(VMe);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),eC.$set(XMe);const xC={};_&2&&(xC.$$scope={dirty:_,ctx:f}),tC.$set(xC);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),nC.$set(zMe);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),lC.$set(QMe)},i(f){LIe||(E(d.$$.fragment,f),E(va.$$.fragment,f),E(yw.$$.fragment,f),E(Lw.$$.fragment,f),E(df.$$.fragment,f),E(xw.$$.fragment,f),E($w.$$.fragment,f),E(Rw.$$.fragment,f),E(lg.$$.fragment,f),E(Bw.$$.fragment,f),E(Pw.$$.fragment,f),E(Iw.$$.fragment,f),E(jw.$$.fragment,f),E(jg.$$.fragment,f),E(Dw.$$.fragment,f),E(Gw.$$.fragment,f),E(Ow.$$.fragment,f),E(zw.$$.fragment,f),E(mh.$$.fragment,f),E(gh.$$.fragment,f),E(Qw.$$.fragment,f),E(Ww.$$.fragment,f),E(Hw.$$.fragment,f),E(Yw.$$.fragment,f),E($h.$$.fragment,f),E(kh.$$.fragment,f),E(Kw.$$.fragment,f),E(Zw.$$.fragment,f),E(eA.$$.fragment,f),E(rA.$$.fragment,f),E(Bh.$$.fragment,f),E(tA.$$.fragment,f),E(Eu.$$.fragment,f),E(aA.$$.fragment,f),E(nA.$$.fragment,f),E(lA.$$.fragment,f),E(wu.$$.fragment,f),E(iA.$$.fragment,f),E(m_.$$.fragment,f),E(dA.$$.fragment,f),E(cA.$$.fragment,f),E(mA.$$.fragment,f),E(h_.$$.fragment,f),E(gA.$$.fragment,f),E(Y_.$$.fragment,f),E(hA.$$.fragment,f),E(pA.$$.fragment,f),E(_A.$$.fragment,f),E(Z_.$$.fragment,f),E(bA.$$.fragment,f),E(I1.$$.fragment,f),E(vA.$$.fragment,f),E(FA.$$.fragment,f),E(MA.$$.fragment,f),E(N1.$$.fragment,f),E(EA.$$.fragment,f),E(tb.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(yA.$$.fragment,f),E(nb.$$.fragment,f),E(LA.$$.fragment,f),E(e2.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(SA.$$.fragment,f),E(r2.$$.fragment,f),E(RA.$$.fragment,f),E(S2.$$.fragment,f),E(BA.$$.fragment,f),E(PA.$$.fragment,f),E(qA.$$.fragment,f),E(B2.$$.fragment,f),E(NA.$$.fragment,f),E(G2.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(OA.$$.fragment,f),E(V2.$$.fragment,f),E(VA.$$.fragment,f),E(Cv.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(Av.$$.fragment,f),E(HA.$$.fragment,f),E(gF.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(KA.$$.fragment,f),E(pF.$$.fragment,f),E(ZA.$$.fragment,f),E(bF.$$.fragment,f),E(e6.$$.fragment,f),E(o6.$$.fragment,f),E(t6.$$.fragment,f),E(FF.$$.fragment,f),E(a6.$$.fragment,f),E(RF.$$.fragment,f),E(n6.$$.fragment,f),E(s6.$$.fragment,f),E(i6.$$.fragment,f),E(PF.$$.fragment,f),E(d6.$$.fragment,f),E(NF.$$.fragment,f),E(c6.$$.fragment,f),E(f6.$$.fragment,f),E(g6.$$.fragment,f),E(DF.$$.fragment,f),E(h6.$$.fragment,f),E(JF.$$.fragment,f),E(p6.$$.fragment,f),E(u6.$$.fragment,f),E(b6.$$.fragment,f),E(KF.$$.fragment,f),E(v6.$$.fragment,f),E(a0.$$.fragment,f),E(F6.$$.fragment,f),E(T6.$$.fragment,f),E(E6.$$.fragment,f),E(s0.$$.fragment,f),E(C6.$$.fragment,f),E(u0.$$.fragment,f),E(w6.$$.fragment,f),E(A6.$$.fragment,f),E(L6.$$.fragment,f),E(b0.$$.fragment,f),E(x6.$$.fragment,f),E(M0.$$.fragment,f),E(k6.$$.fragment,f),E(S6.$$.fragment,f),E(B6.$$.fragment,f),E(C0.$$.fragment,f),E(P6.$$.fragment,f),E($0.$$.fragment,f),E(I6.$$.fragment,f),E(q6.$$.fragment,f),E(j6.$$.fragment,f),E(S0.$$.fragment,f),E(D6.$$.fragment,f),E(q0.$$.fragment,f),E(G6.$$.fragment,f),E(O6.$$.fragment,f),E(X6.$$.fragment,f),E(j0.$$.fragment,f),E(z6.$$.fragment,f),E(V0.$$.fragment,f),E(W6.$$.fragment,f),E(H6.$$.fragment,f),E(J6.$$.fragment,f),E(z0.$$.fragment,f),E(Y6.$$.fragment,f),E(H0.$$.fragment,f),E(K6.$$.fragment,f),E(Z6.$$.fragment,f),E(oy.$$.fragment,f),E(J0.$$.fragment,f),E(ry.$$.fragment,f),E(rT.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(aT.$$.fragment,f),E(ly.$$.fragment,f),E(lT.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(dT.$$.fragment,f),E(my.$$.fragment,f),E(e7.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(uy.$$.fragment,f),E(r7.$$.fragment,f),E(_y.$$.fragment,f),E(A7.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(L7.$$.fragment,f),E(My.$$.fragment,f),E(G7.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(V7.$$.fragment,f),E(yy.$$.fragment,f),E(W7.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(U7.$$.fragment,f),E(Sy.$$.fragment,f),E(u9.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(b9.$$.fragment,f),E(qy.$$.fragment,f),E(x9.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(k9.$$.fragment,f),E(Oy.$$.fragment,f),E(aM.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Qy.$$.fragment,f),E(sM.$$.fragment,f),E(Wy.$$.fragment,f),E(CM.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(AM.$$.fragment,f),E(Ky.$$.fragment,f),E(LM.$$.fragment,f),E(Zy.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E($M.$$.fragment,f),E(tL.$$.fragment,f),E(YM.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(ZM.$$.fragment,f),E(iL.$$.fragment,f),E(F4.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(M4.$$.fragment,f),E(gL.$$.fragment,f),E(C4.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(A4.$$.fragment,f),E(bL.$$.fragment,f),E(L4.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E($4.$$.fragment,f),E(EL.$$.fragment,f),E(rE.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(aE.$$.fragment,f),E(LL.$$.fragment,f),E(hE.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(uE.$$.fragment,f),E(RL.$$.fragment,f),E(xE.$$.fragment,f),E(BL.$$.fragment,f),E(PL.$$.fragment,f),E(qL.$$.fragment,f),E(kE.$$.fragment,f),E(NL.$$.fragment,f),E(OE.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(XE.$$.fragment,f),E(VL.$$.fragment,f),E(e5.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(r5.$$.fragment,f),E(HL.$$.fragment,f),E(g5.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(p5.$$.fragment,f),E(ZL.$$.fragment,f),E(A5.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(L5.$$.fragment,f),E(a8.$$.fragment,f),E(q5.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(j5.$$.fragment,f),E(d8.$$.fragment,f),E(H5.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(g8.$$.fragment,f),E(J5.$$.fragment,f),E(h8.$$.fragment,f),E(K5.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(eC.$$.fragment,f),E(v8.$$.fragment,f),E(tC.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(nC.$$.fragment,f),E(w8.$$.fragment,f),E(lC.$$.fragment,f),LIe=!0)},o(f){C(d.$$.fragment,f),C(va.$$.fragment,f),C(yw.$$.fragment,f),C(Lw.$$.fragment,f),C(df.$$.fragment,f),C(xw.$$.fragment,f),C($w.$$.fragment,f),C(Rw.$$.fragment,f),C(lg.$$.fragment,f),C(Bw.$$.fragment,f),C(Pw.$$.fragment,f),C(Iw.$$.fragment,f),C(jw.$$.fragment,f),C(jg.$$.fragment,f),C(Dw.$$.fragment,f),C(Gw.$$.fragment,f),C(Ow.$$.fragment,f),C(zw.$$.fragment,f),C(mh.$$.fragment,f),C(gh.$$.fragment,f),C(Qw.$$.fragment,f),C(Ww.$$.fragment,f),C(Hw.$$.fragment,f),C(Yw.$$.fragment,f),C($h.$$.fragment,f),C(kh.$$.fragment,f),C(Kw.$$.fragment,f),C(Zw.$$.fragment,f),C(eA.$$.fragment,f),C(rA.$$.fragment,f),C(Bh.$$.fragment,f),C(tA.$$.fragment,f),C(Eu.$$.fragment,f),C(aA.$$.fragment,f),C(nA.$$.fragment,f),C(lA.$$.fragment,f),C(wu.$$.fragment,f),C(iA.$$.fragment,f),C(m_.$$.fragment,f),C(dA.$$.fragment,f),C(cA.$$.fragment,f),C(mA.$$.fragment,f),C(h_.$$.fragment,f),C(gA.$$.fragment,f),C(Y_.$$.fragment,f),C(hA.$$.fragment,f),C(pA.$$.fragment,f),C(_A.$$.fragment,f),C(Z_.$$.fragment,f),C(bA.$$.fragment,f),C(I1.$$.fragment,f),C(vA.$$.fragment,f),C(FA.$$.fragment,f),C(MA.$$.fragment,f),C(N1.$$.fragment,f),C(EA.$$.fragment,f),C(tb.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(yA.$$.fragment,f),C(nb.$$.fragment,f),C(LA.$$.fragment,f),C(e2.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(SA.$$.fragment,f),C(r2.$$.fragment,f),C(RA.$$.fragment,f),C(S2.$$.fragment,f),C(BA.$$.fragment,f),C(PA.$$.fragment,f),C(qA.$$.fragment,f),C(B2.$$.fragment,f),C(NA.$$.fragment,f),C(G2.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(OA.$$.fragment,f),C(V2.$$.fragment,f),C(VA.$$.fragment,f),C(Cv.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(Av.$$.fragment,f),C(HA.$$.fragment,f),C(gF.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(KA.$$.fragment,f),C(pF.$$.fragment,f),C(ZA.$$.fragment,f),C(bF.$$.fragment,f),C(e6.$$.fragment,f),C(o6.$$.fragment,f),C(t6.$$.fragment,f),C(FF.$$.fragment,f),C(a6.$$.fragment,f),C(RF.$$.fragment,f),C(n6.$$.fragment,f),C(s6.$$.fragment,f),C(i6.$$.fragment,f),C(PF.$$.fragment,f),C(d6.$$.fragment,f),C(NF.$$.fragment,f),C(c6.$$.fragment,f),C(f6.$$.fragment,f),C(g6.$$.fragment,f),C(DF.$$.fragment,f),C(h6.$$.fragment,f),C(JF.$$.fragment,f),C(p6.$$.fragment,f),C(u6.$$.fragment,f),C(b6.$$.fragment,f),C(KF.$$.fragment,f),C(v6.$$.fragment,f),C(a0.$$.fragment,f),C(F6.$$.fragment,f),C(T6.$$.fragment,f),C(E6.$$.fragment,f),C(s0.$$.fragment,f),C(C6.$$.fragment,f),C(u0.$$.fragment,f),C(w6.$$.fragment,f),C(A6.$$.fragment,f),C(L6.$$.fragment,f),C(b0.$$.fragment,f),C(x6.$$.fragment,f),C(M0.$$.fragment,f),C(k6.$$.fragment,f),C(S6.$$.fragment,f),C(B6.$$.fragment,f),C(C0.$$.fragment,f),C(P6.$$.fragment,f),C($0.$$.fragment,f),C(I6.$$.fragment,f),C(q6.$$.fragment,f),C(j6.$$.fragment,f),C(S0.$$.fragment,f),C(D6.$$.fragment,f),C(q0.$$.fragment,f),C(G6.$$.fragment,f),C(O6.$$.fragment,f),C(X6.$$.fragment,f),C(j0.$$.fragment,f),C(z6.$$.fragment,f),C(V0.$$.fragment,f),C(W6.$$.fragment,f),C(H6.$$.fragment,f),C(J6.$$.fragment,f),C(z0.$$.fragment,f),C(Y6.$$.fragment,f),C(H0.$$.fragment,f),C(K6.$$.fragment,f),C(Z6.$$.fragment,f),C(oy.$$.fragment,f),C(J0.$$.fragment,f),C(ry.$$.fragment,f),C(rT.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(aT.$$.fragment,f),C(ly.$$.fragment,f),C(lT.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(dT.$$.fragment,f),C(my.$$.fragment,f),C(e7.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(uy.$$.fragment,f),C(r7.$$.fragment,f),C(_y.$$.fragment,f),C(A7.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(L7.$$.fragment,f),C(My.$$.fragment,f),C(G7.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(V7.$$.fragment,f),C(yy.$$.fragment,f),C(W7.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(U7.$$.fragment,f),C(Sy.$$.fragment,f),C(u9.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(b9.$$.fragment,f),C(qy.$$.fragment,f),C(x9.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(k9.$$.fragment,f),C(Oy.$$.fragment,f),C(aM.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Qy.$$.fragment,f),C(sM.$$.fragment,f),C(Wy.$$.fragment,f),C(CM.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(AM.$$.fragment,f),C(Ky.$$.fragment,f),C(LM.$$.fragment,f),C(Zy.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C($M.$$.fragment,f),C(tL.$$.fragment,f),C(YM.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(ZM.$$.fragment,f),C(iL.$$.fragment,f),C(F4.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(M4.$$.fragment,f),C(gL.$$.fragment,f),C(C4.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(A4.$$.fragment,f),C(bL.$$.fragment,f),C(L4.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C($4.$$.fragment,f),C(EL.$$.fragment,f),C(rE.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(aE.$$.fragment,f),C(LL.$$.fragment,f),C(hE.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(uE.$$.fragment,f),C(RL.$$.fragment,f),C(xE.$$.fragment,f),C(BL.$$.fragment,f),C(PL.$$.fragment,f),C(qL.$$.fragment,f),C(kE.$$.fragment,f),C(NL.$$.fragment,f),C(OE.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(XE.$$.fragment,f),C(VL.$$.fragment,f),C(e5.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(r5.$$.fragment,f),C(HL.$$.fragment,f),C(g5.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(p5.$$.fragment,f),C(ZL.$$.fragment,f),C(A5.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(L5.$$.fragment,f),C(a8.$$.fragment,f),C(q5.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(j5.$$.fragment,f),C(d8.$$.fragment,f),C(H5.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(g8.$$.fragment,f),C(J5.$$.fragment,f),C(h8.$$.fragment,f),C(K5.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(eC.$$.fragment,f),C(v8.$$.fragment,f),C(tC.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(nC.$$.fragment,f),C(w8.$$.fragment,f),C(lC.$$.fragment,f),LIe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(tf),f&&t(Kr),f&&t(qe),f&&t(Xe),f&&t(nf),w(va,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Fa),f&&t(yBe),f&&t(di),w(yw),f&&t(LBe),f&&t(An),f&&t(xBe),w(Lw,f),f&&t($Be),f&&t(Xx),f&&t(kBe),w(df,f),f&&t(SBe),f&&t(ci),w(xw),f&&t(RBe),f&&t(Co),w($w),w(Rw),w(lg),w(Bw),f&&t(BBe),f&&t(mi),w(Pw),f&&t(PBe),f&&t(wo),w(Iw),w(jw),w(jg),w(Dw),f&&t(IBe),f&&t(gi),w(Gw),f&&t(qBe),f&&t(Ao),w(Ow),w(zw),w(mh),w(gh),w(Qw),f&&t(NBe),f&&t(hi),w(Ww),f&&t(jBe),f&&t(yo),w(Hw),w(Yw),w($h),w(kh),w(Kw),f&&t(DBe),f&&t(ui),w(Zw),f&&t(GBe),f&&t(Lo),w(eA),w(rA),w(Bh),w(tA),w(Eu),f&&t(OBe),f&&t(vi),w(aA),f&&t(VBe),f&&t(xo),w(nA),w(lA),w(wu),w(iA),w(m_),f&&t(XBe),f&&t(Mi),w(dA),f&&t(zBe),f&&t($o),w(cA),w(mA),w(h_),w(gA),w(Y_),f&&t(QBe),f&&t(wi),w(hA),f&&t(WBe),f&&t(ko),w(pA),w(_A),w(Z_),w(bA),w(I1),f&&t(HBe),f&&t(Li),w(vA),f&&t(UBe),f&&t(So),w(FA),w(MA),w(N1),w(EA),w(tb),f&&t(JBe),f&&t(ki),w(CA),f&&t(YBe),f&&t(Ro),w(wA),w(yA),w(nb),w(LA),w(e2),f&&t(KBe),f&&t(Bi),w(xA),f&&t(ZBe),f&&t(Bo),w($A),w(SA),w(r2),w(RA),w(S2),f&&t(ePe),f&&t(qi),w(BA),f&&t(oPe),f&&t(Po),w(PA),w(qA),w(B2),w(NA),w(G2),f&&t(rPe),f&&t(Di),w(jA),f&&t(tPe),f&&t(Io),w(DA),w(OA),w(V2),w(VA),w(Cv),f&&t(aPe),f&&t(Vi),w(XA),f&&t(nPe),f&&t(qo),w(zA),w(WA),w(Av),w(HA),w(gF),f&&t(sPe),f&&t(Qi),w(UA),f&&t(lPe),f&&t(No),w(JA),w(KA),w(pF),w(ZA),w(bF),f&&t(iPe),f&&t(Ui),w(e6),f&&t(dPe),f&&t(jo),w(o6),w(t6),w(FF),w(a6),w(RF),f&&t(cPe),f&&t(Ki),w(n6),f&&t(fPe),f&&t(Do),w(s6),w(i6),w(PF),w(d6),w(NF),f&&t(mPe),f&&t(od),w(c6),f&&t(gPe),f&&t(Go),w(f6),w(g6),w(DF),w(h6),w(JF),f&&t(hPe),f&&t(ad),w(p6),f&&t(pPe),f&&t(Oo),w(u6),w(b6),w(KF),w(v6),w(a0),f&&t(uPe),f&&t(ld),w(F6),f&&t(_Pe),f&&t(Vo),w(T6),w(E6),w(s0),w(C6),w(u0),f&&t(bPe),f&&t(cd),w(w6),f&&t(vPe),f&&t(Xo),w(A6),w(L6),w(b0),w(x6),w(M0),f&&t(FPe),f&&t(gd),w(k6),f&&t(TPe),f&&t(zo),w(S6),w(B6),w(C0),w(P6),w($0),f&&t(MPe),f&&t(ud),w(I6),f&&t(EPe),f&&t(Qo),w(q6),w(j6),w(S0),w(D6),w(q0),f&&t(CPe),f&&t(Fd),w(G6),f&&t(wPe),f&&t(Wo),w(O6),w(X6),w(j0),w(z6),w(V0),f&&t(APe),f&&t(Ed),w(W6),f&&t(yPe),f&&t(Ho),w(H6),w(J6),w(z0),w(Y6),w(H0),f&&t(LPe),f&&t(Ad),w(K6),f&&t(xPe),f&&t(Uo),w(Z6),w(oy),w(J0),w(ry),w(rT),f&&t($Pe),f&&t(xd),w(ty),f&&t(kPe),f&&t(Jo),w(ay),w(sy),w(aT),w(ly),w(lT),f&&t(SPe),f&&t(Sd),w(iy),f&&t(RPe),f&&t(Yo),w(dy),w(fy),w(dT),w(my),w(e7),f&&t(BPe),f&&t(Pd),w(gy),f&&t(PPe),f&&t(Ko),w(hy),w(uy),w(r7),w(_y),w(A7),f&&t(IPe),f&&t(Nd),w(by),f&&t(qPe),f&&t(Zo),w(vy),w(Ty),w(L7),w(My),w(G7),f&&t(NPe),f&&t(Gd),w(Ey),f&&t(jPe),f&&t(er),w(Cy),w(Ay),w(V7),w(yy),w(W7),f&&t(DPe),f&&t(zd),w(Ly),f&&t(GPe),f&&t(or),w(xy),w(ky),w(U7),w(Sy),w(u9),f&&t(OPe),f&&t(Hd),w(Ry),f&&t(VPe),f&&t(rr),w(By),w(Iy),w(b9),w(qy),w(x9),f&&t(XPe),f&&t(Yd),w(Ny),f&&t(zPe),f&&t(tr),w(jy),w(Gy),w(k9),w(Oy),w(aM),f&&t(QPe),f&&t(ec),w(Vy),f&&t(WPe),f&&t(ar),w(Xy),w(Qy),w(sM),w(Wy),w(CM),f&&t(HPe),f&&t(tc),w(Hy),f&&t(UPe),f&&t(nr),w(Uy),w(Yy),w(AM),w(Ky),w(LM),f&&t(JPe),f&&t(sc),w(Zy),f&&t(YPe),f&&t(sr),w(eL),w(rL),w($M),w(tL),w(YM),f&&t(KPe),f&&t(dc),w(aL),f&&t(ZPe),f&&t(lr),w(nL),w(lL),w(ZM),w(iL),w(F4),f&&t(eIe),f&&t(mc),w(dL),f&&t(oIe),f&&t(ir),w(cL),w(mL),w(M4),w(gL),w(C4),f&&t(rIe),f&&t(pc),w(hL),f&&t(tIe),f&&t(dr),w(pL),w(_L),w(A4),w(bL),w(L4),f&&t(aIe),f&&t(bc),w(vL),f&&t(nIe),f&&t(cr),w(FL),w(ML),w($4),w(EL),w(rE),f&&t(sIe),f&&t(Tc),w(CL),f&&t(lIe),f&&t(fr),w(wL),w(yL),w(aE),w(LL),w(hE),f&&t(iIe),f&&t(Cc),w(xL),f&&t(dIe),f&&t(mr),w($L),w(SL),w(uE),w(RL),w(xE),f&&t(cIe),f&&t(yc),w(BL),f&&t(fIe),f&&t(gr),w(PL),w(qL),w(kE),w(NL),w(OE),f&&t(mIe),f&&t($c),w(jL),f&&t(gIe),f&&t(hr),w(DL),w(OL),w(XE),w(VL),w(e5),f&&t(hIe),f&&t(Rc),w(XL),f&&t(pIe),f&&t(pr),w(zL),w(WL),w(r5),w(HL),w(g5),f&&t(uIe),f&&t(Ic),w(UL),f&&t(_Ie),f&&t(ur),w(JL),w(KL),w(p5),w(ZL),w(A5),f&&t(bIe),f&&t(jc),w(e8),f&&t(vIe),f&&t(_r),w(o8),w(t8),w(L5),w(a8),w(q5),f&&t(FIe),f&&t(Oc),w(n8),f&&t(TIe),f&&t(br),w(s8),w(i8),w(j5),w(d8),w(H5),f&&t(MIe),f&&t(zc),w(c8),f&&t(EIe),f&&t(vr),w(f8),w(g8),w(J5),w(h8),w(K5),f&&t(CIe),f&&t(Hc),w(p8),f&&t(wIe),f&&t(Fr),w(u8),w(b8),w(eC),w(v8),w(tC),f&&t(AIe),f&&t(Yc),w(T8),f&&t(yIe),f&&t(Tr),w(M8),w(C8),w(nC),w(w8),w(lC)}}}const V3t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function X3t(L){return Q5t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Y3t extends O5t{constructor(g){super();V5t(this,g,X3t,O3t,X5t,{})}}export{Y3t as default,V3t as metadata};
