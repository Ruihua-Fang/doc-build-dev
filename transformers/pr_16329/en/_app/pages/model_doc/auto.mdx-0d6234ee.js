import{S as LMt,i as BMt,s as xMt,e as a,k as l,w as f,t as o,M as kMt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as RMt}from"../../chunks/vendor-6b77c823.js";import{T as uRr}from"../../chunks/Tip-39098574.js";import{D as M}from"../../chunks/Docstring-abef54e3.js";import{C as w}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as V}from"../../chunks/IconCopyLink-7a11ce68.js";function SMt(If){let Z,io,de,Ee,lo,me,Ce,Vo,Ii,Df,fa,Di,Ni,gE,Nf,Be,co,ji,Gn,hE,On,Xn,pE,qi,Vn,_E,Gi,jf,qa;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ee=o("NewModelConfig"),lo=o(" is a subclass of "),me=a("code"),Ce=o("PretrainedConfig"),Vo=o(`, make sure its
`),Ii=a("code"),Df=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Di=a("code"),Ni=o('"new-model"'),gE=o(")."),Nf=l(),Be=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),hE=o(" is a subclass of "),On=a("a"),Xn=o("PreTrainedModel"),pE=o(`, make sure its
`),qi=a("code"),Vn=o("config_class"),_E=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jf=o("NewModelConfig"),qa=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var _e=s(Z);io=r(_e,"If your "),de=n(_e,"CODE",{});var n8=s(de);Ee=r(n8,"NewModelConfig"),n8.forEach(t),lo=r(_e," is a subclass of "),me=n(_e,"CODE",{});var Oi=s(me);Ce=r(Oi,"PretrainedConfig"),Oi.forEach(t),Vo=r(_e,`, make sure its
`),Ii=n(_e,"CODE",{});var s8=s(Ii);Df=r(s8,"model_type"),s8.forEach(t),fa=r(_e," attribute is set to the same key you use when registering the config (here "),Di=n(_e,"CODE",{});var l8=s(Di);Ni=r(l8,'"new-model"'),l8.forEach(t),gE=r(_e,")."),_e.forEach(t),Nf=i(fo),Be=n(fo,"P",{});var zo=s(Be);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),hE=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var i8=s(On);Xn=r(i8,"PreTrainedModel"),i8.forEach(t),pE=r(zo,`, make sure its
`),qi=n(zo,"CODE",{});var qf=s(qi);Vn=r(qf,"config_class"),qf.forEach(t),_E=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var d8=s(Gi);jf=r(d8,"NewModelConfig"),d8.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,Z,_e),e(Z,io),e(Z,de),e(de,Ee),e(Z,lo),e(Z,me),e(me,Ce),e(Z,Vo),e(Z,Ii),e(Ii,Df),e(Z,fa),e(Z,Di),e(Di,Ni),e(Z,gE),b(fo,Nf,_e),b(fo,Be,_e),e(Be,co),e(Be,ji),e(ji,Gn),e(Be,hE),e(Be,On),e(On,Xn),e(Be,pE),e(Be,qi),e(qi,Vn),e(Be,_E),e(Be,Gi),e(Gi,jf),e(Be,qa)},d(fo){fo&&t(Z),fo&&t(Nf),fo&&t(Be)}}}function PMt(If){let Z,io,de,Ee,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Ce=s(Z);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(me,Ce){b(me,Z,Ce),e(Z,io),e(Z,de),e(de,Ee),e(Z,lo)},d(me){me&&t(Z)}}}function $Mt(If){let Z,io,de,Ee,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Ce=s(Z);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(me,Ce){b(me,Z,Ce),e(Z,io),e(Z,de),e(de,Ee),e(Z,lo)},d(me){me&&t(Z)}}}function IMt(If){let Z,io,de,Ee,lo,me,Ce,Vo,Ii,Df,fa,Di,Ni,gE,Nf,Be,co,ji,Gn,hE,On,Xn,pE,qi,Vn,_E,Gi,jf,qa,fo,_e,n8,Oi,s8,l8,zo,Ga,i8,qf,d8,O$e,Bke,Xi,Gf,ZQ,uE,X$e,eH,V$e,xke,zn,z$e,oH,W$e,Q$e,rH,H$e,U$e,kke,bE,Rke,c8,J$e,Ske,Of,Pke,Vi,Xf,tH,vE,Y$e,aH,K$e,$ke,Wo,TE,Z$e,FE,eIe,f8,oIe,rIe,tIe,CE,aIe,nH,nIe,sIe,lIe,mo,ME,iIe,sH,dIe,cIe,zi,fIe,lH,mIe,gIe,iH,hIe,pIe,_Ie,v,Vf,dH,uIe,bIe,m8,vIe,TIe,FIe,zf,cH,CIe,MIe,g8,EIe,yIe,wIe,Wf,fH,AIe,LIe,h8,BIe,xIe,kIe,Qf,mH,RIe,SIe,p8,PIe,$Ie,IIe,Hf,gH,DIe,NIe,_8,jIe,qIe,GIe,Uf,hH,OIe,XIe,u8,VIe,zIe,WIe,Jf,pH,QIe,HIe,b8,UIe,JIe,YIe,Yf,_H,KIe,ZIe,v8,eDe,oDe,rDe,Kf,uH,tDe,aDe,T8,nDe,sDe,lDe,Zf,bH,iDe,dDe,F8,cDe,fDe,mDe,em,vH,gDe,hDe,C8,pDe,_De,uDe,om,TH,bDe,vDe,M8,TDe,FDe,CDe,rm,FH,MDe,EDe,E8,yDe,wDe,ADe,tm,CH,LDe,BDe,y8,xDe,kDe,RDe,am,MH,SDe,PDe,w8,$De,IDe,DDe,nm,EH,NDe,jDe,A8,qDe,GDe,ODe,sm,yH,XDe,VDe,L8,zDe,WDe,QDe,lm,wH,HDe,UDe,B8,JDe,YDe,KDe,im,AH,ZDe,eNe,x8,oNe,rNe,tNe,dm,LH,aNe,nNe,k8,sNe,lNe,iNe,cm,BH,dNe,cNe,R8,fNe,mNe,gNe,fm,xH,hNe,pNe,S8,_Ne,uNe,bNe,mm,kH,vNe,TNe,P8,FNe,CNe,MNe,gm,RH,ENe,yNe,$8,wNe,ANe,LNe,hm,SH,BNe,xNe,I8,kNe,RNe,SNe,pm,PH,PNe,$Ne,D8,INe,DNe,NNe,_m,$H,jNe,qNe,N8,GNe,ONe,XNe,um,IH,VNe,zNe,j8,WNe,QNe,HNe,bm,DH,UNe,JNe,q8,YNe,KNe,ZNe,vm,NH,eje,oje,G8,rje,tje,aje,Tm,jH,nje,sje,O8,lje,ije,dje,Fm,qH,cje,fje,X8,mje,gje,hje,Cm,GH,pje,_je,V8,uje,bje,vje,Mm,OH,Tje,Fje,z8,Cje,Mje,Eje,Em,XH,yje,wje,W8,Aje,Lje,Bje,ym,VH,xje,kje,Q8,Rje,Sje,Pje,wm,zH,$je,Ije,H8,Dje,Nje,jje,Am,WH,qje,Gje,U8,Oje,Xje,Vje,Lm,QH,zje,Wje,J8,Qje,Hje,Uje,Bm,HH,Jje,Yje,Y8,Kje,Zje,eqe,xm,UH,oqe,rqe,K8,tqe,aqe,nqe,km,JH,sqe,lqe,Z8,iqe,dqe,cqe,Rm,YH,fqe,mqe,eB,gqe,hqe,pqe,Sm,KH,_qe,uqe,oB,bqe,vqe,Tqe,Pm,ZH,Fqe,Cqe,rB,Mqe,Eqe,yqe,$m,eU,wqe,Aqe,tB,Lqe,Bqe,xqe,Im,oU,kqe,Rqe,aB,Sqe,Pqe,$qe,Dm,rU,Iqe,Dqe,nB,Nqe,jqe,qqe,Nm,tU,Gqe,Oqe,sB,Xqe,Vqe,zqe,jm,aU,Wqe,Qqe,lB,Hqe,Uqe,Jqe,qm,nU,Yqe,Kqe,iB,Zqe,eGe,oGe,Gm,sU,rGe,tGe,dB,aGe,nGe,sGe,Om,lU,lGe,iGe,cB,dGe,cGe,fGe,Xm,iU,mGe,gGe,fB,hGe,pGe,_Ge,Vm,dU,uGe,bGe,mB,vGe,TGe,FGe,zm,cU,CGe,MGe,gB,EGe,yGe,wGe,Wm,fU,AGe,LGe,hB,BGe,xGe,kGe,Qm,mU,RGe,SGe,pB,PGe,$Ge,IGe,Hm,gU,DGe,NGe,_B,jGe,qGe,GGe,Um,hU,OGe,XGe,uB,VGe,zGe,WGe,Jm,pU,QGe,HGe,bB,UGe,JGe,YGe,Ym,_U,KGe,ZGe,vB,eOe,oOe,rOe,Km,uU,tOe,aOe,TB,nOe,sOe,lOe,Zm,bU,iOe,dOe,FB,cOe,fOe,mOe,eg,vU,gOe,hOe,CB,pOe,_Oe,uOe,og,TU,bOe,vOe,MB,TOe,FOe,COe,rg,FU,MOe,EOe,EB,yOe,wOe,AOe,tg,CU,LOe,BOe,yB,xOe,kOe,ROe,ag,MU,SOe,POe,wB,$Oe,IOe,DOe,ng,EU,NOe,jOe,AB,qOe,GOe,OOe,sg,yU,XOe,VOe,LB,zOe,WOe,QOe,lg,wU,HOe,UOe,BB,JOe,YOe,KOe,ig,AU,ZOe,eXe,xB,oXe,rXe,tXe,dg,LU,aXe,nXe,kB,sXe,lXe,iXe,cg,BU,dXe,cXe,RB,fXe,mXe,gXe,fg,xU,hXe,pXe,SB,_Xe,uXe,bXe,mg,kU,vXe,TXe,PB,FXe,CXe,MXe,gg,RU,EXe,yXe,$B,wXe,AXe,LXe,hg,SU,BXe,xXe,IB,kXe,RXe,SXe,pg,PU,PXe,$Xe,DB,IXe,DXe,NXe,_g,$U,jXe,qXe,NB,GXe,OXe,XXe,ug,IU,VXe,zXe,jB,WXe,QXe,HXe,bg,DU,UXe,JXe,qB,YXe,KXe,ZXe,vg,NU,eVe,oVe,GB,rVe,tVe,aVe,Tg,jU,nVe,sVe,OB,lVe,iVe,dVe,Fg,qU,cVe,fVe,XB,mVe,gVe,hVe,Cg,GU,pVe,_Ve,VB,uVe,bVe,vVe,Mg,OU,TVe,FVe,zB,CVe,MVe,EVe,Eg,XU,yVe,wVe,WB,AVe,LVe,BVe,yg,VU,xVe,kVe,QB,RVe,SVe,PVe,wg,zU,$Ve,IVe,HB,DVe,NVe,jVe,Ag,WU,qVe,GVe,UB,OVe,XVe,VVe,Lg,QU,zVe,WVe,JB,QVe,HVe,UVe,Bg,HU,JVe,YVe,YB,KVe,ZVe,eze,xg,UU,oze,rze,KB,tze,aze,nze,kg,JU,sze,lze,ZB,ize,dze,cze,Rg,YU,fze,mze,ex,gze,hze,pze,Sg,KU,_ze,uze,ox,bze,vze,Tze,Pg,ZU,Fze,Cze,rx,Mze,Eze,yze,eJ,wze,Aze,EE,Lze,$g,yE,Bze,oJ,xze,Ike,Wi,Ig,rJ,wE,kze,tJ,Rze,Dke,Qo,AE,Sze,LE,Pze,tx,$ze,Ize,Dze,BE,Nze,aJ,jze,qze,Gze,go,xE,Oze,nJ,Xze,Vze,Oa,zze,sJ,Wze,Qze,lJ,Hze,Uze,iJ,Jze,Yze,Kze,E,Wn,dJ,Zze,eWe,ax,oWe,rWe,nx,tWe,aWe,nWe,Qn,cJ,sWe,lWe,sx,iWe,dWe,lx,cWe,fWe,mWe,Hn,fJ,gWe,hWe,ix,pWe,_We,dx,uWe,bWe,vWe,Dg,mJ,TWe,FWe,cx,CWe,MWe,EWe,Un,gJ,yWe,wWe,fx,AWe,LWe,mx,BWe,xWe,kWe,Ng,hJ,RWe,SWe,gx,PWe,$We,IWe,jg,pJ,DWe,NWe,hx,jWe,qWe,GWe,qg,_J,OWe,XWe,px,VWe,zWe,WWe,Jn,uJ,QWe,HWe,_x,UWe,JWe,ux,YWe,KWe,ZWe,Yn,bJ,eQe,oQe,bx,rQe,tQe,vx,aQe,nQe,sQe,Kn,vJ,lQe,iQe,Tx,dQe,cQe,Fx,fQe,mQe,gQe,Gg,TJ,hQe,pQe,Cx,_Qe,uQe,bQe,Og,FJ,vQe,TQe,Mx,FQe,CQe,MQe,Zn,CJ,EQe,yQe,Ex,wQe,AQe,yx,LQe,BQe,xQe,Xg,MJ,kQe,RQe,wx,SQe,PQe,$Qe,es,EJ,IQe,DQe,Ax,NQe,jQe,Lx,qQe,GQe,OQe,os,yJ,XQe,VQe,Bx,zQe,WQe,xx,QQe,HQe,UQe,rs,wJ,JQe,YQe,kx,KQe,ZQe,AJ,eHe,oHe,rHe,Vg,LJ,tHe,aHe,Rx,nHe,sHe,lHe,ts,BJ,iHe,dHe,Sx,cHe,fHe,Px,mHe,gHe,hHe,zg,xJ,pHe,_He,$x,uHe,bHe,vHe,as,kJ,THe,FHe,Ix,CHe,MHe,Dx,EHe,yHe,wHe,ns,RJ,AHe,LHe,Nx,BHe,xHe,jx,kHe,RHe,SHe,ss,SJ,PHe,$He,qx,IHe,DHe,Gx,NHe,jHe,qHe,Wg,PJ,GHe,OHe,Ox,XHe,VHe,zHe,ls,$J,WHe,QHe,Xx,HHe,UHe,Vx,JHe,YHe,KHe,Qg,IJ,ZHe,eUe,zx,oUe,rUe,tUe,is,DJ,aUe,nUe,Wx,sUe,lUe,Qx,iUe,dUe,cUe,ds,NJ,fUe,mUe,Hx,gUe,hUe,Ux,pUe,_Ue,uUe,cs,jJ,bUe,vUe,Jx,TUe,FUe,Yx,CUe,MUe,EUe,fs,qJ,yUe,wUe,Kx,AUe,LUe,Zx,BUe,xUe,kUe,Hg,GJ,RUe,SUe,ek,PUe,$Ue,IUe,ms,OJ,DUe,NUe,ok,jUe,qUe,rk,GUe,OUe,XUe,gs,XJ,VUe,zUe,tk,WUe,QUe,ak,HUe,UUe,JUe,hs,VJ,YUe,KUe,nk,ZUe,eJe,sk,oJe,rJe,tJe,ps,zJ,aJe,nJe,lk,sJe,lJe,ik,iJe,dJe,cJe,_s,WJ,fJe,mJe,dk,gJe,hJe,ck,pJe,_Je,uJe,us,QJ,bJe,vJe,fk,TJe,FJe,mk,CJe,MJe,EJe,Ug,HJ,yJe,wJe,gk,AJe,LJe,BJe,bs,UJ,xJe,kJe,hk,RJe,SJe,pk,PJe,$Je,IJe,Jg,JJ,DJe,NJe,_k,jJe,qJe,GJe,Yg,YJ,OJe,XJe,uk,VJe,zJe,WJe,vs,KJ,QJe,HJe,bk,UJe,JJe,vk,YJe,KJe,ZJe,Ts,ZJ,eYe,oYe,Tk,rYe,tYe,Fk,aYe,nYe,sYe,Kg,eY,lYe,iYe,Ck,dYe,cYe,fYe,Fs,oY,mYe,gYe,Mk,hYe,pYe,Ek,_Ye,uYe,bYe,Cs,rY,vYe,TYe,yk,FYe,CYe,wk,MYe,EYe,yYe,Ms,tY,wYe,AYe,Ak,LYe,BYe,Lk,xYe,kYe,RYe,Es,aY,SYe,PYe,Bk,$Ye,IYe,xk,DYe,NYe,jYe,ys,nY,qYe,GYe,kk,OYe,XYe,Rk,VYe,zYe,WYe,Zg,sY,QYe,HYe,Sk,UYe,JYe,YYe,eh,lY,KYe,ZYe,Pk,eKe,oKe,rKe,oh,iY,tKe,aKe,$k,nKe,sKe,lKe,rh,dY,iKe,dKe,Ik,cKe,fKe,mKe,ws,cY,gKe,hKe,Dk,pKe,_Ke,Nk,uKe,bKe,vKe,th,fY,TKe,FKe,jk,CKe,MKe,EKe,As,mY,yKe,wKe,qk,AKe,LKe,Gk,BKe,xKe,kKe,Ls,gY,RKe,SKe,Ok,PKe,$Ke,Xk,IKe,DKe,NKe,Bs,hY,jKe,qKe,Vk,GKe,OKe,zk,XKe,VKe,zKe,xs,pY,WKe,QKe,Wk,HKe,UKe,Qk,JKe,YKe,KKe,ks,_Y,ZKe,eZe,Hk,oZe,rZe,Uk,tZe,aZe,nZe,Rs,uY,sZe,lZe,Jk,iZe,dZe,Yk,cZe,fZe,mZe,ah,bY,gZe,hZe,Kk,pZe,_Ze,uZe,nh,vY,bZe,vZe,Zk,TZe,FZe,CZe,Ss,TY,MZe,EZe,eR,yZe,wZe,oR,AZe,LZe,BZe,Ps,FY,xZe,kZe,rR,RZe,SZe,tR,PZe,$Ze,IZe,$s,CY,DZe,NZe,aR,jZe,qZe,nR,GZe,OZe,XZe,sh,MY,VZe,zZe,sR,WZe,QZe,HZe,lh,EY,UZe,JZe,lR,YZe,KZe,ZZe,ih,yY,eeo,oeo,iR,reo,teo,aeo,dh,wY,neo,seo,dR,leo,ieo,deo,Is,AY,ceo,feo,cR,meo,geo,fR,heo,peo,_eo,ch,LY,ueo,beo,mR,veo,Teo,Feo,fh,BY,Ceo,Meo,gR,Eeo,yeo,weo,Ds,xY,Aeo,Leo,hR,Beo,xeo,pR,keo,Reo,Seo,Ns,kY,Peo,$eo,_R,Ieo,Deo,uR,Neo,jeo,qeo,RY,Geo,Oeo,kE,Xeo,mh,RE,Veo,SY,zeo,Nke,Qi,gh,PY,SE,Weo,$Y,Qeo,jke,Ho,PE,Heo,$E,Ueo,bR,Jeo,Yeo,Keo,IE,Zeo,IY,eoo,ooo,roo,$e,DE,too,DY,aoo,noo,Xa,soo,NY,loo,ioo,jY,doo,coo,qY,foo,moo,goo,te,hh,GY,hoo,poo,vR,_oo,uoo,boo,ph,OY,voo,Too,TR,Foo,Coo,Moo,_h,XY,Eoo,yoo,FR,woo,Aoo,Loo,uh,VY,Boo,xoo,CR,koo,Roo,Soo,bh,zY,Poo,$oo,MR,Ioo,Doo,Noo,vh,WY,joo,qoo,ER,Goo,Ooo,Xoo,Th,QY,Voo,zoo,yR,Woo,Qoo,Hoo,Fh,HY,Uoo,Joo,wR,Yoo,Koo,Zoo,Ch,UY,ero,oro,AR,rro,tro,aro,Mh,JY,nro,sro,LR,lro,iro,dro,Eh,YY,cro,fro,BR,mro,gro,hro,yh,KY,pro,_ro,xR,uro,bro,vro,wh,ZY,Tro,Fro,kR,Cro,Mro,Ero,Ah,eK,yro,wro,RR,Aro,Lro,Bro,Lh,oK,xro,kro,SR,Rro,Sro,Pro,Bh,rK,$ro,Iro,PR,Dro,Nro,jro,xh,tK,qro,Gro,$R,Oro,Xro,Vro,kh,aK,zro,Wro,IR,Qro,Hro,Uro,Rh,Jro,nK,Yro,Kro,NE,Zro,Sh,jE,eto,sK,oto,qke,Hi,Ph,lK,qE,rto,iK,tto,Gke,Uo,GE,ato,OE,nto,DR,sto,lto,ito,XE,dto,dK,cto,fto,mto,Ie,VE,gto,cK,hto,pto,Ui,_to,fK,uto,bto,mK,vto,Tto,Fto,xe,$h,gK,Cto,Mto,NR,Eto,yto,wto,Ih,hK,Ato,Lto,jR,Bto,xto,kto,Dh,pK,Rto,Sto,qR,Pto,$to,Ito,Nh,_K,Dto,Nto,GR,jto,qto,Gto,jh,uK,Oto,Xto,OR,Vto,zto,Wto,qh,bK,Qto,Hto,XR,Uto,Jto,Yto,Gh,vK,Kto,Zto,VR,eao,oao,rao,Oh,TK,tao,aao,zR,nao,sao,lao,Xh,iao,FK,dao,cao,zE,fao,Vh,WE,mao,CK,gao,Oke,Ji,zh,MK,QE,hao,EK,pao,Xke,Jo,HE,_ao,Yi,uao,yK,bao,vao,wK,Tao,Fao,Cao,UE,Mao,AK,Eao,yao,wao,Vr,JE,Aao,LK,Lao,Bao,Ki,xao,BK,kao,Rao,xK,Sao,Pao,$ao,kK,Iao,Dao,YE,Nao,De,KE,jao,RK,qao,Gao,Va,Oao,SK,Xao,Vao,PK,zao,Wao,$K,Qao,Hao,Uao,F,Wh,IK,Jao,Yao,WR,Kao,Zao,eno,Qh,DK,ono,rno,QR,tno,ano,nno,Hh,NK,sno,lno,HR,ino,dno,cno,Uh,jK,fno,mno,UR,gno,hno,pno,Jh,qK,_no,uno,JR,bno,vno,Tno,Yh,GK,Fno,Cno,YR,Mno,Eno,yno,Kh,OK,wno,Ano,KR,Lno,Bno,xno,Zh,XK,kno,Rno,ZR,Sno,Pno,$no,ep,VK,Ino,Dno,eS,Nno,jno,qno,op,zK,Gno,Ono,oS,Xno,Vno,zno,rp,WK,Wno,Qno,rS,Hno,Uno,Jno,tp,QK,Yno,Kno,tS,Zno,eso,oso,ap,HK,rso,tso,aS,aso,nso,sso,np,UK,lso,iso,nS,dso,cso,fso,sp,JK,mso,gso,sS,hso,pso,_so,lp,YK,uso,bso,lS,vso,Tso,Fso,ip,KK,Cso,Mso,iS,Eso,yso,wso,dp,ZK,Aso,Lso,dS,Bso,xso,kso,cp,eZ,Rso,Sso,cS,Pso,$so,Iso,fp,oZ,Dso,Nso,fS,jso,qso,Gso,mp,rZ,Oso,Xso,mS,Vso,zso,Wso,gp,tZ,Qso,Hso,gS,Uso,Jso,Yso,hp,aZ,Kso,Zso,hS,elo,olo,rlo,pp,nZ,tlo,alo,pS,nlo,slo,llo,_p,sZ,ilo,dlo,_S,clo,flo,mlo,up,lZ,glo,hlo,uS,plo,_lo,ulo,bp,iZ,blo,vlo,bS,Tlo,Flo,Clo,vp,dZ,Mlo,Elo,vS,ylo,wlo,Alo,Tp,cZ,Llo,Blo,TS,xlo,klo,Rlo,js,fZ,Slo,Plo,FS,$lo,Ilo,CS,Dlo,Nlo,jlo,Fp,mZ,qlo,Glo,MS,Olo,Xlo,Vlo,Cp,gZ,zlo,Wlo,ES,Qlo,Hlo,Ulo,Mp,hZ,Jlo,Ylo,yS,Klo,Zlo,eio,Ep,pZ,oio,rio,wS,tio,aio,nio,yp,_Z,sio,lio,AS,iio,dio,cio,wp,uZ,fio,mio,LS,gio,hio,pio,Ap,bZ,_io,uio,BS,bio,vio,Tio,Lp,vZ,Fio,Cio,xS,Mio,Eio,yio,Bp,TZ,wio,Aio,kS,Lio,Bio,xio,xp,FZ,kio,Rio,RS,Sio,Pio,$io,kp,CZ,Iio,Dio,SS,Nio,jio,qio,Rp,MZ,Gio,Oio,PS,Xio,Vio,zio,Sp,EZ,Wio,Qio,$S,Hio,Uio,Jio,Pp,yZ,Yio,Kio,IS,Zio,edo,odo,$p,wZ,rdo,tdo,DS,ado,ndo,sdo,Ip,AZ,ldo,ido,NS,ddo,cdo,fdo,Dp,LZ,mdo,gdo,jS,hdo,pdo,_do,Np,BZ,udo,bdo,qS,vdo,Tdo,Fdo,jp,xZ,Cdo,Mdo,GS,Edo,ydo,wdo,qp,kZ,Ado,Ldo,OS,Bdo,xdo,kdo,Gp,RZ,Rdo,Sdo,XS,Pdo,$do,Ido,Op,SZ,Ddo,Ndo,VS,jdo,qdo,Gdo,Xp,PZ,Odo,Xdo,zS,Vdo,zdo,Wdo,Vp,$Z,Qdo,Hdo,WS,Udo,Jdo,Ydo,zp,IZ,Kdo,Zdo,QS,eco,oco,rco,Wp,DZ,tco,aco,HS,nco,sco,lco,Qp,NZ,ico,dco,US,cco,fco,mco,Hp,jZ,gco,hco,JS,pco,_co,uco,Up,qZ,bco,vco,YS,Tco,Fco,Cco,Jp,GZ,Mco,Eco,KS,yco,wco,Aco,Yp,OZ,Lco,Bco,ZS,xco,kco,Rco,Kp,XZ,Sco,Pco,eP,$co,Ico,Dco,Zp,VZ,Nco,jco,oP,qco,Gco,Oco,e_,zZ,Xco,Vco,rP,zco,Wco,Qco,o_,WZ,Hco,Uco,tP,Jco,Yco,Kco,r_,QZ,Zco,efo,aP,ofo,rfo,tfo,t_,HZ,afo,nfo,nP,sfo,lfo,ifo,a_,UZ,dfo,cfo,sP,ffo,mfo,gfo,n_,JZ,hfo,pfo,lP,_fo,ufo,bfo,s_,YZ,vfo,Tfo,iP,Ffo,Cfo,Mfo,l_,KZ,Efo,yfo,dP,wfo,Afo,Lfo,i_,ZZ,Bfo,xfo,cP,kfo,Rfo,Sfo,d_,eee,Pfo,$fo,fP,Ifo,Dfo,Nfo,c_,oee,jfo,qfo,mP,Gfo,Ofo,Xfo,f_,ree,Vfo,zfo,gP,Wfo,Qfo,Hfo,m_,tee,Ufo,Jfo,hP,Yfo,Kfo,Zfo,g_,aee,emo,omo,pP,rmo,tmo,amo,h_,nee,nmo,smo,_P,lmo,imo,dmo,p_,see,cmo,fmo,uP,mmo,gmo,hmo,__,lee,pmo,_mo,bP,umo,bmo,vmo,u_,iee,Tmo,Fmo,vP,Cmo,Mmo,Emo,b_,dee,ymo,wmo,TP,Amo,Lmo,Bmo,v_,cee,xmo,kmo,FP,Rmo,Smo,Pmo,T_,fee,$mo,Imo,CP,Dmo,Nmo,jmo,F_,mee,qmo,Gmo,MP,Omo,Xmo,Vmo,C_,gee,zmo,Wmo,EP,Qmo,Hmo,Umo,M_,hee,Jmo,Ymo,yP,Kmo,Zmo,ego,E_,pee,ogo,rgo,wP,tgo,ago,ngo,y_,_ee,sgo,lgo,AP,igo,dgo,cgo,w_,uee,fgo,mgo,LP,ggo,hgo,pgo,A_,bee,_go,ugo,BP,bgo,vgo,Tgo,L_,vee,Fgo,Cgo,xP,Mgo,Ego,ygo,B_,wgo,Tee,Ago,Lgo,Fee,Bgo,xgo,Cee,kgo,Rgo,ZE,Vke,Zi,x_,Mee,e5,Sgo,Eee,Pgo,zke,Yo,o5,$go,ed,Igo,yee,Dgo,Ngo,wee,jgo,qgo,Ggo,r5,Ogo,Aee,Xgo,Vgo,zgo,zr,t5,Wgo,Lee,Qgo,Hgo,od,Ugo,Bee,Jgo,Ygo,xee,Kgo,Zgo,eho,kee,oho,rho,a5,tho,Ne,n5,aho,Ree,nho,sho,za,lho,See,iho,dho,Pee,cho,fho,$ee,mho,gho,hho,k,k_,Iee,pho,_ho,kP,uho,bho,vho,R_,Dee,Tho,Fho,RP,Cho,Mho,Eho,S_,Nee,yho,who,SP,Aho,Lho,Bho,P_,jee,xho,kho,PP,Rho,Sho,Pho,$_,qee,$ho,Iho,$P,Dho,Nho,jho,I_,Gee,qho,Gho,IP,Oho,Xho,Vho,D_,Oee,zho,Who,DP,Qho,Hho,Uho,N_,Xee,Jho,Yho,NP,Kho,Zho,epo,j_,Vee,opo,rpo,jP,tpo,apo,npo,q_,zee,spo,lpo,qP,ipo,dpo,cpo,G_,Wee,fpo,mpo,GP,gpo,hpo,ppo,O_,Qee,_po,upo,OP,bpo,vpo,Tpo,X_,Hee,Fpo,Cpo,XP,Mpo,Epo,ypo,V_,Uee,wpo,Apo,VP,Lpo,Bpo,xpo,z_,Jee,kpo,Rpo,zP,Spo,Ppo,$po,W_,Yee,Ipo,Dpo,WP,Npo,jpo,qpo,Q_,Kee,Gpo,Opo,QP,Xpo,Vpo,zpo,H_,Zee,Wpo,Qpo,HP,Hpo,Upo,Jpo,U_,eoe,Ypo,Kpo,UP,Zpo,e_o,o_o,J_,ooe,r_o,t_o,JP,a_o,n_o,s_o,Y_,roe,l_o,i_o,YP,d_o,c_o,f_o,K_,toe,m_o,g_o,KP,h_o,p_o,__o,Z_,aoe,u_o,b_o,ZP,v_o,T_o,F_o,eu,noe,C_o,M_o,e$,E_o,y_o,w_o,ou,soe,A_o,L_o,o$,B_o,x_o,k_o,ru,loe,R_o,S_o,r$,P_o,$_o,I_o,tu,ioe,D_o,N_o,t$,j_o,q_o,G_o,au,doe,O_o,X_o,a$,V_o,z_o,W_o,nu,coe,Q_o,H_o,n$,U_o,J_o,Y_o,su,foe,K_o,Z_o,s$,euo,ouo,ruo,lu,moe,tuo,auo,l$,nuo,suo,luo,iu,goe,iuo,duo,i$,cuo,fuo,muo,du,hoe,guo,huo,d$,puo,_uo,uuo,cu,poe,buo,vuo,c$,Tuo,Fuo,Cuo,fu,_oe,Muo,Euo,f$,yuo,wuo,Auo,mu,uoe,Luo,Buo,m$,xuo,kuo,Ruo,gu,boe,Suo,Puo,g$,$uo,Iuo,Duo,hu,voe,Nuo,juo,h$,quo,Guo,Ouo,pu,Toe,Xuo,Vuo,p$,zuo,Wuo,Quo,_u,Huo,Foe,Uuo,Juo,Coe,Yuo,Kuo,Moe,Zuo,e2o,s5,Wke,rd,uu,Eoe,l5,o2o,yoe,r2o,Qke,Ko,i5,t2o,td,a2o,woe,n2o,s2o,Aoe,l2o,i2o,d2o,d5,c2o,Loe,f2o,m2o,g2o,Wr,c5,h2o,Boe,p2o,_2o,ad,u2o,xoe,b2o,v2o,koe,T2o,F2o,C2o,Roe,M2o,E2o,f5,y2o,je,m5,w2o,Soe,A2o,L2o,Wa,B2o,Poe,x2o,k2o,$oe,R2o,S2o,Ioe,P2o,$2o,I2o,$,bu,Doe,D2o,N2o,_$,j2o,q2o,G2o,vu,Noe,O2o,X2o,u$,V2o,z2o,W2o,Tu,joe,Q2o,H2o,b$,U2o,J2o,Y2o,Fu,qoe,K2o,Z2o,v$,e1o,o1o,r1o,Cu,Goe,t1o,a1o,T$,n1o,s1o,l1o,Mu,Ooe,i1o,d1o,F$,c1o,f1o,m1o,Eu,Xoe,g1o,h1o,C$,p1o,_1o,u1o,yu,Voe,b1o,v1o,M$,T1o,F1o,C1o,wu,zoe,M1o,E1o,E$,y1o,w1o,A1o,Au,Woe,L1o,B1o,y$,x1o,k1o,R1o,Lu,Qoe,S1o,P1o,w$,$1o,I1o,D1o,Bu,Hoe,N1o,j1o,A$,q1o,G1o,O1o,xu,Uoe,X1o,V1o,L$,z1o,W1o,Q1o,ku,Joe,H1o,U1o,B$,J1o,Y1o,K1o,Ru,Yoe,Z1o,ebo,x$,obo,rbo,tbo,Su,Koe,abo,nbo,k$,sbo,lbo,ibo,Pu,Zoe,dbo,cbo,R$,fbo,mbo,gbo,$u,ere,hbo,pbo,S$,_bo,ubo,bbo,Iu,ore,vbo,Tbo,P$,Fbo,Cbo,Mbo,Du,rre,Ebo,ybo,$$,wbo,Abo,Lbo,Nu,tre,Bbo,xbo,I$,kbo,Rbo,Sbo,ju,are,Pbo,$bo,D$,Ibo,Dbo,Nbo,qu,nre,jbo,qbo,N$,Gbo,Obo,Xbo,Gu,sre,Vbo,zbo,j$,Wbo,Qbo,Hbo,Ou,lre,Ubo,Jbo,q$,Ybo,Kbo,Zbo,Xu,ire,e3o,o3o,G$,r3o,t3o,a3o,Vu,dre,n3o,s3o,O$,l3o,i3o,d3o,zu,cre,c3o,f3o,X$,m3o,g3o,h3o,Wu,fre,p3o,_3o,V$,u3o,b3o,v3o,Qu,mre,T3o,F3o,z$,C3o,M3o,E3o,Hu,gre,y3o,w3o,W$,A3o,L3o,B3o,Uu,hre,x3o,k3o,Q$,R3o,S3o,P3o,Ju,pre,$3o,I3o,H$,D3o,N3o,j3o,Yu,_re,q3o,G3o,U$,O3o,X3o,V3o,Ku,ure,z3o,W3o,J$,Q3o,H3o,U3o,Zu,J3o,bre,Y3o,K3o,vre,Z3o,evo,Tre,ovo,rvo,g5,Hke,nd,e2,Fre,h5,tvo,Cre,avo,Uke,Zo,p5,nvo,sd,svo,Mre,lvo,ivo,Ere,dvo,cvo,fvo,_5,mvo,yre,gvo,hvo,pvo,Qr,u5,_vo,wre,uvo,bvo,ld,vvo,Are,Tvo,Fvo,Lre,Cvo,Mvo,Evo,Bre,yvo,wvo,b5,Avo,qe,v5,Lvo,xre,Bvo,xvo,Qa,kvo,kre,Rvo,Svo,Rre,Pvo,$vo,Sre,Ivo,Dvo,Nvo,I,o2,Pre,jvo,qvo,Y$,Gvo,Ovo,Xvo,r2,$re,Vvo,zvo,K$,Wvo,Qvo,Hvo,t2,Ire,Uvo,Jvo,Z$,Yvo,Kvo,Zvo,a2,Dre,e6o,o6o,eI,r6o,t6o,a6o,n2,Nre,n6o,s6o,oI,l6o,i6o,d6o,s2,jre,c6o,f6o,rI,m6o,g6o,h6o,l2,qre,p6o,_6o,tI,u6o,b6o,v6o,i2,Gre,T6o,F6o,aI,C6o,M6o,E6o,d2,Ore,y6o,w6o,nI,A6o,L6o,B6o,c2,Xre,x6o,k6o,sI,R6o,S6o,P6o,f2,Vre,$6o,I6o,lI,D6o,N6o,j6o,m2,zre,q6o,G6o,iI,O6o,X6o,V6o,g2,Wre,z6o,W6o,dI,Q6o,H6o,U6o,h2,Qre,J6o,Y6o,cI,K6o,Z6o,eTo,p2,Hre,oTo,rTo,fI,tTo,aTo,nTo,_2,Ure,sTo,lTo,mI,iTo,dTo,cTo,u2,Jre,fTo,mTo,gI,gTo,hTo,pTo,b2,Yre,_To,uTo,hI,bTo,vTo,TTo,v2,Kre,FTo,CTo,pI,MTo,ETo,yTo,T2,Zre,wTo,ATo,_I,LTo,BTo,xTo,F2,ete,kTo,RTo,uI,STo,PTo,$To,C2,ote,ITo,DTo,bI,NTo,jTo,qTo,M2,rte,GTo,OTo,vI,XTo,VTo,zTo,E2,tte,WTo,QTo,TI,HTo,UTo,JTo,y2,ate,YTo,KTo,FI,ZTo,eFo,oFo,w2,nte,rFo,tFo,CI,aFo,nFo,sFo,A2,ste,lFo,iFo,MI,dFo,cFo,fFo,L2,lte,mFo,gFo,EI,hFo,pFo,_Fo,B2,ite,uFo,bFo,yI,vFo,TFo,FFo,x2,dte,CFo,MFo,wI,EFo,yFo,wFo,k2,cte,AFo,LFo,fte,BFo,xFo,kFo,R2,mte,RFo,SFo,AI,PFo,$Fo,IFo,S2,gte,DFo,NFo,LI,jFo,qFo,GFo,P2,hte,OFo,XFo,BI,VFo,zFo,WFo,$2,pte,QFo,HFo,xI,UFo,JFo,YFo,I2,KFo,_te,ZFo,e9o,ute,o9o,r9o,bte,t9o,a9o,T5,Jke,id,D2,vte,F5,n9o,Tte,s9o,Yke,er,C5,l9o,dd,i9o,Fte,d9o,c9o,Cte,f9o,m9o,g9o,M5,h9o,Mte,p9o,_9o,u9o,Hr,E5,b9o,Ete,v9o,T9o,cd,F9o,yte,C9o,M9o,wte,E9o,y9o,w9o,Ate,A9o,L9o,y5,B9o,Ge,w5,x9o,Lte,k9o,R9o,Ha,S9o,Bte,P9o,$9o,xte,I9o,D9o,kte,N9o,j9o,q9o,se,N2,Rte,G9o,O9o,kI,X9o,V9o,z9o,j2,Ste,W9o,Q9o,RI,H9o,U9o,J9o,q2,Pte,Y9o,K9o,SI,Z9o,eCo,oCo,G2,$te,rCo,tCo,PI,aCo,nCo,sCo,O2,Ite,lCo,iCo,$I,dCo,cCo,fCo,X2,Dte,mCo,gCo,II,hCo,pCo,_Co,V2,Nte,uCo,bCo,DI,vCo,TCo,FCo,z2,jte,CCo,MCo,NI,ECo,yCo,wCo,W2,qte,ACo,LCo,jI,BCo,xCo,kCo,Q2,Gte,RCo,SCo,qI,PCo,$Co,ICo,H2,Ote,DCo,NCo,GI,jCo,qCo,GCo,U2,Xte,OCo,XCo,OI,VCo,zCo,WCo,J2,Vte,QCo,HCo,XI,UCo,JCo,YCo,Y2,zte,KCo,ZCo,VI,eMo,oMo,rMo,K2,Wte,tMo,aMo,zI,nMo,sMo,lMo,Z2,Qte,iMo,dMo,WI,cMo,fMo,mMo,e1,gMo,Hte,hMo,pMo,Ute,_Mo,uMo,Jte,bMo,vMo,A5,Kke,fd,o1,Yte,L5,TMo,Kte,FMo,Zke,or,B5,CMo,md,MMo,Zte,EMo,yMo,eae,wMo,AMo,LMo,x5,BMo,oae,xMo,kMo,RMo,Ur,k5,SMo,rae,PMo,$Mo,gd,IMo,tae,DMo,NMo,aae,jMo,qMo,GMo,nae,OMo,XMo,R5,VMo,Oe,S5,zMo,sae,WMo,QMo,Ua,HMo,lae,UMo,JMo,iae,YMo,KMo,dae,ZMo,e4o,o4o,A,r1,cae,r4o,t4o,QI,a4o,n4o,s4o,t1,fae,l4o,i4o,HI,d4o,c4o,f4o,a1,mae,m4o,g4o,UI,h4o,p4o,_4o,n1,gae,u4o,b4o,JI,v4o,T4o,F4o,s1,hae,C4o,M4o,YI,E4o,y4o,w4o,l1,pae,A4o,L4o,KI,B4o,x4o,k4o,i1,_ae,R4o,S4o,ZI,P4o,$4o,I4o,d1,uae,D4o,N4o,eD,j4o,q4o,G4o,c1,bae,O4o,X4o,oD,V4o,z4o,W4o,f1,vae,Q4o,H4o,rD,U4o,J4o,Y4o,m1,Tae,K4o,Z4o,tD,eEo,oEo,rEo,g1,Fae,tEo,aEo,aD,nEo,sEo,lEo,h1,Cae,iEo,dEo,nD,cEo,fEo,mEo,p1,Mae,gEo,hEo,sD,pEo,_Eo,uEo,_1,Eae,bEo,vEo,lD,TEo,FEo,CEo,u1,yae,MEo,EEo,iD,yEo,wEo,AEo,b1,wae,LEo,BEo,dD,xEo,kEo,REo,v1,Aae,SEo,PEo,cD,$Eo,IEo,DEo,T1,Lae,NEo,jEo,fD,qEo,GEo,OEo,F1,Bae,XEo,VEo,mD,zEo,WEo,QEo,C1,xae,HEo,UEo,gD,JEo,YEo,KEo,M1,kae,ZEo,e5o,hD,o5o,r5o,t5o,E1,Rae,a5o,n5o,pD,s5o,l5o,i5o,y1,Sae,d5o,c5o,_D,f5o,m5o,g5o,w1,Pae,h5o,p5o,uD,_5o,u5o,b5o,A1,$ae,v5o,T5o,bD,F5o,C5o,M5o,L1,Iae,E5o,y5o,vD,w5o,A5o,L5o,B1,Dae,B5o,x5o,TD,k5o,R5o,S5o,x1,Nae,P5o,$5o,FD,I5o,D5o,N5o,k1,jae,j5o,q5o,CD,G5o,O5o,X5o,R1,qae,V5o,z5o,MD,W5o,Q5o,H5o,S1,Gae,U5o,J5o,ED,Y5o,K5o,Z5o,P1,Oae,eyo,oyo,yD,ryo,tyo,ayo,$1,Xae,nyo,syo,wD,lyo,iyo,dyo,I1,Vae,cyo,fyo,AD,myo,gyo,hyo,D1,zae,pyo,_yo,LD,uyo,byo,vyo,N1,Wae,Tyo,Fyo,BD,Cyo,Myo,Eyo,j1,Qae,yyo,wyo,xD,Ayo,Lyo,Byo,q1,Hae,xyo,kyo,kD,Ryo,Syo,Pyo,G1,Uae,$yo,Iyo,RD,Dyo,Nyo,jyo,O1,Jae,qyo,Gyo,SD,Oyo,Xyo,Vyo,X1,Yae,zyo,Wyo,PD,Qyo,Hyo,Uyo,V1,Kae,Jyo,Yyo,$D,Kyo,Zyo,ewo,z1,Zae,owo,rwo,ID,two,awo,nwo,W1,ene,swo,lwo,DD,iwo,dwo,cwo,Q1,one,fwo,mwo,ND,gwo,hwo,pwo,H1,_wo,rne,uwo,bwo,tne,vwo,Two,ane,Fwo,Cwo,P5,eRe,hd,U1,nne,$5,Mwo,sne,Ewo,oRe,rr,I5,ywo,pd,wwo,lne,Awo,Lwo,ine,Bwo,xwo,kwo,D5,Rwo,dne,Swo,Pwo,$wo,Jr,N5,Iwo,cne,Dwo,Nwo,_d,jwo,fne,qwo,Gwo,mne,Owo,Xwo,Vwo,gne,zwo,Wwo,j5,Qwo,Xe,q5,Hwo,hne,Uwo,Jwo,Ja,Ywo,pne,Kwo,Zwo,_ne,eAo,oAo,une,rAo,tAo,aAo,G,J1,bne,nAo,sAo,jD,lAo,iAo,dAo,Y1,vne,cAo,fAo,qD,mAo,gAo,hAo,K1,Tne,pAo,_Ao,GD,uAo,bAo,vAo,Z1,Fne,TAo,FAo,OD,CAo,MAo,EAo,eb,Cne,yAo,wAo,XD,AAo,LAo,BAo,ob,Mne,xAo,kAo,VD,RAo,SAo,PAo,rb,Ene,$Ao,IAo,zD,DAo,NAo,jAo,tb,yne,qAo,GAo,WD,OAo,XAo,VAo,ab,wne,zAo,WAo,QD,QAo,HAo,UAo,nb,Ane,JAo,YAo,HD,KAo,ZAo,e0o,sb,Lne,o0o,r0o,UD,t0o,a0o,n0o,lb,Bne,s0o,l0o,JD,i0o,d0o,c0o,ib,xne,f0o,m0o,YD,g0o,h0o,p0o,db,kne,_0o,u0o,KD,b0o,v0o,T0o,cb,Rne,F0o,C0o,ZD,M0o,E0o,y0o,fb,Sne,w0o,A0o,eN,L0o,B0o,x0o,mb,Pne,k0o,R0o,oN,S0o,P0o,$0o,gb,$ne,I0o,D0o,rN,N0o,j0o,q0o,hb,Ine,G0o,O0o,tN,X0o,V0o,z0o,pb,Dne,W0o,Q0o,aN,H0o,U0o,J0o,_b,Nne,Y0o,K0o,nN,Z0o,eLo,oLo,ub,jne,rLo,tLo,sN,aLo,nLo,sLo,bb,qne,lLo,iLo,lN,dLo,cLo,fLo,vb,Gne,mLo,gLo,iN,hLo,pLo,_Lo,Tb,One,uLo,bLo,dN,vLo,TLo,FLo,Fb,Xne,CLo,MLo,cN,ELo,yLo,wLo,Cb,Vne,ALo,LLo,fN,BLo,xLo,kLo,Mb,zne,RLo,SLo,mN,PLo,$Lo,ILo,Eb,DLo,Wne,NLo,jLo,Qne,qLo,GLo,Hne,OLo,XLo,G5,rRe,ud,yb,Une,O5,VLo,Jne,zLo,tRe,tr,X5,WLo,bd,QLo,Yne,HLo,ULo,Kne,JLo,YLo,KLo,V5,ZLo,Zne,e7o,o7o,r7o,Yr,z5,t7o,ese,a7o,n7o,vd,s7o,ose,l7o,i7o,rse,d7o,c7o,f7o,tse,m7o,g7o,W5,h7o,Ve,Q5,p7o,ase,_7o,u7o,Ya,b7o,nse,v7o,T7o,sse,F7o,C7o,lse,M7o,E7o,y7o,da,wb,ise,w7o,A7o,gN,L7o,B7o,x7o,Ab,dse,k7o,R7o,hN,S7o,P7o,$7o,Lb,cse,I7o,D7o,pN,N7o,j7o,q7o,Bb,fse,G7o,O7o,_N,X7o,V7o,z7o,xb,mse,W7o,Q7o,uN,H7o,U7o,J7o,kb,Y7o,gse,K7o,Z7o,hse,e8o,o8o,pse,r8o,t8o,H5,aRe,Td,Rb,_se,U5,a8o,use,n8o,nRe,ar,J5,s8o,Fd,l8o,bse,i8o,d8o,vse,c8o,f8o,m8o,Y5,g8o,Tse,h8o,p8o,_8o,Kr,K5,u8o,Fse,b8o,v8o,Cd,T8o,Cse,F8o,C8o,Mse,M8o,E8o,y8o,Ese,w8o,A8o,Z5,L8o,ze,ey,B8o,yse,x8o,k8o,Ka,R8o,wse,S8o,P8o,Ase,$8o,I8o,Lse,D8o,N8o,j8o,j,Sb,Bse,q8o,G8o,bN,O8o,X8o,V8o,Pb,xse,z8o,W8o,vN,Q8o,H8o,U8o,$b,kse,J8o,Y8o,TN,K8o,Z8o,eBo,Ib,Rse,oBo,rBo,FN,tBo,aBo,nBo,Db,Sse,sBo,lBo,CN,iBo,dBo,cBo,Nb,Pse,fBo,mBo,MN,gBo,hBo,pBo,jb,$se,_Bo,uBo,EN,bBo,vBo,TBo,qb,Ise,FBo,CBo,yN,MBo,EBo,yBo,Gb,Dse,wBo,ABo,wN,LBo,BBo,xBo,Ob,Nse,kBo,RBo,AN,SBo,PBo,$Bo,Xb,jse,IBo,DBo,LN,NBo,jBo,qBo,Vb,qse,GBo,OBo,BN,XBo,VBo,zBo,zb,Gse,WBo,QBo,xN,HBo,UBo,JBo,Wb,Ose,YBo,KBo,kN,ZBo,exo,oxo,Qb,Xse,rxo,txo,RN,axo,nxo,sxo,Hb,Vse,lxo,ixo,SN,dxo,cxo,fxo,Ub,zse,mxo,gxo,PN,hxo,pxo,_xo,Jb,Wse,uxo,bxo,$N,vxo,Txo,Fxo,Yb,Qse,Cxo,Mxo,IN,Exo,yxo,wxo,Kb,Hse,Axo,Lxo,DN,Bxo,xxo,kxo,Zb,Use,Rxo,Sxo,NN,Pxo,$xo,Ixo,e3,Jse,Dxo,Nxo,jN,jxo,qxo,Gxo,o3,Yse,Oxo,Xxo,qN,Vxo,zxo,Wxo,r3,Kse,Qxo,Hxo,GN,Uxo,Jxo,Yxo,t3,Zse,Kxo,Zxo,ON,eko,oko,rko,a3,ele,tko,ako,XN,nko,sko,lko,n3,ole,iko,dko,VN,cko,fko,mko,s3,rle,gko,hko,zN,pko,_ko,uko,l3,tle,bko,vko,WN,Tko,Fko,Cko,i3,ale,Mko,Eko,QN,yko,wko,Ako,d3,nle,Lko,Bko,HN,xko,kko,Rko,c3,sle,Sko,Pko,UN,$ko,Iko,Dko,f3,lle,Nko,jko,JN,qko,Gko,Oko,m3,Xko,ile,Vko,zko,dle,Wko,Qko,cle,Hko,Uko,oy,sRe,Md,g3,fle,ry,Jko,mle,Yko,lRe,nr,ty,Kko,Ed,Zko,gle,eRo,oRo,hle,rRo,tRo,aRo,ay,nRo,ple,sRo,lRo,iRo,Zr,ny,dRo,_le,cRo,fRo,yd,mRo,ule,gRo,hRo,ble,pRo,_Ro,uRo,vle,bRo,vRo,sy,TRo,We,ly,FRo,Tle,CRo,MRo,Za,ERo,Fle,yRo,wRo,Cle,ARo,LRo,Mle,BRo,xRo,kRo,R,h3,Ele,RRo,SRo,YN,PRo,$Ro,IRo,p3,yle,DRo,NRo,KN,jRo,qRo,GRo,_3,wle,ORo,XRo,ZN,VRo,zRo,WRo,u3,Ale,QRo,HRo,ej,URo,JRo,YRo,b3,Lle,KRo,ZRo,oj,eSo,oSo,rSo,v3,Ble,tSo,aSo,rj,nSo,sSo,lSo,T3,xle,iSo,dSo,tj,cSo,fSo,mSo,F3,kle,gSo,hSo,aj,pSo,_So,uSo,C3,Rle,bSo,vSo,nj,TSo,FSo,CSo,M3,Sle,MSo,ESo,sj,ySo,wSo,ASo,E3,Ple,LSo,BSo,lj,xSo,kSo,RSo,y3,$le,SSo,PSo,ij,$So,ISo,DSo,w3,Ile,NSo,jSo,dj,qSo,GSo,OSo,A3,Dle,XSo,VSo,cj,zSo,WSo,QSo,L3,Nle,HSo,USo,fj,JSo,YSo,KSo,B3,jle,ZSo,ePo,mj,oPo,rPo,tPo,x3,qle,aPo,nPo,gj,sPo,lPo,iPo,k3,Gle,dPo,cPo,hj,fPo,mPo,gPo,R3,Ole,hPo,pPo,pj,_Po,uPo,bPo,S3,Xle,vPo,TPo,_j,FPo,CPo,MPo,P3,Vle,EPo,yPo,uj,wPo,APo,LPo,$3,zle,BPo,xPo,bj,kPo,RPo,SPo,I3,Wle,PPo,$Po,vj,IPo,DPo,NPo,D3,Qle,jPo,qPo,Tj,GPo,OPo,XPo,N3,Hle,VPo,zPo,Fj,WPo,QPo,HPo,j3,Ule,UPo,JPo,Cj,YPo,KPo,ZPo,q3,Jle,e$o,o$o,Mj,r$o,t$o,a$o,G3,Yle,n$o,s$o,Ej,l$o,i$o,d$o,O3,Kle,c$o,f$o,yj,m$o,g$o,h$o,X3,Zle,p$o,_$o,wj,u$o,b$o,v$o,V3,eie,T$o,F$o,Aj,C$o,M$o,E$o,z3,oie,y$o,w$o,Lj,A$o,L$o,B$o,W3,rie,x$o,k$o,Bj,R$o,S$o,P$o,Q3,tie,$$o,I$o,xj,D$o,N$o,j$o,H3,aie,q$o,G$o,kj,O$o,X$o,V$o,U3,nie,z$o,W$o,Rj,Q$o,H$o,U$o,J3,sie,J$o,Y$o,Sj,K$o,Z$o,eIo,Y3,lie,oIo,rIo,Pj,tIo,aIo,nIo,K3,iie,sIo,lIo,$j,iIo,dIo,cIo,Z3,fIo,die,mIo,gIo,cie,hIo,pIo,fie,_Io,uIo,iy,iRe,wd,ev,mie,dy,bIo,gie,vIo,dRe,sr,cy,TIo,Ad,FIo,hie,CIo,MIo,pie,EIo,yIo,wIo,fy,AIo,_ie,LIo,BIo,xIo,et,my,kIo,uie,RIo,SIo,Ld,PIo,bie,$Io,IIo,vie,DIo,NIo,jIo,Tie,qIo,GIo,gy,OIo,Qe,hy,XIo,Fie,VIo,zIo,en,WIo,Cie,QIo,HIo,Mie,UIo,JIo,Eie,YIo,KIo,ZIo,yie,ov,wie,eDo,oDo,Ij,rDo,tDo,aDo,rv,nDo,Aie,sDo,lDo,Lie,iDo,dDo,Bie,cDo,fDo,py,cRe,Bd,tv,xie,_y,mDo,kie,gDo,fRe,lr,uy,hDo,xd,pDo,Rie,_Do,uDo,Sie,bDo,vDo,TDo,by,FDo,Pie,CDo,MDo,EDo,ot,vy,yDo,$ie,wDo,ADo,kd,LDo,Iie,BDo,xDo,Die,kDo,RDo,SDo,Nie,PDo,$Do,Ty,IDo,He,Fy,DDo,jie,NDo,jDo,on,qDo,qie,GDo,ODo,Gie,XDo,VDo,Oie,zDo,WDo,QDo,ge,av,Xie,HDo,UDo,Dj,JDo,YDo,KDo,nv,Vie,ZDo,eNo,Nj,oNo,rNo,tNo,qs,zie,aNo,nNo,jj,sNo,lNo,qj,iNo,dNo,cNo,sv,Wie,fNo,mNo,Gj,gNo,hNo,pNo,ma,Qie,_No,uNo,Oj,bNo,vNo,Xj,TNo,FNo,Vj,CNo,MNo,ENo,lv,Hie,yNo,wNo,zj,ANo,LNo,BNo,iv,Uie,xNo,kNo,Wj,RNo,SNo,PNo,dv,Jie,$No,INo,Qj,DNo,NNo,jNo,cv,Yie,qNo,GNo,Hj,ONo,XNo,VNo,fv,Kie,zNo,WNo,Uj,QNo,HNo,UNo,mv,Zie,JNo,YNo,Jj,KNo,ZNo,ejo,gv,ojo,ede,rjo,tjo,ode,ajo,njo,rde,sjo,ljo,Cy,mRe,Rd,hv,tde,My,ijo,ade,djo,gRe,ir,Ey,cjo,Sd,fjo,nde,mjo,gjo,sde,hjo,pjo,_jo,yy,ujo,lde,bjo,vjo,Tjo,rt,wy,Fjo,ide,Cjo,Mjo,Pd,Ejo,dde,yjo,wjo,cde,Ajo,Ljo,Bjo,fde,xjo,kjo,Ay,Rjo,Ue,Ly,Sjo,mde,Pjo,$jo,rn,Ijo,gde,Djo,Njo,hde,jjo,qjo,pde,Gjo,Ojo,Xjo,_de,pv,ude,Vjo,zjo,Yj,Wjo,Qjo,Hjo,_v,Ujo,bde,Jjo,Yjo,vde,Kjo,Zjo,Tde,eqo,oqo,By,hRe,$d,uv,Fde,xy,rqo,Cde,tqo,pRe,dr,ky,aqo,Id,nqo,Mde,sqo,lqo,Ede,iqo,dqo,cqo,Ry,fqo,yde,mqo,gqo,hqo,tt,Sy,pqo,wde,_qo,uqo,Dd,bqo,Ade,vqo,Tqo,Lde,Fqo,Cqo,Mqo,Bde,Eqo,yqo,Py,wqo,Je,$y,Aqo,xde,Lqo,Bqo,tn,xqo,kde,kqo,Rqo,Rde,Sqo,Pqo,Sde,$qo,Iqo,Dqo,ke,bv,Pde,Nqo,jqo,Kj,qqo,Gqo,Oqo,vv,$de,Xqo,Vqo,Zj,zqo,Wqo,Qqo,Tv,Ide,Hqo,Uqo,eq,Jqo,Yqo,Kqo,Fv,Dde,Zqo,eGo,oq,oGo,rGo,tGo,Cv,Nde,aGo,nGo,rq,sGo,lGo,iGo,Mv,jde,dGo,cGo,tq,fGo,mGo,gGo,Ev,qde,hGo,pGo,aq,_Go,uGo,bGo,yv,Gde,vGo,TGo,nq,FGo,CGo,MGo,wv,EGo,Ode,yGo,wGo,Xde,AGo,LGo,Vde,BGo,xGo,Iy,_Re,Nd,Av,zde,Dy,kGo,Wde,RGo,uRe,cr,Ny,SGo,jd,PGo,Qde,$Go,IGo,Hde,DGo,NGo,jGo,jy,qGo,Ude,GGo,OGo,XGo,at,qy,VGo,Jde,zGo,WGo,qd,QGo,Yde,HGo,UGo,Kde,JGo,YGo,KGo,Zde,ZGo,eOo,Gy,oOo,Ye,Oy,rOo,ece,tOo,aOo,an,nOo,oce,sOo,lOo,rce,iOo,dOo,tce,cOo,fOo,mOo,nn,Lv,ace,gOo,hOo,sq,pOo,_Oo,uOo,Bv,nce,bOo,vOo,lq,TOo,FOo,COo,xv,sce,MOo,EOo,iq,yOo,wOo,AOo,kv,lce,LOo,BOo,dq,xOo,kOo,ROo,Rv,SOo,ice,POo,$Oo,dce,IOo,DOo,cce,NOo,jOo,Xy,bRe,Gd,Sv,fce,Vy,qOo,mce,GOo,vRe,fr,zy,OOo,Od,XOo,gce,VOo,zOo,hce,WOo,QOo,HOo,Wy,UOo,pce,JOo,YOo,KOo,nt,Qy,ZOo,_ce,eXo,oXo,Xd,rXo,uce,tXo,aXo,bce,nXo,sXo,lXo,vce,iXo,dXo,Hy,cXo,Ke,Uy,fXo,Tce,mXo,gXo,sn,hXo,Fce,pXo,_Xo,Cce,uXo,bXo,Mce,vXo,TXo,FXo,Re,Pv,Ece,CXo,MXo,cq,EXo,yXo,wXo,$v,yce,AXo,LXo,fq,BXo,xXo,kXo,Iv,wce,RXo,SXo,mq,PXo,$Xo,IXo,Dv,Ace,DXo,NXo,gq,jXo,qXo,GXo,Nv,Lce,OXo,XXo,hq,VXo,zXo,WXo,jv,Bce,QXo,HXo,pq,UXo,JXo,YXo,qv,xce,KXo,ZXo,_q,eVo,oVo,rVo,Gv,kce,tVo,aVo,uq,nVo,sVo,lVo,Ov,iVo,Rce,dVo,cVo,Sce,fVo,mVo,Pce,gVo,hVo,Jy,TRe,Vd,Xv,$ce,Yy,pVo,Ice,_Vo,FRe,mr,Ky,uVo,zd,bVo,Dce,vVo,TVo,Nce,FVo,CVo,MVo,Zy,EVo,jce,yVo,wVo,AVo,st,ew,LVo,qce,BVo,xVo,Wd,kVo,Gce,RVo,SVo,Oce,PVo,$Vo,IVo,Xce,DVo,NVo,ow,jVo,Ze,rw,qVo,Vce,GVo,OVo,ln,XVo,zce,VVo,zVo,Wce,WVo,QVo,Qce,HVo,UVo,JVo,tw,Vv,Hce,YVo,KVo,bq,ZVo,ezo,ozo,zv,Uce,rzo,tzo,vq,azo,nzo,szo,Wv,lzo,Jce,izo,dzo,Yce,czo,fzo,Kce,mzo,gzo,aw,CRe,Qd,Qv,Zce,nw,hzo,efe,pzo,MRe,gr,sw,_zo,Hd,uzo,ofe,bzo,vzo,rfe,Tzo,Fzo,Czo,lw,Mzo,tfe,Ezo,yzo,wzo,lt,iw,Azo,afe,Lzo,Bzo,Ud,xzo,nfe,kzo,Rzo,sfe,Szo,Pzo,$zo,lfe,Izo,Dzo,dw,Nzo,eo,cw,jzo,ife,qzo,Gzo,dn,Ozo,dfe,Xzo,Vzo,cfe,zzo,Wzo,ffe,Qzo,Hzo,Uzo,cn,Hv,mfe,Jzo,Yzo,Tq,Kzo,Zzo,eWo,Uv,gfe,oWo,rWo,Fq,tWo,aWo,nWo,Jv,hfe,sWo,lWo,Cq,iWo,dWo,cWo,Yv,pfe,fWo,mWo,Mq,gWo,hWo,pWo,Kv,_Wo,_fe,uWo,bWo,ufe,vWo,TWo,bfe,FWo,CWo,fw,ERe,Jd,Zv,vfe,mw,MWo,Tfe,EWo,yRe,hr,gw,yWo,Yd,wWo,Ffe,AWo,LWo,Cfe,BWo,xWo,kWo,hw,RWo,Mfe,SWo,PWo,$Wo,it,pw,IWo,Efe,DWo,NWo,Kd,jWo,yfe,qWo,GWo,wfe,OWo,XWo,VWo,Afe,zWo,WWo,_w,QWo,oo,uw,HWo,Lfe,UWo,JWo,fn,YWo,Bfe,KWo,ZWo,xfe,eQo,oQo,kfe,rQo,tQo,aQo,Zd,e6,Rfe,nQo,sQo,Eq,lQo,iQo,dQo,o6,Sfe,cQo,fQo,yq,mQo,gQo,hQo,r6,Pfe,pQo,_Qo,wq,uQo,bQo,vQo,t6,TQo,$fe,FQo,CQo,Ife,MQo,EQo,Dfe,yQo,wQo,bw,wRe,ec,a6,Nfe,vw,AQo,jfe,LQo,ARe,pr,Tw,BQo,oc,xQo,qfe,kQo,RQo,Gfe,SQo,PQo,$Qo,Fw,IQo,Ofe,DQo,NQo,jQo,dt,Cw,qQo,Xfe,GQo,OQo,rc,XQo,Vfe,VQo,zQo,zfe,WQo,QQo,HQo,Wfe,UQo,JQo,Mw,YQo,ro,Ew,KQo,Qfe,ZQo,eHo,mn,oHo,Hfe,rHo,tHo,Ufe,aHo,nHo,Jfe,sHo,lHo,iHo,Yfe,n6,Kfe,dHo,cHo,Aq,fHo,mHo,gHo,s6,hHo,Zfe,pHo,_Ho,eme,uHo,bHo,ome,vHo,THo,yw,LRe,tc,l6,rme,ww,FHo,tme,CHo,BRe,_r,Aw,MHo,ac,EHo,ame,yHo,wHo,nme,AHo,LHo,BHo,Lw,xHo,sme,kHo,RHo,SHo,ct,Bw,PHo,lme,$Ho,IHo,nc,DHo,ime,NHo,jHo,dme,qHo,GHo,OHo,cme,XHo,VHo,xw,zHo,to,kw,WHo,fme,QHo,HHo,gn,UHo,mme,JHo,YHo,gme,KHo,ZHo,hme,eUo,oUo,rUo,pme,i6,_me,tUo,aUo,Lq,nUo,sUo,lUo,d6,iUo,ume,dUo,cUo,bme,fUo,mUo,vme,gUo,hUo,Rw,xRe,sc,c6,Tme,Sw,pUo,Fme,_Uo,kRe,ur,Pw,uUo,lc,bUo,Cme,vUo,TUo,Mme,FUo,CUo,MUo,$w,EUo,Eme,yUo,wUo,AUo,ft,Iw,LUo,yme,BUo,xUo,ic,kUo,wme,RUo,SUo,Ame,PUo,$Uo,IUo,Lme,DUo,NUo,Dw,jUo,ao,Nw,qUo,Bme,GUo,OUo,hn,XUo,xme,VUo,zUo,kme,WUo,QUo,Rme,HUo,UUo,JUo,dc,f6,Sme,YUo,KUo,Bq,ZUo,eJo,oJo,m6,Pme,rJo,tJo,xq,aJo,nJo,sJo,g6,$me,lJo,iJo,kq,dJo,cJo,fJo,h6,mJo,Ime,gJo,hJo,Dme,pJo,_Jo,Nme,uJo,bJo,jw,RRe,cc,p6,jme,qw,vJo,qme,TJo,SRe,br,Gw,FJo,fc,CJo,Gme,MJo,EJo,Ome,yJo,wJo,AJo,Ow,LJo,Xme,BJo,xJo,kJo,mt,Xw,RJo,Vme,SJo,PJo,mc,$Jo,zme,IJo,DJo,Wme,NJo,jJo,qJo,Qme,GJo,OJo,Vw,XJo,no,zw,VJo,Hme,zJo,WJo,pn,QJo,Ume,HJo,UJo,Jme,JJo,YJo,Yme,KJo,ZJo,eYo,Kme,_6,Zme,oYo,rYo,Rq,tYo,aYo,nYo,u6,sYo,ege,lYo,iYo,oge,dYo,cYo,rge,fYo,mYo,Ww,PRe,gc,b6,tge,Qw,gYo,age,hYo,$Re,vr,Hw,pYo,hc,_Yo,nge,uYo,bYo,sge,vYo,TYo,FYo,Uw,CYo,lge,MYo,EYo,yYo,gt,Jw,wYo,ige,AYo,LYo,pc,BYo,dge,xYo,kYo,cge,RYo,SYo,PYo,fge,$Yo,IYo,Yw,DYo,ho,Kw,NYo,mge,jYo,qYo,_n,GYo,gge,OYo,XYo,hge,VYo,zYo,pge,WYo,QYo,HYo,B,v6,_ge,UYo,JYo,Sq,YYo,KYo,ZYo,T6,uge,eKo,oKo,Pq,rKo,tKo,aKo,F6,bge,nKo,sKo,$q,lKo,iKo,dKo,C6,vge,cKo,fKo,Iq,mKo,gKo,hKo,M6,Tge,pKo,_Ko,Dq,uKo,bKo,vKo,E6,Fge,TKo,FKo,Nq,CKo,MKo,EKo,y6,Cge,yKo,wKo,jq,AKo,LKo,BKo,w6,Mge,xKo,kKo,qq,RKo,SKo,PKo,A6,Ege,$Ko,IKo,Gq,DKo,NKo,jKo,L6,yge,qKo,GKo,Oq,OKo,XKo,VKo,B6,wge,zKo,WKo,Xq,QKo,HKo,UKo,x6,Age,JKo,YKo,Vq,KKo,ZKo,eZo,k6,Lge,oZo,rZo,zq,tZo,aZo,nZo,R6,Bge,sZo,lZo,Wq,iZo,dZo,cZo,S6,xge,fZo,mZo,Qq,gZo,hZo,pZo,P6,kge,_Zo,uZo,Hq,bZo,vZo,TZo,Gs,Rge,FZo,CZo,Uq,MZo,EZo,Jq,yZo,wZo,AZo,$6,Sge,LZo,BZo,Yq,xZo,kZo,RZo,I6,Pge,SZo,PZo,Kq,$Zo,IZo,DZo,D6,$ge,NZo,jZo,Zq,qZo,GZo,OZo,N6,Ige,XZo,VZo,eG,zZo,WZo,QZo,j6,Dge,HZo,UZo,oG,JZo,YZo,KZo,q6,Nge,ZZo,eer,rG,oer,rer,ter,G6,jge,aer,ner,tG,ser,ler,ier,O6,qge,der,cer,aG,fer,mer,ger,X6,Gge,her,per,nG,_er,uer,ber,V6,Oge,ver,Ter,sG,Fer,Cer,Mer,z6,Xge,Eer,yer,lG,wer,Aer,Ler,W6,Vge,Ber,xer,iG,ker,Rer,Ser,Q6,zge,Per,$er,dG,Ier,Der,Ner,H6,Wge,jer,qer,cG,Ger,Oer,Xer,U6,Qge,Ver,zer,fG,Wer,Qer,Her,J6,Hge,Uer,Jer,mG,Yer,Ker,Zer,Y6,Uge,eor,oor,gG,ror,tor,aor,K6,Jge,nor,sor,hG,lor,ior,dor,Z6,Yge,cor,mor,pG,gor,hor,por,eT,Kge,_or,uor,_G,bor,vor,Tor,oT,Zge,For,Cor,uG,Mor,Eor,yor,rT,ehe,wor,Aor,bG,Lor,Bor,xor,tT,ohe,kor,Ror,vG,Sor,Por,$or,aT,rhe,Ior,Dor,TG,Nor,jor,qor,nT,the,Gor,Oor,FG,Xor,Vor,zor,sT,ahe,Wor,Qor,CG,Hor,Uor,Jor,nhe,Yor,Kor,Zw,IRe,_c,lT,she,eA,Zor,lhe,err,DRe,Tr,oA,orr,uc,rrr,ihe,trr,arr,dhe,nrr,srr,lrr,rA,irr,che,drr,crr,frr,ht,tA,mrr,fhe,grr,hrr,bc,prr,mhe,_rr,urr,ghe,brr,vrr,Trr,hhe,Frr,Crr,aA,Mrr,po,nA,Err,phe,yrr,wrr,un,Arr,_he,Lrr,Brr,uhe,xrr,krr,bhe,Rrr,Srr,Prr,H,iT,vhe,$rr,Irr,MG,Drr,Nrr,jrr,dT,The,qrr,Grr,EG,Orr,Xrr,Vrr,cT,Fhe,zrr,Wrr,yG,Qrr,Hrr,Urr,fT,Che,Jrr,Yrr,wG,Krr,Zrr,etr,mT,Mhe,otr,rtr,AG,ttr,atr,ntr,gT,Ehe,str,ltr,LG,itr,dtr,ctr,hT,yhe,ftr,mtr,BG,gtr,htr,ptr,pT,whe,_tr,utr,xG,btr,vtr,Ttr,_T,Ahe,Ftr,Ctr,kG,Mtr,Etr,ytr,uT,Lhe,wtr,Atr,RG,Ltr,Btr,xtr,bT,Bhe,ktr,Rtr,SG,Str,Ptr,$tr,vT,xhe,Itr,Dtr,PG,Ntr,jtr,qtr,TT,khe,Gtr,Otr,$G,Xtr,Vtr,ztr,FT,Rhe,Wtr,Qtr,IG,Htr,Utr,Jtr,CT,She,Ytr,Ktr,DG,Ztr,ear,oar,MT,Phe,rar,tar,NG,aar,nar,sar,ET,$he,lar,iar,jG,dar,car,far,yT,Ihe,mar,gar,qG,har,par,_ar,wT,Dhe,uar,bar,GG,Tar,Far,Car,AT,Nhe,Mar,Ear,OG,yar,war,Aar,LT,jhe,Lar,Bar,XG,xar,kar,Rar,BT,qhe,Sar,Par,VG,$ar,Iar,Dar,Ghe,Nar,jar,sA,NRe,vc,xT,Ohe,lA,qar,Xhe,Gar,jRe,Fr,iA,Oar,Tc,Xar,Vhe,Var,zar,zhe,War,Qar,Har,dA,Uar,Whe,Jar,Yar,Kar,pt,cA,Zar,Qhe,enr,onr,Fc,rnr,Hhe,tnr,anr,Uhe,nnr,snr,lnr,Jhe,inr,dnr,fA,cnr,_o,mA,fnr,Yhe,mnr,gnr,bn,hnr,Khe,pnr,_nr,Zhe,unr,bnr,epe,vnr,Tnr,Fnr,ce,kT,ope,Cnr,Mnr,zG,Enr,ynr,wnr,RT,rpe,Anr,Lnr,WG,Bnr,xnr,knr,ST,tpe,Rnr,Snr,QG,Pnr,$nr,Inr,PT,ape,Dnr,Nnr,HG,jnr,qnr,Gnr,$T,npe,Onr,Xnr,UG,Vnr,znr,Wnr,IT,spe,Qnr,Hnr,JG,Unr,Jnr,Ynr,DT,lpe,Knr,Znr,YG,esr,osr,rsr,NT,ipe,tsr,asr,KG,nsr,ssr,lsr,jT,dpe,isr,dsr,ZG,csr,fsr,msr,qT,cpe,gsr,hsr,eO,psr,_sr,usr,GT,fpe,bsr,vsr,oO,Tsr,Fsr,Csr,OT,mpe,Msr,Esr,rO,ysr,wsr,Asr,gpe,Lsr,Bsr,gA,qRe,Cc,XT,hpe,hA,xsr,ppe,ksr,GRe,Cr,pA,Rsr,Mc,Ssr,_pe,Psr,$sr,upe,Isr,Dsr,Nsr,_A,jsr,bpe,qsr,Gsr,Osr,_t,uA,Xsr,vpe,Vsr,zsr,Ec,Wsr,Tpe,Qsr,Hsr,Fpe,Usr,Jsr,Ysr,Cpe,Ksr,Zsr,bA,elr,uo,vA,olr,Mpe,rlr,tlr,vn,alr,Epe,nlr,slr,ype,llr,ilr,wpe,dlr,clr,flr,TA,VT,Ape,mlr,glr,tO,hlr,plr,_lr,zT,Lpe,ulr,blr,aO,vlr,Tlr,Flr,Bpe,Clr,Mlr,FA,ORe,yc,WT,xpe,CA,Elr,kpe,ylr,XRe,Mr,MA,wlr,wc,Alr,Rpe,Llr,Blr,Spe,xlr,klr,Rlr,EA,Slr,Ppe,Plr,$lr,Ilr,ut,yA,Dlr,$pe,Nlr,jlr,Ac,qlr,Ipe,Glr,Olr,Dpe,Xlr,Vlr,zlr,Npe,Wlr,Qlr,wA,Hlr,bo,AA,Ulr,jpe,Jlr,Ylr,Tn,Klr,qpe,Zlr,eir,Gpe,oir,rir,Ope,tir,air,nir,J,QT,Xpe,sir,lir,nO,iir,dir,cir,HT,Vpe,fir,mir,sO,gir,hir,pir,UT,zpe,_ir,uir,lO,bir,vir,Tir,JT,Wpe,Fir,Cir,iO,Mir,Eir,yir,YT,Qpe,wir,Air,dO,Lir,Bir,xir,KT,Hpe,kir,Rir,cO,Sir,Pir,$ir,ZT,Upe,Iir,Dir,fO,Nir,jir,qir,eF,Jpe,Gir,Oir,mO,Xir,Vir,zir,oF,Ype,Wir,Qir,gO,Hir,Uir,Jir,rF,Kpe,Yir,Kir,hO,Zir,edr,odr,tF,Zpe,rdr,tdr,pO,adr,ndr,sdr,aF,e_e,ldr,idr,_O,ddr,cdr,fdr,nF,o_e,mdr,gdr,uO,hdr,pdr,_dr,sF,r_e,udr,bdr,bO,vdr,Tdr,Fdr,lF,t_e,Cdr,Mdr,vO,Edr,ydr,wdr,iF,a_e,Adr,Ldr,TO,Bdr,xdr,kdr,dF,n_e,Rdr,Sdr,FO,Pdr,$dr,Idr,cF,s_e,Ddr,Ndr,CO,jdr,qdr,Gdr,fF,l_e,Odr,Xdr,MO,Vdr,zdr,Wdr,mF,i_e,Qdr,Hdr,EO,Udr,Jdr,Ydr,d_e,Kdr,Zdr,LA,VRe,Lc,gF,c_e,BA,ecr,f_e,ocr,zRe,Er,xA,rcr,Bc,tcr,m_e,acr,ncr,g_e,scr,lcr,icr,kA,dcr,h_e,ccr,fcr,mcr,bt,RA,gcr,p_e,hcr,pcr,xc,_cr,__e,ucr,bcr,u_e,vcr,Tcr,Fcr,b_e,Ccr,Mcr,SA,Ecr,vo,PA,ycr,v_e,wcr,Acr,Fn,Lcr,T_e,Bcr,xcr,F_e,kcr,Rcr,C_e,Scr,Pcr,$cr,ue,hF,M_e,Icr,Dcr,yO,Ncr,jcr,qcr,pF,E_e,Gcr,Ocr,wO,Xcr,Vcr,zcr,_F,y_e,Wcr,Qcr,AO,Hcr,Ucr,Jcr,uF,w_e,Ycr,Kcr,LO,Zcr,efr,ofr,bF,A_e,rfr,tfr,BO,afr,nfr,sfr,vF,L_e,lfr,ifr,xO,dfr,cfr,ffr,TF,B_e,mfr,gfr,kO,hfr,pfr,_fr,FF,x_e,ufr,bfr,RO,vfr,Tfr,Ffr,CF,k_e,Cfr,Mfr,SO,Efr,yfr,wfr,MF,R_e,Afr,Lfr,PO,Bfr,xfr,kfr,S_e,Rfr,Sfr,$A,WRe,kc,EF,P_e,IA,Pfr,$_e,$fr,QRe,yr,DA,Ifr,Rc,Dfr,I_e,Nfr,jfr,D_e,qfr,Gfr,Ofr,NA,Xfr,N_e,Vfr,zfr,Wfr,vt,jA,Qfr,j_e,Hfr,Ufr,Sc,Jfr,q_e,Yfr,Kfr,G_e,Zfr,emr,omr,O_e,rmr,tmr,qA,amr,To,GA,nmr,X_e,smr,lmr,Cn,imr,V_e,dmr,cmr,z_e,fmr,mmr,W_e,gmr,hmr,pmr,X,yF,Q_e,_mr,umr,$O,bmr,vmr,Tmr,wF,H_e,Fmr,Cmr,IO,Mmr,Emr,ymr,AF,U_e,wmr,Amr,DO,Lmr,Bmr,xmr,LF,J_e,kmr,Rmr,NO,Smr,Pmr,$mr,BF,Y_e,Imr,Dmr,jO,Nmr,jmr,qmr,xF,K_e,Gmr,Omr,qO,Xmr,Vmr,zmr,kF,Z_e,Wmr,Qmr,GO,Hmr,Umr,Jmr,RF,eue,Ymr,Kmr,OO,Zmr,egr,ogr,SF,oue,rgr,tgr,XO,agr,ngr,sgr,PF,rue,lgr,igr,VO,dgr,cgr,fgr,$F,tue,mgr,ggr,zO,hgr,pgr,_gr,IF,aue,ugr,bgr,WO,vgr,Tgr,Fgr,DF,nue,Cgr,Mgr,QO,Egr,ygr,wgr,NF,sue,Agr,Lgr,HO,Bgr,xgr,kgr,jF,lue,Rgr,Sgr,UO,Pgr,$gr,Igr,qF,iue,Dgr,Ngr,JO,jgr,qgr,Ggr,GF,due,Ogr,Xgr,YO,Vgr,zgr,Wgr,OF,cue,Qgr,Hgr,KO,Ugr,Jgr,Ygr,XF,fue,Kgr,Zgr,ZO,ehr,ohr,rhr,VF,mue,thr,ahr,eX,nhr,shr,lhr,zF,gue,ihr,dhr,oX,chr,fhr,mhr,WF,hue,ghr,hhr,rX,phr,_hr,uhr,QF,pue,bhr,vhr,tX,Thr,Fhr,Chr,HF,_ue,Mhr,Ehr,aX,yhr,whr,Ahr,UF,uue,Lhr,Bhr,nX,xhr,khr,Rhr,JF,bue,Shr,Phr,sX,$hr,Ihr,Dhr,vue,Nhr,jhr,OA,HRe,Pc,YF,Tue,XA,qhr,Fue,Ghr,URe,wr,VA,Ohr,$c,Xhr,Cue,Vhr,zhr,Mue,Whr,Qhr,Hhr,zA,Uhr,Eue,Jhr,Yhr,Khr,Tt,WA,Zhr,yue,epr,opr,Ic,rpr,wue,tpr,apr,Aue,npr,spr,lpr,Lue,ipr,dpr,QA,cpr,Fo,HA,fpr,Bue,mpr,gpr,Mn,hpr,xue,ppr,_pr,kue,upr,bpr,Rue,vpr,Tpr,Fpr,ae,KF,Sue,Cpr,Mpr,lX,Epr,ypr,wpr,ZF,Pue,Apr,Lpr,iX,Bpr,xpr,kpr,e9,$ue,Rpr,Spr,dX,Ppr,$pr,Ipr,o9,Iue,Dpr,Npr,cX,jpr,qpr,Gpr,r9,Due,Opr,Xpr,fX,Vpr,zpr,Wpr,t9,Nue,Qpr,Hpr,mX,Upr,Jpr,Ypr,a9,jue,Kpr,Zpr,gX,e_r,o_r,r_r,n9,que,t_r,a_r,hX,n_r,s_r,l_r,s9,Gue,i_r,d_r,pX,c_r,f_r,m_r,l9,Oue,g_r,h_r,_X,p_r,__r,u_r,i9,Xue,b_r,v_r,uX,T_r,F_r,C_r,d9,Vue,M_r,E_r,bX,y_r,w_r,A_r,c9,zue,L_r,B_r,vX,x_r,k_r,R_r,f9,Wue,S_r,P_r,TX,$_r,I_r,D_r,m9,Que,N_r,j_r,FX,q_r,G_r,O_r,g9,Hue,X_r,V_r,CX,z_r,W_r,Q_r,h9,Uue,H_r,U_r,MX,J_r,Y_r,K_r,Jue,Z_r,eur,UA,JRe,Dc,p9,Yue,JA,our,Kue,rur,YRe,Ar,YA,tur,Nc,aur,Zue,nur,sur,e2e,lur,iur,dur,KA,cur,o2e,fur,mur,gur,Ft,ZA,hur,r2e,pur,_ur,jc,uur,t2e,bur,vur,a2e,Tur,Fur,Cur,n2e,Mur,Eur,e0,yur,Co,o0,wur,s2e,Aur,Lur,En,Bur,l2e,xur,kur,i2e,Rur,Sur,d2e,Pur,$ur,Iur,c2e,_9,f2e,Dur,Nur,EX,jur,qur,Gur,m2e,Our,Xur,r0,KRe,qc,u9,g2e,t0,Vur,h2e,zur,ZRe,Lr,a0,Wur,Gc,Qur,p2e,Hur,Uur,_2e,Jur,Yur,Kur,n0,Zur,u2e,e2r,o2r,r2r,Ct,s0,t2r,b2e,a2r,n2r,Oc,s2r,v2e,l2r,i2r,T2e,d2r,c2r,f2r,F2e,m2r,g2r,l0,h2r,Mo,i0,p2r,C2e,_2r,u2r,yn,b2r,M2e,v2r,T2r,E2e,F2r,C2r,y2e,M2r,E2r,y2r,Y,b9,w2e,w2r,A2r,yX,L2r,B2r,x2r,v9,A2e,k2r,R2r,wX,S2r,P2r,$2r,T9,L2e,I2r,D2r,AX,N2r,j2r,q2r,F9,B2e,G2r,O2r,LX,X2r,V2r,z2r,C9,x2e,W2r,Q2r,BX,H2r,U2r,J2r,M9,k2e,Y2r,K2r,xX,Z2r,e1r,o1r,E9,R2e,r1r,t1r,kX,a1r,n1r,s1r,y9,S2e,l1r,i1r,RX,d1r,c1r,f1r,w9,P2e,m1r,g1r,SX,h1r,p1r,_1r,A9,$2e,u1r,b1r,PX,v1r,T1r,F1r,L9,I2e,C1r,M1r,$X,E1r,y1r,w1r,B9,D2e,A1r,L1r,IX,B1r,x1r,k1r,x9,N2e,R1r,S1r,DX,P1r,$1r,I1r,k9,j2e,D1r,N1r,NX,j1r,q1r,G1r,R9,q2e,O1r,X1r,jX,V1r,z1r,W1r,S9,G2e,Q1r,H1r,qX,U1r,J1r,Y1r,P9,O2e,K1r,Z1r,GX,ebr,obr,rbr,$9,X2e,tbr,abr,OX,nbr,sbr,lbr,I9,V2e,ibr,dbr,XX,cbr,fbr,mbr,D9,z2e,gbr,hbr,VX,pbr,_br,ubr,W2e,bbr,vbr,d0,eSe,Xc,N9,Q2e,c0,Tbr,H2e,Fbr,oSe,Br,f0,Cbr,Vc,Mbr,U2e,Ebr,ybr,J2e,wbr,Abr,Lbr,m0,Bbr,Y2e,xbr,kbr,Rbr,Mt,g0,Sbr,K2e,Pbr,$br,zc,Ibr,Z2e,Dbr,Nbr,e1e,jbr,qbr,Gbr,o1e,Obr,Xbr,h0,Vbr,Eo,p0,zbr,r1e,Wbr,Qbr,wn,Hbr,t1e,Ubr,Jbr,a1e,Ybr,Kbr,n1e,Zbr,e3r,o3r,K,j9,s1e,r3r,t3r,zX,a3r,n3r,s3r,q9,l1e,l3r,i3r,WX,d3r,c3r,f3r,G9,i1e,m3r,g3r,QX,h3r,p3r,_3r,O9,d1e,u3r,b3r,HX,v3r,T3r,F3r,X9,c1e,C3r,M3r,UX,E3r,y3r,w3r,V9,f1e,A3r,L3r,JX,B3r,x3r,k3r,z9,m1e,R3r,S3r,YX,P3r,$3r,I3r,W9,g1e,D3r,N3r,KX,j3r,q3r,G3r,Q9,h1e,O3r,X3r,ZX,V3r,z3r,W3r,H9,p1e,Q3r,H3r,eV,U3r,J3r,Y3r,U9,_1e,K3r,Z3r,oV,evr,ovr,rvr,J9,u1e,tvr,avr,rV,nvr,svr,lvr,Y9,b1e,ivr,dvr,tV,cvr,fvr,mvr,K9,v1e,gvr,hvr,aV,pvr,_vr,uvr,Z9,T1e,bvr,vvr,nV,Tvr,Fvr,Cvr,eC,F1e,Mvr,Evr,sV,yvr,wvr,Avr,oC,C1e,Lvr,Bvr,lV,xvr,kvr,Rvr,rC,M1e,Svr,Pvr,iV,$vr,Ivr,Dvr,tC,E1e,Nvr,jvr,dV,qvr,Gvr,Ovr,aC,y1e,Xvr,Vvr,cV,zvr,Wvr,Qvr,w1e,Hvr,Uvr,_0,rSe,Wc,nC,A1e,u0,Jvr,L1e,Yvr,tSe,xr,b0,Kvr,Qc,Zvr,B1e,e6r,o6r,x1e,r6r,t6r,a6r,v0,n6r,k1e,s6r,l6r,i6r,Et,T0,d6r,R1e,c6r,f6r,Hc,m6r,S1e,g6r,h6r,P1e,p6r,_6r,u6r,$1e,b6r,v6r,F0,T6r,yo,C0,F6r,I1e,C6r,M6r,An,E6r,D1e,y6r,w6r,N1e,A6r,L6r,j1e,B6r,x6r,k6r,q1e,sC,G1e,R6r,S6r,fV,P6r,$6r,I6r,O1e,D6r,N6r,M0,aSe,Uc,lC,X1e,E0,j6r,V1e,q6r,nSe,kr,y0,G6r,Jc,O6r,z1e,X6r,V6r,W1e,z6r,W6r,Q6r,w0,H6r,Q1e,U6r,J6r,Y6r,yt,A0,K6r,H1e,Z6r,eTr,Yc,oTr,U1e,rTr,tTr,J1e,aTr,nTr,sTr,Y1e,lTr,iTr,L0,dTr,wo,B0,cTr,K1e,fTr,mTr,Ln,gTr,Z1e,hTr,pTr,ebe,_Tr,uTr,obe,bTr,vTr,TTr,rbe,iC,tbe,FTr,CTr,mV,MTr,ETr,yTr,abe,wTr,ATr,x0,sSe,Kc,dC,nbe,k0,LTr,sbe,BTr,lSe,Rr,R0,xTr,Zc,kTr,lbe,RTr,STr,ibe,PTr,$Tr,ITr,S0,DTr,dbe,NTr,jTr,qTr,wt,P0,GTr,cbe,OTr,XTr,ef,VTr,fbe,zTr,WTr,mbe,QTr,HTr,UTr,gbe,JTr,YTr,$0,KTr,Ao,I0,ZTr,hbe,eFr,oFr,Bn,rFr,pbe,tFr,aFr,_be,nFr,sFr,ube,lFr,iFr,dFr,z,cC,bbe,cFr,fFr,gV,mFr,gFr,hFr,fC,vbe,pFr,_Fr,hV,uFr,bFr,vFr,mC,Tbe,TFr,FFr,pV,CFr,MFr,EFr,gC,Fbe,yFr,wFr,_V,AFr,LFr,BFr,hC,Cbe,xFr,kFr,uV,RFr,SFr,PFr,pC,Mbe,$Fr,IFr,bV,DFr,NFr,jFr,_C,Ebe,qFr,GFr,vV,OFr,XFr,VFr,uC,ybe,zFr,WFr,TV,QFr,HFr,UFr,bC,wbe,JFr,YFr,FV,KFr,ZFr,e9r,vC,Abe,o9r,r9r,CV,t9r,a9r,n9r,TC,Lbe,s9r,l9r,MV,i9r,d9r,c9r,FC,Bbe,f9r,m9r,EV,g9r,h9r,p9r,CC,xbe,_9r,u9r,yV,b9r,v9r,T9r,MC,kbe,F9r,C9r,wV,M9r,E9r,y9r,EC,Rbe,w9r,A9r,AV,L9r,B9r,x9r,yC,Sbe,k9r,R9r,LV,S9r,P9r,$9r,wC,Pbe,I9r,D9r,BV,N9r,j9r,q9r,AC,$be,G9r,O9r,xV,X9r,V9r,z9r,LC,Ibe,W9r,Q9r,kV,H9r,U9r,J9r,BC,Dbe,Y9r,K9r,RV,Z9r,eCr,oCr,xC,Nbe,rCr,tCr,SV,aCr,nCr,sCr,kC,jbe,lCr,iCr,PV,dCr,cCr,fCr,RC,qbe,mCr,gCr,$V,hCr,pCr,_Cr,SC,Gbe,uCr,bCr,IV,vCr,TCr,FCr,PC,Obe,CCr,MCr,DV,ECr,yCr,wCr,Xbe,ACr,LCr,D0,iSe,of,$C,Vbe,N0,BCr,zbe,xCr,dSe,Sr,j0,kCr,rf,RCr,Wbe,SCr,PCr,Qbe,$Cr,ICr,DCr,q0,NCr,Hbe,jCr,qCr,GCr,At,G0,OCr,Ube,XCr,VCr,tf,zCr,Jbe,WCr,QCr,Ybe,HCr,UCr,JCr,Kbe,YCr,KCr,O0,ZCr,Lo,X0,eMr,Zbe,oMr,rMr,xn,tMr,e3e,aMr,nMr,o3e,sMr,lMr,r3e,iMr,dMr,cMr,ca,IC,t3e,fMr,mMr,NV,gMr,hMr,pMr,DC,a3e,_Mr,uMr,jV,bMr,vMr,TMr,NC,n3e,FMr,CMr,qV,MMr,EMr,yMr,jC,s3e,wMr,AMr,GV,LMr,BMr,xMr,qC,l3e,kMr,RMr,OV,SMr,PMr,$Mr,i3e,IMr,DMr,V0,cSe,af,GC,d3e,z0,NMr,c3e,jMr,fSe,Pr,W0,qMr,nf,GMr,f3e,OMr,XMr,m3e,VMr,zMr,WMr,Q0,QMr,g3e,HMr,UMr,JMr,Lt,H0,YMr,h3e,KMr,ZMr,sf,e4r,p3e,o4r,r4r,_3e,t4r,a4r,n4r,u3e,s4r,l4r,U0,i4r,Bo,J0,d4r,b3e,c4r,f4r,kn,m4r,v3e,g4r,h4r,T3e,p4r,_4r,F3e,u4r,b4r,v4r,fe,OC,C3e,T4r,F4r,XV,C4r,M4r,E4r,XC,M3e,y4r,w4r,VV,A4r,L4r,B4r,VC,E3e,x4r,k4r,zV,R4r,S4r,P4r,zC,y3e,$4r,I4r,WV,D4r,N4r,j4r,WC,w3e,q4r,G4r,QV,O4r,X4r,V4r,QC,A3e,z4r,W4r,HV,Q4r,H4r,U4r,HC,L3e,J4r,Y4r,UV,K4r,Z4r,eEr,UC,B3e,oEr,rEr,JV,tEr,aEr,nEr,JC,x3e,sEr,lEr,YV,iEr,dEr,cEr,YC,k3e,fEr,mEr,KV,gEr,hEr,pEr,KC,R3e,_Er,uEr,ZV,bEr,vEr,TEr,ZC,S3e,FEr,CEr,ez,MEr,EEr,yEr,P3e,wEr,AEr,Y0,mSe,lf,eM,$3e,K0,LEr,I3e,BEr,gSe,$r,Z0,xEr,df,kEr,D3e,REr,SEr,N3e,PEr,$Er,IEr,eL,DEr,j3e,NEr,jEr,qEr,Bt,oL,GEr,q3e,OEr,XEr,cf,VEr,G3e,zEr,WEr,O3e,QEr,HEr,UEr,X3e,JEr,YEr,rL,KEr,xo,tL,ZEr,V3e,e5r,o5r,Rn,r5r,z3e,t5r,a5r,W3e,n5r,s5r,Q3e,l5r,i5r,d5r,be,oM,H3e,c5r,f5r,oz,m5r,g5r,h5r,rM,U3e,p5r,_5r,rz,u5r,b5r,v5r,tM,J3e,T5r,F5r,tz,C5r,M5r,E5r,aM,Y3e,y5r,w5r,az,A5r,L5r,B5r,nM,K3e,x5r,k5r,nz,R5r,S5r,P5r,sM,Z3e,$5r,I5r,sz,D5r,N5r,j5r,lM,eve,q5r,G5r,lz,O5r,X5r,V5r,iM,ove,z5r,W5r,iz,Q5r,H5r,U5r,dM,rve,J5r,Y5r,dz,K5r,Z5r,eyr,cM,tve,oyr,ryr,cz,tyr,ayr,nyr,ave,syr,lyr,aL,hSe,ff,fM,nve,nL,iyr,sve,dyr,pSe,Ir,sL,cyr,mf,fyr,lve,myr,gyr,ive,hyr,pyr,_yr,lL,uyr,dve,byr,vyr,Tyr,xt,iL,Fyr,cve,Cyr,Myr,gf,Eyr,fve,yyr,wyr,mve,Ayr,Lyr,Byr,gve,xyr,kyr,dL,Ryr,ko,cL,Syr,hve,Pyr,$yr,Sn,Iyr,pve,Dyr,Nyr,_ve,jyr,qyr,uve,Gyr,Oyr,Xyr,Me,mM,bve,Vyr,zyr,fz,Wyr,Qyr,Hyr,gM,vve,Uyr,Jyr,mz,Yyr,Kyr,Zyr,hM,Tve,ewr,owr,gz,rwr,twr,awr,pM,Fve,nwr,swr,hz,lwr,iwr,dwr,_M,Cve,cwr,fwr,pz,mwr,gwr,hwr,uM,Mve,pwr,_wr,_z,uwr,bwr,vwr,bM,Eve,Twr,Fwr,uz,Cwr,Mwr,Ewr,vM,yve,ywr,wwr,bz,Awr,Lwr,Bwr,TM,wve,xwr,kwr,vz,Rwr,Swr,Pwr,Ave,$wr,Iwr,fL,_Se,hf,FM,Lve,mL,Dwr,Bve,Nwr,uSe,Dr,gL,jwr,pf,qwr,xve,Gwr,Owr,kve,Xwr,Vwr,zwr,hL,Wwr,Rve,Qwr,Hwr,Uwr,kt,pL,Jwr,Sve,Ywr,Kwr,_f,Zwr,Pve,eAr,oAr,$ve,rAr,tAr,aAr,Ive,nAr,sAr,_L,lAr,Ro,uL,iAr,Dve,dAr,cAr,Pn,fAr,Nve,mAr,gAr,jve,hAr,pAr,qve,_Ar,uAr,bAr,ve,CM,Gve,vAr,TAr,Tz,FAr,CAr,MAr,MM,Ove,EAr,yAr,Fz,wAr,AAr,LAr,EM,Xve,BAr,xAr,Cz,kAr,RAr,SAr,yM,Vve,PAr,$Ar,Mz,IAr,DAr,NAr,wM,zve,jAr,qAr,Ez,GAr,OAr,XAr,AM,Wve,VAr,zAr,yz,WAr,QAr,HAr,LM,Qve,UAr,JAr,wz,YAr,KAr,ZAr,BM,Hve,e0r,o0r,Az,r0r,t0r,a0r,xM,Uve,n0r,s0r,Lz,l0r,i0r,d0r,kM,Jve,c0r,f0r,Bz,m0r,g0r,h0r,Yve,p0r,_0r,bL,bSe,uf,RM,Kve,vL,u0r,Zve,b0r,vSe,Nr,TL,v0r,bf,T0r,e6e,F0r,C0r,o6e,M0r,E0r,y0r,FL,w0r,r6e,A0r,L0r,B0r,Rt,CL,x0r,t6e,k0r,R0r,vf,S0r,a6e,P0r,$0r,n6e,I0r,D0r,N0r,s6e,j0r,q0r,ML,G0r,So,EL,O0r,l6e,X0r,V0r,$n,z0r,i6e,W0r,Q0r,d6e,H0r,U0r,c6e,J0r,Y0r,K0r,Te,SM,f6e,Z0r,eLr,xz,oLr,rLr,tLr,PM,m6e,aLr,nLr,kz,sLr,lLr,iLr,$M,g6e,dLr,cLr,Rz,fLr,mLr,gLr,IM,h6e,hLr,pLr,Sz,_Lr,uLr,bLr,DM,p6e,vLr,TLr,Pz,FLr,CLr,MLr,NM,_6e,ELr,yLr,$z,wLr,ALr,LLr,jM,u6e,BLr,xLr,Iz,kLr,RLr,SLr,qM,b6e,PLr,$Lr,Dz,ILr,DLr,NLr,GM,v6e,jLr,qLr,Nz,GLr,OLr,XLr,OM,T6e,VLr,zLr,jz,WLr,QLr,HLr,F6e,ULr,JLr,yL,TSe,Tf,XM,C6e,wL,YLr,M6e,KLr,FSe,jr,AL,ZLr,Ff,e7r,E6e,o7r,r7r,y6e,t7r,a7r,n7r,LL,s7r,w6e,l7r,i7r,d7r,St,BL,c7r,A6e,f7r,m7r,Cf,g7r,L6e,h7r,p7r,B6e,_7r,u7r,b7r,x6e,v7r,T7r,xL,F7r,Po,kL,C7r,k6e,M7r,E7r,In,y7r,R6e,w7r,A7r,S6e,L7r,B7r,P6e,x7r,k7r,R7r,Se,VM,$6e,S7r,P7r,qz,$7r,I7r,D7r,zM,I6e,N7r,j7r,Gz,q7r,G7r,O7r,WM,D6e,X7r,V7r,Oz,z7r,W7r,Q7r,QM,N6e,H7r,U7r,Xz,J7r,Y7r,K7r,HM,j6e,Z7r,e8r,Vz,o8r,r8r,t8r,UM,q6e,a8r,n8r,zz,s8r,l8r,i8r,JM,G6e,d8r,c8r,Wz,f8r,m8r,g8r,YM,O6e,h8r,p8r,Qz,_8r,u8r,b8r,X6e,v8r,T8r,RL,CSe,Mf,KM,V6e,SL,F8r,z6e,C8r,MSe,qr,PL,M8r,Ef,E8r,W6e,y8r,w8r,Q6e,A8r,L8r,B8r,$L,x8r,H6e,k8r,R8r,S8r,Pt,IL,P8r,U6e,$8r,I8r,yf,D8r,J6e,N8r,j8r,Y6e,q8r,G8r,O8r,K6e,X8r,V8r,DL,z8r,$o,NL,W8r,Z6e,Q8r,H8r,Dn,U8r,eTe,J8r,Y8r,oTe,K8r,Z8r,rTe,eBr,oBr,rBr,Pe,ZM,tTe,tBr,aBr,Hz,nBr,sBr,lBr,e4,aTe,iBr,dBr,Uz,cBr,fBr,mBr,o4,nTe,gBr,hBr,Jz,pBr,_Br,uBr,r4,sTe,bBr,vBr,Yz,TBr,FBr,CBr,t4,lTe,MBr,EBr,Kz,yBr,wBr,ABr,a4,iTe,LBr,BBr,Zz,xBr,kBr,RBr,n4,dTe,SBr,PBr,eW,$Br,IBr,DBr,s4,cTe,NBr,jBr,oW,qBr,GBr,OBr,fTe,XBr,VBr,jL,ESe,wf,l4,mTe,qL,zBr,gTe,WBr,ySe,Gr,GL,QBr,Af,HBr,hTe,UBr,JBr,pTe,YBr,KBr,ZBr,OL,exr,_Te,oxr,rxr,txr,$t,XL,axr,uTe,nxr,sxr,Lf,lxr,bTe,ixr,dxr,vTe,cxr,fxr,mxr,TTe,gxr,hxr,VL,pxr,Io,zL,_xr,FTe,uxr,bxr,Nn,vxr,CTe,Txr,Fxr,MTe,Cxr,Mxr,ETe,Exr,yxr,wxr,yTe,i4,wTe,Axr,Lxr,rW,Bxr,xxr,kxr,ATe,Rxr,Sxr,WL,wSe,Bf,d4,LTe,QL,Pxr,BTe,$xr,ASe,Or,HL,Ixr,xf,Dxr,xTe,Nxr,jxr,kTe,qxr,Gxr,Oxr,UL,Xxr,RTe,Vxr,zxr,Wxr,It,JL,Qxr,STe,Hxr,Uxr,kf,Jxr,PTe,Yxr,Kxr,$Te,Zxr,ekr,okr,ITe,rkr,tkr,YL,akr,Do,KL,nkr,DTe,skr,lkr,jn,ikr,NTe,dkr,ckr,jTe,fkr,mkr,qTe,gkr,hkr,pkr,ZL,c4,GTe,_kr,ukr,tW,bkr,vkr,Tkr,f4,OTe,Fkr,Ckr,aW,Mkr,Ekr,ykr,XTe,wkr,Akr,e7,LSe,Rf,m4,VTe,o7,Lkr,zTe,Bkr,BSe,Xr,r7,xkr,Sf,kkr,WTe,Rkr,Skr,QTe,Pkr,$kr,Ikr,t7,Dkr,HTe,Nkr,jkr,qkr,Dt,a7,Gkr,UTe,Okr,Xkr,Pf,Vkr,JTe,zkr,Wkr,YTe,Qkr,Hkr,Ukr,KTe,Jkr,Ykr,n7,Kkr,No,s7,Zkr,ZTe,eRr,oRr,qn,rRr,eFe,tRr,aRr,oFe,nRr,sRr,rFe,lRr,iRr,dRr,tFe,g4,aFe,cRr,fRr,nW,mRr,gRr,hRr,nFe,pRr,_Rr,l7,xSe;return me=new V({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),uE=new V({}),bE=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new uRr({props:{warning:!0,$$slots:{default:[SMt]},$$scope:{ctx:If}}}),vE=new V({}),TE=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/configuration_auto.py#L541"}}),ME=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/configuration_auto.py#L564",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),EE=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),yE=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/configuration_auto.py#L686",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),wE=new V({}),AE=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/tokenization_auto.py#L351"}}),xE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16329/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),kE=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),RE=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),SE=new V({}),PE=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),DE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16329/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Rh=new uRr({props:{$$slots:{default:[PMt]},$$scope:{ctx:If}}}),NE=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),jE=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),qE=new V({}),GE=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/processing_auto.py#L70"}}),VE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Xh=new uRr({props:{$$slots:{default:[$Mt]},$$scope:{ctx:If}}}),zE=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),WE=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),QE=new V({}),HE=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L707"}}),JE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),YE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),KE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ZE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e5=new V({}),o5=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L714"}}),t5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),a5=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),n5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s5=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l5=new V({}),i5=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L729"}}),c5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),f5=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),m5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),g5=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h5=new V({}),p5=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L736"}}),u5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),b5=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),v5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),T5=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F5=new V({}),C5=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L743"}}),E5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),y5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),w5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),A5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L5=new V({}),B5=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L752"}}),k5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),R5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),S5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),P5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$5=new V({}),I5=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L786"}}),N5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),j5=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),q5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),G5=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),O5=new V({}),X5=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L793"}}),z5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),W5=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),Q5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),H5=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U5=new V({}),J5=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L779"}}),K5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Z5=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),ey=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ry=new V({}),ty=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L761"}}),ny=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),sy=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),ly=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iy=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dy=new V({}),cy=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L768"}}),my=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),gy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),hy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),py=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_y=new V({}),uy=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L802"}}),vy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16329/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16329/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16329/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),Fy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),My=new V({}),Ey=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L841"}}),wy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Ay=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),Ly=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),By=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xy=new V({}),ky=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L848"}}),Sy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Py=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),$y=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Iy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dy=new V({}),Ny=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L871"}}),qy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Gy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Oy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vy=new V({}),zy=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L855"}}),Qy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Hy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),Uy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Jy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yy=new V({}),Ky=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L862"}}),ew=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),ow=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),rw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nw=new V({}),sw=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L880"}}),iw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),dw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),cw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mw=new V({}),gw=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L887"}}),pw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),_w=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),uw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vw=new V({}),Tw=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L834"}}),Cw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Mw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),Ew=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ww=new V({}),Aw=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L809"}}),Bw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),xw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),kw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Rw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Sw=new V({}),Pw=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L816"}}),Iw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),Dw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Nw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qw=new V({}),Gw=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_auto.py#L825"}}),Xw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),Vw=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),zw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qw=new V({}),Hw=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_tf_auto.py#L379"}}),Jw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Yw=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),Kw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Zw=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eA=new V({}),oA=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_tf_auto.py#L386"}}),tA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),aA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),nA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lA=new V({}),iA=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),cA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),fA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),mA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hA=new V({}),pA=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_tf_auto.py#L408"}}),uA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),bA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),vA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CA=new V({}),MA=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_tf_auto.py#L422"}}),yA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),wA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),AA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BA=new V({}),xA=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_tf_auto.py#L429"}}),RA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),SA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),PA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$A=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IA=new V({}),DA=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),jA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),qA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),GA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),OA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XA=new V({}),VA=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_tf_auto.py#L474"}}),WA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),QA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),HA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JA=new V({}),YA=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),ZA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),e0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),o0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t0=new V({}),a0=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_tf_auto.py#L465"}}),s0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),l0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),i0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c0=new V({}),f0=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_tf_auto.py#L447"}}),g0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),h0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),p0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u0=new V({}),b0=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_tf_auto.py#L415"}}),T0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),F0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),C0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),M0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E0=new V({}),y0=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_tf_auto.py#L490"}}),A0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),L0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),B0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k0=new V({}),R0=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),P0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),$0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),I0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),D0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),N0=new V({}),j0=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),G0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),O0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),X0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),V0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z0=new V({}),W0=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),H0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),U0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),J0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Y0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K0=new V({}),Z0=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),oL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),rL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),tL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nL=new V({}),sL=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),iL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),dL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),cL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mL=new V({}),gL=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),pL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),_L=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),uL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vL=new V({}),TL=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),CL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),ML=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),EL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wL=new V({}),AL=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),BL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),xL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),kL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),RL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SL=new V({}),PL=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),IL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),DL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),NL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qL=new V({}),GL=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),XL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),VL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),zL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),WL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QL=new V({}),HL=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),JL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16329/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),YL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),KL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o7=new V({}),r7=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),a7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16329/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16329/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),n7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),s7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16329/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16329/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16329/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ee=a("a"),lo=a("span"),f(me.$$.fragment),Ce=l(),Vo=a("span"),Ii=o("Auto Classes"),Df=l(),fa=a("p"),Di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),gE=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),hE=o("AutoConfig"),On=o(", "),Xn=a("a"),pE=o("AutoModel"),qi=o(`, and
`),Vn=a("a"),_E=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(qa.$$.fragment),fo=l(),_e=a("p"),n8=o("will create a model that is an instance of "),Oi=a("a"),s8=o("BertModel"),l8=o("."),zo=l(),Ga=a("p"),i8=o("There is one class of "),qf=a("code"),d8=o("AutoModel"),O$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Bke=l(),Xi=a("h2"),Gf=a("a"),ZQ=a("span"),f(uE.$$.fragment),X$e=l(),eH=a("span"),V$e=o("Extending the Auto Classes"),xke=l(),zn=a("p"),z$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),oH=a("code"),W$e=o("NewModel"),Q$e=o(", make sure you have a "),rH=a("code"),H$e=o("NewModelConfig"),U$e=o(` then you can add those to the auto
classes like this:`),kke=l(),f(bE.$$.fragment),Rke=l(),c8=a("p"),J$e=o("You will then be able to use the auto classes like you would usually do!"),Ske=l(),f(Of.$$.fragment),Pke=l(),Vi=a("h2"),Xf=a("a"),tH=a("span"),f(vE.$$.fragment),Y$e=l(),aH=a("span"),K$e=o("AutoConfig"),$ke=l(),Wo=a("div"),f(TE.$$.fragment),Z$e=l(),FE=a("p"),eIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),f8=a("a"),oIe=o("from_pretrained()"),rIe=o(" class method."),tIe=l(),CE=a("p"),aIe=o("This class cannot be instantiated directly using "),nH=a("code"),nIe=o("__init__()"),sIe=o(" (throws an error)."),lIe=l(),mo=a("div"),f(ME.$$.fragment),iIe=l(),sH=a("p"),dIe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),cIe=l(),zi=a("p"),fIe=o("The configuration class to instantiate is selected based on the "),lH=a("code"),mIe=o("model_type"),gIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),iH=a("code"),hIe=o("pretrained_model_name_or_path"),pIe=o(":"),_Ie=l(),v=a("ul"),Vf=a("li"),dH=a("strong"),uIe=o("albert"),bIe=o(" \u2014 "),m8=a("a"),vIe=o("AlbertConfig"),TIe=o(" (ALBERT model)"),FIe=l(),zf=a("li"),cH=a("strong"),CIe=o("bart"),MIe=o(" \u2014 "),g8=a("a"),EIe=o("BartConfig"),yIe=o(" (BART model)"),wIe=l(),Wf=a("li"),fH=a("strong"),AIe=o("beit"),LIe=o(" \u2014 "),h8=a("a"),BIe=o("BeitConfig"),xIe=o(" (BEiT model)"),kIe=l(),Qf=a("li"),mH=a("strong"),RIe=o("bert"),SIe=o(" \u2014 "),p8=a("a"),PIe=o("BertConfig"),$Ie=o(" (BERT model)"),IIe=l(),Hf=a("li"),gH=a("strong"),DIe=o("bert-generation"),NIe=o(" \u2014 "),_8=a("a"),jIe=o("BertGenerationConfig"),qIe=o(" (Bert Generation model)"),GIe=l(),Uf=a("li"),hH=a("strong"),OIe=o("big_bird"),XIe=o(" \u2014 "),u8=a("a"),VIe=o("BigBirdConfig"),zIe=o(" (BigBird model)"),WIe=l(),Jf=a("li"),pH=a("strong"),QIe=o("bigbird_pegasus"),HIe=o(" \u2014 "),b8=a("a"),UIe=o("BigBirdPegasusConfig"),JIe=o(" (BigBirdPegasus model)"),YIe=l(),Yf=a("li"),_H=a("strong"),KIe=o("blenderbot"),ZIe=o(" \u2014 "),v8=a("a"),eDe=o("BlenderbotConfig"),oDe=o(" (Blenderbot model)"),rDe=l(),Kf=a("li"),uH=a("strong"),tDe=o("blenderbot-small"),aDe=o(" \u2014 "),T8=a("a"),nDe=o("BlenderbotSmallConfig"),sDe=o(" (BlenderbotSmall model)"),lDe=l(),Zf=a("li"),bH=a("strong"),iDe=o("camembert"),dDe=o(" \u2014 "),F8=a("a"),cDe=o("CamembertConfig"),fDe=o(" (CamemBERT model)"),mDe=l(),em=a("li"),vH=a("strong"),gDe=o("canine"),hDe=o(" \u2014 "),C8=a("a"),pDe=o("CanineConfig"),_De=o(" (Canine model)"),uDe=l(),om=a("li"),TH=a("strong"),bDe=o("clip"),vDe=o(" \u2014 "),M8=a("a"),TDe=o("CLIPConfig"),FDe=o(" (CLIP model)"),CDe=l(),rm=a("li"),FH=a("strong"),MDe=o("convbert"),EDe=o(" \u2014 "),E8=a("a"),yDe=o("ConvBertConfig"),wDe=o(" (ConvBERT model)"),ADe=l(),tm=a("li"),CH=a("strong"),LDe=o("convnext"),BDe=o(" \u2014 "),y8=a("a"),xDe=o("ConvNextConfig"),kDe=o(" (ConvNext model)"),RDe=l(),am=a("li"),MH=a("strong"),SDe=o("ctrl"),PDe=o(" \u2014 "),w8=a("a"),$De=o("CTRLConfig"),IDe=o(" (CTRL model)"),DDe=l(),nm=a("li"),EH=a("strong"),NDe=o("data2vec-audio"),jDe=o(" \u2014 "),A8=a("a"),qDe=o("Data2VecAudioConfig"),GDe=o(" (Data2VecAudio model)"),ODe=l(),sm=a("li"),yH=a("strong"),XDe=o("data2vec-text"),VDe=o(" \u2014 "),L8=a("a"),zDe=o("Data2VecTextConfig"),WDe=o(" (Data2VecText model)"),QDe=l(),lm=a("li"),wH=a("strong"),HDe=o("deberta"),UDe=o(" \u2014 "),B8=a("a"),JDe=o("DebertaConfig"),YDe=o(" (DeBERTa model)"),KDe=l(),im=a("li"),AH=a("strong"),ZDe=o("deberta-v2"),eNe=o(" \u2014 "),x8=a("a"),oNe=o("DebertaV2Config"),rNe=o(" (DeBERTa-v2 model)"),tNe=l(),dm=a("li"),LH=a("strong"),aNe=o("decision_transformer"),nNe=o(" \u2014 "),k8=a("a"),sNe=o("DecisionTransformerConfig"),lNe=o(" (Decision Transformer model)"),iNe=l(),cm=a("li"),BH=a("strong"),dNe=o("deit"),cNe=o(" \u2014 "),R8=a("a"),fNe=o("DeiTConfig"),mNe=o(" (DeiT model)"),gNe=l(),fm=a("li"),xH=a("strong"),hNe=o("detr"),pNe=o(" \u2014 "),S8=a("a"),_Ne=o("DetrConfig"),uNe=o(" (DETR model)"),bNe=l(),mm=a("li"),kH=a("strong"),vNe=o("distilbert"),TNe=o(" \u2014 "),P8=a("a"),FNe=o("DistilBertConfig"),CNe=o(" (DistilBERT model)"),MNe=l(),gm=a("li"),RH=a("strong"),ENe=o("dpr"),yNe=o(" \u2014 "),$8=a("a"),wNe=o("DPRConfig"),ANe=o(" (DPR model)"),LNe=l(),hm=a("li"),SH=a("strong"),BNe=o("dpt"),xNe=o(" \u2014 "),I8=a("a"),kNe=o("DPTConfig"),RNe=o(" (DPT model)"),SNe=l(),pm=a("li"),PH=a("strong"),PNe=o("electra"),$Ne=o(" \u2014 "),D8=a("a"),INe=o("ElectraConfig"),DNe=o(" (ELECTRA model)"),NNe=l(),_m=a("li"),$H=a("strong"),jNe=o("encoder-decoder"),qNe=o(" \u2014 "),N8=a("a"),GNe=o("EncoderDecoderConfig"),ONe=o(" (Encoder decoder model)"),XNe=l(),um=a("li"),IH=a("strong"),VNe=o("flaubert"),zNe=o(" \u2014 "),j8=a("a"),WNe=o("FlaubertConfig"),QNe=o(" (FlauBERT model)"),HNe=l(),bm=a("li"),DH=a("strong"),UNe=o("fnet"),JNe=o(" \u2014 "),q8=a("a"),YNe=o("FNetConfig"),KNe=o(" (FNet model)"),ZNe=l(),vm=a("li"),NH=a("strong"),eje=o("fsmt"),oje=o(" \u2014 "),G8=a("a"),rje=o("FSMTConfig"),tje=o(" (FairSeq Machine-Translation model)"),aje=l(),Tm=a("li"),jH=a("strong"),nje=o("funnel"),sje=o(" \u2014 "),O8=a("a"),lje=o("FunnelConfig"),ije=o(" (Funnel Transformer model)"),dje=l(),Fm=a("li"),qH=a("strong"),cje=o("glpn"),fje=o(" \u2014 "),X8=a("a"),mje=o("GLPNConfig"),gje=o(" (GLPN model)"),hje=l(),Cm=a("li"),GH=a("strong"),pje=o("gpt2"),_je=o(" \u2014 "),V8=a("a"),uje=o("GPT2Config"),bje=o(" (OpenAI GPT-2 model)"),vje=l(),Mm=a("li"),OH=a("strong"),Tje=o("gpt_neo"),Fje=o(" \u2014 "),z8=a("a"),Cje=o("GPTNeoConfig"),Mje=o(" (GPT Neo model)"),Eje=l(),Em=a("li"),XH=a("strong"),yje=o("gptj"),wje=o(" \u2014 "),W8=a("a"),Aje=o("GPTJConfig"),Lje=o(" (GPT-J model)"),Bje=l(),ym=a("li"),VH=a("strong"),xje=o("hubert"),kje=o(" \u2014 "),Q8=a("a"),Rje=o("HubertConfig"),Sje=o(" (Hubert model)"),Pje=l(),wm=a("li"),zH=a("strong"),$je=o("ibert"),Ije=o(" \u2014 "),H8=a("a"),Dje=o("IBertConfig"),Nje=o(" (I-BERT model)"),jje=l(),Am=a("li"),WH=a("strong"),qje=o("imagegpt"),Gje=o(" \u2014 "),U8=a("a"),Oje=o("ImageGPTConfig"),Xje=o(" (ImageGPT model)"),Vje=l(),Lm=a("li"),QH=a("strong"),zje=o("layoutlm"),Wje=o(" \u2014 "),J8=a("a"),Qje=o("LayoutLMConfig"),Hje=o(" (LayoutLM model)"),Uje=l(),Bm=a("li"),HH=a("strong"),Jje=o("layoutlmv2"),Yje=o(" \u2014 "),Y8=a("a"),Kje=o("LayoutLMv2Config"),Zje=o(" (LayoutLMv2 model)"),eqe=l(),xm=a("li"),UH=a("strong"),oqe=o("led"),rqe=o(" \u2014 "),K8=a("a"),tqe=o("LEDConfig"),aqe=o(" (LED model)"),nqe=l(),km=a("li"),JH=a("strong"),sqe=o("longformer"),lqe=o(" \u2014 "),Z8=a("a"),iqe=o("LongformerConfig"),dqe=o(" (Longformer model)"),cqe=l(),Rm=a("li"),YH=a("strong"),fqe=o("luke"),mqe=o(" \u2014 "),eB=a("a"),gqe=o("LukeConfig"),hqe=o(" (LUKE model)"),pqe=l(),Sm=a("li"),KH=a("strong"),_qe=o("lxmert"),uqe=o(" \u2014 "),oB=a("a"),bqe=o("LxmertConfig"),vqe=o(" (LXMERT model)"),Tqe=l(),Pm=a("li"),ZH=a("strong"),Fqe=o("m2m_100"),Cqe=o(" \u2014 "),rB=a("a"),Mqe=o("M2M100Config"),Eqe=o(" (M2M100 model)"),yqe=l(),$m=a("li"),eU=a("strong"),wqe=o("marian"),Aqe=o(" \u2014 "),tB=a("a"),Lqe=o("MarianConfig"),Bqe=o(" (Marian model)"),xqe=l(),Im=a("li"),oU=a("strong"),kqe=o("maskformer"),Rqe=o(" \u2014 "),aB=a("a"),Sqe=o("MaskFormerConfig"),Pqe=o(" (MaskFormer model)"),$qe=l(),Dm=a("li"),rU=a("strong"),Iqe=o("mbart"),Dqe=o(" \u2014 "),nB=a("a"),Nqe=o("MBartConfig"),jqe=o(" (mBART model)"),qqe=l(),Nm=a("li"),tU=a("strong"),Gqe=o("megatron-bert"),Oqe=o(" \u2014 "),sB=a("a"),Xqe=o("MegatronBertConfig"),Vqe=o(" (MegatronBert model)"),zqe=l(),jm=a("li"),aU=a("strong"),Wqe=o("mobilebert"),Qqe=o(" \u2014 "),lB=a("a"),Hqe=o("MobileBertConfig"),Uqe=o(" (MobileBERT model)"),Jqe=l(),qm=a("li"),nU=a("strong"),Yqe=o("mpnet"),Kqe=o(" \u2014 "),iB=a("a"),Zqe=o("MPNetConfig"),eGe=o(" (MPNet model)"),oGe=l(),Gm=a("li"),sU=a("strong"),rGe=o("mt5"),tGe=o(" \u2014 "),dB=a("a"),aGe=o("MT5Config"),nGe=o(" (mT5 model)"),sGe=l(),Om=a("li"),lU=a("strong"),lGe=o("nystromformer"),iGe=o(" \u2014 "),cB=a("a"),dGe=o("NystromformerConfig"),cGe=o(" (Nystromformer model)"),fGe=l(),Xm=a("li"),iU=a("strong"),mGe=o("openai-gpt"),gGe=o(" \u2014 "),fB=a("a"),hGe=o("OpenAIGPTConfig"),pGe=o(" (OpenAI GPT model)"),_Ge=l(),Vm=a("li"),dU=a("strong"),uGe=o("pegasus"),bGe=o(" \u2014 "),mB=a("a"),vGe=o("PegasusConfig"),TGe=o(" (Pegasus model)"),FGe=l(),zm=a("li"),cU=a("strong"),CGe=o("perceiver"),MGe=o(" \u2014 "),gB=a("a"),EGe=o("PerceiverConfig"),yGe=o(" (Perceiver model)"),wGe=l(),Wm=a("li"),fU=a("strong"),AGe=o("plbart"),LGe=o(" \u2014 "),hB=a("a"),BGe=o("PLBartConfig"),xGe=o(" (PLBart model)"),kGe=l(),Qm=a("li"),mU=a("strong"),RGe=o("poolformer"),SGe=o(" \u2014 "),pB=a("a"),PGe=o("PoolFormerConfig"),$Ge=o(" (PoolFormer model)"),IGe=l(),Hm=a("li"),gU=a("strong"),DGe=o("prophetnet"),NGe=o(" \u2014 "),_B=a("a"),jGe=o("ProphetNetConfig"),qGe=o(" (ProphetNet model)"),GGe=l(),Um=a("li"),hU=a("strong"),OGe=o("qdqbert"),XGe=o(" \u2014 "),uB=a("a"),VGe=o("QDQBertConfig"),zGe=o(" (QDQBert model)"),WGe=l(),Jm=a("li"),pU=a("strong"),QGe=o("rag"),HGe=o(" \u2014 "),bB=a("a"),UGe=o("RagConfig"),JGe=o(" (RAG model)"),YGe=l(),Ym=a("li"),_U=a("strong"),KGe=o("realm"),ZGe=o(" \u2014 "),vB=a("a"),eOe=o("RealmConfig"),oOe=o(" (Realm model)"),rOe=l(),Km=a("li"),uU=a("strong"),tOe=o("reformer"),aOe=o(" \u2014 "),TB=a("a"),nOe=o("ReformerConfig"),sOe=o(" (Reformer model)"),lOe=l(),Zm=a("li"),bU=a("strong"),iOe=o("rembert"),dOe=o(" \u2014 "),FB=a("a"),cOe=o("RemBertConfig"),fOe=o(" (RemBERT model)"),mOe=l(),eg=a("li"),vU=a("strong"),gOe=o("resnet"),hOe=o(" \u2014 "),CB=a("a"),pOe=o("ResNetConfig"),_Oe=o(" (ResNet model)"),uOe=l(),og=a("li"),TU=a("strong"),bOe=o("retribert"),vOe=o(" \u2014 "),MB=a("a"),TOe=o("RetriBertConfig"),FOe=o(" (RetriBERT model)"),COe=l(),rg=a("li"),FU=a("strong"),MOe=o("roberta"),EOe=o(" \u2014 "),EB=a("a"),yOe=o("RobertaConfig"),wOe=o(" (RoBERTa model)"),AOe=l(),tg=a("li"),CU=a("strong"),LOe=o("roformer"),BOe=o(" \u2014 "),yB=a("a"),xOe=o("RoFormerConfig"),kOe=o(" (RoFormer model)"),ROe=l(),ag=a("li"),MU=a("strong"),SOe=o("segformer"),POe=o(" \u2014 "),wB=a("a"),$Oe=o("SegformerConfig"),IOe=o(" (SegFormer model)"),DOe=l(),ng=a("li"),EU=a("strong"),NOe=o("sew"),jOe=o(" \u2014 "),AB=a("a"),qOe=o("SEWConfig"),GOe=o(" (SEW model)"),OOe=l(),sg=a("li"),yU=a("strong"),XOe=o("sew-d"),VOe=o(" \u2014 "),LB=a("a"),zOe=o("SEWDConfig"),WOe=o(" (SEW-D model)"),QOe=l(),lg=a("li"),wU=a("strong"),HOe=o("speech-encoder-decoder"),UOe=o(" \u2014 "),BB=a("a"),JOe=o("SpeechEncoderDecoderConfig"),YOe=o(" (Speech Encoder decoder model)"),KOe=l(),ig=a("li"),AU=a("strong"),ZOe=o("speech_to_text"),eXe=o(" \u2014 "),xB=a("a"),oXe=o("Speech2TextConfig"),rXe=o(" (Speech2Text model)"),tXe=l(),dg=a("li"),LU=a("strong"),aXe=o("speech_to_text_2"),nXe=o(" \u2014 "),kB=a("a"),sXe=o("Speech2Text2Config"),lXe=o(" (Speech2Text2 model)"),iXe=l(),cg=a("li"),BU=a("strong"),dXe=o("splinter"),cXe=o(" \u2014 "),RB=a("a"),fXe=o("SplinterConfig"),mXe=o(" (Splinter model)"),gXe=l(),fg=a("li"),xU=a("strong"),hXe=o("squeezebert"),pXe=o(" \u2014 "),SB=a("a"),_Xe=o("SqueezeBertConfig"),uXe=o(" (SqueezeBERT model)"),bXe=l(),mg=a("li"),kU=a("strong"),vXe=o("swin"),TXe=o(" \u2014 "),PB=a("a"),FXe=o("SwinConfig"),CXe=o(" (Swin model)"),MXe=l(),gg=a("li"),RU=a("strong"),EXe=o("t5"),yXe=o(" \u2014 "),$B=a("a"),wXe=o("T5Config"),AXe=o(" (T5 model)"),LXe=l(),hg=a("li"),SU=a("strong"),BXe=o("tapas"),xXe=o(" \u2014 "),IB=a("a"),kXe=o("TapasConfig"),RXe=o(" (TAPAS model)"),SXe=l(),pg=a("li"),PU=a("strong"),PXe=o("transfo-xl"),$Xe=o(" \u2014 "),DB=a("a"),IXe=o("TransfoXLConfig"),DXe=o(" (Transformer-XL model)"),NXe=l(),_g=a("li"),$U=a("strong"),jXe=o("trocr"),qXe=o(" \u2014 "),NB=a("a"),GXe=o("TrOCRConfig"),OXe=o(" (TrOCR model)"),XXe=l(),ug=a("li"),IU=a("strong"),VXe=o("unispeech"),zXe=o(" \u2014 "),jB=a("a"),WXe=o("UniSpeechConfig"),QXe=o(" (UniSpeech model)"),HXe=l(),bg=a("li"),DU=a("strong"),UXe=o("unispeech-sat"),JXe=o(" \u2014 "),qB=a("a"),YXe=o("UniSpeechSatConfig"),KXe=o(" (UniSpeechSat model)"),ZXe=l(),vg=a("li"),NU=a("strong"),eVe=o("van"),oVe=o(" \u2014 "),GB=a("a"),rVe=o("VanConfig"),tVe=o(" (VAN model)"),aVe=l(),Tg=a("li"),jU=a("strong"),nVe=o("vilt"),sVe=o(" \u2014 "),OB=a("a"),lVe=o("ViltConfig"),iVe=o(" (ViLT model)"),dVe=l(),Fg=a("li"),qU=a("strong"),cVe=o("vision-encoder-decoder"),fVe=o(" \u2014 "),XB=a("a"),mVe=o("VisionEncoderDecoderConfig"),gVe=o(" (Vision Encoder decoder model)"),hVe=l(),Cg=a("li"),GU=a("strong"),pVe=o("vision-text-dual-encoder"),_Ve=o(" \u2014 "),VB=a("a"),uVe=o("VisionTextDualEncoderConfig"),bVe=o(" (VisionTextDualEncoder model)"),vVe=l(),Mg=a("li"),OU=a("strong"),TVe=o("visual_bert"),FVe=o(" \u2014 "),zB=a("a"),CVe=o("VisualBertConfig"),MVe=o(" (VisualBert model)"),EVe=l(),Eg=a("li"),XU=a("strong"),yVe=o("vit"),wVe=o(" \u2014 "),WB=a("a"),AVe=o("ViTConfig"),LVe=o(" (ViT model)"),BVe=l(),yg=a("li"),VU=a("strong"),xVe=o("vit_mae"),kVe=o(" \u2014 "),QB=a("a"),RVe=o("ViTMAEConfig"),SVe=o(" (ViTMAE model)"),PVe=l(),wg=a("li"),zU=a("strong"),$Ve=o("wav2vec2"),IVe=o(" \u2014 "),HB=a("a"),DVe=o("Wav2Vec2Config"),NVe=o(" (Wav2Vec2 model)"),jVe=l(),Ag=a("li"),WU=a("strong"),qVe=o("wavlm"),GVe=o(" \u2014 "),UB=a("a"),OVe=o("WavLMConfig"),XVe=o(" (WavLM model)"),VVe=l(),Lg=a("li"),QU=a("strong"),zVe=o("xglm"),WVe=o(" \u2014 "),JB=a("a"),QVe=o("XGLMConfig"),HVe=o(" (XGLM model)"),UVe=l(),Bg=a("li"),HU=a("strong"),JVe=o("xlm"),YVe=o(" \u2014 "),YB=a("a"),KVe=o("XLMConfig"),ZVe=o(" (XLM model)"),eze=l(),xg=a("li"),UU=a("strong"),oze=o("xlm-prophetnet"),rze=o(" \u2014 "),KB=a("a"),tze=o("XLMProphetNetConfig"),aze=o(" (XLMProphetNet model)"),nze=l(),kg=a("li"),JU=a("strong"),sze=o("xlm-roberta"),lze=o(" \u2014 "),ZB=a("a"),ize=o("XLMRobertaConfig"),dze=o(" (XLM-RoBERTa model)"),cze=l(),Rg=a("li"),YU=a("strong"),fze=o("xlm-roberta-xl"),mze=o(" \u2014 "),ex=a("a"),gze=o("XLMRobertaXLConfig"),hze=o(" (XLM-RoBERTa-XL model)"),pze=l(),Sg=a("li"),KU=a("strong"),_ze=o("xlnet"),uze=o(" \u2014 "),ox=a("a"),bze=o("XLNetConfig"),vze=o(" (XLNet model)"),Tze=l(),Pg=a("li"),ZU=a("strong"),Fze=o("yoso"),Cze=o(" \u2014 "),rx=a("a"),Mze=o("YosoConfig"),Eze=o(" (YOSO model)"),yze=l(),eJ=a("p"),wze=o("Examples:"),Aze=l(),f(EE.$$.fragment),Lze=l(),$g=a("div"),f(yE.$$.fragment),Bze=l(),oJ=a("p"),xze=o("Register a new configuration for this class."),Ike=l(),Wi=a("h2"),Ig=a("a"),rJ=a("span"),f(wE.$$.fragment),kze=l(),tJ=a("span"),Rze=o("AutoTokenizer"),Dke=l(),Qo=a("div"),f(AE.$$.fragment),Sze=l(),LE=a("p"),Pze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tx=a("a"),$ze=o("AutoTokenizer.from_pretrained()"),Ize=o(" class method."),Dze=l(),BE=a("p"),Nze=o("This class cannot be instantiated directly using "),aJ=a("code"),jze=o("__init__()"),qze=o(" (throws an error)."),Gze=l(),go=a("div"),f(xE.$$.fragment),Oze=l(),nJ=a("p"),Xze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Vze=l(),Oa=a("p"),zze=o("The tokenizer class to instantiate is selected based on the "),sJ=a("code"),Wze=o("model_type"),Qze=o(` property of the config object (either
passed as an argument or loaded from `),lJ=a("code"),Hze=o("pretrained_model_name_or_path"),Uze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iJ=a("code"),Jze=o("pretrained_model_name_or_path"),Yze=o(":"),Kze=l(),E=a("ul"),Wn=a("li"),dJ=a("strong"),Zze=o("albert"),eWe=o(" \u2014 "),ax=a("a"),oWe=o("AlbertTokenizer"),rWe=o(" or "),nx=a("a"),tWe=o("AlbertTokenizerFast"),aWe=o(" (ALBERT model)"),nWe=l(),Qn=a("li"),cJ=a("strong"),sWe=o("bart"),lWe=o(" \u2014 "),sx=a("a"),iWe=o("BartTokenizer"),dWe=o(" or "),lx=a("a"),cWe=o("BartTokenizerFast"),fWe=o(" (BART model)"),mWe=l(),Hn=a("li"),fJ=a("strong"),gWe=o("barthez"),hWe=o(" \u2014 "),ix=a("a"),pWe=o("BarthezTokenizer"),_We=o(" or "),dx=a("a"),uWe=o("BarthezTokenizerFast"),bWe=o(" (BARThez model)"),vWe=l(),Dg=a("li"),mJ=a("strong"),TWe=o("bartpho"),FWe=o(" \u2014 "),cx=a("a"),CWe=o("BartphoTokenizer"),MWe=o(" (BARTpho model)"),EWe=l(),Un=a("li"),gJ=a("strong"),yWe=o("bert"),wWe=o(" \u2014 "),fx=a("a"),AWe=o("BertTokenizer"),LWe=o(" or "),mx=a("a"),BWe=o("BertTokenizerFast"),xWe=o(" (BERT model)"),kWe=l(),Ng=a("li"),hJ=a("strong"),RWe=o("bert-generation"),SWe=o(" \u2014 "),gx=a("a"),PWe=o("BertGenerationTokenizer"),$We=o(" (Bert Generation model)"),IWe=l(),jg=a("li"),pJ=a("strong"),DWe=o("bert-japanese"),NWe=o(" \u2014 "),hx=a("a"),jWe=o("BertJapaneseTokenizer"),qWe=o(" (BertJapanese model)"),GWe=l(),qg=a("li"),_J=a("strong"),OWe=o("bertweet"),XWe=o(" \u2014 "),px=a("a"),VWe=o("BertweetTokenizer"),zWe=o(" (Bertweet model)"),WWe=l(),Jn=a("li"),uJ=a("strong"),QWe=o("big_bird"),HWe=o(" \u2014 "),_x=a("a"),UWe=o("BigBirdTokenizer"),JWe=o(" or "),ux=a("a"),YWe=o("BigBirdTokenizerFast"),KWe=o(" (BigBird model)"),ZWe=l(),Yn=a("li"),bJ=a("strong"),eQe=o("bigbird_pegasus"),oQe=o(" \u2014 "),bx=a("a"),rQe=o("PegasusTokenizer"),tQe=o(" or "),vx=a("a"),aQe=o("PegasusTokenizerFast"),nQe=o(" (BigBirdPegasus model)"),sQe=l(),Kn=a("li"),vJ=a("strong"),lQe=o("blenderbot"),iQe=o(" \u2014 "),Tx=a("a"),dQe=o("BlenderbotTokenizer"),cQe=o(" or "),Fx=a("a"),fQe=o("BlenderbotTokenizerFast"),mQe=o(" (Blenderbot model)"),gQe=l(),Gg=a("li"),TJ=a("strong"),hQe=o("blenderbot-small"),pQe=o(" \u2014 "),Cx=a("a"),_Qe=o("BlenderbotSmallTokenizer"),uQe=o(" (BlenderbotSmall model)"),bQe=l(),Og=a("li"),FJ=a("strong"),vQe=o("byt5"),TQe=o(" \u2014 "),Mx=a("a"),FQe=o("ByT5Tokenizer"),CQe=o(" (ByT5 model)"),MQe=l(),Zn=a("li"),CJ=a("strong"),EQe=o("camembert"),yQe=o(" \u2014 "),Ex=a("a"),wQe=o("CamembertTokenizer"),AQe=o(" or "),yx=a("a"),LQe=o("CamembertTokenizerFast"),BQe=o(" (CamemBERT model)"),xQe=l(),Xg=a("li"),MJ=a("strong"),kQe=o("canine"),RQe=o(" \u2014 "),wx=a("a"),SQe=o("CanineTokenizer"),PQe=o(" (Canine model)"),$Qe=l(),es=a("li"),EJ=a("strong"),IQe=o("clip"),DQe=o(" \u2014 "),Ax=a("a"),NQe=o("CLIPTokenizer"),jQe=o(" or "),Lx=a("a"),qQe=o("CLIPTokenizerFast"),GQe=o(" (CLIP model)"),OQe=l(),os=a("li"),yJ=a("strong"),XQe=o("convbert"),VQe=o(" \u2014 "),Bx=a("a"),zQe=o("ConvBertTokenizer"),WQe=o(" or "),xx=a("a"),QQe=o("ConvBertTokenizerFast"),HQe=o(" (ConvBERT model)"),UQe=l(),rs=a("li"),wJ=a("strong"),JQe=o("cpm"),YQe=o(" \u2014 "),kx=a("a"),KQe=o("CpmTokenizer"),ZQe=o(" or "),AJ=a("code"),eHe=o("CpmTokenizerFast"),oHe=o(" (CPM model)"),rHe=l(),Vg=a("li"),LJ=a("strong"),tHe=o("ctrl"),aHe=o(" \u2014 "),Rx=a("a"),nHe=o("CTRLTokenizer"),sHe=o(" (CTRL model)"),lHe=l(),ts=a("li"),BJ=a("strong"),iHe=o("deberta"),dHe=o(" \u2014 "),Sx=a("a"),cHe=o("DebertaTokenizer"),fHe=o(" or "),Px=a("a"),mHe=o("DebertaTokenizerFast"),gHe=o(" (DeBERTa model)"),hHe=l(),zg=a("li"),xJ=a("strong"),pHe=o("deberta-v2"),_He=o(" \u2014 "),$x=a("a"),uHe=o("DebertaV2Tokenizer"),bHe=o(" (DeBERTa-v2 model)"),vHe=l(),as=a("li"),kJ=a("strong"),THe=o("distilbert"),FHe=o(" \u2014 "),Ix=a("a"),CHe=o("DistilBertTokenizer"),MHe=o(" or "),Dx=a("a"),EHe=o("DistilBertTokenizerFast"),yHe=o(" (DistilBERT model)"),wHe=l(),ns=a("li"),RJ=a("strong"),AHe=o("dpr"),LHe=o(" \u2014 "),Nx=a("a"),BHe=o("DPRQuestionEncoderTokenizer"),xHe=o(" or "),jx=a("a"),kHe=o("DPRQuestionEncoderTokenizerFast"),RHe=o(" (DPR model)"),SHe=l(),ss=a("li"),SJ=a("strong"),PHe=o("electra"),$He=o(" \u2014 "),qx=a("a"),IHe=o("ElectraTokenizer"),DHe=o(" or "),Gx=a("a"),NHe=o("ElectraTokenizerFast"),jHe=o(" (ELECTRA model)"),qHe=l(),Wg=a("li"),PJ=a("strong"),GHe=o("flaubert"),OHe=o(" \u2014 "),Ox=a("a"),XHe=o("FlaubertTokenizer"),VHe=o(" (FlauBERT model)"),zHe=l(),ls=a("li"),$J=a("strong"),WHe=o("fnet"),QHe=o(" \u2014 "),Xx=a("a"),HHe=o("FNetTokenizer"),UHe=o(" or "),Vx=a("a"),JHe=o("FNetTokenizerFast"),YHe=o(" (FNet model)"),KHe=l(),Qg=a("li"),IJ=a("strong"),ZHe=o("fsmt"),eUe=o(" \u2014 "),zx=a("a"),oUe=o("FSMTTokenizer"),rUe=o(" (FairSeq Machine-Translation model)"),tUe=l(),is=a("li"),DJ=a("strong"),aUe=o("funnel"),nUe=o(" \u2014 "),Wx=a("a"),sUe=o("FunnelTokenizer"),lUe=o(" or "),Qx=a("a"),iUe=o("FunnelTokenizerFast"),dUe=o(" (Funnel Transformer model)"),cUe=l(),ds=a("li"),NJ=a("strong"),fUe=o("gpt2"),mUe=o(" \u2014 "),Hx=a("a"),gUe=o("GPT2Tokenizer"),hUe=o(" or "),Ux=a("a"),pUe=o("GPT2TokenizerFast"),_Ue=o(" (OpenAI GPT-2 model)"),uUe=l(),cs=a("li"),jJ=a("strong"),bUe=o("gpt_neo"),vUe=o(" \u2014 "),Jx=a("a"),TUe=o("GPT2Tokenizer"),FUe=o(" or "),Yx=a("a"),CUe=o("GPT2TokenizerFast"),MUe=o(" (GPT Neo model)"),EUe=l(),fs=a("li"),qJ=a("strong"),yUe=o("herbert"),wUe=o(" \u2014 "),Kx=a("a"),AUe=o("HerbertTokenizer"),LUe=o(" or "),Zx=a("a"),BUe=o("HerbertTokenizerFast"),xUe=o(" (HerBERT model)"),kUe=l(),Hg=a("li"),GJ=a("strong"),RUe=o("hubert"),SUe=o(" \u2014 "),ek=a("a"),PUe=o("Wav2Vec2CTCTokenizer"),$Ue=o(" (Hubert model)"),IUe=l(),ms=a("li"),OJ=a("strong"),DUe=o("ibert"),NUe=o(" \u2014 "),ok=a("a"),jUe=o("RobertaTokenizer"),qUe=o(" or "),rk=a("a"),GUe=o("RobertaTokenizerFast"),OUe=o(" (I-BERT model)"),XUe=l(),gs=a("li"),XJ=a("strong"),VUe=o("layoutlm"),zUe=o(" \u2014 "),tk=a("a"),WUe=o("LayoutLMTokenizer"),QUe=o(" or "),ak=a("a"),HUe=o("LayoutLMTokenizerFast"),UUe=o(" (LayoutLM model)"),JUe=l(),hs=a("li"),VJ=a("strong"),YUe=o("layoutlmv2"),KUe=o(" \u2014 "),nk=a("a"),ZUe=o("LayoutLMv2Tokenizer"),eJe=o(" or "),sk=a("a"),oJe=o("LayoutLMv2TokenizerFast"),rJe=o(" (LayoutLMv2 model)"),tJe=l(),ps=a("li"),zJ=a("strong"),aJe=o("layoutxlm"),nJe=o(" \u2014 "),lk=a("a"),sJe=o("LayoutXLMTokenizer"),lJe=o(" or "),ik=a("a"),iJe=o("LayoutXLMTokenizerFast"),dJe=o(" (LayoutXLM model)"),cJe=l(),_s=a("li"),WJ=a("strong"),fJe=o("led"),mJe=o(" \u2014 "),dk=a("a"),gJe=o("LEDTokenizer"),hJe=o(" or "),ck=a("a"),pJe=o("LEDTokenizerFast"),_Je=o(" (LED model)"),uJe=l(),us=a("li"),QJ=a("strong"),bJe=o("longformer"),vJe=o(" \u2014 "),fk=a("a"),TJe=o("LongformerTokenizer"),FJe=o(" or "),mk=a("a"),CJe=o("LongformerTokenizerFast"),MJe=o(" (Longformer model)"),EJe=l(),Ug=a("li"),HJ=a("strong"),yJe=o("luke"),wJe=o(" \u2014 "),gk=a("a"),AJe=o("LukeTokenizer"),LJe=o(" (LUKE model)"),BJe=l(),bs=a("li"),UJ=a("strong"),xJe=o("lxmert"),kJe=o(" \u2014 "),hk=a("a"),RJe=o("LxmertTokenizer"),SJe=o(" or "),pk=a("a"),PJe=o("LxmertTokenizerFast"),$Je=o(" (LXMERT model)"),IJe=l(),Jg=a("li"),JJ=a("strong"),DJe=o("m2m_100"),NJe=o(" \u2014 "),_k=a("a"),jJe=o("M2M100Tokenizer"),qJe=o(" (M2M100 model)"),GJe=l(),Yg=a("li"),YJ=a("strong"),OJe=o("marian"),XJe=o(" \u2014 "),uk=a("a"),VJe=o("MarianTokenizer"),zJe=o(" (Marian model)"),WJe=l(),vs=a("li"),KJ=a("strong"),QJe=o("mbart"),HJe=o(" \u2014 "),bk=a("a"),UJe=o("MBartTokenizer"),JJe=o(" or "),vk=a("a"),YJe=o("MBartTokenizerFast"),KJe=o(" (mBART model)"),ZJe=l(),Ts=a("li"),ZJ=a("strong"),eYe=o("mbart50"),oYe=o(" \u2014 "),Tk=a("a"),rYe=o("MBart50Tokenizer"),tYe=o(" or "),Fk=a("a"),aYe=o("MBart50TokenizerFast"),nYe=o(" (mBART-50 model)"),sYe=l(),Kg=a("li"),eY=a("strong"),lYe=o("mluke"),iYe=o(" \u2014 "),Ck=a("a"),dYe=o("MLukeTokenizer"),cYe=o(" (mLUKE model)"),fYe=l(),Fs=a("li"),oY=a("strong"),mYe=o("mobilebert"),gYe=o(" \u2014 "),Mk=a("a"),hYe=o("MobileBertTokenizer"),pYe=o(" or "),Ek=a("a"),_Ye=o("MobileBertTokenizerFast"),uYe=o(" (MobileBERT model)"),bYe=l(),Cs=a("li"),rY=a("strong"),vYe=o("mpnet"),TYe=o(" \u2014 "),yk=a("a"),FYe=o("MPNetTokenizer"),CYe=o(" or "),wk=a("a"),MYe=o("MPNetTokenizerFast"),EYe=o(" (MPNet model)"),yYe=l(),Ms=a("li"),tY=a("strong"),wYe=o("mt5"),AYe=o(" \u2014 "),Ak=a("a"),LYe=o("MT5Tokenizer"),BYe=o(" or "),Lk=a("a"),xYe=o("MT5TokenizerFast"),kYe=o(" (mT5 model)"),RYe=l(),Es=a("li"),aY=a("strong"),SYe=o("openai-gpt"),PYe=o(" \u2014 "),Bk=a("a"),$Ye=o("OpenAIGPTTokenizer"),IYe=o(" or "),xk=a("a"),DYe=o("OpenAIGPTTokenizerFast"),NYe=o(" (OpenAI GPT model)"),jYe=l(),ys=a("li"),nY=a("strong"),qYe=o("pegasus"),GYe=o(" \u2014 "),kk=a("a"),OYe=o("PegasusTokenizer"),XYe=o(" or "),Rk=a("a"),VYe=o("PegasusTokenizerFast"),zYe=o(" (Pegasus model)"),WYe=l(),Zg=a("li"),sY=a("strong"),QYe=o("perceiver"),HYe=o(" \u2014 "),Sk=a("a"),UYe=o("PerceiverTokenizer"),JYe=o(" (Perceiver model)"),YYe=l(),eh=a("li"),lY=a("strong"),KYe=o("phobert"),ZYe=o(" \u2014 "),Pk=a("a"),eKe=o("PhobertTokenizer"),oKe=o(" (PhoBERT model)"),rKe=l(),oh=a("li"),iY=a("strong"),tKe=o("plbart"),aKe=o(" \u2014 "),$k=a("a"),nKe=o("PLBartTokenizer"),sKe=o(" (PLBart model)"),lKe=l(),rh=a("li"),dY=a("strong"),iKe=o("prophetnet"),dKe=o(" \u2014 "),Ik=a("a"),cKe=o("ProphetNetTokenizer"),fKe=o(" (ProphetNet model)"),mKe=l(),ws=a("li"),cY=a("strong"),gKe=o("qdqbert"),hKe=o(" \u2014 "),Dk=a("a"),pKe=o("BertTokenizer"),_Ke=o(" or "),Nk=a("a"),uKe=o("BertTokenizerFast"),bKe=o(" (QDQBert model)"),vKe=l(),th=a("li"),fY=a("strong"),TKe=o("rag"),FKe=o(" \u2014 "),jk=a("a"),CKe=o("RagTokenizer"),MKe=o(" (RAG model)"),EKe=l(),As=a("li"),mY=a("strong"),yKe=o("realm"),wKe=o(" \u2014 "),qk=a("a"),AKe=o("RealmTokenizer"),LKe=o(" or "),Gk=a("a"),BKe=o("RealmTokenizerFast"),xKe=o(" (Realm model)"),kKe=l(),Ls=a("li"),gY=a("strong"),RKe=o("reformer"),SKe=o(" \u2014 "),Ok=a("a"),PKe=o("ReformerTokenizer"),$Ke=o(" or "),Xk=a("a"),IKe=o("ReformerTokenizerFast"),DKe=o(" (Reformer model)"),NKe=l(),Bs=a("li"),hY=a("strong"),jKe=o("rembert"),qKe=o(" \u2014 "),Vk=a("a"),GKe=o("RemBertTokenizer"),OKe=o(" or "),zk=a("a"),XKe=o("RemBertTokenizerFast"),VKe=o(" (RemBERT model)"),zKe=l(),xs=a("li"),pY=a("strong"),WKe=o("retribert"),QKe=o(" \u2014 "),Wk=a("a"),HKe=o("RetriBertTokenizer"),UKe=o(" or "),Qk=a("a"),JKe=o("RetriBertTokenizerFast"),YKe=o(" (RetriBERT model)"),KKe=l(),ks=a("li"),_Y=a("strong"),ZKe=o("roberta"),eZe=o(" \u2014 "),Hk=a("a"),oZe=o("RobertaTokenizer"),rZe=o(" or "),Uk=a("a"),tZe=o("RobertaTokenizerFast"),aZe=o(" (RoBERTa model)"),nZe=l(),Rs=a("li"),uY=a("strong"),sZe=o("roformer"),lZe=o(" \u2014 "),Jk=a("a"),iZe=o("RoFormerTokenizer"),dZe=o(" or "),Yk=a("a"),cZe=o("RoFormerTokenizerFast"),fZe=o(" (RoFormer model)"),mZe=l(),ah=a("li"),bY=a("strong"),gZe=o("speech_to_text"),hZe=o(" \u2014 "),Kk=a("a"),pZe=o("Speech2TextTokenizer"),_Ze=o(" (Speech2Text model)"),uZe=l(),nh=a("li"),vY=a("strong"),bZe=o("speech_to_text_2"),vZe=o(" \u2014 "),Zk=a("a"),TZe=o("Speech2Text2Tokenizer"),FZe=o(" (Speech2Text2 model)"),CZe=l(),Ss=a("li"),TY=a("strong"),MZe=o("splinter"),EZe=o(" \u2014 "),eR=a("a"),yZe=o("SplinterTokenizer"),wZe=o(" or "),oR=a("a"),AZe=o("SplinterTokenizerFast"),LZe=o(" (Splinter model)"),BZe=l(),Ps=a("li"),FY=a("strong"),xZe=o("squeezebert"),kZe=o(" \u2014 "),rR=a("a"),RZe=o("SqueezeBertTokenizer"),SZe=o(" or "),tR=a("a"),PZe=o("SqueezeBertTokenizerFast"),$Ze=o(" (SqueezeBERT model)"),IZe=l(),$s=a("li"),CY=a("strong"),DZe=o("t5"),NZe=o(" \u2014 "),aR=a("a"),jZe=o("T5Tokenizer"),qZe=o(" or "),nR=a("a"),GZe=o("T5TokenizerFast"),OZe=o(" (T5 model)"),XZe=l(),sh=a("li"),MY=a("strong"),VZe=o("tapas"),zZe=o(" \u2014 "),sR=a("a"),WZe=o("TapasTokenizer"),QZe=o(" (TAPAS model)"),HZe=l(),lh=a("li"),EY=a("strong"),UZe=o("transfo-xl"),JZe=o(" \u2014 "),lR=a("a"),YZe=o("TransfoXLTokenizer"),KZe=o(" (Transformer-XL model)"),ZZe=l(),ih=a("li"),yY=a("strong"),eeo=o("wav2vec2"),oeo=o(" \u2014 "),iR=a("a"),reo=o("Wav2Vec2CTCTokenizer"),teo=o(" (Wav2Vec2 model)"),aeo=l(),dh=a("li"),wY=a("strong"),neo=o("wav2vec2_phoneme"),seo=o(" \u2014 "),dR=a("a"),leo=o("Wav2Vec2PhonemeCTCTokenizer"),ieo=o(" (Wav2Vec2Phoneme model)"),deo=l(),Is=a("li"),AY=a("strong"),ceo=o("xglm"),feo=o(" \u2014 "),cR=a("a"),meo=o("XGLMTokenizer"),geo=o(" or "),fR=a("a"),heo=o("XGLMTokenizerFast"),peo=o(" (XGLM model)"),_eo=l(),ch=a("li"),LY=a("strong"),ueo=o("xlm"),beo=o(" \u2014 "),mR=a("a"),veo=o("XLMTokenizer"),Teo=o(" (XLM model)"),Feo=l(),fh=a("li"),BY=a("strong"),Ceo=o("xlm-prophetnet"),Meo=o(" \u2014 "),gR=a("a"),Eeo=o("XLMProphetNetTokenizer"),yeo=o(" (XLMProphetNet model)"),weo=l(),Ds=a("li"),xY=a("strong"),Aeo=o("xlm-roberta"),Leo=o(" \u2014 "),hR=a("a"),Beo=o("XLMRobertaTokenizer"),xeo=o(" or "),pR=a("a"),keo=o("XLMRobertaTokenizerFast"),Reo=o(" (XLM-RoBERTa model)"),Seo=l(),Ns=a("li"),kY=a("strong"),Peo=o("xlnet"),$eo=o(" \u2014 "),_R=a("a"),Ieo=o("XLNetTokenizer"),Deo=o(" or "),uR=a("a"),Neo=o("XLNetTokenizerFast"),jeo=o(" (XLNet model)"),qeo=l(),RY=a("p"),Geo=o("Examples:"),Oeo=l(),f(kE.$$.fragment),Xeo=l(),mh=a("div"),f(RE.$$.fragment),Veo=l(),SY=a("p"),zeo=o("Register a new tokenizer in this mapping."),Nke=l(),Qi=a("h2"),gh=a("a"),PY=a("span"),f(SE.$$.fragment),Weo=l(),$Y=a("span"),Qeo=o("AutoFeatureExtractor"),jke=l(),Ho=a("div"),f(PE.$$.fragment),Heo=l(),$E=a("p"),Ueo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),bR=a("a"),Jeo=o("AutoFeatureExtractor.from_pretrained()"),Yeo=o(" class method."),Keo=l(),IE=a("p"),Zeo=o("This class cannot be instantiated directly using "),IY=a("code"),eoo=o("__init__()"),ooo=o(" (throws an error)."),roo=l(),$e=a("div"),f(DE.$$.fragment),too=l(),DY=a("p"),aoo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),noo=l(),Xa=a("p"),soo=o("The feature extractor class to instantiate is selected based on the "),NY=a("code"),loo=o("model_type"),ioo=o(` property of the config object
(either passed as an argument or loaded from `),jY=a("code"),doo=o("pretrained_model_name_or_path"),coo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),qY=a("code"),foo=o("pretrained_model_name_or_path"),moo=o(":"),goo=l(),te=a("ul"),hh=a("li"),GY=a("strong"),hoo=o("beit"),poo=o(" \u2014 "),vR=a("a"),_oo=o("BeitFeatureExtractor"),uoo=o(" (BEiT model)"),boo=l(),ph=a("li"),OY=a("strong"),voo=o("clip"),Too=o(" \u2014 "),TR=a("a"),Foo=o("CLIPFeatureExtractor"),Coo=o(" (CLIP model)"),Moo=l(),_h=a("li"),XY=a("strong"),Eoo=o("convnext"),yoo=o(" \u2014 "),FR=a("a"),woo=o("ConvNextFeatureExtractor"),Aoo=o(" (ConvNext model)"),Loo=l(),uh=a("li"),VY=a("strong"),Boo=o("deit"),xoo=o(" \u2014 "),CR=a("a"),koo=o("DeiTFeatureExtractor"),Roo=o(" (DeiT model)"),Soo=l(),bh=a("li"),zY=a("strong"),Poo=o("detr"),$oo=o(" \u2014 "),MR=a("a"),Ioo=o("DetrFeatureExtractor"),Doo=o(" (DETR model)"),Noo=l(),vh=a("li"),WY=a("strong"),joo=o("hubert"),qoo=o(" \u2014 "),ER=a("a"),Goo=o("Wav2Vec2FeatureExtractor"),Ooo=o(" (Hubert model)"),Xoo=l(),Th=a("li"),QY=a("strong"),Voo=o("layoutlmv2"),zoo=o(" \u2014 "),yR=a("a"),Woo=o("LayoutLMv2FeatureExtractor"),Qoo=o(" (LayoutLMv2 model)"),Hoo=l(),Fh=a("li"),HY=a("strong"),Uoo=o("maskformer"),Joo=o(" \u2014 "),wR=a("a"),Yoo=o("MaskFormerFeatureExtractor"),Koo=o(" (MaskFormer model)"),Zoo=l(),Ch=a("li"),UY=a("strong"),ero=o("perceiver"),oro=o(" \u2014 "),AR=a("a"),rro=o("PerceiverFeatureExtractor"),tro=o(" (Perceiver model)"),aro=l(),Mh=a("li"),JY=a("strong"),nro=o("poolformer"),sro=o(" \u2014 "),LR=a("a"),lro=o("PoolFormerFeatureExtractor"),iro=o(" (PoolFormer model)"),dro=l(),Eh=a("li"),YY=a("strong"),cro=o("resnet"),fro=o(" \u2014 "),BR=a("a"),mro=o("ConvNextFeatureExtractor"),gro=o(" (ResNet model)"),hro=l(),yh=a("li"),KY=a("strong"),pro=o("segformer"),_ro=o(" \u2014 "),xR=a("a"),uro=o("SegformerFeatureExtractor"),bro=o(" (SegFormer model)"),vro=l(),wh=a("li"),ZY=a("strong"),Tro=o("speech_to_text"),Fro=o(" \u2014 "),kR=a("a"),Cro=o("Speech2TextFeatureExtractor"),Mro=o(" (Speech2Text model)"),Ero=l(),Ah=a("li"),eK=a("strong"),yro=o("swin"),wro=o(" \u2014 "),RR=a("a"),Aro=o("ViTFeatureExtractor"),Lro=o(" (Swin model)"),Bro=l(),Lh=a("li"),oK=a("strong"),xro=o("van"),kro=o(" \u2014 "),SR=a("a"),Rro=o("ConvNextFeatureExtractor"),Sro=o(" (VAN model)"),Pro=l(),Bh=a("li"),rK=a("strong"),$ro=o("vit"),Iro=o(" \u2014 "),PR=a("a"),Dro=o("ViTFeatureExtractor"),Nro=o(" (ViT model)"),jro=l(),xh=a("li"),tK=a("strong"),qro=o("vit_mae"),Gro=o(" \u2014 "),$R=a("a"),Oro=o("ViTFeatureExtractor"),Xro=o(" (ViTMAE model)"),Vro=l(),kh=a("li"),aK=a("strong"),zro=o("wav2vec2"),Wro=o(" \u2014 "),IR=a("a"),Qro=o("Wav2Vec2FeatureExtractor"),Hro=o(" (Wav2Vec2 model)"),Uro=l(),f(Rh.$$.fragment),Jro=l(),nK=a("p"),Yro=o("Examples:"),Kro=l(),f(NE.$$.fragment),Zro=l(),Sh=a("div"),f(jE.$$.fragment),eto=l(),sK=a("p"),oto=o("Register a new feature extractor for this class."),qke=l(),Hi=a("h2"),Ph=a("a"),lK=a("span"),f(qE.$$.fragment),rto=l(),iK=a("span"),tto=o("AutoProcessor"),Gke=l(),Uo=a("div"),f(GE.$$.fragment),ato=l(),OE=a("p"),nto=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),DR=a("a"),sto=o("AutoProcessor.from_pretrained()"),lto=o(" class method."),ito=l(),XE=a("p"),dto=o("This class cannot be instantiated directly using "),dK=a("code"),cto=o("__init__()"),fto=o(" (throws an error)."),mto=l(),Ie=a("div"),f(VE.$$.fragment),gto=l(),cK=a("p"),hto=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),pto=l(),Ui=a("p"),_to=o("The processor class to instantiate is selected based on the "),fK=a("code"),uto=o("model_type"),bto=o(` property of the config object (either
passed as an argument or loaded from `),mK=a("code"),vto=o("pretrained_model_name_or_path"),Tto=o(" if possible):"),Fto=l(),xe=a("ul"),$h=a("li"),gK=a("strong"),Cto=o("clip"),Mto=o(" \u2014 "),NR=a("a"),Eto=o("CLIPProcessor"),yto=o(" (CLIP model)"),wto=l(),Ih=a("li"),hK=a("strong"),Ato=o("layoutlmv2"),Lto=o(" \u2014 "),jR=a("a"),Bto=o("LayoutLMv2Processor"),xto=o(" (LayoutLMv2 model)"),kto=l(),Dh=a("li"),pK=a("strong"),Rto=o("layoutxlm"),Sto=o(" \u2014 "),qR=a("a"),Pto=o("LayoutXLMProcessor"),$to=o(" (LayoutXLM model)"),Ito=l(),Nh=a("li"),_K=a("strong"),Dto=o("speech_to_text"),Nto=o(" \u2014 "),GR=a("a"),jto=o("Speech2TextProcessor"),qto=o(" (Speech2Text model)"),Gto=l(),jh=a("li"),uK=a("strong"),Oto=o("speech_to_text_2"),Xto=o(" \u2014 "),OR=a("a"),Vto=o("Speech2Text2Processor"),zto=o(" (Speech2Text2 model)"),Wto=l(),qh=a("li"),bK=a("strong"),Qto=o("trocr"),Hto=o(" \u2014 "),XR=a("a"),Uto=o("TrOCRProcessor"),Jto=o(" (TrOCR model)"),Yto=l(),Gh=a("li"),vK=a("strong"),Kto=o("vision-text-dual-encoder"),Zto=o(" \u2014 "),VR=a("a"),eao=o("VisionTextDualEncoderProcessor"),oao=o(" (VisionTextDualEncoder model)"),rao=l(),Oh=a("li"),TK=a("strong"),tao=o("wav2vec2"),aao=o(" \u2014 "),zR=a("a"),nao=o("Wav2Vec2Processor"),sao=o(" (Wav2Vec2 model)"),lao=l(),f(Xh.$$.fragment),iao=l(),FK=a("p"),dao=o("Examples:"),cao=l(),f(zE.$$.fragment),fao=l(),Vh=a("div"),f(WE.$$.fragment),mao=l(),CK=a("p"),gao=o("Register a new processor for this class."),Oke=l(),Ji=a("h2"),zh=a("a"),MK=a("span"),f(QE.$$.fragment),hao=l(),EK=a("span"),pao=o("AutoModel"),Xke=l(),Jo=a("div"),f(HE.$$.fragment),_ao=l(),Yi=a("p"),uao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yK=a("code"),bao=o("from_pretrained()"),vao=o("class method or the "),wK=a("code"),Tao=o("from_config()"),Fao=o(`class
method.`),Cao=l(),UE=a("p"),Mao=o("This class cannot be instantiated directly using "),AK=a("code"),Eao=o("__init__()"),yao=o(" (throws an error)."),wao=l(),Vr=a("div"),f(JE.$$.fragment),Aao=l(),LK=a("p"),Lao=o("Instantiates one of the base model classes of the library from a configuration."),Bao=l(),Ki=a("p"),xao=o(`Note:
Loading a model from its configuration file does `),BK=a("strong"),kao=o("not"),Rao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=a("code"),Sao=o("from_pretrained()"),Pao=o("to load the model weights."),$ao=l(),kK=a("p"),Iao=o("Examples:"),Dao=l(),f(YE.$$.fragment),Nao=l(),De=a("div"),f(KE.$$.fragment),jao=l(),RK=a("p"),qao=o("Instantiate one of the base model classes of the library from a pretrained model."),Gao=l(),Va=a("p"),Oao=o("The model class to instantiate is selected based on the "),SK=a("code"),Xao=o("model_type"),Vao=o(` property of the config object (either
passed as an argument or loaded from `),PK=a("code"),zao=o("pretrained_model_name_or_path"),Wao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$K=a("code"),Qao=o("pretrained_model_name_or_path"),Hao=o(":"),Uao=l(),F=a("ul"),Wh=a("li"),IK=a("strong"),Jao=o("albert"),Yao=o(" \u2014 "),WR=a("a"),Kao=o("AlbertModel"),Zao=o(" (ALBERT model)"),eno=l(),Qh=a("li"),DK=a("strong"),ono=o("bart"),rno=o(" \u2014 "),QR=a("a"),tno=o("BartModel"),ano=o(" (BART model)"),nno=l(),Hh=a("li"),NK=a("strong"),sno=o("beit"),lno=o(" \u2014 "),HR=a("a"),ino=o("BeitModel"),dno=o(" (BEiT model)"),cno=l(),Uh=a("li"),jK=a("strong"),fno=o("bert"),mno=o(" \u2014 "),UR=a("a"),gno=o("BertModel"),hno=o(" (BERT model)"),pno=l(),Jh=a("li"),qK=a("strong"),_no=o("bert-generation"),uno=o(" \u2014 "),JR=a("a"),bno=o("BertGenerationEncoder"),vno=o(" (Bert Generation model)"),Tno=l(),Yh=a("li"),GK=a("strong"),Fno=o("big_bird"),Cno=o(" \u2014 "),YR=a("a"),Mno=o("BigBirdModel"),Eno=o(" (BigBird model)"),yno=l(),Kh=a("li"),OK=a("strong"),wno=o("bigbird_pegasus"),Ano=o(" \u2014 "),KR=a("a"),Lno=o("BigBirdPegasusModel"),Bno=o(" (BigBirdPegasus model)"),xno=l(),Zh=a("li"),XK=a("strong"),kno=o("blenderbot"),Rno=o(" \u2014 "),ZR=a("a"),Sno=o("BlenderbotModel"),Pno=o(" (Blenderbot model)"),$no=l(),ep=a("li"),VK=a("strong"),Ino=o("blenderbot-small"),Dno=o(" \u2014 "),eS=a("a"),Nno=o("BlenderbotSmallModel"),jno=o(" (BlenderbotSmall model)"),qno=l(),op=a("li"),zK=a("strong"),Gno=o("camembert"),Ono=o(" \u2014 "),oS=a("a"),Xno=o("CamembertModel"),Vno=o(" (CamemBERT model)"),zno=l(),rp=a("li"),WK=a("strong"),Wno=o("canine"),Qno=o(" \u2014 "),rS=a("a"),Hno=o("CanineModel"),Uno=o(" (Canine model)"),Jno=l(),tp=a("li"),QK=a("strong"),Yno=o("clip"),Kno=o(" \u2014 "),tS=a("a"),Zno=o("CLIPModel"),eso=o(" (CLIP model)"),oso=l(),ap=a("li"),HK=a("strong"),rso=o("convbert"),tso=o(" \u2014 "),aS=a("a"),aso=o("ConvBertModel"),nso=o(" (ConvBERT model)"),sso=l(),np=a("li"),UK=a("strong"),lso=o("convnext"),iso=o(" \u2014 "),nS=a("a"),dso=o("ConvNextModel"),cso=o(" (ConvNext model)"),fso=l(),sp=a("li"),JK=a("strong"),mso=o("ctrl"),gso=o(" \u2014 "),sS=a("a"),hso=o("CTRLModel"),pso=o(" (CTRL model)"),_so=l(),lp=a("li"),YK=a("strong"),uso=o("data2vec-audio"),bso=o(" \u2014 "),lS=a("a"),vso=o("Data2VecAudioModel"),Tso=o(" (Data2VecAudio model)"),Fso=l(),ip=a("li"),KK=a("strong"),Cso=o("data2vec-text"),Mso=o(" \u2014 "),iS=a("a"),Eso=o("Data2VecTextModel"),yso=o(" (Data2VecText model)"),wso=l(),dp=a("li"),ZK=a("strong"),Aso=o("deberta"),Lso=o(" \u2014 "),dS=a("a"),Bso=o("DebertaModel"),xso=o(" (DeBERTa model)"),kso=l(),cp=a("li"),eZ=a("strong"),Rso=o("deberta-v2"),Sso=o(" \u2014 "),cS=a("a"),Pso=o("DebertaV2Model"),$so=o(" (DeBERTa-v2 model)"),Iso=l(),fp=a("li"),oZ=a("strong"),Dso=o("decision_transformer"),Nso=o(" \u2014 "),fS=a("a"),jso=o("DecisionTransformerModel"),qso=o(" (Decision Transformer model)"),Gso=l(),mp=a("li"),rZ=a("strong"),Oso=o("deit"),Xso=o(" \u2014 "),mS=a("a"),Vso=o("DeiTModel"),zso=o(" (DeiT model)"),Wso=l(),gp=a("li"),tZ=a("strong"),Qso=o("detr"),Hso=o(" \u2014 "),gS=a("a"),Uso=o("DetrModel"),Jso=o(" (DETR model)"),Yso=l(),hp=a("li"),aZ=a("strong"),Kso=o("distilbert"),Zso=o(" \u2014 "),hS=a("a"),elo=o("DistilBertModel"),olo=o(" (DistilBERT model)"),rlo=l(),pp=a("li"),nZ=a("strong"),tlo=o("dpr"),alo=o(" \u2014 "),pS=a("a"),nlo=o("DPRQuestionEncoder"),slo=o(" (DPR model)"),llo=l(),_p=a("li"),sZ=a("strong"),ilo=o("dpt"),dlo=o(" \u2014 "),_S=a("a"),clo=o("DPTModel"),flo=o(" (DPT model)"),mlo=l(),up=a("li"),lZ=a("strong"),glo=o("electra"),hlo=o(" \u2014 "),uS=a("a"),plo=o("ElectraModel"),_lo=o(" (ELECTRA model)"),ulo=l(),bp=a("li"),iZ=a("strong"),blo=o("flaubert"),vlo=o(" \u2014 "),bS=a("a"),Tlo=o("FlaubertModel"),Flo=o(" (FlauBERT model)"),Clo=l(),vp=a("li"),dZ=a("strong"),Mlo=o("fnet"),Elo=o(" \u2014 "),vS=a("a"),ylo=o("FNetModel"),wlo=o(" (FNet model)"),Alo=l(),Tp=a("li"),cZ=a("strong"),Llo=o("fsmt"),Blo=o(" \u2014 "),TS=a("a"),xlo=o("FSMTModel"),klo=o(" (FairSeq Machine-Translation model)"),Rlo=l(),js=a("li"),fZ=a("strong"),Slo=o("funnel"),Plo=o(" \u2014 "),FS=a("a"),$lo=o("FunnelModel"),Ilo=o(" or "),CS=a("a"),Dlo=o("FunnelBaseModel"),Nlo=o(" (Funnel Transformer model)"),jlo=l(),Fp=a("li"),mZ=a("strong"),qlo=o("glpn"),Glo=o(" \u2014 "),MS=a("a"),Olo=o("GLPNModel"),Xlo=o(" (GLPN model)"),Vlo=l(),Cp=a("li"),gZ=a("strong"),zlo=o("gpt2"),Wlo=o(" \u2014 "),ES=a("a"),Qlo=o("GPT2Model"),Hlo=o(" (OpenAI GPT-2 model)"),Ulo=l(),Mp=a("li"),hZ=a("strong"),Jlo=o("gpt_neo"),Ylo=o(" \u2014 "),yS=a("a"),Klo=o("GPTNeoModel"),Zlo=o(" (GPT Neo model)"),eio=l(),Ep=a("li"),pZ=a("strong"),oio=o("gptj"),rio=o(" \u2014 "),wS=a("a"),tio=o("GPTJModel"),aio=o(" (GPT-J model)"),nio=l(),yp=a("li"),_Z=a("strong"),sio=o("hubert"),lio=o(" \u2014 "),AS=a("a"),iio=o("HubertModel"),dio=o(" (Hubert model)"),cio=l(),wp=a("li"),uZ=a("strong"),fio=o("ibert"),mio=o(" \u2014 "),LS=a("a"),gio=o("IBertModel"),hio=o(" (I-BERT model)"),pio=l(),Ap=a("li"),bZ=a("strong"),_io=o("imagegpt"),uio=o(" \u2014 "),BS=a("a"),bio=o("ImageGPTModel"),vio=o(" (ImageGPT model)"),Tio=l(),Lp=a("li"),vZ=a("strong"),Fio=o("layoutlm"),Cio=o(" \u2014 "),xS=a("a"),Mio=o("LayoutLMModel"),Eio=o(" (LayoutLM model)"),yio=l(),Bp=a("li"),TZ=a("strong"),wio=o("layoutlmv2"),Aio=o(" \u2014 "),kS=a("a"),Lio=o("LayoutLMv2Model"),Bio=o(" (LayoutLMv2 model)"),xio=l(),xp=a("li"),FZ=a("strong"),kio=o("led"),Rio=o(" \u2014 "),RS=a("a"),Sio=o("LEDModel"),Pio=o(" (LED model)"),$io=l(),kp=a("li"),CZ=a("strong"),Iio=o("longformer"),Dio=o(" \u2014 "),SS=a("a"),Nio=o("LongformerModel"),jio=o(" (Longformer model)"),qio=l(),Rp=a("li"),MZ=a("strong"),Gio=o("luke"),Oio=o(" \u2014 "),PS=a("a"),Xio=o("LukeModel"),Vio=o(" (LUKE model)"),zio=l(),Sp=a("li"),EZ=a("strong"),Wio=o("lxmert"),Qio=o(" \u2014 "),$S=a("a"),Hio=o("LxmertModel"),Uio=o(" (LXMERT model)"),Jio=l(),Pp=a("li"),yZ=a("strong"),Yio=o("m2m_100"),Kio=o(" \u2014 "),IS=a("a"),Zio=o("M2M100Model"),edo=o(" (M2M100 model)"),odo=l(),$p=a("li"),wZ=a("strong"),rdo=o("marian"),tdo=o(" \u2014 "),DS=a("a"),ado=o("MarianModel"),ndo=o(" (Marian model)"),sdo=l(),Ip=a("li"),AZ=a("strong"),ldo=o("maskformer"),ido=o(" \u2014 "),NS=a("a"),ddo=o("MaskFormerModel"),cdo=o(" (MaskFormer model)"),fdo=l(),Dp=a("li"),LZ=a("strong"),mdo=o("mbart"),gdo=o(" \u2014 "),jS=a("a"),hdo=o("MBartModel"),pdo=o(" (mBART model)"),_do=l(),Np=a("li"),BZ=a("strong"),udo=o("megatron-bert"),bdo=o(" \u2014 "),qS=a("a"),vdo=o("MegatronBertModel"),Tdo=o(" (MegatronBert model)"),Fdo=l(),jp=a("li"),xZ=a("strong"),Cdo=o("mobilebert"),Mdo=o(" \u2014 "),GS=a("a"),Edo=o("MobileBertModel"),ydo=o(" (MobileBERT model)"),wdo=l(),qp=a("li"),kZ=a("strong"),Ado=o("mpnet"),Ldo=o(" \u2014 "),OS=a("a"),Bdo=o("MPNetModel"),xdo=o(" (MPNet model)"),kdo=l(),Gp=a("li"),RZ=a("strong"),Rdo=o("mt5"),Sdo=o(" \u2014 "),XS=a("a"),Pdo=o("MT5Model"),$do=o(" (mT5 model)"),Ido=l(),Op=a("li"),SZ=a("strong"),Ddo=o("nystromformer"),Ndo=o(" \u2014 "),VS=a("a"),jdo=o("NystromformerModel"),qdo=o(" (Nystromformer model)"),Gdo=l(),Xp=a("li"),PZ=a("strong"),Odo=o("openai-gpt"),Xdo=o(" \u2014 "),zS=a("a"),Vdo=o("OpenAIGPTModel"),zdo=o(" (OpenAI GPT model)"),Wdo=l(),Vp=a("li"),$Z=a("strong"),Qdo=o("pegasus"),Hdo=o(" \u2014 "),WS=a("a"),Udo=o("PegasusModel"),Jdo=o(" (Pegasus model)"),Ydo=l(),zp=a("li"),IZ=a("strong"),Kdo=o("perceiver"),Zdo=o(" \u2014 "),QS=a("a"),eco=o("PerceiverModel"),oco=o(" (Perceiver model)"),rco=l(),Wp=a("li"),DZ=a("strong"),tco=o("plbart"),aco=o(" \u2014 "),HS=a("a"),nco=o("PLBartModel"),sco=o(" (PLBart model)"),lco=l(),Qp=a("li"),NZ=a("strong"),ico=o("poolformer"),dco=o(" \u2014 "),US=a("a"),cco=o("PoolFormerModel"),fco=o(" (PoolFormer model)"),mco=l(),Hp=a("li"),jZ=a("strong"),gco=o("prophetnet"),hco=o(" \u2014 "),JS=a("a"),pco=o("ProphetNetModel"),_co=o(" (ProphetNet model)"),uco=l(),Up=a("li"),qZ=a("strong"),bco=o("qdqbert"),vco=o(" \u2014 "),YS=a("a"),Tco=o("QDQBertModel"),Fco=o(" (QDQBert model)"),Cco=l(),Jp=a("li"),GZ=a("strong"),Mco=o("reformer"),Eco=o(" \u2014 "),KS=a("a"),yco=o("ReformerModel"),wco=o(" (Reformer model)"),Aco=l(),Yp=a("li"),OZ=a("strong"),Lco=o("rembert"),Bco=o(" \u2014 "),ZS=a("a"),xco=o("RemBertModel"),kco=o(" (RemBERT model)"),Rco=l(),Kp=a("li"),XZ=a("strong"),Sco=o("resnet"),Pco=o(" \u2014 "),eP=a("a"),$co=o("ResNetModel"),Ico=o(" (ResNet model)"),Dco=l(),Zp=a("li"),VZ=a("strong"),Nco=o("retribert"),jco=o(" \u2014 "),oP=a("a"),qco=o("RetriBertModel"),Gco=o(" (RetriBERT model)"),Oco=l(),e_=a("li"),zZ=a("strong"),Xco=o("roberta"),Vco=o(" \u2014 "),rP=a("a"),zco=o("RobertaModel"),Wco=o(" (RoBERTa model)"),Qco=l(),o_=a("li"),WZ=a("strong"),Hco=o("roformer"),Uco=o(" \u2014 "),tP=a("a"),Jco=o("RoFormerModel"),Yco=o(" (RoFormer model)"),Kco=l(),r_=a("li"),QZ=a("strong"),Zco=o("segformer"),efo=o(" \u2014 "),aP=a("a"),ofo=o("SegformerModel"),rfo=o(" (SegFormer model)"),tfo=l(),t_=a("li"),HZ=a("strong"),afo=o("sew"),nfo=o(" \u2014 "),nP=a("a"),sfo=o("SEWModel"),lfo=o(" (SEW model)"),ifo=l(),a_=a("li"),UZ=a("strong"),dfo=o("sew-d"),cfo=o(" \u2014 "),sP=a("a"),ffo=o("SEWDModel"),mfo=o(" (SEW-D model)"),gfo=l(),n_=a("li"),JZ=a("strong"),hfo=o("speech_to_text"),pfo=o(" \u2014 "),lP=a("a"),_fo=o("Speech2TextModel"),ufo=o(" (Speech2Text model)"),bfo=l(),s_=a("li"),YZ=a("strong"),vfo=o("splinter"),Tfo=o(" \u2014 "),iP=a("a"),Ffo=o("SplinterModel"),Cfo=o(" (Splinter model)"),Mfo=l(),l_=a("li"),KZ=a("strong"),Efo=o("squeezebert"),yfo=o(" \u2014 "),dP=a("a"),wfo=o("SqueezeBertModel"),Afo=o(" (SqueezeBERT model)"),Lfo=l(),i_=a("li"),ZZ=a("strong"),Bfo=o("swin"),xfo=o(" \u2014 "),cP=a("a"),kfo=o("SwinModel"),Rfo=o(" (Swin model)"),Sfo=l(),d_=a("li"),eee=a("strong"),Pfo=o("t5"),$fo=o(" \u2014 "),fP=a("a"),Ifo=o("T5Model"),Dfo=o(" (T5 model)"),Nfo=l(),c_=a("li"),oee=a("strong"),jfo=o("tapas"),qfo=o(" \u2014 "),mP=a("a"),Gfo=o("TapasModel"),Ofo=o(" (TAPAS model)"),Xfo=l(),f_=a("li"),ree=a("strong"),Vfo=o("transfo-xl"),zfo=o(" \u2014 "),gP=a("a"),Wfo=o("TransfoXLModel"),Qfo=o(" (Transformer-XL model)"),Hfo=l(),m_=a("li"),tee=a("strong"),Ufo=o("unispeech"),Jfo=o(" \u2014 "),hP=a("a"),Yfo=o("UniSpeechModel"),Kfo=o(" (UniSpeech model)"),Zfo=l(),g_=a("li"),aee=a("strong"),emo=o("unispeech-sat"),omo=o(" \u2014 "),pP=a("a"),rmo=o("UniSpeechSatModel"),tmo=o(" (UniSpeechSat model)"),amo=l(),h_=a("li"),nee=a("strong"),nmo=o("van"),smo=o(" \u2014 "),_P=a("a"),lmo=o("VanModel"),imo=o(" (VAN model)"),dmo=l(),p_=a("li"),see=a("strong"),cmo=o("vilt"),fmo=o(" \u2014 "),uP=a("a"),mmo=o("ViltModel"),gmo=o(" (ViLT model)"),hmo=l(),__=a("li"),lee=a("strong"),pmo=o("vision-text-dual-encoder"),_mo=o(" \u2014 "),bP=a("a"),umo=o("VisionTextDualEncoderModel"),bmo=o(" (VisionTextDualEncoder model)"),vmo=l(),u_=a("li"),iee=a("strong"),Tmo=o("visual_bert"),Fmo=o(" \u2014 "),vP=a("a"),Cmo=o("VisualBertModel"),Mmo=o(" (VisualBert model)"),Emo=l(),b_=a("li"),dee=a("strong"),ymo=o("vit"),wmo=o(" \u2014 "),TP=a("a"),Amo=o("ViTModel"),Lmo=o(" (ViT model)"),Bmo=l(),v_=a("li"),cee=a("strong"),xmo=o("vit_mae"),kmo=o(" \u2014 "),FP=a("a"),Rmo=o("ViTMAEModel"),Smo=o(" (ViTMAE model)"),Pmo=l(),T_=a("li"),fee=a("strong"),$mo=o("wav2vec2"),Imo=o(" \u2014 "),CP=a("a"),Dmo=o("Wav2Vec2Model"),Nmo=o(" (Wav2Vec2 model)"),jmo=l(),F_=a("li"),mee=a("strong"),qmo=o("wavlm"),Gmo=o(" \u2014 "),MP=a("a"),Omo=o("WavLMModel"),Xmo=o(" (WavLM model)"),Vmo=l(),C_=a("li"),gee=a("strong"),zmo=o("xglm"),Wmo=o(" \u2014 "),EP=a("a"),Qmo=o("XGLMModel"),Hmo=o(" (XGLM model)"),Umo=l(),M_=a("li"),hee=a("strong"),Jmo=o("xlm"),Ymo=o(" \u2014 "),yP=a("a"),Kmo=o("XLMModel"),Zmo=o(" (XLM model)"),ego=l(),E_=a("li"),pee=a("strong"),ogo=o("xlm-prophetnet"),rgo=o(" \u2014 "),wP=a("a"),tgo=o("XLMProphetNetModel"),ago=o(" (XLMProphetNet model)"),ngo=l(),y_=a("li"),_ee=a("strong"),sgo=o("xlm-roberta"),lgo=o(" \u2014 "),AP=a("a"),igo=o("XLMRobertaModel"),dgo=o(" (XLM-RoBERTa model)"),cgo=l(),w_=a("li"),uee=a("strong"),fgo=o("xlm-roberta-xl"),mgo=o(" \u2014 "),LP=a("a"),ggo=o("XLMRobertaXLModel"),hgo=o(" (XLM-RoBERTa-XL model)"),pgo=l(),A_=a("li"),bee=a("strong"),_go=o("xlnet"),ugo=o(" \u2014 "),BP=a("a"),bgo=o("XLNetModel"),vgo=o(" (XLNet model)"),Tgo=l(),L_=a("li"),vee=a("strong"),Fgo=o("yoso"),Cgo=o(" \u2014 "),xP=a("a"),Mgo=o("YosoModel"),Ego=o(" (YOSO model)"),ygo=l(),B_=a("p"),wgo=o("The model is set in evaluation mode by default using "),Tee=a("code"),Ago=o("model.eval()"),Lgo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fee=a("code"),Bgo=o("model.train()"),xgo=l(),Cee=a("p"),kgo=o("Examples:"),Rgo=l(),f(ZE.$$.fragment),Vke=l(),Zi=a("h2"),x_=a("a"),Mee=a("span"),f(e5.$$.fragment),Sgo=l(),Eee=a("span"),Pgo=o("AutoModelForPreTraining"),zke=l(),Yo=a("div"),f(o5.$$.fragment),$go=l(),ed=a("p"),Igo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yee=a("code"),Dgo=o("from_pretrained()"),Ngo=o("class method or the "),wee=a("code"),jgo=o("from_config()"),qgo=o(`class
method.`),Ggo=l(),r5=a("p"),Ogo=o("This class cannot be instantiated directly using "),Aee=a("code"),Xgo=o("__init__()"),Vgo=o(" (throws an error)."),zgo=l(),zr=a("div"),f(t5.$$.fragment),Wgo=l(),Lee=a("p"),Qgo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Hgo=l(),od=a("p"),Ugo=o(`Note:
Loading a model from its configuration file does `),Bee=a("strong"),Jgo=o("not"),Ygo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xee=a("code"),Kgo=o("from_pretrained()"),Zgo=o("to load the model weights."),eho=l(),kee=a("p"),oho=o("Examples:"),rho=l(),f(a5.$$.fragment),tho=l(),Ne=a("div"),f(n5.$$.fragment),aho=l(),Ree=a("p"),nho=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sho=l(),za=a("p"),lho=o("The model class to instantiate is selected based on the "),See=a("code"),iho=o("model_type"),dho=o(` property of the config object (either
passed as an argument or loaded from `),Pee=a("code"),cho=o("pretrained_model_name_or_path"),fho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ee=a("code"),mho=o("pretrained_model_name_or_path"),gho=o(":"),hho=l(),k=a("ul"),k_=a("li"),Iee=a("strong"),pho=o("albert"),_ho=o(" \u2014 "),kP=a("a"),uho=o("AlbertForPreTraining"),bho=o(" (ALBERT model)"),vho=l(),R_=a("li"),Dee=a("strong"),Tho=o("bart"),Fho=o(" \u2014 "),RP=a("a"),Cho=o("BartForConditionalGeneration"),Mho=o(" (BART model)"),Eho=l(),S_=a("li"),Nee=a("strong"),yho=o("bert"),who=o(" \u2014 "),SP=a("a"),Aho=o("BertForPreTraining"),Lho=o(" (BERT model)"),Bho=l(),P_=a("li"),jee=a("strong"),xho=o("big_bird"),kho=o(" \u2014 "),PP=a("a"),Rho=o("BigBirdForPreTraining"),Sho=o(" (BigBird model)"),Pho=l(),$_=a("li"),qee=a("strong"),$ho=o("camembert"),Iho=o(" \u2014 "),$P=a("a"),Dho=o("CamembertForMaskedLM"),Nho=o(" (CamemBERT model)"),jho=l(),I_=a("li"),Gee=a("strong"),qho=o("ctrl"),Gho=o(" \u2014 "),IP=a("a"),Oho=o("CTRLLMHeadModel"),Xho=o(" (CTRL model)"),Vho=l(),D_=a("li"),Oee=a("strong"),zho=o("data2vec-text"),Who=o(" \u2014 "),DP=a("a"),Qho=o("Data2VecTextForMaskedLM"),Hho=o(" (Data2VecText model)"),Uho=l(),N_=a("li"),Xee=a("strong"),Jho=o("deberta"),Yho=o(" \u2014 "),NP=a("a"),Kho=o("DebertaForMaskedLM"),Zho=o(" (DeBERTa model)"),epo=l(),j_=a("li"),Vee=a("strong"),opo=o("deberta-v2"),rpo=o(" \u2014 "),jP=a("a"),tpo=o("DebertaV2ForMaskedLM"),apo=o(" (DeBERTa-v2 model)"),npo=l(),q_=a("li"),zee=a("strong"),spo=o("distilbert"),lpo=o(" \u2014 "),qP=a("a"),ipo=o("DistilBertForMaskedLM"),dpo=o(" (DistilBERT model)"),cpo=l(),G_=a("li"),Wee=a("strong"),fpo=o("electra"),mpo=o(" \u2014 "),GP=a("a"),gpo=o("ElectraForPreTraining"),hpo=o(" (ELECTRA model)"),ppo=l(),O_=a("li"),Qee=a("strong"),_po=o("flaubert"),upo=o(" \u2014 "),OP=a("a"),bpo=o("FlaubertWithLMHeadModel"),vpo=o(" (FlauBERT model)"),Tpo=l(),X_=a("li"),Hee=a("strong"),Fpo=o("fnet"),Cpo=o(" \u2014 "),XP=a("a"),Mpo=o("FNetForPreTraining"),Epo=o(" (FNet model)"),ypo=l(),V_=a("li"),Uee=a("strong"),wpo=o("fsmt"),Apo=o(" \u2014 "),VP=a("a"),Lpo=o("FSMTForConditionalGeneration"),Bpo=o(" (FairSeq Machine-Translation model)"),xpo=l(),z_=a("li"),Jee=a("strong"),kpo=o("funnel"),Rpo=o(" \u2014 "),zP=a("a"),Spo=o("FunnelForPreTraining"),Ppo=o(" (Funnel Transformer model)"),$po=l(),W_=a("li"),Yee=a("strong"),Ipo=o("gpt2"),Dpo=o(" \u2014 "),WP=a("a"),Npo=o("GPT2LMHeadModel"),jpo=o(" (OpenAI GPT-2 model)"),qpo=l(),Q_=a("li"),Kee=a("strong"),Gpo=o("ibert"),Opo=o(" \u2014 "),QP=a("a"),Xpo=o("IBertForMaskedLM"),Vpo=o(" (I-BERT model)"),zpo=l(),H_=a("li"),Zee=a("strong"),Wpo=o("layoutlm"),Qpo=o(" \u2014 "),HP=a("a"),Hpo=o("LayoutLMForMaskedLM"),Upo=o(" (LayoutLM model)"),Jpo=l(),U_=a("li"),eoe=a("strong"),Ypo=o("longformer"),Kpo=o(" \u2014 "),UP=a("a"),Zpo=o("LongformerForMaskedLM"),e_o=o(" (Longformer model)"),o_o=l(),J_=a("li"),ooe=a("strong"),r_o=o("lxmert"),t_o=o(" \u2014 "),JP=a("a"),a_o=o("LxmertForPreTraining"),n_o=o(" (LXMERT model)"),s_o=l(),Y_=a("li"),roe=a("strong"),l_o=o("megatron-bert"),i_o=o(" \u2014 "),YP=a("a"),d_o=o("MegatronBertForPreTraining"),c_o=o(" (MegatronBert model)"),f_o=l(),K_=a("li"),toe=a("strong"),m_o=o("mobilebert"),g_o=o(" \u2014 "),KP=a("a"),h_o=o("MobileBertForPreTraining"),p_o=o(" (MobileBERT model)"),__o=l(),Z_=a("li"),aoe=a("strong"),u_o=o("mpnet"),b_o=o(" \u2014 "),ZP=a("a"),v_o=o("MPNetForMaskedLM"),T_o=o(" (MPNet model)"),F_o=l(),eu=a("li"),noe=a("strong"),C_o=o("openai-gpt"),M_o=o(" \u2014 "),e$=a("a"),E_o=o("OpenAIGPTLMHeadModel"),y_o=o(" (OpenAI GPT model)"),w_o=l(),ou=a("li"),soe=a("strong"),A_o=o("retribert"),L_o=o(" \u2014 "),o$=a("a"),B_o=o("RetriBertModel"),x_o=o(" (RetriBERT model)"),k_o=l(),ru=a("li"),loe=a("strong"),R_o=o("roberta"),S_o=o(" \u2014 "),r$=a("a"),P_o=o("RobertaForMaskedLM"),$_o=o(" (RoBERTa model)"),I_o=l(),tu=a("li"),ioe=a("strong"),D_o=o("squeezebert"),N_o=o(" \u2014 "),t$=a("a"),j_o=o("SqueezeBertForMaskedLM"),q_o=o(" (SqueezeBERT model)"),G_o=l(),au=a("li"),doe=a("strong"),O_o=o("t5"),X_o=o(" \u2014 "),a$=a("a"),V_o=o("T5ForConditionalGeneration"),z_o=o(" (T5 model)"),W_o=l(),nu=a("li"),coe=a("strong"),Q_o=o("tapas"),H_o=o(" \u2014 "),n$=a("a"),U_o=o("TapasForMaskedLM"),J_o=o(" (TAPAS model)"),Y_o=l(),su=a("li"),foe=a("strong"),K_o=o("transfo-xl"),Z_o=o(" \u2014 "),s$=a("a"),euo=o("TransfoXLLMHeadModel"),ouo=o(" (Transformer-XL model)"),ruo=l(),lu=a("li"),moe=a("strong"),tuo=o("unispeech"),auo=o(" \u2014 "),l$=a("a"),nuo=o("UniSpeechForPreTraining"),suo=o(" (UniSpeech model)"),luo=l(),iu=a("li"),goe=a("strong"),iuo=o("unispeech-sat"),duo=o(" \u2014 "),i$=a("a"),cuo=o("UniSpeechSatForPreTraining"),fuo=o(" (UniSpeechSat model)"),muo=l(),du=a("li"),hoe=a("strong"),guo=o("visual_bert"),huo=o(" \u2014 "),d$=a("a"),puo=o("VisualBertForPreTraining"),_uo=o(" (VisualBert model)"),uuo=l(),cu=a("li"),poe=a("strong"),buo=o("vit_mae"),vuo=o(" \u2014 "),c$=a("a"),Tuo=o("ViTMAEForPreTraining"),Fuo=o(" (ViTMAE model)"),Cuo=l(),fu=a("li"),_oe=a("strong"),Muo=o("wav2vec2"),Euo=o(" \u2014 "),f$=a("a"),yuo=o("Wav2Vec2ForPreTraining"),wuo=o(" (Wav2Vec2 model)"),Auo=l(),mu=a("li"),uoe=a("strong"),Luo=o("xlm"),Buo=o(" \u2014 "),m$=a("a"),xuo=o("XLMWithLMHeadModel"),kuo=o(" (XLM model)"),Ruo=l(),gu=a("li"),boe=a("strong"),Suo=o("xlm-roberta"),Puo=o(" \u2014 "),g$=a("a"),$uo=o("XLMRobertaForMaskedLM"),Iuo=o(" (XLM-RoBERTa model)"),Duo=l(),hu=a("li"),voe=a("strong"),Nuo=o("xlm-roberta-xl"),juo=o(" \u2014 "),h$=a("a"),quo=o("XLMRobertaXLForMaskedLM"),Guo=o(" (XLM-RoBERTa-XL model)"),Ouo=l(),pu=a("li"),Toe=a("strong"),Xuo=o("xlnet"),Vuo=o(" \u2014 "),p$=a("a"),zuo=o("XLNetLMHeadModel"),Wuo=o(" (XLNet model)"),Quo=l(),_u=a("p"),Huo=o("The model is set in evaluation mode by default using "),Foe=a("code"),Uuo=o("model.eval()"),Juo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Coe=a("code"),Yuo=o("model.train()"),Kuo=l(),Moe=a("p"),Zuo=o("Examples:"),e2o=l(),f(s5.$$.fragment),Wke=l(),rd=a("h2"),uu=a("a"),Eoe=a("span"),f(l5.$$.fragment),o2o=l(),yoe=a("span"),r2o=o("AutoModelForCausalLM"),Qke=l(),Ko=a("div"),f(i5.$$.fragment),t2o=l(),td=a("p"),a2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),woe=a("code"),n2o=o("from_pretrained()"),s2o=o("class method or the "),Aoe=a("code"),l2o=o("from_config()"),i2o=o(`class
method.`),d2o=l(),d5=a("p"),c2o=o("This class cannot be instantiated directly using "),Loe=a("code"),f2o=o("__init__()"),m2o=o(" (throws an error)."),g2o=l(),Wr=a("div"),f(c5.$$.fragment),h2o=l(),Boe=a("p"),p2o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_2o=l(),ad=a("p"),u2o=o(`Note:
Loading a model from its configuration file does `),xoe=a("strong"),b2o=o("not"),v2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=a("code"),T2o=o("from_pretrained()"),F2o=o("to load the model weights."),C2o=l(),Roe=a("p"),M2o=o("Examples:"),E2o=l(),f(f5.$$.fragment),y2o=l(),je=a("div"),f(m5.$$.fragment),w2o=l(),Soe=a("p"),A2o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),L2o=l(),Wa=a("p"),B2o=o("The model class to instantiate is selected based on the "),Poe=a("code"),x2o=o("model_type"),k2o=o(` property of the config object (either
passed as an argument or loaded from `),$oe=a("code"),R2o=o("pretrained_model_name_or_path"),S2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ioe=a("code"),P2o=o("pretrained_model_name_or_path"),$2o=o(":"),I2o=l(),$=a("ul"),bu=a("li"),Doe=a("strong"),D2o=o("bart"),N2o=o(" \u2014 "),_$=a("a"),j2o=o("BartForCausalLM"),q2o=o(" (BART model)"),G2o=l(),vu=a("li"),Noe=a("strong"),O2o=o("bert"),X2o=o(" \u2014 "),u$=a("a"),V2o=o("BertLMHeadModel"),z2o=o(" (BERT model)"),W2o=l(),Tu=a("li"),joe=a("strong"),Q2o=o("bert-generation"),H2o=o(" \u2014 "),b$=a("a"),U2o=o("BertGenerationDecoder"),J2o=o(" (Bert Generation model)"),Y2o=l(),Fu=a("li"),qoe=a("strong"),K2o=o("big_bird"),Z2o=o(" \u2014 "),v$=a("a"),e1o=o("BigBirdForCausalLM"),o1o=o(" (BigBird model)"),r1o=l(),Cu=a("li"),Goe=a("strong"),t1o=o("bigbird_pegasus"),a1o=o(" \u2014 "),T$=a("a"),n1o=o("BigBirdPegasusForCausalLM"),s1o=o(" (BigBirdPegasus model)"),l1o=l(),Mu=a("li"),Ooe=a("strong"),i1o=o("blenderbot"),d1o=o(" \u2014 "),F$=a("a"),c1o=o("BlenderbotForCausalLM"),f1o=o(" (Blenderbot model)"),m1o=l(),Eu=a("li"),Xoe=a("strong"),g1o=o("blenderbot-small"),h1o=o(" \u2014 "),C$=a("a"),p1o=o("BlenderbotSmallForCausalLM"),_1o=o(" (BlenderbotSmall model)"),u1o=l(),yu=a("li"),Voe=a("strong"),b1o=o("camembert"),v1o=o(" \u2014 "),M$=a("a"),T1o=o("CamembertForCausalLM"),F1o=o(" (CamemBERT model)"),C1o=l(),wu=a("li"),zoe=a("strong"),M1o=o("ctrl"),E1o=o(" \u2014 "),E$=a("a"),y1o=o("CTRLLMHeadModel"),w1o=o(" (CTRL model)"),A1o=l(),Au=a("li"),Woe=a("strong"),L1o=o("data2vec-text"),B1o=o(" \u2014 "),y$=a("a"),x1o=o("Data2VecTextForCausalLM"),k1o=o(" (Data2VecText model)"),R1o=l(),Lu=a("li"),Qoe=a("strong"),S1o=o("electra"),P1o=o(" \u2014 "),w$=a("a"),$1o=o("ElectraForCausalLM"),I1o=o(" (ELECTRA model)"),D1o=l(),Bu=a("li"),Hoe=a("strong"),N1o=o("gpt2"),j1o=o(" \u2014 "),A$=a("a"),q1o=o("GPT2LMHeadModel"),G1o=o(" (OpenAI GPT-2 model)"),O1o=l(),xu=a("li"),Uoe=a("strong"),X1o=o("gpt_neo"),V1o=o(" \u2014 "),L$=a("a"),z1o=o("GPTNeoForCausalLM"),W1o=o(" (GPT Neo model)"),Q1o=l(),ku=a("li"),Joe=a("strong"),H1o=o("gptj"),U1o=o(" \u2014 "),B$=a("a"),J1o=o("GPTJForCausalLM"),Y1o=o(" (GPT-J model)"),K1o=l(),Ru=a("li"),Yoe=a("strong"),Z1o=o("marian"),ebo=o(" \u2014 "),x$=a("a"),obo=o("MarianForCausalLM"),rbo=o(" (Marian model)"),tbo=l(),Su=a("li"),Koe=a("strong"),abo=o("mbart"),nbo=o(" \u2014 "),k$=a("a"),sbo=o("MBartForCausalLM"),lbo=o(" (mBART model)"),ibo=l(),Pu=a("li"),Zoe=a("strong"),dbo=o("megatron-bert"),cbo=o(" \u2014 "),R$=a("a"),fbo=o("MegatronBertForCausalLM"),mbo=o(" (MegatronBert model)"),gbo=l(),$u=a("li"),ere=a("strong"),hbo=o("openai-gpt"),pbo=o(" \u2014 "),S$=a("a"),_bo=o("OpenAIGPTLMHeadModel"),ubo=o(" (OpenAI GPT model)"),bbo=l(),Iu=a("li"),ore=a("strong"),vbo=o("pegasus"),Tbo=o(" \u2014 "),P$=a("a"),Fbo=o("PegasusForCausalLM"),Cbo=o(" (Pegasus model)"),Mbo=l(),Du=a("li"),rre=a("strong"),Ebo=o("plbart"),ybo=o(" \u2014 "),$$=a("a"),wbo=o("PLBartForCausalLM"),Abo=o(" (PLBart model)"),Lbo=l(),Nu=a("li"),tre=a("strong"),Bbo=o("prophetnet"),xbo=o(" \u2014 "),I$=a("a"),kbo=o("ProphetNetForCausalLM"),Rbo=o(" (ProphetNet model)"),Sbo=l(),ju=a("li"),are=a("strong"),Pbo=o("qdqbert"),$bo=o(" \u2014 "),D$=a("a"),Ibo=o("QDQBertLMHeadModel"),Dbo=o(" (QDQBert model)"),Nbo=l(),qu=a("li"),nre=a("strong"),jbo=o("reformer"),qbo=o(" \u2014 "),N$=a("a"),Gbo=o("ReformerModelWithLMHead"),Obo=o(" (Reformer model)"),Xbo=l(),Gu=a("li"),sre=a("strong"),Vbo=o("rembert"),zbo=o(" \u2014 "),j$=a("a"),Wbo=o("RemBertForCausalLM"),Qbo=o(" (RemBERT model)"),Hbo=l(),Ou=a("li"),lre=a("strong"),Ubo=o("roberta"),Jbo=o(" \u2014 "),q$=a("a"),Ybo=o("RobertaForCausalLM"),Kbo=o(" (RoBERTa model)"),Zbo=l(),Xu=a("li"),ire=a("strong"),e3o=o("roformer"),o3o=o(" \u2014 "),G$=a("a"),r3o=o("RoFormerForCausalLM"),t3o=o(" (RoFormer model)"),a3o=l(),Vu=a("li"),dre=a("strong"),n3o=o("speech_to_text_2"),s3o=o(" \u2014 "),O$=a("a"),l3o=o("Speech2Text2ForCausalLM"),i3o=o(" (Speech2Text2 model)"),d3o=l(),zu=a("li"),cre=a("strong"),c3o=o("transfo-xl"),f3o=o(" \u2014 "),X$=a("a"),m3o=o("TransfoXLLMHeadModel"),g3o=o(" (Transformer-XL model)"),h3o=l(),Wu=a("li"),fre=a("strong"),p3o=o("trocr"),_3o=o(" \u2014 "),V$=a("a"),u3o=o("TrOCRForCausalLM"),b3o=o(" (TrOCR model)"),v3o=l(),Qu=a("li"),mre=a("strong"),T3o=o("xglm"),F3o=o(" \u2014 "),z$=a("a"),C3o=o("XGLMForCausalLM"),M3o=o(" (XGLM model)"),E3o=l(),Hu=a("li"),gre=a("strong"),y3o=o("xlm"),w3o=o(" \u2014 "),W$=a("a"),A3o=o("XLMWithLMHeadModel"),L3o=o(" (XLM model)"),B3o=l(),Uu=a("li"),hre=a("strong"),x3o=o("xlm-prophetnet"),k3o=o(" \u2014 "),Q$=a("a"),R3o=o("XLMProphetNetForCausalLM"),S3o=o(" (XLMProphetNet model)"),P3o=l(),Ju=a("li"),pre=a("strong"),$3o=o("xlm-roberta"),I3o=o(" \u2014 "),H$=a("a"),D3o=o("XLMRobertaForCausalLM"),N3o=o(" (XLM-RoBERTa model)"),j3o=l(),Yu=a("li"),_re=a("strong"),q3o=o("xlm-roberta-xl"),G3o=o(" \u2014 "),U$=a("a"),O3o=o("XLMRobertaXLForCausalLM"),X3o=o(" (XLM-RoBERTa-XL model)"),V3o=l(),Ku=a("li"),ure=a("strong"),z3o=o("xlnet"),W3o=o(" \u2014 "),J$=a("a"),Q3o=o("XLNetLMHeadModel"),H3o=o(" (XLNet model)"),U3o=l(),Zu=a("p"),J3o=o("The model is set in evaluation mode by default using "),bre=a("code"),Y3o=o("model.eval()"),K3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vre=a("code"),Z3o=o("model.train()"),evo=l(),Tre=a("p"),ovo=o("Examples:"),rvo=l(),f(g5.$$.fragment),Hke=l(),nd=a("h2"),e2=a("a"),Fre=a("span"),f(h5.$$.fragment),tvo=l(),Cre=a("span"),avo=o("AutoModelForMaskedLM"),Uke=l(),Zo=a("div"),f(p5.$$.fragment),nvo=l(),sd=a("p"),svo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Mre=a("code"),lvo=o("from_pretrained()"),ivo=o("class method or the "),Ere=a("code"),dvo=o("from_config()"),cvo=o(`class
method.`),fvo=l(),_5=a("p"),mvo=o("This class cannot be instantiated directly using "),yre=a("code"),gvo=o("__init__()"),hvo=o(" (throws an error)."),pvo=l(),Qr=a("div"),f(u5.$$.fragment),_vo=l(),wre=a("p"),uvo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bvo=l(),ld=a("p"),vvo=o(`Note:
Loading a model from its configuration file does `),Are=a("strong"),Tvo=o("not"),Fvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lre=a("code"),Cvo=o("from_pretrained()"),Mvo=o("to load the model weights."),Evo=l(),Bre=a("p"),yvo=o("Examples:"),wvo=l(),f(b5.$$.fragment),Avo=l(),qe=a("div"),f(v5.$$.fragment),Lvo=l(),xre=a("p"),Bvo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xvo=l(),Qa=a("p"),kvo=o("The model class to instantiate is selected based on the "),kre=a("code"),Rvo=o("model_type"),Svo=o(` property of the config object (either
passed as an argument or loaded from `),Rre=a("code"),Pvo=o("pretrained_model_name_or_path"),$vo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sre=a("code"),Ivo=o("pretrained_model_name_or_path"),Dvo=o(":"),Nvo=l(),I=a("ul"),o2=a("li"),Pre=a("strong"),jvo=o("albert"),qvo=o(" \u2014 "),Y$=a("a"),Gvo=o("AlbertForMaskedLM"),Ovo=o(" (ALBERT model)"),Xvo=l(),r2=a("li"),$re=a("strong"),Vvo=o("bart"),zvo=o(" \u2014 "),K$=a("a"),Wvo=o("BartForConditionalGeneration"),Qvo=o(" (BART model)"),Hvo=l(),t2=a("li"),Ire=a("strong"),Uvo=o("bert"),Jvo=o(" \u2014 "),Z$=a("a"),Yvo=o("BertForMaskedLM"),Kvo=o(" (BERT model)"),Zvo=l(),a2=a("li"),Dre=a("strong"),e6o=o("big_bird"),o6o=o(" \u2014 "),eI=a("a"),r6o=o("BigBirdForMaskedLM"),t6o=o(" (BigBird model)"),a6o=l(),n2=a("li"),Nre=a("strong"),n6o=o("camembert"),s6o=o(" \u2014 "),oI=a("a"),l6o=o("CamembertForMaskedLM"),i6o=o(" (CamemBERT model)"),d6o=l(),s2=a("li"),jre=a("strong"),c6o=o("convbert"),f6o=o(" \u2014 "),rI=a("a"),m6o=o("ConvBertForMaskedLM"),g6o=o(" (ConvBERT model)"),h6o=l(),l2=a("li"),qre=a("strong"),p6o=o("data2vec-text"),_6o=o(" \u2014 "),tI=a("a"),u6o=o("Data2VecTextForMaskedLM"),b6o=o(" (Data2VecText model)"),v6o=l(),i2=a("li"),Gre=a("strong"),T6o=o("deberta"),F6o=o(" \u2014 "),aI=a("a"),C6o=o("DebertaForMaskedLM"),M6o=o(" (DeBERTa model)"),E6o=l(),d2=a("li"),Ore=a("strong"),y6o=o("deberta-v2"),w6o=o(" \u2014 "),nI=a("a"),A6o=o("DebertaV2ForMaskedLM"),L6o=o(" (DeBERTa-v2 model)"),B6o=l(),c2=a("li"),Xre=a("strong"),x6o=o("distilbert"),k6o=o(" \u2014 "),sI=a("a"),R6o=o("DistilBertForMaskedLM"),S6o=o(" (DistilBERT model)"),P6o=l(),f2=a("li"),Vre=a("strong"),$6o=o("electra"),I6o=o(" \u2014 "),lI=a("a"),D6o=o("ElectraForMaskedLM"),N6o=o(" (ELECTRA model)"),j6o=l(),m2=a("li"),zre=a("strong"),q6o=o("flaubert"),G6o=o(" \u2014 "),iI=a("a"),O6o=o("FlaubertWithLMHeadModel"),X6o=o(" (FlauBERT model)"),V6o=l(),g2=a("li"),Wre=a("strong"),z6o=o("fnet"),W6o=o(" \u2014 "),dI=a("a"),Q6o=o("FNetForMaskedLM"),H6o=o(" (FNet model)"),U6o=l(),h2=a("li"),Qre=a("strong"),J6o=o("funnel"),Y6o=o(" \u2014 "),cI=a("a"),K6o=o("FunnelForMaskedLM"),Z6o=o(" (Funnel Transformer model)"),eTo=l(),p2=a("li"),Hre=a("strong"),oTo=o("ibert"),rTo=o(" \u2014 "),fI=a("a"),tTo=o("IBertForMaskedLM"),aTo=o(" (I-BERT model)"),nTo=l(),_2=a("li"),Ure=a("strong"),sTo=o("layoutlm"),lTo=o(" \u2014 "),mI=a("a"),iTo=o("LayoutLMForMaskedLM"),dTo=o(" (LayoutLM model)"),cTo=l(),u2=a("li"),Jre=a("strong"),fTo=o("longformer"),mTo=o(" \u2014 "),gI=a("a"),gTo=o("LongformerForMaskedLM"),hTo=o(" (Longformer model)"),pTo=l(),b2=a("li"),Yre=a("strong"),_To=o("mbart"),uTo=o(" \u2014 "),hI=a("a"),bTo=o("MBartForConditionalGeneration"),vTo=o(" (mBART model)"),TTo=l(),v2=a("li"),Kre=a("strong"),FTo=o("megatron-bert"),CTo=o(" \u2014 "),pI=a("a"),MTo=o("MegatronBertForMaskedLM"),ETo=o(" (MegatronBert model)"),yTo=l(),T2=a("li"),Zre=a("strong"),wTo=o("mobilebert"),ATo=o(" \u2014 "),_I=a("a"),LTo=o("MobileBertForMaskedLM"),BTo=o(" (MobileBERT model)"),xTo=l(),F2=a("li"),ete=a("strong"),kTo=o("mpnet"),RTo=o(" \u2014 "),uI=a("a"),STo=o("MPNetForMaskedLM"),PTo=o(" (MPNet model)"),$To=l(),C2=a("li"),ote=a("strong"),ITo=o("nystromformer"),DTo=o(" \u2014 "),bI=a("a"),NTo=o("NystromformerForMaskedLM"),jTo=o(" (Nystromformer model)"),qTo=l(),M2=a("li"),rte=a("strong"),GTo=o("perceiver"),OTo=o(" \u2014 "),vI=a("a"),XTo=o("PerceiverForMaskedLM"),VTo=o(" (Perceiver model)"),zTo=l(),E2=a("li"),tte=a("strong"),WTo=o("qdqbert"),QTo=o(" \u2014 "),TI=a("a"),HTo=o("QDQBertForMaskedLM"),UTo=o(" (QDQBert model)"),JTo=l(),y2=a("li"),ate=a("strong"),YTo=o("reformer"),KTo=o(" \u2014 "),FI=a("a"),ZTo=o("ReformerForMaskedLM"),eFo=o(" (Reformer model)"),oFo=l(),w2=a("li"),nte=a("strong"),rFo=o("rembert"),tFo=o(" \u2014 "),CI=a("a"),aFo=o("RemBertForMaskedLM"),nFo=o(" (RemBERT model)"),sFo=l(),A2=a("li"),ste=a("strong"),lFo=o("roberta"),iFo=o(" \u2014 "),MI=a("a"),dFo=o("RobertaForMaskedLM"),cFo=o(" (RoBERTa model)"),fFo=l(),L2=a("li"),lte=a("strong"),mFo=o("roformer"),gFo=o(" \u2014 "),EI=a("a"),hFo=o("RoFormerForMaskedLM"),pFo=o(" (RoFormer model)"),_Fo=l(),B2=a("li"),ite=a("strong"),uFo=o("squeezebert"),bFo=o(" \u2014 "),yI=a("a"),vFo=o("SqueezeBertForMaskedLM"),TFo=o(" (SqueezeBERT model)"),FFo=l(),x2=a("li"),dte=a("strong"),CFo=o("tapas"),MFo=o(" \u2014 "),wI=a("a"),EFo=o("TapasForMaskedLM"),yFo=o(" (TAPAS model)"),wFo=l(),k2=a("li"),cte=a("strong"),AFo=o("wav2vec2"),LFo=o(" \u2014 "),fte=a("code"),BFo=o("Wav2Vec2ForMaskedLM"),xFo=o("(Wav2Vec2 model)"),kFo=l(),R2=a("li"),mte=a("strong"),RFo=o("xlm"),SFo=o(" \u2014 "),AI=a("a"),PFo=o("XLMWithLMHeadModel"),$Fo=o(" (XLM model)"),IFo=l(),S2=a("li"),gte=a("strong"),DFo=o("xlm-roberta"),NFo=o(" \u2014 "),LI=a("a"),jFo=o("XLMRobertaForMaskedLM"),qFo=o(" (XLM-RoBERTa model)"),GFo=l(),P2=a("li"),hte=a("strong"),OFo=o("xlm-roberta-xl"),XFo=o(" \u2014 "),BI=a("a"),VFo=o("XLMRobertaXLForMaskedLM"),zFo=o(" (XLM-RoBERTa-XL model)"),WFo=l(),$2=a("li"),pte=a("strong"),QFo=o("yoso"),HFo=o(" \u2014 "),xI=a("a"),UFo=o("YosoForMaskedLM"),JFo=o(" (YOSO model)"),YFo=l(),I2=a("p"),KFo=o("The model is set in evaluation mode by default using "),_te=a("code"),ZFo=o("model.eval()"),e9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ute=a("code"),o9o=o("model.train()"),r9o=l(),bte=a("p"),t9o=o("Examples:"),a9o=l(),f(T5.$$.fragment),Jke=l(),id=a("h2"),D2=a("a"),vte=a("span"),f(F5.$$.fragment),n9o=l(),Tte=a("span"),s9o=o("AutoModelForSeq2SeqLM"),Yke=l(),er=a("div"),f(C5.$$.fragment),l9o=l(),dd=a("p"),i9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Fte=a("code"),d9o=o("from_pretrained()"),c9o=o("class method or the "),Cte=a("code"),f9o=o("from_config()"),m9o=o(`class
method.`),g9o=l(),M5=a("p"),h9o=o("This class cannot be instantiated directly using "),Mte=a("code"),p9o=o("__init__()"),_9o=o(" (throws an error)."),u9o=l(),Hr=a("div"),f(E5.$$.fragment),b9o=l(),Ete=a("p"),v9o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),T9o=l(),cd=a("p"),F9o=o(`Note:
Loading a model from its configuration file does `),yte=a("strong"),C9o=o("not"),M9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wte=a("code"),E9o=o("from_pretrained()"),y9o=o("to load the model weights."),w9o=l(),Ate=a("p"),A9o=o("Examples:"),L9o=l(),f(y5.$$.fragment),B9o=l(),Ge=a("div"),f(w5.$$.fragment),x9o=l(),Lte=a("p"),k9o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),R9o=l(),Ha=a("p"),S9o=o("The model class to instantiate is selected based on the "),Bte=a("code"),P9o=o("model_type"),$9o=o(` property of the config object (either
passed as an argument or loaded from `),xte=a("code"),I9o=o("pretrained_model_name_or_path"),D9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kte=a("code"),N9o=o("pretrained_model_name_or_path"),j9o=o(":"),q9o=l(),se=a("ul"),N2=a("li"),Rte=a("strong"),G9o=o("bart"),O9o=o(" \u2014 "),kI=a("a"),X9o=o("BartForConditionalGeneration"),V9o=o(" (BART model)"),z9o=l(),j2=a("li"),Ste=a("strong"),W9o=o("bigbird_pegasus"),Q9o=o(" \u2014 "),RI=a("a"),H9o=o("BigBirdPegasusForConditionalGeneration"),U9o=o(" (BigBirdPegasus model)"),J9o=l(),q2=a("li"),Pte=a("strong"),Y9o=o("blenderbot"),K9o=o(" \u2014 "),SI=a("a"),Z9o=o("BlenderbotForConditionalGeneration"),eCo=o(" (Blenderbot model)"),oCo=l(),G2=a("li"),$te=a("strong"),rCo=o("blenderbot-small"),tCo=o(" \u2014 "),PI=a("a"),aCo=o("BlenderbotSmallForConditionalGeneration"),nCo=o(" (BlenderbotSmall model)"),sCo=l(),O2=a("li"),Ite=a("strong"),lCo=o("encoder-decoder"),iCo=o(" \u2014 "),$I=a("a"),dCo=o("EncoderDecoderModel"),cCo=o(" (Encoder decoder model)"),fCo=l(),X2=a("li"),Dte=a("strong"),mCo=o("fsmt"),gCo=o(" \u2014 "),II=a("a"),hCo=o("FSMTForConditionalGeneration"),pCo=o(" (FairSeq Machine-Translation model)"),_Co=l(),V2=a("li"),Nte=a("strong"),uCo=o("led"),bCo=o(" \u2014 "),DI=a("a"),vCo=o("LEDForConditionalGeneration"),TCo=o(" (LED model)"),FCo=l(),z2=a("li"),jte=a("strong"),CCo=o("m2m_100"),MCo=o(" \u2014 "),NI=a("a"),ECo=o("M2M100ForConditionalGeneration"),yCo=o(" (M2M100 model)"),wCo=l(),W2=a("li"),qte=a("strong"),ACo=o("marian"),LCo=o(" \u2014 "),jI=a("a"),BCo=o("MarianMTModel"),xCo=o(" (Marian model)"),kCo=l(),Q2=a("li"),Gte=a("strong"),RCo=o("mbart"),SCo=o(" \u2014 "),qI=a("a"),PCo=o("MBartForConditionalGeneration"),$Co=o(" (mBART model)"),ICo=l(),H2=a("li"),Ote=a("strong"),DCo=o("mt5"),NCo=o(" \u2014 "),GI=a("a"),jCo=o("MT5ForConditionalGeneration"),qCo=o(" (mT5 model)"),GCo=l(),U2=a("li"),Xte=a("strong"),OCo=o("pegasus"),XCo=o(" \u2014 "),OI=a("a"),VCo=o("PegasusForConditionalGeneration"),zCo=o(" (Pegasus model)"),WCo=l(),J2=a("li"),Vte=a("strong"),QCo=o("plbart"),HCo=o(" \u2014 "),XI=a("a"),UCo=o("PLBartForConditionalGeneration"),JCo=o(" (PLBart model)"),YCo=l(),Y2=a("li"),zte=a("strong"),KCo=o("prophetnet"),ZCo=o(" \u2014 "),VI=a("a"),eMo=o("ProphetNetForConditionalGeneration"),oMo=o(" (ProphetNet model)"),rMo=l(),K2=a("li"),Wte=a("strong"),tMo=o("t5"),aMo=o(" \u2014 "),zI=a("a"),nMo=o("T5ForConditionalGeneration"),sMo=o(" (T5 model)"),lMo=l(),Z2=a("li"),Qte=a("strong"),iMo=o("xlm-prophetnet"),dMo=o(" \u2014 "),WI=a("a"),cMo=o("XLMProphetNetForConditionalGeneration"),fMo=o(" (XLMProphetNet model)"),mMo=l(),e1=a("p"),gMo=o("The model is set in evaluation mode by default using "),Hte=a("code"),hMo=o("model.eval()"),pMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ute=a("code"),_Mo=o("model.train()"),uMo=l(),Jte=a("p"),bMo=o("Examples:"),vMo=l(),f(A5.$$.fragment),Kke=l(),fd=a("h2"),o1=a("a"),Yte=a("span"),f(L5.$$.fragment),TMo=l(),Kte=a("span"),FMo=o("AutoModelForSequenceClassification"),Zke=l(),or=a("div"),f(B5.$$.fragment),CMo=l(),md=a("p"),MMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Zte=a("code"),EMo=o("from_pretrained()"),yMo=o("class method or the "),eae=a("code"),wMo=o("from_config()"),AMo=o(`class
method.`),LMo=l(),x5=a("p"),BMo=o("This class cannot be instantiated directly using "),oae=a("code"),xMo=o("__init__()"),kMo=o(" (throws an error)."),RMo=l(),Ur=a("div"),f(k5.$$.fragment),SMo=l(),rae=a("p"),PMo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$Mo=l(),gd=a("p"),IMo=o(`Note:
Loading a model from its configuration file does `),tae=a("strong"),DMo=o("not"),NMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aae=a("code"),jMo=o("from_pretrained()"),qMo=o("to load the model weights."),GMo=l(),nae=a("p"),OMo=o("Examples:"),XMo=l(),f(R5.$$.fragment),VMo=l(),Oe=a("div"),f(S5.$$.fragment),zMo=l(),sae=a("p"),WMo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),QMo=l(),Ua=a("p"),HMo=o("The model class to instantiate is selected based on the "),lae=a("code"),UMo=o("model_type"),JMo=o(` property of the config object (either
passed as an argument or loaded from `),iae=a("code"),YMo=o("pretrained_model_name_or_path"),KMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dae=a("code"),ZMo=o("pretrained_model_name_or_path"),e4o=o(":"),o4o=l(),A=a("ul"),r1=a("li"),cae=a("strong"),r4o=o("albert"),t4o=o(" \u2014 "),QI=a("a"),a4o=o("AlbertForSequenceClassification"),n4o=o(" (ALBERT model)"),s4o=l(),t1=a("li"),fae=a("strong"),l4o=o("bart"),i4o=o(" \u2014 "),HI=a("a"),d4o=o("BartForSequenceClassification"),c4o=o(" (BART model)"),f4o=l(),a1=a("li"),mae=a("strong"),m4o=o("bert"),g4o=o(" \u2014 "),UI=a("a"),h4o=o("BertForSequenceClassification"),p4o=o(" (BERT model)"),_4o=l(),n1=a("li"),gae=a("strong"),u4o=o("big_bird"),b4o=o(" \u2014 "),JI=a("a"),v4o=o("BigBirdForSequenceClassification"),T4o=o(" (BigBird model)"),F4o=l(),s1=a("li"),hae=a("strong"),C4o=o("bigbird_pegasus"),M4o=o(" \u2014 "),YI=a("a"),E4o=o("BigBirdPegasusForSequenceClassification"),y4o=o(" (BigBirdPegasus model)"),w4o=l(),l1=a("li"),pae=a("strong"),A4o=o("camembert"),L4o=o(" \u2014 "),KI=a("a"),B4o=o("CamembertForSequenceClassification"),x4o=o(" (CamemBERT model)"),k4o=l(),i1=a("li"),_ae=a("strong"),R4o=o("canine"),S4o=o(" \u2014 "),ZI=a("a"),P4o=o("CanineForSequenceClassification"),$4o=o(" (Canine model)"),I4o=l(),d1=a("li"),uae=a("strong"),D4o=o("convbert"),N4o=o(" \u2014 "),eD=a("a"),j4o=o("ConvBertForSequenceClassification"),q4o=o(" (ConvBERT model)"),G4o=l(),c1=a("li"),bae=a("strong"),O4o=o("ctrl"),X4o=o(" \u2014 "),oD=a("a"),V4o=o("CTRLForSequenceClassification"),z4o=o(" (CTRL model)"),W4o=l(),f1=a("li"),vae=a("strong"),Q4o=o("data2vec-text"),H4o=o(" \u2014 "),rD=a("a"),U4o=o("Data2VecTextForSequenceClassification"),J4o=o(" (Data2VecText model)"),Y4o=l(),m1=a("li"),Tae=a("strong"),K4o=o("deberta"),Z4o=o(" \u2014 "),tD=a("a"),eEo=o("DebertaForSequenceClassification"),oEo=o(" (DeBERTa model)"),rEo=l(),g1=a("li"),Fae=a("strong"),tEo=o("deberta-v2"),aEo=o(" \u2014 "),aD=a("a"),nEo=o("DebertaV2ForSequenceClassification"),sEo=o(" (DeBERTa-v2 model)"),lEo=l(),h1=a("li"),Cae=a("strong"),iEo=o("distilbert"),dEo=o(" \u2014 "),nD=a("a"),cEo=o("DistilBertForSequenceClassification"),fEo=o(" (DistilBERT model)"),mEo=l(),p1=a("li"),Mae=a("strong"),gEo=o("electra"),hEo=o(" \u2014 "),sD=a("a"),pEo=o("ElectraForSequenceClassification"),_Eo=o(" (ELECTRA model)"),uEo=l(),_1=a("li"),Eae=a("strong"),bEo=o("flaubert"),vEo=o(" \u2014 "),lD=a("a"),TEo=o("FlaubertForSequenceClassification"),FEo=o(" (FlauBERT model)"),CEo=l(),u1=a("li"),yae=a("strong"),MEo=o("fnet"),EEo=o(" \u2014 "),iD=a("a"),yEo=o("FNetForSequenceClassification"),wEo=o(" (FNet model)"),AEo=l(),b1=a("li"),wae=a("strong"),LEo=o("funnel"),BEo=o(" \u2014 "),dD=a("a"),xEo=o("FunnelForSequenceClassification"),kEo=o(" (Funnel Transformer model)"),REo=l(),v1=a("li"),Aae=a("strong"),SEo=o("gpt2"),PEo=o(" \u2014 "),cD=a("a"),$Eo=o("GPT2ForSequenceClassification"),IEo=o(" (OpenAI GPT-2 model)"),DEo=l(),T1=a("li"),Lae=a("strong"),NEo=o("gpt_neo"),jEo=o(" \u2014 "),fD=a("a"),qEo=o("GPTNeoForSequenceClassification"),GEo=o(" (GPT Neo model)"),OEo=l(),F1=a("li"),Bae=a("strong"),XEo=o("gptj"),VEo=o(" \u2014 "),mD=a("a"),zEo=o("GPTJForSequenceClassification"),WEo=o(" (GPT-J model)"),QEo=l(),C1=a("li"),xae=a("strong"),HEo=o("ibert"),UEo=o(" \u2014 "),gD=a("a"),JEo=o("IBertForSequenceClassification"),YEo=o(" (I-BERT model)"),KEo=l(),M1=a("li"),kae=a("strong"),ZEo=o("layoutlm"),e5o=o(" \u2014 "),hD=a("a"),o5o=o("LayoutLMForSequenceClassification"),r5o=o(" (LayoutLM model)"),t5o=l(),E1=a("li"),Rae=a("strong"),a5o=o("layoutlmv2"),n5o=o(" \u2014 "),pD=a("a"),s5o=o("LayoutLMv2ForSequenceClassification"),l5o=o(" (LayoutLMv2 model)"),i5o=l(),y1=a("li"),Sae=a("strong"),d5o=o("led"),c5o=o(" \u2014 "),_D=a("a"),f5o=o("LEDForSequenceClassification"),m5o=o(" (LED model)"),g5o=l(),w1=a("li"),Pae=a("strong"),h5o=o("longformer"),p5o=o(" \u2014 "),uD=a("a"),_5o=o("LongformerForSequenceClassification"),u5o=o(" (Longformer model)"),b5o=l(),A1=a("li"),$ae=a("strong"),v5o=o("mbart"),T5o=o(" \u2014 "),bD=a("a"),F5o=o("MBartForSequenceClassification"),C5o=o(" (mBART model)"),M5o=l(),L1=a("li"),Iae=a("strong"),E5o=o("megatron-bert"),y5o=o(" \u2014 "),vD=a("a"),w5o=o("MegatronBertForSequenceClassification"),A5o=o(" (MegatronBert model)"),L5o=l(),B1=a("li"),Dae=a("strong"),B5o=o("mobilebert"),x5o=o(" \u2014 "),TD=a("a"),k5o=o("MobileBertForSequenceClassification"),R5o=o(" (MobileBERT model)"),S5o=l(),x1=a("li"),Nae=a("strong"),P5o=o("mpnet"),$5o=o(" \u2014 "),FD=a("a"),I5o=o("MPNetForSequenceClassification"),D5o=o(" (MPNet model)"),N5o=l(),k1=a("li"),jae=a("strong"),j5o=o("nystromformer"),q5o=o(" \u2014 "),CD=a("a"),G5o=o("NystromformerForSequenceClassification"),O5o=o(" (Nystromformer model)"),X5o=l(),R1=a("li"),qae=a("strong"),V5o=o("openai-gpt"),z5o=o(" \u2014 "),MD=a("a"),W5o=o("OpenAIGPTForSequenceClassification"),Q5o=o(" (OpenAI GPT model)"),H5o=l(),S1=a("li"),Gae=a("strong"),U5o=o("perceiver"),J5o=o(" \u2014 "),ED=a("a"),Y5o=o("PerceiverForSequenceClassification"),K5o=o(" (Perceiver model)"),Z5o=l(),P1=a("li"),Oae=a("strong"),eyo=o("plbart"),oyo=o(" \u2014 "),yD=a("a"),ryo=o("PLBartForSequenceClassification"),tyo=o(" (PLBart model)"),ayo=l(),$1=a("li"),Xae=a("strong"),nyo=o("qdqbert"),syo=o(" \u2014 "),wD=a("a"),lyo=o("QDQBertForSequenceClassification"),iyo=o(" (QDQBert model)"),dyo=l(),I1=a("li"),Vae=a("strong"),cyo=o("reformer"),fyo=o(" \u2014 "),AD=a("a"),myo=o("ReformerForSequenceClassification"),gyo=o(" (Reformer model)"),hyo=l(),D1=a("li"),zae=a("strong"),pyo=o("rembert"),_yo=o(" \u2014 "),LD=a("a"),uyo=o("RemBertForSequenceClassification"),byo=o(" (RemBERT model)"),vyo=l(),N1=a("li"),Wae=a("strong"),Tyo=o("roberta"),Fyo=o(" \u2014 "),BD=a("a"),Cyo=o("RobertaForSequenceClassification"),Myo=o(" (RoBERTa model)"),Eyo=l(),j1=a("li"),Qae=a("strong"),yyo=o("roformer"),wyo=o(" \u2014 "),xD=a("a"),Ayo=o("RoFormerForSequenceClassification"),Lyo=o(" (RoFormer model)"),Byo=l(),q1=a("li"),Hae=a("strong"),xyo=o("squeezebert"),kyo=o(" \u2014 "),kD=a("a"),Ryo=o("SqueezeBertForSequenceClassification"),Syo=o(" (SqueezeBERT model)"),Pyo=l(),G1=a("li"),Uae=a("strong"),$yo=o("tapas"),Iyo=o(" \u2014 "),RD=a("a"),Dyo=o("TapasForSequenceClassification"),Nyo=o(" (TAPAS model)"),jyo=l(),O1=a("li"),Jae=a("strong"),qyo=o("transfo-xl"),Gyo=o(" \u2014 "),SD=a("a"),Oyo=o("TransfoXLForSequenceClassification"),Xyo=o(" (Transformer-XL model)"),Vyo=l(),X1=a("li"),Yae=a("strong"),zyo=o("xlm"),Wyo=o(" \u2014 "),PD=a("a"),Qyo=o("XLMForSequenceClassification"),Hyo=o(" (XLM model)"),Uyo=l(),V1=a("li"),Kae=a("strong"),Jyo=o("xlm-roberta"),Yyo=o(" \u2014 "),$D=a("a"),Kyo=o("XLMRobertaForSequenceClassification"),Zyo=o(" (XLM-RoBERTa model)"),ewo=l(),z1=a("li"),Zae=a("strong"),owo=o("xlm-roberta-xl"),rwo=o(" \u2014 "),ID=a("a"),two=o("XLMRobertaXLForSequenceClassification"),awo=o(" (XLM-RoBERTa-XL model)"),nwo=l(),W1=a("li"),ene=a("strong"),swo=o("xlnet"),lwo=o(" \u2014 "),DD=a("a"),iwo=o("XLNetForSequenceClassification"),dwo=o(" (XLNet model)"),cwo=l(),Q1=a("li"),one=a("strong"),fwo=o("yoso"),mwo=o(" \u2014 "),ND=a("a"),gwo=o("YosoForSequenceClassification"),hwo=o(" (YOSO model)"),pwo=l(),H1=a("p"),_wo=o("The model is set in evaluation mode by default using "),rne=a("code"),uwo=o("model.eval()"),bwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tne=a("code"),vwo=o("model.train()"),Two=l(),ane=a("p"),Fwo=o("Examples:"),Cwo=l(),f(P5.$$.fragment),eRe=l(),hd=a("h2"),U1=a("a"),nne=a("span"),f($5.$$.fragment),Mwo=l(),sne=a("span"),Ewo=o("AutoModelForMultipleChoice"),oRe=l(),rr=a("div"),f(I5.$$.fragment),ywo=l(),pd=a("p"),wwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lne=a("code"),Awo=o("from_pretrained()"),Lwo=o("class method or the "),ine=a("code"),Bwo=o("from_config()"),xwo=o(`class
method.`),kwo=l(),D5=a("p"),Rwo=o("This class cannot be instantiated directly using "),dne=a("code"),Swo=o("__init__()"),Pwo=o(" (throws an error)."),$wo=l(),Jr=a("div"),f(N5.$$.fragment),Iwo=l(),cne=a("p"),Dwo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Nwo=l(),_d=a("p"),jwo=o(`Note:
Loading a model from its configuration file does `),fne=a("strong"),qwo=o("not"),Gwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mne=a("code"),Owo=o("from_pretrained()"),Xwo=o("to load the model weights."),Vwo=l(),gne=a("p"),zwo=o("Examples:"),Wwo=l(),f(j5.$$.fragment),Qwo=l(),Xe=a("div"),f(q5.$$.fragment),Hwo=l(),hne=a("p"),Uwo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Jwo=l(),Ja=a("p"),Ywo=o("The model class to instantiate is selected based on the "),pne=a("code"),Kwo=o("model_type"),Zwo=o(` property of the config object (either
passed as an argument or loaded from `),_ne=a("code"),eAo=o("pretrained_model_name_or_path"),oAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),une=a("code"),rAo=o("pretrained_model_name_or_path"),tAo=o(":"),aAo=l(),G=a("ul"),J1=a("li"),bne=a("strong"),nAo=o("albert"),sAo=o(" \u2014 "),jD=a("a"),lAo=o("AlbertForMultipleChoice"),iAo=o(" (ALBERT model)"),dAo=l(),Y1=a("li"),vne=a("strong"),cAo=o("bert"),fAo=o(" \u2014 "),qD=a("a"),mAo=o("BertForMultipleChoice"),gAo=o(" (BERT model)"),hAo=l(),K1=a("li"),Tne=a("strong"),pAo=o("big_bird"),_Ao=o(" \u2014 "),GD=a("a"),uAo=o("BigBirdForMultipleChoice"),bAo=o(" (BigBird model)"),vAo=l(),Z1=a("li"),Fne=a("strong"),TAo=o("camembert"),FAo=o(" \u2014 "),OD=a("a"),CAo=o("CamembertForMultipleChoice"),MAo=o(" (CamemBERT model)"),EAo=l(),eb=a("li"),Cne=a("strong"),yAo=o("canine"),wAo=o(" \u2014 "),XD=a("a"),AAo=o("CanineForMultipleChoice"),LAo=o(" (Canine model)"),BAo=l(),ob=a("li"),Mne=a("strong"),xAo=o("convbert"),kAo=o(" \u2014 "),VD=a("a"),RAo=o("ConvBertForMultipleChoice"),SAo=o(" (ConvBERT model)"),PAo=l(),rb=a("li"),Ene=a("strong"),$Ao=o("data2vec-text"),IAo=o(" \u2014 "),zD=a("a"),DAo=o("Data2VecTextForMultipleChoice"),NAo=o(" (Data2VecText model)"),jAo=l(),tb=a("li"),yne=a("strong"),qAo=o("distilbert"),GAo=o(" \u2014 "),WD=a("a"),OAo=o("DistilBertForMultipleChoice"),XAo=o(" (DistilBERT model)"),VAo=l(),ab=a("li"),wne=a("strong"),zAo=o("electra"),WAo=o(" \u2014 "),QD=a("a"),QAo=o("ElectraForMultipleChoice"),HAo=o(" (ELECTRA model)"),UAo=l(),nb=a("li"),Ane=a("strong"),JAo=o("flaubert"),YAo=o(" \u2014 "),HD=a("a"),KAo=o("FlaubertForMultipleChoice"),ZAo=o(" (FlauBERT model)"),e0o=l(),sb=a("li"),Lne=a("strong"),o0o=o("fnet"),r0o=o(" \u2014 "),UD=a("a"),t0o=o("FNetForMultipleChoice"),a0o=o(" (FNet model)"),n0o=l(),lb=a("li"),Bne=a("strong"),s0o=o("funnel"),l0o=o(" \u2014 "),JD=a("a"),i0o=o("FunnelForMultipleChoice"),d0o=o(" (Funnel Transformer model)"),c0o=l(),ib=a("li"),xne=a("strong"),f0o=o("ibert"),m0o=o(" \u2014 "),YD=a("a"),g0o=o("IBertForMultipleChoice"),h0o=o(" (I-BERT model)"),p0o=l(),db=a("li"),kne=a("strong"),_0o=o("longformer"),u0o=o(" \u2014 "),KD=a("a"),b0o=o("LongformerForMultipleChoice"),v0o=o(" (Longformer model)"),T0o=l(),cb=a("li"),Rne=a("strong"),F0o=o("megatron-bert"),C0o=o(" \u2014 "),ZD=a("a"),M0o=o("MegatronBertForMultipleChoice"),E0o=o(" (MegatronBert model)"),y0o=l(),fb=a("li"),Sne=a("strong"),w0o=o("mobilebert"),A0o=o(" \u2014 "),eN=a("a"),L0o=o("MobileBertForMultipleChoice"),B0o=o(" (MobileBERT model)"),x0o=l(),mb=a("li"),Pne=a("strong"),k0o=o("mpnet"),R0o=o(" \u2014 "),oN=a("a"),S0o=o("MPNetForMultipleChoice"),P0o=o(" (MPNet model)"),$0o=l(),gb=a("li"),$ne=a("strong"),I0o=o("nystromformer"),D0o=o(" \u2014 "),rN=a("a"),N0o=o("NystromformerForMultipleChoice"),j0o=o(" (Nystromformer model)"),q0o=l(),hb=a("li"),Ine=a("strong"),G0o=o("qdqbert"),O0o=o(" \u2014 "),tN=a("a"),X0o=o("QDQBertForMultipleChoice"),V0o=o(" (QDQBert model)"),z0o=l(),pb=a("li"),Dne=a("strong"),W0o=o("rembert"),Q0o=o(" \u2014 "),aN=a("a"),H0o=o("RemBertForMultipleChoice"),U0o=o(" (RemBERT model)"),J0o=l(),_b=a("li"),Nne=a("strong"),Y0o=o("roberta"),K0o=o(" \u2014 "),nN=a("a"),Z0o=o("RobertaForMultipleChoice"),eLo=o(" (RoBERTa model)"),oLo=l(),ub=a("li"),jne=a("strong"),rLo=o("roformer"),tLo=o(" \u2014 "),sN=a("a"),aLo=o("RoFormerForMultipleChoice"),nLo=o(" (RoFormer model)"),sLo=l(),bb=a("li"),qne=a("strong"),lLo=o("squeezebert"),iLo=o(" \u2014 "),lN=a("a"),dLo=o("SqueezeBertForMultipleChoice"),cLo=o(" (SqueezeBERT model)"),fLo=l(),vb=a("li"),Gne=a("strong"),mLo=o("xlm"),gLo=o(" \u2014 "),iN=a("a"),hLo=o("XLMForMultipleChoice"),pLo=o(" (XLM model)"),_Lo=l(),Tb=a("li"),One=a("strong"),uLo=o("xlm-roberta"),bLo=o(" \u2014 "),dN=a("a"),vLo=o("XLMRobertaForMultipleChoice"),TLo=o(" (XLM-RoBERTa model)"),FLo=l(),Fb=a("li"),Xne=a("strong"),CLo=o("xlm-roberta-xl"),MLo=o(" \u2014 "),cN=a("a"),ELo=o("XLMRobertaXLForMultipleChoice"),yLo=o(" (XLM-RoBERTa-XL model)"),wLo=l(),Cb=a("li"),Vne=a("strong"),ALo=o("xlnet"),LLo=o(" \u2014 "),fN=a("a"),BLo=o("XLNetForMultipleChoice"),xLo=o(" (XLNet model)"),kLo=l(),Mb=a("li"),zne=a("strong"),RLo=o("yoso"),SLo=o(" \u2014 "),mN=a("a"),PLo=o("YosoForMultipleChoice"),$Lo=o(" (YOSO model)"),ILo=l(),Eb=a("p"),DLo=o("The model is set in evaluation mode by default using "),Wne=a("code"),NLo=o("model.eval()"),jLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qne=a("code"),qLo=o("model.train()"),GLo=l(),Hne=a("p"),OLo=o("Examples:"),XLo=l(),f(G5.$$.fragment),rRe=l(),ud=a("h2"),yb=a("a"),Une=a("span"),f(O5.$$.fragment),VLo=l(),Jne=a("span"),zLo=o("AutoModelForNextSentencePrediction"),tRe=l(),tr=a("div"),f(X5.$$.fragment),WLo=l(),bd=a("p"),QLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Yne=a("code"),HLo=o("from_pretrained()"),ULo=o("class method or the "),Kne=a("code"),JLo=o("from_config()"),YLo=o(`class
method.`),KLo=l(),V5=a("p"),ZLo=o("This class cannot be instantiated directly using "),Zne=a("code"),e7o=o("__init__()"),o7o=o(" (throws an error)."),r7o=l(),Yr=a("div"),f(z5.$$.fragment),t7o=l(),ese=a("p"),a7o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),n7o=l(),vd=a("p"),s7o=o(`Note:
Loading a model from its configuration file does `),ose=a("strong"),l7o=o("not"),i7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rse=a("code"),d7o=o("from_pretrained()"),c7o=o("to load the model weights."),f7o=l(),tse=a("p"),m7o=o("Examples:"),g7o=l(),f(W5.$$.fragment),h7o=l(),Ve=a("div"),f(Q5.$$.fragment),p7o=l(),ase=a("p"),_7o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),u7o=l(),Ya=a("p"),b7o=o("The model class to instantiate is selected based on the "),nse=a("code"),v7o=o("model_type"),T7o=o(` property of the config object (either
passed as an argument or loaded from `),sse=a("code"),F7o=o("pretrained_model_name_or_path"),C7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lse=a("code"),M7o=o("pretrained_model_name_or_path"),E7o=o(":"),y7o=l(),da=a("ul"),wb=a("li"),ise=a("strong"),w7o=o("bert"),A7o=o(" \u2014 "),gN=a("a"),L7o=o("BertForNextSentencePrediction"),B7o=o(" (BERT model)"),x7o=l(),Ab=a("li"),dse=a("strong"),k7o=o("fnet"),R7o=o(" \u2014 "),hN=a("a"),S7o=o("FNetForNextSentencePrediction"),P7o=o(" (FNet model)"),$7o=l(),Lb=a("li"),cse=a("strong"),I7o=o("megatron-bert"),D7o=o(" \u2014 "),pN=a("a"),N7o=o("MegatronBertForNextSentencePrediction"),j7o=o(" (MegatronBert model)"),q7o=l(),Bb=a("li"),fse=a("strong"),G7o=o("mobilebert"),O7o=o(" \u2014 "),_N=a("a"),X7o=o("MobileBertForNextSentencePrediction"),V7o=o(" (MobileBERT model)"),z7o=l(),xb=a("li"),mse=a("strong"),W7o=o("qdqbert"),Q7o=o(" \u2014 "),uN=a("a"),H7o=o("QDQBertForNextSentencePrediction"),U7o=o(" (QDQBert model)"),J7o=l(),kb=a("p"),Y7o=o("The model is set in evaluation mode by default using "),gse=a("code"),K7o=o("model.eval()"),Z7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hse=a("code"),e8o=o("model.train()"),o8o=l(),pse=a("p"),r8o=o("Examples:"),t8o=l(),f(H5.$$.fragment),aRe=l(),Td=a("h2"),Rb=a("a"),_se=a("span"),f(U5.$$.fragment),a8o=l(),use=a("span"),n8o=o("AutoModelForTokenClassification"),nRe=l(),ar=a("div"),f(J5.$$.fragment),s8o=l(),Fd=a("p"),l8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bse=a("code"),i8o=o("from_pretrained()"),d8o=o("class method or the "),vse=a("code"),c8o=o("from_config()"),f8o=o(`class
method.`),m8o=l(),Y5=a("p"),g8o=o("This class cannot be instantiated directly using "),Tse=a("code"),h8o=o("__init__()"),p8o=o(" (throws an error)."),_8o=l(),Kr=a("div"),f(K5.$$.fragment),u8o=l(),Fse=a("p"),b8o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),v8o=l(),Cd=a("p"),T8o=o(`Note:
Loading a model from its configuration file does `),Cse=a("strong"),F8o=o("not"),C8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mse=a("code"),M8o=o("from_pretrained()"),E8o=o("to load the model weights."),y8o=l(),Ese=a("p"),w8o=o("Examples:"),A8o=l(),f(Z5.$$.fragment),L8o=l(),ze=a("div"),f(ey.$$.fragment),B8o=l(),yse=a("p"),x8o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),k8o=l(),Ka=a("p"),R8o=o("The model class to instantiate is selected based on the "),wse=a("code"),S8o=o("model_type"),P8o=o(` property of the config object (either
passed as an argument or loaded from `),Ase=a("code"),$8o=o("pretrained_model_name_or_path"),I8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lse=a("code"),D8o=o("pretrained_model_name_or_path"),N8o=o(":"),j8o=l(),j=a("ul"),Sb=a("li"),Bse=a("strong"),q8o=o("albert"),G8o=o(" \u2014 "),bN=a("a"),O8o=o("AlbertForTokenClassification"),X8o=o(" (ALBERT model)"),V8o=l(),Pb=a("li"),xse=a("strong"),z8o=o("bert"),W8o=o(" \u2014 "),vN=a("a"),Q8o=o("BertForTokenClassification"),H8o=o(" (BERT model)"),U8o=l(),$b=a("li"),kse=a("strong"),J8o=o("big_bird"),Y8o=o(" \u2014 "),TN=a("a"),K8o=o("BigBirdForTokenClassification"),Z8o=o(" (BigBird model)"),eBo=l(),Ib=a("li"),Rse=a("strong"),oBo=o("camembert"),rBo=o(" \u2014 "),FN=a("a"),tBo=o("CamembertForTokenClassification"),aBo=o(" (CamemBERT model)"),nBo=l(),Db=a("li"),Sse=a("strong"),sBo=o("canine"),lBo=o(" \u2014 "),CN=a("a"),iBo=o("CanineForTokenClassification"),dBo=o(" (Canine model)"),cBo=l(),Nb=a("li"),Pse=a("strong"),fBo=o("convbert"),mBo=o(" \u2014 "),MN=a("a"),gBo=o("ConvBertForTokenClassification"),hBo=o(" (ConvBERT model)"),pBo=l(),jb=a("li"),$se=a("strong"),_Bo=o("data2vec-text"),uBo=o(" \u2014 "),EN=a("a"),bBo=o("Data2VecTextForTokenClassification"),vBo=o(" (Data2VecText model)"),TBo=l(),qb=a("li"),Ise=a("strong"),FBo=o("deberta"),CBo=o(" \u2014 "),yN=a("a"),MBo=o("DebertaForTokenClassification"),EBo=o(" (DeBERTa model)"),yBo=l(),Gb=a("li"),Dse=a("strong"),wBo=o("deberta-v2"),ABo=o(" \u2014 "),wN=a("a"),LBo=o("DebertaV2ForTokenClassification"),BBo=o(" (DeBERTa-v2 model)"),xBo=l(),Ob=a("li"),Nse=a("strong"),kBo=o("distilbert"),RBo=o(" \u2014 "),AN=a("a"),SBo=o("DistilBertForTokenClassification"),PBo=o(" (DistilBERT model)"),$Bo=l(),Xb=a("li"),jse=a("strong"),IBo=o("electra"),DBo=o(" \u2014 "),LN=a("a"),NBo=o("ElectraForTokenClassification"),jBo=o(" (ELECTRA model)"),qBo=l(),Vb=a("li"),qse=a("strong"),GBo=o("flaubert"),OBo=o(" \u2014 "),BN=a("a"),XBo=o("FlaubertForTokenClassification"),VBo=o(" (FlauBERT model)"),zBo=l(),zb=a("li"),Gse=a("strong"),WBo=o("fnet"),QBo=o(" \u2014 "),xN=a("a"),HBo=o("FNetForTokenClassification"),UBo=o(" (FNet model)"),JBo=l(),Wb=a("li"),Ose=a("strong"),YBo=o("funnel"),KBo=o(" \u2014 "),kN=a("a"),ZBo=o("FunnelForTokenClassification"),exo=o(" (Funnel Transformer model)"),oxo=l(),Qb=a("li"),Xse=a("strong"),rxo=o("gpt2"),txo=o(" \u2014 "),RN=a("a"),axo=o("GPT2ForTokenClassification"),nxo=o(" (OpenAI GPT-2 model)"),sxo=l(),Hb=a("li"),Vse=a("strong"),lxo=o("ibert"),ixo=o(" \u2014 "),SN=a("a"),dxo=o("IBertForTokenClassification"),cxo=o(" (I-BERT model)"),fxo=l(),Ub=a("li"),zse=a("strong"),mxo=o("layoutlm"),gxo=o(" \u2014 "),PN=a("a"),hxo=o("LayoutLMForTokenClassification"),pxo=o(" (LayoutLM model)"),_xo=l(),Jb=a("li"),Wse=a("strong"),uxo=o("layoutlmv2"),bxo=o(" \u2014 "),$N=a("a"),vxo=o("LayoutLMv2ForTokenClassification"),Txo=o(" (LayoutLMv2 model)"),Fxo=l(),Yb=a("li"),Qse=a("strong"),Cxo=o("longformer"),Mxo=o(" \u2014 "),IN=a("a"),Exo=o("LongformerForTokenClassification"),yxo=o(" (Longformer model)"),wxo=l(),Kb=a("li"),Hse=a("strong"),Axo=o("megatron-bert"),Lxo=o(" \u2014 "),DN=a("a"),Bxo=o("MegatronBertForTokenClassification"),xxo=o(" (MegatronBert model)"),kxo=l(),Zb=a("li"),Use=a("strong"),Rxo=o("mobilebert"),Sxo=o(" \u2014 "),NN=a("a"),Pxo=o("MobileBertForTokenClassification"),$xo=o(" (MobileBERT model)"),Ixo=l(),e3=a("li"),Jse=a("strong"),Dxo=o("mpnet"),Nxo=o(" \u2014 "),jN=a("a"),jxo=o("MPNetForTokenClassification"),qxo=o(" (MPNet model)"),Gxo=l(),o3=a("li"),Yse=a("strong"),Oxo=o("nystromformer"),Xxo=o(" \u2014 "),qN=a("a"),Vxo=o("NystromformerForTokenClassification"),zxo=o(" (Nystromformer model)"),Wxo=l(),r3=a("li"),Kse=a("strong"),Qxo=o("qdqbert"),Hxo=o(" \u2014 "),GN=a("a"),Uxo=o("QDQBertForTokenClassification"),Jxo=o(" (QDQBert model)"),Yxo=l(),t3=a("li"),Zse=a("strong"),Kxo=o("rembert"),Zxo=o(" \u2014 "),ON=a("a"),eko=o("RemBertForTokenClassification"),oko=o(" (RemBERT model)"),rko=l(),a3=a("li"),ele=a("strong"),tko=o("roberta"),ako=o(" \u2014 "),XN=a("a"),nko=o("RobertaForTokenClassification"),sko=o(" (RoBERTa model)"),lko=l(),n3=a("li"),ole=a("strong"),iko=o("roformer"),dko=o(" \u2014 "),VN=a("a"),cko=o("RoFormerForTokenClassification"),fko=o(" (RoFormer model)"),mko=l(),s3=a("li"),rle=a("strong"),gko=o("squeezebert"),hko=o(" \u2014 "),zN=a("a"),pko=o("SqueezeBertForTokenClassification"),_ko=o(" (SqueezeBERT model)"),uko=l(),l3=a("li"),tle=a("strong"),bko=o("xlm"),vko=o(" \u2014 "),WN=a("a"),Tko=o("XLMForTokenClassification"),Fko=o(" (XLM model)"),Cko=l(),i3=a("li"),ale=a("strong"),Mko=o("xlm-roberta"),Eko=o(" \u2014 "),QN=a("a"),yko=o("XLMRobertaForTokenClassification"),wko=o(" (XLM-RoBERTa model)"),Ako=l(),d3=a("li"),nle=a("strong"),Lko=o("xlm-roberta-xl"),Bko=o(" \u2014 "),HN=a("a"),xko=o("XLMRobertaXLForTokenClassification"),kko=o(" (XLM-RoBERTa-XL model)"),Rko=l(),c3=a("li"),sle=a("strong"),Sko=o("xlnet"),Pko=o(" \u2014 "),UN=a("a"),$ko=o("XLNetForTokenClassification"),Iko=o(" (XLNet model)"),Dko=l(),f3=a("li"),lle=a("strong"),Nko=o("yoso"),jko=o(" \u2014 "),JN=a("a"),qko=o("YosoForTokenClassification"),Gko=o(" (YOSO model)"),Oko=l(),m3=a("p"),Xko=o("The model is set in evaluation mode by default using "),ile=a("code"),Vko=o("model.eval()"),zko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dle=a("code"),Wko=o("model.train()"),Qko=l(),cle=a("p"),Hko=o("Examples:"),Uko=l(),f(oy.$$.fragment),sRe=l(),Md=a("h2"),g3=a("a"),fle=a("span"),f(ry.$$.fragment),Jko=l(),mle=a("span"),Yko=o("AutoModelForQuestionAnswering"),lRe=l(),nr=a("div"),f(ty.$$.fragment),Kko=l(),Ed=a("p"),Zko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gle=a("code"),eRo=o("from_pretrained()"),oRo=o("class method or the "),hle=a("code"),rRo=o("from_config()"),tRo=o(`class
method.`),aRo=l(),ay=a("p"),nRo=o("This class cannot be instantiated directly using "),ple=a("code"),sRo=o("__init__()"),lRo=o(" (throws an error)."),iRo=l(),Zr=a("div"),f(ny.$$.fragment),dRo=l(),_le=a("p"),cRo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fRo=l(),yd=a("p"),mRo=o(`Note:
Loading a model from its configuration file does `),ule=a("strong"),gRo=o("not"),hRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ble=a("code"),pRo=o("from_pretrained()"),_Ro=o("to load the model weights."),uRo=l(),vle=a("p"),bRo=o("Examples:"),vRo=l(),f(sy.$$.fragment),TRo=l(),We=a("div"),f(ly.$$.fragment),FRo=l(),Tle=a("p"),CRo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),MRo=l(),Za=a("p"),ERo=o("The model class to instantiate is selected based on the "),Fle=a("code"),yRo=o("model_type"),wRo=o(` property of the config object (either
passed as an argument or loaded from `),Cle=a("code"),ARo=o("pretrained_model_name_or_path"),LRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mle=a("code"),BRo=o("pretrained_model_name_or_path"),xRo=o(":"),kRo=l(),R=a("ul"),h3=a("li"),Ele=a("strong"),RRo=o("albert"),SRo=o(" \u2014 "),YN=a("a"),PRo=o("AlbertForQuestionAnswering"),$Ro=o(" (ALBERT model)"),IRo=l(),p3=a("li"),yle=a("strong"),DRo=o("bart"),NRo=o(" \u2014 "),KN=a("a"),jRo=o("BartForQuestionAnswering"),qRo=o(" (BART model)"),GRo=l(),_3=a("li"),wle=a("strong"),ORo=o("bert"),XRo=o(" \u2014 "),ZN=a("a"),VRo=o("BertForQuestionAnswering"),zRo=o(" (BERT model)"),WRo=l(),u3=a("li"),Ale=a("strong"),QRo=o("big_bird"),HRo=o(" \u2014 "),ej=a("a"),URo=o("BigBirdForQuestionAnswering"),JRo=o(" (BigBird model)"),YRo=l(),b3=a("li"),Lle=a("strong"),KRo=o("bigbird_pegasus"),ZRo=o(" \u2014 "),oj=a("a"),eSo=o("BigBirdPegasusForQuestionAnswering"),oSo=o(" (BigBirdPegasus model)"),rSo=l(),v3=a("li"),Ble=a("strong"),tSo=o("camembert"),aSo=o(" \u2014 "),rj=a("a"),nSo=o("CamembertForQuestionAnswering"),sSo=o(" (CamemBERT model)"),lSo=l(),T3=a("li"),xle=a("strong"),iSo=o("canine"),dSo=o(" \u2014 "),tj=a("a"),cSo=o("CanineForQuestionAnswering"),fSo=o(" (Canine model)"),mSo=l(),F3=a("li"),kle=a("strong"),gSo=o("convbert"),hSo=o(" \u2014 "),aj=a("a"),pSo=o("ConvBertForQuestionAnswering"),_So=o(" (ConvBERT model)"),uSo=l(),C3=a("li"),Rle=a("strong"),bSo=o("data2vec-text"),vSo=o(" \u2014 "),nj=a("a"),TSo=o("Data2VecTextForQuestionAnswering"),FSo=o(" (Data2VecText model)"),CSo=l(),M3=a("li"),Sle=a("strong"),MSo=o("deberta"),ESo=o(" \u2014 "),sj=a("a"),ySo=o("DebertaForQuestionAnswering"),wSo=o(" (DeBERTa model)"),ASo=l(),E3=a("li"),Ple=a("strong"),LSo=o("deberta-v2"),BSo=o(" \u2014 "),lj=a("a"),xSo=o("DebertaV2ForQuestionAnswering"),kSo=o(" (DeBERTa-v2 model)"),RSo=l(),y3=a("li"),$le=a("strong"),SSo=o("distilbert"),PSo=o(" \u2014 "),ij=a("a"),$So=o("DistilBertForQuestionAnswering"),ISo=o(" (DistilBERT model)"),DSo=l(),w3=a("li"),Ile=a("strong"),NSo=o("electra"),jSo=o(" \u2014 "),dj=a("a"),qSo=o("ElectraForQuestionAnswering"),GSo=o(" (ELECTRA model)"),OSo=l(),A3=a("li"),Dle=a("strong"),XSo=o("flaubert"),VSo=o(" \u2014 "),cj=a("a"),zSo=o("FlaubertForQuestionAnsweringSimple"),WSo=o(" (FlauBERT model)"),QSo=l(),L3=a("li"),Nle=a("strong"),HSo=o("fnet"),USo=o(" \u2014 "),fj=a("a"),JSo=o("FNetForQuestionAnswering"),YSo=o(" (FNet model)"),KSo=l(),B3=a("li"),jle=a("strong"),ZSo=o("funnel"),ePo=o(" \u2014 "),mj=a("a"),oPo=o("FunnelForQuestionAnswering"),rPo=o(" (Funnel Transformer model)"),tPo=l(),x3=a("li"),qle=a("strong"),aPo=o("gptj"),nPo=o(" \u2014 "),gj=a("a"),sPo=o("GPTJForQuestionAnswering"),lPo=o(" (GPT-J model)"),iPo=l(),k3=a("li"),Gle=a("strong"),dPo=o("ibert"),cPo=o(" \u2014 "),hj=a("a"),fPo=o("IBertForQuestionAnswering"),mPo=o(" (I-BERT model)"),gPo=l(),R3=a("li"),Ole=a("strong"),hPo=o("layoutlmv2"),pPo=o(" \u2014 "),pj=a("a"),_Po=o("LayoutLMv2ForQuestionAnswering"),uPo=o(" (LayoutLMv2 model)"),bPo=l(),S3=a("li"),Xle=a("strong"),vPo=o("led"),TPo=o(" \u2014 "),_j=a("a"),FPo=o("LEDForQuestionAnswering"),CPo=o(" (LED model)"),MPo=l(),P3=a("li"),Vle=a("strong"),EPo=o("longformer"),yPo=o(" \u2014 "),uj=a("a"),wPo=o("LongformerForQuestionAnswering"),APo=o(" (Longformer model)"),LPo=l(),$3=a("li"),zle=a("strong"),BPo=o("lxmert"),xPo=o(" \u2014 "),bj=a("a"),kPo=o("LxmertForQuestionAnswering"),RPo=o(" (LXMERT model)"),SPo=l(),I3=a("li"),Wle=a("strong"),PPo=o("mbart"),$Po=o(" \u2014 "),vj=a("a"),IPo=o("MBartForQuestionAnswering"),DPo=o(" (mBART model)"),NPo=l(),D3=a("li"),Qle=a("strong"),jPo=o("megatron-bert"),qPo=o(" \u2014 "),Tj=a("a"),GPo=o("MegatronBertForQuestionAnswering"),OPo=o(" (MegatronBert model)"),XPo=l(),N3=a("li"),Hle=a("strong"),VPo=o("mobilebert"),zPo=o(" \u2014 "),Fj=a("a"),WPo=o("MobileBertForQuestionAnswering"),QPo=o(" (MobileBERT model)"),HPo=l(),j3=a("li"),Ule=a("strong"),UPo=o("mpnet"),JPo=o(" \u2014 "),Cj=a("a"),YPo=o("MPNetForQuestionAnswering"),KPo=o(" (MPNet model)"),ZPo=l(),q3=a("li"),Jle=a("strong"),e$o=o("nystromformer"),o$o=o(" \u2014 "),Mj=a("a"),r$o=o("NystromformerForQuestionAnswering"),t$o=o(" (Nystromformer model)"),a$o=l(),G3=a("li"),Yle=a("strong"),n$o=o("qdqbert"),s$o=o(" \u2014 "),Ej=a("a"),l$o=o("QDQBertForQuestionAnswering"),i$o=o(" (QDQBert model)"),d$o=l(),O3=a("li"),Kle=a("strong"),c$o=o("reformer"),f$o=o(" \u2014 "),yj=a("a"),m$o=o("ReformerForQuestionAnswering"),g$o=o(" (Reformer model)"),h$o=l(),X3=a("li"),Zle=a("strong"),p$o=o("rembert"),_$o=o(" \u2014 "),wj=a("a"),u$o=o("RemBertForQuestionAnswering"),b$o=o(" (RemBERT model)"),v$o=l(),V3=a("li"),eie=a("strong"),T$o=o("roberta"),F$o=o(" \u2014 "),Aj=a("a"),C$o=o("RobertaForQuestionAnswering"),M$o=o(" (RoBERTa model)"),E$o=l(),z3=a("li"),oie=a("strong"),y$o=o("roformer"),w$o=o(" \u2014 "),Lj=a("a"),A$o=o("RoFormerForQuestionAnswering"),L$o=o(" (RoFormer model)"),B$o=l(),W3=a("li"),rie=a("strong"),x$o=o("splinter"),k$o=o(" \u2014 "),Bj=a("a"),R$o=o("SplinterForQuestionAnswering"),S$o=o(" (Splinter model)"),P$o=l(),Q3=a("li"),tie=a("strong"),$$o=o("squeezebert"),I$o=o(" \u2014 "),xj=a("a"),D$o=o("SqueezeBertForQuestionAnswering"),N$o=o(" (SqueezeBERT model)"),j$o=l(),H3=a("li"),aie=a("strong"),q$o=o("xlm"),G$o=o(" \u2014 "),kj=a("a"),O$o=o("XLMForQuestionAnsweringSimple"),X$o=o(" (XLM model)"),V$o=l(),U3=a("li"),nie=a("strong"),z$o=o("xlm-roberta"),W$o=o(" \u2014 "),Rj=a("a"),Q$o=o("XLMRobertaForQuestionAnswering"),H$o=o(" (XLM-RoBERTa model)"),U$o=l(),J3=a("li"),sie=a("strong"),J$o=o("xlm-roberta-xl"),Y$o=o(" \u2014 "),Sj=a("a"),K$o=o("XLMRobertaXLForQuestionAnswering"),Z$o=o(" (XLM-RoBERTa-XL model)"),eIo=l(),Y3=a("li"),lie=a("strong"),oIo=o("xlnet"),rIo=o(" \u2014 "),Pj=a("a"),tIo=o("XLNetForQuestionAnsweringSimple"),aIo=o(" (XLNet model)"),nIo=l(),K3=a("li"),iie=a("strong"),sIo=o("yoso"),lIo=o(" \u2014 "),$j=a("a"),iIo=o("YosoForQuestionAnswering"),dIo=o(" (YOSO model)"),cIo=l(),Z3=a("p"),fIo=o("The model is set in evaluation mode by default using "),die=a("code"),mIo=o("model.eval()"),gIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cie=a("code"),hIo=o("model.train()"),pIo=l(),fie=a("p"),_Io=o("Examples:"),uIo=l(),f(iy.$$.fragment),iRe=l(),wd=a("h2"),ev=a("a"),mie=a("span"),f(dy.$$.fragment),bIo=l(),gie=a("span"),vIo=o("AutoModelForTableQuestionAnswering"),dRe=l(),sr=a("div"),f(cy.$$.fragment),TIo=l(),Ad=a("p"),FIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hie=a("code"),CIo=o("from_pretrained()"),MIo=o("class method or the "),pie=a("code"),EIo=o("from_config()"),yIo=o(`class
method.`),wIo=l(),fy=a("p"),AIo=o("This class cannot be instantiated directly using "),_ie=a("code"),LIo=o("__init__()"),BIo=o(" (throws an error)."),xIo=l(),et=a("div"),f(my.$$.fragment),kIo=l(),uie=a("p"),RIo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),SIo=l(),Ld=a("p"),PIo=o(`Note:
Loading a model from its configuration file does `),bie=a("strong"),$Io=o("not"),IIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vie=a("code"),DIo=o("from_pretrained()"),NIo=o("to load the model weights."),jIo=l(),Tie=a("p"),qIo=o("Examples:"),GIo=l(),f(gy.$$.fragment),OIo=l(),Qe=a("div"),f(hy.$$.fragment),XIo=l(),Fie=a("p"),VIo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zIo=l(),en=a("p"),WIo=o("The model class to instantiate is selected based on the "),Cie=a("code"),QIo=o("model_type"),HIo=o(` property of the config object (either
passed as an argument or loaded from `),Mie=a("code"),UIo=o("pretrained_model_name_or_path"),JIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eie=a("code"),YIo=o("pretrained_model_name_or_path"),KIo=o(":"),ZIo=l(),yie=a("ul"),ov=a("li"),wie=a("strong"),eDo=o("tapas"),oDo=o(" \u2014 "),Ij=a("a"),rDo=o("TapasForQuestionAnswering"),tDo=o(" (TAPAS model)"),aDo=l(),rv=a("p"),nDo=o("The model is set in evaluation mode by default using "),Aie=a("code"),sDo=o("model.eval()"),lDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lie=a("code"),iDo=o("model.train()"),dDo=l(),Bie=a("p"),cDo=o("Examples:"),fDo=l(),f(py.$$.fragment),cRe=l(),Bd=a("h2"),tv=a("a"),xie=a("span"),f(_y.$$.fragment),mDo=l(),kie=a("span"),gDo=o("AutoModelForImageClassification"),fRe=l(),lr=a("div"),f(uy.$$.fragment),hDo=l(),xd=a("p"),pDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Rie=a("code"),_Do=o("from_pretrained()"),uDo=o("class method or the "),Sie=a("code"),bDo=o("from_config()"),vDo=o(`class
method.`),TDo=l(),by=a("p"),FDo=o("This class cannot be instantiated directly using "),Pie=a("code"),CDo=o("__init__()"),MDo=o(" (throws an error)."),EDo=l(),ot=a("div"),f(vy.$$.fragment),yDo=l(),$ie=a("p"),wDo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ADo=l(),kd=a("p"),LDo=o(`Note:
Loading a model from its configuration file does `),Iie=a("strong"),BDo=o("not"),xDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Die=a("code"),kDo=o("from_pretrained()"),RDo=o("to load the model weights."),SDo=l(),Nie=a("p"),PDo=o("Examples:"),$Do=l(),f(Ty.$$.fragment),IDo=l(),He=a("div"),f(Fy.$$.fragment),DDo=l(),jie=a("p"),NDo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jDo=l(),on=a("p"),qDo=o("The model class to instantiate is selected based on the "),qie=a("code"),GDo=o("model_type"),ODo=o(` property of the config object (either
passed as an argument or loaded from `),Gie=a("code"),XDo=o("pretrained_model_name_or_path"),VDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oie=a("code"),zDo=o("pretrained_model_name_or_path"),WDo=o(":"),QDo=l(),ge=a("ul"),av=a("li"),Xie=a("strong"),HDo=o("beit"),UDo=o(" \u2014 "),Dj=a("a"),JDo=o("BeitForImageClassification"),YDo=o(" (BEiT model)"),KDo=l(),nv=a("li"),Vie=a("strong"),ZDo=o("convnext"),eNo=o(" \u2014 "),Nj=a("a"),oNo=o("ConvNextForImageClassification"),rNo=o(" (ConvNext model)"),tNo=l(),qs=a("li"),zie=a("strong"),aNo=o("deit"),nNo=o(" \u2014 "),jj=a("a"),sNo=o("DeiTForImageClassification"),lNo=o(" or "),qj=a("a"),iNo=o("DeiTForImageClassificationWithTeacher"),dNo=o(" (DeiT model)"),cNo=l(),sv=a("li"),Wie=a("strong"),fNo=o("imagegpt"),mNo=o(" \u2014 "),Gj=a("a"),gNo=o("ImageGPTForImageClassification"),hNo=o(" (ImageGPT model)"),pNo=l(),ma=a("li"),Qie=a("strong"),_No=o("perceiver"),uNo=o(" \u2014 "),Oj=a("a"),bNo=o("PerceiverForImageClassificationLearned"),vNo=o(" or "),Xj=a("a"),TNo=o("PerceiverForImageClassificationFourier"),FNo=o(" or "),Vj=a("a"),CNo=o("PerceiverForImageClassificationConvProcessing"),MNo=o(" (Perceiver model)"),ENo=l(),lv=a("li"),Hie=a("strong"),yNo=o("poolformer"),wNo=o(" \u2014 "),zj=a("a"),ANo=o("PoolFormerForImageClassification"),LNo=o(" (PoolFormer model)"),BNo=l(),iv=a("li"),Uie=a("strong"),xNo=o("resnet"),kNo=o(" \u2014 "),Wj=a("a"),RNo=o("ResNetForImageClassification"),SNo=o(" (ResNet model)"),PNo=l(),dv=a("li"),Jie=a("strong"),$No=o("segformer"),INo=o(" \u2014 "),Qj=a("a"),DNo=o("SegformerForImageClassification"),NNo=o(" (SegFormer model)"),jNo=l(),cv=a("li"),Yie=a("strong"),qNo=o("swin"),GNo=o(" \u2014 "),Hj=a("a"),ONo=o("SwinForImageClassification"),XNo=o(" (Swin model)"),VNo=l(),fv=a("li"),Kie=a("strong"),zNo=o("van"),WNo=o(" \u2014 "),Uj=a("a"),QNo=o("VanForImageClassification"),HNo=o(" (VAN model)"),UNo=l(),mv=a("li"),Zie=a("strong"),JNo=o("vit"),YNo=o(" \u2014 "),Jj=a("a"),KNo=o("ViTForImageClassification"),ZNo=o(" (ViT model)"),ejo=l(),gv=a("p"),ojo=o("The model is set in evaluation mode by default using "),ede=a("code"),rjo=o("model.eval()"),tjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ode=a("code"),ajo=o("model.train()"),njo=l(),rde=a("p"),sjo=o("Examples:"),ljo=l(),f(Cy.$$.fragment),mRe=l(),Rd=a("h2"),hv=a("a"),tde=a("span"),f(My.$$.fragment),ijo=l(),ade=a("span"),djo=o("AutoModelForVision2Seq"),gRe=l(),ir=a("div"),f(Ey.$$.fragment),cjo=l(),Sd=a("p"),fjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nde=a("code"),mjo=o("from_pretrained()"),gjo=o("class method or the "),sde=a("code"),hjo=o("from_config()"),pjo=o(`class
method.`),_jo=l(),yy=a("p"),ujo=o("This class cannot be instantiated directly using "),lde=a("code"),bjo=o("__init__()"),vjo=o(" (throws an error)."),Tjo=l(),rt=a("div"),f(wy.$$.fragment),Fjo=l(),ide=a("p"),Cjo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Mjo=l(),Pd=a("p"),Ejo=o(`Note:
Loading a model from its configuration file does `),dde=a("strong"),yjo=o("not"),wjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cde=a("code"),Ajo=o("from_pretrained()"),Ljo=o("to load the model weights."),Bjo=l(),fde=a("p"),xjo=o("Examples:"),kjo=l(),f(Ay.$$.fragment),Rjo=l(),Ue=a("div"),f(Ly.$$.fragment),Sjo=l(),mde=a("p"),Pjo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$jo=l(),rn=a("p"),Ijo=o("The model class to instantiate is selected based on the "),gde=a("code"),Djo=o("model_type"),Njo=o(` property of the config object (either
passed as an argument or loaded from `),hde=a("code"),jjo=o("pretrained_model_name_or_path"),qjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=a("code"),Gjo=o("pretrained_model_name_or_path"),Ojo=o(":"),Xjo=l(),_de=a("ul"),pv=a("li"),ude=a("strong"),Vjo=o("vision-encoder-decoder"),zjo=o(" \u2014 "),Yj=a("a"),Wjo=o("VisionEncoderDecoderModel"),Qjo=o(" (Vision Encoder decoder model)"),Hjo=l(),_v=a("p"),Ujo=o("The model is set in evaluation mode by default using "),bde=a("code"),Jjo=o("model.eval()"),Yjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vde=a("code"),Kjo=o("model.train()"),Zjo=l(),Tde=a("p"),eqo=o("Examples:"),oqo=l(),f(By.$$.fragment),hRe=l(),$d=a("h2"),uv=a("a"),Fde=a("span"),f(xy.$$.fragment),rqo=l(),Cde=a("span"),tqo=o("AutoModelForAudioClassification"),pRe=l(),dr=a("div"),f(ky.$$.fragment),aqo=l(),Id=a("p"),nqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Mde=a("code"),sqo=o("from_pretrained()"),lqo=o("class method or the "),Ede=a("code"),iqo=o("from_config()"),dqo=o(`class
method.`),cqo=l(),Ry=a("p"),fqo=o("This class cannot be instantiated directly using "),yde=a("code"),mqo=o("__init__()"),gqo=o(" (throws an error)."),hqo=l(),tt=a("div"),f(Sy.$$.fragment),pqo=l(),wde=a("p"),_qo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),uqo=l(),Dd=a("p"),bqo=o(`Note:
Loading a model from its configuration file does `),Ade=a("strong"),vqo=o("not"),Tqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lde=a("code"),Fqo=o("from_pretrained()"),Cqo=o("to load the model weights."),Mqo=l(),Bde=a("p"),Eqo=o("Examples:"),yqo=l(),f(Py.$$.fragment),wqo=l(),Je=a("div"),f($y.$$.fragment),Aqo=l(),xde=a("p"),Lqo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Bqo=l(),tn=a("p"),xqo=o("The model class to instantiate is selected based on the "),kde=a("code"),kqo=o("model_type"),Rqo=o(` property of the config object (either
passed as an argument or loaded from `),Rde=a("code"),Sqo=o("pretrained_model_name_or_path"),Pqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sde=a("code"),$qo=o("pretrained_model_name_or_path"),Iqo=o(":"),Dqo=l(),ke=a("ul"),bv=a("li"),Pde=a("strong"),Nqo=o("data2vec-audio"),jqo=o(" \u2014 "),Kj=a("a"),qqo=o("Data2VecAudioForSequenceClassification"),Gqo=o(" (Data2VecAudio model)"),Oqo=l(),vv=a("li"),$de=a("strong"),Xqo=o("hubert"),Vqo=o(" \u2014 "),Zj=a("a"),zqo=o("HubertForSequenceClassification"),Wqo=o(" (Hubert model)"),Qqo=l(),Tv=a("li"),Ide=a("strong"),Hqo=o("sew"),Uqo=o(" \u2014 "),eq=a("a"),Jqo=o("SEWForSequenceClassification"),Yqo=o(" (SEW model)"),Kqo=l(),Fv=a("li"),Dde=a("strong"),Zqo=o("sew-d"),eGo=o(" \u2014 "),oq=a("a"),oGo=o("SEWDForSequenceClassification"),rGo=o(" (SEW-D model)"),tGo=l(),Cv=a("li"),Nde=a("strong"),aGo=o("unispeech"),nGo=o(" \u2014 "),rq=a("a"),sGo=o("UniSpeechForSequenceClassification"),lGo=o(" (UniSpeech model)"),iGo=l(),Mv=a("li"),jde=a("strong"),dGo=o("unispeech-sat"),cGo=o(" \u2014 "),tq=a("a"),fGo=o("UniSpeechSatForSequenceClassification"),mGo=o(" (UniSpeechSat model)"),gGo=l(),Ev=a("li"),qde=a("strong"),hGo=o("wav2vec2"),pGo=o(" \u2014 "),aq=a("a"),_Go=o("Wav2Vec2ForSequenceClassification"),uGo=o(" (Wav2Vec2 model)"),bGo=l(),yv=a("li"),Gde=a("strong"),vGo=o("wavlm"),TGo=o(" \u2014 "),nq=a("a"),FGo=o("WavLMForSequenceClassification"),CGo=o(" (WavLM model)"),MGo=l(),wv=a("p"),EGo=o("The model is set in evaluation mode by default using "),Ode=a("code"),yGo=o("model.eval()"),wGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xde=a("code"),AGo=o("model.train()"),LGo=l(),Vde=a("p"),BGo=o("Examples:"),xGo=l(),f(Iy.$$.fragment),_Re=l(),Nd=a("h2"),Av=a("a"),zde=a("span"),f(Dy.$$.fragment),kGo=l(),Wde=a("span"),RGo=o("AutoModelForAudioFrameClassification"),uRe=l(),cr=a("div"),f(Ny.$$.fragment),SGo=l(),jd=a("p"),PGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Qde=a("code"),$Go=o("from_pretrained()"),IGo=o("class method or the "),Hde=a("code"),DGo=o("from_config()"),NGo=o(`class
method.`),jGo=l(),jy=a("p"),qGo=o("This class cannot be instantiated directly using "),Ude=a("code"),GGo=o("__init__()"),OGo=o(" (throws an error)."),XGo=l(),at=a("div"),f(qy.$$.fragment),VGo=l(),Jde=a("p"),zGo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),WGo=l(),qd=a("p"),QGo=o(`Note:
Loading a model from its configuration file does `),Yde=a("strong"),HGo=o("not"),UGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kde=a("code"),JGo=o("from_pretrained()"),YGo=o("to load the model weights."),KGo=l(),Zde=a("p"),ZGo=o("Examples:"),eOo=l(),f(Gy.$$.fragment),oOo=l(),Ye=a("div"),f(Oy.$$.fragment),rOo=l(),ece=a("p"),tOo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),aOo=l(),an=a("p"),nOo=o("The model class to instantiate is selected based on the "),oce=a("code"),sOo=o("model_type"),lOo=o(` property of the config object (either
passed as an argument or loaded from `),rce=a("code"),iOo=o("pretrained_model_name_or_path"),dOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tce=a("code"),cOo=o("pretrained_model_name_or_path"),fOo=o(":"),mOo=l(),nn=a("ul"),Lv=a("li"),ace=a("strong"),gOo=o("data2vec-audio"),hOo=o(" \u2014 "),sq=a("a"),pOo=o("Data2VecAudioForAudioFrameClassification"),_Oo=o(" (Data2VecAudio model)"),uOo=l(),Bv=a("li"),nce=a("strong"),bOo=o("unispeech-sat"),vOo=o(" \u2014 "),lq=a("a"),TOo=o("UniSpeechSatForAudioFrameClassification"),FOo=o(" (UniSpeechSat model)"),COo=l(),xv=a("li"),sce=a("strong"),MOo=o("wav2vec2"),EOo=o(" \u2014 "),iq=a("a"),yOo=o("Wav2Vec2ForAudioFrameClassification"),wOo=o(" (Wav2Vec2 model)"),AOo=l(),kv=a("li"),lce=a("strong"),LOo=o("wavlm"),BOo=o(" \u2014 "),dq=a("a"),xOo=o("WavLMForAudioFrameClassification"),kOo=o(" (WavLM model)"),ROo=l(),Rv=a("p"),SOo=o("The model is set in evaluation mode by default using "),ice=a("code"),POo=o("model.eval()"),$Oo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dce=a("code"),IOo=o("model.train()"),DOo=l(),cce=a("p"),NOo=o("Examples:"),jOo=l(),f(Xy.$$.fragment),bRe=l(),Gd=a("h2"),Sv=a("a"),fce=a("span"),f(Vy.$$.fragment),qOo=l(),mce=a("span"),GOo=o("AutoModelForCTC"),vRe=l(),fr=a("div"),f(zy.$$.fragment),OOo=l(),Od=a("p"),XOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),gce=a("code"),VOo=o("from_pretrained()"),zOo=o("class method or the "),hce=a("code"),WOo=o("from_config()"),QOo=o(`class
method.`),HOo=l(),Wy=a("p"),UOo=o("This class cannot be instantiated directly using "),pce=a("code"),JOo=o("__init__()"),YOo=o(" (throws an error)."),KOo=l(),nt=a("div"),f(Qy.$$.fragment),ZOo=l(),_ce=a("p"),eXo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),oXo=l(),Xd=a("p"),rXo=o(`Note:
Loading a model from its configuration file does `),uce=a("strong"),tXo=o("not"),aXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bce=a("code"),nXo=o("from_pretrained()"),sXo=o("to load the model weights."),lXo=l(),vce=a("p"),iXo=o("Examples:"),dXo=l(),f(Hy.$$.fragment),cXo=l(),Ke=a("div"),f(Uy.$$.fragment),fXo=l(),Tce=a("p"),mXo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),gXo=l(),sn=a("p"),hXo=o("The model class to instantiate is selected based on the "),Fce=a("code"),pXo=o("model_type"),_Xo=o(` property of the config object (either
passed as an argument or loaded from `),Cce=a("code"),uXo=o("pretrained_model_name_or_path"),bXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mce=a("code"),vXo=o("pretrained_model_name_or_path"),TXo=o(":"),FXo=l(),Re=a("ul"),Pv=a("li"),Ece=a("strong"),CXo=o("data2vec-audio"),MXo=o(" \u2014 "),cq=a("a"),EXo=o("Data2VecAudioForCTC"),yXo=o(" (Data2VecAudio model)"),wXo=l(),$v=a("li"),yce=a("strong"),AXo=o("hubert"),LXo=o(" \u2014 "),fq=a("a"),BXo=o("HubertForCTC"),xXo=o(" (Hubert model)"),kXo=l(),Iv=a("li"),wce=a("strong"),RXo=o("sew"),SXo=o(" \u2014 "),mq=a("a"),PXo=o("SEWForCTC"),$Xo=o(" (SEW model)"),IXo=l(),Dv=a("li"),Ace=a("strong"),DXo=o("sew-d"),NXo=o(" \u2014 "),gq=a("a"),jXo=o("SEWDForCTC"),qXo=o(" (SEW-D model)"),GXo=l(),Nv=a("li"),Lce=a("strong"),OXo=o("unispeech"),XXo=o(" \u2014 "),hq=a("a"),VXo=o("UniSpeechForCTC"),zXo=o(" (UniSpeech model)"),WXo=l(),jv=a("li"),Bce=a("strong"),QXo=o("unispeech-sat"),HXo=o(" \u2014 "),pq=a("a"),UXo=o("UniSpeechSatForCTC"),JXo=o(" (UniSpeechSat model)"),YXo=l(),qv=a("li"),xce=a("strong"),KXo=o("wav2vec2"),ZXo=o(" \u2014 "),_q=a("a"),eVo=o("Wav2Vec2ForCTC"),oVo=o(" (Wav2Vec2 model)"),rVo=l(),Gv=a("li"),kce=a("strong"),tVo=o("wavlm"),aVo=o(" \u2014 "),uq=a("a"),nVo=o("WavLMForCTC"),sVo=o(" (WavLM model)"),lVo=l(),Ov=a("p"),iVo=o("The model is set in evaluation mode by default using "),Rce=a("code"),dVo=o("model.eval()"),cVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sce=a("code"),fVo=o("model.train()"),mVo=l(),Pce=a("p"),gVo=o("Examples:"),hVo=l(),f(Jy.$$.fragment),TRe=l(),Vd=a("h2"),Xv=a("a"),$ce=a("span"),f(Yy.$$.fragment),pVo=l(),Ice=a("span"),_Vo=o("AutoModelForSpeechSeq2Seq"),FRe=l(),mr=a("div"),f(Ky.$$.fragment),uVo=l(),zd=a("p"),bVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Dce=a("code"),vVo=o("from_pretrained()"),TVo=o("class method or the "),Nce=a("code"),FVo=o("from_config()"),CVo=o(`class
method.`),MVo=l(),Zy=a("p"),EVo=o("This class cannot be instantiated directly using "),jce=a("code"),yVo=o("__init__()"),wVo=o(" (throws an error)."),AVo=l(),st=a("div"),f(ew.$$.fragment),LVo=l(),qce=a("p"),BVo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xVo=l(),Wd=a("p"),kVo=o(`Note:
Loading a model from its configuration file does `),Gce=a("strong"),RVo=o("not"),SVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oce=a("code"),PVo=o("from_pretrained()"),$Vo=o("to load the model weights."),IVo=l(),Xce=a("p"),DVo=o("Examples:"),NVo=l(),f(ow.$$.fragment),jVo=l(),Ze=a("div"),f(rw.$$.fragment),qVo=l(),Vce=a("p"),GVo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),OVo=l(),ln=a("p"),XVo=o("The model class to instantiate is selected based on the "),zce=a("code"),VVo=o("model_type"),zVo=o(` property of the config object (either
passed as an argument or loaded from `),Wce=a("code"),WVo=o("pretrained_model_name_or_path"),QVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qce=a("code"),HVo=o("pretrained_model_name_or_path"),UVo=o(":"),JVo=l(),tw=a("ul"),Vv=a("li"),Hce=a("strong"),YVo=o("speech-encoder-decoder"),KVo=o(" \u2014 "),bq=a("a"),ZVo=o("SpeechEncoderDecoderModel"),ezo=o(" (Speech Encoder decoder model)"),ozo=l(),zv=a("li"),Uce=a("strong"),rzo=o("speech_to_text"),tzo=o(" \u2014 "),vq=a("a"),azo=o("Speech2TextForConditionalGeneration"),nzo=o(" (Speech2Text model)"),szo=l(),Wv=a("p"),lzo=o("The model is set in evaluation mode by default using "),Jce=a("code"),izo=o("model.eval()"),dzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yce=a("code"),czo=o("model.train()"),fzo=l(),Kce=a("p"),mzo=o("Examples:"),gzo=l(),f(aw.$$.fragment),CRe=l(),Qd=a("h2"),Qv=a("a"),Zce=a("span"),f(nw.$$.fragment),hzo=l(),efe=a("span"),pzo=o("AutoModelForAudioXVector"),MRe=l(),gr=a("div"),f(sw.$$.fragment),_zo=l(),Hd=a("p"),uzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ofe=a("code"),bzo=o("from_pretrained()"),vzo=o("class method or the "),rfe=a("code"),Tzo=o("from_config()"),Fzo=o(`class
method.`),Czo=l(),lw=a("p"),Mzo=o("This class cannot be instantiated directly using "),tfe=a("code"),Ezo=o("__init__()"),yzo=o(" (throws an error)."),wzo=l(),lt=a("div"),f(iw.$$.fragment),Azo=l(),afe=a("p"),Lzo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Bzo=l(),Ud=a("p"),xzo=o(`Note:
Loading a model from its configuration file does `),nfe=a("strong"),kzo=o("not"),Rzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sfe=a("code"),Szo=o("from_pretrained()"),Pzo=o("to load the model weights."),$zo=l(),lfe=a("p"),Izo=o("Examples:"),Dzo=l(),f(dw.$$.fragment),Nzo=l(),eo=a("div"),f(cw.$$.fragment),jzo=l(),ife=a("p"),qzo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Gzo=l(),dn=a("p"),Ozo=o("The model class to instantiate is selected based on the "),dfe=a("code"),Xzo=o("model_type"),Vzo=o(` property of the config object (either
passed as an argument or loaded from `),cfe=a("code"),zzo=o("pretrained_model_name_or_path"),Wzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ffe=a("code"),Qzo=o("pretrained_model_name_or_path"),Hzo=o(":"),Uzo=l(),cn=a("ul"),Hv=a("li"),mfe=a("strong"),Jzo=o("data2vec-audio"),Yzo=o(" \u2014 "),Tq=a("a"),Kzo=o("Data2VecAudioForXVector"),Zzo=o(" (Data2VecAudio model)"),eWo=l(),Uv=a("li"),gfe=a("strong"),oWo=o("unispeech-sat"),rWo=o(" \u2014 "),Fq=a("a"),tWo=o("UniSpeechSatForXVector"),aWo=o(" (UniSpeechSat model)"),nWo=l(),Jv=a("li"),hfe=a("strong"),sWo=o("wav2vec2"),lWo=o(" \u2014 "),Cq=a("a"),iWo=o("Wav2Vec2ForXVector"),dWo=o(" (Wav2Vec2 model)"),cWo=l(),Yv=a("li"),pfe=a("strong"),fWo=o("wavlm"),mWo=o(" \u2014 "),Mq=a("a"),gWo=o("WavLMForXVector"),hWo=o(" (WavLM model)"),pWo=l(),Kv=a("p"),_Wo=o("The model is set in evaluation mode by default using "),_fe=a("code"),uWo=o("model.eval()"),bWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=a("code"),vWo=o("model.train()"),TWo=l(),bfe=a("p"),FWo=o("Examples:"),CWo=l(),f(fw.$$.fragment),ERe=l(),Jd=a("h2"),Zv=a("a"),vfe=a("span"),f(mw.$$.fragment),MWo=l(),Tfe=a("span"),EWo=o("AutoModelForMaskedImageModeling"),yRe=l(),hr=a("div"),f(gw.$$.fragment),yWo=l(),Yd=a("p"),wWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Ffe=a("code"),AWo=o("from_pretrained()"),LWo=o("class method or the "),Cfe=a("code"),BWo=o("from_config()"),xWo=o(`class
method.`),kWo=l(),hw=a("p"),RWo=o("This class cannot be instantiated directly using "),Mfe=a("code"),SWo=o("__init__()"),PWo=o(" (throws an error)."),$Wo=l(),it=a("div"),f(pw.$$.fragment),IWo=l(),Efe=a("p"),DWo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),NWo=l(),Kd=a("p"),jWo=o(`Note:
Loading a model from its configuration file does `),yfe=a("strong"),qWo=o("not"),GWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wfe=a("code"),OWo=o("from_pretrained()"),XWo=o("to load the model weights."),VWo=l(),Afe=a("p"),zWo=o("Examples:"),WWo=l(),f(_w.$$.fragment),QWo=l(),oo=a("div"),f(uw.$$.fragment),HWo=l(),Lfe=a("p"),UWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),JWo=l(),fn=a("p"),YWo=o("The model class to instantiate is selected based on the "),Bfe=a("code"),KWo=o("model_type"),ZWo=o(` property of the config object (either
passed as an argument or loaded from `),xfe=a("code"),eQo=o("pretrained_model_name_or_path"),oQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=a("code"),rQo=o("pretrained_model_name_or_path"),tQo=o(":"),aQo=l(),Zd=a("ul"),e6=a("li"),Rfe=a("strong"),nQo=o("deit"),sQo=o(" \u2014 "),Eq=a("a"),lQo=o("DeiTForMaskedImageModeling"),iQo=o(" (DeiT model)"),dQo=l(),o6=a("li"),Sfe=a("strong"),cQo=o("swin"),fQo=o(" \u2014 "),yq=a("a"),mQo=o("SwinForMaskedImageModeling"),gQo=o(" (Swin model)"),hQo=l(),r6=a("li"),Pfe=a("strong"),pQo=o("vit"),_Qo=o(" \u2014 "),wq=a("a"),uQo=o("ViTForMaskedImageModeling"),bQo=o(" (ViT model)"),vQo=l(),t6=a("p"),TQo=o("The model is set in evaluation mode by default using "),$fe=a("code"),FQo=o("model.eval()"),CQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ife=a("code"),MQo=o("model.train()"),EQo=l(),Dfe=a("p"),yQo=o("Examples:"),wQo=l(),f(bw.$$.fragment),wRe=l(),ec=a("h2"),a6=a("a"),Nfe=a("span"),f(vw.$$.fragment),AQo=l(),jfe=a("span"),LQo=o("AutoModelForObjectDetection"),ARe=l(),pr=a("div"),f(Tw.$$.fragment),BQo=l(),oc=a("p"),xQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),qfe=a("code"),kQo=o("from_pretrained()"),RQo=o("class method or the "),Gfe=a("code"),SQo=o("from_config()"),PQo=o(`class
method.`),$Qo=l(),Fw=a("p"),IQo=o("This class cannot be instantiated directly using "),Ofe=a("code"),DQo=o("__init__()"),NQo=o(" (throws an error)."),jQo=l(),dt=a("div"),f(Cw.$$.fragment),qQo=l(),Xfe=a("p"),GQo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),OQo=l(),rc=a("p"),XQo=o(`Note:
Loading a model from its configuration file does `),Vfe=a("strong"),VQo=o("not"),zQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zfe=a("code"),WQo=o("from_pretrained()"),QQo=o("to load the model weights."),HQo=l(),Wfe=a("p"),UQo=o("Examples:"),JQo=l(),f(Mw.$$.fragment),YQo=l(),ro=a("div"),f(Ew.$$.fragment),KQo=l(),Qfe=a("p"),ZQo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),eHo=l(),mn=a("p"),oHo=o("The model class to instantiate is selected based on the "),Hfe=a("code"),rHo=o("model_type"),tHo=o(` property of the config object (either
passed as an argument or loaded from `),Ufe=a("code"),aHo=o("pretrained_model_name_or_path"),nHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jfe=a("code"),sHo=o("pretrained_model_name_or_path"),lHo=o(":"),iHo=l(),Yfe=a("ul"),n6=a("li"),Kfe=a("strong"),dHo=o("detr"),cHo=o(" \u2014 "),Aq=a("a"),fHo=o("DetrForObjectDetection"),mHo=o(" (DETR model)"),gHo=l(),s6=a("p"),hHo=o("The model is set in evaluation mode by default using "),Zfe=a("code"),pHo=o("model.eval()"),_Ho=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=a("code"),uHo=o("model.train()"),bHo=l(),ome=a("p"),vHo=o("Examples:"),THo=l(),f(yw.$$.fragment),LRe=l(),tc=a("h2"),l6=a("a"),rme=a("span"),f(ww.$$.fragment),FHo=l(),tme=a("span"),CHo=o("AutoModelForImageSegmentation"),BRe=l(),_r=a("div"),f(Aw.$$.fragment),MHo=l(),ac=a("p"),EHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ame=a("code"),yHo=o("from_pretrained()"),wHo=o("class method or the "),nme=a("code"),AHo=o("from_config()"),LHo=o(`class
method.`),BHo=l(),Lw=a("p"),xHo=o("This class cannot be instantiated directly using "),sme=a("code"),kHo=o("__init__()"),RHo=o(" (throws an error)."),SHo=l(),ct=a("div"),f(Bw.$$.fragment),PHo=l(),lme=a("p"),$Ho=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),IHo=l(),nc=a("p"),DHo=o(`Note:
Loading a model from its configuration file does `),ime=a("strong"),NHo=o("not"),jHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dme=a("code"),qHo=o("from_pretrained()"),GHo=o("to load the model weights."),OHo=l(),cme=a("p"),XHo=o("Examples:"),VHo=l(),f(xw.$$.fragment),zHo=l(),to=a("div"),f(kw.$$.fragment),WHo=l(),fme=a("p"),QHo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),HHo=l(),gn=a("p"),UHo=o("The model class to instantiate is selected based on the "),mme=a("code"),JHo=o("model_type"),YHo=o(` property of the config object (either
passed as an argument or loaded from `),gme=a("code"),KHo=o("pretrained_model_name_or_path"),ZHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hme=a("code"),eUo=o("pretrained_model_name_or_path"),oUo=o(":"),rUo=l(),pme=a("ul"),i6=a("li"),_me=a("strong"),tUo=o("detr"),aUo=o(" \u2014 "),Lq=a("a"),nUo=o("DetrForSegmentation"),sUo=o(" (DETR model)"),lUo=l(),d6=a("p"),iUo=o("The model is set in evaluation mode by default using "),ume=a("code"),dUo=o("model.eval()"),cUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bme=a("code"),fUo=o("model.train()"),mUo=l(),vme=a("p"),gUo=o("Examples:"),hUo=l(),f(Rw.$$.fragment),xRe=l(),sc=a("h2"),c6=a("a"),Tme=a("span"),f(Sw.$$.fragment),pUo=l(),Fme=a("span"),_Uo=o("AutoModelForSemanticSegmentation"),kRe=l(),ur=a("div"),f(Pw.$$.fragment),uUo=l(),lc=a("p"),bUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Cme=a("code"),vUo=o("from_pretrained()"),TUo=o("class method or the "),Mme=a("code"),FUo=o("from_config()"),CUo=o(`class
method.`),MUo=l(),$w=a("p"),EUo=o("This class cannot be instantiated directly using "),Eme=a("code"),yUo=o("__init__()"),wUo=o(" (throws an error)."),AUo=l(),ft=a("div"),f(Iw.$$.fragment),LUo=l(),yme=a("p"),BUo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),xUo=l(),ic=a("p"),kUo=o(`Note:
Loading a model from its configuration file does `),wme=a("strong"),RUo=o("not"),SUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ame=a("code"),PUo=o("from_pretrained()"),$Uo=o("to load the model weights."),IUo=l(),Lme=a("p"),DUo=o("Examples:"),NUo=l(),f(Dw.$$.fragment),jUo=l(),ao=a("div"),f(Nw.$$.fragment),qUo=l(),Bme=a("p"),GUo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),OUo=l(),hn=a("p"),XUo=o("The model class to instantiate is selected based on the "),xme=a("code"),VUo=o("model_type"),zUo=o(` property of the config object (either
passed as an argument or loaded from `),kme=a("code"),WUo=o("pretrained_model_name_or_path"),QUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rme=a("code"),HUo=o("pretrained_model_name_or_path"),UUo=o(":"),JUo=l(),dc=a("ul"),f6=a("li"),Sme=a("strong"),YUo=o("beit"),KUo=o(" \u2014 "),Bq=a("a"),ZUo=o("BeitForSemanticSegmentation"),eJo=o(" (BEiT model)"),oJo=l(),m6=a("li"),Pme=a("strong"),rJo=o("dpt"),tJo=o(" \u2014 "),xq=a("a"),aJo=o("DPTForSemanticSegmentation"),nJo=o(" (DPT model)"),sJo=l(),g6=a("li"),$me=a("strong"),lJo=o("segformer"),iJo=o(" \u2014 "),kq=a("a"),dJo=o("SegformerForSemanticSegmentation"),cJo=o(" (SegFormer model)"),fJo=l(),h6=a("p"),mJo=o("The model is set in evaluation mode by default using "),Ime=a("code"),gJo=o("model.eval()"),hJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=a("code"),pJo=o("model.train()"),_Jo=l(),Nme=a("p"),uJo=o("Examples:"),bJo=l(),f(jw.$$.fragment),RRe=l(),cc=a("h2"),p6=a("a"),jme=a("span"),f(qw.$$.fragment),vJo=l(),qme=a("span"),TJo=o("AutoModelForInstanceSegmentation"),SRe=l(),br=a("div"),f(Gw.$$.fragment),FJo=l(),fc=a("p"),CJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Gme=a("code"),MJo=o("from_pretrained()"),EJo=o("class method or the "),Ome=a("code"),yJo=o("from_config()"),wJo=o(`class
method.`),AJo=l(),Ow=a("p"),LJo=o("This class cannot be instantiated directly using "),Xme=a("code"),BJo=o("__init__()"),xJo=o(" (throws an error)."),kJo=l(),mt=a("div"),f(Xw.$$.fragment),RJo=l(),Vme=a("p"),SJo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),PJo=l(),mc=a("p"),$Jo=o(`Note:
Loading a model from its configuration file does `),zme=a("strong"),IJo=o("not"),DJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wme=a("code"),NJo=o("from_pretrained()"),jJo=o("to load the model weights."),qJo=l(),Qme=a("p"),GJo=o("Examples:"),OJo=l(),f(Vw.$$.fragment),XJo=l(),no=a("div"),f(zw.$$.fragment),VJo=l(),Hme=a("p"),zJo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),WJo=l(),pn=a("p"),QJo=o("The model class to instantiate is selected based on the "),Ume=a("code"),HJo=o("model_type"),UJo=o(` property of the config object (either
passed as an argument or loaded from `),Jme=a("code"),JJo=o("pretrained_model_name_or_path"),YJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=a("code"),KJo=o("pretrained_model_name_or_path"),ZJo=o(":"),eYo=l(),Kme=a("ul"),_6=a("li"),Zme=a("strong"),oYo=o("maskformer"),rYo=o(" \u2014 "),Rq=a("a"),tYo=o("MaskFormerForInstanceSegmentation"),aYo=o(" (MaskFormer model)"),nYo=l(),u6=a("p"),sYo=o("The model is set in evaluation mode by default using "),ege=a("code"),lYo=o("model.eval()"),iYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=a("code"),dYo=o("model.train()"),cYo=l(),rge=a("p"),fYo=o("Examples:"),mYo=l(),f(Ww.$$.fragment),PRe=l(),gc=a("h2"),b6=a("a"),tge=a("span"),f(Qw.$$.fragment),gYo=l(),age=a("span"),hYo=o("TFAutoModel"),$Re=l(),vr=a("div"),f(Hw.$$.fragment),pYo=l(),hc=a("p"),_Yo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nge=a("code"),uYo=o("from_pretrained()"),bYo=o("class method or the "),sge=a("code"),vYo=o("from_config()"),TYo=o(`class
method.`),FYo=l(),Uw=a("p"),CYo=o("This class cannot be instantiated directly using "),lge=a("code"),MYo=o("__init__()"),EYo=o(" (throws an error)."),yYo=l(),gt=a("div"),f(Jw.$$.fragment),wYo=l(),ige=a("p"),AYo=o("Instantiates one of the base model classes of the library from a configuration."),LYo=l(),pc=a("p"),BYo=o(`Note:
Loading a model from its configuration file does `),dge=a("strong"),xYo=o("not"),kYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cge=a("code"),RYo=o("from_pretrained()"),SYo=o("to load the model weights."),PYo=l(),fge=a("p"),$Yo=o("Examples:"),IYo=l(),f(Yw.$$.fragment),DYo=l(),ho=a("div"),f(Kw.$$.fragment),NYo=l(),mge=a("p"),jYo=o("Instantiate one of the base model classes of the library from a pretrained model."),qYo=l(),_n=a("p"),GYo=o("The model class to instantiate is selected based on the "),gge=a("code"),OYo=o("model_type"),XYo=o(` property of the config object (either
passed as an argument or loaded from `),hge=a("code"),VYo=o("pretrained_model_name_or_path"),zYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pge=a("code"),WYo=o("pretrained_model_name_or_path"),QYo=o(":"),HYo=l(),B=a("ul"),v6=a("li"),_ge=a("strong"),UYo=o("albert"),JYo=o(" \u2014 "),Sq=a("a"),YYo=o("TFAlbertModel"),KYo=o(" (ALBERT model)"),ZYo=l(),T6=a("li"),uge=a("strong"),eKo=o("bart"),oKo=o(" \u2014 "),Pq=a("a"),rKo=o("TFBartModel"),tKo=o(" (BART model)"),aKo=l(),F6=a("li"),bge=a("strong"),nKo=o("bert"),sKo=o(" \u2014 "),$q=a("a"),lKo=o("TFBertModel"),iKo=o(" (BERT model)"),dKo=l(),C6=a("li"),vge=a("strong"),cKo=o("blenderbot"),fKo=o(" \u2014 "),Iq=a("a"),mKo=o("TFBlenderbotModel"),gKo=o(" (Blenderbot model)"),hKo=l(),M6=a("li"),Tge=a("strong"),pKo=o("blenderbot-small"),_Ko=o(" \u2014 "),Dq=a("a"),uKo=o("TFBlenderbotSmallModel"),bKo=o(" (BlenderbotSmall model)"),vKo=l(),E6=a("li"),Fge=a("strong"),TKo=o("camembert"),FKo=o(" \u2014 "),Nq=a("a"),CKo=o("TFCamembertModel"),MKo=o(" (CamemBERT model)"),EKo=l(),y6=a("li"),Cge=a("strong"),yKo=o("clip"),wKo=o(" \u2014 "),jq=a("a"),AKo=o("TFCLIPModel"),LKo=o(" (CLIP model)"),BKo=l(),w6=a("li"),Mge=a("strong"),xKo=o("convbert"),kKo=o(" \u2014 "),qq=a("a"),RKo=o("TFConvBertModel"),SKo=o(" (ConvBERT model)"),PKo=l(),A6=a("li"),Ege=a("strong"),$Ko=o("convnext"),IKo=o(" \u2014 "),Gq=a("a"),DKo=o("TFConvNextModel"),NKo=o(" (ConvNext model)"),jKo=l(),L6=a("li"),yge=a("strong"),qKo=o("ctrl"),GKo=o(" \u2014 "),Oq=a("a"),OKo=o("TFCTRLModel"),XKo=o(" (CTRL model)"),VKo=l(),B6=a("li"),wge=a("strong"),zKo=o("deberta"),WKo=o(" \u2014 "),Xq=a("a"),QKo=o("TFDebertaModel"),HKo=o(" (DeBERTa model)"),UKo=l(),x6=a("li"),Age=a("strong"),JKo=o("deberta-v2"),YKo=o(" \u2014 "),Vq=a("a"),KKo=o("TFDebertaV2Model"),ZKo=o(" (DeBERTa-v2 model)"),eZo=l(),k6=a("li"),Lge=a("strong"),oZo=o("distilbert"),rZo=o(" \u2014 "),zq=a("a"),tZo=o("TFDistilBertModel"),aZo=o(" (DistilBERT model)"),nZo=l(),R6=a("li"),Bge=a("strong"),sZo=o("dpr"),lZo=o(" \u2014 "),Wq=a("a"),iZo=o("TFDPRQuestionEncoder"),dZo=o(" (DPR model)"),cZo=l(),S6=a("li"),xge=a("strong"),fZo=o("electra"),mZo=o(" \u2014 "),Qq=a("a"),gZo=o("TFElectraModel"),hZo=o(" (ELECTRA model)"),pZo=l(),P6=a("li"),kge=a("strong"),_Zo=o("flaubert"),uZo=o(" \u2014 "),Hq=a("a"),bZo=o("TFFlaubertModel"),vZo=o(" (FlauBERT model)"),TZo=l(),Gs=a("li"),Rge=a("strong"),FZo=o("funnel"),CZo=o(" \u2014 "),Uq=a("a"),MZo=o("TFFunnelModel"),EZo=o(" or "),Jq=a("a"),yZo=o("TFFunnelBaseModel"),wZo=o(" (Funnel Transformer model)"),AZo=l(),$6=a("li"),Sge=a("strong"),LZo=o("gpt2"),BZo=o(" \u2014 "),Yq=a("a"),xZo=o("TFGPT2Model"),kZo=o(" (OpenAI GPT-2 model)"),RZo=l(),I6=a("li"),Pge=a("strong"),SZo=o("gptj"),PZo=o(" \u2014 "),Kq=a("a"),$Zo=o("TFGPTJModel"),IZo=o(" (GPT-J model)"),DZo=l(),D6=a("li"),$ge=a("strong"),NZo=o("hubert"),jZo=o(" \u2014 "),Zq=a("a"),qZo=o("TFHubertModel"),GZo=o(" (Hubert model)"),OZo=l(),N6=a("li"),Ige=a("strong"),XZo=o("layoutlm"),VZo=o(" \u2014 "),eG=a("a"),zZo=o("TFLayoutLMModel"),WZo=o(" (LayoutLM model)"),QZo=l(),j6=a("li"),Dge=a("strong"),HZo=o("led"),UZo=o(" \u2014 "),oG=a("a"),JZo=o("TFLEDModel"),YZo=o(" (LED model)"),KZo=l(),q6=a("li"),Nge=a("strong"),ZZo=o("longformer"),eer=o(" \u2014 "),rG=a("a"),oer=o("TFLongformerModel"),rer=o(" (Longformer model)"),ter=l(),G6=a("li"),jge=a("strong"),aer=o("lxmert"),ner=o(" \u2014 "),tG=a("a"),ser=o("TFLxmertModel"),ler=o(" (LXMERT model)"),ier=l(),O6=a("li"),qge=a("strong"),der=o("marian"),cer=o(" \u2014 "),aG=a("a"),fer=o("TFMarianModel"),mer=o(" (Marian model)"),ger=l(),X6=a("li"),Gge=a("strong"),her=o("mbart"),per=o(" \u2014 "),nG=a("a"),_er=o("TFMBartModel"),uer=o(" (mBART model)"),ber=l(),V6=a("li"),Oge=a("strong"),ver=o("mobilebert"),Ter=o(" \u2014 "),sG=a("a"),Fer=o("TFMobileBertModel"),Cer=o(" (MobileBERT model)"),Mer=l(),z6=a("li"),Xge=a("strong"),Eer=o("mpnet"),yer=o(" \u2014 "),lG=a("a"),wer=o("TFMPNetModel"),Aer=o(" (MPNet model)"),Ler=l(),W6=a("li"),Vge=a("strong"),Ber=o("mt5"),xer=o(" \u2014 "),iG=a("a"),ker=o("TFMT5Model"),Rer=o(" (mT5 model)"),Ser=l(),Q6=a("li"),zge=a("strong"),Per=o("openai-gpt"),$er=o(" \u2014 "),dG=a("a"),Ier=o("TFOpenAIGPTModel"),Der=o(" (OpenAI GPT model)"),Ner=l(),H6=a("li"),Wge=a("strong"),jer=o("pegasus"),qer=o(" \u2014 "),cG=a("a"),Ger=o("TFPegasusModel"),Oer=o(" (Pegasus model)"),Xer=l(),U6=a("li"),Qge=a("strong"),Ver=o("rembert"),zer=o(" \u2014 "),fG=a("a"),Wer=o("TFRemBertModel"),Qer=o(" (RemBERT model)"),Her=l(),J6=a("li"),Hge=a("strong"),Uer=o("roberta"),Jer=o(" \u2014 "),mG=a("a"),Yer=o("TFRobertaModel"),Ker=o(" (RoBERTa model)"),Zer=l(),Y6=a("li"),Uge=a("strong"),eor=o("roformer"),oor=o(" \u2014 "),gG=a("a"),ror=o("TFRoFormerModel"),tor=o(" (RoFormer model)"),aor=l(),K6=a("li"),Jge=a("strong"),nor=o("speech_to_text"),sor=o(" \u2014 "),hG=a("a"),lor=o("TFSpeech2TextModel"),ior=o(" (Speech2Text model)"),dor=l(),Z6=a("li"),Yge=a("strong"),cor=o("t5"),mor=o(" \u2014 "),pG=a("a"),gor=o("TFT5Model"),hor=o(" (T5 model)"),por=l(),eT=a("li"),Kge=a("strong"),_or=o("tapas"),uor=o(" \u2014 "),_G=a("a"),bor=o("TFTapasModel"),vor=o(" (TAPAS model)"),Tor=l(),oT=a("li"),Zge=a("strong"),For=o("transfo-xl"),Cor=o(" \u2014 "),uG=a("a"),Mor=o("TFTransfoXLModel"),Eor=o(" (Transformer-XL model)"),yor=l(),rT=a("li"),ehe=a("strong"),wor=o("vit"),Aor=o(" \u2014 "),bG=a("a"),Lor=o("TFViTModel"),Bor=o(" (ViT model)"),xor=l(),tT=a("li"),ohe=a("strong"),kor=o("wav2vec2"),Ror=o(" \u2014 "),vG=a("a"),Sor=o("TFWav2Vec2Model"),Por=o(" (Wav2Vec2 model)"),$or=l(),aT=a("li"),rhe=a("strong"),Ior=o("xlm"),Dor=o(" \u2014 "),TG=a("a"),Nor=o("TFXLMModel"),jor=o(" (XLM model)"),qor=l(),nT=a("li"),the=a("strong"),Gor=o("xlm-roberta"),Oor=o(" \u2014 "),FG=a("a"),Xor=o("TFXLMRobertaModel"),Vor=o(" (XLM-RoBERTa model)"),zor=l(),sT=a("li"),ahe=a("strong"),Wor=o("xlnet"),Qor=o(" \u2014 "),CG=a("a"),Hor=o("TFXLNetModel"),Uor=o(" (XLNet model)"),Jor=l(),nhe=a("p"),Yor=o("Examples:"),Kor=l(),f(Zw.$$.fragment),IRe=l(),_c=a("h2"),lT=a("a"),she=a("span"),f(eA.$$.fragment),Zor=l(),lhe=a("span"),err=o("TFAutoModelForPreTraining"),DRe=l(),Tr=a("div"),f(oA.$$.fragment),orr=l(),uc=a("p"),rrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ihe=a("code"),trr=o("from_pretrained()"),arr=o("class method or the "),dhe=a("code"),nrr=o("from_config()"),srr=o(`class
method.`),lrr=l(),rA=a("p"),irr=o("This class cannot be instantiated directly using "),che=a("code"),drr=o("__init__()"),crr=o(" (throws an error)."),frr=l(),ht=a("div"),f(tA.$$.fragment),mrr=l(),fhe=a("p"),grr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hrr=l(),bc=a("p"),prr=o(`Note:
Loading a model from its configuration file does `),mhe=a("strong"),_rr=o("not"),urr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ghe=a("code"),brr=o("from_pretrained()"),vrr=o("to load the model weights."),Trr=l(),hhe=a("p"),Frr=o("Examples:"),Crr=l(),f(aA.$$.fragment),Mrr=l(),po=a("div"),f(nA.$$.fragment),Err=l(),phe=a("p"),yrr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wrr=l(),un=a("p"),Arr=o("The model class to instantiate is selected based on the "),_he=a("code"),Lrr=o("model_type"),Brr=o(` property of the config object (either
passed as an argument or loaded from `),uhe=a("code"),xrr=o("pretrained_model_name_or_path"),krr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=a("code"),Rrr=o("pretrained_model_name_or_path"),Srr=o(":"),Prr=l(),H=a("ul"),iT=a("li"),vhe=a("strong"),$rr=o("albert"),Irr=o(" \u2014 "),MG=a("a"),Drr=o("TFAlbertForPreTraining"),Nrr=o(" (ALBERT model)"),jrr=l(),dT=a("li"),The=a("strong"),qrr=o("bart"),Grr=o(" \u2014 "),EG=a("a"),Orr=o("TFBartForConditionalGeneration"),Xrr=o(" (BART model)"),Vrr=l(),cT=a("li"),Fhe=a("strong"),zrr=o("bert"),Wrr=o(" \u2014 "),yG=a("a"),Qrr=o("TFBertForPreTraining"),Hrr=o(" (BERT model)"),Urr=l(),fT=a("li"),Che=a("strong"),Jrr=o("camembert"),Yrr=o(" \u2014 "),wG=a("a"),Krr=o("TFCamembertForMaskedLM"),Zrr=o(" (CamemBERT model)"),etr=l(),mT=a("li"),Mhe=a("strong"),otr=o("ctrl"),rtr=o(" \u2014 "),AG=a("a"),ttr=o("TFCTRLLMHeadModel"),atr=o(" (CTRL model)"),ntr=l(),gT=a("li"),Ehe=a("strong"),str=o("distilbert"),ltr=o(" \u2014 "),LG=a("a"),itr=o("TFDistilBertForMaskedLM"),dtr=o(" (DistilBERT model)"),ctr=l(),hT=a("li"),yhe=a("strong"),ftr=o("electra"),mtr=o(" \u2014 "),BG=a("a"),gtr=o("TFElectraForPreTraining"),htr=o(" (ELECTRA model)"),ptr=l(),pT=a("li"),whe=a("strong"),_tr=o("flaubert"),utr=o(" \u2014 "),xG=a("a"),btr=o("TFFlaubertWithLMHeadModel"),vtr=o(" (FlauBERT model)"),Ttr=l(),_T=a("li"),Ahe=a("strong"),Ftr=o("funnel"),Ctr=o(" \u2014 "),kG=a("a"),Mtr=o("TFFunnelForPreTraining"),Etr=o(" (Funnel Transformer model)"),ytr=l(),uT=a("li"),Lhe=a("strong"),wtr=o("gpt2"),Atr=o(" \u2014 "),RG=a("a"),Ltr=o("TFGPT2LMHeadModel"),Btr=o(" (OpenAI GPT-2 model)"),xtr=l(),bT=a("li"),Bhe=a("strong"),ktr=o("layoutlm"),Rtr=o(" \u2014 "),SG=a("a"),Str=o("TFLayoutLMForMaskedLM"),Ptr=o(" (LayoutLM model)"),$tr=l(),vT=a("li"),xhe=a("strong"),Itr=o("lxmert"),Dtr=o(" \u2014 "),PG=a("a"),Ntr=o("TFLxmertForPreTraining"),jtr=o(" (LXMERT model)"),qtr=l(),TT=a("li"),khe=a("strong"),Gtr=o("mobilebert"),Otr=o(" \u2014 "),$G=a("a"),Xtr=o("TFMobileBertForPreTraining"),Vtr=o(" (MobileBERT model)"),ztr=l(),FT=a("li"),Rhe=a("strong"),Wtr=o("mpnet"),Qtr=o(" \u2014 "),IG=a("a"),Htr=o("TFMPNetForMaskedLM"),Utr=o(" (MPNet model)"),Jtr=l(),CT=a("li"),She=a("strong"),Ytr=o("openai-gpt"),Ktr=o(" \u2014 "),DG=a("a"),Ztr=o("TFOpenAIGPTLMHeadModel"),ear=o(" (OpenAI GPT model)"),oar=l(),MT=a("li"),Phe=a("strong"),rar=o("roberta"),tar=o(" \u2014 "),NG=a("a"),aar=o("TFRobertaForMaskedLM"),nar=o(" (RoBERTa model)"),sar=l(),ET=a("li"),$he=a("strong"),lar=o("t5"),iar=o(" \u2014 "),jG=a("a"),dar=o("TFT5ForConditionalGeneration"),car=o(" (T5 model)"),far=l(),yT=a("li"),Ihe=a("strong"),mar=o("tapas"),gar=o(" \u2014 "),qG=a("a"),har=o("TFTapasForMaskedLM"),par=o(" (TAPAS model)"),_ar=l(),wT=a("li"),Dhe=a("strong"),uar=o("transfo-xl"),bar=o(" \u2014 "),GG=a("a"),Tar=o("TFTransfoXLLMHeadModel"),Far=o(" (Transformer-XL model)"),Car=l(),AT=a("li"),Nhe=a("strong"),Mar=o("xlm"),Ear=o(" \u2014 "),OG=a("a"),yar=o("TFXLMWithLMHeadModel"),war=o(" (XLM model)"),Aar=l(),LT=a("li"),jhe=a("strong"),Lar=o("xlm-roberta"),Bar=o(" \u2014 "),XG=a("a"),xar=o("TFXLMRobertaForMaskedLM"),kar=o(" (XLM-RoBERTa model)"),Rar=l(),BT=a("li"),qhe=a("strong"),Sar=o("xlnet"),Par=o(" \u2014 "),VG=a("a"),$ar=o("TFXLNetLMHeadModel"),Iar=o(" (XLNet model)"),Dar=l(),Ghe=a("p"),Nar=o("Examples:"),jar=l(),f(sA.$$.fragment),NRe=l(),vc=a("h2"),xT=a("a"),Ohe=a("span"),f(lA.$$.fragment),qar=l(),Xhe=a("span"),Gar=o("TFAutoModelForCausalLM"),jRe=l(),Fr=a("div"),f(iA.$$.fragment),Oar=l(),Tc=a("p"),Xar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Vhe=a("code"),Var=o("from_pretrained()"),zar=o("class method or the "),zhe=a("code"),War=o("from_config()"),Qar=o(`class
method.`),Har=l(),dA=a("p"),Uar=o("This class cannot be instantiated directly using "),Whe=a("code"),Jar=o("__init__()"),Yar=o(" (throws an error)."),Kar=l(),pt=a("div"),f(cA.$$.fragment),Zar=l(),Qhe=a("p"),enr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),onr=l(),Fc=a("p"),rnr=o(`Note:
Loading a model from its configuration file does `),Hhe=a("strong"),tnr=o("not"),anr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uhe=a("code"),nnr=o("from_pretrained()"),snr=o("to load the model weights."),lnr=l(),Jhe=a("p"),inr=o("Examples:"),dnr=l(),f(fA.$$.fragment),cnr=l(),_o=a("div"),f(mA.$$.fragment),fnr=l(),Yhe=a("p"),mnr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gnr=l(),bn=a("p"),hnr=o("The model class to instantiate is selected based on the "),Khe=a("code"),pnr=o("model_type"),_nr=o(` property of the config object (either
passed as an argument or loaded from `),Zhe=a("code"),unr=o("pretrained_model_name_or_path"),bnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),epe=a("code"),vnr=o("pretrained_model_name_or_path"),Tnr=o(":"),Fnr=l(),ce=a("ul"),kT=a("li"),ope=a("strong"),Cnr=o("bert"),Mnr=o(" \u2014 "),zG=a("a"),Enr=o("TFBertLMHeadModel"),ynr=o(" (BERT model)"),wnr=l(),RT=a("li"),rpe=a("strong"),Anr=o("camembert"),Lnr=o(" \u2014 "),WG=a("a"),Bnr=o("TFCamembertForCausalLM"),xnr=o(" (CamemBERT model)"),knr=l(),ST=a("li"),tpe=a("strong"),Rnr=o("ctrl"),Snr=o(" \u2014 "),QG=a("a"),Pnr=o("TFCTRLLMHeadModel"),$nr=o(" (CTRL model)"),Inr=l(),PT=a("li"),ape=a("strong"),Dnr=o("gpt2"),Nnr=o(" \u2014 "),HG=a("a"),jnr=o("TFGPT2LMHeadModel"),qnr=o(" (OpenAI GPT-2 model)"),Gnr=l(),$T=a("li"),npe=a("strong"),Onr=o("gptj"),Xnr=o(" \u2014 "),UG=a("a"),Vnr=o("TFGPTJForCausalLM"),znr=o(" (GPT-J model)"),Wnr=l(),IT=a("li"),spe=a("strong"),Qnr=o("openai-gpt"),Hnr=o(" \u2014 "),JG=a("a"),Unr=o("TFOpenAIGPTLMHeadModel"),Jnr=o(" (OpenAI GPT model)"),Ynr=l(),DT=a("li"),lpe=a("strong"),Knr=o("rembert"),Znr=o(" \u2014 "),YG=a("a"),esr=o("TFRemBertForCausalLM"),osr=o(" (RemBERT model)"),rsr=l(),NT=a("li"),ipe=a("strong"),tsr=o("roberta"),asr=o(" \u2014 "),KG=a("a"),nsr=o("TFRobertaForCausalLM"),ssr=o(" (RoBERTa model)"),lsr=l(),jT=a("li"),dpe=a("strong"),isr=o("roformer"),dsr=o(" \u2014 "),ZG=a("a"),csr=o("TFRoFormerForCausalLM"),fsr=o(" (RoFormer model)"),msr=l(),qT=a("li"),cpe=a("strong"),gsr=o("transfo-xl"),hsr=o(" \u2014 "),eO=a("a"),psr=o("TFTransfoXLLMHeadModel"),_sr=o(" (Transformer-XL model)"),usr=l(),GT=a("li"),fpe=a("strong"),bsr=o("xlm"),vsr=o(" \u2014 "),oO=a("a"),Tsr=o("TFXLMWithLMHeadModel"),Fsr=o(" (XLM model)"),Csr=l(),OT=a("li"),mpe=a("strong"),Msr=o("xlnet"),Esr=o(" \u2014 "),rO=a("a"),ysr=o("TFXLNetLMHeadModel"),wsr=o(" (XLNet model)"),Asr=l(),gpe=a("p"),Lsr=o("Examples:"),Bsr=l(),f(gA.$$.fragment),qRe=l(),Cc=a("h2"),XT=a("a"),hpe=a("span"),f(hA.$$.fragment),xsr=l(),ppe=a("span"),ksr=o("TFAutoModelForImageClassification"),GRe=l(),Cr=a("div"),f(pA.$$.fragment),Rsr=l(),Mc=a("p"),Ssr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_pe=a("code"),Psr=o("from_pretrained()"),$sr=o("class method or the "),upe=a("code"),Isr=o("from_config()"),Dsr=o(`class
method.`),Nsr=l(),_A=a("p"),jsr=o("This class cannot be instantiated directly using "),bpe=a("code"),qsr=o("__init__()"),Gsr=o(" (throws an error)."),Osr=l(),_t=a("div"),f(uA.$$.fragment),Xsr=l(),vpe=a("p"),Vsr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zsr=l(),Ec=a("p"),Wsr=o(`Note:
Loading a model from its configuration file does `),Tpe=a("strong"),Qsr=o("not"),Hsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fpe=a("code"),Usr=o("from_pretrained()"),Jsr=o("to load the model weights."),Ysr=l(),Cpe=a("p"),Ksr=o("Examples:"),Zsr=l(),f(bA.$$.fragment),elr=l(),uo=a("div"),f(vA.$$.fragment),olr=l(),Mpe=a("p"),rlr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tlr=l(),vn=a("p"),alr=o("The model class to instantiate is selected based on the "),Epe=a("code"),nlr=o("model_type"),slr=o(` property of the config object (either
passed as an argument or loaded from `),ype=a("code"),llr=o("pretrained_model_name_or_path"),ilr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=a("code"),dlr=o("pretrained_model_name_or_path"),clr=o(":"),flr=l(),TA=a("ul"),VT=a("li"),Ape=a("strong"),mlr=o("convnext"),glr=o(" \u2014 "),tO=a("a"),hlr=o("TFConvNextForImageClassification"),plr=o(" (ConvNext model)"),_lr=l(),zT=a("li"),Lpe=a("strong"),ulr=o("vit"),blr=o(" \u2014 "),aO=a("a"),vlr=o("TFViTForImageClassification"),Tlr=o(" (ViT model)"),Flr=l(),Bpe=a("p"),Clr=o("Examples:"),Mlr=l(),f(FA.$$.fragment),ORe=l(),yc=a("h2"),WT=a("a"),xpe=a("span"),f(CA.$$.fragment),Elr=l(),kpe=a("span"),ylr=o("TFAutoModelForMaskedLM"),XRe=l(),Mr=a("div"),f(MA.$$.fragment),wlr=l(),wc=a("p"),Alr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Rpe=a("code"),Llr=o("from_pretrained()"),Blr=o("class method or the "),Spe=a("code"),xlr=o("from_config()"),klr=o(`class
method.`),Rlr=l(),EA=a("p"),Slr=o("This class cannot be instantiated directly using "),Ppe=a("code"),Plr=o("__init__()"),$lr=o(" (throws an error)."),Ilr=l(),ut=a("div"),f(yA.$$.fragment),Dlr=l(),$pe=a("p"),Nlr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jlr=l(),Ac=a("p"),qlr=o(`Note:
Loading a model from its configuration file does `),Ipe=a("strong"),Glr=o("not"),Olr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dpe=a("code"),Xlr=o("from_pretrained()"),Vlr=o("to load the model weights."),zlr=l(),Npe=a("p"),Wlr=o("Examples:"),Qlr=l(),f(wA.$$.fragment),Hlr=l(),bo=a("div"),f(AA.$$.fragment),Ulr=l(),jpe=a("p"),Jlr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ylr=l(),Tn=a("p"),Klr=o("The model class to instantiate is selected based on the "),qpe=a("code"),Zlr=o("model_type"),eir=o(` property of the config object (either
passed as an argument or loaded from `),Gpe=a("code"),oir=o("pretrained_model_name_or_path"),rir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=a("code"),tir=o("pretrained_model_name_or_path"),air=o(":"),nir=l(),J=a("ul"),QT=a("li"),Xpe=a("strong"),sir=o("albert"),lir=o(" \u2014 "),nO=a("a"),iir=o("TFAlbertForMaskedLM"),dir=o(" (ALBERT model)"),cir=l(),HT=a("li"),Vpe=a("strong"),fir=o("bert"),mir=o(" \u2014 "),sO=a("a"),gir=o("TFBertForMaskedLM"),hir=o(" (BERT model)"),pir=l(),UT=a("li"),zpe=a("strong"),_ir=o("camembert"),uir=o(" \u2014 "),lO=a("a"),bir=o("TFCamembertForMaskedLM"),vir=o(" (CamemBERT model)"),Tir=l(),JT=a("li"),Wpe=a("strong"),Fir=o("convbert"),Cir=o(" \u2014 "),iO=a("a"),Mir=o("TFConvBertForMaskedLM"),Eir=o(" (ConvBERT model)"),yir=l(),YT=a("li"),Qpe=a("strong"),wir=o("deberta"),Air=o(" \u2014 "),dO=a("a"),Lir=o("TFDebertaForMaskedLM"),Bir=o(" (DeBERTa model)"),xir=l(),KT=a("li"),Hpe=a("strong"),kir=o("deberta-v2"),Rir=o(" \u2014 "),cO=a("a"),Sir=o("TFDebertaV2ForMaskedLM"),Pir=o(" (DeBERTa-v2 model)"),$ir=l(),ZT=a("li"),Upe=a("strong"),Iir=o("distilbert"),Dir=o(" \u2014 "),fO=a("a"),Nir=o("TFDistilBertForMaskedLM"),jir=o(" (DistilBERT model)"),qir=l(),eF=a("li"),Jpe=a("strong"),Gir=o("electra"),Oir=o(" \u2014 "),mO=a("a"),Xir=o("TFElectraForMaskedLM"),Vir=o(" (ELECTRA model)"),zir=l(),oF=a("li"),Ype=a("strong"),Wir=o("flaubert"),Qir=o(" \u2014 "),gO=a("a"),Hir=o("TFFlaubertWithLMHeadModel"),Uir=o(" (FlauBERT model)"),Jir=l(),rF=a("li"),Kpe=a("strong"),Yir=o("funnel"),Kir=o(" \u2014 "),hO=a("a"),Zir=o("TFFunnelForMaskedLM"),edr=o(" (Funnel Transformer model)"),odr=l(),tF=a("li"),Zpe=a("strong"),rdr=o("layoutlm"),tdr=o(" \u2014 "),pO=a("a"),adr=o("TFLayoutLMForMaskedLM"),ndr=o(" (LayoutLM model)"),sdr=l(),aF=a("li"),e_e=a("strong"),ldr=o("longformer"),idr=o(" \u2014 "),_O=a("a"),ddr=o("TFLongformerForMaskedLM"),cdr=o(" (Longformer model)"),fdr=l(),nF=a("li"),o_e=a("strong"),mdr=o("mobilebert"),gdr=o(" \u2014 "),uO=a("a"),hdr=o("TFMobileBertForMaskedLM"),pdr=o(" (MobileBERT model)"),_dr=l(),sF=a("li"),r_e=a("strong"),udr=o("mpnet"),bdr=o(" \u2014 "),bO=a("a"),vdr=o("TFMPNetForMaskedLM"),Tdr=o(" (MPNet model)"),Fdr=l(),lF=a("li"),t_e=a("strong"),Cdr=o("rembert"),Mdr=o(" \u2014 "),vO=a("a"),Edr=o("TFRemBertForMaskedLM"),ydr=o(" (RemBERT model)"),wdr=l(),iF=a("li"),a_e=a("strong"),Adr=o("roberta"),Ldr=o(" \u2014 "),TO=a("a"),Bdr=o("TFRobertaForMaskedLM"),xdr=o(" (RoBERTa model)"),kdr=l(),dF=a("li"),n_e=a("strong"),Rdr=o("roformer"),Sdr=o(" \u2014 "),FO=a("a"),Pdr=o("TFRoFormerForMaskedLM"),$dr=o(" (RoFormer model)"),Idr=l(),cF=a("li"),s_e=a("strong"),Ddr=o("tapas"),Ndr=o(" \u2014 "),CO=a("a"),jdr=o("TFTapasForMaskedLM"),qdr=o(" (TAPAS model)"),Gdr=l(),fF=a("li"),l_e=a("strong"),Odr=o("xlm"),Xdr=o(" \u2014 "),MO=a("a"),Vdr=o("TFXLMWithLMHeadModel"),zdr=o(" (XLM model)"),Wdr=l(),mF=a("li"),i_e=a("strong"),Qdr=o("xlm-roberta"),Hdr=o(" \u2014 "),EO=a("a"),Udr=o("TFXLMRobertaForMaskedLM"),Jdr=o(" (XLM-RoBERTa model)"),Ydr=l(),d_e=a("p"),Kdr=o("Examples:"),Zdr=l(),f(LA.$$.fragment),VRe=l(),Lc=a("h2"),gF=a("a"),c_e=a("span"),f(BA.$$.fragment),ecr=l(),f_e=a("span"),ocr=o("TFAutoModelForSeq2SeqLM"),zRe=l(),Er=a("div"),f(xA.$$.fragment),rcr=l(),Bc=a("p"),tcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),m_e=a("code"),acr=o("from_pretrained()"),ncr=o("class method or the "),g_e=a("code"),scr=o("from_config()"),lcr=o(`class
method.`),icr=l(),kA=a("p"),dcr=o("This class cannot be instantiated directly using "),h_e=a("code"),ccr=o("__init__()"),fcr=o(" (throws an error)."),mcr=l(),bt=a("div"),f(RA.$$.fragment),gcr=l(),p_e=a("p"),hcr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),pcr=l(),xc=a("p"),_cr=o(`Note:
Loading a model from its configuration file does `),__e=a("strong"),ucr=o("not"),bcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),u_e=a("code"),vcr=o("from_pretrained()"),Tcr=o("to load the model weights."),Fcr=l(),b_e=a("p"),Ccr=o("Examples:"),Mcr=l(),f(SA.$$.fragment),Ecr=l(),vo=a("div"),f(PA.$$.fragment),ycr=l(),v_e=a("p"),wcr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Acr=l(),Fn=a("p"),Lcr=o("The model class to instantiate is selected based on the "),T_e=a("code"),Bcr=o("model_type"),xcr=o(` property of the config object (either
passed as an argument or loaded from `),F_e=a("code"),kcr=o("pretrained_model_name_or_path"),Rcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=a("code"),Scr=o("pretrained_model_name_or_path"),Pcr=o(":"),$cr=l(),ue=a("ul"),hF=a("li"),M_e=a("strong"),Icr=o("bart"),Dcr=o(" \u2014 "),yO=a("a"),Ncr=o("TFBartForConditionalGeneration"),jcr=o(" (BART model)"),qcr=l(),pF=a("li"),E_e=a("strong"),Gcr=o("blenderbot"),Ocr=o(" \u2014 "),wO=a("a"),Xcr=o("TFBlenderbotForConditionalGeneration"),Vcr=o(" (Blenderbot model)"),zcr=l(),_F=a("li"),y_e=a("strong"),Wcr=o("blenderbot-small"),Qcr=o(" \u2014 "),AO=a("a"),Hcr=o("TFBlenderbotSmallForConditionalGeneration"),Ucr=o(" (BlenderbotSmall model)"),Jcr=l(),uF=a("li"),w_e=a("strong"),Ycr=o("encoder-decoder"),Kcr=o(" \u2014 "),LO=a("a"),Zcr=o("TFEncoderDecoderModel"),efr=o(" (Encoder decoder model)"),ofr=l(),bF=a("li"),A_e=a("strong"),rfr=o("led"),tfr=o(" \u2014 "),BO=a("a"),afr=o("TFLEDForConditionalGeneration"),nfr=o(" (LED model)"),sfr=l(),vF=a("li"),L_e=a("strong"),lfr=o("marian"),ifr=o(" \u2014 "),xO=a("a"),dfr=o("TFMarianMTModel"),cfr=o(" (Marian model)"),ffr=l(),TF=a("li"),B_e=a("strong"),mfr=o("mbart"),gfr=o(" \u2014 "),kO=a("a"),hfr=o("TFMBartForConditionalGeneration"),pfr=o(" (mBART model)"),_fr=l(),FF=a("li"),x_e=a("strong"),ufr=o("mt5"),bfr=o(" \u2014 "),RO=a("a"),vfr=o("TFMT5ForConditionalGeneration"),Tfr=o(" (mT5 model)"),Ffr=l(),CF=a("li"),k_e=a("strong"),Cfr=o("pegasus"),Mfr=o(" \u2014 "),SO=a("a"),Efr=o("TFPegasusForConditionalGeneration"),yfr=o(" (Pegasus model)"),wfr=l(),MF=a("li"),R_e=a("strong"),Afr=o("t5"),Lfr=o(" \u2014 "),PO=a("a"),Bfr=o("TFT5ForConditionalGeneration"),xfr=o(" (T5 model)"),kfr=l(),S_e=a("p"),Rfr=o("Examples:"),Sfr=l(),f($A.$$.fragment),WRe=l(),kc=a("h2"),EF=a("a"),P_e=a("span"),f(IA.$$.fragment),Pfr=l(),$_e=a("span"),$fr=o("TFAutoModelForSequenceClassification"),QRe=l(),yr=a("div"),f(DA.$$.fragment),Ifr=l(),Rc=a("p"),Dfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),I_e=a("code"),Nfr=o("from_pretrained()"),jfr=o("class method or the "),D_e=a("code"),qfr=o("from_config()"),Gfr=o(`class
method.`),Ofr=l(),NA=a("p"),Xfr=o("This class cannot be instantiated directly using "),N_e=a("code"),Vfr=o("__init__()"),zfr=o(" (throws an error)."),Wfr=l(),vt=a("div"),f(jA.$$.fragment),Qfr=l(),j_e=a("p"),Hfr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ufr=l(),Sc=a("p"),Jfr=o(`Note:
Loading a model from its configuration file does `),q_e=a("strong"),Yfr=o("not"),Kfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),G_e=a("code"),Zfr=o("from_pretrained()"),emr=o("to load the model weights."),omr=l(),O_e=a("p"),rmr=o("Examples:"),tmr=l(),f(qA.$$.fragment),amr=l(),To=a("div"),f(GA.$$.fragment),nmr=l(),X_e=a("p"),smr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lmr=l(),Cn=a("p"),imr=o("The model class to instantiate is selected based on the "),V_e=a("code"),dmr=o("model_type"),cmr=o(` property of the config object (either
passed as an argument or loaded from `),z_e=a("code"),fmr=o("pretrained_model_name_or_path"),mmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=a("code"),gmr=o("pretrained_model_name_or_path"),hmr=o(":"),pmr=l(),X=a("ul"),yF=a("li"),Q_e=a("strong"),_mr=o("albert"),umr=o(" \u2014 "),$O=a("a"),bmr=o("TFAlbertForSequenceClassification"),vmr=o(" (ALBERT model)"),Tmr=l(),wF=a("li"),H_e=a("strong"),Fmr=o("bert"),Cmr=o(" \u2014 "),IO=a("a"),Mmr=o("TFBertForSequenceClassification"),Emr=o(" (BERT model)"),ymr=l(),AF=a("li"),U_e=a("strong"),wmr=o("camembert"),Amr=o(" \u2014 "),DO=a("a"),Lmr=o("TFCamembertForSequenceClassification"),Bmr=o(" (CamemBERT model)"),xmr=l(),LF=a("li"),J_e=a("strong"),kmr=o("convbert"),Rmr=o(" \u2014 "),NO=a("a"),Smr=o("TFConvBertForSequenceClassification"),Pmr=o(" (ConvBERT model)"),$mr=l(),BF=a("li"),Y_e=a("strong"),Imr=o("ctrl"),Dmr=o(" \u2014 "),jO=a("a"),Nmr=o("TFCTRLForSequenceClassification"),jmr=o(" (CTRL model)"),qmr=l(),xF=a("li"),K_e=a("strong"),Gmr=o("deberta"),Omr=o(" \u2014 "),qO=a("a"),Xmr=o("TFDebertaForSequenceClassification"),Vmr=o(" (DeBERTa model)"),zmr=l(),kF=a("li"),Z_e=a("strong"),Wmr=o("deberta-v2"),Qmr=o(" \u2014 "),GO=a("a"),Hmr=o("TFDebertaV2ForSequenceClassification"),Umr=o(" (DeBERTa-v2 model)"),Jmr=l(),RF=a("li"),eue=a("strong"),Ymr=o("distilbert"),Kmr=o(" \u2014 "),OO=a("a"),Zmr=o("TFDistilBertForSequenceClassification"),egr=o(" (DistilBERT model)"),ogr=l(),SF=a("li"),oue=a("strong"),rgr=o("electra"),tgr=o(" \u2014 "),XO=a("a"),agr=o("TFElectraForSequenceClassification"),ngr=o(" (ELECTRA model)"),sgr=l(),PF=a("li"),rue=a("strong"),lgr=o("flaubert"),igr=o(" \u2014 "),VO=a("a"),dgr=o("TFFlaubertForSequenceClassification"),cgr=o(" (FlauBERT model)"),fgr=l(),$F=a("li"),tue=a("strong"),mgr=o("funnel"),ggr=o(" \u2014 "),zO=a("a"),hgr=o("TFFunnelForSequenceClassification"),pgr=o(" (Funnel Transformer model)"),_gr=l(),IF=a("li"),aue=a("strong"),ugr=o("gpt2"),bgr=o(" \u2014 "),WO=a("a"),vgr=o("TFGPT2ForSequenceClassification"),Tgr=o(" (OpenAI GPT-2 model)"),Fgr=l(),DF=a("li"),nue=a("strong"),Cgr=o("gptj"),Mgr=o(" \u2014 "),QO=a("a"),Egr=o("TFGPTJForSequenceClassification"),ygr=o(" (GPT-J model)"),wgr=l(),NF=a("li"),sue=a("strong"),Agr=o("layoutlm"),Lgr=o(" \u2014 "),HO=a("a"),Bgr=o("TFLayoutLMForSequenceClassification"),xgr=o(" (LayoutLM model)"),kgr=l(),jF=a("li"),lue=a("strong"),Rgr=o("longformer"),Sgr=o(" \u2014 "),UO=a("a"),Pgr=o("TFLongformerForSequenceClassification"),$gr=o(" (Longformer model)"),Igr=l(),qF=a("li"),iue=a("strong"),Dgr=o("mobilebert"),Ngr=o(" \u2014 "),JO=a("a"),jgr=o("TFMobileBertForSequenceClassification"),qgr=o(" (MobileBERT model)"),Ggr=l(),GF=a("li"),due=a("strong"),Ogr=o("mpnet"),Xgr=o(" \u2014 "),YO=a("a"),Vgr=o("TFMPNetForSequenceClassification"),zgr=o(" (MPNet model)"),Wgr=l(),OF=a("li"),cue=a("strong"),Qgr=o("openai-gpt"),Hgr=o(" \u2014 "),KO=a("a"),Ugr=o("TFOpenAIGPTForSequenceClassification"),Jgr=o(" (OpenAI GPT model)"),Ygr=l(),XF=a("li"),fue=a("strong"),Kgr=o("rembert"),Zgr=o(" \u2014 "),ZO=a("a"),ehr=o("TFRemBertForSequenceClassification"),ohr=o(" (RemBERT model)"),rhr=l(),VF=a("li"),mue=a("strong"),thr=o("roberta"),ahr=o(" \u2014 "),eX=a("a"),nhr=o("TFRobertaForSequenceClassification"),shr=o(" (RoBERTa model)"),lhr=l(),zF=a("li"),gue=a("strong"),ihr=o("roformer"),dhr=o(" \u2014 "),oX=a("a"),chr=o("TFRoFormerForSequenceClassification"),fhr=o(" (RoFormer model)"),mhr=l(),WF=a("li"),hue=a("strong"),ghr=o("tapas"),hhr=o(" \u2014 "),rX=a("a"),phr=o("TFTapasForSequenceClassification"),_hr=o(" (TAPAS model)"),uhr=l(),QF=a("li"),pue=a("strong"),bhr=o("transfo-xl"),vhr=o(" \u2014 "),tX=a("a"),Thr=o("TFTransfoXLForSequenceClassification"),Fhr=o(" (Transformer-XL model)"),Chr=l(),HF=a("li"),_ue=a("strong"),Mhr=o("xlm"),Ehr=o(" \u2014 "),aX=a("a"),yhr=o("TFXLMForSequenceClassification"),whr=o(" (XLM model)"),Ahr=l(),UF=a("li"),uue=a("strong"),Lhr=o("xlm-roberta"),Bhr=o(" \u2014 "),nX=a("a"),xhr=o("TFXLMRobertaForSequenceClassification"),khr=o(" (XLM-RoBERTa model)"),Rhr=l(),JF=a("li"),bue=a("strong"),Shr=o("xlnet"),Phr=o(" \u2014 "),sX=a("a"),$hr=o("TFXLNetForSequenceClassification"),Ihr=o(" (XLNet model)"),Dhr=l(),vue=a("p"),Nhr=o("Examples:"),jhr=l(),f(OA.$$.fragment),HRe=l(),Pc=a("h2"),YF=a("a"),Tue=a("span"),f(XA.$$.fragment),qhr=l(),Fue=a("span"),Ghr=o("TFAutoModelForMultipleChoice"),URe=l(),wr=a("div"),f(VA.$$.fragment),Ohr=l(),$c=a("p"),Xhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Cue=a("code"),Vhr=o("from_pretrained()"),zhr=o("class method or the "),Mue=a("code"),Whr=o("from_config()"),Qhr=o(`class
method.`),Hhr=l(),zA=a("p"),Uhr=o("This class cannot be instantiated directly using "),Eue=a("code"),Jhr=o("__init__()"),Yhr=o(" (throws an error)."),Khr=l(),Tt=a("div"),f(WA.$$.fragment),Zhr=l(),yue=a("p"),epr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),opr=l(),Ic=a("p"),rpr=o(`Note:
Loading a model from its configuration file does `),wue=a("strong"),tpr=o("not"),apr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aue=a("code"),npr=o("from_pretrained()"),spr=o("to load the model weights."),lpr=l(),Lue=a("p"),ipr=o("Examples:"),dpr=l(),f(QA.$$.fragment),cpr=l(),Fo=a("div"),f(HA.$$.fragment),fpr=l(),Bue=a("p"),mpr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gpr=l(),Mn=a("p"),hpr=o("The model class to instantiate is selected based on the "),xue=a("code"),ppr=o("model_type"),_pr=o(` property of the config object (either
passed as an argument or loaded from `),kue=a("code"),upr=o("pretrained_model_name_or_path"),bpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=a("code"),vpr=o("pretrained_model_name_or_path"),Tpr=o(":"),Fpr=l(),ae=a("ul"),KF=a("li"),Sue=a("strong"),Cpr=o("albert"),Mpr=o(" \u2014 "),lX=a("a"),Epr=o("TFAlbertForMultipleChoice"),ypr=o(" (ALBERT model)"),wpr=l(),ZF=a("li"),Pue=a("strong"),Apr=o("bert"),Lpr=o(" \u2014 "),iX=a("a"),Bpr=o("TFBertForMultipleChoice"),xpr=o(" (BERT model)"),kpr=l(),e9=a("li"),$ue=a("strong"),Rpr=o("camembert"),Spr=o(" \u2014 "),dX=a("a"),Ppr=o("TFCamembertForMultipleChoice"),$pr=o(" (CamemBERT model)"),Ipr=l(),o9=a("li"),Iue=a("strong"),Dpr=o("convbert"),Npr=o(" \u2014 "),cX=a("a"),jpr=o("TFConvBertForMultipleChoice"),qpr=o(" (ConvBERT model)"),Gpr=l(),r9=a("li"),Due=a("strong"),Opr=o("distilbert"),Xpr=o(" \u2014 "),fX=a("a"),Vpr=o("TFDistilBertForMultipleChoice"),zpr=o(" (DistilBERT model)"),Wpr=l(),t9=a("li"),Nue=a("strong"),Qpr=o("electra"),Hpr=o(" \u2014 "),mX=a("a"),Upr=o("TFElectraForMultipleChoice"),Jpr=o(" (ELECTRA model)"),Ypr=l(),a9=a("li"),jue=a("strong"),Kpr=o("flaubert"),Zpr=o(" \u2014 "),gX=a("a"),e_r=o("TFFlaubertForMultipleChoice"),o_r=o(" (FlauBERT model)"),r_r=l(),n9=a("li"),que=a("strong"),t_r=o("funnel"),a_r=o(" \u2014 "),hX=a("a"),n_r=o("TFFunnelForMultipleChoice"),s_r=o(" (Funnel Transformer model)"),l_r=l(),s9=a("li"),Gue=a("strong"),i_r=o("longformer"),d_r=o(" \u2014 "),pX=a("a"),c_r=o("TFLongformerForMultipleChoice"),f_r=o(" (Longformer model)"),m_r=l(),l9=a("li"),Oue=a("strong"),g_r=o("mobilebert"),h_r=o(" \u2014 "),_X=a("a"),p_r=o("TFMobileBertForMultipleChoice"),__r=o(" (MobileBERT model)"),u_r=l(),i9=a("li"),Xue=a("strong"),b_r=o("mpnet"),v_r=o(" \u2014 "),uX=a("a"),T_r=o("TFMPNetForMultipleChoice"),F_r=o(" (MPNet model)"),C_r=l(),d9=a("li"),Vue=a("strong"),M_r=o("rembert"),E_r=o(" \u2014 "),bX=a("a"),y_r=o("TFRemBertForMultipleChoice"),w_r=o(" (RemBERT model)"),A_r=l(),c9=a("li"),zue=a("strong"),L_r=o("roberta"),B_r=o(" \u2014 "),vX=a("a"),x_r=o("TFRobertaForMultipleChoice"),k_r=o(" (RoBERTa model)"),R_r=l(),f9=a("li"),Wue=a("strong"),S_r=o("roformer"),P_r=o(" \u2014 "),TX=a("a"),$_r=o("TFRoFormerForMultipleChoice"),I_r=o(" (RoFormer model)"),D_r=l(),m9=a("li"),Que=a("strong"),N_r=o("xlm"),j_r=o(" \u2014 "),FX=a("a"),q_r=o("TFXLMForMultipleChoice"),G_r=o(" (XLM model)"),O_r=l(),g9=a("li"),Hue=a("strong"),X_r=o("xlm-roberta"),V_r=o(" \u2014 "),CX=a("a"),z_r=o("TFXLMRobertaForMultipleChoice"),W_r=o(" (XLM-RoBERTa model)"),Q_r=l(),h9=a("li"),Uue=a("strong"),H_r=o("xlnet"),U_r=o(" \u2014 "),MX=a("a"),J_r=o("TFXLNetForMultipleChoice"),Y_r=o(" (XLNet model)"),K_r=l(),Jue=a("p"),Z_r=o("Examples:"),eur=l(),f(UA.$$.fragment),JRe=l(),Dc=a("h2"),p9=a("a"),Yue=a("span"),f(JA.$$.fragment),our=l(),Kue=a("span"),rur=o("TFAutoModelForTableQuestionAnswering"),YRe=l(),Ar=a("div"),f(YA.$$.fragment),tur=l(),Nc=a("p"),aur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Zue=a("code"),nur=o("from_pretrained()"),sur=o("class method or the "),e2e=a("code"),lur=o("from_config()"),iur=o(`class
method.`),dur=l(),KA=a("p"),cur=o("This class cannot be instantiated directly using "),o2e=a("code"),fur=o("__init__()"),mur=o(" (throws an error)."),gur=l(),Ft=a("div"),f(ZA.$$.fragment),hur=l(),r2e=a("p"),pur=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_ur=l(),jc=a("p"),uur=o(`Note:
Loading a model from its configuration file does `),t2e=a("strong"),bur=o("not"),vur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),a2e=a("code"),Tur=o("from_pretrained()"),Fur=o("to load the model weights."),Cur=l(),n2e=a("p"),Mur=o("Examples:"),Eur=l(),f(e0.$$.fragment),yur=l(),Co=a("div"),f(o0.$$.fragment),wur=l(),s2e=a("p"),Aur=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Lur=l(),En=a("p"),Bur=o("The model class to instantiate is selected based on the "),l2e=a("code"),xur=o("model_type"),kur=o(` property of the config object (either
passed as an argument or loaded from `),i2e=a("code"),Rur=o("pretrained_model_name_or_path"),Sur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=a("code"),Pur=o("pretrained_model_name_or_path"),$ur=o(":"),Iur=l(),c2e=a("ul"),_9=a("li"),f2e=a("strong"),Dur=o("tapas"),Nur=o(" \u2014 "),EX=a("a"),jur=o("TFTapasForQuestionAnswering"),qur=o(" (TAPAS model)"),Gur=l(),m2e=a("p"),Our=o("Examples:"),Xur=l(),f(r0.$$.fragment),KRe=l(),qc=a("h2"),u9=a("a"),g2e=a("span"),f(t0.$$.fragment),Vur=l(),h2e=a("span"),zur=o("TFAutoModelForTokenClassification"),ZRe=l(),Lr=a("div"),f(a0.$$.fragment),Wur=l(),Gc=a("p"),Qur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),p2e=a("code"),Hur=o("from_pretrained()"),Uur=o("class method or the "),_2e=a("code"),Jur=o("from_config()"),Yur=o(`class
method.`),Kur=l(),n0=a("p"),Zur=o("This class cannot be instantiated directly using "),u2e=a("code"),e2r=o("__init__()"),o2r=o(" (throws an error)."),r2r=l(),Ct=a("div"),f(s0.$$.fragment),t2r=l(),b2e=a("p"),a2r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),n2r=l(),Oc=a("p"),s2r=o(`Note:
Loading a model from its configuration file does `),v2e=a("strong"),l2r=o("not"),i2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),T2e=a("code"),d2r=o("from_pretrained()"),c2r=o("to load the model weights."),f2r=l(),F2e=a("p"),m2r=o("Examples:"),g2r=l(),f(l0.$$.fragment),h2r=l(),Mo=a("div"),f(i0.$$.fragment),p2r=l(),C2e=a("p"),_2r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),u2r=l(),yn=a("p"),b2r=o("The model class to instantiate is selected based on the "),M2e=a("code"),v2r=o("model_type"),T2r=o(` property of the config object (either
passed as an argument or loaded from `),E2e=a("code"),F2r=o("pretrained_model_name_or_path"),C2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=a("code"),M2r=o("pretrained_model_name_or_path"),E2r=o(":"),y2r=l(),Y=a("ul"),b9=a("li"),w2e=a("strong"),w2r=o("albert"),A2r=o(" \u2014 "),yX=a("a"),L2r=o("TFAlbertForTokenClassification"),B2r=o(" (ALBERT model)"),x2r=l(),v9=a("li"),A2e=a("strong"),k2r=o("bert"),R2r=o(" \u2014 "),wX=a("a"),S2r=o("TFBertForTokenClassification"),P2r=o(" (BERT model)"),$2r=l(),T9=a("li"),L2e=a("strong"),I2r=o("camembert"),D2r=o(" \u2014 "),AX=a("a"),N2r=o("TFCamembertForTokenClassification"),j2r=o(" (CamemBERT model)"),q2r=l(),F9=a("li"),B2e=a("strong"),G2r=o("convbert"),O2r=o(" \u2014 "),LX=a("a"),X2r=o("TFConvBertForTokenClassification"),V2r=o(" (ConvBERT model)"),z2r=l(),C9=a("li"),x2e=a("strong"),W2r=o("deberta"),Q2r=o(" \u2014 "),BX=a("a"),H2r=o("TFDebertaForTokenClassification"),U2r=o(" (DeBERTa model)"),J2r=l(),M9=a("li"),k2e=a("strong"),Y2r=o("deberta-v2"),K2r=o(" \u2014 "),xX=a("a"),Z2r=o("TFDebertaV2ForTokenClassification"),e1r=o(" (DeBERTa-v2 model)"),o1r=l(),E9=a("li"),R2e=a("strong"),r1r=o("distilbert"),t1r=o(" \u2014 "),kX=a("a"),a1r=o("TFDistilBertForTokenClassification"),n1r=o(" (DistilBERT model)"),s1r=l(),y9=a("li"),S2e=a("strong"),l1r=o("electra"),i1r=o(" \u2014 "),RX=a("a"),d1r=o("TFElectraForTokenClassification"),c1r=o(" (ELECTRA model)"),f1r=l(),w9=a("li"),P2e=a("strong"),m1r=o("flaubert"),g1r=o(" \u2014 "),SX=a("a"),h1r=o("TFFlaubertForTokenClassification"),p1r=o(" (FlauBERT model)"),_1r=l(),A9=a("li"),$2e=a("strong"),u1r=o("funnel"),b1r=o(" \u2014 "),PX=a("a"),v1r=o("TFFunnelForTokenClassification"),T1r=o(" (Funnel Transformer model)"),F1r=l(),L9=a("li"),I2e=a("strong"),C1r=o("layoutlm"),M1r=o(" \u2014 "),$X=a("a"),E1r=o("TFLayoutLMForTokenClassification"),y1r=o(" (LayoutLM model)"),w1r=l(),B9=a("li"),D2e=a("strong"),A1r=o("longformer"),L1r=o(" \u2014 "),IX=a("a"),B1r=o("TFLongformerForTokenClassification"),x1r=o(" (Longformer model)"),k1r=l(),x9=a("li"),N2e=a("strong"),R1r=o("mobilebert"),S1r=o(" \u2014 "),DX=a("a"),P1r=o("TFMobileBertForTokenClassification"),$1r=o(" (MobileBERT model)"),I1r=l(),k9=a("li"),j2e=a("strong"),D1r=o("mpnet"),N1r=o(" \u2014 "),NX=a("a"),j1r=o("TFMPNetForTokenClassification"),q1r=o(" (MPNet model)"),G1r=l(),R9=a("li"),q2e=a("strong"),O1r=o("rembert"),X1r=o(" \u2014 "),jX=a("a"),V1r=o("TFRemBertForTokenClassification"),z1r=o(" (RemBERT model)"),W1r=l(),S9=a("li"),G2e=a("strong"),Q1r=o("roberta"),H1r=o(" \u2014 "),qX=a("a"),U1r=o("TFRobertaForTokenClassification"),J1r=o(" (RoBERTa model)"),Y1r=l(),P9=a("li"),O2e=a("strong"),K1r=o("roformer"),Z1r=o(" \u2014 "),GX=a("a"),ebr=o("TFRoFormerForTokenClassification"),obr=o(" (RoFormer model)"),rbr=l(),$9=a("li"),X2e=a("strong"),tbr=o("xlm"),abr=o(" \u2014 "),OX=a("a"),nbr=o("TFXLMForTokenClassification"),sbr=o(" (XLM model)"),lbr=l(),I9=a("li"),V2e=a("strong"),ibr=o("xlm-roberta"),dbr=o(" \u2014 "),XX=a("a"),cbr=o("TFXLMRobertaForTokenClassification"),fbr=o(" (XLM-RoBERTa model)"),mbr=l(),D9=a("li"),z2e=a("strong"),gbr=o("xlnet"),hbr=o(" \u2014 "),VX=a("a"),pbr=o("TFXLNetForTokenClassification"),_br=o(" (XLNet model)"),ubr=l(),W2e=a("p"),bbr=o("Examples:"),vbr=l(),f(d0.$$.fragment),eSe=l(),Xc=a("h2"),N9=a("a"),Q2e=a("span"),f(c0.$$.fragment),Tbr=l(),H2e=a("span"),Fbr=o("TFAutoModelForQuestionAnswering"),oSe=l(),Br=a("div"),f(f0.$$.fragment),Cbr=l(),Vc=a("p"),Mbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),U2e=a("code"),Ebr=o("from_pretrained()"),ybr=o("class method or the "),J2e=a("code"),wbr=o("from_config()"),Abr=o(`class
method.`),Lbr=l(),m0=a("p"),Bbr=o("This class cannot be instantiated directly using "),Y2e=a("code"),xbr=o("__init__()"),kbr=o(" (throws an error)."),Rbr=l(),Mt=a("div"),f(g0.$$.fragment),Sbr=l(),K2e=a("p"),Pbr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$br=l(),zc=a("p"),Ibr=o(`Note:
Loading a model from its configuration file does `),Z2e=a("strong"),Dbr=o("not"),Nbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),e1e=a("code"),jbr=o("from_pretrained()"),qbr=o("to load the model weights."),Gbr=l(),o1e=a("p"),Obr=o("Examples:"),Xbr=l(),f(h0.$$.fragment),Vbr=l(),Eo=a("div"),f(p0.$$.fragment),zbr=l(),r1e=a("p"),Wbr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qbr=l(),wn=a("p"),Hbr=o("The model class to instantiate is selected based on the "),t1e=a("code"),Ubr=o("model_type"),Jbr=o(` property of the config object (either
passed as an argument or loaded from `),a1e=a("code"),Ybr=o("pretrained_model_name_or_path"),Kbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=a("code"),Zbr=o("pretrained_model_name_or_path"),e3r=o(":"),o3r=l(),K=a("ul"),j9=a("li"),s1e=a("strong"),r3r=o("albert"),t3r=o(" \u2014 "),zX=a("a"),a3r=o("TFAlbertForQuestionAnswering"),n3r=o(" (ALBERT model)"),s3r=l(),q9=a("li"),l1e=a("strong"),l3r=o("bert"),i3r=o(" \u2014 "),WX=a("a"),d3r=o("TFBertForQuestionAnswering"),c3r=o(" (BERT model)"),f3r=l(),G9=a("li"),i1e=a("strong"),m3r=o("camembert"),g3r=o(" \u2014 "),QX=a("a"),h3r=o("TFCamembertForQuestionAnswering"),p3r=o(" (CamemBERT model)"),_3r=l(),O9=a("li"),d1e=a("strong"),u3r=o("convbert"),b3r=o(" \u2014 "),HX=a("a"),v3r=o("TFConvBertForQuestionAnswering"),T3r=o(" (ConvBERT model)"),F3r=l(),X9=a("li"),c1e=a("strong"),C3r=o("deberta"),M3r=o(" \u2014 "),UX=a("a"),E3r=o("TFDebertaForQuestionAnswering"),y3r=o(" (DeBERTa model)"),w3r=l(),V9=a("li"),f1e=a("strong"),A3r=o("deberta-v2"),L3r=o(" \u2014 "),JX=a("a"),B3r=o("TFDebertaV2ForQuestionAnswering"),x3r=o(" (DeBERTa-v2 model)"),k3r=l(),z9=a("li"),m1e=a("strong"),R3r=o("distilbert"),S3r=o(" \u2014 "),YX=a("a"),P3r=o("TFDistilBertForQuestionAnswering"),$3r=o(" (DistilBERT model)"),I3r=l(),W9=a("li"),g1e=a("strong"),D3r=o("electra"),N3r=o(" \u2014 "),KX=a("a"),j3r=o("TFElectraForQuestionAnswering"),q3r=o(" (ELECTRA model)"),G3r=l(),Q9=a("li"),h1e=a("strong"),O3r=o("flaubert"),X3r=o(" \u2014 "),ZX=a("a"),V3r=o("TFFlaubertForQuestionAnsweringSimple"),z3r=o(" (FlauBERT model)"),W3r=l(),H9=a("li"),p1e=a("strong"),Q3r=o("funnel"),H3r=o(" \u2014 "),eV=a("a"),U3r=o("TFFunnelForQuestionAnswering"),J3r=o(" (Funnel Transformer model)"),Y3r=l(),U9=a("li"),_1e=a("strong"),K3r=o("gptj"),Z3r=o(" \u2014 "),oV=a("a"),evr=o("TFGPTJForQuestionAnswering"),ovr=o(" (GPT-J model)"),rvr=l(),J9=a("li"),u1e=a("strong"),tvr=o("longformer"),avr=o(" \u2014 "),rV=a("a"),nvr=o("TFLongformerForQuestionAnswering"),svr=o(" (Longformer model)"),lvr=l(),Y9=a("li"),b1e=a("strong"),ivr=o("mobilebert"),dvr=o(" \u2014 "),tV=a("a"),cvr=o("TFMobileBertForQuestionAnswering"),fvr=o(" (MobileBERT model)"),mvr=l(),K9=a("li"),v1e=a("strong"),gvr=o("mpnet"),hvr=o(" \u2014 "),aV=a("a"),pvr=o("TFMPNetForQuestionAnswering"),_vr=o(" (MPNet model)"),uvr=l(),Z9=a("li"),T1e=a("strong"),bvr=o("rembert"),vvr=o(" \u2014 "),nV=a("a"),Tvr=o("TFRemBertForQuestionAnswering"),Fvr=o(" (RemBERT model)"),Cvr=l(),eC=a("li"),F1e=a("strong"),Mvr=o("roberta"),Evr=o(" \u2014 "),sV=a("a"),yvr=o("TFRobertaForQuestionAnswering"),wvr=o(" (RoBERTa model)"),Avr=l(),oC=a("li"),C1e=a("strong"),Lvr=o("roformer"),Bvr=o(" \u2014 "),lV=a("a"),xvr=o("TFRoFormerForQuestionAnswering"),kvr=o(" (RoFormer model)"),Rvr=l(),rC=a("li"),M1e=a("strong"),Svr=o("xlm"),Pvr=o(" \u2014 "),iV=a("a"),$vr=o("TFXLMForQuestionAnsweringSimple"),Ivr=o(" (XLM model)"),Dvr=l(),tC=a("li"),E1e=a("strong"),Nvr=o("xlm-roberta"),jvr=o(" \u2014 "),dV=a("a"),qvr=o("TFXLMRobertaForQuestionAnswering"),Gvr=o(" (XLM-RoBERTa model)"),Ovr=l(),aC=a("li"),y1e=a("strong"),Xvr=o("xlnet"),Vvr=o(" \u2014 "),cV=a("a"),zvr=o("TFXLNetForQuestionAnsweringSimple"),Wvr=o(" (XLNet model)"),Qvr=l(),w1e=a("p"),Hvr=o("Examples:"),Uvr=l(),f(_0.$$.fragment),rSe=l(),Wc=a("h2"),nC=a("a"),A1e=a("span"),f(u0.$$.fragment),Jvr=l(),L1e=a("span"),Yvr=o("TFAutoModelForVision2Seq"),tSe=l(),xr=a("div"),f(b0.$$.fragment),Kvr=l(),Qc=a("p"),Zvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),B1e=a("code"),e6r=o("from_pretrained()"),o6r=o("class method or the "),x1e=a("code"),r6r=o("from_config()"),t6r=o(`class
method.`),a6r=l(),v0=a("p"),n6r=o("This class cannot be instantiated directly using "),k1e=a("code"),s6r=o("__init__()"),l6r=o(" (throws an error)."),i6r=l(),Et=a("div"),f(T0.$$.fragment),d6r=l(),R1e=a("p"),c6r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),f6r=l(),Hc=a("p"),m6r=o(`Note:
Loading a model from its configuration file does `),S1e=a("strong"),g6r=o("not"),h6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),P1e=a("code"),p6r=o("from_pretrained()"),_6r=o("to load the model weights."),u6r=l(),$1e=a("p"),b6r=o("Examples:"),v6r=l(),f(F0.$$.fragment),T6r=l(),yo=a("div"),f(C0.$$.fragment),F6r=l(),I1e=a("p"),C6r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),M6r=l(),An=a("p"),E6r=o("The model class to instantiate is selected based on the "),D1e=a("code"),y6r=o("model_type"),w6r=o(` property of the config object (either
passed as an argument or loaded from `),N1e=a("code"),A6r=o("pretrained_model_name_or_path"),L6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=a("code"),B6r=o("pretrained_model_name_or_path"),x6r=o(":"),k6r=l(),q1e=a("ul"),sC=a("li"),G1e=a("strong"),R6r=o("vision-encoder-decoder"),S6r=o(" \u2014 "),fV=a("a"),P6r=o("TFVisionEncoderDecoderModel"),$6r=o(" (Vision Encoder decoder model)"),I6r=l(),O1e=a("p"),D6r=o("Examples:"),N6r=l(),f(M0.$$.fragment),aSe=l(),Uc=a("h2"),lC=a("a"),X1e=a("span"),f(E0.$$.fragment),j6r=l(),V1e=a("span"),q6r=o("TFAutoModelForSpeechSeq2Seq"),nSe=l(),kr=a("div"),f(y0.$$.fragment),G6r=l(),Jc=a("p"),O6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),z1e=a("code"),X6r=o("from_pretrained()"),V6r=o("class method or the "),W1e=a("code"),z6r=o("from_config()"),W6r=o(`class
method.`),Q6r=l(),w0=a("p"),H6r=o("This class cannot be instantiated directly using "),Q1e=a("code"),U6r=o("__init__()"),J6r=o(" (throws an error)."),Y6r=l(),yt=a("div"),f(A0.$$.fragment),K6r=l(),H1e=a("p"),Z6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),eTr=l(),Yc=a("p"),oTr=o(`Note:
Loading a model from its configuration file does `),U1e=a("strong"),rTr=o("not"),tTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),J1e=a("code"),aTr=o("from_pretrained()"),nTr=o("to load the model weights."),sTr=l(),Y1e=a("p"),lTr=o("Examples:"),iTr=l(),f(L0.$$.fragment),dTr=l(),wo=a("div"),f(B0.$$.fragment),cTr=l(),K1e=a("p"),fTr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mTr=l(),Ln=a("p"),gTr=o("The model class to instantiate is selected based on the "),Z1e=a("code"),hTr=o("model_type"),pTr=o(` property of the config object (either
passed as an argument or loaded from `),ebe=a("code"),_Tr=o("pretrained_model_name_or_path"),uTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=a("code"),bTr=o("pretrained_model_name_or_path"),vTr=o(":"),TTr=l(),rbe=a("ul"),iC=a("li"),tbe=a("strong"),FTr=o("speech_to_text"),CTr=o(" \u2014 "),mV=a("a"),MTr=o("TFSpeech2TextForConditionalGeneration"),ETr=o(" (Speech2Text model)"),yTr=l(),abe=a("p"),wTr=o("Examples:"),ATr=l(),f(x0.$$.fragment),sSe=l(),Kc=a("h2"),dC=a("a"),nbe=a("span"),f(k0.$$.fragment),LTr=l(),sbe=a("span"),BTr=o("FlaxAutoModel"),lSe=l(),Rr=a("div"),f(R0.$$.fragment),xTr=l(),Zc=a("p"),kTr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lbe=a("code"),RTr=o("from_pretrained()"),STr=o("class method or the "),ibe=a("code"),PTr=o("from_config()"),$Tr=o(`class
method.`),ITr=l(),S0=a("p"),DTr=o("This class cannot be instantiated directly using "),dbe=a("code"),NTr=o("__init__()"),jTr=o(" (throws an error)."),qTr=l(),wt=a("div"),f(P0.$$.fragment),GTr=l(),cbe=a("p"),OTr=o("Instantiates one of the base model classes of the library from a configuration."),XTr=l(),ef=a("p"),VTr=o(`Note:
Loading a model from its configuration file does `),fbe=a("strong"),zTr=o("not"),WTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mbe=a("code"),QTr=o("from_pretrained()"),HTr=o("to load the model weights."),UTr=l(),gbe=a("p"),JTr=o("Examples:"),YTr=l(),f($0.$$.fragment),KTr=l(),Ao=a("div"),f(I0.$$.fragment),ZTr=l(),hbe=a("p"),eFr=o("Instantiate one of the base model classes of the library from a pretrained model."),oFr=l(),Bn=a("p"),rFr=o("The model class to instantiate is selected based on the "),pbe=a("code"),tFr=o("model_type"),aFr=o(` property of the config object (either
passed as an argument or loaded from `),_be=a("code"),nFr=o("pretrained_model_name_or_path"),sFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=a("code"),lFr=o("pretrained_model_name_or_path"),iFr=o(":"),dFr=l(),z=a("ul"),cC=a("li"),bbe=a("strong"),cFr=o("albert"),fFr=o(" \u2014 "),gV=a("a"),mFr=o("FlaxAlbertModel"),gFr=o(" (ALBERT model)"),hFr=l(),fC=a("li"),vbe=a("strong"),pFr=o("bart"),_Fr=o(" \u2014 "),hV=a("a"),uFr=o("FlaxBartModel"),bFr=o(" (BART model)"),vFr=l(),mC=a("li"),Tbe=a("strong"),TFr=o("beit"),FFr=o(" \u2014 "),pV=a("a"),CFr=o("FlaxBeitModel"),MFr=o(" (BEiT model)"),EFr=l(),gC=a("li"),Fbe=a("strong"),yFr=o("bert"),wFr=o(" \u2014 "),_V=a("a"),AFr=o("FlaxBertModel"),LFr=o(" (BERT model)"),BFr=l(),hC=a("li"),Cbe=a("strong"),xFr=o("big_bird"),kFr=o(" \u2014 "),uV=a("a"),RFr=o("FlaxBigBirdModel"),SFr=o(" (BigBird model)"),PFr=l(),pC=a("li"),Mbe=a("strong"),$Fr=o("blenderbot"),IFr=o(" \u2014 "),bV=a("a"),DFr=o("FlaxBlenderbotModel"),NFr=o(" (Blenderbot model)"),jFr=l(),_C=a("li"),Ebe=a("strong"),qFr=o("blenderbot-small"),GFr=o(" \u2014 "),vV=a("a"),OFr=o("FlaxBlenderbotSmallModel"),XFr=o(" (BlenderbotSmall model)"),VFr=l(),uC=a("li"),ybe=a("strong"),zFr=o("clip"),WFr=o(" \u2014 "),TV=a("a"),QFr=o("FlaxCLIPModel"),HFr=o(" (CLIP model)"),UFr=l(),bC=a("li"),wbe=a("strong"),JFr=o("distilbert"),YFr=o(" \u2014 "),FV=a("a"),KFr=o("FlaxDistilBertModel"),ZFr=o(" (DistilBERT model)"),e9r=l(),vC=a("li"),Abe=a("strong"),o9r=o("electra"),r9r=o(" \u2014 "),CV=a("a"),t9r=o("FlaxElectraModel"),a9r=o(" (ELECTRA model)"),n9r=l(),TC=a("li"),Lbe=a("strong"),s9r=o("gpt2"),l9r=o(" \u2014 "),MV=a("a"),i9r=o("FlaxGPT2Model"),d9r=o(" (OpenAI GPT-2 model)"),c9r=l(),FC=a("li"),Bbe=a("strong"),f9r=o("gpt_neo"),m9r=o(" \u2014 "),EV=a("a"),g9r=o("FlaxGPTNeoModel"),h9r=o(" (GPT Neo model)"),p9r=l(),CC=a("li"),xbe=a("strong"),_9r=o("gptj"),u9r=o(" \u2014 "),yV=a("a"),b9r=o("FlaxGPTJModel"),v9r=o(" (GPT-J model)"),T9r=l(),MC=a("li"),kbe=a("strong"),F9r=o("marian"),C9r=o(" \u2014 "),wV=a("a"),M9r=o("FlaxMarianModel"),E9r=o(" (Marian model)"),y9r=l(),EC=a("li"),Rbe=a("strong"),w9r=o("mbart"),A9r=o(" \u2014 "),AV=a("a"),L9r=o("FlaxMBartModel"),B9r=o(" (mBART model)"),x9r=l(),yC=a("li"),Sbe=a("strong"),k9r=o("mt5"),R9r=o(" \u2014 "),LV=a("a"),S9r=o("FlaxMT5Model"),P9r=o(" (mT5 model)"),$9r=l(),wC=a("li"),Pbe=a("strong"),I9r=o("pegasus"),D9r=o(" \u2014 "),BV=a("a"),N9r=o("FlaxPegasusModel"),j9r=o(" (Pegasus model)"),q9r=l(),AC=a("li"),$be=a("strong"),G9r=o("roberta"),O9r=o(" \u2014 "),xV=a("a"),X9r=o("FlaxRobertaModel"),V9r=o(" (RoBERTa model)"),z9r=l(),LC=a("li"),Ibe=a("strong"),W9r=o("roformer"),Q9r=o(" \u2014 "),kV=a("a"),H9r=o("FlaxRoFormerModel"),U9r=o(" (RoFormer model)"),J9r=l(),BC=a("li"),Dbe=a("strong"),Y9r=o("t5"),K9r=o(" \u2014 "),RV=a("a"),Z9r=o("FlaxT5Model"),eCr=o(" (T5 model)"),oCr=l(),xC=a("li"),Nbe=a("strong"),rCr=o("vision-text-dual-encoder"),tCr=o(" \u2014 "),SV=a("a"),aCr=o("FlaxVisionTextDualEncoderModel"),nCr=o(" (VisionTextDualEncoder model)"),sCr=l(),kC=a("li"),jbe=a("strong"),lCr=o("vit"),iCr=o(" \u2014 "),PV=a("a"),dCr=o("FlaxViTModel"),cCr=o(" (ViT model)"),fCr=l(),RC=a("li"),qbe=a("strong"),mCr=o("wav2vec2"),gCr=o(" \u2014 "),$V=a("a"),hCr=o("FlaxWav2Vec2Model"),pCr=o(" (Wav2Vec2 model)"),_Cr=l(),SC=a("li"),Gbe=a("strong"),uCr=o("xglm"),bCr=o(" \u2014 "),IV=a("a"),vCr=o("FlaxXGLMModel"),TCr=o(" (XGLM model)"),FCr=l(),PC=a("li"),Obe=a("strong"),CCr=o("xlm-roberta"),MCr=o(" \u2014 "),DV=a("a"),ECr=o("FlaxXLMRobertaModel"),yCr=o(" (XLM-RoBERTa model)"),wCr=l(),Xbe=a("p"),ACr=o("Examples:"),LCr=l(),f(D0.$$.fragment),iSe=l(),of=a("h2"),$C=a("a"),Vbe=a("span"),f(N0.$$.fragment),BCr=l(),zbe=a("span"),xCr=o("FlaxAutoModelForCausalLM"),dSe=l(),Sr=a("div"),f(j0.$$.fragment),kCr=l(),rf=a("p"),RCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Wbe=a("code"),SCr=o("from_pretrained()"),PCr=o("class method or the "),Qbe=a("code"),$Cr=o("from_config()"),ICr=o(`class
method.`),DCr=l(),q0=a("p"),NCr=o("This class cannot be instantiated directly using "),Hbe=a("code"),jCr=o("__init__()"),qCr=o(" (throws an error)."),GCr=l(),At=a("div"),f(G0.$$.fragment),OCr=l(),Ube=a("p"),XCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VCr=l(),tf=a("p"),zCr=o(`Note:
Loading a model from its configuration file does `),Jbe=a("strong"),WCr=o("not"),QCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ybe=a("code"),HCr=o("from_pretrained()"),UCr=o("to load the model weights."),JCr=l(),Kbe=a("p"),YCr=o("Examples:"),KCr=l(),f(O0.$$.fragment),ZCr=l(),Lo=a("div"),f(X0.$$.fragment),eMr=l(),Zbe=a("p"),oMr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rMr=l(),xn=a("p"),tMr=o("The model class to instantiate is selected based on the "),e3e=a("code"),aMr=o("model_type"),nMr=o(` property of the config object (either
passed as an argument or loaded from `),o3e=a("code"),sMr=o("pretrained_model_name_or_path"),lMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r3e=a("code"),iMr=o("pretrained_model_name_or_path"),dMr=o(":"),cMr=l(),ca=a("ul"),IC=a("li"),t3e=a("strong"),fMr=o("bart"),mMr=o(" \u2014 "),NV=a("a"),gMr=o("FlaxBartForCausalLM"),hMr=o(" (BART model)"),pMr=l(),DC=a("li"),a3e=a("strong"),_Mr=o("gpt2"),uMr=o(" \u2014 "),jV=a("a"),bMr=o("FlaxGPT2LMHeadModel"),vMr=o(" (OpenAI GPT-2 model)"),TMr=l(),NC=a("li"),n3e=a("strong"),FMr=o("gpt_neo"),CMr=o(" \u2014 "),qV=a("a"),MMr=o("FlaxGPTNeoForCausalLM"),EMr=o(" (GPT Neo model)"),yMr=l(),jC=a("li"),s3e=a("strong"),wMr=o("gptj"),AMr=o(" \u2014 "),GV=a("a"),LMr=o("FlaxGPTJForCausalLM"),BMr=o(" (GPT-J model)"),xMr=l(),qC=a("li"),l3e=a("strong"),kMr=o("xglm"),RMr=o(" \u2014 "),OV=a("a"),SMr=o("FlaxXGLMForCausalLM"),PMr=o(" (XGLM model)"),$Mr=l(),i3e=a("p"),IMr=o("Examples:"),DMr=l(),f(V0.$$.fragment),cSe=l(),af=a("h2"),GC=a("a"),d3e=a("span"),f(z0.$$.fragment),NMr=l(),c3e=a("span"),jMr=o("FlaxAutoModelForPreTraining"),fSe=l(),Pr=a("div"),f(W0.$$.fragment),qMr=l(),nf=a("p"),GMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),f3e=a("code"),OMr=o("from_pretrained()"),XMr=o("class method or the "),m3e=a("code"),VMr=o("from_config()"),zMr=o(`class
method.`),WMr=l(),Q0=a("p"),QMr=o("This class cannot be instantiated directly using "),g3e=a("code"),HMr=o("__init__()"),UMr=o(" (throws an error)."),JMr=l(),Lt=a("div"),f(H0.$$.fragment),YMr=l(),h3e=a("p"),KMr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ZMr=l(),sf=a("p"),e4r=o(`Note:
Loading a model from its configuration file does `),p3e=a("strong"),o4r=o("not"),r4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_3e=a("code"),t4r=o("from_pretrained()"),a4r=o("to load the model weights."),n4r=l(),u3e=a("p"),s4r=o("Examples:"),l4r=l(),f(U0.$$.fragment),i4r=l(),Bo=a("div"),f(J0.$$.fragment),d4r=l(),b3e=a("p"),c4r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),f4r=l(),kn=a("p"),m4r=o("The model class to instantiate is selected based on the "),v3e=a("code"),g4r=o("model_type"),h4r=o(` property of the config object (either
passed as an argument or loaded from `),T3e=a("code"),p4r=o("pretrained_model_name_or_path"),_4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F3e=a("code"),u4r=o("pretrained_model_name_or_path"),b4r=o(":"),v4r=l(),fe=a("ul"),OC=a("li"),C3e=a("strong"),T4r=o("albert"),F4r=o(" \u2014 "),XV=a("a"),C4r=o("FlaxAlbertForPreTraining"),M4r=o(" (ALBERT model)"),E4r=l(),XC=a("li"),M3e=a("strong"),y4r=o("bart"),w4r=o(" \u2014 "),VV=a("a"),A4r=o("FlaxBartForConditionalGeneration"),L4r=o(" (BART model)"),B4r=l(),VC=a("li"),E3e=a("strong"),x4r=o("bert"),k4r=o(" \u2014 "),zV=a("a"),R4r=o("FlaxBertForPreTraining"),S4r=o(" (BERT model)"),P4r=l(),zC=a("li"),y3e=a("strong"),$4r=o("big_bird"),I4r=o(" \u2014 "),WV=a("a"),D4r=o("FlaxBigBirdForPreTraining"),N4r=o(" (BigBird model)"),j4r=l(),WC=a("li"),w3e=a("strong"),q4r=o("electra"),G4r=o(" \u2014 "),QV=a("a"),O4r=o("FlaxElectraForPreTraining"),X4r=o(" (ELECTRA model)"),V4r=l(),QC=a("li"),A3e=a("strong"),z4r=o("mbart"),W4r=o(" \u2014 "),HV=a("a"),Q4r=o("FlaxMBartForConditionalGeneration"),H4r=o(" (mBART model)"),U4r=l(),HC=a("li"),L3e=a("strong"),J4r=o("mt5"),Y4r=o(" \u2014 "),UV=a("a"),K4r=o("FlaxMT5ForConditionalGeneration"),Z4r=o(" (mT5 model)"),eEr=l(),UC=a("li"),B3e=a("strong"),oEr=o("roberta"),rEr=o(" \u2014 "),JV=a("a"),tEr=o("FlaxRobertaForMaskedLM"),aEr=o(" (RoBERTa model)"),nEr=l(),JC=a("li"),x3e=a("strong"),sEr=o("roformer"),lEr=o(" \u2014 "),YV=a("a"),iEr=o("FlaxRoFormerForMaskedLM"),dEr=o(" (RoFormer model)"),cEr=l(),YC=a("li"),k3e=a("strong"),fEr=o("t5"),mEr=o(" \u2014 "),KV=a("a"),gEr=o("FlaxT5ForConditionalGeneration"),hEr=o(" (T5 model)"),pEr=l(),KC=a("li"),R3e=a("strong"),_Er=o("wav2vec2"),uEr=o(" \u2014 "),ZV=a("a"),bEr=o("FlaxWav2Vec2ForPreTraining"),vEr=o(" (Wav2Vec2 model)"),TEr=l(),ZC=a("li"),S3e=a("strong"),FEr=o("xlm-roberta"),CEr=o(" \u2014 "),ez=a("a"),MEr=o("FlaxXLMRobertaForMaskedLM"),EEr=o(" (XLM-RoBERTa model)"),yEr=l(),P3e=a("p"),wEr=o("Examples:"),AEr=l(),f(Y0.$$.fragment),mSe=l(),lf=a("h2"),eM=a("a"),$3e=a("span"),f(K0.$$.fragment),LEr=l(),I3e=a("span"),BEr=o("FlaxAutoModelForMaskedLM"),gSe=l(),$r=a("div"),f(Z0.$$.fragment),xEr=l(),df=a("p"),kEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),D3e=a("code"),REr=o("from_pretrained()"),SEr=o("class method or the "),N3e=a("code"),PEr=o("from_config()"),$Er=o(`class
method.`),IEr=l(),eL=a("p"),DEr=o("This class cannot be instantiated directly using "),j3e=a("code"),NEr=o("__init__()"),jEr=o(" (throws an error)."),qEr=l(),Bt=a("div"),f(oL.$$.fragment),GEr=l(),q3e=a("p"),OEr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),XEr=l(),cf=a("p"),VEr=o(`Note:
Loading a model from its configuration file does `),G3e=a("strong"),zEr=o("not"),WEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),O3e=a("code"),QEr=o("from_pretrained()"),HEr=o("to load the model weights."),UEr=l(),X3e=a("p"),JEr=o("Examples:"),YEr=l(),f(rL.$$.fragment),KEr=l(),xo=a("div"),f(tL.$$.fragment),ZEr=l(),V3e=a("p"),e5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),o5r=l(),Rn=a("p"),r5r=o("The model class to instantiate is selected based on the "),z3e=a("code"),t5r=o("model_type"),a5r=o(` property of the config object (either
passed as an argument or loaded from `),W3e=a("code"),n5r=o("pretrained_model_name_or_path"),s5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q3e=a("code"),l5r=o("pretrained_model_name_or_path"),i5r=o(":"),d5r=l(),be=a("ul"),oM=a("li"),H3e=a("strong"),c5r=o("albert"),f5r=o(" \u2014 "),oz=a("a"),m5r=o("FlaxAlbertForMaskedLM"),g5r=o(" (ALBERT model)"),h5r=l(),rM=a("li"),U3e=a("strong"),p5r=o("bart"),_5r=o(" \u2014 "),rz=a("a"),u5r=o("FlaxBartForConditionalGeneration"),b5r=o(" (BART model)"),v5r=l(),tM=a("li"),J3e=a("strong"),T5r=o("bert"),F5r=o(" \u2014 "),tz=a("a"),C5r=o("FlaxBertForMaskedLM"),M5r=o(" (BERT model)"),E5r=l(),aM=a("li"),Y3e=a("strong"),y5r=o("big_bird"),w5r=o(" \u2014 "),az=a("a"),A5r=o("FlaxBigBirdForMaskedLM"),L5r=o(" (BigBird model)"),B5r=l(),nM=a("li"),K3e=a("strong"),x5r=o("distilbert"),k5r=o(" \u2014 "),nz=a("a"),R5r=o("FlaxDistilBertForMaskedLM"),S5r=o(" (DistilBERT model)"),P5r=l(),sM=a("li"),Z3e=a("strong"),$5r=o("electra"),I5r=o(" \u2014 "),sz=a("a"),D5r=o("FlaxElectraForMaskedLM"),N5r=o(" (ELECTRA model)"),j5r=l(),lM=a("li"),eve=a("strong"),q5r=o("mbart"),G5r=o(" \u2014 "),lz=a("a"),O5r=o("FlaxMBartForConditionalGeneration"),X5r=o(" (mBART model)"),V5r=l(),iM=a("li"),ove=a("strong"),z5r=o("roberta"),W5r=o(" \u2014 "),iz=a("a"),Q5r=o("FlaxRobertaForMaskedLM"),H5r=o(" (RoBERTa model)"),U5r=l(),dM=a("li"),rve=a("strong"),J5r=o("roformer"),Y5r=o(" \u2014 "),dz=a("a"),K5r=o("FlaxRoFormerForMaskedLM"),Z5r=o(" (RoFormer model)"),eyr=l(),cM=a("li"),tve=a("strong"),oyr=o("xlm-roberta"),ryr=o(" \u2014 "),cz=a("a"),tyr=o("FlaxXLMRobertaForMaskedLM"),ayr=o(" (XLM-RoBERTa model)"),nyr=l(),ave=a("p"),syr=o("Examples:"),lyr=l(),f(aL.$$.fragment),hSe=l(),ff=a("h2"),fM=a("a"),nve=a("span"),f(nL.$$.fragment),iyr=l(),sve=a("span"),dyr=o("FlaxAutoModelForSeq2SeqLM"),pSe=l(),Ir=a("div"),f(sL.$$.fragment),cyr=l(),mf=a("p"),fyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lve=a("code"),myr=o("from_pretrained()"),gyr=o("class method or the "),ive=a("code"),hyr=o("from_config()"),pyr=o(`class
method.`),_yr=l(),lL=a("p"),uyr=o("This class cannot be instantiated directly using "),dve=a("code"),byr=o("__init__()"),vyr=o(" (throws an error)."),Tyr=l(),xt=a("div"),f(iL.$$.fragment),Fyr=l(),cve=a("p"),Cyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Myr=l(),gf=a("p"),Eyr=o(`Note:
Loading a model from its configuration file does `),fve=a("strong"),yyr=o("not"),wyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mve=a("code"),Ayr=o("from_pretrained()"),Lyr=o("to load the model weights."),Byr=l(),gve=a("p"),xyr=o("Examples:"),kyr=l(),f(dL.$$.fragment),Ryr=l(),ko=a("div"),f(cL.$$.fragment),Syr=l(),hve=a("p"),Pyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$yr=l(),Sn=a("p"),Iyr=o("The model class to instantiate is selected based on the "),pve=a("code"),Dyr=o("model_type"),Nyr=o(` property of the config object (either
passed as an argument or loaded from `),_ve=a("code"),jyr=o("pretrained_model_name_or_path"),qyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=a("code"),Gyr=o("pretrained_model_name_or_path"),Oyr=o(":"),Xyr=l(),Me=a("ul"),mM=a("li"),bve=a("strong"),Vyr=o("bart"),zyr=o(" \u2014 "),fz=a("a"),Wyr=o("FlaxBartForConditionalGeneration"),Qyr=o(" (BART model)"),Hyr=l(),gM=a("li"),vve=a("strong"),Uyr=o("blenderbot"),Jyr=o(" \u2014 "),mz=a("a"),Yyr=o("FlaxBlenderbotForConditionalGeneration"),Kyr=o(" (Blenderbot model)"),Zyr=l(),hM=a("li"),Tve=a("strong"),ewr=o("blenderbot-small"),owr=o(" \u2014 "),gz=a("a"),rwr=o("FlaxBlenderbotSmallForConditionalGeneration"),twr=o(" (BlenderbotSmall model)"),awr=l(),pM=a("li"),Fve=a("strong"),nwr=o("encoder-decoder"),swr=o(" \u2014 "),hz=a("a"),lwr=o("FlaxEncoderDecoderModel"),iwr=o(" (Encoder decoder model)"),dwr=l(),_M=a("li"),Cve=a("strong"),cwr=o("marian"),fwr=o(" \u2014 "),pz=a("a"),mwr=o("FlaxMarianMTModel"),gwr=o(" (Marian model)"),hwr=l(),uM=a("li"),Mve=a("strong"),pwr=o("mbart"),_wr=o(" \u2014 "),_z=a("a"),uwr=o("FlaxMBartForConditionalGeneration"),bwr=o(" (mBART model)"),vwr=l(),bM=a("li"),Eve=a("strong"),Twr=o("mt5"),Fwr=o(" \u2014 "),uz=a("a"),Cwr=o("FlaxMT5ForConditionalGeneration"),Mwr=o(" (mT5 model)"),Ewr=l(),vM=a("li"),yve=a("strong"),ywr=o("pegasus"),wwr=o(" \u2014 "),bz=a("a"),Awr=o("FlaxPegasusForConditionalGeneration"),Lwr=o(" (Pegasus model)"),Bwr=l(),TM=a("li"),wve=a("strong"),xwr=o("t5"),kwr=o(" \u2014 "),vz=a("a"),Rwr=o("FlaxT5ForConditionalGeneration"),Swr=o(" (T5 model)"),Pwr=l(),Ave=a("p"),$wr=o("Examples:"),Iwr=l(),f(fL.$$.fragment),_Se=l(),hf=a("h2"),FM=a("a"),Lve=a("span"),f(mL.$$.fragment),Dwr=l(),Bve=a("span"),Nwr=o("FlaxAutoModelForSequenceClassification"),uSe=l(),Dr=a("div"),f(gL.$$.fragment),jwr=l(),pf=a("p"),qwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xve=a("code"),Gwr=o("from_pretrained()"),Owr=o("class method or the "),kve=a("code"),Xwr=o("from_config()"),Vwr=o(`class
method.`),zwr=l(),hL=a("p"),Wwr=o("This class cannot be instantiated directly using "),Rve=a("code"),Qwr=o("__init__()"),Hwr=o(" (throws an error)."),Uwr=l(),kt=a("div"),f(pL.$$.fragment),Jwr=l(),Sve=a("p"),Ywr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Kwr=l(),_f=a("p"),Zwr=o(`Note:
Loading a model from its configuration file does `),Pve=a("strong"),eAr=o("not"),oAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ve=a("code"),rAr=o("from_pretrained()"),tAr=o("to load the model weights."),aAr=l(),Ive=a("p"),nAr=o("Examples:"),sAr=l(),f(_L.$$.fragment),lAr=l(),Ro=a("div"),f(uL.$$.fragment),iAr=l(),Dve=a("p"),dAr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cAr=l(),Pn=a("p"),fAr=o("The model class to instantiate is selected based on the "),Nve=a("code"),mAr=o("model_type"),gAr=o(` property of the config object (either
passed as an argument or loaded from `),jve=a("code"),hAr=o("pretrained_model_name_or_path"),pAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=a("code"),_Ar=o("pretrained_model_name_or_path"),uAr=o(":"),bAr=l(),ve=a("ul"),CM=a("li"),Gve=a("strong"),vAr=o("albert"),TAr=o(" \u2014 "),Tz=a("a"),FAr=o("FlaxAlbertForSequenceClassification"),CAr=o(" (ALBERT model)"),MAr=l(),MM=a("li"),Ove=a("strong"),EAr=o("bart"),yAr=o(" \u2014 "),Fz=a("a"),wAr=o("FlaxBartForSequenceClassification"),AAr=o(" (BART model)"),LAr=l(),EM=a("li"),Xve=a("strong"),BAr=o("bert"),xAr=o(" \u2014 "),Cz=a("a"),kAr=o("FlaxBertForSequenceClassification"),RAr=o(" (BERT model)"),SAr=l(),yM=a("li"),Vve=a("strong"),PAr=o("big_bird"),$Ar=o(" \u2014 "),Mz=a("a"),IAr=o("FlaxBigBirdForSequenceClassification"),DAr=o(" (BigBird model)"),NAr=l(),wM=a("li"),zve=a("strong"),jAr=o("distilbert"),qAr=o(" \u2014 "),Ez=a("a"),GAr=o("FlaxDistilBertForSequenceClassification"),OAr=o(" (DistilBERT model)"),XAr=l(),AM=a("li"),Wve=a("strong"),VAr=o("electra"),zAr=o(" \u2014 "),yz=a("a"),WAr=o("FlaxElectraForSequenceClassification"),QAr=o(" (ELECTRA model)"),HAr=l(),LM=a("li"),Qve=a("strong"),UAr=o("mbart"),JAr=o(" \u2014 "),wz=a("a"),YAr=o("FlaxMBartForSequenceClassification"),KAr=o(" (mBART model)"),ZAr=l(),BM=a("li"),Hve=a("strong"),e0r=o("roberta"),o0r=o(" \u2014 "),Az=a("a"),r0r=o("FlaxRobertaForSequenceClassification"),t0r=o(" (RoBERTa model)"),a0r=l(),xM=a("li"),Uve=a("strong"),n0r=o("roformer"),s0r=o(" \u2014 "),Lz=a("a"),l0r=o("FlaxRoFormerForSequenceClassification"),i0r=o(" (RoFormer model)"),d0r=l(),kM=a("li"),Jve=a("strong"),c0r=o("xlm-roberta"),f0r=o(" \u2014 "),Bz=a("a"),m0r=o("FlaxXLMRobertaForSequenceClassification"),g0r=o(" (XLM-RoBERTa model)"),h0r=l(),Yve=a("p"),p0r=o("Examples:"),_0r=l(),f(bL.$$.fragment),bSe=l(),uf=a("h2"),RM=a("a"),Kve=a("span"),f(vL.$$.fragment),u0r=l(),Zve=a("span"),b0r=o("FlaxAutoModelForQuestionAnswering"),vSe=l(),Nr=a("div"),f(TL.$$.fragment),v0r=l(),bf=a("p"),T0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),e6e=a("code"),F0r=o("from_pretrained()"),C0r=o("class method or the "),o6e=a("code"),M0r=o("from_config()"),E0r=o(`class
method.`),y0r=l(),FL=a("p"),w0r=o("This class cannot be instantiated directly using "),r6e=a("code"),A0r=o("__init__()"),L0r=o(" (throws an error)."),B0r=l(),Rt=a("div"),f(CL.$$.fragment),x0r=l(),t6e=a("p"),k0r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),R0r=l(),vf=a("p"),S0r=o(`Note:
Loading a model from its configuration file does `),a6e=a("strong"),P0r=o("not"),$0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),n6e=a("code"),I0r=o("from_pretrained()"),D0r=o("to load the model weights."),N0r=l(),s6e=a("p"),j0r=o("Examples:"),q0r=l(),f(ML.$$.fragment),G0r=l(),So=a("div"),f(EL.$$.fragment),O0r=l(),l6e=a("p"),X0r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),V0r=l(),$n=a("p"),z0r=o("The model class to instantiate is selected based on the "),i6e=a("code"),W0r=o("model_type"),Q0r=o(` property of the config object (either
passed as an argument or loaded from `),d6e=a("code"),H0r=o("pretrained_model_name_or_path"),U0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c6e=a("code"),J0r=o("pretrained_model_name_or_path"),Y0r=o(":"),K0r=l(),Te=a("ul"),SM=a("li"),f6e=a("strong"),Z0r=o("albert"),eLr=o(" \u2014 "),xz=a("a"),oLr=o("FlaxAlbertForQuestionAnswering"),rLr=o(" (ALBERT model)"),tLr=l(),PM=a("li"),m6e=a("strong"),aLr=o("bart"),nLr=o(" \u2014 "),kz=a("a"),sLr=o("FlaxBartForQuestionAnswering"),lLr=o(" (BART model)"),iLr=l(),$M=a("li"),g6e=a("strong"),dLr=o("bert"),cLr=o(" \u2014 "),Rz=a("a"),fLr=o("FlaxBertForQuestionAnswering"),mLr=o(" (BERT model)"),gLr=l(),IM=a("li"),h6e=a("strong"),hLr=o("big_bird"),pLr=o(" \u2014 "),Sz=a("a"),_Lr=o("FlaxBigBirdForQuestionAnswering"),uLr=o(" (BigBird model)"),bLr=l(),DM=a("li"),p6e=a("strong"),vLr=o("distilbert"),TLr=o(" \u2014 "),Pz=a("a"),FLr=o("FlaxDistilBertForQuestionAnswering"),CLr=o(" (DistilBERT model)"),MLr=l(),NM=a("li"),_6e=a("strong"),ELr=o("electra"),yLr=o(" \u2014 "),$z=a("a"),wLr=o("FlaxElectraForQuestionAnswering"),ALr=o(" (ELECTRA model)"),LLr=l(),jM=a("li"),u6e=a("strong"),BLr=o("mbart"),xLr=o(" \u2014 "),Iz=a("a"),kLr=o("FlaxMBartForQuestionAnswering"),RLr=o(" (mBART model)"),SLr=l(),qM=a("li"),b6e=a("strong"),PLr=o("roberta"),$Lr=o(" \u2014 "),Dz=a("a"),ILr=o("FlaxRobertaForQuestionAnswering"),DLr=o(" (RoBERTa model)"),NLr=l(),GM=a("li"),v6e=a("strong"),jLr=o("roformer"),qLr=o(" \u2014 "),Nz=a("a"),GLr=o("FlaxRoFormerForQuestionAnswering"),OLr=o(" (RoFormer model)"),XLr=l(),OM=a("li"),T6e=a("strong"),VLr=o("xlm-roberta"),zLr=o(" \u2014 "),jz=a("a"),WLr=o("FlaxXLMRobertaForQuestionAnswering"),QLr=o(" (XLM-RoBERTa model)"),HLr=l(),F6e=a("p"),ULr=o("Examples:"),JLr=l(),f(yL.$$.fragment),TSe=l(),Tf=a("h2"),XM=a("a"),C6e=a("span"),f(wL.$$.fragment),YLr=l(),M6e=a("span"),KLr=o("FlaxAutoModelForTokenClassification"),FSe=l(),jr=a("div"),f(AL.$$.fragment),ZLr=l(),Ff=a("p"),e7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),E6e=a("code"),o7r=o("from_pretrained()"),r7r=o("class method or the "),y6e=a("code"),t7r=o("from_config()"),a7r=o(`class
method.`),n7r=l(),LL=a("p"),s7r=o("This class cannot be instantiated directly using "),w6e=a("code"),l7r=o("__init__()"),i7r=o(" (throws an error)."),d7r=l(),St=a("div"),f(BL.$$.fragment),c7r=l(),A6e=a("p"),f7r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),m7r=l(),Cf=a("p"),g7r=o(`Note:
Loading a model from its configuration file does `),L6e=a("strong"),h7r=o("not"),p7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),B6e=a("code"),_7r=o("from_pretrained()"),u7r=o("to load the model weights."),b7r=l(),x6e=a("p"),v7r=o("Examples:"),T7r=l(),f(xL.$$.fragment),F7r=l(),Po=a("div"),f(kL.$$.fragment),C7r=l(),k6e=a("p"),M7r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),E7r=l(),In=a("p"),y7r=o("The model class to instantiate is selected based on the "),R6e=a("code"),w7r=o("model_type"),A7r=o(` property of the config object (either
passed as an argument or loaded from `),S6e=a("code"),L7r=o("pretrained_model_name_or_path"),B7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=a("code"),x7r=o("pretrained_model_name_or_path"),k7r=o(":"),R7r=l(),Se=a("ul"),VM=a("li"),$6e=a("strong"),S7r=o("albert"),P7r=o(" \u2014 "),qz=a("a"),$7r=o("FlaxAlbertForTokenClassification"),I7r=o(" (ALBERT model)"),D7r=l(),zM=a("li"),I6e=a("strong"),N7r=o("bert"),j7r=o(" \u2014 "),Gz=a("a"),q7r=o("FlaxBertForTokenClassification"),G7r=o(" (BERT model)"),O7r=l(),WM=a("li"),D6e=a("strong"),X7r=o("big_bird"),V7r=o(" \u2014 "),Oz=a("a"),z7r=o("FlaxBigBirdForTokenClassification"),W7r=o(" (BigBird model)"),Q7r=l(),QM=a("li"),N6e=a("strong"),H7r=o("distilbert"),U7r=o(" \u2014 "),Xz=a("a"),J7r=o("FlaxDistilBertForTokenClassification"),Y7r=o(" (DistilBERT model)"),K7r=l(),HM=a("li"),j6e=a("strong"),Z7r=o("electra"),e8r=o(" \u2014 "),Vz=a("a"),o8r=o("FlaxElectraForTokenClassification"),r8r=o(" (ELECTRA model)"),t8r=l(),UM=a("li"),q6e=a("strong"),a8r=o("roberta"),n8r=o(" \u2014 "),zz=a("a"),s8r=o("FlaxRobertaForTokenClassification"),l8r=o(" (RoBERTa model)"),i8r=l(),JM=a("li"),G6e=a("strong"),d8r=o("roformer"),c8r=o(" \u2014 "),Wz=a("a"),f8r=o("FlaxRoFormerForTokenClassification"),m8r=o(" (RoFormer model)"),g8r=l(),YM=a("li"),O6e=a("strong"),h8r=o("xlm-roberta"),p8r=o(" \u2014 "),Qz=a("a"),_8r=o("FlaxXLMRobertaForTokenClassification"),u8r=o(" (XLM-RoBERTa model)"),b8r=l(),X6e=a("p"),v8r=o("Examples:"),T8r=l(),f(RL.$$.fragment),CSe=l(),Mf=a("h2"),KM=a("a"),V6e=a("span"),f(SL.$$.fragment),F8r=l(),z6e=a("span"),C8r=o("FlaxAutoModelForMultipleChoice"),MSe=l(),qr=a("div"),f(PL.$$.fragment),M8r=l(),Ef=a("p"),E8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),W6e=a("code"),y8r=o("from_pretrained()"),w8r=o("class method or the "),Q6e=a("code"),A8r=o("from_config()"),L8r=o(`class
method.`),B8r=l(),$L=a("p"),x8r=o("This class cannot be instantiated directly using "),H6e=a("code"),k8r=o("__init__()"),R8r=o(" (throws an error)."),S8r=l(),Pt=a("div"),f(IL.$$.fragment),P8r=l(),U6e=a("p"),$8r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),I8r=l(),yf=a("p"),D8r=o(`Note:
Loading a model from its configuration file does `),J6e=a("strong"),N8r=o("not"),j8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Y6e=a("code"),q8r=o("from_pretrained()"),G8r=o("to load the model weights."),O8r=l(),K6e=a("p"),X8r=o("Examples:"),V8r=l(),f(DL.$$.fragment),z8r=l(),$o=a("div"),f(NL.$$.fragment),W8r=l(),Z6e=a("p"),Q8r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),H8r=l(),Dn=a("p"),U8r=o("The model class to instantiate is selected based on the "),eTe=a("code"),J8r=o("model_type"),Y8r=o(` property of the config object (either
passed as an argument or loaded from `),oTe=a("code"),K8r=o("pretrained_model_name_or_path"),Z8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=a("code"),eBr=o("pretrained_model_name_or_path"),oBr=o(":"),rBr=l(),Pe=a("ul"),ZM=a("li"),tTe=a("strong"),tBr=o("albert"),aBr=o(" \u2014 "),Hz=a("a"),nBr=o("FlaxAlbertForMultipleChoice"),sBr=o(" (ALBERT model)"),lBr=l(),e4=a("li"),aTe=a("strong"),iBr=o("bert"),dBr=o(" \u2014 "),Uz=a("a"),cBr=o("FlaxBertForMultipleChoice"),fBr=o(" (BERT model)"),mBr=l(),o4=a("li"),nTe=a("strong"),gBr=o("big_bird"),hBr=o(" \u2014 "),Jz=a("a"),pBr=o("FlaxBigBirdForMultipleChoice"),_Br=o(" (BigBird model)"),uBr=l(),r4=a("li"),sTe=a("strong"),bBr=o("distilbert"),vBr=o(" \u2014 "),Yz=a("a"),TBr=o("FlaxDistilBertForMultipleChoice"),FBr=o(" (DistilBERT model)"),CBr=l(),t4=a("li"),lTe=a("strong"),MBr=o("electra"),EBr=o(" \u2014 "),Kz=a("a"),yBr=o("FlaxElectraForMultipleChoice"),wBr=o(" (ELECTRA model)"),ABr=l(),a4=a("li"),iTe=a("strong"),LBr=o("roberta"),BBr=o(" \u2014 "),Zz=a("a"),xBr=o("FlaxRobertaForMultipleChoice"),kBr=o(" (RoBERTa model)"),RBr=l(),n4=a("li"),dTe=a("strong"),SBr=o("roformer"),PBr=o(" \u2014 "),eW=a("a"),$Br=o("FlaxRoFormerForMultipleChoice"),IBr=o(" (RoFormer model)"),DBr=l(),s4=a("li"),cTe=a("strong"),NBr=o("xlm-roberta"),jBr=o(" \u2014 "),oW=a("a"),qBr=o("FlaxXLMRobertaForMultipleChoice"),GBr=o(" (XLM-RoBERTa model)"),OBr=l(),fTe=a("p"),XBr=o("Examples:"),VBr=l(),f(jL.$$.fragment),ESe=l(),wf=a("h2"),l4=a("a"),mTe=a("span"),f(qL.$$.fragment),zBr=l(),gTe=a("span"),WBr=o("FlaxAutoModelForNextSentencePrediction"),ySe=l(),Gr=a("div"),f(GL.$$.fragment),QBr=l(),Af=a("p"),HBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),hTe=a("code"),UBr=o("from_pretrained()"),JBr=o("class method or the "),pTe=a("code"),YBr=o("from_config()"),KBr=o(`class
method.`),ZBr=l(),OL=a("p"),exr=o("This class cannot be instantiated directly using "),_Te=a("code"),oxr=o("__init__()"),rxr=o(" (throws an error)."),txr=l(),$t=a("div"),f(XL.$$.fragment),axr=l(),uTe=a("p"),nxr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sxr=l(),Lf=a("p"),lxr=o(`Note:
Loading a model from its configuration file does `),bTe=a("strong"),ixr=o("not"),dxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vTe=a("code"),cxr=o("from_pretrained()"),fxr=o("to load the model weights."),mxr=l(),TTe=a("p"),gxr=o("Examples:"),hxr=l(),f(VL.$$.fragment),pxr=l(),Io=a("div"),f(zL.$$.fragment),_xr=l(),FTe=a("p"),uxr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bxr=l(),Nn=a("p"),vxr=o("The model class to instantiate is selected based on the "),CTe=a("code"),Txr=o("model_type"),Fxr=o(` property of the config object (either
passed as an argument or loaded from `),MTe=a("code"),Cxr=o("pretrained_model_name_or_path"),Mxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=a("code"),Exr=o("pretrained_model_name_or_path"),yxr=o(":"),wxr=l(),yTe=a("ul"),i4=a("li"),wTe=a("strong"),Axr=o("bert"),Lxr=o(" \u2014 "),rW=a("a"),Bxr=o("FlaxBertForNextSentencePrediction"),xxr=o(" (BERT model)"),kxr=l(),ATe=a("p"),Rxr=o("Examples:"),Sxr=l(),f(WL.$$.fragment),wSe=l(),Bf=a("h2"),d4=a("a"),LTe=a("span"),f(QL.$$.fragment),Pxr=l(),BTe=a("span"),$xr=o("FlaxAutoModelForImageClassification"),ASe=l(),Or=a("div"),f(HL.$$.fragment),Ixr=l(),xf=a("p"),Dxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xTe=a("code"),Nxr=o("from_pretrained()"),jxr=o("class method or the "),kTe=a("code"),qxr=o("from_config()"),Gxr=o(`class
method.`),Oxr=l(),UL=a("p"),Xxr=o("This class cannot be instantiated directly using "),RTe=a("code"),Vxr=o("__init__()"),zxr=o(" (throws an error)."),Wxr=l(),It=a("div"),f(JL.$$.fragment),Qxr=l(),STe=a("p"),Hxr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Uxr=l(),kf=a("p"),Jxr=o(`Note:
Loading a model from its configuration file does `),PTe=a("strong"),Yxr=o("not"),Kxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Te=a("code"),Zxr=o("from_pretrained()"),ekr=o("to load the model weights."),okr=l(),ITe=a("p"),rkr=o("Examples:"),tkr=l(),f(YL.$$.fragment),akr=l(),Do=a("div"),f(KL.$$.fragment),nkr=l(),DTe=a("p"),skr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lkr=l(),jn=a("p"),ikr=o("The model class to instantiate is selected based on the "),NTe=a("code"),dkr=o("model_type"),ckr=o(` property of the config object (either
passed as an argument or loaded from `),jTe=a("code"),fkr=o("pretrained_model_name_or_path"),mkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=a("code"),gkr=o("pretrained_model_name_or_path"),hkr=o(":"),pkr=l(),ZL=a("ul"),c4=a("li"),GTe=a("strong"),_kr=o("beit"),ukr=o(" \u2014 "),tW=a("a"),bkr=o("FlaxBeitForImageClassification"),vkr=o(" (BEiT model)"),Tkr=l(),f4=a("li"),OTe=a("strong"),Fkr=o("vit"),Ckr=o(" \u2014 "),aW=a("a"),Mkr=o("FlaxViTForImageClassification"),Ekr=o(" (ViT model)"),ykr=l(),XTe=a("p"),wkr=o("Examples:"),Akr=l(),f(e7.$$.fragment),LSe=l(),Rf=a("h2"),m4=a("a"),VTe=a("span"),f(o7.$$.fragment),Lkr=l(),zTe=a("span"),Bkr=o("FlaxAutoModelForVision2Seq"),BSe=l(),Xr=a("div"),f(r7.$$.fragment),xkr=l(),Sf=a("p"),kkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WTe=a("code"),Rkr=o("from_pretrained()"),Skr=o("class method or the "),QTe=a("code"),Pkr=o("from_config()"),$kr=o(`class
method.`),Ikr=l(),t7=a("p"),Dkr=o("This class cannot be instantiated directly using "),HTe=a("code"),Nkr=o("__init__()"),jkr=o(" (throws an error)."),qkr=l(),Dt=a("div"),f(a7.$$.fragment),Gkr=l(),UTe=a("p"),Okr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xkr=l(),Pf=a("p"),Vkr=o(`Note:
Loading a model from its configuration file does `),JTe=a("strong"),zkr=o("not"),Wkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YTe=a("code"),Qkr=o("from_pretrained()"),Hkr=o("to load the model weights."),Ukr=l(),KTe=a("p"),Jkr=o("Examples:"),Ykr=l(),f(n7.$$.fragment),Kkr=l(),No=a("div"),f(s7.$$.fragment),Zkr=l(),ZTe=a("p"),eRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oRr=l(),qn=a("p"),rRr=o("The model class to instantiate is selected based on the "),eFe=a("code"),tRr=o("model_type"),aRr=o(` property of the config object (either
passed as an argument or loaded from `),oFe=a("code"),nRr=o("pretrained_model_name_or_path"),sRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=a("code"),lRr=o("pretrained_model_name_or_path"),iRr=o(":"),dRr=l(),tFe=a("ul"),g4=a("li"),aFe=a("strong"),cRr=o("vision-encoder-decoder"),fRr=o(" \u2014 "),nW=a("a"),mRr=o("FlaxVisionEncoderDecoderModel"),gRr=o(" (Vision Encoder decoder model)"),hRr=l(),nFe=a("p"),pRr=o("Examples:"),_Rr=l(),f(l7.$$.fragment),this.h()},l(c){const u=kMt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var i7=s(de);Ee=n(i7,"A",{id:!0,class:!0,href:!0});var sFe=s(Ee);lo=n(sFe,"SPAN",{});var lFe=s(lo);m(me.$$.fragment,lFe),lFe.forEach(t),sFe.forEach(t),Ce=i(i7),Vo=n(i7,"SPAN",{});var bRr=s(Vo);Ii=r(bRr,"Auto Classes"),bRr.forEach(t),i7.forEach(t),Df=i(c),fa=n(c,"P",{});var kSe=s(fa);Di=r(kSe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(kSe,"CODE",{});var vRr=s(Ni);gE=r(vRr,"from_pretrained()"),vRr.forEach(t),Nf=r(kSe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),kSe.forEach(t),Be=i(c),co=n(c,"P",{});var h4=s(co);ji=r(h4,"Instantiating one of "),Gn=n(h4,"A",{href:!0});var TRr=s(Gn);hE=r(TRr,"AutoConfig"),TRr.forEach(t),On=r(h4,", "),Xn=n(h4,"A",{href:!0});var FRr=s(Xn);pE=r(FRr,"AutoModel"),FRr.forEach(t),qi=r(h4,`, and
`),Vn=n(h4,"A",{href:!0});var CRr=s(Vn);_E=r(CRr,"AutoTokenizer"),CRr.forEach(t),Gi=r(h4," will directly create a class of the relevant architecture. For instance"),h4.forEach(t),jf=i(c),m(qa.$$.fragment,c),fo=i(c),_e=n(c,"P",{});var RSe=s(_e);n8=r(RSe,"will create a model that is an instance of "),Oi=n(RSe,"A",{href:!0});var MRr=s(Oi);s8=r(MRr,"BertModel"),MRr.forEach(t),l8=r(RSe,"."),RSe.forEach(t),zo=i(c),Ga=n(c,"P",{});var SSe=s(Ga);i8=r(SSe,"There is one class of "),qf=n(SSe,"CODE",{});var ERr=s(qf);d8=r(ERr,"AutoModel"),ERr.forEach(t),O$e=r(SSe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),SSe.forEach(t),Bke=i(c),Xi=n(c,"H2",{class:!0});var PSe=s(Xi);Gf=n(PSe,"A",{id:!0,class:!0,href:!0});var yRr=s(Gf);ZQ=n(yRr,"SPAN",{});var wRr=s(ZQ);m(uE.$$.fragment,wRr),wRr.forEach(t),yRr.forEach(t),X$e=i(PSe),eH=n(PSe,"SPAN",{});var ARr=s(eH);V$e=r(ARr,"Extending the Auto Classes"),ARr.forEach(t),PSe.forEach(t),xke=i(c),zn=n(c,"P",{});var sW=s(zn);z$e=r(sW,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),oH=n(sW,"CODE",{});var LRr=s(oH);W$e=r(LRr,"NewModel"),LRr.forEach(t),Q$e=r(sW,", make sure you have a "),rH=n(sW,"CODE",{});var BRr=s(rH);H$e=r(BRr,"NewModelConfig"),BRr.forEach(t),U$e=r(sW,` then you can add those to the auto
classes like this:`),sW.forEach(t),kke=i(c),m(bE.$$.fragment,c),Rke=i(c),c8=n(c,"P",{});var xRr=s(c8);J$e=r(xRr,"You will then be able to use the auto classes like you would usually do!"),xRr.forEach(t),Ske=i(c),m(Of.$$.fragment,c),Pke=i(c),Vi=n(c,"H2",{class:!0});var $Se=s(Vi);Xf=n($Se,"A",{id:!0,class:!0,href:!0});var kRr=s(Xf);tH=n(kRr,"SPAN",{});var RRr=s(tH);m(vE.$$.fragment,RRr),RRr.forEach(t),kRr.forEach(t),Y$e=i($Se),aH=n($Se,"SPAN",{});var SRr=s(aH);K$e=r(SRr,"AutoConfig"),SRr.forEach(t),$Se.forEach(t),$ke=i(c),Wo=n(c,"DIV",{class:!0});var Os=s(Wo);m(TE.$$.fragment,Os),Z$e=i(Os),FE=n(Os,"P",{});var ISe=s(FE);eIe=r(ISe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),f8=n(ISe,"A",{href:!0});var PRr=s(f8);oIe=r(PRr,"from_pretrained()"),PRr.forEach(t),rIe=r(ISe," class method."),ISe.forEach(t),tIe=i(Os),CE=n(Os,"P",{});var DSe=s(CE);aIe=r(DSe,"This class cannot be instantiated directly using "),nH=n(DSe,"CODE",{});var $Rr=s(nH);nIe=r($Rr,"__init__()"),$Rr.forEach(t),sIe=r(DSe," (throws an error)."),DSe.forEach(t),lIe=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(ME.$$.fragment,ga),iIe=i(ga),sH=n(ga,"P",{});var IRr=s(sH);dIe=r(IRr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),IRr.forEach(t),cIe=i(ga),zi=n(ga,"P",{});var lW=s(zi);fIe=r(lW,"The configuration class to instantiate is selected based on the "),lH=n(lW,"CODE",{});var DRr=s(lH);mIe=r(DRr,"model_type"),DRr.forEach(t),gIe=r(lW,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),iH=n(lW,"CODE",{});var NRr=s(iH);hIe=r(NRr,"pretrained_model_name_or_path"),NRr.forEach(t),pIe=r(lW,":"),lW.forEach(t),_Ie=i(ga),v=n(ga,"UL",{});var T=s(v);Vf=n(T,"LI",{});var iFe=s(Vf);dH=n(iFe,"STRONG",{});var jRr=s(dH);uIe=r(jRr,"albert"),jRr.forEach(t),bIe=r(iFe," \u2014 "),m8=n(iFe,"A",{href:!0});var qRr=s(m8);vIe=r(qRr,"AlbertConfig"),qRr.forEach(t),TIe=r(iFe," (ALBERT model)"),iFe.forEach(t),FIe=i(T),zf=n(T,"LI",{});var dFe=s(zf);cH=n(dFe,"STRONG",{});var GRr=s(cH);CIe=r(GRr,"bart"),GRr.forEach(t),MIe=r(dFe," \u2014 "),g8=n(dFe,"A",{href:!0});var ORr=s(g8);EIe=r(ORr,"BartConfig"),ORr.forEach(t),yIe=r(dFe," (BART model)"),dFe.forEach(t),wIe=i(T),Wf=n(T,"LI",{});var cFe=s(Wf);fH=n(cFe,"STRONG",{});var XRr=s(fH);AIe=r(XRr,"beit"),XRr.forEach(t),LIe=r(cFe," \u2014 "),h8=n(cFe,"A",{href:!0});var VRr=s(h8);BIe=r(VRr,"BeitConfig"),VRr.forEach(t),xIe=r(cFe," (BEiT model)"),cFe.forEach(t),kIe=i(T),Qf=n(T,"LI",{});var fFe=s(Qf);mH=n(fFe,"STRONG",{});var zRr=s(mH);RIe=r(zRr,"bert"),zRr.forEach(t),SIe=r(fFe," \u2014 "),p8=n(fFe,"A",{href:!0});var WRr=s(p8);PIe=r(WRr,"BertConfig"),WRr.forEach(t),$Ie=r(fFe," (BERT model)"),fFe.forEach(t),IIe=i(T),Hf=n(T,"LI",{});var mFe=s(Hf);gH=n(mFe,"STRONG",{});var QRr=s(gH);DIe=r(QRr,"bert-generation"),QRr.forEach(t),NIe=r(mFe," \u2014 "),_8=n(mFe,"A",{href:!0});var HRr=s(_8);jIe=r(HRr,"BertGenerationConfig"),HRr.forEach(t),qIe=r(mFe," (Bert Generation model)"),mFe.forEach(t),GIe=i(T),Uf=n(T,"LI",{});var gFe=s(Uf);hH=n(gFe,"STRONG",{});var URr=s(hH);OIe=r(URr,"big_bird"),URr.forEach(t),XIe=r(gFe," \u2014 "),u8=n(gFe,"A",{href:!0});var JRr=s(u8);VIe=r(JRr,"BigBirdConfig"),JRr.forEach(t),zIe=r(gFe," (BigBird model)"),gFe.forEach(t),WIe=i(T),Jf=n(T,"LI",{});var hFe=s(Jf);pH=n(hFe,"STRONG",{});var YRr=s(pH);QIe=r(YRr,"bigbird_pegasus"),YRr.forEach(t),HIe=r(hFe," \u2014 "),b8=n(hFe,"A",{href:!0});var KRr=s(b8);UIe=r(KRr,"BigBirdPegasusConfig"),KRr.forEach(t),JIe=r(hFe," (BigBirdPegasus model)"),hFe.forEach(t),YIe=i(T),Yf=n(T,"LI",{});var pFe=s(Yf);_H=n(pFe,"STRONG",{});var ZRr=s(_H);KIe=r(ZRr,"blenderbot"),ZRr.forEach(t),ZIe=r(pFe," \u2014 "),v8=n(pFe,"A",{href:!0});var eSr=s(v8);eDe=r(eSr,"BlenderbotConfig"),eSr.forEach(t),oDe=r(pFe," (Blenderbot model)"),pFe.forEach(t),rDe=i(T),Kf=n(T,"LI",{});var _Fe=s(Kf);uH=n(_Fe,"STRONG",{});var oSr=s(uH);tDe=r(oSr,"blenderbot-small"),oSr.forEach(t),aDe=r(_Fe," \u2014 "),T8=n(_Fe,"A",{href:!0});var rSr=s(T8);nDe=r(rSr,"BlenderbotSmallConfig"),rSr.forEach(t),sDe=r(_Fe," (BlenderbotSmall model)"),_Fe.forEach(t),lDe=i(T),Zf=n(T,"LI",{});var uFe=s(Zf);bH=n(uFe,"STRONG",{});var tSr=s(bH);iDe=r(tSr,"camembert"),tSr.forEach(t),dDe=r(uFe," \u2014 "),F8=n(uFe,"A",{href:!0});var aSr=s(F8);cDe=r(aSr,"CamembertConfig"),aSr.forEach(t),fDe=r(uFe," (CamemBERT model)"),uFe.forEach(t),mDe=i(T),em=n(T,"LI",{});var bFe=s(em);vH=n(bFe,"STRONG",{});var nSr=s(vH);gDe=r(nSr,"canine"),nSr.forEach(t),hDe=r(bFe," \u2014 "),C8=n(bFe,"A",{href:!0});var sSr=s(C8);pDe=r(sSr,"CanineConfig"),sSr.forEach(t),_De=r(bFe," (Canine model)"),bFe.forEach(t),uDe=i(T),om=n(T,"LI",{});var vFe=s(om);TH=n(vFe,"STRONG",{});var lSr=s(TH);bDe=r(lSr,"clip"),lSr.forEach(t),vDe=r(vFe," \u2014 "),M8=n(vFe,"A",{href:!0});var iSr=s(M8);TDe=r(iSr,"CLIPConfig"),iSr.forEach(t),FDe=r(vFe," (CLIP model)"),vFe.forEach(t),CDe=i(T),rm=n(T,"LI",{});var TFe=s(rm);FH=n(TFe,"STRONG",{});var dSr=s(FH);MDe=r(dSr,"convbert"),dSr.forEach(t),EDe=r(TFe," \u2014 "),E8=n(TFe,"A",{href:!0});var cSr=s(E8);yDe=r(cSr,"ConvBertConfig"),cSr.forEach(t),wDe=r(TFe," (ConvBERT model)"),TFe.forEach(t),ADe=i(T),tm=n(T,"LI",{});var FFe=s(tm);CH=n(FFe,"STRONG",{});var fSr=s(CH);LDe=r(fSr,"convnext"),fSr.forEach(t),BDe=r(FFe," \u2014 "),y8=n(FFe,"A",{href:!0});var mSr=s(y8);xDe=r(mSr,"ConvNextConfig"),mSr.forEach(t),kDe=r(FFe," (ConvNext model)"),FFe.forEach(t),RDe=i(T),am=n(T,"LI",{});var CFe=s(am);MH=n(CFe,"STRONG",{});var gSr=s(MH);SDe=r(gSr,"ctrl"),gSr.forEach(t),PDe=r(CFe," \u2014 "),w8=n(CFe,"A",{href:!0});var hSr=s(w8);$De=r(hSr,"CTRLConfig"),hSr.forEach(t),IDe=r(CFe," (CTRL model)"),CFe.forEach(t),DDe=i(T),nm=n(T,"LI",{});var MFe=s(nm);EH=n(MFe,"STRONG",{});var pSr=s(EH);NDe=r(pSr,"data2vec-audio"),pSr.forEach(t),jDe=r(MFe," \u2014 "),A8=n(MFe,"A",{href:!0});var _Sr=s(A8);qDe=r(_Sr,"Data2VecAudioConfig"),_Sr.forEach(t),GDe=r(MFe," (Data2VecAudio model)"),MFe.forEach(t),ODe=i(T),sm=n(T,"LI",{});var EFe=s(sm);yH=n(EFe,"STRONG",{});var uSr=s(yH);XDe=r(uSr,"data2vec-text"),uSr.forEach(t),VDe=r(EFe," \u2014 "),L8=n(EFe,"A",{href:!0});var bSr=s(L8);zDe=r(bSr,"Data2VecTextConfig"),bSr.forEach(t),WDe=r(EFe," (Data2VecText model)"),EFe.forEach(t),QDe=i(T),lm=n(T,"LI",{});var yFe=s(lm);wH=n(yFe,"STRONG",{});var vSr=s(wH);HDe=r(vSr,"deberta"),vSr.forEach(t),UDe=r(yFe," \u2014 "),B8=n(yFe,"A",{href:!0});var TSr=s(B8);JDe=r(TSr,"DebertaConfig"),TSr.forEach(t),YDe=r(yFe," (DeBERTa model)"),yFe.forEach(t),KDe=i(T),im=n(T,"LI",{});var wFe=s(im);AH=n(wFe,"STRONG",{});var FSr=s(AH);ZDe=r(FSr,"deberta-v2"),FSr.forEach(t),eNe=r(wFe," \u2014 "),x8=n(wFe,"A",{href:!0});var CSr=s(x8);oNe=r(CSr,"DebertaV2Config"),CSr.forEach(t),rNe=r(wFe," (DeBERTa-v2 model)"),wFe.forEach(t),tNe=i(T),dm=n(T,"LI",{});var AFe=s(dm);LH=n(AFe,"STRONG",{});var MSr=s(LH);aNe=r(MSr,"decision_transformer"),MSr.forEach(t),nNe=r(AFe," \u2014 "),k8=n(AFe,"A",{href:!0});var ESr=s(k8);sNe=r(ESr,"DecisionTransformerConfig"),ESr.forEach(t),lNe=r(AFe," (Decision Transformer model)"),AFe.forEach(t),iNe=i(T),cm=n(T,"LI",{});var LFe=s(cm);BH=n(LFe,"STRONG",{});var ySr=s(BH);dNe=r(ySr,"deit"),ySr.forEach(t),cNe=r(LFe," \u2014 "),R8=n(LFe,"A",{href:!0});var wSr=s(R8);fNe=r(wSr,"DeiTConfig"),wSr.forEach(t),mNe=r(LFe," (DeiT model)"),LFe.forEach(t),gNe=i(T),fm=n(T,"LI",{});var BFe=s(fm);xH=n(BFe,"STRONG",{});var ASr=s(xH);hNe=r(ASr,"detr"),ASr.forEach(t),pNe=r(BFe," \u2014 "),S8=n(BFe,"A",{href:!0});var LSr=s(S8);_Ne=r(LSr,"DetrConfig"),LSr.forEach(t),uNe=r(BFe," (DETR model)"),BFe.forEach(t),bNe=i(T),mm=n(T,"LI",{});var xFe=s(mm);kH=n(xFe,"STRONG",{});var BSr=s(kH);vNe=r(BSr,"distilbert"),BSr.forEach(t),TNe=r(xFe," \u2014 "),P8=n(xFe,"A",{href:!0});var xSr=s(P8);FNe=r(xSr,"DistilBertConfig"),xSr.forEach(t),CNe=r(xFe," (DistilBERT model)"),xFe.forEach(t),MNe=i(T),gm=n(T,"LI",{});var kFe=s(gm);RH=n(kFe,"STRONG",{});var kSr=s(RH);ENe=r(kSr,"dpr"),kSr.forEach(t),yNe=r(kFe," \u2014 "),$8=n(kFe,"A",{href:!0});var RSr=s($8);wNe=r(RSr,"DPRConfig"),RSr.forEach(t),ANe=r(kFe," (DPR model)"),kFe.forEach(t),LNe=i(T),hm=n(T,"LI",{});var RFe=s(hm);SH=n(RFe,"STRONG",{});var SSr=s(SH);BNe=r(SSr,"dpt"),SSr.forEach(t),xNe=r(RFe," \u2014 "),I8=n(RFe,"A",{href:!0});var PSr=s(I8);kNe=r(PSr,"DPTConfig"),PSr.forEach(t),RNe=r(RFe," (DPT model)"),RFe.forEach(t),SNe=i(T),pm=n(T,"LI",{});var SFe=s(pm);PH=n(SFe,"STRONG",{});var $Sr=s(PH);PNe=r($Sr,"electra"),$Sr.forEach(t),$Ne=r(SFe," \u2014 "),D8=n(SFe,"A",{href:!0});var ISr=s(D8);INe=r(ISr,"ElectraConfig"),ISr.forEach(t),DNe=r(SFe," (ELECTRA model)"),SFe.forEach(t),NNe=i(T),_m=n(T,"LI",{});var PFe=s(_m);$H=n(PFe,"STRONG",{});var DSr=s($H);jNe=r(DSr,"encoder-decoder"),DSr.forEach(t),qNe=r(PFe," \u2014 "),N8=n(PFe,"A",{href:!0});var NSr=s(N8);GNe=r(NSr,"EncoderDecoderConfig"),NSr.forEach(t),ONe=r(PFe," (Encoder decoder model)"),PFe.forEach(t),XNe=i(T),um=n(T,"LI",{});var $Fe=s(um);IH=n($Fe,"STRONG",{});var jSr=s(IH);VNe=r(jSr,"flaubert"),jSr.forEach(t),zNe=r($Fe," \u2014 "),j8=n($Fe,"A",{href:!0});var qSr=s(j8);WNe=r(qSr,"FlaubertConfig"),qSr.forEach(t),QNe=r($Fe," (FlauBERT model)"),$Fe.forEach(t),HNe=i(T),bm=n(T,"LI",{});var IFe=s(bm);DH=n(IFe,"STRONG",{});var GSr=s(DH);UNe=r(GSr,"fnet"),GSr.forEach(t),JNe=r(IFe," \u2014 "),q8=n(IFe,"A",{href:!0});var OSr=s(q8);YNe=r(OSr,"FNetConfig"),OSr.forEach(t),KNe=r(IFe," (FNet model)"),IFe.forEach(t),ZNe=i(T),vm=n(T,"LI",{});var DFe=s(vm);NH=n(DFe,"STRONG",{});var XSr=s(NH);eje=r(XSr,"fsmt"),XSr.forEach(t),oje=r(DFe," \u2014 "),G8=n(DFe,"A",{href:!0});var VSr=s(G8);rje=r(VSr,"FSMTConfig"),VSr.forEach(t),tje=r(DFe," (FairSeq Machine-Translation model)"),DFe.forEach(t),aje=i(T),Tm=n(T,"LI",{});var NFe=s(Tm);jH=n(NFe,"STRONG",{});var zSr=s(jH);nje=r(zSr,"funnel"),zSr.forEach(t),sje=r(NFe," \u2014 "),O8=n(NFe,"A",{href:!0});var WSr=s(O8);lje=r(WSr,"FunnelConfig"),WSr.forEach(t),ije=r(NFe," (Funnel Transformer model)"),NFe.forEach(t),dje=i(T),Fm=n(T,"LI",{});var jFe=s(Fm);qH=n(jFe,"STRONG",{});var QSr=s(qH);cje=r(QSr,"glpn"),QSr.forEach(t),fje=r(jFe," \u2014 "),X8=n(jFe,"A",{href:!0});var HSr=s(X8);mje=r(HSr,"GLPNConfig"),HSr.forEach(t),gje=r(jFe," (GLPN model)"),jFe.forEach(t),hje=i(T),Cm=n(T,"LI",{});var qFe=s(Cm);GH=n(qFe,"STRONG",{});var USr=s(GH);pje=r(USr,"gpt2"),USr.forEach(t),_je=r(qFe," \u2014 "),V8=n(qFe,"A",{href:!0});var JSr=s(V8);uje=r(JSr,"GPT2Config"),JSr.forEach(t),bje=r(qFe," (OpenAI GPT-2 model)"),qFe.forEach(t),vje=i(T),Mm=n(T,"LI",{});var GFe=s(Mm);OH=n(GFe,"STRONG",{});var YSr=s(OH);Tje=r(YSr,"gpt_neo"),YSr.forEach(t),Fje=r(GFe," \u2014 "),z8=n(GFe,"A",{href:!0});var KSr=s(z8);Cje=r(KSr,"GPTNeoConfig"),KSr.forEach(t),Mje=r(GFe," (GPT Neo model)"),GFe.forEach(t),Eje=i(T),Em=n(T,"LI",{});var OFe=s(Em);XH=n(OFe,"STRONG",{});var ZSr=s(XH);yje=r(ZSr,"gptj"),ZSr.forEach(t),wje=r(OFe," \u2014 "),W8=n(OFe,"A",{href:!0});var ePr=s(W8);Aje=r(ePr,"GPTJConfig"),ePr.forEach(t),Lje=r(OFe," (GPT-J model)"),OFe.forEach(t),Bje=i(T),ym=n(T,"LI",{});var XFe=s(ym);VH=n(XFe,"STRONG",{});var oPr=s(VH);xje=r(oPr,"hubert"),oPr.forEach(t),kje=r(XFe," \u2014 "),Q8=n(XFe,"A",{href:!0});var rPr=s(Q8);Rje=r(rPr,"HubertConfig"),rPr.forEach(t),Sje=r(XFe," (Hubert model)"),XFe.forEach(t),Pje=i(T),wm=n(T,"LI",{});var VFe=s(wm);zH=n(VFe,"STRONG",{});var tPr=s(zH);$je=r(tPr,"ibert"),tPr.forEach(t),Ije=r(VFe," \u2014 "),H8=n(VFe,"A",{href:!0});var aPr=s(H8);Dje=r(aPr,"IBertConfig"),aPr.forEach(t),Nje=r(VFe," (I-BERT model)"),VFe.forEach(t),jje=i(T),Am=n(T,"LI",{});var zFe=s(Am);WH=n(zFe,"STRONG",{});var nPr=s(WH);qje=r(nPr,"imagegpt"),nPr.forEach(t),Gje=r(zFe," \u2014 "),U8=n(zFe,"A",{href:!0});var sPr=s(U8);Oje=r(sPr,"ImageGPTConfig"),sPr.forEach(t),Xje=r(zFe," (ImageGPT model)"),zFe.forEach(t),Vje=i(T),Lm=n(T,"LI",{});var WFe=s(Lm);QH=n(WFe,"STRONG",{});var lPr=s(QH);zje=r(lPr,"layoutlm"),lPr.forEach(t),Wje=r(WFe," \u2014 "),J8=n(WFe,"A",{href:!0});var iPr=s(J8);Qje=r(iPr,"LayoutLMConfig"),iPr.forEach(t),Hje=r(WFe," (LayoutLM model)"),WFe.forEach(t),Uje=i(T),Bm=n(T,"LI",{});var QFe=s(Bm);HH=n(QFe,"STRONG",{});var dPr=s(HH);Jje=r(dPr,"layoutlmv2"),dPr.forEach(t),Yje=r(QFe," \u2014 "),Y8=n(QFe,"A",{href:!0});var cPr=s(Y8);Kje=r(cPr,"LayoutLMv2Config"),cPr.forEach(t),Zje=r(QFe," (LayoutLMv2 model)"),QFe.forEach(t),eqe=i(T),xm=n(T,"LI",{});var HFe=s(xm);UH=n(HFe,"STRONG",{});var fPr=s(UH);oqe=r(fPr,"led"),fPr.forEach(t),rqe=r(HFe," \u2014 "),K8=n(HFe,"A",{href:!0});var mPr=s(K8);tqe=r(mPr,"LEDConfig"),mPr.forEach(t),aqe=r(HFe," (LED model)"),HFe.forEach(t),nqe=i(T),km=n(T,"LI",{});var UFe=s(km);JH=n(UFe,"STRONG",{});var gPr=s(JH);sqe=r(gPr,"longformer"),gPr.forEach(t),lqe=r(UFe," \u2014 "),Z8=n(UFe,"A",{href:!0});var hPr=s(Z8);iqe=r(hPr,"LongformerConfig"),hPr.forEach(t),dqe=r(UFe," (Longformer model)"),UFe.forEach(t),cqe=i(T),Rm=n(T,"LI",{});var JFe=s(Rm);YH=n(JFe,"STRONG",{});var pPr=s(YH);fqe=r(pPr,"luke"),pPr.forEach(t),mqe=r(JFe," \u2014 "),eB=n(JFe,"A",{href:!0});var _Pr=s(eB);gqe=r(_Pr,"LukeConfig"),_Pr.forEach(t),hqe=r(JFe," (LUKE model)"),JFe.forEach(t),pqe=i(T),Sm=n(T,"LI",{});var YFe=s(Sm);KH=n(YFe,"STRONG",{});var uPr=s(KH);_qe=r(uPr,"lxmert"),uPr.forEach(t),uqe=r(YFe," \u2014 "),oB=n(YFe,"A",{href:!0});var bPr=s(oB);bqe=r(bPr,"LxmertConfig"),bPr.forEach(t),vqe=r(YFe," (LXMERT model)"),YFe.forEach(t),Tqe=i(T),Pm=n(T,"LI",{});var KFe=s(Pm);ZH=n(KFe,"STRONG",{});var vPr=s(ZH);Fqe=r(vPr,"m2m_100"),vPr.forEach(t),Cqe=r(KFe," \u2014 "),rB=n(KFe,"A",{href:!0});var TPr=s(rB);Mqe=r(TPr,"M2M100Config"),TPr.forEach(t),Eqe=r(KFe," (M2M100 model)"),KFe.forEach(t),yqe=i(T),$m=n(T,"LI",{});var ZFe=s($m);eU=n(ZFe,"STRONG",{});var FPr=s(eU);wqe=r(FPr,"marian"),FPr.forEach(t),Aqe=r(ZFe," \u2014 "),tB=n(ZFe,"A",{href:!0});var CPr=s(tB);Lqe=r(CPr,"MarianConfig"),CPr.forEach(t),Bqe=r(ZFe," (Marian model)"),ZFe.forEach(t),xqe=i(T),Im=n(T,"LI",{});var e9e=s(Im);oU=n(e9e,"STRONG",{});var MPr=s(oU);kqe=r(MPr,"maskformer"),MPr.forEach(t),Rqe=r(e9e," \u2014 "),aB=n(e9e,"A",{href:!0});var EPr=s(aB);Sqe=r(EPr,"MaskFormerConfig"),EPr.forEach(t),Pqe=r(e9e," (MaskFormer model)"),e9e.forEach(t),$qe=i(T),Dm=n(T,"LI",{});var o9e=s(Dm);rU=n(o9e,"STRONG",{});var yPr=s(rU);Iqe=r(yPr,"mbart"),yPr.forEach(t),Dqe=r(o9e," \u2014 "),nB=n(o9e,"A",{href:!0});var wPr=s(nB);Nqe=r(wPr,"MBartConfig"),wPr.forEach(t),jqe=r(o9e," (mBART model)"),o9e.forEach(t),qqe=i(T),Nm=n(T,"LI",{});var r9e=s(Nm);tU=n(r9e,"STRONG",{});var APr=s(tU);Gqe=r(APr,"megatron-bert"),APr.forEach(t),Oqe=r(r9e," \u2014 "),sB=n(r9e,"A",{href:!0});var LPr=s(sB);Xqe=r(LPr,"MegatronBertConfig"),LPr.forEach(t),Vqe=r(r9e," (MegatronBert model)"),r9e.forEach(t),zqe=i(T),jm=n(T,"LI",{});var t9e=s(jm);aU=n(t9e,"STRONG",{});var BPr=s(aU);Wqe=r(BPr,"mobilebert"),BPr.forEach(t),Qqe=r(t9e," \u2014 "),lB=n(t9e,"A",{href:!0});var xPr=s(lB);Hqe=r(xPr,"MobileBertConfig"),xPr.forEach(t),Uqe=r(t9e," (MobileBERT model)"),t9e.forEach(t),Jqe=i(T),qm=n(T,"LI",{});var a9e=s(qm);nU=n(a9e,"STRONG",{});var kPr=s(nU);Yqe=r(kPr,"mpnet"),kPr.forEach(t),Kqe=r(a9e," \u2014 "),iB=n(a9e,"A",{href:!0});var RPr=s(iB);Zqe=r(RPr,"MPNetConfig"),RPr.forEach(t),eGe=r(a9e," (MPNet model)"),a9e.forEach(t),oGe=i(T),Gm=n(T,"LI",{});var n9e=s(Gm);sU=n(n9e,"STRONG",{});var SPr=s(sU);rGe=r(SPr,"mt5"),SPr.forEach(t),tGe=r(n9e," \u2014 "),dB=n(n9e,"A",{href:!0});var PPr=s(dB);aGe=r(PPr,"MT5Config"),PPr.forEach(t),nGe=r(n9e," (mT5 model)"),n9e.forEach(t),sGe=i(T),Om=n(T,"LI",{});var s9e=s(Om);lU=n(s9e,"STRONG",{});var $Pr=s(lU);lGe=r($Pr,"nystromformer"),$Pr.forEach(t),iGe=r(s9e," \u2014 "),cB=n(s9e,"A",{href:!0});var IPr=s(cB);dGe=r(IPr,"NystromformerConfig"),IPr.forEach(t),cGe=r(s9e," (Nystromformer model)"),s9e.forEach(t),fGe=i(T),Xm=n(T,"LI",{});var l9e=s(Xm);iU=n(l9e,"STRONG",{});var DPr=s(iU);mGe=r(DPr,"openai-gpt"),DPr.forEach(t),gGe=r(l9e," \u2014 "),fB=n(l9e,"A",{href:!0});var NPr=s(fB);hGe=r(NPr,"OpenAIGPTConfig"),NPr.forEach(t),pGe=r(l9e," (OpenAI GPT model)"),l9e.forEach(t),_Ge=i(T),Vm=n(T,"LI",{});var i9e=s(Vm);dU=n(i9e,"STRONG",{});var jPr=s(dU);uGe=r(jPr,"pegasus"),jPr.forEach(t),bGe=r(i9e," \u2014 "),mB=n(i9e,"A",{href:!0});var qPr=s(mB);vGe=r(qPr,"PegasusConfig"),qPr.forEach(t),TGe=r(i9e," (Pegasus model)"),i9e.forEach(t),FGe=i(T),zm=n(T,"LI",{});var d9e=s(zm);cU=n(d9e,"STRONG",{});var GPr=s(cU);CGe=r(GPr,"perceiver"),GPr.forEach(t),MGe=r(d9e," \u2014 "),gB=n(d9e,"A",{href:!0});var OPr=s(gB);EGe=r(OPr,"PerceiverConfig"),OPr.forEach(t),yGe=r(d9e," (Perceiver model)"),d9e.forEach(t),wGe=i(T),Wm=n(T,"LI",{});var c9e=s(Wm);fU=n(c9e,"STRONG",{});var XPr=s(fU);AGe=r(XPr,"plbart"),XPr.forEach(t),LGe=r(c9e," \u2014 "),hB=n(c9e,"A",{href:!0});var VPr=s(hB);BGe=r(VPr,"PLBartConfig"),VPr.forEach(t),xGe=r(c9e," (PLBart model)"),c9e.forEach(t),kGe=i(T),Qm=n(T,"LI",{});var f9e=s(Qm);mU=n(f9e,"STRONG",{});var zPr=s(mU);RGe=r(zPr,"poolformer"),zPr.forEach(t),SGe=r(f9e," \u2014 "),pB=n(f9e,"A",{href:!0});var WPr=s(pB);PGe=r(WPr,"PoolFormerConfig"),WPr.forEach(t),$Ge=r(f9e," (PoolFormer model)"),f9e.forEach(t),IGe=i(T),Hm=n(T,"LI",{});var m9e=s(Hm);gU=n(m9e,"STRONG",{});var QPr=s(gU);DGe=r(QPr,"prophetnet"),QPr.forEach(t),NGe=r(m9e," \u2014 "),_B=n(m9e,"A",{href:!0});var HPr=s(_B);jGe=r(HPr,"ProphetNetConfig"),HPr.forEach(t),qGe=r(m9e," (ProphetNet model)"),m9e.forEach(t),GGe=i(T),Um=n(T,"LI",{});var g9e=s(Um);hU=n(g9e,"STRONG",{});var UPr=s(hU);OGe=r(UPr,"qdqbert"),UPr.forEach(t),XGe=r(g9e," \u2014 "),uB=n(g9e,"A",{href:!0});var JPr=s(uB);VGe=r(JPr,"QDQBertConfig"),JPr.forEach(t),zGe=r(g9e," (QDQBert model)"),g9e.forEach(t),WGe=i(T),Jm=n(T,"LI",{});var h9e=s(Jm);pU=n(h9e,"STRONG",{});var YPr=s(pU);QGe=r(YPr,"rag"),YPr.forEach(t),HGe=r(h9e," \u2014 "),bB=n(h9e,"A",{href:!0});var KPr=s(bB);UGe=r(KPr,"RagConfig"),KPr.forEach(t),JGe=r(h9e," (RAG model)"),h9e.forEach(t),YGe=i(T),Ym=n(T,"LI",{});var p9e=s(Ym);_U=n(p9e,"STRONG",{});var ZPr=s(_U);KGe=r(ZPr,"realm"),ZPr.forEach(t),ZGe=r(p9e," \u2014 "),vB=n(p9e,"A",{href:!0});var e$r=s(vB);eOe=r(e$r,"RealmConfig"),e$r.forEach(t),oOe=r(p9e," (Realm model)"),p9e.forEach(t),rOe=i(T),Km=n(T,"LI",{});var _9e=s(Km);uU=n(_9e,"STRONG",{});var o$r=s(uU);tOe=r(o$r,"reformer"),o$r.forEach(t),aOe=r(_9e," \u2014 "),TB=n(_9e,"A",{href:!0});var r$r=s(TB);nOe=r(r$r,"ReformerConfig"),r$r.forEach(t),sOe=r(_9e," (Reformer model)"),_9e.forEach(t),lOe=i(T),Zm=n(T,"LI",{});var u9e=s(Zm);bU=n(u9e,"STRONG",{});var t$r=s(bU);iOe=r(t$r,"rembert"),t$r.forEach(t),dOe=r(u9e," \u2014 "),FB=n(u9e,"A",{href:!0});var a$r=s(FB);cOe=r(a$r,"RemBertConfig"),a$r.forEach(t),fOe=r(u9e," (RemBERT model)"),u9e.forEach(t),mOe=i(T),eg=n(T,"LI",{});var b9e=s(eg);vU=n(b9e,"STRONG",{});var n$r=s(vU);gOe=r(n$r,"resnet"),n$r.forEach(t),hOe=r(b9e," \u2014 "),CB=n(b9e,"A",{href:!0});var s$r=s(CB);pOe=r(s$r,"ResNetConfig"),s$r.forEach(t),_Oe=r(b9e," (ResNet model)"),b9e.forEach(t),uOe=i(T),og=n(T,"LI",{});var v9e=s(og);TU=n(v9e,"STRONG",{});var l$r=s(TU);bOe=r(l$r,"retribert"),l$r.forEach(t),vOe=r(v9e," \u2014 "),MB=n(v9e,"A",{href:!0});var i$r=s(MB);TOe=r(i$r,"RetriBertConfig"),i$r.forEach(t),FOe=r(v9e," (RetriBERT model)"),v9e.forEach(t),COe=i(T),rg=n(T,"LI",{});var T9e=s(rg);FU=n(T9e,"STRONG",{});var d$r=s(FU);MOe=r(d$r,"roberta"),d$r.forEach(t),EOe=r(T9e," \u2014 "),EB=n(T9e,"A",{href:!0});var c$r=s(EB);yOe=r(c$r,"RobertaConfig"),c$r.forEach(t),wOe=r(T9e," (RoBERTa model)"),T9e.forEach(t),AOe=i(T),tg=n(T,"LI",{});var F9e=s(tg);CU=n(F9e,"STRONG",{});var f$r=s(CU);LOe=r(f$r,"roformer"),f$r.forEach(t),BOe=r(F9e," \u2014 "),yB=n(F9e,"A",{href:!0});var m$r=s(yB);xOe=r(m$r,"RoFormerConfig"),m$r.forEach(t),kOe=r(F9e," (RoFormer model)"),F9e.forEach(t),ROe=i(T),ag=n(T,"LI",{});var C9e=s(ag);MU=n(C9e,"STRONG",{});var g$r=s(MU);SOe=r(g$r,"segformer"),g$r.forEach(t),POe=r(C9e," \u2014 "),wB=n(C9e,"A",{href:!0});var h$r=s(wB);$Oe=r(h$r,"SegformerConfig"),h$r.forEach(t),IOe=r(C9e," (SegFormer model)"),C9e.forEach(t),DOe=i(T),ng=n(T,"LI",{});var M9e=s(ng);EU=n(M9e,"STRONG",{});var p$r=s(EU);NOe=r(p$r,"sew"),p$r.forEach(t),jOe=r(M9e," \u2014 "),AB=n(M9e,"A",{href:!0});var _$r=s(AB);qOe=r(_$r,"SEWConfig"),_$r.forEach(t),GOe=r(M9e," (SEW model)"),M9e.forEach(t),OOe=i(T),sg=n(T,"LI",{});var E9e=s(sg);yU=n(E9e,"STRONG",{});var u$r=s(yU);XOe=r(u$r,"sew-d"),u$r.forEach(t),VOe=r(E9e," \u2014 "),LB=n(E9e,"A",{href:!0});var b$r=s(LB);zOe=r(b$r,"SEWDConfig"),b$r.forEach(t),WOe=r(E9e," (SEW-D model)"),E9e.forEach(t),QOe=i(T),lg=n(T,"LI",{});var y9e=s(lg);wU=n(y9e,"STRONG",{});var v$r=s(wU);HOe=r(v$r,"speech-encoder-decoder"),v$r.forEach(t),UOe=r(y9e," \u2014 "),BB=n(y9e,"A",{href:!0});var T$r=s(BB);JOe=r(T$r,"SpeechEncoderDecoderConfig"),T$r.forEach(t),YOe=r(y9e," (Speech Encoder decoder model)"),y9e.forEach(t),KOe=i(T),ig=n(T,"LI",{});var w9e=s(ig);AU=n(w9e,"STRONG",{});var F$r=s(AU);ZOe=r(F$r,"speech_to_text"),F$r.forEach(t),eXe=r(w9e," \u2014 "),xB=n(w9e,"A",{href:!0});var C$r=s(xB);oXe=r(C$r,"Speech2TextConfig"),C$r.forEach(t),rXe=r(w9e," (Speech2Text model)"),w9e.forEach(t),tXe=i(T),dg=n(T,"LI",{});var A9e=s(dg);LU=n(A9e,"STRONG",{});var M$r=s(LU);aXe=r(M$r,"speech_to_text_2"),M$r.forEach(t),nXe=r(A9e," \u2014 "),kB=n(A9e,"A",{href:!0});var E$r=s(kB);sXe=r(E$r,"Speech2Text2Config"),E$r.forEach(t),lXe=r(A9e," (Speech2Text2 model)"),A9e.forEach(t),iXe=i(T),cg=n(T,"LI",{});var L9e=s(cg);BU=n(L9e,"STRONG",{});var y$r=s(BU);dXe=r(y$r,"splinter"),y$r.forEach(t),cXe=r(L9e," \u2014 "),RB=n(L9e,"A",{href:!0});var w$r=s(RB);fXe=r(w$r,"SplinterConfig"),w$r.forEach(t),mXe=r(L9e," (Splinter model)"),L9e.forEach(t),gXe=i(T),fg=n(T,"LI",{});var B9e=s(fg);xU=n(B9e,"STRONG",{});var A$r=s(xU);hXe=r(A$r,"squeezebert"),A$r.forEach(t),pXe=r(B9e," \u2014 "),SB=n(B9e,"A",{href:!0});var L$r=s(SB);_Xe=r(L$r,"SqueezeBertConfig"),L$r.forEach(t),uXe=r(B9e," (SqueezeBERT model)"),B9e.forEach(t),bXe=i(T),mg=n(T,"LI",{});var x9e=s(mg);kU=n(x9e,"STRONG",{});var B$r=s(kU);vXe=r(B$r,"swin"),B$r.forEach(t),TXe=r(x9e," \u2014 "),PB=n(x9e,"A",{href:!0});var x$r=s(PB);FXe=r(x$r,"SwinConfig"),x$r.forEach(t),CXe=r(x9e," (Swin model)"),x9e.forEach(t),MXe=i(T),gg=n(T,"LI",{});var k9e=s(gg);RU=n(k9e,"STRONG",{});var k$r=s(RU);EXe=r(k$r,"t5"),k$r.forEach(t),yXe=r(k9e," \u2014 "),$B=n(k9e,"A",{href:!0});var R$r=s($B);wXe=r(R$r,"T5Config"),R$r.forEach(t),AXe=r(k9e," (T5 model)"),k9e.forEach(t),LXe=i(T),hg=n(T,"LI",{});var R9e=s(hg);SU=n(R9e,"STRONG",{});var S$r=s(SU);BXe=r(S$r,"tapas"),S$r.forEach(t),xXe=r(R9e," \u2014 "),IB=n(R9e,"A",{href:!0});var P$r=s(IB);kXe=r(P$r,"TapasConfig"),P$r.forEach(t),RXe=r(R9e," (TAPAS model)"),R9e.forEach(t),SXe=i(T),pg=n(T,"LI",{});var S9e=s(pg);PU=n(S9e,"STRONG",{});var $$r=s(PU);PXe=r($$r,"transfo-xl"),$$r.forEach(t),$Xe=r(S9e," \u2014 "),DB=n(S9e,"A",{href:!0});var I$r=s(DB);IXe=r(I$r,"TransfoXLConfig"),I$r.forEach(t),DXe=r(S9e," (Transformer-XL model)"),S9e.forEach(t),NXe=i(T),_g=n(T,"LI",{});var P9e=s(_g);$U=n(P9e,"STRONG",{});var D$r=s($U);jXe=r(D$r,"trocr"),D$r.forEach(t),qXe=r(P9e," \u2014 "),NB=n(P9e,"A",{href:!0});var N$r=s(NB);GXe=r(N$r,"TrOCRConfig"),N$r.forEach(t),OXe=r(P9e," (TrOCR model)"),P9e.forEach(t),XXe=i(T),ug=n(T,"LI",{});var $9e=s(ug);IU=n($9e,"STRONG",{});var j$r=s(IU);VXe=r(j$r,"unispeech"),j$r.forEach(t),zXe=r($9e," \u2014 "),jB=n($9e,"A",{href:!0});var q$r=s(jB);WXe=r(q$r,"UniSpeechConfig"),q$r.forEach(t),QXe=r($9e," (UniSpeech model)"),$9e.forEach(t),HXe=i(T),bg=n(T,"LI",{});var I9e=s(bg);DU=n(I9e,"STRONG",{});var G$r=s(DU);UXe=r(G$r,"unispeech-sat"),G$r.forEach(t),JXe=r(I9e," \u2014 "),qB=n(I9e,"A",{href:!0});var O$r=s(qB);YXe=r(O$r,"UniSpeechSatConfig"),O$r.forEach(t),KXe=r(I9e," (UniSpeechSat model)"),I9e.forEach(t),ZXe=i(T),vg=n(T,"LI",{});var D9e=s(vg);NU=n(D9e,"STRONG",{});var X$r=s(NU);eVe=r(X$r,"van"),X$r.forEach(t),oVe=r(D9e," \u2014 "),GB=n(D9e,"A",{href:!0});var V$r=s(GB);rVe=r(V$r,"VanConfig"),V$r.forEach(t),tVe=r(D9e," (VAN model)"),D9e.forEach(t),aVe=i(T),Tg=n(T,"LI",{});var N9e=s(Tg);jU=n(N9e,"STRONG",{});var z$r=s(jU);nVe=r(z$r,"vilt"),z$r.forEach(t),sVe=r(N9e," \u2014 "),OB=n(N9e,"A",{href:!0});var W$r=s(OB);lVe=r(W$r,"ViltConfig"),W$r.forEach(t),iVe=r(N9e," (ViLT model)"),N9e.forEach(t),dVe=i(T),Fg=n(T,"LI",{});var j9e=s(Fg);qU=n(j9e,"STRONG",{});var Q$r=s(qU);cVe=r(Q$r,"vision-encoder-decoder"),Q$r.forEach(t),fVe=r(j9e," \u2014 "),XB=n(j9e,"A",{href:!0});var H$r=s(XB);mVe=r(H$r,"VisionEncoderDecoderConfig"),H$r.forEach(t),gVe=r(j9e," (Vision Encoder decoder model)"),j9e.forEach(t),hVe=i(T),Cg=n(T,"LI",{});var q9e=s(Cg);GU=n(q9e,"STRONG",{});var U$r=s(GU);pVe=r(U$r,"vision-text-dual-encoder"),U$r.forEach(t),_Ve=r(q9e," \u2014 "),VB=n(q9e,"A",{href:!0});var J$r=s(VB);uVe=r(J$r,"VisionTextDualEncoderConfig"),J$r.forEach(t),bVe=r(q9e," (VisionTextDualEncoder model)"),q9e.forEach(t),vVe=i(T),Mg=n(T,"LI",{});var G9e=s(Mg);OU=n(G9e,"STRONG",{});var Y$r=s(OU);TVe=r(Y$r,"visual_bert"),Y$r.forEach(t),FVe=r(G9e," \u2014 "),zB=n(G9e,"A",{href:!0});var K$r=s(zB);CVe=r(K$r,"VisualBertConfig"),K$r.forEach(t),MVe=r(G9e," (VisualBert model)"),G9e.forEach(t),EVe=i(T),Eg=n(T,"LI",{});var O9e=s(Eg);XU=n(O9e,"STRONG",{});var Z$r=s(XU);yVe=r(Z$r,"vit"),Z$r.forEach(t),wVe=r(O9e," \u2014 "),WB=n(O9e,"A",{href:!0});var eIr=s(WB);AVe=r(eIr,"ViTConfig"),eIr.forEach(t),LVe=r(O9e," (ViT model)"),O9e.forEach(t),BVe=i(T),yg=n(T,"LI",{});var X9e=s(yg);VU=n(X9e,"STRONG",{});var oIr=s(VU);xVe=r(oIr,"vit_mae"),oIr.forEach(t),kVe=r(X9e," \u2014 "),QB=n(X9e,"A",{href:!0});var rIr=s(QB);RVe=r(rIr,"ViTMAEConfig"),rIr.forEach(t),SVe=r(X9e," (ViTMAE model)"),X9e.forEach(t),PVe=i(T),wg=n(T,"LI",{});var V9e=s(wg);zU=n(V9e,"STRONG",{});var tIr=s(zU);$Ve=r(tIr,"wav2vec2"),tIr.forEach(t),IVe=r(V9e," \u2014 "),HB=n(V9e,"A",{href:!0});var aIr=s(HB);DVe=r(aIr,"Wav2Vec2Config"),aIr.forEach(t),NVe=r(V9e," (Wav2Vec2 model)"),V9e.forEach(t),jVe=i(T),Ag=n(T,"LI",{});var z9e=s(Ag);WU=n(z9e,"STRONG",{});var nIr=s(WU);qVe=r(nIr,"wavlm"),nIr.forEach(t),GVe=r(z9e," \u2014 "),UB=n(z9e,"A",{href:!0});var sIr=s(UB);OVe=r(sIr,"WavLMConfig"),sIr.forEach(t),XVe=r(z9e," (WavLM model)"),z9e.forEach(t),VVe=i(T),Lg=n(T,"LI",{});var W9e=s(Lg);QU=n(W9e,"STRONG",{});var lIr=s(QU);zVe=r(lIr,"xglm"),lIr.forEach(t),WVe=r(W9e," \u2014 "),JB=n(W9e,"A",{href:!0});var iIr=s(JB);QVe=r(iIr,"XGLMConfig"),iIr.forEach(t),HVe=r(W9e," (XGLM model)"),W9e.forEach(t),UVe=i(T),Bg=n(T,"LI",{});var Q9e=s(Bg);HU=n(Q9e,"STRONG",{});var dIr=s(HU);JVe=r(dIr,"xlm"),dIr.forEach(t),YVe=r(Q9e," \u2014 "),YB=n(Q9e,"A",{href:!0});var cIr=s(YB);KVe=r(cIr,"XLMConfig"),cIr.forEach(t),ZVe=r(Q9e," (XLM model)"),Q9e.forEach(t),eze=i(T),xg=n(T,"LI",{});var H9e=s(xg);UU=n(H9e,"STRONG",{});var fIr=s(UU);oze=r(fIr,"xlm-prophetnet"),fIr.forEach(t),rze=r(H9e," \u2014 "),KB=n(H9e,"A",{href:!0});var mIr=s(KB);tze=r(mIr,"XLMProphetNetConfig"),mIr.forEach(t),aze=r(H9e," (XLMProphetNet model)"),H9e.forEach(t),nze=i(T),kg=n(T,"LI",{});var U9e=s(kg);JU=n(U9e,"STRONG",{});var gIr=s(JU);sze=r(gIr,"xlm-roberta"),gIr.forEach(t),lze=r(U9e," \u2014 "),ZB=n(U9e,"A",{href:!0});var hIr=s(ZB);ize=r(hIr,"XLMRobertaConfig"),hIr.forEach(t),dze=r(U9e," (XLM-RoBERTa model)"),U9e.forEach(t),cze=i(T),Rg=n(T,"LI",{});var J9e=s(Rg);YU=n(J9e,"STRONG",{});var pIr=s(YU);fze=r(pIr,"xlm-roberta-xl"),pIr.forEach(t),mze=r(J9e," \u2014 "),ex=n(J9e,"A",{href:!0});var _Ir=s(ex);gze=r(_Ir,"XLMRobertaXLConfig"),_Ir.forEach(t),hze=r(J9e," (XLM-RoBERTa-XL model)"),J9e.forEach(t),pze=i(T),Sg=n(T,"LI",{});var Y9e=s(Sg);KU=n(Y9e,"STRONG",{});var uIr=s(KU);_ze=r(uIr,"xlnet"),uIr.forEach(t),uze=r(Y9e," \u2014 "),ox=n(Y9e,"A",{href:!0});var bIr=s(ox);bze=r(bIr,"XLNetConfig"),bIr.forEach(t),vze=r(Y9e," (XLNet model)"),Y9e.forEach(t),Tze=i(T),Pg=n(T,"LI",{});var K9e=s(Pg);ZU=n(K9e,"STRONG",{});var vIr=s(ZU);Fze=r(vIr,"yoso"),vIr.forEach(t),Cze=r(K9e," \u2014 "),rx=n(K9e,"A",{href:!0});var TIr=s(rx);Mze=r(TIr,"YosoConfig"),TIr.forEach(t),Eze=r(K9e," (YOSO model)"),K9e.forEach(t),T.forEach(t),yze=i(ga),eJ=n(ga,"P",{});var FIr=s(eJ);wze=r(FIr,"Examples:"),FIr.forEach(t),Aze=i(ga),m(EE.$$.fragment,ga),ga.forEach(t),Lze=i(Os),$g=n(Os,"DIV",{class:!0});var NSe=s($g);m(yE.$$.fragment,NSe),Bze=i(NSe),oJ=n(NSe,"P",{});var CIr=s(oJ);xze=r(CIr,"Register a new configuration for this class."),CIr.forEach(t),NSe.forEach(t),Os.forEach(t),Ike=i(c),Wi=n(c,"H2",{class:!0});var jSe=s(Wi);Ig=n(jSe,"A",{id:!0,class:!0,href:!0});var MIr=s(Ig);rJ=n(MIr,"SPAN",{});var EIr=s(rJ);m(wE.$$.fragment,EIr),EIr.forEach(t),MIr.forEach(t),kze=i(jSe),tJ=n(jSe,"SPAN",{});var yIr=s(tJ);Rze=r(yIr,"AutoTokenizer"),yIr.forEach(t),jSe.forEach(t),Dke=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);m(AE.$$.fragment,Xs),Sze=i(Xs),LE=n(Xs,"P",{});var qSe=s(LE);Pze=r(qSe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tx=n(qSe,"A",{href:!0});var wIr=s(tx);$ze=r(wIr,"AutoTokenizer.from_pretrained()"),wIr.forEach(t),Ize=r(qSe," class method."),qSe.forEach(t),Dze=i(Xs),BE=n(Xs,"P",{});var GSe=s(BE);Nze=r(GSe,"This class cannot be instantiated directly using "),aJ=n(GSe,"CODE",{});var AIr=s(aJ);jze=r(AIr,"__init__()"),AIr.forEach(t),qze=r(GSe," (throws an error)."),GSe.forEach(t),Gze=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(xE.$$.fragment,ha),Oze=i(ha),nJ=n(ha,"P",{});var LIr=s(nJ);Xze=r(LIr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),LIr.forEach(t),Vze=i(ha),Oa=n(ha,"P",{});var p4=s(Oa);zze=r(p4,"The tokenizer class to instantiate is selected based on the "),sJ=n(p4,"CODE",{});var BIr=s(sJ);Wze=r(BIr,"model_type"),BIr.forEach(t),Qze=r(p4,` property of the config object (either
passed as an argument or loaded from `),lJ=n(p4,"CODE",{});var xIr=s(lJ);Hze=r(xIr,"pretrained_model_name_or_path"),xIr.forEach(t),Uze=r(p4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iJ=n(p4,"CODE",{});var kIr=s(iJ);Jze=r(kIr,"pretrained_model_name_or_path"),kIr.forEach(t),Yze=r(p4,":"),p4.forEach(t),Kze=i(ha),E=n(ha,"UL",{});var y=s(E);Wn=n(y,"LI",{});var d7=s(Wn);dJ=n(d7,"STRONG",{});var RIr=s(dJ);Zze=r(RIr,"albert"),RIr.forEach(t),eWe=r(d7," \u2014 "),ax=n(d7,"A",{href:!0});var SIr=s(ax);oWe=r(SIr,"AlbertTokenizer"),SIr.forEach(t),rWe=r(d7," or "),nx=n(d7,"A",{href:!0});var PIr=s(nx);tWe=r(PIr,"AlbertTokenizerFast"),PIr.forEach(t),aWe=r(d7," (ALBERT model)"),d7.forEach(t),nWe=i(y),Qn=n(y,"LI",{});var c7=s(Qn);cJ=n(c7,"STRONG",{});var $Ir=s(cJ);sWe=r($Ir,"bart"),$Ir.forEach(t),lWe=r(c7," \u2014 "),sx=n(c7,"A",{href:!0});var IIr=s(sx);iWe=r(IIr,"BartTokenizer"),IIr.forEach(t),dWe=r(c7," or "),lx=n(c7,"A",{href:!0});var DIr=s(lx);cWe=r(DIr,"BartTokenizerFast"),DIr.forEach(t),fWe=r(c7," (BART model)"),c7.forEach(t),mWe=i(y),Hn=n(y,"LI",{});var f7=s(Hn);fJ=n(f7,"STRONG",{});var NIr=s(fJ);gWe=r(NIr,"barthez"),NIr.forEach(t),hWe=r(f7," \u2014 "),ix=n(f7,"A",{href:!0});var jIr=s(ix);pWe=r(jIr,"BarthezTokenizer"),jIr.forEach(t),_We=r(f7," or "),dx=n(f7,"A",{href:!0});var qIr=s(dx);uWe=r(qIr,"BarthezTokenizerFast"),qIr.forEach(t),bWe=r(f7," (BARThez model)"),f7.forEach(t),vWe=i(y),Dg=n(y,"LI",{});var Z9e=s(Dg);mJ=n(Z9e,"STRONG",{});var GIr=s(mJ);TWe=r(GIr,"bartpho"),GIr.forEach(t),FWe=r(Z9e," \u2014 "),cx=n(Z9e,"A",{href:!0});var OIr=s(cx);CWe=r(OIr,"BartphoTokenizer"),OIr.forEach(t),MWe=r(Z9e," (BARTpho model)"),Z9e.forEach(t),EWe=i(y),Un=n(y,"LI",{});var m7=s(Un);gJ=n(m7,"STRONG",{});var XIr=s(gJ);yWe=r(XIr,"bert"),XIr.forEach(t),wWe=r(m7," \u2014 "),fx=n(m7,"A",{href:!0});var VIr=s(fx);AWe=r(VIr,"BertTokenizer"),VIr.forEach(t),LWe=r(m7," or "),mx=n(m7,"A",{href:!0});var zIr=s(mx);BWe=r(zIr,"BertTokenizerFast"),zIr.forEach(t),xWe=r(m7," (BERT model)"),m7.forEach(t),kWe=i(y),Ng=n(y,"LI",{});var eCe=s(Ng);hJ=n(eCe,"STRONG",{});var WIr=s(hJ);RWe=r(WIr,"bert-generation"),WIr.forEach(t),SWe=r(eCe," \u2014 "),gx=n(eCe,"A",{href:!0});var QIr=s(gx);PWe=r(QIr,"BertGenerationTokenizer"),QIr.forEach(t),$We=r(eCe," (Bert Generation model)"),eCe.forEach(t),IWe=i(y),jg=n(y,"LI",{});var oCe=s(jg);pJ=n(oCe,"STRONG",{});var HIr=s(pJ);DWe=r(HIr,"bert-japanese"),HIr.forEach(t),NWe=r(oCe," \u2014 "),hx=n(oCe,"A",{href:!0});var UIr=s(hx);jWe=r(UIr,"BertJapaneseTokenizer"),UIr.forEach(t),qWe=r(oCe," (BertJapanese model)"),oCe.forEach(t),GWe=i(y),qg=n(y,"LI",{});var rCe=s(qg);_J=n(rCe,"STRONG",{});var JIr=s(_J);OWe=r(JIr,"bertweet"),JIr.forEach(t),XWe=r(rCe," \u2014 "),px=n(rCe,"A",{href:!0});var YIr=s(px);VWe=r(YIr,"BertweetTokenizer"),YIr.forEach(t),zWe=r(rCe," (Bertweet model)"),rCe.forEach(t),WWe=i(y),Jn=n(y,"LI",{});var g7=s(Jn);uJ=n(g7,"STRONG",{});var KIr=s(uJ);QWe=r(KIr,"big_bird"),KIr.forEach(t),HWe=r(g7," \u2014 "),_x=n(g7,"A",{href:!0});var ZIr=s(_x);UWe=r(ZIr,"BigBirdTokenizer"),ZIr.forEach(t),JWe=r(g7," or "),ux=n(g7,"A",{href:!0});var eDr=s(ux);YWe=r(eDr,"BigBirdTokenizerFast"),eDr.forEach(t),KWe=r(g7," (BigBird model)"),g7.forEach(t),ZWe=i(y),Yn=n(y,"LI",{});var h7=s(Yn);bJ=n(h7,"STRONG",{});var oDr=s(bJ);eQe=r(oDr,"bigbird_pegasus"),oDr.forEach(t),oQe=r(h7," \u2014 "),bx=n(h7,"A",{href:!0});var rDr=s(bx);rQe=r(rDr,"PegasusTokenizer"),rDr.forEach(t),tQe=r(h7," or "),vx=n(h7,"A",{href:!0});var tDr=s(vx);aQe=r(tDr,"PegasusTokenizerFast"),tDr.forEach(t),nQe=r(h7," (BigBirdPegasus model)"),h7.forEach(t),sQe=i(y),Kn=n(y,"LI",{});var p7=s(Kn);vJ=n(p7,"STRONG",{});var aDr=s(vJ);lQe=r(aDr,"blenderbot"),aDr.forEach(t),iQe=r(p7," \u2014 "),Tx=n(p7,"A",{href:!0});var nDr=s(Tx);dQe=r(nDr,"BlenderbotTokenizer"),nDr.forEach(t),cQe=r(p7," or "),Fx=n(p7,"A",{href:!0});var sDr=s(Fx);fQe=r(sDr,"BlenderbotTokenizerFast"),sDr.forEach(t),mQe=r(p7," (Blenderbot model)"),p7.forEach(t),gQe=i(y),Gg=n(y,"LI",{});var tCe=s(Gg);TJ=n(tCe,"STRONG",{});var lDr=s(TJ);hQe=r(lDr,"blenderbot-small"),lDr.forEach(t),pQe=r(tCe," \u2014 "),Cx=n(tCe,"A",{href:!0});var iDr=s(Cx);_Qe=r(iDr,"BlenderbotSmallTokenizer"),iDr.forEach(t),uQe=r(tCe," (BlenderbotSmall model)"),tCe.forEach(t),bQe=i(y),Og=n(y,"LI",{});var aCe=s(Og);FJ=n(aCe,"STRONG",{});var dDr=s(FJ);vQe=r(dDr,"byt5"),dDr.forEach(t),TQe=r(aCe," \u2014 "),Mx=n(aCe,"A",{href:!0});var cDr=s(Mx);FQe=r(cDr,"ByT5Tokenizer"),cDr.forEach(t),CQe=r(aCe," (ByT5 model)"),aCe.forEach(t),MQe=i(y),Zn=n(y,"LI",{});var _7=s(Zn);CJ=n(_7,"STRONG",{});var fDr=s(CJ);EQe=r(fDr,"camembert"),fDr.forEach(t),yQe=r(_7," \u2014 "),Ex=n(_7,"A",{href:!0});var mDr=s(Ex);wQe=r(mDr,"CamembertTokenizer"),mDr.forEach(t),AQe=r(_7," or "),yx=n(_7,"A",{href:!0});var gDr=s(yx);LQe=r(gDr,"CamembertTokenizerFast"),gDr.forEach(t),BQe=r(_7," (CamemBERT model)"),_7.forEach(t),xQe=i(y),Xg=n(y,"LI",{});var nCe=s(Xg);MJ=n(nCe,"STRONG",{});var hDr=s(MJ);kQe=r(hDr,"canine"),hDr.forEach(t),RQe=r(nCe," \u2014 "),wx=n(nCe,"A",{href:!0});var pDr=s(wx);SQe=r(pDr,"CanineTokenizer"),pDr.forEach(t),PQe=r(nCe," (Canine model)"),nCe.forEach(t),$Qe=i(y),es=n(y,"LI",{});var u7=s(es);EJ=n(u7,"STRONG",{});var _Dr=s(EJ);IQe=r(_Dr,"clip"),_Dr.forEach(t),DQe=r(u7," \u2014 "),Ax=n(u7,"A",{href:!0});var uDr=s(Ax);NQe=r(uDr,"CLIPTokenizer"),uDr.forEach(t),jQe=r(u7," or "),Lx=n(u7,"A",{href:!0});var bDr=s(Lx);qQe=r(bDr,"CLIPTokenizerFast"),bDr.forEach(t),GQe=r(u7," (CLIP model)"),u7.forEach(t),OQe=i(y),os=n(y,"LI",{});var b7=s(os);yJ=n(b7,"STRONG",{});var vDr=s(yJ);XQe=r(vDr,"convbert"),vDr.forEach(t),VQe=r(b7," \u2014 "),Bx=n(b7,"A",{href:!0});var TDr=s(Bx);zQe=r(TDr,"ConvBertTokenizer"),TDr.forEach(t),WQe=r(b7," or "),xx=n(b7,"A",{href:!0});var FDr=s(xx);QQe=r(FDr,"ConvBertTokenizerFast"),FDr.forEach(t),HQe=r(b7," (ConvBERT model)"),b7.forEach(t),UQe=i(y),rs=n(y,"LI",{});var v7=s(rs);wJ=n(v7,"STRONG",{});var CDr=s(wJ);JQe=r(CDr,"cpm"),CDr.forEach(t),YQe=r(v7," \u2014 "),kx=n(v7,"A",{href:!0});var MDr=s(kx);KQe=r(MDr,"CpmTokenizer"),MDr.forEach(t),ZQe=r(v7," or "),AJ=n(v7,"CODE",{});var EDr=s(AJ);eHe=r(EDr,"CpmTokenizerFast"),EDr.forEach(t),oHe=r(v7," (CPM model)"),v7.forEach(t),rHe=i(y),Vg=n(y,"LI",{});var sCe=s(Vg);LJ=n(sCe,"STRONG",{});var yDr=s(LJ);tHe=r(yDr,"ctrl"),yDr.forEach(t),aHe=r(sCe," \u2014 "),Rx=n(sCe,"A",{href:!0});var wDr=s(Rx);nHe=r(wDr,"CTRLTokenizer"),wDr.forEach(t),sHe=r(sCe," (CTRL model)"),sCe.forEach(t),lHe=i(y),ts=n(y,"LI",{});var T7=s(ts);BJ=n(T7,"STRONG",{});var ADr=s(BJ);iHe=r(ADr,"deberta"),ADr.forEach(t),dHe=r(T7," \u2014 "),Sx=n(T7,"A",{href:!0});var LDr=s(Sx);cHe=r(LDr,"DebertaTokenizer"),LDr.forEach(t),fHe=r(T7," or "),Px=n(T7,"A",{href:!0});var BDr=s(Px);mHe=r(BDr,"DebertaTokenizerFast"),BDr.forEach(t),gHe=r(T7," (DeBERTa model)"),T7.forEach(t),hHe=i(y),zg=n(y,"LI",{});var lCe=s(zg);xJ=n(lCe,"STRONG",{});var xDr=s(xJ);pHe=r(xDr,"deberta-v2"),xDr.forEach(t),_He=r(lCe," \u2014 "),$x=n(lCe,"A",{href:!0});var kDr=s($x);uHe=r(kDr,"DebertaV2Tokenizer"),kDr.forEach(t),bHe=r(lCe," (DeBERTa-v2 model)"),lCe.forEach(t),vHe=i(y),as=n(y,"LI",{});var F7=s(as);kJ=n(F7,"STRONG",{});var RDr=s(kJ);THe=r(RDr,"distilbert"),RDr.forEach(t),FHe=r(F7," \u2014 "),Ix=n(F7,"A",{href:!0});var SDr=s(Ix);CHe=r(SDr,"DistilBertTokenizer"),SDr.forEach(t),MHe=r(F7," or "),Dx=n(F7,"A",{href:!0});var PDr=s(Dx);EHe=r(PDr,"DistilBertTokenizerFast"),PDr.forEach(t),yHe=r(F7," (DistilBERT model)"),F7.forEach(t),wHe=i(y),ns=n(y,"LI",{});var C7=s(ns);RJ=n(C7,"STRONG",{});var $Dr=s(RJ);AHe=r($Dr,"dpr"),$Dr.forEach(t),LHe=r(C7," \u2014 "),Nx=n(C7,"A",{href:!0});var IDr=s(Nx);BHe=r(IDr,"DPRQuestionEncoderTokenizer"),IDr.forEach(t),xHe=r(C7," or "),jx=n(C7,"A",{href:!0});var DDr=s(jx);kHe=r(DDr,"DPRQuestionEncoderTokenizerFast"),DDr.forEach(t),RHe=r(C7," (DPR model)"),C7.forEach(t),SHe=i(y),ss=n(y,"LI",{});var M7=s(ss);SJ=n(M7,"STRONG",{});var NDr=s(SJ);PHe=r(NDr,"electra"),NDr.forEach(t),$He=r(M7," \u2014 "),qx=n(M7,"A",{href:!0});var jDr=s(qx);IHe=r(jDr,"ElectraTokenizer"),jDr.forEach(t),DHe=r(M7," or "),Gx=n(M7,"A",{href:!0});var qDr=s(Gx);NHe=r(qDr,"ElectraTokenizerFast"),qDr.forEach(t),jHe=r(M7," (ELECTRA model)"),M7.forEach(t),qHe=i(y),Wg=n(y,"LI",{});var iCe=s(Wg);PJ=n(iCe,"STRONG",{});var GDr=s(PJ);GHe=r(GDr,"flaubert"),GDr.forEach(t),OHe=r(iCe," \u2014 "),Ox=n(iCe,"A",{href:!0});var ODr=s(Ox);XHe=r(ODr,"FlaubertTokenizer"),ODr.forEach(t),VHe=r(iCe," (FlauBERT model)"),iCe.forEach(t),zHe=i(y),ls=n(y,"LI",{});var E7=s(ls);$J=n(E7,"STRONG",{});var XDr=s($J);WHe=r(XDr,"fnet"),XDr.forEach(t),QHe=r(E7," \u2014 "),Xx=n(E7,"A",{href:!0});var VDr=s(Xx);HHe=r(VDr,"FNetTokenizer"),VDr.forEach(t),UHe=r(E7," or "),Vx=n(E7,"A",{href:!0});var zDr=s(Vx);JHe=r(zDr,"FNetTokenizerFast"),zDr.forEach(t),YHe=r(E7," (FNet model)"),E7.forEach(t),KHe=i(y),Qg=n(y,"LI",{});var dCe=s(Qg);IJ=n(dCe,"STRONG",{});var WDr=s(IJ);ZHe=r(WDr,"fsmt"),WDr.forEach(t),eUe=r(dCe," \u2014 "),zx=n(dCe,"A",{href:!0});var QDr=s(zx);oUe=r(QDr,"FSMTTokenizer"),QDr.forEach(t),rUe=r(dCe," (FairSeq Machine-Translation model)"),dCe.forEach(t),tUe=i(y),is=n(y,"LI",{});var y7=s(is);DJ=n(y7,"STRONG",{});var HDr=s(DJ);aUe=r(HDr,"funnel"),HDr.forEach(t),nUe=r(y7," \u2014 "),Wx=n(y7,"A",{href:!0});var UDr=s(Wx);sUe=r(UDr,"FunnelTokenizer"),UDr.forEach(t),lUe=r(y7," or "),Qx=n(y7,"A",{href:!0});var JDr=s(Qx);iUe=r(JDr,"FunnelTokenizerFast"),JDr.forEach(t),dUe=r(y7," (Funnel Transformer model)"),y7.forEach(t),cUe=i(y),ds=n(y,"LI",{});var w7=s(ds);NJ=n(w7,"STRONG",{});var YDr=s(NJ);fUe=r(YDr,"gpt2"),YDr.forEach(t),mUe=r(w7," \u2014 "),Hx=n(w7,"A",{href:!0});var KDr=s(Hx);gUe=r(KDr,"GPT2Tokenizer"),KDr.forEach(t),hUe=r(w7," or "),Ux=n(w7,"A",{href:!0});var ZDr=s(Ux);pUe=r(ZDr,"GPT2TokenizerFast"),ZDr.forEach(t),_Ue=r(w7," (OpenAI GPT-2 model)"),w7.forEach(t),uUe=i(y),cs=n(y,"LI",{});var A7=s(cs);jJ=n(A7,"STRONG",{});var eNr=s(jJ);bUe=r(eNr,"gpt_neo"),eNr.forEach(t),vUe=r(A7," \u2014 "),Jx=n(A7,"A",{href:!0});var oNr=s(Jx);TUe=r(oNr,"GPT2Tokenizer"),oNr.forEach(t),FUe=r(A7," or "),Yx=n(A7,"A",{href:!0});var rNr=s(Yx);CUe=r(rNr,"GPT2TokenizerFast"),rNr.forEach(t),MUe=r(A7," (GPT Neo model)"),A7.forEach(t),EUe=i(y),fs=n(y,"LI",{});var L7=s(fs);qJ=n(L7,"STRONG",{});var tNr=s(qJ);yUe=r(tNr,"herbert"),tNr.forEach(t),wUe=r(L7," \u2014 "),Kx=n(L7,"A",{href:!0});var aNr=s(Kx);AUe=r(aNr,"HerbertTokenizer"),aNr.forEach(t),LUe=r(L7," or "),Zx=n(L7,"A",{href:!0});var nNr=s(Zx);BUe=r(nNr,"HerbertTokenizerFast"),nNr.forEach(t),xUe=r(L7," (HerBERT model)"),L7.forEach(t),kUe=i(y),Hg=n(y,"LI",{});var cCe=s(Hg);GJ=n(cCe,"STRONG",{});var sNr=s(GJ);RUe=r(sNr,"hubert"),sNr.forEach(t),SUe=r(cCe," \u2014 "),ek=n(cCe,"A",{href:!0});var lNr=s(ek);PUe=r(lNr,"Wav2Vec2CTCTokenizer"),lNr.forEach(t),$Ue=r(cCe," (Hubert model)"),cCe.forEach(t),IUe=i(y),ms=n(y,"LI",{});var B7=s(ms);OJ=n(B7,"STRONG",{});var iNr=s(OJ);DUe=r(iNr,"ibert"),iNr.forEach(t),NUe=r(B7," \u2014 "),ok=n(B7,"A",{href:!0});var dNr=s(ok);jUe=r(dNr,"RobertaTokenizer"),dNr.forEach(t),qUe=r(B7," or "),rk=n(B7,"A",{href:!0});var cNr=s(rk);GUe=r(cNr,"RobertaTokenizerFast"),cNr.forEach(t),OUe=r(B7," (I-BERT model)"),B7.forEach(t),XUe=i(y),gs=n(y,"LI",{});var x7=s(gs);XJ=n(x7,"STRONG",{});var fNr=s(XJ);VUe=r(fNr,"layoutlm"),fNr.forEach(t),zUe=r(x7," \u2014 "),tk=n(x7,"A",{href:!0});var mNr=s(tk);WUe=r(mNr,"LayoutLMTokenizer"),mNr.forEach(t),QUe=r(x7," or "),ak=n(x7,"A",{href:!0});var gNr=s(ak);HUe=r(gNr,"LayoutLMTokenizerFast"),gNr.forEach(t),UUe=r(x7," (LayoutLM model)"),x7.forEach(t),JUe=i(y),hs=n(y,"LI",{});var k7=s(hs);VJ=n(k7,"STRONG",{});var hNr=s(VJ);YUe=r(hNr,"layoutlmv2"),hNr.forEach(t),KUe=r(k7," \u2014 "),nk=n(k7,"A",{href:!0});var pNr=s(nk);ZUe=r(pNr,"LayoutLMv2Tokenizer"),pNr.forEach(t),eJe=r(k7," or "),sk=n(k7,"A",{href:!0});var _Nr=s(sk);oJe=r(_Nr,"LayoutLMv2TokenizerFast"),_Nr.forEach(t),rJe=r(k7," (LayoutLMv2 model)"),k7.forEach(t),tJe=i(y),ps=n(y,"LI",{});var R7=s(ps);zJ=n(R7,"STRONG",{});var uNr=s(zJ);aJe=r(uNr,"layoutxlm"),uNr.forEach(t),nJe=r(R7," \u2014 "),lk=n(R7,"A",{href:!0});var bNr=s(lk);sJe=r(bNr,"LayoutXLMTokenizer"),bNr.forEach(t),lJe=r(R7," or "),ik=n(R7,"A",{href:!0});var vNr=s(ik);iJe=r(vNr,"LayoutXLMTokenizerFast"),vNr.forEach(t),dJe=r(R7," (LayoutXLM model)"),R7.forEach(t),cJe=i(y),_s=n(y,"LI",{});var S7=s(_s);WJ=n(S7,"STRONG",{});var TNr=s(WJ);fJe=r(TNr,"led"),TNr.forEach(t),mJe=r(S7," \u2014 "),dk=n(S7,"A",{href:!0});var FNr=s(dk);gJe=r(FNr,"LEDTokenizer"),FNr.forEach(t),hJe=r(S7," or "),ck=n(S7,"A",{href:!0});var CNr=s(ck);pJe=r(CNr,"LEDTokenizerFast"),CNr.forEach(t),_Je=r(S7," (LED model)"),S7.forEach(t),uJe=i(y),us=n(y,"LI",{});var P7=s(us);QJ=n(P7,"STRONG",{});var MNr=s(QJ);bJe=r(MNr,"longformer"),MNr.forEach(t),vJe=r(P7," \u2014 "),fk=n(P7,"A",{href:!0});var ENr=s(fk);TJe=r(ENr,"LongformerTokenizer"),ENr.forEach(t),FJe=r(P7," or "),mk=n(P7,"A",{href:!0});var yNr=s(mk);CJe=r(yNr,"LongformerTokenizerFast"),yNr.forEach(t),MJe=r(P7," (Longformer model)"),P7.forEach(t),EJe=i(y),Ug=n(y,"LI",{});var fCe=s(Ug);HJ=n(fCe,"STRONG",{});var wNr=s(HJ);yJe=r(wNr,"luke"),wNr.forEach(t),wJe=r(fCe," \u2014 "),gk=n(fCe,"A",{href:!0});var ANr=s(gk);AJe=r(ANr,"LukeTokenizer"),ANr.forEach(t),LJe=r(fCe," (LUKE model)"),fCe.forEach(t),BJe=i(y),bs=n(y,"LI",{});var $7=s(bs);UJ=n($7,"STRONG",{});var LNr=s(UJ);xJe=r(LNr,"lxmert"),LNr.forEach(t),kJe=r($7," \u2014 "),hk=n($7,"A",{href:!0});var BNr=s(hk);RJe=r(BNr,"LxmertTokenizer"),BNr.forEach(t),SJe=r($7," or "),pk=n($7,"A",{href:!0});var xNr=s(pk);PJe=r(xNr,"LxmertTokenizerFast"),xNr.forEach(t),$Je=r($7," (LXMERT model)"),$7.forEach(t),IJe=i(y),Jg=n(y,"LI",{});var mCe=s(Jg);JJ=n(mCe,"STRONG",{});var kNr=s(JJ);DJe=r(kNr,"m2m_100"),kNr.forEach(t),NJe=r(mCe," \u2014 "),_k=n(mCe,"A",{href:!0});var RNr=s(_k);jJe=r(RNr,"M2M100Tokenizer"),RNr.forEach(t),qJe=r(mCe," (M2M100 model)"),mCe.forEach(t),GJe=i(y),Yg=n(y,"LI",{});var gCe=s(Yg);YJ=n(gCe,"STRONG",{});var SNr=s(YJ);OJe=r(SNr,"marian"),SNr.forEach(t),XJe=r(gCe," \u2014 "),uk=n(gCe,"A",{href:!0});var PNr=s(uk);VJe=r(PNr,"MarianTokenizer"),PNr.forEach(t),zJe=r(gCe," (Marian model)"),gCe.forEach(t),WJe=i(y),vs=n(y,"LI",{});var I7=s(vs);KJ=n(I7,"STRONG",{});var $Nr=s(KJ);QJe=r($Nr,"mbart"),$Nr.forEach(t),HJe=r(I7," \u2014 "),bk=n(I7,"A",{href:!0});var INr=s(bk);UJe=r(INr,"MBartTokenizer"),INr.forEach(t),JJe=r(I7," or "),vk=n(I7,"A",{href:!0});var DNr=s(vk);YJe=r(DNr,"MBartTokenizerFast"),DNr.forEach(t),KJe=r(I7," (mBART model)"),I7.forEach(t),ZJe=i(y),Ts=n(y,"LI",{});var D7=s(Ts);ZJ=n(D7,"STRONG",{});var NNr=s(ZJ);eYe=r(NNr,"mbart50"),NNr.forEach(t),oYe=r(D7," \u2014 "),Tk=n(D7,"A",{href:!0});var jNr=s(Tk);rYe=r(jNr,"MBart50Tokenizer"),jNr.forEach(t),tYe=r(D7," or "),Fk=n(D7,"A",{href:!0});var qNr=s(Fk);aYe=r(qNr,"MBart50TokenizerFast"),qNr.forEach(t),nYe=r(D7," (mBART-50 model)"),D7.forEach(t),sYe=i(y),Kg=n(y,"LI",{});var hCe=s(Kg);eY=n(hCe,"STRONG",{});var GNr=s(eY);lYe=r(GNr,"mluke"),GNr.forEach(t),iYe=r(hCe," \u2014 "),Ck=n(hCe,"A",{href:!0});var ONr=s(Ck);dYe=r(ONr,"MLukeTokenizer"),ONr.forEach(t),cYe=r(hCe," (mLUKE model)"),hCe.forEach(t),fYe=i(y),Fs=n(y,"LI",{});var N7=s(Fs);oY=n(N7,"STRONG",{});var XNr=s(oY);mYe=r(XNr,"mobilebert"),XNr.forEach(t),gYe=r(N7," \u2014 "),Mk=n(N7,"A",{href:!0});var VNr=s(Mk);hYe=r(VNr,"MobileBertTokenizer"),VNr.forEach(t),pYe=r(N7," or "),Ek=n(N7,"A",{href:!0});var zNr=s(Ek);_Ye=r(zNr,"MobileBertTokenizerFast"),zNr.forEach(t),uYe=r(N7," (MobileBERT model)"),N7.forEach(t),bYe=i(y),Cs=n(y,"LI",{});var j7=s(Cs);rY=n(j7,"STRONG",{});var WNr=s(rY);vYe=r(WNr,"mpnet"),WNr.forEach(t),TYe=r(j7," \u2014 "),yk=n(j7,"A",{href:!0});var QNr=s(yk);FYe=r(QNr,"MPNetTokenizer"),QNr.forEach(t),CYe=r(j7," or "),wk=n(j7,"A",{href:!0});var HNr=s(wk);MYe=r(HNr,"MPNetTokenizerFast"),HNr.forEach(t),EYe=r(j7," (MPNet model)"),j7.forEach(t),yYe=i(y),Ms=n(y,"LI",{});var q7=s(Ms);tY=n(q7,"STRONG",{});var UNr=s(tY);wYe=r(UNr,"mt5"),UNr.forEach(t),AYe=r(q7," \u2014 "),Ak=n(q7,"A",{href:!0});var JNr=s(Ak);LYe=r(JNr,"MT5Tokenizer"),JNr.forEach(t),BYe=r(q7," or "),Lk=n(q7,"A",{href:!0});var YNr=s(Lk);xYe=r(YNr,"MT5TokenizerFast"),YNr.forEach(t),kYe=r(q7," (mT5 model)"),q7.forEach(t),RYe=i(y),Es=n(y,"LI",{});var G7=s(Es);aY=n(G7,"STRONG",{});var KNr=s(aY);SYe=r(KNr,"openai-gpt"),KNr.forEach(t),PYe=r(G7," \u2014 "),Bk=n(G7,"A",{href:!0});var ZNr=s(Bk);$Ye=r(ZNr,"OpenAIGPTTokenizer"),ZNr.forEach(t),IYe=r(G7," or "),xk=n(G7,"A",{href:!0});var ejr=s(xk);DYe=r(ejr,"OpenAIGPTTokenizerFast"),ejr.forEach(t),NYe=r(G7," (OpenAI GPT model)"),G7.forEach(t),jYe=i(y),ys=n(y,"LI",{});var O7=s(ys);nY=n(O7,"STRONG",{});var ojr=s(nY);qYe=r(ojr,"pegasus"),ojr.forEach(t),GYe=r(O7," \u2014 "),kk=n(O7,"A",{href:!0});var rjr=s(kk);OYe=r(rjr,"PegasusTokenizer"),rjr.forEach(t),XYe=r(O7," or "),Rk=n(O7,"A",{href:!0});var tjr=s(Rk);VYe=r(tjr,"PegasusTokenizerFast"),tjr.forEach(t),zYe=r(O7," (Pegasus model)"),O7.forEach(t),WYe=i(y),Zg=n(y,"LI",{});var pCe=s(Zg);sY=n(pCe,"STRONG",{});var ajr=s(sY);QYe=r(ajr,"perceiver"),ajr.forEach(t),HYe=r(pCe," \u2014 "),Sk=n(pCe,"A",{href:!0});var njr=s(Sk);UYe=r(njr,"PerceiverTokenizer"),njr.forEach(t),JYe=r(pCe," (Perceiver model)"),pCe.forEach(t),YYe=i(y),eh=n(y,"LI",{});var _Ce=s(eh);lY=n(_Ce,"STRONG",{});var sjr=s(lY);KYe=r(sjr,"phobert"),sjr.forEach(t),ZYe=r(_Ce," \u2014 "),Pk=n(_Ce,"A",{href:!0});var ljr=s(Pk);eKe=r(ljr,"PhobertTokenizer"),ljr.forEach(t),oKe=r(_Ce," (PhoBERT model)"),_Ce.forEach(t),rKe=i(y),oh=n(y,"LI",{});var uCe=s(oh);iY=n(uCe,"STRONG",{});var ijr=s(iY);tKe=r(ijr,"plbart"),ijr.forEach(t),aKe=r(uCe," \u2014 "),$k=n(uCe,"A",{href:!0});var djr=s($k);nKe=r(djr,"PLBartTokenizer"),djr.forEach(t),sKe=r(uCe," (PLBart model)"),uCe.forEach(t),lKe=i(y),rh=n(y,"LI",{});var bCe=s(rh);dY=n(bCe,"STRONG",{});var cjr=s(dY);iKe=r(cjr,"prophetnet"),cjr.forEach(t),dKe=r(bCe," \u2014 "),Ik=n(bCe,"A",{href:!0});var fjr=s(Ik);cKe=r(fjr,"ProphetNetTokenizer"),fjr.forEach(t),fKe=r(bCe," (ProphetNet model)"),bCe.forEach(t),mKe=i(y),ws=n(y,"LI",{});var X7=s(ws);cY=n(X7,"STRONG",{});var mjr=s(cY);gKe=r(mjr,"qdqbert"),mjr.forEach(t),hKe=r(X7," \u2014 "),Dk=n(X7,"A",{href:!0});var gjr=s(Dk);pKe=r(gjr,"BertTokenizer"),gjr.forEach(t),_Ke=r(X7," or "),Nk=n(X7,"A",{href:!0});var hjr=s(Nk);uKe=r(hjr,"BertTokenizerFast"),hjr.forEach(t),bKe=r(X7," (QDQBert model)"),X7.forEach(t),vKe=i(y),th=n(y,"LI",{});var vCe=s(th);fY=n(vCe,"STRONG",{});var pjr=s(fY);TKe=r(pjr,"rag"),pjr.forEach(t),FKe=r(vCe," \u2014 "),jk=n(vCe,"A",{href:!0});var _jr=s(jk);CKe=r(_jr,"RagTokenizer"),_jr.forEach(t),MKe=r(vCe," (RAG model)"),vCe.forEach(t),EKe=i(y),As=n(y,"LI",{});var V7=s(As);mY=n(V7,"STRONG",{});var ujr=s(mY);yKe=r(ujr,"realm"),ujr.forEach(t),wKe=r(V7," \u2014 "),qk=n(V7,"A",{href:!0});var bjr=s(qk);AKe=r(bjr,"RealmTokenizer"),bjr.forEach(t),LKe=r(V7," or "),Gk=n(V7,"A",{href:!0});var vjr=s(Gk);BKe=r(vjr,"RealmTokenizerFast"),vjr.forEach(t),xKe=r(V7," (Realm model)"),V7.forEach(t),kKe=i(y),Ls=n(y,"LI",{});var z7=s(Ls);gY=n(z7,"STRONG",{});var Tjr=s(gY);RKe=r(Tjr,"reformer"),Tjr.forEach(t),SKe=r(z7," \u2014 "),Ok=n(z7,"A",{href:!0});var Fjr=s(Ok);PKe=r(Fjr,"ReformerTokenizer"),Fjr.forEach(t),$Ke=r(z7," or "),Xk=n(z7,"A",{href:!0});var Cjr=s(Xk);IKe=r(Cjr,"ReformerTokenizerFast"),Cjr.forEach(t),DKe=r(z7," (Reformer model)"),z7.forEach(t),NKe=i(y),Bs=n(y,"LI",{});var W7=s(Bs);hY=n(W7,"STRONG",{});var Mjr=s(hY);jKe=r(Mjr,"rembert"),Mjr.forEach(t),qKe=r(W7," \u2014 "),Vk=n(W7,"A",{href:!0});var Ejr=s(Vk);GKe=r(Ejr,"RemBertTokenizer"),Ejr.forEach(t),OKe=r(W7," or "),zk=n(W7,"A",{href:!0});var yjr=s(zk);XKe=r(yjr,"RemBertTokenizerFast"),yjr.forEach(t),VKe=r(W7," (RemBERT model)"),W7.forEach(t),zKe=i(y),xs=n(y,"LI",{});var Q7=s(xs);pY=n(Q7,"STRONG",{});var wjr=s(pY);WKe=r(wjr,"retribert"),wjr.forEach(t),QKe=r(Q7," \u2014 "),Wk=n(Q7,"A",{href:!0});var Ajr=s(Wk);HKe=r(Ajr,"RetriBertTokenizer"),Ajr.forEach(t),UKe=r(Q7," or "),Qk=n(Q7,"A",{href:!0});var Ljr=s(Qk);JKe=r(Ljr,"RetriBertTokenizerFast"),Ljr.forEach(t),YKe=r(Q7," (RetriBERT model)"),Q7.forEach(t),KKe=i(y),ks=n(y,"LI",{});var H7=s(ks);_Y=n(H7,"STRONG",{});var Bjr=s(_Y);ZKe=r(Bjr,"roberta"),Bjr.forEach(t),eZe=r(H7," \u2014 "),Hk=n(H7,"A",{href:!0});var xjr=s(Hk);oZe=r(xjr,"RobertaTokenizer"),xjr.forEach(t),rZe=r(H7," or "),Uk=n(H7,"A",{href:!0});var kjr=s(Uk);tZe=r(kjr,"RobertaTokenizerFast"),kjr.forEach(t),aZe=r(H7," (RoBERTa model)"),H7.forEach(t),nZe=i(y),Rs=n(y,"LI",{});var U7=s(Rs);uY=n(U7,"STRONG",{});var Rjr=s(uY);sZe=r(Rjr,"roformer"),Rjr.forEach(t),lZe=r(U7," \u2014 "),Jk=n(U7,"A",{href:!0});var Sjr=s(Jk);iZe=r(Sjr,"RoFormerTokenizer"),Sjr.forEach(t),dZe=r(U7," or "),Yk=n(U7,"A",{href:!0});var Pjr=s(Yk);cZe=r(Pjr,"RoFormerTokenizerFast"),Pjr.forEach(t),fZe=r(U7," (RoFormer model)"),U7.forEach(t),mZe=i(y),ah=n(y,"LI",{});var TCe=s(ah);bY=n(TCe,"STRONG",{});var $jr=s(bY);gZe=r($jr,"speech_to_text"),$jr.forEach(t),hZe=r(TCe," \u2014 "),Kk=n(TCe,"A",{href:!0});var Ijr=s(Kk);pZe=r(Ijr,"Speech2TextTokenizer"),Ijr.forEach(t),_Ze=r(TCe," (Speech2Text model)"),TCe.forEach(t),uZe=i(y),nh=n(y,"LI",{});var FCe=s(nh);vY=n(FCe,"STRONG",{});var Djr=s(vY);bZe=r(Djr,"speech_to_text_2"),Djr.forEach(t),vZe=r(FCe," \u2014 "),Zk=n(FCe,"A",{href:!0});var Njr=s(Zk);TZe=r(Njr,"Speech2Text2Tokenizer"),Njr.forEach(t),FZe=r(FCe," (Speech2Text2 model)"),FCe.forEach(t),CZe=i(y),Ss=n(y,"LI",{});var J7=s(Ss);TY=n(J7,"STRONG",{});var jjr=s(TY);MZe=r(jjr,"splinter"),jjr.forEach(t),EZe=r(J7," \u2014 "),eR=n(J7,"A",{href:!0});var qjr=s(eR);yZe=r(qjr,"SplinterTokenizer"),qjr.forEach(t),wZe=r(J7," or "),oR=n(J7,"A",{href:!0});var Gjr=s(oR);AZe=r(Gjr,"SplinterTokenizerFast"),Gjr.forEach(t),LZe=r(J7," (Splinter model)"),J7.forEach(t),BZe=i(y),Ps=n(y,"LI",{});var Y7=s(Ps);FY=n(Y7,"STRONG",{});var Ojr=s(FY);xZe=r(Ojr,"squeezebert"),Ojr.forEach(t),kZe=r(Y7," \u2014 "),rR=n(Y7,"A",{href:!0});var Xjr=s(rR);RZe=r(Xjr,"SqueezeBertTokenizer"),Xjr.forEach(t),SZe=r(Y7," or "),tR=n(Y7,"A",{href:!0});var Vjr=s(tR);PZe=r(Vjr,"SqueezeBertTokenizerFast"),Vjr.forEach(t),$Ze=r(Y7," (SqueezeBERT model)"),Y7.forEach(t),IZe=i(y),$s=n(y,"LI",{});var K7=s($s);CY=n(K7,"STRONG",{});var zjr=s(CY);DZe=r(zjr,"t5"),zjr.forEach(t),NZe=r(K7," \u2014 "),aR=n(K7,"A",{href:!0});var Wjr=s(aR);jZe=r(Wjr,"T5Tokenizer"),Wjr.forEach(t),qZe=r(K7," or "),nR=n(K7,"A",{href:!0});var Qjr=s(nR);GZe=r(Qjr,"T5TokenizerFast"),Qjr.forEach(t),OZe=r(K7," (T5 model)"),K7.forEach(t),XZe=i(y),sh=n(y,"LI",{});var CCe=s(sh);MY=n(CCe,"STRONG",{});var Hjr=s(MY);VZe=r(Hjr,"tapas"),Hjr.forEach(t),zZe=r(CCe," \u2014 "),sR=n(CCe,"A",{href:!0});var Ujr=s(sR);WZe=r(Ujr,"TapasTokenizer"),Ujr.forEach(t),QZe=r(CCe," (TAPAS model)"),CCe.forEach(t),HZe=i(y),lh=n(y,"LI",{});var MCe=s(lh);EY=n(MCe,"STRONG",{});var Jjr=s(EY);UZe=r(Jjr,"transfo-xl"),Jjr.forEach(t),JZe=r(MCe," \u2014 "),lR=n(MCe,"A",{href:!0});var Yjr=s(lR);YZe=r(Yjr,"TransfoXLTokenizer"),Yjr.forEach(t),KZe=r(MCe," (Transformer-XL model)"),MCe.forEach(t),ZZe=i(y),ih=n(y,"LI",{});var ECe=s(ih);yY=n(ECe,"STRONG",{});var Kjr=s(yY);eeo=r(Kjr,"wav2vec2"),Kjr.forEach(t),oeo=r(ECe," \u2014 "),iR=n(ECe,"A",{href:!0});var Zjr=s(iR);reo=r(Zjr,"Wav2Vec2CTCTokenizer"),Zjr.forEach(t),teo=r(ECe," (Wav2Vec2 model)"),ECe.forEach(t),aeo=i(y),dh=n(y,"LI",{});var yCe=s(dh);wY=n(yCe,"STRONG",{});var eqr=s(wY);neo=r(eqr,"wav2vec2_phoneme"),eqr.forEach(t),seo=r(yCe," \u2014 "),dR=n(yCe,"A",{href:!0});var oqr=s(dR);leo=r(oqr,"Wav2Vec2PhonemeCTCTokenizer"),oqr.forEach(t),ieo=r(yCe," (Wav2Vec2Phoneme model)"),yCe.forEach(t),deo=i(y),Is=n(y,"LI",{});var Z7=s(Is);AY=n(Z7,"STRONG",{});var rqr=s(AY);ceo=r(rqr,"xglm"),rqr.forEach(t),feo=r(Z7," \u2014 "),cR=n(Z7,"A",{href:!0});var tqr=s(cR);meo=r(tqr,"XGLMTokenizer"),tqr.forEach(t),geo=r(Z7," or "),fR=n(Z7,"A",{href:!0});var aqr=s(fR);heo=r(aqr,"XGLMTokenizerFast"),aqr.forEach(t),peo=r(Z7," (XGLM model)"),Z7.forEach(t),_eo=i(y),ch=n(y,"LI",{});var wCe=s(ch);LY=n(wCe,"STRONG",{});var nqr=s(LY);ueo=r(nqr,"xlm"),nqr.forEach(t),beo=r(wCe," \u2014 "),mR=n(wCe,"A",{href:!0});var sqr=s(mR);veo=r(sqr,"XLMTokenizer"),sqr.forEach(t),Teo=r(wCe," (XLM model)"),wCe.forEach(t),Feo=i(y),fh=n(y,"LI",{});var ACe=s(fh);BY=n(ACe,"STRONG",{});var lqr=s(BY);Ceo=r(lqr,"xlm-prophetnet"),lqr.forEach(t),Meo=r(ACe," \u2014 "),gR=n(ACe,"A",{href:!0});var iqr=s(gR);Eeo=r(iqr,"XLMProphetNetTokenizer"),iqr.forEach(t),yeo=r(ACe," (XLMProphetNet model)"),ACe.forEach(t),weo=i(y),Ds=n(y,"LI",{});var e8=s(Ds);xY=n(e8,"STRONG",{});var dqr=s(xY);Aeo=r(dqr,"xlm-roberta"),dqr.forEach(t),Leo=r(e8," \u2014 "),hR=n(e8,"A",{href:!0});var cqr=s(hR);Beo=r(cqr,"XLMRobertaTokenizer"),cqr.forEach(t),xeo=r(e8," or "),pR=n(e8,"A",{href:!0});var fqr=s(pR);keo=r(fqr,"XLMRobertaTokenizerFast"),fqr.forEach(t),Reo=r(e8," (XLM-RoBERTa model)"),e8.forEach(t),Seo=i(y),Ns=n(y,"LI",{});var o8=s(Ns);kY=n(o8,"STRONG",{});var mqr=s(kY);Peo=r(mqr,"xlnet"),mqr.forEach(t),$eo=r(o8," \u2014 "),_R=n(o8,"A",{href:!0});var gqr=s(_R);Ieo=r(gqr,"XLNetTokenizer"),gqr.forEach(t),Deo=r(o8," or "),uR=n(o8,"A",{href:!0});var hqr=s(uR);Neo=r(hqr,"XLNetTokenizerFast"),hqr.forEach(t),jeo=r(o8," (XLNet model)"),o8.forEach(t),y.forEach(t),qeo=i(ha),RY=n(ha,"P",{});var pqr=s(RY);Geo=r(pqr,"Examples:"),pqr.forEach(t),Oeo=i(ha),m(kE.$$.fragment,ha),ha.forEach(t),Xeo=i(Xs),mh=n(Xs,"DIV",{class:!0});var OSe=s(mh);m(RE.$$.fragment,OSe),Veo=i(OSe),SY=n(OSe,"P",{});var _qr=s(SY);zeo=r(_qr,"Register a new tokenizer in this mapping."),_qr.forEach(t),OSe.forEach(t),Xs.forEach(t),Nke=i(c),Qi=n(c,"H2",{class:!0});var XSe=s(Qi);gh=n(XSe,"A",{id:!0,class:!0,href:!0});var uqr=s(gh);PY=n(uqr,"SPAN",{});var bqr=s(PY);m(SE.$$.fragment,bqr),bqr.forEach(t),uqr.forEach(t),Weo=i(XSe),$Y=n(XSe,"SPAN",{});var vqr=s($Y);Qeo=r(vqr,"AutoFeatureExtractor"),vqr.forEach(t),XSe.forEach(t),jke=i(c),Ho=n(c,"DIV",{class:!0});var Vs=s(Ho);m(PE.$$.fragment,Vs),Heo=i(Vs),$E=n(Vs,"P",{});var VSe=s($E);Ueo=r(VSe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),bR=n(VSe,"A",{href:!0});var Tqr=s(bR);Jeo=r(Tqr,"AutoFeatureExtractor.from_pretrained()"),Tqr.forEach(t),Yeo=r(VSe," class method."),VSe.forEach(t),Keo=i(Vs),IE=n(Vs,"P",{});var zSe=s(IE);Zeo=r(zSe,"This class cannot be instantiated directly using "),IY=n(zSe,"CODE",{});var Fqr=s(IY);eoo=r(Fqr,"__init__()"),Fqr.forEach(t),ooo=r(zSe," (throws an error)."),zSe.forEach(t),roo=i(Vs),$e=n(Vs,"DIV",{class:!0});var Nt=s($e);m(DE.$$.fragment,Nt),too=i(Nt),DY=n(Nt,"P",{});var Cqr=s(DY);aoo=r(Cqr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Cqr.forEach(t),noo=i(Nt),Xa=n(Nt,"P",{});var _4=s(Xa);soo=r(_4,"The feature extractor class to instantiate is selected based on the "),NY=n(_4,"CODE",{});var Mqr=s(NY);loo=r(Mqr,"model_type"),Mqr.forEach(t),ioo=r(_4,` property of the config object
(either passed as an argument or loaded from `),jY=n(_4,"CODE",{});var Eqr=s(jY);doo=r(Eqr,"pretrained_model_name_or_path"),Eqr.forEach(t),coo=r(_4,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),qY=n(_4,"CODE",{});var yqr=s(qY);foo=r(yqr,"pretrained_model_name_or_path"),yqr.forEach(t),moo=r(_4,":"),_4.forEach(t),goo=i(Nt),te=n(Nt,"UL",{});var ne=s(te);hh=n(ne,"LI",{});var LCe=s(hh);GY=n(LCe,"STRONG",{});var wqr=s(GY);hoo=r(wqr,"beit"),wqr.forEach(t),poo=r(LCe," \u2014 "),vR=n(LCe,"A",{href:!0});var Aqr=s(vR);_oo=r(Aqr,"BeitFeatureExtractor"),Aqr.forEach(t),uoo=r(LCe," (BEiT model)"),LCe.forEach(t),boo=i(ne),ph=n(ne,"LI",{});var BCe=s(ph);OY=n(BCe,"STRONG",{});var Lqr=s(OY);voo=r(Lqr,"clip"),Lqr.forEach(t),Too=r(BCe," \u2014 "),TR=n(BCe,"A",{href:!0});var Bqr=s(TR);Foo=r(Bqr,"CLIPFeatureExtractor"),Bqr.forEach(t),Coo=r(BCe," (CLIP model)"),BCe.forEach(t),Moo=i(ne),_h=n(ne,"LI",{});var xCe=s(_h);XY=n(xCe,"STRONG",{});var xqr=s(XY);Eoo=r(xqr,"convnext"),xqr.forEach(t),yoo=r(xCe," \u2014 "),FR=n(xCe,"A",{href:!0});var kqr=s(FR);woo=r(kqr,"ConvNextFeatureExtractor"),kqr.forEach(t),Aoo=r(xCe," (ConvNext model)"),xCe.forEach(t),Loo=i(ne),uh=n(ne,"LI",{});var kCe=s(uh);VY=n(kCe,"STRONG",{});var Rqr=s(VY);Boo=r(Rqr,"deit"),Rqr.forEach(t),xoo=r(kCe," \u2014 "),CR=n(kCe,"A",{href:!0});var Sqr=s(CR);koo=r(Sqr,"DeiTFeatureExtractor"),Sqr.forEach(t),Roo=r(kCe," (DeiT model)"),kCe.forEach(t),Soo=i(ne),bh=n(ne,"LI",{});var RCe=s(bh);zY=n(RCe,"STRONG",{});var Pqr=s(zY);Poo=r(Pqr,"detr"),Pqr.forEach(t),$oo=r(RCe," \u2014 "),MR=n(RCe,"A",{href:!0});var $qr=s(MR);Ioo=r($qr,"DetrFeatureExtractor"),$qr.forEach(t),Doo=r(RCe," (DETR model)"),RCe.forEach(t),Noo=i(ne),vh=n(ne,"LI",{});var SCe=s(vh);WY=n(SCe,"STRONG",{});var Iqr=s(WY);joo=r(Iqr,"hubert"),Iqr.forEach(t),qoo=r(SCe," \u2014 "),ER=n(SCe,"A",{href:!0});var Dqr=s(ER);Goo=r(Dqr,"Wav2Vec2FeatureExtractor"),Dqr.forEach(t),Ooo=r(SCe," (Hubert model)"),SCe.forEach(t),Xoo=i(ne),Th=n(ne,"LI",{});var PCe=s(Th);QY=n(PCe,"STRONG",{});var Nqr=s(QY);Voo=r(Nqr,"layoutlmv2"),Nqr.forEach(t),zoo=r(PCe," \u2014 "),yR=n(PCe,"A",{href:!0});var jqr=s(yR);Woo=r(jqr,"LayoutLMv2FeatureExtractor"),jqr.forEach(t),Qoo=r(PCe," (LayoutLMv2 model)"),PCe.forEach(t),Hoo=i(ne),Fh=n(ne,"LI",{});var $Ce=s(Fh);HY=n($Ce,"STRONG",{});var qqr=s(HY);Uoo=r(qqr,"maskformer"),qqr.forEach(t),Joo=r($Ce," \u2014 "),wR=n($Ce,"A",{href:!0});var Gqr=s(wR);Yoo=r(Gqr,"MaskFormerFeatureExtractor"),Gqr.forEach(t),Koo=r($Ce," (MaskFormer model)"),$Ce.forEach(t),Zoo=i(ne),Ch=n(ne,"LI",{});var ICe=s(Ch);UY=n(ICe,"STRONG",{});var Oqr=s(UY);ero=r(Oqr,"perceiver"),Oqr.forEach(t),oro=r(ICe," \u2014 "),AR=n(ICe,"A",{href:!0});var Xqr=s(AR);rro=r(Xqr,"PerceiverFeatureExtractor"),Xqr.forEach(t),tro=r(ICe," (Perceiver model)"),ICe.forEach(t),aro=i(ne),Mh=n(ne,"LI",{});var DCe=s(Mh);JY=n(DCe,"STRONG",{});var Vqr=s(JY);nro=r(Vqr,"poolformer"),Vqr.forEach(t),sro=r(DCe," \u2014 "),LR=n(DCe,"A",{href:!0});var zqr=s(LR);lro=r(zqr,"PoolFormerFeatureExtractor"),zqr.forEach(t),iro=r(DCe," (PoolFormer model)"),DCe.forEach(t),dro=i(ne),Eh=n(ne,"LI",{});var NCe=s(Eh);YY=n(NCe,"STRONG",{});var Wqr=s(YY);cro=r(Wqr,"resnet"),Wqr.forEach(t),fro=r(NCe," \u2014 "),BR=n(NCe,"A",{href:!0});var Qqr=s(BR);mro=r(Qqr,"ConvNextFeatureExtractor"),Qqr.forEach(t),gro=r(NCe," (ResNet model)"),NCe.forEach(t),hro=i(ne),yh=n(ne,"LI",{});var jCe=s(yh);KY=n(jCe,"STRONG",{});var Hqr=s(KY);pro=r(Hqr,"segformer"),Hqr.forEach(t),_ro=r(jCe," \u2014 "),xR=n(jCe,"A",{href:!0});var Uqr=s(xR);uro=r(Uqr,"SegformerFeatureExtractor"),Uqr.forEach(t),bro=r(jCe," (SegFormer model)"),jCe.forEach(t),vro=i(ne),wh=n(ne,"LI",{});var qCe=s(wh);ZY=n(qCe,"STRONG",{});var Jqr=s(ZY);Tro=r(Jqr,"speech_to_text"),Jqr.forEach(t),Fro=r(qCe," \u2014 "),kR=n(qCe,"A",{href:!0});var Yqr=s(kR);Cro=r(Yqr,"Speech2TextFeatureExtractor"),Yqr.forEach(t),Mro=r(qCe," (Speech2Text model)"),qCe.forEach(t),Ero=i(ne),Ah=n(ne,"LI",{});var GCe=s(Ah);eK=n(GCe,"STRONG",{});var Kqr=s(eK);yro=r(Kqr,"swin"),Kqr.forEach(t),wro=r(GCe," \u2014 "),RR=n(GCe,"A",{href:!0});var Zqr=s(RR);Aro=r(Zqr,"ViTFeatureExtractor"),Zqr.forEach(t),Lro=r(GCe," (Swin model)"),GCe.forEach(t),Bro=i(ne),Lh=n(ne,"LI",{});var OCe=s(Lh);oK=n(OCe,"STRONG",{});var eGr=s(oK);xro=r(eGr,"van"),eGr.forEach(t),kro=r(OCe," \u2014 "),SR=n(OCe,"A",{href:!0});var oGr=s(SR);Rro=r(oGr,"ConvNextFeatureExtractor"),oGr.forEach(t),Sro=r(OCe," (VAN model)"),OCe.forEach(t),Pro=i(ne),Bh=n(ne,"LI",{});var XCe=s(Bh);rK=n(XCe,"STRONG",{});var rGr=s(rK);$ro=r(rGr,"vit"),rGr.forEach(t),Iro=r(XCe," \u2014 "),PR=n(XCe,"A",{href:!0});var tGr=s(PR);Dro=r(tGr,"ViTFeatureExtractor"),tGr.forEach(t),Nro=r(XCe," (ViT model)"),XCe.forEach(t),jro=i(ne),xh=n(ne,"LI",{});var VCe=s(xh);tK=n(VCe,"STRONG",{});var aGr=s(tK);qro=r(aGr,"vit_mae"),aGr.forEach(t),Gro=r(VCe," \u2014 "),$R=n(VCe,"A",{href:!0});var nGr=s($R);Oro=r(nGr,"ViTFeatureExtractor"),nGr.forEach(t),Xro=r(VCe," (ViTMAE model)"),VCe.forEach(t),Vro=i(ne),kh=n(ne,"LI",{});var zCe=s(kh);aK=n(zCe,"STRONG",{});var sGr=s(aK);zro=r(sGr,"wav2vec2"),sGr.forEach(t),Wro=r(zCe," \u2014 "),IR=n(zCe,"A",{href:!0});var lGr=s(IR);Qro=r(lGr,"Wav2Vec2FeatureExtractor"),lGr.forEach(t),Hro=r(zCe," (Wav2Vec2 model)"),zCe.forEach(t),ne.forEach(t),Uro=i(Nt),m(Rh.$$.fragment,Nt),Jro=i(Nt),nK=n(Nt,"P",{});var iGr=s(nK);Yro=r(iGr,"Examples:"),iGr.forEach(t),Kro=i(Nt),m(NE.$$.fragment,Nt),Nt.forEach(t),Zro=i(Vs),Sh=n(Vs,"DIV",{class:!0});var WSe=s(Sh);m(jE.$$.fragment,WSe),eto=i(WSe),sK=n(WSe,"P",{});var dGr=s(sK);oto=r(dGr,"Register a new feature extractor for this class."),dGr.forEach(t),WSe.forEach(t),Vs.forEach(t),qke=i(c),Hi=n(c,"H2",{class:!0});var QSe=s(Hi);Ph=n(QSe,"A",{id:!0,class:!0,href:!0});var cGr=s(Ph);lK=n(cGr,"SPAN",{});var fGr=s(lK);m(qE.$$.fragment,fGr),fGr.forEach(t),cGr.forEach(t),rto=i(QSe),iK=n(QSe,"SPAN",{});var mGr=s(iK);tto=r(mGr,"AutoProcessor"),mGr.forEach(t),QSe.forEach(t),Gke=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(GE.$$.fragment,zs),ato=i(zs),OE=n(zs,"P",{});var HSe=s(OE);nto=r(HSe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),DR=n(HSe,"A",{href:!0});var gGr=s(DR);sto=r(gGr,"AutoProcessor.from_pretrained()"),gGr.forEach(t),lto=r(HSe," class method."),HSe.forEach(t),ito=i(zs),XE=n(zs,"P",{});var USe=s(XE);dto=r(USe,"This class cannot be instantiated directly using "),dK=n(USe,"CODE",{});var hGr=s(dK);cto=r(hGr,"__init__()"),hGr.forEach(t),fto=r(USe," (throws an error)."),USe.forEach(t),mto=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);m(VE.$$.fragment,jt),gto=i(jt),cK=n(jt,"P",{});var pGr=s(cK);hto=r(pGr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),pGr.forEach(t),pto=i(jt),Ui=n(jt,"P",{});var iW=s(Ui);_to=r(iW,"The processor class to instantiate is selected based on the "),fK=n(iW,"CODE",{});var _Gr=s(fK);uto=r(_Gr,"model_type"),_Gr.forEach(t),bto=r(iW,` property of the config object (either
passed as an argument or loaded from `),mK=n(iW,"CODE",{});var uGr=s(mK);vto=r(uGr,"pretrained_model_name_or_path"),uGr.forEach(t),Tto=r(iW," if possible):"),iW.forEach(t),Fto=i(jt),xe=n(jt,"UL",{});var jo=s(xe);$h=n(jo,"LI",{});var WCe=s($h);gK=n(WCe,"STRONG",{});var bGr=s(gK);Cto=r(bGr,"clip"),bGr.forEach(t),Mto=r(WCe," \u2014 "),NR=n(WCe,"A",{href:!0});var vGr=s(NR);Eto=r(vGr,"CLIPProcessor"),vGr.forEach(t),yto=r(WCe," (CLIP model)"),WCe.forEach(t),wto=i(jo),Ih=n(jo,"LI",{});var QCe=s(Ih);hK=n(QCe,"STRONG",{});var TGr=s(hK);Ato=r(TGr,"layoutlmv2"),TGr.forEach(t),Lto=r(QCe," \u2014 "),jR=n(QCe,"A",{href:!0});var FGr=s(jR);Bto=r(FGr,"LayoutLMv2Processor"),FGr.forEach(t),xto=r(QCe," (LayoutLMv2 model)"),QCe.forEach(t),kto=i(jo),Dh=n(jo,"LI",{});var HCe=s(Dh);pK=n(HCe,"STRONG",{});var CGr=s(pK);Rto=r(CGr,"layoutxlm"),CGr.forEach(t),Sto=r(HCe," \u2014 "),qR=n(HCe,"A",{href:!0});var MGr=s(qR);Pto=r(MGr,"LayoutXLMProcessor"),MGr.forEach(t),$to=r(HCe," (LayoutXLM model)"),HCe.forEach(t),Ito=i(jo),Nh=n(jo,"LI",{});var UCe=s(Nh);_K=n(UCe,"STRONG",{});var EGr=s(_K);Dto=r(EGr,"speech_to_text"),EGr.forEach(t),Nto=r(UCe," \u2014 "),GR=n(UCe,"A",{href:!0});var yGr=s(GR);jto=r(yGr,"Speech2TextProcessor"),yGr.forEach(t),qto=r(UCe," (Speech2Text model)"),UCe.forEach(t),Gto=i(jo),jh=n(jo,"LI",{});var JCe=s(jh);uK=n(JCe,"STRONG",{});var wGr=s(uK);Oto=r(wGr,"speech_to_text_2"),wGr.forEach(t),Xto=r(JCe," \u2014 "),OR=n(JCe,"A",{href:!0});var AGr=s(OR);Vto=r(AGr,"Speech2Text2Processor"),AGr.forEach(t),zto=r(JCe," (Speech2Text2 model)"),JCe.forEach(t),Wto=i(jo),qh=n(jo,"LI",{});var YCe=s(qh);bK=n(YCe,"STRONG",{});var LGr=s(bK);Qto=r(LGr,"trocr"),LGr.forEach(t),Hto=r(YCe," \u2014 "),XR=n(YCe,"A",{href:!0});var BGr=s(XR);Uto=r(BGr,"TrOCRProcessor"),BGr.forEach(t),Jto=r(YCe," (TrOCR model)"),YCe.forEach(t),Yto=i(jo),Gh=n(jo,"LI",{});var KCe=s(Gh);vK=n(KCe,"STRONG",{});var xGr=s(vK);Kto=r(xGr,"vision-text-dual-encoder"),xGr.forEach(t),Zto=r(KCe," \u2014 "),VR=n(KCe,"A",{href:!0});var kGr=s(VR);eao=r(kGr,"VisionTextDualEncoderProcessor"),kGr.forEach(t),oao=r(KCe," (VisionTextDualEncoder model)"),KCe.forEach(t),rao=i(jo),Oh=n(jo,"LI",{});var ZCe=s(Oh);TK=n(ZCe,"STRONG",{});var RGr=s(TK);tao=r(RGr,"wav2vec2"),RGr.forEach(t),aao=r(ZCe," \u2014 "),zR=n(ZCe,"A",{href:!0});var SGr=s(zR);nao=r(SGr,"Wav2Vec2Processor"),SGr.forEach(t),sao=r(ZCe," (Wav2Vec2 model)"),ZCe.forEach(t),jo.forEach(t),lao=i(jt),m(Xh.$$.fragment,jt),iao=i(jt),FK=n(jt,"P",{});var PGr=s(FK);dao=r(PGr,"Examples:"),PGr.forEach(t),cao=i(jt),m(zE.$$.fragment,jt),jt.forEach(t),fao=i(zs),Vh=n(zs,"DIV",{class:!0});var JSe=s(Vh);m(WE.$$.fragment,JSe),mao=i(JSe),CK=n(JSe,"P",{});var $Gr=s(CK);gao=r($Gr,"Register a new processor for this class."),$Gr.forEach(t),JSe.forEach(t),zs.forEach(t),Oke=i(c),Ji=n(c,"H2",{class:!0});var YSe=s(Ji);zh=n(YSe,"A",{id:!0,class:!0,href:!0});var IGr=s(zh);MK=n(IGr,"SPAN",{});var DGr=s(MK);m(QE.$$.fragment,DGr),DGr.forEach(t),IGr.forEach(t),hao=i(YSe),EK=n(YSe,"SPAN",{});var NGr=s(EK);pao=r(NGr,"AutoModel"),NGr.forEach(t),YSe.forEach(t),Xke=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(HE.$$.fragment,Ws),_ao=i(Ws),Yi=n(Ws,"P",{});var dW=s(Yi);uao=r(dW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yK=n(dW,"CODE",{});var jGr=s(yK);bao=r(jGr,"from_pretrained()"),jGr.forEach(t),vao=r(dW,"class method or the "),wK=n(dW,"CODE",{});var qGr=s(wK);Tao=r(qGr,"from_config()"),qGr.forEach(t),Fao=r(dW,`class
method.`),dW.forEach(t),Cao=i(Ws),UE=n(Ws,"P",{});var KSe=s(UE);Mao=r(KSe,"This class cannot be instantiated directly using "),AK=n(KSe,"CODE",{});var GGr=s(AK);Eao=r(GGr,"__init__()"),GGr.forEach(t),yao=r(KSe," (throws an error)."),KSe.forEach(t),wao=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);m(JE.$$.fragment,Qs),Aao=i(Qs),LK=n(Qs,"P",{});var OGr=s(LK);Lao=r(OGr,"Instantiates one of the base model classes of the library from a configuration."),OGr.forEach(t),Bao=i(Qs),Ki=n(Qs,"P",{});var cW=s(Ki);xao=r(cW,`Note:
Loading a model from its configuration file does `),BK=n(cW,"STRONG",{});var XGr=s(BK);kao=r(XGr,"not"),XGr.forEach(t),Rao=r(cW,` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=n(cW,"CODE",{});var VGr=s(xK);Sao=r(VGr,"from_pretrained()"),VGr.forEach(t),Pao=r(cW,"to load the model weights."),cW.forEach(t),$ao=i(Qs),kK=n(Qs,"P",{});var zGr=s(kK);Iao=r(zGr,"Examples:"),zGr.forEach(t),Dao=i(Qs),m(YE.$$.fragment,Qs),Qs.forEach(t),Nao=i(Ws),De=n(Ws,"DIV",{class:!0});var qt=s(De);m(KE.$$.fragment,qt),jao=i(qt),RK=n(qt,"P",{});var WGr=s(RK);qao=r(WGr,"Instantiate one of the base model classes of the library from a pretrained model."),WGr.forEach(t),Gao=i(qt),Va=n(qt,"P",{});var u4=s(Va);Oao=r(u4,"The model class to instantiate is selected based on the "),SK=n(u4,"CODE",{});var QGr=s(SK);Xao=r(QGr,"model_type"),QGr.forEach(t),Vao=r(u4,` property of the config object (either
passed as an argument or loaded from `),PK=n(u4,"CODE",{});var HGr=s(PK);zao=r(HGr,"pretrained_model_name_or_path"),HGr.forEach(t),Wao=r(u4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$K=n(u4,"CODE",{});var UGr=s($K);Qao=r(UGr,"pretrained_model_name_or_path"),UGr.forEach(t),Hao=r(u4,":"),u4.forEach(t),Uao=i(qt),F=n(qt,"UL",{});var C=s(F);Wh=n(C,"LI",{});var eMe=s(Wh);IK=n(eMe,"STRONG",{});var JGr=s(IK);Jao=r(JGr,"albert"),JGr.forEach(t),Yao=r(eMe," \u2014 "),WR=n(eMe,"A",{href:!0});var YGr=s(WR);Kao=r(YGr,"AlbertModel"),YGr.forEach(t),Zao=r(eMe," (ALBERT model)"),eMe.forEach(t),eno=i(C),Qh=n(C,"LI",{});var oMe=s(Qh);DK=n(oMe,"STRONG",{});var KGr=s(DK);ono=r(KGr,"bart"),KGr.forEach(t),rno=r(oMe," \u2014 "),QR=n(oMe,"A",{href:!0});var ZGr=s(QR);tno=r(ZGr,"BartModel"),ZGr.forEach(t),ano=r(oMe," (BART model)"),oMe.forEach(t),nno=i(C),Hh=n(C,"LI",{});var rMe=s(Hh);NK=n(rMe,"STRONG",{});var eOr=s(NK);sno=r(eOr,"beit"),eOr.forEach(t),lno=r(rMe," \u2014 "),HR=n(rMe,"A",{href:!0});var oOr=s(HR);ino=r(oOr,"BeitModel"),oOr.forEach(t),dno=r(rMe," (BEiT model)"),rMe.forEach(t),cno=i(C),Uh=n(C,"LI",{});var tMe=s(Uh);jK=n(tMe,"STRONG",{});var rOr=s(jK);fno=r(rOr,"bert"),rOr.forEach(t),mno=r(tMe," \u2014 "),UR=n(tMe,"A",{href:!0});var tOr=s(UR);gno=r(tOr,"BertModel"),tOr.forEach(t),hno=r(tMe," (BERT model)"),tMe.forEach(t),pno=i(C),Jh=n(C,"LI",{});var aMe=s(Jh);qK=n(aMe,"STRONG",{});var aOr=s(qK);_no=r(aOr,"bert-generation"),aOr.forEach(t),uno=r(aMe," \u2014 "),JR=n(aMe,"A",{href:!0});var nOr=s(JR);bno=r(nOr,"BertGenerationEncoder"),nOr.forEach(t),vno=r(aMe," (Bert Generation model)"),aMe.forEach(t),Tno=i(C),Yh=n(C,"LI",{});var nMe=s(Yh);GK=n(nMe,"STRONG",{});var sOr=s(GK);Fno=r(sOr,"big_bird"),sOr.forEach(t),Cno=r(nMe," \u2014 "),YR=n(nMe,"A",{href:!0});var lOr=s(YR);Mno=r(lOr,"BigBirdModel"),lOr.forEach(t),Eno=r(nMe," (BigBird model)"),nMe.forEach(t),yno=i(C),Kh=n(C,"LI",{});var sMe=s(Kh);OK=n(sMe,"STRONG",{});var iOr=s(OK);wno=r(iOr,"bigbird_pegasus"),iOr.forEach(t),Ano=r(sMe," \u2014 "),KR=n(sMe,"A",{href:!0});var dOr=s(KR);Lno=r(dOr,"BigBirdPegasusModel"),dOr.forEach(t),Bno=r(sMe," (BigBirdPegasus model)"),sMe.forEach(t),xno=i(C),Zh=n(C,"LI",{});var lMe=s(Zh);XK=n(lMe,"STRONG",{});var cOr=s(XK);kno=r(cOr,"blenderbot"),cOr.forEach(t),Rno=r(lMe," \u2014 "),ZR=n(lMe,"A",{href:!0});var fOr=s(ZR);Sno=r(fOr,"BlenderbotModel"),fOr.forEach(t),Pno=r(lMe," (Blenderbot model)"),lMe.forEach(t),$no=i(C),ep=n(C,"LI",{});var iMe=s(ep);VK=n(iMe,"STRONG",{});var mOr=s(VK);Ino=r(mOr,"blenderbot-small"),mOr.forEach(t),Dno=r(iMe," \u2014 "),eS=n(iMe,"A",{href:!0});var gOr=s(eS);Nno=r(gOr,"BlenderbotSmallModel"),gOr.forEach(t),jno=r(iMe," (BlenderbotSmall model)"),iMe.forEach(t),qno=i(C),op=n(C,"LI",{});var dMe=s(op);zK=n(dMe,"STRONG",{});var hOr=s(zK);Gno=r(hOr,"camembert"),hOr.forEach(t),Ono=r(dMe," \u2014 "),oS=n(dMe,"A",{href:!0});var pOr=s(oS);Xno=r(pOr,"CamembertModel"),pOr.forEach(t),Vno=r(dMe," (CamemBERT model)"),dMe.forEach(t),zno=i(C),rp=n(C,"LI",{});var cMe=s(rp);WK=n(cMe,"STRONG",{});var _Or=s(WK);Wno=r(_Or,"canine"),_Or.forEach(t),Qno=r(cMe," \u2014 "),rS=n(cMe,"A",{href:!0});var uOr=s(rS);Hno=r(uOr,"CanineModel"),uOr.forEach(t),Uno=r(cMe," (Canine model)"),cMe.forEach(t),Jno=i(C),tp=n(C,"LI",{});var fMe=s(tp);QK=n(fMe,"STRONG",{});var bOr=s(QK);Yno=r(bOr,"clip"),bOr.forEach(t),Kno=r(fMe," \u2014 "),tS=n(fMe,"A",{href:!0});var vOr=s(tS);Zno=r(vOr,"CLIPModel"),vOr.forEach(t),eso=r(fMe," (CLIP model)"),fMe.forEach(t),oso=i(C),ap=n(C,"LI",{});var mMe=s(ap);HK=n(mMe,"STRONG",{});var TOr=s(HK);rso=r(TOr,"convbert"),TOr.forEach(t),tso=r(mMe," \u2014 "),aS=n(mMe,"A",{href:!0});var FOr=s(aS);aso=r(FOr,"ConvBertModel"),FOr.forEach(t),nso=r(mMe," (ConvBERT model)"),mMe.forEach(t),sso=i(C),np=n(C,"LI",{});var gMe=s(np);UK=n(gMe,"STRONG",{});var COr=s(UK);lso=r(COr,"convnext"),COr.forEach(t),iso=r(gMe," \u2014 "),nS=n(gMe,"A",{href:!0});var MOr=s(nS);dso=r(MOr,"ConvNextModel"),MOr.forEach(t),cso=r(gMe," (ConvNext model)"),gMe.forEach(t),fso=i(C),sp=n(C,"LI",{});var hMe=s(sp);JK=n(hMe,"STRONG",{});var EOr=s(JK);mso=r(EOr,"ctrl"),EOr.forEach(t),gso=r(hMe," \u2014 "),sS=n(hMe,"A",{href:!0});var yOr=s(sS);hso=r(yOr,"CTRLModel"),yOr.forEach(t),pso=r(hMe," (CTRL model)"),hMe.forEach(t),_so=i(C),lp=n(C,"LI",{});var pMe=s(lp);YK=n(pMe,"STRONG",{});var wOr=s(YK);uso=r(wOr,"data2vec-audio"),wOr.forEach(t),bso=r(pMe," \u2014 "),lS=n(pMe,"A",{href:!0});var AOr=s(lS);vso=r(AOr,"Data2VecAudioModel"),AOr.forEach(t),Tso=r(pMe," (Data2VecAudio model)"),pMe.forEach(t),Fso=i(C),ip=n(C,"LI",{});var _Me=s(ip);KK=n(_Me,"STRONG",{});var LOr=s(KK);Cso=r(LOr,"data2vec-text"),LOr.forEach(t),Mso=r(_Me," \u2014 "),iS=n(_Me,"A",{href:!0});var BOr=s(iS);Eso=r(BOr,"Data2VecTextModel"),BOr.forEach(t),yso=r(_Me," (Data2VecText model)"),_Me.forEach(t),wso=i(C),dp=n(C,"LI",{});var uMe=s(dp);ZK=n(uMe,"STRONG",{});var xOr=s(ZK);Aso=r(xOr,"deberta"),xOr.forEach(t),Lso=r(uMe," \u2014 "),dS=n(uMe,"A",{href:!0});var kOr=s(dS);Bso=r(kOr,"DebertaModel"),kOr.forEach(t),xso=r(uMe," (DeBERTa model)"),uMe.forEach(t),kso=i(C),cp=n(C,"LI",{});var bMe=s(cp);eZ=n(bMe,"STRONG",{});var ROr=s(eZ);Rso=r(ROr,"deberta-v2"),ROr.forEach(t),Sso=r(bMe," \u2014 "),cS=n(bMe,"A",{href:!0});var SOr=s(cS);Pso=r(SOr,"DebertaV2Model"),SOr.forEach(t),$so=r(bMe," (DeBERTa-v2 model)"),bMe.forEach(t),Iso=i(C),fp=n(C,"LI",{});var vMe=s(fp);oZ=n(vMe,"STRONG",{});var POr=s(oZ);Dso=r(POr,"decision_transformer"),POr.forEach(t),Nso=r(vMe," \u2014 "),fS=n(vMe,"A",{href:!0});var $Or=s(fS);jso=r($Or,"DecisionTransformerModel"),$Or.forEach(t),qso=r(vMe," (Decision Transformer model)"),vMe.forEach(t),Gso=i(C),mp=n(C,"LI",{});var TMe=s(mp);rZ=n(TMe,"STRONG",{});var IOr=s(rZ);Oso=r(IOr,"deit"),IOr.forEach(t),Xso=r(TMe," \u2014 "),mS=n(TMe,"A",{href:!0});var DOr=s(mS);Vso=r(DOr,"DeiTModel"),DOr.forEach(t),zso=r(TMe," (DeiT model)"),TMe.forEach(t),Wso=i(C),gp=n(C,"LI",{});var FMe=s(gp);tZ=n(FMe,"STRONG",{});var NOr=s(tZ);Qso=r(NOr,"detr"),NOr.forEach(t),Hso=r(FMe," \u2014 "),gS=n(FMe,"A",{href:!0});var jOr=s(gS);Uso=r(jOr,"DetrModel"),jOr.forEach(t),Jso=r(FMe," (DETR model)"),FMe.forEach(t),Yso=i(C),hp=n(C,"LI",{});var CMe=s(hp);aZ=n(CMe,"STRONG",{});var qOr=s(aZ);Kso=r(qOr,"distilbert"),qOr.forEach(t),Zso=r(CMe," \u2014 "),hS=n(CMe,"A",{href:!0});var GOr=s(hS);elo=r(GOr,"DistilBertModel"),GOr.forEach(t),olo=r(CMe," (DistilBERT model)"),CMe.forEach(t),rlo=i(C),pp=n(C,"LI",{});var MMe=s(pp);nZ=n(MMe,"STRONG",{});var OOr=s(nZ);tlo=r(OOr,"dpr"),OOr.forEach(t),alo=r(MMe," \u2014 "),pS=n(MMe,"A",{href:!0});var XOr=s(pS);nlo=r(XOr,"DPRQuestionEncoder"),XOr.forEach(t),slo=r(MMe," (DPR model)"),MMe.forEach(t),llo=i(C),_p=n(C,"LI",{});var EMe=s(_p);sZ=n(EMe,"STRONG",{});var VOr=s(sZ);ilo=r(VOr,"dpt"),VOr.forEach(t),dlo=r(EMe," \u2014 "),_S=n(EMe,"A",{href:!0});var zOr=s(_S);clo=r(zOr,"DPTModel"),zOr.forEach(t),flo=r(EMe," (DPT model)"),EMe.forEach(t),mlo=i(C),up=n(C,"LI",{});var yMe=s(up);lZ=n(yMe,"STRONG",{});var WOr=s(lZ);glo=r(WOr,"electra"),WOr.forEach(t),hlo=r(yMe," \u2014 "),uS=n(yMe,"A",{href:!0});var QOr=s(uS);plo=r(QOr,"ElectraModel"),QOr.forEach(t),_lo=r(yMe," (ELECTRA model)"),yMe.forEach(t),ulo=i(C),bp=n(C,"LI",{});var wMe=s(bp);iZ=n(wMe,"STRONG",{});var HOr=s(iZ);blo=r(HOr,"flaubert"),HOr.forEach(t),vlo=r(wMe," \u2014 "),bS=n(wMe,"A",{href:!0});var UOr=s(bS);Tlo=r(UOr,"FlaubertModel"),UOr.forEach(t),Flo=r(wMe," (FlauBERT model)"),wMe.forEach(t),Clo=i(C),vp=n(C,"LI",{});var AMe=s(vp);dZ=n(AMe,"STRONG",{});var JOr=s(dZ);Mlo=r(JOr,"fnet"),JOr.forEach(t),Elo=r(AMe," \u2014 "),vS=n(AMe,"A",{href:!0});var YOr=s(vS);ylo=r(YOr,"FNetModel"),YOr.forEach(t),wlo=r(AMe," (FNet model)"),AMe.forEach(t),Alo=i(C),Tp=n(C,"LI",{});var LMe=s(Tp);cZ=n(LMe,"STRONG",{});var KOr=s(cZ);Llo=r(KOr,"fsmt"),KOr.forEach(t),Blo=r(LMe," \u2014 "),TS=n(LMe,"A",{href:!0});var ZOr=s(TS);xlo=r(ZOr,"FSMTModel"),ZOr.forEach(t),klo=r(LMe," (FairSeq Machine-Translation model)"),LMe.forEach(t),Rlo=i(C),js=n(C,"LI",{});var r8=s(js);fZ=n(r8,"STRONG",{});var eXr=s(fZ);Slo=r(eXr,"funnel"),eXr.forEach(t),Plo=r(r8," \u2014 "),FS=n(r8,"A",{href:!0});var oXr=s(FS);$lo=r(oXr,"FunnelModel"),oXr.forEach(t),Ilo=r(r8," or "),CS=n(r8,"A",{href:!0});var rXr=s(CS);Dlo=r(rXr,"FunnelBaseModel"),rXr.forEach(t),Nlo=r(r8," (Funnel Transformer model)"),r8.forEach(t),jlo=i(C),Fp=n(C,"LI",{});var BMe=s(Fp);mZ=n(BMe,"STRONG",{});var tXr=s(mZ);qlo=r(tXr,"glpn"),tXr.forEach(t),Glo=r(BMe," \u2014 "),MS=n(BMe,"A",{href:!0});var aXr=s(MS);Olo=r(aXr,"GLPNModel"),aXr.forEach(t),Xlo=r(BMe," (GLPN model)"),BMe.forEach(t),Vlo=i(C),Cp=n(C,"LI",{});var xMe=s(Cp);gZ=n(xMe,"STRONG",{});var nXr=s(gZ);zlo=r(nXr,"gpt2"),nXr.forEach(t),Wlo=r(xMe," \u2014 "),ES=n(xMe,"A",{href:!0});var sXr=s(ES);Qlo=r(sXr,"GPT2Model"),sXr.forEach(t),Hlo=r(xMe," (OpenAI GPT-2 model)"),xMe.forEach(t),Ulo=i(C),Mp=n(C,"LI",{});var kMe=s(Mp);hZ=n(kMe,"STRONG",{});var lXr=s(hZ);Jlo=r(lXr,"gpt_neo"),lXr.forEach(t),Ylo=r(kMe," \u2014 "),yS=n(kMe,"A",{href:!0});var iXr=s(yS);Klo=r(iXr,"GPTNeoModel"),iXr.forEach(t),Zlo=r(kMe," (GPT Neo model)"),kMe.forEach(t),eio=i(C),Ep=n(C,"LI",{});var RMe=s(Ep);pZ=n(RMe,"STRONG",{});var dXr=s(pZ);oio=r(dXr,"gptj"),dXr.forEach(t),rio=r(RMe," \u2014 "),wS=n(RMe,"A",{href:!0});var cXr=s(wS);tio=r(cXr,"GPTJModel"),cXr.forEach(t),aio=r(RMe," (GPT-J model)"),RMe.forEach(t),nio=i(C),yp=n(C,"LI",{});var SMe=s(yp);_Z=n(SMe,"STRONG",{});var fXr=s(_Z);sio=r(fXr,"hubert"),fXr.forEach(t),lio=r(SMe," \u2014 "),AS=n(SMe,"A",{href:!0});var mXr=s(AS);iio=r(mXr,"HubertModel"),mXr.forEach(t),dio=r(SMe," (Hubert model)"),SMe.forEach(t),cio=i(C),wp=n(C,"LI",{});var PMe=s(wp);uZ=n(PMe,"STRONG",{});var gXr=s(uZ);fio=r(gXr,"ibert"),gXr.forEach(t),mio=r(PMe," \u2014 "),LS=n(PMe,"A",{href:!0});var hXr=s(LS);gio=r(hXr,"IBertModel"),hXr.forEach(t),hio=r(PMe," (I-BERT model)"),PMe.forEach(t),pio=i(C),Ap=n(C,"LI",{});var $Me=s(Ap);bZ=n($Me,"STRONG",{});var pXr=s(bZ);_io=r(pXr,"imagegpt"),pXr.forEach(t),uio=r($Me," \u2014 "),BS=n($Me,"A",{href:!0});var _Xr=s(BS);bio=r(_Xr,"ImageGPTModel"),_Xr.forEach(t),vio=r($Me," (ImageGPT model)"),$Me.forEach(t),Tio=i(C),Lp=n(C,"LI",{});var IMe=s(Lp);vZ=n(IMe,"STRONG",{});var uXr=s(vZ);Fio=r(uXr,"layoutlm"),uXr.forEach(t),Cio=r(IMe," \u2014 "),xS=n(IMe,"A",{href:!0});var bXr=s(xS);Mio=r(bXr,"LayoutLMModel"),bXr.forEach(t),Eio=r(IMe," (LayoutLM model)"),IMe.forEach(t),yio=i(C),Bp=n(C,"LI",{});var DMe=s(Bp);TZ=n(DMe,"STRONG",{});var vXr=s(TZ);wio=r(vXr,"layoutlmv2"),vXr.forEach(t),Aio=r(DMe," \u2014 "),kS=n(DMe,"A",{href:!0});var TXr=s(kS);Lio=r(TXr,"LayoutLMv2Model"),TXr.forEach(t),Bio=r(DMe," (LayoutLMv2 model)"),DMe.forEach(t),xio=i(C),xp=n(C,"LI",{});var NMe=s(xp);FZ=n(NMe,"STRONG",{});var FXr=s(FZ);kio=r(FXr,"led"),FXr.forEach(t),Rio=r(NMe," \u2014 "),RS=n(NMe,"A",{href:!0});var CXr=s(RS);Sio=r(CXr,"LEDModel"),CXr.forEach(t),Pio=r(NMe," (LED model)"),NMe.forEach(t),$io=i(C),kp=n(C,"LI",{});var jMe=s(kp);CZ=n(jMe,"STRONG",{});var MXr=s(CZ);Iio=r(MXr,"longformer"),MXr.forEach(t),Dio=r(jMe," \u2014 "),SS=n(jMe,"A",{href:!0});var EXr=s(SS);Nio=r(EXr,"LongformerModel"),EXr.forEach(t),jio=r(jMe," (Longformer model)"),jMe.forEach(t),qio=i(C),Rp=n(C,"LI",{});var qMe=s(Rp);MZ=n(qMe,"STRONG",{});var yXr=s(MZ);Gio=r(yXr,"luke"),yXr.forEach(t),Oio=r(qMe," \u2014 "),PS=n(qMe,"A",{href:!0});var wXr=s(PS);Xio=r(wXr,"LukeModel"),wXr.forEach(t),Vio=r(qMe," (LUKE model)"),qMe.forEach(t),zio=i(C),Sp=n(C,"LI",{});var GMe=s(Sp);EZ=n(GMe,"STRONG",{});var AXr=s(EZ);Wio=r(AXr,"lxmert"),AXr.forEach(t),Qio=r(GMe," \u2014 "),$S=n(GMe,"A",{href:!0});var LXr=s($S);Hio=r(LXr,"LxmertModel"),LXr.forEach(t),Uio=r(GMe," (LXMERT model)"),GMe.forEach(t),Jio=i(C),Pp=n(C,"LI",{});var OMe=s(Pp);yZ=n(OMe,"STRONG",{});var BXr=s(yZ);Yio=r(BXr,"m2m_100"),BXr.forEach(t),Kio=r(OMe," \u2014 "),IS=n(OMe,"A",{href:!0});var xXr=s(IS);Zio=r(xXr,"M2M100Model"),xXr.forEach(t),edo=r(OMe," (M2M100 model)"),OMe.forEach(t),odo=i(C),$p=n(C,"LI",{});var XMe=s($p);wZ=n(XMe,"STRONG",{});var kXr=s(wZ);rdo=r(kXr,"marian"),kXr.forEach(t),tdo=r(XMe," \u2014 "),DS=n(XMe,"A",{href:!0});var RXr=s(DS);ado=r(RXr,"MarianModel"),RXr.forEach(t),ndo=r(XMe," (Marian model)"),XMe.forEach(t),sdo=i(C),Ip=n(C,"LI",{});var VMe=s(Ip);AZ=n(VMe,"STRONG",{});var SXr=s(AZ);ldo=r(SXr,"maskformer"),SXr.forEach(t),ido=r(VMe," \u2014 "),NS=n(VMe,"A",{href:!0});var PXr=s(NS);ddo=r(PXr,"MaskFormerModel"),PXr.forEach(t),cdo=r(VMe," (MaskFormer model)"),VMe.forEach(t),fdo=i(C),Dp=n(C,"LI",{});var zMe=s(Dp);LZ=n(zMe,"STRONG",{});var $Xr=s(LZ);mdo=r($Xr,"mbart"),$Xr.forEach(t),gdo=r(zMe," \u2014 "),jS=n(zMe,"A",{href:!0});var IXr=s(jS);hdo=r(IXr,"MBartModel"),IXr.forEach(t),pdo=r(zMe," (mBART model)"),zMe.forEach(t),_do=i(C),Np=n(C,"LI",{});var WMe=s(Np);BZ=n(WMe,"STRONG",{});var DXr=s(BZ);udo=r(DXr,"megatron-bert"),DXr.forEach(t),bdo=r(WMe," \u2014 "),qS=n(WMe,"A",{href:!0});var NXr=s(qS);vdo=r(NXr,"MegatronBertModel"),NXr.forEach(t),Tdo=r(WMe," (MegatronBert model)"),WMe.forEach(t),Fdo=i(C),jp=n(C,"LI",{});var QMe=s(jp);xZ=n(QMe,"STRONG",{});var jXr=s(xZ);Cdo=r(jXr,"mobilebert"),jXr.forEach(t),Mdo=r(QMe," \u2014 "),GS=n(QMe,"A",{href:!0});var qXr=s(GS);Edo=r(qXr,"MobileBertModel"),qXr.forEach(t),ydo=r(QMe," (MobileBERT model)"),QMe.forEach(t),wdo=i(C),qp=n(C,"LI",{});var HMe=s(qp);kZ=n(HMe,"STRONG",{});var GXr=s(kZ);Ado=r(GXr,"mpnet"),GXr.forEach(t),Ldo=r(HMe," \u2014 "),OS=n(HMe,"A",{href:!0});var OXr=s(OS);Bdo=r(OXr,"MPNetModel"),OXr.forEach(t),xdo=r(HMe," (MPNet model)"),HMe.forEach(t),kdo=i(C),Gp=n(C,"LI",{});var UMe=s(Gp);RZ=n(UMe,"STRONG",{});var XXr=s(RZ);Rdo=r(XXr,"mt5"),XXr.forEach(t),Sdo=r(UMe," \u2014 "),XS=n(UMe,"A",{href:!0});var VXr=s(XS);Pdo=r(VXr,"MT5Model"),VXr.forEach(t),$do=r(UMe," (mT5 model)"),UMe.forEach(t),Ido=i(C),Op=n(C,"LI",{});var JMe=s(Op);SZ=n(JMe,"STRONG",{});var zXr=s(SZ);Ddo=r(zXr,"nystromformer"),zXr.forEach(t),Ndo=r(JMe," \u2014 "),VS=n(JMe,"A",{href:!0});var WXr=s(VS);jdo=r(WXr,"NystromformerModel"),WXr.forEach(t),qdo=r(JMe," (Nystromformer model)"),JMe.forEach(t),Gdo=i(C),Xp=n(C,"LI",{});var YMe=s(Xp);PZ=n(YMe,"STRONG",{});var QXr=s(PZ);Odo=r(QXr,"openai-gpt"),QXr.forEach(t),Xdo=r(YMe," \u2014 "),zS=n(YMe,"A",{href:!0});var HXr=s(zS);Vdo=r(HXr,"OpenAIGPTModel"),HXr.forEach(t),zdo=r(YMe," (OpenAI GPT model)"),YMe.forEach(t),Wdo=i(C),Vp=n(C,"LI",{});var KMe=s(Vp);$Z=n(KMe,"STRONG",{});var UXr=s($Z);Qdo=r(UXr,"pegasus"),UXr.forEach(t),Hdo=r(KMe," \u2014 "),WS=n(KMe,"A",{href:!0});var JXr=s(WS);Udo=r(JXr,"PegasusModel"),JXr.forEach(t),Jdo=r(KMe," (Pegasus model)"),KMe.forEach(t),Ydo=i(C),zp=n(C,"LI",{});var ZMe=s(zp);IZ=n(ZMe,"STRONG",{});var YXr=s(IZ);Kdo=r(YXr,"perceiver"),YXr.forEach(t),Zdo=r(ZMe," \u2014 "),QS=n(ZMe,"A",{href:!0});var KXr=s(QS);eco=r(KXr,"PerceiverModel"),KXr.forEach(t),oco=r(ZMe," (Perceiver model)"),ZMe.forEach(t),rco=i(C),Wp=n(C,"LI",{});var e4e=s(Wp);DZ=n(e4e,"STRONG",{});var ZXr=s(DZ);tco=r(ZXr,"plbart"),ZXr.forEach(t),aco=r(e4e," \u2014 "),HS=n(e4e,"A",{href:!0});var eVr=s(HS);nco=r(eVr,"PLBartModel"),eVr.forEach(t),sco=r(e4e," (PLBart model)"),e4e.forEach(t),lco=i(C),Qp=n(C,"LI",{});var o4e=s(Qp);NZ=n(o4e,"STRONG",{});var oVr=s(NZ);ico=r(oVr,"poolformer"),oVr.forEach(t),dco=r(o4e," \u2014 "),US=n(o4e,"A",{href:!0});var rVr=s(US);cco=r(rVr,"PoolFormerModel"),rVr.forEach(t),fco=r(o4e," (PoolFormer model)"),o4e.forEach(t),mco=i(C),Hp=n(C,"LI",{});var r4e=s(Hp);jZ=n(r4e,"STRONG",{});var tVr=s(jZ);gco=r(tVr,"prophetnet"),tVr.forEach(t),hco=r(r4e," \u2014 "),JS=n(r4e,"A",{href:!0});var aVr=s(JS);pco=r(aVr,"ProphetNetModel"),aVr.forEach(t),_co=r(r4e," (ProphetNet model)"),r4e.forEach(t),uco=i(C),Up=n(C,"LI",{});var t4e=s(Up);qZ=n(t4e,"STRONG",{});var nVr=s(qZ);bco=r(nVr,"qdqbert"),nVr.forEach(t),vco=r(t4e," \u2014 "),YS=n(t4e,"A",{href:!0});var sVr=s(YS);Tco=r(sVr,"QDQBertModel"),sVr.forEach(t),Fco=r(t4e," (QDQBert model)"),t4e.forEach(t),Cco=i(C),Jp=n(C,"LI",{});var a4e=s(Jp);GZ=n(a4e,"STRONG",{});var lVr=s(GZ);Mco=r(lVr,"reformer"),lVr.forEach(t),Eco=r(a4e," \u2014 "),KS=n(a4e,"A",{href:!0});var iVr=s(KS);yco=r(iVr,"ReformerModel"),iVr.forEach(t),wco=r(a4e," (Reformer model)"),a4e.forEach(t),Aco=i(C),Yp=n(C,"LI",{});var n4e=s(Yp);OZ=n(n4e,"STRONG",{});var dVr=s(OZ);Lco=r(dVr,"rembert"),dVr.forEach(t),Bco=r(n4e," \u2014 "),ZS=n(n4e,"A",{href:!0});var cVr=s(ZS);xco=r(cVr,"RemBertModel"),cVr.forEach(t),kco=r(n4e," (RemBERT model)"),n4e.forEach(t),Rco=i(C),Kp=n(C,"LI",{});var s4e=s(Kp);XZ=n(s4e,"STRONG",{});var fVr=s(XZ);Sco=r(fVr,"resnet"),fVr.forEach(t),Pco=r(s4e," \u2014 "),eP=n(s4e,"A",{href:!0});var mVr=s(eP);$co=r(mVr,"ResNetModel"),mVr.forEach(t),Ico=r(s4e," (ResNet model)"),s4e.forEach(t),Dco=i(C),Zp=n(C,"LI",{});var l4e=s(Zp);VZ=n(l4e,"STRONG",{});var gVr=s(VZ);Nco=r(gVr,"retribert"),gVr.forEach(t),jco=r(l4e," \u2014 "),oP=n(l4e,"A",{href:!0});var hVr=s(oP);qco=r(hVr,"RetriBertModel"),hVr.forEach(t),Gco=r(l4e," (RetriBERT model)"),l4e.forEach(t),Oco=i(C),e_=n(C,"LI",{});var i4e=s(e_);zZ=n(i4e,"STRONG",{});var pVr=s(zZ);Xco=r(pVr,"roberta"),pVr.forEach(t),Vco=r(i4e," \u2014 "),rP=n(i4e,"A",{href:!0});var _Vr=s(rP);zco=r(_Vr,"RobertaModel"),_Vr.forEach(t),Wco=r(i4e," (RoBERTa model)"),i4e.forEach(t),Qco=i(C),o_=n(C,"LI",{});var d4e=s(o_);WZ=n(d4e,"STRONG",{});var uVr=s(WZ);Hco=r(uVr,"roformer"),uVr.forEach(t),Uco=r(d4e," \u2014 "),tP=n(d4e,"A",{href:!0});var bVr=s(tP);Jco=r(bVr,"RoFormerModel"),bVr.forEach(t),Yco=r(d4e," (RoFormer model)"),d4e.forEach(t),Kco=i(C),r_=n(C,"LI",{});var c4e=s(r_);QZ=n(c4e,"STRONG",{});var vVr=s(QZ);Zco=r(vVr,"segformer"),vVr.forEach(t),efo=r(c4e," \u2014 "),aP=n(c4e,"A",{href:!0});var TVr=s(aP);ofo=r(TVr,"SegformerModel"),TVr.forEach(t),rfo=r(c4e," (SegFormer model)"),c4e.forEach(t),tfo=i(C),t_=n(C,"LI",{});var f4e=s(t_);HZ=n(f4e,"STRONG",{});var FVr=s(HZ);afo=r(FVr,"sew"),FVr.forEach(t),nfo=r(f4e," \u2014 "),nP=n(f4e,"A",{href:!0});var CVr=s(nP);sfo=r(CVr,"SEWModel"),CVr.forEach(t),lfo=r(f4e," (SEW model)"),f4e.forEach(t),ifo=i(C),a_=n(C,"LI",{});var m4e=s(a_);UZ=n(m4e,"STRONG",{});var MVr=s(UZ);dfo=r(MVr,"sew-d"),MVr.forEach(t),cfo=r(m4e," \u2014 "),sP=n(m4e,"A",{href:!0});var EVr=s(sP);ffo=r(EVr,"SEWDModel"),EVr.forEach(t),mfo=r(m4e," (SEW-D model)"),m4e.forEach(t),gfo=i(C),n_=n(C,"LI",{});var g4e=s(n_);JZ=n(g4e,"STRONG",{});var yVr=s(JZ);hfo=r(yVr,"speech_to_text"),yVr.forEach(t),pfo=r(g4e," \u2014 "),lP=n(g4e,"A",{href:!0});var wVr=s(lP);_fo=r(wVr,"Speech2TextModel"),wVr.forEach(t),ufo=r(g4e," (Speech2Text model)"),g4e.forEach(t),bfo=i(C),s_=n(C,"LI",{});var h4e=s(s_);YZ=n(h4e,"STRONG",{});var AVr=s(YZ);vfo=r(AVr,"splinter"),AVr.forEach(t),Tfo=r(h4e," \u2014 "),iP=n(h4e,"A",{href:!0});var LVr=s(iP);Ffo=r(LVr,"SplinterModel"),LVr.forEach(t),Cfo=r(h4e," (Splinter model)"),h4e.forEach(t),Mfo=i(C),l_=n(C,"LI",{});var p4e=s(l_);KZ=n(p4e,"STRONG",{});var BVr=s(KZ);Efo=r(BVr,"squeezebert"),BVr.forEach(t),yfo=r(p4e," \u2014 "),dP=n(p4e,"A",{href:!0});var xVr=s(dP);wfo=r(xVr,"SqueezeBertModel"),xVr.forEach(t),Afo=r(p4e," (SqueezeBERT model)"),p4e.forEach(t),Lfo=i(C),i_=n(C,"LI",{});var _4e=s(i_);ZZ=n(_4e,"STRONG",{});var kVr=s(ZZ);Bfo=r(kVr,"swin"),kVr.forEach(t),xfo=r(_4e," \u2014 "),cP=n(_4e,"A",{href:!0});var RVr=s(cP);kfo=r(RVr,"SwinModel"),RVr.forEach(t),Rfo=r(_4e," (Swin model)"),_4e.forEach(t),Sfo=i(C),d_=n(C,"LI",{});var u4e=s(d_);eee=n(u4e,"STRONG",{});var SVr=s(eee);Pfo=r(SVr,"t5"),SVr.forEach(t),$fo=r(u4e," \u2014 "),fP=n(u4e,"A",{href:!0});var PVr=s(fP);Ifo=r(PVr,"T5Model"),PVr.forEach(t),Dfo=r(u4e," (T5 model)"),u4e.forEach(t),Nfo=i(C),c_=n(C,"LI",{});var b4e=s(c_);oee=n(b4e,"STRONG",{});var $Vr=s(oee);jfo=r($Vr,"tapas"),$Vr.forEach(t),qfo=r(b4e," \u2014 "),mP=n(b4e,"A",{href:!0});var IVr=s(mP);Gfo=r(IVr,"TapasModel"),IVr.forEach(t),Ofo=r(b4e," (TAPAS model)"),b4e.forEach(t),Xfo=i(C),f_=n(C,"LI",{});var v4e=s(f_);ree=n(v4e,"STRONG",{});var DVr=s(ree);Vfo=r(DVr,"transfo-xl"),DVr.forEach(t),zfo=r(v4e," \u2014 "),gP=n(v4e,"A",{href:!0});var NVr=s(gP);Wfo=r(NVr,"TransfoXLModel"),NVr.forEach(t),Qfo=r(v4e," (Transformer-XL model)"),v4e.forEach(t),Hfo=i(C),m_=n(C,"LI",{});var T4e=s(m_);tee=n(T4e,"STRONG",{});var jVr=s(tee);Ufo=r(jVr,"unispeech"),jVr.forEach(t),Jfo=r(T4e," \u2014 "),hP=n(T4e,"A",{href:!0});var qVr=s(hP);Yfo=r(qVr,"UniSpeechModel"),qVr.forEach(t),Kfo=r(T4e," (UniSpeech model)"),T4e.forEach(t),Zfo=i(C),g_=n(C,"LI",{});var F4e=s(g_);aee=n(F4e,"STRONG",{});var GVr=s(aee);emo=r(GVr,"unispeech-sat"),GVr.forEach(t),omo=r(F4e," \u2014 "),pP=n(F4e,"A",{href:!0});var OVr=s(pP);rmo=r(OVr,"UniSpeechSatModel"),OVr.forEach(t),tmo=r(F4e," (UniSpeechSat model)"),F4e.forEach(t),amo=i(C),h_=n(C,"LI",{});var C4e=s(h_);nee=n(C4e,"STRONG",{});var XVr=s(nee);nmo=r(XVr,"van"),XVr.forEach(t),smo=r(C4e," \u2014 "),_P=n(C4e,"A",{href:!0});var VVr=s(_P);lmo=r(VVr,"VanModel"),VVr.forEach(t),imo=r(C4e," (VAN model)"),C4e.forEach(t),dmo=i(C),p_=n(C,"LI",{});var M4e=s(p_);see=n(M4e,"STRONG",{});var zVr=s(see);cmo=r(zVr,"vilt"),zVr.forEach(t),fmo=r(M4e," \u2014 "),uP=n(M4e,"A",{href:!0});var WVr=s(uP);mmo=r(WVr,"ViltModel"),WVr.forEach(t),gmo=r(M4e," (ViLT model)"),M4e.forEach(t),hmo=i(C),__=n(C,"LI",{});var E4e=s(__);lee=n(E4e,"STRONG",{});var QVr=s(lee);pmo=r(QVr,"vision-text-dual-encoder"),QVr.forEach(t),_mo=r(E4e," \u2014 "),bP=n(E4e,"A",{href:!0});var HVr=s(bP);umo=r(HVr,"VisionTextDualEncoderModel"),HVr.forEach(t),bmo=r(E4e," (VisionTextDualEncoder model)"),E4e.forEach(t),vmo=i(C),u_=n(C,"LI",{});var y4e=s(u_);iee=n(y4e,"STRONG",{});var UVr=s(iee);Tmo=r(UVr,"visual_bert"),UVr.forEach(t),Fmo=r(y4e," \u2014 "),vP=n(y4e,"A",{href:!0});var JVr=s(vP);Cmo=r(JVr,"VisualBertModel"),JVr.forEach(t),Mmo=r(y4e," (VisualBert model)"),y4e.forEach(t),Emo=i(C),b_=n(C,"LI",{});var w4e=s(b_);dee=n(w4e,"STRONG",{});var YVr=s(dee);ymo=r(YVr,"vit"),YVr.forEach(t),wmo=r(w4e," \u2014 "),TP=n(w4e,"A",{href:!0});var KVr=s(TP);Amo=r(KVr,"ViTModel"),KVr.forEach(t),Lmo=r(w4e," (ViT model)"),w4e.forEach(t),Bmo=i(C),v_=n(C,"LI",{});var A4e=s(v_);cee=n(A4e,"STRONG",{});var ZVr=s(cee);xmo=r(ZVr,"vit_mae"),ZVr.forEach(t),kmo=r(A4e," \u2014 "),FP=n(A4e,"A",{href:!0});var ezr=s(FP);Rmo=r(ezr,"ViTMAEModel"),ezr.forEach(t),Smo=r(A4e," (ViTMAE model)"),A4e.forEach(t),Pmo=i(C),T_=n(C,"LI",{});var L4e=s(T_);fee=n(L4e,"STRONG",{});var ozr=s(fee);$mo=r(ozr,"wav2vec2"),ozr.forEach(t),Imo=r(L4e," \u2014 "),CP=n(L4e,"A",{href:!0});var rzr=s(CP);Dmo=r(rzr,"Wav2Vec2Model"),rzr.forEach(t),Nmo=r(L4e," (Wav2Vec2 model)"),L4e.forEach(t),jmo=i(C),F_=n(C,"LI",{});var B4e=s(F_);mee=n(B4e,"STRONG",{});var tzr=s(mee);qmo=r(tzr,"wavlm"),tzr.forEach(t),Gmo=r(B4e," \u2014 "),MP=n(B4e,"A",{href:!0});var azr=s(MP);Omo=r(azr,"WavLMModel"),azr.forEach(t),Xmo=r(B4e," (WavLM model)"),B4e.forEach(t),Vmo=i(C),C_=n(C,"LI",{});var x4e=s(C_);gee=n(x4e,"STRONG",{});var nzr=s(gee);zmo=r(nzr,"xglm"),nzr.forEach(t),Wmo=r(x4e," \u2014 "),EP=n(x4e,"A",{href:!0});var szr=s(EP);Qmo=r(szr,"XGLMModel"),szr.forEach(t),Hmo=r(x4e," (XGLM model)"),x4e.forEach(t),Umo=i(C),M_=n(C,"LI",{});var k4e=s(M_);hee=n(k4e,"STRONG",{});var lzr=s(hee);Jmo=r(lzr,"xlm"),lzr.forEach(t),Ymo=r(k4e," \u2014 "),yP=n(k4e,"A",{href:!0});var izr=s(yP);Kmo=r(izr,"XLMModel"),izr.forEach(t),Zmo=r(k4e," (XLM model)"),k4e.forEach(t),ego=i(C),E_=n(C,"LI",{});var R4e=s(E_);pee=n(R4e,"STRONG",{});var dzr=s(pee);ogo=r(dzr,"xlm-prophetnet"),dzr.forEach(t),rgo=r(R4e," \u2014 "),wP=n(R4e,"A",{href:!0});var czr=s(wP);tgo=r(czr,"XLMProphetNetModel"),czr.forEach(t),ago=r(R4e," (XLMProphetNet model)"),R4e.forEach(t),ngo=i(C),y_=n(C,"LI",{});var S4e=s(y_);_ee=n(S4e,"STRONG",{});var fzr=s(_ee);sgo=r(fzr,"xlm-roberta"),fzr.forEach(t),lgo=r(S4e," \u2014 "),AP=n(S4e,"A",{href:!0});var mzr=s(AP);igo=r(mzr,"XLMRobertaModel"),mzr.forEach(t),dgo=r(S4e," (XLM-RoBERTa model)"),S4e.forEach(t),cgo=i(C),w_=n(C,"LI",{});var P4e=s(w_);uee=n(P4e,"STRONG",{});var gzr=s(uee);fgo=r(gzr,"xlm-roberta-xl"),gzr.forEach(t),mgo=r(P4e," \u2014 "),LP=n(P4e,"A",{href:!0});var hzr=s(LP);ggo=r(hzr,"XLMRobertaXLModel"),hzr.forEach(t),hgo=r(P4e," (XLM-RoBERTa-XL model)"),P4e.forEach(t),pgo=i(C),A_=n(C,"LI",{});var $4e=s(A_);bee=n($4e,"STRONG",{});var pzr=s(bee);_go=r(pzr,"xlnet"),pzr.forEach(t),ugo=r($4e," \u2014 "),BP=n($4e,"A",{href:!0});var _zr=s(BP);bgo=r(_zr,"XLNetModel"),_zr.forEach(t),vgo=r($4e," (XLNet model)"),$4e.forEach(t),Tgo=i(C),L_=n(C,"LI",{});var I4e=s(L_);vee=n(I4e,"STRONG",{});var uzr=s(vee);Fgo=r(uzr,"yoso"),uzr.forEach(t),Cgo=r(I4e," \u2014 "),xP=n(I4e,"A",{href:!0});var bzr=s(xP);Mgo=r(bzr,"YosoModel"),bzr.forEach(t),Ego=r(I4e," (YOSO model)"),I4e.forEach(t),C.forEach(t),ygo=i(qt),B_=n(qt,"P",{});var D4e=s(B_);wgo=r(D4e,"The model is set in evaluation mode by default using "),Tee=n(D4e,"CODE",{});var vzr=s(Tee);Ago=r(vzr,"model.eval()"),vzr.forEach(t),Lgo=r(D4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fee=n(D4e,"CODE",{});var Tzr=s(Fee);Bgo=r(Tzr,"model.train()"),Tzr.forEach(t),D4e.forEach(t),xgo=i(qt),Cee=n(qt,"P",{});var Fzr=s(Cee);kgo=r(Fzr,"Examples:"),Fzr.forEach(t),Rgo=i(qt),m(ZE.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),Vke=i(c),Zi=n(c,"H2",{class:!0});var ZSe=s(Zi);x_=n(ZSe,"A",{id:!0,class:!0,href:!0});var Czr=s(x_);Mee=n(Czr,"SPAN",{});var Mzr=s(Mee);m(e5.$$.fragment,Mzr),Mzr.forEach(t),Czr.forEach(t),Sgo=i(ZSe),Eee=n(ZSe,"SPAN",{});var Ezr=s(Eee);Pgo=r(Ezr,"AutoModelForPreTraining"),Ezr.forEach(t),ZSe.forEach(t),zke=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(o5.$$.fragment,Hs),$go=i(Hs),ed=n(Hs,"P",{});var fW=s(ed);Igo=r(fW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yee=n(fW,"CODE",{});var yzr=s(yee);Dgo=r(yzr,"from_pretrained()"),yzr.forEach(t),Ngo=r(fW,"class method or the "),wee=n(fW,"CODE",{});var wzr=s(wee);jgo=r(wzr,"from_config()"),wzr.forEach(t),qgo=r(fW,`class
method.`),fW.forEach(t),Ggo=i(Hs),r5=n(Hs,"P",{});var ePe=s(r5);Ogo=r(ePe,"This class cannot be instantiated directly using "),Aee=n(ePe,"CODE",{});var Azr=s(Aee);Xgo=r(Azr,"__init__()"),Azr.forEach(t),Vgo=r(ePe," (throws an error)."),ePe.forEach(t),zgo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(t5.$$.fragment,Us),Wgo=i(Us),Lee=n(Us,"P",{});var Lzr=s(Lee);Qgo=r(Lzr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Lzr.forEach(t),Hgo=i(Us),od=n(Us,"P",{});var mW=s(od);Ugo=r(mW,`Note:
Loading a model from its configuration file does `),Bee=n(mW,"STRONG",{});var Bzr=s(Bee);Jgo=r(Bzr,"not"),Bzr.forEach(t),Ygo=r(mW,` load the model weights. It only affects the
model\u2019s configuration. Use `),xee=n(mW,"CODE",{});var xzr=s(xee);Kgo=r(xzr,"from_pretrained()"),xzr.forEach(t),Zgo=r(mW,"to load the model weights."),mW.forEach(t),eho=i(Us),kee=n(Us,"P",{});var kzr=s(kee);oho=r(kzr,"Examples:"),kzr.forEach(t),rho=i(Us),m(a5.$$.fragment,Us),Us.forEach(t),tho=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);m(n5.$$.fragment,Gt),aho=i(Gt),Ree=n(Gt,"P",{});var Rzr=s(Ree);nho=r(Rzr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Rzr.forEach(t),sho=i(Gt),za=n(Gt,"P",{});var b4=s(za);lho=r(b4,"The model class to instantiate is selected based on the "),See=n(b4,"CODE",{});var Szr=s(See);iho=r(Szr,"model_type"),Szr.forEach(t),dho=r(b4,` property of the config object (either
passed as an argument or loaded from `),Pee=n(b4,"CODE",{});var Pzr=s(Pee);cho=r(Pzr,"pretrained_model_name_or_path"),Pzr.forEach(t),fho=r(b4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ee=n(b4,"CODE",{});var $zr=s($ee);mho=r($zr,"pretrained_model_name_or_path"),$zr.forEach(t),gho=r(b4,":"),b4.forEach(t),hho=i(Gt),k=n(Gt,"UL",{});var S=s(k);k_=n(S,"LI",{});var N4e=s(k_);Iee=n(N4e,"STRONG",{});var Izr=s(Iee);pho=r(Izr,"albert"),Izr.forEach(t),_ho=r(N4e," \u2014 "),kP=n(N4e,"A",{href:!0});var Dzr=s(kP);uho=r(Dzr,"AlbertForPreTraining"),Dzr.forEach(t),bho=r(N4e," (ALBERT model)"),N4e.forEach(t),vho=i(S),R_=n(S,"LI",{});var j4e=s(R_);Dee=n(j4e,"STRONG",{});var Nzr=s(Dee);Tho=r(Nzr,"bart"),Nzr.forEach(t),Fho=r(j4e," \u2014 "),RP=n(j4e,"A",{href:!0});var jzr=s(RP);Cho=r(jzr,"BartForConditionalGeneration"),jzr.forEach(t),Mho=r(j4e," (BART model)"),j4e.forEach(t),Eho=i(S),S_=n(S,"LI",{});var q4e=s(S_);Nee=n(q4e,"STRONG",{});var qzr=s(Nee);yho=r(qzr,"bert"),qzr.forEach(t),who=r(q4e," \u2014 "),SP=n(q4e,"A",{href:!0});var Gzr=s(SP);Aho=r(Gzr,"BertForPreTraining"),Gzr.forEach(t),Lho=r(q4e," (BERT model)"),q4e.forEach(t),Bho=i(S),P_=n(S,"LI",{});var G4e=s(P_);jee=n(G4e,"STRONG",{});var Ozr=s(jee);xho=r(Ozr,"big_bird"),Ozr.forEach(t),kho=r(G4e," \u2014 "),PP=n(G4e,"A",{href:!0});var Xzr=s(PP);Rho=r(Xzr,"BigBirdForPreTraining"),Xzr.forEach(t),Sho=r(G4e," (BigBird model)"),G4e.forEach(t),Pho=i(S),$_=n(S,"LI",{});var O4e=s($_);qee=n(O4e,"STRONG",{});var Vzr=s(qee);$ho=r(Vzr,"camembert"),Vzr.forEach(t),Iho=r(O4e," \u2014 "),$P=n(O4e,"A",{href:!0});var zzr=s($P);Dho=r(zzr,"CamembertForMaskedLM"),zzr.forEach(t),Nho=r(O4e," (CamemBERT model)"),O4e.forEach(t),jho=i(S),I_=n(S,"LI",{});var X4e=s(I_);Gee=n(X4e,"STRONG",{});var Wzr=s(Gee);qho=r(Wzr,"ctrl"),Wzr.forEach(t),Gho=r(X4e," \u2014 "),IP=n(X4e,"A",{href:!0});var Qzr=s(IP);Oho=r(Qzr,"CTRLLMHeadModel"),Qzr.forEach(t),Xho=r(X4e," (CTRL model)"),X4e.forEach(t),Vho=i(S),D_=n(S,"LI",{});var V4e=s(D_);Oee=n(V4e,"STRONG",{});var Hzr=s(Oee);zho=r(Hzr,"data2vec-text"),Hzr.forEach(t),Who=r(V4e," \u2014 "),DP=n(V4e,"A",{href:!0});var Uzr=s(DP);Qho=r(Uzr,"Data2VecTextForMaskedLM"),Uzr.forEach(t),Hho=r(V4e," (Data2VecText model)"),V4e.forEach(t),Uho=i(S),N_=n(S,"LI",{});var z4e=s(N_);Xee=n(z4e,"STRONG",{});var Jzr=s(Xee);Jho=r(Jzr,"deberta"),Jzr.forEach(t),Yho=r(z4e," \u2014 "),NP=n(z4e,"A",{href:!0});var Yzr=s(NP);Kho=r(Yzr,"DebertaForMaskedLM"),Yzr.forEach(t),Zho=r(z4e," (DeBERTa model)"),z4e.forEach(t),epo=i(S),j_=n(S,"LI",{});var W4e=s(j_);Vee=n(W4e,"STRONG",{});var Kzr=s(Vee);opo=r(Kzr,"deberta-v2"),Kzr.forEach(t),rpo=r(W4e," \u2014 "),jP=n(W4e,"A",{href:!0});var Zzr=s(jP);tpo=r(Zzr,"DebertaV2ForMaskedLM"),Zzr.forEach(t),apo=r(W4e," (DeBERTa-v2 model)"),W4e.forEach(t),npo=i(S),q_=n(S,"LI",{});var Q4e=s(q_);zee=n(Q4e,"STRONG",{});var eWr=s(zee);spo=r(eWr,"distilbert"),eWr.forEach(t),lpo=r(Q4e," \u2014 "),qP=n(Q4e,"A",{href:!0});var oWr=s(qP);ipo=r(oWr,"DistilBertForMaskedLM"),oWr.forEach(t),dpo=r(Q4e," (DistilBERT model)"),Q4e.forEach(t),cpo=i(S),G_=n(S,"LI",{});var H4e=s(G_);Wee=n(H4e,"STRONG",{});var rWr=s(Wee);fpo=r(rWr,"electra"),rWr.forEach(t),mpo=r(H4e," \u2014 "),GP=n(H4e,"A",{href:!0});var tWr=s(GP);gpo=r(tWr,"ElectraForPreTraining"),tWr.forEach(t),hpo=r(H4e," (ELECTRA model)"),H4e.forEach(t),ppo=i(S),O_=n(S,"LI",{});var U4e=s(O_);Qee=n(U4e,"STRONG",{});var aWr=s(Qee);_po=r(aWr,"flaubert"),aWr.forEach(t),upo=r(U4e," \u2014 "),OP=n(U4e,"A",{href:!0});var nWr=s(OP);bpo=r(nWr,"FlaubertWithLMHeadModel"),nWr.forEach(t),vpo=r(U4e," (FlauBERT model)"),U4e.forEach(t),Tpo=i(S),X_=n(S,"LI",{});var J4e=s(X_);Hee=n(J4e,"STRONG",{});var sWr=s(Hee);Fpo=r(sWr,"fnet"),sWr.forEach(t),Cpo=r(J4e," \u2014 "),XP=n(J4e,"A",{href:!0});var lWr=s(XP);Mpo=r(lWr,"FNetForPreTraining"),lWr.forEach(t),Epo=r(J4e," (FNet model)"),J4e.forEach(t),ypo=i(S),V_=n(S,"LI",{});var Y4e=s(V_);Uee=n(Y4e,"STRONG",{});var iWr=s(Uee);wpo=r(iWr,"fsmt"),iWr.forEach(t),Apo=r(Y4e," \u2014 "),VP=n(Y4e,"A",{href:!0});var dWr=s(VP);Lpo=r(dWr,"FSMTForConditionalGeneration"),dWr.forEach(t),Bpo=r(Y4e," (FairSeq Machine-Translation model)"),Y4e.forEach(t),xpo=i(S),z_=n(S,"LI",{});var K4e=s(z_);Jee=n(K4e,"STRONG",{});var cWr=s(Jee);kpo=r(cWr,"funnel"),cWr.forEach(t),Rpo=r(K4e," \u2014 "),zP=n(K4e,"A",{href:!0});var fWr=s(zP);Spo=r(fWr,"FunnelForPreTraining"),fWr.forEach(t),Ppo=r(K4e," (Funnel Transformer model)"),K4e.forEach(t),$po=i(S),W_=n(S,"LI",{});var Z4e=s(W_);Yee=n(Z4e,"STRONG",{});var mWr=s(Yee);Ipo=r(mWr,"gpt2"),mWr.forEach(t),Dpo=r(Z4e," \u2014 "),WP=n(Z4e,"A",{href:!0});var gWr=s(WP);Npo=r(gWr,"GPT2LMHeadModel"),gWr.forEach(t),jpo=r(Z4e," (OpenAI GPT-2 model)"),Z4e.forEach(t),qpo=i(S),Q_=n(S,"LI",{});var eEe=s(Q_);Kee=n(eEe,"STRONG",{});var hWr=s(Kee);Gpo=r(hWr,"ibert"),hWr.forEach(t),Opo=r(eEe," \u2014 "),QP=n(eEe,"A",{href:!0});var pWr=s(QP);Xpo=r(pWr,"IBertForMaskedLM"),pWr.forEach(t),Vpo=r(eEe," (I-BERT model)"),eEe.forEach(t),zpo=i(S),H_=n(S,"LI",{});var oEe=s(H_);Zee=n(oEe,"STRONG",{});var _Wr=s(Zee);Wpo=r(_Wr,"layoutlm"),_Wr.forEach(t),Qpo=r(oEe," \u2014 "),HP=n(oEe,"A",{href:!0});var uWr=s(HP);Hpo=r(uWr,"LayoutLMForMaskedLM"),uWr.forEach(t),Upo=r(oEe," (LayoutLM model)"),oEe.forEach(t),Jpo=i(S),U_=n(S,"LI",{});var rEe=s(U_);eoe=n(rEe,"STRONG",{});var bWr=s(eoe);Ypo=r(bWr,"longformer"),bWr.forEach(t),Kpo=r(rEe," \u2014 "),UP=n(rEe,"A",{href:!0});var vWr=s(UP);Zpo=r(vWr,"LongformerForMaskedLM"),vWr.forEach(t),e_o=r(rEe," (Longformer model)"),rEe.forEach(t),o_o=i(S),J_=n(S,"LI",{});var tEe=s(J_);ooe=n(tEe,"STRONG",{});var TWr=s(ooe);r_o=r(TWr,"lxmert"),TWr.forEach(t),t_o=r(tEe," \u2014 "),JP=n(tEe,"A",{href:!0});var FWr=s(JP);a_o=r(FWr,"LxmertForPreTraining"),FWr.forEach(t),n_o=r(tEe," (LXMERT model)"),tEe.forEach(t),s_o=i(S),Y_=n(S,"LI",{});var aEe=s(Y_);roe=n(aEe,"STRONG",{});var CWr=s(roe);l_o=r(CWr,"megatron-bert"),CWr.forEach(t),i_o=r(aEe," \u2014 "),YP=n(aEe,"A",{href:!0});var MWr=s(YP);d_o=r(MWr,"MegatronBertForPreTraining"),MWr.forEach(t),c_o=r(aEe," (MegatronBert model)"),aEe.forEach(t),f_o=i(S),K_=n(S,"LI",{});var nEe=s(K_);toe=n(nEe,"STRONG",{});var EWr=s(toe);m_o=r(EWr,"mobilebert"),EWr.forEach(t),g_o=r(nEe," \u2014 "),KP=n(nEe,"A",{href:!0});var yWr=s(KP);h_o=r(yWr,"MobileBertForPreTraining"),yWr.forEach(t),p_o=r(nEe," (MobileBERT model)"),nEe.forEach(t),__o=i(S),Z_=n(S,"LI",{});var sEe=s(Z_);aoe=n(sEe,"STRONG",{});var wWr=s(aoe);u_o=r(wWr,"mpnet"),wWr.forEach(t),b_o=r(sEe," \u2014 "),ZP=n(sEe,"A",{href:!0});var AWr=s(ZP);v_o=r(AWr,"MPNetForMaskedLM"),AWr.forEach(t),T_o=r(sEe," (MPNet model)"),sEe.forEach(t),F_o=i(S),eu=n(S,"LI",{});var lEe=s(eu);noe=n(lEe,"STRONG",{});var LWr=s(noe);C_o=r(LWr,"openai-gpt"),LWr.forEach(t),M_o=r(lEe," \u2014 "),e$=n(lEe,"A",{href:!0});var BWr=s(e$);E_o=r(BWr,"OpenAIGPTLMHeadModel"),BWr.forEach(t),y_o=r(lEe," (OpenAI GPT model)"),lEe.forEach(t),w_o=i(S),ou=n(S,"LI",{});var iEe=s(ou);soe=n(iEe,"STRONG",{});var xWr=s(soe);A_o=r(xWr,"retribert"),xWr.forEach(t),L_o=r(iEe," \u2014 "),o$=n(iEe,"A",{href:!0});var kWr=s(o$);B_o=r(kWr,"RetriBertModel"),kWr.forEach(t),x_o=r(iEe," (RetriBERT model)"),iEe.forEach(t),k_o=i(S),ru=n(S,"LI",{});var dEe=s(ru);loe=n(dEe,"STRONG",{});var RWr=s(loe);R_o=r(RWr,"roberta"),RWr.forEach(t),S_o=r(dEe," \u2014 "),r$=n(dEe,"A",{href:!0});var SWr=s(r$);P_o=r(SWr,"RobertaForMaskedLM"),SWr.forEach(t),$_o=r(dEe," (RoBERTa model)"),dEe.forEach(t),I_o=i(S),tu=n(S,"LI",{});var cEe=s(tu);ioe=n(cEe,"STRONG",{});var PWr=s(ioe);D_o=r(PWr,"squeezebert"),PWr.forEach(t),N_o=r(cEe," \u2014 "),t$=n(cEe,"A",{href:!0});var $Wr=s(t$);j_o=r($Wr,"SqueezeBertForMaskedLM"),$Wr.forEach(t),q_o=r(cEe," (SqueezeBERT model)"),cEe.forEach(t),G_o=i(S),au=n(S,"LI",{});var fEe=s(au);doe=n(fEe,"STRONG",{});var IWr=s(doe);O_o=r(IWr,"t5"),IWr.forEach(t),X_o=r(fEe," \u2014 "),a$=n(fEe,"A",{href:!0});var DWr=s(a$);V_o=r(DWr,"T5ForConditionalGeneration"),DWr.forEach(t),z_o=r(fEe," (T5 model)"),fEe.forEach(t),W_o=i(S),nu=n(S,"LI",{});var mEe=s(nu);coe=n(mEe,"STRONG",{});var NWr=s(coe);Q_o=r(NWr,"tapas"),NWr.forEach(t),H_o=r(mEe," \u2014 "),n$=n(mEe,"A",{href:!0});var jWr=s(n$);U_o=r(jWr,"TapasForMaskedLM"),jWr.forEach(t),J_o=r(mEe," (TAPAS model)"),mEe.forEach(t),Y_o=i(S),su=n(S,"LI",{});var gEe=s(su);foe=n(gEe,"STRONG",{});var qWr=s(foe);K_o=r(qWr,"transfo-xl"),qWr.forEach(t),Z_o=r(gEe," \u2014 "),s$=n(gEe,"A",{href:!0});var GWr=s(s$);euo=r(GWr,"TransfoXLLMHeadModel"),GWr.forEach(t),ouo=r(gEe," (Transformer-XL model)"),gEe.forEach(t),ruo=i(S),lu=n(S,"LI",{});var hEe=s(lu);moe=n(hEe,"STRONG",{});var OWr=s(moe);tuo=r(OWr,"unispeech"),OWr.forEach(t),auo=r(hEe," \u2014 "),l$=n(hEe,"A",{href:!0});var XWr=s(l$);nuo=r(XWr,"UniSpeechForPreTraining"),XWr.forEach(t),suo=r(hEe," (UniSpeech model)"),hEe.forEach(t),luo=i(S),iu=n(S,"LI",{});var pEe=s(iu);goe=n(pEe,"STRONG",{});var VWr=s(goe);iuo=r(VWr,"unispeech-sat"),VWr.forEach(t),duo=r(pEe," \u2014 "),i$=n(pEe,"A",{href:!0});var zWr=s(i$);cuo=r(zWr,"UniSpeechSatForPreTraining"),zWr.forEach(t),fuo=r(pEe," (UniSpeechSat model)"),pEe.forEach(t),muo=i(S),du=n(S,"LI",{});var _Ee=s(du);hoe=n(_Ee,"STRONG",{});var WWr=s(hoe);guo=r(WWr,"visual_bert"),WWr.forEach(t),huo=r(_Ee," \u2014 "),d$=n(_Ee,"A",{href:!0});var QWr=s(d$);puo=r(QWr,"VisualBertForPreTraining"),QWr.forEach(t),_uo=r(_Ee," (VisualBert model)"),_Ee.forEach(t),uuo=i(S),cu=n(S,"LI",{});var uEe=s(cu);poe=n(uEe,"STRONG",{});var HWr=s(poe);buo=r(HWr,"vit_mae"),HWr.forEach(t),vuo=r(uEe," \u2014 "),c$=n(uEe,"A",{href:!0});var UWr=s(c$);Tuo=r(UWr,"ViTMAEForPreTraining"),UWr.forEach(t),Fuo=r(uEe," (ViTMAE model)"),uEe.forEach(t),Cuo=i(S),fu=n(S,"LI",{});var bEe=s(fu);_oe=n(bEe,"STRONG",{});var JWr=s(_oe);Muo=r(JWr,"wav2vec2"),JWr.forEach(t),Euo=r(bEe," \u2014 "),f$=n(bEe,"A",{href:!0});var YWr=s(f$);yuo=r(YWr,"Wav2Vec2ForPreTraining"),YWr.forEach(t),wuo=r(bEe," (Wav2Vec2 model)"),bEe.forEach(t),Auo=i(S),mu=n(S,"LI",{});var vEe=s(mu);uoe=n(vEe,"STRONG",{});var KWr=s(uoe);Luo=r(KWr,"xlm"),KWr.forEach(t),Buo=r(vEe," \u2014 "),m$=n(vEe,"A",{href:!0});var ZWr=s(m$);xuo=r(ZWr,"XLMWithLMHeadModel"),ZWr.forEach(t),kuo=r(vEe," (XLM model)"),vEe.forEach(t),Ruo=i(S),gu=n(S,"LI",{});var TEe=s(gu);boe=n(TEe,"STRONG",{});var eQr=s(boe);Suo=r(eQr,"xlm-roberta"),eQr.forEach(t),Puo=r(TEe," \u2014 "),g$=n(TEe,"A",{href:!0});var oQr=s(g$);$uo=r(oQr,"XLMRobertaForMaskedLM"),oQr.forEach(t),Iuo=r(TEe," (XLM-RoBERTa model)"),TEe.forEach(t),Duo=i(S),hu=n(S,"LI",{});var FEe=s(hu);voe=n(FEe,"STRONG",{});var rQr=s(voe);Nuo=r(rQr,"xlm-roberta-xl"),rQr.forEach(t),juo=r(FEe," \u2014 "),h$=n(FEe,"A",{href:!0});var tQr=s(h$);quo=r(tQr,"XLMRobertaXLForMaskedLM"),tQr.forEach(t),Guo=r(FEe," (XLM-RoBERTa-XL model)"),FEe.forEach(t),Ouo=i(S),pu=n(S,"LI",{});var CEe=s(pu);Toe=n(CEe,"STRONG",{});var aQr=s(Toe);Xuo=r(aQr,"xlnet"),aQr.forEach(t),Vuo=r(CEe," \u2014 "),p$=n(CEe,"A",{href:!0});var nQr=s(p$);zuo=r(nQr,"XLNetLMHeadModel"),nQr.forEach(t),Wuo=r(CEe," (XLNet model)"),CEe.forEach(t),S.forEach(t),Quo=i(Gt),_u=n(Gt,"P",{});var MEe=s(_u);Huo=r(MEe,"The model is set in evaluation mode by default using "),Foe=n(MEe,"CODE",{});var sQr=s(Foe);Uuo=r(sQr,"model.eval()"),sQr.forEach(t),Juo=r(MEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Coe=n(MEe,"CODE",{});var lQr=s(Coe);Yuo=r(lQr,"model.train()"),lQr.forEach(t),MEe.forEach(t),Kuo=i(Gt),Moe=n(Gt,"P",{});var iQr=s(Moe);Zuo=r(iQr,"Examples:"),iQr.forEach(t),e2o=i(Gt),m(s5.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),Wke=i(c),rd=n(c,"H2",{class:!0});var oPe=s(rd);uu=n(oPe,"A",{id:!0,class:!0,href:!0});var dQr=s(uu);Eoe=n(dQr,"SPAN",{});var cQr=s(Eoe);m(l5.$$.fragment,cQr),cQr.forEach(t),dQr.forEach(t),o2o=i(oPe),yoe=n(oPe,"SPAN",{});var fQr=s(yoe);r2o=r(fQr,"AutoModelForCausalLM"),fQr.forEach(t),oPe.forEach(t),Qke=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(i5.$$.fragment,Js),t2o=i(Js),td=n(Js,"P",{});var gW=s(td);a2o=r(gW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),woe=n(gW,"CODE",{});var mQr=s(woe);n2o=r(mQr,"from_pretrained()"),mQr.forEach(t),s2o=r(gW,"class method or the "),Aoe=n(gW,"CODE",{});var gQr=s(Aoe);l2o=r(gQr,"from_config()"),gQr.forEach(t),i2o=r(gW,`class
method.`),gW.forEach(t),d2o=i(Js),d5=n(Js,"P",{});var rPe=s(d5);c2o=r(rPe,"This class cannot be instantiated directly using "),Loe=n(rPe,"CODE",{});var hQr=s(Loe);f2o=r(hQr,"__init__()"),hQr.forEach(t),m2o=r(rPe," (throws an error)."),rPe.forEach(t),g2o=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);m(c5.$$.fragment,Ys),h2o=i(Ys),Boe=n(Ys,"P",{});var pQr=s(Boe);p2o=r(pQr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pQr.forEach(t),_2o=i(Ys),ad=n(Ys,"P",{});var hW=s(ad);u2o=r(hW,`Note:
Loading a model from its configuration file does `),xoe=n(hW,"STRONG",{});var _Qr=s(xoe);b2o=r(_Qr,"not"),_Qr.forEach(t),v2o=r(hW,` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=n(hW,"CODE",{});var uQr=s(koe);T2o=r(uQr,"from_pretrained()"),uQr.forEach(t),F2o=r(hW,"to load the model weights."),hW.forEach(t),C2o=i(Ys),Roe=n(Ys,"P",{});var bQr=s(Roe);M2o=r(bQr,"Examples:"),bQr.forEach(t),E2o=i(Ys),m(f5.$$.fragment,Ys),Ys.forEach(t),y2o=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(m5.$$.fragment,Ot),w2o=i(Ot),Soe=n(Ot,"P",{});var vQr=s(Soe);A2o=r(vQr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vQr.forEach(t),L2o=i(Ot),Wa=n(Ot,"P",{});var v4=s(Wa);B2o=r(v4,"The model class to instantiate is selected based on the "),Poe=n(v4,"CODE",{});var TQr=s(Poe);x2o=r(TQr,"model_type"),TQr.forEach(t),k2o=r(v4,` property of the config object (either
passed as an argument or loaded from `),$oe=n(v4,"CODE",{});var FQr=s($oe);R2o=r(FQr,"pretrained_model_name_or_path"),FQr.forEach(t),S2o=r(v4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ioe=n(v4,"CODE",{});var CQr=s(Ioe);P2o=r(CQr,"pretrained_model_name_or_path"),CQr.forEach(t),$2o=r(v4,":"),v4.forEach(t),I2o=i(Ot),$=n(Ot,"UL",{});var D=s($);bu=n(D,"LI",{});var EEe=s(bu);Doe=n(EEe,"STRONG",{});var MQr=s(Doe);D2o=r(MQr,"bart"),MQr.forEach(t),N2o=r(EEe," \u2014 "),_$=n(EEe,"A",{href:!0});var EQr=s(_$);j2o=r(EQr,"BartForCausalLM"),EQr.forEach(t),q2o=r(EEe," (BART model)"),EEe.forEach(t),G2o=i(D),vu=n(D,"LI",{});var yEe=s(vu);Noe=n(yEe,"STRONG",{});var yQr=s(Noe);O2o=r(yQr,"bert"),yQr.forEach(t),X2o=r(yEe," \u2014 "),u$=n(yEe,"A",{href:!0});var wQr=s(u$);V2o=r(wQr,"BertLMHeadModel"),wQr.forEach(t),z2o=r(yEe," (BERT model)"),yEe.forEach(t),W2o=i(D),Tu=n(D,"LI",{});var wEe=s(Tu);joe=n(wEe,"STRONG",{});var AQr=s(joe);Q2o=r(AQr,"bert-generation"),AQr.forEach(t),H2o=r(wEe," \u2014 "),b$=n(wEe,"A",{href:!0});var LQr=s(b$);U2o=r(LQr,"BertGenerationDecoder"),LQr.forEach(t),J2o=r(wEe," (Bert Generation model)"),wEe.forEach(t),Y2o=i(D),Fu=n(D,"LI",{});var AEe=s(Fu);qoe=n(AEe,"STRONG",{});var BQr=s(qoe);K2o=r(BQr,"big_bird"),BQr.forEach(t),Z2o=r(AEe," \u2014 "),v$=n(AEe,"A",{href:!0});var xQr=s(v$);e1o=r(xQr,"BigBirdForCausalLM"),xQr.forEach(t),o1o=r(AEe," (BigBird model)"),AEe.forEach(t),r1o=i(D),Cu=n(D,"LI",{});var LEe=s(Cu);Goe=n(LEe,"STRONG",{});var kQr=s(Goe);t1o=r(kQr,"bigbird_pegasus"),kQr.forEach(t),a1o=r(LEe," \u2014 "),T$=n(LEe,"A",{href:!0});var RQr=s(T$);n1o=r(RQr,"BigBirdPegasusForCausalLM"),RQr.forEach(t),s1o=r(LEe," (BigBirdPegasus model)"),LEe.forEach(t),l1o=i(D),Mu=n(D,"LI",{});var BEe=s(Mu);Ooe=n(BEe,"STRONG",{});var SQr=s(Ooe);i1o=r(SQr,"blenderbot"),SQr.forEach(t),d1o=r(BEe," \u2014 "),F$=n(BEe,"A",{href:!0});var PQr=s(F$);c1o=r(PQr,"BlenderbotForCausalLM"),PQr.forEach(t),f1o=r(BEe," (Blenderbot model)"),BEe.forEach(t),m1o=i(D),Eu=n(D,"LI",{});var xEe=s(Eu);Xoe=n(xEe,"STRONG",{});var $Qr=s(Xoe);g1o=r($Qr,"blenderbot-small"),$Qr.forEach(t),h1o=r(xEe," \u2014 "),C$=n(xEe,"A",{href:!0});var IQr=s(C$);p1o=r(IQr,"BlenderbotSmallForCausalLM"),IQr.forEach(t),_1o=r(xEe," (BlenderbotSmall model)"),xEe.forEach(t),u1o=i(D),yu=n(D,"LI",{});var kEe=s(yu);Voe=n(kEe,"STRONG",{});var DQr=s(Voe);b1o=r(DQr,"camembert"),DQr.forEach(t),v1o=r(kEe," \u2014 "),M$=n(kEe,"A",{href:!0});var NQr=s(M$);T1o=r(NQr,"CamembertForCausalLM"),NQr.forEach(t),F1o=r(kEe," (CamemBERT model)"),kEe.forEach(t),C1o=i(D),wu=n(D,"LI",{});var REe=s(wu);zoe=n(REe,"STRONG",{});var jQr=s(zoe);M1o=r(jQr,"ctrl"),jQr.forEach(t),E1o=r(REe," \u2014 "),E$=n(REe,"A",{href:!0});var qQr=s(E$);y1o=r(qQr,"CTRLLMHeadModel"),qQr.forEach(t),w1o=r(REe," (CTRL model)"),REe.forEach(t),A1o=i(D),Au=n(D,"LI",{});var SEe=s(Au);Woe=n(SEe,"STRONG",{});var GQr=s(Woe);L1o=r(GQr,"data2vec-text"),GQr.forEach(t),B1o=r(SEe," \u2014 "),y$=n(SEe,"A",{href:!0});var OQr=s(y$);x1o=r(OQr,"Data2VecTextForCausalLM"),OQr.forEach(t),k1o=r(SEe," (Data2VecText model)"),SEe.forEach(t),R1o=i(D),Lu=n(D,"LI",{});var PEe=s(Lu);Qoe=n(PEe,"STRONG",{});var XQr=s(Qoe);S1o=r(XQr,"electra"),XQr.forEach(t),P1o=r(PEe," \u2014 "),w$=n(PEe,"A",{href:!0});var VQr=s(w$);$1o=r(VQr,"ElectraForCausalLM"),VQr.forEach(t),I1o=r(PEe," (ELECTRA model)"),PEe.forEach(t),D1o=i(D),Bu=n(D,"LI",{});var $Ee=s(Bu);Hoe=n($Ee,"STRONG",{});var zQr=s(Hoe);N1o=r(zQr,"gpt2"),zQr.forEach(t),j1o=r($Ee," \u2014 "),A$=n($Ee,"A",{href:!0});var WQr=s(A$);q1o=r(WQr,"GPT2LMHeadModel"),WQr.forEach(t),G1o=r($Ee," (OpenAI GPT-2 model)"),$Ee.forEach(t),O1o=i(D),xu=n(D,"LI",{});var IEe=s(xu);Uoe=n(IEe,"STRONG",{});var QQr=s(Uoe);X1o=r(QQr,"gpt_neo"),QQr.forEach(t),V1o=r(IEe," \u2014 "),L$=n(IEe,"A",{href:!0});var HQr=s(L$);z1o=r(HQr,"GPTNeoForCausalLM"),HQr.forEach(t),W1o=r(IEe," (GPT Neo model)"),IEe.forEach(t),Q1o=i(D),ku=n(D,"LI",{});var DEe=s(ku);Joe=n(DEe,"STRONG",{});var UQr=s(Joe);H1o=r(UQr,"gptj"),UQr.forEach(t),U1o=r(DEe," \u2014 "),B$=n(DEe,"A",{href:!0});var JQr=s(B$);J1o=r(JQr,"GPTJForCausalLM"),JQr.forEach(t),Y1o=r(DEe," (GPT-J model)"),DEe.forEach(t),K1o=i(D),Ru=n(D,"LI",{});var NEe=s(Ru);Yoe=n(NEe,"STRONG",{});var YQr=s(Yoe);Z1o=r(YQr,"marian"),YQr.forEach(t),ebo=r(NEe," \u2014 "),x$=n(NEe,"A",{href:!0});var KQr=s(x$);obo=r(KQr,"MarianForCausalLM"),KQr.forEach(t),rbo=r(NEe," (Marian model)"),NEe.forEach(t),tbo=i(D),Su=n(D,"LI",{});var jEe=s(Su);Koe=n(jEe,"STRONG",{});var ZQr=s(Koe);abo=r(ZQr,"mbart"),ZQr.forEach(t),nbo=r(jEe," \u2014 "),k$=n(jEe,"A",{href:!0});var eHr=s(k$);sbo=r(eHr,"MBartForCausalLM"),eHr.forEach(t),lbo=r(jEe," (mBART model)"),jEe.forEach(t),ibo=i(D),Pu=n(D,"LI",{});var qEe=s(Pu);Zoe=n(qEe,"STRONG",{});var oHr=s(Zoe);dbo=r(oHr,"megatron-bert"),oHr.forEach(t),cbo=r(qEe," \u2014 "),R$=n(qEe,"A",{href:!0});var rHr=s(R$);fbo=r(rHr,"MegatronBertForCausalLM"),rHr.forEach(t),mbo=r(qEe," (MegatronBert model)"),qEe.forEach(t),gbo=i(D),$u=n(D,"LI",{});var GEe=s($u);ere=n(GEe,"STRONG",{});var tHr=s(ere);hbo=r(tHr,"openai-gpt"),tHr.forEach(t),pbo=r(GEe," \u2014 "),S$=n(GEe,"A",{href:!0});var aHr=s(S$);_bo=r(aHr,"OpenAIGPTLMHeadModel"),aHr.forEach(t),ubo=r(GEe," (OpenAI GPT model)"),GEe.forEach(t),bbo=i(D),Iu=n(D,"LI",{});var OEe=s(Iu);ore=n(OEe,"STRONG",{});var nHr=s(ore);vbo=r(nHr,"pegasus"),nHr.forEach(t),Tbo=r(OEe," \u2014 "),P$=n(OEe,"A",{href:!0});var sHr=s(P$);Fbo=r(sHr,"PegasusForCausalLM"),sHr.forEach(t),Cbo=r(OEe," (Pegasus model)"),OEe.forEach(t),Mbo=i(D),Du=n(D,"LI",{});var XEe=s(Du);rre=n(XEe,"STRONG",{});var lHr=s(rre);Ebo=r(lHr,"plbart"),lHr.forEach(t),ybo=r(XEe," \u2014 "),$$=n(XEe,"A",{href:!0});var iHr=s($$);wbo=r(iHr,"PLBartForCausalLM"),iHr.forEach(t),Abo=r(XEe," (PLBart model)"),XEe.forEach(t),Lbo=i(D),Nu=n(D,"LI",{});var VEe=s(Nu);tre=n(VEe,"STRONG",{});var dHr=s(tre);Bbo=r(dHr,"prophetnet"),dHr.forEach(t),xbo=r(VEe," \u2014 "),I$=n(VEe,"A",{href:!0});var cHr=s(I$);kbo=r(cHr,"ProphetNetForCausalLM"),cHr.forEach(t),Rbo=r(VEe," (ProphetNet model)"),VEe.forEach(t),Sbo=i(D),ju=n(D,"LI",{});var zEe=s(ju);are=n(zEe,"STRONG",{});var fHr=s(are);Pbo=r(fHr,"qdqbert"),fHr.forEach(t),$bo=r(zEe," \u2014 "),D$=n(zEe,"A",{href:!0});var mHr=s(D$);Ibo=r(mHr,"QDQBertLMHeadModel"),mHr.forEach(t),Dbo=r(zEe," (QDQBert model)"),zEe.forEach(t),Nbo=i(D),qu=n(D,"LI",{});var WEe=s(qu);nre=n(WEe,"STRONG",{});var gHr=s(nre);jbo=r(gHr,"reformer"),gHr.forEach(t),qbo=r(WEe," \u2014 "),N$=n(WEe,"A",{href:!0});var hHr=s(N$);Gbo=r(hHr,"ReformerModelWithLMHead"),hHr.forEach(t),Obo=r(WEe," (Reformer model)"),WEe.forEach(t),Xbo=i(D),Gu=n(D,"LI",{});var QEe=s(Gu);sre=n(QEe,"STRONG",{});var pHr=s(sre);Vbo=r(pHr,"rembert"),pHr.forEach(t),zbo=r(QEe," \u2014 "),j$=n(QEe,"A",{href:!0});var _Hr=s(j$);Wbo=r(_Hr,"RemBertForCausalLM"),_Hr.forEach(t),Qbo=r(QEe," (RemBERT model)"),QEe.forEach(t),Hbo=i(D),Ou=n(D,"LI",{});var HEe=s(Ou);lre=n(HEe,"STRONG",{});var uHr=s(lre);Ubo=r(uHr,"roberta"),uHr.forEach(t),Jbo=r(HEe," \u2014 "),q$=n(HEe,"A",{href:!0});var bHr=s(q$);Ybo=r(bHr,"RobertaForCausalLM"),bHr.forEach(t),Kbo=r(HEe," (RoBERTa model)"),HEe.forEach(t),Zbo=i(D),Xu=n(D,"LI",{});var UEe=s(Xu);ire=n(UEe,"STRONG",{});var vHr=s(ire);e3o=r(vHr,"roformer"),vHr.forEach(t),o3o=r(UEe," \u2014 "),G$=n(UEe,"A",{href:!0});var THr=s(G$);r3o=r(THr,"RoFormerForCausalLM"),THr.forEach(t),t3o=r(UEe," (RoFormer model)"),UEe.forEach(t),a3o=i(D),Vu=n(D,"LI",{});var JEe=s(Vu);dre=n(JEe,"STRONG",{});var FHr=s(dre);n3o=r(FHr,"speech_to_text_2"),FHr.forEach(t),s3o=r(JEe," \u2014 "),O$=n(JEe,"A",{href:!0});var CHr=s(O$);l3o=r(CHr,"Speech2Text2ForCausalLM"),CHr.forEach(t),i3o=r(JEe," (Speech2Text2 model)"),JEe.forEach(t),d3o=i(D),zu=n(D,"LI",{});var YEe=s(zu);cre=n(YEe,"STRONG",{});var MHr=s(cre);c3o=r(MHr,"transfo-xl"),MHr.forEach(t),f3o=r(YEe," \u2014 "),X$=n(YEe,"A",{href:!0});var EHr=s(X$);m3o=r(EHr,"TransfoXLLMHeadModel"),EHr.forEach(t),g3o=r(YEe," (Transformer-XL model)"),YEe.forEach(t),h3o=i(D),Wu=n(D,"LI",{});var KEe=s(Wu);fre=n(KEe,"STRONG",{});var yHr=s(fre);p3o=r(yHr,"trocr"),yHr.forEach(t),_3o=r(KEe," \u2014 "),V$=n(KEe,"A",{href:!0});var wHr=s(V$);u3o=r(wHr,"TrOCRForCausalLM"),wHr.forEach(t),b3o=r(KEe," (TrOCR model)"),KEe.forEach(t),v3o=i(D),Qu=n(D,"LI",{});var ZEe=s(Qu);mre=n(ZEe,"STRONG",{});var AHr=s(mre);T3o=r(AHr,"xglm"),AHr.forEach(t),F3o=r(ZEe," \u2014 "),z$=n(ZEe,"A",{href:!0});var LHr=s(z$);C3o=r(LHr,"XGLMForCausalLM"),LHr.forEach(t),M3o=r(ZEe," (XGLM model)"),ZEe.forEach(t),E3o=i(D),Hu=n(D,"LI",{});var e5e=s(Hu);gre=n(e5e,"STRONG",{});var BHr=s(gre);y3o=r(BHr,"xlm"),BHr.forEach(t),w3o=r(e5e," \u2014 "),W$=n(e5e,"A",{href:!0});var xHr=s(W$);A3o=r(xHr,"XLMWithLMHeadModel"),xHr.forEach(t),L3o=r(e5e," (XLM model)"),e5e.forEach(t),B3o=i(D),Uu=n(D,"LI",{});var o5e=s(Uu);hre=n(o5e,"STRONG",{});var kHr=s(hre);x3o=r(kHr,"xlm-prophetnet"),kHr.forEach(t),k3o=r(o5e," \u2014 "),Q$=n(o5e,"A",{href:!0});var RHr=s(Q$);R3o=r(RHr,"XLMProphetNetForCausalLM"),RHr.forEach(t),S3o=r(o5e," (XLMProphetNet model)"),o5e.forEach(t),P3o=i(D),Ju=n(D,"LI",{});var r5e=s(Ju);pre=n(r5e,"STRONG",{});var SHr=s(pre);$3o=r(SHr,"xlm-roberta"),SHr.forEach(t),I3o=r(r5e," \u2014 "),H$=n(r5e,"A",{href:!0});var PHr=s(H$);D3o=r(PHr,"XLMRobertaForCausalLM"),PHr.forEach(t),N3o=r(r5e," (XLM-RoBERTa model)"),r5e.forEach(t),j3o=i(D),Yu=n(D,"LI",{});var t5e=s(Yu);_re=n(t5e,"STRONG",{});var $Hr=s(_re);q3o=r($Hr,"xlm-roberta-xl"),$Hr.forEach(t),G3o=r(t5e," \u2014 "),U$=n(t5e,"A",{href:!0});var IHr=s(U$);O3o=r(IHr,"XLMRobertaXLForCausalLM"),IHr.forEach(t),X3o=r(t5e," (XLM-RoBERTa-XL model)"),t5e.forEach(t),V3o=i(D),Ku=n(D,"LI",{});var a5e=s(Ku);ure=n(a5e,"STRONG",{});var DHr=s(ure);z3o=r(DHr,"xlnet"),DHr.forEach(t),W3o=r(a5e," \u2014 "),J$=n(a5e,"A",{href:!0});var NHr=s(J$);Q3o=r(NHr,"XLNetLMHeadModel"),NHr.forEach(t),H3o=r(a5e," (XLNet model)"),a5e.forEach(t),D.forEach(t),U3o=i(Ot),Zu=n(Ot,"P",{});var n5e=s(Zu);J3o=r(n5e,"The model is set in evaluation mode by default using "),bre=n(n5e,"CODE",{});var jHr=s(bre);Y3o=r(jHr,"model.eval()"),jHr.forEach(t),K3o=r(n5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vre=n(n5e,"CODE",{});var qHr=s(vre);Z3o=r(qHr,"model.train()"),qHr.forEach(t),n5e.forEach(t),evo=i(Ot),Tre=n(Ot,"P",{});var GHr=s(Tre);ovo=r(GHr,"Examples:"),GHr.forEach(t),rvo=i(Ot),m(g5.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),Hke=i(c),nd=n(c,"H2",{class:!0});var tPe=s(nd);e2=n(tPe,"A",{id:!0,class:!0,href:!0});var OHr=s(e2);Fre=n(OHr,"SPAN",{});var XHr=s(Fre);m(h5.$$.fragment,XHr),XHr.forEach(t),OHr.forEach(t),tvo=i(tPe),Cre=n(tPe,"SPAN",{});var VHr=s(Cre);avo=r(VHr,"AutoModelForMaskedLM"),VHr.forEach(t),tPe.forEach(t),Uke=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(p5.$$.fragment,Ks),nvo=i(Ks),sd=n(Ks,"P",{});var pW=s(sd);svo=r(pW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Mre=n(pW,"CODE",{});var zHr=s(Mre);lvo=r(zHr,"from_pretrained()"),zHr.forEach(t),ivo=r(pW,"class method or the "),Ere=n(pW,"CODE",{});var WHr=s(Ere);dvo=r(WHr,"from_config()"),WHr.forEach(t),cvo=r(pW,`class
method.`),pW.forEach(t),fvo=i(Ks),_5=n(Ks,"P",{});var aPe=s(_5);mvo=r(aPe,"This class cannot be instantiated directly using "),yre=n(aPe,"CODE",{});var QHr=s(yre);gvo=r(QHr,"__init__()"),QHr.forEach(t),hvo=r(aPe," (throws an error)."),aPe.forEach(t),pvo=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(u5.$$.fragment,Zs),_vo=i(Zs),wre=n(Zs,"P",{});var HHr=s(wre);uvo=r(HHr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),HHr.forEach(t),bvo=i(Zs),ld=n(Zs,"P",{});var _W=s(ld);vvo=r(_W,`Note:
Loading a model from its configuration file does `),Are=n(_W,"STRONG",{});var UHr=s(Are);Tvo=r(UHr,"not"),UHr.forEach(t),Fvo=r(_W,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lre=n(_W,"CODE",{});var JHr=s(Lre);Cvo=r(JHr,"from_pretrained()"),JHr.forEach(t),Mvo=r(_W,"to load the model weights."),_W.forEach(t),Evo=i(Zs),Bre=n(Zs,"P",{});var YHr=s(Bre);yvo=r(YHr,"Examples:"),YHr.forEach(t),wvo=i(Zs),m(b5.$$.fragment,Zs),Zs.forEach(t),Avo=i(Ks),qe=n(Ks,"DIV",{class:!0});var Xt=s(qe);m(v5.$$.fragment,Xt),Lvo=i(Xt),xre=n(Xt,"P",{});var KHr=s(xre);Bvo=r(KHr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),KHr.forEach(t),xvo=i(Xt),Qa=n(Xt,"P",{});var T4=s(Qa);kvo=r(T4,"The model class to instantiate is selected based on the "),kre=n(T4,"CODE",{});var ZHr=s(kre);Rvo=r(ZHr,"model_type"),ZHr.forEach(t),Svo=r(T4,` property of the config object (either
passed as an argument or loaded from `),Rre=n(T4,"CODE",{});var eUr=s(Rre);Pvo=r(eUr,"pretrained_model_name_or_path"),eUr.forEach(t),$vo=r(T4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sre=n(T4,"CODE",{});var oUr=s(Sre);Ivo=r(oUr,"pretrained_model_name_or_path"),oUr.forEach(t),Dvo=r(T4,":"),T4.forEach(t),Nvo=i(Xt),I=n(Xt,"UL",{});var N=s(I);o2=n(N,"LI",{});var s5e=s(o2);Pre=n(s5e,"STRONG",{});var rUr=s(Pre);jvo=r(rUr,"albert"),rUr.forEach(t),qvo=r(s5e," \u2014 "),Y$=n(s5e,"A",{href:!0});var tUr=s(Y$);Gvo=r(tUr,"AlbertForMaskedLM"),tUr.forEach(t),Ovo=r(s5e," (ALBERT model)"),s5e.forEach(t),Xvo=i(N),r2=n(N,"LI",{});var l5e=s(r2);$re=n(l5e,"STRONG",{});var aUr=s($re);Vvo=r(aUr,"bart"),aUr.forEach(t),zvo=r(l5e," \u2014 "),K$=n(l5e,"A",{href:!0});var nUr=s(K$);Wvo=r(nUr,"BartForConditionalGeneration"),nUr.forEach(t),Qvo=r(l5e," (BART model)"),l5e.forEach(t),Hvo=i(N),t2=n(N,"LI",{});var i5e=s(t2);Ire=n(i5e,"STRONG",{});var sUr=s(Ire);Uvo=r(sUr,"bert"),sUr.forEach(t),Jvo=r(i5e," \u2014 "),Z$=n(i5e,"A",{href:!0});var lUr=s(Z$);Yvo=r(lUr,"BertForMaskedLM"),lUr.forEach(t),Kvo=r(i5e," (BERT model)"),i5e.forEach(t),Zvo=i(N),a2=n(N,"LI",{});var d5e=s(a2);Dre=n(d5e,"STRONG",{});var iUr=s(Dre);e6o=r(iUr,"big_bird"),iUr.forEach(t),o6o=r(d5e," \u2014 "),eI=n(d5e,"A",{href:!0});var dUr=s(eI);r6o=r(dUr,"BigBirdForMaskedLM"),dUr.forEach(t),t6o=r(d5e," (BigBird model)"),d5e.forEach(t),a6o=i(N),n2=n(N,"LI",{});var c5e=s(n2);Nre=n(c5e,"STRONG",{});var cUr=s(Nre);n6o=r(cUr,"camembert"),cUr.forEach(t),s6o=r(c5e," \u2014 "),oI=n(c5e,"A",{href:!0});var fUr=s(oI);l6o=r(fUr,"CamembertForMaskedLM"),fUr.forEach(t),i6o=r(c5e," (CamemBERT model)"),c5e.forEach(t),d6o=i(N),s2=n(N,"LI",{});var f5e=s(s2);jre=n(f5e,"STRONG",{});var mUr=s(jre);c6o=r(mUr,"convbert"),mUr.forEach(t),f6o=r(f5e," \u2014 "),rI=n(f5e,"A",{href:!0});var gUr=s(rI);m6o=r(gUr,"ConvBertForMaskedLM"),gUr.forEach(t),g6o=r(f5e," (ConvBERT model)"),f5e.forEach(t),h6o=i(N),l2=n(N,"LI",{});var m5e=s(l2);qre=n(m5e,"STRONG",{});var hUr=s(qre);p6o=r(hUr,"data2vec-text"),hUr.forEach(t),_6o=r(m5e," \u2014 "),tI=n(m5e,"A",{href:!0});var pUr=s(tI);u6o=r(pUr,"Data2VecTextForMaskedLM"),pUr.forEach(t),b6o=r(m5e," (Data2VecText model)"),m5e.forEach(t),v6o=i(N),i2=n(N,"LI",{});var g5e=s(i2);Gre=n(g5e,"STRONG",{});var _Ur=s(Gre);T6o=r(_Ur,"deberta"),_Ur.forEach(t),F6o=r(g5e," \u2014 "),aI=n(g5e,"A",{href:!0});var uUr=s(aI);C6o=r(uUr,"DebertaForMaskedLM"),uUr.forEach(t),M6o=r(g5e," (DeBERTa model)"),g5e.forEach(t),E6o=i(N),d2=n(N,"LI",{});var h5e=s(d2);Ore=n(h5e,"STRONG",{});var bUr=s(Ore);y6o=r(bUr,"deberta-v2"),bUr.forEach(t),w6o=r(h5e," \u2014 "),nI=n(h5e,"A",{href:!0});var vUr=s(nI);A6o=r(vUr,"DebertaV2ForMaskedLM"),vUr.forEach(t),L6o=r(h5e," (DeBERTa-v2 model)"),h5e.forEach(t),B6o=i(N),c2=n(N,"LI",{});var p5e=s(c2);Xre=n(p5e,"STRONG",{});var TUr=s(Xre);x6o=r(TUr,"distilbert"),TUr.forEach(t),k6o=r(p5e," \u2014 "),sI=n(p5e,"A",{href:!0});var FUr=s(sI);R6o=r(FUr,"DistilBertForMaskedLM"),FUr.forEach(t),S6o=r(p5e," (DistilBERT model)"),p5e.forEach(t),P6o=i(N),f2=n(N,"LI",{});var _5e=s(f2);Vre=n(_5e,"STRONG",{});var CUr=s(Vre);$6o=r(CUr,"electra"),CUr.forEach(t),I6o=r(_5e," \u2014 "),lI=n(_5e,"A",{href:!0});var MUr=s(lI);D6o=r(MUr,"ElectraForMaskedLM"),MUr.forEach(t),N6o=r(_5e," (ELECTRA model)"),_5e.forEach(t),j6o=i(N),m2=n(N,"LI",{});var u5e=s(m2);zre=n(u5e,"STRONG",{});var EUr=s(zre);q6o=r(EUr,"flaubert"),EUr.forEach(t),G6o=r(u5e," \u2014 "),iI=n(u5e,"A",{href:!0});var yUr=s(iI);O6o=r(yUr,"FlaubertWithLMHeadModel"),yUr.forEach(t),X6o=r(u5e," (FlauBERT model)"),u5e.forEach(t),V6o=i(N),g2=n(N,"LI",{});var b5e=s(g2);Wre=n(b5e,"STRONG",{});var wUr=s(Wre);z6o=r(wUr,"fnet"),wUr.forEach(t),W6o=r(b5e," \u2014 "),dI=n(b5e,"A",{href:!0});var AUr=s(dI);Q6o=r(AUr,"FNetForMaskedLM"),AUr.forEach(t),H6o=r(b5e," (FNet model)"),b5e.forEach(t),U6o=i(N),h2=n(N,"LI",{});var v5e=s(h2);Qre=n(v5e,"STRONG",{});var LUr=s(Qre);J6o=r(LUr,"funnel"),LUr.forEach(t),Y6o=r(v5e," \u2014 "),cI=n(v5e,"A",{href:!0});var BUr=s(cI);K6o=r(BUr,"FunnelForMaskedLM"),BUr.forEach(t),Z6o=r(v5e," (Funnel Transformer model)"),v5e.forEach(t),eTo=i(N),p2=n(N,"LI",{});var T5e=s(p2);Hre=n(T5e,"STRONG",{});var xUr=s(Hre);oTo=r(xUr,"ibert"),xUr.forEach(t),rTo=r(T5e," \u2014 "),fI=n(T5e,"A",{href:!0});var kUr=s(fI);tTo=r(kUr,"IBertForMaskedLM"),kUr.forEach(t),aTo=r(T5e," (I-BERT model)"),T5e.forEach(t),nTo=i(N),_2=n(N,"LI",{});var F5e=s(_2);Ure=n(F5e,"STRONG",{});var RUr=s(Ure);sTo=r(RUr,"layoutlm"),RUr.forEach(t),lTo=r(F5e," \u2014 "),mI=n(F5e,"A",{href:!0});var SUr=s(mI);iTo=r(SUr,"LayoutLMForMaskedLM"),SUr.forEach(t),dTo=r(F5e," (LayoutLM model)"),F5e.forEach(t),cTo=i(N),u2=n(N,"LI",{});var C5e=s(u2);Jre=n(C5e,"STRONG",{});var PUr=s(Jre);fTo=r(PUr,"longformer"),PUr.forEach(t),mTo=r(C5e," \u2014 "),gI=n(C5e,"A",{href:!0});var $Ur=s(gI);gTo=r($Ur,"LongformerForMaskedLM"),$Ur.forEach(t),hTo=r(C5e," (Longformer model)"),C5e.forEach(t),pTo=i(N),b2=n(N,"LI",{});var M5e=s(b2);Yre=n(M5e,"STRONG",{});var IUr=s(Yre);_To=r(IUr,"mbart"),IUr.forEach(t),uTo=r(M5e," \u2014 "),hI=n(M5e,"A",{href:!0});var DUr=s(hI);bTo=r(DUr,"MBartForConditionalGeneration"),DUr.forEach(t),vTo=r(M5e," (mBART model)"),M5e.forEach(t),TTo=i(N),v2=n(N,"LI",{});var E5e=s(v2);Kre=n(E5e,"STRONG",{});var NUr=s(Kre);FTo=r(NUr,"megatron-bert"),NUr.forEach(t),CTo=r(E5e," \u2014 "),pI=n(E5e,"A",{href:!0});var jUr=s(pI);MTo=r(jUr,"MegatronBertForMaskedLM"),jUr.forEach(t),ETo=r(E5e," (MegatronBert model)"),E5e.forEach(t),yTo=i(N),T2=n(N,"LI",{});var y5e=s(T2);Zre=n(y5e,"STRONG",{});var qUr=s(Zre);wTo=r(qUr,"mobilebert"),qUr.forEach(t),ATo=r(y5e," \u2014 "),_I=n(y5e,"A",{href:!0});var GUr=s(_I);LTo=r(GUr,"MobileBertForMaskedLM"),GUr.forEach(t),BTo=r(y5e," (MobileBERT model)"),y5e.forEach(t),xTo=i(N),F2=n(N,"LI",{});var w5e=s(F2);ete=n(w5e,"STRONG",{});var OUr=s(ete);kTo=r(OUr,"mpnet"),OUr.forEach(t),RTo=r(w5e," \u2014 "),uI=n(w5e,"A",{href:!0});var XUr=s(uI);STo=r(XUr,"MPNetForMaskedLM"),XUr.forEach(t),PTo=r(w5e," (MPNet model)"),w5e.forEach(t),$To=i(N),C2=n(N,"LI",{});var A5e=s(C2);ote=n(A5e,"STRONG",{});var VUr=s(ote);ITo=r(VUr,"nystromformer"),VUr.forEach(t),DTo=r(A5e," \u2014 "),bI=n(A5e,"A",{href:!0});var zUr=s(bI);NTo=r(zUr,"NystromformerForMaskedLM"),zUr.forEach(t),jTo=r(A5e," (Nystromformer model)"),A5e.forEach(t),qTo=i(N),M2=n(N,"LI",{});var L5e=s(M2);rte=n(L5e,"STRONG",{});var WUr=s(rte);GTo=r(WUr,"perceiver"),WUr.forEach(t),OTo=r(L5e," \u2014 "),vI=n(L5e,"A",{href:!0});var QUr=s(vI);XTo=r(QUr,"PerceiverForMaskedLM"),QUr.forEach(t),VTo=r(L5e," (Perceiver model)"),L5e.forEach(t),zTo=i(N),E2=n(N,"LI",{});var B5e=s(E2);tte=n(B5e,"STRONG",{});var HUr=s(tte);WTo=r(HUr,"qdqbert"),HUr.forEach(t),QTo=r(B5e," \u2014 "),TI=n(B5e,"A",{href:!0});var UUr=s(TI);HTo=r(UUr,"QDQBertForMaskedLM"),UUr.forEach(t),UTo=r(B5e," (QDQBert model)"),B5e.forEach(t),JTo=i(N),y2=n(N,"LI",{});var x5e=s(y2);ate=n(x5e,"STRONG",{});var JUr=s(ate);YTo=r(JUr,"reformer"),JUr.forEach(t),KTo=r(x5e," \u2014 "),FI=n(x5e,"A",{href:!0});var YUr=s(FI);ZTo=r(YUr,"ReformerForMaskedLM"),YUr.forEach(t),eFo=r(x5e," (Reformer model)"),x5e.forEach(t),oFo=i(N),w2=n(N,"LI",{});var k5e=s(w2);nte=n(k5e,"STRONG",{});var KUr=s(nte);rFo=r(KUr,"rembert"),KUr.forEach(t),tFo=r(k5e," \u2014 "),CI=n(k5e,"A",{href:!0});var ZUr=s(CI);aFo=r(ZUr,"RemBertForMaskedLM"),ZUr.forEach(t),nFo=r(k5e," (RemBERT model)"),k5e.forEach(t),sFo=i(N),A2=n(N,"LI",{});var R5e=s(A2);ste=n(R5e,"STRONG",{});var eJr=s(ste);lFo=r(eJr,"roberta"),eJr.forEach(t),iFo=r(R5e," \u2014 "),MI=n(R5e,"A",{href:!0});var oJr=s(MI);dFo=r(oJr,"RobertaForMaskedLM"),oJr.forEach(t),cFo=r(R5e," (RoBERTa model)"),R5e.forEach(t),fFo=i(N),L2=n(N,"LI",{});var S5e=s(L2);lte=n(S5e,"STRONG",{});var rJr=s(lte);mFo=r(rJr,"roformer"),rJr.forEach(t),gFo=r(S5e," \u2014 "),EI=n(S5e,"A",{href:!0});var tJr=s(EI);hFo=r(tJr,"RoFormerForMaskedLM"),tJr.forEach(t),pFo=r(S5e," (RoFormer model)"),S5e.forEach(t),_Fo=i(N),B2=n(N,"LI",{});var P5e=s(B2);ite=n(P5e,"STRONG",{});var aJr=s(ite);uFo=r(aJr,"squeezebert"),aJr.forEach(t),bFo=r(P5e," \u2014 "),yI=n(P5e,"A",{href:!0});var nJr=s(yI);vFo=r(nJr,"SqueezeBertForMaskedLM"),nJr.forEach(t),TFo=r(P5e," (SqueezeBERT model)"),P5e.forEach(t),FFo=i(N),x2=n(N,"LI",{});var $5e=s(x2);dte=n($5e,"STRONG",{});var sJr=s(dte);CFo=r(sJr,"tapas"),sJr.forEach(t),MFo=r($5e," \u2014 "),wI=n($5e,"A",{href:!0});var lJr=s(wI);EFo=r(lJr,"TapasForMaskedLM"),lJr.forEach(t),yFo=r($5e," (TAPAS model)"),$5e.forEach(t),wFo=i(N),k2=n(N,"LI",{});var I5e=s(k2);cte=n(I5e,"STRONG",{});var iJr=s(cte);AFo=r(iJr,"wav2vec2"),iJr.forEach(t),LFo=r(I5e," \u2014 "),fte=n(I5e,"CODE",{});var dJr=s(fte);BFo=r(dJr,"Wav2Vec2ForMaskedLM"),dJr.forEach(t),xFo=r(I5e,"(Wav2Vec2 model)"),I5e.forEach(t),kFo=i(N),R2=n(N,"LI",{});var D5e=s(R2);mte=n(D5e,"STRONG",{});var cJr=s(mte);RFo=r(cJr,"xlm"),cJr.forEach(t),SFo=r(D5e," \u2014 "),AI=n(D5e,"A",{href:!0});var fJr=s(AI);PFo=r(fJr,"XLMWithLMHeadModel"),fJr.forEach(t),$Fo=r(D5e," (XLM model)"),D5e.forEach(t),IFo=i(N),S2=n(N,"LI",{});var N5e=s(S2);gte=n(N5e,"STRONG",{});var mJr=s(gte);DFo=r(mJr,"xlm-roberta"),mJr.forEach(t),NFo=r(N5e," \u2014 "),LI=n(N5e,"A",{href:!0});var gJr=s(LI);jFo=r(gJr,"XLMRobertaForMaskedLM"),gJr.forEach(t),qFo=r(N5e," (XLM-RoBERTa model)"),N5e.forEach(t),GFo=i(N),P2=n(N,"LI",{});var j5e=s(P2);hte=n(j5e,"STRONG",{});var hJr=s(hte);OFo=r(hJr,"xlm-roberta-xl"),hJr.forEach(t),XFo=r(j5e," \u2014 "),BI=n(j5e,"A",{href:!0});var pJr=s(BI);VFo=r(pJr,"XLMRobertaXLForMaskedLM"),pJr.forEach(t),zFo=r(j5e," (XLM-RoBERTa-XL model)"),j5e.forEach(t),WFo=i(N),$2=n(N,"LI",{});var q5e=s($2);pte=n(q5e,"STRONG",{});var _Jr=s(pte);QFo=r(_Jr,"yoso"),_Jr.forEach(t),HFo=r(q5e," \u2014 "),xI=n(q5e,"A",{href:!0});var uJr=s(xI);UFo=r(uJr,"YosoForMaskedLM"),uJr.forEach(t),JFo=r(q5e," (YOSO model)"),q5e.forEach(t),N.forEach(t),YFo=i(Xt),I2=n(Xt,"P",{});var G5e=s(I2);KFo=r(G5e,"The model is set in evaluation mode by default using "),_te=n(G5e,"CODE",{});var bJr=s(_te);ZFo=r(bJr,"model.eval()"),bJr.forEach(t),e9o=r(G5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ute=n(G5e,"CODE",{});var vJr=s(ute);o9o=r(vJr,"model.train()"),vJr.forEach(t),G5e.forEach(t),r9o=i(Xt),bte=n(Xt,"P",{});var TJr=s(bte);t9o=r(TJr,"Examples:"),TJr.forEach(t),a9o=i(Xt),m(T5.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),Jke=i(c),id=n(c,"H2",{class:!0});var nPe=s(id);D2=n(nPe,"A",{id:!0,class:!0,href:!0});var FJr=s(D2);vte=n(FJr,"SPAN",{});var CJr=s(vte);m(F5.$$.fragment,CJr),CJr.forEach(t),FJr.forEach(t),n9o=i(nPe),Tte=n(nPe,"SPAN",{});var MJr=s(Tte);s9o=r(MJr,"AutoModelForSeq2SeqLM"),MJr.forEach(t),nPe.forEach(t),Yke=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(C5.$$.fragment,el),l9o=i(el),dd=n(el,"P",{});var uW=s(dd);i9o=r(uW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Fte=n(uW,"CODE",{});var EJr=s(Fte);d9o=r(EJr,"from_pretrained()"),EJr.forEach(t),c9o=r(uW,"class method or the "),Cte=n(uW,"CODE",{});var yJr=s(Cte);f9o=r(yJr,"from_config()"),yJr.forEach(t),m9o=r(uW,`class
method.`),uW.forEach(t),g9o=i(el),M5=n(el,"P",{});var sPe=s(M5);h9o=r(sPe,"This class cannot be instantiated directly using "),Mte=n(sPe,"CODE",{});var wJr=s(Mte);p9o=r(wJr,"__init__()"),wJr.forEach(t),_9o=r(sPe," (throws an error)."),sPe.forEach(t),u9o=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(E5.$$.fragment,ol),b9o=i(ol),Ete=n(ol,"P",{});var AJr=s(Ete);v9o=r(AJr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),AJr.forEach(t),T9o=i(ol),cd=n(ol,"P",{});var bW=s(cd);F9o=r(bW,`Note:
Loading a model from its configuration file does `),yte=n(bW,"STRONG",{});var LJr=s(yte);C9o=r(LJr,"not"),LJr.forEach(t),M9o=r(bW,` load the model weights. It only affects the
model\u2019s configuration. Use `),wte=n(bW,"CODE",{});var BJr=s(wte);E9o=r(BJr,"from_pretrained()"),BJr.forEach(t),y9o=r(bW,"to load the model weights."),bW.forEach(t),w9o=i(ol),Ate=n(ol,"P",{});var xJr=s(Ate);A9o=r(xJr,"Examples:"),xJr.forEach(t),L9o=i(ol),m(y5.$$.fragment,ol),ol.forEach(t),B9o=i(el),Ge=n(el,"DIV",{class:!0});var Vt=s(Ge);m(w5.$$.fragment,Vt),x9o=i(Vt),Lte=n(Vt,"P",{});var kJr=s(Lte);k9o=r(kJr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kJr.forEach(t),R9o=i(Vt),Ha=n(Vt,"P",{});var F4=s(Ha);S9o=r(F4,"The model class to instantiate is selected based on the "),Bte=n(F4,"CODE",{});var RJr=s(Bte);P9o=r(RJr,"model_type"),RJr.forEach(t),$9o=r(F4,` property of the config object (either
passed as an argument or loaded from `),xte=n(F4,"CODE",{});var SJr=s(xte);I9o=r(SJr,"pretrained_model_name_or_path"),SJr.forEach(t),D9o=r(F4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kte=n(F4,"CODE",{});var PJr=s(kte);N9o=r(PJr,"pretrained_model_name_or_path"),PJr.forEach(t),j9o=r(F4,":"),F4.forEach(t),q9o=i(Vt),se=n(Vt,"UL",{});var ie=s(se);N2=n(ie,"LI",{});var O5e=s(N2);Rte=n(O5e,"STRONG",{});var $Jr=s(Rte);G9o=r($Jr,"bart"),$Jr.forEach(t),O9o=r(O5e," \u2014 "),kI=n(O5e,"A",{href:!0});var IJr=s(kI);X9o=r(IJr,"BartForConditionalGeneration"),IJr.forEach(t),V9o=r(O5e," (BART model)"),O5e.forEach(t),z9o=i(ie),j2=n(ie,"LI",{});var X5e=s(j2);Ste=n(X5e,"STRONG",{});var DJr=s(Ste);W9o=r(DJr,"bigbird_pegasus"),DJr.forEach(t),Q9o=r(X5e," \u2014 "),RI=n(X5e,"A",{href:!0});var NJr=s(RI);H9o=r(NJr,"BigBirdPegasusForConditionalGeneration"),NJr.forEach(t),U9o=r(X5e," (BigBirdPegasus model)"),X5e.forEach(t),J9o=i(ie),q2=n(ie,"LI",{});var V5e=s(q2);Pte=n(V5e,"STRONG",{});var jJr=s(Pte);Y9o=r(jJr,"blenderbot"),jJr.forEach(t),K9o=r(V5e," \u2014 "),SI=n(V5e,"A",{href:!0});var qJr=s(SI);Z9o=r(qJr,"BlenderbotForConditionalGeneration"),qJr.forEach(t),eCo=r(V5e," (Blenderbot model)"),V5e.forEach(t),oCo=i(ie),G2=n(ie,"LI",{});var z5e=s(G2);$te=n(z5e,"STRONG",{});var GJr=s($te);rCo=r(GJr,"blenderbot-small"),GJr.forEach(t),tCo=r(z5e," \u2014 "),PI=n(z5e,"A",{href:!0});var OJr=s(PI);aCo=r(OJr,"BlenderbotSmallForConditionalGeneration"),OJr.forEach(t),nCo=r(z5e," (BlenderbotSmall model)"),z5e.forEach(t),sCo=i(ie),O2=n(ie,"LI",{});var W5e=s(O2);Ite=n(W5e,"STRONG",{});var XJr=s(Ite);lCo=r(XJr,"encoder-decoder"),XJr.forEach(t),iCo=r(W5e," \u2014 "),$I=n(W5e,"A",{href:!0});var VJr=s($I);dCo=r(VJr,"EncoderDecoderModel"),VJr.forEach(t),cCo=r(W5e," (Encoder decoder model)"),W5e.forEach(t),fCo=i(ie),X2=n(ie,"LI",{});var Q5e=s(X2);Dte=n(Q5e,"STRONG",{});var zJr=s(Dte);mCo=r(zJr,"fsmt"),zJr.forEach(t),gCo=r(Q5e," \u2014 "),II=n(Q5e,"A",{href:!0});var WJr=s(II);hCo=r(WJr,"FSMTForConditionalGeneration"),WJr.forEach(t),pCo=r(Q5e," (FairSeq Machine-Translation model)"),Q5e.forEach(t),_Co=i(ie),V2=n(ie,"LI",{});var H5e=s(V2);Nte=n(H5e,"STRONG",{});var QJr=s(Nte);uCo=r(QJr,"led"),QJr.forEach(t),bCo=r(H5e," \u2014 "),DI=n(H5e,"A",{href:!0});var HJr=s(DI);vCo=r(HJr,"LEDForConditionalGeneration"),HJr.forEach(t),TCo=r(H5e," (LED model)"),H5e.forEach(t),FCo=i(ie),z2=n(ie,"LI",{});var U5e=s(z2);jte=n(U5e,"STRONG",{});var UJr=s(jte);CCo=r(UJr,"m2m_100"),UJr.forEach(t),MCo=r(U5e," \u2014 "),NI=n(U5e,"A",{href:!0});var JJr=s(NI);ECo=r(JJr,"M2M100ForConditionalGeneration"),JJr.forEach(t),yCo=r(U5e," (M2M100 model)"),U5e.forEach(t),wCo=i(ie),W2=n(ie,"LI",{});var J5e=s(W2);qte=n(J5e,"STRONG",{});var YJr=s(qte);ACo=r(YJr,"marian"),YJr.forEach(t),LCo=r(J5e," \u2014 "),jI=n(J5e,"A",{href:!0});var KJr=s(jI);BCo=r(KJr,"MarianMTModel"),KJr.forEach(t),xCo=r(J5e," (Marian model)"),J5e.forEach(t),kCo=i(ie),Q2=n(ie,"LI",{});var Y5e=s(Q2);Gte=n(Y5e,"STRONG",{});var ZJr=s(Gte);RCo=r(ZJr,"mbart"),ZJr.forEach(t),SCo=r(Y5e," \u2014 "),qI=n(Y5e,"A",{href:!0});var eYr=s(qI);PCo=r(eYr,"MBartForConditionalGeneration"),eYr.forEach(t),$Co=r(Y5e," (mBART model)"),Y5e.forEach(t),ICo=i(ie),H2=n(ie,"LI",{});var K5e=s(H2);Ote=n(K5e,"STRONG",{});var oYr=s(Ote);DCo=r(oYr,"mt5"),oYr.forEach(t),NCo=r(K5e," \u2014 "),GI=n(K5e,"A",{href:!0});var rYr=s(GI);jCo=r(rYr,"MT5ForConditionalGeneration"),rYr.forEach(t),qCo=r(K5e," (mT5 model)"),K5e.forEach(t),GCo=i(ie),U2=n(ie,"LI",{});var Z5e=s(U2);Xte=n(Z5e,"STRONG",{});var tYr=s(Xte);OCo=r(tYr,"pegasus"),tYr.forEach(t),XCo=r(Z5e," \u2014 "),OI=n(Z5e,"A",{href:!0});var aYr=s(OI);VCo=r(aYr,"PegasusForConditionalGeneration"),aYr.forEach(t),zCo=r(Z5e," (Pegasus model)"),Z5e.forEach(t),WCo=i(ie),J2=n(ie,"LI",{});var eye=s(J2);Vte=n(eye,"STRONG",{});var nYr=s(Vte);QCo=r(nYr,"plbart"),nYr.forEach(t),HCo=r(eye," \u2014 "),XI=n(eye,"A",{href:!0});var sYr=s(XI);UCo=r(sYr,"PLBartForConditionalGeneration"),sYr.forEach(t),JCo=r(eye," (PLBart model)"),eye.forEach(t),YCo=i(ie),Y2=n(ie,"LI",{});var oye=s(Y2);zte=n(oye,"STRONG",{});var lYr=s(zte);KCo=r(lYr,"prophetnet"),lYr.forEach(t),ZCo=r(oye," \u2014 "),VI=n(oye,"A",{href:!0});var iYr=s(VI);eMo=r(iYr,"ProphetNetForConditionalGeneration"),iYr.forEach(t),oMo=r(oye," (ProphetNet model)"),oye.forEach(t),rMo=i(ie),K2=n(ie,"LI",{});var rye=s(K2);Wte=n(rye,"STRONG",{});var dYr=s(Wte);tMo=r(dYr,"t5"),dYr.forEach(t),aMo=r(rye," \u2014 "),zI=n(rye,"A",{href:!0});var cYr=s(zI);nMo=r(cYr,"T5ForConditionalGeneration"),cYr.forEach(t),sMo=r(rye," (T5 model)"),rye.forEach(t),lMo=i(ie),Z2=n(ie,"LI",{});var tye=s(Z2);Qte=n(tye,"STRONG",{});var fYr=s(Qte);iMo=r(fYr,"xlm-prophetnet"),fYr.forEach(t),dMo=r(tye," \u2014 "),WI=n(tye,"A",{href:!0});var mYr=s(WI);cMo=r(mYr,"XLMProphetNetForConditionalGeneration"),mYr.forEach(t),fMo=r(tye," (XLMProphetNet model)"),tye.forEach(t),ie.forEach(t),mMo=i(Vt),e1=n(Vt,"P",{});var aye=s(e1);gMo=r(aye,"The model is set in evaluation mode by default using "),Hte=n(aye,"CODE",{});var gYr=s(Hte);hMo=r(gYr,"model.eval()"),gYr.forEach(t),pMo=r(aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ute=n(aye,"CODE",{});var hYr=s(Ute);_Mo=r(hYr,"model.train()"),hYr.forEach(t),aye.forEach(t),uMo=i(Vt),Jte=n(Vt,"P",{});var pYr=s(Jte);bMo=r(pYr,"Examples:"),pYr.forEach(t),vMo=i(Vt),m(A5.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),Kke=i(c),fd=n(c,"H2",{class:!0});var lPe=s(fd);o1=n(lPe,"A",{id:!0,class:!0,href:!0});var _Yr=s(o1);Yte=n(_Yr,"SPAN",{});var uYr=s(Yte);m(L5.$$.fragment,uYr),uYr.forEach(t),_Yr.forEach(t),TMo=i(lPe),Kte=n(lPe,"SPAN",{});var bYr=s(Kte);FMo=r(bYr,"AutoModelForSequenceClassification"),bYr.forEach(t),lPe.forEach(t),Zke=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(B5.$$.fragment,rl),CMo=i(rl),md=n(rl,"P",{});var vW=s(md);MMo=r(vW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Zte=n(vW,"CODE",{});var vYr=s(Zte);EMo=r(vYr,"from_pretrained()"),vYr.forEach(t),yMo=r(vW,"class method or the "),eae=n(vW,"CODE",{});var TYr=s(eae);wMo=r(TYr,"from_config()"),TYr.forEach(t),AMo=r(vW,`class
method.`),vW.forEach(t),LMo=i(rl),x5=n(rl,"P",{});var iPe=s(x5);BMo=r(iPe,"This class cannot be instantiated directly using "),oae=n(iPe,"CODE",{});var FYr=s(oae);xMo=r(FYr,"__init__()"),FYr.forEach(t),kMo=r(iPe," (throws an error)."),iPe.forEach(t),RMo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(k5.$$.fragment,tl),SMo=i(tl),rae=n(tl,"P",{});var CYr=s(rae);PMo=r(CYr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),CYr.forEach(t),$Mo=i(tl),gd=n(tl,"P",{});var TW=s(gd);IMo=r(TW,`Note:
Loading a model from its configuration file does `),tae=n(TW,"STRONG",{});var MYr=s(tae);DMo=r(MYr,"not"),MYr.forEach(t),NMo=r(TW,` load the model weights. It only affects the
model\u2019s configuration. Use `),aae=n(TW,"CODE",{});var EYr=s(aae);jMo=r(EYr,"from_pretrained()"),EYr.forEach(t),qMo=r(TW,"to load the model weights."),TW.forEach(t),GMo=i(tl),nae=n(tl,"P",{});var yYr=s(nae);OMo=r(yYr,"Examples:"),yYr.forEach(t),XMo=i(tl),m(R5.$$.fragment,tl),tl.forEach(t),VMo=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(S5.$$.fragment,zt),zMo=i(zt),sae=n(zt,"P",{});var wYr=s(sae);WMo=r(wYr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wYr.forEach(t),QMo=i(zt),Ua=n(zt,"P",{});var C4=s(Ua);HMo=r(C4,"The model class to instantiate is selected based on the "),lae=n(C4,"CODE",{});var AYr=s(lae);UMo=r(AYr,"model_type"),AYr.forEach(t),JMo=r(C4,` property of the config object (either
passed as an argument or loaded from `),iae=n(C4,"CODE",{});var LYr=s(iae);YMo=r(LYr,"pretrained_model_name_or_path"),LYr.forEach(t),KMo=r(C4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dae=n(C4,"CODE",{});var BYr=s(dae);ZMo=r(BYr,"pretrained_model_name_or_path"),BYr.forEach(t),e4o=r(C4,":"),C4.forEach(t),o4o=i(zt),A=n(zt,"UL",{});var L=s(A);r1=n(L,"LI",{});var nye=s(r1);cae=n(nye,"STRONG",{});var xYr=s(cae);r4o=r(xYr,"albert"),xYr.forEach(t),t4o=r(nye," \u2014 "),QI=n(nye,"A",{href:!0});var kYr=s(QI);a4o=r(kYr,"AlbertForSequenceClassification"),kYr.forEach(t),n4o=r(nye," (ALBERT model)"),nye.forEach(t),s4o=i(L),t1=n(L,"LI",{});var sye=s(t1);fae=n(sye,"STRONG",{});var RYr=s(fae);l4o=r(RYr,"bart"),RYr.forEach(t),i4o=r(sye," \u2014 "),HI=n(sye,"A",{href:!0});var SYr=s(HI);d4o=r(SYr,"BartForSequenceClassification"),SYr.forEach(t),c4o=r(sye," (BART model)"),sye.forEach(t),f4o=i(L),a1=n(L,"LI",{});var lye=s(a1);mae=n(lye,"STRONG",{});var PYr=s(mae);m4o=r(PYr,"bert"),PYr.forEach(t),g4o=r(lye," \u2014 "),UI=n(lye,"A",{href:!0});var $Yr=s(UI);h4o=r($Yr,"BertForSequenceClassification"),$Yr.forEach(t),p4o=r(lye," (BERT model)"),lye.forEach(t),_4o=i(L),n1=n(L,"LI",{});var iye=s(n1);gae=n(iye,"STRONG",{});var IYr=s(gae);u4o=r(IYr,"big_bird"),IYr.forEach(t),b4o=r(iye," \u2014 "),JI=n(iye,"A",{href:!0});var DYr=s(JI);v4o=r(DYr,"BigBirdForSequenceClassification"),DYr.forEach(t),T4o=r(iye," (BigBird model)"),iye.forEach(t),F4o=i(L),s1=n(L,"LI",{});var dye=s(s1);hae=n(dye,"STRONG",{});var NYr=s(hae);C4o=r(NYr,"bigbird_pegasus"),NYr.forEach(t),M4o=r(dye," \u2014 "),YI=n(dye,"A",{href:!0});var jYr=s(YI);E4o=r(jYr,"BigBirdPegasusForSequenceClassification"),jYr.forEach(t),y4o=r(dye," (BigBirdPegasus model)"),dye.forEach(t),w4o=i(L),l1=n(L,"LI",{});var cye=s(l1);pae=n(cye,"STRONG",{});var qYr=s(pae);A4o=r(qYr,"camembert"),qYr.forEach(t),L4o=r(cye," \u2014 "),KI=n(cye,"A",{href:!0});var GYr=s(KI);B4o=r(GYr,"CamembertForSequenceClassification"),GYr.forEach(t),x4o=r(cye," (CamemBERT model)"),cye.forEach(t),k4o=i(L),i1=n(L,"LI",{});var fye=s(i1);_ae=n(fye,"STRONG",{});var OYr=s(_ae);R4o=r(OYr,"canine"),OYr.forEach(t),S4o=r(fye," \u2014 "),ZI=n(fye,"A",{href:!0});var XYr=s(ZI);P4o=r(XYr,"CanineForSequenceClassification"),XYr.forEach(t),$4o=r(fye," (Canine model)"),fye.forEach(t),I4o=i(L),d1=n(L,"LI",{});var mye=s(d1);uae=n(mye,"STRONG",{});var VYr=s(uae);D4o=r(VYr,"convbert"),VYr.forEach(t),N4o=r(mye," \u2014 "),eD=n(mye,"A",{href:!0});var zYr=s(eD);j4o=r(zYr,"ConvBertForSequenceClassification"),zYr.forEach(t),q4o=r(mye," (ConvBERT model)"),mye.forEach(t),G4o=i(L),c1=n(L,"LI",{});var gye=s(c1);bae=n(gye,"STRONG",{});var WYr=s(bae);O4o=r(WYr,"ctrl"),WYr.forEach(t),X4o=r(gye," \u2014 "),oD=n(gye,"A",{href:!0});var QYr=s(oD);V4o=r(QYr,"CTRLForSequenceClassification"),QYr.forEach(t),z4o=r(gye," (CTRL model)"),gye.forEach(t),W4o=i(L),f1=n(L,"LI",{});var hye=s(f1);vae=n(hye,"STRONG",{});var HYr=s(vae);Q4o=r(HYr,"data2vec-text"),HYr.forEach(t),H4o=r(hye," \u2014 "),rD=n(hye,"A",{href:!0});var UYr=s(rD);U4o=r(UYr,"Data2VecTextForSequenceClassification"),UYr.forEach(t),J4o=r(hye," (Data2VecText model)"),hye.forEach(t),Y4o=i(L),m1=n(L,"LI",{});var pye=s(m1);Tae=n(pye,"STRONG",{});var JYr=s(Tae);K4o=r(JYr,"deberta"),JYr.forEach(t),Z4o=r(pye," \u2014 "),tD=n(pye,"A",{href:!0});var YYr=s(tD);eEo=r(YYr,"DebertaForSequenceClassification"),YYr.forEach(t),oEo=r(pye," (DeBERTa model)"),pye.forEach(t),rEo=i(L),g1=n(L,"LI",{});var _ye=s(g1);Fae=n(_ye,"STRONG",{});var KYr=s(Fae);tEo=r(KYr,"deberta-v2"),KYr.forEach(t),aEo=r(_ye," \u2014 "),aD=n(_ye,"A",{href:!0});var ZYr=s(aD);nEo=r(ZYr,"DebertaV2ForSequenceClassification"),ZYr.forEach(t),sEo=r(_ye," (DeBERTa-v2 model)"),_ye.forEach(t),lEo=i(L),h1=n(L,"LI",{});var uye=s(h1);Cae=n(uye,"STRONG",{});var eKr=s(Cae);iEo=r(eKr,"distilbert"),eKr.forEach(t),dEo=r(uye," \u2014 "),nD=n(uye,"A",{href:!0});var oKr=s(nD);cEo=r(oKr,"DistilBertForSequenceClassification"),oKr.forEach(t),fEo=r(uye," (DistilBERT model)"),uye.forEach(t),mEo=i(L),p1=n(L,"LI",{});var bye=s(p1);Mae=n(bye,"STRONG",{});var rKr=s(Mae);gEo=r(rKr,"electra"),rKr.forEach(t),hEo=r(bye," \u2014 "),sD=n(bye,"A",{href:!0});var tKr=s(sD);pEo=r(tKr,"ElectraForSequenceClassification"),tKr.forEach(t),_Eo=r(bye," (ELECTRA model)"),bye.forEach(t),uEo=i(L),_1=n(L,"LI",{});var vye=s(_1);Eae=n(vye,"STRONG",{});var aKr=s(Eae);bEo=r(aKr,"flaubert"),aKr.forEach(t),vEo=r(vye," \u2014 "),lD=n(vye,"A",{href:!0});var nKr=s(lD);TEo=r(nKr,"FlaubertForSequenceClassification"),nKr.forEach(t),FEo=r(vye," (FlauBERT model)"),vye.forEach(t),CEo=i(L),u1=n(L,"LI",{});var Tye=s(u1);yae=n(Tye,"STRONG",{});var sKr=s(yae);MEo=r(sKr,"fnet"),sKr.forEach(t),EEo=r(Tye," \u2014 "),iD=n(Tye,"A",{href:!0});var lKr=s(iD);yEo=r(lKr,"FNetForSequenceClassification"),lKr.forEach(t),wEo=r(Tye," (FNet model)"),Tye.forEach(t),AEo=i(L),b1=n(L,"LI",{});var Fye=s(b1);wae=n(Fye,"STRONG",{});var iKr=s(wae);LEo=r(iKr,"funnel"),iKr.forEach(t),BEo=r(Fye," \u2014 "),dD=n(Fye,"A",{href:!0});var dKr=s(dD);xEo=r(dKr,"FunnelForSequenceClassification"),dKr.forEach(t),kEo=r(Fye," (Funnel Transformer model)"),Fye.forEach(t),REo=i(L),v1=n(L,"LI",{});var Cye=s(v1);Aae=n(Cye,"STRONG",{});var cKr=s(Aae);SEo=r(cKr,"gpt2"),cKr.forEach(t),PEo=r(Cye," \u2014 "),cD=n(Cye,"A",{href:!0});var fKr=s(cD);$Eo=r(fKr,"GPT2ForSequenceClassification"),fKr.forEach(t),IEo=r(Cye," (OpenAI GPT-2 model)"),Cye.forEach(t),DEo=i(L),T1=n(L,"LI",{});var Mye=s(T1);Lae=n(Mye,"STRONG",{});var mKr=s(Lae);NEo=r(mKr,"gpt_neo"),mKr.forEach(t),jEo=r(Mye," \u2014 "),fD=n(Mye,"A",{href:!0});var gKr=s(fD);qEo=r(gKr,"GPTNeoForSequenceClassification"),gKr.forEach(t),GEo=r(Mye," (GPT Neo model)"),Mye.forEach(t),OEo=i(L),F1=n(L,"LI",{});var Eye=s(F1);Bae=n(Eye,"STRONG",{});var hKr=s(Bae);XEo=r(hKr,"gptj"),hKr.forEach(t),VEo=r(Eye," \u2014 "),mD=n(Eye,"A",{href:!0});var pKr=s(mD);zEo=r(pKr,"GPTJForSequenceClassification"),pKr.forEach(t),WEo=r(Eye," (GPT-J model)"),Eye.forEach(t),QEo=i(L),C1=n(L,"LI",{});var yye=s(C1);xae=n(yye,"STRONG",{});var _Kr=s(xae);HEo=r(_Kr,"ibert"),_Kr.forEach(t),UEo=r(yye," \u2014 "),gD=n(yye,"A",{href:!0});var uKr=s(gD);JEo=r(uKr,"IBertForSequenceClassification"),uKr.forEach(t),YEo=r(yye," (I-BERT model)"),yye.forEach(t),KEo=i(L),M1=n(L,"LI",{});var wye=s(M1);kae=n(wye,"STRONG",{});var bKr=s(kae);ZEo=r(bKr,"layoutlm"),bKr.forEach(t),e5o=r(wye," \u2014 "),hD=n(wye,"A",{href:!0});var vKr=s(hD);o5o=r(vKr,"LayoutLMForSequenceClassification"),vKr.forEach(t),r5o=r(wye," (LayoutLM model)"),wye.forEach(t),t5o=i(L),E1=n(L,"LI",{});var Aye=s(E1);Rae=n(Aye,"STRONG",{});var TKr=s(Rae);a5o=r(TKr,"layoutlmv2"),TKr.forEach(t),n5o=r(Aye," \u2014 "),pD=n(Aye,"A",{href:!0});var FKr=s(pD);s5o=r(FKr,"LayoutLMv2ForSequenceClassification"),FKr.forEach(t),l5o=r(Aye," (LayoutLMv2 model)"),Aye.forEach(t),i5o=i(L),y1=n(L,"LI",{});var Lye=s(y1);Sae=n(Lye,"STRONG",{});var CKr=s(Sae);d5o=r(CKr,"led"),CKr.forEach(t),c5o=r(Lye," \u2014 "),_D=n(Lye,"A",{href:!0});var MKr=s(_D);f5o=r(MKr,"LEDForSequenceClassification"),MKr.forEach(t),m5o=r(Lye," (LED model)"),Lye.forEach(t),g5o=i(L),w1=n(L,"LI",{});var Bye=s(w1);Pae=n(Bye,"STRONG",{});var EKr=s(Pae);h5o=r(EKr,"longformer"),EKr.forEach(t),p5o=r(Bye," \u2014 "),uD=n(Bye,"A",{href:!0});var yKr=s(uD);_5o=r(yKr,"LongformerForSequenceClassification"),yKr.forEach(t),u5o=r(Bye," (Longformer model)"),Bye.forEach(t),b5o=i(L),A1=n(L,"LI",{});var xye=s(A1);$ae=n(xye,"STRONG",{});var wKr=s($ae);v5o=r(wKr,"mbart"),wKr.forEach(t),T5o=r(xye," \u2014 "),bD=n(xye,"A",{href:!0});var AKr=s(bD);F5o=r(AKr,"MBartForSequenceClassification"),AKr.forEach(t),C5o=r(xye," (mBART model)"),xye.forEach(t),M5o=i(L),L1=n(L,"LI",{});var kye=s(L1);Iae=n(kye,"STRONG",{});var LKr=s(Iae);E5o=r(LKr,"megatron-bert"),LKr.forEach(t),y5o=r(kye," \u2014 "),vD=n(kye,"A",{href:!0});var BKr=s(vD);w5o=r(BKr,"MegatronBertForSequenceClassification"),BKr.forEach(t),A5o=r(kye," (MegatronBert model)"),kye.forEach(t),L5o=i(L),B1=n(L,"LI",{});var Rye=s(B1);Dae=n(Rye,"STRONG",{});var xKr=s(Dae);B5o=r(xKr,"mobilebert"),xKr.forEach(t),x5o=r(Rye," \u2014 "),TD=n(Rye,"A",{href:!0});var kKr=s(TD);k5o=r(kKr,"MobileBertForSequenceClassification"),kKr.forEach(t),R5o=r(Rye," (MobileBERT model)"),Rye.forEach(t),S5o=i(L),x1=n(L,"LI",{});var Sye=s(x1);Nae=n(Sye,"STRONG",{});var RKr=s(Nae);P5o=r(RKr,"mpnet"),RKr.forEach(t),$5o=r(Sye," \u2014 "),FD=n(Sye,"A",{href:!0});var SKr=s(FD);I5o=r(SKr,"MPNetForSequenceClassification"),SKr.forEach(t),D5o=r(Sye," (MPNet model)"),Sye.forEach(t),N5o=i(L),k1=n(L,"LI",{});var Pye=s(k1);jae=n(Pye,"STRONG",{});var PKr=s(jae);j5o=r(PKr,"nystromformer"),PKr.forEach(t),q5o=r(Pye," \u2014 "),CD=n(Pye,"A",{href:!0});var $Kr=s(CD);G5o=r($Kr,"NystromformerForSequenceClassification"),$Kr.forEach(t),O5o=r(Pye," (Nystromformer model)"),Pye.forEach(t),X5o=i(L),R1=n(L,"LI",{});var $ye=s(R1);qae=n($ye,"STRONG",{});var IKr=s(qae);V5o=r(IKr,"openai-gpt"),IKr.forEach(t),z5o=r($ye," \u2014 "),MD=n($ye,"A",{href:!0});var DKr=s(MD);W5o=r(DKr,"OpenAIGPTForSequenceClassification"),DKr.forEach(t),Q5o=r($ye," (OpenAI GPT model)"),$ye.forEach(t),H5o=i(L),S1=n(L,"LI",{});var Iye=s(S1);Gae=n(Iye,"STRONG",{});var NKr=s(Gae);U5o=r(NKr,"perceiver"),NKr.forEach(t),J5o=r(Iye," \u2014 "),ED=n(Iye,"A",{href:!0});var jKr=s(ED);Y5o=r(jKr,"PerceiverForSequenceClassification"),jKr.forEach(t),K5o=r(Iye," (Perceiver model)"),Iye.forEach(t),Z5o=i(L),P1=n(L,"LI",{});var Dye=s(P1);Oae=n(Dye,"STRONG",{});var qKr=s(Oae);eyo=r(qKr,"plbart"),qKr.forEach(t),oyo=r(Dye," \u2014 "),yD=n(Dye,"A",{href:!0});var GKr=s(yD);ryo=r(GKr,"PLBartForSequenceClassification"),GKr.forEach(t),tyo=r(Dye," (PLBart model)"),Dye.forEach(t),ayo=i(L),$1=n(L,"LI",{});var Nye=s($1);Xae=n(Nye,"STRONG",{});var OKr=s(Xae);nyo=r(OKr,"qdqbert"),OKr.forEach(t),syo=r(Nye," \u2014 "),wD=n(Nye,"A",{href:!0});var XKr=s(wD);lyo=r(XKr,"QDQBertForSequenceClassification"),XKr.forEach(t),iyo=r(Nye," (QDQBert model)"),Nye.forEach(t),dyo=i(L),I1=n(L,"LI",{});var jye=s(I1);Vae=n(jye,"STRONG",{});var VKr=s(Vae);cyo=r(VKr,"reformer"),VKr.forEach(t),fyo=r(jye," \u2014 "),AD=n(jye,"A",{href:!0});var zKr=s(AD);myo=r(zKr,"ReformerForSequenceClassification"),zKr.forEach(t),gyo=r(jye," (Reformer model)"),jye.forEach(t),hyo=i(L),D1=n(L,"LI",{});var qye=s(D1);zae=n(qye,"STRONG",{});var WKr=s(zae);pyo=r(WKr,"rembert"),WKr.forEach(t),_yo=r(qye," \u2014 "),LD=n(qye,"A",{href:!0});var QKr=s(LD);uyo=r(QKr,"RemBertForSequenceClassification"),QKr.forEach(t),byo=r(qye," (RemBERT model)"),qye.forEach(t),vyo=i(L),N1=n(L,"LI",{});var Gye=s(N1);Wae=n(Gye,"STRONG",{});var HKr=s(Wae);Tyo=r(HKr,"roberta"),HKr.forEach(t),Fyo=r(Gye," \u2014 "),BD=n(Gye,"A",{href:!0});var UKr=s(BD);Cyo=r(UKr,"RobertaForSequenceClassification"),UKr.forEach(t),Myo=r(Gye," (RoBERTa model)"),Gye.forEach(t),Eyo=i(L),j1=n(L,"LI",{});var Oye=s(j1);Qae=n(Oye,"STRONG",{});var JKr=s(Qae);yyo=r(JKr,"roformer"),JKr.forEach(t),wyo=r(Oye," \u2014 "),xD=n(Oye,"A",{href:!0});var YKr=s(xD);Ayo=r(YKr,"RoFormerForSequenceClassification"),YKr.forEach(t),Lyo=r(Oye," (RoFormer model)"),Oye.forEach(t),Byo=i(L),q1=n(L,"LI",{});var Xye=s(q1);Hae=n(Xye,"STRONG",{});var KKr=s(Hae);xyo=r(KKr,"squeezebert"),KKr.forEach(t),kyo=r(Xye," \u2014 "),kD=n(Xye,"A",{href:!0});var ZKr=s(kD);Ryo=r(ZKr,"SqueezeBertForSequenceClassification"),ZKr.forEach(t),Syo=r(Xye," (SqueezeBERT model)"),Xye.forEach(t),Pyo=i(L),G1=n(L,"LI",{});var Vye=s(G1);Uae=n(Vye,"STRONG",{});var eZr=s(Uae);$yo=r(eZr,"tapas"),eZr.forEach(t),Iyo=r(Vye," \u2014 "),RD=n(Vye,"A",{href:!0});var oZr=s(RD);Dyo=r(oZr,"TapasForSequenceClassification"),oZr.forEach(t),Nyo=r(Vye," (TAPAS model)"),Vye.forEach(t),jyo=i(L),O1=n(L,"LI",{});var zye=s(O1);Jae=n(zye,"STRONG",{});var rZr=s(Jae);qyo=r(rZr,"transfo-xl"),rZr.forEach(t),Gyo=r(zye," \u2014 "),SD=n(zye,"A",{href:!0});var tZr=s(SD);Oyo=r(tZr,"TransfoXLForSequenceClassification"),tZr.forEach(t),Xyo=r(zye," (Transformer-XL model)"),zye.forEach(t),Vyo=i(L),X1=n(L,"LI",{});var Wye=s(X1);Yae=n(Wye,"STRONG",{});var aZr=s(Yae);zyo=r(aZr,"xlm"),aZr.forEach(t),Wyo=r(Wye," \u2014 "),PD=n(Wye,"A",{href:!0});var nZr=s(PD);Qyo=r(nZr,"XLMForSequenceClassification"),nZr.forEach(t),Hyo=r(Wye," (XLM model)"),Wye.forEach(t),Uyo=i(L),V1=n(L,"LI",{});var Qye=s(V1);Kae=n(Qye,"STRONG",{});var sZr=s(Kae);Jyo=r(sZr,"xlm-roberta"),sZr.forEach(t),Yyo=r(Qye," \u2014 "),$D=n(Qye,"A",{href:!0});var lZr=s($D);Kyo=r(lZr,"XLMRobertaForSequenceClassification"),lZr.forEach(t),Zyo=r(Qye," (XLM-RoBERTa model)"),Qye.forEach(t),ewo=i(L),z1=n(L,"LI",{});var Hye=s(z1);Zae=n(Hye,"STRONG",{});var iZr=s(Zae);owo=r(iZr,"xlm-roberta-xl"),iZr.forEach(t),rwo=r(Hye," \u2014 "),ID=n(Hye,"A",{href:!0});var dZr=s(ID);two=r(dZr,"XLMRobertaXLForSequenceClassification"),dZr.forEach(t),awo=r(Hye," (XLM-RoBERTa-XL model)"),Hye.forEach(t),nwo=i(L),W1=n(L,"LI",{});var Uye=s(W1);ene=n(Uye,"STRONG",{});var cZr=s(ene);swo=r(cZr,"xlnet"),cZr.forEach(t),lwo=r(Uye," \u2014 "),DD=n(Uye,"A",{href:!0});var fZr=s(DD);iwo=r(fZr,"XLNetForSequenceClassification"),fZr.forEach(t),dwo=r(Uye," (XLNet model)"),Uye.forEach(t),cwo=i(L),Q1=n(L,"LI",{});var Jye=s(Q1);one=n(Jye,"STRONG",{});var mZr=s(one);fwo=r(mZr,"yoso"),mZr.forEach(t),mwo=r(Jye," \u2014 "),ND=n(Jye,"A",{href:!0});var gZr=s(ND);gwo=r(gZr,"YosoForSequenceClassification"),gZr.forEach(t),hwo=r(Jye," (YOSO model)"),Jye.forEach(t),L.forEach(t),pwo=i(zt),H1=n(zt,"P",{});var Yye=s(H1);_wo=r(Yye,"The model is set in evaluation mode by default using "),rne=n(Yye,"CODE",{});var hZr=s(rne);uwo=r(hZr,"model.eval()"),hZr.forEach(t),bwo=r(Yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tne=n(Yye,"CODE",{});var pZr=s(tne);vwo=r(pZr,"model.train()"),pZr.forEach(t),Yye.forEach(t),Two=i(zt),ane=n(zt,"P",{});var _Zr=s(ane);Fwo=r(_Zr,"Examples:"),_Zr.forEach(t),Cwo=i(zt),m(P5.$$.fragment,zt),zt.forEach(t),rl.forEach(t),eRe=i(c),hd=n(c,"H2",{class:!0});var dPe=s(hd);U1=n(dPe,"A",{id:!0,class:!0,href:!0});var uZr=s(U1);nne=n(uZr,"SPAN",{});var bZr=s(nne);m($5.$$.fragment,bZr),bZr.forEach(t),uZr.forEach(t),Mwo=i(dPe),sne=n(dPe,"SPAN",{});var vZr=s(sne);Ewo=r(vZr,"AutoModelForMultipleChoice"),vZr.forEach(t),dPe.forEach(t),oRe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(I5.$$.fragment,al),ywo=i(al),pd=n(al,"P",{});var FW=s(pd);wwo=r(FW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lne=n(FW,"CODE",{});var TZr=s(lne);Awo=r(TZr,"from_pretrained()"),TZr.forEach(t),Lwo=r(FW,"class method or the "),ine=n(FW,"CODE",{});var FZr=s(ine);Bwo=r(FZr,"from_config()"),FZr.forEach(t),xwo=r(FW,`class
method.`),FW.forEach(t),kwo=i(al),D5=n(al,"P",{});var cPe=s(D5);Rwo=r(cPe,"This class cannot be instantiated directly using "),dne=n(cPe,"CODE",{});var CZr=s(dne);Swo=r(CZr,"__init__()"),CZr.forEach(t),Pwo=r(cPe," (throws an error)."),cPe.forEach(t),$wo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(N5.$$.fragment,nl),Iwo=i(nl),cne=n(nl,"P",{});var MZr=s(cne);Dwo=r(MZr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),MZr.forEach(t),Nwo=i(nl),_d=n(nl,"P",{});var CW=s(_d);jwo=r(CW,`Note:
Loading a model from its configuration file does `),fne=n(CW,"STRONG",{});var EZr=s(fne);qwo=r(EZr,"not"),EZr.forEach(t),Gwo=r(CW,` load the model weights. It only affects the
model\u2019s configuration. Use `),mne=n(CW,"CODE",{});var yZr=s(mne);Owo=r(yZr,"from_pretrained()"),yZr.forEach(t),Xwo=r(CW,"to load the model weights."),CW.forEach(t),Vwo=i(nl),gne=n(nl,"P",{});var wZr=s(gne);zwo=r(wZr,"Examples:"),wZr.forEach(t),Wwo=i(nl),m(j5.$$.fragment,nl),nl.forEach(t),Qwo=i(al),Xe=n(al,"DIV",{class:!0});var Wt=s(Xe);m(q5.$$.fragment,Wt),Hwo=i(Wt),hne=n(Wt,"P",{});var AZr=s(hne);Uwo=r(AZr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),AZr.forEach(t),Jwo=i(Wt),Ja=n(Wt,"P",{});var M4=s(Ja);Ywo=r(M4,"The model class to instantiate is selected based on the "),pne=n(M4,"CODE",{});var LZr=s(pne);Kwo=r(LZr,"model_type"),LZr.forEach(t),Zwo=r(M4,` property of the config object (either
passed as an argument or loaded from `),_ne=n(M4,"CODE",{});var BZr=s(_ne);eAo=r(BZr,"pretrained_model_name_or_path"),BZr.forEach(t),oAo=r(M4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),une=n(M4,"CODE",{});var xZr=s(une);rAo=r(xZr,"pretrained_model_name_or_path"),xZr.forEach(t),tAo=r(M4,":"),M4.forEach(t),aAo=i(Wt),G=n(Wt,"UL",{});var O=s(G);J1=n(O,"LI",{});var Kye=s(J1);bne=n(Kye,"STRONG",{});var kZr=s(bne);nAo=r(kZr,"albert"),kZr.forEach(t),sAo=r(Kye," \u2014 "),jD=n(Kye,"A",{href:!0});var RZr=s(jD);lAo=r(RZr,"AlbertForMultipleChoice"),RZr.forEach(t),iAo=r(Kye," (ALBERT model)"),Kye.forEach(t),dAo=i(O),Y1=n(O,"LI",{});var Zye=s(Y1);vne=n(Zye,"STRONG",{});var SZr=s(vne);cAo=r(SZr,"bert"),SZr.forEach(t),fAo=r(Zye," \u2014 "),qD=n(Zye,"A",{href:!0});var PZr=s(qD);mAo=r(PZr,"BertForMultipleChoice"),PZr.forEach(t),gAo=r(Zye," (BERT model)"),Zye.forEach(t),hAo=i(O),K1=n(O,"LI",{});var ewe=s(K1);Tne=n(ewe,"STRONG",{});var $Zr=s(Tne);pAo=r($Zr,"big_bird"),$Zr.forEach(t),_Ao=r(ewe," \u2014 "),GD=n(ewe,"A",{href:!0});var IZr=s(GD);uAo=r(IZr,"BigBirdForMultipleChoice"),IZr.forEach(t),bAo=r(ewe," (BigBird model)"),ewe.forEach(t),vAo=i(O),Z1=n(O,"LI",{});var owe=s(Z1);Fne=n(owe,"STRONG",{});var DZr=s(Fne);TAo=r(DZr,"camembert"),DZr.forEach(t),FAo=r(owe," \u2014 "),OD=n(owe,"A",{href:!0});var NZr=s(OD);CAo=r(NZr,"CamembertForMultipleChoice"),NZr.forEach(t),MAo=r(owe," (CamemBERT model)"),owe.forEach(t),EAo=i(O),eb=n(O,"LI",{});var rwe=s(eb);Cne=n(rwe,"STRONG",{});var jZr=s(Cne);yAo=r(jZr,"canine"),jZr.forEach(t),wAo=r(rwe," \u2014 "),XD=n(rwe,"A",{href:!0});var qZr=s(XD);AAo=r(qZr,"CanineForMultipleChoice"),qZr.forEach(t),LAo=r(rwe," (Canine model)"),rwe.forEach(t),BAo=i(O),ob=n(O,"LI",{});var twe=s(ob);Mne=n(twe,"STRONG",{});var GZr=s(Mne);xAo=r(GZr,"convbert"),GZr.forEach(t),kAo=r(twe," \u2014 "),VD=n(twe,"A",{href:!0});var OZr=s(VD);RAo=r(OZr,"ConvBertForMultipleChoice"),OZr.forEach(t),SAo=r(twe," (ConvBERT model)"),twe.forEach(t),PAo=i(O),rb=n(O,"LI",{});var awe=s(rb);Ene=n(awe,"STRONG",{});var XZr=s(Ene);$Ao=r(XZr,"data2vec-text"),XZr.forEach(t),IAo=r(awe," \u2014 "),zD=n(awe,"A",{href:!0});var VZr=s(zD);DAo=r(VZr,"Data2VecTextForMultipleChoice"),VZr.forEach(t),NAo=r(awe," (Data2VecText model)"),awe.forEach(t),jAo=i(O),tb=n(O,"LI",{});var nwe=s(tb);yne=n(nwe,"STRONG",{});var zZr=s(yne);qAo=r(zZr,"distilbert"),zZr.forEach(t),GAo=r(nwe," \u2014 "),WD=n(nwe,"A",{href:!0});var WZr=s(WD);OAo=r(WZr,"DistilBertForMultipleChoice"),WZr.forEach(t),XAo=r(nwe," (DistilBERT model)"),nwe.forEach(t),VAo=i(O),ab=n(O,"LI",{});var swe=s(ab);wne=n(swe,"STRONG",{});var QZr=s(wne);zAo=r(QZr,"electra"),QZr.forEach(t),WAo=r(swe," \u2014 "),QD=n(swe,"A",{href:!0});var HZr=s(QD);QAo=r(HZr,"ElectraForMultipleChoice"),HZr.forEach(t),HAo=r(swe," (ELECTRA model)"),swe.forEach(t),UAo=i(O),nb=n(O,"LI",{});var lwe=s(nb);Ane=n(lwe,"STRONG",{});var UZr=s(Ane);JAo=r(UZr,"flaubert"),UZr.forEach(t),YAo=r(lwe," \u2014 "),HD=n(lwe,"A",{href:!0});var JZr=s(HD);KAo=r(JZr,"FlaubertForMultipleChoice"),JZr.forEach(t),ZAo=r(lwe," (FlauBERT model)"),lwe.forEach(t),e0o=i(O),sb=n(O,"LI",{});var iwe=s(sb);Lne=n(iwe,"STRONG",{});var YZr=s(Lne);o0o=r(YZr,"fnet"),YZr.forEach(t),r0o=r(iwe," \u2014 "),UD=n(iwe,"A",{href:!0});var KZr=s(UD);t0o=r(KZr,"FNetForMultipleChoice"),KZr.forEach(t),a0o=r(iwe," (FNet model)"),iwe.forEach(t),n0o=i(O),lb=n(O,"LI",{});var dwe=s(lb);Bne=n(dwe,"STRONG",{});var ZZr=s(Bne);s0o=r(ZZr,"funnel"),ZZr.forEach(t),l0o=r(dwe," \u2014 "),JD=n(dwe,"A",{href:!0});var eet=s(JD);i0o=r(eet,"FunnelForMultipleChoice"),eet.forEach(t),d0o=r(dwe," (Funnel Transformer model)"),dwe.forEach(t),c0o=i(O),ib=n(O,"LI",{});var cwe=s(ib);xne=n(cwe,"STRONG",{});var oet=s(xne);f0o=r(oet,"ibert"),oet.forEach(t),m0o=r(cwe," \u2014 "),YD=n(cwe,"A",{href:!0});var ret=s(YD);g0o=r(ret,"IBertForMultipleChoice"),ret.forEach(t),h0o=r(cwe," (I-BERT model)"),cwe.forEach(t),p0o=i(O),db=n(O,"LI",{});var fwe=s(db);kne=n(fwe,"STRONG",{});var tet=s(kne);_0o=r(tet,"longformer"),tet.forEach(t),u0o=r(fwe," \u2014 "),KD=n(fwe,"A",{href:!0});var aet=s(KD);b0o=r(aet,"LongformerForMultipleChoice"),aet.forEach(t),v0o=r(fwe," (Longformer model)"),fwe.forEach(t),T0o=i(O),cb=n(O,"LI",{});var mwe=s(cb);Rne=n(mwe,"STRONG",{});var net=s(Rne);F0o=r(net,"megatron-bert"),net.forEach(t),C0o=r(mwe," \u2014 "),ZD=n(mwe,"A",{href:!0});var set=s(ZD);M0o=r(set,"MegatronBertForMultipleChoice"),set.forEach(t),E0o=r(mwe," (MegatronBert model)"),mwe.forEach(t),y0o=i(O),fb=n(O,"LI",{});var gwe=s(fb);Sne=n(gwe,"STRONG",{});var iet=s(Sne);w0o=r(iet,"mobilebert"),iet.forEach(t),A0o=r(gwe," \u2014 "),eN=n(gwe,"A",{href:!0});var det=s(eN);L0o=r(det,"MobileBertForMultipleChoice"),det.forEach(t),B0o=r(gwe," (MobileBERT model)"),gwe.forEach(t),x0o=i(O),mb=n(O,"LI",{});var hwe=s(mb);Pne=n(hwe,"STRONG",{});var cet=s(Pne);k0o=r(cet,"mpnet"),cet.forEach(t),R0o=r(hwe," \u2014 "),oN=n(hwe,"A",{href:!0});var fet=s(oN);S0o=r(fet,"MPNetForMultipleChoice"),fet.forEach(t),P0o=r(hwe," (MPNet model)"),hwe.forEach(t),$0o=i(O),gb=n(O,"LI",{});var pwe=s(gb);$ne=n(pwe,"STRONG",{});var met=s($ne);I0o=r(met,"nystromformer"),met.forEach(t),D0o=r(pwe," \u2014 "),rN=n(pwe,"A",{href:!0});var get=s(rN);N0o=r(get,"NystromformerForMultipleChoice"),get.forEach(t),j0o=r(pwe," (Nystromformer model)"),pwe.forEach(t),q0o=i(O),hb=n(O,"LI",{});var _we=s(hb);Ine=n(_we,"STRONG",{});var het=s(Ine);G0o=r(het,"qdqbert"),het.forEach(t),O0o=r(_we," \u2014 "),tN=n(_we,"A",{href:!0});var pet=s(tN);X0o=r(pet,"QDQBertForMultipleChoice"),pet.forEach(t),V0o=r(_we," (QDQBert model)"),_we.forEach(t),z0o=i(O),pb=n(O,"LI",{});var uwe=s(pb);Dne=n(uwe,"STRONG",{});var _et=s(Dne);W0o=r(_et,"rembert"),_et.forEach(t),Q0o=r(uwe," \u2014 "),aN=n(uwe,"A",{href:!0});var uet=s(aN);H0o=r(uet,"RemBertForMultipleChoice"),uet.forEach(t),U0o=r(uwe," (RemBERT model)"),uwe.forEach(t),J0o=i(O),_b=n(O,"LI",{});var bwe=s(_b);Nne=n(bwe,"STRONG",{});var bet=s(Nne);Y0o=r(bet,"roberta"),bet.forEach(t),K0o=r(bwe," \u2014 "),nN=n(bwe,"A",{href:!0});var vet=s(nN);Z0o=r(vet,"RobertaForMultipleChoice"),vet.forEach(t),eLo=r(bwe," (RoBERTa model)"),bwe.forEach(t),oLo=i(O),ub=n(O,"LI",{});var vwe=s(ub);jne=n(vwe,"STRONG",{});var Tet=s(jne);rLo=r(Tet,"roformer"),Tet.forEach(t),tLo=r(vwe," \u2014 "),sN=n(vwe,"A",{href:!0});var Fet=s(sN);aLo=r(Fet,"RoFormerForMultipleChoice"),Fet.forEach(t),nLo=r(vwe," (RoFormer model)"),vwe.forEach(t),sLo=i(O),bb=n(O,"LI",{});var Twe=s(bb);qne=n(Twe,"STRONG",{});var Cet=s(qne);lLo=r(Cet,"squeezebert"),Cet.forEach(t),iLo=r(Twe," \u2014 "),lN=n(Twe,"A",{href:!0});var Met=s(lN);dLo=r(Met,"SqueezeBertForMultipleChoice"),Met.forEach(t),cLo=r(Twe," (SqueezeBERT model)"),Twe.forEach(t),fLo=i(O),vb=n(O,"LI",{});var Fwe=s(vb);Gne=n(Fwe,"STRONG",{});var Eet=s(Gne);mLo=r(Eet,"xlm"),Eet.forEach(t),gLo=r(Fwe," \u2014 "),iN=n(Fwe,"A",{href:!0});var yet=s(iN);hLo=r(yet,"XLMForMultipleChoice"),yet.forEach(t),pLo=r(Fwe," (XLM model)"),Fwe.forEach(t),_Lo=i(O),Tb=n(O,"LI",{});var Cwe=s(Tb);One=n(Cwe,"STRONG",{});var wet=s(One);uLo=r(wet,"xlm-roberta"),wet.forEach(t),bLo=r(Cwe," \u2014 "),dN=n(Cwe,"A",{href:!0});var Aet=s(dN);vLo=r(Aet,"XLMRobertaForMultipleChoice"),Aet.forEach(t),TLo=r(Cwe," (XLM-RoBERTa model)"),Cwe.forEach(t),FLo=i(O),Fb=n(O,"LI",{});var Mwe=s(Fb);Xne=n(Mwe,"STRONG",{});var Let=s(Xne);CLo=r(Let,"xlm-roberta-xl"),Let.forEach(t),MLo=r(Mwe," \u2014 "),cN=n(Mwe,"A",{href:!0});var Bet=s(cN);ELo=r(Bet,"XLMRobertaXLForMultipleChoice"),Bet.forEach(t),yLo=r(Mwe," (XLM-RoBERTa-XL model)"),Mwe.forEach(t),wLo=i(O),Cb=n(O,"LI",{});var Ewe=s(Cb);Vne=n(Ewe,"STRONG",{});var xet=s(Vne);ALo=r(xet,"xlnet"),xet.forEach(t),LLo=r(Ewe," \u2014 "),fN=n(Ewe,"A",{href:!0});var ket=s(fN);BLo=r(ket,"XLNetForMultipleChoice"),ket.forEach(t),xLo=r(Ewe," (XLNet model)"),Ewe.forEach(t),kLo=i(O),Mb=n(O,"LI",{});var ywe=s(Mb);zne=n(ywe,"STRONG",{});var Ret=s(zne);RLo=r(Ret,"yoso"),Ret.forEach(t),SLo=r(ywe," \u2014 "),mN=n(ywe,"A",{href:!0});var Set=s(mN);PLo=r(Set,"YosoForMultipleChoice"),Set.forEach(t),$Lo=r(ywe," (YOSO model)"),ywe.forEach(t),O.forEach(t),ILo=i(Wt),Eb=n(Wt,"P",{});var wwe=s(Eb);DLo=r(wwe,"The model is set in evaluation mode by default using "),Wne=n(wwe,"CODE",{});var Pet=s(Wne);NLo=r(Pet,"model.eval()"),Pet.forEach(t),jLo=r(wwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qne=n(wwe,"CODE",{});var $et=s(Qne);qLo=r($et,"model.train()"),$et.forEach(t),wwe.forEach(t),GLo=i(Wt),Hne=n(Wt,"P",{});var Iet=s(Hne);OLo=r(Iet,"Examples:"),Iet.forEach(t),XLo=i(Wt),m(G5.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),rRe=i(c),ud=n(c,"H2",{class:!0});var fPe=s(ud);yb=n(fPe,"A",{id:!0,class:!0,href:!0});var Det=s(yb);Une=n(Det,"SPAN",{});var Net=s(Une);m(O5.$$.fragment,Net),Net.forEach(t),Det.forEach(t),VLo=i(fPe),Jne=n(fPe,"SPAN",{});var jet=s(Jne);zLo=r(jet,"AutoModelForNextSentencePrediction"),jet.forEach(t),fPe.forEach(t),tRe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(X5.$$.fragment,sl),WLo=i(sl),bd=n(sl,"P",{});var MW=s(bd);QLo=r(MW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Yne=n(MW,"CODE",{});var qet=s(Yne);HLo=r(qet,"from_pretrained()"),qet.forEach(t),ULo=r(MW,"class method or the "),Kne=n(MW,"CODE",{});var Get=s(Kne);JLo=r(Get,"from_config()"),Get.forEach(t),YLo=r(MW,`class
method.`),MW.forEach(t),KLo=i(sl),V5=n(sl,"P",{});var mPe=s(V5);ZLo=r(mPe,"This class cannot be instantiated directly using "),Zne=n(mPe,"CODE",{});var Oet=s(Zne);e7o=r(Oet,"__init__()"),Oet.forEach(t),o7o=r(mPe," (throws an error)."),mPe.forEach(t),r7o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(z5.$$.fragment,ll),t7o=i(ll),ese=n(ll,"P",{});var Xet=s(ese);a7o=r(Xet,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Xet.forEach(t),n7o=i(ll),vd=n(ll,"P",{});var EW=s(vd);s7o=r(EW,`Note:
Loading a model from its configuration file does `),ose=n(EW,"STRONG",{});var Vet=s(ose);l7o=r(Vet,"not"),Vet.forEach(t),i7o=r(EW,` load the model weights. It only affects the
model\u2019s configuration. Use `),rse=n(EW,"CODE",{});var zet=s(rse);d7o=r(zet,"from_pretrained()"),zet.forEach(t),c7o=r(EW,"to load the model weights."),EW.forEach(t),f7o=i(ll),tse=n(ll,"P",{});var Wet=s(tse);m7o=r(Wet,"Examples:"),Wet.forEach(t),g7o=i(ll),m(W5.$$.fragment,ll),ll.forEach(t),h7o=i(sl),Ve=n(sl,"DIV",{class:!0});var Qt=s(Ve);m(Q5.$$.fragment,Qt),p7o=i(Qt),ase=n(Qt,"P",{});var Qet=s(ase);_7o=r(Qet,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Qet.forEach(t),u7o=i(Qt),Ya=n(Qt,"P",{});var E4=s(Ya);b7o=r(E4,"The model class to instantiate is selected based on the "),nse=n(E4,"CODE",{});var Het=s(nse);v7o=r(Het,"model_type"),Het.forEach(t),T7o=r(E4,` property of the config object (either
passed as an argument or loaded from `),sse=n(E4,"CODE",{});var Uet=s(sse);F7o=r(Uet,"pretrained_model_name_or_path"),Uet.forEach(t),C7o=r(E4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lse=n(E4,"CODE",{});var Jet=s(lse);M7o=r(Jet,"pretrained_model_name_or_path"),Jet.forEach(t),E7o=r(E4,":"),E4.forEach(t),y7o=i(Qt),da=n(Qt,"UL",{});var il=s(da);wb=n(il,"LI",{});var Awe=s(wb);ise=n(Awe,"STRONG",{});var Yet=s(ise);w7o=r(Yet,"bert"),Yet.forEach(t),A7o=r(Awe," \u2014 "),gN=n(Awe,"A",{href:!0});var Ket=s(gN);L7o=r(Ket,"BertForNextSentencePrediction"),Ket.forEach(t),B7o=r(Awe," (BERT model)"),Awe.forEach(t),x7o=i(il),Ab=n(il,"LI",{});var Lwe=s(Ab);dse=n(Lwe,"STRONG",{});var Zet=s(dse);k7o=r(Zet,"fnet"),Zet.forEach(t),R7o=r(Lwe," \u2014 "),hN=n(Lwe,"A",{href:!0});var eot=s(hN);S7o=r(eot,"FNetForNextSentencePrediction"),eot.forEach(t),P7o=r(Lwe," (FNet model)"),Lwe.forEach(t),$7o=i(il),Lb=n(il,"LI",{});var Bwe=s(Lb);cse=n(Bwe,"STRONG",{});var oot=s(cse);I7o=r(oot,"megatron-bert"),oot.forEach(t),D7o=r(Bwe," \u2014 "),pN=n(Bwe,"A",{href:!0});var rot=s(pN);N7o=r(rot,"MegatronBertForNextSentencePrediction"),rot.forEach(t),j7o=r(Bwe," (MegatronBert model)"),Bwe.forEach(t),q7o=i(il),Bb=n(il,"LI",{});var xwe=s(Bb);fse=n(xwe,"STRONG",{});var tot=s(fse);G7o=r(tot,"mobilebert"),tot.forEach(t),O7o=r(xwe," \u2014 "),_N=n(xwe,"A",{href:!0});var aot=s(_N);X7o=r(aot,"MobileBertForNextSentencePrediction"),aot.forEach(t),V7o=r(xwe," (MobileBERT model)"),xwe.forEach(t),z7o=i(il),xb=n(il,"LI",{});var kwe=s(xb);mse=n(kwe,"STRONG",{});var not=s(mse);W7o=r(not,"qdqbert"),not.forEach(t),Q7o=r(kwe," \u2014 "),uN=n(kwe,"A",{href:!0});var sot=s(uN);H7o=r(sot,"QDQBertForNextSentencePrediction"),sot.forEach(t),U7o=r(kwe," (QDQBert model)"),kwe.forEach(t),il.forEach(t),J7o=i(Qt),kb=n(Qt,"P",{});var Rwe=s(kb);Y7o=r(Rwe,"The model is set in evaluation mode by default using "),gse=n(Rwe,"CODE",{});var lot=s(gse);K7o=r(lot,"model.eval()"),lot.forEach(t),Z7o=r(Rwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hse=n(Rwe,"CODE",{});var iot=s(hse);e8o=r(iot,"model.train()"),iot.forEach(t),Rwe.forEach(t),o8o=i(Qt),pse=n(Qt,"P",{});var dot=s(pse);r8o=r(dot,"Examples:"),dot.forEach(t),t8o=i(Qt),m(H5.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),aRe=i(c),Td=n(c,"H2",{class:!0});var gPe=s(Td);Rb=n(gPe,"A",{id:!0,class:!0,href:!0});var cot=s(Rb);_se=n(cot,"SPAN",{});var fot=s(_se);m(U5.$$.fragment,fot),fot.forEach(t),cot.forEach(t),a8o=i(gPe),use=n(gPe,"SPAN",{});var mot=s(use);n8o=r(mot,"AutoModelForTokenClassification"),mot.forEach(t),gPe.forEach(t),nRe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(J5.$$.fragment,dl),s8o=i(dl),Fd=n(dl,"P",{});var yW=s(Fd);l8o=r(yW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bse=n(yW,"CODE",{});var got=s(bse);i8o=r(got,"from_pretrained()"),got.forEach(t),d8o=r(yW,"class method or the "),vse=n(yW,"CODE",{});var hot=s(vse);c8o=r(hot,"from_config()"),hot.forEach(t),f8o=r(yW,`class
method.`),yW.forEach(t),m8o=i(dl),Y5=n(dl,"P",{});var hPe=s(Y5);g8o=r(hPe,"This class cannot be instantiated directly using "),Tse=n(hPe,"CODE",{});var pot=s(Tse);h8o=r(pot,"__init__()"),pot.forEach(t),p8o=r(hPe," (throws an error)."),hPe.forEach(t),_8o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(K5.$$.fragment,cl),u8o=i(cl),Fse=n(cl,"P",{});var _ot=s(Fse);b8o=r(_ot,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_ot.forEach(t),v8o=i(cl),Cd=n(cl,"P",{});var wW=s(Cd);T8o=r(wW,`Note:
Loading a model from its configuration file does `),Cse=n(wW,"STRONG",{});var uot=s(Cse);F8o=r(uot,"not"),uot.forEach(t),C8o=r(wW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mse=n(wW,"CODE",{});var bot=s(Mse);M8o=r(bot,"from_pretrained()"),bot.forEach(t),E8o=r(wW,"to load the model weights."),wW.forEach(t),y8o=i(cl),Ese=n(cl,"P",{});var vot=s(Ese);w8o=r(vot,"Examples:"),vot.forEach(t),A8o=i(cl),m(Z5.$$.fragment,cl),cl.forEach(t),L8o=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(ey.$$.fragment,Ht),B8o=i(Ht),yse=n(Ht,"P",{});var Tot=s(yse);x8o=r(Tot,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Tot.forEach(t),k8o=i(Ht),Ka=n(Ht,"P",{});var y4=s(Ka);R8o=r(y4,"The model class to instantiate is selected based on the "),wse=n(y4,"CODE",{});var Fot=s(wse);S8o=r(Fot,"model_type"),Fot.forEach(t),P8o=r(y4,` property of the config object (either
passed as an argument or loaded from `),Ase=n(y4,"CODE",{});var Cot=s(Ase);$8o=r(Cot,"pretrained_model_name_or_path"),Cot.forEach(t),I8o=r(y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lse=n(y4,"CODE",{});var Mot=s(Lse);D8o=r(Mot,"pretrained_model_name_or_path"),Mot.forEach(t),N8o=r(y4,":"),y4.forEach(t),j8o=i(Ht),j=n(Ht,"UL",{});var q=s(j);Sb=n(q,"LI",{});var Swe=s(Sb);Bse=n(Swe,"STRONG",{});var Eot=s(Bse);q8o=r(Eot,"albert"),Eot.forEach(t),G8o=r(Swe," \u2014 "),bN=n(Swe,"A",{href:!0});var yot=s(bN);O8o=r(yot,"AlbertForTokenClassification"),yot.forEach(t),X8o=r(Swe," (ALBERT model)"),Swe.forEach(t),V8o=i(q),Pb=n(q,"LI",{});var Pwe=s(Pb);xse=n(Pwe,"STRONG",{});var wot=s(xse);z8o=r(wot,"bert"),wot.forEach(t),W8o=r(Pwe," \u2014 "),vN=n(Pwe,"A",{href:!0});var Aot=s(vN);Q8o=r(Aot,"BertForTokenClassification"),Aot.forEach(t),H8o=r(Pwe," (BERT model)"),Pwe.forEach(t),U8o=i(q),$b=n(q,"LI",{});var $we=s($b);kse=n($we,"STRONG",{});var Lot=s(kse);J8o=r(Lot,"big_bird"),Lot.forEach(t),Y8o=r($we," \u2014 "),TN=n($we,"A",{href:!0});var Bot=s(TN);K8o=r(Bot,"BigBirdForTokenClassification"),Bot.forEach(t),Z8o=r($we," (BigBird model)"),$we.forEach(t),eBo=i(q),Ib=n(q,"LI",{});var Iwe=s(Ib);Rse=n(Iwe,"STRONG",{});var xot=s(Rse);oBo=r(xot,"camembert"),xot.forEach(t),rBo=r(Iwe," \u2014 "),FN=n(Iwe,"A",{href:!0});var kot=s(FN);tBo=r(kot,"CamembertForTokenClassification"),kot.forEach(t),aBo=r(Iwe," (CamemBERT model)"),Iwe.forEach(t),nBo=i(q),Db=n(q,"LI",{});var Dwe=s(Db);Sse=n(Dwe,"STRONG",{});var Rot=s(Sse);sBo=r(Rot,"canine"),Rot.forEach(t),lBo=r(Dwe," \u2014 "),CN=n(Dwe,"A",{href:!0});var Sot=s(CN);iBo=r(Sot,"CanineForTokenClassification"),Sot.forEach(t),dBo=r(Dwe," (Canine model)"),Dwe.forEach(t),cBo=i(q),Nb=n(q,"LI",{});var Nwe=s(Nb);Pse=n(Nwe,"STRONG",{});var Pot=s(Pse);fBo=r(Pot,"convbert"),Pot.forEach(t),mBo=r(Nwe," \u2014 "),MN=n(Nwe,"A",{href:!0});var $ot=s(MN);gBo=r($ot,"ConvBertForTokenClassification"),$ot.forEach(t),hBo=r(Nwe," (ConvBERT model)"),Nwe.forEach(t),pBo=i(q),jb=n(q,"LI",{});var jwe=s(jb);$se=n(jwe,"STRONG",{});var Iot=s($se);_Bo=r(Iot,"data2vec-text"),Iot.forEach(t),uBo=r(jwe," \u2014 "),EN=n(jwe,"A",{href:!0});var Dot=s(EN);bBo=r(Dot,"Data2VecTextForTokenClassification"),Dot.forEach(t),vBo=r(jwe," (Data2VecText model)"),jwe.forEach(t),TBo=i(q),qb=n(q,"LI",{});var qwe=s(qb);Ise=n(qwe,"STRONG",{});var Not=s(Ise);FBo=r(Not,"deberta"),Not.forEach(t),CBo=r(qwe," \u2014 "),yN=n(qwe,"A",{href:!0});var jot=s(yN);MBo=r(jot,"DebertaForTokenClassification"),jot.forEach(t),EBo=r(qwe," (DeBERTa model)"),qwe.forEach(t),yBo=i(q),Gb=n(q,"LI",{});var Gwe=s(Gb);Dse=n(Gwe,"STRONG",{});var qot=s(Dse);wBo=r(qot,"deberta-v2"),qot.forEach(t),ABo=r(Gwe," \u2014 "),wN=n(Gwe,"A",{href:!0});var Got=s(wN);LBo=r(Got,"DebertaV2ForTokenClassification"),Got.forEach(t),BBo=r(Gwe," (DeBERTa-v2 model)"),Gwe.forEach(t),xBo=i(q),Ob=n(q,"LI",{});var Owe=s(Ob);Nse=n(Owe,"STRONG",{});var Oot=s(Nse);kBo=r(Oot,"distilbert"),Oot.forEach(t),RBo=r(Owe," \u2014 "),AN=n(Owe,"A",{href:!0});var Xot=s(AN);SBo=r(Xot,"DistilBertForTokenClassification"),Xot.forEach(t),PBo=r(Owe," (DistilBERT model)"),Owe.forEach(t),$Bo=i(q),Xb=n(q,"LI",{});var Xwe=s(Xb);jse=n(Xwe,"STRONG",{});var Vot=s(jse);IBo=r(Vot,"electra"),Vot.forEach(t),DBo=r(Xwe," \u2014 "),LN=n(Xwe,"A",{href:!0});var zot=s(LN);NBo=r(zot,"ElectraForTokenClassification"),zot.forEach(t),jBo=r(Xwe," (ELECTRA model)"),Xwe.forEach(t),qBo=i(q),Vb=n(q,"LI",{});var Vwe=s(Vb);qse=n(Vwe,"STRONG",{});var Wot=s(qse);GBo=r(Wot,"flaubert"),Wot.forEach(t),OBo=r(Vwe," \u2014 "),BN=n(Vwe,"A",{href:!0});var Qot=s(BN);XBo=r(Qot,"FlaubertForTokenClassification"),Qot.forEach(t),VBo=r(Vwe," (FlauBERT model)"),Vwe.forEach(t),zBo=i(q),zb=n(q,"LI",{});var zwe=s(zb);Gse=n(zwe,"STRONG",{});var Hot=s(Gse);WBo=r(Hot,"fnet"),Hot.forEach(t),QBo=r(zwe," \u2014 "),xN=n(zwe,"A",{href:!0});var Uot=s(xN);HBo=r(Uot,"FNetForTokenClassification"),Uot.forEach(t),UBo=r(zwe," (FNet model)"),zwe.forEach(t),JBo=i(q),Wb=n(q,"LI",{});var Wwe=s(Wb);Ose=n(Wwe,"STRONG",{});var Jot=s(Ose);YBo=r(Jot,"funnel"),Jot.forEach(t),KBo=r(Wwe," \u2014 "),kN=n(Wwe,"A",{href:!0});var Yot=s(kN);ZBo=r(Yot,"FunnelForTokenClassification"),Yot.forEach(t),exo=r(Wwe," (Funnel Transformer model)"),Wwe.forEach(t),oxo=i(q),Qb=n(q,"LI",{});var Qwe=s(Qb);Xse=n(Qwe,"STRONG",{});var Kot=s(Xse);rxo=r(Kot,"gpt2"),Kot.forEach(t),txo=r(Qwe," \u2014 "),RN=n(Qwe,"A",{href:!0});var Zot=s(RN);axo=r(Zot,"GPT2ForTokenClassification"),Zot.forEach(t),nxo=r(Qwe," (OpenAI GPT-2 model)"),Qwe.forEach(t),sxo=i(q),Hb=n(q,"LI",{});var Hwe=s(Hb);Vse=n(Hwe,"STRONG",{});var ert=s(Vse);lxo=r(ert,"ibert"),ert.forEach(t),ixo=r(Hwe," \u2014 "),SN=n(Hwe,"A",{href:!0});var ort=s(SN);dxo=r(ort,"IBertForTokenClassification"),ort.forEach(t),cxo=r(Hwe," (I-BERT model)"),Hwe.forEach(t),fxo=i(q),Ub=n(q,"LI",{});var Uwe=s(Ub);zse=n(Uwe,"STRONG",{});var rrt=s(zse);mxo=r(rrt,"layoutlm"),rrt.forEach(t),gxo=r(Uwe," \u2014 "),PN=n(Uwe,"A",{href:!0});var trt=s(PN);hxo=r(trt,"LayoutLMForTokenClassification"),trt.forEach(t),pxo=r(Uwe," (LayoutLM model)"),Uwe.forEach(t),_xo=i(q),Jb=n(q,"LI",{});var Jwe=s(Jb);Wse=n(Jwe,"STRONG",{});var art=s(Wse);uxo=r(art,"layoutlmv2"),art.forEach(t),bxo=r(Jwe," \u2014 "),$N=n(Jwe,"A",{href:!0});var nrt=s($N);vxo=r(nrt,"LayoutLMv2ForTokenClassification"),nrt.forEach(t),Txo=r(Jwe," (LayoutLMv2 model)"),Jwe.forEach(t),Fxo=i(q),Yb=n(q,"LI",{});var Ywe=s(Yb);Qse=n(Ywe,"STRONG",{});var srt=s(Qse);Cxo=r(srt,"longformer"),srt.forEach(t),Mxo=r(Ywe," \u2014 "),IN=n(Ywe,"A",{href:!0});var lrt=s(IN);Exo=r(lrt,"LongformerForTokenClassification"),lrt.forEach(t),yxo=r(Ywe," (Longformer model)"),Ywe.forEach(t),wxo=i(q),Kb=n(q,"LI",{});var Kwe=s(Kb);Hse=n(Kwe,"STRONG",{});var irt=s(Hse);Axo=r(irt,"megatron-bert"),irt.forEach(t),Lxo=r(Kwe," \u2014 "),DN=n(Kwe,"A",{href:!0});var drt=s(DN);Bxo=r(drt,"MegatronBertForTokenClassification"),drt.forEach(t),xxo=r(Kwe," (MegatronBert model)"),Kwe.forEach(t),kxo=i(q),Zb=n(q,"LI",{});var Zwe=s(Zb);Use=n(Zwe,"STRONG",{});var crt=s(Use);Rxo=r(crt,"mobilebert"),crt.forEach(t),Sxo=r(Zwe," \u2014 "),NN=n(Zwe,"A",{href:!0});var frt=s(NN);Pxo=r(frt,"MobileBertForTokenClassification"),frt.forEach(t),$xo=r(Zwe," (MobileBERT model)"),Zwe.forEach(t),Ixo=i(q),e3=n(q,"LI",{});var eAe=s(e3);Jse=n(eAe,"STRONG",{});var mrt=s(Jse);Dxo=r(mrt,"mpnet"),mrt.forEach(t),Nxo=r(eAe," \u2014 "),jN=n(eAe,"A",{href:!0});var grt=s(jN);jxo=r(grt,"MPNetForTokenClassification"),grt.forEach(t),qxo=r(eAe," (MPNet model)"),eAe.forEach(t),Gxo=i(q),o3=n(q,"LI",{});var oAe=s(o3);Yse=n(oAe,"STRONG",{});var hrt=s(Yse);Oxo=r(hrt,"nystromformer"),hrt.forEach(t),Xxo=r(oAe," \u2014 "),qN=n(oAe,"A",{href:!0});var prt=s(qN);Vxo=r(prt,"NystromformerForTokenClassification"),prt.forEach(t),zxo=r(oAe," (Nystromformer model)"),oAe.forEach(t),Wxo=i(q),r3=n(q,"LI",{});var rAe=s(r3);Kse=n(rAe,"STRONG",{});var _rt=s(Kse);Qxo=r(_rt,"qdqbert"),_rt.forEach(t),Hxo=r(rAe," \u2014 "),GN=n(rAe,"A",{href:!0});var urt=s(GN);Uxo=r(urt,"QDQBertForTokenClassification"),urt.forEach(t),Jxo=r(rAe," (QDQBert model)"),rAe.forEach(t),Yxo=i(q),t3=n(q,"LI",{});var tAe=s(t3);Zse=n(tAe,"STRONG",{});var brt=s(Zse);Kxo=r(brt,"rembert"),brt.forEach(t),Zxo=r(tAe," \u2014 "),ON=n(tAe,"A",{href:!0});var vrt=s(ON);eko=r(vrt,"RemBertForTokenClassification"),vrt.forEach(t),oko=r(tAe," (RemBERT model)"),tAe.forEach(t),rko=i(q),a3=n(q,"LI",{});var aAe=s(a3);ele=n(aAe,"STRONG",{});var Trt=s(ele);tko=r(Trt,"roberta"),Trt.forEach(t),ako=r(aAe," \u2014 "),XN=n(aAe,"A",{href:!0});var Frt=s(XN);nko=r(Frt,"RobertaForTokenClassification"),Frt.forEach(t),sko=r(aAe," (RoBERTa model)"),aAe.forEach(t),lko=i(q),n3=n(q,"LI",{});var nAe=s(n3);ole=n(nAe,"STRONG",{});var Crt=s(ole);iko=r(Crt,"roformer"),Crt.forEach(t),dko=r(nAe," \u2014 "),VN=n(nAe,"A",{href:!0});var Mrt=s(VN);cko=r(Mrt,"RoFormerForTokenClassification"),Mrt.forEach(t),fko=r(nAe," (RoFormer model)"),nAe.forEach(t),mko=i(q),s3=n(q,"LI",{});var sAe=s(s3);rle=n(sAe,"STRONG",{});var Ert=s(rle);gko=r(Ert,"squeezebert"),Ert.forEach(t),hko=r(sAe," \u2014 "),zN=n(sAe,"A",{href:!0});var yrt=s(zN);pko=r(yrt,"SqueezeBertForTokenClassification"),yrt.forEach(t),_ko=r(sAe," (SqueezeBERT model)"),sAe.forEach(t),uko=i(q),l3=n(q,"LI",{});var lAe=s(l3);tle=n(lAe,"STRONG",{});var wrt=s(tle);bko=r(wrt,"xlm"),wrt.forEach(t),vko=r(lAe," \u2014 "),WN=n(lAe,"A",{href:!0});var Art=s(WN);Tko=r(Art,"XLMForTokenClassification"),Art.forEach(t),Fko=r(lAe," (XLM model)"),lAe.forEach(t),Cko=i(q),i3=n(q,"LI",{});var iAe=s(i3);ale=n(iAe,"STRONG",{});var Lrt=s(ale);Mko=r(Lrt,"xlm-roberta"),Lrt.forEach(t),Eko=r(iAe," \u2014 "),QN=n(iAe,"A",{href:!0});var Brt=s(QN);yko=r(Brt,"XLMRobertaForTokenClassification"),Brt.forEach(t),wko=r(iAe," (XLM-RoBERTa model)"),iAe.forEach(t),Ako=i(q),d3=n(q,"LI",{});var dAe=s(d3);nle=n(dAe,"STRONG",{});var xrt=s(nle);Lko=r(xrt,"xlm-roberta-xl"),xrt.forEach(t),Bko=r(dAe," \u2014 "),HN=n(dAe,"A",{href:!0});var krt=s(HN);xko=r(krt,"XLMRobertaXLForTokenClassification"),krt.forEach(t),kko=r(dAe," (XLM-RoBERTa-XL model)"),dAe.forEach(t),Rko=i(q),c3=n(q,"LI",{});var cAe=s(c3);sle=n(cAe,"STRONG",{});var Rrt=s(sle);Sko=r(Rrt,"xlnet"),Rrt.forEach(t),Pko=r(cAe," \u2014 "),UN=n(cAe,"A",{href:!0});var Srt=s(UN);$ko=r(Srt,"XLNetForTokenClassification"),Srt.forEach(t),Iko=r(cAe," (XLNet model)"),cAe.forEach(t),Dko=i(q),f3=n(q,"LI",{});var fAe=s(f3);lle=n(fAe,"STRONG",{});var Prt=s(lle);Nko=r(Prt,"yoso"),Prt.forEach(t),jko=r(fAe," \u2014 "),JN=n(fAe,"A",{href:!0});var $rt=s(JN);qko=r($rt,"YosoForTokenClassification"),$rt.forEach(t),Gko=r(fAe," (YOSO model)"),fAe.forEach(t),q.forEach(t),Oko=i(Ht),m3=n(Ht,"P",{});var mAe=s(m3);Xko=r(mAe,"The model is set in evaluation mode by default using "),ile=n(mAe,"CODE",{});var Irt=s(ile);Vko=r(Irt,"model.eval()"),Irt.forEach(t),zko=r(mAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dle=n(mAe,"CODE",{});var Drt=s(dle);Wko=r(Drt,"model.train()"),Drt.forEach(t),mAe.forEach(t),Qko=i(Ht),cle=n(Ht,"P",{});var Nrt=s(cle);Hko=r(Nrt,"Examples:"),Nrt.forEach(t),Uko=i(Ht),m(oy.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),sRe=i(c),Md=n(c,"H2",{class:!0});var pPe=s(Md);g3=n(pPe,"A",{id:!0,class:!0,href:!0});var jrt=s(g3);fle=n(jrt,"SPAN",{});var qrt=s(fle);m(ry.$$.fragment,qrt),qrt.forEach(t),jrt.forEach(t),Jko=i(pPe),mle=n(pPe,"SPAN",{});var Grt=s(mle);Yko=r(Grt,"AutoModelForQuestionAnswering"),Grt.forEach(t),pPe.forEach(t),lRe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(ty.$$.fragment,fl),Kko=i(fl),Ed=n(fl,"P",{});var AW=s(Ed);Zko=r(AW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gle=n(AW,"CODE",{});var Ort=s(gle);eRo=r(Ort,"from_pretrained()"),Ort.forEach(t),oRo=r(AW,"class method or the "),hle=n(AW,"CODE",{});var Xrt=s(hle);rRo=r(Xrt,"from_config()"),Xrt.forEach(t),tRo=r(AW,`class
method.`),AW.forEach(t),aRo=i(fl),ay=n(fl,"P",{});var _Pe=s(ay);nRo=r(_Pe,"This class cannot be instantiated directly using "),ple=n(_Pe,"CODE",{});var Vrt=s(ple);sRo=r(Vrt,"__init__()"),Vrt.forEach(t),lRo=r(_Pe," (throws an error)."),_Pe.forEach(t),iRo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(ny.$$.fragment,ml),dRo=i(ml),_le=n(ml,"P",{});var zrt=s(_le);cRo=r(zrt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zrt.forEach(t),fRo=i(ml),yd=n(ml,"P",{});var LW=s(yd);mRo=r(LW,`Note:
Loading a model from its configuration file does `),ule=n(LW,"STRONG",{});var Wrt=s(ule);gRo=r(Wrt,"not"),Wrt.forEach(t),hRo=r(LW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ble=n(LW,"CODE",{});var Qrt=s(ble);pRo=r(Qrt,"from_pretrained()"),Qrt.forEach(t),_Ro=r(LW,"to load the model weights."),LW.forEach(t),uRo=i(ml),vle=n(ml,"P",{});var Hrt=s(vle);bRo=r(Hrt,"Examples:"),Hrt.forEach(t),vRo=i(ml),m(sy.$$.fragment,ml),ml.forEach(t),TRo=i(fl),We=n(fl,"DIV",{class:!0});var Ut=s(We);m(ly.$$.fragment,Ut),FRo=i(Ut),Tle=n(Ut,"P",{});var Urt=s(Tle);CRo=r(Urt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Urt.forEach(t),MRo=i(Ut),Za=n(Ut,"P",{});var w4=s(Za);ERo=r(w4,"The model class to instantiate is selected based on the "),Fle=n(w4,"CODE",{});var Jrt=s(Fle);yRo=r(Jrt,"model_type"),Jrt.forEach(t),wRo=r(w4,` property of the config object (either
passed as an argument or loaded from `),Cle=n(w4,"CODE",{});var Yrt=s(Cle);ARo=r(Yrt,"pretrained_model_name_or_path"),Yrt.forEach(t),LRo=r(w4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mle=n(w4,"CODE",{});var Krt=s(Mle);BRo=r(Krt,"pretrained_model_name_or_path"),Krt.forEach(t),xRo=r(w4,":"),w4.forEach(t),kRo=i(Ut),R=n(Ut,"UL",{});var P=s(R);h3=n(P,"LI",{});var gAe=s(h3);Ele=n(gAe,"STRONG",{});var Zrt=s(Ele);RRo=r(Zrt,"albert"),Zrt.forEach(t),SRo=r(gAe," \u2014 "),YN=n(gAe,"A",{href:!0});var ett=s(YN);PRo=r(ett,"AlbertForQuestionAnswering"),ett.forEach(t),$Ro=r(gAe," (ALBERT model)"),gAe.forEach(t),IRo=i(P),p3=n(P,"LI",{});var hAe=s(p3);yle=n(hAe,"STRONG",{});var ott=s(yle);DRo=r(ott,"bart"),ott.forEach(t),NRo=r(hAe," \u2014 "),KN=n(hAe,"A",{href:!0});var rtt=s(KN);jRo=r(rtt,"BartForQuestionAnswering"),rtt.forEach(t),qRo=r(hAe," (BART model)"),hAe.forEach(t),GRo=i(P),_3=n(P,"LI",{});var pAe=s(_3);wle=n(pAe,"STRONG",{});var ttt=s(wle);ORo=r(ttt,"bert"),ttt.forEach(t),XRo=r(pAe," \u2014 "),ZN=n(pAe,"A",{href:!0});var att=s(ZN);VRo=r(att,"BertForQuestionAnswering"),att.forEach(t),zRo=r(pAe," (BERT model)"),pAe.forEach(t),WRo=i(P),u3=n(P,"LI",{});var _Ae=s(u3);Ale=n(_Ae,"STRONG",{});var ntt=s(Ale);QRo=r(ntt,"big_bird"),ntt.forEach(t),HRo=r(_Ae," \u2014 "),ej=n(_Ae,"A",{href:!0});var stt=s(ej);URo=r(stt,"BigBirdForQuestionAnswering"),stt.forEach(t),JRo=r(_Ae," (BigBird model)"),_Ae.forEach(t),YRo=i(P),b3=n(P,"LI",{});var uAe=s(b3);Lle=n(uAe,"STRONG",{});var ltt=s(Lle);KRo=r(ltt,"bigbird_pegasus"),ltt.forEach(t),ZRo=r(uAe," \u2014 "),oj=n(uAe,"A",{href:!0});var itt=s(oj);eSo=r(itt,"BigBirdPegasusForQuestionAnswering"),itt.forEach(t),oSo=r(uAe," (BigBirdPegasus model)"),uAe.forEach(t),rSo=i(P),v3=n(P,"LI",{});var bAe=s(v3);Ble=n(bAe,"STRONG",{});var dtt=s(Ble);tSo=r(dtt,"camembert"),dtt.forEach(t),aSo=r(bAe," \u2014 "),rj=n(bAe,"A",{href:!0});var ctt=s(rj);nSo=r(ctt,"CamembertForQuestionAnswering"),ctt.forEach(t),sSo=r(bAe," (CamemBERT model)"),bAe.forEach(t),lSo=i(P),T3=n(P,"LI",{});var vAe=s(T3);xle=n(vAe,"STRONG",{});var ftt=s(xle);iSo=r(ftt,"canine"),ftt.forEach(t),dSo=r(vAe," \u2014 "),tj=n(vAe,"A",{href:!0});var mtt=s(tj);cSo=r(mtt,"CanineForQuestionAnswering"),mtt.forEach(t),fSo=r(vAe," (Canine model)"),vAe.forEach(t),mSo=i(P),F3=n(P,"LI",{});var TAe=s(F3);kle=n(TAe,"STRONG",{});var gtt=s(kle);gSo=r(gtt,"convbert"),gtt.forEach(t),hSo=r(TAe," \u2014 "),aj=n(TAe,"A",{href:!0});var htt=s(aj);pSo=r(htt,"ConvBertForQuestionAnswering"),htt.forEach(t),_So=r(TAe," (ConvBERT model)"),TAe.forEach(t),uSo=i(P),C3=n(P,"LI",{});var FAe=s(C3);Rle=n(FAe,"STRONG",{});var ptt=s(Rle);bSo=r(ptt,"data2vec-text"),ptt.forEach(t),vSo=r(FAe," \u2014 "),nj=n(FAe,"A",{href:!0});var _tt=s(nj);TSo=r(_tt,"Data2VecTextForQuestionAnswering"),_tt.forEach(t),FSo=r(FAe," (Data2VecText model)"),FAe.forEach(t),CSo=i(P),M3=n(P,"LI",{});var CAe=s(M3);Sle=n(CAe,"STRONG",{});var utt=s(Sle);MSo=r(utt,"deberta"),utt.forEach(t),ESo=r(CAe," \u2014 "),sj=n(CAe,"A",{href:!0});var btt=s(sj);ySo=r(btt,"DebertaForQuestionAnswering"),btt.forEach(t),wSo=r(CAe," (DeBERTa model)"),CAe.forEach(t),ASo=i(P),E3=n(P,"LI",{});var MAe=s(E3);Ple=n(MAe,"STRONG",{});var vtt=s(Ple);LSo=r(vtt,"deberta-v2"),vtt.forEach(t),BSo=r(MAe," \u2014 "),lj=n(MAe,"A",{href:!0});var Ttt=s(lj);xSo=r(Ttt,"DebertaV2ForQuestionAnswering"),Ttt.forEach(t),kSo=r(MAe," (DeBERTa-v2 model)"),MAe.forEach(t),RSo=i(P),y3=n(P,"LI",{});var EAe=s(y3);$le=n(EAe,"STRONG",{});var Ftt=s($le);SSo=r(Ftt,"distilbert"),Ftt.forEach(t),PSo=r(EAe," \u2014 "),ij=n(EAe,"A",{href:!0});var Ctt=s(ij);$So=r(Ctt,"DistilBertForQuestionAnswering"),Ctt.forEach(t),ISo=r(EAe," (DistilBERT model)"),EAe.forEach(t),DSo=i(P),w3=n(P,"LI",{});var yAe=s(w3);Ile=n(yAe,"STRONG",{});var Mtt=s(Ile);NSo=r(Mtt,"electra"),Mtt.forEach(t),jSo=r(yAe," \u2014 "),dj=n(yAe,"A",{href:!0});var Ett=s(dj);qSo=r(Ett,"ElectraForQuestionAnswering"),Ett.forEach(t),GSo=r(yAe," (ELECTRA model)"),yAe.forEach(t),OSo=i(P),A3=n(P,"LI",{});var wAe=s(A3);Dle=n(wAe,"STRONG",{});var ytt=s(Dle);XSo=r(ytt,"flaubert"),ytt.forEach(t),VSo=r(wAe," \u2014 "),cj=n(wAe,"A",{href:!0});var wtt=s(cj);zSo=r(wtt,"FlaubertForQuestionAnsweringSimple"),wtt.forEach(t),WSo=r(wAe," (FlauBERT model)"),wAe.forEach(t),QSo=i(P),L3=n(P,"LI",{});var AAe=s(L3);Nle=n(AAe,"STRONG",{});var Att=s(Nle);HSo=r(Att,"fnet"),Att.forEach(t),USo=r(AAe," \u2014 "),fj=n(AAe,"A",{href:!0});var Ltt=s(fj);JSo=r(Ltt,"FNetForQuestionAnswering"),Ltt.forEach(t),YSo=r(AAe," (FNet model)"),AAe.forEach(t),KSo=i(P),B3=n(P,"LI",{});var LAe=s(B3);jle=n(LAe,"STRONG",{});var Btt=s(jle);ZSo=r(Btt,"funnel"),Btt.forEach(t),ePo=r(LAe," \u2014 "),mj=n(LAe,"A",{href:!0});var xtt=s(mj);oPo=r(xtt,"FunnelForQuestionAnswering"),xtt.forEach(t),rPo=r(LAe," (Funnel Transformer model)"),LAe.forEach(t),tPo=i(P),x3=n(P,"LI",{});var BAe=s(x3);qle=n(BAe,"STRONG",{});var ktt=s(qle);aPo=r(ktt,"gptj"),ktt.forEach(t),nPo=r(BAe," \u2014 "),gj=n(BAe,"A",{href:!0});var Rtt=s(gj);sPo=r(Rtt,"GPTJForQuestionAnswering"),Rtt.forEach(t),lPo=r(BAe," (GPT-J model)"),BAe.forEach(t),iPo=i(P),k3=n(P,"LI",{});var xAe=s(k3);Gle=n(xAe,"STRONG",{});var Stt=s(Gle);dPo=r(Stt,"ibert"),Stt.forEach(t),cPo=r(xAe," \u2014 "),hj=n(xAe,"A",{href:!0});var Ptt=s(hj);fPo=r(Ptt,"IBertForQuestionAnswering"),Ptt.forEach(t),mPo=r(xAe," (I-BERT model)"),xAe.forEach(t),gPo=i(P),R3=n(P,"LI",{});var kAe=s(R3);Ole=n(kAe,"STRONG",{});var $tt=s(Ole);hPo=r($tt,"layoutlmv2"),$tt.forEach(t),pPo=r(kAe," \u2014 "),pj=n(kAe,"A",{href:!0});var Itt=s(pj);_Po=r(Itt,"LayoutLMv2ForQuestionAnswering"),Itt.forEach(t),uPo=r(kAe," (LayoutLMv2 model)"),kAe.forEach(t),bPo=i(P),S3=n(P,"LI",{});var RAe=s(S3);Xle=n(RAe,"STRONG",{});var Dtt=s(Xle);vPo=r(Dtt,"led"),Dtt.forEach(t),TPo=r(RAe," \u2014 "),_j=n(RAe,"A",{href:!0});var Ntt=s(_j);FPo=r(Ntt,"LEDForQuestionAnswering"),Ntt.forEach(t),CPo=r(RAe," (LED model)"),RAe.forEach(t),MPo=i(P),P3=n(P,"LI",{});var SAe=s(P3);Vle=n(SAe,"STRONG",{});var jtt=s(Vle);EPo=r(jtt,"longformer"),jtt.forEach(t),yPo=r(SAe," \u2014 "),uj=n(SAe,"A",{href:!0});var qtt=s(uj);wPo=r(qtt,"LongformerForQuestionAnswering"),qtt.forEach(t),APo=r(SAe," (Longformer model)"),SAe.forEach(t),LPo=i(P),$3=n(P,"LI",{});var PAe=s($3);zle=n(PAe,"STRONG",{});var Gtt=s(zle);BPo=r(Gtt,"lxmert"),Gtt.forEach(t),xPo=r(PAe," \u2014 "),bj=n(PAe,"A",{href:!0});var Ott=s(bj);kPo=r(Ott,"LxmertForQuestionAnswering"),Ott.forEach(t),RPo=r(PAe," (LXMERT model)"),PAe.forEach(t),SPo=i(P),I3=n(P,"LI",{});var $Ae=s(I3);Wle=n($Ae,"STRONG",{});var Xtt=s(Wle);PPo=r(Xtt,"mbart"),Xtt.forEach(t),$Po=r($Ae," \u2014 "),vj=n($Ae,"A",{href:!0});var Vtt=s(vj);IPo=r(Vtt,"MBartForQuestionAnswering"),Vtt.forEach(t),DPo=r($Ae," (mBART model)"),$Ae.forEach(t),NPo=i(P),D3=n(P,"LI",{});var IAe=s(D3);Qle=n(IAe,"STRONG",{});var ztt=s(Qle);jPo=r(ztt,"megatron-bert"),ztt.forEach(t),qPo=r(IAe," \u2014 "),Tj=n(IAe,"A",{href:!0});var Wtt=s(Tj);GPo=r(Wtt,"MegatronBertForQuestionAnswering"),Wtt.forEach(t),OPo=r(IAe," (MegatronBert model)"),IAe.forEach(t),XPo=i(P),N3=n(P,"LI",{});var DAe=s(N3);Hle=n(DAe,"STRONG",{});var Qtt=s(Hle);VPo=r(Qtt,"mobilebert"),Qtt.forEach(t),zPo=r(DAe," \u2014 "),Fj=n(DAe,"A",{href:!0});var Htt=s(Fj);WPo=r(Htt,"MobileBertForQuestionAnswering"),Htt.forEach(t),QPo=r(DAe," (MobileBERT model)"),DAe.forEach(t),HPo=i(P),j3=n(P,"LI",{});var NAe=s(j3);Ule=n(NAe,"STRONG",{});var Utt=s(Ule);UPo=r(Utt,"mpnet"),Utt.forEach(t),JPo=r(NAe," \u2014 "),Cj=n(NAe,"A",{href:!0});var Jtt=s(Cj);YPo=r(Jtt,"MPNetForQuestionAnswering"),Jtt.forEach(t),KPo=r(NAe," (MPNet model)"),NAe.forEach(t),ZPo=i(P),q3=n(P,"LI",{});var jAe=s(q3);Jle=n(jAe,"STRONG",{});var Ytt=s(Jle);e$o=r(Ytt,"nystromformer"),Ytt.forEach(t),o$o=r(jAe," \u2014 "),Mj=n(jAe,"A",{href:!0});var Ktt=s(Mj);r$o=r(Ktt,"NystromformerForQuestionAnswering"),Ktt.forEach(t),t$o=r(jAe," (Nystromformer model)"),jAe.forEach(t),a$o=i(P),G3=n(P,"LI",{});var qAe=s(G3);Yle=n(qAe,"STRONG",{});var Ztt=s(Yle);n$o=r(Ztt,"qdqbert"),Ztt.forEach(t),s$o=r(qAe," \u2014 "),Ej=n(qAe,"A",{href:!0});var eat=s(Ej);l$o=r(eat,"QDQBertForQuestionAnswering"),eat.forEach(t),i$o=r(qAe," (QDQBert model)"),qAe.forEach(t),d$o=i(P),O3=n(P,"LI",{});var GAe=s(O3);Kle=n(GAe,"STRONG",{});var oat=s(Kle);c$o=r(oat,"reformer"),oat.forEach(t),f$o=r(GAe," \u2014 "),yj=n(GAe,"A",{href:!0});var rat=s(yj);m$o=r(rat,"ReformerForQuestionAnswering"),rat.forEach(t),g$o=r(GAe," (Reformer model)"),GAe.forEach(t),h$o=i(P),X3=n(P,"LI",{});var OAe=s(X3);Zle=n(OAe,"STRONG",{});var tat=s(Zle);p$o=r(tat,"rembert"),tat.forEach(t),_$o=r(OAe," \u2014 "),wj=n(OAe,"A",{href:!0});var aat=s(wj);u$o=r(aat,"RemBertForQuestionAnswering"),aat.forEach(t),b$o=r(OAe," (RemBERT model)"),OAe.forEach(t),v$o=i(P),V3=n(P,"LI",{});var XAe=s(V3);eie=n(XAe,"STRONG",{});var nat=s(eie);T$o=r(nat,"roberta"),nat.forEach(t),F$o=r(XAe," \u2014 "),Aj=n(XAe,"A",{href:!0});var sat=s(Aj);C$o=r(sat,"RobertaForQuestionAnswering"),sat.forEach(t),M$o=r(XAe," (RoBERTa model)"),XAe.forEach(t),E$o=i(P),z3=n(P,"LI",{});var VAe=s(z3);oie=n(VAe,"STRONG",{});var lat=s(oie);y$o=r(lat,"roformer"),lat.forEach(t),w$o=r(VAe," \u2014 "),Lj=n(VAe,"A",{href:!0});var iat=s(Lj);A$o=r(iat,"RoFormerForQuestionAnswering"),iat.forEach(t),L$o=r(VAe," (RoFormer model)"),VAe.forEach(t),B$o=i(P),W3=n(P,"LI",{});var zAe=s(W3);rie=n(zAe,"STRONG",{});var dat=s(rie);x$o=r(dat,"splinter"),dat.forEach(t),k$o=r(zAe," \u2014 "),Bj=n(zAe,"A",{href:!0});var cat=s(Bj);R$o=r(cat,"SplinterForQuestionAnswering"),cat.forEach(t),S$o=r(zAe," (Splinter model)"),zAe.forEach(t),P$o=i(P),Q3=n(P,"LI",{});var WAe=s(Q3);tie=n(WAe,"STRONG",{});var fat=s(tie);$$o=r(fat,"squeezebert"),fat.forEach(t),I$o=r(WAe," \u2014 "),xj=n(WAe,"A",{href:!0});var mat=s(xj);D$o=r(mat,"SqueezeBertForQuestionAnswering"),mat.forEach(t),N$o=r(WAe," (SqueezeBERT model)"),WAe.forEach(t),j$o=i(P),H3=n(P,"LI",{});var QAe=s(H3);aie=n(QAe,"STRONG",{});var gat=s(aie);q$o=r(gat,"xlm"),gat.forEach(t),G$o=r(QAe," \u2014 "),kj=n(QAe,"A",{href:!0});var hat=s(kj);O$o=r(hat,"XLMForQuestionAnsweringSimple"),hat.forEach(t),X$o=r(QAe," (XLM model)"),QAe.forEach(t),V$o=i(P),U3=n(P,"LI",{});var HAe=s(U3);nie=n(HAe,"STRONG",{});var pat=s(nie);z$o=r(pat,"xlm-roberta"),pat.forEach(t),W$o=r(HAe," \u2014 "),Rj=n(HAe,"A",{href:!0});var _at=s(Rj);Q$o=r(_at,"XLMRobertaForQuestionAnswering"),_at.forEach(t),H$o=r(HAe," (XLM-RoBERTa model)"),HAe.forEach(t),U$o=i(P),J3=n(P,"LI",{});var UAe=s(J3);sie=n(UAe,"STRONG",{});var uat=s(sie);J$o=r(uat,"xlm-roberta-xl"),uat.forEach(t),Y$o=r(UAe," \u2014 "),Sj=n(UAe,"A",{href:!0});var bat=s(Sj);K$o=r(bat,"XLMRobertaXLForQuestionAnswering"),bat.forEach(t),Z$o=r(UAe," (XLM-RoBERTa-XL model)"),UAe.forEach(t),eIo=i(P),Y3=n(P,"LI",{});var JAe=s(Y3);lie=n(JAe,"STRONG",{});var vat=s(lie);oIo=r(vat,"xlnet"),vat.forEach(t),rIo=r(JAe," \u2014 "),Pj=n(JAe,"A",{href:!0});var Tat=s(Pj);tIo=r(Tat,"XLNetForQuestionAnsweringSimple"),Tat.forEach(t),aIo=r(JAe," (XLNet model)"),JAe.forEach(t),nIo=i(P),K3=n(P,"LI",{});var YAe=s(K3);iie=n(YAe,"STRONG",{});var Fat=s(iie);sIo=r(Fat,"yoso"),Fat.forEach(t),lIo=r(YAe," \u2014 "),$j=n(YAe,"A",{href:!0});var Cat=s($j);iIo=r(Cat,"YosoForQuestionAnswering"),Cat.forEach(t),dIo=r(YAe," (YOSO model)"),YAe.forEach(t),P.forEach(t),cIo=i(Ut),Z3=n(Ut,"P",{});var KAe=s(Z3);fIo=r(KAe,"The model is set in evaluation mode by default using "),die=n(KAe,"CODE",{});var Mat=s(die);mIo=r(Mat,"model.eval()"),Mat.forEach(t),gIo=r(KAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cie=n(KAe,"CODE",{});var Eat=s(cie);hIo=r(Eat,"model.train()"),Eat.forEach(t),KAe.forEach(t),pIo=i(Ut),fie=n(Ut,"P",{});var yat=s(fie);_Io=r(yat,"Examples:"),yat.forEach(t),uIo=i(Ut),m(iy.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),iRe=i(c),wd=n(c,"H2",{class:!0});var uPe=s(wd);ev=n(uPe,"A",{id:!0,class:!0,href:!0});var wat=s(ev);mie=n(wat,"SPAN",{});var Aat=s(mie);m(dy.$$.fragment,Aat),Aat.forEach(t),wat.forEach(t),bIo=i(uPe),gie=n(uPe,"SPAN",{});var Lat=s(gie);vIo=r(Lat,"AutoModelForTableQuestionAnswering"),Lat.forEach(t),uPe.forEach(t),dRe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(cy.$$.fragment,gl),TIo=i(gl),Ad=n(gl,"P",{});var BW=s(Ad);FIo=r(BW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hie=n(BW,"CODE",{});var Bat=s(hie);CIo=r(Bat,"from_pretrained()"),Bat.forEach(t),MIo=r(BW,"class method or the "),pie=n(BW,"CODE",{});var xat=s(pie);EIo=r(xat,"from_config()"),xat.forEach(t),yIo=r(BW,`class
method.`),BW.forEach(t),wIo=i(gl),fy=n(gl,"P",{});var bPe=s(fy);AIo=r(bPe,"This class cannot be instantiated directly using "),_ie=n(bPe,"CODE",{});var kat=s(_ie);LIo=r(kat,"__init__()"),kat.forEach(t),BIo=r(bPe," (throws an error)."),bPe.forEach(t),xIo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(my.$$.fragment,hl),kIo=i(hl),uie=n(hl,"P",{});var Rat=s(uie);RIo=r(Rat,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Rat.forEach(t),SIo=i(hl),Ld=n(hl,"P",{});var xW=s(Ld);PIo=r(xW,`Note:
Loading a model from its configuration file does `),bie=n(xW,"STRONG",{});var Sat=s(bie);$Io=r(Sat,"not"),Sat.forEach(t),IIo=r(xW,` load the model weights. It only affects the
model\u2019s configuration. Use `),vie=n(xW,"CODE",{});var Pat=s(vie);DIo=r(Pat,"from_pretrained()"),Pat.forEach(t),NIo=r(xW,"to load the model weights."),xW.forEach(t),jIo=i(hl),Tie=n(hl,"P",{});var $at=s(Tie);qIo=r($at,"Examples:"),$at.forEach(t),GIo=i(hl),m(gy.$$.fragment,hl),hl.forEach(t),OIo=i(gl),Qe=n(gl,"DIV",{class:!0});var Jt=s(Qe);m(hy.$$.fragment,Jt),XIo=i(Jt),Fie=n(Jt,"P",{});var Iat=s(Fie);VIo=r(Iat,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Iat.forEach(t),zIo=i(Jt),en=n(Jt,"P",{});var A4=s(en);WIo=r(A4,"The model class to instantiate is selected based on the "),Cie=n(A4,"CODE",{});var Dat=s(Cie);QIo=r(Dat,"model_type"),Dat.forEach(t),HIo=r(A4,` property of the config object (either
passed as an argument or loaded from `),Mie=n(A4,"CODE",{});var Nat=s(Mie);UIo=r(Nat,"pretrained_model_name_or_path"),Nat.forEach(t),JIo=r(A4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eie=n(A4,"CODE",{});var jat=s(Eie);YIo=r(jat,"pretrained_model_name_or_path"),jat.forEach(t),KIo=r(A4,":"),A4.forEach(t),ZIo=i(Jt),yie=n(Jt,"UL",{});var qat=s(yie);ov=n(qat,"LI",{});var ZAe=s(ov);wie=n(ZAe,"STRONG",{});var Gat=s(wie);eDo=r(Gat,"tapas"),Gat.forEach(t),oDo=r(ZAe," \u2014 "),Ij=n(ZAe,"A",{href:!0});var Oat=s(Ij);rDo=r(Oat,"TapasForQuestionAnswering"),Oat.forEach(t),tDo=r(ZAe," (TAPAS model)"),ZAe.forEach(t),qat.forEach(t),aDo=i(Jt),rv=n(Jt,"P",{});var e0e=s(rv);nDo=r(e0e,"The model is set in evaluation mode by default using "),Aie=n(e0e,"CODE",{});var Xat=s(Aie);sDo=r(Xat,"model.eval()"),Xat.forEach(t),lDo=r(e0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lie=n(e0e,"CODE",{});var Vat=s(Lie);iDo=r(Vat,"model.train()"),Vat.forEach(t),e0e.forEach(t),dDo=i(Jt),Bie=n(Jt,"P",{});var zat=s(Bie);cDo=r(zat,"Examples:"),zat.forEach(t),fDo=i(Jt),m(py.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),cRe=i(c),Bd=n(c,"H2",{class:!0});var vPe=s(Bd);tv=n(vPe,"A",{id:!0,class:!0,href:!0});var Wat=s(tv);xie=n(Wat,"SPAN",{});var Qat=s(xie);m(_y.$$.fragment,Qat),Qat.forEach(t),Wat.forEach(t),mDo=i(vPe),kie=n(vPe,"SPAN",{});var Hat=s(kie);gDo=r(Hat,"AutoModelForImageClassification"),Hat.forEach(t),vPe.forEach(t),fRe=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(uy.$$.fragment,pl),hDo=i(pl),xd=n(pl,"P",{});var kW=s(xd);pDo=r(kW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Rie=n(kW,"CODE",{});var Uat=s(Rie);_Do=r(Uat,"from_pretrained()"),Uat.forEach(t),uDo=r(kW,"class method or the "),Sie=n(kW,"CODE",{});var Jat=s(Sie);bDo=r(Jat,"from_config()"),Jat.forEach(t),vDo=r(kW,`class
method.`),kW.forEach(t),TDo=i(pl),by=n(pl,"P",{});var TPe=s(by);FDo=r(TPe,"This class cannot be instantiated directly using "),Pie=n(TPe,"CODE",{});var Yat=s(Pie);CDo=r(Yat,"__init__()"),Yat.forEach(t),MDo=r(TPe," (throws an error)."),TPe.forEach(t),EDo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(vy.$$.fragment,_l),yDo=i(_l),$ie=n(_l,"P",{});var Kat=s($ie);wDo=r(Kat,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Kat.forEach(t),ADo=i(_l),kd=n(_l,"P",{});var RW=s(kd);LDo=r(RW,`Note:
Loading a model from its configuration file does `),Iie=n(RW,"STRONG",{});var Zat=s(Iie);BDo=r(Zat,"not"),Zat.forEach(t),xDo=r(RW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Die=n(RW,"CODE",{});var ent=s(Die);kDo=r(ent,"from_pretrained()"),ent.forEach(t),RDo=r(RW,"to load the model weights."),RW.forEach(t),SDo=i(_l),Nie=n(_l,"P",{});var ont=s(Nie);PDo=r(ont,"Examples:"),ont.forEach(t),$Do=i(_l),m(Ty.$$.fragment,_l),_l.forEach(t),IDo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(Fy.$$.fragment,Yt),DDo=i(Yt),jie=n(Yt,"P",{});var rnt=s(jie);NDo=r(rnt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rnt.forEach(t),jDo=i(Yt),on=n(Yt,"P",{});var L4=s(on);qDo=r(L4,"The model class to instantiate is selected based on the "),qie=n(L4,"CODE",{});var tnt=s(qie);GDo=r(tnt,"model_type"),tnt.forEach(t),ODo=r(L4,` property of the config object (either
passed as an argument or loaded from `),Gie=n(L4,"CODE",{});var ant=s(Gie);XDo=r(ant,"pretrained_model_name_or_path"),ant.forEach(t),VDo=r(L4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oie=n(L4,"CODE",{});var nnt=s(Oie);zDo=r(nnt,"pretrained_model_name_or_path"),nnt.forEach(t),WDo=r(L4,":"),L4.forEach(t),QDo=i(Yt),ge=n(Yt,"UL",{});var Fe=s(ge);av=n(Fe,"LI",{});var o0e=s(av);Xie=n(o0e,"STRONG",{});var snt=s(Xie);HDo=r(snt,"beit"),snt.forEach(t),UDo=r(o0e," \u2014 "),Dj=n(o0e,"A",{href:!0});var lnt=s(Dj);JDo=r(lnt,"BeitForImageClassification"),lnt.forEach(t),YDo=r(o0e," (BEiT model)"),o0e.forEach(t),KDo=i(Fe),nv=n(Fe,"LI",{});var r0e=s(nv);Vie=n(r0e,"STRONG",{});var int=s(Vie);ZDo=r(int,"convnext"),int.forEach(t),eNo=r(r0e," \u2014 "),Nj=n(r0e,"A",{href:!0});var dnt=s(Nj);oNo=r(dnt,"ConvNextForImageClassification"),dnt.forEach(t),rNo=r(r0e," (ConvNext model)"),r0e.forEach(t),tNo=i(Fe),qs=n(Fe,"LI",{});var t8=s(qs);zie=n(t8,"STRONG",{});var cnt=s(zie);aNo=r(cnt,"deit"),cnt.forEach(t),nNo=r(t8," \u2014 "),jj=n(t8,"A",{href:!0});var fnt=s(jj);sNo=r(fnt,"DeiTForImageClassification"),fnt.forEach(t),lNo=r(t8," or "),qj=n(t8,"A",{href:!0});var mnt=s(qj);iNo=r(mnt,"DeiTForImageClassificationWithTeacher"),mnt.forEach(t),dNo=r(t8," (DeiT model)"),t8.forEach(t),cNo=i(Fe),sv=n(Fe,"LI",{});var t0e=s(sv);Wie=n(t0e,"STRONG",{});var gnt=s(Wie);fNo=r(gnt,"imagegpt"),gnt.forEach(t),mNo=r(t0e," \u2014 "),Gj=n(t0e,"A",{href:!0});var hnt=s(Gj);gNo=r(hnt,"ImageGPTForImageClassification"),hnt.forEach(t),hNo=r(t0e," (ImageGPT model)"),t0e.forEach(t),pNo=i(Fe),ma=n(Fe,"LI",{});var $f=s(ma);Qie=n($f,"STRONG",{});var pnt=s(Qie);_No=r(pnt,"perceiver"),pnt.forEach(t),uNo=r($f," \u2014 "),Oj=n($f,"A",{href:!0});var _nt=s(Oj);bNo=r(_nt,"PerceiverForImageClassificationLearned"),_nt.forEach(t),vNo=r($f," or "),Xj=n($f,"A",{href:!0});var unt=s(Xj);TNo=r(unt,"PerceiverForImageClassificationFourier"),unt.forEach(t),FNo=r($f," or "),Vj=n($f,"A",{href:!0});var bnt=s(Vj);CNo=r(bnt,"PerceiverForImageClassificationConvProcessing"),bnt.forEach(t),MNo=r($f," (Perceiver model)"),$f.forEach(t),ENo=i(Fe),lv=n(Fe,"LI",{});var a0e=s(lv);Hie=n(a0e,"STRONG",{});var vnt=s(Hie);yNo=r(vnt,"poolformer"),vnt.forEach(t),wNo=r(a0e," \u2014 "),zj=n(a0e,"A",{href:!0});var Tnt=s(zj);ANo=r(Tnt,"PoolFormerForImageClassification"),Tnt.forEach(t),LNo=r(a0e," (PoolFormer model)"),a0e.forEach(t),BNo=i(Fe),iv=n(Fe,"LI",{});var n0e=s(iv);Uie=n(n0e,"STRONG",{});var Fnt=s(Uie);xNo=r(Fnt,"resnet"),Fnt.forEach(t),kNo=r(n0e," \u2014 "),Wj=n(n0e,"A",{href:!0});var Cnt=s(Wj);RNo=r(Cnt,"ResNetForImageClassification"),Cnt.forEach(t),SNo=r(n0e," (ResNet model)"),n0e.forEach(t),PNo=i(Fe),dv=n(Fe,"LI",{});var s0e=s(dv);Jie=n(s0e,"STRONG",{});var Mnt=s(Jie);$No=r(Mnt,"segformer"),Mnt.forEach(t),INo=r(s0e," \u2014 "),Qj=n(s0e,"A",{href:!0});var Ent=s(Qj);DNo=r(Ent,"SegformerForImageClassification"),Ent.forEach(t),NNo=r(s0e," (SegFormer model)"),s0e.forEach(t),jNo=i(Fe),cv=n(Fe,"LI",{});var l0e=s(cv);Yie=n(l0e,"STRONG",{});var ynt=s(Yie);qNo=r(ynt,"swin"),ynt.forEach(t),GNo=r(l0e," \u2014 "),Hj=n(l0e,"A",{href:!0});var wnt=s(Hj);ONo=r(wnt,"SwinForImageClassification"),wnt.forEach(t),XNo=r(l0e," (Swin model)"),l0e.forEach(t),VNo=i(Fe),fv=n(Fe,"LI",{});var i0e=s(fv);Kie=n(i0e,"STRONG",{});var Ant=s(Kie);zNo=r(Ant,"van"),Ant.forEach(t),WNo=r(i0e," \u2014 "),Uj=n(i0e,"A",{href:!0});var Lnt=s(Uj);QNo=r(Lnt,"VanForImageClassification"),Lnt.forEach(t),HNo=r(i0e," (VAN model)"),i0e.forEach(t),UNo=i(Fe),mv=n(Fe,"LI",{});var d0e=s(mv);Zie=n(d0e,"STRONG",{});var Bnt=s(Zie);JNo=r(Bnt,"vit"),Bnt.forEach(t),YNo=r(d0e," \u2014 "),Jj=n(d0e,"A",{href:!0});var xnt=s(Jj);KNo=r(xnt,"ViTForImageClassification"),xnt.forEach(t),ZNo=r(d0e," (ViT model)"),d0e.forEach(t),Fe.forEach(t),ejo=i(Yt),gv=n(Yt,"P",{});var c0e=s(gv);ojo=r(c0e,"The model is set in evaluation mode by default using "),ede=n(c0e,"CODE",{});var knt=s(ede);rjo=r(knt,"model.eval()"),knt.forEach(t),tjo=r(c0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ode=n(c0e,"CODE",{});var Rnt=s(ode);ajo=r(Rnt,"model.train()"),Rnt.forEach(t),c0e.forEach(t),njo=i(Yt),rde=n(Yt,"P",{});var Snt=s(rde);sjo=r(Snt,"Examples:"),Snt.forEach(t),ljo=i(Yt),m(Cy.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),mRe=i(c),Rd=n(c,"H2",{class:!0});var FPe=s(Rd);hv=n(FPe,"A",{id:!0,class:!0,href:!0});var Pnt=s(hv);tde=n(Pnt,"SPAN",{});var $nt=s(tde);m(My.$$.fragment,$nt),$nt.forEach(t),Pnt.forEach(t),ijo=i(FPe),ade=n(FPe,"SPAN",{});var Int=s(ade);djo=r(Int,"AutoModelForVision2Seq"),Int.forEach(t),FPe.forEach(t),gRe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(Ey.$$.fragment,ul),cjo=i(ul),Sd=n(ul,"P",{});var SW=s(Sd);fjo=r(SW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nde=n(SW,"CODE",{});var Dnt=s(nde);mjo=r(Dnt,"from_pretrained()"),Dnt.forEach(t),gjo=r(SW,"class method or the "),sde=n(SW,"CODE",{});var Nnt=s(sde);hjo=r(Nnt,"from_config()"),Nnt.forEach(t),pjo=r(SW,`class
method.`),SW.forEach(t),_jo=i(ul),yy=n(ul,"P",{});var CPe=s(yy);ujo=r(CPe,"This class cannot be instantiated directly using "),lde=n(CPe,"CODE",{});var jnt=s(lde);bjo=r(jnt,"__init__()"),jnt.forEach(t),vjo=r(CPe," (throws an error)."),CPe.forEach(t),Tjo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(wy.$$.fragment,bl),Fjo=i(bl),ide=n(bl,"P",{});var qnt=s(ide);Cjo=r(qnt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qnt.forEach(t),Mjo=i(bl),Pd=n(bl,"P",{});var PW=s(Pd);Ejo=r(PW,`Note:
Loading a model from its configuration file does `),dde=n(PW,"STRONG",{});var Gnt=s(dde);yjo=r(Gnt,"not"),Gnt.forEach(t),wjo=r(PW,` load the model weights. It only affects the
model\u2019s configuration. Use `),cde=n(PW,"CODE",{});var Ont=s(cde);Ajo=r(Ont,"from_pretrained()"),Ont.forEach(t),Ljo=r(PW,"to load the model weights."),PW.forEach(t),Bjo=i(bl),fde=n(bl,"P",{});var Xnt=s(fde);xjo=r(Xnt,"Examples:"),Xnt.forEach(t),kjo=i(bl),m(Ay.$$.fragment,bl),bl.forEach(t),Rjo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(Ly.$$.fragment,Kt),Sjo=i(Kt),mde=n(Kt,"P",{});var Vnt=s(mde);Pjo=r(Vnt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Vnt.forEach(t),$jo=i(Kt),rn=n(Kt,"P",{});var B4=s(rn);Ijo=r(B4,"The model class to instantiate is selected based on the "),gde=n(B4,"CODE",{});var znt=s(gde);Djo=r(znt,"model_type"),znt.forEach(t),Njo=r(B4,` property of the config object (either
passed as an argument or loaded from `),hde=n(B4,"CODE",{});var Wnt=s(hde);jjo=r(Wnt,"pretrained_model_name_or_path"),Wnt.forEach(t),qjo=r(B4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=n(B4,"CODE",{});var Qnt=s(pde);Gjo=r(Qnt,"pretrained_model_name_or_path"),Qnt.forEach(t),Ojo=r(B4,":"),B4.forEach(t),Xjo=i(Kt),_de=n(Kt,"UL",{});var Hnt=s(_de);pv=n(Hnt,"LI",{});var f0e=s(pv);ude=n(f0e,"STRONG",{});var Unt=s(ude);Vjo=r(Unt,"vision-encoder-decoder"),Unt.forEach(t),zjo=r(f0e," \u2014 "),Yj=n(f0e,"A",{href:!0});var Jnt=s(Yj);Wjo=r(Jnt,"VisionEncoderDecoderModel"),Jnt.forEach(t),Qjo=r(f0e," (Vision Encoder decoder model)"),f0e.forEach(t),Hnt.forEach(t),Hjo=i(Kt),_v=n(Kt,"P",{});var m0e=s(_v);Ujo=r(m0e,"The model is set in evaluation mode by default using "),bde=n(m0e,"CODE",{});var Ynt=s(bde);Jjo=r(Ynt,"model.eval()"),Ynt.forEach(t),Yjo=r(m0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vde=n(m0e,"CODE",{});var Knt=s(vde);Kjo=r(Knt,"model.train()"),Knt.forEach(t),m0e.forEach(t),Zjo=i(Kt),Tde=n(Kt,"P",{});var Znt=s(Tde);eqo=r(Znt,"Examples:"),Znt.forEach(t),oqo=i(Kt),m(By.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),hRe=i(c),$d=n(c,"H2",{class:!0});var MPe=s($d);uv=n(MPe,"A",{id:!0,class:!0,href:!0});var est=s(uv);Fde=n(est,"SPAN",{});var ost=s(Fde);m(xy.$$.fragment,ost),ost.forEach(t),est.forEach(t),rqo=i(MPe),Cde=n(MPe,"SPAN",{});var rst=s(Cde);tqo=r(rst,"AutoModelForAudioClassification"),rst.forEach(t),MPe.forEach(t),pRe=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(ky.$$.fragment,vl),aqo=i(vl),Id=n(vl,"P",{});var $W=s(Id);nqo=r($W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Mde=n($W,"CODE",{});var tst=s(Mde);sqo=r(tst,"from_pretrained()"),tst.forEach(t),lqo=r($W,"class method or the "),Ede=n($W,"CODE",{});var ast=s(Ede);iqo=r(ast,"from_config()"),ast.forEach(t),dqo=r($W,`class
method.`),$W.forEach(t),cqo=i(vl),Ry=n(vl,"P",{});var EPe=s(Ry);fqo=r(EPe,"This class cannot be instantiated directly using "),yde=n(EPe,"CODE",{});var nst=s(yde);mqo=r(nst,"__init__()"),nst.forEach(t),gqo=r(EPe," (throws an error)."),EPe.forEach(t),hqo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(Sy.$$.fragment,Tl),pqo=i(Tl),wde=n(Tl,"P",{});var sst=s(wde);_qo=r(sst,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),sst.forEach(t),uqo=i(Tl),Dd=n(Tl,"P",{});var IW=s(Dd);bqo=r(IW,`Note:
Loading a model from its configuration file does `),Ade=n(IW,"STRONG",{});var lst=s(Ade);vqo=r(lst,"not"),lst.forEach(t),Tqo=r(IW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lde=n(IW,"CODE",{});var ist=s(Lde);Fqo=r(ist,"from_pretrained()"),ist.forEach(t),Cqo=r(IW,"to load the model weights."),IW.forEach(t),Mqo=i(Tl),Bde=n(Tl,"P",{});var dst=s(Bde);Eqo=r(dst,"Examples:"),dst.forEach(t),yqo=i(Tl),m(Py.$$.fragment,Tl),Tl.forEach(t),wqo=i(vl),Je=n(vl,"DIV",{class:!0});var Zt=s(Je);m($y.$$.fragment,Zt),Aqo=i(Zt),xde=n(Zt,"P",{});var cst=s(xde);Lqo=r(cst,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),cst.forEach(t),Bqo=i(Zt),tn=n(Zt,"P",{});var x4=s(tn);xqo=r(x4,"The model class to instantiate is selected based on the "),kde=n(x4,"CODE",{});var fst=s(kde);kqo=r(fst,"model_type"),fst.forEach(t),Rqo=r(x4,` property of the config object (either
passed as an argument or loaded from `),Rde=n(x4,"CODE",{});var mst=s(Rde);Sqo=r(mst,"pretrained_model_name_or_path"),mst.forEach(t),Pqo=r(x4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sde=n(x4,"CODE",{});var gst=s(Sde);$qo=r(gst,"pretrained_model_name_or_path"),gst.forEach(t),Iqo=r(x4,":"),x4.forEach(t),Dqo=i(Zt),ke=n(Zt,"UL",{});var qo=s(ke);bv=n(qo,"LI",{});var g0e=s(bv);Pde=n(g0e,"STRONG",{});var hst=s(Pde);Nqo=r(hst,"data2vec-audio"),hst.forEach(t),jqo=r(g0e," \u2014 "),Kj=n(g0e,"A",{href:!0});var pst=s(Kj);qqo=r(pst,"Data2VecAudioForSequenceClassification"),pst.forEach(t),Gqo=r(g0e," (Data2VecAudio model)"),g0e.forEach(t),Oqo=i(qo),vv=n(qo,"LI",{});var h0e=s(vv);$de=n(h0e,"STRONG",{});var _st=s($de);Xqo=r(_st,"hubert"),_st.forEach(t),Vqo=r(h0e," \u2014 "),Zj=n(h0e,"A",{href:!0});var ust=s(Zj);zqo=r(ust,"HubertForSequenceClassification"),ust.forEach(t),Wqo=r(h0e," (Hubert model)"),h0e.forEach(t),Qqo=i(qo),Tv=n(qo,"LI",{});var p0e=s(Tv);Ide=n(p0e,"STRONG",{});var bst=s(Ide);Hqo=r(bst,"sew"),bst.forEach(t),Uqo=r(p0e," \u2014 "),eq=n(p0e,"A",{href:!0});var vst=s(eq);Jqo=r(vst,"SEWForSequenceClassification"),vst.forEach(t),Yqo=r(p0e," (SEW model)"),p0e.forEach(t),Kqo=i(qo),Fv=n(qo,"LI",{});var _0e=s(Fv);Dde=n(_0e,"STRONG",{});var Tst=s(Dde);Zqo=r(Tst,"sew-d"),Tst.forEach(t),eGo=r(_0e," \u2014 "),oq=n(_0e,"A",{href:!0});var Fst=s(oq);oGo=r(Fst,"SEWDForSequenceClassification"),Fst.forEach(t),rGo=r(_0e," (SEW-D model)"),_0e.forEach(t),tGo=i(qo),Cv=n(qo,"LI",{});var u0e=s(Cv);Nde=n(u0e,"STRONG",{});var Cst=s(Nde);aGo=r(Cst,"unispeech"),Cst.forEach(t),nGo=r(u0e," \u2014 "),rq=n(u0e,"A",{href:!0});var Mst=s(rq);sGo=r(Mst,"UniSpeechForSequenceClassification"),Mst.forEach(t),lGo=r(u0e," (UniSpeech model)"),u0e.forEach(t),iGo=i(qo),Mv=n(qo,"LI",{});var b0e=s(Mv);jde=n(b0e,"STRONG",{});var Est=s(jde);dGo=r(Est,"unispeech-sat"),Est.forEach(t),cGo=r(b0e," \u2014 "),tq=n(b0e,"A",{href:!0});var yst=s(tq);fGo=r(yst,"UniSpeechSatForSequenceClassification"),yst.forEach(t),mGo=r(b0e," (UniSpeechSat model)"),b0e.forEach(t),gGo=i(qo),Ev=n(qo,"LI",{});var v0e=s(Ev);qde=n(v0e,"STRONG",{});var wst=s(qde);hGo=r(wst,"wav2vec2"),wst.forEach(t),pGo=r(v0e," \u2014 "),aq=n(v0e,"A",{href:!0});var Ast=s(aq);_Go=r(Ast,"Wav2Vec2ForSequenceClassification"),Ast.forEach(t),uGo=r(v0e," (Wav2Vec2 model)"),v0e.forEach(t),bGo=i(qo),yv=n(qo,"LI",{});var T0e=s(yv);Gde=n(T0e,"STRONG",{});var Lst=s(Gde);vGo=r(Lst,"wavlm"),Lst.forEach(t),TGo=r(T0e," \u2014 "),nq=n(T0e,"A",{href:!0});var Bst=s(nq);FGo=r(Bst,"WavLMForSequenceClassification"),Bst.forEach(t),CGo=r(T0e," (WavLM model)"),T0e.forEach(t),qo.forEach(t),MGo=i(Zt),wv=n(Zt,"P",{});var F0e=s(wv);EGo=r(F0e,"The model is set in evaluation mode by default using "),Ode=n(F0e,"CODE",{});var xst=s(Ode);yGo=r(xst,"model.eval()"),xst.forEach(t),wGo=r(F0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xde=n(F0e,"CODE",{});var kst=s(Xde);AGo=r(kst,"model.train()"),kst.forEach(t),F0e.forEach(t),LGo=i(Zt),Vde=n(Zt,"P",{});var Rst=s(Vde);BGo=r(Rst,"Examples:"),Rst.forEach(t),xGo=i(Zt),m(Iy.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),_Re=i(c),Nd=n(c,"H2",{class:!0});var yPe=s(Nd);Av=n(yPe,"A",{id:!0,class:!0,href:!0});var Sst=s(Av);zde=n(Sst,"SPAN",{});var Pst=s(zde);m(Dy.$$.fragment,Pst),Pst.forEach(t),Sst.forEach(t),kGo=i(yPe),Wde=n(yPe,"SPAN",{});var $st=s(Wde);RGo=r($st,"AutoModelForAudioFrameClassification"),$st.forEach(t),yPe.forEach(t),uRe=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);m(Ny.$$.fragment,Fl),SGo=i(Fl),jd=n(Fl,"P",{});var DW=s(jd);PGo=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Qde=n(DW,"CODE",{});var Ist=s(Qde);$Go=r(Ist,"from_pretrained()"),Ist.forEach(t),IGo=r(DW,"class method or the "),Hde=n(DW,"CODE",{});var Dst=s(Hde);DGo=r(Dst,"from_config()"),Dst.forEach(t),NGo=r(DW,`class
method.`),DW.forEach(t),jGo=i(Fl),jy=n(Fl,"P",{});var wPe=s(jy);qGo=r(wPe,"This class cannot be instantiated directly using "),Ude=n(wPe,"CODE",{});var Nst=s(Ude);GGo=r(Nst,"__init__()"),Nst.forEach(t),OGo=r(wPe," (throws an error)."),wPe.forEach(t),XGo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);m(qy.$$.fragment,Cl),VGo=i(Cl),Jde=n(Cl,"P",{});var jst=s(Jde);zGo=r(jst,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),jst.forEach(t),WGo=i(Cl),qd=n(Cl,"P",{});var NW=s(qd);QGo=r(NW,`Note:
Loading a model from its configuration file does `),Yde=n(NW,"STRONG",{});var qst=s(Yde);HGo=r(qst,"not"),qst.forEach(t),UGo=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kde=n(NW,"CODE",{});var Gst=s(Kde);JGo=r(Gst,"from_pretrained()"),Gst.forEach(t),YGo=r(NW,"to load the model weights."),NW.forEach(t),KGo=i(Cl),Zde=n(Cl,"P",{});var Ost=s(Zde);ZGo=r(Ost,"Examples:"),Ost.forEach(t),eOo=i(Cl),m(Gy.$$.fragment,Cl),Cl.forEach(t),oOo=i(Fl),Ye=n(Fl,"DIV",{class:!0});var ea=s(Ye);m(Oy.$$.fragment,ea),rOo=i(ea),ece=n(ea,"P",{});var Xst=s(ece);tOo=r(Xst,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Xst.forEach(t),aOo=i(ea),an=n(ea,"P",{});var k4=s(an);nOo=r(k4,"The model class to instantiate is selected based on the "),oce=n(k4,"CODE",{});var Vst=s(oce);sOo=r(Vst,"model_type"),Vst.forEach(t),lOo=r(k4,` property of the config object (either
passed as an argument or loaded from `),rce=n(k4,"CODE",{});var zst=s(rce);iOo=r(zst,"pretrained_model_name_or_path"),zst.forEach(t),dOo=r(k4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tce=n(k4,"CODE",{});var Wst=s(tce);cOo=r(Wst,"pretrained_model_name_or_path"),Wst.forEach(t),fOo=r(k4,":"),k4.forEach(t),mOo=i(ea),nn=n(ea,"UL",{});var R4=s(nn);Lv=n(R4,"LI",{});var C0e=s(Lv);ace=n(C0e,"STRONG",{});var Qst=s(ace);gOo=r(Qst,"data2vec-audio"),Qst.forEach(t),hOo=r(C0e," \u2014 "),sq=n(C0e,"A",{href:!0});var Hst=s(sq);pOo=r(Hst,"Data2VecAudioForAudioFrameClassification"),Hst.forEach(t),_Oo=r(C0e," (Data2VecAudio model)"),C0e.forEach(t),uOo=i(R4),Bv=n(R4,"LI",{});var M0e=s(Bv);nce=n(M0e,"STRONG",{});var Ust=s(nce);bOo=r(Ust,"unispeech-sat"),Ust.forEach(t),vOo=r(M0e," \u2014 "),lq=n(M0e,"A",{href:!0});var Jst=s(lq);TOo=r(Jst,"UniSpeechSatForAudioFrameClassification"),Jst.forEach(t),FOo=r(M0e," (UniSpeechSat model)"),M0e.forEach(t),COo=i(R4),xv=n(R4,"LI",{});var E0e=s(xv);sce=n(E0e,"STRONG",{});var Yst=s(sce);MOo=r(Yst,"wav2vec2"),Yst.forEach(t),EOo=r(E0e," \u2014 "),iq=n(E0e,"A",{href:!0});var Kst=s(iq);yOo=r(Kst,"Wav2Vec2ForAudioFrameClassification"),Kst.forEach(t),wOo=r(E0e," (Wav2Vec2 model)"),E0e.forEach(t),AOo=i(R4),kv=n(R4,"LI",{});var y0e=s(kv);lce=n(y0e,"STRONG",{});var Zst=s(lce);LOo=r(Zst,"wavlm"),Zst.forEach(t),BOo=r(y0e," \u2014 "),dq=n(y0e,"A",{href:!0});var elt=s(dq);xOo=r(elt,"WavLMForAudioFrameClassification"),elt.forEach(t),kOo=r(y0e," (WavLM model)"),y0e.forEach(t),R4.forEach(t),ROo=i(ea),Rv=n(ea,"P",{});var w0e=s(Rv);SOo=r(w0e,"The model is set in evaluation mode by default using "),ice=n(w0e,"CODE",{});var olt=s(ice);POo=r(olt,"model.eval()"),olt.forEach(t),$Oo=r(w0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dce=n(w0e,"CODE",{});var rlt=s(dce);IOo=r(rlt,"model.train()"),rlt.forEach(t),w0e.forEach(t),DOo=i(ea),cce=n(ea,"P",{});var tlt=s(cce);NOo=r(tlt,"Examples:"),tlt.forEach(t),jOo=i(ea),m(Xy.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),bRe=i(c),Gd=n(c,"H2",{class:!0});var APe=s(Gd);Sv=n(APe,"A",{id:!0,class:!0,href:!0});var alt=s(Sv);fce=n(alt,"SPAN",{});var nlt=s(fce);m(Vy.$$.fragment,nlt),nlt.forEach(t),alt.forEach(t),qOo=i(APe),mce=n(APe,"SPAN",{});var slt=s(mce);GOo=r(slt,"AutoModelForCTC"),slt.forEach(t),APe.forEach(t),vRe=i(c),fr=n(c,"DIV",{class:!0});var Ml=s(fr);m(zy.$$.fragment,Ml),OOo=i(Ml),Od=n(Ml,"P",{});var jW=s(Od);XOo=r(jW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),gce=n(jW,"CODE",{});var llt=s(gce);VOo=r(llt,"from_pretrained()"),llt.forEach(t),zOo=r(jW,"class method or the "),hce=n(jW,"CODE",{});var ilt=s(hce);WOo=r(ilt,"from_config()"),ilt.forEach(t),QOo=r(jW,`class
method.`),jW.forEach(t),HOo=i(Ml),Wy=n(Ml,"P",{});var LPe=s(Wy);UOo=r(LPe,"This class cannot be instantiated directly using "),pce=n(LPe,"CODE",{});var dlt=s(pce);JOo=r(dlt,"__init__()"),dlt.forEach(t),YOo=r(LPe," (throws an error)."),LPe.forEach(t),KOo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);m(Qy.$$.fragment,El),ZOo=i(El),_ce=n(El,"P",{});var clt=s(_ce);eXo=r(clt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),clt.forEach(t),oXo=i(El),Xd=n(El,"P",{});var qW=s(Xd);rXo=r(qW,`Note:
Loading a model from its configuration file does `),uce=n(qW,"STRONG",{});var flt=s(uce);tXo=r(flt,"not"),flt.forEach(t),aXo=r(qW,` load the model weights. It only affects the
model\u2019s configuration. Use `),bce=n(qW,"CODE",{});var mlt=s(bce);nXo=r(mlt,"from_pretrained()"),mlt.forEach(t),sXo=r(qW,"to load the model weights."),qW.forEach(t),lXo=i(El),vce=n(El,"P",{});var glt=s(vce);iXo=r(glt,"Examples:"),glt.forEach(t),dXo=i(El),m(Hy.$$.fragment,El),El.forEach(t),cXo=i(Ml),Ke=n(Ml,"DIV",{class:!0});var oa=s(Ke);m(Uy.$$.fragment,oa),fXo=i(oa),Tce=n(oa,"P",{});var hlt=s(Tce);mXo=r(hlt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),hlt.forEach(t),gXo=i(oa),sn=n(oa,"P",{});var S4=s(sn);hXo=r(S4,"The model class to instantiate is selected based on the "),Fce=n(S4,"CODE",{});var plt=s(Fce);pXo=r(plt,"model_type"),plt.forEach(t),_Xo=r(S4,` property of the config object (either
passed as an argument or loaded from `),Cce=n(S4,"CODE",{});var _lt=s(Cce);uXo=r(_lt,"pretrained_model_name_or_path"),_lt.forEach(t),bXo=r(S4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mce=n(S4,"CODE",{});var ult=s(Mce);vXo=r(ult,"pretrained_model_name_or_path"),ult.forEach(t),TXo=r(S4,":"),S4.forEach(t),FXo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);Pv=n(Go,"LI",{});var A0e=s(Pv);Ece=n(A0e,"STRONG",{});var blt=s(Ece);CXo=r(blt,"data2vec-audio"),blt.forEach(t),MXo=r(A0e," \u2014 "),cq=n(A0e,"A",{href:!0});var vlt=s(cq);EXo=r(vlt,"Data2VecAudioForCTC"),vlt.forEach(t),yXo=r(A0e," (Data2VecAudio model)"),A0e.forEach(t),wXo=i(Go),$v=n(Go,"LI",{});var L0e=s($v);yce=n(L0e,"STRONG",{});var Tlt=s(yce);AXo=r(Tlt,"hubert"),Tlt.forEach(t),LXo=r(L0e," \u2014 "),fq=n(L0e,"A",{href:!0});var Flt=s(fq);BXo=r(Flt,"HubertForCTC"),Flt.forEach(t),xXo=r(L0e," (Hubert model)"),L0e.forEach(t),kXo=i(Go),Iv=n(Go,"LI",{});var B0e=s(Iv);wce=n(B0e,"STRONG",{});var Clt=s(wce);RXo=r(Clt,"sew"),Clt.forEach(t),SXo=r(B0e," \u2014 "),mq=n(B0e,"A",{href:!0});var Mlt=s(mq);PXo=r(Mlt,"SEWForCTC"),Mlt.forEach(t),$Xo=r(B0e," (SEW model)"),B0e.forEach(t),IXo=i(Go),Dv=n(Go,"LI",{});var x0e=s(Dv);Ace=n(x0e,"STRONG",{});var Elt=s(Ace);DXo=r(Elt,"sew-d"),Elt.forEach(t),NXo=r(x0e," \u2014 "),gq=n(x0e,"A",{href:!0});var ylt=s(gq);jXo=r(ylt,"SEWDForCTC"),ylt.forEach(t),qXo=r(x0e," (SEW-D model)"),x0e.forEach(t),GXo=i(Go),Nv=n(Go,"LI",{});var k0e=s(Nv);Lce=n(k0e,"STRONG",{});var wlt=s(Lce);OXo=r(wlt,"unispeech"),wlt.forEach(t),XXo=r(k0e," \u2014 "),hq=n(k0e,"A",{href:!0});var Alt=s(hq);VXo=r(Alt,"UniSpeechForCTC"),Alt.forEach(t),zXo=r(k0e," (UniSpeech model)"),k0e.forEach(t),WXo=i(Go),jv=n(Go,"LI",{});var R0e=s(jv);Bce=n(R0e,"STRONG",{});var Llt=s(Bce);QXo=r(Llt,"unispeech-sat"),Llt.forEach(t),HXo=r(R0e," \u2014 "),pq=n(R0e,"A",{href:!0});var Blt=s(pq);UXo=r(Blt,"UniSpeechSatForCTC"),Blt.forEach(t),JXo=r(R0e," (UniSpeechSat model)"),R0e.forEach(t),YXo=i(Go),qv=n(Go,"LI",{});var S0e=s(qv);xce=n(S0e,"STRONG",{});var xlt=s(xce);KXo=r(xlt,"wav2vec2"),xlt.forEach(t),ZXo=r(S0e," \u2014 "),_q=n(S0e,"A",{href:!0});var klt=s(_q);eVo=r(klt,"Wav2Vec2ForCTC"),klt.forEach(t),oVo=r(S0e," (Wav2Vec2 model)"),S0e.forEach(t),rVo=i(Go),Gv=n(Go,"LI",{});var P0e=s(Gv);kce=n(P0e,"STRONG",{});var Rlt=s(kce);tVo=r(Rlt,"wavlm"),Rlt.forEach(t),aVo=r(P0e," \u2014 "),uq=n(P0e,"A",{href:!0});var Slt=s(uq);nVo=r(Slt,"WavLMForCTC"),Slt.forEach(t),sVo=r(P0e," (WavLM model)"),P0e.forEach(t),Go.forEach(t),lVo=i(oa),Ov=n(oa,"P",{});var $0e=s(Ov);iVo=r($0e,"The model is set in evaluation mode by default using "),Rce=n($0e,"CODE",{});var Plt=s(Rce);dVo=r(Plt,"model.eval()"),Plt.forEach(t),cVo=r($0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sce=n($0e,"CODE",{});var $lt=s(Sce);fVo=r($lt,"model.train()"),$lt.forEach(t),$0e.forEach(t),mVo=i(oa),Pce=n(oa,"P",{});var Ilt=s(Pce);gVo=r(Ilt,"Examples:"),Ilt.forEach(t),hVo=i(oa),m(Jy.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),TRe=i(c),Vd=n(c,"H2",{class:!0});var BPe=s(Vd);Xv=n(BPe,"A",{id:!0,class:!0,href:!0});var Dlt=s(Xv);$ce=n(Dlt,"SPAN",{});var Nlt=s($ce);m(Yy.$$.fragment,Nlt),Nlt.forEach(t),Dlt.forEach(t),pVo=i(BPe),Ice=n(BPe,"SPAN",{});var jlt=s(Ice);_Vo=r(jlt,"AutoModelForSpeechSeq2Seq"),jlt.forEach(t),BPe.forEach(t),FRe=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(Ky.$$.fragment,yl),uVo=i(yl),zd=n(yl,"P",{});var GW=s(zd);bVo=r(GW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Dce=n(GW,"CODE",{});var qlt=s(Dce);vVo=r(qlt,"from_pretrained()"),qlt.forEach(t),TVo=r(GW,"class method or the "),Nce=n(GW,"CODE",{});var Glt=s(Nce);FVo=r(Glt,"from_config()"),Glt.forEach(t),CVo=r(GW,`class
method.`),GW.forEach(t),MVo=i(yl),Zy=n(yl,"P",{});var xPe=s(Zy);EVo=r(xPe,"This class cannot be instantiated directly using "),jce=n(xPe,"CODE",{});var Olt=s(jce);yVo=r(Olt,"__init__()"),Olt.forEach(t),wVo=r(xPe," (throws an error)."),xPe.forEach(t),AVo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);m(ew.$$.fragment,wl),LVo=i(wl),qce=n(wl,"P",{});var Xlt=s(qce);BVo=r(Xlt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Xlt.forEach(t),xVo=i(wl),Wd=n(wl,"P",{});var OW=s(Wd);kVo=r(OW,`Note:
Loading a model from its configuration file does `),Gce=n(OW,"STRONG",{});var Vlt=s(Gce);RVo=r(Vlt,"not"),Vlt.forEach(t),SVo=r(OW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oce=n(OW,"CODE",{});var zlt=s(Oce);PVo=r(zlt,"from_pretrained()"),zlt.forEach(t),$Vo=r(OW,"to load the model weights."),OW.forEach(t),IVo=i(wl),Xce=n(wl,"P",{});var Wlt=s(Xce);DVo=r(Wlt,"Examples:"),Wlt.forEach(t),NVo=i(wl),m(ow.$$.fragment,wl),wl.forEach(t),jVo=i(yl),Ze=n(yl,"DIV",{class:!0});var ra=s(Ze);m(rw.$$.fragment,ra),qVo=i(ra),Vce=n(ra,"P",{});var Qlt=s(Vce);GVo=r(Qlt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Qlt.forEach(t),OVo=i(ra),ln=n(ra,"P",{});var P4=s(ln);XVo=r(P4,"The model class to instantiate is selected based on the "),zce=n(P4,"CODE",{});var Hlt=s(zce);VVo=r(Hlt,"model_type"),Hlt.forEach(t),zVo=r(P4,` property of the config object (either
passed as an argument or loaded from `),Wce=n(P4,"CODE",{});var Ult=s(Wce);WVo=r(Ult,"pretrained_model_name_or_path"),Ult.forEach(t),QVo=r(P4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qce=n(P4,"CODE",{});var Jlt=s(Qce);HVo=r(Jlt,"pretrained_model_name_or_path"),Jlt.forEach(t),UVo=r(P4,":"),P4.forEach(t),JVo=i(ra),tw=n(ra,"UL",{});var kPe=s(tw);Vv=n(kPe,"LI",{});var I0e=s(Vv);Hce=n(I0e,"STRONG",{});var Ylt=s(Hce);YVo=r(Ylt,"speech-encoder-decoder"),Ylt.forEach(t),KVo=r(I0e," \u2014 "),bq=n(I0e,"A",{href:!0});var Klt=s(bq);ZVo=r(Klt,"SpeechEncoderDecoderModel"),Klt.forEach(t),ezo=r(I0e," (Speech Encoder decoder model)"),I0e.forEach(t),ozo=i(kPe),zv=n(kPe,"LI",{});var D0e=s(zv);Uce=n(D0e,"STRONG",{});var Zlt=s(Uce);rzo=r(Zlt,"speech_to_text"),Zlt.forEach(t),tzo=r(D0e," \u2014 "),vq=n(D0e,"A",{href:!0});var eit=s(vq);azo=r(eit,"Speech2TextForConditionalGeneration"),eit.forEach(t),nzo=r(D0e," (Speech2Text model)"),D0e.forEach(t),kPe.forEach(t),szo=i(ra),Wv=n(ra,"P",{});var N0e=s(Wv);lzo=r(N0e,"The model is set in evaluation mode by default using "),Jce=n(N0e,"CODE",{});var oit=s(Jce);izo=r(oit,"model.eval()"),oit.forEach(t),dzo=r(N0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yce=n(N0e,"CODE",{});var rit=s(Yce);czo=r(rit,"model.train()"),rit.forEach(t),N0e.forEach(t),fzo=i(ra),Kce=n(ra,"P",{});var tit=s(Kce);mzo=r(tit,"Examples:"),tit.forEach(t),gzo=i(ra),m(aw.$$.fragment,ra),ra.forEach(t),yl.forEach(t),CRe=i(c),Qd=n(c,"H2",{class:!0});var RPe=s(Qd);Qv=n(RPe,"A",{id:!0,class:!0,href:!0});var ait=s(Qv);Zce=n(ait,"SPAN",{});var nit=s(Zce);m(nw.$$.fragment,nit),nit.forEach(t),ait.forEach(t),hzo=i(RPe),efe=n(RPe,"SPAN",{});var sit=s(efe);pzo=r(sit,"AutoModelForAudioXVector"),sit.forEach(t),RPe.forEach(t),MRe=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);m(sw.$$.fragment,Al),_zo=i(Al),Hd=n(Al,"P",{});var XW=s(Hd);uzo=r(XW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ofe=n(XW,"CODE",{});var lit=s(ofe);bzo=r(lit,"from_pretrained()"),lit.forEach(t),vzo=r(XW,"class method or the "),rfe=n(XW,"CODE",{});var iit=s(rfe);Tzo=r(iit,"from_config()"),iit.forEach(t),Fzo=r(XW,`class
method.`),XW.forEach(t),Czo=i(Al),lw=n(Al,"P",{});var SPe=s(lw);Mzo=r(SPe,"This class cannot be instantiated directly using "),tfe=n(SPe,"CODE",{});var dit=s(tfe);Ezo=r(dit,"__init__()"),dit.forEach(t),yzo=r(SPe," (throws an error)."),SPe.forEach(t),wzo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);m(iw.$$.fragment,Ll),Azo=i(Ll),afe=n(Ll,"P",{});var cit=s(afe);Lzo=r(cit,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),cit.forEach(t),Bzo=i(Ll),Ud=n(Ll,"P",{});var VW=s(Ud);xzo=r(VW,`Note:
Loading a model from its configuration file does `),nfe=n(VW,"STRONG",{});var fit=s(nfe);kzo=r(fit,"not"),fit.forEach(t),Rzo=r(VW,` load the model weights. It only affects the
model\u2019s configuration. Use `),sfe=n(VW,"CODE",{});var mit=s(sfe);Szo=r(mit,"from_pretrained()"),mit.forEach(t),Pzo=r(VW,"to load the model weights."),VW.forEach(t),$zo=i(Ll),lfe=n(Ll,"P",{});var git=s(lfe);Izo=r(git,"Examples:"),git.forEach(t),Dzo=i(Ll),m(dw.$$.fragment,Ll),Ll.forEach(t),Nzo=i(Al),eo=n(Al,"DIV",{class:!0});var ta=s(eo);m(cw.$$.fragment,ta),jzo=i(ta),ife=n(ta,"P",{});var hit=s(ife);qzo=r(hit,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),hit.forEach(t),Gzo=i(ta),dn=n(ta,"P",{});var $4=s(dn);Ozo=r($4,"The model class to instantiate is selected based on the "),dfe=n($4,"CODE",{});var pit=s(dfe);Xzo=r(pit,"model_type"),pit.forEach(t),Vzo=r($4,` property of the config object (either
passed as an argument or loaded from `),cfe=n($4,"CODE",{});var _it=s(cfe);zzo=r(_it,"pretrained_model_name_or_path"),_it.forEach(t),Wzo=r($4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ffe=n($4,"CODE",{});var uit=s(ffe);Qzo=r(uit,"pretrained_model_name_or_path"),uit.forEach(t),Hzo=r($4,":"),$4.forEach(t),Uzo=i(ta),cn=n(ta,"UL",{});var I4=s(cn);Hv=n(I4,"LI",{});var j0e=s(Hv);mfe=n(j0e,"STRONG",{});var bit=s(mfe);Jzo=r(bit,"data2vec-audio"),bit.forEach(t),Yzo=r(j0e," \u2014 "),Tq=n(j0e,"A",{href:!0});var vit=s(Tq);Kzo=r(vit,"Data2VecAudioForXVector"),vit.forEach(t),Zzo=r(j0e," (Data2VecAudio model)"),j0e.forEach(t),eWo=i(I4),Uv=n(I4,"LI",{});var q0e=s(Uv);gfe=n(q0e,"STRONG",{});var Tit=s(gfe);oWo=r(Tit,"unispeech-sat"),Tit.forEach(t),rWo=r(q0e," \u2014 "),Fq=n(q0e,"A",{href:!0});var Fit=s(Fq);tWo=r(Fit,"UniSpeechSatForXVector"),Fit.forEach(t),aWo=r(q0e," (UniSpeechSat model)"),q0e.forEach(t),nWo=i(I4),Jv=n(I4,"LI",{});var G0e=s(Jv);hfe=n(G0e,"STRONG",{});var Cit=s(hfe);sWo=r(Cit,"wav2vec2"),Cit.forEach(t),lWo=r(G0e," \u2014 "),Cq=n(G0e,"A",{href:!0});var Mit=s(Cq);iWo=r(Mit,"Wav2Vec2ForXVector"),Mit.forEach(t),dWo=r(G0e," (Wav2Vec2 model)"),G0e.forEach(t),cWo=i(I4),Yv=n(I4,"LI",{});var O0e=s(Yv);pfe=n(O0e,"STRONG",{});var Eit=s(pfe);fWo=r(Eit,"wavlm"),Eit.forEach(t),mWo=r(O0e," \u2014 "),Mq=n(O0e,"A",{href:!0});var yit=s(Mq);gWo=r(yit,"WavLMForXVector"),yit.forEach(t),hWo=r(O0e," (WavLM model)"),O0e.forEach(t),I4.forEach(t),pWo=i(ta),Kv=n(ta,"P",{});var X0e=s(Kv);_Wo=r(X0e,"The model is set in evaluation mode by default using "),_fe=n(X0e,"CODE",{});var wit=s(_fe);uWo=r(wit,"model.eval()"),wit.forEach(t),bWo=r(X0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=n(X0e,"CODE",{});var Ait=s(ufe);vWo=r(Ait,"model.train()"),Ait.forEach(t),X0e.forEach(t),TWo=i(ta),bfe=n(ta,"P",{});var Lit=s(bfe);FWo=r(Lit,"Examples:"),Lit.forEach(t),CWo=i(ta),m(fw.$$.fragment,ta),ta.forEach(t),Al.forEach(t),ERe=i(c),Jd=n(c,"H2",{class:!0});var PPe=s(Jd);Zv=n(PPe,"A",{id:!0,class:!0,href:!0});var Bit=s(Zv);vfe=n(Bit,"SPAN",{});var xit=s(vfe);m(mw.$$.fragment,xit),xit.forEach(t),Bit.forEach(t),MWo=i(PPe),Tfe=n(PPe,"SPAN",{});var kit=s(Tfe);EWo=r(kit,"AutoModelForMaskedImageModeling"),kit.forEach(t),PPe.forEach(t),yRe=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(gw.$$.fragment,Bl),yWo=i(Bl),Yd=n(Bl,"P",{});var zW=s(Yd);wWo=r(zW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Ffe=n(zW,"CODE",{});var Rit=s(Ffe);AWo=r(Rit,"from_pretrained()"),Rit.forEach(t),LWo=r(zW,"class method or the "),Cfe=n(zW,"CODE",{});var Sit=s(Cfe);BWo=r(Sit,"from_config()"),Sit.forEach(t),xWo=r(zW,`class
method.`),zW.forEach(t),kWo=i(Bl),hw=n(Bl,"P",{});var $Pe=s(hw);RWo=r($Pe,"This class cannot be instantiated directly using "),Mfe=n($Pe,"CODE",{});var Pit=s(Mfe);SWo=r(Pit,"__init__()"),Pit.forEach(t),PWo=r($Pe," (throws an error)."),$Pe.forEach(t),$Wo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);m(pw.$$.fragment,xl),IWo=i(xl),Efe=n(xl,"P",{});var $it=s(Efe);DWo=r($it,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),$it.forEach(t),NWo=i(xl),Kd=n(xl,"P",{});var WW=s(Kd);jWo=r(WW,`Note:
Loading a model from its configuration file does `),yfe=n(WW,"STRONG",{});var Iit=s(yfe);qWo=r(Iit,"not"),Iit.forEach(t),GWo=r(WW,` load the model weights. It only affects the
model\u2019s configuration. Use `),wfe=n(WW,"CODE",{});var Dit=s(wfe);OWo=r(Dit,"from_pretrained()"),Dit.forEach(t),XWo=r(WW,"to load the model weights."),WW.forEach(t),VWo=i(xl),Afe=n(xl,"P",{});var Nit=s(Afe);zWo=r(Nit,"Examples:"),Nit.forEach(t),WWo=i(xl),m(_w.$$.fragment,xl),xl.forEach(t),QWo=i(Bl),oo=n(Bl,"DIV",{class:!0});var aa=s(oo);m(uw.$$.fragment,aa),HWo=i(aa),Lfe=n(aa,"P",{});var jit=s(Lfe);UWo=r(jit,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),jit.forEach(t),JWo=i(aa),fn=n(aa,"P",{});var D4=s(fn);YWo=r(D4,"The model class to instantiate is selected based on the "),Bfe=n(D4,"CODE",{});var qit=s(Bfe);KWo=r(qit,"model_type"),qit.forEach(t),ZWo=r(D4,` property of the config object (either
passed as an argument or loaded from `),xfe=n(D4,"CODE",{});var Git=s(xfe);eQo=r(Git,"pretrained_model_name_or_path"),Git.forEach(t),oQo=r(D4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=n(D4,"CODE",{});var Oit=s(kfe);rQo=r(Oit,"pretrained_model_name_or_path"),Oit.forEach(t),tQo=r(D4,":"),D4.forEach(t),aQo=i(aa),Zd=n(aa,"UL",{});var QW=s(Zd);e6=n(QW,"LI",{});var V0e=s(e6);Rfe=n(V0e,"STRONG",{});var Xit=s(Rfe);nQo=r(Xit,"deit"),Xit.forEach(t),sQo=r(V0e," \u2014 "),Eq=n(V0e,"A",{href:!0});var Vit=s(Eq);lQo=r(Vit,"DeiTForMaskedImageModeling"),Vit.forEach(t),iQo=r(V0e," (DeiT model)"),V0e.forEach(t),dQo=i(QW),o6=n(QW,"LI",{});var z0e=s(o6);Sfe=n(z0e,"STRONG",{});var zit=s(Sfe);cQo=r(zit,"swin"),zit.forEach(t),fQo=r(z0e," \u2014 "),yq=n(z0e,"A",{href:!0});var Wit=s(yq);mQo=r(Wit,"SwinForMaskedImageModeling"),Wit.forEach(t),gQo=r(z0e," (Swin model)"),z0e.forEach(t),hQo=i(QW),r6=n(QW,"LI",{});var W0e=s(r6);Pfe=n(W0e,"STRONG",{});var Qit=s(Pfe);pQo=r(Qit,"vit"),Qit.forEach(t),_Qo=r(W0e," \u2014 "),wq=n(W0e,"A",{href:!0});var Hit=s(wq);uQo=r(Hit,"ViTForMaskedImageModeling"),Hit.forEach(t),bQo=r(W0e," (ViT model)"),W0e.forEach(t),QW.forEach(t),vQo=i(aa),t6=n(aa,"P",{});var Q0e=s(t6);TQo=r(Q0e,"The model is set in evaluation mode by default using "),$fe=n(Q0e,"CODE",{});var Uit=s($fe);FQo=r(Uit,"model.eval()"),Uit.forEach(t),CQo=r(Q0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ife=n(Q0e,"CODE",{});var Jit=s(Ife);MQo=r(Jit,"model.train()"),Jit.forEach(t),Q0e.forEach(t),EQo=i(aa),Dfe=n(aa,"P",{});var Yit=s(Dfe);yQo=r(Yit,"Examples:"),Yit.forEach(t),wQo=i(aa),m(bw.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),wRe=i(c),ec=n(c,"H2",{class:!0});var IPe=s(ec);a6=n(IPe,"A",{id:!0,class:!0,href:!0});var Kit=s(a6);Nfe=n(Kit,"SPAN",{});var Zit=s(Nfe);m(vw.$$.fragment,Zit),Zit.forEach(t),Kit.forEach(t),AQo=i(IPe),jfe=n(IPe,"SPAN",{});var edt=s(jfe);LQo=r(edt,"AutoModelForObjectDetection"),edt.forEach(t),IPe.forEach(t),ARe=i(c),pr=n(c,"DIV",{class:!0});var kl=s(pr);m(Tw.$$.fragment,kl),BQo=i(kl),oc=n(kl,"P",{});var HW=s(oc);xQo=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),qfe=n(HW,"CODE",{});var odt=s(qfe);kQo=r(odt,"from_pretrained()"),odt.forEach(t),RQo=r(HW,"class method or the "),Gfe=n(HW,"CODE",{});var rdt=s(Gfe);SQo=r(rdt,"from_config()"),rdt.forEach(t),PQo=r(HW,`class
method.`),HW.forEach(t),$Qo=i(kl),Fw=n(kl,"P",{});var DPe=s(Fw);IQo=r(DPe,"This class cannot be instantiated directly using "),Ofe=n(DPe,"CODE",{});var tdt=s(Ofe);DQo=r(tdt,"__init__()"),tdt.forEach(t),NQo=r(DPe," (throws an error)."),DPe.forEach(t),jQo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);m(Cw.$$.fragment,Rl),qQo=i(Rl),Xfe=n(Rl,"P",{});var adt=s(Xfe);GQo=r(adt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),adt.forEach(t),OQo=i(Rl),rc=n(Rl,"P",{});var UW=s(rc);XQo=r(UW,`Note:
Loading a model from its configuration file does `),Vfe=n(UW,"STRONG",{});var ndt=s(Vfe);VQo=r(ndt,"not"),ndt.forEach(t),zQo=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),zfe=n(UW,"CODE",{});var sdt=s(zfe);WQo=r(sdt,"from_pretrained()"),sdt.forEach(t),QQo=r(UW,"to load the model weights."),UW.forEach(t),HQo=i(Rl),Wfe=n(Rl,"P",{});var ldt=s(Wfe);UQo=r(ldt,"Examples:"),ldt.forEach(t),JQo=i(Rl),m(Mw.$$.fragment,Rl),Rl.forEach(t),YQo=i(kl),ro=n(kl,"DIV",{class:!0});var na=s(ro);m(Ew.$$.fragment,na),KQo=i(na),Qfe=n(na,"P",{});var idt=s(Qfe);ZQo=r(idt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),idt.forEach(t),eHo=i(na),mn=n(na,"P",{});var N4=s(mn);oHo=r(N4,"The model class to instantiate is selected based on the "),Hfe=n(N4,"CODE",{});var ddt=s(Hfe);rHo=r(ddt,"model_type"),ddt.forEach(t),tHo=r(N4,` property of the config object (either
passed as an argument or loaded from `),Ufe=n(N4,"CODE",{});var cdt=s(Ufe);aHo=r(cdt,"pretrained_model_name_or_path"),cdt.forEach(t),nHo=r(N4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jfe=n(N4,"CODE",{});var fdt=s(Jfe);sHo=r(fdt,"pretrained_model_name_or_path"),fdt.forEach(t),lHo=r(N4,":"),N4.forEach(t),iHo=i(na),Yfe=n(na,"UL",{});var mdt=s(Yfe);n6=n(mdt,"LI",{});var H0e=s(n6);Kfe=n(H0e,"STRONG",{});var gdt=s(Kfe);dHo=r(gdt,"detr"),gdt.forEach(t),cHo=r(H0e," \u2014 "),Aq=n(H0e,"A",{href:!0});var hdt=s(Aq);fHo=r(hdt,"DetrForObjectDetection"),hdt.forEach(t),mHo=r(H0e," (DETR model)"),H0e.forEach(t),mdt.forEach(t),gHo=i(na),s6=n(na,"P",{});var U0e=s(s6);hHo=r(U0e,"The model is set in evaluation mode by default using "),Zfe=n(U0e,"CODE",{});var pdt=s(Zfe);pHo=r(pdt,"model.eval()"),pdt.forEach(t),_Ho=r(U0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=n(U0e,"CODE",{});var _dt=s(eme);uHo=r(_dt,"model.train()"),_dt.forEach(t),U0e.forEach(t),bHo=i(na),ome=n(na,"P",{});var udt=s(ome);vHo=r(udt,"Examples:"),udt.forEach(t),THo=i(na),m(yw.$$.fragment,na),na.forEach(t),kl.forEach(t),LRe=i(c),tc=n(c,"H2",{class:!0});var NPe=s(tc);l6=n(NPe,"A",{id:!0,class:!0,href:!0});var bdt=s(l6);rme=n(bdt,"SPAN",{});var vdt=s(rme);m(ww.$$.fragment,vdt),vdt.forEach(t),bdt.forEach(t),FHo=i(NPe),tme=n(NPe,"SPAN",{});var Tdt=s(tme);CHo=r(Tdt,"AutoModelForImageSegmentation"),Tdt.forEach(t),NPe.forEach(t),BRe=i(c),_r=n(c,"DIV",{class:!0});var Sl=s(_r);m(Aw.$$.fragment,Sl),MHo=i(Sl),ac=n(Sl,"P",{});var JW=s(ac);EHo=r(JW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ame=n(JW,"CODE",{});var Fdt=s(ame);yHo=r(Fdt,"from_pretrained()"),Fdt.forEach(t),wHo=r(JW,"class method or the "),nme=n(JW,"CODE",{});var Cdt=s(nme);AHo=r(Cdt,"from_config()"),Cdt.forEach(t),LHo=r(JW,`class
method.`),JW.forEach(t),BHo=i(Sl),Lw=n(Sl,"P",{});var jPe=s(Lw);xHo=r(jPe,"This class cannot be instantiated directly using "),sme=n(jPe,"CODE",{});var Mdt=s(sme);kHo=r(Mdt,"__init__()"),Mdt.forEach(t),RHo=r(jPe," (throws an error)."),jPe.forEach(t),SHo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);m(Bw.$$.fragment,Pl),PHo=i(Pl),lme=n(Pl,"P",{});var Edt=s(lme);$Ho=r(Edt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Edt.forEach(t),IHo=i(Pl),nc=n(Pl,"P",{});var YW=s(nc);DHo=r(YW,`Note:
Loading a model from its configuration file does `),ime=n(YW,"STRONG",{});var ydt=s(ime);NHo=r(ydt,"not"),ydt.forEach(t),jHo=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),dme=n(YW,"CODE",{});var wdt=s(dme);qHo=r(wdt,"from_pretrained()"),wdt.forEach(t),GHo=r(YW,"to load the model weights."),YW.forEach(t),OHo=i(Pl),cme=n(Pl,"P",{});var Adt=s(cme);XHo=r(Adt,"Examples:"),Adt.forEach(t),VHo=i(Pl),m(xw.$$.fragment,Pl),Pl.forEach(t),zHo=i(Sl),to=n(Sl,"DIV",{class:!0});var sa=s(to);m(kw.$$.fragment,sa),WHo=i(sa),fme=n(sa,"P",{});var Ldt=s(fme);QHo=r(Ldt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Ldt.forEach(t),HHo=i(sa),gn=n(sa,"P",{});var j4=s(gn);UHo=r(j4,"The model class to instantiate is selected based on the "),mme=n(j4,"CODE",{});var Bdt=s(mme);JHo=r(Bdt,"model_type"),Bdt.forEach(t),YHo=r(j4,` property of the config object (either
passed as an argument or loaded from `),gme=n(j4,"CODE",{});var xdt=s(gme);KHo=r(xdt,"pretrained_model_name_or_path"),xdt.forEach(t),ZHo=r(j4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hme=n(j4,"CODE",{});var kdt=s(hme);eUo=r(kdt,"pretrained_model_name_or_path"),kdt.forEach(t),oUo=r(j4,":"),j4.forEach(t),rUo=i(sa),pme=n(sa,"UL",{});var Rdt=s(pme);i6=n(Rdt,"LI",{});var J0e=s(i6);_me=n(J0e,"STRONG",{});var Sdt=s(_me);tUo=r(Sdt,"detr"),Sdt.forEach(t),aUo=r(J0e," \u2014 "),Lq=n(J0e,"A",{href:!0});var Pdt=s(Lq);nUo=r(Pdt,"DetrForSegmentation"),Pdt.forEach(t),sUo=r(J0e," (DETR model)"),J0e.forEach(t),Rdt.forEach(t),lUo=i(sa),d6=n(sa,"P",{});var Y0e=s(d6);iUo=r(Y0e,"The model is set in evaluation mode by default using "),ume=n(Y0e,"CODE",{});var $dt=s(ume);dUo=r($dt,"model.eval()"),$dt.forEach(t),cUo=r(Y0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bme=n(Y0e,"CODE",{});var Idt=s(bme);fUo=r(Idt,"model.train()"),Idt.forEach(t),Y0e.forEach(t),mUo=i(sa),vme=n(sa,"P",{});var Ddt=s(vme);gUo=r(Ddt,"Examples:"),Ddt.forEach(t),hUo=i(sa),m(Rw.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),xRe=i(c),sc=n(c,"H2",{class:!0});var qPe=s(sc);c6=n(qPe,"A",{id:!0,class:!0,href:!0});var Ndt=s(c6);Tme=n(Ndt,"SPAN",{});var jdt=s(Tme);m(Sw.$$.fragment,jdt),jdt.forEach(t),Ndt.forEach(t),pUo=i(qPe),Fme=n(qPe,"SPAN",{});var qdt=s(Fme);_Uo=r(qdt,"AutoModelForSemanticSegmentation"),qdt.forEach(t),qPe.forEach(t),kRe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(Pw.$$.fragment,$l),uUo=i($l),lc=n($l,"P",{});var KW=s(lc);bUo=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Cme=n(KW,"CODE",{});var Gdt=s(Cme);vUo=r(Gdt,"from_pretrained()"),Gdt.forEach(t),TUo=r(KW,"class method or the "),Mme=n(KW,"CODE",{});var Odt=s(Mme);FUo=r(Odt,"from_config()"),Odt.forEach(t),CUo=r(KW,`class
method.`),KW.forEach(t),MUo=i($l),$w=n($l,"P",{});var GPe=s($w);EUo=r(GPe,"This class cannot be instantiated directly using "),Eme=n(GPe,"CODE",{});var Xdt=s(Eme);yUo=r(Xdt,"__init__()"),Xdt.forEach(t),wUo=r(GPe," (throws an error)."),GPe.forEach(t),AUo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(Iw.$$.fragment,Il),LUo=i(Il),yme=n(Il,"P",{});var Vdt=s(yme);BUo=r(Vdt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Vdt.forEach(t),xUo=i(Il),ic=n(Il,"P",{});var ZW=s(ic);kUo=r(ZW,`Note:
Loading a model from its configuration file does `),wme=n(ZW,"STRONG",{});var zdt=s(wme);RUo=r(zdt,"not"),zdt.forEach(t),SUo=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ame=n(ZW,"CODE",{});var Wdt=s(Ame);PUo=r(Wdt,"from_pretrained()"),Wdt.forEach(t),$Uo=r(ZW,"to load the model weights."),ZW.forEach(t),IUo=i(Il),Lme=n(Il,"P",{});var Qdt=s(Lme);DUo=r(Qdt,"Examples:"),Qdt.forEach(t),NUo=i(Il),m(Dw.$$.fragment,Il),Il.forEach(t),jUo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(Nw.$$.fragment,la),qUo=i(la),Bme=n(la,"P",{});var Hdt=s(Bme);GUo=r(Hdt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Hdt.forEach(t),OUo=i(la),hn=n(la,"P",{});var q4=s(hn);XUo=r(q4,"The model class to instantiate is selected based on the "),xme=n(q4,"CODE",{});var Udt=s(xme);VUo=r(Udt,"model_type"),Udt.forEach(t),zUo=r(q4,` property of the config object (either
passed as an argument or loaded from `),kme=n(q4,"CODE",{});var Jdt=s(kme);WUo=r(Jdt,"pretrained_model_name_or_path"),Jdt.forEach(t),QUo=r(q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rme=n(q4,"CODE",{});var Ydt=s(Rme);HUo=r(Ydt,"pretrained_model_name_or_path"),Ydt.forEach(t),UUo=r(q4,":"),q4.forEach(t),JUo=i(la),dc=n(la,"UL",{});var eQ=s(dc);f6=n(eQ,"LI",{});var K0e=s(f6);Sme=n(K0e,"STRONG",{});var Kdt=s(Sme);YUo=r(Kdt,"beit"),Kdt.forEach(t),KUo=r(K0e," \u2014 "),Bq=n(K0e,"A",{href:!0});var Zdt=s(Bq);ZUo=r(Zdt,"BeitForSemanticSegmentation"),Zdt.forEach(t),eJo=r(K0e," (BEiT model)"),K0e.forEach(t),oJo=i(eQ),m6=n(eQ,"LI",{});var Z0e=s(m6);Pme=n(Z0e,"STRONG",{});var ect=s(Pme);rJo=r(ect,"dpt"),ect.forEach(t),tJo=r(Z0e," \u2014 "),xq=n(Z0e,"A",{href:!0});var oct=s(xq);aJo=r(oct,"DPTForSemanticSegmentation"),oct.forEach(t),nJo=r(Z0e," (DPT model)"),Z0e.forEach(t),sJo=i(eQ),g6=n(eQ,"LI",{});var eLe=s(g6);$me=n(eLe,"STRONG",{});var rct=s($me);lJo=r(rct,"segformer"),rct.forEach(t),iJo=r(eLe," \u2014 "),kq=n(eLe,"A",{href:!0});var tct=s(kq);dJo=r(tct,"SegformerForSemanticSegmentation"),tct.forEach(t),cJo=r(eLe," (SegFormer model)"),eLe.forEach(t),eQ.forEach(t),fJo=i(la),h6=n(la,"P",{});var oLe=s(h6);mJo=r(oLe,"The model is set in evaluation mode by default using "),Ime=n(oLe,"CODE",{});var act=s(Ime);gJo=r(act,"model.eval()"),act.forEach(t),hJo=r(oLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=n(oLe,"CODE",{});var nct=s(Dme);pJo=r(nct,"model.train()"),nct.forEach(t),oLe.forEach(t),_Jo=i(la),Nme=n(la,"P",{});var sct=s(Nme);uJo=r(sct,"Examples:"),sct.forEach(t),bJo=i(la),m(jw.$$.fragment,la),la.forEach(t),$l.forEach(t),RRe=i(c),cc=n(c,"H2",{class:!0});var OPe=s(cc);p6=n(OPe,"A",{id:!0,class:!0,href:!0});var lct=s(p6);jme=n(lct,"SPAN",{});var ict=s(jme);m(qw.$$.fragment,ict),ict.forEach(t),lct.forEach(t),vJo=i(OPe),qme=n(OPe,"SPAN",{});var dct=s(qme);TJo=r(dct,"AutoModelForInstanceSegmentation"),dct.forEach(t),OPe.forEach(t),SRe=i(c),br=n(c,"DIV",{class:!0});var Dl=s(br);m(Gw.$$.fragment,Dl),FJo=i(Dl),fc=n(Dl,"P",{});var oQ=s(fc);CJo=r(oQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Gme=n(oQ,"CODE",{});var cct=s(Gme);MJo=r(cct,"from_pretrained()"),cct.forEach(t),EJo=r(oQ,"class method or the "),Ome=n(oQ,"CODE",{});var fct=s(Ome);yJo=r(fct,"from_config()"),fct.forEach(t),wJo=r(oQ,`class
method.`),oQ.forEach(t),AJo=i(Dl),Ow=n(Dl,"P",{});var XPe=s(Ow);LJo=r(XPe,"This class cannot be instantiated directly using "),Xme=n(XPe,"CODE",{});var mct=s(Xme);BJo=r(mct,"__init__()"),mct.forEach(t),xJo=r(XPe," (throws an error)."),XPe.forEach(t),kJo=i(Dl),mt=n(Dl,"DIV",{class:!0});var Nl=s(mt);m(Xw.$$.fragment,Nl),RJo=i(Nl),Vme=n(Nl,"P",{});var gct=s(Vme);SJo=r(gct,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),gct.forEach(t),PJo=i(Nl),mc=n(Nl,"P",{});var rQ=s(mc);$Jo=r(rQ,`Note:
Loading a model from its configuration file does `),zme=n(rQ,"STRONG",{});var hct=s(zme);IJo=r(hct,"not"),hct.forEach(t),DJo=r(rQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wme=n(rQ,"CODE",{});var pct=s(Wme);NJo=r(pct,"from_pretrained()"),pct.forEach(t),jJo=r(rQ,"to load the model weights."),rQ.forEach(t),qJo=i(Nl),Qme=n(Nl,"P",{});var _ct=s(Qme);GJo=r(_ct,"Examples:"),_ct.forEach(t),OJo=i(Nl),m(Vw.$$.fragment,Nl),Nl.forEach(t),XJo=i(Dl),no=n(Dl,"DIV",{class:!0});var ia=s(no);m(zw.$$.fragment,ia),VJo=i(ia),Hme=n(ia,"P",{});var uct=s(Hme);zJo=r(uct,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),uct.forEach(t),WJo=i(ia),pn=n(ia,"P",{});var G4=s(pn);QJo=r(G4,"The model class to instantiate is selected based on the "),Ume=n(G4,"CODE",{});var bct=s(Ume);HJo=r(bct,"model_type"),bct.forEach(t),UJo=r(G4,` property of the config object (either
passed as an argument or loaded from `),Jme=n(G4,"CODE",{});var vct=s(Jme);JJo=r(vct,"pretrained_model_name_or_path"),vct.forEach(t),YJo=r(G4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=n(G4,"CODE",{});var Tct=s(Yme);KJo=r(Tct,"pretrained_model_name_or_path"),Tct.forEach(t),ZJo=r(G4,":"),G4.forEach(t),eYo=i(ia),Kme=n(ia,"UL",{});var Fct=s(Kme);_6=n(Fct,"LI",{});var rLe=s(_6);Zme=n(rLe,"STRONG",{});var Cct=s(Zme);oYo=r(Cct,"maskformer"),Cct.forEach(t),rYo=r(rLe," \u2014 "),Rq=n(rLe,"A",{href:!0});var Mct=s(Rq);tYo=r(Mct,"MaskFormerForInstanceSegmentation"),Mct.forEach(t),aYo=r(rLe," (MaskFormer model)"),rLe.forEach(t),Fct.forEach(t),nYo=i(ia),u6=n(ia,"P",{});var tLe=s(u6);sYo=r(tLe,"The model is set in evaluation mode by default using "),ege=n(tLe,"CODE",{});var Ect=s(ege);lYo=r(Ect,"model.eval()"),Ect.forEach(t),iYo=r(tLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=n(tLe,"CODE",{});var yct=s(oge);dYo=r(yct,"model.train()"),yct.forEach(t),tLe.forEach(t),cYo=i(ia),rge=n(ia,"P",{});var wct=s(rge);fYo=r(wct,"Examples:"),wct.forEach(t),mYo=i(ia),m(Ww.$$.fragment,ia),ia.forEach(t),Dl.forEach(t),PRe=i(c),gc=n(c,"H2",{class:!0});var VPe=s(gc);b6=n(VPe,"A",{id:!0,class:!0,href:!0});var Act=s(b6);tge=n(Act,"SPAN",{});var Lct=s(tge);m(Qw.$$.fragment,Lct),Lct.forEach(t),Act.forEach(t),gYo=i(VPe),age=n(VPe,"SPAN",{});var Bct=s(age);hYo=r(Bct,"TFAutoModel"),Bct.forEach(t),VPe.forEach(t),$Re=i(c),vr=n(c,"DIV",{class:!0});var jl=s(vr);m(Hw.$$.fragment,jl),pYo=i(jl),hc=n(jl,"P",{});var tQ=s(hc);_Yo=r(tQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nge=n(tQ,"CODE",{});var xct=s(nge);uYo=r(xct,"from_pretrained()"),xct.forEach(t),bYo=r(tQ,"class method or the "),sge=n(tQ,"CODE",{});var kct=s(sge);vYo=r(kct,"from_config()"),kct.forEach(t),TYo=r(tQ,`class
method.`),tQ.forEach(t),FYo=i(jl),Uw=n(jl,"P",{});var zPe=s(Uw);CYo=r(zPe,"This class cannot be instantiated directly using "),lge=n(zPe,"CODE",{});var Rct=s(lge);MYo=r(Rct,"__init__()"),Rct.forEach(t),EYo=r(zPe," (throws an error)."),zPe.forEach(t),yYo=i(jl),gt=n(jl,"DIV",{class:!0});var ql=s(gt);m(Jw.$$.fragment,ql),wYo=i(ql),ige=n(ql,"P",{});var Sct=s(ige);AYo=r(Sct,"Instantiates one of the base model classes of the library from a configuration."),Sct.forEach(t),LYo=i(ql),pc=n(ql,"P",{});var aQ=s(pc);BYo=r(aQ,`Note:
Loading a model from its configuration file does `),dge=n(aQ,"STRONG",{});var Pct=s(dge);xYo=r(Pct,"not"),Pct.forEach(t),kYo=r(aQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cge=n(aQ,"CODE",{});var $ct=s(cge);RYo=r($ct,"from_pretrained()"),$ct.forEach(t),SYo=r(aQ,"to load the model weights."),aQ.forEach(t),PYo=i(ql),fge=n(ql,"P",{});var Ict=s(fge);$Yo=r(Ict,"Examples:"),Ict.forEach(t),IYo=i(ql),m(Yw.$$.fragment,ql),ql.forEach(t),DYo=i(jl),ho=n(jl,"DIV",{class:!0});var pa=s(ho);m(Kw.$$.fragment,pa),NYo=i(pa),mge=n(pa,"P",{});var Dct=s(mge);jYo=r(Dct,"Instantiate one of the base model classes of the library from a pretrained model."),Dct.forEach(t),qYo=i(pa),_n=n(pa,"P",{});var O4=s(_n);GYo=r(O4,"The model class to instantiate is selected based on the "),gge=n(O4,"CODE",{});var Nct=s(gge);OYo=r(Nct,"model_type"),Nct.forEach(t),XYo=r(O4,` property of the config object (either
passed as an argument or loaded from `),hge=n(O4,"CODE",{});var jct=s(hge);VYo=r(jct,"pretrained_model_name_or_path"),jct.forEach(t),zYo=r(O4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pge=n(O4,"CODE",{});var qct=s(pge);WYo=r(qct,"pretrained_model_name_or_path"),qct.forEach(t),QYo=r(O4,":"),O4.forEach(t),HYo=i(pa),B=n(pa,"UL",{});var x=s(B);v6=n(x,"LI",{});var aLe=s(v6);_ge=n(aLe,"STRONG",{});var Gct=s(_ge);UYo=r(Gct,"albert"),Gct.forEach(t),JYo=r(aLe," \u2014 "),Sq=n(aLe,"A",{href:!0});var Oct=s(Sq);YYo=r(Oct,"TFAlbertModel"),Oct.forEach(t),KYo=r(aLe," (ALBERT model)"),aLe.forEach(t),ZYo=i(x),T6=n(x,"LI",{});var nLe=s(T6);uge=n(nLe,"STRONG",{});var Xct=s(uge);eKo=r(Xct,"bart"),Xct.forEach(t),oKo=r(nLe," \u2014 "),Pq=n(nLe,"A",{href:!0});var Vct=s(Pq);rKo=r(Vct,"TFBartModel"),Vct.forEach(t),tKo=r(nLe," (BART model)"),nLe.forEach(t),aKo=i(x),F6=n(x,"LI",{});var sLe=s(F6);bge=n(sLe,"STRONG",{});var zct=s(bge);nKo=r(zct,"bert"),zct.forEach(t),sKo=r(sLe," \u2014 "),$q=n(sLe,"A",{href:!0});var Wct=s($q);lKo=r(Wct,"TFBertModel"),Wct.forEach(t),iKo=r(sLe," (BERT model)"),sLe.forEach(t),dKo=i(x),C6=n(x,"LI",{});var lLe=s(C6);vge=n(lLe,"STRONG",{});var Qct=s(vge);cKo=r(Qct,"blenderbot"),Qct.forEach(t),fKo=r(lLe," \u2014 "),Iq=n(lLe,"A",{href:!0});var Hct=s(Iq);mKo=r(Hct,"TFBlenderbotModel"),Hct.forEach(t),gKo=r(lLe," (Blenderbot model)"),lLe.forEach(t),hKo=i(x),M6=n(x,"LI",{});var iLe=s(M6);Tge=n(iLe,"STRONG",{});var Uct=s(Tge);pKo=r(Uct,"blenderbot-small"),Uct.forEach(t),_Ko=r(iLe," \u2014 "),Dq=n(iLe,"A",{href:!0});var Jct=s(Dq);uKo=r(Jct,"TFBlenderbotSmallModel"),Jct.forEach(t),bKo=r(iLe," (BlenderbotSmall model)"),iLe.forEach(t),vKo=i(x),E6=n(x,"LI",{});var dLe=s(E6);Fge=n(dLe,"STRONG",{});var Yct=s(Fge);TKo=r(Yct,"camembert"),Yct.forEach(t),FKo=r(dLe," \u2014 "),Nq=n(dLe,"A",{href:!0});var Kct=s(Nq);CKo=r(Kct,"TFCamembertModel"),Kct.forEach(t),MKo=r(dLe," (CamemBERT model)"),dLe.forEach(t),EKo=i(x),y6=n(x,"LI",{});var cLe=s(y6);Cge=n(cLe,"STRONG",{});var Zct=s(Cge);yKo=r(Zct,"clip"),Zct.forEach(t),wKo=r(cLe," \u2014 "),jq=n(cLe,"A",{href:!0});var eft=s(jq);AKo=r(eft,"TFCLIPModel"),eft.forEach(t),LKo=r(cLe," (CLIP model)"),cLe.forEach(t),BKo=i(x),w6=n(x,"LI",{});var fLe=s(w6);Mge=n(fLe,"STRONG",{});var oft=s(Mge);xKo=r(oft,"convbert"),oft.forEach(t),kKo=r(fLe," \u2014 "),qq=n(fLe,"A",{href:!0});var rft=s(qq);RKo=r(rft,"TFConvBertModel"),rft.forEach(t),SKo=r(fLe," (ConvBERT model)"),fLe.forEach(t),PKo=i(x),A6=n(x,"LI",{});var mLe=s(A6);Ege=n(mLe,"STRONG",{});var tft=s(Ege);$Ko=r(tft,"convnext"),tft.forEach(t),IKo=r(mLe," \u2014 "),Gq=n(mLe,"A",{href:!0});var aft=s(Gq);DKo=r(aft,"TFConvNextModel"),aft.forEach(t),NKo=r(mLe," (ConvNext model)"),mLe.forEach(t),jKo=i(x),L6=n(x,"LI",{});var gLe=s(L6);yge=n(gLe,"STRONG",{});var nft=s(yge);qKo=r(nft,"ctrl"),nft.forEach(t),GKo=r(gLe," \u2014 "),Oq=n(gLe,"A",{href:!0});var sft=s(Oq);OKo=r(sft,"TFCTRLModel"),sft.forEach(t),XKo=r(gLe," (CTRL model)"),gLe.forEach(t),VKo=i(x),B6=n(x,"LI",{});var hLe=s(B6);wge=n(hLe,"STRONG",{});var lft=s(wge);zKo=r(lft,"deberta"),lft.forEach(t),WKo=r(hLe," \u2014 "),Xq=n(hLe,"A",{href:!0});var ift=s(Xq);QKo=r(ift,"TFDebertaModel"),ift.forEach(t),HKo=r(hLe," (DeBERTa model)"),hLe.forEach(t),UKo=i(x),x6=n(x,"LI",{});var pLe=s(x6);Age=n(pLe,"STRONG",{});var dft=s(Age);JKo=r(dft,"deberta-v2"),dft.forEach(t),YKo=r(pLe," \u2014 "),Vq=n(pLe,"A",{href:!0});var cft=s(Vq);KKo=r(cft,"TFDebertaV2Model"),cft.forEach(t),ZKo=r(pLe," (DeBERTa-v2 model)"),pLe.forEach(t),eZo=i(x),k6=n(x,"LI",{});var _Le=s(k6);Lge=n(_Le,"STRONG",{});var fft=s(Lge);oZo=r(fft,"distilbert"),fft.forEach(t),rZo=r(_Le," \u2014 "),zq=n(_Le,"A",{href:!0});var mft=s(zq);tZo=r(mft,"TFDistilBertModel"),mft.forEach(t),aZo=r(_Le," (DistilBERT model)"),_Le.forEach(t),nZo=i(x),R6=n(x,"LI",{});var uLe=s(R6);Bge=n(uLe,"STRONG",{});var gft=s(Bge);sZo=r(gft,"dpr"),gft.forEach(t),lZo=r(uLe," \u2014 "),Wq=n(uLe,"A",{href:!0});var hft=s(Wq);iZo=r(hft,"TFDPRQuestionEncoder"),hft.forEach(t),dZo=r(uLe," (DPR model)"),uLe.forEach(t),cZo=i(x),S6=n(x,"LI",{});var bLe=s(S6);xge=n(bLe,"STRONG",{});var pft=s(xge);fZo=r(pft,"electra"),pft.forEach(t),mZo=r(bLe," \u2014 "),Qq=n(bLe,"A",{href:!0});var _ft=s(Qq);gZo=r(_ft,"TFElectraModel"),_ft.forEach(t),hZo=r(bLe," (ELECTRA model)"),bLe.forEach(t),pZo=i(x),P6=n(x,"LI",{});var vLe=s(P6);kge=n(vLe,"STRONG",{});var uft=s(kge);_Zo=r(uft,"flaubert"),uft.forEach(t),uZo=r(vLe," \u2014 "),Hq=n(vLe,"A",{href:!0});var bft=s(Hq);bZo=r(bft,"TFFlaubertModel"),bft.forEach(t),vZo=r(vLe," (FlauBERT model)"),vLe.forEach(t),TZo=i(x),Gs=n(x,"LI",{});var a8=s(Gs);Rge=n(a8,"STRONG",{});var vft=s(Rge);FZo=r(vft,"funnel"),vft.forEach(t),CZo=r(a8," \u2014 "),Uq=n(a8,"A",{href:!0});var Tft=s(Uq);MZo=r(Tft,"TFFunnelModel"),Tft.forEach(t),EZo=r(a8," or "),Jq=n(a8,"A",{href:!0});var Fft=s(Jq);yZo=r(Fft,"TFFunnelBaseModel"),Fft.forEach(t),wZo=r(a8," (Funnel Transformer model)"),a8.forEach(t),AZo=i(x),$6=n(x,"LI",{});var TLe=s($6);Sge=n(TLe,"STRONG",{});var Cft=s(Sge);LZo=r(Cft,"gpt2"),Cft.forEach(t),BZo=r(TLe," \u2014 "),Yq=n(TLe,"A",{href:!0});var Mft=s(Yq);xZo=r(Mft,"TFGPT2Model"),Mft.forEach(t),kZo=r(TLe," (OpenAI GPT-2 model)"),TLe.forEach(t),RZo=i(x),I6=n(x,"LI",{});var FLe=s(I6);Pge=n(FLe,"STRONG",{});var Eft=s(Pge);SZo=r(Eft,"gptj"),Eft.forEach(t),PZo=r(FLe," \u2014 "),Kq=n(FLe,"A",{href:!0});var yft=s(Kq);$Zo=r(yft,"TFGPTJModel"),yft.forEach(t),IZo=r(FLe," (GPT-J model)"),FLe.forEach(t),DZo=i(x),D6=n(x,"LI",{});var CLe=s(D6);$ge=n(CLe,"STRONG",{});var wft=s($ge);NZo=r(wft,"hubert"),wft.forEach(t),jZo=r(CLe," \u2014 "),Zq=n(CLe,"A",{href:!0});var Aft=s(Zq);qZo=r(Aft,"TFHubertModel"),Aft.forEach(t),GZo=r(CLe," (Hubert model)"),CLe.forEach(t),OZo=i(x),N6=n(x,"LI",{});var MLe=s(N6);Ige=n(MLe,"STRONG",{});var Lft=s(Ige);XZo=r(Lft,"layoutlm"),Lft.forEach(t),VZo=r(MLe," \u2014 "),eG=n(MLe,"A",{href:!0});var Bft=s(eG);zZo=r(Bft,"TFLayoutLMModel"),Bft.forEach(t),WZo=r(MLe," (LayoutLM model)"),MLe.forEach(t),QZo=i(x),j6=n(x,"LI",{});var ELe=s(j6);Dge=n(ELe,"STRONG",{});var xft=s(Dge);HZo=r(xft,"led"),xft.forEach(t),UZo=r(ELe," \u2014 "),oG=n(ELe,"A",{href:!0});var kft=s(oG);JZo=r(kft,"TFLEDModel"),kft.forEach(t),YZo=r(ELe," (LED model)"),ELe.forEach(t),KZo=i(x),q6=n(x,"LI",{});var yLe=s(q6);Nge=n(yLe,"STRONG",{});var Rft=s(Nge);ZZo=r(Rft,"longformer"),Rft.forEach(t),eer=r(yLe," \u2014 "),rG=n(yLe,"A",{href:!0});var Sft=s(rG);oer=r(Sft,"TFLongformerModel"),Sft.forEach(t),rer=r(yLe," (Longformer model)"),yLe.forEach(t),ter=i(x),G6=n(x,"LI",{});var wLe=s(G6);jge=n(wLe,"STRONG",{});var Pft=s(jge);aer=r(Pft,"lxmert"),Pft.forEach(t),ner=r(wLe," \u2014 "),tG=n(wLe,"A",{href:!0});var $ft=s(tG);ser=r($ft,"TFLxmertModel"),$ft.forEach(t),ler=r(wLe," (LXMERT model)"),wLe.forEach(t),ier=i(x),O6=n(x,"LI",{});var ALe=s(O6);qge=n(ALe,"STRONG",{});var Ift=s(qge);der=r(Ift,"marian"),Ift.forEach(t),cer=r(ALe," \u2014 "),aG=n(ALe,"A",{href:!0});var Dft=s(aG);fer=r(Dft,"TFMarianModel"),Dft.forEach(t),mer=r(ALe," (Marian model)"),ALe.forEach(t),ger=i(x),X6=n(x,"LI",{});var LLe=s(X6);Gge=n(LLe,"STRONG",{});var Nft=s(Gge);her=r(Nft,"mbart"),Nft.forEach(t),per=r(LLe," \u2014 "),nG=n(LLe,"A",{href:!0});var jft=s(nG);_er=r(jft,"TFMBartModel"),jft.forEach(t),uer=r(LLe," (mBART model)"),LLe.forEach(t),ber=i(x),V6=n(x,"LI",{});var BLe=s(V6);Oge=n(BLe,"STRONG",{});var qft=s(Oge);ver=r(qft,"mobilebert"),qft.forEach(t),Ter=r(BLe," \u2014 "),sG=n(BLe,"A",{href:!0});var Gft=s(sG);Fer=r(Gft,"TFMobileBertModel"),Gft.forEach(t),Cer=r(BLe," (MobileBERT model)"),BLe.forEach(t),Mer=i(x),z6=n(x,"LI",{});var xLe=s(z6);Xge=n(xLe,"STRONG",{});var Oft=s(Xge);Eer=r(Oft,"mpnet"),Oft.forEach(t),yer=r(xLe," \u2014 "),lG=n(xLe,"A",{href:!0});var Xft=s(lG);wer=r(Xft,"TFMPNetModel"),Xft.forEach(t),Aer=r(xLe," (MPNet model)"),xLe.forEach(t),Ler=i(x),W6=n(x,"LI",{});var kLe=s(W6);Vge=n(kLe,"STRONG",{});var Vft=s(Vge);Ber=r(Vft,"mt5"),Vft.forEach(t),xer=r(kLe," \u2014 "),iG=n(kLe,"A",{href:!0});var zft=s(iG);ker=r(zft,"TFMT5Model"),zft.forEach(t),Rer=r(kLe," (mT5 model)"),kLe.forEach(t),Ser=i(x),Q6=n(x,"LI",{});var RLe=s(Q6);zge=n(RLe,"STRONG",{});var Wft=s(zge);Per=r(Wft,"openai-gpt"),Wft.forEach(t),$er=r(RLe," \u2014 "),dG=n(RLe,"A",{href:!0});var Qft=s(dG);Ier=r(Qft,"TFOpenAIGPTModel"),Qft.forEach(t),Der=r(RLe," (OpenAI GPT model)"),RLe.forEach(t),Ner=i(x),H6=n(x,"LI",{});var SLe=s(H6);Wge=n(SLe,"STRONG",{});var Hft=s(Wge);jer=r(Hft,"pegasus"),Hft.forEach(t),qer=r(SLe," \u2014 "),cG=n(SLe,"A",{href:!0});var Uft=s(cG);Ger=r(Uft,"TFPegasusModel"),Uft.forEach(t),Oer=r(SLe," (Pegasus model)"),SLe.forEach(t),Xer=i(x),U6=n(x,"LI",{});var PLe=s(U6);Qge=n(PLe,"STRONG",{});var Jft=s(Qge);Ver=r(Jft,"rembert"),Jft.forEach(t),zer=r(PLe," \u2014 "),fG=n(PLe,"A",{href:!0});var Yft=s(fG);Wer=r(Yft,"TFRemBertModel"),Yft.forEach(t),Qer=r(PLe," (RemBERT model)"),PLe.forEach(t),Her=i(x),J6=n(x,"LI",{});var $Le=s(J6);Hge=n($Le,"STRONG",{});var Kft=s(Hge);Uer=r(Kft,"roberta"),Kft.forEach(t),Jer=r($Le," \u2014 "),mG=n($Le,"A",{href:!0});var Zft=s(mG);Yer=r(Zft,"TFRobertaModel"),Zft.forEach(t),Ker=r($Le," (RoBERTa model)"),$Le.forEach(t),Zer=i(x),Y6=n(x,"LI",{});var ILe=s(Y6);Uge=n(ILe,"STRONG",{});var emt=s(Uge);eor=r(emt,"roformer"),emt.forEach(t),oor=r(ILe," \u2014 "),gG=n(ILe,"A",{href:!0});var omt=s(gG);ror=r(omt,"TFRoFormerModel"),omt.forEach(t),tor=r(ILe," (RoFormer model)"),ILe.forEach(t),aor=i(x),K6=n(x,"LI",{});var DLe=s(K6);Jge=n(DLe,"STRONG",{});var rmt=s(Jge);nor=r(rmt,"speech_to_text"),rmt.forEach(t),sor=r(DLe," \u2014 "),hG=n(DLe,"A",{href:!0});var tmt=s(hG);lor=r(tmt,"TFSpeech2TextModel"),tmt.forEach(t),ior=r(DLe," (Speech2Text model)"),DLe.forEach(t),dor=i(x),Z6=n(x,"LI",{});var NLe=s(Z6);Yge=n(NLe,"STRONG",{});var amt=s(Yge);cor=r(amt,"t5"),amt.forEach(t),mor=r(NLe," \u2014 "),pG=n(NLe,"A",{href:!0});var nmt=s(pG);gor=r(nmt,"TFT5Model"),nmt.forEach(t),hor=r(NLe," (T5 model)"),NLe.forEach(t),por=i(x),eT=n(x,"LI",{});var jLe=s(eT);Kge=n(jLe,"STRONG",{});var smt=s(Kge);_or=r(smt,"tapas"),smt.forEach(t),uor=r(jLe," \u2014 "),_G=n(jLe,"A",{href:!0});var lmt=s(_G);bor=r(lmt,"TFTapasModel"),lmt.forEach(t),vor=r(jLe," (TAPAS model)"),jLe.forEach(t),Tor=i(x),oT=n(x,"LI",{});var qLe=s(oT);Zge=n(qLe,"STRONG",{});var imt=s(Zge);For=r(imt,"transfo-xl"),imt.forEach(t),Cor=r(qLe," \u2014 "),uG=n(qLe,"A",{href:!0});var dmt=s(uG);Mor=r(dmt,"TFTransfoXLModel"),dmt.forEach(t),Eor=r(qLe," (Transformer-XL model)"),qLe.forEach(t),yor=i(x),rT=n(x,"LI",{});var GLe=s(rT);ehe=n(GLe,"STRONG",{});var cmt=s(ehe);wor=r(cmt,"vit"),cmt.forEach(t),Aor=r(GLe," \u2014 "),bG=n(GLe,"A",{href:!0});var fmt=s(bG);Lor=r(fmt,"TFViTModel"),fmt.forEach(t),Bor=r(GLe," (ViT model)"),GLe.forEach(t),xor=i(x),tT=n(x,"LI",{});var OLe=s(tT);ohe=n(OLe,"STRONG",{});var mmt=s(ohe);kor=r(mmt,"wav2vec2"),mmt.forEach(t),Ror=r(OLe," \u2014 "),vG=n(OLe,"A",{href:!0});var gmt=s(vG);Sor=r(gmt,"TFWav2Vec2Model"),gmt.forEach(t),Por=r(OLe," (Wav2Vec2 model)"),OLe.forEach(t),$or=i(x),aT=n(x,"LI",{});var XLe=s(aT);rhe=n(XLe,"STRONG",{});var hmt=s(rhe);Ior=r(hmt,"xlm"),hmt.forEach(t),Dor=r(XLe," \u2014 "),TG=n(XLe,"A",{href:!0});var pmt=s(TG);Nor=r(pmt,"TFXLMModel"),pmt.forEach(t),jor=r(XLe," (XLM model)"),XLe.forEach(t),qor=i(x),nT=n(x,"LI",{});var VLe=s(nT);the=n(VLe,"STRONG",{});var _mt=s(the);Gor=r(_mt,"xlm-roberta"),_mt.forEach(t),Oor=r(VLe," \u2014 "),FG=n(VLe,"A",{href:!0});var umt=s(FG);Xor=r(umt,"TFXLMRobertaModel"),umt.forEach(t),Vor=r(VLe," (XLM-RoBERTa model)"),VLe.forEach(t),zor=i(x),sT=n(x,"LI",{});var zLe=s(sT);ahe=n(zLe,"STRONG",{});var bmt=s(ahe);Wor=r(bmt,"xlnet"),bmt.forEach(t),Qor=r(zLe," \u2014 "),CG=n(zLe,"A",{href:!0});var vmt=s(CG);Hor=r(vmt,"TFXLNetModel"),vmt.forEach(t),Uor=r(zLe," (XLNet model)"),zLe.forEach(t),x.forEach(t),Jor=i(pa),nhe=n(pa,"P",{});var Tmt=s(nhe);Yor=r(Tmt,"Examples:"),Tmt.forEach(t),Kor=i(pa),m(Zw.$$.fragment,pa),pa.forEach(t),jl.forEach(t),IRe=i(c),_c=n(c,"H2",{class:!0});var WPe=s(_c);lT=n(WPe,"A",{id:!0,class:!0,href:!0});var Fmt=s(lT);she=n(Fmt,"SPAN",{});var Cmt=s(she);m(eA.$$.fragment,Cmt),Cmt.forEach(t),Fmt.forEach(t),Zor=i(WPe),lhe=n(WPe,"SPAN",{});var Mmt=s(lhe);err=r(Mmt,"TFAutoModelForPreTraining"),Mmt.forEach(t),WPe.forEach(t),DRe=i(c),Tr=n(c,"DIV",{class:!0});var Gl=s(Tr);m(oA.$$.fragment,Gl),orr=i(Gl),uc=n(Gl,"P",{});var nQ=s(uc);rrr=r(nQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ihe=n(nQ,"CODE",{});var Emt=s(ihe);trr=r(Emt,"from_pretrained()"),Emt.forEach(t),arr=r(nQ,"class method or the "),dhe=n(nQ,"CODE",{});var ymt=s(dhe);nrr=r(ymt,"from_config()"),ymt.forEach(t),srr=r(nQ,`class
method.`),nQ.forEach(t),lrr=i(Gl),rA=n(Gl,"P",{});var QPe=s(rA);irr=r(QPe,"This class cannot be instantiated directly using "),che=n(QPe,"CODE",{});var wmt=s(che);drr=r(wmt,"__init__()"),wmt.forEach(t),crr=r(QPe," (throws an error)."),QPe.forEach(t),frr=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(tA.$$.fragment,Ol),mrr=i(Ol),fhe=n(Ol,"P",{});var Amt=s(fhe);grr=r(Amt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Amt.forEach(t),hrr=i(Ol),bc=n(Ol,"P",{});var sQ=s(bc);prr=r(sQ,`Note:
Loading a model from its configuration file does `),mhe=n(sQ,"STRONG",{});var Lmt=s(mhe);_rr=r(Lmt,"not"),Lmt.forEach(t),urr=r(sQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ghe=n(sQ,"CODE",{});var Bmt=s(ghe);brr=r(Bmt,"from_pretrained()"),Bmt.forEach(t),vrr=r(sQ,"to load the model weights."),sQ.forEach(t),Trr=i(Ol),hhe=n(Ol,"P",{});var xmt=s(hhe);Frr=r(xmt,"Examples:"),xmt.forEach(t),Crr=i(Ol),m(aA.$$.fragment,Ol),Ol.forEach(t),Mrr=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(nA.$$.fragment,_a),Err=i(_a),phe=n(_a,"P",{});var kmt=s(phe);yrr=r(kmt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kmt.forEach(t),wrr=i(_a),un=n(_a,"P",{});var X4=s(un);Arr=r(X4,"The model class to instantiate is selected based on the "),_he=n(X4,"CODE",{});var Rmt=s(_he);Lrr=r(Rmt,"model_type"),Rmt.forEach(t),Brr=r(X4,` property of the config object (either
passed as an argument or loaded from `),uhe=n(X4,"CODE",{});var Smt=s(uhe);xrr=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),krr=r(X4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=n(X4,"CODE",{});var Pmt=s(bhe);Rrr=r(Pmt,"pretrained_model_name_or_path"),Pmt.forEach(t),Srr=r(X4,":"),X4.forEach(t),Prr=i(_a),H=n(_a,"UL",{});var U=s(H);iT=n(U,"LI",{});var WLe=s(iT);vhe=n(WLe,"STRONG",{});var $mt=s(vhe);$rr=r($mt,"albert"),$mt.forEach(t),Irr=r(WLe," \u2014 "),MG=n(WLe,"A",{href:!0});var Imt=s(MG);Drr=r(Imt,"TFAlbertForPreTraining"),Imt.forEach(t),Nrr=r(WLe," (ALBERT model)"),WLe.forEach(t),jrr=i(U),dT=n(U,"LI",{});var QLe=s(dT);The=n(QLe,"STRONG",{});var Dmt=s(The);qrr=r(Dmt,"bart"),Dmt.forEach(t),Grr=r(QLe," \u2014 "),EG=n(QLe,"A",{href:!0});var Nmt=s(EG);Orr=r(Nmt,"TFBartForConditionalGeneration"),Nmt.forEach(t),Xrr=r(QLe," (BART model)"),QLe.forEach(t),Vrr=i(U),cT=n(U,"LI",{});var HLe=s(cT);Fhe=n(HLe,"STRONG",{});var jmt=s(Fhe);zrr=r(jmt,"bert"),jmt.forEach(t),Wrr=r(HLe," \u2014 "),yG=n(HLe,"A",{href:!0});var qmt=s(yG);Qrr=r(qmt,"TFBertForPreTraining"),qmt.forEach(t),Hrr=r(HLe," (BERT model)"),HLe.forEach(t),Urr=i(U),fT=n(U,"LI",{});var ULe=s(fT);Che=n(ULe,"STRONG",{});var Gmt=s(Che);Jrr=r(Gmt,"camembert"),Gmt.forEach(t),Yrr=r(ULe," \u2014 "),wG=n(ULe,"A",{href:!0});var Omt=s(wG);Krr=r(Omt,"TFCamembertForMaskedLM"),Omt.forEach(t),Zrr=r(ULe," (CamemBERT model)"),ULe.forEach(t),etr=i(U),mT=n(U,"LI",{});var JLe=s(mT);Mhe=n(JLe,"STRONG",{});var Xmt=s(Mhe);otr=r(Xmt,"ctrl"),Xmt.forEach(t),rtr=r(JLe," \u2014 "),AG=n(JLe,"A",{href:!0});var Vmt=s(AG);ttr=r(Vmt,"TFCTRLLMHeadModel"),Vmt.forEach(t),atr=r(JLe," (CTRL model)"),JLe.forEach(t),ntr=i(U),gT=n(U,"LI",{});var YLe=s(gT);Ehe=n(YLe,"STRONG",{});var zmt=s(Ehe);str=r(zmt,"distilbert"),zmt.forEach(t),ltr=r(YLe," \u2014 "),LG=n(YLe,"A",{href:!0});var Wmt=s(LG);itr=r(Wmt,"TFDistilBertForMaskedLM"),Wmt.forEach(t),dtr=r(YLe," (DistilBERT model)"),YLe.forEach(t),ctr=i(U),hT=n(U,"LI",{});var KLe=s(hT);yhe=n(KLe,"STRONG",{});var Qmt=s(yhe);ftr=r(Qmt,"electra"),Qmt.forEach(t),mtr=r(KLe," \u2014 "),BG=n(KLe,"A",{href:!0});var Hmt=s(BG);gtr=r(Hmt,"TFElectraForPreTraining"),Hmt.forEach(t),htr=r(KLe," (ELECTRA model)"),KLe.forEach(t),ptr=i(U),pT=n(U,"LI",{});var ZLe=s(pT);whe=n(ZLe,"STRONG",{});var Umt=s(whe);_tr=r(Umt,"flaubert"),Umt.forEach(t),utr=r(ZLe," \u2014 "),xG=n(ZLe,"A",{href:!0});var Jmt=s(xG);btr=r(Jmt,"TFFlaubertWithLMHeadModel"),Jmt.forEach(t),vtr=r(ZLe," (FlauBERT model)"),ZLe.forEach(t),Ttr=i(U),_T=n(U,"LI",{});var e7e=s(_T);Ahe=n(e7e,"STRONG",{});var Ymt=s(Ahe);Ftr=r(Ymt,"funnel"),Ymt.forEach(t),Ctr=r(e7e," \u2014 "),kG=n(e7e,"A",{href:!0});var Kmt=s(kG);Mtr=r(Kmt,"TFFunnelForPreTraining"),Kmt.forEach(t),Etr=r(e7e," (Funnel Transformer model)"),e7e.forEach(t),ytr=i(U),uT=n(U,"LI",{});var o7e=s(uT);Lhe=n(o7e,"STRONG",{});var Zmt=s(Lhe);wtr=r(Zmt,"gpt2"),Zmt.forEach(t),Atr=r(o7e," \u2014 "),RG=n(o7e,"A",{href:!0});var egt=s(RG);Ltr=r(egt,"TFGPT2LMHeadModel"),egt.forEach(t),Btr=r(o7e," (OpenAI GPT-2 model)"),o7e.forEach(t),xtr=i(U),bT=n(U,"LI",{});var r7e=s(bT);Bhe=n(r7e,"STRONG",{});var ogt=s(Bhe);ktr=r(ogt,"layoutlm"),ogt.forEach(t),Rtr=r(r7e," \u2014 "),SG=n(r7e,"A",{href:!0});var rgt=s(SG);Str=r(rgt,"TFLayoutLMForMaskedLM"),rgt.forEach(t),Ptr=r(r7e," (LayoutLM model)"),r7e.forEach(t),$tr=i(U),vT=n(U,"LI",{});var t7e=s(vT);xhe=n(t7e,"STRONG",{});var tgt=s(xhe);Itr=r(tgt,"lxmert"),tgt.forEach(t),Dtr=r(t7e," \u2014 "),PG=n(t7e,"A",{href:!0});var agt=s(PG);Ntr=r(agt,"TFLxmertForPreTraining"),agt.forEach(t),jtr=r(t7e," (LXMERT model)"),t7e.forEach(t),qtr=i(U),TT=n(U,"LI",{});var a7e=s(TT);khe=n(a7e,"STRONG",{});var ngt=s(khe);Gtr=r(ngt,"mobilebert"),ngt.forEach(t),Otr=r(a7e," \u2014 "),$G=n(a7e,"A",{href:!0});var sgt=s($G);Xtr=r(sgt,"TFMobileBertForPreTraining"),sgt.forEach(t),Vtr=r(a7e," (MobileBERT model)"),a7e.forEach(t),ztr=i(U),FT=n(U,"LI",{});var n7e=s(FT);Rhe=n(n7e,"STRONG",{});var lgt=s(Rhe);Wtr=r(lgt,"mpnet"),lgt.forEach(t),Qtr=r(n7e," \u2014 "),IG=n(n7e,"A",{href:!0});var igt=s(IG);Htr=r(igt,"TFMPNetForMaskedLM"),igt.forEach(t),Utr=r(n7e," (MPNet model)"),n7e.forEach(t),Jtr=i(U),CT=n(U,"LI",{});var s7e=s(CT);She=n(s7e,"STRONG",{});var dgt=s(She);Ytr=r(dgt,"openai-gpt"),dgt.forEach(t),Ktr=r(s7e," \u2014 "),DG=n(s7e,"A",{href:!0});var cgt=s(DG);Ztr=r(cgt,"TFOpenAIGPTLMHeadModel"),cgt.forEach(t),ear=r(s7e," (OpenAI GPT model)"),s7e.forEach(t),oar=i(U),MT=n(U,"LI",{});var l7e=s(MT);Phe=n(l7e,"STRONG",{});var fgt=s(Phe);rar=r(fgt,"roberta"),fgt.forEach(t),tar=r(l7e," \u2014 "),NG=n(l7e,"A",{href:!0});var mgt=s(NG);aar=r(mgt,"TFRobertaForMaskedLM"),mgt.forEach(t),nar=r(l7e," (RoBERTa model)"),l7e.forEach(t),sar=i(U),ET=n(U,"LI",{});var i7e=s(ET);$he=n(i7e,"STRONG",{});var ggt=s($he);lar=r(ggt,"t5"),ggt.forEach(t),iar=r(i7e," \u2014 "),jG=n(i7e,"A",{href:!0});var hgt=s(jG);dar=r(hgt,"TFT5ForConditionalGeneration"),hgt.forEach(t),car=r(i7e," (T5 model)"),i7e.forEach(t),far=i(U),yT=n(U,"LI",{});var d7e=s(yT);Ihe=n(d7e,"STRONG",{});var pgt=s(Ihe);mar=r(pgt,"tapas"),pgt.forEach(t),gar=r(d7e," \u2014 "),qG=n(d7e,"A",{href:!0});var _gt=s(qG);har=r(_gt,"TFTapasForMaskedLM"),_gt.forEach(t),par=r(d7e," (TAPAS model)"),d7e.forEach(t),_ar=i(U),wT=n(U,"LI",{});var c7e=s(wT);Dhe=n(c7e,"STRONG",{});var ugt=s(Dhe);uar=r(ugt,"transfo-xl"),ugt.forEach(t),bar=r(c7e," \u2014 "),GG=n(c7e,"A",{href:!0});var bgt=s(GG);Tar=r(bgt,"TFTransfoXLLMHeadModel"),bgt.forEach(t),Far=r(c7e," (Transformer-XL model)"),c7e.forEach(t),Car=i(U),AT=n(U,"LI",{});var f7e=s(AT);Nhe=n(f7e,"STRONG",{});var vgt=s(Nhe);Mar=r(vgt,"xlm"),vgt.forEach(t),Ear=r(f7e," \u2014 "),OG=n(f7e,"A",{href:!0});var Tgt=s(OG);yar=r(Tgt,"TFXLMWithLMHeadModel"),Tgt.forEach(t),war=r(f7e," (XLM model)"),f7e.forEach(t),Aar=i(U),LT=n(U,"LI",{});var m7e=s(LT);jhe=n(m7e,"STRONG",{});var Fgt=s(jhe);Lar=r(Fgt,"xlm-roberta"),Fgt.forEach(t),Bar=r(m7e," \u2014 "),XG=n(m7e,"A",{href:!0});var Cgt=s(XG);xar=r(Cgt,"TFXLMRobertaForMaskedLM"),Cgt.forEach(t),kar=r(m7e," (XLM-RoBERTa model)"),m7e.forEach(t),Rar=i(U),BT=n(U,"LI",{});var g7e=s(BT);qhe=n(g7e,"STRONG",{});var Mgt=s(qhe);Sar=r(Mgt,"xlnet"),Mgt.forEach(t),Par=r(g7e," \u2014 "),VG=n(g7e,"A",{href:!0});var Egt=s(VG);$ar=r(Egt,"TFXLNetLMHeadModel"),Egt.forEach(t),Iar=r(g7e," (XLNet model)"),g7e.forEach(t),U.forEach(t),Dar=i(_a),Ghe=n(_a,"P",{});var ygt=s(Ghe);Nar=r(ygt,"Examples:"),ygt.forEach(t),jar=i(_a),m(sA.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),NRe=i(c),vc=n(c,"H2",{class:!0});var HPe=s(vc);xT=n(HPe,"A",{id:!0,class:!0,href:!0});var wgt=s(xT);Ohe=n(wgt,"SPAN",{});var Agt=s(Ohe);m(lA.$$.fragment,Agt),Agt.forEach(t),wgt.forEach(t),qar=i(HPe),Xhe=n(HPe,"SPAN",{});var Lgt=s(Xhe);Gar=r(Lgt,"TFAutoModelForCausalLM"),Lgt.forEach(t),HPe.forEach(t),jRe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(iA.$$.fragment,Xl),Oar=i(Xl),Tc=n(Xl,"P",{});var lQ=s(Tc);Xar=r(lQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Vhe=n(lQ,"CODE",{});var Bgt=s(Vhe);Var=r(Bgt,"from_pretrained()"),Bgt.forEach(t),zar=r(lQ,"class method or the "),zhe=n(lQ,"CODE",{});var xgt=s(zhe);War=r(xgt,"from_config()"),xgt.forEach(t),Qar=r(lQ,`class
method.`),lQ.forEach(t),Har=i(Xl),dA=n(Xl,"P",{});var UPe=s(dA);Uar=r(UPe,"This class cannot be instantiated directly using "),Whe=n(UPe,"CODE",{});var kgt=s(Whe);Jar=r(kgt,"__init__()"),kgt.forEach(t),Yar=r(UPe," (throws an error)."),UPe.forEach(t),Kar=i(Xl),pt=n(Xl,"DIV",{class:!0});var Vl=s(pt);m(cA.$$.fragment,Vl),Zar=i(Vl),Qhe=n(Vl,"P",{});var Rgt=s(Qhe);enr=r(Rgt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Rgt.forEach(t),onr=i(Vl),Fc=n(Vl,"P",{});var iQ=s(Fc);rnr=r(iQ,`Note:
Loading a model from its configuration file does `),Hhe=n(iQ,"STRONG",{});var Sgt=s(Hhe);tnr=r(Sgt,"not"),Sgt.forEach(t),anr=r(iQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uhe=n(iQ,"CODE",{});var Pgt=s(Uhe);nnr=r(Pgt,"from_pretrained()"),Pgt.forEach(t),snr=r(iQ,"to load the model weights."),iQ.forEach(t),lnr=i(Vl),Jhe=n(Vl,"P",{});var $gt=s(Jhe);inr=r($gt,"Examples:"),$gt.forEach(t),dnr=i(Vl),m(fA.$$.fragment,Vl),Vl.forEach(t),cnr=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(mA.$$.fragment,ua),fnr=i(ua),Yhe=n(ua,"P",{});var Igt=s(Yhe);mnr=r(Igt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Igt.forEach(t),gnr=i(ua),bn=n(ua,"P",{});var V4=s(bn);hnr=r(V4,"The model class to instantiate is selected based on the "),Khe=n(V4,"CODE",{});var Dgt=s(Khe);pnr=r(Dgt,"model_type"),Dgt.forEach(t),_nr=r(V4,` property of the config object (either
passed as an argument or loaded from `),Zhe=n(V4,"CODE",{});var Ngt=s(Zhe);unr=r(Ngt,"pretrained_model_name_or_path"),Ngt.forEach(t),bnr=r(V4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),epe=n(V4,"CODE",{});var jgt=s(epe);vnr=r(jgt,"pretrained_model_name_or_path"),jgt.forEach(t),Tnr=r(V4,":"),V4.forEach(t),Fnr=i(ua),ce=n(ua,"UL",{});var he=s(ce);kT=n(he,"LI",{});var h7e=s(kT);ope=n(h7e,"STRONG",{});var qgt=s(ope);Cnr=r(qgt,"bert"),qgt.forEach(t),Mnr=r(h7e," \u2014 "),zG=n(h7e,"A",{href:!0});var Ggt=s(zG);Enr=r(Ggt,"TFBertLMHeadModel"),Ggt.forEach(t),ynr=r(h7e," (BERT model)"),h7e.forEach(t),wnr=i(he),RT=n(he,"LI",{});var p7e=s(RT);rpe=n(p7e,"STRONG",{});var Ogt=s(rpe);Anr=r(Ogt,"camembert"),Ogt.forEach(t),Lnr=r(p7e," \u2014 "),WG=n(p7e,"A",{href:!0});var Xgt=s(WG);Bnr=r(Xgt,"TFCamembertForCausalLM"),Xgt.forEach(t),xnr=r(p7e," (CamemBERT model)"),p7e.forEach(t),knr=i(he),ST=n(he,"LI",{});var _7e=s(ST);tpe=n(_7e,"STRONG",{});var Vgt=s(tpe);Rnr=r(Vgt,"ctrl"),Vgt.forEach(t),Snr=r(_7e," \u2014 "),QG=n(_7e,"A",{href:!0});var zgt=s(QG);Pnr=r(zgt,"TFCTRLLMHeadModel"),zgt.forEach(t),$nr=r(_7e," (CTRL model)"),_7e.forEach(t),Inr=i(he),PT=n(he,"LI",{});var u7e=s(PT);ape=n(u7e,"STRONG",{});var Wgt=s(ape);Dnr=r(Wgt,"gpt2"),Wgt.forEach(t),Nnr=r(u7e," \u2014 "),HG=n(u7e,"A",{href:!0});var Qgt=s(HG);jnr=r(Qgt,"TFGPT2LMHeadModel"),Qgt.forEach(t),qnr=r(u7e," (OpenAI GPT-2 model)"),u7e.forEach(t),Gnr=i(he),$T=n(he,"LI",{});var b7e=s($T);npe=n(b7e,"STRONG",{});var Hgt=s(npe);Onr=r(Hgt,"gptj"),Hgt.forEach(t),Xnr=r(b7e," \u2014 "),UG=n(b7e,"A",{href:!0});var Ugt=s(UG);Vnr=r(Ugt,"TFGPTJForCausalLM"),Ugt.forEach(t),znr=r(b7e," (GPT-J model)"),b7e.forEach(t),Wnr=i(he),IT=n(he,"LI",{});var v7e=s(IT);spe=n(v7e,"STRONG",{});var Jgt=s(spe);Qnr=r(Jgt,"openai-gpt"),Jgt.forEach(t),Hnr=r(v7e," \u2014 "),JG=n(v7e,"A",{href:!0});var Ygt=s(JG);Unr=r(Ygt,"TFOpenAIGPTLMHeadModel"),Ygt.forEach(t),Jnr=r(v7e," (OpenAI GPT model)"),v7e.forEach(t),Ynr=i(he),DT=n(he,"LI",{});var T7e=s(DT);lpe=n(T7e,"STRONG",{});var Kgt=s(lpe);Knr=r(Kgt,"rembert"),Kgt.forEach(t),Znr=r(T7e," \u2014 "),YG=n(T7e,"A",{href:!0});var Zgt=s(YG);esr=r(Zgt,"TFRemBertForCausalLM"),Zgt.forEach(t),osr=r(T7e," (RemBERT model)"),T7e.forEach(t),rsr=i(he),NT=n(he,"LI",{});var F7e=s(NT);ipe=n(F7e,"STRONG",{});var eht=s(ipe);tsr=r(eht,"roberta"),eht.forEach(t),asr=r(F7e," \u2014 "),KG=n(F7e,"A",{href:!0});var oht=s(KG);nsr=r(oht,"TFRobertaForCausalLM"),oht.forEach(t),ssr=r(F7e," (RoBERTa model)"),F7e.forEach(t),lsr=i(he),jT=n(he,"LI",{});var C7e=s(jT);dpe=n(C7e,"STRONG",{});var rht=s(dpe);isr=r(rht,"roformer"),rht.forEach(t),dsr=r(C7e," \u2014 "),ZG=n(C7e,"A",{href:!0});var tht=s(ZG);csr=r(tht,"TFRoFormerForCausalLM"),tht.forEach(t),fsr=r(C7e," (RoFormer model)"),C7e.forEach(t),msr=i(he),qT=n(he,"LI",{});var M7e=s(qT);cpe=n(M7e,"STRONG",{});var aht=s(cpe);gsr=r(aht,"transfo-xl"),aht.forEach(t),hsr=r(M7e," \u2014 "),eO=n(M7e,"A",{href:!0});var nht=s(eO);psr=r(nht,"TFTransfoXLLMHeadModel"),nht.forEach(t),_sr=r(M7e," (Transformer-XL model)"),M7e.forEach(t),usr=i(he),GT=n(he,"LI",{});var E7e=s(GT);fpe=n(E7e,"STRONG",{});var sht=s(fpe);bsr=r(sht,"xlm"),sht.forEach(t),vsr=r(E7e," \u2014 "),oO=n(E7e,"A",{href:!0});var lht=s(oO);Tsr=r(lht,"TFXLMWithLMHeadModel"),lht.forEach(t),Fsr=r(E7e," (XLM model)"),E7e.forEach(t),Csr=i(he),OT=n(he,"LI",{});var y7e=s(OT);mpe=n(y7e,"STRONG",{});var iht=s(mpe);Msr=r(iht,"xlnet"),iht.forEach(t),Esr=r(y7e," \u2014 "),rO=n(y7e,"A",{href:!0});var dht=s(rO);ysr=r(dht,"TFXLNetLMHeadModel"),dht.forEach(t),wsr=r(y7e," (XLNet model)"),y7e.forEach(t),he.forEach(t),Asr=i(ua),gpe=n(ua,"P",{});var cht=s(gpe);Lsr=r(cht,"Examples:"),cht.forEach(t),Bsr=i(ua),m(gA.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),qRe=i(c),Cc=n(c,"H2",{class:!0});var JPe=s(Cc);XT=n(JPe,"A",{id:!0,class:!0,href:!0});var fht=s(XT);hpe=n(fht,"SPAN",{});var mht=s(hpe);m(hA.$$.fragment,mht),mht.forEach(t),fht.forEach(t),xsr=i(JPe),ppe=n(JPe,"SPAN",{});var ght=s(ppe);ksr=r(ght,"TFAutoModelForImageClassification"),ght.forEach(t),JPe.forEach(t),GRe=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);m(pA.$$.fragment,zl),Rsr=i(zl),Mc=n(zl,"P",{});var dQ=s(Mc);Ssr=r(dQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_pe=n(dQ,"CODE",{});var hht=s(_pe);Psr=r(hht,"from_pretrained()"),hht.forEach(t),$sr=r(dQ,"class method or the "),upe=n(dQ,"CODE",{});var pht=s(upe);Isr=r(pht,"from_config()"),pht.forEach(t),Dsr=r(dQ,`class
method.`),dQ.forEach(t),Nsr=i(zl),_A=n(zl,"P",{});var YPe=s(_A);jsr=r(YPe,"This class cannot be instantiated directly using "),bpe=n(YPe,"CODE",{});var _ht=s(bpe);qsr=r(_ht,"__init__()"),_ht.forEach(t),Gsr=r(YPe," (throws an error)."),YPe.forEach(t),Osr=i(zl),_t=n(zl,"DIV",{class:!0});var Wl=s(_t);m(uA.$$.fragment,Wl),Xsr=i(Wl),vpe=n(Wl,"P",{});var uht=s(vpe);Vsr=r(uht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uht.forEach(t),zsr=i(Wl),Ec=n(Wl,"P",{});var cQ=s(Ec);Wsr=r(cQ,`Note:
Loading a model from its configuration file does `),Tpe=n(cQ,"STRONG",{});var bht=s(Tpe);Qsr=r(bht,"not"),bht.forEach(t),Hsr=r(cQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fpe=n(cQ,"CODE",{});var vht=s(Fpe);Usr=r(vht,"from_pretrained()"),vht.forEach(t),Jsr=r(cQ,"to load the model weights."),cQ.forEach(t),Ysr=i(Wl),Cpe=n(Wl,"P",{});var Tht=s(Cpe);Ksr=r(Tht,"Examples:"),Tht.forEach(t),Zsr=i(Wl),m(bA.$$.fragment,Wl),Wl.forEach(t),elr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(vA.$$.fragment,ba),olr=i(ba),Mpe=n(ba,"P",{});var Fht=s(Mpe);rlr=r(Fht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Fht.forEach(t),tlr=i(ba),vn=n(ba,"P",{});var z4=s(vn);alr=r(z4,"The model class to instantiate is selected based on the "),Epe=n(z4,"CODE",{});var Cht=s(Epe);nlr=r(Cht,"model_type"),Cht.forEach(t),slr=r(z4,` property of the config object (either
passed as an argument or loaded from `),ype=n(z4,"CODE",{});var Mht=s(ype);llr=r(Mht,"pretrained_model_name_or_path"),Mht.forEach(t),ilr=r(z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=n(z4,"CODE",{});var Eht=s(wpe);dlr=r(Eht,"pretrained_model_name_or_path"),Eht.forEach(t),clr=r(z4,":"),z4.forEach(t),flr=i(ba),TA=n(ba,"UL",{});var KPe=s(TA);VT=n(KPe,"LI",{});var w7e=s(VT);Ape=n(w7e,"STRONG",{});var yht=s(Ape);mlr=r(yht,"convnext"),yht.forEach(t),glr=r(w7e," \u2014 "),tO=n(w7e,"A",{href:!0});var wht=s(tO);hlr=r(wht,"TFConvNextForImageClassification"),wht.forEach(t),plr=r(w7e," (ConvNext model)"),w7e.forEach(t),_lr=i(KPe),zT=n(KPe,"LI",{});var A7e=s(zT);Lpe=n(A7e,"STRONG",{});var Aht=s(Lpe);ulr=r(Aht,"vit"),Aht.forEach(t),blr=r(A7e," \u2014 "),aO=n(A7e,"A",{href:!0});var Lht=s(aO);vlr=r(Lht,"TFViTForImageClassification"),Lht.forEach(t),Tlr=r(A7e," (ViT model)"),A7e.forEach(t),KPe.forEach(t),Flr=i(ba),Bpe=n(ba,"P",{});var Bht=s(Bpe);Clr=r(Bht,"Examples:"),Bht.forEach(t),Mlr=i(ba),m(FA.$$.fragment,ba),ba.forEach(t),zl.forEach(t),ORe=i(c),yc=n(c,"H2",{class:!0});var ZPe=s(yc);WT=n(ZPe,"A",{id:!0,class:!0,href:!0});var xht=s(WT);xpe=n(xht,"SPAN",{});var kht=s(xpe);m(CA.$$.fragment,kht),kht.forEach(t),xht.forEach(t),Elr=i(ZPe),kpe=n(ZPe,"SPAN",{});var Rht=s(kpe);ylr=r(Rht,"TFAutoModelForMaskedLM"),Rht.forEach(t),ZPe.forEach(t),XRe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(MA.$$.fragment,Ql),wlr=i(Ql),wc=n(Ql,"P",{});var fQ=s(wc);Alr=r(fQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Rpe=n(fQ,"CODE",{});var Sht=s(Rpe);Llr=r(Sht,"from_pretrained()"),Sht.forEach(t),Blr=r(fQ,"class method or the "),Spe=n(fQ,"CODE",{});var Pht=s(Spe);xlr=r(Pht,"from_config()"),Pht.forEach(t),klr=r(fQ,`class
method.`),fQ.forEach(t),Rlr=i(Ql),EA=n(Ql,"P",{});var e$e=s(EA);Slr=r(e$e,"This class cannot be instantiated directly using "),Ppe=n(e$e,"CODE",{});var $ht=s(Ppe);Plr=r($ht,"__init__()"),$ht.forEach(t),$lr=r(e$e," (throws an error)."),e$e.forEach(t),Ilr=i(Ql),ut=n(Ql,"DIV",{class:!0});var Hl=s(ut);m(yA.$$.fragment,Hl),Dlr=i(Hl),$pe=n(Hl,"P",{});var Iht=s($pe);Nlr=r(Iht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Iht.forEach(t),jlr=i(Hl),Ac=n(Hl,"P",{});var mQ=s(Ac);qlr=r(mQ,`Note:
Loading a model from its configuration file does `),Ipe=n(mQ,"STRONG",{});var Dht=s(Ipe);Glr=r(Dht,"not"),Dht.forEach(t),Olr=r(mQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dpe=n(mQ,"CODE",{});var Nht=s(Dpe);Xlr=r(Nht,"from_pretrained()"),Nht.forEach(t),Vlr=r(mQ,"to load the model weights."),mQ.forEach(t),zlr=i(Hl),Npe=n(Hl,"P",{});var jht=s(Npe);Wlr=r(jht,"Examples:"),jht.forEach(t),Qlr=i(Hl),m(wA.$$.fragment,Hl),Hl.forEach(t),Hlr=i(Ql),bo=n(Ql,"DIV",{class:!0});var va=s(bo);m(AA.$$.fragment,va),Ulr=i(va),jpe=n(va,"P",{});var qht=s(jpe);Jlr=r(qht,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qht.forEach(t),Ylr=i(va),Tn=n(va,"P",{});var W4=s(Tn);Klr=r(W4,"The model class to instantiate is selected based on the "),qpe=n(W4,"CODE",{});var Ght=s(qpe);Zlr=r(Ght,"model_type"),Ght.forEach(t),eir=r(W4,` property of the config object (either
passed as an argument or loaded from `),Gpe=n(W4,"CODE",{});var Oht=s(Gpe);oir=r(Oht,"pretrained_model_name_or_path"),Oht.forEach(t),rir=r(W4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=n(W4,"CODE",{});var Xht=s(Ope);tir=r(Xht,"pretrained_model_name_or_path"),Xht.forEach(t),air=r(W4,":"),W4.forEach(t),nir=i(va),J=n(va,"UL",{});var ee=s(J);QT=n(ee,"LI",{});var L7e=s(QT);Xpe=n(L7e,"STRONG",{});var Vht=s(Xpe);sir=r(Vht,"albert"),Vht.forEach(t),lir=r(L7e," \u2014 "),nO=n(L7e,"A",{href:!0});var zht=s(nO);iir=r(zht,"TFAlbertForMaskedLM"),zht.forEach(t),dir=r(L7e," (ALBERT model)"),L7e.forEach(t),cir=i(ee),HT=n(ee,"LI",{});var B7e=s(HT);Vpe=n(B7e,"STRONG",{});var Wht=s(Vpe);fir=r(Wht,"bert"),Wht.forEach(t),mir=r(B7e," \u2014 "),sO=n(B7e,"A",{href:!0});var Qht=s(sO);gir=r(Qht,"TFBertForMaskedLM"),Qht.forEach(t),hir=r(B7e," (BERT model)"),B7e.forEach(t),pir=i(ee),UT=n(ee,"LI",{});var x7e=s(UT);zpe=n(x7e,"STRONG",{});var Hht=s(zpe);_ir=r(Hht,"camembert"),Hht.forEach(t),uir=r(x7e," \u2014 "),lO=n(x7e,"A",{href:!0});var Uht=s(lO);bir=r(Uht,"TFCamembertForMaskedLM"),Uht.forEach(t),vir=r(x7e," (CamemBERT model)"),x7e.forEach(t),Tir=i(ee),JT=n(ee,"LI",{});var k7e=s(JT);Wpe=n(k7e,"STRONG",{});var Jht=s(Wpe);Fir=r(Jht,"convbert"),Jht.forEach(t),Cir=r(k7e," \u2014 "),iO=n(k7e,"A",{href:!0});var Yht=s(iO);Mir=r(Yht,"TFConvBertForMaskedLM"),Yht.forEach(t),Eir=r(k7e," (ConvBERT model)"),k7e.forEach(t),yir=i(ee),YT=n(ee,"LI",{});var R7e=s(YT);Qpe=n(R7e,"STRONG",{});var Kht=s(Qpe);wir=r(Kht,"deberta"),Kht.forEach(t),Air=r(R7e," \u2014 "),dO=n(R7e,"A",{href:!0});var Zht=s(dO);Lir=r(Zht,"TFDebertaForMaskedLM"),Zht.forEach(t),Bir=r(R7e," (DeBERTa model)"),R7e.forEach(t),xir=i(ee),KT=n(ee,"LI",{});var S7e=s(KT);Hpe=n(S7e,"STRONG",{});var ept=s(Hpe);kir=r(ept,"deberta-v2"),ept.forEach(t),Rir=r(S7e," \u2014 "),cO=n(S7e,"A",{href:!0});var opt=s(cO);Sir=r(opt,"TFDebertaV2ForMaskedLM"),opt.forEach(t),Pir=r(S7e," (DeBERTa-v2 model)"),S7e.forEach(t),$ir=i(ee),ZT=n(ee,"LI",{});var P7e=s(ZT);Upe=n(P7e,"STRONG",{});var rpt=s(Upe);Iir=r(rpt,"distilbert"),rpt.forEach(t),Dir=r(P7e," \u2014 "),fO=n(P7e,"A",{href:!0});var tpt=s(fO);Nir=r(tpt,"TFDistilBertForMaskedLM"),tpt.forEach(t),jir=r(P7e," (DistilBERT model)"),P7e.forEach(t),qir=i(ee),eF=n(ee,"LI",{});var $7e=s(eF);Jpe=n($7e,"STRONG",{});var apt=s(Jpe);Gir=r(apt,"electra"),apt.forEach(t),Oir=r($7e," \u2014 "),mO=n($7e,"A",{href:!0});var npt=s(mO);Xir=r(npt,"TFElectraForMaskedLM"),npt.forEach(t),Vir=r($7e," (ELECTRA model)"),$7e.forEach(t),zir=i(ee),oF=n(ee,"LI",{});var I7e=s(oF);Ype=n(I7e,"STRONG",{});var spt=s(Ype);Wir=r(spt,"flaubert"),spt.forEach(t),Qir=r(I7e," \u2014 "),gO=n(I7e,"A",{href:!0});var lpt=s(gO);Hir=r(lpt,"TFFlaubertWithLMHeadModel"),lpt.forEach(t),Uir=r(I7e," (FlauBERT model)"),I7e.forEach(t),Jir=i(ee),rF=n(ee,"LI",{});var D7e=s(rF);Kpe=n(D7e,"STRONG",{});var ipt=s(Kpe);Yir=r(ipt,"funnel"),ipt.forEach(t),Kir=r(D7e," \u2014 "),hO=n(D7e,"A",{href:!0});var dpt=s(hO);Zir=r(dpt,"TFFunnelForMaskedLM"),dpt.forEach(t),edr=r(D7e," (Funnel Transformer model)"),D7e.forEach(t),odr=i(ee),tF=n(ee,"LI",{});var N7e=s(tF);Zpe=n(N7e,"STRONG",{});var cpt=s(Zpe);rdr=r(cpt,"layoutlm"),cpt.forEach(t),tdr=r(N7e," \u2014 "),pO=n(N7e,"A",{href:!0});var fpt=s(pO);adr=r(fpt,"TFLayoutLMForMaskedLM"),fpt.forEach(t),ndr=r(N7e," (LayoutLM model)"),N7e.forEach(t),sdr=i(ee),aF=n(ee,"LI",{});var j7e=s(aF);e_e=n(j7e,"STRONG",{});var mpt=s(e_e);ldr=r(mpt,"longformer"),mpt.forEach(t),idr=r(j7e," \u2014 "),_O=n(j7e,"A",{href:!0});var gpt=s(_O);ddr=r(gpt,"TFLongformerForMaskedLM"),gpt.forEach(t),cdr=r(j7e," (Longformer model)"),j7e.forEach(t),fdr=i(ee),nF=n(ee,"LI",{});var q7e=s(nF);o_e=n(q7e,"STRONG",{});var hpt=s(o_e);mdr=r(hpt,"mobilebert"),hpt.forEach(t),gdr=r(q7e," \u2014 "),uO=n(q7e,"A",{href:!0});var ppt=s(uO);hdr=r(ppt,"TFMobileBertForMaskedLM"),ppt.forEach(t),pdr=r(q7e," (MobileBERT model)"),q7e.forEach(t),_dr=i(ee),sF=n(ee,"LI",{});var G7e=s(sF);r_e=n(G7e,"STRONG",{});var _pt=s(r_e);udr=r(_pt,"mpnet"),_pt.forEach(t),bdr=r(G7e," \u2014 "),bO=n(G7e,"A",{href:!0});var upt=s(bO);vdr=r(upt,"TFMPNetForMaskedLM"),upt.forEach(t),Tdr=r(G7e," (MPNet model)"),G7e.forEach(t),Fdr=i(ee),lF=n(ee,"LI",{});var O7e=s(lF);t_e=n(O7e,"STRONG",{});var bpt=s(t_e);Cdr=r(bpt,"rembert"),bpt.forEach(t),Mdr=r(O7e," \u2014 "),vO=n(O7e,"A",{href:!0});var vpt=s(vO);Edr=r(vpt,"TFRemBertForMaskedLM"),vpt.forEach(t),ydr=r(O7e," (RemBERT model)"),O7e.forEach(t),wdr=i(ee),iF=n(ee,"LI",{});var X7e=s(iF);a_e=n(X7e,"STRONG",{});var Tpt=s(a_e);Adr=r(Tpt,"roberta"),Tpt.forEach(t),Ldr=r(X7e," \u2014 "),TO=n(X7e,"A",{href:!0});var Fpt=s(TO);Bdr=r(Fpt,"TFRobertaForMaskedLM"),Fpt.forEach(t),xdr=r(X7e," (RoBERTa model)"),X7e.forEach(t),kdr=i(ee),dF=n(ee,"LI",{});var V7e=s(dF);n_e=n(V7e,"STRONG",{});var Cpt=s(n_e);Rdr=r(Cpt,"roformer"),Cpt.forEach(t),Sdr=r(V7e," \u2014 "),FO=n(V7e,"A",{href:!0});var Mpt=s(FO);Pdr=r(Mpt,"TFRoFormerForMaskedLM"),Mpt.forEach(t),$dr=r(V7e," (RoFormer model)"),V7e.forEach(t),Idr=i(ee),cF=n(ee,"LI",{});var z7e=s(cF);s_e=n(z7e,"STRONG",{});var Ept=s(s_e);Ddr=r(Ept,"tapas"),Ept.forEach(t),Ndr=r(z7e," \u2014 "),CO=n(z7e,"A",{href:!0});var ypt=s(CO);jdr=r(ypt,"TFTapasForMaskedLM"),ypt.forEach(t),qdr=r(z7e," (TAPAS model)"),z7e.forEach(t),Gdr=i(ee),fF=n(ee,"LI",{});var W7e=s(fF);l_e=n(W7e,"STRONG",{});var wpt=s(l_e);Odr=r(wpt,"xlm"),wpt.forEach(t),Xdr=r(W7e," \u2014 "),MO=n(W7e,"A",{href:!0});var Apt=s(MO);Vdr=r(Apt,"TFXLMWithLMHeadModel"),Apt.forEach(t),zdr=r(W7e," (XLM model)"),W7e.forEach(t),Wdr=i(ee),mF=n(ee,"LI",{});var Q7e=s(mF);i_e=n(Q7e,"STRONG",{});var Lpt=s(i_e);Qdr=r(Lpt,"xlm-roberta"),Lpt.forEach(t),Hdr=r(Q7e," \u2014 "),EO=n(Q7e,"A",{href:!0});var Bpt=s(EO);Udr=r(Bpt,"TFXLMRobertaForMaskedLM"),Bpt.forEach(t),Jdr=r(Q7e," (XLM-RoBERTa model)"),Q7e.forEach(t),ee.forEach(t),Ydr=i(va),d_e=n(va,"P",{});var xpt=s(d_e);Kdr=r(xpt,"Examples:"),xpt.forEach(t),Zdr=i(va),m(LA.$$.fragment,va),va.forEach(t),Ql.forEach(t),VRe=i(c),Lc=n(c,"H2",{class:!0});var o$e=s(Lc);gF=n(o$e,"A",{id:!0,class:!0,href:!0});var kpt=s(gF);c_e=n(kpt,"SPAN",{});var Rpt=s(c_e);m(BA.$$.fragment,Rpt),Rpt.forEach(t),kpt.forEach(t),ecr=i(o$e),f_e=n(o$e,"SPAN",{});var Spt=s(f_e);ocr=r(Spt,"TFAutoModelForSeq2SeqLM"),Spt.forEach(t),o$e.forEach(t),zRe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(xA.$$.fragment,Ul),rcr=i(Ul),Bc=n(Ul,"P",{});var gQ=s(Bc);tcr=r(gQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),m_e=n(gQ,"CODE",{});var Ppt=s(m_e);acr=r(Ppt,"from_pretrained()"),Ppt.forEach(t),ncr=r(gQ,"class method or the "),g_e=n(gQ,"CODE",{});var $pt=s(g_e);scr=r($pt,"from_config()"),$pt.forEach(t),lcr=r(gQ,`class
method.`),gQ.forEach(t),icr=i(Ul),kA=n(Ul,"P",{});var r$e=s(kA);dcr=r(r$e,"This class cannot be instantiated directly using "),h_e=n(r$e,"CODE",{});var Ipt=s(h_e);ccr=r(Ipt,"__init__()"),Ipt.forEach(t),fcr=r(r$e," (throws an error)."),r$e.forEach(t),mcr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(RA.$$.fragment,Jl),gcr=i(Jl),p_e=n(Jl,"P",{});var Dpt=s(p_e);hcr=r(Dpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Dpt.forEach(t),pcr=i(Jl),xc=n(Jl,"P",{});var hQ=s(xc);_cr=r(hQ,`Note:
Loading a model from its configuration file does `),__e=n(hQ,"STRONG",{});var Npt=s(__e);ucr=r(Npt,"not"),Npt.forEach(t),bcr=r(hQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),u_e=n(hQ,"CODE",{});var jpt=s(u_e);vcr=r(jpt,"from_pretrained()"),jpt.forEach(t),Tcr=r(hQ,"to load the model weights."),hQ.forEach(t),Fcr=i(Jl),b_e=n(Jl,"P",{});var qpt=s(b_e);Ccr=r(qpt,"Examples:"),qpt.forEach(t),Mcr=i(Jl),m(SA.$$.fragment,Jl),Jl.forEach(t),Ecr=i(Ul),vo=n(Ul,"DIV",{class:!0});var Ta=s(vo);m(PA.$$.fragment,Ta),ycr=i(Ta),v_e=n(Ta,"P",{});var Gpt=s(v_e);wcr=r(Gpt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Gpt.forEach(t),Acr=i(Ta),Fn=n(Ta,"P",{});var Q4=s(Fn);Lcr=r(Q4,"The model class to instantiate is selected based on the "),T_e=n(Q4,"CODE",{});var Opt=s(T_e);Bcr=r(Opt,"model_type"),Opt.forEach(t),xcr=r(Q4,` property of the config object (either
passed as an argument or loaded from `),F_e=n(Q4,"CODE",{});var Xpt=s(F_e);kcr=r(Xpt,"pretrained_model_name_or_path"),Xpt.forEach(t),Rcr=r(Q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=n(Q4,"CODE",{});var Vpt=s(C_e);Scr=r(Vpt,"pretrained_model_name_or_path"),Vpt.forEach(t),Pcr=r(Q4,":"),Q4.forEach(t),$cr=i(Ta),ue=n(Ta,"UL",{});var ye=s(ue);hF=n(ye,"LI",{});var H7e=s(hF);M_e=n(H7e,"STRONG",{});var zpt=s(M_e);Icr=r(zpt,"bart"),zpt.forEach(t),Dcr=r(H7e," \u2014 "),yO=n(H7e,"A",{href:!0});var Wpt=s(yO);Ncr=r(Wpt,"TFBartForConditionalGeneration"),Wpt.forEach(t),jcr=r(H7e," (BART model)"),H7e.forEach(t),qcr=i(ye),pF=n(ye,"LI",{});var U7e=s(pF);E_e=n(U7e,"STRONG",{});var Qpt=s(E_e);Gcr=r(Qpt,"blenderbot"),Qpt.forEach(t),Ocr=r(U7e," \u2014 "),wO=n(U7e,"A",{href:!0});var Hpt=s(wO);Xcr=r(Hpt,"TFBlenderbotForConditionalGeneration"),Hpt.forEach(t),Vcr=r(U7e," (Blenderbot model)"),U7e.forEach(t),zcr=i(ye),_F=n(ye,"LI",{});var J7e=s(_F);y_e=n(J7e,"STRONG",{});var Upt=s(y_e);Wcr=r(Upt,"blenderbot-small"),Upt.forEach(t),Qcr=r(J7e," \u2014 "),AO=n(J7e,"A",{href:!0});var Jpt=s(AO);Hcr=r(Jpt,"TFBlenderbotSmallForConditionalGeneration"),Jpt.forEach(t),Ucr=r(J7e," (BlenderbotSmall model)"),J7e.forEach(t),Jcr=i(ye),uF=n(ye,"LI",{});var Y7e=s(uF);w_e=n(Y7e,"STRONG",{});var Ypt=s(w_e);Ycr=r(Ypt,"encoder-decoder"),Ypt.forEach(t),Kcr=r(Y7e," \u2014 "),LO=n(Y7e,"A",{href:!0});var Kpt=s(LO);Zcr=r(Kpt,"TFEncoderDecoderModel"),Kpt.forEach(t),efr=r(Y7e," (Encoder decoder model)"),Y7e.forEach(t),ofr=i(ye),bF=n(ye,"LI",{});var K7e=s(bF);A_e=n(K7e,"STRONG",{});var Zpt=s(A_e);rfr=r(Zpt,"led"),Zpt.forEach(t),tfr=r(K7e," \u2014 "),BO=n(K7e,"A",{href:!0});var e_t=s(BO);afr=r(e_t,"TFLEDForConditionalGeneration"),e_t.forEach(t),nfr=r(K7e," (LED model)"),K7e.forEach(t),sfr=i(ye),vF=n(ye,"LI",{});var Z7e=s(vF);L_e=n(Z7e,"STRONG",{});var o_t=s(L_e);lfr=r(o_t,"marian"),o_t.forEach(t),ifr=r(Z7e," \u2014 "),xO=n(Z7e,"A",{href:!0});var r_t=s(xO);dfr=r(r_t,"TFMarianMTModel"),r_t.forEach(t),cfr=r(Z7e," (Marian model)"),Z7e.forEach(t),ffr=i(ye),TF=n(ye,"LI",{});var e8e=s(TF);B_e=n(e8e,"STRONG",{});var t_t=s(B_e);mfr=r(t_t,"mbart"),t_t.forEach(t),gfr=r(e8e," \u2014 "),kO=n(e8e,"A",{href:!0});var a_t=s(kO);hfr=r(a_t,"TFMBartForConditionalGeneration"),a_t.forEach(t),pfr=r(e8e," (mBART model)"),e8e.forEach(t),_fr=i(ye),FF=n(ye,"LI",{});var o8e=s(FF);x_e=n(o8e,"STRONG",{});var n_t=s(x_e);ufr=r(n_t,"mt5"),n_t.forEach(t),bfr=r(o8e," \u2014 "),RO=n(o8e,"A",{href:!0});var s_t=s(RO);vfr=r(s_t,"TFMT5ForConditionalGeneration"),s_t.forEach(t),Tfr=r(o8e," (mT5 model)"),o8e.forEach(t),Ffr=i(ye),CF=n(ye,"LI",{});var r8e=s(CF);k_e=n(r8e,"STRONG",{});var l_t=s(k_e);Cfr=r(l_t,"pegasus"),l_t.forEach(t),Mfr=r(r8e," \u2014 "),SO=n(r8e,"A",{href:!0});var i_t=s(SO);Efr=r(i_t,"TFPegasusForConditionalGeneration"),i_t.forEach(t),yfr=r(r8e," (Pegasus model)"),r8e.forEach(t),wfr=i(ye),MF=n(ye,"LI",{});var t8e=s(MF);R_e=n(t8e,"STRONG",{});var d_t=s(R_e);Afr=r(d_t,"t5"),d_t.forEach(t),Lfr=r(t8e," \u2014 "),PO=n(t8e,"A",{href:!0});var c_t=s(PO);Bfr=r(c_t,"TFT5ForConditionalGeneration"),c_t.forEach(t),xfr=r(t8e," (T5 model)"),t8e.forEach(t),ye.forEach(t),kfr=i(Ta),S_e=n(Ta,"P",{});var f_t=s(S_e);Rfr=r(f_t,"Examples:"),f_t.forEach(t),Sfr=i(Ta),m($A.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),WRe=i(c),kc=n(c,"H2",{class:!0});var t$e=s(kc);EF=n(t$e,"A",{id:!0,class:!0,href:!0});var m_t=s(EF);P_e=n(m_t,"SPAN",{});var g_t=s(P_e);m(IA.$$.fragment,g_t),g_t.forEach(t),m_t.forEach(t),Pfr=i(t$e),$_e=n(t$e,"SPAN",{});var h_t=s($_e);$fr=r(h_t,"TFAutoModelForSequenceClassification"),h_t.forEach(t),t$e.forEach(t),QRe=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);m(DA.$$.fragment,Yl),Ifr=i(Yl),Rc=n(Yl,"P",{});var pQ=s(Rc);Dfr=r(pQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),I_e=n(pQ,"CODE",{});var p_t=s(I_e);Nfr=r(p_t,"from_pretrained()"),p_t.forEach(t),jfr=r(pQ,"class method or the "),D_e=n(pQ,"CODE",{});var __t=s(D_e);qfr=r(__t,"from_config()"),__t.forEach(t),Gfr=r(pQ,`class
method.`),pQ.forEach(t),Ofr=i(Yl),NA=n(Yl,"P",{});var a$e=s(NA);Xfr=r(a$e,"This class cannot be instantiated directly using "),N_e=n(a$e,"CODE",{});var u_t=s(N_e);Vfr=r(u_t,"__init__()"),u_t.forEach(t),zfr=r(a$e," (throws an error)."),a$e.forEach(t),Wfr=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);m(jA.$$.fragment,Kl),Qfr=i(Kl),j_e=n(Kl,"P",{});var b_t=s(j_e);Hfr=r(b_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),b_t.forEach(t),Ufr=i(Kl),Sc=n(Kl,"P",{});var _Q=s(Sc);Jfr=r(_Q,`Note:
Loading a model from its configuration file does `),q_e=n(_Q,"STRONG",{});var v_t=s(q_e);Yfr=r(v_t,"not"),v_t.forEach(t),Kfr=r(_Q,` load the model weights. It only affects the
model\u2019s configuration. Use `),G_e=n(_Q,"CODE",{});var T_t=s(G_e);Zfr=r(T_t,"from_pretrained()"),T_t.forEach(t),emr=r(_Q,"to load the model weights."),_Q.forEach(t),omr=i(Kl),O_e=n(Kl,"P",{});var F_t=s(O_e);rmr=r(F_t,"Examples:"),F_t.forEach(t),tmr=i(Kl),m(qA.$$.fragment,Kl),Kl.forEach(t),amr=i(Yl),To=n(Yl,"DIV",{class:!0});var Fa=s(To);m(GA.$$.fragment,Fa),nmr=i(Fa),X_e=n(Fa,"P",{});var C_t=s(X_e);smr=r(C_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),C_t.forEach(t),lmr=i(Fa),Cn=n(Fa,"P",{});var H4=s(Cn);imr=r(H4,"The model class to instantiate is selected based on the "),V_e=n(H4,"CODE",{});var M_t=s(V_e);dmr=r(M_t,"model_type"),M_t.forEach(t),cmr=r(H4,` property of the config object (either
passed as an argument or loaded from `),z_e=n(H4,"CODE",{});var E_t=s(z_e);fmr=r(E_t,"pretrained_model_name_or_path"),E_t.forEach(t),mmr=r(H4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=n(H4,"CODE",{});var y_t=s(W_e);gmr=r(y_t,"pretrained_model_name_or_path"),y_t.forEach(t),hmr=r(H4,":"),H4.forEach(t),pmr=i(Fa),X=n(Fa,"UL",{});var W=s(X);yF=n(W,"LI",{});var a8e=s(yF);Q_e=n(a8e,"STRONG",{});var w_t=s(Q_e);_mr=r(w_t,"albert"),w_t.forEach(t),umr=r(a8e," \u2014 "),$O=n(a8e,"A",{href:!0});var A_t=s($O);bmr=r(A_t,"TFAlbertForSequenceClassification"),A_t.forEach(t),vmr=r(a8e," (ALBERT model)"),a8e.forEach(t),Tmr=i(W),wF=n(W,"LI",{});var n8e=s(wF);H_e=n(n8e,"STRONG",{});var L_t=s(H_e);Fmr=r(L_t,"bert"),L_t.forEach(t),Cmr=r(n8e," \u2014 "),IO=n(n8e,"A",{href:!0});var B_t=s(IO);Mmr=r(B_t,"TFBertForSequenceClassification"),B_t.forEach(t),Emr=r(n8e," (BERT model)"),n8e.forEach(t),ymr=i(W),AF=n(W,"LI",{});var s8e=s(AF);U_e=n(s8e,"STRONG",{});var x_t=s(U_e);wmr=r(x_t,"camembert"),x_t.forEach(t),Amr=r(s8e," \u2014 "),DO=n(s8e,"A",{href:!0});var k_t=s(DO);Lmr=r(k_t,"TFCamembertForSequenceClassification"),k_t.forEach(t),Bmr=r(s8e," (CamemBERT model)"),s8e.forEach(t),xmr=i(W),LF=n(W,"LI",{});var l8e=s(LF);J_e=n(l8e,"STRONG",{});var R_t=s(J_e);kmr=r(R_t,"convbert"),R_t.forEach(t),Rmr=r(l8e," \u2014 "),NO=n(l8e,"A",{href:!0});var S_t=s(NO);Smr=r(S_t,"TFConvBertForSequenceClassification"),S_t.forEach(t),Pmr=r(l8e," (ConvBERT model)"),l8e.forEach(t),$mr=i(W),BF=n(W,"LI",{});var i8e=s(BF);Y_e=n(i8e,"STRONG",{});var P_t=s(Y_e);Imr=r(P_t,"ctrl"),P_t.forEach(t),Dmr=r(i8e," \u2014 "),jO=n(i8e,"A",{href:!0});var $_t=s(jO);Nmr=r($_t,"TFCTRLForSequenceClassification"),$_t.forEach(t),jmr=r(i8e," (CTRL model)"),i8e.forEach(t),qmr=i(W),xF=n(W,"LI",{});var d8e=s(xF);K_e=n(d8e,"STRONG",{});var I_t=s(K_e);Gmr=r(I_t,"deberta"),I_t.forEach(t),Omr=r(d8e," \u2014 "),qO=n(d8e,"A",{href:!0});var D_t=s(qO);Xmr=r(D_t,"TFDebertaForSequenceClassification"),D_t.forEach(t),Vmr=r(d8e," (DeBERTa model)"),d8e.forEach(t),zmr=i(W),kF=n(W,"LI",{});var c8e=s(kF);Z_e=n(c8e,"STRONG",{});var N_t=s(Z_e);Wmr=r(N_t,"deberta-v2"),N_t.forEach(t),Qmr=r(c8e," \u2014 "),GO=n(c8e,"A",{href:!0});var j_t=s(GO);Hmr=r(j_t,"TFDebertaV2ForSequenceClassification"),j_t.forEach(t),Umr=r(c8e," (DeBERTa-v2 model)"),c8e.forEach(t),Jmr=i(W),RF=n(W,"LI",{});var f8e=s(RF);eue=n(f8e,"STRONG",{});var q_t=s(eue);Ymr=r(q_t,"distilbert"),q_t.forEach(t),Kmr=r(f8e," \u2014 "),OO=n(f8e,"A",{href:!0});var G_t=s(OO);Zmr=r(G_t,"TFDistilBertForSequenceClassification"),G_t.forEach(t),egr=r(f8e," (DistilBERT model)"),f8e.forEach(t),ogr=i(W),SF=n(W,"LI",{});var m8e=s(SF);oue=n(m8e,"STRONG",{});var O_t=s(oue);rgr=r(O_t,"electra"),O_t.forEach(t),tgr=r(m8e," \u2014 "),XO=n(m8e,"A",{href:!0});var X_t=s(XO);agr=r(X_t,"TFElectraForSequenceClassification"),X_t.forEach(t),ngr=r(m8e," (ELECTRA model)"),m8e.forEach(t),sgr=i(W),PF=n(W,"LI",{});var g8e=s(PF);rue=n(g8e,"STRONG",{});var V_t=s(rue);lgr=r(V_t,"flaubert"),V_t.forEach(t),igr=r(g8e," \u2014 "),VO=n(g8e,"A",{href:!0});var z_t=s(VO);dgr=r(z_t,"TFFlaubertForSequenceClassification"),z_t.forEach(t),cgr=r(g8e," (FlauBERT model)"),g8e.forEach(t),fgr=i(W),$F=n(W,"LI",{});var h8e=s($F);tue=n(h8e,"STRONG",{});var W_t=s(tue);mgr=r(W_t,"funnel"),W_t.forEach(t),ggr=r(h8e," \u2014 "),zO=n(h8e,"A",{href:!0});var Q_t=s(zO);hgr=r(Q_t,"TFFunnelForSequenceClassification"),Q_t.forEach(t),pgr=r(h8e," (Funnel Transformer model)"),h8e.forEach(t),_gr=i(W),IF=n(W,"LI",{});var p8e=s(IF);aue=n(p8e,"STRONG",{});var H_t=s(aue);ugr=r(H_t,"gpt2"),H_t.forEach(t),bgr=r(p8e," \u2014 "),WO=n(p8e,"A",{href:!0});var U_t=s(WO);vgr=r(U_t,"TFGPT2ForSequenceClassification"),U_t.forEach(t),Tgr=r(p8e," (OpenAI GPT-2 model)"),p8e.forEach(t),Fgr=i(W),DF=n(W,"LI",{});var _8e=s(DF);nue=n(_8e,"STRONG",{});var J_t=s(nue);Cgr=r(J_t,"gptj"),J_t.forEach(t),Mgr=r(_8e," \u2014 "),QO=n(_8e,"A",{href:!0});var Y_t=s(QO);Egr=r(Y_t,"TFGPTJForSequenceClassification"),Y_t.forEach(t),ygr=r(_8e," (GPT-J model)"),_8e.forEach(t),wgr=i(W),NF=n(W,"LI",{});var u8e=s(NF);sue=n(u8e,"STRONG",{});var K_t=s(sue);Agr=r(K_t,"layoutlm"),K_t.forEach(t),Lgr=r(u8e," \u2014 "),HO=n(u8e,"A",{href:!0});var Z_t=s(HO);Bgr=r(Z_t,"TFLayoutLMForSequenceClassification"),Z_t.forEach(t),xgr=r(u8e," (LayoutLM model)"),u8e.forEach(t),kgr=i(W),jF=n(W,"LI",{});var b8e=s(jF);lue=n(b8e,"STRONG",{});var eut=s(lue);Rgr=r(eut,"longformer"),eut.forEach(t),Sgr=r(b8e," \u2014 "),UO=n(b8e,"A",{href:!0});var out=s(UO);Pgr=r(out,"TFLongformerForSequenceClassification"),out.forEach(t),$gr=r(b8e," (Longformer model)"),b8e.forEach(t),Igr=i(W),qF=n(W,"LI",{});var v8e=s(qF);iue=n(v8e,"STRONG",{});var rut=s(iue);Dgr=r(rut,"mobilebert"),rut.forEach(t),Ngr=r(v8e," \u2014 "),JO=n(v8e,"A",{href:!0});var tut=s(JO);jgr=r(tut,"TFMobileBertForSequenceClassification"),tut.forEach(t),qgr=r(v8e," (MobileBERT model)"),v8e.forEach(t),Ggr=i(W),GF=n(W,"LI",{});var T8e=s(GF);due=n(T8e,"STRONG",{});var aut=s(due);Ogr=r(aut,"mpnet"),aut.forEach(t),Xgr=r(T8e," \u2014 "),YO=n(T8e,"A",{href:!0});var nut=s(YO);Vgr=r(nut,"TFMPNetForSequenceClassification"),nut.forEach(t),zgr=r(T8e," (MPNet model)"),T8e.forEach(t),Wgr=i(W),OF=n(W,"LI",{});var F8e=s(OF);cue=n(F8e,"STRONG",{});var sut=s(cue);Qgr=r(sut,"openai-gpt"),sut.forEach(t),Hgr=r(F8e," \u2014 "),KO=n(F8e,"A",{href:!0});var lut=s(KO);Ugr=r(lut,"TFOpenAIGPTForSequenceClassification"),lut.forEach(t),Jgr=r(F8e," (OpenAI GPT model)"),F8e.forEach(t),Ygr=i(W),XF=n(W,"LI",{});var C8e=s(XF);fue=n(C8e,"STRONG",{});var iut=s(fue);Kgr=r(iut,"rembert"),iut.forEach(t),Zgr=r(C8e," \u2014 "),ZO=n(C8e,"A",{href:!0});var dut=s(ZO);ehr=r(dut,"TFRemBertForSequenceClassification"),dut.forEach(t),ohr=r(C8e," (RemBERT model)"),C8e.forEach(t),rhr=i(W),VF=n(W,"LI",{});var M8e=s(VF);mue=n(M8e,"STRONG",{});var cut=s(mue);thr=r(cut,"roberta"),cut.forEach(t),ahr=r(M8e," \u2014 "),eX=n(M8e,"A",{href:!0});var fut=s(eX);nhr=r(fut,"TFRobertaForSequenceClassification"),fut.forEach(t),shr=r(M8e," (RoBERTa model)"),M8e.forEach(t),lhr=i(W),zF=n(W,"LI",{});var E8e=s(zF);gue=n(E8e,"STRONG",{});var mut=s(gue);ihr=r(mut,"roformer"),mut.forEach(t),dhr=r(E8e," \u2014 "),oX=n(E8e,"A",{href:!0});var gut=s(oX);chr=r(gut,"TFRoFormerForSequenceClassification"),gut.forEach(t),fhr=r(E8e," (RoFormer model)"),E8e.forEach(t),mhr=i(W),WF=n(W,"LI",{});var y8e=s(WF);hue=n(y8e,"STRONG",{});var hut=s(hue);ghr=r(hut,"tapas"),hut.forEach(t),hhr=r(y8e," \u2014 "),rX=n(y8e,"A",{href:!0});var put=s(rX);phr=r(put,"TFTapasForSequenceClassification"),put.forEach(t),_hr=r(y8e," (TAPAS model)"),y8e.forEach(t),uhr=i(W),QF=n(W,"LI",{});var w8e=s(QF);pue=n(w8e,"STRONG",{});var _ut=s(pue);bhr=r(_ut,"transfo-xl"),_ut.forEach(t),vhr=r(w8e," \u2014 "),tX=n(w8e,"A",{href:!0});var uut=s(tX);Thr=r(uut,"TFTransfoXLForSequenceClassification"),uut.forEach(t),Fhr=r(w8e," (Transformer-XL model)"),w8e.forEach(t),Chr=i(W),HF=n(W,"LI",{});var A8e=s(HF);_ue=n(A8e,"STRONG",{});var but=s(_ue);Mhr=r(but,"xlm"),but.forEach(t),Ehr=r(A8e," \u2014 "),aX=n(A8e,"A",{href:!0});var vut=s(aX);yhr=r(vut,"TFXLMForSequenceClassification"),vut.forEach(t),whr=r(A8e," (XLM model)"),A8e.forEach(t),Ahr=i(W),UF=n(W,"LI",{});var L8e=s(UF);uue=n(L8e,"STRONG",{});var Tut=s(uue);Lhr=r(Tut,"xlm-roberta"),Tut.forEach(t),Bhr=r(L8e," \u2014 "),nX=n(L8e,"A",{href:!0});var Fut=s(nX);xhr=r(Fut,"TFXLMRobertaForSequenceClassification"),Fut.forEach(t),khr=r(L8e," (XLM-RoBERTa model)"),L8e.forEach(t),Rhr=i(W),JF=n(W,"LI",{});var B8e=s(JF);bue=n(B8e,"STRONG",{});var Cut=s(bue);Shr=r(Cut,"xlnet"),Cut.forEach(t),Phr=r(B8e," \u2014 "),sX=n(B8e,"A",{href:!0});var Mut=s(sX);$hr=r(Mut,"TFXLNetForSequenceClassification"),Mut.forEach(t),Ihr=r(B8e," (XLNet model)"),B8e.forEach(t),W.forEach(t),Dhr=i(Fa),vue=n(Fa,"P",{});var Eut=s(vue);Nhr=r(Eut,"Examples:"),Eut.forEach(t),jhr=i(Fa),m(OA.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),HRe=i(c),Pc=n(c,"H2",{class:!0});var n$e=s(Pc);YF=n(n$e,"A",{id:!0,class:!0,href:!0});var yut=s(YF);Tue=n(yut,"SPAN",{});var wut=s(Tue);m(XA.$$.fragment,wut),wut.forEach(t),yut.forEach(t),qhr=i(n$e),Fue=n(n$e,"SPAN",{});var Aut=s(Fue);Ghr=r(Aut,"TFAutoModelForMultipleChoice"),Aut.forEach(t),n$e.forEach(t),URe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(VA.$$.fragment,Zl),Ohr=i(Zl),$c=n(Zl,"P",{});var uQ=s($c);Xhr=r(uQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Cue=n(uQ,"CODE",{});var Lut=s(Cue);Vhr=r(Lut,"from_pretrained()"),Lut.forEach(t),zhr=r(uQ,"class method or the "),Mue=n(uQ,"CODE",{});var But=s(Mue);Whr=r(But,"from_config()"),But.forEach(t),Qhr=r(uQ,`class
method.`),uQ.forEach(t),Hhr=i(Zl),zA=n(Zl,"P",{});var s$e=s(zA);Uhr=r(s$e,"This class cannot be instantiated directly using "),Eue=n(s$e,"CODE",{});var xut=s(Eue);Jhr=r(xut,"__init__()"),xut.forEach(t),Yhr=r(s$e," (throws an error)."),s$e.forEach(t),Khr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);m(WA.$$.fragment,ei),Zhr=i(ei),yue=n(ei,"P",{});var kut=s(yue);epr=r(kut,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),kut.forEach(t),opr=i(ei),Ic=n(ei,"P",{});var bQ=s(Ic);rpr=r(bQ,`Note:
Loading a model from its configuration file does `),wue=n(bQ,"STRONG",{});var Rut=s(wue);tpr=r(Rut,"not"),Rut.forEach(t),apr=r(bQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aue=n(bQ,"CODE",{});var Sut=s(Aue);npr=r(Sut,"from_pretrained()"),Sut.forEach(t),spr=r(bQ,"to load the model weights."),bQ.forEach(t),lpr=i(ei),Lue=n(ei,"P",{});var Put=s(Lue);ipr=r(Put,"Examples:"),Put.forEach(t),dpr=i(ei),m(QA.$$.fragment,ei),ei.forEach(t),cpr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ca=s(Fo);m(HA.$$.fragment,Ca),fpr=i(Ca),Bue=n(Ca,"P",{});var $ut=s(Bue);mpr=r($ut,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$ut.forEach(t),gpr=i(Ca),Mn=n(Ca,"P",{});var U4=s(Mn);hpr=r(U4,"The model class to instantiate is selected based on the "),xue=n(U4,"CODE",{});var Iut=s(xue);ppr=r(Iut,"model_type"),Iut.forEach(t),_pr=r(U4,` property of the config object (either
passed as an argument or loaded from `),kue=n(U4,"CODE",{});var Dut=s(kue);upr=r(Dut,"pretrained_model_name_or_path"),Dut.forEach(t),bpr=r(U4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=n(U4,"CODE",{});var Nut=s(Rue);vpr=r(Nut,"pretrained_model_name_or_path"),Nut.forEach(t),Tpr=r(U4,":"),U4.forEach(t),Fpr=i(Ca),ae=n(Ca,"UL",{});var le=s(ae);KF=n(le,"LI",{});var x8e=s(KF);Sue=n(x8e,"STRONG",{});var jut=s(Sue);Cpr=r(jut,"albert"),jut.forEach(t),Mpr=r(x8e," \u2014 "),lX=n(x8e,"A",{href:!0});var qut=s(lX);Epr=r(qut,"TFAlbertForMultipleChoice"),qut.forEach(t),ypr=r(x8e," (ALBERT model)"),x8e.forEach(t),wpr=i(le),ZF=n(le,"LI",{});var k8e=s(ZF);Pue=n(k8e,"STRONG",{});var Gut=s(Pue);Apr=r(Gut,"bert"),Gut.forEach(t),Lpr=r(k8e," \u2014 "),iX=n(k8e,"A",{href:!0});var Out=s(iX);Bpr=r(Out,"TFBertForMultipleChoice"),Out.forEach(t),xpr=r(k8e," (BERT model)"),k8e.forEach(t),kpr=i(le),e9=n(le,"LI",{});var R8e=s(e9);$ue=n(R8e,"STRONG",{});var Xut=s($ue);Rpr=r(Xut,"camembert"),Xut.forEach(t),Spr=r(R8e," \u2014 "),dX=n(R8e,"A",{href:!0});var Vut=s(dX);Ppr=r(Vut,"TFCamembertForMultipleChoice"),Vut.forEach(t),$pr=r(R8e," (CamemBERT model)"),R8e.forEach(t),Ipr=i(le),o9=n(le,"LI",{});var S8e=s(o9);Iue=n(S8e,"STRONG",{});var zut=s(Iue);Dpr=r(zut,"convbert"),zut.forEach(t),Npr=r(S8e," \u2014 "),cX=n(S8e,"A",{href:!0});var Wut=s(cX);jpr=r(Wut,"TFConvBertForMultipleChoice"),Wut.forEach(t),qpr=r(S8e," (ConvBERT model)"),S8e.forEach(t),Gpr=i(le),r9=n(le,"LI",{});var P8e=s(r9);Due=n(P8e,"STRONG",{});var Qut=s(Due);Opr=r(Qut,"distilbert"),Qut.forEach(t),Xpr=r(P8e," \u2014 "),fX=n(P8e,"A",{href:!0});var Hut=s(fX);Vpr=r(Hut,"TFDistilBertForMultipleChoice"),Hut.forEach(t),zpr=r(P8e," (DistilBERT model)"),P8e.forEach(t),Wpr=i(le),t9=n(le,"LI",{});var $8e=s(t9);Nue=n($8e,"STRONG",{});var Uut=s(Nue);Qpr=r(Uut,"electra"),Uut.forEach(t),Hpr=r($8e," \u2014 "),mX=n($8e,"A",{href:!0});var Jut=s(mX);Upr=r(Jut,"TFElectraForMultipleChoice"),Jut.forEach(t),Jpr=r($8e," (ELECTRA model)"),$8e.forEach(t),Ypr=i(le),a9=n(le,"LI",{});var I8e=s(a9);jue=n(I8e,"STRONG",{});var Yut=s(jue);Kpr=r(Yut,"flaubert"),Yut.forEach(t),Zpr=r(I8e," \u2014 "),gX=n(I8e,"A",{href:!0});var Kut=s(gX);e_r=r(Kut,"TFFlaubertForMultipleChoice"),Kut.forEach(t),o_r=r(I8e," (FlauBERT model)"),I8e.forEach(t),r_r=i(le),n9=n(le,"LI",{});var D8e=s(n9);que=n(D8e,"STRONG",{});var Zut=s(que);t_r=r(Zut,"funnel"),Zut.forEach(t),a_r=r(D8e," \u2014 "),hX=n(D8e,"A",{href:!0});var e2t=s(hX);n_r=r(e2t,"TFFunnelForMultipleChoice"),e2t.forEach(t),s_r=r(D8e," (Funnel Transformer model)"),D8e.forEach(t),l_r=i(le),s9=n(le,"LI",{});var N8e=s(s9);Gue=n(N8e,"STRONG",{});var o2t=s(Gue);i_r=r(o2t,"longformer"),o2t.forEach(t),d_r=r(N8e," \u2014 "),pX=n(N8e,"A",{href:!0});var r2t=s(pX);c_r=r(r2t,"TFLongformerForMultipleChoice"),r2t.forEach(t),f_r=r(N8e," (Longformer model)"),N8e.forEach(t),m_r=i(le),l9=n(le,"LI",{});var j8e=s(l9);Oue=n(j8e,"STRONG",{});var t2t=s(Oue);g_r=r(t2t,"mobilebert"),t2t.forEach(t),h_r=r(j8e," \u2014 "),_X=n(j8e,"A",{href:!0});var a2t=s(_X);p_r=r(a2t,"TFMobileBertForMultipleChoice"),a2t.forEach(t),__r=r(j8e," (MobileBERT model)"),j8e.forEach(t),u_r=i(le),i9=n(le,"LI",{});var q8e=s(i9);Xue=n(q8e,"STRONG",{});var n2t=s(Xue);b_r=r(n2t,"mpnet"),n2t.forEach(t),v_r=r(q8e," \u2014 "),uX=n(q8e,"A",{href:!0});var s2t=s(uX);T_r=r(s2t,"TFMPNetForMultipleChoice"),s2t.forEach(t),F_r=r(q8e," (MPNet model)"),q8e.forEach(t),C_r=i(le),d9=n(le,"LI",{});var G8e=s(d9);Vue=n(G8e,"STRONG",{});var l2t=s(Vue);M_r=r(l2t,"rembert"),l2t.forEach(t),E_r=r(G8e," \u2014 "),bX=n(G8e,"A",{href:!0});var i2t=s(bX);y_r=r(i2t,"TFRemBertForMultipleChoice"),i2t.forEach(t),w_r=r(G8e," (RemBERT model)"),G8e.forEach(t),A_r=i(le),c9=n(le,"LI",{});var O8e=s(c9);zue=n(O8e,"STRONG",{});var d2t=s(zue);L_r=r(d2t,"roberta"),d2t.forEach(t),B_r=r(O8e," \u2014 "),vX=n(O8e,"A",{href:!0});var c2t=s(vX);x_r=r(c2t,"TFRobertaForMultipleChoice"),c2t.forEach(t),k_r=r(O8e," (RoBERTa model)"),O8e.forEach(t),R_r=i(le),f9=n(le,"LI",{});var X8e=s(f9);Wue=n(X8e,"STRONG",{});var f2t=s(Wue);S_r=r(f2t,"roformer"),f2t.forEach(t),P_r=r(X8e," \u2014 "),TX=n(X8e,"A",{href:!0});var m2t=s(TX);$_r=r(m2t,"TFRoFormerForMultipleChoice"),m2t.forEach(t),I_r=r(X8e," (RoFormer model)"),X8e.forEach(t),D_r=i(le),m9=n(le,"LI",{});var V8e=s(m9);Que=n(V8e,"STRONG",{});var g2t=s(Que);N_r=r(g2t,"xlm"),g2t.forEach(t),j_r=r(V8e," \u2014 "),FX=n(V8e,"A",{href:!0});var h2t=s(FX);q_r=r(h2t,"TFXLMForMultipleChoice"),h2t.forEach(t),G_r=r(V8e," (XLM model)"),V8e.forEach(t),O_r=i(le),g9=n(le,"LI",{});var z8e=s(g9);Hue=n(z8e,"STRONG",{});var p2t=s(Hue);X_r=r(p2t,"xlm-roberta"),p2t.forEach(t),V_r=r(z8e," \u2014 "),CX=n(z8e,"A",{href:!0});var _2t=s(CX);z_r=r(_2t,"TFXLMRobertaForMultipleChoice"),_2t.forEach(t),W_r=r(z8e," (XLM-RoBERTa model)"),z8e.forEach(t),Q_r=i(le),h9=n(le,"LI",{});var W8e=s(h9);Uue=n(W8e,"STRONG",{});var u2t=s(Uue);H_r=r(u2t,"xlnet"),u2t.forEach(t),U_r=r(W8e," \u2014 "),MX=n(W8e,"A",{href:!0});var b2t=s(MX);J_r=r(b2t,"TFXLNetForMultipleChoice"),b2t.forEach(t),Y_r=r(W8e," (XLNet model)"),W8e.forEach(t),le.forEach(t),K_r=i(Ca),Jue=n(Ca,"P",{});var v2t=s(Jue);Z_r=r(v2t,"Examples:"),v2t.forEach(t),eur=i(Ca),m(UA.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),JRe=i(c),Dc=n(c,"H2",{class:!0});var l$e=s(Dc);p9=n(l$e,"A",{id:!0,class:!0,href:!0});var T2t=s(p9);Yue=n(T2t,"SPAN",{});var F2t=s(Yue);m(JA.$$.fragment,F2t),F2t.forEach(t),T2t.forEach(t),our=i(l$e),Kue=n(l$e,"SPAN",{});var C2t=s(Kue);rur=r(C2t,"TFAutoModelForTableQuestionAnswering"),C2t.forEach(t),l$e.forEach(t),YRe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(YA.$$.fragment,oi),tur=i(oi),Nc=n(oi,"P",{});var vQ=s(Nc);aur=r(vQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Zue=n(vQ,"CODE",{});var M2t=s(Zue);nur=r(M2t,"from_pretrained()"),M2t.forEach(t),sur=r(vQ,"class method or the "),e2e=n(vQ,"CODE",{});var E2t=s(e2e);lur=r(E2t,"from_config()"),E2t.forEach(t),iur=r(vQ,`class
method.`),vQ.forEach(t),dur=i(oi),KA=n(oi,"P",{});var i$e=s(KA);cur=r(i$e,"This class cannot be instantiated directly using "),o2e=n(i$e,"CODE",{});var y2t=s(o2e);fur=r(y2t,"__init__()"),y2t.forEach(t),mur=r(i$e," (throws an error)."),i$e.forEach(t),gur=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);m(ZA.$$.fragment,ri),hur=i(ri),r2e=n(ri,"P",{});var w2t=s(r2e);pur=r(w2t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),w2t.forEach(t),_ur=i(ri),jc=n(ri,"P",{});var TQ=s(jc);uur=r(TQ,`Note:
Loading a model from its configuration file does `),t2e=n(TQ,"STRONG",{});var A2t=s(t2e);bur=r(A2t,"not"),A2t.forEach(t),vur=r(TQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),a2e=n(TQ,"CODE",{});var L2t=s(a2e);Tur=r(L2t,"from_pretrained()"),L2t.forEach(t),Fur=r(TQ,"to load the model weights."),TQ.forEach(t),Cur=i(ri),n2e=n(ri,"P",{});var B2t=s(n2e);Mur=r(B2t,"Examples:"),B2t.forEach(t),Eur=i(ri),m(e0.$$.fragment,ri),ri.forEach(t),yur=i(oi),Co=n(oi,"DIV",{class:!0});var Ma=s(Co);m(o0.$$.fragment,Ma),wur=i(Ma),s2e=n(Ma,"P",{});var x2t=s(s2e);Aur=r(x2t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),x2t.forEach(t),Lur=i(Ma),En=n(Ma,"P",{});var J4=s(En);Bur=r(J4,"The model class to instantiate is selected based on the "),l2e=n(J4,"CODE",{});var k2t=s(l2e);xur=r(k2t,"model_type"),k2t.forEach(t),kur=r(J4,` property of the config object (either
passed as an argument or loaded from `),i2e=n(J4,"CODE",{});var R2t=s(i2e);Rur=r(R2t,"pretrained_model_name_or_path"),R2t.forEach(t),Sur=r(J4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=n(J4,"CODE",{});var S2t=s(d2e);Pur=r(S2t,"pretrained_model_name_or_path"),S2t.forEach(t),$ur=r(J4,":"),J4.forEach(t),Iur=i(Ma),c2e=n(Ma,"UL",{});var P2t=s(c2e);_9=n(P2t,"LI",{});var Q8e=s(_9);f2e=n(Q8e,"STRONG",{});var $2t=s(f2e);Dur=r($2t,"tapas"),$2t.forEach(t),Nur=r(Q8e," \u2014 "),EX=n(Q8e,"A",{href:!0});var I2t=s(EX);jur=r(I2t,"TFTapasForQuestionAnswering"),I2t.forEach(t),qur=r(Q8e," (TAPAS model)"),Q8e.forEach(t),P2t.forEach(t),Gur=i(Ma),m2e=n(Ma,"P",{});var D2t=s(m2e);Our=r(D2t,"Examples:"),D2t.forEach(t),Xur=i(Ma),m(r0.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),KRe=i(c),qc=n(c,"H2",{class:!0});var d$e=s(qc);u9=n(d$e,"A",{id:!0,class:!0,href:!0});var N2t=s(u9);g2e=n(N2t,"SPAN",{});var j2t=s(g2e);m(t0.$$.fragment,j2t),j2t.forEach(t),N2t.forEach(t),Vur=i(d$e),h2e=n(d$e,"SPAN",{});var q2t=s(h2e);zur=r(q2t,"TFAutoModelForTokenClassification"),q2t.forEach(t),d$e.forEach(t),ZRe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(a0.$$.fragment,ti),Wur=i(ti),Gc=n(ti,"P",{});var FQ=s(Gc);Qur=r(FQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),p2e=n(FQ,"CODE",{});var G2t=s(p2e);Hur=r(G2t,"from_pretrained()"),G2t.forEach(t),Uur=r(FQ,"class method or the "),_2e=n(FQ,"CODE",{});var O2t=s(_2e);Jur=r(O2t,"from_config()"),O2t.forEach(t),Yur=r(FQ,`class
method.`),FQ.forEach(t),Kur=i(ti),n0=n(ti,"P",{});var c$e=s(n0);Zur=r(c$e,"This class cannot be instantiated directly using "),u2e=n(c$e,"CODE",{});var X2t=s(u2e);e2r=r(X2t,"__init__()"),X2t.forEach(t),o2r=r(c$e," (throws an error)."),c$e.forEach(t),r2r=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);m(s0.$$.fragment,ai),t2r=i(ai),b2e=n(ai,"P",{});var V2t=s(b2e);a2r=r(V2t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),V2t.forEach(t),n2r=i(ai),Oc=n(ai,"P",{});var CQ=s(Oc);s2r=r(CQ,`Note:
Loading a model from its configuration file does `),v2e=n(CQ,"STRONG",{});var z2t=s(v2e);l2r=r(z2t,"not"),z2t.forEach(t),i2r=r(CQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),T2e=n(CQ,"CODE",{});var W2t=s(T2e);d2r=r(W2t,"from_pretrained()"),W2t.forEach(t),c2r=r(CQ,"to load the model weights."),CQ.forEach(t),f2r=i(ai),F2e=n(ai,"P",{});var Q2t=s(F2e);m2r=r(Q2t,"Examples:"),Q2t.forEach(t),g2r=i(ai),m(l0.$$.fragment,ai),ai.forEach(t),h2r=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);m(i0.$$.fragment,Ea),p2r=i(Ea),C2e=n(Ea,"P",{});var H2t=s(C2e);_2r=r(H2t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),H2t.forEach(t),u2r=i(Ea),yn=n(Ea,"P",{});var Y4=s(yn);b2r=r(Y4,"The model class to instantiate is selected based on the "),M2e=n(Y4,"CODE",{});var U2t=s(M2e);v2r=r(U2t,"model_type"),U2t.forEach(t),T2r=r(Y4,` property of the config object (either
passed as an argument or loaded from `),E2e=n(Y4,"CODE",{});var J2t=s(E2e);F2r=r(J2t,"pretrained_model_name_or_path"),J2t.forEach(t),C2r=r(Y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=n(Y4,"CODE",{});var Y2t=s(y2e);M2r=r(Y2t,"pretrained_model_name_or_path"),Y2t.forEach(t),E2r=r(Y4,":"),Y4.forEach(t),y2r=i(Ea),Y=n(Ea,"UL",{});var oe=s(Y);b9=n(oe,"LI",{});var H8e=s(b9);w2e=n(H8e,"STRONG",{});var K2t=s(w2e);w2r=r(K2t,"albert"),K2t.forEach(t),A2r=r(H8e," \u2014 "),yX=n(H8e,"A",{href:!0});var Z2t=s(yX);L2r=r(Z2t,"TFAlbertForTokenClassification"),Z2t.forEach(t),B2r=r(H8e," (ALBERT model)"),H8e.forEach(t),x2r=i(oe),v9=n(oe,"LI",{});var U8e=s(v9);A2e=n(U8e,"STRONG",{});var e1t=s(A2e);k2r=r(e1t,"bert"),e1t.forEach(t),R2r=r(U8e," \u2014 "),wX=n(U8e,"A",{href:!0});var o1t=s(wX);S2r=r(o1t,"TFBertForTokenClassification"),o1t.forEach(t),P2r=r(U8e," (BERT model)"),U8e.forEach(t),$2r=i(oe),T9=n(oe,"LI",{});var J8e=s(T9);L2e=n(J8e,"STRONG",{});var r1t=s(L2e);I2r=r(r1t,"camembert"),r1t.forEach(t),D2r=r(J8e," \u2014 "),AX=n(J8e,"A",{href:!0});var t1t=s(AX);N2r=r(t1t,"TFCamembertForTokenClassification"),t1t.forEach(t),j2r=r(J8e," (CamemBERT model)"),J8e.forEach(t),q2r=i(oe),F9=n(oe,"LI",{});var Y8e=s(F9);B2e=n(Y8e,"STRONG",{});var a1t=s(B2e);G2r=r(a1t,"convbert"),a1t.forEach(t),O2r=r(Y8e," \u2014 "),LX=n(Y8e,"A",{href:!0});var n1t=s(LX);X2r=r(n1t,"TFConvBertForTokenClassification"),n1t.forEach(t),V2r=r(Y8e," (ConvBERT model)"),Y8e.forEach(t),z2r=i(oe),C9=n(oe,"LI",{});var K8e=s(C9);x2e=n(K8e,"STRONG",{});var s1t=s(x2e);W2r=r(s1t,"deberta"),s1t.forEach(t),Q2r=r(K8e," \u2014 "),BX=n(K8e,"A",{href:!0});var l1t=s(BX);H2r=r(l1t,"TFDebertaForTokenClassification"),l1t.forEach(t),U2r=r(K8e," (DeBERTa model)"),K8e.forEach(t),J2r=i(oe),M9=n(oe,"LI",{});var Z8e=s(M9);k2e=n(Z8e,"STRONG",{});var i1t=s(k2e);Y2r=r(i1t,"deberta-v2"),i1t.forEach(t),K2r=r(Z8e," \u2014 "),xX=n(Z8e,"A",{href:!0});var d1t=s(xX);Z2r=r(d1t,"TFDebertaV2ForTokenClassification"),d1t.forEach(t),e1r=r(Z8e," (DeBERTa-v2 model)"),Z8e.forEach(t),o1r=i(oe),E9=n(oe,"LI",{});var eBe=s(E9);R2e=n(eBe,"STRONG",{});var c1t=s(R2e);r1r=r(c1t,"distilbert"),c1t.forEach(t),t1r=r(eBe," \u2014 "),kX=n(eBe,"A",{href:!0});var f1t=s(kX);a1r=r(f1t,"TFDistilBertForTokenClassification"),f1t.forEach(t),n1r=r(eBe," (DistilBERT model)"),eBe.forEach(t),s1r=i(oe),y9=n(oe,"LI",{});var oBe=s(y9);S2e=n(oBe,"STRONG",{});var m1t=s(S2e);l1r=r(m1t,"electra"),m1t.forEach(t),i1r=r(oBe," \u2014 "),RX=n(oBe,"A",{href:!0});var g1t=s(RX);d1r=r(g1t,"TFElectraForTokenClassification"),g1t.forEach(t),c1r=r(oBe," (ELECTRA model)"),oBe.forEach(t),f1r=i(oe),w9=n(oe,"LI",{});var rBe=s(w9);P2e=n(rBe,"STRONG",{});var h1t=s(P2e);m1r=r(h1t,"flaubert"),h1t.forEach(t),g1r=r(rBe," \u2014 "),SX=n(rBe,"A",{href:!0});var p1t=s(SX);h1r=r(p1t,"TFFlaubertForTokenClassification"),p1t.forEach(t),p1r=r(rBe," (FlauBERT model)"),rBe.forEach(t),_1r=i(oe),A9=n(oe,"LI",{});var tBe=s(A9);$2e=n(tBe,"STRONG",{});var _1t=s($2e);u1r=r(_1t,"funnel"),_1t.forEach(t),b1r=r(tBe," \u2014 "),PX=n(tBe,"A",{href:!0});var u1t=s(PX);v1r=r(u1t,"TFFunnelForTokenClassification"),u1t.forEach(t),T1r=r(tBe," (Funnel Transformer model)"),tBe.forEach(t),F1r=i(oe),L9=n(oe,"LI",{});var aBe=s(L9);I2e=n(aBe,"STRONG",{});var b1t=s(I2e);C1r=r(b1t,"layoutlm"),b1t.forEach(t),M1r=r(aBe," \u2014 "),$X=n(aBe,"A",{href:!0});var v1t=s($X);E1r=r(v1t,"TFLayoutLMForTokenClassification"),v1t.forEach(t),y1r=r(aBe," (LayoutLM model)"),aBe.forEach(t),w1r=i(oe),B9=n(oe,"LI",{});var nBe=s(B9);D2e=n(nBe,"STRONG",{});var T1t=s(D2e);A1r=r(T1t,"longformer"),T1t.forEach(t),L1r=r(nBe," \u2014 "),IX=n(nBe,"A",{href:!0});var F1t=s(IX);B1r=r(F1t,"TFLongformerForTokenClassification"),F1t.forEach(t),x1r=r(nBe," (Longformer model)"),nBe.forEach(t),k1r=i(oe),x9=n(oe,"LI",{});var sBe=s(x9);N2e=n(sBe,"STRONG",{});var C1t=s(N2e);R1r=r(C1t,"mobilebert"),C1t.forEach(t),S1r=r(sBe," \u2014 "),DX=n(sBe,"A",{href:!0});var M1t=s(DX);P1r=r(M1t,"TFMobileBertForTokenClassification"),M1t.forEach(t),$1r=r(sBe," (MobileBERT model)"),sBe.forEach(t),I1r=i(oe),k9=n(oe,"LI",{});var lBe=s(k9);j2e=n(lBe,"STRONG",{});var E1t=s(j2e);D1r=r(E1t,"mpnet"),E1t.forEach(t),N1r=r(lBe," \u2014 "),NX=n(lBe,"A",{href:!0});var y1t=s(NX);j1r=r(y1t,"TFMPNetForTokenClassification"),y1t.forEach(t),q1r=r(lBe," (MPNet model)"),lBe.forEach(t),G1r=i(oe),R9=n(oe,"LI",{});var iBe=s(R9);q2e=n(iBe,"STRONG",{});var w1t=s(q2e);O1r=r(w1t,"rembert"),w1t.forEach(t),X1r=r(iBe," \u2014 "),jX=n(iBe,"A",{href:!0});var A1t=s(jX);V1r=r(A1t,"TFRemBertForTokenClassification"),A1t.forEach(t),z1r=r(iBe," (RemBERT model)"),iBe.forEach(t),W1r=i(oe),S9=n(oe,"LI",{});var dBe=s(S9);G2e=n(dBe,"STRONG",{});var L1t=s(G2e);Q1r=r(L1t,"roberta"),L1t.forEach(t),H1r=r(dBe," \u2014 "),qX=n(dBe,"A",{href:!0});var B1t=s(qX);U1r=r(B1t,"TFRobertaForTokenClassification"),B1t.forEach(t),J1r=r(dBe," (RoBERTa model)"),dBe.forEach(t),Y1r=i(oe),P9=n(oe,"LI",{});var cBe=s(P9);O2e=n(cBe,"STRONG",{});var x1t=s(O2e);K1r=r(x1t,"roformer"),x1t.forEach(t),Z1r=r(cBe," \u2014 "),GX=n(cBe,"A",{href:!0});var k1t=s(GX);ebr=r(k1t,"TFRoFormerForTokenClassification"),k1t.forEach(t),obr=r(cBe," (RoFormer model)"),cBe.forEach(t),rbr=i(oe),$9=n(oe,"LI",{});var fBe=s($9);X2e=n(fBe,"STRONG",{});var R1t=s(X2e);tbr=r(R1t,"xlm"),R1t.forEach(t),abr=r(fBe," \u2014 "),OX=n(fBe,"A",{href:!0});var S1t=s(OX);nbr=r(S1t,"TFXLMForTokenClassification"),S1t.forEach(t),sbr=r(fBe," (XLM model)"),fBe.forEach(t),lbr=i(oe),I9=n(oe,"LI",{});var mBe=s(I9);V2e=n(mBe,"STRONG",{});var P1t=s(V2e);ibr=r(P1t,"xlm-roberta"),P1t.forEach(t),dbr=r(mBe," \u2014 "),XX=n(mBe,"A",{href:!0});var $1t=s(XX);cbr=r($1t,"TFXLMRobertaForTokenClassification"),$1t.forEach(t),fbr=r(mBe," (XLM-RoBERTa model)"),mBe.forEach(t),mbr=i(oe),D9=n(oe,"LI",{});var gBe=s(D9);z2e=n(gBe,"STRONG",{});var I1t=s(z2e);gbr=r(I1t,"xlnet"),I1t.forEach(t),hbr=r(gBe," \u2014 "),VX=n(gBe,"A",{href:!0});var D1t=s(VX);pbr=r(D1t,"TFXLNetForTokenClassification"),D1t.forEach(t),_br=r(gBe," (XLNet model)"),gBe.forEach(t),oe.forEach(t),ubr=i(Ea),W2e=n(Ea,"P",{});var N1t=s(W2e);bbr=r(N1t,"Examples:"),N1t.forEach(t),vbr=i(Ea),m(d0.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),eSe=i(c),Xc=n(c,"H2",{class:!0});var f$e=s(Xc);N9=n(f$e,"A",{id:!0,class:!0,href:!0});var j1t=s(N9);Q2e=n(j1t,"SPAN",{});var q1t=s(Q2e);m(c0.$$.fragment,q1t),q1t.forEach(t),j1t.forEach(t),Tbr=i(f$e),H2e=n(f$e,"SPAN",{});var G1t=s(H2e);Fbr=r(G1t,"TFAutoModelForQuestionAnswering"),G1t.forEach(t),f$e.forEach(t),oSe=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);m(f0.$$.fragment,ni),Cbr=i(ni),Vc=n(ni,"P",{});var MQ=s(Vc);Mbr=r(MQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),U2e=n(MQ,"CODE",{});var O1t=s(U2e);Ebr=r(O1t,"from_pretrained()"),O1t.forEach(t),ybr=r(MQ,"class method or the "),J2e=n(MQ,"CODE",{});var X1t=s(J2e);wbr=r(X1t,"from_config()"),X1t.forEach(t),Abr=r(MQ,`class
method.`),MQ.forEach(t),Lbr=i(ni),m0=n(ni,"P",{});var m$e=s(m0);Bbr=r(m$e,"This class cannot be instantiated directly using "),Y2e=n(m$e,"CODE",{});var V1t=s(Y2e);xbr=r(V1t,"__init__()"),V1t.forEach(t),kbr=r(m$e," (throws an error)."),m$e.forEach(t),Rbr=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(g0.$$.fragment,si),Sbr=i(si),K2e=n(si,"P",{});var z1t=s(K2e);Pbr=r(z1t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),z1t.forEach(t),$br=i(si),zc=n(si,"P",{});var EQ=s(zc);Ibr=r(EQ,`Note:
Loading a model from its configuration file does `),Z2e=n(EQ,"STRONG",{});var W1t=s(Z2e);Dbr=r(W1t,"not"),W1t.forEach(t),Nbr=r(EQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),e1e=n(EQ,"CODE",{});var Q1t=s(e1e);jbr=r(Q1t,"from_pretrained()"),Q1t.forEach(t),qbr=r(EQ,"to load the model weights."),EQ.forEach(t),Gbr=i(si),o1e=n(si,"P",{});var H1t=s(o1e);Obr=r(H1t,"Examples:"),H1t.forEach(t),Xbr=i(si),m(h0.$$.fragment,si),si.forEach(t),Vbr=i(ni),Eo=n(ni,"DIV",{class:!0});var ya=s(Eo);m(p0.$$.fragment,ya),zbr=i(ya),r1e=n(ya,"P",{});var U1t=s(r1e);Wbr=r(U1t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),U1t.forEach(t),Qbr=i(ya),wn=n(ya,"P",{});var K4=s(wn);Hbr=r(K4,"The model class to instantiate is selected based on the "),t1e=n(K4,"CODE",{});var J1t=s(t1e);Ubr=r(J1t,"model_type"),J1t.forEach(t),Jbr=r(K4,` property of the config object (either
passed as an argument or loaded from `),a1e=n(K4,"CODE",{});var Y1t=s(a1e);Ybr=r(Y1t,"pretrained_model_name_or_path"),Y1t.forEach(t),Kbr=r(K4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=n(K4,"CODE",{});var K1t=s(n1e);Zbr=r(K1t,"pretrained_model_name_or_path"),K1t.forEach(t),e3r=r(K4,":"),K4.forEach(t),o3r=i(ya),K=n(ya,"UL",{});var re=s(K);j9=n(re,"LI",{});var hBe=s(j9);s1e=n(hBe,"STRONG",{});var Z1t=s(s1e);r3r=r(Z1t,"albert"),Z1t.forEach(t),t3r=r(hBe," \u2014 "),zX=n(hBe,"A",{href:!0});var ebt=s(zX);a3r=r(ebt,"TFAlbertForQuestionAnswering"),ebt.forEach(t),n3r=r(hBe," (ALBERT model)"),hBe.forEach(t),s3r=i(re),q9=n(re,"LI",{});var pBe=s(q9);l1e=n(pBe,"STRONG",{});var obt=s(l1e);l3r=r(obt,"bert"),obt.forEach(t),i3r=r(pBe," \u2014 "),WX=n(pBe,"A",{href:!0});var rbt=s(WX);d3r=r(rbt,"TFBertForQuestionAnswering"),rbt.forEach(t),c3r=r(pBe," (BERT model)"),pBe.forEach(t),f3r=i(re),G9=n(re,"LI",{});var _Be=s(G9);i1e=n(_Be,"STRONG",{});var tbt=s(i1e);m3r=r(tbt,"camembert"),tbt.forEach(t),g3r=r(_Be," \u2014 "),QX=n(_Be,"A",{href:!0});var abt=s(QX);h3r=r(abt,"TFCamembertForQuestionAnswering"),abt.forEach(t),p3r=r(_Be," (CamemBERT model)"),_Be.forEach(t),_3r=i(re),O9=n(re,"LI",{});var uBe=s(O9);d1e=n(uBe,"STRONG",{});var nbt=s(d1e);u3r=r(nbt,"convbert"),nbt.forEach(t),b3r=r(uBe," \u2014 "),HX=n(uBe,"A",{href:!0});var sbt=s(HX);v3r=r(sbt,"TFConvBertForQuestionAnswering"),sbt.forEach(t),T3r=r(uBe," (ConvBERT model)"),uBe.forEach(t),F3r=i(re),X9=n(re,"LI",{});var bBe=s(X9);c1e=n(bBe,"STRONG",{});var lbt=s(c1e);C3r=r(lbt,"deberta"),lbt.forEach(t),M3r=r(bBe," \u2014 "),UX=n(bBe,"A",{href:!0});var ibt=s(UX);E3r=r(ibt,"TFDebertaForQuestionAnswering"),ibt.forEach(t),y3r=r(bBe," (DeBERTa model)"),bBe.forEach(t),w3r=i(re),V9=n(re,"LI",{});var vBe=s(V9);f1e=n(vBe,"STRONG",{});var dbt=s(f1e);A3r=r(dbt,"deberta-v2"),dbt.forEach(t),L3r=r(vBe," \u2014 "),JX=n(vBe,"A",{href:!0});var cbt=s(JX);B3r=r(cbt,"TFDebertaV2ForQuestionAnswering"),cbt.forEach(t),x3r=r(vBe," (DeBERTa-v2 model)"),vBe.forEach(t),k3r=i(re),z9=n(re,"LI",{});var TBe=s(z9);m1e=n(TBe,"STRONG",{});var fbt=s(m1e);R3r=r(fbt,"distilbert"),fbt.forEach(t),S3r=r(TBe," \u2014 "),YX=n(TBe,"A",{href:!0});var mbt=s(YX);P3r=r(mbt,"TFDistilBertForQuestionAnswering"),mbt.forEach(t),$3r=r(TBe," (DistilBERT model)"),TBe.forEach(t),I3r=i(re),W9=n(re,"LI",{});var FBe=s(W9);g1e=n(FBe,"STRONG",{});var gbt=s(g1e);D3r=r(gbt,"electra"),gbt.forEach(t),N3r=r(FBe," \u2014 "),KX=n(FBe,"A",{href:!0});var hbt=s(KX);j3r=r(hbt,"TFElectraForQuestionAnswering"),hbt.forEach(t),q3r=r(FBe," (ELECTRA model)"),FBe.forEach(t),G3r=i(re),Q9=n(re,"LI",{});var CBe=s(Q9);h1e=n(CBe,"STRONG",{});var pbt=s(h1e);O3r=r(pbt,"flaubert"),pbt.forEach(t),X3r=r(CBe," \u2014 "),ZX=n(CBe,"A",{href:!0});var _bt=s(ZX);V3r=r(_bt,"TFFlaubertForQuestionAnsweringSimple"),_bt.forEach(t),z3r=r(CBe," (FlauBERT model)"),CBe.forEach(t),W3r=i(re),H9=n(re,"LI",{});var MBe=s(H9);p1e=n(MBe,"STRONG",{});var ubt=s(p1e);Q3r=r(ubt,"funnel"),ubt.forEach(t),H3r=r(MBe," \u2014 "),eV=n(MBe,"A",{href:!0});var bbt=s(eV);U3r=r(bbt,"TFFunnelForQuestionAnswering"),bbt.forEach(t),J3r=r(MBe," (Funnel Transformer model)"),MBe.forEach(t),Y3r=i(re),U9=n(re,"LI",{});var EBe=s(U9);_1e=n(EBe,"STRONG",{});var vbt=s(_1e);K3r=r(vbt,"gptj"),vbt.forEach(t),Z3r=r(EBe," \u2014 "),oV=n(EBe,"A",{href:!0});var Tbt=s(oV);evr=r(Tbt,"TFGPTJForQuestionAnswering"),Tbt.forEach(t),ovr=r(EBe," (GPT-J model)"),EBe.forEach(t),rvr=i(re),J9=n(re,"LI",{});var yBe=s(J9);u1e=n(yBe,"STRONG",{});var Fbt=s(u1e);tvr=r(Fbt,"longformer"),Fbt.forEach(t),avr=r(yBe," \u2014 "),rV=n(yBe,"A",{href:!0});var Cbt=s(rV);nvr=r(Cbt,"TFLongformerForQuestionAnswering"),Cbt.forEach(t),svr=r(yBe," (Longformer model)"),yBe.forEach(t),lvr=i(re),Y9=n(re,"LI",{});var wBe=s(Y9);b1e=n(wBe,"STRONG",{});var Mbt=s(b1e);ivr=r(Mbt,"mobilebert"),Mbt.forEach(t),dvr=r(wBe," \u2014 "),tV=n(wBe,"A",{href:!0});var Ebt=s(tV);cvr=r(Ebt,"TFMobileBertForQuestionAnswering"),Ebt.forEach(t),fvr=r(wBe," (MobileBERT model)"),wBe.forEach(t),mvr=i(re),K9=n(re,"LI",{});var ABe=s(K9);v1e=n(ABe,"STRONG",{});var ybt=s(v1e);gvr=r(ybt,"mpnet"),ybt.forEach(t),hvr=r(ABe," \u2014 "),aV=n(ABe,"A",{href:!0});var wbt=s(aV);pvr=r(wbt,"TFMPNetForQuestionAnswering"),wbt.forEach(t),_vr=r(ABe," (MPNet model)"),ABe.forEach(t),uvr=i(re),Z9=n(re,"LI",{});var LBe=s(Z9);T1e=n(LBe,"STRONG",{});var Abt=s(T1e);bvr=r(Abt,"rembert"),Abt.forEach(t),vvr=r(LBe," \u2014 "),nV=n(LBe,"A",{href:!0});var Lbt=s(nV);Tvr=r(Lbt,"TFRemBertForQuestionAnswering"),Lbt.forEach(t),Fvr=r(LBe," (RemBERT model)"),LBe.forEach(t),Cvr=i(re),eC=n(re,"LI",{});var BBe=s(eC);F1e=n(BBe,"STRONG",{});var Bbt=s(F1e);Mvr=r(Bbt,"roberta"),Bbt.forEach(t),Evr=r(BBe," \u2014 "),sV=n(BBe,"A",{href:!0});var xbt=s(sV);yvr=r(xbt,"TFRobertaForQuestionAnswering"),xbt.forEach(t),wvr=r(BBe," (RoBERTa model)"),BBe.forEach(t),Avr=i(re),oC=n(re,"LI",{});var xBe=s(oC);C1e=n(xBe,"STRONG",{});var kbt=s(C1e);Lvr=r(kbt,"roformer"),kbt.forEach(t),Bvr=r(xBe," \u2014 "),lV=n(xBe,"A",{href:!0});var Rbt=s(lV);xvr=r(Rbt,"TFRoFormerForQuestionAnswering"),Rbt.forEach(t),kvr=r(xBe," (RoFormer model)"),xBe.forEach(t),Rvr=i(re),rC=n(re,"LI",{});var kBe=s(rC);M1e=n(kBe,"STRONG",{});var Sbt=s(M1e);Svr=r(Sbt,"xlm"),Sbt.forEach(t),Pvr=r(kBe," \u2014 "),iV=n(kBe,"A",{href:!0});var Pbt=s(iV);$vr=r(Pbt,"TFXLMForQuestionAnsweringSimple"),Pbt.forEach(t),Ivr=r(kBe," (XLM model)"),kBe.forEach(t),Dvr=i(re),tC=n(re,"LI",{});var RBe=s(tC);E1e=n(RBe,"STRONG",{});var $bt=s(E1e);Nvr=r($bt,"xlm-roberta"),$bt.forEach(t),jvr=r(RBe," \u2014 "),dV=n(RBe,"A",{href:!0});var Ibt=s(dV);qvr=r(Ibt,"TFXLMRobertaForQuestionAnswering"),Ibt.forEach(t),Gvr=r(RBe," (XLM-RoBERTa model)"),RBe.forEach(t),Ovr=i(re),aC=n(re,"LI",{});var SBe=s(aC);y1e=n(SBe,"STRONG",{});var Dbt=s(y1e);Xvr=r(Dbt,"xlnet"),Dbt.forEach(t),Vvr=r(SBe," \u2014 "),cV=n(SBe,"A",{href:!0});var Nbt=s(cV);zvr=r(Nbt,"TFXLNetForQuestionAnsweringSimple"),Nbt.forEach(t),Wvr=r(SBe," (XLNet model)"),SBe.forEach(t),re.forEach(t),Qvr=i(ya),w1e=n(ya,"P",{});var jbt=s(w1e);Hvr=r(jbt,"Examples:"),jbt.forEach(t),Uvr=i(ya),m(_0.$$.fragment,ya),ya.forEach(t),ni.forEach(t),rSe=i(c),Wc=n(c,"H2",{class:!0});var g$e=s(Wc);nC=n(g$e,"A",{id:!0,class:!0,href:!0});var qbt=s(nC);A1e=n(qbt,"SPAN",{});var Gbt=s(A1e);m(u0.$$.fragment,Gbt),Gbt.forEach(t),qbt.forEach(t),Jvr=i(g$e),L1e=n(g$e,"SPAN",{});var Obt=s(L1e);Yvr=r(Obt,"TFAutoModelForVision2Seq"),Obt.forEach(t),g$e.forEach(t),tSe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(b0.$$.fragment,li),Kvr=i(li),Qc=n(li,"P",{});var yQ=s(Qc);Zvr=r(yQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),B1e=n(yQ,"CODE",{});var Xbt=s(B1e);e6r=r(Xbt,"from_pretrained()"),Xbt.forEach(t),o6r=r(yQ,"class method or the "),x1e=n(yQ,"CODE",{});var Vbt=s(x1e);r6r=r(Vbt,"from_config()"),Vbt.forEach(t),t6r=r(yQ,`class
method.`),yQ.forEach(t),a6r=i(li),v0=n(li,"P",{});var h$e=s(v0);n6r=r(h$e,"This class cannot be instantiated directly using "),k1e=n(h$e,"CODE",{});var zbt=s(k1e);s6r=r(zbt,"__init__()"),zbt.forEach(t),l6r=r(h$e," (throws an error)."),h$e.forEach(t),i6r=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(T0.$$.fragment,ii),d6r=i(ii),R1e=n(ii,"P",{});var Wbt=s(R1e);c6r=r(Wbt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Wbt.forEach(t),f6r=i(ii),Hc=n(ii,"P",{});var wQ=s(Hc);m6r=r(wQ,`Note:
Loading a model from its configuration file does `),S1e=n(wQ,"STRONG",{});var Qbt=s(S1e);g6r=r(Qbt,"not"),Qbt.forEach(t),h6r=r(wQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),P1e=n(wQ,"CODE",{});var Hbt=s(P1e);p6r=r(Hbt,"from_pretrained()"),Hbt.forEach(t),_6r=r(wQ,"to load the model weights."),wQ.forEach(t),u6r=i(ii),$1e=n(ii,"P",{});var Ubt=s($1e);b6r=r(Ubt,"Examples:"),Ubt.forEach(t),v6r=i(ii),m(F0.$$.fragment,ii),ii.forEach(t),T6r=i(li),yo=n(li,"DIV",{class:!0});var wa=s(yo);m(C0.$$.fragment,wa),F6r=i(wa),I1e=n(wa,"P",{});var Jbt=s(I1e);C6r=r(Jbt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Jbt.forEach(t),M6r=i(wa),An=n(wa,"P",{});var Z4=s(An);E6r=r(Z4,"The model class to instantiate is selected based on the "),D1e=n(Z4,"CODE",{});var Ybt=s(D1e);y6r=r(Ybt,"model_type"),Ybt.forEach(t),w6r=r(Z4,` property of the config object (either
passed as an argument or loaded from `),N1e=n(Z4,"CODE",{});var Kbt=s(N1e);A6r=r(Kbt,"pretrained_model_name_or_path"),Kbt.forEach(t),L6r=r(Z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=n(Z4,"CODE",{});var Zbt=s(j1e);B6r=r(Zbt,"pretrained_model_name_or_path"),Zbt.forEach(t),x6r=r(Z4,":"),Z4.forEach(t),k6r=i(wa),q1e=n(wa,"UL",{});var e3t=s(q1e);sC=n(e3t,"LI",{});var PBe=s(sC);G1e=n(PBe,"STRONG",{});var o3t=s(G1e);R6r=r(o3t,"vision-encoder-decoder"),o3t.forEach(t),S6r=r(PBe," \u2014 "),fV=n(PBe,"A",{href:!0});var r3t=s(fV);P6r=r(r3t,"TFVisionEncoderDecoderModel"),r3t.forEach(t),$6r=r(PBe," (Vision Encoder decoder model)"),PBe.forEach(t),e3t.forEach(t),I6r=i(wa),O1e=n(wa,"P",{});var t3t=s(O1e);D6r=r(t3t,"Examples:"),t3t.forEach(t),N6r=i(wa),m(M0.$$.fragment,wa),wa.forEach(t),li.forEach(t),aSe=i(c),Uc=n(c,"H2",{class:!0});var p$e=s(Uc);lC=n(p$e,"A",{id:!0,class:!0,href:!0});var a3t=s(lC);X1e=n(a3t,"SPAN",{});var n3t=s(X1e);m(E0.$$.fragment,n3t),n3t.forEach(t),a3t.forEach(t),j6r=i(p$e),V1e=n(p$e,"SPAN",{});var s3t=s(V1e);q6r=r(s3t,"TFAutoModelForSpeechSeq2Seq"),s3t.forEach(t),p$e.forEach(t),nSe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(y0.$$.fragment,di),G6r=i(di),Jc=n(di,"P",{});var AQ=s(Jc);O6r=r(AQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),z1e=n(AQ,"CODE",{});var l3t=s(z1e);X6r=r(l3t,"from_pretrained()"),l3t.forEach(t),V6r=r(AQ,"class method or the "),W1e=n(AQ,"CODE",{});var i3t=s(W1e);z6r=r(i3t,"from_config()"),i3t.forEach(t),W6r=r(AQ,`class
method.`),AQ.forEach(t),Q6r=i(di),w0=n(di,"P",{});var _$e=s(w0);H6r=r(_$e,"This class cannot be instantiated directly using "),Q1e=n(_$e,"CODE",{});var d3t=s(Q1e);U6r=r(d3t,"__init__()"),d3t.forEach(t),J6r=r(_$e," (throws an error)."),_$e.forEach(t),Y6r=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);m(A0.$$.fragment,ci),K6r=i(ci),H1e=n(ci,"P",{});var c3t=s(H1e);Z6r=r(c3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),c3t.forEach(t),eTr=i(ci),Yc=n(ci,"P",{});var LQ=s(Yc);oTr=r(LQ,`Note:
Loading a model from its configuration file does `),U1e=n(LQ,"STRONG",{});var f3t=s(U1e);rTr=r(f3t,"not"),f3t.forEach(t),tTr=r(LQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),J1e=n(LQ,"CODE",{});var m3t=s(J1e);aTr=r(m3t,"from_pretrained()"),m3t.forEach(t),nTr=r(LQ,"to load the model weights."),LQ.forEach(t),sTr=i(ci),Y1e=n(ci,"P",{});var g3t=s(Y1e);lTr=r(g3t,"Examples:"),g3t.forEach(t),iTr=i(ci),m(L0.$$.fragment,ci),ci.forEach(t),dTr=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);m(B0.$$.fragment,Aa),cTr=i(Aa),K1e=n(Aa,"P",{});var h3t=s(K1e);fTr=r(h3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),h3t.forEach(t),mTr=i(Aa),Ln=n(Aa,"P",{});var eE=s(Ln);gTr=r(eE,"The model class to instantiate is selected based on the "),Z1e=n(eE,"CODE",{});var p3t=s(Z1e);hTr=r(p3t,"model_type"),p3t.forEach(t),pTr=r(eE,` property of the config object (either
passed as an argument or loaded from `),ebe=n(eE,"CODE",{});var _3t=s(ebe);_Tr=r(_3t,"pretrained_model_name_or_path"),_3t.forEach(t),uTr=r(eE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=n(eE,"CODE",{});var u3t=s(obe);bTr=r(u3t,"pretrained_model_name_or_path"),u3t.forEach(t),vTr=r(eE,":"),eE.forEach(t),TTr=i(Aa),rbe=n(Aa,"UL",{});var b3t=s(rbe);iC=n(b3t,"LI",{});var $Be=s(iC);tbe=n($Be,"STRONG",{});var v3t=s(tbe);FTr=r(v3t,"speech_to_text"),v3t.forEach(t),CTr=r($Be," \u2014 "),mV=n($Be,"A",{href:!0});var T3t=s(mV);MTr=r(T3t,"TFSpeech2TextForConditionalGeneration"),T3t.forEach(t),ETr=r($Be," (Speech2Text model)"),$Be.forEach(t),b3t.forEach(t),yTr=i(Aa),abe=n(Aa,"P",{});var F3t=s(abe);wTr=r(F3t,"Examples:"),F3t.forEach(t),ATr=i(Aa),m(x0.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),sSe=i(c),Kc=n(c,"H2",{class:!0});var u$e=s(Kc);dC=n(u$e,"A",{id:!0,class:!0,href:!0});var C3t=s(dC);nbe=n(C3t,"SPAN",{});var M3t=s(nbe);m(k0.$$.fragment,M3t),M3t.forEach(t),C3t.forEach(t),LTr=i(u$e),sbe=n(u$e,"SPAN",{});var E3t=s(sbe);BTr=r(E3t,"FlaxAutoModel"),E3t.forEach(t),u$e.forEach(t),lSe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(R0.$$.fragment,fi),xTr=i(fi),Zc=n(fi,"P",{});var BQ=s(Zc);kTr=r(BQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lbe=n(BQ,"CODE",{});var y3t=s(lbe);RTr=r(y3t,"from_pretrained()"),y3t.forEach(t),STr=r(BQ,"class method or the "),ibe=n(BQ,"CODE",{});var w3t=s(ibe);PTr=r(w3t,"from_config()"),w3t.forEach(t),$Tr=r(BQ,`class
method.`),BQ.forEach(t),ITr=i(fi),S0=n(fi,"P",{});var b$e=s(S0);DTr=r(b$e,"This class cannot be instantiated directly using "),dbe=n(b$e,"CODE",{});var A3t=s(dbe);NTr=r(A3t,"__init__()"),A3t.forEach(t),jTr=r(b$e," (throws an error)."),b$e.forEach(t),qTr=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m(P0.$$.fragment,mi),GTr=i(mi),cbe=n(mi,"P",{});var L3t=s(cbe);OTr=r(L3t,"Instantiates one of the base model classes of the library from a configuration."),L3t.forEach(t),XTr=i(mi),ef=n(mi,"P",{});var xQ=s(ef);VTr=r(xQ,`Note:
Loading a model from its configuration file does `),fbe=n(xQ,"STRONG",{});var B3t=s(fbe);zTr=r(B3t,"not"),B3t.forEach(t),WTr=r(xQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mbe=n(xQ,"CODE",{});var x3t=s(mbe);QTr=r(x3t,"from_pretrained()"),x3t.forEach(t),HTr=r(xQ,"to load the model weights."),xQ.forEach(t),UTr=i(mi),gbe=n(mi,"P",{});var k3t=s(gbe);JTr=r(k3t,"Examples:"),k3t.forEach(t),YTr=i(mi),m($0.$$.fragment,mi),mi.forEach(t),KTr=i(fi),Ao=n(fi,"DIV",{class:!0});var La=s(Ao);m(I0.$$.fragment,La),ZTr=i(La),hbe=n(La,"P",{});var R3t=s(hbe);eFr=r(R3t,"Instantiate one of the base model classes of the library from a pretrained model."),R3t.forEach(t),oFr=i(La),Bn=n(La,"P",{});var oE=s(Bn);rFr=r(oE,"The model class to instantiate is selected based on the "),pbe=n(oE,"CODE",{});var S3t=s(pbe);tFr=r(S3t,"model_type"),S3t.forEach(t),aFr=r(oE,` property of the config object (either
passed as an argument or loaded from `),_be=n(oE,"CODE",{});var P3t=s(_be);nFr=r(P3t,"pretrained_model_name_or_path"),P3t.forEach(t),sFr=r(oE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=n(oE,"CODE",{});var $3t=s(ube);lFr=r($3t,"pretrained_model_name_or_path"),$3t.forEach(t),iFr=r(oE,":"),oE.forEach(t),dFr=i(La),z=n(La,"UL",{});var Q=s(z);cC=n(Q,"LI",{});var IBe=s(cC);bbe=n(IBe,"STRONG",{});var I3t=s(bbe);cFr=r(I3t,"albert"),I3t.forEach(t),fFr=r(IBe," \u2014 "),gV=n(IBe,"A",{href:!0});var D3t=s(gV);mFr=r(D3t,"FlaxAlbertModel"),D3t.forEach(t),gFr=r(IBe," (ALBERT model)"),IBe.forEach(t),hFr=i(Q),fC=n(Q,"LI",{});var DBe=s(fC);vbe=n(DBe,"STRONG",{});var N3t=s(vbe);pFr=r(N3t,"bart"),N3t.forEach(t),_Fr=r(DBe," \u2014 "),hV=n(DBe,"A",{href:!0});var j3t=s(hV);uFr=r(j3t,"FlaxBartModel"),j3t.forEach(t),bFr=r(DBe," (BART model)"),DBe.forEach(t),vFr=i(Q),mC=n(Q,"LI",{});var NBe=s(mC);Tbe=n(NBe,"STRONG",{});var q3t=s(Tbe);TFr=r(q3t,"beit"),q3t.forEach(t),FFr=r(NBe," \u2014 "),pV=n(NBe,"A",{href:!0});var G3t=s(pV);CFr=r(G3t,"FlaxBeitModel"),G3t.forEach(t),MFr=r(NBe," (BEiT model)"),NBe.forEach(t),EFr=i(Q),gC=n(Q,"LI",{});var jBe=s(gC);Fbe=n(jBe,"STRONG",{});var O3t=s(Fbe);yFr=r(O3t,"bert"),O3t.forEach(t),wFr=r(jBe," \u2014 "),_V=n(jBe,"A",{href:!0});var X3t=s(_V);AFr=r(X3t,"FlaxBertModel"),X3t.forEach(t),LFr=r(jBe," (BERT model)"),jBe.forEach(t),BFr=i(Q),hC=n(Q,"LI",{});var qBe=s(hC);Cbe=n(qBe,"STRONG",{});var V3t=s(Cbe);xFr=r(V3t,"big_bird"),V3t.forEach(t),kFr=r(qBe," \u2014 "),uV=n(qBe,"A",{href:!0});var z3t=s(uV);RFr=r(z3t,"FlaxBigBirdModel"),z3t.forEach(t),SFr=r(qBe," (BigBird model)"),qBe.forEach(t),PFr=i(Q),pC=n(Q,"LI",{});var GBe=s(pC);Mbe=n(GBe,"STRONG",{});var W3t=s(Mbe);$Fr=r(W3t,"blenderbot"),W3t.forEach(t),IFr=r(GBe," \u2014 "),bV=n(GBe,"A",{href:!0});var Q3t=s(bV);DFr=r(Q3t,"FlaxBlenderbotModel"),Q3t.forEach(t),NFr=r(GBe," (Blenderbot model)"),GBe.forEach(t),jFr=i(Q),_C=n(Q,"LI",{});var OBe=s(_C);Ebe=n(OBe,"STRONG",{});var H3t=s(Ebe);qFr=r(H3t,"blenderbot-small"),H3t.forEach(t),GFr=r(OBe," \u2014 "),vV=n(OBe,"A",{href:!0});var U3t=s(vV);OFr=r(U3t,"FlaxBlenderbotSmallModel"),U3t.forEach(t),XFr=r(OBe," (BlenderbotSmall model)"),OBe.forEach(t),VFr=i(Q),uC=n(Q,"LI",{});var XBe=s(uC);ybe=n(XBe,"STRONG",{});var J3t=s(ybe);zFr=r(J3t,"clip"),J3t.forEach(t),WFr=r(XBe," \u2014 "),TV=n(XBe,"A",{href:!0});var Y3t=s(TV);QFr=r(Y3t,"FlaxCLIPModel"),Y3t.forEach(t),HFr=r(XBe," (CLIP model)"),XBe.forEach(t),UFr=i(Q),bC=n(Q,"LI",{});var VBe=s(bC);wbe=n(VBe,"STRONG",{});var K3t=s(wbe);JFr=r(K3t,"distilbert"),K3t.forEach(t),YFr=r(VBe," \u2014 "),FV=n(VBe,"A",{href:!0});var Z3t=s(FV);KFr=r(Z3t,"FlaxDistilBertModel"),Z3t.forEach(t),ZFr=r(VBe," (DistilBERT model)"),VBe.forEach(t),e9r=i(Q),vC=n(Q,"LI",{});var zBe=s(vC);Abe=n(zBe,"STRONG",{});var evt=s(Abe);o9r=r(evt,"electra"),evt.forEach(t),r9r=r(zBe," \u2014 "),CV=n(zBe,"A",{href:!0});var ovt=s(CV);t9r=r(ovt,"FlaxElectraModel"),ovt.forEach(t),a9r=r(zBe," (ELECTRA model)"),zBe.forEach(t),n9r=i(Q),TC=n(Q,"LI",{});var WBe=s(TC);Lbe=n(WBe,"STRONG",{});var rvt=s(Lbe);s9r=r(rvt,"gpt2"),rvt.forEach(t),l9r=r(WBe," \u2014 "),MV=n(WBe,"A",{href:!0});var tvt=s(MV);i9r=r(tvt,"FlaxGPT2Model"),tvt.forEach(t),d9r=r(WBe," (OpenAI GPT-2 model)"),WBe.forEach(t),c9r=i(Q),FC=n(Q,"LI",{});var QBe=s(FC);Bbe=n(QBe,"STRONG",{});var avt=s(Bbe);f9r=r(avt,"gpt_neo"),avt.forEach(t),m9r=r(QBe," \u2014 "),EV=n(QBe,"A",{href:!0});var nvt=s(EV);g9r=r(nvt,"FlaxGPTNeoModel"),nvt.forEach(t),h9r=r(QBe," (GPT Neo model)"),QBe.forEach(t),p9r=i(Q),CC=n(Q,"LI",{});var HBe=s(CC);xbe=n(HBe,"STRONG",{});var svt=s(xbe);_9r=r(svt,"gptj"),svt.forEach(t),u9r=r(HBe," \u2014 "),yV=n(HBe,"A",{href:!0});var lvt=s(yV);b9r=r(lvt,"FlaxGPTJModel"),lvt.forEach(t),v9r=r(HBe," (GPT-J model)"),HBe.forEach(t),T9r=i(Q),MC=n(Q,"LI",{});var UBe=s(MC);kbe=n(UBe,"STRONG",{});var ivt=s(kbe);F9r=r(ivt,"marian"),ivt.forEach(t),C9r=r(UBe," \u2014 "),wV=n(UBe,"A",{href:!0});var dvt=s(wV);M9r=r(dvt,"FlaxMarianModel"),dvt.forEach(t),E9r=r(UBe," (Marian model)"),UBe.forEach(t),y9r=i(Q),EC=n(Q,"LI",{});var JBe=s(EC);Rbe=n(JBe,"STRONG",{});var cvt=s(Rbe);w9r=r(cvt,"mbart"),cvt.forEach(t),A9r=r(JBe," \u2014 "),AV=n(JBe,"A",{href:!0});var fvt=s(AV);L9r=r(fvt,"FlaxMBartModel"),fvt.forEach(t),B9r=r(JBe," (mBART model)"),JBe.forEach(t),x9r=i(Q),yC=n(Q,"LI",{});var YBe=s(yC);Sbe=n(YBe,"STRONG",{});var mvt=s(Sbe);k9r=r(mvt,"mt5"),mvt.forEach(t),R9r=r(YBe," \u2014 "),LV=n(YBe,"A",{href:!0});var gvt=s(LV);S9r=r(gvt,"FlaxMT5Model"),gvt.forEach(t),P9r=r(YBe," (mT5 model)"),YBe.forEach(t),$9r=i(Q),wC=n(Q,"LI",{});var KBe=s(wC);Pbe=n(KBe,"STRONG",{});var hvt=s(Pbe);I9r=r(hvt,"pegasus"),hvt.forEach(t),D9r=r(KBe," \u2014 "),BV=n(KBe,"A",{href:!0});var pvt=s(BV);N9r=r(pvt,"FlaxPegasusModel"),pvt.forEach(t),j9r=r(KBe," (Pegasus model)"),KBe.forEach(t),q9r=i(Q),AC=n(Q,"LI",{});var ZBe=s(AC);$be=n(ZBe,"STRONG",{});var _vt=s($be);G9r=r(_vt,"roberta"),_vt.forEach(t),O9r=r(ZBe," \u2014 "),xV=n(ZBe,"A",{href:!0});var uvt=s(xV);X9r=r(uvt,"FlaxRobertaModel"),uvt.forEach(t),V9r=r(ZBe," (RoBERTa model)"),ZBe.forEach(t),z9r=i(Q),LC=n(Q,"LI",{});var exe=s(LC);Ibe=n(exe,"STRONG",{});var bvt=s(Ibe);W9r=r(bvt,"roformer"),bvt.forEach(t),Q9r=r(exe," \u2014 "),kV=n(exe,"A",{href:!0});var vvt=s(kV);H9r=r(vvt,"FlaxRoFormerModel"),vvt.forEach(t),U9r=r(exe," (RoFormer model)"),exe.forEach(t),J9r=i(Q),BC=n(Q,"LI",{});var oxe=s(BC);Dbe=n(oxe,"STRONG",{});var Tvt=s(Dbe);Y9r=r(Tvt,"t5"),Tvt.forEach(t),K9r=r(oxe," \u2014 "),RV=n(oxe,"A",{href:!0});var Fvt=s(RV);Z9r=r(Fvt,"FlaxT5Model"),Fvt.forEach(t),eCr=r(oxe," (T5 model)"),oxe.forEach(t),oCr=i(Q),xC=n(Q,"LI",{});var rxe=s(xC);Nbe=n(rxe,"STRONG",{});var Cvt=s(Nbe);rCr=r(Cvt,"vision-text-dual-encoder"),Cvt.forEach(t),tCr=r(rxe," \u2014 "),SV=n(rxe,"A",{href:!0});var Mvt=s(SV);aCr=r(Mvt,"FlaxVisionTextDualEncoderModel"),Mvt.forEach(t),nCr=r(rxe," (VisionTextDualEncoder model)"),rxe.forEach(t),sCr=i(Q),kC=n(Q,"LI",{});var txe=s(kC);jbe=n(txe,"STRONG",{});var Evt=s(jbe);lCr=r(Evt,"vit"),Evt.forEach(t),iCr=r(txe," \u2014 "),PV=n(txe,"A",{href:!0});var yvt=s(PV);dCr=r(yvt,"FlaxViTModel"),yvt.forEach(t),cCr=r(txe," (ViT model)"),txe.forEach(t),fCr=i(Q),RC=n(Q,"LI",{});var axe=s(RC);qbe=n(axe,"STRONG",{});var wvt=s(qbe);mCr=r(wvt,"wav2vec2"),wvt.forEach(t),gCr=r(axe," \u2014 "),$V=n(axe,"A",{href:!0});var Avt=s($V);hCr=r(Avt,"FlaxWav2Vec2Model"),Avt.forEach(t),pCr=r(axe," (Wav2Vec2 model)"),axe.forEach(t),_Cr=i(Q),SC=n(Q,"LI",{});var nxe=s(SC);Gbe=n(nxe,"STRONG",{});var Lvt=s(Gbe);uCr=r(Lvt,"xglm"),Lvt.forEach(t),bCr=r(nxe," \u2014 "),IV=n(nxe,"A",{href:!0});var Bvt=s(IV);vCr=r(Bvt,"FlaxXGLMModel"),Bvt.forEach(t),TCr=r(nxe," (XGLM model)"),nxe.forEach(t),FCr=i(Q),PC=n(Q,"LI",{});var sxe=s(PC);Obe=n(sxe,"STRONG",{});var xvt=s(Obe);CCr=r(xvt,"xlm-roberta"),xvt.forEach(t),MCr=r(sxe," \u2014 "),DV=n(sxe,"A",{href:!0});var kvt=s(DV);ECr=r(kvt,"FlaxXLMRobertaModel"),kvt.forEach(t),yCr=r(sxe," (XLM-RoBERTa model)"),sxe.forEach(t),Q.forEach(t),wCr=i(La),Xbe=n(La,"P",{});var Rvt=s(Xbe);ACr=r(Rvt,"Examples:"),Rvt.forEach(t),LCr=i(La),m(D0.$$.fragment,La),La.forEach(t),fi.forEach(t),iSe=i(c),of=n(c,"H2",{class:!0});var v$e=s(of);$C=n(v$e,"A",{id:!0,class:!0,href:!0});var Svt=s($C);Vbe=n(Svt,"SPAN",{});var Pvt=s(Vbe);m(N0.$$.fragment,Pvt),Pvt.forEach(t),Svt.forEach(t),BCr=i(v$e),zbe=n(v$e,"SPAN",{});var $vt=s(zbe);xCr=r($vt,"FlaxAutoModelForCausalLM"),$vt.forEach(t),v$e.forEach(t),dSe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m(j0.$$.fragment,gi),kCr=i(gi),rf=n(gi,"P",{});var kQ=s(rf);RCr=r(kQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Wbe=n(kQ,"CODE",{});var Ivt=s(Wbe);SCr=r(Ivt,"from_pretrained()"),Ivt.forEach(t),PCr=r(kQ,"class method or the "),Qbe=n(kQ,"CODE",{});var Dvt=s(Qbe);$Cr=r(Dvt,"from_config()"),Dvt.forEach(t),ICr=r(kQ,`class
method.`),kQ.forEach(t),DCr=i(gi),q0=n(gi,"P",{});var T$e=s(q0);NCr=r(T$e,"This class cannot be instantiated directly using "),Hbe=n(T$e,"CODE",{});var Nvt=s(Hbe);jCr=r(Nvt,"__init__()"),Nvt.forEach(t),qCr=r(T$e," (throws an error)."),T$e.forEach(t),GCr=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m(G0.$$.fragment,hi),OCr=i(hi),Ube=n(hi,"P",{});var jvt=s(Ube);XCr=r(jvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),jvt.forEach(t),VCr=i(hi),tf=n(hi,"P",{});var RQ=s(tf);zCr=r(RQ,`Note:
Loading a model from its configuration file does `),Jbe=n(RQ,"STRONG",{});var qvt=s(Jbe);WCr=r(qvt,"not"),qvt.forEach(t),QCr=r(RQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ybe=n(RQ,"CODE",{});var Gvt=s(Ybe);HCr=r(Gvt,"from_pretrained()"),Gvt.forEach(t),UCr=r(RQ,"to load the model weights."),RQ.forEach(t),JCr=i(hi),Kbe=n(hi,"P",{});var Ovt=s(Kbe);YCr=r(Ovt,"Examples:"),Ovt.forEach(t),KCr=i(hi),m(O0.$$.fragment,hi),hi.forEach(t),ZCr=i(gi),Lo=n(gi,"DIV",{class:!0});var Ba=s(Lo);m(X0.$$.fragment,Ba),eMr=i(Ba),Zbe=n(Ba,"P",{});var Xvt=s(Zbe);oMr=r(Xvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Xvt.forEach(t),rMr=i(Ba),xn=n(Ba,"P",{});var rE=s(xn);tMr=r(rE,"The model class to instantiate is selected based on the "),e3e=n(rE,"CODE",{});var Vvt=s(e3e);aMr=r(Vvt,"model_type"),Vvt.forEach(t),nMr=r(rE,` property of the config object (either
passed as an argument or loaded from `),o3e=n(rE,"CODE",{});var zvt=s(o3e);sMr=r(zvt,"pretrained_model_name_or_path"),zvt.forEach(t),lMr=r(rE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r3e=n(rE,"CODE",{});var Wvt=s(r3e);iMr=r(Wvt,"pretrained_model_name_or_path"),Wvt.forEach(t),dMr=r(rE,":"),rE.forEach(t),cMr=i(Ba),ca=n(Ba,"UL",{});var pi=s(ca);IC=n(pi,"LI",{});var lxe=s(IC);t3e=n(lxe,"STRONG",{});var Qvt=s(t3e);fMr=r(Qvt,"bart"),Qvt.forEach(t),mMr=r(lxe," \u2014 "),NV=n(lxe,"A",{href:!0});var Hvt=s(NV);gMr=r(Hvt,"FlaxBartForCausalLM"),Hvt.forEach(t),hMr=r(lxe," (BART model)"),lxe.forEach(t),pMr=i(pi),DC=n(pi,"LI",{});var ixe=s(DC);a3e=n(ixe,"STRONG",{});var Uvt=s(a3e);_Mr=r(Uvt,"gpt2"),Uvt.forEach(t),uMr=r(ixe," \u2014 "),jV=n(ixe,"A",{href:!0});var Jvt=s(jV);bMr=r(Jvt,"FlaxGPT2LMHeadModel"),Jvt.forEach(t),vMr=r(ixe," (OpenAI GPT-2 model)"),ixe.forEach(t),TMr=i(pi),NC=n(pi,"LI",{});var dxe=s(NC);n3e=n(dxe,"STRONG",{});var Yvt=s(n3e);FMr=r(Yvt,"gpt_neo"),Yvt.forEach(t),CMr=r(dxe," \u2014 "),qV=n(dxe,"A",{href:!0});var Kvt=s(qV);MMr=r(Kvt,"FlaxGPTNeoForCausalLM"),Kvt.forEach(t),EMr=r(dxe," (GPT Neo model)"),dxe.forEach(t),yMr=i(pi),jC=n(pi,"LI",{});var cxe=s(jC);s3e=n(cxe,"STRONG",{});var Zvt=s(s3e);wMr=r(Zvt,"gptj"),Zvt.forEach(t),AMr=r(cxe," \u2014 "),GV=n(cxe,"A",{href:!0});var e6t=s(GV);LMr=r(e6t,"FlaxGPTJForCausalLM"),e6t.forEach(t),BMr=r(cxe," (GPT-J model)"),cxe.forEach(t),xMr=i(pi),qC=n(pi,"LI",{});var fxe=s(qC);l3e=n(fxe,"STRONG",{});var o6t=s(l3e);kMr=r(o6t,"xglm"),o6t.forEach(t),RMr=r(fxe," \u2014 "),OV=n(fxe,"A",{href:!0});var r6t=s(OV);SMr=r(r6t,"FlaxXGLMForCausalLM"),r6t.forEach(t),PMr=r(fxe," (XGLM model)"),fxe.forEach(t),pi.forEach(t),$Mr=i(Ba),i3e=n(Ba,"P",{});var t6t=s(i3e);IMr=r(t6t,"Examples:"),t6t.forEach(t),DMr=i(Ba),m(V0.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),cSe=i(c),af=n(c,"H2",{class:!0});var F$e=s(af);GC=n(F$e,"A",{id:!0,class:!0,href:!0});var a6t=s(GC);d3e=n(a6t,"SPAN",{});var n6t=s(d3e);m(z0.$$.fragment,n6t),n6t.forEach(t),a6t.forEach(t),NMr=i(F$e),c3e=n(F$e,"SPAN",{});var s6t=s(c3e);jMr=r(s6t,"FlaxAutoModelForPreTraining"),s6t.forEach(t),F$e.forEach(t),fSe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(W0.$$.fragment,_i),qMr=i(_i),nf=n(_i,"P",{});var SQ=s(nf);GMr=r(SQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),f3e=n(SQ,"CODE",{});var l6t=s(f3e);OMr=r(l6t,"from_pretrained()"),l6t.forEach(t),XMr=r(SQ,"class method or the "),m3e=n(SQ,"CODE",{});var i6t=s(m3e);VMr=r(i6t,"from_config()"),i6t.forEach(t),zMr=r(SQ,`class
method.`),SQ.forEach(t),WMr=i(_i),Q0=n(_i,"P",{});var C$e=s(Q0);QMr=r(C$e,"This class cannot be instantiated directly using "),g3e=n(C$e,"CODE",{});var d6t=s(g3e);HMr=r(d6t,"__init__()"),d6t.forEach(t),UMr=r(C$e," (throws an error)."),C$e.forEach(t),JMr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(H0.$$.fragment,ui),YMr=i(ui),h3e=n(ui,"P",{});var c6t=s(h3e);KMr=r(c6t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),c6t.forEach(t),ZMr=i(ui),sf=n(ui,"P",{});var PQ=s(sf);e4r=r(PQ,`Note:
Loading a model from its configuration file does `),p3e=n(PQ,"STRONG",{});var f6t=s(p3e);o4r=r(f6t,"not"),f6t.forEach(t),r4r=r(PQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_3e=n(PQ,"CODE",{});var m6t=s(_3e);t4r=r(m6t,"from_pretrained()"),m6t.forEach(t),a4r=r(PQ,"to load the model weights."),PQ.forEach(t),n4r=i(ui),u3e=n(ui,"P",{});var g6t=s(u3e);s4r=r(g6t,"Examples:"),g6t.forEach(t),l4r=i(ui),m(U0.$$.fragment,ui),ui.forEach(t),i4r=i(_i),Bo=n(_i,"DIV",{class:!0});var xa=s(Bo);m(J0.$$.fragment,xa),d4r=i(xa),b3e=n(xa,"P",{});var h6t=s(b3e);c4r=r(h6t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),h6t.forEach(t),f4r=i(xa),kn=n(xa,"P",{});var tE=s(kn);m4r=r(tE,"The model class to instantiate is selected based on the "),v3e=n(tE,"CODE",{});var p6t=s(v3e);g4r=r(p6t,"model_type"),p6t.forEach(t),h4r=r(tE,` property of the config object (either
passed as an argument or loaded from `),T3e=n(tE,"CODE",{});var _6t=s(T3e);p4r=r(_6t,"pretrained_model_name_or_path"),_6t.forEach(t),_4r=r(tE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F3e=n(tE,"CODE",{});var u6t=s(F3e);u4r=r(u6t,"pretrained_model_name_or_path"),u6t.forEach(t),b4r=r(tE,":"),tE.forEach(t),v4r=i(xa),fe=n(xa,"UL",{});var pe=s(fe);OC=n(pe,"LI",{});var mxe=s(OC);C3e=n(mxe,"STRONG",{});var b6t=s(C3e);T4r=r(b6t,"albert"),b6t.forEach(t),F4r=r(mxe," \u2014 "),XV=n(mxe,"A",{href:!0});var v6t=s(XV);C4r=r(v6t,"FlaxAlbertForPreTraining"),v6t.forEach(t),M4r=r(mxe," (ALBERT model)"),mxe.forEach(t),E4r=i(pe),XC=n(pe,"LI",{});var gxe=s(XC);M3e=n(gxe,"STRONG",{});var T6t=s(M3e);y4r=r(T6t,"bart"),T6t.forEach(t),w4r=r(gxe," \u2014 "),VV=n(gxe,"A",{href:!0});var F6t=s(VV);A4r=r(F6t,"FlaxBartForConditionalGeneration"),F6t.forEach(t),L4r=r(gxe," (BART model)"),gxe.forEach(t),B4r=i(pe),VC=n(pe,"LI",{});var hxe=s(VC);E3e=n(hxe,"STRONG",{});var C6t=s(E3e);x4r=r(C6t,"bert"),C6t.forEach(t),k4r=r(hxe," \u2014 "),zV=n(hxe,"A",{href:!0});var M6t=s(zV);R4r=r(M6t,"FlaxBertForPreTraining"),M6t.forEach(t),S4r=r(hxe," (BERT model)"),hxe.forEach(t),P4r=i(pe),zC=n(pe,"LI",{});var pxe=s(zC);y3e=n(pxe,"STRONG",{});var E6t=s(y3e);$4r=r(E6t,"big_bird"),E6t.forEach(t),I4r=r(pxe," \u2014 "),WV=n(pxe,"A",{href:!0});var y6t=s(WV);D4r=r(y6t,"FlaxBigBirdForPreTraining"),y6t.forEach(t),N4r=r(pxe," (BigBird model)"),pxe.forEach(t),j4r=i(pe),WC=n(pe,"LI",{});var _xe=s(WC);w3e=n(_xe,"STRONG",{});var w6t=s(w3e);q4r=r(w6t,"electra"),w6t.forEach(t),G4r=r(_xe," \u2014 "),QV=n(_xe,"A",{href:!0});var A6t=s(QV);O4r=r(A6t,"FlaxElectraForPreTraining"),A6t.forEach(t),X4r=r(_xe," (ELECTRA model)"),_xe.forEach(t),V4r=i(pe),QC=n(pe,"LI",{});var uxe=s(QC);A3e=n(uxe,"STRONG",{});var L6t=s(A3e);z4r=r(L6t,"mbart"),L6t.forEach(t),W4r=r(uxe," \u2014 "),HV=n(uxe,"A",{href:!0});var B6t=s(HV);Q4r=r(B6t,"FlaxMBartForConditionalGeneration"),B6t.forEach(t),H4r=r(uxe," (mBART model)"),uxe.forEach(t),U4r=i(pe),HC=n(pe,"LI",{});var bxe=s(HC);L3e=n(bxe,"STRONG",{});var x6t=s(L3e);J4r=r(x6t,"mt5"),x6t.forEach(t),Y4r=r(bxe," \u2014 "),UV=n(bxe,"A",{href:!0});var k6t=s(UV);K4r=r(k6t,"FlaxMT5ForConditionalGeneration"),k6t.forEach(t),Z4r=r(bxe," (mT5 model)"),bxe.forEach(t),eEr=i(pe),UC=n(pe,"LI",{});var vxe=s(UC);B3e=n(vxe,"STRONG",{});var R6t=s(B3e);oEr=r(R6t,"roberta"),R6t.forEach(t),rEr=r(vxe," \u2014 "),JV=n(vxe,"A",{href:!0});var S6t=s(JV);tEr=r(S6t,"FlaxRobertaForMaskedLM"),S6t.forEach(t),aEr=r(vxe," (RoBERTa model)"),vxe.forEach(t),nEr=i(pe),JC=n(pe,"LI",{});var Txe=s(JC);x3e=n(Txe,"STRONG",{});var P6t=s(x3e);sEr=r(P6t,"roformer"),P6t.forEach(t),lEr=r(Txe," \u2014 "),YV=n(Txe,"A",{href:!0});var $6t=s(YV);iEr=r($6t,"FlaxRoFormerForMaskedLM"),$6t.forEach(t),dEr=r(Txe," (RoFormer model)"),Txe.forEach(t),cEr=i(pe),YC=n(pe,"LI",{});var Fxe=s(YC);k3e=n(Fxe,"STRONG",{});var I6t=s(k3e);fEr=r(I6t,"t5"),I6t.forEach(t),mEr=r(Fxe," \u2014 "),KV=n(Fxe,"A",{href:!0});var D6t=s(KV);gEr=r(D6t,"FlaxT5ForConditionalGeneration"),D6t.forEach(t),hEr=r(Fxe," (T5 model)"),Fxe.forEach(t),pEr=i(pe),KC=n(pe,"LI",{});var Cxe=s(KC);R3e=n(Cxe,"STRONG",{});var N6t=s(R3e);_Er=r(N6t,"wav2vec2"),N6t.forEach(t),uEr=r(Cxe," \u2014 "),ZV=n(Cxe,"A",{href:!0});var j6t=s(ZV);bEr=r(j6t,"FlaxWav2Vec2ForPreTraining"),j6t.forEach(t),vEr=r(Cxe," (Wav2Vec2 model)"),Cxe.forEach(t),TEr=i(pe),ZC=n(pe,"LI",{});var Mxe=s(ZC);S3e=n(Mxe,"STRONG",{});var q6t=s(S3e);FEr=r(q6t,"xlm-roberta"),q6t.forEach(t),CEr=r(Mxe," \u2014 "),ez=n(Mxe,"A",{href:!0});var G6t=s(ez);MEr=r(G6t,"FlaxXLMRobertaForMaskedLM"),G6t.forEach(t),EEr=r(Mxe," (XLM-RoBERTa model)"),Mxe.forEach(t),pe.forEach(t),yEr=i(xa),P3e=n(xa,"P",{});var O6t=s(P3e);wEr=r(O6t,"Examples:"),O6t.forEach(t),AEr=i(xa),m(Y0.$$.fragment,xa),xa.forEach(t),_i.forEach(t),mSe=i(c),lf=n(c,"H2",{class:!0});var M$e=s(lf);eM=n(M$e,"A",{id:!0,class:!0,href:!0});var X6t=s(eM);$3e=n(X6t,"SPAN",{});var V6t=s($3e);m(K0.$$.fragment,V6t),V6t.forEach(t),X6t.forEach(t),LEr=i(M$e),I3e=n(M$e,"SPAN",{});var z6t=s(I3e);BEr=r(z6t,"FlaxAutoModelForMaskedLM"),z6t.forEach(t),M$e.forEach(t),gSe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(Z0.$$.fragment,bi),xEr=i(bi),df=n(bi,"P",{});var $Q=s(df);kEr=r($Q,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),D3e=n($Q,"CODE",{});var W6t=s(D3e);REr=r(W6t,"from_pretrained()"),W6t.forEach(t),SEr=r($Q,"class method or the "),N3e=n($Q,"CODE",{});var Q6t=s(N3e);PEr=r(Q6t,"from_config()"),Q6t.forEach(t),$Er=r($Q,`class
method.`),$Q.forEach(t),IEr=i(bi),eL=n(bi,"P",{});var E$e=s(eL);DEr=r(E$e,"This class cannot be instantiated directly using "),j3e=n(E$e,"CODE",{});var H6t=s(j3e);NEr=r(H6t,"__init__()"),H6t.forEach(t),jEr=r(E$e," (throws an error)."),E$e.forEach(t),qEr=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(oL.$$.fragment,vi),GEr=i(vi),q3e=n(vi,"P",{});var U6t=s(q3e);OEr=r(U6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),U6t.forEach(t),XEr=i(vi),cf=n(vi,"P",{});var IQ=s(cf);VEr=r(IQ,`Note:
Loading a model from its configuration file does `),G3e=n(IQ,"STRONG",{});var J6t=s(G3e);zEr=r(J6t,"not"),J6t.forEach(t),WEr=r(IQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),O3e=n(IQ,"CODE",{});var Y6t=s(O3e);QEr=r(Y6t,"from_pretrained()"),Y6t.forEach(t),HEr=r(IQ,"to load the model weights."),IQ.forEach(t),UEr=i(vi),X3e=n(vi,"P",{});var K6t=s(X3e);JEr=r(K6t,"Examples:"),K6t.forEach(t),YEr=i(vi),m(rL.$$.fragment,vi),vi.forEach(t),KEr=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);m(tL.$$.fragment,ka),ZEr=i(ka),V3e=n(ka,"P",{});var Z6t=s(V3e);e5r=r(Z6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Z6t.forEach(t),o5r=i(ka),Rn=n(ka,"P",{});var aE=s(Rn);r5r=r(aE,"The model class to instantiate is selected based on the "),z3e=n(aE,"CODE",{});var eTt=s(z3e);t5r=r(eTt,"model_type"),eTt.forEach(t),a5r=r(aE,` property of the config object (either
passed as an argument or loaded from `),W3e=n(aE,"CODE",{});var oTt=s(W3e);n5r=r(oTt,"pretrained_model_name_or_path"),oTt.forEach(t),s5r=r(aE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q3e=n(aE,"CODE",{});var rTt=s(Q3e);l5r=r(rTt,"pretrained_model_name_or_path"),rTt.forEach(t),i5r=r(aE,":"),aE.forEach(t),d5r=i(ka),be=n(ka,"UL",{});var we=s(be);oM=n(we,"LI",{});var Exe=s(oM);H3e=n(Exe,"STRONG",{});var tTt=s(H3e);c5r=r(tTt,"albert"),tTt.forEach(t),f5r=r(Exe," \u2014 "),oz=n(Exe,"A",{href:!0});var aTt=s(oz);m5r=r(aTt,"FlaxAlbertForMaskedLM"),aTt.forEach(t),g5r=r(Exe," (ALBERT model)"),Exe.forEach(t),h5r=i(we),rM=n(we,"LI",{});var yxe=s(rM);U3e=n(yxe,"STRONG",{});var nTt=s(U3e);p5r=r(nTt,"bart"),nTt.forEach(t),_5r=r(yxe," \u2014 "),rz=n(yxe,"A",{href:!0});var sTt=s(rz);u5r=r(sTt,"FlaxBartForConditionalGeneration"),sTt.forEach(t),b5r=r(yxe," (BART model)"),yxe.forEach(t),v5r=i(we),tM=n(we,"LI",{});var wxe=s(tM);J3e=n(wxe,"STRONG",{});var lTt=s(J3e);T5r=r(lTt,"bert"),lTt.forEach(t),F5r=r(wxe," \u2014 "),tz=n(wxe,"A",{href:!0});var iTt=s(tz);C5r=r(iTt,"FlaxBertForMaskedLM"),iTt.forEach(t),M5r=r(wxe," (BERT model)"),wxe.forEach(t),E5r=i(we),aM=n(we,"LI",{});var Axe=s(aM);Y3e=n(Axe,"STRONG",{});var dTt=s(Y3e);y5r=r(dTt,"big_bird"),dTt.forEach(t),w5r=r(Axe," \u2014 "),az=n(Axe,"A",{href:!0});var cTt=s(az);A5r=r(cTt,"FlaxBigBirdForMaskedLM"),cTt.forEach(t),L5r=r(Axe," (BigBird model)"),Axe.forEach(t),B5r=i(we),nM=n(we,"LI",{});var Lxe=s(nM);K3e=n(Lxe,"STRONG",{});var fTt=s(K3e);x5r=r(fTt,"distilbert"),fTt.forEach(t),k5r=r(Lxe," \u2014 "),nz=n(Lxe,"A",{href:!0});var mTt=s(nz);R5r=r(mTt,"FlaxDistilBertForMaskedLM"),mTt.forEach(t),S5r=r(Lxe," (DistilBERT model)"),Lxe.forEach(t),P5r=i(we),sM=n(we,"LI",{});var Bxe=s(sM);Z3e=n(Bxe,"STRONG",{});var gTt=s(Z3e);$5r=r(gTt,"electra"),gTt.forEach(t),I5r=r(Bxe," \u2014 "),sz=n(Bxe,"A",{href:!0});var hTt=s(sz);D5r=r(hTt,"FlaxElectraForMaskedLM"),hTt.forEach(t),N5r=r(Bxe," (ELECTRA model)"),Bxe.forEach(t),j5r=i(we),lM=n(we,"LI",{});var xxe=s(lM);eve=n(xxe,"STRONG",{});var pTt=s(eve);q5r=r(pTt,"mbart"),pTt.forEach(t),G5r=r(xxe," \u2014 "),lz=n(xxe,"A",{href:!0});var _Tt=s(lz);O5r=r(_Tt,"FlaxMBartForConditionalGeneration"),_Tt.forEach(t),X5r=r(xxe," (mBART model)"),xxe.forEach(t),V5r=i(we),iM=n(we,"LI",{});var kxe=s(iM);ove=n(kxe,"STRONG",{});var uTt=s(ove);z5r=r(uTt,"roberta"),uTt.forEach(t),W5r=r(kxe," \u2014 "),iz=n(kxe,"A",{href:!0});var bTt=s(iz);Q5r=r(bTt,"FlaxRobertaForMaskedLM"),bTt.forEach(t),H5r=r(kxe," (RoBERTa model)"),kxe.forEach(t),U5r=i(we),dM=n(we,"LI",{});var Rxe=s(dM);rve=n(Rxe,"STRONG",{});var vTt=s(rve);J5r=r(vTt,"roformer"),vTt.forEach(t),Y5r=r(Rxe," \u2014 "),dz=n(Rxe,"A",{href:!0});var TTt=s(dz);K5r=r(TTt,"FlaxRoFormerForMaskedLM"),TTt.forEach(t),Z5r=r(Rxe," (RoFormer model)"),Rxe.forEach(t),eyr=i(we),cM=n(we,"LI",{});var Sxe=s(cM);tve=n(Sxe,"STRONG",{});var FTt=s(tve);oyr=r(FTt,"xlm-roberta"),FTt.forEach(t),ryr=r(Sxe," \u2014 "),cz=n(Sxe,"A",{href:!0});var CTt=s(cz);tyr=r(CTt,"FlaxXLMRobertaForMaskedLM"),CTt.forEach(t),ayr=r(Sxe," (XLM-RoBERTa model)"),Sxe.forEach(t),we.forEach(t),nyr=i(ka),ave=n(ka,"P",{});var MTt=s(ave);syr=r(MTt,"Examples:"),MTt.forEach(t),lyr=i(ka),m(aL.$$.fragment,ka),ka.forEach(t),bi.forEach(t),hSe=i(c),ff=n(c,"H2",{class:!0});var y$e=s(ff);fM=n(y$e,"A",{id:!0,class:!0,href:!0});var ETt=s(fM);nve=n(ETt,"SPAN",{});var yTt=s(nve);m(nL.$$.fragment,yTt),yTt.forEach(t),ETt.forEach(t),iyr=i(y$e),sve=n(y$e,"SPAN",{});var wTt=s(sve);dyr=r(wTt,"FlaxAutoModelForSeq2SeqLM"),wTt.forEach(t),y$e.forEach(t),pSe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(sL.$$.fragment,Ti),cyr=i(Ti),mf=n(Ti,"P",{});var DQ=s(mf);fyr=r(DQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lve=n(DQ,"CODE",{});var ATt=s(lve);myr=r(ATt,"from_pretrained()"),ATt.forEach(t),gyr=r(DQ,"class method or the "),ive=n(DQ,"CODE",{});var LTt=s(ive);hyr=r(LTt,"from_config()"),LTt.forEach(t),pyr=r(DQ,`class
method.`),DQ.forEach(t),_yr=i(Ti),lL=n(Ti,"P",{});var w$e=s(lL);uyr=r(w$e,"This class cannot be instantiated directly using "),dve=n(w$e,"CODE",{});var BTt=s(dve);byr=r(BTt,"__init__()"),BTt.forEach(t),vyr=r(w$e," (throws an error)."),w$e.forEach(t),Tyr=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);m(iL.$$.fragment,Fi),Fyr=i(Fi),cve=n(Fi,"P",{});var xTt=s(cve);Cyr=r(xTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xTt.forEach(t),Myr=i(Fi),gf=n(Fi,"P",{});var NQ=s(gf);Eyr=r(NQ,`Note:
Loading a model from its configuration file does `),fve=n(NQ,"STRONG",{});var kTt=s(fve);yyr=r(kTt,"not"),kTt.forEach(t),wyr=r(NQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mve=n(NQ,"CODE",{});var RTt=s(mve);Ayr=r(RTt,"from_pretrained()"),RTt.forEach(t),Lyr=r(NQ,"to load the model weights."),NQ.forEach(t),Byr=i(Fi),gve=n(Fi,"P",{});var STt=s(gve);xyr=r(STt,"Examples:"),STt.forEach(t),kyr=i(Fi),m(dL.$$.fragment,Fi),Fi.forEach(t),Ryr=i(Ti),ko=n(Ti,"DIV",{class:!0});var Ra=s(ko);m(cL.$$.fragment,Ra),Syr=i(Ra),hve=n(Ra,"P",{});var PTt=s(hve);Pyr=r(PTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),PTt.forEach(t),$yr=i(Ra),Sn=n(Ra,"P",{});var nE=s(Sn);Iyr=r(nE,"The model class to instantiate is selected based on the "),pve=n(nE,"CODE",{});var $Tt=s(pve);Dyr=r($Tt,"model_type"),$Tt.forEach(t),Nyr=r(nE,` property of the config object (either
passed as an argument or loaded from `),_ve=n(nE,"CODE",{});var ITt=s(_ve);jyr=r(ITt,"pretrained_model_name_or_path"),ITt.forEach(t),qyr=r(nE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=n(nE,"CODE",{});var DTt=s(uve);Gyr=r(DTt,"pretrained_model_name_or_path"),DTt.forEach(t),Oyr=r(nE,":"),nE.forEach(t),Xyr=i(Ra),Me=n(Ra,"UL",{});var so=s(Me);mM=n(so,"LI",{});var Pxe=s(mM);bve=n(Pxe,"STRONG",{});var NTt=s(bve);Vyr=r(NTt,"bart"),NTt.forEach(t),zyr=r(Pxe," \u2014 "),fz=n(Pxe,"A",{href:!0});var jTt=s(fz);Wyr=r(jTt,"FlaxBartForConditionalGeneration"),jTt.forEach(t),Qyr=r(Pxe," (BART model)"),Pxe.forEach(t),Hyr=i(so),gM=n(so,"LI",{});var $xe=s(gM);vve=n($xe,"STRONG",{});var qTt=s(vve);Uyr=r(qTt,"blenderbot"),qTt.forEach(t),Jyr=r($xe," \u2014 "),mz=n($xe,"A",{href:!0});var GTt=s(mz);Yyr=r(GTt,"FlaxBlenderbotForConditionalGeneration"),GTt.forEach(t),Kyr=r($xe," (Blenderbot model)"),$xe.forEach(t),Zyr=i(so),hM=n(so,"LI",{});var Ixe=s(hM);Tve=n(Ixe,"STRONG",{});var OTt=s(Tve);ewr=r(OTt,"blenderbot-small"),OTt.forEach(t),owr=r(Ixe," \u2014 "),gz=n(Ixe,"A",{href:!0});var XTt=s(gz);rwr=r(XTt,"FlaxBlenderbotSmallForConditionalGeneration"),XTt.forEach(t),twr=r(Ixe," (BlenderbotSmall model)"),Ixe.forEach(t),awr=i(so),pM=n(so,"LI",{});var Dxe=s(pM);Fve=n(Dxe,"STRONG",{});var VTt=s(Fve);nwr=r(VTt,"encoder-decoder"),VTt.forEach(t),swr=r(Dxe," \u2014 "),hz=n(Dxe,"A",{href:!0});var zTt=s(hz);lwr=r(zTt,"FlaxEncoderDecoderModel"),zTt.forEach(t),iwr=r(Dxe," (Encoder decoder model)"),Dxe.forEach(t),dwr=i(so),_M=n(so,"LI",{});var Nxe=s(_M);Cve=n(Nxe,"STRONG",{});var WTt=s(Cve);cwr=r(WTt,"marian"),WTt.forEach(t),fwr=r(Nxe," \u2014 "),pz=n(Nxe,"A",{href:!0});var QTt=s(pz);mwr=r(QTt,"FlaxMarianMTModel"),QTt.forEach(t),gwr=r(Nxe," (Marian model)"),Nxe.forEach(t),hwr=i(so),uM=n(so,"LI",{});var jxe=s(uM);Mve=n(jxe,"STRONG",{});var HTt=s(Mve);pwr=r(HTt,"mbart"),HTt.forEach(t),_wr=r(jxe," \u2014 "),_z=n(jxe,"A",{href:!0});var UTt=s(_z);uwr=r(UTt,"FlaxMBartForConditionalGeneration"),UTt.forEach(t),bwr=r(jxe," (mBART model)"),jxe.forEach(t),vwr=i(so),bM=n(so,"LI",{});var qxe=s(bM);Eve=n(qxe,"STRONG",{});var JTt=s(Eve);Twr=r(JTt,"mt5"),JTt.forEach(t),Fwr=r(qxe," \u2014 "),uz=n(qxe,"A",{href:!0});var YTt=s(uz);Cwr=r(YTt,"FlaxMT5ForConditionalGeneration"),YTt.forEach(t),Mwr=r(qxe," (mT5 model)"),qxe.forEach(t),Ewr=i(so),vM=n(so,"LI",{});var Gxe=s(vM);yve=n(Gxe,"STRONG",{});var KTt=s(yve);ywr=r(KTt,"pegasus"),KTt.forEach(t),wwr=r(Gxe," \u2014 "),bz=n(Gxe,"A",{href:!0});var ZTt=s(bz);Awr=r(ZTt,"FlaxPegasusForConditionalGeneration"),ZTt.forEach(t),Lwr=r(Gxe," (Pegasus model)"),Gxe.forEach(t),Bwr=i(so),TM=n(so,"LI",{});var Oxe=s(TM);wve=n(Oxe,"STRONG",{});var eFt=s(wve);xwr=r(eFt,"t5"),eFt.forEach(t),kwr=r(Oxe," \u2014 "),vz=n(Oxe,"A",{href:!0});var oFt=s(vz);Rwr=r(oFt,"FlaxT5ForConditionalGeneration"),oFt.forEach(t),Swr=r(Oxe," (T5 model)"),Oxe.forEach(t),so.forEach(t),Pwr=i(Ra),Ave=n(Ra,"P",{});var rFt=s(Ave);$wr=r(rFt,"Examples:"),rFt.forEach(t),Iwr=i(Ra),m(fL.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),_Se=i(c),hf=n(c,"H2",{class:!0});var A$e=s(hf);FM=n(A$e,"A",{id:!0,class:!0,href:!0});var tFt=s(FM);Lve=n(tFt,"SPAN",{});var aFt=s(Lve);m(mL.$$.fragment,aFt),aFt.forEach(t),tFt.forEach(t),Dwr=i(A$e),Bve=n(A$e,"SPAN",{});var nFt=s(Bve);Nwr=r(nFt,"FlaxAutoModelForSequenceClassification"),nFt.forEach(t),A$e.forEach(t),uSe=i(c),Dr=n(c,"DIV",{class:!0});var Ci=s(Dr);m(gL.$$.fragment,Ci),jwr=i(Ci),pf=n(Ci,"P",{});var jQ=s(pf);qwr=r(jQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xve=n(jQ,"CODE",{});var sFt=s(xve);Gwr=r(sFt,"from_pretrained()"),sFt.forEach(t),Owr=r(jQ,"class method or the "),kve=n(jQ,"CODE",{});var lFt=s(kve);Xwr=r(lFt,"from_config()"),lFt.forEach(t),Vwr=r(jQ,`class
method.`),jQ.forEach(t),zwr=i(Ci),hL=n(Ci,"P",{});var L$e=s(hL);Wwr=r(L$e,"This class cannot be instantiated directly using "),Rve=n(L$e,"CODE",{});var iFt=s(Rve);Qwr=r(iFt,"__init__()"),iFt.forEach(t),Hwr=r(L$e," (throws an error)."),L$e.forEach(t),Uwr=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);m(pL.$$.fragment,Mi),Jwr=i(Mi),Sve=n(Mi,"P",{});var dFt=s(Sve);Ywr=r(dFt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dFt.forEach(t),Kwr=i(Mi),_f=n(Mi,"P",{});var qQ=s(_f);Zwr=r(qQ,`Note:
Loading a model from its configuration file does `),Pve=n(qQ,"STRONG",{});var cFt=s(Pve);eAr=r(cFt,"not"),cFt.forEach(t),oAr=r(qQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ve=n(qQ,"CODE",{});var fFt=s($ve);rAr=r(fFt,"from_pretrained()"),fFt.forEach(t),tAr=r(qQ,"to load the model weights."),qQ.forEach(t),aAr=i(Mi),Ive=n(Mi,"P",{});var mFt=s(Ive);nAr=r(mFt,"Examples:"),mFt.forEach(t),sAr=i(Mi),m(_L.$$.fragment,Mi),Mi.forEach(t),lAr=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Sa=s(Ro);m(uL.$$.fragment,Sa),iAr=i(Sa),Dve=n(Sa,"P",{});var gFt=s(Dve);dAr=r(gFt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gFt.forEach(t),cAr=i(Sa),Pn=n(Sa,"P",{});var sE=s(Pn);fAr=r(sE,"The model class to instantiate is selected based on the "),Nve=n(sE,"CODE",{});var hFt=s(Nve);mAr=r(hFt,"model_type"),hFt.forEach(t),gAr=r(sE,` property of the config object (either
passed as an argument or loaded from `),jve=n(sE,"CODE",{});var pFt=s(jve);hAr=r(pFt,"pretrained_model_name_or_path"),pFt.forEach(t),pAr=r(sE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=n(sE,"CODE",{});var _Ft=s(qve);_Ar=r(_Ft,"pretrained_model_name_or_path"),_Ft.forEach(t),uAr=r(sE,":"),sE.forEach(t),bAr=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);CM=n(Ae,"LI",{});var Xxe=s(CM);Gve=n(Xxe,"STRONG",{});var uFt=s(Gve);vAr=r(uFt,"albert"),uFt.forEach(t),TAr=r(Xxe," \u2014 "),Tz=n(Xxe,"A",{href:!0});var bFt=s(Tz);FAr=r(bFt,"FlaxAlbertForSequenceClassification"),bFt.forEach(t),CAr=r(Xxe," (ALBERT model)"),Xxe.forEach(t),MAr=i(Ae),MM=n(Ae,"LI",{});var Vxe=s(MM);Ove=n(Vxe,"STRONG",{});var vFt=s(Ove);EAr=r(vFt,"bart"),vFt.forEach(t),yAr=r(Vxe," \u2014 "),Fz=n(Vxe,"A",{href:!0});var TFt=s(Fz);wAr=r(TFt,"FlaxBartForSequenceClassification"),TFt.forEach(t),AAr=r(Vxe," (BART model)"),Vxe.forEach(t),LAr=i(Ae),EM=n(Ae,"LI",{});var zxe=s(EM);Xve=n(zxe,"STRONG",{});var FFt=s(Xve);BAr=r(FFt,"bert"),FFt.forEach(t),xAr=r(zxe," \u2014 "),Cz=n(zxe,"A",{href:!0});var CFt=s(Cz);kAr=r(CFt,"FlaxBertForSequenceClassification"),CFt.forEach(t),RAr=r(zxe," (BERT model)"),zxe.forEach(t),SAr=i(Ae),yM=n(Ae,"LI",{});var Wxe=s(yM);Vve=n(Wxe,"STRONG",{});var MFt=s(Vve);PAr=r(MFt,"big_bird"),MFt.forEach(t),$Ar=r(Wxe," \u2014 "),Mz=n(Wxe,"A",{href:!0});var EFt=s(Mz);IAr=r(EFt,"FlaxBigBirdForSequenceClassification"),EFt.forEach(t),DAr=r(Wxe," (BigBird model)"),Wxe.forEach(t),NAr=i(Ae),wM=n(Ae,"LI",{});var Qxe=s(wM);zve=n(Qxe,"STRONG",{});var yFt=s(zve);jAr=r(yFt,"distilbert"),yFt.forEach(t),qAr=r(Qxe," \u2014 "),Ez=n(Qxe,"A",{href:!0});var wFt=s(Ez);GAr=r(wFt,"FlaxDistilBertForSequenceClassification"),wFt.forEach(t),OAr=r(Qxe," (DistilBERT model)"),Qxe.forEach(t),XAr=i(Ae),AM=n(Ae,"LI",{});var Hxe=s(AM);Wve=n(Hxe,"STRONG",{});var AFt=s(Wve);VAr=r(AFt,"electra"),AFt.forEach(t),zAr=r(Hxe," \u2014 "),yz=n(Hxe,"A",{href:!0});var LFt=s(yz);WAr=r(LFt,"FlaxElectraForSequenceClassification"),LFt.forEach(t),QAr=r(Hxe," (ELECTRA model)"),Hxe.forEach(t),HAr=i(Ae),LM=n(Ae,"LI",{});var Uxe=s(LM);Qve=n(Uxe,"STRONG",{});var BFt=s(Qve);UAr=r(BFt,"mbart"),BFt.forEach(t),JAr=r(Uxe," \u2014 "),wz=n(Uxe,"A",{href:!0});var xFt=s(wz);YAr=r(xFt,"FlaxMBartForSequenceClassification"),xFt.forEach(t),KAr=r(Uxe," (mBART model)"),Uxe.forEach(t),ZAr=i(Ae),BM=n(Ae,"LI",{});var Jxe=s(BM);Hve=n(Jxe,"STRONG",{});var kFt=s(Hve);e0r=r(kFt,"roberta"),kFt.forEach(t),o0r=r(Jxe," \u2014 "),Az=n(Jxe,"A",{href:!0});var RFt=s(Az);r0r=r(RFt,"FlaxRobertaForSequenceClassification"),RFt.forEach(t),t0r=r(Jxe," (RoBERTa model)"),Jxe.forEach(t),a0r=i(Ae),xM=n(Ae,"LI",{});var Yxe=s(xM);Uve=n(Yxe,"STRONG",{});var SFt=s(Uve);n0r=r(SFt,"roformer"),SFt.forEach(t),s0r=r(Yxe," \u2014 "),Lz=n(Yxe,"A",{href:!0});var PFt=s(Lz);l0r=r(PFt,"FlaxRoFormerForSequenceClassification"),PFt.forEach(t),i0r=r(Yxe," (RoFormer model)"),Yxe.forEach(t),d0r=i(Ae),kM=n(Ae,"LI",{});var Kxe=s(kM);Jve=n(Kxe,"STRONG",{});var $Ft=s(Jve);c0r=r($Ft,"xlm-roberta"),$Ft.forEach(t),f0r=r(Kxe," \u2014 "),Bz=n(Kxe,"A",{href:!0});var IFt=s(Bz);m0r=r(IFt,"FlaxXLMRobertaForSequenceClassification"),IFt.forEach(t),g0r=r(Kxe," (XLM-RoBERTa model)"),Kxe.forEach(t),Ae.forEach(t),h0r=i(Sa),Yve=n(Sa,"P",{});var DFt=s(Yve);p0r=r(DFt,"Examples:"),DFt.forEach(t),_0r=i(Sa),m(bL.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),bSe=i(c),uf=n(c,"H2",{class:!0});var B$e=s(uf);RM=n(B$e,"A",{id:!0,class:!0,href:!0});var NFt=s(RM);Kve=n(NFt,"SPAN",{});var jFt=s(Kve);m(vL.$$.fragment,jFt),jFt.forEach(t),NFt.forEach(t),u0r=i(B$e),Zve=n(B$e,"SPAN",{});var qFt=s(Zve);b0r=r(qFt,"FlaxAutoModelForQuestionAnswering"),qFt.forEach(t),B$e.forEach(t),vSe=i(c),Nr=n(c,"DIV",{class:!0});var Ei=s(Nr);m(TL.$$.fragment,Ei),v0r=i(Ei),bf=n(Ei,"P",{});var GQ=s(bf);T0r=r(GQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),e6e=n(GQ,"CODE",{});var GFt=s(e6e);F0r=r(GFt,"from_pretrained()"),GFt.forEach(t),C0r=r(GQ,"class method or the "),o6e=n(GQ,"CODE",{});var OFt=s(o6e);M0r=r(OFt,"from_config()"),OFt.forEach(t),E0r=r(GQ,`class
method.`),GQ.forEach(t),y0r=i(Ei),FL=n(Ei,"P",{});var x$e=s(FL);w0r=r(x$e,"This class cannot be instantiated directly using "),r6e=n(x$e,"CODE",{});var XFt=s(r6e);A0r=r(XFt,"__init__()"),XFt.forEach(t),L0r=r(x$e," (throws an error)."),x$e.forEach(t),B0r=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);m(CL.$$.fragment,yi),x0r=i(yi),t6e=n(yi,"P",{});var VFt=s(t6e);k0r=r(VFt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),VFt.forEach(t),R0r=i(yi),vf=n(yi,"P",{});var OQ=s(vf);S0r=r(OQ,`Note:
Loading a model from its configuration file does `),a6e=n(OQ,"STRONG",{});var zFt=s(a6e);P0r=r(zFt,"not"),zFt.forEach(t),$0r=r(OQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),n6e=n(OQ,"CODE",{});var WFt=s(n6e);I0r=r(WFt,"from_pretrained()"),WFt.forEach(t),D0r=r(OQ,"to load the model weights."),OQ.forEach(t),N0r=i(yi),s6e=n(yi,"P",{});var QFt=s(s6e);j0r=r(QFt,"Examples:"),QFt.forEach(t),q0r=i(yi),m(ML.$$.fragment,yi),yi.forEach(t),G0r=i(Ei),So=n(Ei,"DIV",{class:!0});var Pa=s(So);m(EL.$$.fragment,Pa),O0r=i(Pa),l6e=n(Pa,"P",{});var HFt=s(l6e);X0r=r(HFt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),HFt.forEach(t),V0r=i(Pa),$n=n(Pa,"P",{});var lE=s($n);z0r=r(lE,"The model class to instantiate is selected based on the "),i6e=n(lE,"CODE",{});var UFt=s(i6e);W0r=r(UFt,"model_type"),UFt.forEach(t),Q0r=r(lE,` property of the config object (either
passed as an argument or loaded from `),d6e=n(lE,"CODE",{});var JFt=s(d6e);H0r=r(JFt,"pretrained_model_name_or_path"),JFt.forEach(t),U0r=r(lE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c6e=n(lE,"CODE",{});var YFt=s(c6e);J0r=r(YFt,"pretrained_model_name_or_path"),YFt.forEach(t),Y0r=r(lE,":"),lE.forEach(t),K0r=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);SM=n(Le,"LI",{});var Zxe=s(SM);f6e=n(Zxe,"STRONG",{});var KFt=s(f6e);Z0r=r(KFt,"albert"),KFt.forEach(t),eLr=r(Zxe," \u2014 "),xz=n(Zxe,"A",{href:!0});var ZFt=s(xz);oLr=r(ZFt,"FlaxAlbertForQuestionAnswering"),ZFt.forEach(t),rLr=r(Zxe," (ALBERT model)"),Zxe.forEach(t),tLr=i(Le),PM=n(Le,"LI",{});var eke=s(PM);m6e=n(eke,"STRONG",{});var e9t=s(m6e);aLr=r(e9t,"bart"),e9t.forEach(t),nLr=r(eke," \u2014 "),kz=n(eke,"A",{href:!0});var o9t=s(kz);sLr=r(o9t,"FlaxBartForQuestionAnswering"),o9t.forEach(t),lLr=r(eke," (BART model)"),eke.forEach(t),iLr=i(Le),$M=n(Le,"LI",{});var oke=s($M);g6e=n(oke,"STRONG",{});var r9t=s(g6e);dLr=r(r9t,"bert"),r9t.forEach(t),cLr=r(oke," \u2014 "),Rz=n(oke,"A",{href:!0});var t9t=s(Rz);fLr=r(t9t,"FlaxBertForQuestionAnswering"),t9t.forEach(t),mLr=r(oke," (BERT model)"),oke.forEach(t),gLr=i(Le),IM=n(Le,"LI",{});var rke=s(IM);h6e=n(rke,"STRONG",{});var a9t=s(h6e);hLr=r(a9t,"big_bird"),a9t.forEach(t),pLr=r(rke," \u2014 "),Sz=n(rke,"A",{href:!0});var n9t=s(Sz);_Lr=r(n9t,"FlaxBigBirdForQuestionAnswering"),n9t.forEach(t),uLr=r(rke," (BigBird model)"),rke.forEach(t),bLr=i(Le),DM=n(Le,"LI",{});var tke=s(DM);p6e=n(tke,"STRONG",{});var s9t=s(p6e);vLr=r(s9t,"distilbert"),s9t.forEach(t),TLr=r(tke," \u2014 "),Pz=n(tke,"A",{href:!0});var l9t=s(Pz);FLr=r(l9t,"FlaxDistilBertForQuestionAnswering"),l9t.forEach(t),CLr=r(tke," (DistilBERT model)"),tke.forEach(t),MLr=i(Le),NM=n(Le,"LI",{});var ake=s(NM);_6e=n(ake,"STRONG",{});var i9t=s(_6e);ELr=r(i9t,"electra"),i9t.forEach(t),yLr=r(ake," \u2014 "),$z=n(ake,"A",{href:!0});var d9t=s($z);wLr=r(d9t,"FlaxElectraForQuestionAnswering"),d9t.forEach(t),ALr=r(ake," (ELECTRA model)"),ake.forEach(t),LLr=i(Le),jM=n(Le,"LI",{});var nke=s(jM);u6e=n(nke,"STRONG",{});var c9t=s(u6e);BLr=r(c9t,"mbart"),c9t.forEach(t),xLr=r(nke," \u2014 "),Iz=n(nke,"A",{href:!0});var f9t=s(Iz);kLr=r(f9t,"FlaxMBartForQuestionAnswering"),f9t.forEach(t),RLr=r(nke," (mBART model)"),nke.forEach(t),SLr=i(Le),qM=n(Le,"LI",{});var ske=s(qM);b6e=n(ske,"STRONG",{});var m9t=s(b6e);PLr=r(m9t,"roberta"),m9t.forEach(t),$Lr=r(ske," \u2014 "),Dz=n(ske,"A",{href:!0});var g9t=s(Dz);ILr=r(g9t,"FlaxRobertaForQuestionAnswering"),g9t.forEach(t),DLr=r(ske," (RoBERTa model)"),ske.forEach(t),NLr=i(Le),GM=n(Le,"LI",{});var lke=s(GM);v6e=n(lke,"STRONG",{});var h9t=s(v6e);jLr=r(h9t,"roformer"),h9t.forEach(t),qLr=r(lke," \u2014 "),Nz=n(lke,"A",{href:!0});var p9t=s(Nz);GLr=r(p9t,"FlaxRoFormerForQuestionAnswering"),p9t.forEach(t),OLr=r(lke," (RoFormer model)"),lke.forEach(t),XLr=i(Le),OM=n(Le,"LI",{});var ike=s(OM);T6e=n(ike,"STRONG",{});var _9t=s(T6e);VLr=r(_9t,"xlm-roberta"),_9t.forEach(t),zLr=r(ike," \u2014 "),jz=n(ike,"A",{href:!0});var u9t=s(jz);WLr=r(u9t,"FlaxXLMRobertaForQuestionAnswering"),u9t.forEach(t),QLr=r(ike," (XLM-RoBERTa model)"),ike.forEach(t),Le.forEach(t),HLr=i(Pa),F6e=n(Pa,"P",{});var b9t=s(F6e);ULr=r(b9t,"Examples:"),b9t.forEach(t),JLr=i(Pa),m(yL.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),TSe=i(c),Tf=n(c,"H2",{class:!0});var k$e=s(Tf);XM=n(k$e,"A",{id:!0,class:!0,href:!0});var v9t=s(XM);C6e=n(v9t,"SPAN",{});var T9t=s(C6e);m(wL.$$.fragment,T9t),T9t.forEach(t),v9t.forEach(t),YLr=i(k$e),M6e=n(k$e,"SPAN",{});var F9t=s(M6e);KLr=r(F9t,"FlaxAutoModelForTokenClassification"),F9t.forEach(t),k$e.forEach(t),FSe=i(c),jr=n(c,"DIV",{class:!0});var wi=s(jr);m(AL.$$.fragment,wi),ZLr=i(wi),Ff=n(wi,"P",{});var XQ=s(Ff);e7r=r(XQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),E6e=n(XQ,"CODE",{});var C9t=s(E6e);o7r=r(C9t,"from_pretrained()"),C9t.forEach(t),r7r=r(XQ,"class method or the "),y6e=n(XQ,"CODE",{});var M9t=s(y6e);t7r=r(M9t,"from_config()"),M9t.forEach(t),a7r=r(XQ,`class
method.`),XQ.forEach(t),n7r=i(wi),LL=n(wi,"P",{});var R$e=s(LL);s7r=r(R$e,"This class cannot be instantiated directly using "),w6e=n(R$e,"CODE",{});var E9t=s(w6e);l7r=r(E9t,"__init__()"),E9t.forEach(t),i7r=r(R$e," (throws an error)."),R$e.forEach(t),d7r=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(BL.$$.fragment,Ai),c7r=i(Ai),A6e=n(Ai,"P",{});var y9t=s(A6e);f7r=r(y9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),y9t.forEach(t),m7r=i(Ai),Cf=n(Ai,"P",{});var VQ=s(Cf);g7r=r(VQ,`Note:
Loading a model from its configuration file does `),L6e=n(VQ,"STRONG",{});var w9t=s(L6e);h7r=r(w9t,"not"),w9t.forEach(t),p7r=r(VQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),B6e=n(VQ,"CODE",{});var A9t=s(B6e);_7r=r(A9t,"from_pretrained()"),A9t.forEach(t),u7r=r(VQ,"to load the model weights."),VQ.forEach(t),b7r=i(Ai),x6e=n(Ai,"P",{});var L9t=s(x6e);v7r=r(L9t,"Examples:"),L9t.forEach(t),T7r=i(Ai),m(xL.$$.fragment,Ai),Ai.forEach(t),F7r=i(wi),Po=n(wi,"DIV",{class:!0});var $a=s(Po);m(kL.$$.fragment,$a),C7r=i($a),k6e=n($a,"P",{});var B9t=s(k6e);M7r=r(B9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),B9t.forEach(t),E7r=i($a),In=n($a,"P",{});var iE=s(In);y7r=r(iE,"The model class to instantiate is selected based on the "),R6e=n(iE,"CODE",{});var x9t=s(R6e);w7r=r(x9t,"model_type"),x9t.forEach(t),A7r=r(iE,` property of the config object (either
passed as an argument or loaded from `),S6e=n(iE,"CODE",{});var k9t=s(S6e);L7r=r(k9t,"pretrained_model_name_or_path"),k9t.forEach(t),B7r=r(iE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=n(iE,"CODE",{});var R9t=s(P6e);x7r=r(R9t,"pretrained_model_name_or_path"),R9t.forEach(t),k7r=r(iE,":"),iE.forEach(t),R7r=i($a),Se=n($a,"UL",{});var Oo=s(Se);VM=n(Oo,"LI",{});var dke=s(VM);$6e=n(dke,"STRONG",{});var S9t=s($6e);S7r=r(S9t,"albert"),S9t.forEach(t),P7r=r(dke," \u2014 "),qz=n(dke,"A",{href:!0});var P9t=s(qz);$7r=r(P9t,"FlaxAlbertForTokenClassification"),P9t.forEach(t),I7r=r(dke," (ALBERT model)"),dke.forEach(t),D7r=i(Oo),zM=n(Oo,"LI",{});var cke=s(zM);I6e=n(cke,"STRONG",{});var $9t=s(I6e);N7r=r($9t,"bert"),$9t.forEach(t),j7r=r(cke," \u2014 "),Gz=n(cke,"A",{href:!0});var I9t=s(Gz);q7r=r(I9t,"FlaxBertForTokenClassification"),I9t.forEach(t),G7r=r(cke," (BERT model)"),cke.forEach(t),O7r=i(Oo),WM=n(Oo,"LI",{});var fke=s(WM);D6e=n(fke,"STRONG",{});var D9t=s(D6e);X7r=r(D9t,"big_bird"),D9t.forEach(t),V7r=r(fke," \u2014 "),Oz=n(fke,"A",{href:!0});var N9t=s(Oz);z7r=r(N9t,"FlaxBigBirdForTokenClassification"),N9t.forEach(t),W7r=r(fke," (BigBird model)"),fke.forEach(t),Q7r=i(Oo),QM=n(Oo,"LI",{});var mke=s(QM);N6e=n(mke,"STRONG",{});var j9t=s(N6e);H7r=r(j9t,"distilbert"),j9t.forEach(t),U7r=r(mke," \u2014 "),Xz=n(mke,"A",{href:!0});var q9t=s(Xz);J7r=r(q9t,"FlaxDistilBertForTokenClassification"),q9t.forEach(t),Y7r=r(mke," (DistilBERT model)"),mke.forEach(t),K7r=i(Oo),HM=n(Oo,"LI",{});var gke=s(HM);j6e=n(gke,"STRONG",{});var G9t=s(j6e);Z7r=r(G9t,"electra"),G9t.forEach(t),e8r=r(gke," \u2014 "),Vz=n(gke,"A",{href:!0});var O9t=s(Vz);o8r=r(O9t,"FlaxElectraForTokenClassification"),O9t.forEach(t),r8r=r(gke," (ELECTRA model)"),gke.forEach(t),t8r=i(Oo),UM=n(Oo,"LI",{});var hke=s(UM);q6e=n(hke,"STRONG",{});var X9t=s(q6e);a8r=r(X9t,"roberta"),X9t.forEach(t),n8r=r(hke," \u2014 "),zz=n(hke,"A",{href:!0});var V9t=s(zz);s8r=r(V9t,"FlaxRobertaForTokenClassification"),V9t.forEach(t),l8r=r(hke," (RoBERTa model)"),hke.forEach(t),i8r=i(Oo),JM=n(Oo,"LI",{});var pke=s(JM);G6e=n(pke,"STRONG",{});var z9t=s(G6e);d8r=r(z9t,"roformer"),z9t.forEach(t),c8r=r(pke," \u2014 "),Wz=n(pke,"A",{href:!0});var W9t=s(Wz);f8r=r(W9t,"FlaxRoFormerForTokenClassification"),W9t.forEach(t),m8r=r(pke," (RoFormer model)"),pke.forEach(t),g8r=i(Oo),YM=n(Oo,"LI",{});var _ke=s(YM);O6e=n(_ke,"STRONG",{});var Q9t=s(O6e);h8r=r(Q9t,"xlm-roberta"),Q9t.forEach(t),p8r=r(_ke," \u2014 "),Qz=n(_ke,"A",{href:!0});var H9t=s(Qz);_8r=r(H9t,"FlaxXLMRobertaForTokenClassification"),H9t.forEach(t),u8r=r(_ke," (XLM-RoBERTa model)"),_ke.forEach(t),Oo.forEach(t),b8r=i($a),X6e=n($a,"P",{});var U9t=s(X6e);v8r=r(U9t,"Examples:"),U9t.forEach(t),T8r=i($a),m(RL.$$.fragment,$a),$a.forEach(t),wi.forEach(t),CSe=i(c),Mf=n(c,"H2",{class:!0});var S$e=s(Mf);KM=n(S$e,"A",{id:!0,class:!0,href:!0});var J9t=s(KM);V6e=n(J9t,"SPAN",{});var Y9t=s(V6e);m(SL.$$.fragment,Y9t),Y9t.forEach(t),J9t.forEach(t),F8r=i(S$e),z6e=n(S$e,"SPAN",{});var K9t=s(z6e);C8r=r(K9t,"FlaxAutoModelForMultipleChoice"),K9t.forEach(t),S$e.forEach(t),MSe=i(c),qr=n(c,"DIV",{class:!0});var Li=s(qr);m(PL.$$.fragment,Li),M8r=i(Li),Ef=n(Li,"P",{});var zQ=s(Ef);E8r=r(zQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),W6e=n(zQ,"CODE",{});var Z9t=s(W6e);y8r=r(Z9t,"from_pretrained()"),Z9t.forEach(t),w8r=r(zQ,"class method or the "),Q6e=n(zQ,"CODE",{});var eCt=s(Q6e);A8r=r(eCt,"from_config()"),eCt.forEach(t),L8r=r(zQ,`class
method.`),zQ.forEach(t),B8r=i(Li),$L=n(Li,"P",{});var P$e=s($L);x8r=r(P$e,"This class cannot be instantiated directly using "),H6e=n(P$e,"CODE",{});var oCt=s(H6e);k8r=r(oCt,"__init__()"),oCt.forEach(t),R8r=r(P$e," (throws an error)."),P$e.forEach(t),S8r=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);m(IL.$$.fragment,Bi),P8r=i(Bi),U6e=n(Bi,"P",{});var rCt=s(U6e);$8r=r(rCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rCt.forEach(t),I8r=i(Bi),yf=n(Bi,"P",{});var WQ=s(yf);D8r=r(WQ,`Note:
Loading a model from its configuration file does `),J6e=n(WQ,"STRONG",{});var tCt=s(J6e);N8r=r(tCt,"not"),tCt.forEach(t),j8r=r(WQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Y6e=n(WQ,"CODE",{});var aCt=s(Y6e);q8r=r(aCt,"from_pretrained()"),aCt.forEach(t),G8r=r(WQ,"to load the model weights."),WQ.forEach(t),O8r=i(Bi),K6e=n(Bi,"P",{});var nCt=s(K6e);X8r=r(nCt,"Examples:"),nCt.forEach(t),V8r=i(Bi),m(DL.$$.fragment,Bi),Bi.forEach(t),z8r=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(NL.$$.fragment,Ia),W8r=i(Ia),Z6e=n(Ia,"P",{});var sCt=s(Z6e);Q8r=r(sCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),sCt.forEach(t),H8r=i(Ia),Dn=n(Ia,"P",{});var dE=s(Dn);U8r=r(dE,"The model class to instantiate is selected based on the "),eTe=n(dE,"CODE",{});var lCt=s(eTe);J8r=r(lCt,"model_type"),lCt.forEach(t),Y8r=r(dE,` property of the config object (either
passed as an argument or loaded from `),oTe=n(dE,"CODE",{});var iCt=s(oTe);K8r=r(iCt,"pretrained_model_name_or_path"),iCt.forEach(t),Z8r=r(dE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=n(dE,"CODE",{});var dCt=s(rTe);eBr=r(dCt,"pretrained_model_name_or_path"),dCt.forEach(t),oBr=r(dE,":"),dE.forEach(t),rBr=i(Ia),Pe=n(Ia,"UL",{});var Xo=s(Pe);ZM=n(Xo,"LI",{});var uke=s(ZM);tTe=n(uke,"STRONG",{});var cCt=s(tTe);tBr=r(cCt,"albert"),cCt.forEach(t),aBr=r(uke," \u2014 "),Hz=n(uke,"A",{href:!0});var fCt=s(Hz);nBr=r(fCt,"FlaxAlbertForMultipleChoice"),fCt.forEach(t),sBr=r(uke," (ALBERT model)"),uke.forEach(t),lBr=i(Xo),e4=n(Xo,"LI",{});var bke=s(e4);aTe=n(bke,"STRONG",{});var mCt=s(aTe);iBr=r(mCt,"bert"),mCt.forEach(t),dBr=r(bke," \u2014 "),Uz=n(bke,"A",{href:!0});var gCt=s(Uz);cBr=r(gCt,"FlaxBertForMultipleChoice"),gCt.forEach(t),fBr=r(bke," (BERT model)"),bke.forEach(t),mBr=i(Xo),o4=n(Xo,"LI",{});var vke=s(o4);nTe=n(vke,"STRONG",{});var hCt=s(nTe);gBr=r(hCt,"big_bird"),hCt.forEach(t),hBr=r(vke," \u2014 "),Jz=n(vke,"A",{href:!0});var pCt=s(Jz);pBr=r(pCt,"FlaxBigBirdForMultipleChoice"),pCt.forEach(t),_Br=r(vke," (BigBird model)"),vke.forEach(t),uBr=i(Xo),r4=n(Xo,"LI",{});var Tke=s(r4);sTe=n(Tke,"STRONG",{});var _Ct=s(sTe);bBr=r(_Ct,"distilbert"),_Ct.forEach(t),vBr=r(Tke," \u2014 "),Yz=n(Tke,"A",{href:!0});var uCt=s(Yz);TBr=r(uCt,"FlaxDistilBertForMultipleChoice"),uCt.forEach(t),FBr=r(Tke," (DistilBERT model)"),Tke.forEach(t),CBr=i(Xo),t4=n(Xo,"LI",{});var Fke=s(t4);lTe=n(Fke,"STRONG",{});var bCt=s(lTe);MBr=r(bCt,"electra"),bCt.forEach(t),EBr=r(Fke," \u2014 "),Kz=n(Fke,"A",{href:!0});var vCt=s(Kz);yBr=r(vCt,"FlaxElectraForMultipleChoice"),vCt.forEach(t),wBr=r(Fke," (ELECTRA model)"),Fke.forEach(t),ABr=i(Xo),a4=n(Xo,"LI",{});var Cke=s(a4);iTe=n(Cke,"STRONG",{});var TCt=s(iTe);LBr=r(TCt,"roberta"),TCt.forEach(t),BBr=r(Cke," \u2014 "),Zz=n(Cke,"A",{href:!0});var FCt=s(Zz);xBr=r(FCt,"FlaxRobertaForMultipleChoice"),FCt.forEach(t),kBr=r(Cke," (RoBERTa model)"),Cke.forEach(t),RBr=i(Xo),n4=n(Xo,"LI",{});var Mke=s(n4);dTe=n(Mke,"STRONG",{});var CCt=s(dTe);SBr=r(CCt,"roformer"),CCt.forEach(t),PBr=r(Mke," \u2014 "),eW=n(Mke,"A",{href:!0});var MCt=s(eW);$Br=r(MCt,"FlaxRoFormerForMultipleChoice"),MCt.forEach(t),IBr=r(Mke," (RoFormer model)"),Mke.forEach(t),DBr=i(Xo),s4=n(Xo,"LI",{});var Eke=s(s4);cTe=n(Eke,"STRONG",{});var ECt=s(cTe);NBr=r(ECt,"xlm-roberta"),ECt.forEach(t),jBr=r(Eke," \u2014 "),oW=n(Eke,"A",{href:!0});var yCt=s(oW);qBr=r(yCt,"FlaxXLMRobertaForMultipleChoice"),yCt.forEach(t),GBr=r(Eke," (XLM-RoBERTa model)"),Eke.forEach(t),Xo.forEach(t),OBr=i(Ia),fTe=n(Ia,"P",{});var wCt=s(fTe);XBr=r(wCt,"Examples:"),wCt.forEach(t),VBr=i(Ia),m(jL.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),ESe=i(c),wf=n(c,"H2",{class:!0});var $$e=s(wf);l4=n($$e,"A",{id:!0,class:!0,href:!0});var ACt=s(l4);mTe=n(ACt,"SPAN",{});var LCt=s(mTe);m(qL.$$.fragment,LCt),LCt.forEach(t),ACt.forEach(t),zBr=i($$e),gTe=n($$e,"SPAN",{});var BCt=s(gTe);WBr=r(BCt,"FlaxAutoModelForNextSentencePrediction"),BCt.forEach(t),$$e.forEach(t),ySe=i(c),Gr=n(c,"DIV",{class:!0});var xi=s(Gr);m(GL.$$.fragment,xi),QBr=i(xi),Af=n(xi,"P",{});var QQ=s(Af);HBr=r(QQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),hTe=n(QQ,"CODE",{});var xCt=s(hTe);UBr=r(xCt,"from_pretrained()"),xCt.forEach(t),JBr=r(QQ,"class method or the "),pTe=n(QQ,"CODE",{});var kCt=s(pTe);YBr=r(kCt,"from_config()"),kCt.forEach(t),KBr=r(QQ,`class
method.`),QQ.forEach(t),ZBr=i(xi),OL=n(xi,"P",{});var I$e=s(OL);exr=r(I$e,"This class cannot be instantiated directly using "),_Te=n(I$e,"CODE",{});var RCt=s(_Te);oxr=r(RCt,"__init__()"),RCt.forEach(t),rxr=r(I$e," (throws an error)."),I$e.forEach(t),txr=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);m(XL.$$.fragment,ki),axr=i(ki),uTe=n(ki,"P",{});var SCt=s(uTe);nxr=r(SCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),SCt.forEach(t),sxr=i(ki),Lf=n(ki,"P",{});var HQ=s(Lf);lxr=r(HQ,`Note:
Loading a model from its configuration file does `),bTe=n(HQ,"STRONG",{});var PCt=s(bTe);ixr=r(PCt,"not"),PCt.forEach(t),dxr=r(HQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vTe=n(HQ,"CODE",{});var $Ct=s(vTe);cxr=r($Ct,"from_pretrained()"),$Ct.forEach(t),fxr=r(HQ,"to load the model weights."),HQ.forEach(t),mxr=i(ki),TTe=n(ki,"P",{});var ICt=s(TTe);gxr=r(ICt,"Examples:"),ICt.forEach(t),hxr=i(ki),m(VL.$$.fragment,ki),ki.forEach(t),pxr=i(xi),Io=n(xi,"DIV",{class:!0});var Da=s(Io);m(zL.$$.fragment,Da),_xr=i(Da),FTe=n(Da,"P",{});var DCt=s(FTe);uxr=r(DCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DCt.forEach(t),bxr=i(Da),Nn=n(Da,"P",{});var cE=s(Nn);vxr=r(cE,"The model class to instantiate is selected based on the "),CTe=n(cE,"CODE",{});var NCt=s(CTe);Txr=r(NCt,"model_type"),NCt.forEach(t),Fxr=r(cE,` property of the config object (either
passed as an argument or loaded from `),MTe=n(cE,"CODE",{});var jCt=s(MTe);Cxr=r(jCt,"pretrained_model_name_or_path"),jCt.forEach(t),Mxr=r(cE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=n(cE,"CODE",{});var qCt=s(ETe);Exr=r(qCt,"pretrained_model_name_or_path"),qCt.forEach(t),yxr=r(cE,":"),cE.forEach(t),wxr=i(Da),yTe=n(Da,"UL",{});var GCt=s(yTe);i4=n(GCt,"LI",{});var yke=s(i4);wTe=n(yke,"STRONG",{});var OCt=s(wTe);Axr=r(OCt,"bert"),OCt.forEach(t),Lxr=r(yke," \u2014 "),rW=n(yke,"A",{href:!0});var XCt=s(rW);Bxr=r(XCt,"FlaxBertForNextSentencePrediction"),XCt.forEach(t),xxr=r(yke," (BERT model)"),yke.forEach(t),GCt.forEach(t),kxr=i(Da),ATe=n(Da,"P",{});var VCt=s(ATe);Rxr=r(VCt,"Examples:"),VCt.forEach(t),Sxr=i(Da),m(WL.$$.fragment,Da),Da.forEach(t),xi.forEach(t),wSe=i(c),Bf=n(c,"H2",{class:!0});var D$e=s(Bf);d4=n(D$e,"A",{id:!0,class:!0,href:!0});var zCt=s(d4);LTe=n(zCt,"SPAN",{});var WCt=s(LTe);m(QL.$$.fragment,WCt),WCt.forEach(t),zCt.forEach(t),Pxr=i(D$e),BTe=n(D$e,"SPAN",{});var QCt=s(BTe);$xr=r(QCt,"FlaxAutoModelForImageClassification"),QCt.forEach(t),D$e.forEach(t),ASe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(HL.$$.fragment,Ri),Ixr=i(Ri),xf=n(Ri,"P",{});var UQ=s(xf);Dxr=r(UQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xTe=n(UQ,"CODE",{});var HCt=s(xTe);Nxr=r(HCt,"from_pretrained()"),HCt.forEach(t),jxr=r(UQ,"class method or the "),kTe=n(UQ,"CODE",{});var UCt=s(kTe);qxr=r(UCt,"from_config()"),UCt.forEach(t),Gxr=r(UQ,`class
method.`),UQ.forEach(t),Oxr=i(Ri),UL=n(Ri,"P",{});var N$e=s(UL);Xxr=r(N$e,"This class cannot be instantiated directly using "),RTe=n(N$e,"CODE",{});var JCt=s(RTe);Vxr=r(JCt,"__init__()"),JCt.forEach(t),zxr=r(N$e," (throws an error)."),N$e.forEach(t),Wxr=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);m(JL.$$.fragment,Si),Qxr=i(Si),STe=n(Si,"P",{});var YCt=s(STe);Hxr=r(YCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),YCt.forEach(t),Uxr=i(Si),kf=n(Si,"P",{});var JQ=s(kf);Jxr=r(JQ,`Note:
Loading a model from its configuration file does `),PTe=n(JQ,"STRONG",{});var KCt=s(PTe);Yxr=r(KCt,"not"),KCt.forEach(t),Kxr=r(JQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Te=n(JQ,"CODE",{});var ZCt=s($Te);Zxr=r(ZCt,"from_pretrained()"),ZCt.forEach(t),ekr=r(JQ,"to load the model weights."),JQ.forEach(t),okr=i(Si),ITe=n(Si,"P",{});var eMt=s(ITe);rkr=r(eMt,"Examples:"),eMt.forEach(t),tkr=i(Si),m(YL.$$.fragment,Si),Si.forEach(t),akr=i(Ri),Do=n(Ri,"DIV",{class:!0});var Na=s(Do);m(KL.$$.fragment,Na),nkr=i(Na),DTe=n(Na,"P",{});var oMt=s(DTe);skr=r(oMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),oMt.forEach(t),lkr=i(Na),jn=n(Na,"P",{});var fE=s(jn);ikr=r(fE,"The model class to instantiate is selected based on the "),NTe=n(fE,"CODE",{});var rMt=s(NTe);dkr=r(rMt,"model_type"),rMt.forEach(t),ckr=r(fE,` property of the config object (either
passed as an argument or loaded from `),jTe=n(fE,"CODE",{});var tMt=s(jTe);fkr=r(tMt,"pretrained_model_name_or_path"),tMt.forEach(t),mkr=r(fE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=n(fE,"CODE",{});var aMt=s(qTe);gkr=r(aMt,"pretrained_model_name_or_path"),aMt.forEach(t),hkr=r(fE,":"),fE.forEach(t),pkr=i(Na),ZL=n(Na,"UL",{});var j$e=s(ZL);c4=n(j$e,"LI",{});var wke=s(c4);GTe=n(wke,"STRONG",{});var nMt=s(GTe);_kr=r(nMt,"beit"),nMt.forEach(t),ukr=r(wke," \u2014 "),tW=n(wke,"A",{href:!0});var sMt=s(tW);bkr=r(sMt,"FlaxBeitForImageClassification"),sMt.forEach(t),vkr=r(wke," (BEiT model)"),wke.forEach(t),Tkr=i(j$e),f4=n(j$e,"LI",{});var Ake=s(f4);OTe=n(Ake,"STRONG",{});var lMt=s(OTe);Fkr=r(lMt,"vit"),lMt.forEach(t),Ckr=r(Ake," \u2014 "),aW=n(Ake,"A",{href:!0});var iMt=s(aW);Mkr=r(iMt,"FlaxViTForImageClassification"),iMt.forEach(t),Ekr=r(Ake," (ViT model)"),Ake.forEach(t),j$e.forEach(t),ykr=i(Na),XTe=n(Na,"P",{});var dMt=s(XTe);wkr=r(dMt,"Examples:"),dMt.forEach(t),Akr=i(Na),m(e7.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),LSe=i(c),Rf=n(c,"H2",{class:!0});var q$e=s(Rf);m4=n(q$e,"A",{id:!0,class:!0,href:!0});var cMt=s(m4);VTe=n(cMt,"SPAN",{});var fMt=s(VTe);m(o7.$$.fragment,fMt),fMt.forEach(t),cMt.forEach(t),Lkr=i(q$e),zTe=n(q$e,"SPAN",{});var mMt=s(zTe);Bkr=r(mMt,"FlaxAutoModelForVision2Seq"),mMt.forEach(t),q$e.forEach(t),BSe=i(c),Xr=n(c,"DIV",{class:!0});var Pi=s(Xr);m(r7.$$.fragment,Pi),xkr=i(Pi),Sf=n(Pi,"P",{});var YQ=s(Sf);kkr=r(YQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WTe=n(YQ,"CODE",{});var gMt=s(WTe);Rkr=r(gMt,"from_pretrained()"),gMt.forEach(t),Skr=r(YQ,"class method or the "),QTe=n(YQ,"CODE",{});var hMt=s(QTe);Pkr=r(hMt,"from_config()"),hMt.forEach(t),$kr=r(YQ,`class
method.`),YQ.forEach(t),Ikr=i(Pi),t7=n(Pi,"P",{});var G$e=s(t7);Dkr=r(G$e,"This class cannot be instantiated directly using "),HTe=n(G$e,"CODE",{});var pMt=s(HTe);Nkr=r(pMt,"__init__()"),pMt.forEach(t),jkr=r(G$e," (throws an error)."),G$e.forEach(t),qkr=i(Pi),Dt=n(Pi,"DIV",{class:!0});var $i=s(Dt);m(a7.$$.fragment,$i),Gkr=i($i),UTe=n($i,"P",{});var _Mt=s(UTe);Okr=r(_Mt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_Mt.forEach(t),Xkr=i($i),Pf=n($i,"P",{});var KQ=s(Pf);Vkr=r(KQ,`Note:
Loading a model from its configuration file does `),JTe=n(KQ,"STRONG",{});var uMt=s(JTe);zkr=r(uMt,"not"),uMt.forEach(t),Wkr=r(KQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YTe=n(KQ,"CODE",{});var bMt=s(YTe);Qkr=r(bMt,"from_pretrained()"),bMt.forEach(t),Hkr=r(KQ,"to load the model weights."),KQ.forEach(t),Ukr=i($i),KTe=n($i,"P",{});var vMt=s(KTe);Jkr=r(vMt,"Examples:"),vMt.forEach(t),Ykr=i($i),m(n7.$$.fragment,$i),$i.forEach(t),Kkr=i(Pi),No=n(Pi,"DIV",{class:!0});var ja=s(No);m(s7.$$.fragment,ja),Zkr=i(ja),ZTe=n(ja,"P",{});var TMt=s(ZTe);eRr=r(TMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),TMt.forEach(t),oRr=i(ja),qn=n(ja,"P",{});var mE=s(qn);rRr=r(mE,"The model class to instantiate is selected based on the "),eFe=n(mE,"CODE",{});var FMt=s(eFe);tRr=r(FMt,"model_type"),FMt.forEach(t),aRr=r(mE,` property of the config object (either
passed as an argument or loaded from `),oFe=n(mE,"CODE",{});var CMt=s(oFe);nRr=r(CMt,"pretrained_model_name_or_path"),CMt.forEach(t),sRr=r(mE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=n(mE,"CODE",{});var MMt=s(rFe);lRr=r(MMt,"pretrained_model_name_or_path"),MMt.forEach(t),iRr=r(mE,":"),mE.forEach(t),dRr=i(ja),tFe=n(ja,"UL",{});var EMt=s(tFe);g4=n(EMt,"LI",{});var Lke=s(g4);aFe=n(Lke,"STRONG",{});var yMt=s(aFe);cRr=r(yMt,"vision-encoder-decoder"),yMt.forEach(t),fRr=r(Lke," \u2014 "),nW=n(Lke,"A",{href:!0});var wMt=s(nW);mRr=r(wMt,"FlaxVisionEncoderDecoderModel"),wMt.forEach(t),gRr=r(Lke," (Vision Encoder decoder model)"),Lke.forEach(t),EMt.forEach(t),hRr=i(ja),nFe=n(ja,"P",{});var AMt=s(nFe);pRr=r(AMt,"Examples:"),AMt.forEach(t),_Rr=i(ja),m(l7.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(DMt)),d(Ee,"id","auto-classes"),d(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ee,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_16329/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_16329/en/model_doc/auto#transformers.AutoModel"),d(Vn,"href","/docs/transformers/pr_16329/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Xi,"class","relative group"),d(Xf,"id","transformers.AutoConfig"),d(Xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xf,"href","#transformers.AutoConfig"),d(Vi,"class","relative group"),d(f8,"href","/docs/transformers/pr_16329/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(m8,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertConfig"),d(g8,"href","/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartConfig"),d(h8,"href","/docs/transformers/pr_16329/en/model_doc/beit#transformers.BeitConfig"),d(p8,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertConfig"),d(_8,"href","/docs/transformers/pr_16329/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(u8,"href","/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdConfig"),d(b8,"href","/docs/transformers/pr_16329/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(v8,"href","/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(T8,"href","/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(F8,"href","/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertConfig"),d(C8,"href","/docs/transformers/pr_16329/en/model_doc/canine#transformers.CanineConfig"),d(M8,"href","/docs/transformers/pr_16329/en/model_doc/clip#transformers.CLIPConfig"),d(E8,"href","/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertConfig"),d(y8,"href","/docs/transformers/pr_16329/en/model_doc/convnext#transformers.ConvNextConfig"),d(w8,"href","/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.CTRLConfig"),d(A8,"href","/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(L8,"href","/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(B8,"href","/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaConfig"),d(x8,"href","/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(k8,"href","/docs/transformers/pr_16329/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(R8,"href","/docs/transformers/pr_16329/en/model_doc/deit#transformers.DeiTConfig"),d(S8,"href","/docs/transformers/pr_16329/en/model_doc/detr#transformers.DetrConfig"),d(P8,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertConfig"),d($8,"href","/docs/transformers/pr_16329/en/model_doc/dpr#transformers.DPRConfig"),d(I8,"href","/docs/transformers/pr_16329/en/model_doc/dpt#transformers.DPTConfig"),d(D8,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraConfig"),d(N8,"href","/docs/transformers/pr_16329/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(j8,"href","/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertConfig"),d(q8,"href","/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetConfig"),d(G8,"href","/docs/transformers/pr_16329/en/model_doc/fsmt#transformers.FSMTConfig"),d(O8,"href","/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelConfig"),d(X8,"href","/docs/transformers/pr_16329/en/model_doc/glpn#transformers.GLPNConfig"),d(V8,"href","/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2Config"),d(z8,"href","/docs/transformers/pr_16329/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(W8,"href","/docs/transformers/pr_16329/en/model_doc/gptj#transformers.GPTJConfig"),d(Q8,"href","/docs/transformers/pr_16329/en/model_doc/hubert#transformers.HubertConfig"),d(H8,"href","/docs/transformers/pr_16329/en/model_doc/ibert#transformers.IBertConfig"),d(U8,"href","/docs/transformers/pr_16329/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(J8,"href","/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(Y8,"href","/docs/transformers/pr_16329/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(K8,"href","/docs/transformers/pr_16329/en/model_doc/led#transformers.LEDConfig"),d(Z8,"href","/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerConfig"),d(eB,"href","/docs/transformers/pr_16329/en/model_doc/luke#transformers.LukeConfig"),d(oB,"href","/docs/transformers/pr_16329/en/model_doc/lxmert#transformers.LxmertConfig"),d(rB,"href","/docs/transformers/pr_16329/en/model_doc/m2m_100#transformers.M2M100Config"),d(tB,"href","/docs/transformers/pr_16329/en/model_doc/marian#transformers.MarianConfig"),d(aB,"href","/docs/transformers/pr_16329/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(nB,"href","/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartConfig"),d(sB,"href","/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(lB,"href","/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(iB,"href","/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetConfig"),d(dB,"href","/docs/transformers/pr_16329/en/model_doc/mt5#transformers.MT5Config"),d(cB,"href","/docs/transformers/pr_16329/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(fB,"href","/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(mB,"href","/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.PegasusConfig"),d(gB,"href","/docs/transformers/pr_16329/en/model_doc/perceiver#transformers.PerceiverConfig"),d(hB,"href","/docs/transformers/pr_16329/en/model_doc/plbart#transformers.PLBartConfig"),d(pB,"href","/docs/transformers/pr_16329/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(_B,"href","/docs/transformers/pr_16329/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(uB,"href","/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(bB,"href","/docs/transformers/pr_16329/en/model_doc/rag#transformers.RagConfig"),d(vB,"href","/docs/transformers/pr_16329/en/model_doc/realm#transformers.RealmConfig"),d(TB,"href","/docs/transformers/pr_16329/en/model_doc/reformer#transformers.ReformerConfig"),d(FB,"href","/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertConfig"),d(CB,"href","/docs/transformers/pr_16329/en/model_doc/resnet#transformers.ResNetConfig"),d(MB,"href","/docs/transformers/pr_16329/en/model_doc/retribert#transformers.RetriBertConfig"),d(EB,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaConfig"),d(yB,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerConfig"),d(wB,"href","/docs/transformers/pr_16329/en/model_doc/segformer#transformers.SegformerConfig"),d(AB,"href","/docs/transformers/pr_16329/en/model_doc/sew#transformers.SEWConfig"),d(LB,"href","/docs/transformers/pr_16329/en/model_doc/sew-d#transformers.SEWDConfig"),d(BB,"href","/docs/transformers/pr_16329/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(xB,"href","/docs/transformers/pr_16329/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(kB,"href","/docs/transformers/pr_16329/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(RB,"href","/docs/transformers/pr_16329/en/model_doc/splinter#transformers.SplinterConfig"),d(SB,"href","/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(PB,"href","/docs/transformers/pr_16329/en/model_doc/swin#transformers.SwinConfig"),d($B,"href","/docs/transformers/pr_16329/en/model_doc/t5#transformers.T5Config"),d(IB,"href","/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TapasConfig"),d(DB,"href","/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(NB,"href","/docs/transformers/pr_16329/en/model_doc/trocr#transformers.TrOCRConfig"),d(jB,"href","/docs/transformers/pr_16329/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(qB,"href","/docs/transformers/pr_16329/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(GB,"href","/docs/transformers/pr_16329/en/model_doc/van#transformers.VanConfig"),d(OB,"href","/docs/transformers/pr_16329/en/model_doc/vilt#transformers.ViltConfig"),d(XB,"href","/docs/transformers/pr_16329/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(VB,"href","/docs/transformers/pr_16329/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(zB,"href","/docs/transformers/pr_16329/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(WB,"href","/docs/transformers/pr_16329/en/model_doc/vit#transformers.ViTConfig"),d(QB,"href","/docs/transformers/pr_16329/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(HB,"href","/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(UB,"href","/docs/transformers/pr_16329/en/model_doc/wavlm#transformers.WavLMConfig"),d(JB,"href","/docs/transformers/pr_16329/en/model_doc/xglm#transformers.XGLMConfig"),d(YB,"href","/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMConfig"),d(KB,"href","/docs/transformers/pr_16329/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(ZB,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(ex,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(ox,"href","/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetConfig"),d(rx,"href","/docs/transformers/pr_16329/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d($g,"class","docstring"),d(Wo,"class","docstring"),d(Ig,"id","transformers.AutoTokenizer"),d(Ig,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ig,"href","#transformers.AutoTokenizer"),d(Wi,"class","relative group"),d(tx,"href","/docs/transformers/pr_16329/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(ax,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertTokenizer"),d(nx,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(sx,"href","/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartTokenizer"),d(lx,"href","/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartTokenizerFast"),d(ix,"href","/docs/transformers/pr_16329/en/model_doc/barthez#transformers.BarthezTokenizer"),d(dx,"href","/docs/transformers/pr_16329/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(cx,"href","/docs/transformers/pr_16329/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(fx,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertTokenizer"),d(mx,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertTokenizerFast"),d(gx,"href","/docs/transformers/pr_16329/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(hx,"href","/docs/transformers/pr_16329/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(px,"href","/docs/transformers/pr_16329/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(_x,"href","/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(ux,"href","/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(bx,"href","/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(vx,"href","/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Tx,"href","/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Fx,"href","/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Cx,"href","/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Mx,"href","/docs/transformers/pr_16329/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Ex,"href","/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertTokenizer"),d(yx,"href","/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(wx,"href","/docs/transformers/pr_16329/en/model_doc/canine#transformers.CanineTokenizer"),d(Ax,"href","/docs/transformers/pr_16329/en/model_doc/clip#transformers.CLIPTokenizer"),d(Lx,"href","/docs/transformers/pr_16329/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Bx,"href","/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(xx,"href","/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(kx,"href","/docs/transformers/pr_16329/en/model_doc/cpm#transformers.CpmTokenizer"),d(Rx,"href","/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Sx,"href","/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Px,"href","/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d($x,"href","/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Ix,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Dx,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Nx,"href","/docs/transformers/pr_16329/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(jx,"href","/docs/transformers/pr_16329/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(qx,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraTokenizer"),d(Gx,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Ox,"href","/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Xx,"href","/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetTokenizer"),d(Vx,"href","/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(zx,"href","/docs/transformers/pr_16329/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Wx,"href","/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Qx,"href","/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Hx,"href","/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Ux,"href","/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Jx,"href","/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Yx,"href","/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Kx,"href","/docs/transformers/pr_16329/en/model_doc/herbert#transformers.HerbertTokenizer"),d(Zx,"href","/docs/transformers/pr_16329/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(ek,"href","/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(ok,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaTokenizer"),d(rk,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(tk,"href","/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(ak,"href","/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(nk,"href","/docs/transformers/pr_16329/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(sk,"href","/docs/transformers/pr_16329/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(lk,"href","/docs/transformers/pr_16329/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(ik,"href","/docs/transformers/pr_16329/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(dk,"href","/docs/transformers/pr_16329/en/model_doc/led#transformers.LEDTokenizer"),d(ck,"href","/docs/transformers/pr_16329/en/model_doc/led#transformers.LEDTokenizerFast"),d(fk,"href","/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerTokenizer"),d(mk,"href","/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(gk,"href","/docs/transformers/pr_16329/en/model_doc/luke#transformers.LukeTokenizer"),d(hk,"href","/docs/transformers/pr_16329/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(pk,"href","/docs/transformers/pr_16329/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(_k,"href","/docs/transformers/pr_16329/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(uk,"href","/docs/transformers/pr_16329/en/model_doc/marian#transformers.MarianTokenizer"),d(bk,"href","/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartTokenizer"),d(vk,"href","/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(Tk,"href","/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(Fk,"href","/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(Ck,"href","/docs/transformers/pr_16329/en/model_doc/mluke#transformers.MLukeTokenizer"),d(Mk,"href","/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(Ek,"href","/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(yk,"href","/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(wk,"href","/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(Ak,"href","/docs/transformers/pr_16329/en/model_doc/mt5#transformers.T5Tokenizer"),d(Lk,"href","/docs/transformers/pr_16329/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Bk,"href","/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(xk,"href","/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(kk,"href","/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Rk,"href","/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Sk,"href","/docs/transformers/pr_16329/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(Pk,"href","/docs/transformers/pr_16329/en/model_doc/phobert#transformers.PhobertTokenizer"),d($k,"href","/docs/transformers/pr_16329/en/model_doc/plbart#transformers.PLBartTokenizer"),d(Ik,"href","/docs/transformers/pr_16329/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(Dk,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertTokenizer"),d(Nk,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertTokenizerFast"),d(jk,"href","/docs/transformers/pr_16329/en/model_doc/rag#transformers.RagTokenizer"),d(qk,"href","/docs/transformers/pr_16329/en/model_doc/realm#transformers.RealmTokenizer"),d(Gk,"href","/docs/transformers/pr_16329/en/model_doc/realm#transformers.RealmTokenizerFast"),d(Ok,"href","/docs/transformers/pr_16329/en/model_doc/reformer#transformers.ReformerTokenizer"),d(Xk,"href","/docs/transformers/pr_16329/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(Vk,"href","/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertTokenizer"),d(zk,"href","/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(Wk,"href","/docs/transformers/pr_16329/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(Qk,"href","/docs/transformers/pr_16329/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Hk,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Uk,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Jk,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Yk,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Kk,"href","/docs/transformers/pr_16329/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Zk,"href","/docs/transformers/pr_16329/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(eR,"href","/docs/transformers/pr_16329/en/model_doc/splinter#transformers.SplinterTokenizer"),d(oR,"href","/docs/transformers/pr_16329/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(rR,"href","/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(tR,"href","/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(aR,"href","/docs/transformers/pr_16329/en/model_doc/mt5#transformers.T5Tokenizer"),d(nR,"href","/docs/transformers/pr_16329/en/model_doc/mt5#transformers.T5TokenizerFast"),d(sR,"href","/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TapasTokenizer"),d(lR,"href","/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(iR,"href","/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(dR,"href","/docs/transformers/pr_16329/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(cR,"href","/docs/transformers/pr_16329/en/model_doc/xglm#transformers.XGLMTokenizer"),d(fR,"href","/docs/transformers/pr_16329/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(mR,"href","/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMTokenizer"),d(gR,"href","/docs/transformers/pr_16329/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(hR,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(pR,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(_R,"href","/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(uR,"href","/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(mh,"class","docstring"),d(Qo,"class","docstring"),d(gh,"id","transformers.AutoFeatureExtractor"),d(gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gh,"href","#transformers.AutoFeatureExtractor"),d(Qi,"class","relative group"),d(bR,"href","/docs/transformers/pr_16329/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(vR,"href","/docs/transformers/pr_16329/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(TR,"href","/docs/transformers/pr_16329/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(FR,"href","/docs/transformers/pr_16329/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(CR,"href","/docs/transformers/pr_16329/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(MR,"href","/docs/transformers/pr_16329/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(ER,"href","/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(yR,"href","/docs/transformers/pr_16329/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(wR,"href","/docs/transformers/pr_16329/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(AR,"href","/docs/transformers/pr_16329/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(LR,"href","/docs/transformers/pr_16329/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(BR,"href","/docs/transformers/pr_16329/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(xR,"href","/docs/transformers/pr_16329/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(kR,"href","/docs/transformers/pr_16329/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(RR,"href","/docs/transformers/pr_16329/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(SR,"href","/docs/transformers/pr_16329/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(PR,"href","/docs/transformers/pr_16329/en/model_doc/vit#transformers.ViTFeatureExtractor"),d($R,"href","/docs/transformers/pr_16329/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(IR,"href","/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(Sh,"class","docstring"),d(Ho,"class","docstring"),d(Ph,"id","transformers.AutoProcessor"),d(Ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ph,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(DR,"href","/docs/transformers/pr_16329/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(NR,"href","/docs/transformers/pr_16329/en/model_doc/clip#transformers.CLIPProcessor"),d(jR,"href","/docs/transformers/pr_16329/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(qR,"href","/docs/transformers/pr_16329/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(GR,"href","/docs/transformers/pr_16329/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(OR,"href","/docs/transformers/pr_16329/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(XR,"href","/docs/transformers/pr_16329/en/model_doc/trocr#transformers.TrOCRProcessor"),d(VR,"href","/docs/transformers/pr_16329/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(zR,"href","/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Vh,"class","docstring"),d(Uo,"class","docstring"),d(zh,"id","transformers.AutoModel"),d(zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(Vr,"class","docstring"),d(WR,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertModel"),d(QR,"href","/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartModel"),d(HR,"href","/docs/transformers/pr_16329/en/model_doc/beit#transformers.BeitModel"),d(UR,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertModel"),d(JR,"href","/docs/transformers/pr_16329/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(YR,"href","/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdModel"),d(KR,"href","/docs/transformers/pr_16329/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(ZR,"href","/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(eS,"href","/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(oS,"href","/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertModel"),d(rS,"href","/docs/transformers/pr_16329/en/model_doc/canine#transformers.CanineModel"),d(tS,"href","/docs/transformers/pr_16329/en/model_doc/clip#transformers.CLIPModel"),d(aS,"href","/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertModel"),d(nS,"href","/docs/transformers/pr_16329/en/model_doc/convnext#transformers.ConvNextModel"),d(sS,"href","/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.CTRLModel"),d(lS,"href","/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(iS,"href","/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(dS,"href","/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaModel"),d(cS,"href","/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(fS,"href","/docs/transformers/pr_16329/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(mS,"href","/docs/transformers/pr_16329/en/model_doc/deit#transformers.DeiTModel"),d(gS,"href","/docs/transformers/pr_16329/en/model_doc/detr#transformers.DetrModel"),d(hS,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertModel"),d(pS,"href","/docs/transformers/pr_16329/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(_S,"href","/docs/transformers/pr_16329/en/model_doc/dpt#transformers.DPTModel"),d(uS,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraModel"),d(bS,"href","/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertModel"),d(vS,"href","/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetModel"),d(TS,"href","/docs/transformers/pr_16329/en/model_doc/fsmt#transformers.FSMTModel"),d(FS,"href","/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelModel"),d(CS,"href","/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelBaseModel"),d(MS,"href","/docs/transformers/pr_16329/en/model_doc/glpn#transformers.GLPNModel"),d(ES,"href","/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2Model"),d(yS,"href","/docs/transformers/pr_16329/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(wS,"href","/docs/transformers/pr_16329/en/model_doc/gptj#transformers.GPTJModel"),d(AS,"href","/docs/transformers/pr_16329/en/model_doc/hubert#transformers.HubertModel"),d(LS,"href","/docs/transformers/pr_16329/en/model_doc/ibert#transformers.IBertModel"),d(BS,"href","/docs/transformers/pr_16329/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(xS,"href","/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(kS,"href","/docs/transformers/pr_16329/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(RS,"href","/docs/transformers/pr_16329/en/model_doc/led#transformers.LEDModel"),d(SS,"href","/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerModel"),d(PS,"href","/docs/transformers/pr_16329/en/model_doc/luke#transformers.LukeModel"),d($S,"href","/docs/transformers/pr_16329/en/model_doc/lxmert#transformers.LxmertModel"),d(IS,"href","/docs/transformers/pr_16329/en/model_doc/m2m_100#transformers.M2M100Model"),d(DS,"href","/docs/transformers/pr_16329/en/model_doc/marian#transformers.MarianModel"),d(NS,"href","/docs/transformers/pr_16329/en/model_doc/maskformer#transformers.MaskFormerModel"),d(jS,"href","/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartModel"),d(qS,"href","/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(GS,"href","/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertModel"),d(OS,"href","/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetModel"),d(XS,"href","/docs/transformers/pr_16329/en/model_doc/mt5#transformers.MT5Model"),d(VS,"href","/docs/transformers/pr_16329/en/model_doc/nystromformer#transformers.NystromformerModel"),d(zS,"href","/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(WS,"href","/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.PegasusModel"),d(QS,"href","/docs/transformers/pr_16329/en/model_doc/perceiver#transformers.PerceiverModel"),d(HS,"href","/docs/transformers/pr_16329/en/model_doc/plbart#transformers.PLBartModel"),d(US,"href","/docs/transformers/pr_16329/en/model_doc/poolformer#transformers.PoolFormerModel"),d(JS,"href","/docs/transformers/pr_16329/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(YS,"href","/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertModel"),d(KS,"href","/docs/transformers/pr_16329/en/model_doc/reformer#transformers.ReformerModel"),d(ZS,"href","/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertModel"),d(eP,"href","/docs/transformers/pr_16329/en/model_doc/resnet#transformers.ResNetModel"),d(oP,"href","/docs/transformers/pr_16329/en/model_doc/retribert#transformers.RetriBertModel"),d(rP,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaModel"),d(tP,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerModel"),d(aP,"href","/docs/transformers/pr_16329/en/model_doc/segformer#transformers.SegformerModel"),d(nP,"href","/docs/transformers/pr_16329/en/model_doc/sew#transformers.SEWModel"),d(sP,"href","/docs/transformers/pr_16329/en/model_doc/sew-d#transformers.SEWDModel"),d(lP,"href","/docs/transformers/pr_16329/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(iP,"href","/docs/transformers/pr_16329/en/model_doc/splinter#transformers.SplinterModel"),d(dP,"href","/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(cP,"href","/docs/transformers/pr_16329/en/model_doc/swin#transformers.SwinModel"),d(fP,"href","/docs/transformers/pr_16329/en/model_doc/t5#transformers.T5Model"),d(mP,"href","/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TapasModel"),d(gP,"href","/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(hP,"href","/docs/transformers/pr_16329/en/model_doc/unispeech#transformers.UniSpeechModel"),d(pP,"href","/docs/transformers/pr_16329/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(_P,"href","/docs/transformers/pr_16329/en/model_doc/van#transformers.VanModel"),d(uP,"href","/docs/transformers/pr_16329/en/model_doc/vilt#transformers.ViltModel"),d(bP,"href","/docs/transformers/pr_16329/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(vP,"href","/docs/transformers/pr_16329/en/model_doc/visual_bert#transformers.VisualBertModel"),d(TP,"href","/docs/transformers/pr_16329/en/model_doc/vit#transformers.ViTModel"),d(FP,"href","/docs/transformers/pr_16329/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(CP,"href","/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(MP,"href","/docs/transformers/pr_16329/en/model_doc/wavlm#transformers.WavLMModel"),d(EP,"href","/docs/transformers/pr_16329/en/model_doc/xglm#transformers.XGLMModel"),d(yP,"href","/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMModel"),d(wP,"href","/docs/transformers/pr_16329/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(AP,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(LP,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(BP,"href","/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetModel"),d(xP,"href","/docs/transformers/pr_16329/en/model_doc/yoso#transformers.YosoModel"),d(De,"class","docstring"),d(Jo,"class","docstring"),d(x_,"id","transformers.AutoModelForPreTraining"),d(x_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(zr,"class","docstring"),d(kP,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertForPreTraining"),d(RP,"href","/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(SP,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertForPreTraining"),d(PP,"href","/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d($P,"href","/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(IP,"href","/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(DP,"href","/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(NP,"href","/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(jP,"href","/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(qP,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(GP,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraForPreTraining"),d(OP,"href","/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(XP,"href","/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetForPreTraining"),d(VP,"href","/docs/transformers/pr_16329/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(zP,"href","/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(WP,"href","/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(QP,"href","/docs/transformers/pr_16329/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(HP,"href","/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(UP,"href","/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(JP,"href","/docs/transformers/pr_16329/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(YP,"href","/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(KP,"href","/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(ZP,"href","/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(e$,"href","/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(o$,"href","/docs/transformers/pr_16329/en/model_doc/retribert#transformers.RetriBertModel"),d(r$,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(t$,"href","/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(a$,"href","/docs/transformers/pr_16329/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(n$,"href","/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(s$,"href","/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(l$,"href","/docs/transformers/pr_16329/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(i$,"href","/docs/transformers/pr_16329/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(d$,"href","/docs/transformers/pr_16329/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(c$,"href","/docs/transformers/pr_16329/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(f$,"href","/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(m$,"href","/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(g$,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(h$,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(p$,"href","/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(uu,"id","transformers.AutoModelForCausalLM"),d(uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uu,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(Wr,"class","docstring"),d(_$,"href","/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartForCausalLM"),d(u$,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertLMHeadModel"),d(b$,"href","/docs/transformers/pr_16329/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(v$,"href","/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(T$,"href","/docs/transformers/pr_16329/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(F$,"href","/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(C$,"href","/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(M$,"href","/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(E$,"href","/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(y$,"href","/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(w$,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraForCausalLM"),d(A$,"href","/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(L$,"href","/docs/transformers/pr_16329/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(B$,"href","/docs/transformers/pr_16329/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(x$,"href","/docs/transformers/pr_16329/en/model_doc/marian#transformers.MarianForCausalLM"),d(k$,"href","/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartForCausalLM"),d(R$,"href","/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(S$,"href","/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(P$,"href","/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d($$,"href","/docs/transformers/pr_16329/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(I$,"href","/docs/transformers/pr_16329/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(D$,"href","/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(N$,"href","/docs/transformers/pr_16329/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(j$,"href","/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(q$,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(G$,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(O$,"href","/docs/transformers/pr_16329/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(X$,"href","/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(V$,"href","/docs/transformers/pr_16329/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(z$,"href","/docs/transformers/pr_16329/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(W$,"href","/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(Q$,"href","/docs/transformers/pr_16329/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(H$,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(U$,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(J$,"href","/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(e2,"id","transformers.AutoModelForMaskedLM"),d(e2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e2,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(Qr,"class","docstring"),d(Y$,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(K$,"href","/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Z$,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertForMaskedLM"),d(eI,"href","/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(oI,"href","/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(rI,"href","/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(tI,"href","/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(aI,"href","/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(nI,"href","/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(sI,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(lI,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(iI,"href","/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(dI,"href","/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(cI,"href","/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(fI,"href","/docs/transformers/pr_16329/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(mI,"href","/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(gI,"href","/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(hI,"href","/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(pI,"href","/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(_I,"href","/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(uI,"href","/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(bI,"href","/docs/transformers/pr_16329/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(vI,"href","/docs/transformers/pr_16329/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(TI,"href","/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(FI,"href","/docs/transformers/pr_16329/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(CI,"href","/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(MI,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(EI,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(yI,"href","/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(wI,"href","/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(AI,"href","/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(LI,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(BI,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(xI,"href","/docs/transformers/pr_16329/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(qe,"class","docstring"),d(Zo,"class","docstring"),d(D2,"id","transformers.AutoModelForSeq2SeqLM"),d(D2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D2,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(Hr,"class","docstring"),d(kI,"href","/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(RI,"href","/docs/transformers/pr_16329/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(SI,"href","/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(PI,"href","/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d($I,"href","/docs/transformers/pr_16329/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(II,"href","/docs/transformers/pr_16329/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(DI,"href","/docs/transformers/pr_16329/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(NI,"href","/docs/transformers/pr_16329/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(jI,"href","/docs/transformers/pr_16329/en/model_doc/marian#transformers.MarianMTModel"),d(qI,"href","/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(GI,"href","/docs/transformers/pr_16329/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(OI,"href","/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(XI,"href","/docs/transformers/pr_16329/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(VI,"href","/docs/transformers/pr_16329/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(zI,"href","/docs/transformers/pr_16329/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(WI,"href","/docs/transformers/pr_16329/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(o1,"id","transformers.AutoModelForSequenceClassification"),d(o1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o1,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(Ur,"class","docstring"),d(QI,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(HI,"href","/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartForSequenceClassification"),d(UI,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertForSequenceClassification"),d(JI,"href","/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(YI,"href","/docs/transformers/pr_16329/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(KI,"href","/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(ZI,"href","/docs/transformers/pr_16329/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(eD,"href","/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(oD,"href","/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(rD,"href","/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(tD,"href","/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(aD,"href","/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(nD,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(sD,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(lD,"href","/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(iD,"href","/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(dD,"href","/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(cD,"href","/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(fD,"href","/docs/transformers/pr_16329/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(mD,"href","/docs/transformers/pr_16329/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(gD,"href","/docs/transformers/pr_16329/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(hD,"href","/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(pD,"href","/docs/transformers/pr_16329/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(_D,"href","/docs/transformers/pr_16329/en/model_doc/led#transformers.LEDForSequenceClassification"),d(uD,"href","/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(bD,"href","/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(vD,"href","/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(TD,"href","/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(FD,"href","/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(CD,"href","/docs/transformers/pr_16329/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(MD,"href","/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(ED,"href","/docs/transformers/pr_16329/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(yD,"href","/docs/transformers/pr_16329/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(wD,"href","/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(AD,"href","/docs/transformers/pr_16329/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(LD,"href","/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(BD,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(xD,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(kD,"href","/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(RD,"href","/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(SD,"href","/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(PD,"href","/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d($D,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(ID,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(DD,"href","/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(ND,"href","/docs/transformers/pr_16329/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(U1,"id","transformers.AutoModelForMultipleChoice"),d(U1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U1,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(Jr,"class","docstring"),d(jD,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(qD,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertForMultipleChoice"),d(GD,"href","/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(OD,"href","/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(XD,"href","/docs/transformers/pr_16329/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(VD,"href","/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(zD,"href","/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(WD,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(QD,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(HD,"href","/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(UD,"href","/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(JD,"href","/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(YD,"href","/docs/transformers/pr_16329/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(KD,"href","/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(ZD,"href","/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(eN,"href","/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(oN,"href","/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(rN,"href","/docs/transformers/pr_16329/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(tN,"href","/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(aN,"href","/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(nN,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(sN,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(lN,"href","/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(iN,"href","/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(dN,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(cN,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(fN,"href","/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(mN,"href","/docs/transformers/pr_16329/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Xe,"class","docstring"),d(rr,"class","docstring"),d(yb,"id","transformers.AutoModelForNextSentencePrediction"),d(yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yb,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(Yr,"class","docstring"),d(gN,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(hN,"href","/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(pN,"href","/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(_N,"href","/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(uN,"href","/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Ve,"class","docstring"),d(tr,"class","docstring"),d(Rb,"id","transformers.AutoModelForTokenClassification"),d(Rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rb,"href","#transformers.AutoModelForTokenClassification"),d(Td,"class","relative group"),d(Kr,"class","docstring"),d(bN,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(vN,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertForTokenClassification"),d(TN,"href","/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(FN,"href","/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(CN,"href","/docs/transformers/pr_16329/en/model_doc/canine#transformers.CanineForTokenClassification"),d(MN,"href","/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(EN,"href","/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(yN,"href","/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(wN,"href","/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(AN,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(LN,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(BN,"href","/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(xN,"href","/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(kN,"href","/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(RN,"href","/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(SN,"href","/docs/transformers/pr_16329/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(PN,"href","/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d($N,"href","/docs/transformers/pr_16329/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(IN,"href","/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(DN,"href","/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(NN,"href","/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(jN,"href","/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(qN,"href","/docs/transformers/pr_16329/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(GN,"href","/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(ON,"href","/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(XN,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(VN,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(zN,"href","/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(WN,"href","/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(QN,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(HN,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(UN,"href","/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(JN,"href","/docs/transformers/pr_16329/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(g3,"id","transformers.AutoModelForQuestionAnswering"),d(g3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g3,"href","#transformers.AutoModelForQuestionAnswering"),d(Md,"class","relative group"),d(Zr,"class","docstring"),d(YN,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(KN,"href","/docs/transformers/pr_16329/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(ZN,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(ej,"href","/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(oj,"href","/docs/transformers/pr_16329/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(rj,"href","/docs/transformers/pr_16329/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(tj,"href","/docs/transformers/pr_16329/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(aj,"href","/docs/transformers/pr_16329/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(nj,"href","/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(sj,"href","/docs/transformers/pr_16329/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(lj,"href","/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(ij,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(dj,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(cj,"href","/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(fj,"href","/docs/transformers/pr_16329/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(mj,"href","/docs/transformers/pr_16329/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(gj,"href","/docs/transformers/pr_16329/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(hj,"href","/docs/transformers/pr_16329/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(pj,"href","/docs/transformers/pr_16329/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(_j,"href","/docs/transformers/pr_16329/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(uj,"href","/docs/transformers/pr_16329/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(bj,"href","/docs/transformers/pr_16329/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(vj,"href","/docs/transformers/pr_16329/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(Tj,"href","/docs/transformers/pr_16329/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(Fj,"href","/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(Cj,"href","/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(Mj,"href","/docs/transformers/pr_16329/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(Ej,"href","/docs/transformers/pr_16329/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(yj,"href","/docs/transformers/pr_16329/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(wj,"href","/docs/transformers/pr_16329/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(Aj,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(Lj,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(Bj,"href","/docs/transformers/pr_16329/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(xj,"href","/docs/transformers/pr_16329/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(kj,"href","/docs/transformers/pr_16329/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(Rj,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(Sj,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(Pj,"href","/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d($j,"href","/docs/transformers/pr_16329/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(We,"class","docstring"),d(nr,"class","docstring"),d(ev,"id","transformers.AutoModelForTableQuestionAnswering"),d(ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ev,"href","#transformers.AutoModelForTableQuestionAnswering"),d(wd,"class","relative group"),d(et,"class","docstring"),d(Ij,"href","/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(Qe,"class","docstring"),d(sr,"class","docstring"),d(tv,"id","transformers.AutoModelForImageClassification"),d(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tv,"href","#transformers.AutoModelForImageClassification"),d(Bd,"class","relative group"),d(ot,"class","docstring"),d(Dj,"href","/docs/transformers/pr_16329/en/model_doc/beit#transformers.BeitForImageClassification"),d(Nj,"href","/docs/transformers/pr_16329/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(jj,"href","/docs/transformers/pr_16329/en/model_doc/deit#transformers.DeiTForImageClassification"),d(qj,"href","/docs/transformers/pr_16329/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(Gj,"href","/docs/transformers/pr_16329/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(Oj,"href","/docs/transformers/pr_16329/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(Xj,"href","/docs/transformers/pr_16329/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(Vj,"href","/docs/transformers/pr_16329/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(zj,"href","/docs/transformers/pr_16329/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(Wj,"href","/docs/transformers/pr_16329/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(Qj,"href","/docs/transformers/pr_16329/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(Hj,"href","/docs/transformers/pr_16329/en/model_doc/swin#transformers.SwinForImageClassification"),d(Uj,"href","/docs/transformers/pr_16329/en/model_doc/van#transformers.VanForImageClassification"),d(Jj,"href","/docs/transformers/pr_16329/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(hv,"id","transformers.AutoModelForVision2Seq"),d(hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hv,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(rt,"class","docstring"),d(Yj,"href","/docs/transformers/pr_16329/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(uv,"id","transformers.AutoModelForAudioClassification"),d(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uv,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(tt,"class","docstring"),d(Kj,"href","/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(Zj,"href","/docs/transformers/pr_16329/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(eq,"href","/docs/transformers/pr_16329/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(oq,"href","/docs/transformers/pr_16329/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(rq,"href","/docs/transformers/pr_16329/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(tq,"href","/docs/transformers/pr_16329/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(aq,"href","/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(nq,"href","/docs/transformers/pr_16329/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(Av,"id","transformers.AutoModelForAudioFrameClassification"),d(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Av,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(at,"class","docstring"),d(sq,"href","/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(lq,"href","/docs/transformers/pr_16329/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(iq,"href","/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(dq,"href","/docs/transformers/pr_16329/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(Sv,"id","transformers.AutoModelForCTC"),d(Sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Sv,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(nt,"class","docstring"),d(cq,"href","/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(fq,"href","/docs/transformers/pr_16329/en/model_doc/hubert#transformers.HubertForCTC"),d(mq,"href","/docs/transformers/pr_16329/en/model_doc/sew#transformers.SEWForCTC"),d(gq,"href","/docs/transformers/pr_16329/en/model_doc/sew-d#transformers.SEWDForCTC"),d(hq,"href","/docs/transformers/pr_16329/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(pq,"href","/docs/transformers/pr_16329/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(_q,"href","/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(uq,"href","/docs/transformers/pr_16329/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(Xv,"id","transformers.AutoModelForSpeechSeq2Seq"),d(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xv,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Vd,"class","relative group"),d(st,"class","docstring"),d(bq,"href","/docs/transformers/pr_16329/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(vq,"href","/docs/transformers/pr_16329/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(Qv,"id","transformers.AutoModelForAudioXVector"),d(Qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qv,"href","#transformers.AutoModelForAudioXVector"),d(Qd,"class","relative group"),d(lt,"class","docstring"),d(Tq,"href","/docs/transformers/pr_16329/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(Fq,"href","/docs/transformers/pr_16329/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(Cq,"href","/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(Mq,"href","/docs/transformers/pr_16329/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(Zv,"id","transformers.AutoModelForMaskedImageModeling"),d(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Zv,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(it,"class","docstring"),d(Eq,"href","/docs/transformers/pr_16329/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(yq,"href","/docs/transformers/pr_16329/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(wq,"href","/docs/transformers/pr_16329/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(a6,"id","transformers.AutoModelForObjectDetection"),d(a6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a6,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(dt,"class","docstring"),d(Aq,"href","/docs/transformers/pr_16329/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(l6,"id","transformers.AutoModelForImageSegmentation"),d(l6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l6,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(ct,"class","docstring"),d(Lq,"href","/docs/transformers/pr_16329/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(c6,"id","transformers.AutoModelForSemanticSegmentation"),d(c6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c6,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(ft,"class","docstring"),d(Bq,"href","/docs/transformers/pr_16329/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(xq,"href","/docs/transformers/pr_16329/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(kq,"href","/docs/transformers/pr_16329/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(p6,"id","transformers.AutoModelForInstanceSegmentation"),d(p6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p6,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(mt,"class","docstring"),d(Rq,"href","/docs/transformers/pr_16329/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(b6,"id","transformers.TFAutoModel"),d(b6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b6,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(gt,"class","docstring"),d(Sq,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.TFAlbertModel"),d(Pq,"href","/docs/transformers/pr_16329/en/model_doc/bart#transformers.TFBartModel"),d($q,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.TFBertModel"),d(Iq,"href","/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(Dq,"href","/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(Nq,"href","/docs/transformers/pr_16329/en/model_doc/camembert#transformers.TFCamembertModel"),d(jq,"href","/docs/transformers/pr_16329/en/model_doc/clip#transformers.TFCLIPModel"),d(qq,"href","/docs/transformers/pr_16329/en/model_doc/convbert#transformers.TFConvBertModel"),d(Gq,"href","/docs/transformers/pr_16329/en/model_doc/convnext#transformers.TFConvNextModel"),d(Oq,"href","/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.TFCTRLModel"),d(Xq,"href","/docs/transformers/pr_16329/en/model_doc/deberta#transformers.TFDebertaModel"),d(Vq,"href","/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(zq,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(Wq,"href","/docs/transformers/pr_16329/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(Qq,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.TFElectraModel"),d(Hq,"href","/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(Uq,"href","/docs/transformers/pr_16329/en/model_doc/funnel#transformers.TFFunnelModel"),d(Jq,"href","/docs/transformers/pr_16329/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(Yq,"href","/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.TFGPT2Model"),d(Kq,"href","/docs/transformers/pr_16329/en/model_doc/gptj#transformers.TFGPTJModel"),d(Zq,"href","/docs/transformers/pr_16329/en/model_doc/hubert#transformers.TFHubertModel"),d(eG,"href","/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(oG,"href","/docs/transformers/pr_16329/en/model_doc/led#transformers.TFLEDModel"),d(rG,"href","/docs/transformers/pr_16329/en/model_doc/longformer#transformers.TFLongformerModel"),d(tG,"href","/docs/transformers/pr_16329/en/model_doc/lxmert#transformers.TFLxmertModel"),d(aG,"href","/docs/transformers/pr_16329/en/model_doc/marian#transformers.TFMarianModel"),d(nG,"href","/docs/transformers/pr_16329/en/model_doc/mbart#transformers.TFMBartModel"),d(sG,"href","/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(lG,"href","/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.TFMPNetModel"),d(iG,"href","/docs/transformers/pr_16329/en/model_doc/mt5#transformers.TFMT5Model"),d(dG,"href","/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(cG,"href","/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.TFPegasusModel"),d(fG,"href","/docs/transformers/pr_16329/en/model_doc/rembert#transformers.TFRemBertModel"),d(mG,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.TFRobertaModel"),d(gG,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.TFRoFormerModel"),d(hG,"href","/docs/transformers/pr_16329/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(pG,"href","/docs/transformers/pr_16329/en/model_doc/t5#transformers.TFT5Model"),d(_G,"href","/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TFTapasModel"),d(uG,"href","/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(bG,"href","/docs/transformers/pr_16329/en/model_doc/vit#transformers.TFViTModel"),d(vG,"href","/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(TG,"href","/docs/transformers/pr_16329/en/model_doc/xlm#transformers.TFXLMModel"),d(FG,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(CG,"href","/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(lT,"id","transformers.TFAutoModelForPreTraining"),d(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lT,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(ht,"class","docstring"),d(MG,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(EG,"href","/docs/transformers/pr_16329/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(yG,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.TFBertForPreTraining"),d(wG,"href","/docs/transformers/pr_16329/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(AG,"href","/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(LG,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(BG,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(xG,"href","/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(kG,"href","/docs/transformers/pr_16329/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(RG,"href","/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(SG,"href","/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(PG,"href","/docs/transformers/pr_16329/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d($G,"href","/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(IG,"href","/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(DG,"href","/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(NG,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(jG,"href","/docs/transformers/pr_16329/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(qG,"href","/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(GG,"href","/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(OG,"href","/docs/transformers/pr_16329/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(XG,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(VG,"href","/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Tr,"class","docstring"),d(xT,"id","transformers.TFAutoModelForCausalLM"),d(xT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xT,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(pt,"class","docstring"),d(zG,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(WG,"href","/docs/transformers/pr_16329/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(QG,"href","/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(HG,"href","/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(UG,"href","/docs/transformers/pr_16329/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(JG,"href","/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(YG,"href","/docs/transformers/pr_16329/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(KG,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(ZG,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(eO,"href","/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(oO,"href","/docs/transformers/pr_16329/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(rO,"href","/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Fr,"class","docstring"),d(XT,"id","transformers.TFAutoModelForImageClassification"),d(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XT,"href","#transformers.TFAutoModelForImageClassification"),d(Cc,"class","relative group"),d(_t,"class","docstring"),d(tO,"href","/docs/transformers/pr_16329/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(aO,"href","/docs/transformers/pr_16329/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Cr,"class","docstring"),d(WT,"id","transformers.TFAutoModelForMaskedLM"),d(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WT,"href","#transformers.TFAutoModelForMaskedLM"),d(yc,"class","relative group"),d(ut,"class","docstring"),d(nO,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(sO,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(lO,"href","/docs/transformers/pr_16329/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(iO,"href","/docs/transformers/pr_16329/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(dO,"href","/docs/transformers/pr_16329/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(cO,"href","/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(fO,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(mO,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(gO,"href","/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(hO,"href","/docs/transformers/pr_16329/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(pO,"href","/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(_O,"href","/docs/transformers/pr_16329/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(uO,"href","/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(bO,"href","/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(vO,"href","/docs/transformers/pr_16329/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(TO,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(FO,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(CO,"href","/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(MO,"href","/docs/transformers/pr_16329/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(EO,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Mr,"class","docstring"),d(gF,"id","transformers.TFAutoModelForSeq2SeqLM"),d(gF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gF,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(bt,"class","docstring"),d(yO,"href","/docs/transformers/pr_16329/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(wO,"href","/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(AO,"href","/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(LO,"href","/docs/transformers/pr_16329/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(BO,"href","/docs/transformers/pr_16329/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(xO,"href","/docs/transformers/pr_16329/en/model_doc/marian#transformers.TFMarianMTModel"),d(kO,"href","/docs/transformers/pr_16329/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(RO,"href","/docs/transformers/pr_16329/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(SO,"href","/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(PO,"href","/docs/transformers/pr_16329/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Er,"class","docstring"),d(EF,"id","transformers.TFAutoModelForSequenceClassification"),d(EF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EF,"href","#transformers.TFAutoModelForSequenceClassification"),d(kc,"class","relative group"),d(vt,"class","docstring"),d($O,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(IO,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(DO,"href","/docs/transformers/pr_16329/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(NO,"href","/docs/transformers/pr_16329/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(jO,"href","/docs/transformers/pr_16329/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(qO,"href","/docs/transformers/pr_16329/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(GO,"href","/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(OO,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(XO,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(VO,"href","/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(zO,"href","/docs/transformers/pr_16329/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(WO,"href","/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(QO,"href","/docs/transformers/pr_16329/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(HO,"href","/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(UO,"href","/docs/transformers/pr_16329/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(JO,"href","/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(YO,"href","/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(KO,"href","/docs/transformers/pr_16329/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(ZO,"href","/docs/transformers/pr_16329/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(eX,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(oX,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(rX,"href","/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(tX,"href","/docs/transformers/pr_16329/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(aX,"href","/docs/transformers/pr_16329/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(nX,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(sX,"href","/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring"),d(yr,"class","docstring"),d(YF,"id","transformers.TFAutoModelForMultipleChoice"),d(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YF,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(Tt,"class","docstring"),d(lX,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(iX,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(dX,"href","/docs/transformers/pr_16329/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(cX,"href","/docs/transformers/pr_16329/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(fX,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(mX,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(gX,"href","/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(hX,"href","/docs/transformers/pr_16329/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(pX,"href","/docs/transformers/pr_16329/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(_X,"href","/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(uX,"href","/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(bX,"href","/docs/transformers/pr_16329/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(vX,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(TX,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(FX,"href","/docs/transformers/pr_16329/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(CX,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(MX,"href","/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(p9,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(p9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p9,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Dc,"class","relative group"),d(Ft,"class","docstring"),d(EX,"href","/docs/transformers/pr_16329/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Co,"class","docstring"),d(Ar,"class","docstring"),d(u9,"id","transformers.TFAutoModelForTokenClassification"),d(u9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u9,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d(Ct,"class","docstring"),d(yX,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(wX,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(AX,"href","/docs/transformers/pr_16329/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(LX,"href","/docs/transformers/pr_16329/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(BX,"href","/docs/transformers/pr_16329/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(xX,"href","/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(kX,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(RX,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(SX,"href","/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(PX,"href","/docs/transformers/pr_16329/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d($X,"href","/docs/transformers/pr_16329/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(IX,"href","/docs/transformers/pr_16329/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(DX,"href","/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(NX,"href","/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(jX,"href","/docs/transformers/pr_16329/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(qX,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(GX,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(OX,"href","/docs/transformers/pr_16329/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(XX,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(VX,"href","/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Mo,"class","docstring"),d(Lr,"class","docstring"),d(N9,"id","transformers.TFAutoModelForQuestionAnswering"),d(N9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N9,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Xc,"class","relative group"),d(Mt,"class","docstring"),d(zX,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(WX,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(QX,"href","/docs/transformers/pr_16329/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(HX,"href","/docs/transformers/pr_16329/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(UX,"href","/docs/transformers/pr_16329/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(JX,"href","/docs/transformers/pr_16329/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(YX,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(KX,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(ZX,"href","/docs/transformers/pr_16329/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(eV,"href","/docs/transformers/pr_16329/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(oV,"href","/docs/transformers/pr_16329/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(rV,"href","/docs/transformers/pr_16329/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(tV,"href","/docs/transformers/pr_16329/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(aV,"href","/docs/transformers/pr_16329/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(nV,"href","/docs/transformers/pr_16329/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(sV,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(lV,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(iV,"href","/docs/transformers/pr_16329/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(dV,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(cV,"href","/docs/transformers/pr_16329/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Eo,"class","docstring"),d(Br,"class","docstring"),d(nC,"id","transformers.TFAutoModelForVision2Seq"),d(nC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nC,"href","#transformers.TFAutoModelForVision2Seq"),d(Wc,"class","relative group"),d(Et,"class","docstring"),d(fV,"href","/docs/transformers/pr_16329/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(yo,"class","docstring"),d(xr,"class","docstring"),d(lC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(yt,"class","docstring"),d(mV,"href","/docs/transformers/pr_16329/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(dC,"id","transformers.FlaxAutoModel"),d(dC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dC,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(wt,"class","docstring"),d(gV,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.FlaxAlbertModel"),d(hV,"href","/docs/transformers/pr_16329/en/model_doc/bart#transformers.FlaxBartModel"),d(pV,"href","/docs/transformers/pr_16329/en/model_doc/beit#transformers.FlaxBeitModel"),d(_V,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.FlaxBertModel"),d(uV,"href","/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(bV,"href","/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(vV,"href","/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(TV,"href","/docs/transformers/pr_16329/en/model_doc/clip#transformers.FlaxCLIPModel"),d(FV,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(CV,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.FlaxElectraModel"),d(MV,"href","/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(EV,"href","/docs/transformers/pr_16329/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(yV,"href","/docs/transformers/pr_16329/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(wV,"href","/docs/transformers/pr_16329/en/model_doc/marian#transformers.FlaxMarianModel"),d(AV,"href","/docs/transformers/pr_16329/en/model_doc/mbart#transformers.FlaxMBartModel"),d(LV,"href","/docs/transformers/pr_16329/en/model_doc/mt5#transformers.FlaxMT5Model"),d(BV,"href","/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(xV,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(kV,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(RV,"href","/docs/transformers/pr_16329/en/model_doc/t5#transformers.FlaxT5Model"),d(SV,"href","/docs/transformers/pr_16329/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(PV,"href","/docs/transformers/pr_16329/en/model_doc/vit#transformers.FlaxViTModel"),d($V,"href","/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(IV,"href","/docs/transformers/pr_16329/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(DV,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Ao,"class","docstring"),d(Rr,"class","docstring"),d($C,"id","transformers.FlaxAutoModelForCausalLM"),d($C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($C,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(At,"class","docstring"),d(NV,"href","/docs/transformers/pr_16329/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(jV,"href","/docs/transformers/pr_16329/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(qV,"href","/docs/transformers/pr_16329/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(GV,"href","/docs/transformers/pr_16329/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(OV,"href","/docs/transformers/pr_16329/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Sr,"class","docstring"),d(GC,"id","transformers.FlaxAutoModelForPreTraining"),d(GC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(GC,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(Lt,"class","docstring"),d(XV,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(VV,"href","/docs/transformers/pr_16329/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(zV,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(WV,"href","/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(QV,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(HV,"href","/docs/transformers/pr_16329/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(UV,"href","/docs/transformers/pr_16329/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(JV,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(YV,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(KV,"href","/docs/transformers/pr_16329/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ZV,"href","/docs/transformers/pr_16329/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(ez,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Bo,"class","docstring"),d(Pr,"class","docstring"),d(eM,"id","transformers.FlaxAutoModelForMaskedLM"),d(eM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eM,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(Bt,"class","docstring"),d(oz,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(rz,"href","/docs/transformers/pr_16329/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(tz,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(az,"href","/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(nz,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(sz,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(lz,"href","/docs/transformers/pr_16329/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(iz,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(dz,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(cz,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d($r,"class","docstring"),d(fM,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fM,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(xt,"class","docstring"),d(fz,"href","/docs/transformers/pr_16329/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(mz,"href","/docs/transformers/pr_16329/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(gz,"href","/docs/transformers/pr_16329/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(hz,"href","/docs/transformers/pr_16329/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(pz,"href","/docs/transformers/pr_16329/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(_z,"href","/docs/transformers/pr_16329/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(uz,"href","/docs/transformers/pr_16329/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(bz,"href","/docs/transformers/pr_16329/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(vz,"href","/docs/transformers/pr_16329/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ko,"class","docstring"),d(Ir,"class","docstring"),d(FM,"id","transformers.FlaxAutoModelForSequenceClassification"),d(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FM,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(kt,"class","docstring"),d(Tz,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(Fz,"href","/docs/transformers/pr_16329/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(Cz,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(Mz,"href","/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(Ez,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(yz,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(wz,"href","/docs/transformers/pr_16329/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(Az,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(Lz,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(Bz,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(Dr,"class","docstring"),d(RM,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(RM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(RM,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(Rt,"class","docstring"),d(xz,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(kz,"href","/docs/transformers/pr_16329/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(Rz,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(Sz,"href","/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(Pz,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d($z,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(Iz,"href","/docs/transformers/pr_16329/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(Dz,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(Nz,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(jz,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(So,"class","docstring"),d(Nr,"class","docstring"),d(XM,"id","transformers.FlaxAutoModelForTokenClassification"),d(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XM,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Tf,"class","relative group"),d(St,"class","docstring"),d(qz,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(Gz,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(Oz,"href","/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(Xz,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(Vz,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(zz,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(Wz,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(Qz,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(KM,"id","transformers.FlaxAutoModelForMultipleChoice"),d(KM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(KM,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Mf,"class","relative group"),d(Pt,"class","docstring"),d(Hz,"href","/docs/transformers/pr_16329/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(Uz,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Jz,"href","/docs/transformers/pr_16329/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(Yz,"href","/docs/transformers/pr_16329/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Kz,"href","/docs/transformers/pr_16329/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(Zz,"href","/docs/transformers/pr_16329/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(eW,"href","/docs/transformers/pr_16329/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(oW,"href","/docs/transformers/pr_16329/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(qr,"class","docstring"),d(l4,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(l4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l4,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(wf,"class","relative group"),d($t,"class","docstring"),d(rW,"href","/docs/transformers/pr_16329/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(d4,"id","transformers.FlaxAutoModelForImageClassification"),d(d4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d4,"href","#transformers.FlaxAutoModelForImageClassification"),d(Bf,"class","relative group"),d(It,"class","docstring"),d(tW,"href","/docs/transformers/pr_16329/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(aW,"href","/docs/transformers/pr_16329/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(Do,"class","docstring"),d(Or,"class","docstring"),d(m4,"id","transformers.FlaxAutoModelForVision2Seq"),d(m4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m4,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(Dt,"class","docstring"),d(nW,"href","/docs/transformers/pr_16329/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Xr,"class","docstring")},m(c,u){e(document.head,Z),b(c,io,u),b(c,de,u),e(de,Ee),e(Ee,lo),g(me,lo,null),e(de,Ce),e(de,Vo),e(Vo,Ii),b(c,Df,u),b(c,fa,u),e(fa,Di),e(fa,Ni),e(Ni,gE),e(fa,Nf),b(c,Be,u),b(c,co,u),e(co,ji),e(co,Gn),e(Gn,hE),e(co,On),e(co,Xn),e(Xn,pE),e(co,qi),e(co,Vn),e(Vn,_E),e(co,Gi),b(c,jf,u),g(qa,c,u),b(c,fo,u),b(c,_e,u),e(_e,n8),e(_e,Oi),e(Oi,s8),e(_e,l8),b(c,zo,u),b(c,Ga,u),e(Ga,i8),e(Ga,qf),e(qf,d8),e(Ga,O$e),b(c,Bke,u),b(c,Xi,u),e(Xi,Gf),e(Gf,ZQ),g(uE,ZQ,null),e(Xi,X$e),e(Xi,eH),e(eH,V$e),b(c,xke,u),b(c,zn,u),e(zn,z$e),e(zn,oH),e(oH,W$e),e(zn,Q$e),e(zn,rH),e(rH,H$e),e(zn,U$e),b(c,kke,u),g(bE,c,u),b(c,Rke,u),b(c,c8,u),e(c8,J$e),b(c,Ske,u),g(Of,c,u),b(c,Pke,u),b(c,Vi,u),e(Vi,Xf),e(Xf,tH),g(vE,tH,null),e(Vi,Y$e),e(Vi,aH),e(aH,K$e),b(c,$ke,u),b(c,Wo,u),g(TE,Wo,null),e(Wo,Z$e),e(Wo,FE),e(FE,eIe),e(FE,f8),e(f8,oIe),e(FE,rIe),e(Wo,tIe),e(Wo,CE),e(CE,aIe),e(CE,nH),e(nH,nIe),e(CE,sIe),e(Wo,lIe),e(Wo,mo),g(ME,mo,null),e(mo,iIe),e(mo,sH),e(sH,dIe),e(mo,cIe),e(mo,zi),e(zi,fIe),e(zi,lH),e(lH,mIe),e(zi,gIe),e(zi,iH),e(iH,hIe),e(zi,pIe),e(mo,_Ie),e(mo,v),e(v,Vf),e(Vf,dH),e(dH,uIe),e(Vf,bIe),e(Vf,m8),e(m8,vIe),e(Vf,TIe),e(v,FIe),e(v,zf),e(zf,cH),e(cH,CIe),e(zf,MIe),e(zf,g8),e(g8,EIe),e(zf,yIe),e(v,wIe),e(v,Wf),e(Wf,fH),e(fH,AIe),e(Wf,LIe),e(Wf,h8),e(h8,BIe),e(Wf,xIe),e(v,kIe),e(v,Qf),e(Qf,mH),e(mH,RIe),e(Qf,SIe),e(Qf,p8),e(p8,PIe),e(Qf,$Ie),e(v,IIe),e(v,Hf),e(Hf,gH),e(gH,DIe),e(Hf,NIe),e(Hf,_8),e(_8,jIe),e(Hf,qIe),e(v,GIe),e(v,Uf),e(Uf,hH),e(hH,OIe),e(Uf,XIe),e(Uf,u8),e(u8,VIe),e(Uf,zIe),e(v,WIe),e(v,Jf),e(Jf,pH),e(pH,QIe),e(Jf,HIe),e(Jf,b8),e(b8,UIe),e(Jf,JIe),e(v,YIe),e(v,Yf),e(Yf,_H),e(_H,KIe),e(Yf,ZIe),e(Yf,v8),e(v8,eDe),e(Yf,oDe),e(v,rDe),e(v,Kf),e(Kf,uH),e(uH,tDe),e(Kf,aDe),e(Kf,T8),e(T8,nDe),e(Kf,sDe),e(v,lDe),e(v,Zf),e(Zf,bH),e(bH,iDe),e(Zf,dDe),e(Zf,F8),e(F8,cDe),e(Zf,fDe),e(v,mDe),e(v,em),e(em,vH),e(vH,gDe),e(em,hDe),e(em,C8),e(C8,pDe),e(em,_De),e(v,uDe),e(v,om),e(om,TH),e(TH,bDe),e(om,vDe),e(om,M8),e(M8,TDe),e(om,FDe),e(v,CDe),e(v,rm),e(rm,FH),e(FH,MDe),e(rm,EDe),e(rm,E8),e(E8,yDe),e(rm,wDe),e(v,ADe),e(v,tm),e(tm,CH),e(CH,LDe),e(tm,BDe),e(tm,y8),e(y8,xDe),e(tm,kDe),e(v,RDe),e(v,am),e(am,MH),e(MH,SDe),e(am,PDe),e(am,w8),e(w8,$De),e(am,IDe),e(v,DDe),e(v,nm),e(nm,EH),e(EH,NDe),e(nm,jDe),e(nm,A8),e(A8,qDe),e(nm,GDe),e(v,ODe),e(v,sm),e(sm,yH),e(yH,XDe),e(sm,VDe),e(sm,L8),e(L8,zDe),e(sm,WDe),e(v,QDe),e(v,lm),e(lm,wH),e(wH,HDe),e(lm,UDe),e(lm,B8),e(B8,JDe),e(lm,YDe),e(v,KDe),e(v,im),e(im,AH),e(AH,ZDe),e(im,eNe),e(im,x8),e(x8,oNe),e(im,rNe),e(v,tNe),e(v,dm),e(dm,LH),e(LH,aNe),e(dm,nNe),e(dm,k8),e(k8,sNe),e(dm,lNe),e(v,iNe),e(v,cm),e(cm,BH),e(BH,dNe),e(cm,cNe),e(cm,R8),e(R8,fNe),e(cm,mNe),e(v,gNe),e(v,fm),e(fm,xH),e(xH,hNe),e(fm,pNe),e(fm,S8),e(S8,_Ne),e(fm,uNe),e(v,bNe),e(v,mm),e(mm,kH),e(kH,vNe),e(mm,TNe),e(mm,P8),e(P8,FNe),e(mm,CNe),e(v,MNe),e(v,gm),e(gm,RH),e(RH,ENe),e(gm,yNe),e(gm,$8),e($8,wNe),e(gm,ANe),e(v,LNe),e(v,hm),e(hm,SH),e(SH,BNe),e(hm,xNe),e(hm,I8),e(I8,kNe),e(hm,RNe),e(v,SNe),e(v,pm),e(pm,PH),e(PH,PNe),e(pm,$Ne),e(pm,D8),e(D8,INe),e(pm,DNe),e(v,NNe),e(v,_m),e(_m,$H),e($H,jNe),e(_m,qNe),e(_m,N8),e(N8,GNe),e(_m,ONe),e(v,XNe),e(v,um),e(um,IH),e(IH,VNe),e(um,zNe),e(um,j8),e(j8,WNe),e(um,QNe),e(v,HNe),e(v,bm),e(bm,DH),e(DH,UNe),e(bm,JNe),e(bm,q8),e(q8,YNe),e(bm,KNe),e(v,ZNe),e(v,vm),e(vm,NH),e(NH,eje),e(vm,oje),e(vm,G8),e(G8,rje),e(vm,tje),e(v,aje),e(v,Tm),e(Tm,jH),e(jH,nje),e(Tm,sje),e(Tm,O8),e(O8,lje),e(Tm,ije),e(v,dje),e(v,Fm),e(Fm,qH),e(qH,cje),e(Fm,fje),e(Fm,X8),e(X8,mje),e(Fm,gje),e(v,hje),e(v,Cm),e(Cm,GH),e(GH,pje),e(Cm,_je),e(Cm,V8),e(V8,uje),e(Cm,bje),e(v,vje),e(v,Mm),e(Mm,OH),e(OH,Tje),e(Mm,Fje),e(Mm,z8),e(z8,Cje),e(Mm,Mje),e(v,Eje),e(v,Em),e(Em,XH),e(XH,yje),e(Em,wje),e(Em,W8),e(W8,Aje),e(Em,Lje),e(v,Bje),e(v,ym),e(ym,VH),e(VH,xje),e(ym,kje),e(ym,Q8),e(Q8,Rje),e(ym,Sje),e(v,Pje),e(v,wm),e(wm,zH),e(zH,$je),e(wm,Ije),e(wm,H8),e(H8,Dje),e(wm,Nje),e(v,jje),e(v,Am),e(Am,WH),e(WH,qje),e(Am,Gje),e(Am,U8),e(U8,Oje),e(Am,Xje),e(v,Vje),e(v,Lm),e(Lm,QH),e(QH,zje),e(Lm,Wje),e(Lm,J8),e(J8,Qje),e(Lm,Hje),e(v,Uje),e(v,Bm),e(Bm,HH),e(HH,Jje),e(Bm,Yje),e(Bm,Y8),e(Y8,Kje),e(Bm,Zje),e(v,eqe),e(v,xm),e(xm,UH),e(UH,oqe),e(xm,rqe),e(xm,K8),e(K8,tqe),e(xm,aqe),e(v,nqe),e(v,km),e(km,JH),e(JH,sqe),e(km,lqe),e(km,Z8),e(Z8,iqe),e(km,dqe),e(v,cqe),e(v,Rm),e(Rm,YH),e(YH,fqe),e(Rm,mqe),e(Rm,eB),e(eB,gqe),e(Rm,hqe),e(v,pqe),e(v,Sm),e(Sm,KH),e(KH,_qe),e(Sm,uqe),e(Sm,oB),e(oB,bqe),e(Sm,vqe),e(v,Tqe),e(v,Pm),e(Pm,ZH),e(ZH,Fqe),e(Pm,Cqe),e(Pm,rB),e(rB,Mqe),e(Pm,Eqe),e(v,yqe),e(v,$m),e($m,eU),e(eU,wqe),e($m,Aqe),e($m,tB),e(tB,Lqe),e($m,Bqe),e(v,xqe),e(v,Im),e(Im,oU),e(oU,kqe),e(Im,Rqe),e(Im,aB),e(aB,Sqe),e(Im,Pqe),e(v,$qe),e(v,Dm),e(Dm,rU),e(rU,Iqe),e(Dm,Dqe),e(Dm,nB),e(nB,Nqe),e(Dm,jqe),e(v,qqe),e(v,Nm),e(Nm,tU),e(tU,Gqe),e(Nm,Oqe),e(Nm,sB),e(sB,Xqe),e(Nm,Vqe),e(v,zqe),e(v,jm),e(jm,aU),e(aU,Wqe),e(jm,Qqe),e(jm,lB),e(lB,Hqe),e(jm,Uqe),e(v,Jqe),e(v,qm),e(qm,nU),e(nU,Yqe),e(qm,Kqe),e(qm,iB),e(iB,Zqe),e(qm,eGe),e(v,oGe),e(v,Gm),e(Gm,sU),e(sU,rGe),e(Gm,tGe),e(Gm,dB),e(dB,aGe),e(Gm,nGe),e(v,sGe),e(v,Om),e(Om,lU),e(lU,lGe),e(Om,iGe),e(Om,cB),e(cB,dGe),e(Om,cGe),e(v,fGe),e(v,Xm),e(Xm,iU),e(iU,mGe),e(Xm,gGe),e(Xm,fB),e(fB,hGe),e(Xm,pGe),e(v,_Ge),e(v,Vm),e(Vm,dU),e(dU,uGe),e(Vm,bGe),e(Vm,mB),e(mB,vGe),e(Vm,TGe),e(v,FGe),e(v,zm),e(zm,cU),e(cU,CGe),e(zm,MGe),e(zm,gB),e(gB,EGe),e(zm,yGe),e(v,wGe),e(v,Wm),e(Wm,fU),e(fU,AGe),e(Wm,LGe),e(Wm,hB),e(hB,BGe),e(Wm,xGe),e(v,kGe),e(v,Qm),e(Qm,mU),e(mU,RGe),e(Qm,SGe),e(Qm,pB),e(pB,PGe),e(Qm,$Ge),e(v,IGe),e(v,Hm),e(Hm,gU),e(gU,DGe),e(Hm,NGe),e(Hm,_B),e(_B,jGe),e(Hm,qGe),e(v,GGe),e(v,Um),e(Um,hU),e(hU,OGe),e(Um,XGe),e(Um,uB),e(uB,VGe),e(Um,zGe),e(v,WGe),e(v,Jm),e(Jm,pU),e(pU,QGe),e(Jm,HGe),e(Jm,bB),e(bB,UGe),e(Jm,JGe),e(v,YGe),e(v,Ym),e(Ym,_U),e(_U,KGe),e(Ym,ZGe),e(Ym,vB),e(vB,eOe),e(Ym,oOe),e(v,rOe),e(v,Km),e(Km,uU),e(uU,tOe),e(Km,aOe),e(Km,TB),e(TB,nOe),e(Km,sOe),e(v,lOe),e(v,Zm),e(Zm,bU),e(bU,iOe),e(Zm,dOe),e(Zm,FB),e(FB,cOe),e(Zm,fOe),e(v,mOe),e(v,eg),e(eg,vU),e(vU,gOe),e(eg,hOe),e(eg,CB),e(CB,pOe),e(eg,_Oe),e(v,uOe),e(v,og),e(og,TU),e(TU,bOe),e(og,vOe),e(og,MB),e(MB,TOe),e(og,FOe),e(v,COe),e(v,rg),e(rg,FU),e(FU,MOe),e(rg,EOe),e(rg,EB),e(EB,yOe),e(rg,wOe),e(v,AOe),e(v,tg),e(tg,CU),e(CU,LOe),e(tg,BOe),e(tg,yB),e(yB,xOe),e(tg,kOe),e(v,ROe),e(v,ag),e(ag,MU),e(MU,SOe),e(ag,POe),e(ag,wB),e(wB,$Oe),e(ag,IOe),e(v,DOe),e(v,ng),e(ng,EU),e(EU,NOe),e(ng,jOe),e(ng,AB),e(AB,qOe),e(ng,GOe),e(v,OOe),e(v,sg),e(sg,yU),e(yU,XOe),e(sg,VOe),e(sg,LB),e(LB,zOe),e(sg,WOe),e(v,QOe),e(v,lg),e(lg,wU),e(wU,HOe),e(lg,UOe),e(lg,BB),e(BB,JOe),e(lg,YOe),e(v,KOe),e(v,ig),e(ig,AU),e(AU,ZOe),e(ig,eXe),e(ig,xB),e(xB,oXe),e(ig,rXe),e(v,tXe),e(v,dg),e(dg,LU),e(LU,aXe),e(dg,nXe),e(dg,kB),e(kB,sXe),e(dg,lXe),e(v,iXe),e(v,cg),e(cg,BU),e(BU,dXe),e(cg,cXe),e(cg,RB),e(RB,fXe),e(cg,mXe),e(v,gXe),e(v,fg),e(fg,xU),e(xU,hXe),e(fg,pXe),e(fg,SB),e(SB,_Xe),e(fg,uXe),e(v,bXe),e(v,mg),e(mg,kU),e(kU,vXe),e(mg,TXe),e(mg,PB),e(PB,FXe),e(mg,CXe),e(v,MXe),e(v,gg),e(gg,RU),e(RU,EXe),e(gg,yXe),e(gg,$B),e($B,wXe),e(gg,AXe),e(v,LXe),e(v,hg),e(hg,SU),e(SU,BXe),e(hg,xXe),e(hg,IB),e(IB,kXe),e(hg,RXe),e(v,SXe),e(v,pg),e(pg,PU),e(PU,PXe),e(pg,$Xe),e(pg,DB),e(DB,IXe),e(pg,DXe),e(v,NXe),e(v,_g),e(_g,$U),e($U,jXe),e(_g,qXe),e(_g,NB),e(NB,GXe),e(_g,OXe),e(v,XXe),e(v,ug),e(ug,IU),e(IU,VXe),e(ug,zXe),e(ug,jB),e(jB,WXe),e(ug,QXe),e(v,HXe),e(v,bg),e(bg,DU),e(DU,UXe),e(bg,JXe),e(bg,qB),e(qB,YXe),e(bg,KXe),e(v,ZXe),e(v,vg),e(vg,NU),e(NU,eVe),e(vg,oVe),e(vg,GB),e(GB,rVe),e(vg,tVe),e(v,aVe),e(v,Tg),e(Tg,jU),e(jU,nVe),e(Tg,sVe),e(Tg,OB),e(OB,lVe),e(Tg,iVe),e(v,dVe),e(v,Fg),e(Fg,qU),e(qU,cVe),e(Fg,fVe),e(Fg,XB),e(XB,mVe),e(Fg,gVe),e(v,hVe),e(v,Cg),e(Cg,GU),e(GU,pVe),e(Cg,_Ve),e(Cg,VB),e(VB,uVe),e(Cg,bVe),e(v,vVe),e(v,Mg),e(Mg,OU),e(OU,TVe),e(Mg,FVe),e(Mg,zB),e(zB,CVe),e(Mg,MVe),e(v,EVe),e(v,Eg),e(Eg,XU),e(XU,yVe),e(Eg,wVe),e(Eg,WB),e(WB,AVe),e(Eg,LVe),e(v,BVe),e(v,yg),e(yg,VU),e(VU,xVe),e(yg,kVe),e(yg,QB),e(QB,RVe),e(yg,SVe),e(v,PVe),e(v,wg),e(wg,zU),e(zU,$Ve),e(wg,IVe),e(wg,HB),e(HB,DVe),e(wg,NVe),e(v,jVe),e(v,Ag),e(Ag,WU),e(WU,qVe),e(Ag,GVe),e(Ag,UB),e(UB,OVe),e(Ag,XVe),e(v,VVe),e(v,Lg),e(Lg,QU),e(QU,zVe),e(Lg,WVe),e(Lg,JB),e(JB,QVe),e(Lg,HVe),e(v,UVe),e(v,Bg),e(Bg,HU),e(HU,JVe),e(Bg,YVe),e(Bg,YB),e(YB,KVe),e(Bg,ZVe),e(v,eze),e(v,xg),e(xg,UU),e(UU,oze),e(xg,rze),e(xg,KB),e(KB,tze),e(xg,aze),e(v,nze),e(v,kg),e(kg,JU),e(JU,sze),e(kg,lze),e(kg,ZB),e(ZB,ize),e(kg,dze),e(v,cze),e(v,Rg),e(Rg,YU),e(YU,fze),e(Rg,mze),e(Rg,ex),e(ex,gze),e(Rg,hze),e(v,pze),e(v,Sg),e(Sg,KU),e(KU,_ze),e(Sg,uze),e(Sg,ox),e(ox,bze),e(Sg,vze),e(v,Tze),e(v,Pg),e(Pg,ZU),e(ZU,Fze),e(Pg,Cze),e(Pg,rx),e(rx,Mze),e(Pg,Eze),e(mo,yze),e(mo,eJ),e(eJ,wze),e(mo,Aze),g(EE,mo,null),e(Wo,Lze),e(Wo,$g),g(yE,$g,null),e($g,Bze),e($g,oJ),e(oJ,xze),b(c,Ike,u),b(c,Wi,u),e(Wi,Ig),e(Ig,rJ),g(wE,rJ,null),e(Wi,kze),e(Wi,tJ),e(tJ,Rze),b(c,Dke,u),b(c,Qo,u),g(AE,Qo,null),e(Qo,Sze),e(Qo,LE),e(LE,Pze),e(LE,tx),e(tx,$ze),e(LE,Ize),e(Qo,Dze),e(Qo,BE),e(BE,Nze),e(BE,aJ),e(aJ,jze),e(BE,qze),e(Qo,Gze),e(Qo,go),g(xE,go,null),e(go,Oze),e(go,nJ),e(nJ,Xze),e(go,Vze),e(go,Oa),e(Oa,zze),e(Oa,sJ),e(sJ,Wze),e(Oa,Qze),e(Oa,lJ),e(lJ,Hze),e(Oa,Uze),e(Oa,iJ),e(iJ,Jze),e(Oa,Yze),e(go,Kze),e(go,E),e(E,Wn),e(Wn,dJ),e(dJ,Zze),e(Wn,eWe),e(Wn,ax),e(ax,oWe),e(Wn,rWe),e(Wn,nx),e(nx,tWe),e(Wn,aWe),e(E,nWe),e(E,Qn),e(Qn,cJ),e(cJ,sWe),e(Qn,lWe),e(Qn,sx),e(sx,iWe),e(Qn,dWe),e(Qn,lx),e(lx,cWe),e(Qn,fWe),e(E,mWe),e(E,Hn),e(Hn,fJ),e(fJ,gWe),e(Hn,hWe),e(Hn,ix),e(ix,pWe),e(Hn,_We),e(Hn,dx),e(dx,uWe),e(Hn,bWe),e(E,vWe),e(E,Dg),e(Dg,mJ),e(mJ,TWe),e(Dg,FWe),e(Dg,cx),e(cx,CWe),e(Dg,MWe),e(E,EWe),e(E,Un),e(Un,gJ),e(gJ,yWe),e(Un,wWe),e(Un,fx),e(fx,AWe),e(Un,LWe),e(Un,mx),e(mx,BWe),e(Un,xWe),e(E,kWe),e(E,Ng),e(Ng,hJ),e(hJ,RWe),e(Ng,SWe),e(Ng,gx),e(gx,PWe),e(Ng,$We),e(E,IWe),e(E,jg),e(jg,pJ),e(pJ,DWe),e(jg,NWe),e(jg,hx),e(hx,jWe),e(jg,qWe),e(E,GWe),e(E,qg),e(qg,_J),e(_J,OWe),e(qg,XWe),e(qg,px),e(px,VWe),e(qg,zWe),e(E,WWe),e(E,Jn),e(Jn,uJ),e(uJ,QWe),e(Jn,HWe),e(Jn,_x),e(_x,UWe),e(Jn,JWe),e(Jn,ux),e(ux,YWe),e(Jn,KWe),e(E,ZWe),e(E,Yn),e(Yn,bJ),e(bJ,eQe),e(Yn,oQe),e(Yn,bx),e(bx,rQe),e(Yn,tQe),e(Yn,vx),e(vx,aQe),e(Yn,nQe),e(E,sQe),e(E,Kn),e(Kn,vJ),e(vJ,lQe),e(Kn,iQe),e(Kn,Tx),e(Tx,dQe),e(Kn,cQe),e(Kn,Fx),e(Fx,fQe),e(Kn,mQe),e(E,gQe),e(E,Gg),e(Gg,TJ),e(TJ,hQe),e(Gg,pQe),e(Gg,Cx),e(Cx,_Qe),e(Gg,uQe),e(E,bQe),e(E,Og),e(Og,FJ),e(FJ,vQe),e(Og,TQe),e(Og,Mx),e(Mx,FQe),e(Og,CQe),e(E,MQe),e(E,Zn),e(Zn,CJ),e(CJ,EQe),e(Zn,yQe),e(Zn,Ex),e(Ex,wQe),e(Zn,AQe),e(Zn,yx),e(yx,LQe),e(Zn,BQe),e(E,xQe),e(E,Xg),e(Xg,MJ),e(MJ,kQe),e(Xg,RQe),e(Xg,wx),e(wx,SQe),e(Xg,PQe),e(E,$Qe),e(E,es),e(es,EJ),e(EJ,IQe),e(es,DQe),e(es,Ax),e(Ax,NQe),e(es,jQe),e(es,Lx),e(Lx,qQe),e(es,GQe),e(E,OQe),e(E,os),e(os,yJ),e(yJ,XQe),e(os,VQe),e(os,Bx),e(Bx,zQe),e(os,WQe),e(os,xx),e(xx,QQe),e(os,HQe),e(E,UQe),e(E,rs),e(rs,wJ),e(wJ,JQe),e(rs,YQe),e(rs,kx),e(kx,KQe),e(rs,ZQe),e(rs,AJ),e(AJ,eHe),e(rs,oHe),e(E,rHe),e(E,Vg),e(Vg,LJ),e(LJ,tHe),e(Vg,aHe),e(Vg,Rx),e(Rx,nHe),e(Vg,sHe),e(E,lHe),e(E,ts),e(ts,BJ),e(BJ,iHe),e(ts,dHe),e(ts,Sx),e(Sx,cHe),e(ts,fHe),e(ts,Px),e(Px,mHe),e(ts,gHe),e(E,hHe),e(E,zg),e(zg,xJ),e(xJ,pHe),e(zg,_He),e(zg,$x),e($x,uHe),e(zg,bHe),e(E,vHe),e(E,as),e(as,kJ),e(kJ,THe),e(as,FHe),e(as,Ix),e(Ix,CHe),e(as,MHe),e(as,Dx),e(Dx,EHe),e(as,yHe),e(E,wHe),e(E,ns),e(ns,RJ),e(RJ,AHe),e(ns,LHe),e(ns,Nx),e(Nx,BHe),e(ns,xHe),e(ns,jx),e(jx,kHe),e(ns,RHe),e(E,SHe),e(E,ss),e(ss,SJ),e(SJ,PHe),e(ss,$He),e(ss,qx),e(qx,IHe),e(ss,DHe),e(ss,Gx),e(Gx,NHe),e(ss,jHe),e(E,qHe),e(E,Wg),e(Wg,PJ),e(PJ,GHe),e(Wg,OHe),e(Wg,Ox),e(Ox,XHe),e(Wg,VHe),e(E,zHe),e(E,ls),e(ls,$J),e($J,WHe),e(ls,QHe),e(ls,Xx),e(Xx,HHe),e(ls,UHe),e(ls,Vx),e(Vx,JHe),e(ls,YHe),e(E,KHe),e(E,Qg),e(Qg,IJ),e(IJ,ZHe),e(Qg,eUe),e(Qg,zx),e(zx,oUe),e(Qg,rUe),e(E,tUe),e(E,is),e(is,DJ),e(DJ,aUe),e(is,nUe),e(is,Wx),e(Wx,sUe),e(is,lUe),e(is,Qx),e(Qx,iUe),e(is,dUe),e(E,cUe),e(E,ds),e(ds,NJ),e(NJ,fUe),e(ds,mUe),e(ds,Hx),e(Hx,gUe),e(ds,hUe),e(ds,Ux),e(Ux,pUe),e(ds,_Ue),e(E,uUe),e(E,cs),e(cs,jJ),e(jJ,bUe),e(cs,vUe),e(cs,Jx),e(Jx,TUe),e(cs,FUe),e(cs,Yx),e(Yx,CUe),e(cs,MUe),e(E,EUe),e(E,fs),e(fs,qJ),e(qJ,yUe),e(fs,wUe),e(fs,Kx),e(Kx,AUe),e(fs,LUe),e(fs,Zx),e(Zx,BUe),e(fs,xUe),e(E,kUe),e(E,Hg),e(Hg,GJ),e(GJ,RUe),e(Hg,SUe),e(Hg,ek),e(ek,PUe),e(Hg,$Ue),e(E,IUe),e(E,ms),e(ms,OJ),e(OJ,DUe),e(ms,NUe),e(ms,ok),e(ok,jUe),e(ms,qUe),e(ms,rk),e(rk,GUe),e(ms,OUe),e(E,XUe),e(E,gs),e(gs,XJ),e(XJ,VUe),e(gs,zUe),e(gs,tk),e(tk,WUe),e(gs,QUe),e(gs,ak),e(ak,HUe),e(gs,UUe),e(E,JUe),e(E,hs),e(hs,VJ),e(VJ,YUe),e(hs,KUe),e(hs,nk),e(nk,ZUe),e(hs,eJe),e(hs,sk),e(sk,oJe),e(hs,rJe),e(E,tJe),e(E,ps),e(ps,zJ),e(zJ,aJe),e(ps,nJe),e(ps,lk),e(lk,sJe),e(ps,lJe),e(ps,ik),e(ik,iJe),e(ps,dJe),e(E,cJe),e(E,_s),e(_s,WJ),e(WJ,fJe),e(_s,mJe),e(_s,dk),e(dk,gJe),e(_s,hJe),e(_s,ck),e(ck,pJe),e(_s,_Je),e(E,uJe),e(E,us),e(us,QJ),e(QJ,bJe),e(us,vJe),e(us,fk),e(fk,TJe),e(us,FJe),e(us,mk),e(mk,CJe),e(us,MJe),e(E,EJe),e(E,Ug),e(Ug,HJ),e(HJ,yJe),e(Ug,wJe),e(Ug,gk),e(gk,AJe),e(Ug,LJe),e(E,BJe),e(E,bs),e(bs,UJ),e(UJ,xJe),e(bs,kJe),e(bs,hk),e(hk,RJe),e(bs,SJe),e(bs,pk),e(pk,PJe),e(bs,$Je),e(E,IJe),e(E,Jg),e(Jg,JJ),e(JJ,DJe),e(Jg,NJe),e(Jg,_k),e(_k,jJe),e(Jg,qJe),e(E,GJe),e(E,Yg),e(Yg,YJ),e(YJ,OJe),e(Yg,XJe),e(Yg,uk),e(uk,VJe),e(Yg,zJe),e(E,WJe),e(E,vs),e(vs,KJ),e(KJ,QJe),e(vs,HJe),e(vs,bk),e(bk,UJe),e(vs,JJe),e(vs,vk),e(vk,YJe),e(vs,KJe),e(E,ZJe),e(E,Ts),e(Ts,ZJ),e(ZJ,eYe),e(Ts,oYe),e(Ts,Tk),e(Tk,rYe),e(Ts,tYe),e(Ts,Fk),e(Fk,aYe),e(Ts,nYe),e(E,sYe),e(E,Kg),e(Kg,eY),e(eY,lYe),e(Kg,iYe),e(Kg,Ck),e(Ck,dYe),e(Kg,cYe),e(E,fYe),e(E,Fs),e(Fs,oY),e(oY,mYe),e(Fs,gYe),e(Fs,Mk),e(Mk,hYe),e(Fs,pYe),e(Fs,Ek),e(Ek,_Ye),e(Fs,uYe),e(E,bYe),e(E,Cs),e(Cs,rY),e(rY,vYe),e(Cs,TYe),e(Cs,yk),e(yk,FYe),e(Cs,CYe),e(Cs,wk),e(wk,MYe),e(Cs,EYe),e(E,yYe),e(E,Ms),e(Ms,tY),e(tY,wYe),e(Ms,AYe),e(Ms,Ak),e(Ak,LYe),e(Ms,BYe),e(Ms,Lk),e(Lk,xYe),e(Ms,kYe),e(E,RYe),e(E,Es),e(Es,aY),e(aY,SYe),e(Es,PYe),e(Es,Bk),e(Bk,$Ye),e(Es,IYe),e(Es,xk),e(xk,DYe),e(Es,NYe),e(E,jYe),e(E,ys),e(ys,nY),e(nY,qYe),e(ys,GYe),e(ys,kk),e(kk,OYe),e(ys,XYe),e(ys,Rk),e(Rk,VYe),e(ys,zYe),e(E,WYe),e(E,Zg),e(Zg,sY),e(sY,QYe),e(Zg,HYe),e(Zg,Sk),e(Sk,UYe),e(Zg,JYe),e(E,YYe),e(E,eh),e(eh,lY),e(lY,KYe),e(eh,ZYe),e(eh,Pk),e(Pk,eKe),e(eh,oKe),e(E,rKe),e(E,oh),e(oh,iY),e(iY,tKe),e(oh,aKe),e(oh,$k),e($k,nKe),e(oh,sKe),e(E,lKe),e(E,rh),e(rh,dY),e(dY,iKe),e(rh,dKe),e(rh,Ik),e(Ik,cKe),e(rh,fKe),e(E,mKe),e(E,ws),e(ws,cY),e(cY,gKe),e(ws,hKe),e(ws,Dk),e(Dk,pKe),e(ws,_Ke),e(ws,Nk),e(Nk,uKe),e(ws,bKe),e(E,vKe),e(E,th),e(th,fY),e(fY,TKe),e(th,FKe),e(th,jk),e(jk,CKe),e(th,MKe),e(E,EKe),e(E,As),e(As,mY),e(mY,yKe),e(As,wKe),e(As,qk),e(qk,AKe),e(As,LKe),e(As,Gk),e(Gk,BKe),e(As,xKe),e(E,kKe),e(E,Ls),e(Ls,gY),e(gY,RKe),e(Ls,SKe),e(Ls,Ok),e(Ok,PKe),e(Ls,$Ke),e(Ls,Xk),e(Xk,IKe),e(Ls,DKe),e(E,NKe),e(E,Bs),e(Bs,hY),e(hY,jKe),e(Bs,qKe),e(Bs,Vk),e(Vk,GKe),e(Bs,OKe),e(Bs,zk),e(zk,XKe),e(Bs,VKe),e(E,zKe),e(E,xs),e(xs,pY),e(pY,WKe),e(xs,QKe),e(xs,Wk),e(Wk,HKe),e(xs,UKe),e(xs,Qk),e(Qk,JKe),e(xs,YKe),e(E,KKe),e(E,ks),e(ks,_Y),e(_Y,ZKe),e(ks,eZe),e(ks,Hk),e(Hk,oZe),e(ks,rZe),e(ks,Uk),e(Uk,tZe),e(ks,aZe),e(E,nZe),e(E,Rs),e(Rs,uY),e(uY,sZe),e(Rs,lZe),e(Rs,Jk),e(Jk,iZe),e(Rs,dZe),e(Rs,Yk),e(Yk,cZe),e(Rs,fZe),e(E,mZe),e(E,ah),e(ah,bY),e(bY,gZe),e(ah,hZe),e(ah,Kk),e(Kk,pZe),e(ah,_Ze),e(E,uZe),e(E,nh),e(nh,vY),e(vY,bZe),e(nh,vZe),e(nh,Zk),e(Zk,TZe),e(nh,FZe),e(E,CZe),e(E,Ss),e(Ss,TY),e(TY,MZe),e(Ss,EZe),e(Ss,eR),e(eR,yZe),e(Ss,wZe),e(Ss,oR),e(oR,AZe),e(Ss,LZe),e(E,BZe),e(E,Ps),e(Ps,FY),e(FY,xZe),e(Ps,kZe),e(Ps,rR),e(rR,RZe),e(Ps,SZe),e(Ps,tR),e(tR,PZe),e(Ps,$Ze),e(E,IZe),e(E,$s),e($s,CY),e(CY,DZe),e($s,NZe),e($s,aR),e(aR,jZe),e($s,qZe),e($s,nR),e(nR,GZe),e($s,OZe),e(E,XZe),e(E,sh),e(sh,MY),e(MY,VZe),e(sh,zZe),e(sh,sR),e(sR,WZe),e(sh,QZe),e(E,HZe),e(E,lh),e(lh,EY),e(EY,UZe),e(lh,JZe),e(lh,lR),e(lR,YZe),e(lh,KZe),e(E,ZZe),e(E,ih),e(ih,yY),e(yY,eeo),e(ih,oeo),e(ih,iR),e(iR,reo),e(ih,teo),e(E,aeo),e(E,dh),e(dh,wY),e(wY,neo),e(dh,seo),e(dh,dR),e(dR,leo),e(dh,ieo),e(E,deo),e(E,Is),e(Is,AY),e(AY,ceo),e(Is,feo),e(Is,cR),e(cR,meo),e(Is,geo),e(Is,fR),e(fR,heo),e(Is,peo),e(E,_eo),e(E,ch),e(ch,LY),e(LY,ueo),e(ch,beo),e(ch,mR),e(mR,veo),e(ch,Teo),e(E,Feo),e(E,fh),e(fh,BY),e(BY,Ceo),e(fh,Meo),e(fh,gR),e(gR,Eeo),e(fh,yeo),e(E,weo),e(E,Ds),e(Ds,xY),e(xY,Aeo),e(Ds,Leo),e(Ds,hR),e(hR,Beo),e(Ds,xeo),e(Ds,pR),e(pR,keo),e(Ds,Reo),e(E,Seo),e(E,Ns),e(Ns,kY),e(kY,Peo),e(Ns,$eo),e(Ns,_R),e(_R,Ieo),e(Ns,Deo),e(Ns,uR),e(uR,Neo),e(Ns,jeo),e(go,qeo),e(go,RY),e(RY,Geo),e(go,Oeo),g(kE,go,null),e(Qo,Xeo),e(Qo,mh),g(RE,mh,null),e(mh,Veo),e(mh,SY),e(SY,zeo),b(c,Nke,u),b(c,Qi,u),e(Qi,gh),e(gh,PY),g(SE,PY,null),e(Qi,Weo),e(Qi,$Y),e($Y,Qeo),b(c,jke,u),b(c,Ho,u),g(PE,Ho,null),e(Ho,Heo),e(Ho,$E),e($E,Ueo),e($E,bR),e(bR,Jeo),e($E,Yeo),e(Ho,Keo),e(Ho,IE),e(IE,Zeo),e(IE,IY),e(IY,eoo),e(IE,ooo),e(Ho,roo),e(Ho,$e),g(DE,$e,null),e($e,too),e($e,DY),e(DY,aoo),e($e,noo),e($e,Xa),e(Xa,soo),e(Xa,NY),e(NY,loo),e(Xa,ioo),e(Xa,jY),e(jY,doo),e(Xa,coo),e(Xa,qY),e(qY,foo),e(Xa,moo),e($e,goo),e($e,te),e(te,hh),e(hh,GY),e(GY,hoo),e(hh,poo),e(hh,vR),e(vR,_oo),e(hh,uoo),e(te,boo),e(te,ph),e(ph,OY),e(OY,voo),e(ph,Too),e(ph,TR),e(TR,Foo),e(ph,Coo),e(te,Moo),e(te,_h),e(_h,XY),e(XY,Eoo),e(_h,yoo),e(_h,FR),e(FR,woo),e(_h,Aoo),e(te,Loo),e(te,uh),e(uh,VY),e(VY,Boo),e(uh,xoo),e(uh,CR),e(CR,koo),e(uh,Roo),e(te,Soo),e(te,bh),e(bh,zY),e(zY,Poo),e(bh,$oo),e(bh,MR),e(MR,Ioo),e(bh,Doo),e(te,Noo),e(te,vh),e(vh,WY),e(WY,joo),e(vh,qoo),e(vh,ER),e(ER,Goo),e(vh,Ooo),e(te,Xoo),e(te,Th),e(Th,QY),e(QY,Voo),e(Th,zoo),e(Th,yR),e(yR,Woo),e(Th,Qoo),e(te,Hoo),e(te,Fh),e(Fh,HY),e(HY,Uoo),e(Fh,Joo),e(Fh,wR),e(wR,Yoo),e(Fh,Koo),e(te,Zoo),e(te,Ch),e(Ch,UY),e(UY,ero),e(Ch,oro),e(Ch,AR),e(AR,rro),e(Ch,tro),e(te,aro),e(te,Mh),e(Mh,JY),e(JY,nro),e(Mh,sro),e(Mh,LR),e(LR,lro),e(Mh,iro),e(te,dro),e(te,Eh),e(Eh,YY),e(YY,cro),e(Eh,fro),e(Eh,BR),e(BR,mro),e(Eh,gro),e(te,hro),e(te,yh),e(yh,KY),e(KY,pro),e(yh,_ro),e(yh,xR),e(xR,uro),e(yh,bro),e(te,vro),e(te,wh),e(wh,ZY),e(ZY,Tro),e(wh,Fro),e(wh,kR),e(kR,Cro),e(wh,Mro),e(te,Ero),e(te,Ah),e(Ah,eK),e(eK,yro),e(Ah,wro),e(Ah,RR),e(RR,Aro),e(Ah,Lro),e(te,Bro),e(te,Lh),e(Lh,oK),e(oK,xro),e(Lh,kro),e(Lh,SR),e(SR,Rro),e(Lh,Sro),e(te,Pro),e(te,Bh),e(Bh,rK),e(rK,$ro),e(Bh,Iro),e(Bh,PR),e(PR,Dro),e(Bh,Nro),e(te,jro),e(te,xh),e(xh,tK),e(tK,qro),e(xh,Gro),e(xh,$R),e($R,Oro),e(xh,Xro),e(te,Vro),e(te,kh),e(kh,aK),e(aK,zro),e(kh,Wro),e(kh,IR),e(IR,Qro),e(kh,Hro),e($e,Uro),g(Rh,$e,null),e($e,Jro),e($e,nK),e(nK,Yro),e($e,Kro),g(NE,$e,null),e(Ho,Zro),e(Ho,Sh),g(jE,Sh,null),e(Sh,eto),e(Sh,sK),e(sK,oto),b(c,qke,u),b(c,Hi,u),e(Hi,Ph),e(Ph,lK),g(qE,lK,null),e(Hi,rto),e(Hi,iK),e(iK,tto),b(c,Gke,u),b(c,Uo,u),g(GE,Uo,null),e(Uo,ato),e(Uo,OE),e(OE,nto),e(OE,DR),e(DR,sto),e(OE,lto),e(Uo,ito),e(Uo,XE),e(XE,dto),e(XE,dK),e(dK,cto),e(XE,fto),e(Uo,mto),e(Uo,Ie),g(VE,Ie,null),e(Ie,gto),e(Ie,cK),e(cK,hto),e(Ie,pto),e(Ie,Ui),e(Ui,_to),e(Ui,fK),e(fK,uto),e(Ui,bto),e(Ui,mK),e(mK,vto),e(Ui,Tto),e(Ie,Fto),e(Ie,xe),e(xe,$h),e($h,gK),e(gK,Cto),e($h,Mto),e($h,NR),e(NR,Eto),e($h,yto),e(xe,wto),e(xe,Ih),e(Ih,hK),e(hK,Ato),e(Ih,Lto),e(Ih,jR),e(jR,Bto),e(Ih,xto),e(xe,kto),e(xe,Dh),e(Dh,pK),e(pK,Rto),e(Dh,Sto),e(Dh,qR),e(qR,Pto),e(Dh,$to),e(xe,Ito),e(xe,Nh),e(Nh,_K),e(_K,Dto),e(Nh,Nto),e(Nh,GR),e(GR,jto),e(Nh,qto),e(xe,Gto),e(xe,jh),e(jh,uK),e(uK,Oto),e(jh,Xto),e(jh,OR),e(OR,Vto),e(jh,zto),e(xe,Wto),e(xe,qh),e(qh,bK),e(bK,Qto),e(qh,Hto),e(qh,XR),e(XR,Uto),e(qh,Jto),e(xe,Yto),e(xe,Gh),e(Gh,vK),e(vK,Kto),e(Gh,Zto),e(Gh,VR),e(VR,eao),e(Gh,oao),e(xe,rao),e(xe,Oh),e(Oh,TK),e(TK,tao),e(Oh,aao),e(Oh,zR),e(zR,nao),e(Oh,sao),e(Ie,lao),g(Xh,Ie,null),e(Ie,iao),e(Ie,FK),e(FK,dao),e(Ie,cao),g(zE,Ie,null),e(Uo,fao),e(Uo,Vh),g(WE,Vh,null),e(Vh,mao),e(Vh,CK),e(CK,gao),b(c,Oke,u),b(c,Ji,u),e(Ji,zh),e(zh,MK),g(QE,MK,null),e(Ji,hao),e(Ji,EK),e(EK,pao),b(c,Xke,u),b(c,Jo,u),g(HE,Jo,null),e(Jo,_ao),e(Jo,Yi),e(Yi,uao),e(Yi,yK),e(yK,bao),e(Yi,vao),e(Yi,wK),e(wK,Tao),e(Yi,Fao),e(Jo,Cao),e(Jo,UE),e(UE,Mao),e(UE,AK),e(AK,Eao),e(UE,yao),e(Jo,wao),e(Jo,Vr),g(JE,Vr,null),e(Vr,Aao),e(Vr,LK),e(LK,Lao),e(Vr,Bao),e(Vr,Ki),e(Ki,xao),e(Ki,BK),e(BK,kao),e(Ki,Rao),e(Ki,xK),e(xK,Sao),e(Ki,Pao),e(Vr,$ao),e(Vr,kK),e(kK,Iao),e(Vr,Dao),g(YE,Vr,null),e(Jo,Nao),e(Jo,De),g(KE,De,null),e(De,jao),e(De,RK),e(RK,qao),e(De,Gao),e(De,Va),e(Va,Oao),e(Va,SK),e(SK,Xao),e(Va,Vao),e(Va,PK),e(PK,zao),e(Va,Wao),e(Va,$K),e($K,Qao),e(Va,Hao),e(De,Uao),e(De,F),e(F,Wh),e(Wh,IK),e(IK,Jao),e(Wh,Yao),e(Wh,WR),e(WR,Kao),e(Wh,Zao),e(F,eno),e(F,Qh),e(Qh,DK),e(DK,ono),e(Qh,rno),e(Qh,QR),e(QR,tno),e(Qh,ano),e(F,nno),e(F,Hh),e(Hh,NK),e(NK,sno),e(Hh,lno),e(Hh,HR),e(HR,ino),e(Hh,dno),e(F,cno),e(F,Uh),e(Uh,jK),e(jK,fno),e(Uh,mno),e(Uh,UR),e(UR,gno),e(Uh,hno),e(F,pno),e(F,Jh),e(Jh,qK),e(qK,_no),e(Jh,uno),e(Jh,JR),e(JR,bno),e(Jh,vno),e(F,Tno),e(F,Yh),e(Yh,GK),e(GK,Fno),e(Yh,Cno),e(Yh,YR),e(YR,Mno),e(Yh,Eno),e(F,yno),e(F,Kh),e(Kh,OK),e(OK,wno),e(Kh,Ano),e(Kh,KR),e(KR,Lno),e(Kh,Bno),e(F,xno),e(F,Zh),e(Zh,XK),e(XK,kno),e(Zh,Rno),e(Zh,ZR),e(ZR,Sno),e(Zh,Pno),e(F,$no),e(F,ep),e(ep,VK),e(VK,Ino),e(ep,Dno),e(ep,eS),e(eS,Nno),e(ep,jno),e(F,qno),e(F,op),e(op,zK),e(zK,Gno),e(op,Ono),e(op,oS),e(oS,Xno),e(op,Vno),e(F,zno),e(F,rp),e(rp,WK),e(WK,Wno),e(rp,Qno),e(rp,rS),e(rS,Hno),e(rp,Uno),e(F,Jno),e(F,tp),e(tp,QK),e(QK,Yno),e(tp,Kno),e(tp,tS),e(tS,Zno),e(tp,eso),e(F,oso),e(F,ap),e(ap,HK),e(HK,rso),e(ap,tso),e(ap,aS),e(aS,aso),e(ap,nso),e(F,sso),e(F,np),e(np,UK),e(UK,lso),e(np,iso),e(np,nS),e(nS,dso),e(np,cso),e(F,fso),e(F,sp),e(sp,JK),e(JK,mso),e(sp,gso),e(sp,sS),e(sS,hso),e(sp,pso),e(F,_so),e(F,lp),e(lp,YK),e(YK,uso),e(lp,bso),e(lp,lS),e(lS,vso),e(lp,Tso),e(F,Fso),e(F,ip),e(ip,KK),e(KK,Cso),e(ip,Mso),e(ip,iS),e(iS,Eso),e(ip,yso),e(F,wso),e(F,dp),e(dp,ZK),e(ZK,Aso),e(dp,Lso),e(dp,dS),e(dS,Bso),e(dp,xso),e(F,kso),e(F,cp),e(cp,eZ),e(eZ,Rso),e(cp,Sso),e(cp,cS),e(cS,Pso),e(cp,$so),e(F,Iso),e(F,fp),e(fp,oZ),e(oZ,Dso),e(fp,Nso),e(fp,fS),e(fS,jso),e(fp,qso),e(F,Gso),e(F,mp),e(mp,rZ),e(rZ,Oso),e(mp,Xso),e(mp,mS),e(mS,Vso),e(mp,zso),e(F,Wso),e(F,gp),e(gp,tZ),e(tZ,Qso),e(gp,Hso),e(gp,gS),e(gS,Uso),e(gp,Jso),e(F,Yso),e(F,hp),e(hp,aZ),e(aZ,Kso),e(hp,Zso),e(hp,hS),e(hS,elo),e(hp,olo),e(F,rlo),e(F,pp),e(pp,nZ),e(nZ,tlo),e(pp,alo),e(pp,pS),e(pS,nlo),e(pp,slo),e(F,llo),e(F,_p),e(_p,sZ),e(sZ,ilo),e(_p,dlo),e(_p,_S),e(_S,clo),e(_p,flo),e(F,mlo),e(F,up),e(up,lZ),e(lZ,glo),e(up,hlo),e(up,uS),e(uS,plo),e(up,_lo),e(F,ulo),e(F,bp),e(bp,iZ),e(iZ,blo),e(bp,vlo),e(bp,bS),e(bS,Tlo),e(bp,Flo),e(F,Clo),e(F,vp),e(vp,dZ),e(dZ,Mlo),e(vp,Elo),e(vp,vS),e(vS,ylo),e(vp,wlo),e(F,Alo),e(F,Tp),e(Tp,cZ),e(cZ,Llo),e(Tp,Blo),e(Tp,TS),e(TS,xlo),e(Tp,klo),e(F,Rlo),e(F,js),e(js,fZ),e(fZ,Slo),e(js,Plo),e(js,FS),e(FS,$lo),e(js,Ilo),e(js,CS),e(CS,Dlo),e(js,Nlo),e(F,jlo),e(F,Fp),e(Fp,mZ),e(mZ,qlo),e(Fp,Glo),e(Fp,MS),e(MS,Olo),e(Fp,Xlo),e(F,Vlo),e(F,Cp),e(Cp,gZ),e(gZ,zlo),e(Cp,Wlo),e(Cp,ES),e(ES,Qlo),e(Cp,Hlo),e(F,Ulo),e(F,Mp),e(Mp,hZ),e(hZ,Jlo),e(Mp,Ylo),e(Mp,yS),e(yS,Klo),e(Mp,Zlo),e(F,eio),e(F,Ep),e(Ep,pZ),e(pZ,oio),e(Ep,rio),e(Ep,wS),e(wS,tio),e(Ep,aio),e(F,nio),e(F,yp),e(yp,_Z),e(_Z,sio),e(yp,lio),e(yp,AS),e(AS,iio),e(yp,dio),e(F,cio),e(F,wp),e(wp,uZ),e(uZ,fio),e(wp,mio),e(wp,LS),e(LS,gio),e(wp,hio),e(F,pio),e(F,Ap),e(Ap,bZ),e(bZ,_io),e(Ap,uio),e(Ap,BS),e(BS,bio),e(Ap,vio),e(F,Tio),e(F,Lp),e(Lp,vZ),e(vZ,Fio),e(Lp,Cio),e(Lp,xS),e(xS,Mio),e(Lp,Eio),e(F,yio),e(F,Bp),e(Bp,TZ),e(TZ,wio),e(Bp,Aio),e(Bp,kS),e(kS,Lio),e(Bp,Bio),e(F,xio),e(F,xp),e(xp,FZ),e(FZ,kio),e(xp,Rio),e(xp,RS),e(RS,Sio),e(xp,Pio),e(F,$io),e(F,kp),e(kp,CZ),e(CZ,Iio),e(kp,Dio),e(kp,SS),e(SS,Nio),e(kp,jio),e(F,qio),e(F,Rp),e(Rp,MZ),e(MZ,Gio),e(Rp,Oio),e(Rp,PS),e(PS,Xio),e(Rp,Vio),e(F,zio),e(F,Sp),e(Sp,EZ),e(EZ,Wio),e(Sp,Qio),e(Sp,$S),e($S,Hio),e(Sp,Uio),e(F,Jio),e(F,Pp),e(Pp,yZ),e(yZ,Yio),e(Pp,Kio),e(Pp,IS),e(IS,Zio),e(Pp,edo),e(F,odo),e(F,$p),e($p,wZ),e(wZ,rdo),e($p,tdo),e($p,DS),e(DS,ado),e($p,ndo),e(F,sdo),e(F,Ip),e(Ip,AZ),e(AZ,ldo),e(Ip,ido),e(Ip,NS),e(NS,ddo),e(Ip,cdo),e(F,fdo),e(F,Dp),e(Dp,LZ),e(LZ,mdo),e(Dp,gdo),e(Dp,jS),e(jS,hdo),e(Dp,pdo),e(F,_do),e(F,Np),e(Np,BZ),e(BZ,udo),e(Np,bdo),e(Np,qS),e(qS,vdo),e(Np,Tdo),e(F,Fdo),e(F,jp),e(jp,xZ),e(xZ,Cdo),e(jp,Mdo),e(jp,GS),e(GS,Edo),e(jp,ydo),e(F,wdo),e(F,qp),e(qp,kZ),e(kZ,Ado),e(qp,Ldo),e(qp,OS),e(OS,Bdo),e(qp,xdo),e(F,kdo),e(F,Gp),e(Gp,RZ),e(RZ,Rdo),e(Gp,Sdo),e(Gp,XS),e(XS,Pdo),e(Gp,$do),e(F,Ido),e(F,Op),e(Op,SZ),e(SZ,Ddo),e(Op,Ndo),e(Op,VS),e(VS,jdo),e(Op,qdo),e(F,Gdo),e(F,Xp),e(Xp,PZ),e(PZ,Odo),e(Xp,Xdo),e(Xp,zS),e(zS,Vdo),e(Xp,zdo),e(F,Wdo),e(F,Vp),e(Vp,$Z),e($Z,Qdo),e(Vp,Hdo),e(Vp,WS),e(WS,Udo),e(Vp,Jdo),e(F,Ydo),e(F,zp),e(zp,IZ),e(IZ,Kdo),e(zp,Zdo),e(zp,QS),e(QS,eco),e(zp,oco),e(F,rco),e(F,Wp),e(Wp,DZ),e(DZ,tco),e(Wp,aco),e(Wp,HS),e(HS,nco),e(Wp,sco),e(F,lco),e(F,Qp),e(Qp,NZ),e(NZ,ico),e(Qp,dco),e(Qp,US),e(US,cco),e(Qp,fco),e(F,mco),e(F,Hp),e(Hp,jZ),e(jZ,gco),e(Hp,hco),e(Hp,JS),e(JS,pco),e(Hp,_co),e(F,uco),e(F,Up),e(Up,qZ),e(qZ,bco),e(Up,vco),e(Up,YS),e(YS,Tco),e(Up,Fco),e(F,Cco),e(F,Jp),e(Jp,GZ),e(GZ,Mco),e(Jp,Eco),e(Jp,KS),e(KS,yco),e(Jp,wco),e(F,Aco),e(F,Yp),e(Yp,OZ),e(OZ,Lco),e(Yp,Bco),e(Yp,ZS),e(ZS,xco),e(Yp,kco),e(F,Rco),e(F,Kp),e(Kp,XZ),e(XZ,Sco),e(Kp,Pco),e(Kp,eP),e(eP,$co),e(Kp,Ico),e(F,Dco),e(F,Zp),e(Zp,VZ),e(VZ,Nco),e(Zp,jco),e(Zp,oP),e(oP,qco),e(Zp,Gco),e(F,Oco),e(F,e_),e(e_,zZ),e(zZ,Xco),e(e_,Vco),e(e_,rP),e(rP,zco),e(e_,Wco),e(F,Qco),e(F,o_),e(o_,WZ),e(WZ,Hco),e(o_,Uco),e(o_,tP),e(tP,Jco),e(o_,Yco),e(F,Kco),e(F,r_),e(r_,QZ),e(QZ,Zco),e(r_,efo),e(r_,aP),e(aP,ofo),e(r_,rfo),e(F,tfo),e(F,t_),e(t_,HZ),e(HZ,afo),e(t_,nfo),e(t_,nP),e(nP,sfo),e(t_,lfo),e(F,ifo),e(F,a_),e(a_,UZ),e(UZ,dfo),e(a_,cfo),e(a_,sP),e(sP,ffo),e(a_,mfo),e(F,gfo),e(F,n_),e(n_,JZ),e(JZ,hfo),e(n_,pfo),e(n_,lP),e(lP,_fo),e(n_,ufo),e(F,bfo),e(F,s_),e(s_,YZ),e(YZ,vfo),e(s_,Tfo),e(s_,iP),e(iP,Ffo),e(s_,Cfo),e(F,Mfo),e(F,l_),e(l_,KZ),e(KZ,Efo),e(l_,yfo),e(l_,dP),e(dP,wfo),e(l_,Afo),e(F,Lfo),e(F,i_),e(i_,ZZ),e(ZZ,Bfo),e(i_,xfo),e(i_,cP),e(cP,kfo),e(i_,Rfo),e(F,Sfo),e(F,d_),e(d_,eee),e(eee,Pfo),e(d_,$fo),e(d_,fP),e(fP,Ifo),e(d_,Dfo),e(F,Nfo),e(F,c_),e(c_,oee),e(oee,jfo),e(c_,qfo),e(c_,mP),e(mP,Gfo),e(c_,Ofo),e(F,Xfo),e(F,f_),e(f_,ree),e(ree,Vfo),e(f_,zfo),e(f_,gP),e(gP,Wfo),e(f_,Qfo),e(F,Hfo),e(F,m_),e(m_,tee),e(tee,Ufo),e(m_,Jfo),e(m_,hP),e(hP,Yfo),e(m_,Kfo),e(F,Zfo),e(F,g_),e(g_,aee),e(aee,emo),e(g_,omo),e(g_,pP),e(pP,rmo),e(g_,tmo),e(F,amo),e(F,h_),e(h_,nee),e(nee,nmo),e(h_,smo),e(h_,_P),e(_P,lmo),e(h_,imo),e(F,dmo),e(F,p_),e(p_,see),e(see,cmo),e(p_,fmo),e(p_,uP),e(uP,mmo),e(p_,gmo),e(F,hmo),e(F,__),e(__,lee),e(lee,pmo),e(__,_mo),e(__,bP),e(bP,umo),e(__,bmo),e(F,vmo),e(F,u_),e(u_,iee),e(iee,Tmo),e(u_,Fmo),e(u_,vP),e(vP,Cmo),e(u_,Mmo),e(F,Emo),e(F,b_),e(b_,dee),e(dee,ymo),e(b_,wmo),e(b_,TP),e(TP,Amo),e(b_,Lmo),e(F,Bmo),e(F,v_),e(v_,cee),e(cee,xmo),e(v_,kmo),e(v_,FP),e(FP,Rmo),e(v_,Smo),e(F,Pmo),e(F,T_),e(T_,fee),e(fee,$mo),e(T_,Imo),e(T_,CP),e(CP,Dmo),e(T_,Nmo),e(F,jmo),e(F,F_),e(F_,mee),e(mee,qmo),e(F_,Gmo),e(F_,MP),e(MP,Omo),e(F_,Xmo),e(F,Vmo),e(F,C_),e(C_,gee),e(gee,zmo),e(C_,Wmo),e(C_,EP),e(EP,Qmo),e(C_,Hmo),e(F,Umo),e(F,M_),e(M_,hee),e(hee,Jmo),e(M_,Ymo),e(M_,yP),e(yP,Kmo),e(M_,Zmo),e(F,ego),e(F,E_),e(E_,pee),e(pee,ogo),e(E_,rgo),e(E_,wP),e(wP,tgo),e(E_,ago),e(F,ngo),e(F,y_),e(y_,_ee),e(_ee,sgo),e(y_,lgo),e(y_,AP),e(AP,igo),e(y_,dgo),e(F,cgo),e(F,w_),e(w_,uee),e(uee,fgo),e(w_,mgo),e(w_,LP),e(LP,ggo),e(w_,hgo),e(F,pgo),e(F,A_),e(A_,bee),e(bee,_go),e(A_,ugo),e(A_,BP),e(BP,bgo),e(A_,vgo),e(F,Tgo),e(F,L_),e(L_,vee),e(vee,Fgo),e(L_,Cgo),e(L_,xP),e(xP,Mgo),e(L_,Ego),e(De,ygo),e(De,B_),e(B_,wgo),e(B_,Tee),e(Tee,Ago),e(B_,Lgo),e(B_,Fee),e(Fee,Bgo),e(De,xgo),e(De,Cee),e(Cee,kgo),e(De,Rgo),g(ZE,De,null),b(c,Vke,u),b(c,Zi,u),e(Zi,x_),e(x_,Mee),g(e5,Mee,null),e(Zi,Sgo),e(Zi,Eee),e(Eee,Pgo),b(c,zke,u),b(c,Yo,u),g(o5,Yo,null),e(Yo,$go),e(Yo,ed),e(ed,Igo),e(ed,yee),e(yee,Dgo),e(ed,Ngo),e(ed,wee),e(wee,jgo),e(ed,qgo),e(Yo,Ggo),e(Yo,r5),e(r5,Ogo),e(r5,Aee),e(Aee,Xgo),e(r5,Vgo),e(Yo,zgo),e(Yo,zr),g(t5,zr,null),e(zr,Wgo),e(zr,Lee),e(Lee,Qgo),e(zr,Hgo),e(zr,od),e(od,Ugo),e(od,Bee),e(Bee,Jgo),e(od,Ygo),e(od,xee),e(xee,Kgo),e(od,Zgo),e(zr,eho),e(zr,kee),e(kee,oho),e(zr,rho),g(a5,zr,null),e(Yo,tho),e(Yo,Ne),g(n5,Ne,null),e(Ne,aho),e(Ne,Ree),e(Ree,nho),e(Ne,sho),e(Ne,za),e(za,lho),e(za,See),e(See,iho),e(za,dho),e(za,Pee),e(Pee,cho),e(za,fho),e(za,$ee),e($ee,mho),e(za,gho),e(Ne,hho),e(Ne,k),e(k,k_),e(k_,Iee),e(Iee,pho),e(k_,_ho),e(k_,kP),e(kP,uho),e(k_,bho),e(k,vho),e(k,R_),e(R_,Dee),e(Dee,Tho),e(R_,Fho),e(R_,RP),e(RP,Cho),e(R_,Mho),e(k,Eho),e(k,S_),e(S_,Nee),e(Nee,yho),e(S_,who),e(S_,SP),e(SP,Aho),e(S_,Lho),e(k,Bho),e(k,P_),e(P_,jee),e(jee,xho),e(P_,kho),e(P_,PP),e(PP,Rho),e(P_,Sho),e(k,Pho),e(k,$_),e($_,qee),e(qee,$ho),e($_,Iho),e($_,$P),e($P,Dho),e($_,Nho),e(k,jho),e(k,I_),e(I_,Gee),e(Gee,qho),e(I_,Gho),e(I_,IP),e(IP,Oho),e(I_,Xho),e(k,Vho),e(k,D_),e(D_,Oee),e(Oee,zho),e(D_,Who),e(D_,DP),e(DP,Qho),e(D_,Hho),e(k,Uho),e(k,N_),e(N_,Xee),e(Xee,Jho),e(N_,Yho),e(N_,NP),e(NP,Kho),e(N_,Zho),e(k,epo),e(k,j_),e(j_,Vee),e(Vee,opo),e(j_,rpo),e(j_,jP),e(jP,tpo),e(j_,apo),e(k,npo),e(k,q_),e(q_,zee),e(zee,spo),e(q_,lpo),e(q_,qP),e(qP,ipo),e(q_,dpo),e(k,cpo),e(k,G_),e(G_,Wee),e(Wee,fpo),e(G_,mpo),e(G_,GP),e(GP,gpo),e(G_,hpo),e(k,ppo),e(k,O_),e(O_,Qee),e(Qee,_po),e(O_,upo),e(O_,OP),e(OP,bpo),e(O_,vpo),e(k,Tpo),e(k,X_),e(X_,Hee),e(Hee,Fpo),e(X_,Cpo),e(X_,XP),e(XP,Mpo),e(X_,Epo),e(k,ypo),e(k,V_),e(V_,Uee),e(Uee,wpo),e(V_,Apo),e(V_,VP),e(VP,Lpo),e(V_,Bpo),e(k,xpo),e(k,z_),e(z_,Jee),e(Jee,kpo),e(z_,Rpo),e(z_,zP),e(zP,Spo),e(z_,Ppo),e(k,$po),e(k,W_),e(W_,Yee),e(Yee,Ipo),e(W_,Dpo),e(W_,WP),e(WP,Npo),e(W_,jpo),e(k,qpo),e(k,Q_),e(Q_,Kee),e(Kee,Gpo),e(Q_,Opo),e(Q_,QP),e(QP,Xpo),e(Q_,Vpo),e(k,zpo),e(k,H_),e(H_,Zee),e(Zee,Wpo),e(H_,Qpo),e(H_,HP),e(HP,Hpo),e(H_,Upo),e(k,Jpo),e(k,U_),e(U_,eoe),e(eoe,Ypo),e(U_,Kpo),e(U_,UP),e(UP,Zpo),e(U_,e_o),e(k,o_o),e(k,J_),e(J_,ooe),e(ooe,r_o),e(J_,t_o),e(J_,JP),e(JP,a_o),e(J_,n_o),e(k,s_o),e(k,Y_),e(Y_,roe),e(roe,l_o),e(Y_,i_o),e(Y_,YP),e(YP,d_o),e(Y_,c_o),e(k,f_o),e(k,K_),e(K_,toe),e(toe,m_o),e(K_,g_o),e(K_,KP),e(KP,h_o),e(K_,p_o),e(k,__o),e(k,Z_),e(Z_,aoe),e(aoe,u_o),e(Z_,b_o),e(Z_,ZP),e(ZP,v_o),e(Z_,T_o),e(k,F_o),e(k,eu),e(eu,noe),e(noe,C_o),e(eu,M_o),e(eu,e$),e(e$,E_o),e(eu,y_o),e(k,w_o),e(k,ou),e(ou,soe),e(soe,A_o),e(ou,L_o),e(ou,o$),e(o$,B_o),e(ou,x_o),e(k,k_o),e(k,ru),e(ru,loe),e(loe,R_o),e(ru,S_o),e(ru,r$),e(r$,P_o),e(ru,$_o),e(k,I_o),e(k,tu),e(tu,ioe),e(ioe,D_o),e(tu,N_o),e(tu,t$),e(t$,j_o),e(tu,q_o),e(k,G_o),e(k,au),e(au,doe),e(doe,O_o),e(au,X_o),e(au,a$),e(a$,V_o),e(au,z_o),e(k,W_o),e(k,nu),e(nu,coe),e(coe,Q_o),e(nu,H_o),e(nu,n$),e(n$,U_o),e(nu,J_o),e(k,Y_o),e(k,su),e(su,foe),e(foe,K_o),e(su,Z_o),e(su,s$),e(s$,euo),e(su,ouo),e(k,ruo),e(k,lu),e(lu,moe),e(moe,tuo),e(lu,auo),e(lu,l$),e(l$,nuo),e(lu,suo),e(k,luo),e(k,iu),e(iu,goe),e(goe,iuo),e(iu,duo),e(iu,i$),e(i$,cuo),e(iu,fuo),e(k,muo),e(k,du),e(du,hoe),e(hoe,guo),e(du,huo),e(du,d$),e(d$,puo),e(du,_uo),e(k,uuo),e(k,cu),e(cu,poe),e(poe,buo),e(cu,vuo),e(cu,c$),e(c$,Tuo),e(cu,Fuo),e(k,Cuo),e(k,fu),e(fu,_oe),e(_oe,Muo),e(fu,Euo),e(fu,f$),e(f$,yuo),e(fu,wuo),e(k,Auo),e(k,mu),e(mu,uoe),e(uoe,Luo),e(mu,Buo),e(mu,m$),e(m$,xuo),e(mu,kuo),e(k,Ruo),e(k,gu),e(gu,boe),e(boe,Suo),e(gu,Puo),e(gu,g$),e(g$,$uo),e(gu,Iuo),e(k,Duo),e(k,hu),e(hu,voe),e(voe,Nuo),e(hu,juo),e(hu,h$),e(h$,quo),e(hu,Guo),e(k,Ouo),e(k,pu),e(pu,Toe),e(Toe,Xuo),e(pu,Vuo),e(pu,p$),e(p$,zuo),e(pu,Wuo),e(Ne,Quo),e(Ne,_u),e(_u,Huo),e(_u,Foe),e(Foe,Uuo),e(_u,Juo),e(_u,Coe),e(Coe,Yuo),e(Ne,Kuo),e(Ne,Moe),e(Moe,Zuo),e(Ne,e2o),g(s5,Ne,null),b(c,Wke,u),b(c,rd,u),e(rd,uu),e(uu,Eoe),g(l5,Eoe,null),e(rd,o2o),e(rd,yoe),e(yoe,r2o),b(c,Qke,u),b(c,Ko,u),g(i5,Ko,null),e(Ko,t2o),e(Ko,td),e(td,a2o),e(td,woe),e(woe,n2o),e(td,s2o),e(td,Aoe),e(Aoe,l2o),e(td,i2o),e(Ko,d2o),e(Ko,d5),e(d5,c2o),e(d5,Loe),e(Loe,f2o),e(d5,m2o),e(Ko,g2o),e(Ko,Wr),g(c5,Wr,null),e(Wr,h2o),e(Wr,Boe),e(Boe,p2o),e(Wr,_2o),e(Wr,ad),e(ad,u2o),e(ad,xoe),e(xoe,b2o),e(ad,v2o),e(ad,koe),e(koe,T2o),e(ad,F2o),e(Wr,C2o),e(Wr,Roe),e(Roe,M2o),e(Wr,E2o),g(f5,Wr,null),e(Ko,y2o),e(Ko,je),g(m5,je,null),e(je,w2o),e(je,Soe),e(Soe,A2o),e(je,L2o),e(je,Wa),e(Wa,B2o),e(Wa,Poe),e(Poe,x2o),e(Wa,k2o),e(Wa,$oe),e($oe,R2o),e(Wa,S2o),e(Wa,Ioe),e(Ioe,P2o),e(Wa,$2o),e(je,I2o),e(je,$),e($,bu),e(bu,Doe),e(Doe,D2o),e(bu,N2o),e(bu,_$),e(_$,j2o),e(bu,q2o),e($,G2o),e($,vu),e(vu,Noe),e(Noe,O2o),e(vu,X2o),e(vu,u$),e(u$,V2o),e(vu,z2o),e($,W2o),e($,Tu),e(Tu,joe),e(joe,Q2o),e(Tu,H2o),e(Tu,b$),e(b$,U2o),e(Tu,J2o),e($,Y2o),e($,Fu),e(Fu,qoe),e(qoe,K2o),e(Fu,Z2o),e(Fu,v$),e(v$,e1o),e(Fu,o1o),e($,r1o),e($,Cu),e(Cu,Goe),e(Goe,t1o),e(Cu,a1o),e(Cu,T$),e(T$,n1o),e(Cu,s1o),e($,l1o),e($,Mu),e(Mu,Ooe),e(Ooe,i1o),e(Mu,d1o),e(Mu,F$),e(F$,c1o),e(Mu,f1o),e($,m1o),e($,Eu),e(Eu,Xoe),e(Xoe,g1o),e(Eu,h1o),e(Eu,C$),e(C$,p1o),e(Eu,_1o),e($,u1o),e($,yu),e(yu,Voe),e(Voe,b1o),e(yu,v1o),e(yu,M$),e(M$,T1o),e(yu,F1o),e($,C1o),e($,wu),e(wu,zoe),e(zoe,M1o),e(wu,E1o),e(wu,E$),e(E$,y1o),e(wu,w1o),e($,A1o),e($,Au),e(Au,Woe),e(Woe,L1o),e(Au,B1o),e(Au,y$),e(y$,x1o),e(Au,k1o),e($,R1o),e($,Lu),e(Lu,Qoe),e(Qoe,S1o),e(Lu,P1o),e(Lu,w$),e(w$,$1o),e(Lu,I1o),e($,D1o),e($,Bu),e(Bu,Hoe),e(Hoe,N1o),e(Bu,j1o),e(Bu,A$),e(A$,q1o),e(Bu,G1o),e($,O1o),e($,xu),e(xu,Uoe),e(Uoe,X1o),e(xu,V1o),e(xu,L$),e(L$,z1o),e(xu,W1o),e($,Q1o),e($,ku),e(ku,Joe),e(Joe,H1o),e(ku,U1o),e(ku,B$),e(B$,J1o),e(ku,Y1o),e($,K1o),e($,Ru),e(Ru,Yoe),e(Yoe,Z1o),e(Ru,ebo),e(Ru,x$),e(x$,obo),e(Ru,rbo),e($,tbo),e($,Su),e(Su,Koe),e(Koe,abo),e(Su,nbo),e(Su,k$),e(k$,sbo),e(Su,lbo),e($,ibo),e($,Pu),e(Pu,Zoe),e(Zoe,dbo),e(Pu,cbo),e(Pu,R$),e(R$,fbo),e(Pu,mbo),e($,gbo),e($,$u),e($u,ere),e(ere,hbo),e($u,pbo),e($u,S$),e(S$,_bo),e($u,ubo),e($,bbo),e($,Iu),e(Iu,ore),e(ore,vbo),e(Iu,Tbo),e(Iu,P$),e(P$,Fbo),e(Iu,Cbo),e($,Mbo),e($,Du),e(Du,rre),e(rre,Ebo),e(Du,ybo),e(Du,$$),e($$,wbo),e(Du,Abo),e($,Lbo),e($,Nu),e(Nu,tre),e(tre,Bbo),e(Nu,xbo),e(Nu,I$),e(I$,kbo),e(Nu,Rbo),e($,Sbo),e($,ju),e(ju,are),e(are,Pbo),e(ju,$bo),e(ju,D$),e(D$,Ibo),e(ju,Dbo),e($,Nbo),e($,qu),e(qu,nre),e(nre,jbo),e(qu,qbo),e(qu,N$),e(N$,Gbo),e(qu,Obo),e($,Xbo),e($,Gu),e(Gu,sre),e(sre,Vbo),e(Gu,zbo),e(Gu,j$),e(j$,Wbo),e(Gu,Qbo),e($,Hbo),e($,Ou),e(Ou,lre),e(lre,Ubo),e(Ou,Jbo),e(Ou,q$),e(q$,Ybo),e(Ou,Kbo),e($,Zbo),e($,Xu),e(Xu,ire),e(ire,e3o),e(Xu,o3o),e(Xu,G$),e(G$,r3o),e(Xu,t3o),e($,a3o),e($,Vu),e(Vu,dre),e(dre,n3o),e(Vu,s3o),e(Vu,O$),e(O$,l3o),e(Vu,i3o),e($,d3o),e($,zu),e(zu,cre),e(cre,c3o),e(zu,f3o),e(zu,X$),e(X$,m3o),e(zu,g3o),e($,h3o),e($,Wu),e(Wu,fre),e(fre,p3o),e(Wu,_3o),e(Wu,V$),e(V$,u3o),e(Wu,b3o),e($,v3o),e($,Qu),e(Qu,mre),e(mre,T3o),e(Qu,F3o),e(Qu,z$),e(z$,C3o),e(Qu,M3o),e($,E3o),e($,Hu),e(Hu,gre),e(gre,y3o),e(Hu,w3o),e(Hu,W$),e(W$,A3o),e(Hu,L3o),e($,B3o),e($,Uu),e(Uu,hre),e(hre,x3o),e(Uu,k3o),e(Uu,Q$),e(Q$,R3o),e(Uu,S3o),e($,P3o),e($,Ju),e(Ju,pre),e(pre,$3o),e(Ju,I3o),e(Ju,H$),e(H$,D3o),e(Ju,N3o),e($,j3o),e($,Yu),e(Yu,_re),e(_re,q3o),e(Yu,G3o),e(Yu,U$),e(U$,O3o),e(Yu,X3o),e($,V3o),e($,Ku),e(Ku,ure),e(ure,z3o),e(Ku,W3o),e(Ku,J$),e(J$,Q3o),e(Ku,H3o),e(je,U3o),e(je,Zu),e(Zu,J3o),e(Zu,bre),e(bre,Y3o),e(Zu,K3o),e(Zu,vre),e(vre,Z3o),e(je,evo),e(je,Tre),e(Tre,ovo),e(je,rvo),g(g5,je,null),b(c,Hke,u),b(c,nd,u),e(nd,e2),e(e2,Fre),g(h5,Fre,null),e(nd,tvo),e(nd,Cre),e(Cre,avo),b(c,Uke,u),b(c,Zo,u),g(p5,Zo,null),e(Zo,nvo),e(Zo,sd),e(sd,svo),e(sd,Mre),e(Mre,lvo),e(sd,ivo),e(sd,Ere),e(Ere,dvo),e(sd,cvo),e(Zo,fvo),e(Zo,_5),e(_5,mvo),e(_5,yre),e(yre,gvo),e(_5,hvo),e(Zo,pvo),e(Zo,Qr),g(u5,Qr,null),e(Qr,_vo),e(Qr,wre),e(wre,uvo),e(Qr,bvo),e(Qr,ld),e(ld,vvo),e(ld,Are),e(Are,Tvo),e(ld,Fvo),e(ld,Lre),e(Lre,Cvo),e(ld,Mvo),e(Qr,Evo),e(Qr,Bre),e(Bre,yvo),e(Qr,wvo),g(b5,Qr,null),e(Zo,Avo),e(Zo,qe),g(v5,qe,null),e(qe,Lvo),e(qe,xre),e(xre,Bvo),e(qe,xvo),e(qe,Qa),e(Qa,kvo),e(Qa,kre),e(kre,Rvo),e(Qa,Svo),e(Qa,Rre),e(Rre,Pvo),e(Qa,$vo),e(Qa,Sre),e(Sre,Ivo),e(Qa,Dvo),e(qe,Nvo),e(qe,I),e(I,o2),e(o2,Pre),e(Pre,jvo),e(o2,qvo),e(o2,Y$),e(Y$,Gvo),e(o2,Ovo),e(I,Xvo),e(I,r2),e(r2,$re),e($re,Vvo),e(r2,zvo),e(r2,K$),e(K$,Wvo),e(r2,Qvo),e(I,Hvo),e(I,t2),e(t2,Ire),e(Ire,Uvo),e(t2,Jvo),e(t2,Z$),e(Z$,Yvo),e(t2,Kvo),e(I,Zvo),e(I,a2),e(a2,Dre),e(Dre,e6o),e(a2,o6o),e(a2,eI),e(eI,r6o),e(a2,t6o),e(I,a6o),e(I,n2),e(n2,Nre),e(Nre,n6o),e(n2,s6o),e(n2,oI),e(oI,l6o),e(n2,i6o),e(I,d6o),e(I,s2),e(s2,jre),e(jre,c6o),e(s2,f6o),e(s2,rI),e(rI,m6o),e(s2,g6o),e(I,h6o),e(I,l2),e(l2,qre),e(qre,p6o),e(l2,_6o),e(l2,tI),e(tI,u6o),e(l2,b6o),e(I,v6o),e(I,i2),e(i2,Gre),e(Gre,T6o),e(i2,F6o),e(i2,aI),e(aI,C6o),e(i2,M6o),e(I,E6o),e(I,d2),e(d2,Ore),e(Ore,y6o),e(d2,w6o),e(d2,nI),e(nI,A6o),e(d2,L6o),e(I,B6o),e(I,c2),e(c2,Xre),e(Xre,x6o),e(c2,k6o),e(c2,sI),e(sI,R6o),e(c2,S6o),e(I,P6o),e(I,f2),e(f2,Vre),e(Vre,$6o),e(f2,I6o),e(f2,lI),e(lI,D6o),e(f2,N6o),e(I,j6o),e(I,m2),e(m2,zre),e(zre,q6o),e(m2,G6o),e(m2,iI),e(iI,O6o),e(m2,X6o),e(I,V6o),e(I,g2),e(g2,Wre),e(Wre,z6o),e(g2,W6o),e(g2,dI),e(dI,Q6o),e(g2,H6o),e(I,U6o),e(I,h2),e(h2,Qre),e(Qre,J6o),e(h2,Y6o),e(h2,cI),e(cI,K6o),e(h2,Z6o),e(I,eTo),e(I,p2),e(p2,Hre),e(Hre,oTo),e(p2,rTo),e(p2,fI),e(fI,tTo),e(p2,aTo),e(I,nTo),e(I,_2),e(_2,Ure),e(Ure,sTo),e(_2,lTo),e(_2,mI),e(mI,iTo),e(_2,dTo),e(I,cTo),e(I,u2),e(u2,Jre),e(Jre,fTo),e(u2,mTo),e(u2,gI),e(gI,gTo),e(u2,hTo),e(I,pTo),e(I,b2),e(b2,Yre),e(Yre,_To),e(b2,uTo),e(b2,hI),e(hI,bTo),e(b2,vTo),e(I,TTo),e(I,v2),e(v2,Kre),e(Kre,FTo),e(v2,CTo),e(v2,pI),e(pI,MTo),e(v2,ETo),e(I,yTo),e(I,T2),e(T2,Zre),e(Zre,wTo),e(T2,ATo),e(T2,_I),e(_I,LTo),e(T2,BTo),e(I,xTo),e(I,F2),e(F2,ete),e(ete,kTo),e(F2,RTo),e(F2,uI),e(uI,STo),e(F2,PTo),e(I,$To),e(I,C2),e(C2,ote),e(ote,ITo),e(C2,DTo),e(C2,bI),e(bI,NTo),e(C2,jTo),e(I,qTo),e(I,M2),e(M2,rte),e(rte,GTo),e(M2,OTo),e(M2,vI),e(vI,XTo),e(M2,VTo),e(I,zTo),e(I,E2),e(E2,tte),e(tte,WTo),e(E2,QTo),e(E2,TI),e(TI,HTo),e(E2,UTo),e(I,JTo),e(I,y2),e(y2,ate),e(ate,YTo),e(y2,KTo),e(y2,FI),e(FI,ZTo),e(y2,eFo),e(I,oFo),e(I,w2),e(w2,nte),e(nte,rFo),e(w2,tFo),e(w2,CI),e(CI,aFo),e(w2,nFo),e(I,sFo),e(I,A2),e(A2,ste),e(ste,lFo),e(A2,iFo),e(A2,MI),e(MI,dFo),e(A2,cFo),e(I,fFo),e(I,L2),e(L2,lte),e(lte,mFo),e(L2,gFo),e(L2,EI),e(EI,hFo),e(L2,pFo),e(I,_Fo),e(I,B2),e(B2,ite),e(ite,uFo),e(B2,bFo),e(B2,yI),e(yI,vFo),e(B2,TFo),e(I,FFo),e(I,x2),e(x2,dte),e(dte,CFo),e(x2,MFo),e(x2,wI),e(wI,EFo),e(x2,yFo),e(I,wFo),e(I,k2),e(k2,cte),e(cte,AFo),e(k2,LFo),e(k2,fte),e(fte,BFo),e(k2,xFo),e(I,kFo),e(I,R2),e(R2,mte),e(mte,RFo),e(R2,SFo),e(R2,AI),e(AI,PFo),e(R2,$Fo),e(I,IFo),e(I,S2),e(S2,gte),e(gte,DFo),e(S2,NFo),e(S2,LI),e(LI,jFo),e(S2,qFo),e(I,GFo),e(I,P2),e(P2,hte),e(hte,OFo),e(P2,XFo),e(P2,BI),e(BI,VFo),e(P2,zFo),e(I,WFo),e(I,$2),e($2,pte),e(pte,QFo),e($2,HFo),e($2,xI),e(xI,UFo),e($2,JFo),e(qe,YFo),e(qe,I2),e(I2,KFo),e(I2,_te),e(_te,ZFo),e(I2,e9o),e(I2,ute),e(ute,o9o),e(qe,r9o),e(qe,bte),e(bte,t9o),e(qe,a9o),g(T5,qe,null),b(c,Jke,u),b(c,id,u),e(id,D2),e(D2,vte),g(F5,vte,null),e(id,n9o),e(id,Tte),e(Tte,s9o),b(c,Yke,u),b(c,er,u),g(C5,er,null),e(er,l9o),e(er,dd),e(dd,i9o),e(dd,Fte),e(Fte,d9o),e(dd,c9o),e(dd,Cte),e(Cte,f9o),e(dd,m9o),e(er,g9o),e(er,M5),e(M5,h9o),e(M5,Mte),e(Mte,p9o),e(M5,_9o),e(er,u9o),e(er,Hr),g(E5,Hr,null),e(Hr,b9o),e(Hr,Ete),e(Ete,v9o),e(Hr,T9o),e(Hr,cd),e(cd,F9o),e(cd,yte),e(yte,C9o),e(cd,M9o),e(cd,wte),e(wte,E9o),e(cd,y9o),e(Hr,w9o),e(Hr,Ate),e(Ate,A9o),e(Hr,L9o),g(y5,Hr,null),e(er,B9o),e(er,Ge),g(w5,Ge,null),e(Ge,x9o),e(Ge,Lte),e(Lte,k9o),e(Ge,R9o),e(Ge,Ha),e(Ha,S9o),e(Ha,Bte),e(Bte,P9o),e(Ha,$9o),e(Ha,xte),e(xte,I9o),e(Ha,D9o),e(Ha,kte),e(kte,N9o),e(Ha,j9o),e(Ge,q9o),e(Ge,se),e(se,N2),e(N2,Rte),e(Rte,G9o),e(N2,O9o),e(N2,kI),e(kI,X9o),e(N2,V9o),e(se,z9o),e(se,j2),e(j2,Ste),e(Ste,W9o),e(j2,Q9o),e(j2,RI),e(RI,H9o),e(j2,U9o),e(se,J9o),e(se,q2),e(q2,Pte),e(Pte,Y9o),e(q2,K9o),e(q2,SI),e(SI,Z9o),e(q2,eCo),e(se,oCo),e(se,G2),e(G2,$te),e($te,rCo),e(G2,tCo),e(G2,PI),e(PI,aCo),e(G2,nCo),e(se,sCo),e(se,O2),e(O2,Ite),e(Ite,lCo),e(O2,iCo),e(O2,$I),e($I,dCo),e(O2,cCo),e(se,fCo),e(se,X2),e(X2,Dte),e(Dte,mCo),e(X2,gCo),e(X2,II),e(II,hCo),e(X2,pCo),e(se,_Co),e(se,V2),e(V2,Nte),e(Nte,uCo),e(V2,bCo),e(V2,DI),e(DI,vCo),e(V2,TCo),e(se,FCo),e(se,z2),e(z2,jte),e(jte,CCo),e(z2,MCo),e(z2,NI),e(NI,ECo),e(z2,yCo),e(se,wCo),e(se,W2),e(W2,qte),e(qte,ACo),e(W2,LCo),e(W2,jI),e(jI,BCo),e(W2,xCo),e(se,kCo),e(se,Q2),e(Q2,Gte),e(Gte,RCo),e(Q2,SCo),e(Q2,qI),e(qI,PCo),e(Q2,$Co),e(se,ICo),e(se,H2),e(H2,Ote),e(Ote,DCo),e(H2,NCo),e(H2,GI),e(GI,jCo),e(H2,qCo),e(se,GCo),e(se,U2),e(U2,Xte),e(Xte,OCo),e(U2,XCo),e(U2,OI),e(OI,VCo),e(U2,zCo),e(se,WCo),e(se,J2),e(J2,Vte),e(Vte,QCo),e(J2,HCo),e(J2,XI),e(XI,UCo),e(J2,JCo),e(se,YCo),e(se,Y2),e(Y2,zte),e(zte,KCo),e(Y2,ZCo),e(Y2,VI),e(VI,eMo),e(Y2,oMo),e(se,rMo),e(se,K2),e(K2,Wte),e(Wte,tMo),e(K2,aMo),e(K2,zI),e(zI,nMo),e(K2,sMo),e(se,lMo),e(se,Z2),e(Z2,Qte),e(Qte,iMo),e(Z2,dMo),e(Z2,WI),e(WI,cMo),e(Z2,fMo),e(Ge,mMo),e(Ge,e1),e(e1,gMo),e(e1,Hte),e(Hte,hMo),e(e1,pMo),e(e1,Ute),e(Ute,_Mo),e(Ge,uMo),e(Ge,Jte),e(Jte,bMo),e(Ge,vMo),g(A5,Ge,null),b(c,Kke,u),b(c,fd,u),e(fd,o1),e(o1,Yte),g(L5,Yte,null),e(fd,TMo),e(fd,Kte),e(Kte,FMo),b(c,Zke,u),b(c,or,u),g(B5,or,null),e(or,CMo),e(or,md),e(md,MMo),e(md,Zte),e(Zte,EMo),e(md,yMo),e(md,eae),e(eae,wMo),e(md,AMo),e(or,LMo),e(or,x5),e(x5,BMo),e(x5,oae),e(oae,xMo),e(x5,kMo),e(or,RMo),e(or,Ur),g(k5,Ur,null),e(Ur,SMo),e(Ur,rae),e(rae,PMo),e(Ur,$Mo),e(Ur,gd),e(gd,IMo),e(gd,tae),e(tae,DMo),e(gd,NMo),e(gd,aae),e(aae,jMo),e(gd,qMo),e(Ur,GMo),e(Ur,nae),e(nae,OMo),e(Ur,XMo),g(R5,Ur,null),e(or,VMo),e(or,Oe),g(S5,Oe,null),e(Oe,zMo),e(Oe,sae),e(sae,WMo),e(Oe,QMo),e(Oe,Ua),e(Ua,HMo),e(Ua,lae),e(lae,UMo),e(Ua,JMo),e(Ua,iae),e(iae,YMo),e(Ua,KMo),e(Ua,dae),e(dae,ZMo),e(Ua,e4o),e(Oe,o4o),e(Oe,A),e(A,r1),e(r1,cae),e(cae,r4o),e(r1,t4o),e(r1,QI),e(QI,a4o),e(r1,n4o),e(A,s4o),e(A,t1),e(t1,fae),e(fae,l4o),e(t1,i4o),e(t1,HI),e(HI,d4o),e(t1,c4o),e(A,f4o),e(A,a1),e(a1,mae),e(mae,m4o),e(a1,g4o),e(a1,UI),e(UI,h4o),e(a1,p4o),e(A,_4o),e(A,n1),e(n1,gae),e(gae,u4o),e(n1,b4o),e(n1,JI),e(JI,v4o),e(n1,T4o),e(A,F4o),e(A,s1),e(s1,hae),e(hae,C4o),e(s1,M4o),e(s1,YI),e(YI,E4o),e(s1,y4o),e(A,w4o),e(A,l1),e(l1,pae),e(pae,A4o),e(l1,L4o),e(l1,KI),e(KI,B4o),e(l1,x4o),e(A,k4o),e(A,i1),e(i1,_ae),e(_ae,R4o),e(i1,S4o),e(i1,ZI),e(ZI,P4o),e(i1,$4o),e(A,I4o),e(A,d1),e(d1,uae),e(uae,D4o),e(d1,N4o),e(d1,eD),e(eD,j4o),e(d1,q4o),e(A,G4o),e(A,c1),e(c1,bae),e(bae,O4o),e(c1,X4o),e(c1,oD),e(oD,V4o),e(c1,z4o),e(A,W4o),e(A,f1),e(f1,vae),e(vae,Q4o),e(f1,H4o),e(f1,rD),e(rD,U4o),e(f1,J4o),e(A,Y4o),e(A,m1),e(m1,Tae),e(Tae,K4o),e(m1,Z4o),e(m1,tD),e(tD,eEo),e(m1,oEo),e(A,rEo),e(A,g1),e(g1,Fae),e(Fae,tEo),e(g1,aEo),e(g1,aD),e(aD,nEo),e(g1,sEo),e(A,lEo),e(A,h1),e(h1,Cae),e(Cae,iEo),e(h1,dEo),e(h1,nD),e(nD,cEo),e(h1,fEo),e(A,mEo),e(A,p1),e(p1,Mae),e(Mae,gEo),e(p1,hEo),e(p1,sD),e(sD,pEo),e(p1,_Eo),e(A,uEo),e(A,_1),e(_1,Eae),e(Eae,bEo),e(_1,vEo),e(_1,lD),e(lD,TEo),e(_1,FEo),e(A,CEo),e(A,u1),e(u1,yae),e(yae,MEo),e(u1,EEo),e(u1,iD),e(iD,yEo),e(u1,wEo),e(A,AEo),e(A,b1),e(b1,wae),e(wae,LEo),e(b1,BEo),e(b1,dD),e(dD,xEo),e(b1,kEo),e(A,REo),e(A,v1),e(v1,Aae),e(Aae,SEo),e(v1,PEo),e(v1,cD),e(cD,$Eo),e(v1,IEo),e(A,DEo),e(A,T1),e(T1,Lae),e(Lae,NEo),e(T1,jEo),e(T1,fD),e(fD,qEo),e(T1,GEo),e(A,OEo),e(A,F1),e(F1,Bae),e(Bae,XEo),e(F1,VEo),e(F1,mD),e(mD,zEo),e(F1,WEo),e(A,QEo),e(A,C1),e(C1,xae),e(xae,HEo),e(C1,UEo),e(C1,gD),e(gD,JEo),e(C1,YEo),e(A,KEo),e(A,M1),e(M1,kae),e(kae,ZEo),e(M1,e5o),e(M1,hD),e(hD,o5o),e(M1,r5o),e(A,t5o),e(A,E1),e(E1,Rae),e(Rae,a5o),e(E1,n5o),e(E1,pD),e(pD,s5o),e(E1,l5o),e(A,i5o),e(A,y1),e(y1,Sae),e(Sae,d5o),e(y1,c5o),e(y1,_D),e(_D,f5o),e(y1,m5o),e(A,g5o),e(A,w1),e(w1,Pae),e(Pae,h5o),e(w1,p5o),e(w1,uD),e(uD,_5o),e(w1,u5o),e(A,b5o),e(A,A1),e(A1,$ae),e($ae,v5o),e(A1,T5o),e(A1,bD),e(bD,F5o),e(A1,C5o),e(A,M5o),e(A,L1),e(L1,Iae),e(Iae,E5o),e(L1,y5o),e(L1,vD),e(vD,w5o),e(L1,A5o),e(A,L5o),e(A,B1),e(B1,Dae),e(Dae,B5o),e(B1,x5o),e(B1,TD),e(TD,k5o),e(B1,R5o),e(A,S5o),e(A,x1),e(x1,Nae),e(Nae,P5o),e(x1,$5o),e(x1,FD),e(FD,I5o),e(x1,D5o),e(A,N5o),e(A,k1),e(k1,jae),e(jae,j5o),e(k1,q5o),e(k1,CD),e(CD,G5o),e(k1,O5o),e(A,X5o),e(A,R1),e(R1,qae),e(qae,V5o),e(R1,z5o),e(R1,MD),e(MD,W5o),e(R1,Q5o),e(A,H5o),e(A,S1),e(S1,Gae),e(Gae,U5o),e(S1,J5o),e(S1,ED),e(ED,Y5o),e(S1,K5o),e(A,Z5o),e(A,P1),e(P1,Oae),e(Oae,eyo),e(P1,oyo),e(P1,yD),e(yD,ryo),e(P1,tyo),e(A,ayo),e(A,$1),e($1,Xae),e(Xae,nyo),e($1,syo),e($1,wD),e(wD,lyo),e($1,iyo),e(A,dyo),e(A,I1),e(I1,Vae),e(Vae,cyo),e(I1,fyo),e(I1,AD),e(AD,myo),e(I1,gyo),e(A,hyo),e(A,D1),e(D1,zae),e(zae,pyo),e(D1,_yo),e(D1,LD),e(LD,uyo),e(D1,byo),e(A,vyo),e(A,N1),e(N1,Wae),e(Wae,Tyo),e(N1,Fyo),e(N1,BD),e(BD,Cyo),e(N1,Myo),e(A,Eyo),e(A,j1),e(j1,Qae),e(Qae,yyo),e(j1,wyo),e(j1,xD),e(xD,Ayo),e(j1,Lyo),e(A,Byo),e(A,q1),e(q1,Hae),e(Hae,xyo),e(q1,kyo),e(q1,kD),e(kD,Ryo),e(q1,Syo),e(A,Pyo),e(A,G1),e(G1,Uae),e(Uae,$yo),e(G1,Iyo),e(G1,RD),e(RD,Dyo),e(G1,Nyo),e(A,jyo),e(A,O1),e(O1,Jae),e(Jae,qyo),e(O1,Gyo),e(O1,SD),e(SD,Oyo),e(O1,Xyo),e(A,Vyo),e(A,X1),e(X1,Yae),e(Yae,zyo),e(X1,Wyo),e(X1,PD),e(PD,Qyo),e(X1,Hyo),e(A,Uyo),e(A,V1),e(V1,Kae),e(Kae,Jyo),e(V1,Yyo),e(V1,$D),e($D,Kyo),e(V1,Zyo),e(A,ewo),e(A,z1),e(z1,Zae),e(Zae,owo),e(z1,rwo),e(z1,ID),e(ID,two),e(z1,awo),e(A,nwo),e(A,W1),e(W1,ene),e(ene,swo),e(W1,lwo),e(W1,DD),e(DD,iwo),e(W1,dwo),e(A,cwo),e(A,Q1),e(Q1,one),e(one,fwo),e(Q1,mwo),e(Q1,ND),e(ND,gwo),e(Q1,hwo),e(Oe,pwo),e(Oe,H1),e(H1,_wo),e(H1,rne),e(rne,uwo),e(H1,bwo),e(H1,tne),e(tne,vwo),e(Oe,Two),e(Oe,ane),e(ane,Fwo),e(Oe,Cwo),g(P5,Oe,null),b(c,eRe,u),b(c,hd,u),e(hd,U1),e(U1,nne),g($5,nne,null),e(hd,Mwo),e(hd,sne),e(sne,Ewo),b(c,oRe,u),b(c,rr,u),g(I5,rr,null),e(rr,ywo),e(rr,pd),e(pd,wwo),e(pd,lne),e(lne,Awo),e(pd,Lwo),e(pd,ine),e(ine,Bwo),e(pd,xwo),e(rr,kwo),e(rr,D5),e(D5,Rwo),e(D5,dne),e(dne,Swo),e(D5,Pwo),e(rr,$wo),e(rr,Jr),g(N5,Jr,null),e(Jr,Iwo),e(Jr,cne),e(cne,Dwo),e(Jr,Nwo),e(Jr,_d),e(_d,jwo),e(_d,fne),e(fne,qwo),e(_d,Gwo),e(_d,mne),e(mne,Owo),e(_d,Xwo),e(Jr,Vwo),e(Jr,gne),e(gne,zwo),e(Jr,Wwo),g(j5,Jr,null),e(rr,Qwo),e(rr,Xe),g(q5,Xe,null),e(Xe,Hwo),e(Xe,hne),e(hne,Uwo),e(Xe,Jwo),e(Xe,Ja),e(Ja,Ywo),e(Ja,pne),e(pne,Kwo),e(Ja,Zwo),e(Ja,_ne),e(_ne,eAo),e(Ja,oAo),e(Ja,une),e(une,rAo),e(Ja,tAo),e(Xe,aAo),e(Xe,G),e(G,J1),e(J1,bne),e(bne,nAo),e(J1,sAo),e(J1,jD),e(jD,lAo),e(J1,iAo),e(G,dAo),e(G,Y1),e(Y1,vne),e(vne,cAo),e(Y1,fAo),e(Y1,qD),e(qD,mAo),e(Y1,gAo),e(G,hAo),e(G,K1),e(K1,Tne),e(Tne,pAo),e(K1,_Ao),e(K1,GD),e(GD,uAo),e(K1,bAo),e(G,vAo),e(G,Z1),e(Z1,Fne),e(Fne,TAo),e(Z1,FAo),e(Z1,OD),e(OD,CAo),e(Z1,MAo),e(G,EAo),e(G,eb),e(eb,Cne),e(Cne,yAo),e(eb,wAo),e(eb,XD),e(XD,AAo),e(eb,LAo),e(G,BAo),e(G,ob),e(ob,Mne),e(Mne,xAo),e(ob,kAo),e(ob,VD),e(VD,RAo),e(ob,SAo),e(G,PAo),e(G,rb),e(rb,Ene),e(Ene,$Ao),e(rb,IAo),e(rb,zD),e(zD,DAo),e(rb,NAo),e(G,jAo),e(G,tb),e(tb,yne),e(yne,qAo),e(tb,GAo),e(tb,WD),e(WD,OAo),e(tb,XAo),e(G,VAo),e(G,ab),e(ab,wne),e(wne,zAo),e(ab,WAo),e(ab,QD),e(QD,QAo),e(ab,HAo),e(G,UAo),e(G,nb),e(nb,Ane),e(Ane,JAo),e(nb,YAo),e(nb,HD),e(HD,KAo),e(nb,ZAo),e(G,e0o),e(G,sb),e(sb,Lne),e(Lne,o0o),e(sb,r0o),e(sb,UD),e(UD,t0o),e(sb,a0o),e(G,n0o),e(G,lb),e(lb,Bne),e(Bne,s0o),e(lb,l0o),e(lb,JD),e(JD,i0o),e(lb,d0o),e(G,c0o),e(G,ib),e(ib,xne),e(xne,f0o),e(ib,m0o),e(ib,YD),e(YD,g0o),e(ib,h0o),e(G,p0o),e(G,db),e(db,kne),e(kne,_0o),e(db,u0o),e(db,KD),e(KD,b0o),e(db,v0o),e(G,T0o),e(G,cb),e(cb,Rne),e(Rne,F0o),e(cb,C0o),e(cb,ZD),e(ZD,M0o),e(cb,E0o),e(G,y0o),e(G,fb),e(fb,Sne),e(Sne,w0o),e(fb,A0o),e(fb,eN),e(eN,L0o),e(fb,B0o),e(G,x0o),e(G,mb),e(mb,Pne),e(Pne,k0o),e(mb,R0o),e(mb,oN),e(oN,S0o),e(mb,P0o),e(G,$0o),e(G,gb),e(gb,$ne),e($ne,I0o),e(gb,D0o),e(gb,rN),e(rN,N0o),e(gb,j0o),e(G,q0o),e(G,hb),e(hb,Ine),e(Ine,G0o),e(hb,O0o),e(hb,tN),e(tN,X0o),e(hb,V0o),e(G,z0o),e(G,pb),e(pb,Dne),e(Dne,W0o),e(pb,Q0o),e(pb,aN),e(aN,H0o),e(pb,U0o),e(G,J0o),e(G,_b),e(_b,Nne),e(Nne,Y0o),e(_b,K0o),e(_b,nN),e(nN,Z0o),e(_b,eLo),e(G,oLo),e(G,ub),e(ub,jne),e(jne,rLo),e(ub,tLo),e(ub,sN),e(sN,aLo),e(ub,nLo),e(G,sLo),e(G,bb),e(bb,qne),e(qne,lLo),e(bb,iLo),e(bb,lN),e(lN,dLo),e(bb,cLo),e(G,fLo),e(G,vb),e(vb,Gne),e(Gne,mLo),e(vb,gLo),e(vb,iN),e(iN,hLo),e(vb,pLo),e(G,_Lo),e(G,Tb),e(Tb,One),e(One,uLo),e(Tb,bLo),e(Tb,dN),e(dN,vLo),e(Tb,TLo),e(G,FLo),e(G,Fb),e(Fb,Xne),e(Xne,CLo),e(Fb,MLo),e(Fb,cN),e(cN,ELo),e(Fb,yLo),e(G,wLo),e(G,Cb),e(Cb,Vne),e(Vne,ALo),e(Cb,LLo),e(Cb,fN),e(fN,BLo),e(Cb,xLo),e(G,kLo),e(G,Mb),e(Mb,zne),e(zne,RLo),e(Mb,SLo),e(Mb,mN),e(mN,PLo),e(Mb,$Lo),e(Xe,ILo),e(Xe,Eb),e(Eb,DLo),e(Eb,Wne),e(Wne,NLo),e(Eb,jLo),e(Eb,Qne),e(Qne,qLo),e(Xe,GLo),e(Xe,Hne),e(Hne,OLo),e(Xe,XLo),g(G5,Xe,null),b(c,rRe,u),b(c,ud,u),e(ud,yb),e(yb,Une),g(O5,Une,null),e(ud,VLo),e(ud,Jne),e(Jne,zLo),b(c,tRe,u),b(c,tr,u),g(X5,tr,null),e(tr,WLo),e(tr,bd),e(bd,QLo),e(bd,Yne),e(Yne,HLo),e(bd,ULo),e(bd,Kne),e(Kne,JLo),e(bd,YLo),e(tr,KLo),e(tr,V5),e(V5,ZLo),e(V5,Zne),e(Zne,e7o),e(V5,o7o),e(tr,r7o),e(tr,Yr),g(z5,Yr,null),e(Yr,t7o),e(Yr,ese),e(ese,a7o),e(Yr,n7o),e(Yr,vd),e(vd,s7o),e(vd,ose),e(ose,l7o),e(vd,i7o),e(vd,rse),e(rse,d7o),e(vd,c7o),e(Yr,f7o),e(Yr,tse),e(tse,m7o),e(Yr,g7o),g(W5,Yr,null),e(tr,h7o),e(tr,Ve),g(Q5,Ve,null),e(Ve,p7o),e(Ve,ase),e(ase,_7o),e(Ve,u7o),e(Ve,Ya),e(Ya,b7o),e(Ya,nse),e(nse,v7o),e(Ya,T7o),e(Ya,sse),e(sse,F7o),e(Ya,C7o),e(Ya,lse),e(lse,M7o),e(Ya,E7o),e(Ve,y7o),e(Ve,da),e(da,wb),e(wb,ise),e(ise,w7o),e(wb,A7o),e(wb,gN),e(gN,L7o),e(wb,B7o),e(da,x7o),e(da,Ab),e(Ab,dse),e(dse,k7o),e(Ab,R7o),e(Ab,hN),e(hN,S7o),e(Ab,P7o),e(da,$7o),e(da,Lb),e(Lb,cse),e(cse,I7o),e(Lb,D7o),e(Lb,pN),e(pN,N7o),e(Lb,j7o),e(da,q7o),e(da,Bb),e(Bb,fse),e(fse,G7o),e(Bb,O7o),e(Bb,_N),e(_N,X7o),e(Bb,V7o),e(da,z7o),e(da,xb),e(xb,mse),e(mse,W7o),e(xb,Q7o),e(xb,uN),e(uN,H7o),e(xb,U7o),e(Ve,J7o),e(Ve,kb),e(kb,Y7o),e(kb,gse),e(gse,K7o),e(kb,Z7o),e(kb,hse),e(hse,e8o),e(Ve,o8o),e(Ve,pse),e(pse,r8o),e(Ve,t8o),g(H5,Ve,null),b(c,aRe,u),b(c,Td,u),e(Td,Rb),e(Rb,_se),g(U5,_se,null),e(Td,a8o),e(Td,use),e(use,n8o),b(c,nRe,u),b(c,ar,u),g(J5,ar,null),e(ar,s8o),e(ar,Fd),e(Fd,l8o),e(Fd,bse),e(bse,i8o),e(Fd,d8o),e(Fd,vse),e(vse,c8o),e(Fd,f8o),e(ar,m8o),e(ar,Y5),e(Y5,g8o),e(Y5,Tse),e(Tse,h8o),e(Y5,p8o),e(ar,_8o),e(ar,Kr),g(K5,Kr,null),e(Kr,u8o),e(Kr,Fse),e(Fse,b8o),e(Kr,v8o),e(Kr,Cd),e(Cd,T8o),e(Cd,Cse),e(Cse,F8o),e(Cd,C8o),e(Cd,Mse),e(Mse,M8o),e(Cd,E8o),e(Kr,y8o),e(Kr,Ese),e(Ese,w8o),e(Kr,A8o),g(Z5,Kr,null),e(ar,L8o),e(ar,ze),g(ey,ze,null),e(ze,B8o),e(ze,yse),e(yse,x8o),e(ze,k8o),e(ze,Ka),e(Ka,R8o),e(Ka,wse),e(wse,S8o),e(Ka,P8o),e(Ka,Ase),e(Ase,$8o),e(Ka,I8o),e(Ka,Lse),e(Lse,D8o),e(Ka,N8o),e(ze,j8o),e(ze,j),e(j,Sb),e(Sb,Bse),e(Bse,q8o),e(Sb,G8o),e(Sb,bN),e(bN,O8o),e(Sb,X8o),e(j,V8o),e(j,Pb),e(Pb,xse),e(xse,z8o),e(Pb,W8o),e(Pb,vN),e(vN,Q8o),e(Pb,H8o),e(j,U8o),e(j,$b),e($b,kse),e(kse,J8o),e($b,Y8o),e($b,TN),e(TN,K8o),e($b,Z8o),e(j,eBo),e(j,Ib),e(Ib,Rse),e(Rse,oBo),e(Ib,rBo),e(Ib,FN),e(FN,tBo),e(Ib,aBo),e(j,nBo),e(j,Db),e(Db,Sse),e(Sse,sBo),e(Db,lBo),e(Db,CN),e(CN,iBo),e(Db,dBo),e(j,cBo),e(j,Nb),e(Nb,Pse),e(Pse,fBo),e(Nb,mBo),e(Nb,MN),e(MN,gBo),e(Nb,hBo),e(j,pBo),e(j,jb),e(jb,$se),e($se,_Bo),e(jb,uBo),e(jb,EN),e(EN,bBo),e(jb,vBo),e(j,TBo),e(j,qb),e(qb,Ise),e(Ise,FBo),e(qb,CBo),e(qb,yN),e(yN,MBo),e(qb,EBo),e(j,yBo),e(j,Gb),e(Gb,Dse),e(Dse,wBo),e(Gb,ABo),e(Gb,wN),e(wN,LBo),e(Gb,BBo),e(j,xBo),e(j,Ob),e(Ob,Nse),e(Nse,kBo),e(Ob,RBo),e(Ob,AN),e(AN,SBo),e(Ob,PBo),e(j,$Bo),e(j,Xb),e(Xb,jse),e(jse,IBo),e(Xb,DBo),e(Xb,LN),e(LN,NBo),e(Xb,jBo),e(j,qBo),e(j,Vb),e(Vb,qse),e(qse,GBo),e(Vb,OBo),e(Vb,BN),e(BN,XBo),e(Vb,VBo),e(j,zBo),e(j,zb),e(zb,Gse),e(Gse,WBo),e(zb,QBo),e(zb,xN),e(xN,HBo),e(zb,UBo),e(j,JBo),e(j,Wb),e(Wb,Ose),e(Ose,YBo),e(Wb,KBo),e(Wb,kN),e(kN,ZBo),e(Wb,exo),e(j,oxo),e(j,Qb),e(Qb,Xse),e(Xse,rxo),e(Qb,txo),e(Qb,RN),e(RN,axo),e(Qb,nxo),e(j,sxo),e(j,Hb),e(Hb,Vse),e(Vse,lxo),e(Hb,ixo),e(Hb,SN),e(SN,dxo),e(Hb,cxo),e(j,fxo),e(j,Ub),e(Ub,zse),e(zse,mxo),e(Ub,gxo),e(Ub,PN),e(PN,hxo),e(Ub,pxo),e(j,_xo),e(j,Jb),e(Jb,Wse),e(Wse,uxo),e(Jb,bxo),e(Jb,$N),e($N,vxo),e(Jb,Txo),e(j,Fxo),e(j,Yb),e(Yb,Qse),e(Qse,Cxo),e(Yb,Mxo),e(Yb,IN),e(IN,Exo),e(Yb,yxo),e(j,wxo),e(j,Kb),e(Kb,Hse),e(Hse,Axo),e(Kb,Lxo),e(Kb,DN),e(DN,Bxo),e(Kb,xxo),e(j,kxo),e(j,Zb),e(Zb,Use),e(Use,Rxo),e(Zb,Sxo),e(Zb,NN),e(NN,Pxo),e(Zb,$xo),e(j,Ixo),e(j,e3),e(e3,Jse),e(Jse,Dxo),e(e3,Nxo),e(e3,jN),e(jN,jxo),e(e3,qxo),e(j,Gxo),e(j,o3),e(o3,Yse),e(Yse,Oxo),e(o3,Xxo),e(o3,qN),e(qN,Vxo),e(o3,zxo),e(j,Wxo),e(j,r3),e(r3,Kse),e(Kse,Qxo),e(r3,Hxo),e(r3,GN),e(GN,Uxo),e(r3,Jxo),e(j,Yxo),e(j,t3),e(t3,Zse),e(Zse,Kxo),e(t3,Zxo),e(t3,ON),e(ON,eko),e(t3,oko),e(j,rko),e(j,a3),e(a3,ele),e(ele,tko),e(a3,ako),e(a3,XN),e(XN,nko),e(a3,sko),e(j,lko),e(j,n3),e(n3,ole),e(ole,iko),e(n3,dko),e(n3,VN),e(VN,cko),e(n3,fko),e(j,mko),e(j,s3),e(s3,rle),e(rle,gko),e(s3,hko),e(s3,zN),e(zN,pko),e(s3,_ko),e(j,uko),e(j,l3),e(l3,tle),e(tle,bko),e(l3,vko),e(l3,WN),e(WN,Tko),e(l3,Fko),e(j,Cko),e(j,i3),e(i3,ale),e(ale,Mko),e(i3,Eko),e(i3,QN),e(QN,yko),e(i3,wko),e(j,Ako),e(j,d3),e(d3,nle),e(nle,Lko),e(d3,Bko),e(d3,HN),e(HN,xko),e(d3,kko),e(j,Rko),e(j,c3),e(c3,sle),e(sle,Sko),e(c3,Pko),e(c3,UN),e(UN,$ko),e(c3,Iko),e(j,Dko),e(j,f3),e(f3,lle),e(lle,Nko),e(f3,jko),e(f3,JN),e(JN,qko),e(f3,Gko),e(ze,Oko),e(ze,m3),e(m3,Xko),e(m3,ile),e(ile,Vko),e(m3,zko),e(m3,dle),e(dle,Wko),e(ze,Qko),e(ze,cle),e(cle,Hko),e(ze,Uko),g(oy,ze,null),b(c,sRe,u),b(c,Md,u),e(Md,g3),e(g3,fle),g(ry,fle,null),e(Md,Jko),e(Md,mle),e(mle,Yko),b(c,lRe,u),b(c,nr,u),g(ty,nr,null),e(nr,Kko),e(nr,Ed),e(Ed,Zko),e(Ed,gle),e(gle,eRo),e(Ed,oRo),e(Ed,hle),e(hle,rRo),e(Ed,tRo),e(nr,aRo),e(nr,ay),e(ay,nRo),e(ay,ple),e(ple,sRo),e(ay,lRo),e(nr,iRo),e(nr,Zr),g(ny,Zr,null),e(Zr,dRo),e(Zr,_le),e(_le,cRo),e(Zr,fRo),e(Zr,yd),e(yd,mRo),e(yd,ule),e(ule,gRo),e(yd,hRo),e(yd,ble),e(ble,pRo),e(yd,_Ro),e(Zr,uRo),e(Zr,vle),e(vle,bRo),e(Zr,vRo),g(sy,Zr,null),e(nr,TRo),e(nr,We),g(ly,We,null),e(We,FRo),e(We,Tle),e(Tle,CRo),e(We,MRo),e(We,Za),e(Za,ERo),e(Za,Fle),e(Fle,yRo),e(Za,wRo),e(Za,Cle),e(Cle,ARo),e(Za,LRo),e(Za,Mle),e(Mle,BRo),e(Za,xRo),e(We,kRo),e(We,R),e(R,h3),e(h3,Ele),e(Ele,RRo),e(h3,SRo),e(h3,YN),e(YN,PRo),e(h3,$Ro),e(R,IRo),e(R,p3),e(p3,yle),e(yle,DRo),e(p3,NRo),e(p3,KN),e(KN,jRo),e(p3,qRo),e(R,GRo),e(R,_3),e(_3,wle),e(wle,ORo),e(_3,XRo),e(_3,ZN),e(ZN,VRo),e(_3,zRo),e(R,WRo),e(R,u3),e(u3,Ale),e(Ale,QRo),e(u3,HRo),e(u3,ej),e(ej,URo),e(u3,JRo),e(R,YRo),e(R,b3),e(b3,Lle),e(Lle,KRo),e(b3,ZRo),e(b3,oj),e(oj,eSo),e(b3,oSo),e(R,rSo),e(R,v3),e(v3,Ble),e(Ble,tSo),e(v3,aSo),e(v3,rj),e(rj,nSo),e(v3,sSo),e(R,lSo),e(R,T3),e(T3,xle),e(xle,iSo),e(T3,dSo),e(T3,tj),e(tj,cSo),e(T3,fSo),e(R,mSo),e(R,F3),e(F3,kle),e(kle,gSo),e(F3,hSo),e(F3,aj),e(aj,pSo),e(F3,_So),e(R,uSo),e(R,C3),e(C3,Rle),e(Rle,bSo),e(C3,vSo),e(C3,nj),e(nj,TSo),e(C3,FSo),e(R,CSo),e(R,M3),e(M3,Sle),e(Sle,MSo),e(M3,ESo),e(M3,sj),e(sj,ySo),e(M3,wSo),e(R,ASo),e(R,E3),e(E3,Ple),e(Ple,LSo),e(E3,BSo),e(E3,lj),e(lj,xSo),e(E3,kSo),e(R,RSo),e(R,y3),e(y3,$le),e($le,SSo),e(y3,PSo),e(y3,ij),e(ij,$So),e(y3,ISo),e(R,DSo),e(R,w3),e(w3,Ile),e(Ile,NSo),e(w3,jSo),e(w3,dj),e(dj,qSo),e(w3,GSo),e(R,OSo),e(R,A3),e(A3,Dle),e(Dle,XSo),e(A3,VSo),e(A3,cj),e(cj,zSo),e(A3,WSo),e(R,QSo),e(R,L3),e(L3,Nle),e(Nle,HSo),e(L3,USo),e(L3,fj),e(fj,JSo),e(L3,YSo),e(R,KSo),e(R,B3),e(B3,jle),e(jle,ZSo),e(B3,ePo),e(B3,mj),e(mj,oPo),e(B3,rPo),e(R,tPo),e(R,x3),e(x3,qle),e(qle,aPo),e(x3,nPo),e(x3,gj),e(gj,sPo),e(x3,lPo),e(R,iPo),e(R,k3),e(k3,Gle),e(Gle,dPo),e(k3,cPo),e(k3,hj),e(hj,fPo),e(k3,mPo),e(R,gPo),e(R,R3),e(R3,Ole),e(Ole,hPo),e(R3,pPo),e(R3,pj),e(pj,_Po),e(R3,uPo),e(R,bPo),e(R,S3),e(S3,Xle),e(Xle,vPo),e(S3,TPo),e(S3,_j),e(_j,FPo),e(S3,CPo),e(R,MPo),e(R,P3),e(P3,Vle),e(Vle,EPo),e(P3,yPo),e(P3,uj),e(uj,wPo),e(P3,APo),e(R,LPo),e(R,$3),e($3,zle),e(zle,BPo),e($3,xPo),e($3,bj),e(bj,kPo),e($3,RPo),e(R,SPo),e(R,I3),e(I3,Wle),e(Wle,PPo),e(I3,$Po),e(I3,vj),e(vj,IPo),e(I3,DPo),e(R,NPo),e(R,D3),e(D3,Qle),e(Qle,jPo),e(D3,qPo),e(D3,Tj),e(Tj,GPo),e(D3,OPo),e(R,XPo),e(R,N3),e(N3,Hle),e(Hle,VPo),e(N3,zPo),e(N3,Fj),e(Fj,WPo),e(N3,QPo),e(R,HPo),e(R,j3),e(j3,Ule),e(Ule,UPo),e(j3,JPo),e(j3,Cj),e(Cj,YPo),e(j3,KPo),e(R,ZPo),e(R,q3),e(q3,Jle),e(Jle,e$o),e(q3,o$o),e(q3,Mj),e(Mj,r$o),e(q3,t$o),e(R,a$o),e(R,G3),e(G3,Yle),e(Yle,n$o),e(G3,s$o),e(G3,Ej),e(Ej,l$o),e(G3,i$o),e(R,d$o),e(R,O3),e(O3,Kle),e(Kle,c$o),e(O3,f$o),e(O3,yj),e(yj,m$o),e(O3,g$o),e(R,h$o),e(R,X3),e(X3,Zle),e(Zle,p$o),e(X3,_$o),e(X3,wj),e(wj,u$o),e(X3,b$o),e(R,v$o),e(R,V3),e(V3,eie),e(eie,T$o),e(V3,F$o),e(V3,Aj),e(Aj,C$o),e(V3,M$o),e(R,E$o),e(R,z3),e(z3,oie),e(oie,y$o),e(z3,w$o),e(z3,Lj),e(Lj,A$o),e(z3,L$o),e(R,B$o),e(R,W3),e(W3,rie),e(rie,x$o),e(W3,k$o),e(W3,Bj),e(Bj,R$o),e(W3,S$o),e(R,P$o),e(R,Q3),e(Q3,tie),e(tie,$$o),e(Q3,I$o),e(Q3,xj),e(xj,D$o),e(Q3,N$o),e(R,j$o),e(R,H3),e(H3,aie),e(aie,q$o),e(H3,G$o),e(H3,kj),e(kj,O$o),e(H3,X$o),e(R,V$o),e(R,U3),e(U3,nie),e(nie,z$o),e(U3,W$o),e(U3,Rj),e(Rj,Q$o),e(U3,H$o),e(R,U$o),e(R,J3),e(J3,sie),e(sie,J$o),e(J3,Y$o),e(J3,Sj),e(Sj,K$o),e(J3,Z$o),e(R,eIo),e(R,Y3),e(Y3,lie),e(lie,oIo),e(Y3,rIo),e(Y3,Pj),e(Pj,tIo),e(Y3,aIo),e(R,nIo),e(R,K3),e(K3,iie),e(iie,sIo),e(K3,lIo),e(K3,$j),e($j,iIo),e(K3,dIo),e(We,cIo),e(We,Z3),e(Z3,fIo),e(Z3,die),e(die,mIo),e(Z3,gIo),e(Z3,cie),e(cie,hIo),e(We,pIo),e(We,fie),e(fie,_Io),e(We,uIo),g(iy,We,null),b(c,iRe,u),b(c,wd,u),e(wd,ev),e(ev,mie),g(dy,mie,null),e(wd,bIo),e(wd,gie),e(gie,vIo),b(c,dRe,u),b(c,sr,u),g(cy,sr,null),e(sr,TIo),e(sr,Ad),e(Ad,FIo),e(Ad,hie),e(hie,CIo),e(Ad,MIo),e(Ad,pie),e(pie,EIo),e(Ad,yIo),e(sr,wIo),e(sr,fy),e(fy,AIo),e(fy,_ie),e(_ie,LIo),e(fy,BIo),e(sr,xIo),e(sr,et),g(my,et,null),e(et,kIo),e(et,uie),e(uie,RIo),e(et,SIo),e(et,Ld),e(Ld,PIo),e(Ld,bie),e(bie,$Io),e(Ld,IIo),e(Ld,vie),e(vie,DIo),e(Ld,NIo),e(et,jIo),e(et,Tie),e(Tie,qIo),e(et,GIo),g(gy,et,null),e(sr,OIo),e(sr,Qe),g(hy,Qe,null),e(Qe,XIo),e(Qe,Fie),e(Fie,VIo),e(Qe,zIo),e(Qe,en),e(en,WIo),e(en,Cie),e(Cie,QIo),e(en,HIo),e(en,Mie),e(Mie,UIo),e(en,JIo),e(en,Eie),e(Eie,YIo),e(en,KIo),e(Qe,ZIo),e(Qe,yie),e(yie,ov),e(ov,wie),e(wie,eDo),e(ov,oDo),e(ov,Ij),e(Ij,rDo),e(ov,tDo),e(Qe,aDo),e(Qe,rv),e(rv,nDo),e(rv,Aie),e(Aie,sDo),e(rv,lDo),e(rv,Lie),e(Lie,iDo),e(Qe,dDo),e(Qe,Bie),e(Bie,cDo),e(Qe,fDo),g(py,Qe,null),b(c,cRe,u),b(c,Bd,u),e(Bd,tv),e(tv,xie),g(_y,xie,null),e(Bd,mDo),e(Bd,kie),e(kie,gDo),b(c,fRe,u),b(c,lr,u),g(uy,lr,null),e(lr,hDo),e(lr,xd),e(xd,pDo),e(xd,Rie),e(Rie,_Do),e(xd,uDo),e(xd,Sie),e(Sie,bDo),e(xd,vDo),e(lr,TDo),e(lr,by),e(by,FDo),e(by,Pie),e(Pie,CDo),e(by,MDo),e(lr,EDo),e(lr,ot),g(vy,ot,null),e(ot,yDo),e(ot,$ie),e($ie,wDo),e(ot,ADo),e(ot,kd),e(kd,LDo),e(kd,Iie),e(Iie,BDo),e(kd,xDo),e(kd,Die),e(Die,kDo),e(kd,RDo),e(ot,SDo),e(ot,Nie),e(Nie,PDo),e(ot,$Do),g(Ty,ot,null),e(lr,IDo),e(lr,He),g(Fy,He,null),e(He,DDo),e(He,jie),e(jie,NDo),e(He,jDo),e(He,on),e(on,qDo),e(on,qie),e(qie,GDo),e(on,ODo),e(on,Gie),e(Gie,XDo),e(on,VDo),e(on,Oie),e(Oie,zDo),e(on,WDo),e(He,QDo),e(He,ge),e(ge,av),e(av,Xie),e(Xie,HDo),e(av,UDo),e(av,Dj),e(Dj,JDo),e(av,YDo),e(ge,KDo),e(ge,nv),e(nv,Vie),e(Vie,ZDo),e(nv,eNo),e(nv,Nj),e(Nj,oNo),e(nv,rNo),e(ge,tNo),e(ge,qs),e(qs,zie),e(zie,aNo),e(qs,nNo),e(qs,jj),e(jj,sNo),e(qs,lNo),e(qs,qj),e(qj,iNo),e(qs,dNo),e(ge,cNo),e(ge,sv),e(sv,Wie),e(Wie,fNo),e(sv,mNo),e(sv,Gj),e(Gj,gNo),e(sv,hNo),e(ge,pNo),e(ge,ma),e(ma,Qie),e(Qie,_No),e(ma,uNo),e(ma,Oj),e(Oj,bNo),e(ma,vNo),e(ma,Xj),e(Xj,TNo),e(ma,FNo),e(ma,Vj),e(Vj,CNo),e(ma,MNo),e(ge,ENo),e(ge,lv),e(lv,Hie),e(Hie,yNo),e(lv,wNo),e(lv,zj),e(zj,ANo),e(lv,LNo),e(ge,BNo),e(ge,iv),e(iv,Uie),e(Uie,xNo),e(iv,kNo),e(iv,Wj),e(Wj,RNo),e(iv,SNo),e(ge,PNo),e(ge,dv),e(dv,Jie),e(Jie,$No),e(dv,INo),e(dv,Qj),e(Qj,DNo),e(dv,NNo),e(ge,jNo),e(ge,cv),e(cv,Yie),e(Yie,qNo),e(cv,GNo),e(cv,Hj),e(Hj,ONo),e(cv,XNo),e(ge,VNo),e(ge,fv),e(fv,Kie),e(Kie,zNo),e(fv,WNo),e(fv,Uj),e(Uj,QNo),e(fv,HNo),e(ge,UNo),e(ge,mv),e(mv,Zie),e(Zie,JNo),e(mv,YNo),e(mv,Jj),e(Jj,KNo),e(mv,ZNo),e(He,ejo),e(He,gv),e(gv,ojo),e(gv,ede),e(ede,rjo),e(gv,tjo),e(gv,ode),e(ode,ajo),e(He,njo),e(He,rde),e(rde,sjo),e(He,ljo),g(Cy,He,null),b(c,mRe,u),b(c,Rd,u),e(Rd,hv),e(hv,tde),g(My,tde,null),e(Rd,ijo),e(Rd,ade),e(ade,djo),b(c,gRe,u),b(c,ir,u),g(Ey,ir,null),e(ir,cjo),e(ir,Sd),e(Sd,fjo),e(Sd,nde),e(nde,mjo),e(Sd,gjo),e(Sd,sde),e(sde,hjo),e(Sd,pjo),e(ir,_jo),e(ir,yy),e(yy,ujo),e(yy,lde),e(lde,bjo),e(yy,vjo),e(ir,Tjo),e(ir,rt),g(wy,rt,null),e(rt,Fjo),e(rt,ide),e(ide,Cjo),e(rt,Mjo),e(rt,Pd),e(Pd,Ejo),e(Pd,dde),e(dde,yjo),e(Pd,wjo),e(Pd,cde),e(cde,Ajo),e(Pd,Ljo),e(rt,Bjo),e(rt,fde),e(fde,xjo),e(rt,kjo),g(Ay,rt,null),e(ir,Rjo),e(ir,Ue),g(Ly,Ue,null),e(Ue,Sjo),e(Ue,mde),e(mde,Pjo),e(Ue,$jo),e(Ue,rn),e(rn,Ijo),e(rn,gde),e(gde,Djo),e(rn,Njo),e(rn,hde),e(hde,jjo),e(rn,qjo),e(rn,pde),e(pde,Gjo),e(rn,Ojo),e(Ue,Xjo),e(Ue,_de),e(_de,pv),e(pv,ude),e(ude,Vjo),e(pv,zjo),e(pv,Yj),e(Yj,Wjo),e(pv,Qjo),e(Ue,Hjo),e(Ue,_v),e(_v,Ujo),e(_v,bde),e(bde,Jjo),e(_v,Yjo),e(_v,vde),e(vde,Kjo),e(Ue,Zjo),e(Ue,Tde),e(Tde,eqo),e(Ue,oqo),g(By,Ue,null),b(c,hRe,u),b(c,$d,u),e($d,uv),e(uv,Fde),g(xy,Fde,null),e($d,rqo),e($d,Cde),e(Cde,tqo),b(c,pRe,u),b(c,dr,u),g(ky,dr,null),e(dr,aqo),e(dr,Id),e(Id,nqo),e(Id,Mde),e(Mde,sqo),e(Id,lqo),e(Id,Ede),e(Ede,iqo),e(Id,dqo),e(dr,cqo),e(dr,Ry),e(Ry,fqo),e(Ry,yde),e(yde,mqo),e(Ry,gqo),e(dr,hqo),e(dr,tt),g(Sy,tt,null),e(tt,pqo),e(tt,wde),e(wde,_qo),e(tt,uqo),e(tt,Dd),e(Dd,bqo),e(Dd,Ade),e(Ade,vqo),e(Dd,Tqo),e(Dd,Lde),e(Lde,Fqo),e(Dd,Cqo),e(tt,Mqo),e(tt,Bde),e(Bde,Eqo),e(tt,yqo),g(Py,tt,null),e(dr,wqo),e(dr,Je),g($y,Je,null),e(Je,Aqo),e(Je,xde),e(xde,Lqo),e(Je,Bqo),e(Je,tn),e(tn,xqo),e(tn,kde),e(kde,kqo),e(tn,Rqo),e(tn,Rde),e(Rde,Sqo),e(tn,Pqo),e(tn,Sde),e(Sde,$qo),e(tn,Iqo),e(Je,Dqo),e(Je,ke),e(ke,bv),e(bv,Pde),e(Pde,Nqo),e(bv,jqo),e(bv,Kj),e(Kj,qqo),e(bv,Gqo),e(ke,Oqo),e(ke,vv),e(vv,$de),e($de,Xqo),e(vv,Vqo),e(vv,Zj),e(Zj,zqo),e(vv,Wqo),e(ke,Qqo),e(ke,Tv),e(Tv,Ide),e(Ide,Hqo),e(Tv,Uqo),e(Tv,eq),e(eq,Jqo),e(Tv,Yqo),e(ke,Kqo),e(ke,Fv),e(Fv,Dde),e(Dde,Zqo),e(Fv,eGo),e(Fv,oq),e(oq,oGo),e(Fv,rGo),e(ke,tGo),e(ke,Cv),e(Cv,Nde),e(Nde,aGo),e(Cv,nGo),e(Cv,rq),e(rq,sGo),e(Cv,lGo),e(ke,iGo),e(ke,Mv),e(Mv,jde),e(jde,dGo),e(Mv,cGo),e(Mv,tq),e(tq,fGo),e(Mv,mGo),e(ke,gGo),e(ke,Ev),e(Ev,qde),e(qde,hGo),e(Ev,pGo),e(Ev,aq),e(aq,_Go),e(Ev,uGo),e(ke,bGo),e(ke,yv),e(yv,Gde),e(Gde,vGo),e(yv,TGo),e(yv,nq),e(nq,FGo),e(yv,CGo),e(Je,MGo),e(Je,wv),e(wv,EGo),e(wv,Ode),e(Ode,yGo),e(wv,wGo),e(wv,Xde),e(Xde,AGo),e(Je,LGo),e(Je,Vde),e(Vde,BGo),e(Je,xGo),g(Iy,Je,null),b(c,_Re,u),b(c,Nd,u),e(Nd,Av),e(Av,zde),g(Dy,zde,null),e(Nd,kGo),e(Nd,Wde),e(Wde,RGo),b(c,uRe,u),b(c,cr,u),g(Ny,cr,null),e(cr,SGo),e(cr,jd),e(jd,PGo),e(jd,Qde),e(Qde,$Go),e(jd,IGo),e(jd,Hde),e(Hde,DGo),e(jd,NGo),e(cr,jGo),e(cr,jy),e(jy,qGo),e(jy,Ude),e(Ude,GGo),e(jy,OGo),e(cr,XGo),e(cr,at),g(qy,at,null),e(at,VGo),e(at,Jde),e(Jde,zGo),e(at,WGo),e(at,qd),e(qd,QGo),e(qd,Yde),e(Yde,HGo),e(qd,UGo),e(qd,Kde),e(Kde,JGo),e(qd,YGo),e(at,KGo),e(at,Zde),e(Zde,ZGo),e(at,eOo),g(Gy,at,null),e(cr,oOo),e(cr,Ye),g(Oy,Ye,null),e(Ye,rOo),e(Ye,ece),e(ece,tOo),e(Ye,aOo),e(Ye,an),e(an,nOo),e(an,oce),e(oce,sOo),e(an,lOo),e(an,rce),e(rce,iOo),e(an,dOo),e(an,tce),e(tce,cOo),e(an,fOo),e(Ye,mOo),e(Ye,nn),e(nn,Lv),e(Lv,ace),e(ace,gOo),e(Lv,hOo),e(Lv,sq),e(sq,pOo),e(Lv,_Oo),e(nn,uOo),e(nn,Bv),e(Bv,nce),e(nce,bOo),e(Bv,vOo),e(Bv,lq),e(lq,TOo),e(Bv,FOo),e(nn,COo),e(nn,xv),e(xv,sce),e(sce,MOo),e(xv,EOo),e(xv,iq),e(iq,yOo),e(xv,wOo),e(nn,AOo),e(nn,kv),e(kv,lce),e(lce,LOo),e(kv,BOo),e(kv,dq),e(dq,xOo),e(kv,kOo),e(Ye,ROo),e(Ye,Rv),e(Rv,SOo),e(Rv,ice),e(ice,POo),e(Rv,$Oo),e(Rv,dce),e(dce,IOo),e(Ye,DOo),e(Ye,cce),e(cce,NOo),e(Ye,jOo),g(Xy,Ye,null),b(c,bRe,u),b(c,Gd,u),e(Gd,Sv),e(Sv,fce),g(Vy,fce,null),e(Gd,qOo),e(Gd,mce),e(mce,GOo),b(c,vRe,u),b(c,fr,u),g(zy,fr,null),e(fr,OOo),e(fr,Od),e(Od,XOo),e(Od,gce),e(gce,VOo),e(Od,zOo),e(Od,hce),e(hce,WOo),e(Od,QOo),e(fr,HOo),e(fr,Wy),e(Wy,UOo),e(Wy,pce),e(pce,JOo),e(Wy,YOo),e(fr,KOo),e(fr,nt),g(Qy,nt,null),e(nt,ZOo),e(nt,_ce),e(_ce,eXo),e(nt,oXo),e(nt,Xd),e(Xd,rXo),e(Xd,uce),e(uce,tXo),e(Xd,aXo),e(Xd,bce),e(bce,nXo),e(Xd,sXo),e(nt,lXo),e(nt,vce),e(vce,iXo),e(nt,dXo),g(Hy,nt,null),e(fr,cXo),e(fr,Ke),g(Uy,Ke,null),e(Ke,fXo),e(Ke,Tce),e(Tce,mXo),e(Ke,gXo),e(Ke,sn),e(sn,hXo),e(sn,Fce),e(Fce,pXo),e(sn,_Xo),e(sn,Cce),e(Cce,uXo),e(sn,bXo),e(sn,Mce),e(Mce,vXo),e(sn,TXo),e(Ke,FXo),e(Ke,Re),e(Re,Pv),e(Pv,Ece),e(Ece,CXo),e(Pv,MXo),e(Pv,cq),e(cq,EXo),e(Pv,yXo),e(Re,wXo),e(Re,$v),e($v,yce),e(yce,AXo),e($v,LXo),e($v,fq),e(fq,BXo),e($v,xXo),e(Re,kXo),e(Re,Iv),e(Iv,wce),e(wce,RXo),e(Iv,SXo),e(Iv,mq),e(mq,PXo),e(Iv,$Xo),e(Re,IXo),e(Re,Dv),e(Dv,Ace),e(Ace,DXo),e(Dv,NXo),e(Dv,gq),e(gq,jXo),e(Dv,qXo),e(Re,GXo),e(Re,Nv),e(Nv,Lce),e(Lce,OXo),e(Nv,XXo),e(Nv,hq),e(hq,VXo),e(Nv,zXo),e(Re,WXo),e(Re,jv),e(jv,Bce),e(Bce,QXo),e(jv,HXo),e(jv,pq),e(pq,UXo),e(jv,JXo),e(Re,YXo),e(Re,qv),e(qv,xce),e(xce,KXo),e(qv,ZXo),e(qv,_q),e(_q,eVo),e(qv,oVo),e(Re,rVo),e(Re,Gv),e(Gv,kce),e(kce,tVo),e(Gv,aVo),e(Gv,uq),e(uq,nVo),e(Gv,sVo),e(Ke,lVo),e(Ke,Ov),e(Ov,iVo),e(Ov,Rce),e(Rce,dVo),e(Ov,cVo),e(Ov,Sce),e(Sce,fVo),e(Ke,mVo),e(Ke,Pce),e(Pce,gVo),e(Ke,hVo),g(Jy,Ke,null),b(c,TRe,u),b(c,Vd,u),e(Vd,Xv),e(Xv,$ce),g(Yy,$ce,null),e(Vd,pVo),e(Vd,Ice),e(Ice,_Vo),b(c,FRe,u),b(c,mr,u),g(Ky,mr,null),e(mr,uVo),e(mr,zd),e(zd,bVo),e(zd,Dce),e(Dce,vVo),e(zd,TVo),e(zd,Nce),e(Nce,FVo),e(zd,CVo),e(mr,MVo),e(mr,Zy),e(Zy,EVo),e(Zy,jce),e(jce,yVo),e(Zy,wVo),e(mr,AVo),e(mr,st),g(ew,st,null),e(st,LVo),e(st,qce),e(qce,BVo),e(st,xVo),e(st,Wd),e(Wd,kVo),e(Wd,Gce),e(Gce,RVo),e(Wd,SVo),e(Wd,Oce),e(Oce,PVo),e(Wd,$Vo),e(st,IVo),e(st,Xce),e(Xce,DVo),e(st,NVo),g(ow,st,null),e(mr,jVo),e(mr,Ze),g(rw,Ze,null),e(Ze,qVo),e(Ze,Vce),e(Vce,GVo),e(Ze,OVo),e(Ze,ln),e(ln,XVo),e(ln,zce),e(zce,VVo),e(ln,zVo),e(ln,Wce),e(Wce,WVo),e(ln,QVo),e(ln,Qce),e(Qce,HVo),e(ln,UVo),e(Ze,JVo),e(Ze,tw),e(tw,Vv),e(Vv,Hce),e(Hce,YVo),e(Vv,KVo),e(Vv,bq),e(bq,ZVo),e(Vv,ezo),e(tw,ozo),e(tw,zv),e(zv,Uce),e(Uce,rzo),e(zv,tzo),e(zv,vq),e(vq,azo),e(zv,nzo),e(Ze,szo),e(Ze,Wv),e(Wv,lzo),e(Wv,Jce),e(Jce,izo),e(Wv,dzo),e(Wv,Yce),e(Yce,czo),e(Ze,fzo),e(Ze,Kce),e(Kce,mzo),e(Ze,gzo),g(aw,Ze,null),b(c,CRe,u),b(c,Qd,u),e(Qd,Qv),e(Qv,Zce),g(nw,Zce,null),e(Qd,hzo),e(Qd,efe),e(efe,pzo),b(c,MRe,u),b(c,gr,u),g(sw,gr,null),e(gr,_zo),e(gr,Hd),e(Hd,uzo),e(Hd,ofe),e(ofe,bzo),e(Hd,vzo),e(Hd,rfe),e(rfe,Tzo),e(Hd,Fzo),e(gr,Czo),e(gr,lw),e(lw,Mzo),e(lw,tfe),e(tfe,Ezo),e(lw,yzo),e(gr,wzo),e(gr,lt),g(iw,lt,null),e(lt,Azo),e(lt,afe),e(afe,Lzo),e(lt,Bzo),e(lt,Ud),e(Ud,xzo),e(Ud,nfe),e(nfe,kzo),e(Ud,Rzo),e(Ud,sfe),e(sfe,Szo),e(Ud,Pzo),e(lt,$zo),e(lt,lfe),e(lfe,Izo),e(lt,Dzo),g(dw,lt,null),e(gr,Nzo),e(gr,eo),g(cw,eo,null),e(eo,jzo),e(eo,ife),e(ife,qzo),e(eo,Gzo),e(eo,dn),e(dn,Ozo),e(dn,dfe),e(dfe,Xzo),e(dn,Vzo),e(dn,cfe),e(cfe,zzo),e(dn,Wzo),e(dn,ffe),e(ffe,Qzo),e(dn,Hzo),e(eo,Uzo),e(eo,cn),e(cn,Hv),e(Hv,mfe),e(mfe,Jzo),e(Hv,Yzo),e(Hv,Tq),e(Tq,Kzo),e(Hv,Zzo),e(cn,eWo),e(cn,Uv),e(Uv,gfe),e(gfe,oWo),e(Uv,rWo),e(Uv,Fq),e(Fq,tWo),e(Uv,aWo),e(cn,nWo),e(cn,Jv),e(Jv,hfe),e(hfe,sWo),e(Jv,lWo),e(Jv,Cq),e(Cq,iWo),e(Jv,dWo),e(cn,cWo),e(cn,Yv),e(Yv,pfe),e(pfe,fWo),e(Yv,mWo),e(Yv,Mq),e(Mq,gWo),e(Yv,hWo),e(eo,pWo),e(eo,Kv),e(Kv,_Wo),e(Kv,_fe),e(_fe,uWo),e(Kv,bWo),e(Kv,ufe),e(ufe,vWo),e(eo,TWo),e(eo,bfe),e(bfe,FWo),e(eo,CWo),g(fw,eo,null),b(c,ERe,u),b(c,Jd,u),e(Jd,Zv),e(Zv,vfe),g(mw,vfe,null),e(Jd,MWo),e(Jd,Tfe),e(Tfe,EWo),b(c,yRe,u),b(c,hr,u),g(gw,hr,null),e(hr,yWo),e(hr,Yd),e(Yd,wWo),e(Yd,Ffe),e(Ffe,AWo),e(Yd,LWo),e(Yd,Cfe),e(Cfe,BWo),e(Yd,xWo),e(hr,kWo),e(hr,hw),e(hw,RWo),e(hw,Mfe),e(Mfe,SWo),e(hw,PWo),e(hr,$Wo),e(hr,it),g(pw,it,null),e(it,IWo),e(it,Efe),e(Efe,DWo),e(it,NWo),e(it,Kd),e(Kd,jWo),e(Kd,yfe),e(yfe,qWo),e(Kd,GWo),e(Kd,wfe),e(wfe,OWo),e(Kd,XWo),e(it,VWo),e(it,Afe),e(Afe,zWo),e(it,WWo),g(_w,it,null),e(hr,QWo),e(hr,oo),g(uw,oo,null),e(oo,HWo),e(oo,Lfe),e(Lfe,UWo),e(oo,JWo),e(oo,fn),e(fn,YWo),e(fn,Bfe),e(Bfe,KWo),e(fn,ZWo),e(fn,xfe),e(xfe,eQo),e(fn,oQo),e(fn,kfe),e(kfe,rQo),e(fn,tQo),e(oo,aQo),e(oo,Zd),e(Zd,e6),e(e6,Rfe),e(Rfe,nQo),e(e6,sQo),e(e6,Eq),e(Eq,lQo),e(e6,iQo),e(Zd,dQo),e(Zd,o6),e(o6,Sfe),e(Sfe,cQo),e(o6,fQo),e(o6,yq),e(yq,mQo),e(o6,gQo),e(Zd,hQo),e(Zd,r6),e(r6,Pfe),e(Pfe,pQo),e(r6,_Qo),e(r6,wq),e(wq,uQo),e(r6,bQo),e(oo,vQo),e(oo,t6),e(t6,TQo),e(t6,$fe),e($fe,FQo),e(t6,CQo),e(t6,Ife),e(Ife,MQo),e(oo,EQo),e(oo,Dfe),e(Dfe,yQo),e(oo,wQo),g(bw,oo,null),b(c,wRe,u),b(c,ec,u),e(ec,a6),e(a6,Nfe),g(vw,Nfe,null),e(ec,AQo),e(ec,jfe),e(jfe,LQo),b(c,ARe,u),b(c,pr,u),g(Tw,pr,null),e(pr,BQo),e(pr,oc),e(oc,xQo),e(oc,qfe),e(qfe,kQo),e(oc,RQo),e(oc,Gfe),e(Gfe,SQo),e(oc,PQo),e(pr,$Qo),e(pr,Fw),e(Fw,IQo),e(Fw,Ofe),e(Ofe,DQo),e(Fw,NQo),e(pr,jQo),e(pr,dt),g(Cw,dt,null),e(dt,qQo),e(dt,Xfe),e(Xfe,GQo),e(dt,OQo),e(dt,rc),e(rc,XQo),e(rc,Vfe),e(Vfe,VQo),e(rc,zQo),e(rc,zfe),e(zfe,WQo),e(rc,QQo),e(dt,HQo),e(dt,Wfe),e(Wfe,UQo),e(dt,JQo),g(Mw,dt,null),e(pr,YQo),e(pr,ro),g(Ew,ro,null),e(ro,KQo),e(ro,Qfe),e(Qfe,ZQo),e(ro,eHo),e(ro,mn),e(mn,oHo),e(mn,Hfe),e(Hfe,rHo),e(mn,tHo),e(mn,Ufe),e(Ufe,aHo),e(mn,nHo),e(mn,Jfe),e(Jfe,sHo),e(mn,lHo),e(ro,iHo),e(ro,Yfe),e(Yfe,n6),e(n6,Kfe),e(Kfe,dHo),e(n6,cHo),e(n6,Aq),e(Aq,fHo),e(n6,mHo),e(ro,gHo),e(ro,s6),e(s6,hHo),e(s6,Zfe),e(Zfe,pHo),e(s6,_Ho),e(s6,eme),e(eme,uHo),e(ro,bHo),e(ro,ome),e(ome,vHo),e(ro,THo),g(yw,ro,null),b(c,LRe,u),b(c,tc,u),e(tc,l6),e(l6,rme),g(ww,rme,null),e(tc,FHo),e(tc,tme),e(tme,CHo),b(c,BRe,u),b(c,_r,u),g(Aw,_r,null),e(_r,MHo),e(_r,ac),e(ac,EHo),e(ac,ame),e(ame,yHo),e(ac,wHo),e(ac,nme),e(nme,AHo),e(ac,LHo),e(_r,BHo),e(_r,Lw),e(Lw,xHo),e(Lw,sme),e(sme,kHo),e(Lw,RHo),e(_r,SHo),e(_r,ct),g(Bw,ct,null),e(ct,PHo),e(ct,lme),e(lme,$Ho),e(ct,IHo),e(ct,nc),e(nc,DHo),e(nc,ime),e(ime,NHo),e(nc,jHo),e(nc,dme),e(dme,qHo),e(nc,GHo),e(ct,OHo),e(ct,cme),e(cme,XHo),e(ct,VHo),g(xw,ct,null),e(_r,zHo),e(_r,to),g(kw,to,null),e(to,WHo),e(to,fme),e(fme,QHo),e(to,HHo),e(to,gn),e(gn,UHo),e(gn,mme),e(mme,JHo),e(gn,YHo),e(gn,gme),e(gme,KHo),e(gn,ZHo),e(gn,hme),e(hme,eUo),e(gn,oUo),e(to,rUo),e(to,pme),e(pme,i6),e(i6,_me),e(_me,tUo),e(i6,aUo),e(i6,Lq),e(Lq,nUo),e(i6,sUo),e(to,lUo),e(to,d6),e(d6,iUo),e(d6,ume),e(ume,dUo),e(d6,cUo),e(d6,bme),e(bme,fUo),e(to,mUo),e(to,vme),e(vme,gUo),e(to,hUo),g(Rw,to,null),b(c,xRe,u),b(c,sc,u),e(sc,c6),e(c6,Tme),g(Sw,Tme,null),e(sc,pUo),e(sc,Fme),e(Fme,_Uo),b(c,kRe,u),b(c,ur,u),g(Pw,ur,null),e(ur,uUo),e(ur,lc),e(lc,bUo),e(lc,Cme),e(Cme,vUo),e(lc,TUo),e(lc,Mme),e(Mme,FUo),e(lc,CUo),e(ur,MUo),e(ur,$w),e($w,EUo),e($w,Eme),e(Eme,yUo),e($w,wUo),e(ur,AUo),e(ur,ft),g(Iw,ft,null),e(ft,LUo),e(ft,yme),e(yme,BUo),e(ft,xUo),e(ft,ic),e(ic,kUo),e(ic,wme),e(wme,RUo),e(ic,SUo),e(ic,Ame),e(Ame,PUo),e(ic,$Uo),e(ft,IUo),e(ft,Lme),e(Lme,DUo),e(ft,NUo),g(Dw,ft,null),e(ur,jUo),e(ur,ao),g(Nw,ao,null),e(ao,qUo),e(ao,Bme),e(Bme,GUo),e(ao,OUo),e(ao,hn),e(hn,XUo),e(hn,xme),e(xme,VUo),e(hn,zUo),e(hn,kme),e(kme,WUo),e(hn,QUo),e(hn,Rme),e(Rme,HUo),e(hn,UUo),e(ao,JUo),e(ao,dc),e(dc,f6),e(f6,Sme),e(Sme,YUo),e(f6,KUo),e(f6,Bq),e(Bq,ZUo),e(f6,eJo),e(dc,oJo),e(dc,m6),e(m6,Pme),e(Pme,rJo),e(m6,tJo),e(m6,xq),e(xq,aJo),e(m6,nJo),e(dc,sJo),e(dc,g6),e(g6,$me),e($me,lJo),e(g6,iJo),e(g6,kq),e(kq,dJo),e(g6,cJo),e(ao,fJo),e(ao,h6),e(h6,mJo),e(h6,Ime),e(Ime,gJo),e(h6,hJo),e(h6,Dme),e(Dme,pJo),e(ao,_Jo),e(ao,Nme),e(Nme,uJo),e(ao,bJo),g(jw,ao,null),b(c,RRe,u),b(c,cc,u),e(cc,p6),e(p6,jme),g(qw,jme,null),e(cc,vJo),e(cc,qme),e(qme,TJo),b(c,SRe,u),b(c,br,u),g(Gw,br,null),e(br,FJo),e(br,fc),e(fc,CJo),e(fc,Gme),e(Gme,MJo),e(fc,EJo),e(fc,Ome),e(Ome,yJo),e(fc,wJo),e(br,AJo),e(br,Ow),e(Ow,LJo),e(Ow,Xme),e(Xme,BJo),e(Ow,xJo),e(br,kJo),e(br,mt),g(Xw,mt,null),e(mt,RJo),e(mt,Vme),e(Vme,SJo),e(mt,PJo),e(mt,mc),e(mc,$Jo),e(mc,zme),e(zme,IJo),e(mc,DJo),e(mc,Wme),e(Wme,NJo),e(mc,jJo),e(mt,qJo),e(mt,Qme),e(Qme,GJo),e(mt,OJo),g(Vw,mt,null),e(br,XJo),e(br,no),g(zw,no,null),e(no,VJo),e(no,Hme),e(Hme,zJo),e(no,WJo),e(no,pn),e(pn,QJo),e(pn,Ume),e(Ume,HJo),e(pn,UJo),e(pn,Jme),e(Jme,JJo),e(pn,YJo),e(pn,Yme),e(Yme,KJo),e(pn,ZJo),e(no,eYo),e(no,Kme),e(Kme,_6),e(_6,Zme),e(Zme,oYo),e(_6,rYo),e(_6,Rq),e(Rq,tYo),e(_6,aYo),e(no,nYo),e(no,u6),e(u6,sYo),e(u6,ege),e(ege,lYo),e(u6,iYo),e(u6,oge),e(oge,dYo),e(no,cYo),e(no,rge),e(rge,fYo),e(no,mYo),g(Ww,no,null),b(c,PRe,u),b(c,gc,u),e(gc,b6),e(b6,tge),g(Qw,tge,null),e(gc,gYo),e(gc,age),e(age,hYo),b(c,$Re,u),b(c,vr,u),g(Hw,vr,null),e(vr,pYo),e(vr,hc),e(hc,_Yo),e(hc,nge),e(nge,uYo),e(hc,bYo),e(hc,sge),e(sge,vYo),e(hc,TYo),e(vr,FYo),e(vr,Uw),e(Uw,CYo),e(Uw,lge),e(lge,MYo),e(Uw,EYo),e(vr,yYo),e(vr,gt),g(Jw,gt,null),e(gt,wYo),e(gt,ige),e(ige,AYo),e(gt,LYo),e(gt,pc),e(pc,BYo),e(pc,dge),e(dge,xYo),e(pc,kYo),e(pc,cge),e(cge,RYo),e(pc,SYo),e(gt,PYo),e(gt,fge),e(fge,$Yo),e(gt,IYo),g(Yw,gt,null),e(vr,DYo),e(vr,ho),g(Kw,ho,null),e(ho,NYo),e(ho,mge),e(mge,jYo),e(ho,qYo),e(ho,_n),e(_n,GYo),e(_n,gge),e(gge,OYo),e(_n,XYo),e(_n,hge),e(hge,VYo),e(_n,zYo),e(_n,pge),e(pge,WYo),e(_n,QYo),e(ho,HYo),e(ho,B),e(B,v6),e(v6,_ge),e(_ge,UYo),e(v6,JYo),e(v6,Sq),e(Sq,YYo),e(v6,KYo),e(B,ZYo),e(B,T6),e(T6,uge),e(uge,eKo),e(T6,oKo),e(T6,Pq),e(Pq,rKo),e(T6,tKo),e(B,aKo),e(B,F6),e(F6,bge),e(bge,nKo),e(F6,sKo),e(F6,$q),e($q,lKo),e(F6,iKo),e(B,dKo),e(B,C6),e(C6,vge),e(vge,cKo),e(C6,fKo),e(C6,Iq),e(Iq,mKo),e(C6,gKo),e(B,hKo),e(B,M6),e(M6,Tge),e(Tge,pKo),e(M6,_Ko),e(M6,Dq),e(Dq,uKo),e(M6,bKo),e(B,vKo),e(B,E6),e(E6,Fge),e(Fge,TKo),e(E6,FKo),e(E6,Nq),e(Nq,CKo),e(E6,MKo),e(B,EKo),e(B,y6),e(y6,Cge),e(Cge,yKo),e(y6,wKo),e(y6,jq),e(jq,AKo),e(y6,LKo),e(B,BKo),e(B,w6),e(w6,Mge),e(Mge,xKo),e(w6,kKo),e(w6,qq),e(qq,RKo),e(w6,SKo),e(B,PKo),e(B,A6),e(A6,Ege),e(Ege,$Ko),e(A6,IKo),e(A6,Gq),e(Gq,DKo),e(A6,NKo),e(B,jKo),e(B,L6),e(L6,yge),e(yge,qKo),e(L6,GKo),e(L6,Oq),e(Oq,OKo),e(L6,XKo),e(B,VKo),e(B,B6),e(B6,wge),e(wge,zKo),e(B6,WKo),e(B6,Xq),e(Xq,QKo),e(B6,HKo),e(B,UKo),e(B,x6),e(x6,Age),e(Age,JKo),e(x6,YKo),e(x6,Vq),e(Vq,KKo),e(x6,ZKo),e(B,eZo),e(B,k6),e(k6,Lge),e(Lge,oZo),e(k6,rZo),e(k6,zq),e(zq,tZo),e(k6,aZo),e(B,nZo),e(B,R6),e(R6,Bge),e(Bge,sZo),e(R6,lZo),e(R6,Wq),e(Wq,iZo),e(R6,dZo),e(B,cZo),e(B,S6),e(S6,xge),e(xge,fZo),e(S6,mZo),e(S6,Qq),e(Qq,gZo),e(S6,hZo),e(B,pZo),e(B,P6),e(P6,kge),e(kge,_Zo),e(P6,uZo),e(P6,Hq),e(Hq,bZo),e(P6,vZo),e(B,TZo),e(B,Gs),e(Gs,Rge),e(Rge,FZo),e(Gs,CZo),e(Gs,Uq),e(Uq,MZo),e(Gs,EZo),e(Gs,Jq),e(Jq,yZo),e(Gs,wZo),e(B,AZo),e(B,$6),e($6,Sge),e(Sge,LZo),e($6,BZo),e($6,Yq),e(Yq,xZo),e($6,kZo),e(B,RZo),e(B,I6),e(I6,Pge),e(Pge,SZo),e(I6,PZo),e(I6,Kq),e(Kq,$Zo),e(I6,IZo),e(B,DZo),e(B,D6),e(D6,$ge),e($ge,NZo),e(D6,jZo),e(D6,Zq),e(Zq,qZo),e(D6,GZo),e(B,OZo),e(B,N6),e(N6,Ige),e(Ige,XZo),e(N6,VZo),e(N6,eG),e(eG,zZo),e(N6,WZo),e(B,QZo),e(B,j6),e(j6,Dge),e(Dge,HZo),e(j6,UZo),e(j6,oG),e(oG,JZo),e(j6,YZo),e(B,KZo),e(B,q6),e(q6,Nge),e(Nge,ZZo),e(q6,eer),e(q6,rG),e(rG,oer),e(q6,rer),e(B,ter),e(B,G6),e(G6,jge),e(jge,aer),e(G6,ner),e(G6,tG),e(tG,ser),e(G6,ler),e(B,ier),e(B,O6),e(O6,qge),e(qge,der),e(O6,cer),e(O6,aG),e(aG,fer),e(O6,mer),e(B,ger),e(B,X6),e(X6,Gge),e(Gge,her),e(X6,per),e(X6,nG),e(nG,_er),e(X6,uer),e(B,ber),e(B,V6),e(V6,Oge),e(Oge,ver),e(V6,Ter),e(V6,sG),e(sG,Fer),e(V6,Cer),e(B,Mer),e(B,z6),e(z6,Xge),e(Xge,Eer),e(z6,yer),e(z6,lG),e(lG,wer),e(z6,Aer),e(B,Ler),e(B,W6),e(W6,Vge),e(Vge,Ber),e(W6,xer),e(W6,iG),e(iG,ker),e(W6,Rer),e(B,Ser),e(B,Q6),e(Q6,zge),e(zge,Per),e(Q6,$er),e(Q6,dG),e(dG,Ier),e(Q6,Der),e(B,Ner),e(B,H6),e(H6,Wge),e(Wge,jer),e(H6,qer),e(H6,cG),e(cG,Ger),e(H6,Oer),e(B,Xer),e(B,U6),e(U6,Qge),e(Qge,Ver),e(U6,zer),e(U6,fG),e(fG,Wer),e(U6,Qer),e(B,Her),e(B,J6),e(J6,Hge),e(Hge,Uer),e(J6,Jer),e(J6,mG),e(mG,Yer),e(J6,Ker),e(B,Zer),e(B,Y6),e(Y6,Uge),e(Uge,eor),e(Y6,oor),e(Y6,gG),e(gG,ror),e(Y6,tor),e(B,aor),e(B,K6),e(K6,Jge),e(Jge,nor),e(K6,sor),e(K6,hG),e(hG,lor),e(K6,ior),e(B,dor),e(B,Z6),e(Z6,Yge),e(Yge,cor),e(Z6,mor),e(Z6,pG),e(pG,gor),e(Z6,hor),e(B,por),e(B,eT),e(eT,Kge),e(Kge,_or),e(eT,uor),e(eT,_G),e(_G,bor),e(eT,vor),e(B,Tor),e(B,oT),e(oT,Zge),e(Zge,For),e(oT,Cor),e(oT,uG),e(uG,Mor),e(oT,Eor),e(B,yor),e(B,rT),e(rT,ehe),e(ehe,wor),e(rT,Aor),e(rT,bG),e(bG,Lor),e(rT,Bor),e(B,xor),e(B,tT),e(tT,ohe),e(ohe,kor),e(tT,Ror),e(tT,vG),e(vG,Sor),e(tT,Por),e(B,$or),e(B,aT),e(aT,rhe),e(rhe,Ior),e(aT,Dor),e(aT,TG),e(TG,Nor),e(aT,jor),e(B,qor),e(B,nT),e(nT,the),e(the,Gor),e(nT,Oor),e(nT,FG),e(FG,Xor),e(nT,Vor),e(B,zor),e(B,sT),e(sT,ahe),e(ahe,Wor),e(sT,Qor),e(sT,CG),e(CG,Hor),e(sT,Uor),e(ho,Jor),e(ho,nhe),e(nhe,Yor),e(ho,Kor),g(Zw,ho,null),b(c,IRe,u),b(c,_c,u),e(_c,lT),e(lT,she),g(eA,she,null),e(_c,Zor),e(_c,lhe),e(lhe,err),b(c,DRe,u),b(c,Tr,u),g(oA,Tr,null),e(Tr,orr),e(Tr,uc),e(uc,rrr),e(uc,ihe),e(ihe,trr),e(uc,arr),e(uc,dhe),e(dhe,nrr),e(uc,srr),e(Tr,lrr),e(Tr,rA),e(rA,irr),e(rA,che),e(che,drr),e(rA,crr),e(Tr,frr),e(Tr,ht),g(tA,ht,null),e(ht,mrr),e(ht,fhe),e(fhe,grr),e(ht,hrr),e(ht,bc),e(bc,prr),e(bc,mhe),e(mhe,_rr),e(bc,urr),e(bc,ghe),e(ghe,brr),e(bc,vrr),e(ht,Trr),e(ht,hhe),e(hhe,Frr),e(ht,Crr),g(aA,ht,null),e(Tr,Mrr),e(Tr,po),g(nA,po,null),e(po,Err),e(po,phe),e(phe,yrr),e(po,wrr),e(po,un),e(un,Arr),e(un,_he),e(_he,Lrr),e(un,Brr),e(un,uhe),e(uhe,xrr),e(un,krr),e(un,bhe),e(bhe,Rrr),e(un,Srr),e(po,Prr),e(po,H),e(H,iT),e(iT,vhe),e(vhe,$rr),e(iT,Irr),e(iT,MG),e(MG,Drr),e(iT,Nrr),e(H,jrr),e(H,dT),e(dT,The),e(The,qrr),e(dT,Grr),e(dT,EG),e(EG,Orr),e(dT,Xrr),e(H,Vrr),e(H,cT),e(cT,Fhe),e(Fhe,zrr),e(cT,Wrr),e(cT,yG),e(yG,Qrr),e(cT,Hrr),e(H,Urr),e(H,fT),e(fT,Che),e(Che,Jrr),e(fT,Yrr),e(fT,wG),e(wG,Krr),e(fT,Zrr),e(H,etr),e(H,mT),e(mT,Mhe),e(Mhe,otr),e(mT,rtr),e(mT,AG),e(AG,ttr),e(mT,atr),e(H,ntr),e(H,gT),e(gT,Ehe),e(Ehe,str),e(gT,ltr),e(gT,LG),e(LG,itr),e(gT,dtr),e(H,ctr),e(H,hT),e(hT,yhe),e(yhe,ftr),e(hT,mtr),e(hT,BG),e(BG,gtr),e(hT,htr),e(H,ptr),e(H,pT),e(pT,whe),e(whe,_tr),e(pT,utr),e(pT,xG),e(xG,btr),e(pT,vtr),e(H,Ttr),e(H,_T),e(_T,Ahe),e(Ahe,Ftr),e(_T,Ctr),e(_T,kG),e(kG,Mtr),e(_T,Etr),e(H,ytr),e(H,uT),e(uT,Lhe),e(Lhe,wtr),e(uT,Atr),e(uT,RG),e(RG,Ltr),e(uT,Btr),e(H,xtr),e(H,bT),e(bT,Bhe),e(Bhe,ktr),e(bT,Rtr),e(bT,SG),e(SG,Str),e(bT,Ptr),e(H,$tr),e(H,vT),e(vT,xhe),e(xhe,Itr),e(vT,Dtr),e(vT,PG),e(PG,Ntr),e(vT,jtr),e(H,qtr),e(H,TT),e(TT,khe),e(khe,Gtr),e(TT,Otr),e(TT,$G),e($G,Xtr),e(TT,Vtr),e(H,ztr),e(H,FT),e(FT,Rhe),e(Rhe,Wtr),e(FT,Qtr),e(FT,IG),e(IG,Htr),e(FT,Utr),e(H,Jtr),e(H,CT),e(CT,She),e(She,Ytr),e(CT,Ktr),e(CT,DG),e(DG,Ztr),e(CT,ear),e(H,oar),e(H,MT),e(MT,Phe),e(Phe,rar),e(MT,tar),e(MT,NG),e(NG,aar),e(MT,nar),e(H,sar),e(H,ET),e(ET,$he),e($he,lar),e(ET,iar),e(ET,jG),e(jG,dar),e(ET,car),e(H,far),e(H,yT),e(yT,Ihe),e(Ihe,mar),e(yT,gar),e(yT,qG),e(qG,har),e(yT,par),e(H,_ar),e(H,wT),e(wT,Dhe),e(Dhe,uar),e(wT,bar),e(wT,GG),e(GG,Tar),e(wT,Far),e(H,Car),e(H,AT),e(AT,Nhe),e(Nhe,Mar),e(AT,Ear),e(AT,OG),e(OG,yar),e(AT,war),e(H,Aar),e(H,LT),e(LT,jhe),e(jhe,Lar),e(LT,Bar),e(LT,XG),e(XG,xar),e(LT,kar),e(H,Rar),e(H,BT),e(BT,qhe),e(qhe,Sar),e(BT,Par),e(BT,VG),e(VG,$ar),e(BT,Iar),e(po,Dar),e(po,Ghe),e(Ghe,Nar),e(po,jar),g(sA,po,null),b(c,NRe,u),b(c,vc,u),e(vc,xT),e(xT,Ohe),g(lA,Ohe,null),e(vc,qar),e(vc,Xhe),e(Xhe,Gar),b(c,jRe,u),b(c,Fr,u),g(iA,Fr,null),e(Fr,Oar),e(Fr,Tc),e(Tc,Xar),e(Tc,Vhe),e(Vhe,Var),e(Tc,zar),e(Tc,zhe),e(zhe,War),e(Tc,Qar),e(Fr,Har),e(Fr,dA),e(dA,Uar),e(dA,Whe),e(Whe,Jar),e(dA,Yar),e(Fr,Kar),e(Fr,pt),g(cA,pt,null),e(pt,Zar),e(pt,Qhe),e(Qhe,enr),e(pt,onr),e(pt,Fc),e(Fc,rnr),e(Fc,Hhe),e(Hhe,tnr),e(Fc,anr),e(Fc,Uhe),e(Uhe,nnr),e(Fc,snr),e(pt,lnr),e(pt,Jhe),e(Jhe,inr),e(pt,dnr),g(fA,pt,null),e(Fr,cnr),e(Fr,_o),g(mA,_o,null),e(_o,fnr),e(_o,Yhe),e(Yhe,mnr),e(_o,gnr),e(_o,bn),e(bn,hnr),e(bn,Khe),e(Khe,pnr),e(bn,_nr),e(bn,Zhe),e(Zhe,unr),e(bn,bnr),e(bn,epe),e(epe,vnr),e(bn,Tnr),e(_o,Fnr),e(_o,ce),e(ce,kT),e(kT,ope),e(ope,Cnr),e(kT,Mnr),e(kT,zG),e(zG,Enr),e(kT,ynr),e(ce,wnr),e(ce,RT),e(RT,rpe),e(rpe,Anr),e(RT,Lnr),e(RT,WG),e(WG,Bnr),e(RT,xnr),e(ce,knr),e(ce,ST),e(ST,tpe),e(tpe,Rnr),e(ST,Snr),e(ST,QG),e(QG,Pnr),e(ST,$nr),e(ce,Inr),e(ce,PT),e(PT,ape),e(ape,Dnr),e(PT,Nnr),e(PT,HG),e(HG,jnr),e(PT,qnr),e(ce,Gnr),e(ce,$T),e($T,npe),e(npe,Onr),e($T,Xnr),e($T,UG),e(UG,Vnr),e($T,znr),e(ce,Wnr),e(ce,IT),e(IT,spe),e(spe,Qnr),e(IT,Hnr),e(IT,JG),e(JG,Unr),e(IT,Jnr),e(ce,Ynr),e(ce,DT),e(DT,lpe),e(lpe,Knr),e(DT,Znr),e(DT,YG),e(YG,esr),e(DT,osr),e(ce,rsr),e(ce,NT),e(NT,ipe),e(ipe,tsr),e(NT,asr),e(NT,KG),e(KG,nsr),e(NT,ssr),e(ce,lsr),e(ce,jT),e(jT,dpe),e(dpe,isr),e(jT,dsr),e(jT,ZG),e(ZG,csr),e(jT,fsr),e(ce,msr),e(ce,qT),e(qT,cpe),e(cpe,gsr),e(qT,hsr),e(qT,eO),e(eO,psr),e(qT,_sr),e(ce,usr),e(ce,GT),e(GT,fpe),e(fpe,bsr),e(GT,vsr),e(GT,oO),e(oO,Tsr),e(GT,Fsr),e(ce,Csr),e(ce,OT),e(OT,mpe),e(mpe,Msr),e(OT,Esr),e(OT,rO),e(rO,ysr),e(OT,wsr),e(_o,Asr),e(_o,gpe),e(gpe,Lsr),e(_o,Bsr),g(gA,_o,null),b(c,qRe,u),b(c,Cc,u),e(Cc,XT),e(XT,hpe),g(hA,hpe,null),e(Cc,xsr),e(Cc,ppe),e(ppe,ksr),b(c,GRe,u),b(c,Cr,u),g(pA,Cr,null),e(Cr,Rsr),e(Cr,Mc),e(Mc,Ssr),e(Mc,_pe),e(_pe,Psr),e(Mc,$sr),e(Mc,upe),e(upe,Isr),e(Mc,Dsr),e(Cr,Nsr),e(Cr,_A),e(_A,jsr),e(_A,bpe),e(bpe,qsr),e(_A,Gsr),e(Cr,Osr),e(Cr,_t),g(uA,_t,null),e(_t,Xsr),e(_t,vpe),e(vpe,Vsr),e(_t,zsr),e(_t,Ec),e(Ec,Wsr),e(Ec,Tpe),e(Tpe,Qsr),e(Ec,Hsr),e(Ec,Fpe),e(Fpe,Usr),e(Ec,Jsr),e(_t,Ysr),e(_t,Cpe),e(Cpe,Ksr),e(_t,Zsr),g(bA,_t,null),e(Cr,elr),e(Cr,uo),g(vA,uo,null),e(uo,olr),e(uo,Mpe),e(Mpe,rlr),e(uo,tlr),e(uo,vn),e(vn,alr),e(vn,Epe),e(Epe,nlr),e(vn,slr),e(vn,ype),e(ype,llr),e(vn,ilr),e(vn,wpe),e(wpe,dlr),e(vn,clr),e(uo,flr),e(uo,TA),e(TA,VT),e(VT,Ape),e(Ape,mlr),e(VT,glr),e(VT,tO),e(tO,hlr),e(VT,plr),e(TA,_lr),e(TA,zT),e(zT,Lpe),e(Lpe,ulr),e(zT,blr),e(zT,aO),e(aO,vlr),e(zT,Tlr),e(uo,Flr),e(uo,Bpe),e(Bpe,Clr),e(uo,Mlr),g(FA,uo,null),b(c,ORe,u),b(c,yc,u),e(yc,WT),e(WT,xpe),g(CA,xpe,null),e(yc,Elr),e(yc,kpe),e(kpe,ylr),b(c,XRe,u),b(c,Mr,u),g(MA,Mr,null),e(Mr,wlr),e(Mr,wc),e(wc,Alr),e(wc,Rpe),e(Rpe,Llr),e(wc,Blr),e(wc,Spe),e(Spe,xlr),e(wc,klr),e(Mr,Rlr),e(Mr,EA),e(EA,Slr),e(EA,Ppe),e(Ppe,Plr),e(EA,$lr),e(Mr,Ilr),e(Mr,ut),g(yA,ut,null),e(ut,Dlr),e(ut,$pe),e($pe,Nlr),e(ut,jlr),e(ut,Ac),e(Ac,qlr),e(Ac,Ipe),e(Ipe,Glr),e(Ac,Olr),e(Ac,Dpe),e(Dpe,Xlr),e(Ac,Vlr),e(ut,zlr),e(ut,Npe),e(Npe,Wlr),e(ut,Qlr),g(wA,ut,null),e(Mr,Hlr),e(Mr,bo),g(AA,bo,null),e(bo,Ulr),e(bo,jpe),e(jpe,Jlr),e(bo,Ylr),e(bo,Tn),e(Tn,Klr),e(Tn,qpe),e(qpe,Zlr),e(Tn,eir),e(Tn,Gpe),e(Gpe,oir),e(Tn,rir),e(Tn,Ope),e(Ope,tir),e(Tn,air),e(bo,nir),e(bo,J),e(J,QT),e(QT,Xpe),e(Xpe,sir),e(QT,lir),e(QT,nO),e(nO,iir),e(QT,dir),e(J,cir),e(J,HT),e(HT,Vpe),e(Vpe,fir),e(HT,mir),e(HT,sO),e(sO,gir),e(HT,hir),e(J,pir),e(J,UT),e(UT,zpe),e(zpe,_ir),e(UT,uir),e(UT,lO),e(lO,bir),e(UT,vir),e(J,Tir),e(J,JT),e(JT,Wpe),e(Wpe,Fir),e(JT,Cir),e(JT,iO),e(iO,Mir),e(JT,Eir),e(J,yir),e(J,YT),e(YT,Qpe),e(Qpe,wir),e(YT,Air),e(YT,dO),e(dO,Lir),e(YT,Bir),e(J,xir),e(J,KT),e(KT,Hpe),e(Hpe,kir),e(KT,Rir),e(KT,cO),e(cO,Sir),e(KT,Pir),e(J,$ir),e(J,ZT),e(ZT,Upe),e(Upe,Iir),e(ZT,Dir),e(ZT,fO),e(fO,Nir),e(ZT,jir),e(J,qir),e(J,eF),e(eF,Jpe),e(Jpe,Gir),e(eF,Oir),e(eF,mO),e(mO,Xir),e(eF,Vir),e(J,zir),e(J,oF),e(oF,Ype),e(Ype,Wir),e(oF,Qir),e(oF,gO),e(gO,Hir),e(oF,Uir),e(J,Jir),e(J,rF),e(rF,Kpe),e(Kpe,Yir),e(rF,Kir),e(rF,hO),e(hO,Zir),e(rF,edr),e(J,odr),e(J,tF),e(tF,Zpe),e(Zpe,rdr),e(tF,tdr),e(tF,pO),e(pO,adr),e(tF,ndr),e(J,sdr),e(J,aF),e(aF,e_e),e(e_e,ldr),e(aF,idr),e(aF,_O),e(_O,ddr),e(aF,cdr),e(J,fdr),e(J,nF),e(nF,o_e),e(o_e,mdr),e(nF,gdr),e(nF,uO),e(uO,hdr),e(nF,pdr),e(J,_dr),e(J,sF),e(sF,r_e),e(r_e,udr),e(sF,bdr),e(sF,bO),e(bO,vdr),e(sF,Tdr),e(J,Fdr),e(J,lF),e(lF,t_e),e(t_e,Cdr),e(lF,Mdr),e(lF,vO),e(vO,Edr),e(lF,ydr),e(J,wdr),e(J,iF),e(iF,a_e),e(a_e,Adr),e(iF,Ldr),e(iF,TO),e(TO,Bdr),e(iF,xdr),e(J,kdr),e(J,dF),e(dF,n_e),e(n_e,Rdr),e(dF,Sdr),e(dF,FO),e(FO,Pdr),e(dF,$dr),e(J,Idr),e(J,cF),e(cF,s_e),e(s_e,Ddr),e(cF,Ndr),e(cF,CO),e(CO,jdr),e(cF,qdr),e(J,Gdr),e(J,fF),e(fF,l_e),e(l_e,Odr),e(fF,Xdr),e(fF,MO),e(MO,Vdr),e(fF,zdr),e(J,Wdr),e(J,mF),e(mF,i_e),e(i_e,Qdr),e(mF,Hdr),e(mF,EO),e(EO,Udr),e(mF,Jdr),e(bo,Ydr),e(bo,d_e),e(d_e,Kdr),e(bo,Zdr),g(LA,bo,null),b(c,VRe,u),b(c,Lc,u),e(Lc,gF),e(gF,c_e),g(BA,c_e,null),e(Lc,ecr),e(Lc,f_e),e(f_e,ocr),b(c,zRe,u),b(c,Er,u),g(xA,Er,null),e(Er,rcr),e(Er,Bc),e(Bc,tcr),e(Bc,m_e),e(m_e,acr),e(Bc,ncr),e(Bc,g_e),e(g_e,scr),e(Bc,lcr),e(Er,icr),e(Er,kA),e(kA,dcr),e(kA,h_e),e(h_e,ccr),e(kA,fcr),e(Er,mcr),e(Er,bt),g(RA,bt,null),e(bt,gcr),e(bt,p_e),e(p_e,hcr),e(bt,pcr),e(bt,xc),e(xc,_cr),e(xc,__e),e(__e,ucr),e(xc,bcr),e(xc,u_e),e(u_e,vcr),e(xc,Tcr),e(bt,Fcr),e(bt,b_e),e(b_e,Ccr),e(bt,Mcr),g(SA,bt,null),e(Er,Ecr),e(Er,vo),g(PA,vo,null),e(vo,ycr),e(vo,v_e),e(v_e,wcr),e(vo,Acr),e(vo,Fn),e(Fn,Lcr),e(Fn,T_e),e(T_e,Bcr),e(Fn,xcr),e(Fn,F_e),e(F_e,kcr),e(Fn,Rcr),e(Fn,C_e),e(C_e,Scr),e(Fn,Pcr),e(vo,$cr),e(vo,ue),e(ue,hF),e(hF,M_e),e(M_e,Icr),e(hF,Dcr),e(hF,yO),e(yO,Ncr),e(hF,jcr),e(ue,qcr),e(ue,pF),e(pF,E_e),e(E_e,Gcr),e(pF,Ocr),e(pF,wO),e(wO,Xcr),e(pF,Vcr),e(ue,zcr),e(ue,_F),e(_F,y_e),e(y_e,Wcr),e(_F,Qcr),e(_F,AO),e(AO,Hcr),e(_F,Ucr),e(ue,Jcr),e(ue,uF),e(uF,w_e),e(w_e,Ycr),e(uF,Kcr),e(uF,LO),e(LO,Zcr),e(uF,efr),e(ue,ofr),e(ue,bF),e(bF,A_e),e(A_e,rfr),e(bF,tfr),e(bF,BO),e(BO,afr),e(bF,nfr),e(ue,sfr),e(ue,vF),e(vF,L_e),e(L_e,lfr),e(vF,ifr),e(vF,xO),e(xO,dfr),e(vF,cfr),e(ue,ffr),e(ue,TF),e(TF,B_e),e(B_e,mfr),e(TF,gfr),e(TF,kO),e(kO,hfr),e(TF,pfr),e(ue,_fr),e(ue,FF),e(FF,x_e),e(x_e,ufr),e(FF,bfr),e(FF,RO),e(RO,vfr),e(FF,Tfr),e(ue,Ffr),e(ue,CF),e(CF,k_e),e(k_e,Cfr),e(CF,Mfr),e(CF,SO),e(SO,Efr),e(CF,yfr),e(ue,wfr),e(ue,MF),e(MF,R_e),e(R_e,Afr),e(MF,Lfr),e(MF,PO),e(PO,Bfr),e(MF,xfr),e(vo,kfr),e(vo,S_e),e(S_e,Rfr),e(vo,Sfr),g($A,vo,null),b(c,WRe,u),b(c,kc,u),e(kc,EF),e(EF,P_e),g(IA,P_e,null),e(kc,Pfr),e(kc,$_e),e($_e,$fr),b(c,QRe,u),b(c,yr,u),g(DA,yr,null),e(yr,Ifr),e(yr,Rc),e(Rc,Dfr),e(Rc,I_e),e(I_e,Nfr),e(Rc,jfr),e(Rc,D_e),e(D_e,qfr),e(Rc,Gfr),e(yr,Ofr),e(yr,NA),e(NA,Xfr),e(NA,N_e),e(N_e,Vfr),e(NA,zfr),e(yr,Wfr),e(yr,vt),g(jA,vt,null),e(vt,Qfr),e(vt,j_e),e(j_e,Hfr),e(vt,Ufr),e(vt,Sc),e(Sc,Jfr),e(Sc,q_e),e(q_e,Yfr),e(Sc,Kfr),e(Sc,G_e),e(G_e,Zfr),e(Sc,emr),e(vt,omr),e(vt,O_e),e(O_e,rmr),e(vt,tmr),g(qA,vt,null),e(yr,amr),e(yr,To),g(GA,To,null),e(To,nmr),e(To,X_e),e(X_e,smr),e(To,lmr),e(To,Cn),e(Cn,imr),e(Cn,V_e),e(V_e,dmr),e(Cn,cmr),e(Cn,z_e),e(z_e,fmr),e(Cn,mmr),e(Cn,W_e),e(W_e,gmr),e(Cn,hmr),e(To,pmr),e(To,X),e(X,yF),e(yF,Q_e),e(Q_e,_mr),e(yF,umr),e(yF,$O),e($O,bmr),e(yF,vmr),e(X,Tmr),e(X,wF),e(wF,H_e),e(H_e,Fmr),e(wF,Cmr),e(wF,IO),e(IO,Mmr),e(wF,Emr),e(X,ymr),e(X,AF),e(AF,U_e),e(U_e,wmr),e(AF,Amr),e(AF,DO),e(DO,Lmr),e(AF,Bmr),e(X,xmr),e(X,LF),e(LF,J_e),e(J_e,kmr),e(LF,Rmr),e(LF,NO),e(NO,Smr),e(LF,Pmr),e(X,$mr),e(X,BF),e(BF,Y_e),e(Y_e,Imr),e(BF,Dmr),e(BF,jO),e(jO,Nmr),e(BF,jmr),e(X,qmr),e(X,xF),e(xF,K_e),e(K_e,Gmr),e(xF,Omr),e(xF,qO),e(qO,Xmr),e(xF,Vmr),e(X,zmr),e(X,kF),e(kF,Z_e),e(Z_e,Wmr),e(kF,Qmr),e(kF,GO),e(GO,Hmr),e(kF,Umr),e(X,Jmr),e(X,RF),e(RF,eue),e(eue,Ymr),e(RF,Kmr),e(RF,OO),e(OO,Zmr),e(RF,egr),e(X,ogr),e(X,SF),e(SF,oue),e(oue,rgr),e(SF,tgr),e(SF,XO),e(XO,agr),e(SF,ngr),e(X,sgr),e(X,PF),e(PF,rue),e(rue,lgr),e(PF,igr),e(PF,VO),e(VO,dgr),e(PF,cgr),e(X,fgr),e(X,$F),e($F,tue),e(tue,mgr),e($F,ggr),e($F,zO),e(zO,hgr),e($F,pgr),e(X,_gr),e(X,IF),e(IF,aue),e(aue,ugr),e(IF,bgr),e(IF,WO),e(WO,vgr),e(IF,Tgr),e(X,Fgr),e(X,DF),e(DF,nue),e(nue,Cgr),e(DF,Mgr),e(DF,QO),e(QO,Egr),e(DF,ygr),e(X,wgr),e(X,NF),e(NF,sue),e(sue,Agr),e(NF,Lgr),e(NF,HO),e(HO,Bgr),e(NF,xgr),e(X,kgr),e(X,jF),e(jF,lue),e(lue,Rgr),e(jF,Sgr),e(jF,UO),e(UO,Pgr),e(jF,$gr),e(X,Igr),e(X,qF),e(qF,iue),e(iue,Dgr),e(qF,Ngr),e(qF,JO),e(JO,jgr),e(qF,qgr),e(X,Ggr),e(X,GF),e(GF,due),e(due,Ogr),e(GF,Xgr),e(GF,YO),e(YO,Vgr),e(GF,zgr),e(X,Wgr),e(X,OF),e(OF,cue),e(cue,Qgr),e(OF,Hgr),e(OF,KO),e(KO,Ugr),e(OF,Jgr),e(X,Ygr),e(X,XF),e(XF,fue),e(fue,Kgr),e(XF,Zgr),e(XF,ZO),e(ZO,ehr),e(XF,ohr),e(X,rhr),e(X,VF),e(VF,mue),e(mue,thr),e(VF,ahr),e(VF,eX),e(eX,nhr),e(VF,shr),e(X,lhr),e(X,zF),e(zF,gue),e(gue,ihr),e(zF,dhr),e(zF,oX),e(oX,chr),e(zF,fhr),e(X,mhr),e(X,WF),e(WF,hue),e(hue,ghr),e(WF,hhr),e(WF,rX),e(rX,phr),e(WF,_hr),e(X,uhr),e(X,QF),e(QF,pue),e(pue,bhr),e(QF,vhr),e(QF,tX),e(tX,Thr),e(QF,Fhr),e(X,Chr),e(X,HF),e(HF,_ue),e(_ue,Mhr),e(HF,Ehr),e(HF,aX),e(aX,yhr),e(HF,whr),e(X,Ahr),e(X,UF),e(UF,uue),e(uue,Lhr),e(UF,Bhr),e(UF,nX),e(nX,xhr),e(UF,khr),e(X,Rhr),e(X,JF),e(JF,bue),e(bue,Shr),e(JF,Phr),e(JF,sX),e(sX,$hr),e(JF,Ihr),e(To,Dhr),e(To,vue),e(vue,Nhr),e(To,jhr),g(OA,To,null),b(c,HRe,u),b(c,Pc,u),e(Pc,YF),e(YF,Tue),g(XA,Tue,null),e(Pc,qhr),e(Pc,Fue),e(Fue,Ghr),b(c,URe,u),b(c,wr,u),g(VA,wr,null),e(wr,Ohr),e(wr,$c),e($c,Xhr),e($c,Cue),e(Cue,Vhr),e($c,zhr),e($c,Mue),e(Mue,Whr),e($c,Qhr),e(wr,Hhr),e(wr,zA),e(zA,Uhr),e(zA,Eue),e(Eue,Jhr),e(zA,Yhr),e(wr,Khr),e(wr,Tt),g(WA,Tt,null),e(Tt,Zhr),e(Tt,yue),e(yue,epr),e(Tt,opr),e(Tt,Ic),e(Ic,rpr),e(Ic,wue),e(wue,tpr),e(Ic,apr),e(Ic,Aue),e(Aue,npr),e(Ic,spr),e(Tt,lpr),e(Tt,Lue),e(Lue,ipr),e(Tt,dpr),g(QA,Tt,null),e(wr,cpr),e(wr,Fo),g(HA,Fo,null),e(Fo,fpr),e(Fo,Bue),e(Bue,mpr),e(Fo,gpr),e(Fo,Mn),e(Mn,hpr),e(Mn,xue),e(xue,ppr),e(Mn,_pr),e(Mn,kue),e(kue,upr),e(Mn,bpr),e(Mn,Rue),e(Rue,vpr),e(Mn,Tpr),e(Fo,Fpr),e(Fo,ae),e(ae,KF),e(KF,Sue),e(Sue,Cpr),e(KF,Mpr),e(KF,lX),e(lX,Epr),e(KF,ypr),e(ae,wpr),e(ae,ZF),e(ZF,Pue),e(Pue,Apr),e(ZF,Lpr),e(ZF,iX),e(iX,Bpr),e(ZF,xpr),e(ae,kpr),e(ae,e9),e(e9,$ue),e($ue,Rpr),e(e9,Spr),e(e9,dX),e(dX,Ppr),e(e9,$pr),e(ae,Ipr),e(ae,o9),e(o9,Iue),e(Iue,Dpr),e(o9,Npr),e(o9,cX),e(cX,jpr),e(o9,qpr),e(ae,Gpr),e(ae,r9),e(r9,Due),e(Due,Opr),e(r9,Xpr),e(r9,fX),e(fX,Vpr),e(r9,zpr),e(ae,Wpr),e(ae,t9),e(t9,Nue),e(Nue,Qpr),e(t9,Hpr),e(t9,mX),e(mX,Upr),e(t9,Jpr),e(ae,Ypr),e(ae,a9),e(a9,jue),e(jue,Kpr),e(a9,Zpr),e(a9,gX),e(gX,e_r),e(a9,o_r),e(ae,r_r),e(ae,n9),e(n9,que),e(que,t_r),e(n9,a_r),e(n9,hX),e(hX,n_r),e(n9,s_r),e(ae,l_r),e(ae,s9),e(s9,Gue),e(Gue,i_r),e(s9,d_r),e(s9,pX),e(pX,c_r),e(s9,f_r),e(ae,m_r),e(ae,l9),e(l9,Oue),e(Oue,g_r),e(l9,h_r),e(l9,_X),e(_X,p_r),e(l9,__r),e(ae,u_r),e(ae,i9),e(i9,Xue),e(Xue,b_r),e(i9,v_r),e(i9,uX),e(uX,T_r),e(i9,F_r),e(ae,C_r),e(ae,d9),e(d9,Vue),e(Vue,M_r),e(d9,E_r),e(d9,bX),e(bX,y_r),e(d9,w_r),e(ae,A_r),e(ae,c9),e(c9,zue),e(zue,L_r),e(c9,B_r),e(c9,vX),e(vX,x_r),e(c9,k_r),e(ae,R_r),e(ae,f9),e(f9,Wue),e(Wue,S_r),e(f9,P_r),e(f9,TX),e(TX,$_r),e(f9,I_r),e(ae,D_r),e(ae,m9),e(m9,Que),e(Que,N_r),e(m9,j_r),e(m9,FX),e(FX,q_r),e(m9,G_r),e(ae,O_r),e(ae,g9),e(g9,Hue),e(Hue,X_r),e(g9,V_r),e(g9,CX),e(CX,z_r),e(g9,W_r),e(ae,Q_r),e(ae,h9),e(h9,Uue),e(Uue,H_r),e(h9,U_r),e(h9,MX),e(MX,J_r),e(h9,Y_r),e(Fo,K_r),e(Fo,Jue),e(Jue,Z_r),e(Fo,eur),g(UA,Fo,null),b(c,JRe,u),b(c,Dc,u),e(Dc,p9),e(p9,Yue),g(JA,Yue,null),e(Dc,our),e(Dc,Kue),e(Kue,rur),b(c,YRe,u),b(c,Ar,u),g(YA,Ar,null),e(Ar,tur),e(Ar,Nc),e(Nc,aur),e(Nc,Zue),e(Zue,nur),e(Nc,sur),e(Nc,e2e),e(e2e,lur),e(Nc,iur),e(Ar,dur),e(Ar,KA),e(KA,cur),e(KA,o2e),e(o2e,fur),e(KA,mur),e(Ar,gur),e(Ar,Ft),g(ZA,Ft,null),e(Ft,hur),e(Ft,r2e),e(r2e,pur),e(Ft,_ur),e(Ft,jc),e(jc,uur),e(jc,t2e),e(t2e,bur),e(jc,vur),e(jc,a2e),e(a2e,Tur),e(jc,Fur),e(Ft,Cur),e(Ft,n2e),e(n2e,Mur),e(Ft,Eur),g(e0,Ft,null),e(Ar,yur),e(Ar,Co),g(o0,Co,null),e(Co,wur),e(Co,s2e),e(s2e,Aur),e(Co,Lur),e(Co,En),e(En,Bur),e(En,l2e),e(l2e,xur),e(En,kur),e(En,i2e),e(i2e,Rur),e(En,Sur),e(En,d2e),e(d2e,Pur),e(En,$ur),e(Co,Iur),e(Co,c2e),e(c2e,_9),e(_9,f2e),e(f2e,Dur),e(_9,Nur),e(_9,EX),e(EX,jur),e(_9,qur),e(Co,Gur),e(Co,m2e),e(m2e,Our),e(Co,Xur),g(r0,Co,null),b(c,KRe,u),b(c,qc,u),e(qc,u9),e(u9,g2e),g(t0,g2e,null),e(qc,Vur),e(qc,h2e),e(h2e,zur),b(c,ZRe,u),b(c,Lr,u),g(a0,Lr,null),e(Lr,Wur),e(Lr,Gc),e(Gc,Qur),e(Gc,p2e),e(p2e,Hur),e(Gc,Uur),e(Gc,_2e),e(_2e,Jur),e(Gc,Yur),e(Lr,Kur),e(Lr,n0),e(n0,Zur),e(n0,u2e),e(u2e,e2r),e(n0,o2r),e(Lr,r2r),e(Lr,Ct),g(s0,Ct,null),e(Ct,t2r),e(Ct,b2e),e(b2e,a2r),e(Ct,n2r),e(Ct,Oc),e(Oc,s2r),e(Oc,v2e),e(v2e,l2r),e(Oc,i2r),e(Oc,T2e),e(T2e,d2r),e(Oc,c2r),e(Ct,f2r),e(Ct,F2e),e(F2e,m2r),e(Ct,g2r),g(l0,Ct,null),e(Lr,h2r),e(Lr,Mo),g(i0,Mo,null),e(Mo,p2r),e(Mo,C2e),e(C2e,_2r),e(Mo,u2r),e(Mo,yn),e(yn,b2r),e(yn,M2e),e(M2e,v2r),e(yn,T2r),e(yn,E2e),e(E2e,F2r),e(yn,C2r),e(yn,y2e),e(y2e,M2r),e(yn,E2r),e(Mo,y2r),e(Mo,Y),e(Y,b9),e(b9,w2e),e(w2e,w2r),e(b9,A2r),e(b9,yX),e(yX,L2r),e(b9,B2r),e(Y,x2r),e(Y,v9),e(v9,A2e),e(A2e,k2r),e(v9,R2r),e(v9,wX),e(wX,S2r),e(v9,P2r),e(Y,$2r),e(Y,T9),e(T9,L2e),e(L2e,I2r),e(T9,D2r),e(T9,AX),e(AX,N2r),e(T9,j2r),e(Y,q2r),e(Y,F9),e(F9,B2e),e(B2e,G2r),e(F9,O2r),e(F9,LX),e(LX,X2r),e(F9,V2r),e(Y,z2r),e(Y,C9),e(C9,x2e),e(x2e,W2r),e(C9,Q2r),e(C9,BX),e(BX,H2r),e(C9,U2r),e(Y,J2r),e(Y,M9),e(M9,k2e),e(k2e,Y2r),e(M9,K2r),e(M9,xX),e(xX,Z2r),e(M9,e1r),e(Y,o1r),e(Y,E9),e(E9,R2e),e(R2e,r1r),e(E9,t1r),e(E9,kX),e(kX,a1r),e(E9,n1r),e(Y,s1r),e(Y,y9),e(y9,S2e),e(S2e,l1r),e(y9,i1r),e(y9,RX),e(RX,d1r),e(y9,c1r),e(Y,f1r),e(Y,w9),e(w9,P2e),e(P2e,m1r),e(w9,g1r),e(w9,SX),e(SX,h1r),e(w9,p1r),e(Y,_1r),e(Y,A9),e(A9,$2e),e($2e,u1r),e(A9,b1r),e(A9,PX),e(PX,v1r),e(A9,T1r),e(Y,F1r),e(Y,L9),e(L9,I2e),e(I2e,C1r),e(L9,M1r),e(L9,$X),e($X,E1r),e(L9,y1r),e(Y,w1r),e(Y,B9),e(B9,D2e),e(D2e,A1r),e(B9,L1r),e(B9,IX),e(IX,B1r),e(B9,x1r),e(Y,k1r),e(Y,x9),e(x9,N2e),e(N2e,R1r),e(x9,S1r),e(x9,DX),e(DX,P1r),e(x9,$1r),e(Y,I1r),e(Y,k9),e(k9,j2e),e(j2e,D1r),e(k9,N1r),e(k9,NX),e(NX,j1r),e(k9,q1r),e(Y,G1r),e(Y,R9),e(R9,q2e),e(q2e,O1r),e(R9,X1r),e(R9,jX),e(jX,V1r),e(R9,z1r),e(Y,W1r),e(Y,S9),e(S9,G2e),e(G2e,Q1r),e(S9,H1r),e(S9,qX),e(qX,U1r),e(S9,J1r),e(Y,Y1r),e(Y,P9),e(P9,O2e),e(O2e,K1r),e(P9,Z1r),e(P9,GX),e(GX,ebr),e(P9,obr),e(Y,rbr),e(Y,$9),e($9,X2e),e(X2e,tbr),e($9,abr),e($9,OX),e(OX,nbr),e($9,sbr),e(Y,lbr),e(Y,I9),e(I9,V2e),e(V2e,ibr),e(I9,dbr),e(I9,XX),e(XX,cbr),e(I9,fbr),e(Y,mbr),e(Y,D9),e(D9,z2e),e(z2e,gbr),e(D9,hbr),e(D9,VX),e(VX,pbr),e(D9,_br),e(Mo,ubr),e(Mo,W2e),e(W2e,bbr),e(Mo,vbr),g(d0,Mo,null),b(c,eSe,u),b(c,Xc,u),e(Xc,N9),e(N9,Q2e),g(c0,Q2e,null),e(Xc,Tbr),e(Xc,H2e),e(H2e,Fbr),b(c,oSe,u),b(c,Br,u),g(f0,Br,null),e(Br,Cbr),e(Br,Vc),e(Vc,Mbr),e(Vc,U2e),e(U2e,Ebr),e(Vc,ybr),e(Vc,J2e),e(J2e,wbr),e(Vc,Abr),e(Br,Lbr),e(Br,m0),e(m0,Bbr),e(m0,Y2e),e(Y2e,xbr),e(m0,kbr),e(Br,Rbr),e(Br,Mt),g(g0,Mt,null),e(Mt,Sbr),e(Mt,K2e),e(K2e,Pbr),e(Mt,$br),e(Mt,zc),e(zc,Ibr),e(zc,Z2e),e(Z2e,Dbr),e(zc,Nbr),e(zc,e1e),e(e1e,jbr),e(zc,qbr),e(Mt,Gbr),e(Mt,o1e),e(o1e,Obr),e(Mt,Xbr),g(h0,Mt,null),e(Br,Vbr),e(Br,Eo),g(p0,Eo,null),e(Eo,zbr),e(Eo,r1e),e(r1e,Wbr),e(Eo,Qbr),e(Eo,wn),e(wn,Hbr),e(wn,t1e),e(t1e,Ubr),e(wn,Jbr),e(wn,a1e),e(a1e,Ybr),e(wn,Kbr),e(wn,n1e),e(n1e,Zbr),e(wn,e3r),e(Eo,o3r),e(Eo,K),e(K,j9),e(j9,s1e),e(s1e,r3r),e(j9,t3r),e(j9,zX),e(zX,a3r),e(j9,n3r),e(K,s3r),e(K,q9),e(q9,l1e),e(l1e,l3r),e(q9,i3r),e(q9,WX),e(WX,d3r),e(q9,c3r),e(K,f3r),e(K,G9),e(G9,i1e),e(i1e,m3r),e(G9,g3r),e(G9,QX),e(QX,h3r),e(G9,p3r),e(K,_3r),e(K,O9),e(O9,d1e),e(d1e,u3r),e(O9,b3r),e(O9,HX),e(HX,v3r),e(O9,T3r),e(K,F3r),e(K,X9),e(X9,c1e),e(c1e,C3r),e(X9,M3r),e(X9,UX),e(UX,E3r),e(X9,y3r),e(K,w3r),e(K,V9),e(V9,f1e),e(f1e,A3r),e(V9,L3r),e(V9,JX),e(JX,B3r),e(V9,x3r),e(K,k3r),e(K,z9),e(z9,m1e),e(m1e,R3r),e(z9,S3r),e(z9,YX),e(YX,P3r),e(z9,$3r),e(K,I3r),e(K,W9),e(W9,g1e),e(g1e,D3r),e(W9,N3r),e(W9,KX),e(KX,j3r),e(W9,q3r),e(K,G3r),e(K,Q9),e(Q9,h1e),e(h1e,O3r),e(Q9,X3r),e(Q9,ZX),e(ZX,V3r),e(Q9,z3r),e(K,W3r),e(K,H9),e(H9,p1e),e(p1e,Q3r),e(H9,H3r),e(H9,eV),e(eV,U3r),e(H9,J3r),e(K,Y3r),e(K,U9),e(U9,_1e),e(_1e,K3r),e(U9,Z3r),e(U9,oV),e(oV,evr),e(U9,ovr),e(K,rvr),e(K,J9),e(J9,u1e),e(u1e,tvr),e(J9,avr),e(J9,rV),e(rV,nvr),e(J9,svr),e(K,lvr),e(K,Y9),e(Y9,b1e),e(b1e,ivr),e(Y9,dvr),e(Y9,tV),e(tV,cvr),e(Y9,fvr),e(K,mvr),e(K,K9),e(K9,v1e),e(v1e,gvr),e(K9,hvr),e(K9,aV),e(aV,pvr),e(K9,_vr),e(K,uvr),e(K,Z9),e(Z9,T1e),e(T1e,bvr),e(Z9,vvr),e(Z9,nV),e(nV,Tvr),e(Z9,Fvr),e(K,Cvr),e(K,eC),e(eC,F1e),e(F1e,Mvr),e(eC,Evr),e(eC,sV),e(sV,yvr),e(eC,wvr),e(K,Avr),e(K,oC),e(oC,C1e),e(C1e,Lvr),e(oC,Bvr),e(oC,lV),e(lV,xvr),e(oC,kvr),e(K,Rvr),e(K,rC),e(rC,M1e),e(M1e,Svr),e(rC,Pvr),e(rC,iV),e(iV,$vr),e(rC,Ivr),e(K,Dvr),e(K,tC),e(tC,E1e),e(E1e,Nvr),e(tC,jvr),e(tC,dV),e(dV,qvr),e(tC,Gvr),e(K,Ovr),e(K,aC),e(aC,y1e),e(y1e,Xvr),e(aC,Vvr),e(aC,cV),e(cV,zvr),e(aC,Wvr),e(Eo,Qvr),e(Eo,w1e),e(w1e,Hvr),e(Eo,Uvr),g(_0,Eo,null),b(c,rSe,u),b(c,Wc,u),e(Wc,nC),e(nC,A1e),g(u0,A1e,null),e(Wc,Jvr),e(Wc,L1e),e(L1e,Yvr),b(c,tSe,u),b(c,xr,u),g(b0,xr,null),e(xr,Kvr),e(xr,Qc),e(Qc,Zvr),e(Qc,B1e),e(B1e,e6r),e(Qc,o6r),e(Qc,x1e),e(x1e,r6r),e(Qc,t6r),e(xr,a6r),e(xr,v0),e(v0,n6r),e(v0,k1e),e(k1e,s6r),e(v0,l6r),e(xr,i6r),e(xr,Et),g(T0,Et,null),e(Et,d6r),e(Et,R1e),e(R1e,c6r),e(Et,f6r),e(Et,Hc),e(Hc,m6r),e(Hc,S1e),e(S1e,g6r),e(Hc,h6r),e(Hc,P1e),e(P1e,p6r),e(Hc,_6r),e(Et,u6r),e(Et,$1e),e($1e,b6r),e(Et,v6r),g(F0,Et,null),e(xr,T6r),e(xr,yo),g(C0,yo,null),e(yo,F6r),e(yo,I1e),e(I1e,C6r),e(yo,M6r),e(yo,An),e(An,E6r),e(An,D1e),e(D1e,y6r),e(An,w6r),e(An,N1e),e(N1e,A6r),e(An,L6r),e(An,j1e),e(j1e,B6r),e(An,x6r),e(yo,k6r),e(yo,q1e),e(q1e,sC),e(sC,G1e),e(G1e,R6r),e(sC,S6r),e(sC,fV),e(fV,P6r),e(sC,$6r),e(yo,I6r),e(yo,O1e),e(O1e,D6r),e(yo,N6r),g(M0,yo,null),b(c,aSe,u),b(c,Uc,u),e(Uc,lC),e(lC,X1e),g(E0,X1e,null),e(Uc,j6r),e(Uc,V1e),e(V1e,q6r),b(c,nSe,u),b(c,kr,u),g(y0,kr,null),e(kr,G6r),e(kr,Jc),e(Jc,O6r),e(Jc,z1e),e(z1e,X6r),e(Jc,V6r),e(Jc,W1e),e(W1e,z6r),e(Jc,W6r),e(kr,Q6r),e(kr,w0),e(w0,H6r),e(w0,Q1e),e(Q1e,U6r),e(w0,J6r),e(kr,Y6r),e(kr,yt),g(A0,yt,null),e(yt,K6r),e(yt,H1e),e(H1e,Z6r),e(yt,eTr),e(yt,Yc),e(Yc,oTr),e(Yc,U1e),e(U1e,rTr),e(Yc,tTr),e(Yc,J1e),e(J1e,aTr),e(Yc,nTr),e(yt,sTr),e(yt,Y1e),e(Y1e,lTr),e(yt,iTr),g(L0,yt,null),e(kr,dTr),e(kr,wo),g(B0,wo,null),e(wo,cTr),e(wo,K1e),e(K1e,fTr),e(wo,mTr),e(wo,Ln),e(Ln,gTr),e(Ln,Z1e),e(Z1e,hTr),e(Ln,pTr),e(Ln,ebe),e(ebe,_Tr),e(Ln,uTr),e(Ln,obe),e(obe,bTr),e(Ln,vTr),e(wo,TTr),e(wo,rbe),e(rbe,iC),e(iC,tbe),e(tbe,FTr),e(iC,CTr),e(iC,mV),e(mV,MTr),e(iC,ETr),e(wo,yTr),e(wo,abe),e(abe,wTr),e(wo,ATr),g(x0,wo,null),b(c,sSe,u),b(c,Kc,u),e(Kc,dC),e(dC,nbe),g(k0,nbe,null),e(Kc,LTr),e(Kc,sbe),e(sbe,BTr),b(c,lSe,u),b(c,Rr,u),g(R0,Rr,null),e(Rr,xTr),e(Rr,Zc),e(Zc,kTr),e(Zc,lbe),e(lbe,RTr),e(Zc,STr),e(Zc,ibe),e(ibe,PTr),e(Zc,$Tr),e(Rr,ITr),e(Rr,S0),e(S0,DTr),e(S0,dbe),e(dbe,NTr),e(S0,jTr),e(Rr,qTr),e(Rr,wt),g(P0,wt,null),e(wt,GTr),e(wt,cbe),e(cbe,OTr),e(wt,XTr),e(wt,ef),e(ef,VTr),e(ef,fbe),e(fbe,zTr),e(ef,WTr),e(ef,mbe),e(mbe,QTr),e(ef,HTr),e(wt,UTr),e(wt,gbe),e(gbe,JTr),e(wt,YTr),g($0,wt,null),e(Rr,KTr),e(Rr,Ao),g(I0,Ao,null),e(Ao,ZTr),e(Ao,hbe),e(hbe,eFr),e(Ao,oFr),e(Ao,Bn),e(Bn,rFr),e(Bn,pbe),e(pbe,tFr),e(Bn,aFr),e(Bn,_be),e(_be,nFr),e(Bn,sFr),e(Bn,ube),e(ube,lFr),e(Bn,iFr),e(Ao,dFr),e(Ao,z),e(z,cC),e(cC,bbe),e(bbe,cFr),e(cC,fFr),e(cC,gV),e(gV,mFr),e(cC,gFr),e(z,hFr),e(z,fC),e(fC,vbe),e(vbe,pFr),e(fC,_Fr),e(fC,hV),e(hV,uFr),e(fC,bFr),e(z,vFr),e(z,mC),e(mC,Tbe),e(Tbe,TFr),e(mC,FFr),e(mC,pV),e(pV,CFr),e(mC,MFr),e(z,EFr),e(z,gC),e(gC,Fbe),e(Fbe,yFr),e(gC,wFr),e(gC,_V),e(_V,AFr),e(gC,LFr),e(z,BFr),e(z,hC),e(hC,Cbe),e(Cbe,xFr),e(hC,kFr),e(hC,uV),e(uV,RFr),e(hC,SFr),e(z,PFr),e(z,pC),e(pC,Mbe),e(Mbe,$Fr),e(pC,IFr),e(pC,bV),e(bV,DFr),e(pC,NFr),e(z,jFr),e(z,_C),e(_C,Ebe),e(Ebe,qFr),e(_C,GFr),e(_C,vV),e(vV,OFr),e(_C,XFr),e(z,VFr),e(z,uC),e(uC,ybe),e(ybe,zFr),e(uC,WFr),e(uC,TV),e(TV,QFr),e(uC,HFr),e(z,UFr),e(z,bC),e(bC,wbe),e(wbe,JFr),e(bC,YFr),e(bC,FV),e(FV,KFr),e(bC,ZFr),e(z,e9r),e(z,vC),e(vC,Abe),e(Abe,o9r),e(vC,r9r),e(vC,CV),e(CV,t9r),e(vC,a9r),e(z,n9r),e(z,TC),e(TC,Lbe),e(Lbe,s9r),e(TC,l9r),e(TC,MV),e(MV,i9r),e(TC,d9r),e(z,c9r),e(z,FC),e(FC,Bbe),e(Bbe,f9r),e(FC,m9r),e(FC,EV),e(EV,g9r),e(FC,h9r),e(z,p9r),e(z,CC),e(CC,xbe),e(xbe,_9r),e(CC,u9r),e(CC,yV),e(yV,b9r),e(CC,v9r),e(z,T9r),e(z,MC),e(MC,kbe),e(kbe,F9r),e(MC,C9r),e(MC,wV),e(wV,M9r),e(MC,E9r),e(z,y9r),e(z,EC),e(EC,Rbe),e(Rbe,w9r),e(EC,A9r),e(EC,AV),e(AV,L9r),e(EC,B9r),e(z,x9r),e(z,yC),e(yC,Sbe),e(Sbe,k9r),e(yC,R9r),e(yC,LV),e(LV,S9r),e(yC,P9r),e(z,$9r),e(z,wC),e(wC,Pbe),e(Pbe,I9r),e(wC,D9r),e(wC,BV),e(BV,N9r),e(wC,j9r),e(z,q9r),e(z,AC),e(AC,$be),e($be,G9r),e(AC,O9r),e(AC,xV),e(xV,X9r),e(AC,V9r),e(z,z9r),e(z,LC),e(LC,Ibe),e(Ibe,W9r),e(LC,Q9r),e(LC,kV),e(kV,H9r),e(LC,U9r),e(z,J9r),e(z,BC),e(BC,Dbe),e(Dbe,Y9r),e(BC,K9r),e(BC,RV),e(RV,Z9r),e(BC,eCr),e(z,oCr),e(z,xC),e(xC,Nbe),e(Nbe,rCr),e(xC,tCr),e(xC,SV),e(SV,aCr),e(xC,nCr),e(z,sCr),e(z,kC),e(kC,jbe),e(jbe,lCr),e(kC,iCr),e(kC,PV),e(PV,dCr),e(kC,cCr),e(z,fCr),e(z,RC),e(RC,qbe),e(qbe,mCr),e(RC,gCr),e(RC,$V),e($V,hCr),e(RC,pCr),e(z,_Cr),e(z,SC),e(SC,Gbe),e(Gbe,uCr),e(SC,bCr),e(SC,IV),e(IV,vCr),e(SC,TCr),e(z,FCr),e(z,PC),e(PC,Obe),e(Obe,CCr),e(PC,MCr),e(PC,DV),e(DV,ECr),e(PC,yCr),e(Ao,wCr),e(Ao,Xbe),e(Xbe,ACr),e(Ao,LCr),g(D0,Ao,null),b(c,iSe,u),b(c,of,u),e(of,$C),e($C,Vbe),g(N0,Vbe,null),e(of,BCr),e(of,zbe),e(zbe,xCr),b(c,dSe,u),b(c,Sr,u),g(j0,Sr,null),e(Sr,kCr),e(Sr,rf),e(rf,RCr),e(rf,Wbe),e(Wbe,SCr),e(rf,PCr),e(rf,Qbe),e(Qbe,$Cr),e(rf,ICr),e(Sr,DCr),e(Sr,q0),e(q0,NCr),e(q0,Hbe),e(Hbe,jCr),e(q0,qCr),e(Sr,GCr),e(Sr,At),g(G0,At,null),e(At,OCr),e(At,Ube),e(Ube,XCr),e(At,VCr),e(At,tf),e(tf,zCr),e(tf,Jbe),e(Jbe,WCr),e(tf,QCr),e(tf,Ybe),e(Ybe,HCr),e(tf,UCr),e(At,JCr),e(At,Kbe),e(Kbe,YCr),e(At,KCr),g(O0,At,null),e(Sr,ZCr),e(Sr,Lo),g(X0,Lo,null),e(Lo,eMr),e(Lo,Zbe),e(Zbe,oMr),e(Lo,rMr),e(Lo,xn),e(xn,tMr),e(xn,e3e),e(e3e,aMr),e(xn,nMr),e(xn,o3e),e(o3e,sMr),e(xn,lMr),e(xn,r3e),e(r3e,iMr),e(xn,dMr),e(Lo,cMr),e(Lo,ca),e(ca,IC),e(IC,t3e),e(t3e,fMr),e(IC,mMr),e(IC,NV),e(NV,gMr),e(IC,hMr),e(ca,pMr),e(ca,DC),e(DC,a3e),e(a3e,_Mr),e(DC,uMr),e(DC,jV),e(jV,bMr),e(DC,vMr),e(ca,TMr),e(ca,NC),e(NC,n3e),e(n3e,FMr),e(NC,CMr),e(NC,qV),e(qV,MMr),e(NC,EMr),e(ca,yMr),e(ca,jC),e(jC,s3e),e(s3e,wMr),e(jC,AMr),e(jC,GV),e(GV,LMr),e(jC,BMr),e(ca,xMr),e(ca,qC),e(qC,l3e),e(l3e,kMr),e(qC,RMr),e(qC,OV),e(OV,SMr),e(qC,PMr),e(Lo,$Mr),e(Lo,i3e),e(i3e,IMr),e(Lo,DMr),g(V0,Lo,null),b(c,cSe,u),b(c,af,u),e(af,GC),e(GC,d3e),g(z0,d3e,null),e(af,NMr),e(af,c3e),e(c3e,jMr),b(c,fSe,u),b(c,Pr,u),g(W0,Pr,null),e(Pr,qMr),e(Pr,nf),e(nf,GMr),e(nf,f3e),e(f3e,OMr),e(nf,XMr),e(nf,m3e),e(m3e,VMr),e(nf,zMr),e(Pr,WMr),e(Pr,Q0),e(Q0,QMr),e(Q0,g3e),e(g3e,HMr),e(Q0,UMr),e(Pr,JMr),e(Pr,Lt),g(H0,Lt,null),e(Lt,YMr),e(Lt,h3e),e(h3e,KMr),e(Lt,ZMr),e(Lt,sf),e(sf,e4r),e(sf,p3e),e(p3e,o4r),e(sf,r4r),e(sf,_3e),e(_3e,t4r),e(sf,a4r),e(Lt,n4r),e(Lt,u3e),e(u3e,s4r),e(Lt,l4r),g(U0,Lt,null),e(Pr,i4r),e(Pr,Bo),g(J0,Bo,null),e(Bo,d4r),e(Bo,b3e),e(b3e,c4r),e(Bo,f4r),e(Bo,kn),e(kn,m4r),e(kn,v3e),e(v3e,g4r),e(kn,h4r),e(kn,T3e),e(T3e,p4r),e(kn,_4r),e(kn,F3e),e(F3e,u4r),e(kn,b4r),e(Bo,v4r),e(Bo,fe),e(fe,OC),e(OC,C3e),e(C3e,T4r),e(OC,F4r),e(OC,XV),e(XV,C4r),e(OC,M4r),e(fe,E4r),e(fe,XC),e(XC,M3e),e(M3e,y4r),e(XC,w4r),e(XC,VV),e(VV,A4r),e(XC,L4r),e(fe,B4r),e(fe,VC),e(VC,E3e),e(E3e,x4r),e(VC,k4r),e(VC,zV),e(zV,R4r),e(VC,S4r),e(fe,P4r),e(fe,zC),e(zC,y3e),e(y3e,$4r),e(zC,I4r),e(zC,WV),e(WV,D4r),e(zC,N4r),e(fe,j4r),e(fe,WC),e(WC,w3e),e(w3e,q4r),e(WC,G4r),e(WC,QV),e(QV,O4r),e(WC,X4r),e(fe,V4r),e(fe,QC),e(QC,A3e),e(A3e,z4r),e(QC,W4r),e(QC,HV),e(HV,Q4r),e(QC,H4r),e(fe,U4r),e(fe,HC),e(HC,L3e),e(L3e,J4r),e(HC,Y4r),e(HC,UV),e(UV,K4r),e(HC,Z4r),e(fe,eEr),e(fe,UC),e(UC,B3e),e(B3e,oEr),e(UC,rEr),e(UC,JV),e(JV,tEr),e(UC,aEr),e(fe,nEr),e(fe,JC),e(JC,x3e),e(x3e,sEr),e(JC,lEr),e(JC,YV),e(YV,iEr),e(JC,dEr),e(fe,cEr),e(fe,YC),e(YC,k3e),e(k3e,fEr),e(YC,mEr),e(YC,KV),e(KV,gEr),e(YC,hEr),e(fe,pEr),e(fe,KC),e(KC,R3e),e(R3e,_Er),e(KC,uEr),e(KC,ZV),e(ZV,bEr),e(KC,vEr),e(fe,TEr),e(fe,ZC),e(ZC,S3e),e(S3e,FEr),e(ZC,CEr),e(ZC,ez),e(ez,MEr),e(ZC,EEr),e(Bo,yEr),e(Bo,P3e),e(P3e,wEr),e(Bo,AEr),g(Y0,Bo,null),b(c,mSe,u),b(c,lf,u),e(lf,eM),e(eM,$3e),g(K0,$3e,null),e(lf,LEr),e(lf,I3e),e(I3e,BEr),b(c,gSe,u),b(c,$r,u),g(Z0,$r,null),e($r,xEr),e($r,df),e(df,kEr),e(df,D3e),e(D3e,REr),e(df,SEr),e(df,N3e),e(N3e,PEr),e(df,$Er),e($r,IEr),e($r,eL),e(eL,DEr),e(eL,j3e),e(j3e,NEr),e(eL,jEr),e($r,qEr),e($r,Bt),g(oL,Bt,null),e(Bt,GEr),e(Bt,q3e),e(q3e,OEr),e(Bt,XEr),e(Bt,cf),e(cf,VEr),e(cf,G3e),e(G3e,zEr),e(cf,WEr),e(cf,O3e),e(O3e,QEr),e(cf,HEr),e(Bt,UEr),e(Bt,X3e),e(X3e,JEr),e(Bt,YEr),g(rL,Bt,null),e($r,KEr),e($r,xo),g(tL,xo,null),e(xo,ZEr),e(xo,V3e),e(V3e,e5r),e(xo,o5r),e(xo,Rn),e(Rn,r5r),e(Rn,z3e),e(z3e,t5r),e(Rn,a5r),e(Rn,W3e),e(W3e,n5r),e(Rn,s5r),e(Rn,Q3e),e(Q3e,l5r),e(Rn,i5r),e(xo,d5r),e(xo,be),e(be,oM),e(oM,H3e),e(H3e,c5r),e(oM,f5r),e(oM,oz),e(oz,m5r),e(oM,g5r),e(be,h5r),e(be,rM),e(rM,U3e),e(U3e,p5r),e(rM,_5r),e(rM,rz),e(rz,u5r),e(rM,b5r),e(be,v5r),e(be,tM),e(tM,J3e),e(J3e,T5r),e(tM,F5r),e(tM,tz),e(tz,C5r),e(tM,M5r),e(be,E5r),e(be,aM),e(aM,Y3e),e(Y3e,y5r),e(aM,w5r),e(aM,az),e(az,A5r),e(aM,L5r),e(be,B5r),e(be,nM),e(nM,K3e),e(K3e,x5r),e(nM,k5r),e(nM,nz),e(nz,R5r),e(nM,S5r),e(be,P5r),e(be,sM),e(sM,Z3e),e(Z3e,$5r),e(sM,I5r),e(sM,sz),e(sz,D5r),e(sM,N5r),e(be,j5r),e(be,lM),e(lM,eve),e(eve,q5r),e(lM,G5r),e(lM,lz),e(lz,O5r),e(lM,X5r),e(be,V5r),e(be,iM),e(iM,ove),e(ove,z5r),e(iM,W5r),e(iM,iz),e(iz,Q5r),e(iM,H5r),e(be,U5r),e(be,dM),e(dM,rve),e(rve,J5r),e(dM,Y5r),e(dM,dz),e(dz,K5r),e(dM,Z5r),e(be,eyr),e(be,cM),e(cM,tve),e(tve,oyr),e(cM,ryr),e(cM,cz),e(cz,tyr),e(cM,ayr),e(xo,nyr),e(xo,ave),e(ave,syr),e(xo,lyr),g(aL,xo,null),b(c,hSe,u),b(c,ff,u),e(ff,fM),e(fM,nve),g(nL,nve,null),e(ff,iyr),e(ff,sve),e(sve,dyr),b(c,pSe,u),b(c,Ir,u),g(sL,Ir,null),e(Ir,cyr),e(Ir,mf),e(mf,fyr),e(mf,lve),e(lve,myr),e(mf,gyr),e(mf,ive),e(ive,hyr),e(mf,pyr),e(Ir,_yr),e(Ir,lL),e(lL,uyr),e(lL,dve),e(dve,byr),e(lL,vyr),e(Ir,Tyr),e(Ir,xt),g(iL,xt,null),e(xt,Fyr),e(xt,cve),e(cve,Cyr),e(xt,Myr),e(xt,gf),e(gf,Eyr),e(gf,fve),e(fve,yyr),e(gf,wyr),e(gf,mve),e(mve,Ayr),e(gf,Lyr),e(xt,Byr),e(xt,gve),e(gve,xyr),e(xt,kyr),g(dL,xt,null),e(Ir,Ryr),e(Ir,ko),g(cL,ko,null),e(ko,Syr),e(ko,hve),e(hve,Pyr),e(ko,$yr),e(ko,Sn),e(Sn,Iyr),e(Sn,pve),e(pve,Dyr),e(Sn,Nyr),e(Sn,_ve),e(_ve,jyr),e(Sn,qyr),e(Sn,uve),e(uve,Gyr),e(Sn,Oyr),e(ko,Xyr),e(ko,Me),e(Me,mM),e(mM,bve),e(bve,Vyr),e(mM,zyr),e(mM,fz),e(fz,Wyr),e(mM,Qyr),e(Me,Hyr),e(Me,gM),e(gM,vve),e(vve,Uyr),e(gM,Jyr),e(gM,mz),e(mz,Yyr),e(gM,Kyr),e(Me,Zyr),e(Me,hM),e(hM,Tve),e(Tve,ewr),e(hM,owr),e(hM,gz),e(gz,rwr),e(hM,twr),e(Me,awr),e(Me,pM),e(pM,Fve),e(Fve,nwr),e(pM,swr),e(pM,hz),e(hz,lwr),e(pM,iwr),e(Me,dwr),e(Me,_M),e(_M,Cve),e(Cve,cwr),e(_M,fwr),e(_M,pz),e(pz,mwr),e(_M,gwr),e(Me,hwr),e(Me,uM),e(uM,Mve),e(Mve,pwr),e(uM,_wr),e(uM,_z),e(_z,uwr),e(uM,bwr),e(Me,vwr),e(Me,bM),e(bM,Eve),e(Eve,Twr),e(bM,Fwr),e(bM,uz),e(uz,Cwr),e(bM,Mwr),e(Me,Ewr),e(Me,vM),e(vM,yve),e(yve,ywr),e(vM,wwr),e(vM,bz),e(bz,Awr),e(vM,Lwr),e(Me,Bwr),e(Me,TM),e(TM,wve),e(wve,xwr),e(TM,kwr),e(TM,vz),e(vz,Rwr),e(TM,Swr),e(ko,Pwr),e(ko,Ave),e(Ave,$wr),e(ko,Iwr),g(fL,ko,null),b(c,_Se,u),b(c,hf,u),e(hf,FM),e(FM,Lve),g(mL,Lve,null),e(hf,Dwr),e(hf,Bve),e(Bve,Nwr),b(c,uSe,u),b(c,Dr,u),g(gL,Dr,null),e(Dr,jwr),e(Dr,pf),e(pf,qwr),e(pf,xve),e(xve,Gwr),e(pf,Owr),e(pf,kve),e(kve,Xwr),e(pf,Vwr),e(Dr,zwr),e(Dr,hL),e(hL,Wwr),e(hL,Rve),e(Rve,Qwr),e(hL,Hwr),e(Dr,Uwr),e(Dr,kt),g(pL,kt,null),e(kt,Jwr),e(kt,Sve),e(Sve,Ywr),e(kt,Kwr),e(kt,_f),e(_f,Zwr),e(_f,Pve),e(Pve,eAr),e(_f,oAr),e(_f,$ve),e($ve,rAr),e(_f,tAr),e(kt,aAr),e(kt,Ive),e(Ive,nAr),e(kt,sAr),g(_L,kt,null),e(Dr,lAr),e(Dr,Ro),g(uL,Ro,null),e(Ro,iAr),e(Ro,Dve),e(Dve,dAr),e(Ro,cAr),e(Ro,Pn),e(Pn,fAr),e(Pn,Nve),e(Nve,mAr),e(Pn,gAr),e(Pn,jve),e(jve,hAr),e(Pn,pAr),e(Pn,qve),e(qve,_Ar),e(Pn,uAr),e(Ro,bAr),e(Ro,ve),e(ve,CM),e(CM,Gve),e(Gve,vAr),e(CM,TAr),e(CM,Tz),e(Tz,FAr),e(CM,CAr),e(ve,MAr),e(ve,MM),e(MM,Ove),e(Ove,EAr),e(MM,yAr),e(MM,Fz),e(Fz,wAr),e(MM,AAr),e(ve,LAr),e(ve,EM),e(EM,Xve),e(Xve,BAr),e(EM,xAr),e(EM,Cz),e(Cz,kAr),e(EM,RAr),e(ve,SAr),e(ve,yM),e(yM,Vve),e(Vve,PAr),e(yM,$Ar),e(yM,Mz),e(Mz,IAr),e(yM,DAr),e(ve,NAr),e(ve,wM),e(wM,zve),e(zve,jAr),e(wM,qAr),e(wM,Ez),e(Ez,GAr),e(wM,OAr),e(ve,XAr),e(ve,AM),e(AM,Wve),e(Wve,VAr),e(AM,zAr),e(AM,yz),e(yz,WAr),e(AM,QAr),e(ve,HAr),e(ve,LM),e(LM,Qve),e(Qve,UAr),e(LM,JAr),e(LM,wz),e(wz,YAr),e(LM,KAr),e(ve,ZAr),e(ve,BM),e(BM,Hve),e(Hve,e0r),e(BM,o0r),e(BM,Az),e(Az,r0r),e(BM,t0r),e(ve,a0r),e(ve,xM),e(xM,Uve),e(Uve,n0r),e(xM,s0r),e(xM,Lz),e(Lz,l0r),e(xM,i0r),e(ve,d0r),e(ve,kM),e(kM,Jve),e(Jve,c0r),e(kM,f0r),e(kM,Bz),e(Bz,m0r),e(kM,g0r),e(Ro,h0r),e(Ro,Yve),e(Yve,p0r),e(Ro,_0r),g(bL,Ro,null),b(c,bSe,u),b(c,uf,u),e(uf,RM),e(RM,Kve),g(vL,Kve,null),e(uf,u0r),e(uf,Zve),e(Zve,b0r),b(c,vSe,u),b(c,Nr,u),g(TL,Nr,null),e(Nr,v0r),e(Nr,bf),e(bf,T0r),e(bf,e6e),e(e6e,F0r),e(bf,C0r),e(bf,o6e),e(o6e,M0r),e(bf,E0r),e(Nr,y0r),e(Nr,FL),e(FL,w0r),e(FL,r6e),e(r6e,A0r),e(FL,L0r),e(Nr,B0r),e(Nr,Rt),g(CL,Rt,null),e(Rt,x0r),e(Rt,t6e),e(t6e,k0r),e(Rt,R0r),e(Rt,vf),e(vf,S0r),e(vf,a6e),e(a6e,P0r),e(vf,$0r),e(vf,n6e),e(n6e,I0r),e(vf,D0r),e(Rt,N0r),e(Rt,s6e),e(s6e,j0r),e(Rt,q0r),g(ML,Rt,null),e(Nr,G0r),e(Nr,So),g(EL,So,null),e(So,O0r),e(So,l6e),e(l6e,X0r),e(So,V0r),e(So,$n),e($n,z0r),e($n,i6e),e(i6e,W0r),e($n,Q0r),e($n,d6e),e(d6e,H0r),e($n,U0r),e($n,c6e),e(c6e,J0r),e($n,Y0r),e(So,K0r),e(So,Te),e(Te,SM),e(SM,f6e),e(f6e,Z0r),e(SM,eLr),e(SM,xz),e(xz,oLr),e(SM,rLr),e(Te,tLr),e(Te,PM),e(PM,m6e),e(m6e,aLr),e(PM,nLr),e(PM,kz),e(kz,sLr),e(PM,lLr),e(Te,iLr),e(Te,$M),e($M,g6e),e(g6e,dLr),e($M,cLr),e($M,Rz),e(Rz,fLr),e($M,mLr),e(Te,gLr),e(Te,IM),e(IM,h6e),e(h6e,hLr),e(IM,pLr),e(IM,Sz),e(Sz,_Lr),e(IM,uLr),e(Te,bLr),e(Te,DM),e(DM,p6e),e(p6e,vLr),e(DM,TLr),e(DM,Pz),e(Pz,FLr),e(DM,CLr),e(Te,MLr),e(Te,NM),e(NM,_6e),e(_6e,ELr),e(NM,yLr),e(NM,$z),e($z,wLr),e(NM,ALr),e(Te,LLr),e(Te,jM),e(jM,u6e),e(u6e,BLr),e(jM,xLr),e(jM,Iz),e(Iz,kLr),e(jM,RLr),e(Te,SLr),e(Te,qM),e(qM,b6e),e(b6e,PLr),e(qM,$Lr),e(qM,Dz),e(Dz,ILr),e(qM,DLr),e(Te,NLr),e(Te,GM),e(GM,v6e),e(v6e,jLr),e(GM,qLr),e(GM,Nz),e(Nz,GLr),e(GM,OLr),e(Te,XLr),e(Te,OM),e(OM,T6e),e(T6e,VLr),e(OM,zLr),e(OM,jz),e(jz,WLr),e(OM,QLr),e(So,HLr),e(So,F6e),e(F6e,ULr),e(So,JLr),g(yL,So,null),b(c,TSe,u),b(c,Tf,u),e(Tf,XM),e(XM,C6e),g(wL,C6e,null),e(Tf,YLr),e(Tf,M6e),e(M6e,KLr),b(c,FSe,u),b(c,jr,u),g(AL,jr,null),e(jr,ZLr),e(jr,Ff),e(Ff,e7r),e(Ff,E6e),e(E6e,o7r),e(Ff,r7r),e(Ff,y6e),e(y6e,t7r),e(Ff,a7r),e(jr,n7r),e(jr,LL),e(LL,s7r),e(LL,w6e),e(w6e,l7r),e(LL,i7r),e(jr,d7r),e(jr,St),g(BL,St,null),e(St,c7r),e(St,A6e),e(A6e,f7r),e(St,m7r),e(St,Cf),e(Cf,g7r),e(Cf,L6e),e(L6e,h7r),e(Cf,p7r),e(Cf,B6e),e(B6e,_7r),e(Cf,u7r),e(St,b7r),e(St,x6e),e(x6e,v7r),e(St,T7r),g(xL,St,null),e(jr,F7r),e(jr,Po),g(kL,Po,null),e(Po,C7r),e(Po,k6e),e(k6e,M7r),e(Po,E7r),e(Po,In),e(In,y7r),e(In,R6e),e(R6e,w7r),e(In,A7r),e(In,S6e),e(S6e,L7r),e(In,B7r),e(In,P6e),e(P6e,x7r),e(In,k7r),e(Po,R7r),e(Po,Se),e(Se,VM),e(VM,$6e),e($6e,S7r),e(VM,P7r),e(VM,qz),e(qz,$7r),e(VM,I7r),e(Se,D7r),e(Se,zM),e(zM,I6e),e(I6e,N7r),e(zM,j7r),e(zM,Gz),e(Gz,q7r),e(zM,G7r),e(Se,O7r),e(Se,WM),e(WM,D6e),e(D6e,X7r),e(WM,V7r),e(WM,Oz),e(Oz,z7r),e(WM,W7r),e(Se,Q7r),e(Se,QM),e(QM,N6e),e(N6e,H7r),e(QM,U7r),e(QM,Xz),e(Xz,J7r),e(QM,Y7r),e(Se,K7r),e(Se,HM),e(HM,j6e),e(j6e,Z7r),e(HM,e8r),e(HM,Vz),e(Vz,o8r),e(HM,r8r),e(Se,t8r),e(Se,UM),e(UM,q6e),e(q6e,a8r),e(UM,n8r),e(UM,zz),e(zz,s8r),e(UM,l8r),e(Se,i8r),e(Se,JM),e(JM,G6e),e(G6e,d8r),e(JM,c8r),e(JM,Wz),e(Wz,f8r),e(JM,m8r),e(Se,g8r),e(Se,YM),e(YM,O6e),e(O6e,h8r),e(YM,p8r),e(YM,Qz),e(Qz,_8r),e(YM,u8r),e(Po,b8r),e(Po,X6e),e(X6e,v8r),e(Po,T8r),g(RL,Po,null),b(c,CSe,u),b(c,Mf,u),e(Mf,KM),e(KM,V6e),g(SL,V6e,null),e(Mf,F8r),e(Mf,z6e),e(z6e,C8r),b(c,MSe,u),b(c,qr,u),g(PL,qr,null),e(qr,M8r),e(qr,Ef),e(Ef,E8r),e(Ef,W6e),e(W6e,y8r),e(Ef,w8r),e(Ef,Q6e),e(Q6e,A8r),e(Ef,L8r),e(qr,B8r),e(qr,$L),e($L,x8r),e($L,H6e),e(H6e,k8r),e($L,R8r),e(qr,S8r),e(qr,Pt),g(IL,Pt,null),e(Pt,P8r),e(Pt,U6e),e(U6e,$8r),e(Pt,I8r),e(Pt,yf),e(yf,D8r),e(yf,J6e),e(J6e,N8r),e(yf,j8r),e(yf,Y6e),e(Y6e,q8r),e(yf,G8r),e(Pt,O8r),e(Pt,K6e),e(K6e,X8r),e(Pt,V8r),g(DL,Pt,null),e(qr,z8r),e(qr,$o),g(NL,$o,null),e($o,W8r),e($o,Z6e),e(Z6e,Q8r),e($o,H8r),e($o,Dn),e(Dn,U8r),e(Dn,eTe),e(eTe,J8r),e(Dn,Y8r),e(Dn,oTe),e(oTe,K8r),e(Dn,Z8r),e(Dn,rTe),e(rTe,eBr),e(Dn,oBr),e($o,rBr),e($o,Pe),e(Pe,ZM),e(ZM,tTe),e(tTe,tBr),e(ZM,aBr),e(ZM,Hz),e(Hz,nBr),e(ZM,sBr),e(Pe,lBr),e(Pe,e4),e(e4,aTe),e(aTe,iBr),e(e4,dBr),e(e4,Uz),e(Uz,cBr),e(e4,fBr),e(Pe,mBr),e(Pe,o4),e(o4,nTe),e(nTe,gBr),e(o4,hBr),e(o4,Jz),e(Jz,pBr),e(o4,_Br),e(Pe,uBr),e(Pe,r4),e(r4,sTe),e(sTe,bBr),e(r4,vBr),e(r4,Yz),e(Yz,TBr),e(r4,FBr),e(Pe,CBr),e(Pe,t4),e(t4,lTe),e(lTe,MBr),e(t4,EBr),e(t4,Kz),e(Kz,yBr),e(t4,wBr),e(Pe,ABr),e(Pe,a4),e(a4,iTe),e(iTe,LBr),e(a4,BBr),e(a4,Zz),e(Zz,xBr),e(a4,kBr),e(Pe,RBr),e(Pe,n4),e(n4,dTe),e(dTe,SBr),e(n4,PBr),e(n4,eW),e(eW,$Br),e(n4,IBr),e(Pe,DBr),e(Pe,s4),e(s4,cTe),e(cTe,NBr),e(s4,jBr),e(s4,oW),e(oW,qBr),e(s4,GBr),e($o,OBr),e($o,fTe),e(fTe,XBr),e($o,VBr),g(jL,$o,null),b(c,ESe,u),b(c,wf,u),e(wf,l4),e(l4,mTe),g(qL,mTe,null),e(wf,zBr),e(wf,gTe),e(gTe,WBr),b(c,ySe,u),b(c,Gr,u),g(GL,Gr,null),e(Gr,QBr),e(Gr,Af),e(Af,HBr),e(Af,hTe),e(hTe,UBr),e(Af,JBr),e(Af,pTe),e(pTe,YBr),e(Af,KBr),e(Gr,ZBr),e(Gr,OL),e(OL,exr),e(OL,_Te),e(_Te,oxr),e(OL,rxr),e(Gr,txr),e(Gr,$t),g(XL,$t,null),e($t,axr),e($t,uTe),e(uTe,nxr),e($t,sxr),e($t,Lf),e(Lf,lxr),e(Lf,bTe),e(bTe,ixr),e(Lf,dxr),e(Lf,vTe),e(vTe,cxr),e(Lf,fxr),e($t,mxr),e($t,TTe),e(TTe,gxr),e($t,hxr),g(VL,$t,null),e(Gr,pxr),e(Gr,Io),g(zL,Io,null),e(Io,_xr),e(Io,FTe),e(FTe,uxr),e(Io,bxr),e(Io,Nn),e(Nn,vxr),e(Nn,CTe),e(CTe,Txr),e(Nn,Fxr),e(Nn,MTe),e(MTe,Cxr),e(Nn,Mxr),e(Nn,ETe),e(ETe,Exr),e(Nn,yxr),e(Io,wxr),e(Io,yTe),e(yTe,i4),e(i4,wTe),e(wTe,Axr),e(i4,Lxr),e(i4,rW),e(rW,Bxr),e(i4,xxr),e(Io,kxr),e(Io,ATe),e(ATe,Rxr),e(Io,Sxr),g(WL,Io,null),b(c,wSe,u),b(c,Bf,u),e(Bf,d4),e(d4,LTe),g(QL,LTe,null),e(Bf,Pxr),e(Bf,BTe),e(BTe,$xr),b(c,ASe,u),b(c,Or,u),g(HL,Or,null),e(Or,Ixr),e(Or,xf),e(xf,Dxr),e(xf,xTe),e(xTe,Nxr),e(xf,jxr),e(xf,kTe),e(kTe,qxr),e(xf,Gxr),e(Or,Oxr),e(Or,UL),e(UL,Xxr),e(UL,RTe),e(RTe,Vxr),e(UL,zxr),e(Or,Wxr),e(Or,It),g(JL,It,null),e(It,Qxr),e(It,STe),e(STe,Hxr),e(It,Uxr),e(It,kf),e(kf,Jxr),e(kf,PTe),e(PTe,Yxr),e(kf,Kxr),e(kf,$Te),e($Te,Zxr),e(kf,ekr),e(It,okr),e(It,ITe),e(ITe,rkr),e(It,tkr),g(YL,It,null),e(Or,akr),e(Or,Do),g(KL,Do,null),e(Do,nkr),e(Do,DTe),e(DTe,skr),e(Do,lkr),e(Do,jn),e(jn,ikr),e(jn,NTe),e(NTe,dkr),e(jn,ckr),e(jn,jTe),e(jTe,fkr),e(jn,mkr),e(jn,qTe),e(qTe,gkr),e(jn,hkr),e(Do,pkr),e(Do,ZL),e(ZL,c4),e(c4,GTe),e(GTe,_kr),e(c4,ukr),e(c4,tW),e(tW,bkr),e(c4,vkr),e(ZL,Tkr),e(ZL,f4),e(f4,OTe),e(OTe,Fkr),e(f4,Ckr),e(f4,aW),e(aW,Mkr),e(f4,Ekr),e(Do,ykr),e(Do,XTe),e(XTe,wkr),e(Do,Akr),g(e7,Do,null),b(c,LSe,u),b(c,Rf,u),e(Rf,m4),e(m4,VTe),g(o7,VTe,null),e(Rf,Lkr),e(Rf,zTe),e(zTe,Bkr),b(c,BSe,u),b(c,Xr,u),g(r7,Xr,null),e(Xr,xkr),e(Xr,Sf),e(Sf,kkr),e(Sf,WTe),e(WTe,Rkr),e(Sf,Skr),e(Sf,QTe),e(QTe,Pkr),e(Sf,$kr),e(Xr,Ikr),e(Xr,t7),e(t7,Dkr),e(t7,HTe),e(HTe,Nkr),e(t7,jkr),e(Xr,qkr),e(Xr,Dt),g(a7,Dt,null),e(Dt,Gkr),e(Dt,UTe),e(UTe,Okr),e(Dt,Xkr),e(Dt,Pf),e(Pf,Vkr),e(Pf,JTe),e(JTe,zkr),e(Pf,Wkr),e(Pf,YTe),e(YTe,Qkr),e(Pf,Hkr),e(Dt,Ukr),e(Dt,KTe),e(KTe,Jkr),e(Dt,Ykr),g(n7,Dt,null),e(Xr,Kkr),e(Xr,No),g(s7,No,null),e(No,Zkr),e(No,ZTe),e(ZTe,eRr),e(No,oRr),e(No,qn),e(qn,rRr),e(qn,eFe),e(eFe,tRr),e(qn,aRr),e(qn,oFe),e(oFe,nRr),e(qn,sRr),e(qn,rFe),e(rFe,lRr),e(qn,iRr),e(No,dRr),e(No,tFe),e(tFe,g4),e(g4,aFe),e(aFe,cRr),e(g4,fRr),e(g4,nW),e(nW,mRr),e(g4,gRr),e(No,hRr),e(No,nFe),e(nFe,pRr),e(No,_Rr),g(l7,No,null),xSe=!0},p(c,[u]){const i7={};u&2&&(i7.$$scope={dirty:u,ctx:c}),Of.$set(i7);const sFe={};u&2&&(sFe.$$scope={dirty:u,ctx:c}),Rh.$set(sFe);const lFe={};u&2&&(lFe.$$scope={dirty:u,ctx:c}),Xh.$set(lFe)},i(c){xSe||(h(me.$$.fragment,c),h(qa.$$.fragment,c),h(uE.$$.fragment,c),h(bE.$$.fragment,c),h(Of.$$.fragment,c),h(vE.$$.fragment,c),h(TE.$$.fragment,c),h(ME.$$.fragment,c),h(EE.$$.fragment,c),h(yE.$$.fragment,c),h(wE.$$.fragment,c),h(AE.$$.fragment,c),h(xE.$$.fragment,c),h(kE.$$.fragment,c),h(RE.$$.fragment,c),h(SE.$$.fragment,c),h(PE.$$.fragment,c),h(DE.$$.fragment,c),h(Rh.$$.fragment,c),h(NE.$$.fragment,c),h(jE.$$.fragment,c),h(qE.$$.fragment,c),h(GE.$$.fragment,c),h(VE.$$.fragment,c),h(Xh.$$.fragment,c),h(zE.$$.fragment,c),h(WE.$$.fragment,c),h(QE.$$.fragment,c),h(HE.$$.fragment,c),h(JE.$$.fragment,c),h(YE.$$.fragment,c),h(KE.$$.fragment,c),h(ZE.$$.fragment,c),h(e5.$$.fragment,c),h(o5.$$.fragment,c),h(t5.$$.fragment,c),h(a5.$$.fragment,c),h(n5.$$.fragment,c),h(s5.$$.fragment,c),h(l5.$$.fragment,c),h(i5.$$.fragment,c),h(c5.$$.fragment,c),h(f5.$$.fragment,c),h(m5.$$.fragment,c),h(g5.$$.fragment,c),h(h5.$$.fragment,c),h(p5.$$.fragment,c),h(u5.$$.fragment,c),h(b5.$$.fragment,c),h(v5.$$.fragment,c),h(T5.$$.fragment,c),h(F5.$$.fragment,c),h(C5.$$.fragment,c),h(E5.$$.fragment,c),h(y5.$$.fragment,c),h(w5.$$.fragment,c),h(A5.$$.fragment,c),h(L5.$$.fragment,c),h(B5.$$.fragment,c),h(k5.$$.fragment,c),h(R5.$$.fragment,c),h(S5.$$.fragment,c),h(P5.$$.fragment,c),h($5.$$.fragment,c),h(I5.$$.fragment,c),h(N5.$$.fragment,c),h(j5.$$.fragment,c),h(q5.$$.fragment,c),h(G5.$$.fragment,c),h(O5.$$.fragment,c),h(X5.$$.fragment,c),h(z5.$$.fragment,c),h(W5.$$.fragment,c),h(Q5.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(J5.$$.fragment,c),h(K5.$$.fragment,c),h(Z5.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(Fy.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(Ly.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(Dy.$$.fragment,c),h(Ny.$$.fragment,c),h(qy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Cw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Bw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h(Iw.$$.fragment,c),h(Dw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(qw.$$.fragment,c),h(Gw.$$.fragment,c),h(Xw.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(MA.$$.fragment,c),h(yA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(RA.$$.fragment,c),h(SA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(DA.$$.fragment,c),h(jA.$$.fragment,c),h(qA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(WA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(T0.$$.fragment,c),h(F0.$$.fragment,c),h(C0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(y0.$$.fragment,c),h(A0.$$.fragment,c),h(L0.$$.fragment,c),h(B0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(R0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(D0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(X0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(CL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(yL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(BL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(RL.$$.fragment,c),h(SL.$$.fragment,c),h(PL.$$.fragment,c),h(IL.$$.fragment,c),h(DL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(qL.$$.fragment,c),h(GL.$$.fragment,c),h(XL.$$.fragment,c),h(VL.$$.fragment,c),h(zL.$$.fragment,c),h(WL.$$.fragment,c),h(QL.$$.fragment,c),h(HL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(e7.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(a7.$$.fragment,c),h(n7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),xSe=!0)},o(c){p(me.$$.fragment,c),p(qa.$$.fragment,c),p(uE.$$.fragment,c),p(bE.$$.fragment,c),p(Of.$$.fragment,c),p(vE.$$.fragment,c),p(TE.$$.fragment,c),p(ME.$$.fragment,c),p(EE.$$.fragment,c),p(yE.$$.fragment,c),p(wE.$$.fragment,c),p(AE.$$.fragment,c),p(xE.$$.fragment,c),p(kE.$$.fragment,c),p(RE.$$.fragment,c),p(SE.$$.fragment,c),p(PE.$$.fragment,c),p(DE.$$.fragment,c),p(Rh.$$.fragment,c),p(NE.$$.fragment,c),p(jE.$$.fragment,c),p(qE.$$.fragment,c),p(GE.$$.fragment,c),p(VE.$$.fragment,c),p(Xh.$$.fragment,c),p(zE.$$.fragment,c),p(WE.$$.fragment,c),p(QE.$$.fragment,c),p(HE.$$.fragment,c),p(JE.$$.fragment,c),p(YE.$$.fragment,c),p(KE.$$.fragment,c),p(ZE.$$.fragment,c),p(e5.$$.fragment,c),p(o5.$$.fragment,c),p(t5.$$.fragment,c),p(a5.$$.fragment,c),p(n5.$$.fragment,c),p(s5.$$.fragment,c),p(l5.$$.fragment,c),p(i5.$$.fragment,c),p(c5.$$.fragment,c),p(f5.$$.fragment,c),p(m5.$$.fragment,c),p(g5.$$.fragment,c),p(h5.$$.fragment,c),p(p5.$$.fragment,c),p(u5.$$.fragment,c),p(b5.$$.fragment,c),p(v5.$$.fragment,c),p(T5.$$.fragment,c),p(F5.$$.fragment,c),p(C5.$$.fragment,c),p(E5.$$.fragment,c),p(y5.$$.fragment,c),p(w5.$$.fragment,c),p(A5.$$.fragment,c),p(L5.$$.fragment,c),p(B5.$$.fragment,c),p(k5.$$.fragment,c),p(R5.$$.fragment,c),p(S5.$$.fragment,c),p(P5.$$.fragment,c),p($5.$$.fragment,c),p(I5.$$.fragment,c),p(N5.$$.fragment,c),p(j5.$$.fragment,c),p(q5.$$.fragment,c),p(G5.$$.fragment,c),p(O5.$$.fragment,c),p(X5.$$.fragment,c),p(z5.$$.fragment,c),p(W5.$$.fragment,c),p(Q5.$$.fragment,c),p(H5.$$.fragment,c),p(U5.$$.fragment,c),p(J5.$$.fragment,c),p(K5.$$.fragment,c),p(Z5.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(Fy.$$.fragment,c),p(Cy.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(Ly.$$.fragment,c),p(By.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(Dy.$$.fragment,c),p(Ny.$$.fragment,c),p(qy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Xy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Cw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(yw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Bw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Rw.$$.fragment,c),p(Sw.$$.fragment,c),p(Pw.$$.fragment,c),p(Iw.$$.fragment,c),p(Dw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(qw.$$.fragment,c),p(Gw.$$.fragment,c),p(Xw.$$.fragment,c),p(Vw.$$.fragment,c),p(zw.$$.fragment,c),p(Ww.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(FA.$$.fragment,c),p(CA.$$.fragment,c),p(MA.$$.fragment,c),p(yA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(LA.$$.fragment,c),p(BA.$$.fragment,c),p(xA.$$.fragment,c),p(RA.$$.fragment,c),p(SA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(DA.$$.fragment,c),p(jA.$$.fragment,c),p(qA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(XA.$$.fragment,c),p(VA.$$.fragment,c),p(WA.$$.fragment,c),p(QA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(T0.$$.fragment,c),p(F0.$$.fragment,c),p(C0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(y0.$$.fragment,c),p(A0.$$.fragment,c),p(L0.$$.fragment,c),p(B0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(R0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(D0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(X0.$$.fragment,c),p(V0.$$.fragment,c),p(z0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(CL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(yL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(BL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(RL.$$.fragment,c),p(SL.$$.fragment,c),p(PL.$$.fragment,c),p(IL.$$.fragment,c),p(DL.$$.fragment,c),p(NL.$$.fragment,c),p(jL.$$.fragment,c),p(qL.$$.fragment,c),p(GL.$$.fragment,c),p(XL.$$.fragment,c),p(VL.$$.fragment,c),p(zL.$$.fragment,c),p(WL.$$.fragment,c),p(QL.$$.fragment,c),p(HL.$$.fragment,c),p(JL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(e7.$$.fragment,c),p(o7.$$.fragment,c),p(r7.$$.fragment,c),p(a7.$$.fragment,c),p(n7.$$.fragment,c),p(s7.$$.fragment,c),p(l7.$$.fragment,c),xSe=!1},d(c){t(Z),c&&t(io),c&&t(de),_(me),c&&t(Df),c&&t(fa),c&&t(Be),c&&t(co),c&&t(jf),_(qa,c),c&&t(fo),c&&t(_e),c&&t(zo),c&&t(Ga),c&&t(Bke),c&&t(Xi),_(uE),c&&t(xke),c&&t(zn),c&&t(kke),_(bE,c),c&&t(Rke),c&&t(c8),c&&t(Ske),_(Of,c),c&&t(Pke),c&&t(Vi),_(vE),c&&t($ke),c&&t(Wo),_(TE),_(ME),_(EE),_(yE),c&&t(Ike),c&&t(Wi),_(wE),c&&t(Dke),c&&t(Qo),_(AE),_(xE),_(kE),_(RE),c&&t(Nke),c&&t(Qi),_(SE),c&&t(jke),c&&t(Ho),_(PE),_(DE),_(Rh),_(NE),_(jE),c&&t(qke),c&&t(Hi),_(qE),c&&t(Gke),c&&t(Uo),_(GE),_(VE),_(Xh),_(zE),_(WE),c&&t(Oke),c&&t(Ji),_(QE),c&&t(Xke),c&&t(Jo),_(HE),_(JE),_(YE),_(KE),_(ZE),c&&t(Vke),c&&t(Zi),_(e5),c&&t(zke),c&&t(Yo),_(o5),_(t5),_(a5),_(n5),_(s5),c&&t(Wke),c&&t(rd),_(l5),c&&t(Qke),c&&t(Ko),_(i5),_(c5),_(f5),_(m5),_(g5),c&&t(Hke),c&&t(nd),_(h5),c&&t(Uke),c&&t(Zo),_(p5),_(u5),_(b5),_(v5),_(T5),c&&t(Jke),c&&t(id),_(F5),c&&t(Yke),c&&t(er),_(C5),_(E5),_(y5),_(w5),_(A5),c&&t(Kke),c&&t(fd),_(L5),c&&t(Zke),c&&t(or),_(B5),_(k5),_(R5),_(S5),_(P5),c&&t(eRe),c&&t(hd),_($5),c&&t(oRe),c&&t(rr),_(I5),_(N5),_(j5),_(q5),_(G5),c&&t(rRe),c&&t(ud),_(O5),c&&t(tRe),c&&t(tr),_(X5),_(z5),_(W5),_(Q5),_(H5),c&&t(aRe),c&&t(Td),_(U5),c&&t(nRe),c&&t(ar),_(J5),_(K5),_(Z5),_(ey),_(oy),c&&t(sRe),c&&t(Md),_(ry),c&&t(lRe),c&&t(nr),_(ty),_(ny),_(sy),_(ly),_(iy),c&&t(iRe),c&&t(wd),_(dy),c&&t(dRe),c&&t(sr),_(cy),_(my),_(gy),_(hy),_(py),c&&t(cRe),c&&t(Bd),_(_y),c&&t(fRe),c&&t(lr),_(uy),_(vy),_(Ty),_(Fy),_(Cy),c&&t(mRe),c&&t(Rd),_(My),c&&t(gRe),c&&t(ir),_(Ey),_(wy),_(Ay),_(Ly),_(By),c&&t(hRe),c&&t($d),_(xy),c&&t(pRe),c&&t(dr),_(ky),_(Sy),_(Py),_($y),_(Iy),c&&t(_Re),c&&t(Nd),_(Dy),c&&t(uRe),c&&t(cr),_(Ny),_(qy),_(Gy),_(Oy),_(Xy),c&&t(bRe),c&&t(Gd),_(Vy),c&&t(vRe),c&&t(fr),_(zy),_(Qy),_(Hy),_(Uy),_(Jy),c&&t(TRe),c&&t(Vd),_(Yy),c&&t(FRe),c&&t(mr),_(Ky),_(ew),_(ow),_(rw),_(aw),c&&t(CRe),c&&t(Qd),_(nw),c&&t(MRe),c&&t(gr),_(sw),_(iw),_(dw),_(cw),_(fw),c&&t(ERe),c&&t(Jd),_(mw),c&&t(yRe),c&&t(hr),_(gw),_(pw),_(_w),_(uw),_(bw),c&&t(wRe),c&&t(ec),_(vw),c&&t(ARe),c&&t(pr),_(Tw),_(Cw),_(Mw),_(Ew),_(yw),c&&t(LRe),c&&t(tc),_(ww),c&&t(BRe),c&&t(_r),_(Aw),_(Bw),_(xw),_(kw),_(Rw),c&&t(xRe),c&&t(sc),_(Sw),c&&t(kRe),c&&t(ur),_(Pw),_(Iw),_(Dw),_(Nw),_(jw),c&&t(RRe),c&&t(cc),_(qw),c&&t(SRe),c&&t(br),_(Gw),_(Xw),_(Vw),_(zw),_(Ww),c&&t(PRe),c&&t(gc),_(Qw),c&&t($Re),c&&t(vr),_(Hw),_(Jw),_(Yw),_(Kw),_(Zw),c&&t(IRe),c&&t(_c),_(eA),c&&t(DRe),c&&t(Tr),_(oA),_(tA),_(aA),_(nA),_(sA),c&&t(NRe),c&&t(vc),_(lA),c&&t(jRe),c&&t(Fr),_(iA),_(cA),_(fA),_(mA),_(gA),c&&t(qRe),c&&t(Cc),_(hA),c&&t(GRe),c&&t(Cr),_(pA),_(uA),_(bA),_(vA),_(FA),c&&t(ORe),c&&t(yc),_(CA),c&&t(XRe),c&&t(Mr),_(MA),_(yA),_(wA),_(AA),_(LA),c&&t(VRe),c&&t(Lc),_(BA),c&&t(zRe),c&&t(Er),_(xA),_(RA),_(SA),_(PA),_($A),c&&t(WRe),c&&t(kc),_(IA),c&&t(QRe),c&&t(yr),_(DA),_(jA),_(qA),_(GA),_(OA),c&&t(HRe),c&&t(Pc),_(XA),c&&t(URe),c&&t(wr),_(VA),_(WA),_(QA),_(HA),_(UA),c&&t(JRe),c&&t(Dc),_(JA),c&&t(YRe),c&&t(Ar),_(YA),_(ZA),_(e0),_(o0),_(r0),c&&t(KRe),c&&t(qc),_(t0),c&&t(ZRe),c&&t(Lr),_(a0),_(s0),_(l0),_(i0),_(d0),c&&t(eSe),c&&t(Xc),_(c0),c&&t(oSe),c&&t(Br),_(f0),_(g0),_(h0),_(p0),_(_0),c&&t(rSe),c&&t(Wc),_(u0),c&&t(tSe),c&&t(xr),_(b0),_(T0),_(F0),_(C0),_(M0),c&&t(aSe),c&&t(Uc),_(E0),c&&t(nSe),c&&t(kr),_(y0),_(A0),_(L0),_(B0),_(x0),c&&t(sSe),c&&t(Kc),_(k0),c&&t(lSe),c&&t(Rr),_(R0),_(P0),_($0),_(I0),_(D0),c&&t(iSe),c&&t(of),_(N0),c&&t(dSe),c&&t(Sr),_(j0),_(G0),_(O0),_(X0),_(V0),c&&t(cSe),c&&t(af),_(z0),c&&t(fSe),c&&t(Pr),_(W0),_(H0),_(U0),_(J0),_(Y0),c&&t(mSe),c&&t(lf),_(K0),c&&t(gSe),c&&t($r),_(Z0),_(oL),_(rL),_(tL),_(aL),c&&t(hSe),c&&t(ff),_(nL),c&&t(pSe),c&&t(Ir),_(sL),_(iL),_(dL),_(cL),_(fL),c&&t(_Se),c&&t(hf),_(mL),c&&t(uSe),c&&t(Dr),_(gL),_(pL),_(_L),_(uL),_(bL),c&&t(bSe),c&&t(uf),_(vL),c&&t(vSe),c&&t(Nr),_(TL),_(CL),_(ML),_(EL),_(yL),c&&t(TSe),c&&t(Tf),_(wL),c&&t(FSe),c&&t(jr),_(AL),_(BL),_(xL),_(kL),_(RL),c&&t(CSe),c&&t(Mf),_(SL),c&&t(MSe),c&&t(qr),_(PL),_(IL),_(DL),_(NL),_(jL),c&&t(ESe),c&&t(wf),_(qL),c&&t(ySe),c&&t(Gr),_(GL),_(XL),_(VL),_(zL),_(WL),c&&t(wSe),c&&t(Bf),_(QL),c&&t(ASe),c&&t(Or),_(HL),_(JL),_(YL),_(KL),_(e7),c&&t(LSe),c&&t(Rf),_(o7),c&&t(BSe),c&&t(Xr),_(r7),_(a7),_(n7),_(s7),_(l7)}}}const DMt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function NMt(If){return RMt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class VMt extends LMt{constructor(Z){super();BMt(this,Z,NMt,IMt,xMt,{})}}export{VMt as default,DMt as metadata};
