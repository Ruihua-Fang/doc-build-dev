import{S as gv,i as vv,s as Ev,e as t,k as c,w as d,t as r,M as $v,c as n,d as a,m as h,a as l,x as f,h as o,b as u,N as bv,F as e,g as i,y as b,q as j,o as _,B as g,L as jv}from"../chunks/vendor-6b77c823.js";import{T as wv}from"../chunks/Tip-39098574.js";import{Y as yv}from"../chunks/Youtube-5c6e11e6.js";import{I as T}from"../chunks/IconCopyLink-7a11ce68.js";import{C as w}from"../chunks/CodeBlock-3a8b25a8.js";import{D as kv}from"../chunks/DocNotebookDropdown-b2654249.js";import{F as xv,M as _v}from"../chunks/Markdown-4489c441.js";function Tv(z){let v,y,m,k,q;return{c(){v=t("p"),y=r("If you plan on using a pretrained model, it\u2019s important to use the associated pretrained tokenizer. This ensures the text is split the same way as the pretraining corpus, and uses the same corresponding tokens-to-index (usually referrred to as the "),m=t("em"),k=r("vocab"),q=r(") during pretraining.")},l(A){v=n(A,"P",{});var B=l(v);y=o(B,"If you plan on using a pretrained model, it\u2019s important to use the associated pretrained tokenizer. This ensures the text is split the same way as the pretraining corpus, and uses the same corresponding tokens-to-index (usually referrred to as the "),m=n(B,"EM",{});var Ms=l(m);k=o(Ms,"vocab"),Ms.forEach(a),q=o(B,") during pretraining."),B.forEach(a)},m(A,B){i(A,v,B),e(v,y),e(v,m),e(m,k),e(v,q)},d(A){A&&a(v)}}}function qv(z){let v,y;return v=new w({props:{code:`batch_sentences = [
    "But what about second breakfast?",
    "Don't think he knows about second breakfast, Pip.",
    "What about elevensies?",
]
encoded_input = tokenizer(batch, padding=True, truncation=True, return_tensors="pt")
print(encoded_input)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>batch_sentences = [
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;But what about second breakfast?&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Don&#x27;t think he knows about second breakfast, Pip.&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;What about elevensies?&quot;</span>,
<span class="hljs-meta">... </span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_input = tokenizer(batch, padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(encoded_input)
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([[  <span class="hljs-number">101</span>,   <span class="hljs-number">153</span>,  <span class="hljs-number">7719</span>, <span class="hljs-number">21490</span>,  <span class="hljs-number">1122</span>,  <span class="hljs-number">1114</span>,  <span class="hljs-number">9582</span>,  <span class="hljs-number">1623</span>,   <span class="hljs-number">102</span>],
                      [  <span class="hljs-number">101</span>,  <span class="hljs-number">5226</span>,  <span class="hljs-number">1122</span>,  <span class="hljs-number">9649</span>,  <span class="hljs-number">1199</span>,  <span class="hljs-number">2610</span>,  <span class="hljs-number">1236</span>,   <span class="hljs-number">102</span>,     <span class="hljs-number">0</span>]]), 
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
                           [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]]), 
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],
                           [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]])}`}}),{c(){d(v.$$.fragment)},l(m){f(v.$$.fragment,m)},m(m,k){b(v,m,k),y=!0},p:jv,i(m){y||(j(v.$$.fragment,m),y=!0)},o(m){_(v.$$.fragment,m),y=!1},d(m){g(v,m)}}}function Dv(z){let v,y;return v=new _v({props:{$$slots:{default:[qv]},$$scope:{ctx:z}}}),{c(){d(v.$$.fragment)},l(m){f(v.$$.fragment,m)},m(m,k){b(v,m,k),y=!0},p(m,k){const q={};k&2&&(q.$$scope={dirty:k,ctx:m}),v.$set(q)},i(m){y||(j(v.$$.fragment,m),y=!0)},o(m){_(v.$$.fragment,m),y=!1},d(m){g(v,m)}}}function Av(z){let v,y;return v=new w({props:{code:`batch_sentences = [
    "But what about second breakfast?",
    "Don't think he knows about second breakfast, Pip.",
    "What about elevensies?",
]
encoded_input = tokenizer(batch, padding=True, truncation=True, return_tensors="tf")
print(encoded_input)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>batch_sentences = [
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;But what about second breakfast?&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Don&#x27;t think he knows about second breakfast, Pip.&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;What about elevensies?&quot;</span>,
<span class="hljs-meta">... </span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_input = tokenizer(batch, padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(encoded_input)
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: &lt;tf.Tensor: shape=(<span class="hljs-number">2</span>, <span class="hljs-number">9</span>), dtype=int32, numpy=
array([[  <span class="hljs-number">101</span>,   <span class="hljs-number">153</span>,  <span class="hljs-number">7719</span>, <span class="hljs-number">21490</span>,  <span class="hljs-number">1122</span>,  <span class="hljs-number">1114</span>,  <span class="hljs-number">9582</span>,  <span class="hljs-number">1623</span>,   <span class="hljs-number">102</span>],
       [  <span class="hljs-number">101</span>,  <span class="hljs-number">5226</span>,  <span class="hljs-number">1122</span>,  <span class="hljs-number">9649</span>,  <span class="hljs-number">1199</span>,  <span class="hljs-number">2610</span>,  <span class="hljs-number">1236</span>,   <span class="hljs-number">102</span>,     <span class="hljs-number">0</span>]],
      dtype=int32)&gt;, 
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: &lt;tf.Tensor: shape=(<span class="hljs-number">2</span>, <span class="hljs-number">9</span>), dtype=int32, numpy=
array([[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
       [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]], dtype=int32)&gt;, 
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: &lt;tf.Tensor: shape=(<span class="hljs-number">2</span>, <span class="hljs-number">9</span>), dtype=int32, numpy=
array([[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],
       [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]], dtype=int32)&gt;}`}}),{c(){d(v.$$.fragment)},l(m){f(v.$$.fragment,m)},m(m,k){b(v,m,k),y=!0},p:jv,i(m){y||(j(v.$$.fragment,m),y=!0)},o(m){_(v.$$.fragment,m),y=!1},d(m){g(v,m)}}}function zv(z){let v,y;return v=new _v({props:{$$slots:{default:[Av]},$$scope:{ctx:z}}}),{c(){d(v.$$.fragment)},l(m){f(v.$$.fragment,m)},m(m,k){b(v,m,k),y=!0},p(m,k){const q={};k&2&&(q.$$scope={dirty:k,ctx:m}),v.$set(q)},i(m){y||(j(v.$$.fragment,m),y=!0)},o(m){_(v.$$.fragment,m),y=!1},d(m){g(v,m)}}}function Pv(z){let v,y,m,k,q,A,B,Ms,pi,Uo,Le,Vo,tt,ci,Ko,J,Rn,hi,ii,Fn,ui,mi,Hn,di,Qo,rs,Us,Bn,Se,fi,Jn,bi,Xo,Ne,Zo,W,ji,nt,_i,gi,Wn,vi,Ei,sp,Vs,ep,Y,$i,lt,wi,yi,Yn,ki,xi,ap,os,Ks,Gn,Ie,Ti,Mn,qi,tp,Qs,Di,rt,Ai,zi,np,Re,lp,ot,Pi,rp,Fe,op,pt,Ci,pp,G,ct,ht,Oi,Li,Si,it,ut,Ni,Ii,Ri,mt,dt,Fi,Hi,cp,Xs,Bi,Un,Ji,Wi,hp,He,ip,M,Yi,Vn,Gi,Mi,Kn,Ui,Vi,up,ft,Ki,mp,Be,dp,ps,Zs,Qn,Je,Qi,Xn,Xi,fp,se,Zi,Zn,su,eu,bp,U,au,sl,tu,nu,el,lu,ru,jp,We,_p,ee,ou,al,pu,cu,gp,cs,ae,tl,Ye,hu,nl,iu,vp,bt,uu,Ep,V,mu,ll,du,fu,rl,bu,ju,$p,Ge,wp,hs,te,ol,Me,_u,pl,gu,yp,jt,vu,kp,P,Eu,cl,$u,wu,hl,yu,ku,il,xu,Tu,xp,ne,Tp,is,le,ul,Ue,qu,ml,Du,qp,re,Au,_t,zu,Pu,Dp,Ve,Ap,K,Cu,Ke,Ou,Lu,Qe,Su,Nu,zp,Xe,Pp,Q,Iu,dl,Ru,Fu,fl,Hu,Bu,Cp,Ze,Op,gt,Ju,Lp,X,vt,bl,Wu,Yu,Gu,Et,jl,Mu,Uu,Vu,$t,_l,Ku,Qu,Sp,us,oe,gl,sa,Xu,vl,Zu,Np,pe,sm,ea,em,am,Ip,ce,tm,aa,nm,lm,Rp,ta,Fp,wt,na,rm,la,El,om,pm,Hp,ra,Bp,oa,$l,cm,Jp,pa,Wp,he,hm,wl,im,um,Yp,ms,ie,yl,ca,mm,kl,dm,Gp,C,fm,xl,bm,jm,Tl,_m,gm,ql,vm,Em,Mp,ue,$m,yt,wm,ym,Up,ha,Vp,Z,km,Dl,xm,Tm,Al,qm,Dm,Kp,ia,Qp,ds,me,zl,ua,Am,Pl,zm,Xp,kt,Pm,Zp,ma,sc,xt,Cm,ec,da,ac,Tt,Om,tc,fa,nc,qt,Lm,lc,ba,rc,Dt,Sm,oc,fs,de,Cl,ja,Nm,Ol,Im,pc,At,Rm,cc,ss,Fm,_a,Hm,Bm,Ll,Jm,Wm,hc,ga,ic,fe,Ym,va,Sl,Gm,Mm,uc,Ea,mc,zt,Pt,K1,dc,bs,be,Nl,$a,Um,Il,Vm,fc,je,Km,Ct,Qm,Xm,bc,wa,jc,js,_e,Rl,ya,Zm,Fl,sd,_c,ge,ed,ka,Hl,ad,td,gc,Ot,R,nd,xa,Bl,ld,rd,Ta,Jl,od,pd,qa,Wl,cd,hd,vc,Da,Ec,Aa,_s,id,Lt,Yl,ud,md,Gl,dd,fd,$c,za,wc,Pa,Ca,bd,Oa,Ml,jd,_d,yc,La,kc,Sa,Na,gd,Ul,vd,Ed,xc,Ia,Tc,St,$d,qc,Ra,Dc,Nt,It,Q1,Ac,gs,ve,Vl,Fa,wd,Kl,yd,zc,Rt,kd,Pc,Ee,Ql,xd,Td,Xl,qd,Cc,$e,Dd,Ha,Ad,zd,Oc,Ba,Lc,es,Pd,Zl,Cd,Od,sr,Ld,Sd,Sc,Ja,Nc,as,Nd,er,Id,Rd,ar,Fd,Hd,Ic,Wa,Rc,we,Bd,Ft,Jd,Wd,Fc,Ya,Hc,vs,ye,tr,Ga,Yd,nr,Gd,Bc,Ht,Md,Jc,Ma,Wc,Bt,Es,Ud,lr,Vd,Kd,rr,Qd,Xd,Yc,Ua,Gc,Va,Ka,Zd,or,sf,ef,Mc,Qa,Uc,ts,af,pr,tf,nf,cr,lf,rf,Vc,Jt,of,Kc,$s,ke,hr,Xa,pf,ir,cf,Qc,O,hf,ur,uf,mf,mr,df,ff,dr,bf,jf,Xc,ns,Za,Wt,fr,_f,gf,vf,ws,xe,br,Ef,$f,jr,wf,yf,kf,L,_r,xf,Tf,gr,qf,Df,vr,Af,zf,Er,Pf,Cf,Of,Te,$r,Lf,Sf,wr,Nf,If,Rf,st,Yt,yr,Ff,Hf,Bf,F,D,kr,Jf,Wf,xr,Yf,Gf,Tr,Mf,Uf,qr,Vf,Kf,Dr,Qf,Xf,Zf,S,Ar,sb,eb,zr,ab,tb,Pr,nb,lb,Cr,rb,ob,pb,N,Or,cb,hb,Lr,ib,ub,Sr,mb,db,Nr,fb,bb,jb,qe,Ir,_b,gb,Rr,vb,Eb,$b,Fr,ls,Hr,wb,yb,Br,kb,xb,Jr,Tb,qb,Zc,x,Db,Wr,Ab,zb,Yr,Pb,Cb,Gr,Ob,Lb,Mr,Sb,Nb,Ur,Ib,Rb,sh,De,Vr,ys,Kr,Fb,Hb,Qr,Bb,Jb,Xr,Wb,Yb,E,ks,Zr,Gb,Mb,so,Ub,Vb,eo,ao,Kb,Qb,xs,eh,Xb,to,Zb,sj,Gt,no,ej,aj,tj,Ts,ah,nj,th,lj,lo,ro,rj,oj,qs,nh,pj,oo,cj,hj,po,co,ij,uj,Ds,lh,mj,ho,dj,fj,io,uo,bj,jj,As,mo,_j,gj,fo,vj,Ej,Mt,bo,$j,wj,yj,zs,rh,kj,oh,xj,jo,_o,Tj,qj,Ps,ph,Dj,go,Aj,zj,Ut,vo,Pj,Cj,Oj,Cs,ch,Lj,hh,Sj,Eo,$o,Nj,Ij,Os,ih,Rj,wo,Fj,Hj,Vt,yo,Bj,Jj,Wj,Ls,uh,Yj,mh,Gj,ko,xo,Mj,Uj,Ss,dh,Vj,To,Kj,Qj,qo,Xj,Zj,Ns,Do,s1,e1,Ao,a1,t1,Kt,zo,n1,l1,r1,Is,fh,o1,bh,p1,Po,Co,c1,h1,Rs,jh,i1,Oo,u1,m1,Qt,Lo,d1,f1,b1,Fs,_h,j1,gh,_1,So,No,g1,v1,Hs,vh,E1,Io,$1,w1,Ro,y1,k1,Bs,Eh,x1,Fo,T1,q1,Xt,Ho,D1,A1,z1,Js,$h,P1,wh,C1,Bo,Jo,O1,yh;return A=new T({}),Le=new kv({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Mixed",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/transformers_doc/preprocessing.ipynb"},{label:"PyTorch",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/transformers_doc/pytorch/preprocessing.ipynb"},{label:"TensorFlow",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/transformers_doc/tensorflow/preprocessing.ipynb"},{label:"Mixed",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/transformers_doc/preprocessing.ipynb"},{label:"PyTorch",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/transformers_doc/pytorch/preprocessing.ipynb"},{label:"TensorFlow",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/transformers_doc/tensorflow/preprocessing.ipynb"}]}}),Se=new T({}),Ne=new yv({props:{id:"Yffk5aydLzg"}}),Vs=new wv({props:{$$slots:{default:[Tv]},$$scope:{ctx:z}}}),Ie=new T({}),Re=new w({props:{code:`from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)`}}),Fe=new w({props:{code:`encoded_input = tokenizer("Do not meddle in the affairs of wizards, for they are subtle and quick to anger.")
print(encoded_input)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_input = tokenizer(<span class="hljs-string">&quot;Do not meddle in the affairs of wizards, for they are subtle and quick to anger.&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(encoded_input)
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: [<span class="hljs-number">101</span>, <span class="hljs-number">2079</span>, <span class="hljs-number">2025</span>, <span class="hljs-number">19960</span>, <span class="hljs-number">10362</span>, <span class="hljs-number">1999</span>, <span class="hljs-number">1996</span>, <span class="hljs-number">3821</span>, <span class="hljs-number">1997</span>, <span class="hljs-number">16657</span>, <span class="hljs-number">1010</span>, <span class="hljs-number">2005</span>, <span class="hljs-number">2027</span>, <span class="hljs-number">2024</span>, <span class="hljs-number">11259</span>, <span class="hljs-number">1998</span>, <span class="hljs-number">4248</span>, <span class="hljs-number">2000</span>, <span class="hljs-number">4963</span>, <span class="hljs-number">1012</span>, <span class="hljs-number">102</span>], 
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], 
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]}`}}),He=new w({props:{code:'tokenizer.decode(encoded_input["input_ids"])',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.decode(encoded_input[<span class="hljs-string">&quot;input_ids&quot;</span>])
<span class="hljs-string">&#x27;[CLS] Do not meddle in the affairs of wizards, for they are subtle and quick to anger. [SEP]&#x27;</span>`}}),Be=new w({props:{code:`batch_sentences = [
    "But what about second breakfast?",
    "Don't think he knows about second breakfast, Pip.",
    "What about elevensies?",
]
encoded_inputs = tokenizer(batch_sentences)
print(encoded_inputs)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>batch_sentences = [
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;But what about second breakfast?&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Don&#x27;t think he knows about second breakfast, Pip.&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;What about elevensies?&quot;</span>,
<span class="hljs-meta">... </span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_inputs = tokenizer(batch_sentences)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(encoded_inputs)
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: [[<span class="hljs-number">101</span>, <span class="hljs-number">1252</span>, <span class="hljs-number">1184</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">1248</span>, <span class="hljs-number">6462</span>, <span class="hljs-number">136</span>, <span class="hljs-number">102</span>], 
               [<span class="hljs-number">101</span>, <span class="hljs-number">1790</span>, <span class="hljs-number">112</span>, <span class="hljs-number">189</span>, <span class="hljs-number">1341</span>, <span class="hljs-number">1119</span>, <span class="hljs-number">3520</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">1248</span>, <span class="hljs-number">6462</span>, <span class="hljs-number">117</span>, <span class="hljs-number">21902</span>, <span class="hljs-number">1643</span>, <span class="hljs-number">119</span>, <span class="hljs-number">102</span>], 
               [<span class="hljs-number">101</span>, <span class="hljs-number">1327</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">5450</span>, <span class="hljs-number">23434</span>, <span class="hljs-number">136</span>, <span class="hljs-number">102</span>]], 
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], 
                    [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], 
                    [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]], 
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: [[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], 
                    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], 
                    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]]}`}}),Je=new T({}),We=new w({props:{code:`batch_sentences = [
    "But what about second breakfast?",
    "Don't think he knows about second breakfast, Pip.",
    "What about elevensies?",
]
encoded_input = tokenizer(batch_sentences, padding=True)
print(encoded_input)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>batch_sentences = [
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;But what about second breakfast?&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Don&#x27;t think he knows about second breakfast, Pip.&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;What about elevensies?&quot;</span>,
<span class="hljs-meta">... </span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_input = tokenizer(batch_sentences, padding=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(encoded_input)
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: [[<span class="hljs-number">101</span>, <span class="hljs-number">1252</span>, <span class="hljs-number">1184</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">1248</span>, <span class="hljs-number">6462</span>, <span class="hljs-number">136</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], 
               [<span class="hljs-number">101</span>, <span class="hljs-number">1790</span>, <span class="hljs-number">112</span>, <span class="hljs-number">189</span>, <span class="hljs-number">1341</span>, <span class="hljs-number">1119</span>, <span class="hljs-number">3520</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">1248</span>, <span class="hljs-number">6462</span>, <span class="hljs-number">117</span>, <span class="hljs-number">21902</span>, <span class="hljs-number">1643</span>, <span class="hljs-number">119</span>, <span class="hljs-number">102</span>], 
               [<span class="hljs-number">101</span>, <span class="hljs-number">1327</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">5450</span>, <span class="hljs-number">23434</span>, <span class="hljs-number">136</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]], 
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], 
                    [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], 
                    [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]], 
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: [[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], 
                    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], 
                    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]]}`}}),Ye=new T({}),Ge=new w({props:{code:`batch_sentences = [
    "But what about second breakfast?",
    "Don't think he knows about second breakfast, Pip.",
    "What about elevensies?",
]
encoded_input = tokenizer(batch_sentences, padding=True, truncation=True)
print(encoded_input)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>batch_sentences = [
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;But what about second breakfast?&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Don&#x27;t think he knows about second breakfast, Pip.&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;What about elevensies?&quot;</span>,
<span class="hljs-meta">... </span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_input = tokenizer(batch_sentences, padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(encoded_input)
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: [[<span class="hljs-number">101</span>, <span class="hljs-number">1252</span>, <span class="hljs-number">1184</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">1248</span>, <span class="hljs-number">6462</span>, <span class="hljs-number">136</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], 
               [<span class="hljs-number">101</span>, <span class="hljs-number">1790</span>, <span class="hljs-number">112</span>, <span class="hljs-number">189</span>, <span class="hljs-number">1341</span>, <span class="hljs-number">1119</span>, <span class="hljs-number">3520</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">1248</span>, <span class="hljs-number">6462</span>, <span class="hljs-number">117</span>, <span class="hljs-number">21902</span>, <span class="hljs-number">1643</span>, <span class="hljs-number">119</span>, <span class="hljs-number">102</span>], 
               [<span class="hljs-number">101</span>, <span class="hljs-number">1327</span>, <span class="hljs-number">1164</span>, <span class="hljs-number">5450</span>, <span class="hljs-number">23434</span>, <span class="hljs-number">136</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]], 
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], 
                    [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], 
                    [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]], 
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: [[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], 
                    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], 
                    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]]}`}}),Me=new T({}),ne=new xv({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[zv],pytorch:[Dv]},$$scope:{ctx:z}}}),Ue=new T({}),Ve=new w({props:{code:"pip install datasets",highlighted:"pip install datasets"}}),Xe=new w({props:{code:`from datasets import load_dataset, Audio

dataset = load_dataset("superb", "ks")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Audio

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;superb&quot;</span>, <span class="hljs-string">&quot;ks&quot;</span>)`}}),Ze=new w({props:{code:'dataset["train"][0]["audio"]',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>]
{<span class="hljs-string">&#x27;array&#x27;</span>: array([ <span class="hljs-number">0.</span>        ,  <span class="hljs-number">0.</span>        ,  <span class="hljs-number">0.</span>        , ..., -<span class="hljs-number">0.00592041</span>,
        -<span class="hljs-number">0.00405884</span>, -<span class="hljs-number">0.00253296</span>], dtype=float32),
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/05734a36d88019a09725c20cc024e1c4e7982e37d7d55c0c1ca1742ea1cdd47f/_background_noise_/doing_the_dishes.wav&#x27;</span>,
 <span class="hljs-string">&#x27;sampling_rate&#x27;</span>: <span class="hljs-number">16000</span>}`}}),sa=new T({}),ta=new w({props:{code:`lj_speech = load_dataset("lj_speech", split="train")
lj_speech[0]["audio"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>lj_speech = load_dataset(<span class="hljs-string">&quot;lj_speech&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>lj_speech[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>]
{<span class="hljs-string">&#x27;array&#x27;</span>: array([-<span class="hljs-number">7.3242188e-04</span>, -<span class="hljs-number">7.6293945e-04</span>, -<span class="hljs-number">6.4086914e-04</span>, ...,
         <span class="hljs-number">7.3242188e-04</span>,  <span class="hljs-number">2.1362305e-04</span>,  <span class="hljs-number">6.1035156e-05</span>], dtype=float32),
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/917ece08c95cf0c4115e45294e3cd0dee724a1165b7fc11798369308a465bd26/LJSpeech-1.1/wavs/LJ001-0001.wav&#x27;</span>,
 <span class="hljs-string">&#x27;sampling_rate&#x27;</span>: <span class="hljs-number">22050</span>}`}}),ra=new w({props:{code:'lj_speech = lj_speech.cast_column("audio", Audio(sampling_rate=16_000))',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>lj_speech = lj_speech.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16_000</span>))'}}),pa=new w({props:{code:'lj_speech[0]["audio"]',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>lj_speech[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>]
{<span class="hljs-string">&#x27;array&#x27;</span>: array([-<span class="hljs-number">0.00064146</span>, -<span class="hljs-number">0.00074657</span>, -<span class="hljs-number">0.00068768</span>, ...,  <span class="hljs-number">0.00068341</span>,
         <span class="hljs-number">0.00014045</span>,  <span class="hljs-number">0.</span>        ], dtype=float32),
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/917ece08c95cf0c4115e45294e3cd0dee724a1165b7fc11798369308a465bd26/LJSpeech-1.1/wavs/LJ001-0001.wav&#x27;</span>,
 <span class="hljs-string">&#x27;sampling_rate&#x27;</span>: <span class="hljs-number">16000</span>}`}}),ca=new T({}),ha=new w({props:{code:`from transformers import AutoFeatureExtractor

feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base&quot;</span>)`}}),ia=new w({props:{code:`audio_input = [dataset["train"][0]["audio"]["array"]]
feature_extractor(audio_input, sampling_rate=16000)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>audio_input = [dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;array&quot;</span>]]
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor(audio_input, sampling_rate=<span class="hljs-number">16000</span>)
{<span class="hljs-string">&#x27;input_values&#x27;</span>: [array([ <span class="hljs-number">0.00045439</span>,  <span class="hljs-number">0.00045439</span>,  <span class="hljs-number">0.00045439</span>, ..., -<span class="hljs-number">0.1578519</span> , -<span class="hljs-number">0.10807519</span>, -<span class="hljs-number">0.06727459</span>], dtype=float32)]}`}}),ua=new T({}),ma=new w({props:{code:`dataset["train"][0]["audio"]["array"].shape

dataset["train"][1]["audio"]["array"].shape`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;array&quot;</span>].shape
(<span class="hljs-number">1522930</span>,)

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">1</span>][<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;array&quot;</span>].shape
(<span class="hljs-number">988891</span>,)`}}),da=new w({props:{code:`def preprocess_function(examples):
    audio_arrays = [x["array"] for x in examples["audio"]]
    inputs = feature_extractor(
        audio_arrays,
        sampling_rate=16000,
        padding=True,
        max_length=1000000,
        truncation=True,
    )
    return inputs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">preprocess_function</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    audio_arrays = [x[<span class="hljs-string">&quot;array&quot;</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;audio&quot;</span>]]
<span class="hljs-meta">... </span>    inputs = feature_extractor(
<span class="hljs-meta">... </span>        audio_arrays,
<span class="hljs-meta">... </span>        sampling_rate=<span class="hljs-number">16000</span>,
<span class="hljs-meta">... </span>        padding=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>        max_length=<span class="hljs-number">1000000</span>,
<span class="hljs-meta">... </span>        truncation=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    )
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> inputs`}}),fa=new w({props:{code:'processed_dataset = preprocess_function(dataset["train"][:5])',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>processed_dataset = preprocess_function(dataset[<span class="hljs-string">&quot;train&quot;</span>][:<span class="hljs-number">5</span>])'}}),ba=new w({props:{code:`processed_dataset["input_values"][0].shape

processed_dataset["input_values"][1].shape`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>processed_dataset[<span class="hljs-string">&quot;input_values&quot;</span>][<span class="hljs-number">0</span>].shape
(<span class="hljs-number">1000000</span>,)

<span class="hljs-meta">&gt;&gt;&gt; </span>processed_dataset[<span class="hljs-string">&quot;input_values&quot;</span>][<span class="hljs-number">1</span>].shape
(<span class="hljs-number">1000000</span>,)`}}),ja=new T({}),ga=new w({props:{code:`from datasets import load_dataset

dataset = load_dataset("food101", split="train[:100]")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;food101&quot;</span>, split=<span class="hljs-string">&quot;train[:100]&quot;</span>)`}}),Ea=new w({props:{code:'dataset[0]["image"]',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]'}}),$a=new T({}),wa=new w({props:{code:`from transformers import AutoFeatureExtractor

feature_extractor = AutoFeatureExtractor.from_pretrained("google/vit-base-patch16-224")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;google/vit-base-patch16-224&quot;</span>)`}}),ya=new T({}),Da=new w({props:{code:`from torchvision.transforms import Compose, Normalize, RandomResizedCrop, ColorJitter, ToTensor

normalize = Normalize(mean=feature_extractor.image_mean, std=feature_extractor.image_std)
_transforms = Compose(
    [RandomResizedCrop(feature_extractor.size), ColorJitter(brightness=0.5, hue=0.5), ToTensor(), normalize]
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torchvision.transforms <span class="hljs-keyword">import</span> Compose, Normalize, RandomResizedCrop, ColorJitter, ToTensor

<span class="hljs-meta">&gt;&gt;&gt; </span>normalize = Normalize(mean=feature_extractor.image_mean, std=feature_extractor.image_std)
<span class="hljs-meta">&gt;&gt;&gt; </span>_transforms = Compose(
<span class="hljs-meta">... </span>    [RandomResizedCrop(feature_extractor.size), ColorJitter(brightness=<span class="hljs-number">0.5</span>, hue=<span class="hljs-number">0.5</span>), ToTensor(), normalize]
<span class="hljs-meta">... </span>)`}}),za=new w({props:{code:`def transforms(examples):
    examples["pixel_values"] = [_transforms(image.convert("RGB")) for image in examples["image"]]
    return examples`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">transforms</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    examples[<span class="hljs-string">&quot;pixel_values&quot;</span>] = [_transforms(image.convert(<span class="hljs-string">&quot;RGB&quot;</span>)) <span class="hljs-keyword">for</span> image <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;image&quot;</span>]]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> examples`}}),La=new w({props:{code:"dataset.set_transform(transforms)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.set_transform(transforms)'}}),Ia=new w({props:{code:'dataset[0]["image"]',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
{<span class="hljs-string">&#x27;image&#x27;</span>: &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=384x512 at <span class="hljs-number">0x7F1A7B0630D0</span>&gt;,
 <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">6</span>,
 <span class="hljs-string">&#x27;pixel_values&#x27;</span>: tensor([[[ <span class="hljs-number">0.0353</span>,  <span class="hljs-number">0.0745</span>,  <span class="hljs-number">0.1216</span>,  ..., -<span class="hljs-number">0.9922</span>, -<span class="hljs-number">0.9922</span>, -<span class="hljs-number">0.9922</span>],
          [-<span class="hljs-number">0.0196</span>,  <span class="hljs-number">0.0667</span>,  <span class="hljs-number">0.1294</span>,  ..., -<span class="hljs-number">0.9765</span>, -<span class="hljs-number">0.9843</span>, -<span class="hljs-number">0.9922</span>],
          [ <span class="hljs-number">0.0196</span>,  <span class="hljs-number">0.0824</span>,  <span class="hljs-number">0.1137</span>,  ..., -<span class="hljs-number">0.9765</span>, -<span class="hljs-number">0.9686</span>, -<span class="hljs-number">0.8667</span>],
          ...,
          [ <span class="hljs-number">0.0275</span>,  <span class="hljs-number">0.0745</span>,  <span class="hljs-number">0.0510</span>,  ..., -<span class="hljs-number">0.1137</span>, -<span class="hljs-number">0.1216</span>, -<span class="hljs-number">0.0824</span>],
          [ <span class="hljs-number">0.0667</span>,  <span class="hljs-number">0.0824</span>,  <span class="hljs-number">0.0667</span>,  ..., -<span class="hljs-number">0.0588</span>, -<span class="hljs-number">0.0745</span>, -<span class="hljs-number">0.0980</span>],
          [ <span class="hljs-number">0.0353</span>,  <span class="hljs-number">0.0353</span>,  <span class="hljs-number">0.0431</span>,  ..., -<span class="hljs-number">0.0039</span>, -<span class="hljs-number">0.0039</span>, -<span class="hljs-number">0.0588</span>]],
 
         [[ <span class="hljs-number">0.2078</span>,  <span class="hljs-number">0.2471</span>,  <span class="hljs-number">0.2863</span>,  ..., -<span class="hljs-number">0.9451</span>, -<span class="hljs-number">0.9373</span>, -<span class="hljs-number">0.9451</span>],
          [ <span class="hljs-number">0.1608</span>,  <span class="hljs-number">0.2471</span>,  <span class="hljs-number">0.3098</span>,  ..., -<span class="hljs-number">0.9373</span>, -<span class="hljs-number">0.9451</span>, -<span class="hljs-number">0.9373</span>],
          [ <span class="hljs-number">0.2078</span>,  <span class="hljs-number">0.2706</span>,  <span class="hljs-number">0.3020</span>,  ..., -<span class="hljs-number">0.9608</span>, -<span class="hljs-number">0.9373</span>, -<span class="hljs-number">0.8275</span>],
          ...,
          [-<span class="hljs-number">0.0353</span>,  <span class="hljs-number">0.0118</span>, -<span class="hljs-number">0.0039</span>,  ..., -<span class="hljs-number">0.2392</span>, -<span class="hljs-number">0.2471</span>, -<span class="hljs-number">0.2078</span>],
          [ <span class="hljs-number">0.0196</span>,  <span class="hljs-number">0.0353</span>,  <span class="hljs-number">0.0196</span>,  ..., -<span class="hljs-number">0.1843</span>, -<span class="hljs-number">0.2000</span>, -<span class="hljs-number">0.2235</span>],
          [-<span class="hljs-number">0.0118</span>, -<span class="hljs-number">0.0039</span>, -<span class="hljs-number">0.0039</span>,  ..., -<span class="hljs-number">0.0980</span>, -<span class="hljs-number">0.0980</span>, -<span class="hljs-number">0.1529</span>]],
 
         [[ <span class="hljs-number">0.3961</span>,  <span class="hljs-number">0.4431</span>,  <span class="hljs-number">0.4980</span>,  ..., -<span class="hljs-number">0.9216</span>, -<span class="hljs-number">0.9137</span>, -<span class="hljs-number">0.9216</span>],
          [ <span class="hljs-number">0.3569</span>,  <span class="hljs-number">0.4510</span>,  <span class="hljs-number">0.5216</span>,  ..., -<span class="hljs-number">0.9059</span>, -<span class="hljs-number">0.9137</span>, -<span class="hljs-number">0.9137</span>],
          [ <span class="hljs-number">0.4118</span>,  <span class="hljs-number">0.4745</span>,  <span class="hljs-number">0.5216</span>,  ..., -<span class="hljs-number">0.9137</span>, -<span class="hljs-number">0.8902</span>, -<span class="hljs-number">0.7804</span>],
          ...,
          [-<span class="hljs-number">0.2314</span>, -<span class="hljs-number">0.1922</span>, -<span class="hljs-number">0.2078</span>,  ..., -<span class="hljs-number">0.4196</span>, -<span class="hljs-number">0.4275</span>, -<span class="hljs-number">0.3882</span>],
          [-<span class="hljs-number">0.1843</span>, -<span class="hljs-number">0.1686</span>, -<span class="hljs-number">0.2000</span>,  ..., -<span class="hljs-number">0.3647</span>, -<span class="hljs-number">0.3804</span>, -<span class="hljs-number">0.4039</span>],
          [-<span class="hljs-number">0.1922</span>, -<span class="hljs-number">0.1922</span>, -<span class="hljs-number">0.1922</span>,  ..., -<span class="hljs-number">0.2941</span>, -<span class="hljs-number">0.2863</span>, -<span class="hljs-number">0.3412</span>]]])}`}}),Ra=new w({props:{code:`import numpy as np
import matplotlib.pyplot as plt

img = dataset[0]["pixel_values"]
plt.imshow(img.permute(1, 2, 0))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt

<span class="hljs-meta">&gt;&gt;&gt; </span>img = dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;pixel_values&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>plt.imshow(img.permute(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>))`}}),Fa=new T({}),Ba=new w({props:{code:`from datasets import load_dataset

lj_speech = load_dataset("lj_speech", split="train")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>lj_speech = load_dataset(<span class="hljs-string">&quot;lj_speech&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)`}}),Ja=new w({props:{code:'lj_speech = lj_speech.map(remove_columns=["file", "id", "normalized_text"])',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>lj_speech = lj_speech.<span class="hljs-built_in">map</span>(remove_columns=[<span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;normalized_text&quot;</span>])'}}),Wa=new w({props:{code:`lj_speech[0]["audio"]

lj_speech[0]["text"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>lj_speech[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>]
{<span class="hljs-string">&#x27;array&#x27;</span>: array([-<span class="hljs-number">7.3242188e-04</span>, -<span class="hljs-number">7.6293945e-04</span>, -<span class="hljs-number">6.4086914e-04</span>, ...,
         <span class="hljs-number">7.3242188e-04</span>,  <span class="hljs-number">2.1362305e-04</span>,  <span class="hljs-number">6.1035156e-05</span>], dtype=float32),
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/917ece08c95cf0c4115e45294e3cd0dee724a1165b7fc11798369308a465bd26/LJSpeech-1.1/wavs/LJ001-0001.wav&#x27;</span>,
 <span class="hljs-string">&#x27;sampling_rate&#x27;</span>: <span class="hljs-number">22050</span>}

<span class="hljs-meta">&gt;&gt;&gt; </span>lj_speech[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-string">&#x27;Printing, in the only sense with which we are at present concerned, differs from most if not from all the arts and crafts represented in the Exhibition&#x27;</span>`}}),Ya=new w({props:{code:'lj_speech = lj_speech.cast_column("audio", Audio(sampling_rate=16_000))',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>lj_speech = lj_speech.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16_000</span>))'}}),Ga=new T({}),Ma=new w({props:{code:`from transformers import AutoProcessor

processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)`}}),Ua=new w({props:{code:`def prepare_dataset(example):
    audio = example["audio"]

    example["input_values"] = processor(audio["array"], sampling_rate=16000)

    with processor.as_target_processor():
        example["labels"] = processor(example["text"]).input_ids
    return example`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">prepare_dataset</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    audio = example[<span class="hljs-string">&quot;audio&quot;</span>]

<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;input_values&quot;</span>] = processor(audio[<span class="hljs-string">&quot;array&quot;</span>], sampling_rate=<span class="hljs-number">16000</span>)

<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> processor.as_target_processor():
<span class="hljs-meta">... </span>        example[<span class="hljs-string">&quot;labels&quot;</span>] = processor(example[<span class="hljs-string">&quot;text&quot;</span>]).input_ids
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example`}}),Qa=new w({props:{code:"prepare_dataset(lj_speech[0])",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>prepare_dataset(lj_speech[<span class="hljs-number">0</span>])'}}),Xa=new T({}),{c(){v=t("meta"),y=c(),m=t("h1"),k=t("a"),q=t("span"),d(A.$$.fragment),B=c(),Ms=t("span"),pi=r("Preprocess"),Uo=c(),d(Le.$$.fragment),Vo=c(),tt=t("p"),ci=r("Before you can use your data in a model, the data needs to be processed into an acceptable format for the model. A model does not understand raw text, images or audio. These inputs need to be converted into numbers and assembled into tensors. In this tutorial, you will:"),Ko=c(),J=t("ul"),Rn=t("li"),hi=r("Preprocess textual data with a tokenizer."),ii=c(),Fn=t("li"),ui=r("Preprocess image or audio data with a feature extractor."),mi=c(),Hn=t("li"),di=r("Preprocess data for a multimodal task with a processor."),Qo=c(),rs=t("h2"),Us=t("a"),Bn=t("span"),d(Se.$$.fragment),fi=c(),Jn=t("span"),bi=r("NLP"),Xo=c(),d(Ne.$$.fragment),Zo=c(),W=t("p"),ji=r("The main tool for processing textual data is a "),nt=t("a"),_i=r("tokenizer"),gi=r(". A tokenizer starts by splitting text into "),Wn=t("em"),vi=r("tokens"),Ei=r(" according to a set of rules. The tokens are converted into numbers, which are used to build tensors as input to a model. Any additional inputs required by a model are also added by the tokenizer."),sp=c(),d(Vs.$$.fragment),ep=c(),Y=t("p"),$i=r("Get started quickly by loading a pretrained tokenizer with the "),lt=t("a"),wi=r("AutoTokenizer"),yi=r(" class. This downloads the "),Yn=t("em"),ki=r("vocab"),xi=r(" used when a model is pretrained."),ap=c(),os=t("h3"),Ks=t("a"),Gn=t("span"),d(Ie.$$.fragment),Ti=c(),Mn=t("span"),qi=r("Tokenize"),tp=c(),Qs=t("p"),Di=r("Load a pretrained tokenizer with "),rt=t("a"),Ai=r("AutoTokenizer.from_pretrained()"),zi=r(":"),np=c(),d(Re.$$.fragment),lp=c(),ot=t("p"),Pi=r("Then pass your sentence to the tokenizer:"),rp=c(),d(Fe.$$.fragment),op=c(),pt=t("p"),Ci=r("The tokenizer returns a dictionary with three important itmes:"),pp=c(),G=t("ul"),ct=t("li"),ht=t("a"),Oi=r("input_ids"),Li=r(" are the indices corresponding to each token in the sentence."),Si=c(),it=t("li"),ut=t("a"),Ni=r("attention_mask"),Ii=r(" indicates whether a token should be attended to or not."),Ri=c(),mt=t("li"),dt=t("a"),Fi=r("token_type_ids"),Hi=r(" identifies which sequence a token belongs to when there is more than one sequence."),cp=c(),Xs=t("p"),Bi=r("You can decode the "),Un=t("code"),Ji=r("input_ids"),Wi=r(" to return the original input:"),hp=c(),d(He.$$.fragment),ip=c(),M=t("p"),Yi=r("As you can see, the tokenizer added two special tokens - "),Vn=t("code"),Gi=r("CLS"),Mi=r(" and "),Kn=t("code"),Ui=r("SEP"),Vi=r(` (classifier and separator) - to the sentence. Not all models need
special tokens, but if they do, the tokenizer will automatically add them for you.`),up=c(),ft=t("p"),Ki=r("If there are several sentences you want to process, pass the sentences as a list to the tokenizer:"),mp=c(),d(Be.$$.fragment),dp=c(),ps=t("h3"),Zs=t("a"),Qn=t("span"),d(Je.$$.fragment),Qi=c(),Xn=t("span"),Xi=r("Pad"),fp=c(),se=t("p"),Zi=r("This brings us to an important topic. When you process a batch of sentences, they aren\u2019t always the same length. This is a problem because tensors, the input to the model, need to have a uniform shape. Padding is a strategy for ensuring tensors are rectangular by adding a special "),Zn=t("em"),su=r("padding token"),eu=r(" to sentences with fewer tokens."),bp=c(),U=t("p"),au=r("Set the "),sl=t("code"),tu=r("padding"),nu=r(" parameter to "),el=t("code"),lu=r("True"),ru=r(" to pad the shorter sequences in the batch to match the longest sequence:"),jp=c(),d(We.$$.fragment),_p=c(),ee=t("p"),ou=r("Notice the tokenizer padded the first and third sentences with a "),al=t("code"),pu=r("0"),cu=r(" because they are shorter!"),gp=c(),cs=t("h3"),ae=t("a"),tl=t("span"),d(Ye.$$.fragment),hu=c(),nl=t("span"),iu=r("Truncation"),vp=c(),bt=t("p"),uu=r("On the other end of the spectrum, sometimes a sequence may be too long for a model to handle. In this case, you will need to truncate the sequence to a shorter length."),Ep=c(),V=t("p"),mu=r("Set the "),ll=t("code"),du=r("truncation"),fu=r(" parameter to "),rl=t("code"),bu=r("True"),ju=r(" to truncate a sequence to the maximum length accepted by the model:"),$p=c(),d(Ge.$$.fragment),wp=c(),hs=t("h3"),te=t("a"),ol=t("span"),d(Me.$$.fragment),_u=c(),pl=t("span"),gu=r("Build tensors"),yp=c(),jt=t("p"),vu=r("Finally, you want the tokenizer to return the actual tensors that are fed to the model."),kp=c(),P=t("p"),Eu=r("Set the "),cl=t("code"),$u=r("return_tensors"),wu=r(" parameter to either "),hl=t("code"),yu=r("pt"),ku=r(" for PyTorch, or "),il=t("code"),xu=r("tf"),Tu=r(" for TensorFlow:"),xp=c(),d(ne.$$.fragment),Tp=c(),is=t("h2"),le=t("a"),ul=t("span"),d(Ue.$$.fragment),qu=c(),ml=t("span"),Du=r("Audio"),qp=c(),re=t("p"),Au=r("Audio inputs are preprocessed differently than textual inputs, but the end goal remains the same: create numerical sequences the model can understand. A "),_t=t("a"),zu=r("feature extractor"),Pu=r(" is designed for the express purpose of extracting features from raw image or audio data and converting them into tensors. Before you begin, install \u{1F917} Datasets to load an audio dataset to experiment with:"),Dp=c(),d(Ve.$$.fragment),Ap=c(),K=t("p"),Cu=r("Load the keyword spotting task from the "),Ke=t("a"),Ou=r("SUPERB"),Lu=r(" benchmark (see the \u{1F917} "),Qe=t("a"),Su=r("Datasets tutorial"),Nu=r(" for more details on how to load a dataset):"),zp=c(),d(Xe.$$.fragment),Pp=c(),Q=t("p"),Iu=r("Access the first element of the "),dl=t("code"),Ru=r("audio"),Fu=r(" column to take a look at the input. Calling the "),fl=t("code"),Hu=r("audio"),Bu=r(" column will automatically load and resample the audio file:"),Cp=c(),d(Ze.$$.fragment),Op=c(),gt=t("p"),Ju=r("This returns three items:"),Lp=c(),X=t("ul"),vt=t("li"),bl=t("code"),Wu=r("array"),Yu=r(" is the speech signal loaded - and potentially resampled - as a 1D array."),Gu=c(),Et=t("li"),jl=t("code"),Mu=r("path"),Uu=r(" points to the location of the audio file."),Vu=c(),$t=t("li"),_l=t("code"),Ku=r("sampling_rate"),Qu=r(" refers to how many data points in the speech signal are measured per second."),Sp=c(),us=t("h3"),oe=t("a"),gl=t("span"),d(sa.$$.fragment),Xu=c(),vl=t("span"),Zu=r("Resample"),Np=c(),pe=t("p"),sm=r("For this tutorial, you will use the "),ea=t("a"),em=r("Wav2Vec2"),am=r(" model. As you can see from the model card, the Wav2Vec2 model is pretrained on 16kHz sampled speech audio. It is important your audio data\u2019s sampling rate matches the sampling rate of the dataset used to pretrain the model. If your data\u2019s sampling rate isn\u2019t the same, then you need to resample your audio data."),Ip=c(),ce=t("p"),tm=r("For example, load the "),aa=t("a"),nm=r("LJ Speech"),lm=r(" dataset which has a sampling rate of 22050kHz. In order to use the Wav2Vec2 model with this dataset, downsample the sampling rate to 16kHz:"),Rp=c(),d(ta.$$.fragment),Fp=c(),wt=t("ol"),na=t("li"),rm=r("Use \u{1F917} Datasets\u2019 "),la=t("a"),El=t("code"),om=r("cast_column"),pm=r(" method to downsample the sampling rate to 16kHz:"),Hp=c(),d(ra.$$.fragment),Bp=c(),oa=t("ol"),$l=t("li"),cm=r("Load the audio file:"),Jp=c(),d(pa.$$.fragment),Wp=c(),he=t("p"),hm=r("As you can see, the "),wl=t("code"),im=r("sampling_rate"),um=r(" was downsampled to 16kHz. Now that you know how resampling works, let\u2019s return to our previous example with the SUPERB dataset!"),Yp=c(),ms=t("h3"),ie=t("a"),yl=t("span"),d(ca.$$.fragment),mm=c(),kl=t("span"),dm=r("Feature extractor"),Gp=c(),C=t("p"),fm=r("The next step is to load a feature extractor to normalize and pad the input. When padding textual data, a "),xl=t("code"),bm=r("0"),jm=r(" is added for shorter sequences. The same idea applies to audio data, and the audio feature extractor will add a "),Tl=t("code"),_m=r("0"),gm=r(" - interpreted as silence - to "),ql=t("code"),vm=r("array"),Em=r("."),Mp=c(),ue=t("p"),$m=r("Load the feature extractor with "),yt=t("a"),wm=r("AutoFeatureExtractor.from_pretrained()"),ym=r(":"),Up=c(),d(ha.$$.fragment),Vp=c(),Z=t("p"),km=r("Pass the audio "),Dl=t("code"),xm=r("array"),Tm=r(" to the feature extractor. We also recommend adding the "),Al=t("code"),qm=r("sampling_rate"),Dm=r(" argument in the feature extractor in order to better debug any silent errors that may occur."),Kp=c(),d(ia.$$.fragment),Qp=c(),ds=t("h3"),me=t("a"),zl=t("span"),d(ua.$$.fragment),Am=c(),Pl=t("span"),zm=r("Pad and truncate"),Xp=c(),kt=t("p"),Pm=r("Just like the tokenizer, you can apply padding or truncation to handle variable sequences in a batch. Take a look at the sequence length of these two audio samples:"),Zp=c(),d(ma.$$.fragment),sc=c(),xt=t("p"),Cm=r("As you can see, the first sample has a longer sequence than the second sample. Let\u2019s create a function that will preprocess the dataset. Specify a maximum sample length, and the feature extractor will either pad or truncate the sequences to match it:"),ec=c(),d(da.$$.fragment),ac=c(),Tt=t("p"),Om=r("Apply the function to the the first few examples in the dataset:"),tc=c(),d(fa.$$.fragment),nc=c(),qt=t("p"),Lm=r("Now take another look at the processed sample lengths:"),lc=c(),d(ba.$$.fragment),rc=c(),Dt=t("p"),Sm=r("The lengths of the first two samples now match the maximum length you specified."),oc=c(),fs=t("h2"),de=t("a"),Cl=t("span"),d(ja.$$.fragment),Nm=c(),Ol=t("span"),Im=r("Vision"),pc=c(),At=t("p"),Rm=r("A feature extractor is also used to process images for vision tasks. Once again, the goal is to convert the raw image into a batch of tensors as input."),cc=c(),ss=t("p"),Fm=r("Let\u2019s load the "),_a=t("a"),Hm=r("food101"),Bm=r(" dataset for this tutorial. Use \u{1F917} Datasets "),Ll=t("code"),Jm=r("split"),Wm=r(" parameter to only load a small sample from the training split since the dataset is quite large:"),hc=c(),d(ga.$$.fragment),ic=c(),fe=t("p"),Ym=r("Next, take a look at the image with \u{1F917} Datasets "),va=t("a"),Sl=t("code"),Gm=r("Image"),Mm=r(" feature:"),uc=c(),d(Ea.$$.fragment),mc=c(),zt=t("p"),Pt=t("img"),dc=c(),bs=t("h3"),be=t("a"),Nl=t("span"),d($a.$$.fragment),Um=c(),Il=t("span"),Vm=r("Feature extractor"),fc=c(),je=t("p"),Km=r("Load the feature extractor with "),Ct=t("a"),Qm=r("AutoFeatureExtractor.from_pretrained()"),Xm=r(":"),bc=c(),d(wa.$$.fragment),jc=c(),js=t("h3"),_e=t("a"),Rl=t("span"),d(ya.$$.fragment),Zm=c(),Fl=t("span"),sd=r("Data augmentation"),_c=c(),ge=t("p"),ed=r("For vision tasks, it is common to add some type of data augmentation to the images as a part of preprocessing. You can add augmentations with any library you\u2019d like, but in this tutorial, you will use torchvision\u2019s "),ka=t("a"),Hl=t("code"),ad=r("transforms"),td=r(" module."),gc=c(),Ot=t("ol"),R=t("li"),nd=r("Normalize the image and use "),xa=t("a"),Bl=t("code"),ld=r("Compose"),rd=r(" to chain some transforms - "),Ta=t("a"),Jl=t("code"),od=r("RandomResizedCrop"),pd=r(" and "),qa=t("a"),Wl=t("code"),cd=r("ColorJitter"),hd=r(" - together:"),vc=c(),d(Da.$$.fragment),Ec=c(),Aa=t("ol"),_s=t("li"),id=r("The model accepts "),Lt=t("a"),Yl=t("code"),ud=r("pixel_values"),md=r(" as it\u2019s input. This value is generated by the feature extractor. Create a function that generates "),Gl=t("code"),dd=r("pixel_values"),fd=r(" from the transforms:"),$c=c(),d(za.$$.fragment),wc=c(),Pa=t("ol"),Ca=t("li"),bd=r("Then use \u{1F917} Datasets "),Oa=t("a"),Ml=t("code"),jd=r("set_transform"),_d=r(" to apply the transforms on-the-fly:"),yc=c(),d(La.$$.fragment),kc=c(),Sa=t("ol"),Na=t("li"),gd=r("Now when you access the image, you will notice the feature extractor has added the model input "),Ul=t("code"),vd=r("pixel_values"),Ed=r(":"),xc=c(),d(Ia.$$.fragment),Tc=c(),St=t("p"),$d=r("Here is what the image looks like after you preprocess it. Just as you\u2019d expect from the applied transforms, the image has been randomly cropped and it\u2019s color properties are different."),qc=c(),d(Ra.$$.fragment),Dc=c(),Nt=t("p"),It=t("img"),Ac=c(),gs=t("h2"),ve=t("a"),Vl=t("span"),d(Fa.$$.fragment),wd=c(),Kl=t("span"),yd=r("Multimodal"),zc=c(),Rt=t("p"),kd=r("For multimodal tasks. you will use a combination of everything you\u2019ve learned so far and apply your skills to a automatic speech recognition (ASR) task. This means you will need a:"),Pc=c(),Ee=t("ul"),Ql=t("li"),xd=r("Feature extractor to preprocess the audio data."),Td=c(),Xl=t("li"),qd=r("Tokenizer to process the text."),Cc=c(),$e=t("p"),Dd=r("Let\u2019s return to the "),Ha=t("a"),Ad=r("LJ Speech"),zd=r(" dataset:"),Oc=c(),d(Ba.$$.fragment),Lc=c(),es=t("p"),Pd=r("Since you are mainly interested in the "),Zl=t("code"),Cd=r("audio"),Od=r(" and "),sr=t("code"),Ld=r("text"),Sd=r(" column, remove the other columns:"),Sc=c(),d(Ja.$$.fragment),Nc=c(),as=t("p"),Nd=r("Now take a look at the "),er=t("code"),Id=r("audio"),Rd=r(" and "),ar=t("code"),Fd=r("text"),Hd=r(" columns:"),Ic=c(),d(Wa.$$.fragment),Rc=c(),we=t("p"),Bd=r("Remember from the earlier section on processing audio data, you should always "),Ft=t("a"),Jd=r("resample"),Wd=r(" your audio data\u2019s sampling rate to match the sampling rate of the dataset used to pretrain a model:"),Fc=c(),d(Ya.$$.fragment),Hc=c(),vs=t("h3"),ye=t("a"),tr=t("span"),d(Ga.$$.fragment),Yd=c(),nr=t("span"),Gd=r("Processor"),Bc=c(),Ht=t("p"),Md=r("A processor combines a feature extractor and tokenizer. Load a processor with [`AutoProcessor.from_pretrained]:"),Jc=c(),d(Ma.$$.fragment),Wc=c(),Bt=t("ol"),Es=t("li"),Ud=r("Create a function to process the audio data to "),lr=t("code"),Vd=r("input_values"),Kd=r(", and tokenizes the text to "),rr=t("code"),Qd=r("labels"),Xd=r(". These are your inputs to the model:"),Yc=c(),d(Ua.$$.fragment),Gc=c(),Va=t("ol"),Ka=t("li"),Zd=r("Apply the "),or=t("code"),sf=r("prepare_dataset"),ef=r(" function to a sample:"),Mc=c(),d(Qa.$$.fragment),Uc=c(),ts=t("p"),af=r("Notice the processor has added "),pr=t("code"),tf=r("input_values"),nf=r(" and "),cr=t("code"),lf=r("labels"),rf=r(". The sampling rate has also been correctly downsampled to 16kHz."),Vc=c(),Jt=t("p"),of=r("Awesome, you should now be able to preprocess data for any modality and even combine different modalities! In the next tutorial, learn how to fine-tune a model on your newly preprocessed data."),Kc=c(),$s=t("h2"),ke=t("a"),hr=t("span"),d(Xa.$$.fragment),pf=c(),ir=t("span"),cf=r("Everything you always wanted to know about padding and truncation"),Qc=c(),O=t("p"),hf=r(`We have seen the commands that will work for most cases (pad your batch to the length of the maximum sentence and
truncate to the maximum length the model can accept). However, the API supports more strategies if you need them. The
three arguments you need to know for this are `),ur=t("code"),uf=r("padding"),mf=r(", "),mr=t("code"),df=r("truncation"),ff=r(" and "),dr=t("code"),bf=r("max_length"),jf=r("."),Xc=c(),ns=t("ul"),Za=t("li"),Wt=t("p"),fr=t("code"),_f=r("padding"),gf=r(" controls the padding. It can be a boolean or a string which should be:"),vf=c(),ws=t("ul"),xe=t("li"),br=t("code"),Ef=r("True"),$f=r(" or "),jr=t("code"),wf=r("'longest'"),yf=r(` to pad to the longest sequence in the batch (doing no padding if you only provide
a single sequence).`),kf=c(),L=t("li"),_r=t("code"),xf=r("'max_length'"),Tf=r(" to pad to a length specified by the "),gr=t("code"),qf=r("max_length"),Df=r(` argument or the maximum length accepted
by the model if no `),vr=t("code"),Af=r("max_length"),zf=r(" is provided ("),Er=t("code"),Pf=r("max_length=None"),Cf=r(`). If you only provide a single sequence,
padding will still be applied to it.`),Of=c(),Te=t("li"),$r=t("code"),Lf=r("False"),Sf=r(" or "),wr=t("code"),Nf=r("'do_not_pad'"),If=r(` to not pad the sequences. As we have seen before, this is the default
behavior.`),Rf=c(),st=t("li"),Yt=t("p"),yr=t("code"),Ff=r("truncation"),Hf=r(" controls the truncation. It can be a boolean or a string which should be:"),Bf=c(),F=t("ul"),D=t("li"),kr=t("code"),Jf=r("True"),Wf=r(" or "),xr=t("code"),Yf=r("'longest_first'"),Gf=r(" truncate to a maximum length specified by the "),Tr=t("code"),Mf=r("max_length"),Uf=r(` argument or
the maximum length accepted by the model if no `),qr=t("code"),Vf=r("max_length"),Kf=r(" is provided ("),Dr=t("code"),Qf=r("max_length=None"),Xf=r(`). This will
truncate token by token, removing a token from the longest sequence in the pair until the proper length is
reached.`),Zf=c(),S=t("li"),Ar=t("code"),sb=r("'only_second'"),eb=r(" truncate to a maximum length specified by the "),zr=t("code"),ab=r("max_length"),tb=r(` argument or the maximum
length accepted by the model if no `),Pr=t("code"),nb=r("max_length"),lb=r(" is provided ("),Cr=t("code"),rb=r("max_length=None"),ob=r(`). This will only truncate
the second sentence of a pair if a pair of sequence (or a batch of pairs of sequences) is provided.`),pb=c(),N=t("li"),Or=t("code"),cb=r("'only_first'"),hb=r(" truncate to a maximum length specified by the "),Lr=t("code"),ib=r("max_length"),ub=r(` argument or the maximum
length accepted by the model if no `),Sr=t("code"),mb=r("max_length"),db=r(" is provided ("),Nr=t("code"),fb=r("max_length=None"),bb=r(`). This will only truncate
the first sentence of a pair if a pair of sequence (or a batch of pairs of sequences) is provided.`),jb=c(),qe=t("li"),Ir=t("code"),_b=r("False"),gb=r(" or "),Rr=t("code"),vb=r("'do_not_truncate'"),Eb=r(` to not truncate the sequences. As we have seen before, this is the
default behavior.`),$b=c(),Fr=t("li"),ls=t("p"),Hr=t("code"),wb=r("max_length"),yb=r(" to control the length of the padding/truncation. It can be an integer or "),Br=t("code"),kb=r("None"),xb=r(`, in which case
it will default to the maximum length the model can accept. If the model has no specific maximum input length,
truncation/padding to `),Jr=t("code"),Tb=r("max_length"),qb=r(" is deactivated."),Zc=c(),x=t("p"),Db=r(`Here is a table summarizing the recommend way to setup padding and truncation. If you use pair of inputs sequence in
any of the following examples, you can replace `),Wr=t("code"),Ab=r("truncation=True"),zb=r(" by a "),Yr=t("code"),Pb=r("STRATEGY"),Cb=r(` selected in
`),Gr=t("code"),Ob=r("['only_first', 'only_second', 'longest_first']"),Lb=r(", i.e. "),Mr=t("code"),Sb=r("truncation='only_second'"),Nb=r(" or "),Ur=t("code"),Ib=r("truncation= 'longest_first'"),Rb=r(" to control how both sequence in the pair are truncated as detailed before."),sh=c(),De=t("table"),Vr=t("thead"),ys=t("tr"),Kr=t("th"),Fb=r("Truncation"),Hb=c(),Qr=t("th"),Bb=r("Padding"),Jb=c(),Xr=t("th"),Wb=r("Instruction"),Yb=c(),E=t("tbody"),ks=t("tr"),Zr=t("td"),Gb=r("no truncation"),Mb=c(),so=t("td"),Ub=r("no padding"),Vb=c(),eo=t("td"),ao=t("code"),Kb=r("tokenizer(batch_sentences)"),Qb=c(),xs=t("tr"),eh=t("td"),Xb=c(),to=t("td"),Zb=r("padding to max sequence in batch"),sj=c(),Gt=t("td"),no=t("code"),ej=r("tokenizer(batch_sentences, padding=True)"),aj=r(" or"),tj=c(),Ts=t("tr"),ah=t("td"),nj=c(),th=t("td"),lj=c(),lo=t("td"),ro=t("code"),rj=r("tokenizer(batch_sentences, padding='longest')"),oj=c(),qs=t("tr"),nh=t("td"),pj=c(),oo=t("td"),cj=r("padding to max model input length"),hj=c(),po=t("td"),co=t("code"),ij=r("tokenizer(batch_sentences, padding='max_length')"),uj=c(),Ds=t("tr"),lh=t("td"),mj=c(),ho=t("td"),dj=r("padding to specific length"),fj=c(),io=t("td"),uo=t("code"),bj=r("tokenizer(batch_sentences, padding='max_length', max_length=42)"),jj=c(),As=t("tr"),mo=t("td"),_j=r("truncation to max model input length"),gj=c(),fo=t("td"),vj=r("no padding"),Ej=c(),Mt=t("td"),bo=t("code"),$j=r("tokenizer(batch_sentences, truncation=True)"),wj=r(" or"),yj=c(),zs=t("tr"),rh=t("td"),kj=c(),oh=t("td"),xj=c(),jo=t("td"),_o=t("code"),Tj=r("tokenizer(batch_sentences, truncation=STRATEGY)"),qj=c(),Ps=t("tr"),ph=t("td"),Dj=c(),go=t("td"),Aj=r("padding to max sequence in batch"),zj=c(),Ut=t("td"),vo=t("code"),Pj=r("tokenizer(batch_sentences, padding=True, truncation=True)"),Cj=r(" or"),Oj=c(),Cs=t("tr"),ch=t("td"),Lj=c(),hh=t("td"),Sj=c(),Eo=t("td"),$o=t("code"),Nj=r("tokenizer(batch_sentences, padding=True, truncation=STRATEGY)"),Ij=c(),Os=t("tr"),ih=t("td"),Rj=c(),wo=t("td"),Fj=r("padding to max model input length"),Hj=c(),Vt=t("td"),yo=t("code"),Bj=r("tokenizer(batch_sentences, padding='max_length', truncation=True)"),Jj=r(" or"),Wj=c(),Ls=t("tr"),uh=t("td"),Yj=c(),mh=t("td"),Gj=c(),ko=t("td"),xo=t("code"),Mj=r("tokenizer(batch_sentences, padding='max_length', truncation=STRATEGY)"),Uj=c(),Ss=t("tr"),dh=t("td"),Vj=c(),To=t("td"),Kj=r("padding to specific length"),Qj=c(),qo=t("td"),Xj=r("Not possible"),Zj=c(),Ns=t("tr"),Do=t("td"),s1=r("truncation to specific length"),e1=c(),Ao=t("td"),a1=r("no padding"),t1=c(),Kt=t("td"),zo=t("code"),n1=r("tokenizer(batch_sentences, truncation=True, max_length=42)"),l1=r(" or"),r1=c(),Is=t("tr"),fh=t("td"),o1=c(),bh=t("td"),p1=c(),Po=t("td"),Co=t("code"),c1=r("tokenizer(batch_sentences, truncation=STRATEGY, max_length=42)"),h1=c(),Rs=t("tr"),jh=t("td"),i1=c(),Oo=t("td"),u1=r("padding to max sequence in batch"),m1=c(),Qt=t("td"),Lo=t("code"),d1=r("tokenizer(batch_sentences, padding=True, truncation=True, max_length=42)"),f1=r(" or"),b1=c(),Fs=t("tr"),_h=t("td"),j1=c(),gh=t("td"),_1=c(),So=t("td"),No=t("code"),g1=r("tokenizer(batch_sentences, padding=True, truncation=STRATEGY, max_length=42)"),v1=c(),Hs=t("tr"),vh=t("td"),E1=c(),Io=t("td"),$1=r("padding to max model input length"),w1=c(),Ro=t("td"),y1=r("Not possible"),k1=c(),Bs=t("tr"),Eh=t("td"),x1=c(),Fo=t("td"),T1=r("padding to specific length"),q1=c(),Xt=t("td"),Ho=t("code"),D1=r("tokenizer(batch_sentences, padding='max_length', truncation=True, max_length=42)"),A1=r(" or"),z1=c(),Js=t("tr"),$h=t("td"),P1=c(),wh=t("td"),C1=c(),Bo=t("td"),Jo=t("code"),O1=r("tokenizer(batch_sentences, padding='max_length', truncation=STRATEGY, max_length=42)"),this.h()},l(s){const p=$v('[data-svelte="svelte-1phssyn"]',document.head);v=n(p,"META",{name:!0,content:!0}),p.forEach(a),y=h(s),m=n(s,"H1",{class:!0});var et=l(m);k=n(et,"A",{id:!0,class:!0,href:!0});var Wo=l(k);q=n(Wo,"SPAN",{});var X1=l(q);f(A.$$.fragment,X1),X1.forEach(a),Wo.forEach(a),B=h(et),Ms=n(et,"SPAN",{});var Z1=l(Ms);pi=o(Z1,"Preprocess"),Z1.forEach(a),et.forEach(a),Uo=h(s),f(Le.$$.fragment,s),Vo=h(s),tt=n(s,"P",{});var s0=l(tt);ci=o(s0,"Before you can use your data in a model, the data needs to be processed into an acceptable format for the model. A model does not understand raw text, images or audio. These inputs need to be converted into numbers and assembled into tensors. In this tutorial, you will:"),s0.forEach(a),Ko=h(s),J=n(s,"UL",{});var Zt=l(J);Rn=n(Zt,"LI",{});var e0=l(Rn);hi=o(e0,"Preprocess textual data with a tokenizer."),e0.forEach(a),ii=h(Zt),Fn=n(Zt,"LI",{});var a0=l(Fn);ui=o(a0,"Preprocess image or audio data with a feature extractor."),a0.forEach(a),mi=h(Zt),Hn=n(Zt,"LI",{});var t0=l(Hn);di=o(t0,"Preprocess data for a multimodal task with a processor."),t0.forEach(a),Zt.forEach(a),Qo=h(s),rs=n(s,"H2",{class:!0});var kh=l(rs);Us=n(kh,"A",{id:!0,class:!0,href:!0});var n0=l(Us);Bn=n(n0,"SPAN",{});var l0=l(Bn);f(Se.$$.fragment,l0),l0.forEach(a),n0.forEach(a),fi=h(kh),Jn=n(kh,"SPAN",{});var r0=l(Jn);bi=o(r0,"NLP"),r0.forEach(a),kh.forEach(a),Xo=h(s),f(Ne.$$.fragment,s),Zo=h(s),W=n(s,"P",{});var sn=l(W);ji=o(sn,"The main tool for processing textual data is a "),nt=n(sn,"A",{href:!0});var o0=l(nt);_i=o(o0,"tokenizer"),o0.forEach(a),gi=o(sn,". A tokenizer starts by splitting text into "),Wn=n(sn,"EM",{});var p0=l(Wn);vi=o(p0,"tokens"),p0.forEach(a),Ei=o(sn," according to a set of rules. The tokens are converted into numbers, which are used to build tensors as input to a model. Any additional inputs required by a model are also added by the tokenizer."),sn.forEach(a),sp=h(s),f(Vs.$$.fragment,s),ep=h(s),Y=n(s,"P",{});var en=l(Y);$i=o(en,"Get started quickly by loading a pretrained tokenizer with the "),lt=n(en,"A",{href:!0});var c0=l(lt);wi=o(c0,"AutoTokenizer"),c0.forEach(a),yi=o(en," class. This downloads the "),Yn=n(en,"EM",{});var h0=l(Yn);ki=o(h0,"vocab"),h0.forEach(a),xi=o(en," used when a model is pretrained."),en.forEach(a),ap=h(s),os=n(s,"H3",{class:!0});var xh=l(os);Ks=n(xh,"A",{id:!0,class:!0,href:!0});var i0=l(Ks);Gn=n(i0,"SPAN",{});var u0=l(Gn);f(Ie.$$.fragment,u0),u0.forEach(a),i0.forEach(a),Ti=h(xh),Mn=n(xh,"SPAN",{});var m0=l(Mn);qi=o(m0,"Tokenize"),m0.forEach(a),xh.forEach(a),tp=h(s),Qs=n(s,"P",{});var Th=l(Qs);Di=o(Th,"Load a pretrained tokenizer with "),rt=n(Th,"A",{href:!0});var d0=l(rt);Ai=o(d0,"AutoTokenizer.from_pretrained()"),d0.forEach(a),zi=o(Th,":"),Th.forEach(a),np=h(s),f(Re.$$.fragment,s),lp=h(s),ot=n(s,"P",{});var f0=l(ot);Pi=o(f0,"Then pass your sentence to the tokenizer:"),f0.forEach(a),rp=h(s),f(Fe.$$.fragment,s),op=h(s),pt=n(s,"P",{});var b0=l(pt);Ci=o(b0,"The tokenizer returns a dictionary with three important itmes:"),b0.forEach(a),pp=h(s),G=n(s,"UL",{});var an=l(G);ct=n(an,"LI",{});var L1=l(ct);ht=n(L1,"A",{href:!0});var j0=l(ht);Oi=o(j0,"input_ids"),j0.forEach(a),Li=o(L1," are the indices corresponding to each token in the sentence."),L1.forEach(a),Si=h(an),it=n(an,"LI",{});var S1=l(it);ut=n(S1,"A",{href:!0});var _0=l(ut);Ni=o(_0,"attention_mask"),_0.forEach(a),Ii=o(S1," indicates whether a token should be attended to or not."),S1.forEach(a),Ri=h(an),mt=n(an,"LI",{});var N1=l(mt);dt=n(N1,"A",{href:!0});var g0=l(dt);Fi=o(g0,"token_type_ids"),g0.forEach(a),Hi=o(N1," identifies which sequence a token belongs to when there is more than one sequence."),N1.forEach(a),an.forEach(a),cp=h(s),Xs=n(s,"P",{});var qh=l(Xs);Bi=o(qh,"You can decode the "),Un=n(qh,"CODE",{});var v0=l(Un);Ji=o(v0,"input_ids"),v0.forEach(a),Wi=o(qh," to return the original input:"),qh.forEach(a),hp=h(s),f(He.$$.fragment,s),ip=h(s),M=n(s,"P",{});var tn=l(M);Yi=o(tn,"As you can see, the tokenizer added two special tokens - "),Vn=n(tn,"CODE",{});var E0=l(Vn);Gi=o(E0,"CLS"),E0.forEach(a),Mi=o(tn," and "),Kn=n(tn,"CODE",{});var $0=l(Kn);Ui=o($0,"SEP"),$0.forEach(a),Vi=o(tn,` (classifier and separator) - to the sentence. Not all models need
special tokens, but if they do, the tokenizer will automatically add them for you.`),tn.forEach(a),up=h(s),ft=n(s,"P",{});var w0=l(ft);Ki=o(w0,"If there are several sentences you want to process, pass the sentences as a list to the tokenizer:"),w0.forEach(a),mp=h(s),f(Be.$$.fragment,s),dp=h(s),ps=n(s,"H3",{class:!0});var Dh=l(ps);Zs=n(Dh,"A",{id:!0,class:!0,href:!0});var y0=l(Zs);Qn=n(y0,"SPAN",{});var k0=l(Qn);f(Je.$$.fragment,k0),k0.forEach(a),y0.forEach(a),Qi=h(Dh),Xn=n(Dh,"SPAN",{});var x0=l(Xn);Xi=o(x0,"Pad"),x0.forEach(a),Dh.forEach(a),fp=h(s),se=n(s,"P",{});var Ah=l(se);Zi=o(Ah,"This brings us to an important topic. When you process a batch of sentences, they aren\u2019t always the same length. This is a problem because tensors, the input to the model, need to have a uniform shape. Padding is a strategy for ensuring tensors are rectangular by adding a special "),Zn=n(Ah,"EM",{});var T0=l(Zn);su=o(T0,"padding token"),T0.forEach(a),eu=o(Ah," to sentences with fewer tokens."),Ah.forEach(a),bp=h(s),U=n(s,"P",{});var nn=l(U);au=o(nn,"Set the "),sl=n(nn,"CODE",{});var q0=l(sl);tu=o(q0,"padding"),q0.forEach(a),nu=o(nn," parameter to "),el=n(nn,"CODE",{});var D0=l(el);lu=o(D0,"True"),D0.forEach(a),ru=o(nn," to pad the shorter sequences in the batch to match the longest sequence:"),nn.forEach(a),jp=h(s),f(We.$$.fragment,s),_p=h(s),ee=n(s,"P",{});var zh=l(ee);ou=o(zh,"Notice the tokenizer padded the first and third sentences with a "),al=n(zh,"CODE",{});var A0=l(al);pu=o(A0,"0"),A0.forEach(a),cu=o(zh," because they are shorter!"),zh.forEach(a),gp=h(s),cs=n(s,"H3",{class:!0});var Ph=l(cs);ae=n(Ph,"A",{id:!0,class:!0,href:!0});var z0=l(ae);tl=n(z0,"SPAN",{});var P0=l(tl);f(Ye.$$.fragment,P0),P0.forEach(a),z0.forEach(a),hu=h(Ph),nl=n(Ph,"SPAN",{});var C0=l(nl);iu=o(C0,"Truncation"),C0.forEach(a),Ph.forEach(a),vp=h(s),bt=n(s,"P",{});var O0=l(bt);uu=o(O0,"On the other end of the spectrum, sometimes a sequence may be too long for a model to handle. In this case, you will need to truncate the sequence to a shorter length."),O0.forEach(a),Ep=h(s),V=n(s,"P",{});var ln=l(V);mu=o(ln,"Set the "),ll=n(ln,"CODE",{});var L0=l(ll);du=o(L0,"truncation"),L0.forEach(a),fu=o(ln," parameter to "),rl=n(ln,"CODE",{});var S0=l(rl);bu=o(S0,"True"),S0.forEach(a),ju=o(ln," to truncate a sequence to the maximum length accepted by the model:"),ln.forEach(a),$p=h(s),f(Ge.$$.fragment,s),wp=h(s),hs=n(s,"H3",{class:!0});var Ch=l(hs);te=n(Ch,"A",{id:!0,class:!0,href:!0});var N0=l(te);ol=n(N0,"SPAN",{});var I0=l(ol);f(Me.$$.fragment,I0),I0.forEach(a),N0.forEach(a),_u=h(Ch),pl=n(Ch,"SPAN",{});var R0=l(pl);gu=o(R0,"Build tensors"),R0.forEach(a),Ch.forEach(a),yp=h(s),jt=n(s,"P",{});var F0=l(jt);vu=o(F0,"Finally, you want the tokenizer to return the actual tensors that are fed to the model."),F0.forEach(a),kp=h(s),P=n(s,"P",{});var Ae=l(P);Eu=o(Ae,"Set the "),cl=n(Ae,"CODE",{});var H0=l(cl);$u=o(H0,"return_tensors"),H0.forEach(a),wu=o(Ae," parameter to either "),hl=n(Ae,"CODE",{});var B0=l(hl);yu=o(B0,"pt"),B0.forEach(a),ku=o(Ae," for PyTorch, or "),il=n(Ae,"CODE",{});var J0=l(il);xu=o(J0,"tf"),J0.forEach(a),Tu=o(Ae," for TensorFlow:"),Ae.forEach(a),xp=h(s),f(ne.$$.fragment,s),Tp=h(s),is=n(s,"H2",{class:!0});var Oh=l(is);le=n(Oh,"A",{id:!0,class:!0,href:!0});var W0=l(le);ul=n(W0,"SPAN",{});var Y0=l(ul);f(Ue.$$.fragment,Y0),Y0.forEach(a),W0.forEach(a),qu=h(Oh),ml=n(Oh,"SPAN",{});var G0=l(ml);Du=o(G0,"Audio"),G0.forEach(a),Oh.forEach(a),qp=h(s),re=n(s,"P",{});var Lh=l(re);Au=o(Lh,"Audio inputs are preprocessed differently than textual inputs, but the end goal remains the same: create numerical sequences the model can understand. A "),_t=n(Lh,"A",{href:!0});var M0=l(_t);zu=o(M0,"feature extractor"),M0.forEach(a),Pu=o(Lh," is designed for the express purpose of extracting features from raw image or audio data and converting them into tensors. Before you begin, install \u{1F917} Datasets to load an audio dataset to experiment with:"),Lh.forEach(a),Dp=h(s),f(Ve.$$.fragment,s),Ap=h(s),K=n(s,"P",{});var rn=l(K);Cu=o(rn,"Load the keyword spotting task from the "),Ke=n(rn,"A",{href:!0,rel:!0});var U0=l(Ke);Ou=o(U0,"SUPERB"),U0.forEach(a),Lu=o(rn," benchmark (see the \u{1F917} "),Qe=n(rn,"A",{href:!0,rel:!0});var V0=l(Qe);Su=o(V0,"Datasets tutorial"),V0.forEach(a),Nu=o(rn," for more details on how to load a dataset):"),rn.forEach(a),zp=h(s),f(Xe.$$.fragment,s),Pp=h(s),Q=n(s,"P",{});var on=l(Q);Iu=o(on,"Access the first element of the "),dl=n(on,"CODE",{});var K0=l(dl);Ru=o(K0,"audio"),K0.forEach(a),Fu=o(on," column to take a look at the input. Calling the "),fl=n(on,"CODE",{});var Q0=l(fl);Hu=o(Q0,"audio"),Q0.forEach(a),Bu=o(on," column will automatically load and resample the audio file:"),on.forEach(a),Cp=h(s),f(Ze.$$.fragment,s),Op=h(s),gt=n(s,"P",{});var X0=l(gt);Ju=o(X0,"This returns three items:"),X0.forEach(a),Lp=h(s),X=n(s,"UL",{});var pn=l(X);vt=n(pn,"LI",{});var I1=l(vt);bl=n(I1,"CODE",{});var Z0=l(bl);Wu=o(Z0,"array"),Z0.forEach(a),Yu=o(I1," is the speech signal loaded - and potentially resampled - as a 1D array."),I1.forEach(a),Gu=h(pn),Et=n(pn,"LI",{});var R1=l(Et);jl=n(R1,"CODE",{});var s_=l(jl);Mu=o(s_,"path"),s_.forEach(a),Uu=o(R1," points to the location of the audio file."),R1.forEach(a),Vu=h(pn),$t=n(pn,"LI",{});var F1=l($t);_l=n(F1,"CODE",{});var e_=l(_l);Ku=o(e_,"sampling_rate"),e_.forEach(a),Qu=o(F1," refers to how many data points in the speech signal are measured per second."),F1.forEach(a),pn.forEach(a),Sp=h(s),us=n(s,"H3",{class:!0});var Sh=l(us);oe=n(Sh,"A",{id:!0,class:!0,href:!0});var a_=l(oe);gl=n(a_,"SPAN",{});var t_=l(gl);f(sa.$$.fragment,t_),t_.forEach(a),a_.forEach(a),Xu=h(Sh),vl=n(Sh,"SPAN",{});var n_=l(vl);Zu=o(n_,"Resample"),n_.forEach(a),Sh.forEach(a),Np=h(s),pe=n(s,"P",{});var Nh=l(pe);sm=o(Nh,"For this tutorial, you will use the "),ea=n(Nh,"A",{href:!0,rel:!0});var l_=l(ea);em=o(l_,"Wav2Vec2"),l_.forEach(a),am=o(Nh," model. As you can see from the model card, the Wav2Vec2 model is pretrained on 16kHz sampled speech audio. It is important your audio data\u2019s sampling rate matches the sampling rate of the dataset used to pretrain the model. If your data\u2019s sampling rate isn\u2019t the same, then you need to resample your audio data."),Nh.forEach(a),Ip=h(s),ce=n(s,"P",{});var Ih=l(ce);tm=o(Ih,"For example, load the "),aa=n(Ih,"A",{href:!0,rel:!0});var r_=l(aa);nm=o(r_,"LJ Speech"),r_.forEach(a),lm=o(Ih," dataset which has a sampling rate of 22050kHz. In order to use the Wav2Vec2 model with this dataset, downsample the sampling rate to 16kHz:"),Ih.forEach(a),Rp=h(s),f(ta.$$.fragment,s),Fp=h(s),wt=n(s,"OL",{});var o_=l(wt);na=n(o_,"LI",{});var Rh=l(na);rm=o(Rh,"Use \u{1F917} Datasets\u2019 "),la=n(Rh,"A",{href:!0,rel:!0});var p_=l(la);El=n(p_,"CODE",{});var c_=l(El);om=o(c_,"cast_column"),c_.forEach(a),p_.forEach(a),pm=o(Rh," method to downsample the sampling rate to 16kHz:"),Rh.forEach(a),o_.forEach(a),Hp=h(s),f(ra.$$.fragment,s),Bp=h(s),oa=n(s,"OL",{start:!0});var h_=l(oa);$l=n(h_,"LI",{});var i_=l($l);cm=o(i_,"Load the audio file:"),i_.forEach(a),h_.forEach(a),Jp=h(s),f(pa.$$.fragment,s),Wp=h(s),he=n(s,"P",{});var Fh=l(he);hm=o(Fh,"As you can see, the "),wl=n(Fh,"CODE",{});var u_=l(wl);im=o(u_,"sampling_rate"),u_.forEach(a),um=o(Fh," was downsampled to 16kHz. Now that you know how resampling works, let\u2019s return to our previous example with the SUPERB dataset!"),Fh.forEach(a),Yp=h(s),ms=n(s,"H3",{class:!0});var Hh=l(ms);ie=n(Hh,"A",{id:!0,class:!0,href:!0});var m_=l(ie);yl=n(m_,"SPAN",{});var d_=l(yl);f(ca.$$.fragment,d_),d_.forEach(a),m_.forEach(a),mm=h(Hh),kl=n(Hh,"SPAN",{});var f_=l(kl);dm=o(f_,"Feature extractor"),f_.forEach(a),Hh.forEach(a),Gp=h(s),C=n(s,"P",{});var ze=l(C);fm=o(ze,"The next step is to load a feature extractor to normalize and pad the input. When padding textual data, a "),xl=n(ze,"CODE",{});var b_=l(xl);bm=o(b_,"0"),b_.forEach(a),jm=o(ze," is added for shorter sequences. The same idea applies to audio data, and the audio feature extractor will add a "),Tl=n(ze,"CODE",{});var j_=l(Tl);_m=o(j_,"0"),j_.forEach(a),gm=o(ze," - interpreted as silence - to "),ql=n(ze,"CODE",{});var __=l(ql);vm=o(__,"array"),__.forEach(a),Em=o(ze,"."),ze.forEach(a),Mp=h(s),ue=n(s,"P",{});var Bh=l(ue);$m=o(Bh,"Load the feature extractor with "),yt=n(Bh,"A",{href:!0});var g_=l(yt);wm=o(g_,"AutoFeatureExtractor.from_pretrained()"),g_.forEach(a),ym=o(Bh,":"),Bh.forEach(a),Up=h(s),f(ha.$$.fragment,s),Vp=h(s),Z=n(s,"P",{});var cn=l(Z);km=o(cn,"Pass the audio "),Dl=n(cn,"CODE",{});var v_=l(Dl);xm=o(v_,"array"),v_.forEach(a),Tm=o(cn," to the feature extractor. We also recommend adding the "),Al=n(cn,"CODE",{});var E_=l(Al);qm=o(E_,"sampling_rate"),E_.forEach(a),Dm=o(cn," argument in the feature extractor in order to better debug any silent errors that may occur."),cn.forEach(a),Kp=h(s),f(ia.$$.fragment,s),Qp=h(s),ds=n(s,"H3",{class:!0});var Jh=l(ds);me=n(Jh,"A",{id:!0,class:!0,href:!0});var $_=l(me);zl=n($_,"SPAN",{});var w_=l(zl);f(ua.$$.fragment,w_),w_.forEach(a),$_.forEach(a),Am=h(Jh),Pl=n(Jh,"SPAN",{});var y_=l(Pl);zm=o(y_,"Pad and truncate"),y_.forEach(a),Jh.forEach(a),Xp=h(s),kt=n(s,"P",{});var k_=l(kt);Pm=o(k_,"Just like the tokenizer, you can apply padding or truncation to handle variable sequences in a batch. Take a look at the sequence length of these two audio samples:"),k_.forEach(a),Zp=h(s),f(ma.$$.fragment,s),sc=h(s),xt=n(s,"P",{});var x_=l(xt);Cm=o(x_,"As you can see, the first sample has a longer sequence than the second sample. Let\u2019s create a function that will preprocess the dataset. Specify a maximum sample length, and the feature extractor will either pad or truncate the sequences to match it:"),x_.forEach(a),ec=h(s),f(da.$$.fragment,s),ac=h(s),Tt=n(s,"P",{});var T_=l(Tt);Om=o(T_,"Apply the function to the the first few examples in the dataset:"),T_.forEach(a),tc=h(s),f(fa.$$.fragment,s),nc=h(s),qt=n(s,"P",{});var q_=l(qt);Lm=o(q_,"Now take another look at the processed sample lengths:"),q_.forEach(a),lc=h(s),f(ba.$$.fragment,s),rc=h(s),Dt=n(s,"P",{});var D_=l(Dt);Sm=o(D_,"The lengths of the first two samples now match the maximum length you specified."),D_.forEach(a),oc=h(s),fs=n(s,"H2",{class:!0});var Wh=l(fs);de=n(Wh,"A",{id:!0,class:!0,href:!0});var A_=l(de);Cl=n(A_,"SPAN",{});var z_=l(Cl);f(ja.$$.fragment,z_),z_.forEach(a),A_.forEach(a),Nm=h(Wh),Ol=n(Wh,"SPAN",{});var P_=l(Ol);Im=o(P_,"Vision"),P_.forEach(a),Wh.forEach(a),pc=h(s),At=n(s,"P",{});var C_=l(At);Rm=o(C_,"A feature extractor is also used to process images for vision tasks. Once again, the goal is to convert the raw image into a batch of tensors as input."),C_.forEach(a),cc=h(s),ss=n(s,"P",{});var hn=l(ss);Fm=o(hn,"Let\u2019s load the "),_a=n(hn,"A",{href:!0,rel:!0});var O_=l(_a);Hm=o(O_,"food101"),O_.forEach(a),Bm=o(hn," dataset for this tutorial. Use \u{1F917} Datasets "),Ll=n(hn,"CODE",{});var L_=l(Ll);Jm=o(L_,"split"),L_.forEach(a),Wm=o(hn," parameter to only load a small sample from the training split since the dataset is quite large:"),hn.forEach(a),hc=h(s),f(ga.$$.fragment,s),ic=h(s),fe=n(s,"P",{});var Yh=l(fe);Ym=o(Yh,"Next, take a look at the image with \u{1F917} Datasets "),va=n(Yh,"A",{href:!0,rel:!0});var S_=l(va);Sl=n(S_,"CODE",{});var N_=l(Sl);Gm=o(N_,"Image"),N_.forEach(a),S_.forEach(a),Mm=o(Yh," feature:"),Yh.forEach(a),uc=h(s),f(Ea.$$.fragment,s),mc=h(s),zt=n(s,"P",{});var I_=l(zt);Pt=n(I_,"IMG",{src:!0,alt:!0}),I_.forEach(a),dc=h(s),bs=n(s,"H3",{class:!0});var Gh=l(bs);be=n(Gh,"A",{id:!0,class:!0,href:!0});var R_=l(be);Nl=n(R_,"SPAN",{});var F_=l(Nl);f($a.$$.fragment,F_),F_.forEach(a),R_.forEach(a),Um=h(Gh),Il=n(Gh,"SPAN",{});var H_=l(Il);Vm=o(H_,"Feature extractor"),H_.forEach(a),Gh.forEach(a),fc=h(s),je=n(s,"P",{});var Mh=l(je);Km=o(Mh,"Load the feature extractor with "),Ct=n(Mh,"A",{href:!0});var B_=l(Ct);Qm=o(B_,"AutoFeatureExtractor.from_pretrained()"),B_.forEach(a),Xm=o(Mh,":"),Mh.forEach(a),bc=h(s),f(wa.$$.fragment,s),jc=h(s),js=n(s,"H3",{class:!0});var Uh=l(js);_e=n(Uh,"A",{id:!0,class:!0,href:!0});var J_=l(_e);Rl=n(J_,"SPAN",{});var W_=l(Rl);f(ya.$$.fragment,W_),W_.forEach(a),J_.forEach(a),Zm=h(Uh),Fl=n(Uh,"SPAN",{});var Y_=l(Fl);sd=o(Y_,"Data augmentation"),Y_.forEach(a),Uh.forEach(a),_c=h(s),ge=n(s,"P",{});var Vh=l(ge);ed=o(Vh,"For vision tasks, it is common to add some type of data augmentation to the images as a part of preprocessing. You can add augmentations with any library you\u2019d like, but in this tutorial, you will use torchvision\u2019s "),ka=n(Vh,"A",{href:!0,rel:!0});var G_=l(ka);Hl=n(G_,"CODE",{});var M_=l(Hl);ad=o(M_,"transforms"),M_.forEach(a),G_.forEach(a),td=o(Vh," module."),Vh.forEach(a),gc=h(s),Ot=n(s,"OL",{});var U_=l(Ot);R=n(U_,"LI",{});var Pe=l(R);nd=o(Pe,"Normalize the image and use "),xa=n(Pe,"A",{href:!0,rel:!0});var V_=l(xa);Bl=n(V_,"CODE",{});var K_=l(Bl);ld=o(K_,"Compose"),K_.forEach(a),V_.forEach(a),rd=o(Pe," to chain some transforms - "),Ta=n(Pe,"A",{href:!0,rel:!0});var Q_=l(Ta);Jl=n(Q_,"CODE",{});var X_=l(Jl);od=o(X_,"RandomResizedCrop"),X_.forEach(a),Q_.forEach(a),pd=o(Pe," and "),qa=n(Pe,"A",{href:!0,rel:!0});var Z_=l(qa);Wl=n(Z_,"CODE",{});var sg=l(Wl);cd=o(sg,"ColorJitter"),sg.forEach(a),Z_.forEach(a),hd=o(Pe," - together:"),Pe.forEach(a),U_.forEach(a),vc=h(s),f(Da.$$.fragment,s),Ec=h(s),Aa=n(s,"OL",{start:!0});var eg=l(Aa);_s=n(eg,"LI",{});var un=l(_s);id=o(un,"The model accepts "),Lt=n(un,"A",{href:!0});var ag=l(Lt);Yl=n(ag,"CODE",{});var tg=l(Yl);ud=o(tg,"pixel_values"),tg.forEach(a),ag.forEach(a),md=o(un," as it\u2019s input. This value is generated by the feature extractor. Create a function that generates "),Gl=n(un,"CODE",{});var ng=l(Gl);dd=o(ng,"pixel_values"),ng.forEach(a),fd=o(un," from the transforms:"),un.forEach(a),eg.forEach(a),$c=h(s),f(za.$$.fragment,s),wc=h(s),Pa=n(s,"OL",{start:!0});var lg=l(Pa);Ca=n(lg,"LI",{});var Kh=l(Ca);bd=o(Kh,"Then use \u{1F917} Datasets "),Oa=n(Kh,"A",{href:!0,rel:!0});var rg=l(Oa);Ml=n(rg,"CODE",{});var og=l(Ml);jd=o(og,"set_transform"),og.forEach(a),rg.forEach(a),_d=o(Kh," to apply the transforms on-the-fly:"),Kh.forEach(a),lg.forEach(a),yc=h(s),f(La.$$.fragment,s),kc=h(s),Sa=n(s,"OL",{start:!0});var pg=l(Sa);Na=n(pg,"LI",{});var Qh=l(Na);gd=o(Qh,"Now when you access the image, you will notice the feature extractor has added the model input "),Ul=n(Qh,"CODE",{});var cg=l(Ul);vd=o(cg,"pixel_values"),cg.forEach(a),Ed=o(Qh,":"),Qh.forEach(a),pg.forEach(a),xc=h(s),f(Ia.$$.fragment,s),Tc=h(s),St=n(s,"P",{});var hg=l(St);$d=o(hg,"Here is what the image looks like after you preprocess it. Just as you\u2019d expect from the applied transforms, the image has been randomly cropped and it\u2019s color properties are different."),hg.forEach(a),qc=h(s),f(Ra.$$.fragment,s),Dc=h(s),Nt=n(s,"P",{});var ig=l(Nt);It=n(ig,"IMG",{src:!0,alt:!0}),ig.forEach(a),Ac=h(s),gs=n(s,"H2",{class:!0});var Xh=l(gs);ve=n(Xh,"A",{id:!0,class:!0,href:!0});var ug=l(ve);Vl=n(ug,"SPAN",{});var mg=l(Vl);f(Fa.$$.fragment,mg),mg.forEach(a),ug.forEach(a),wd=h(Xh),Kl=n(Xh,"SPAN",{});var dg=l(Kl);yd=o(dg,"Multimodal"),dg.forEach(a),Xh.forEach(a),zc=h(s),Rt=n(s,"P",{});var fg=l(Rt);kd=o(fg,"For multimodal tasks. you will use a combination of everything you\u2019ve learned so far and apply your skills to a automatic speech recognition (ASR) task. This means you will need a:"),fg.forEach(a),Pc=h(s),Ee=n(s,"UL",{});var Zh=l(Ee);Ql=n(Zh,"LI",{});var bg=l(Ql);xd=o(bg,"Feature extractor to preprocess the audio data."),bg.forEach(a),Td=h(Zh),Xl=n(Zh,"LI",{});var jg=l(Xl);qd=o(jg,"Tokenizer to process the text."),jg.forEach(a),Zh.forEach(a),Cc=h(s),$e=n(s,"P",{});var si=l($e);Dd=o(si,"Let\u2019s return to the "),Ha=n(si,"A",{href:!0,rel:!0});var _g=l(Ha);Ad=o(_g,"LJ Speech"),_g.forEach(a),zd=o(si," dataset:"),si.forEach(a),Oc=h(s),f(Ba.$$.fragment,s),Lc=h(s),es=n(s,"P",{});var mn=l(es);Pd=o(mn,"Since you are mainly interested in the "),Zl=n(mn,"CODE",{});var gg=l(Zl);Cd=o(gg,"audio"),gg.forEach(a),Od=o(mn," and "),sr=n(mn,"CODE",{});var vg=l(sr);Ld=o(vg,"text"),vg.forEach(a),Sd=o(mn," column, remove the other columns:"),mn.forEach(a),Sc=h(s),f(Ja.$$.fragment,s),Nc=h(s),as=n(s,"P",{});var dn=l(as);Nd=o(dn,"Now take a look at the "),er=n(dn,"CODE",{});var Eg=l(er);Id=o(Eg,"audio"),Eg.forEach(a),Rd=o(dn," and "),ar=n(dn,"CODE",{});var $g=l(ar);Fd=o($g,"text"),$g.forEach(a),Hd=o(dn," columns:"),dn.forEach(a),Ic=h(s),f(Wa.$$.fragment,s),Rc=h(s),we=n(s,"P",{});var ei=l(we);Bd=o(ei,"Remember from the earlier section on processing audio data, you should always "),Ft=n(ei,"A",{href:!0});var wg=l(Ft);Jd=o(wg,"resample"),wg.forEach(a),Wd=o(ei," your audio data\u2019s sampling rate to match the sampling rate of the dataset used to pretrain a model:"),ei.forEach(a),Fc=h(s),f(Ya.$$.fragment,s),Hc=h(s),vs=n(s,"H3",{class:!0});var ai=l(vs);ye=n(ai,"A",{id:!0,class:!0,href:!0});var yg=l(ye);tr=n(yg,"SPAN",{});var kg=l(tr);f(Ga.$$.fragment,kg),kg.forEach(a),yg.forEach(a),Yd=h(ai),nr=n(ai,"SPAN",{});var xg=l(nr);Gd=o(xg,"Processor"),xg.forEach(a),ai.forEach(a),Bc=h(s),Ht=n(s,"P",{});var Tg=l(Ht);Md=o(Tg,"A processor combines a feature extractor and tokenizer. Load a processor with [`AutoProcessor.from_pretrained]:"),Tg.forEach(a),Jc=h(s),f(Ma.$$.fragment,s),Wc=h(s),Bt=n(s,"OL",{});var qg=l(Bt);Es=n(qg,"LI",{});var fn=l(Es);Ud=o(fn,"Create a function to process the audio data to "),lr=n(fn,"CODE",{});var Dg=l(lr);Vd=o(Dg,"input_values"),Dg.forEach(a),Kd=o(fn,", and tokenizes the text to "),rr=n(fn,"CODE",{});var Ag=l(rr);Qd=o(Ag,"labels"),Ag.forEach(a),Xd=o(fn,". These are your inputs to the model:"),fn.forEach(a),qg.forEach(a),Yc=h(s),f(Ua.$$.fragment,s),Gc=h(s),Va=n(s,"OL",{start:!0});var zg=l(Va);Ka=n(zg,"LI",{});var ti=l(Ka);Zd=o(ti,"Apply the "),or=n(ti,"CODE",{});var Pg=l(or);sf=o(Pg,"prepare_dataset"),Pg.forEach(a),ef=o(ti," function to a sample:"),ti.forEach(a),zg.forEach(a),Mc=h(s),f(Qa.$$.fragment,s),Uc=h(s),ts=n(s,"P",{});var bn=l(ts);af=o(bn,"Notice the processor has added "),pr=n(bn,"CODE",{});var Cg=l(pr);tf=o(Cg,"input_values"),Cg.forEach(a),nf=o(bn," and "),cr=n(bn,"CODE",{});var Og=l(cr);lf=o(Og,"labels"),Og.forEach(a),rf=o(bn,". The sampling rate has also been correctly downsampled to 16kHz."),bn.forEach(a),Vc=h(s),Jt=n(s,"P",{});var Lg=l(Jt);of=o(Lg,"Awesome, you should now be able to preprocess data for any modality and even combine different modalities! In the next tutorial, learn how to fine-tune a model on your newly preprocessed data."),Lg.forEach(a),Kc=h(s),$s=n(s,"H2",{class:!0});var ni=l($s);ke=n(ni,"A",{id:!0,class:!0,href:!0});var Sg=l(ke);hr=n(Sg,"SPAN",{});var Ng=l(hr);f(Xa.$$.fragment,Ng),Ng.forEach(a),Sg.forEach(a),pf=h(ni),ir=n(ni,"SPAN",{});var Ig=l(ir);cf=o(Ig,"Everything you always wanted to know about padding and truncation"),Ig.forEach(a),ni.forEach(a),Qc=h(s),O=n(s,"P",{});var Ce=l(O);hf=o(Ce,`We have seen the commands that will work for most cases (pad your batch to the length of the maximum sentence and
truncate to the maximum length the model can accept). However, the API supports more strategies if you need them. The
three arguments you need to know for this are `),ur=n(Ce,"CODE",{});var Rg=l(ur);uf=o(Rg,"padding"),Rg.forEach(a),mf=o(Ce,", "),mr=n(Ce,"CODE",{});var Fg=l(mr);df=o(Fg,"truncation"),Fg.forEach(a),ff=o(Ce," and "),dr=n(Ce,"CODE",{});var Hg=l(dr);bf=o(Hg,"max_length"),Hg.forEach(a),jf=o(Ce,"."),Ce.forEach(a),Xc=h(s),ns=n(s,"UL",{});var jn=l(ns);Za=n(jn,"LI",{});var li=l(Za);Wt=n(li,"P",{});var H1=l(Wt);fr=n(H1,"CODE",{});var Bg=l(fr);_f=o(Bg,"padding"),Bg.forEach(a),gf=o(H1," controls the padding. It can be a boolean or a string which should be:"),H1.forEach(a),vf=h(li),ws=n(li,"UL",{});var _n=l(ws);xe=n(_n,"LI",{});var Yo=l(xe);br=n(Yo,"CODE",{});var Jg=l(br);Ef=o(Jg,"True"),Jg.forEach(a),$f=o(Yo," or "),jr=n(Yo,"CODE",{});var Wg=l(jr);wf=o(Wg,"'longest'"),Wg.forEach(a),yf=o(Yo,` to pad to the longest sequence in the batch (doing no padding if you only provide
a single sequence).`),Yo.forEach(a),kf=h(_n),L=n(_n,"LI",{});var Ws=l(L);_r=n(Ws,"CODE",{});var Yg=l(_r);xf=o(Yg,"'max_length'"),Yg.forEach(a),Tf=o(Ws," to pad to a length specified by the "),gr=n(Ws,"CODE",{});var Gg=l(gr);qf=o(Gg,"max_length"),Gg.forEach(a),Df=o(Ws,` argument or the maximum length accepted
by the model if no `),vr=n(Ws,"CODE",{});var Mg=l(vr);Af=o(Mg,"max_length"),Mg.forEach(a),zf=o(Ws," is provided ("),Er=n(Ws,"CODE",{});var Ug=l(Er);Pf=o(Ug,"max_length=None"),Ug.forEach(a),Cf=o(Ws,`). If you only provide a single sequence,
padding will still be applied to it.`),Ws.forEach(a),Of=h(_n),Te=n(_n,"LI",{});var Go=l(Te);$r=n(Go,"CODE",{});var Vg=l($r);Lf=o(Vg,"False"),Vg.forEach(a),Sf=o(Go," or "),wr=n(Go,"CODE",{});var Kg=l(wr);Nf=o(Kg,"'do_not_pad'"),Kg.forEach(a),If=o(Go,` to not pad the sequences. As we have seen before, this is the default
behavior.`),Go.forEach(a),_n.forEach(a),li.forEach(a),Rf=h(jn),st=n(jn,"LI",{});var ri=l(st);Yt=n(ri,"P",{});var B1=l(Yt);yr=n(B1,"CODE",{});var Qg=l(yr);Ff=o(Qg,"truncation"),Qg.forEach(a),Hf=o(B1," controls the truncation. It can be a boolean or a string which should be:"),B1.forEach(a),Bf=h(ri),F=n(ri,"UL",{});var Oe=l(F);D=n(Oe,"LI",{});var H=l(D);kr=n(H,"CODE",{});var Xg=l(kr);Jf=o(Xg,"True"),Xg.forEach(a),Wf=o(H," or "),xr=n(H,"CODE",{});var Zg=l(xr);Yf=o(Zg,"'longest_first'"),Zg.forEach(a),Gf=o(H," truncate to a maximum length specified by the "),Tr=n(H,"CODE",{});var s2=l(Tr);Mf=o(s2,"max_length"),s2.forEach(a),Uf=o(H,` argument or
the maximum length accepted by the model if no `),qr=n(H,"CODE",{});var e2=l(qr);Vf=o(e2,"max_length"),e2.forEach(a),Kf=o(H," is provided ("),Dr=n(H,"CODE",{});var a2=l(Dr);Qf=o(a2,"max_length=None"),a2.forEach(a),Xf=o(H,`). This will
truncate token by token, removing a token from the longest sequence in the pair until the proper length is
reached.`),H.forEach(a),Zf=h(Oe),S=n(Oe,"LI",{});var Ys=l(S);Ar=n(Ys,"CODE",{});var t2=l(Ar);sb=o(t2,"'only_second'"),t2.forEach(a),eb=o(Ys," truncate to a maximum length specified by the "),zr=n(Ys,"CODE",{});var n2=l(zr);ab=o(n2,"max_length"),n2.forEach(a),tb=o(Ys,` argument or the maximum
length accepted by the model if no `),Pr=n(Ys,"CODE",{});var l2=l(Pr);nb=o(l2,"max_length"),l2.forEach(a),lb=o(Ys," is provided ("),Cr=n(Ys,"CODE",{});var r2=l(Cr);rb=o(r2,"max_length=None"),r2.forEach(a),ob=o(Ys,`). This will only truncate
the second sentence of a pair if a pair of sequence (or a batch of pairs of sequences) is provided.`),Ys.forEach(a),pb=h(Oe),N=n(Oe,"LI",{});var Gs=l(N);Or=n(Gs,"CODE",{});var o2=l(Or);cb=o(o2,"'only_first'"),o2.forEach(a),hb=o(Gs," truncate to a maximum length specified by the "),Lr=n(Gs,"CODE",{});var p2=l(Lr);ib=o(p2,"max_length"),p2.forEach(a),ub=o(Gs,` argument or the maximum
length accepted by the model if no `),Sr=n(Gs,"CODE",{});var c2=l(Sr);mb=o(c2,"max_length"),c2.forEach(a),db=o(Gs," is provided ("),Nr=n(Gs,"CODE",{});var h2=l(Nr);fb=o(h2,"max_length=None"),h2.forEach(a),bb=o(Gs,`). This will only truncate
the first sentence of a pair if a pair of sequence (or a batch of pairs of sequences) is provided.`),Gs.forEach(a),jb=h(Oe),qe=n(Oe,"LI",{});var Mo=l(qe);Ir=n(Mo,"CODE",{});var i2=l(Ir);_b=o(i2,"False"),i2.forEach(a),gb=o(Mo," or "),Rr=n(Mo,"CODE",{});var u2=l(Rr);vb=o(u2,"'do_not_truncate'"),u2.forEach(a),Eb=o(Mo,` to not truncate the sequences. As we have seen before, this is the
default behavior.`),Mo.forEach(a),Oe.forEach(a),ri.forEach(a),$b=h(jn),Fr=n(jn,"LI",{});var m2=l(Fr);ls=n(m2,"P",{});var at=l(ls);Hr=n(at,"CODE",{});var d2=l(Hr);wb=o(d2,"max_length"),d2.forEach(a),yb=o(at," to control the length of the padding/truncation. It can be an integer or "),Br=n(at,"CODE",{});var f2=l(Br);kb=o(f2,"None"),f2.forEach(a),xb=o(at,`, in which case
it will default to the maximum length the model can accept. If the model has no specific maximum input length,
truncation/padding to `),Jr=n(at,"CODE",{});var b2=l(Jr);Tb=o(b2,"max_length"),b2.forEach(a),qb=o(at," is deactivated."),at.forEach(a),m2.forEach(a),jn.forEach(a),Zc=h(s),x=n(s,"P",{});var I=l(x);Db=o(I,`Here is a table summarizing the recommend way to setup padding and truncation. If you use pair of inputs sequence in
any of the following examples, you can replace `),Wr=n(I,"CODE",{});var j2=l(Wr);Ab=o(j2,"truncation=True"),j2.forEach(a),zb=o(I," by a "),Yr=n(I,"CODE",{});var _2=l(Yr);Pb=o(_2,"STRATEGY"),_2.forEach(a),Cb=o(I,` selected in
`),Gr=n(I,"CODE",{});var g2=l(Gr);Ob=o(g2,"['only_first', 'only_second', 'longest_first']"),g2.forEach(a),Lb=o(I,", i.e. "),Mr=n(I,"CODE",{});var v2=l(Mr);Sb=o(v2,"truncation='only_second'"),v2.forEach(a),Nb=o(I," or "),Ur=n(I,"CODE",{});var E2=l(Ur);Ib=o(E2,"truncation= 'longest_first'"),E2.forEach(a),Rb=o(I," to control how both sequence in the pair are truncated as detailed before."),I.forEach(a),sh=h(s),De=n(s,"TABLE",{});var oi=l(De);Vr=n(oi,"THEAD",{});var $2=l(Vr);ys=n($2,"TR",{});var gn=l(ys);Kr=n(gn,"TH",{});var w2=l(Kr);Fb=o(w2,"Truncation"),w2.forEach(a),Hb=h(gn),Qr=n(gn,"TH",{});var y2=l(Qr);Bb=o(y2,"Padding"),y2.forEach(a),Jb=h(gn),Xr=n(gn,"TH",{});var k2=l(Xr);Wb=o(k2,"Instruction"),k2.forEach(a),gn.forEach(a),$2.forEach(a),Yb=h(oi),E=n(oi,"TBODY",{});var $=l(E);ks=n($,"TR",{});var vn=l(ks);Zr=n(vn,"TD",{});var x2=l(Zr);Gb=o(x2,"no truncation"),x2.forEach(a),Mb=h(vn),so=n(vn,"TD",{});var T2=l(so);Ub=o(T2,"no padding"),T2.forEach(a),Vb=h(vn),eo=n(vn,"TD",{});var q2=l(eo);ao=n(q2,"CODE",{});var D2=l(ao);Kb=o(D2,"tokenizer(batch_sentences)"),D2.forEach(a),q2.forEach(a),vn.forEach(a),Qb=h($),xs=n($,"TR",{});var En=l(xs);eh=n(En,"TD",{}),l(eh).forEach(a),Xb=h(En),to=n(En,"TD",{});var A2=l(to);Zb=o(A2,"padding to max sequence in batch"),A2.forEach(a),sj=h(En),Gt=n(En,"TD",{});var J1=l(Gt);no=n(J1,"CODE",{});var z2=l(no);ej=o(z2,"tokenizer(batch_sentences, padding=True)"),z2.forEach(a),aj=o(J1," or"),J1.forEach(a),En.forEach(a),tj=h($),Ts=n($,"TR",{});var $n=l(Ts);ah=n($n,"TD",{}),l(ah).forEach(a),nj=h($n),th=n($n,"TD",{}),l(th).forEach(a),lj=h($n),lo=n($n,"TD",{});var P2=l(lo);ro=n(P2,"CODE",{});var C2=l(ro);rj=o(C2,"tokenizer(batch_sentences, padding='longest')"),C2.forEach(a),P2.forEach(a),$n.forEach(a),oj=h($),qs=n($,"TR",{});var wn=l(qs);nh=n(wn,"TD",{}),l(nh).forEach(a),pj=h(wn),oo=n(wn,"TD",{});var O2=l(oo);cj=o(O2,"padding to max model input length"),O2.forEach(a),hj=h(wn),po=n(wn,"TD",{});var L2=l(po);co=n(L2,"CODE",{});var S2=l(co);ij=o(S2,"tokenizer(batch_sentences, padding='max_length')"),S2.forEach(a),L2.forEach(a),wn.forEach(a),uj=h($),Ds=n($,"TR",{});var yn=l(Ds);lh=n(yn,"TD",{}),l(lh).forEach(a),mj=h(yn),ho=n(yn,"TD",{});var N2=l(ho);dj=o(N2,"padding to specific length"),N2.forEach(a),fj=h(yn),io=n(yn,"TD",{});var I2=l(io);uo=n(I2,"CODE",{});var R2=l(uo);bj=o(R2,"tokenizer(batch_sentences, padding='max_length', max_length=42)"),R2.forEach(a),I2.forEach(a),yn.forEach(a),jj=h($),As=n($,"TR",{});var kn=l(As);mo=n(kn,"TD",{});var F2=l(mo);_j=o(F2,"truncation to max model input length"),F2.forEach(a),gj=h(kn),fo=n(kn,"TD",{});var H2=l(fo);vj=o(H2,"no padding"),H2.forEach(a),Ej=h(kn),Mt=n(kn,"TD",{});var W1=l(Mt);bo=n(W1,"CODE",{});var B2=l(bo);$j=o(B2,"tokenizer(batch_sentences, truncation=True)"),B2.forEach(a),wj=o(W1," or"),W1.forEach(a),kn.forEach(a),yj=h($),zs=n($,"TR",{});var xn=l(zs);rh=n(xn,"TD",{}),l(rh).forEach(a),kj=h(xn),oh=n(xn,"TD",{}),l(oh).forEach(a),xj=h(xn),jo=n(xn,"TD",{});var J2=l(jo);_o=n(J2,"CODE",{});var W2=l(_o);Tj=o(W2,"tokenizer(batch_sentences, truncation=STRATEGY)"),W2.forEach(a),J2.forEach(a),xn.forEach(a),qj=h($),Ps=n($,"TR",{});var Tn=l(Ps);ph=n(Tn,"TD",{}),l(ph).forEach(a),Dj=h(Tn),go=n(Tn,"TD",{});var Y2=l(go);Aj=o(Y2,"padding to max sequence in batch"),Y2.forEach(a),zj=h(Tn),Ut=n(Tn,"TD",{});var Y1=l(Ut);vo=n(Y1,"CODE",{});var G2=l(vo);Pj=o(G2,"tokenizer(batch_sentences, padding=True, truncation=True)"),G2.forEach(a),Cj=o(Y1," or"),Y1.forEach(a),Tn.forEach(a),Oj=h($),Cs=n($,"TR",{});var qn=l(Cs);ch=n(qn,"TD",{}),l(ch).forEach(a),Lj=h(qn),hh=n(qn,"TD",{}),l(hh).forEach(a),Sj=h(qn),Eo=n(qn,"TD",{});var M2=l(Eo);$o=n(M2,"CODE",{});var U2=l($o);Nj=o(U2,"tokenizer(batch_sentences, padding=True, truncation=STRATEGY)"),U2.forEach(a),M2.forEach(a),qn.forEach(a),Ij=h($),Os=n($,"TR",{});var Dn=l(Os);ih=n(Dn,"TD",{}),l(ih).forEach(a),Rj=h(Dn),wo=n(Dn,"TD",{});var V2=l(wo);Fj=o(V2,"padding to max model input length"),V2.forEach(a),Hj=h(Dn),Vt=n(Dn,"TD",{});var G1=l(Vt);yo=n(G1,"CODE",{});var K2=l(yo);Bj=o(K2,"tokenizer(batch_sentences, padding='max_length', truncation=True)"),K2.forEach(a),Jj=o(G1," or"),G1.forEach(a),Dn.forEach(a),Wj=h($),Ls=n($,"TR",{});var An=l(Ls);uh=n(An,"TD",{}),l(uh).forEach(a),Yj=h(An),mh=n(An,"TD",{}),l(mh).forEach(a),Gj=h(An),ko=n(An,"TD",{});var Q2=l(ko);xo=n(Q2,"CODE",{});var X2=l(xo);Mj=o(X2,"tokenizer(batch_sentences, padding='max_length', truncation=STRATEGY)"),X2.forEach(a),Q2.forEach(a),An.forEach(a),Uj=h($),Ss=n($,"TR",{});var zn=l(Ss);dh=n(zn,"TD",{}),l(dh).forEach(a),Vj=h(zn),To=n(zn,"TD",{});var Z2=l(To);Kj=o(Z2,"padding to specific length"),Z2.forEach(a),Qj=h(zn),qo=n(zn,"TD",{});var sv=l(qo);Xj=o(sv,"Not possible"),sv.forEach(a),zn.forEach(a),Zj=h($),Ns=n($,"TR",{});var Pn=l(Ns);Do=n(Pn,"TD",{});var ev=l(Do);s1=o(ev,"truncation to specific length"),ev.forEach(a),e1=h(Pn),Ao=n(Pn,"TD",{});var av=l(Ao);a1=o(av,"no padding"),av.forEach(a),t1=h(Pn),Kt=n(Pn,"TD",{});var M1=l(Kt);zo=n(M1,"CODE",{});var tv=l(zo);n1=o(tv,"tokenizer(batch_sentences, truncation=True, max_length=42)"),tv.forEach(a),l1=o(M1," or"),M1.forEach(a),Pn.forEach(a),r1=h($),Is=n($,"TR",{});var Cn=l(Is);fh=n(Cn,"TD",{}),l(fh).forEach(a),o1=h(Cn),bh=n(Cn,"TD",{}),l(bh).forEach(a),p1=h(Cn),Po=n(Cn,"TD",{});var nv=l(Po);Co=n(nv,"CODE",{});var lv=l(Co);c1=o(lv,"tokenizer(batch_sentences, truncation=STRATEGY, max_length=42)"),lv.forEach(a),nv.forEach(a),Cn.forEach(a),h1=h($),Rs=n($,"TR",{});var On=l(Rs);jh=n(On,"TD",{}),l(jh).forEach(a),i1=h(On),Oo=n(On,"TD",{});var rv=l(Oo);u1=o(rv,"padding to max sequence in batch"),rv.forEach(a),m1=h(On),Qt=n(On,"TD",{});var U1=l(Qt);Lo=n(U1,"CODE",{});var ov=l(Lo);d1=o(ov,"tokenizer(batch_sentences, padding=True, truncation=True, max_length=42)"),ov.forEach(a),f1=o(U1," or"),U1.forEach(a),On.forEach(a),b1=h($),Fs=n($,"TR",{});var Ln=l(Fs);_h=n(Ln,"TD",{}),l(_h).forEach(a),j1=h(Ln),gh=n(Ln,"TD",{}),l(gh).forEach(a),_1=h(Ln),So=n(Ln,"TD",{});var pv=l(So);No=n(pv,"CODE",{});var cv=l(No);g1=o(cv,"tokenizer(batch_sentences, padding=True, truncation=STRATEGY, max_length=42)"),cv.forEach(a),pv.forEach(a),Ln.forEach(a),v1=h($),Hs=n($,"TR",{});var Sn=l(Hs);vh=n(Sn,"TD",{}),l(vh).forEach(a),E1=h(Sn),Io=n(Sn,"TD",{});var hv=l(Io);$1=o(hv,"padding to max model input length"),hv.forEach(a),w1=h(Sn),Ro=n(Sn,"TD",{});var iv=l(Ro);y1=o(iv,"Not possible"),iv.forEach(a),Sn.forEach(a),k1=h($),Bs=n($,"TR",{});var Nn=l(Bs);Eh=n(Nn,"TD",{}),l(Eh).forEach(a),x1=h(Nn),Fo=n(Nn,"TD",{});var uv=l(Fo);T1=o(uv,"padding to specific length"),uv.forEach(a),q1=h(Nn),Xt=n(Nn,"TD",{});var V1=l(Xt);Ho=n(V1,"CODE",{});var mv=l(Ho);D1=o(mv,"tokenizer(batch_sentences, padding='max_length', truncation=True, max_length=42)"),mv.forEach(a),A1=o(V1," or"),V1.forEach(a),Nn.forEach(a),z1=h($),Js=n($,"TR",{});var In=l(Js);$h=n(In,"TD",{}),l($h).forEach(a),P1=h(In),wh=n(In,"TD",{}),l(wh).forEach(a),C1=h(In),Bo=n(In,"TD",{});var dv=l(Bo);Jo=n(dv,"CODE",{});var fv=l(Jo);O1=o(fv,"tokenizer(batch_sentences, padding='max_length', truncation=STRATEGY, max_length=42)"),fv.forEach(a),dv.forEach(a),In.forEach(a),$.forEach(a),oi.forEach(a),this.h()},h(){u(v,"name","hf:doc:metadata"),u(v,"content",JSON.stringify(Cv)),u(k,"id","preprocess"),u(k,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(k,"href","#preprocess"),u(m,"class","relative group"),u(Us,"id","nlp"),u(Us,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Us,"href","#nlp"),u(rs,"class","relative group"),u(nt,"href","main_classes/tokenizer"),u(lt,"href","/docs/transformers/pr_16117/en/model_doc/auto#transformers.AutoTokenizer"),u(Ks,"id","tokenize"),u(Ks,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ks,"href","#tokenize"),u(os,"class","relative group"),u(rt,"href","/docs/transformers/pr_16117/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),u(ht,"href","glossary#input-ids"),u(ut,"href","glossary#attention-mask"),u(dt,"href","glossary#token-type-ids"),u(Zs,"id","pad"),u(Zs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Zs,"href","#pad"),u(ps,"class","relative group"),u(ae,"id","truncation"),u(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ae,"href","#truncation"),u(cs,"class","relative group"),u(te,"id","build-tensors"),u(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(te,"href","#build-tensors"),u(hs,"class","relative group"),u(le,"id","audio"),u(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(le,"href","#audio"),u(is,"class","relative group"),u(_t,"href","main_classes/feature_extractor"),u(Ke,"href","https://huggingface.co/datasets/superb"),u(Ke,"rel","nofollow"),u(Qe,"href","https://huggingface.co/docs/datasets/load_hub.html"),u(Qe,"rel","nofollow"),u(oe,"id","resample"),u(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(oe,"href","#resample"),u(us,"class","relative group"),u(ea,"href","https://huggingface.co/facebook/wav2vec2-base"),u(ea,"rel","nofollow"),u(aa,"href","https://huggingface.co/datasets/lj_speech"),u(aa,"rel","nofollow"),u(la,"href","https://huggingface.co/docs/datasets/package_reference/main_classes.html#datasets.Dataset.cast_column"),u(la,"rel","nofollow"),u(oa,"start","2"),u(ie,"id","feature-extractor"),u(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ie,"href","#feature-extractor"),u(ms,"class","relative group"),u(yt,"href","/docs/transformers/pr_16117/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),u(me,"id","pad-and-truncate"),u(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(me,"href","#pad-and-truncate"),u(ds,"class","relative group"),u(de,"id","vision"),u(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(de,"href","#vision"),u(fs,"class","relative group"),u(_a,"href","https://huggingface.co/datasets/food101"),u(_a,"rel","nofollow"),u(va,"href","https://huggingface.co/docs/datasets/package_reference/main_classes.html?highlight=image#datasets.Image"),u(va,"rel","nofollow"),bv(Pt.src,K1="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/vision-preprocess-tutorial.png")||u(Pt,"src",K1),u(Pt,"alt","vision-preprocess-tutorial.png"),u(be,"id","feature-extractor"),u(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(be,"href","#feature-extractor"),u(bs,"class","relative group"),u(Ct,"href","/docs/transformers/pr_16117/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),u(_e,"id","data-augmentation"),u(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(_e,"href","#data-augmentation"),u(js,"class","relative group"),u(ka,"href","https://pytorch.org/vision/stable/transforms.html"),u(ka,"rel","nofollow"),u(xa,"href","https://pytorch.org/vision/master/generated/torchvision.transforms.Compose.html"),u(xa,"rel","nofollow"),u(Ta,"href","https://pytorch.org/vision/main/generated/torchvision.transforms.RandomResizedCrop.html"),u(Ta,"rel","nofollow"),u(qa,"href","https://pytorch.org/vision/main/generated/torchvision.transforms.ColorJitter.html"),u(qa,"rel","nofollow"),u(Lt,"href","model_doc/visionencoderdecoder#transformers.VisionEncoderDecoderModel.forward.pixel_values"),u(Aa,"start","2"),u(Oa,"href","https://huggingface.co/docs/datasets/process.html#format-transform"),u(Oa,"rel","nofollow"),u(Pa,"start","3"),u(Sa,"start","4"),bv(It.src,Q1="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/preprocessed_image.png")||u(It,"src",Q1),u(It,"alt","preprocessed_image"),u(ve,"id","multimodal"),u(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ve,"href","#multimodal"),u(gs,"class","relative group"),u(Ha,"href","https://huggingface.co/datasets/lj_speech"),u(Ha,"rel","nofollow"),u(Ft,"href","preprocessing#audio"),u(ye,"id","processor"),u(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ye,"href","#processor"),u(vs,"class","relative group"),u(Va,"start","2"),u(ke,"id","everything-you-always-wanted-to-know-about-padding-and-truncation"),u(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ke,"href","#everything-you-always-wanted-to-know-about-padding-and-truncation"),u($s,"class","relative group")},m(s,p){e(document.head,v),i(s,y,p),i(s,m,p),e(m,k),e(k,q),b(A,q,null),e(m,B),e(m,Ms),e(Ms,pi),i(s,Uo,p),b(Le,s,p),i(s,Vo,p),i(s,tt,p),e(tt,ci),i(s,Ko,p),i(s,J,p),e(J,Rn),e(Rn,hi),e(J,ii),e(J,Fn),e(Fn,ui),e(J,mi),e(J,Hn),e(Hn,di),i(s,Qo,p),i(s,rs,p),e(rs,Us),e(Us,Bn),b(Se,Bn,null),e(rs,fi),e(rs,Jn),e(Jn,bi),i(s,Xo,p),b(Ne,s,p),i(s,Zo,p),i(s,W,p),e(W,ji),e(W,nt),e(nt,_i),e(W,gi),e(W,Wn),e(Wn,vi),e(W,Ei),i(s,sp,p),b(Vs,s,p),i(s,ep,p),i(s,Y,p),e(Y,$i),e(Y,lt),e(lt,wi),e(Y,yi),e(Y,Yn),e(Yn,ki),e(Y,xi),i(s,ap,p),i(s,os,p),e(os,Ks),e(Ks,Gn),b(Ie,Gn,null),e(os,Ti),e(os,Mn),e(Mn,qi),i(s,tp,p),i(s,Qs,p),e(Qs,Di),e(Qs,rt),e(rt,Ai),e(Qs,zi),i(s,np,p),b(Re,s,p),i(s,lp,p),i(s,ot,p),e(ot,Pi),i(s,rp,p),b(Fe,s,p),i(s,op,p),i(s,pt,p),e(pt,Ci),i(s,pp,p),i(s,G,p),e(G,ct),e(ct,ht),e(ht,Oi),e(ct,Li),e(G,Si),e(G,it),e(it,ut),e(ut,Ni),e(it,Ii),e(G,Ri),e(G,mt),e(mt,dt),e(dt,Fi),e(mt,Hi),i(s,cp,p),i(s,Xs,p),e(Xs,Bi),e(Xs,Un),e(Un,Ji),e(Xs,Wi),i(s,hp,p),b(He,s,p),i(s,ip,p),i(s,M,p),e(M,Yi),e(M,Vn),e(Vn,Gi),e(M,Mi),e(M,Kn),e(Kn,Ui),e(M,Vi),i(s,up,p),i(s,ft,p),e(ft,Ki),i(s,mp,p),b(Be,s,p),i(s,dp,p),i(s,ps,p),e(ps,Zs),e(Zs,Qn),b(Je,Qn,null),e(ps,Qi),e(ps,Xn),e(Xn,Xi),i(s,fp,p),i(s,se,p),e(se,Zi),e(se,Zn),e(Zn,su),e(se,eu),i(s,bp,p),i(s,U,p),e(U,au),e(U,sl),e(sl,tu),e(U,nu),e(U,el),e(el,lu),e(U,ru),i(s,jp,p),b(We,s,p),i(s,_p,p),i(s,ee,p),e(ee,ou),e(ee,al),e(al,pu),e(ee,cu),i(s,gp,p),i(s,cs,p),e(cs,ae),e(ae,tl),b(Ye,tl,null),e(cs,hu),e(cs,nl),e(nl,iu),i(s,vp,p),i(s,bt,p),e(bt,uu),i(s,Ep,p),i(s,V,p),e(V,mu),e(V,ll),e(ll,du),e(V,fu),e(V,rl),e(rl,bu),e(V,ju),i(s,$p,p),b(Ge,s,p),i(s,wp,p),i(s,hs,p),e(hs,te),e(te,ol),b(Me,ol,null),e(hs,_u),e(hs,pl),e(pl,gu),i(s,yp,p),i(s,jt,p),e(jt,vu),i(s,kp,p),i(s,P,p),e(P,Eu),e(P,cl),e(cl,$u),e(P,wu),e(P,hl),e(hl,yu),e(P,ku),e(P,il),e(il,xu),e(P,Tu),i(s,xp,p),b(ne,s,p),i(s,Tp,p),i(s,is,p),e(is,le),e(le,ul),b(Ue,ul,null),e(is,qu),e(is,ml),e(ml,Du),i(s,qp,p),i(s,re,p),e(re,Au),e(re,_t),e(_t,zu),e(re,Pu),i(s,Dp,p),b(Ve,s,p),i(s,Ap,p),i(s,K,p),e(K,Cu),e(K,Ke),e(Ke,Ou),e(K,Lu),e(K,Qe),e(Qe,Su),e(K,Nu),i(s,zp,p),b(Xe,s,p),i(s,Pp,p),i(s,Q,p),e(Q,Iu),e(Q,dl),e(dl,Ru),e(Q,Fu),e(Q,fl),e(fl,Hu),e(Q,Bu),i(s,Cp,p),b(Ze,s,p),i(s,Op,p),i(s,gt,p),e(gt,Ju),i(s,Lp,p),i(s,X,p),e(X,vt),e(vt,bl),e(bl,Wu),e(vt,Yu),e(X,Gu),e(X,Et),e(Et,jl),e(jl,Mu),e(Et,Uu),e(X,Vu),e(X,$t),e($t,_l),e(_l,Ku),e($t,Qu),i(s,Sp,p),i(s,us,p),e(us,oe),e(oe,gl),b(sa,gl,null),e(us,Xu),e(us,vl),e(vl,Zu),i(s,Np,p),i(s,pe,p),e(pe,sm),e(pe,ea),e(ea,em),e(pe,am),i(s,Ip,p),i(s,ce,p),e(ce,tm),e(ce,aa),e(aa,nm),e(ce,lm),i(s,Rp,p),b(ta,s,p),i(s,Fp,p),i(s,wt,p),e(wt,na),e(na,rm),e(na,la),e(la,El),e(El,om),e(na,pm),i(s,Hp,p),b(ra,s,p),i(s,Bp,p),i(s,oa,p),e(oa,$l),e($l,cm),i(s,Jp,p),b(pa,s,p),i(s,Wp,p),i(s,he,p),e(he,hm),e(he,wl),e(wl,im),e(he,um),i(s,Yp,p),i(s,ms,p),e(ms,ie),e(ie,yl),b(ca,yl,null),e(ms,mm),e(ms,kl),e(kl,dm),i(s,Gp,p),i(s,C,p),e(C,fm),e(C,xl),e(xl,bm),e(C,jm),e(C,Tl),e(Tl,_m),e(C,gm),e(C,ql),e(ql,vm),e(C,Em),i(s,Mp,p),i(s,ue,p),e(ue,$m),e(ue,yt),e(yt,wm),e(ue,ym),i(s,Up,p),b(ha,s,p),i(s,Vp,p),i(s,Z,p),e(Z,km),e(Z,Dl),e(Dl,xm),e(Z,Tm),e(Z,Al),e(Al,qm),e(Z,Dm),i(s,Kp,p),b(ia,s,p),i(s,Qp,p),i(s,ds,p),e(ds,me),e(me,zl),b(ua,zl,null),e(ds,Am),e(ds,Pl),e(Pl,zm),i(s,Xp,p),i(s,kt,p),e(kt,Pm),i(s,Zp,p),b(ma,s,p),i(s,sc,p),i(s,xt,p),e(xt,Cm),i(s,ec,p),b(da,s,p),i(s,ac,p),i(s,Tt,p),e(Tt,Om),i(s,tc,p),b(fa,s,p),i(s,nc,p),i(s,qt,p),e(qt,Lm),i(s,lc,p),b(ba,s,p),i(s,rc,p),i(s,Dt,p),e(Dt,Sm),i(s,oc,p),i(s,fs,p),e(fs,de),e(de,Cl),b(ja,Cl,null),e(fs,Nm),e(fs,Ol),e(Ol,Im),i(s,pc,p),i(s,At,p),e(At,Rm),i(s,cc,p),i(s,ss,p),e(ss,Fm),e(ss,_a),e(_a,Hm),e(ss,Bm),e(ss,Ll),e(Ll,Jm),e(ss,Wm),i(s,hc,p),b(ga,s,p),i(s,ic,p),i(s,fe,p),e(fe,Ym),e(fe,va),e(va,Sl),e(Sl,Gm),e(fe,Mm),i(s,uc,p),b(Ea,s,p),i(s,mc,p),i(s,zt,p),e(zt,Pt),i(s,dc,p),i(s,bs,p),e(bs,be),e(be,Nl),b($a,Nl,null),e(bs,Um),e(bs,Il),e(Il,Vm),i(s,fc,p),i(s,je,p),e(je,Km),e(je,Ct),e(Ct,Qm),e(je,Xm),i(s,bc,p),b(wa,s,p),i(s,jc,p),i(s,js,p),e(js,_e),e(_e,Rl),b(ya,Rl,null),e(js,Zm),e(js,Fl),e(Fl,sd),i(s,_c,p),i(s,ge,p),e(ge,ed),e(ge,ka),e(ka,Hl),e(Hl,ad),e(ge,td),i(s,gc,p),i(s,Ot,p),e(Ot,R),e(R,nd),e(R,xa),e(xa,Bl),e(Bl,ld),e(R,rd),e(R,Ta),e(Ta,Jl),e(Jl,od),e(R,pd),e(R,qa),e(qa,Wl),e(Wl,cd),e(R,hd),i(s,vc,p),b(Da,s,p),i(s,Ec,p),i(s,Aa,p),e(Aa,_s),e(_s,id),e(_s,Lt),e(Lt,Yl),e(Yl,ud),e(_s,md),e(_s,Gl),e(Gl,dd),e(_s,fd),i(s,$c,p),b(za,s,p),i(s,wc,p),i(s,Pa,p),e(Pa,Ca),e(Ca,bd),e(Ca,Oa),e(Oa,Ml),e(Ml,jd),e(Ca,_d),i(s,yc,p),b(La,s,p),i(s,kc,p),i(s,Sa,p),e(Sa,Na),e(Na,gd),e(Na,Ul),e(Ul,vd),e(Na,Ed),i(s,xc,p),b(Ia,s,p),i(s,Tc,p),i(s,St,p),e(St,$d),i(s,qc,p),b(Ra,s,p),i(s,Dc,p),i(s,Nt,p),e(Nt,It),i(s,Ac,p),i(s,gs,p),e(gs,ve),e(ve,Vl),b(Fa,Vl,null),e(gs,wd),e(gs,Kl),e(Kl,yd),i(s,zc,p),i(s,Rt,p),e(Rt,kd),i(s,Pc,p),i(s,Ee,p),e(Ee,Ql),e(Ql,xd),e(Ee,Td),e(Ee,Xl),e(Xl,qd),i(s,Cc,p),i(s,$e,p),e($e,Dd),e($e,Ha),e(Ha,Ad),e($e,zd),i(s,Oc,p),b(Ba,s,p),i(s,Lc,p),i(s,es,p),e(es,Pd),e(es,Zl),e(Zl,Cd),e(es,Od),e(es,sr),e(sr,Ld),e(es,Sd),i(s,Sc,p),b(Ja,s,p),i(s,Nc,p),i(s,as,p),e(as,Nd),e(as,er),e(er,Id),e(as,Rd),e(as,ar),e(ar,Fd),e(as,Hd),i(s,Ic,p),b(Wa,s,p),i(s,Rc,p),i(s,we,p),e(we,Bd),e(we,Ft),e(Ft,Jd),e(we,Wd),i(s,Fc,p),b(Ya,s,p),i(s,Hc,p),i(s,vs,p),e(vs,ye),e(ye,tr),b(Ga,tr,null),e(vs,Yd),e(vs,nr),e(nr,Gd),i(s,Bc,p),i(s,Ht,p),e(Ht,Md),i(s,Jc,p),b(Ma,s,p),i(s,Wc,p),i(s,Bt,p),e(Bt,Es),e(Es,Ud),e(Es,lr),e(lr,Vd),e(Es,Kd),e(Es,rr),e(rr,Qd),e(Es,Xd),i(s,Yc,p),b(Ua,s,p),i(s,Gc,p),i(s,Va,p),e(Va,Ka),e(Ka,Zd),e(Ka,or),e(or,sf),e(Ka,ef),i(s,Mc,p),b(Qa,s,p),i(s,Uc,p),i(s,ts,p),e(ts,af),e(ts,pr),e(pr,tf),e(ts,nf),e(ts,cr),e(cr,lf),e(ts,rf),i(s,Vc,p),i(s,Jt,p),e(Jt,of),i(s,Kc,p),i(s,$s,p),e($s,ke),e(ke,hr),b(Xa,hr,null),e($s,pf),e($s,ir),e(ir,cf),i(s,Qc,p),i(s,O,p),e(O,hf),e(O,ur),e(ur,uf),e(O,mf),e(O,mr),e(mr,df),e(O,ff),e(O,dr),e(dr,bf),e(O,jf),i(s,Xc,p),i(s,ns,p),e(ns,Za),e(Za,Wt),e(Wt,fr),e(fr,_f),e(Wt,gf),e(Za,vf),e(Za,ws),e(ws,xe),e(xe,br),e(br,Ef),e(xe,$f),e(xe,jr),e(jr,wf),e(xe,yf),e(ws,kf),e(ws,L),e(L,_r),e(_r,xf),e(L,Tf),e(L,gr),e(gr,qf),e(L,Df),e(L,vr),e(vr,Af),e(L,zf),e(L,Er),e(Er,Pf),e(L,Cf),e(ws,Of),e(ws,Te),e(Te,$r),e($r,Lf),e(Te,Sf),e(Te,wr),e(wr,Nf),e(Te,If),e(ns,Rf),e(ns,st),e(st,Yt),e(Yt,yr),e(yr,Ff),e(Yt,Hf),e(st,Bf),e(st,F),e(F,D),e(D,kr),e(kr,Jf),e(D,Wf),e(D,xr),e(xr,Yf),e(D,Gf),e(D,Tr),e(Tr,Mf),e(D,Uf),e(D,qr),e(qr,Vf),e(D,Kf),e(D,Dr),e(Dr,Qf),e(D,Xf),e(F,Zf),e(F,S),e(S,Ar),e(Ar,sb),e(S,eb),e(S,zr),e(zr,ab),e(S,tb),e(S,Pr),e(Pr,nb),e(S,lb),e(S,Cr),e(Cr,rb),e(S,ob),e(F,pb),e(F,N),e(N,Or),e(Or,cb),e(N,hb),e(N,Lr),e(Lr,ib),e(N,ub),e(N,Sr),e(Sr,mb),e(N,db),e(N,Nr),e(Nr,fb),e(N,bb),e(F,jb),e(F,qe),e(qe,Ir),e(Ir,_b),e(qe,gb),e(qe,Rr),e(Rr,vb),e(qe,Eb),e(ns,$b),e(ns,Fr),e(Fr,ls),e(ls,Hr),e(Hr,wb),e(ls,yb),e(ls,Br),e(Br,kb),e(ls,xb),e(ls,Jr),e(Jr,Tb),e(ls,qb),i(s,Zc,p),i(s,x,p),e(x,Db),e(x,Wr),e(Wr,Ab),e(x,zb),e(x,Yr),e(Yr,Pb),e(x,Cb),e(x,Gr),e(Gr,Ob),e(x,Lb),e(x,Mr),e(Mr,Sb),e(x,Nb),e(x,Ur),e(Ur,Ib),e(x,Rb),i(s,sh,p),i(s,De,p),e(De,Vr),e(Vr,ys),e(ys,Kr),e(Kr,Fb),e(ys,Hb),e(ys,Qr),e(Qr,Bb),e(ys,Jb),e(ys,Xr),e(Xr,Wb),e(De,Yb),e(De,E),e(E,ks),e(ks,Zr),e(Zr,Gb),e(ks,Mb),e(ks,so),e(so,Ub),e(ks,Vb),e(ks,eo),e(eo,ao),e(ao,Kb),e(E,Qb),e(E,xs),e(xs,eh),e(xs,Xb),e(xs,to),e(to,Zb),e(xs,sj),e(xs,Gt),e(Gt,no),e(no,ej),e(Gt,aj),e(E,tj),e(E,Ts),e(Ts,ah),e(Ts,nj),e(Ts,th),e(Ts,lj),e(Ts,lo),e(lo,ro),e(ro,rj),e(E,oj),e(E,qs),e(qs,nh),e(qs,pj),e(qs,oo),e(oo,cj),e(qs,hj),e(qs,po),e(po,co),e(co,ij),e(E,uj),e(E,Ds),e(Ds,lh),e(Ds,mj),e(Ds,ho),e(ho,dj),e(Ds,fj),e(Ds,io),e(io,uo),e(uo,bj),e(E,jj),e(E,As),e(As,mo),e(mo,_j),e(As,gj),e(As,fo),e(fo,vj),e(As,Ej),e(As,Mt),e(Mt,bo),e(bo,$j),e(Mt,wj),e(E,yj),e(E,zs),e(zs,rh),e(zs,kj),e(zs,oh),e(zs,xj),e(zs,jo),e(jo,_o),e(_o,Tj),e(E,qj),e(E,Ps),e(Ps,ph),e(Ps,Dj),e(Ps,go),e(go,Aj),e(Ps,zj),e(Ps,Ut),e(Ut,vo),e(vo,Pj),e(Ut,Cj),e(E,Oj),e(E,Cs),e(Cs,ch),e(Cs,Lj),e(Cs,hh),e(Cs,Sj),e(Cs,Eo),e(Eo,$o),e($o,Nj),e(E,Ij),e(E,Os),e(Os,ih),e(Os,Rj),e(Os,wo),e(wo,Fj),e(Os,Hj),e(Os,Vt),e(Vt,yo),e(yo,Bj),e(Vt,Jj),e(E,Wj),e(E,Ls),e(Ls,uh),e(Ls,Yj),e(Ls,mh),e(Ls,Gj),e(Ls,ko),e(ko,xo),e(xo,Mj),e(E,Uj),e(E,Ss),e(Ss,dh),e(Ss,Vj),e(Ss,To),e(To,Kj),e(Ss,Qj),e(Ss,qo),e(qo,Xj),e(E,Zj),e(E,Ns),e(Ns,Do),e(Do,s1),e(Ns,e1),e(Ns,Ao),e(Ao,a1),e(Ns,t1),e(Ns,Kt),e(Kt,zo),e(zo,n1),e(Kt,l1),e(E,r1),e(E,Is),e(Is,fh),e(Is,o1),e(Is,bh),e(Is,p1),e(Is,Po),e(Po,Co),e(Co,c1),e(E,h1),e(E,Rs),e(Rs,jh),e(Rs,i1),e(Rs,Oo),e(Oo,u1),e(Rs,m1),e(Rs,Qt),e(Qt,Lo),e(Lo,d1),e(Qt,f1),e(E,b1),e(E,Fs),e(Fs,_h),e(Fs,j1),e(Fs,gh),e(Fs,_1),e(Fs,So),e(So,No),e(No,g1),e(E,v1),e(E,Hs),e(Hs,vh),e(Hs,E1),e(Hs,Io),e(Io,$1),e(Hs,w1),e(Hs,Ro),e(Ro,y1),e(E,k1),e(E,Bs),e(Bs,Eh),e(Bs,x1),e(Bs,Fo),e(Fo,T1),e(Bs,q1),e(Bs,Xt),e(Xt,Ho),e(Ho,D1),e(Xt,A1),e(E,z1),e(E,Js),e(Js,$h),e(Js,P1),e(Js,wh),e(Js,C1),e(Js,Bo),e(Bo,Jo),e(Jo,O1),yh=!0},p(s,[p]){const et={};p&2&&(et.$$scope={dirty:p,ctx:s}),Vs.$set(et);const Wo={};p&2&&(Wo.$$scope={dirty:p,ctx:s}),ne.$set(Wo)},i(s){yh||(j(A.$$.fragment,s),j(Le.$$.fragment,s),j(Se.$$.fragment,s),j(Ne.$$.fragment,s),j(Vs.$$.fragment,s),j(Ie.$$.fragment,s),j(Re.$$.fragment,s),j(Fe.$$.fragment,s),j(He.$$.fragment,s),j(Be.$$.fragment,s),j(Je.$$.fragment,s),j(We.$$.fragment,s),j(Ye.$$.fragment,s),j(Ge.$$.fragment,s),j(Me.$$.fragment,s),j(ne.$$.fragment,s),j(Ue.$$.fragment,s),j(Ve.$$.fragment,s),j(Xe.$$.fragment,s),j(Ze.$$.fragment,s),j(sa.$$.fragment,s),j(ta.$$.fragment,s),j(ra.$$.fragment,s),j(pa.$$.fragment,s),j(ca.$$.fragment,s),j(ha.$$.fragment,s),j(ia.$$.fragment,s),j(ua.$$.fragment,s),j(ma.$$.fragment,s),j(da.$$.fragment,s),j(fa.$$.fragment,s),j(ba.$$.fragment,s),j(ja.$$.fragment,s),j(ga.$$.fragment,s),j(Ea.$$.fragment,s),j($a.$$.fragment,s),j(wa.$$.fragment,s),j(ya.$$.fragment,s),j(Da.$$.fragment,s),j(za.$$.fragment,s),j(La.$$.fragment,s),j(Ia.$$.fragment,s),j(Ra.$$.fragment,s),j(Fa.$$.fragment,s),j(Ba.$$.fragment,s),j(Ja.$$.fragment,s),j(Wa.$$.fragment,s),j(Ya.$$.fragment,s),j(Ga.$$.fragment,s),j(Ma.$$.fragment,s),j(Ua.$$.fragment,s),j(Qa.$$.fragment,s),j(Xa.$$.fragment,s),yh=!0)},o(s){_(A.$$.fragment,s),_(Le.$$.fragment,s),_(Se.$$.fragment,s),_(Ne.$$.fragment,s),_(Vs.$$.fragment,s),_(Ie.$$.fragment,s),_(Re.$$.fragment,s),_(Fe.$$.fragment,s),_(He.$$.fragment,s),_(Be.$$.fragment,s),_(Je.$$.fragment,s),_(We.$$.fragment,s),_(Ye.$$.fragment,s),_(Ge.$$.fragment,s),_(Me.$$.fragment,s),_(ne.$$.fragment,s),_(Ue.$$.fragment,s),_(Ve.$$.fragment,s),_(Xe.$$.fragment,s),_(Ze.$$.fragment,s),_(sa.$$.fragment,s),_(ta.$$.fragment,s),_(ra.$$.fragment,s),_(pa.$$.fragment,s),_(ca.$$.fragment,s),_(ha.$$.fragment,s),_(ia.$$.fragment,s),_(ua.$$.fragment,s),_(ma.$$.fragment,s),_(da.$$.fragment,s),_(fa.$$.fragment,s),_(ba.$$.fragment,s),_(ja.$$.fragment,s),_(ga.$$.fragment,s),_(Ea.$$.fragment,s),_($a.$$.fragment,s),_(wa.$$.fragment,s),_(ya.$$.fragment,s),_(Da.$$.fragment,s),_(za.$$.fragment,s),_(La.$$.fragment,s),_(Ia.$$.fragment,s),_(Ra.$$.fragment,s),_(Fa.$$.fragment,s),_(Ba.$$.fragment,s),_(Ja.$$.fragment,s),_(Wa.$$.fragment,s),_(Ya.$$.fragment,s),_(Ga.$$.fragment,s),_(Ma.$$.fragment,s),_(Ua.$$.fragment,s),_(Qa.$$.fragment,s),_(Xa.$$.fragment,s),yh=!1},d(s){a(v),s&&a(y),s&&a(m),g(A),s&&a(Uo),g(Le,s),s&&a(Vo),s&&a(tt),s&&a(Ko),s&&a(J),s&&a(Qo),s&&a(rs),g(Se),s&&a(Xo),g(Ne,s),s&&a(Zo),s&&a(W),s&&a(sp),g(Vs,s),s&&a(ep),s&&a(Y),s&&a(ap),s&&a(os),g(Ie),s&&a(tp),s&&a(Qs),s&&a(np),g(Re,s),s&&a(lp),s&&a(ot),s&&a(rp),g(Fe,s),s&&a(op),s&&a(pt),s&&a(pp),s&&a(G),s&&a(cp),s&&a(Xs),s&&a(hp),g(He,s),s&&a(ip),s&&a(M),s&&a(up),s&&a(ft),s&&a(mp),g(Be,s),s&&a(dp),s&&a(ps),g(Je),s&&a(fp),s&&a(se),s&&a(bp),s&&a(U),s&&a(jp),g(We,s),s&&a(_p),s&&a(ee),s&&a(gp),s&&a(cs),g(Ye),s&&a(vp),s&&a(bt),s&&a(Ep),s&&a(V),s&&a($p),g(Ge,s),s&&a(wp),s&&a(hs),g(Me),s&&a(yp),s&&a(jt),s&&a(kp),s&&a(P),s&&a(xp),g(ne,s),s&&a(Tp),s&&a(is),g(Ue),s&&a(qp),s&&a(re),s&&a(Dp),g(Ve,s),s&&a(Ap),s&&a(K),s&&a(zp),g(Xe,s),s&&a(Pp),s&&a(Q),s&&a(Cp),g(Ze,s),s&&a(Op),s&&a(gt),s&&a(Lp),s&&a(X),s&&a(Sp),s&&a(us),g(sa),s&&a(Np),s&&a(pe),s&&a(Ip),s&&a(ce),s&&a(Rp),g(ta,s),s&&a(Fp),s&&a(wt),s&&a(Hp),g(ra,s),s&&a(Bp),s&&a(oa),s&&a(Jp),g(pa,s),s&&a(Wp),s&&a(he),s&&a(Yp),s&&a(ms),g(ca),s&&a(Gp),s&&a(C),s&&a(Mp),s&&a(ue),s&&a(Up),g(ha,s),s&&a(Vp),s&&a(Z),s&&a(Kp),g(ia,s),s&&a(Qp),s&&a(ds),g(ua),s&&a(Xp),s&&a(kt),s&&a(Zp),g(ma,s),s&&a(sc),s&&a(xt),s&&a(ec),g(da,s),s&&a(ac),s&&a(Tt),s&&a(tc),g(fa,s),s&&a(nc),s&&a(qt),s&&a(lc),g(ba,s),s&&a(rc),s&&a(Dt),s&&a(oc),s&&a(fs),g(ja),s&&a(pc),s&&a(At),s&&a(cc),s&&a(ss),s&&a(hc),g(ga,s),s&&a(ic),s&&a(fe),s&&a(uc),g(Ea,s),s&&a(mc),s&&a(zt),s&&a(dc),s&&a(bs),g($a),s&&a(fc),s&&a(je),s&&a(bc),g(wa,s),s&&a(jc),s&&a(js),g(ya),s&&a(_c),s&&a(ge),s&&a(gc),s&&a(Ot),s&&a(vc),g(Da,s),s&&a(Ec),s&&a(Aa),s&&a($c),g(za,s),s&&a(wc),s&&a(Pa),s&&a(yc),g(La,s),s&&a(kc),s&&a(Sa),s&&a(xc),g(Ia,s),s&&a(Tc),s&&a(St),s&&a(qc),g(Ra,s),s&&a(Dc),s&&a(Nt),s&&a(Ac),s&&a(gs),g(Fa),s&&a(zc),s&&a(Rt),s&&a(Pc),s&&a(Ee),s&&a(Cc),s&&a($e),s&&a(Oc),g(Ba,s),s&&a(Lc),s&&a(es),s&&a(Sc),g(Ja,s),s&&a(Nc),s&&a(as),s&&a(Ic),g(Wa,s),s&&a(Rc),s&&a(we),s&&a(Fc),g(Ya,s),s&&a(Hc),s&&a(vs),g(Ga),s&&a(Bc),s&&a(Ht),s&&a(Jc),g(Ma,s),s&&a(Wc),s&&a(Bt),s&&a(Yc),g(Ua,s),s&&a(Gc),s&&a(Va),s&&a(Mc),g(Qa,s),s&&a(Uc),s&&a(ts),s&&a(Vc),s&&a(Jt),s&&a(Kc),s&&a($s),g(Xa),s&&a(Qc),s&&a(O),s&&a(Xc),s&&a(ns),s&&a(Zc),s&&a(x),s&&a(sh),s&&a(De)}}}const Cv={local:"preprocess",sections:[{local:"nlp",sections:[{local:"tokenize",title:"Tokenize"},{local:"pad",title:"Pad"},{local:"truncation",title:"Truncation"},{local:"build-tensors",title:"Build tensors"}],title:"NLP"},{local:"audio",sections:[{local:"resample",title:"Resample"},{local:"feature-extractor",title:"Feature extractor"},{local:"pad-and-truncate",title:"Pad and truncate"}],title:"Audio"},{local:"vision",sections:[{local:"feature-extractor",title:"Feature extractor"},{local:"data-augmentation",title:"Data augmentation"}],title:"Vision"},{local:"multimodal",sections:[{local:"processor",title:"Processor"}],title:"Multimodal"},{local:"everything-you-always-wanted-to-know-about-padding-and-truncation",title:"Everything you always wanted to know about padding and truncation"}],title:"Preprocess"};function Ov(z,v,y){let{fw:m}=v;return z.$$set=k=>{"fw"in k&&y(0,m=k.fw)},[m]}class Bv extends gv{constructor(v){super();vv(this,v,Ov,Pv,Ev,{fw:0})}}export{Bv as default,Cv as metadata};
