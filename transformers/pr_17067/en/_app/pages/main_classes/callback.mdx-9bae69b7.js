import{S as Ep,i as kp,s as $p,e as o,k as c,w as g,t as r,M as Tp,c as s,d as t,m as d,a as l,x as u,h as a,b as i,F as e,g as m,y as _,q as b,o as v,B as E,v as Cp,L as wp}from"../../chunks/vendor-6b77c823.js";import{T as yp}from"../../chunks/Tip-39098574.js";import{D as T}from"../../chunks/Docstring-1088f2fb.js";import{C as Zf}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as Nn}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as Ap}from"../../chunks/ExampleCodeBlock-5212b321.js";function Dp(mr){let w,z,A,D,F;return D=new Zf({props:{code:`class PrinterCallback(TrainerCallback):
    def on_log(self, args, state, control, logs=None, **kwargs):
        _ = logs.pop("total_flos", None)
        if state.is_local_process_zero:
            print(logs)`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">PrinterCallback</span>(<span class="hljs-title class_ inherited__">TrainerCallback</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on_log</span>(<span class="hljs-params">self, args, state, control, logs=<span class="hljs-literal">None</span>, **kwargs</span>):
        _ = logs.pop(<span class="hljs-string">&quot;total_flos&quot;</span>, <span class="hljs-literal">None</span>)
        <span class="hljs-keyword">if</span> state.is_local_process_zero:
            <span class="hljs-built_in">print</span>(logs)`}}),{c(){w=o("p"),z=r("Example:"),A=c(),g(D.$$.fragment)},l(C){w=s(C,"P",{});var N=l(w);z=a(N,"Example:"),N.forEach(t),A=d(C),u(D.$$.fragment,C)},m(C,N){m(C,w,N),e(w,z),m(C,A,N),_(D,C,N),F=!0},p:wp,i(C){F||(b(D.$$.fragment,C),F=!0)},o(C){v(D.$$.fragment,C),F=!1},d(C){C&&t(w),C&&t(A),E(D,C)}}}function Lp(mr){let w,z,A,D,F,C,N,ae;return{c(){w=o("p"),z=r(`In all this class, one step is to be understood as one update step. When using gradient accumulation, one update
step may require several forward and backward passes: if you use `),A=o("code"),D=r("gradient_accumulation_steps=n"),F=r(`, then one update
step requires going through `),C=o("em"),N=r("n"),ae=r(" batches.")},l(ne){w=s(ne,"P",{});var W=l(w);z=a(W,`In all this class, one step is to be understood as one update step. When using gradient accumulation, one update
step may require several forward and backward passes: if you use `),A=s(W,"CODE",{});var G=l(A);D=a(G,"gradient_accumulation_steps=n"),G.forEach(t),F=a(W,`, then one update
step requires going through `),C=s(W,"EM",{});var hr=l(C);N=a(hr,"n"),hr.forEach(t),ae=a(W," batches."),W.forEach(t)},m(ne,W){m(ne,w,W),e(w,z),e(w,A),e(A,D),e(w,F),e(w,C),e(C,N),e(w,ae)},d(ne){ne&&t(w)}}}function xp(mr){let w,z,A,D,F,C,N,ae,ne,W,G,hr,pr,es,ts,Wn,B,rs,gr,as,ns,ur,os,ss,_r,ls,is,jn,Ce,cs,br,ds,fs,zn,L,vr,Er,ms,hs,ps,ee,kr,gs,us,$r,_s,bs,Tr,vs,Es,ks,Cr,wr,$s,Ts,Cs,we,yr,ws,ys,nt,As,Ds,Ls,ye,Ar,xs,Ss,ot,Os,Ps,Is,Ae,Dr,Ms,Fs,st,Ns,Ws,js,De,Lr,zs,Bs,lt,Vs,Rs,qs,Le,xr,Us,Hs,it,Gs,Js,Bn,S,Ys,Sr,Xs,Ks,Or,Qs,Zs,Pr,el,tl,Ir,rl,al,Mr,nl,ol,Vn,oe,xe,pa,ct,sl,ga,ll,Rn,Se,il,Fr,cl,dl,qn,J,dt,fl,se,ml,Nr,hl,pl,ft,gl,ul,_l,V,mt,bl,ua,vl,El,y,kl,_a,$l,Tl,ba,Cl,wl,va,yl,Al,Ea,Dl,Ll,ka,xl,Sl,$a,Ol,Pl,Ta,Il,Ml,Ca,Fl,Nl,wa,Wl,jl,zl,ht,Bl,pt,Vl,Rl,Un,le,gt,ql,ut,Ul,Wr,Hl,Gl,Hn,ie,_t,Jl,bt,Yl,jr,Xl,Kl,Gn,ce,vt,Ql,Et,Zl,zr,ei,ti,Jn,Y,kt,ri,$t,ai,Br,ni,oi,si,X,li,Vr,ii,ci,ya,di,fi,Rr,mi,hi,Yn,de,Tt,pi,fe,gi,qr,ui,_i,Ct,bi,vi,Xn,K,wt,Ei,me,ki,Ur,$i,Ti,yt,Ci,wi,yi,R,At,Ai,Dt,Di,Aa,Li,xi,Si,Lt,Oi,xt,Pi,Ii,Mi,h,Fi,Da,Ni,Wi,La,ji,zi,xa,Bi,Vi,Sa,Ri,qi,Oa,Ui,Hi,Pa,Gi,Ji,Ia,Yi,Xi,Ma,Ki,Qi,Fa,Zi,ec,Na,tc,rc,Wa,ac,nc,ja,oc,sc,za,lc,ic,Ba,cc,dc,Va,fc,mc,Ra,hc,pc,qa,gc,uc,Ua,_c,bc,Ha,vc,Ec,Kn,Q,St,kc,Z,$c,Hr,Tc,Cc,Ot,wc,yc,Ga,Ac,Dc,Lc,O,Pt,xc,Ja,Sc,Oc,he,Pc,Ya,Ic,Mc,Xa,Fc,Nc,Wc,j,jc,Ka,zc,Bc,Qa,Vc,Rc,Gr,qc,Uc,Za,Hc,Gc,Jc,pe,Yc,en,Xc,Kc,tn,Qc,Zc,ed,rn,td,Qn,ge,It,rd,ue,ad,Jr,nd,od,Mt,sd,ld,Zn,_e,Ft,id,Nt,cd,Yr,dd,fd,eo,be,Oe,an,Wt,md,nn,hd,to,k,jt,pd,on,gd,ud,zt,_d,sn,bd,vd,Ed,I,kd,ln,$d,Td,cn,Cd,wd,dn,yd,Ad,fn,Dd,Ld,mn,xd,Sd,Od,Pe,Pd,Ie,Bt,Id,hn,Md,Fd,Me,Vt,Nd,pn,Wd,jd,Fe,Rt,zd,gn,Bd,Vd,Ne,qt,Rd,Ut,qd,Xr,Ud,Hd,Gd,We,Ht,Jd,un,Yd,Xd,je,Gt,Kd,_n,Qd,Zd,ze,Jt,ef,bn,tf,rf,Be,Yt,af,vn,nf,of,Ve,Xt,sf,En,lf,cf,Re,Kt,df,kn,ff,mf,qe,Qt,hf,$n,pf,gf,Ue,Zt,uf,Tn,_f,ro,He,bf,Kr,vf,Ef,ao,er,no,Ge,kf,Cn,$f,Tf,oo,tr,so,ve,Je,wn,rr,Cf,yn,wf,lo,M,ar,yf,Ee,Af,Qr,Df,Lf,Zr,xf,Sf,Of,Ye,Pf,Xe,nr,If,or,Mf,An,Ff,Nf,Wf,Ke,sr,jf,lr,zf,Dn,Bf,Vf,io,ke,Qe,Ln,ir,Rf,xn,qf,co,$e,cr,Uf,Te,Hf,ea,Gf,Jf,ta,Yf,Xf,fo;return C=new Nn({}),ct=new Nn({}),dt=new T({props:{name:"class transformers.integrations.CometCallback",anchor:"transformers.integrations.CometCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/integrations.py#L661"}}),mt=new T({props:{name:"setup",anchor:"transformers.integrations.CometCallback.setup",parameters:[{name:"args",val:""},{name:"state",val:""},{name:"model",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/integrations.py#L672"}}),gt=new T({props:{name:"class transformers.DefaultFlowCallback",anchor:"transformers.DefaultFlowCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/trainer_callback.py#L406"}}),_t=new T({props:{name:"class transformers.PrinterCallback",anchor:"transformers.PrinterCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/trainer_callback.py#L498"}}),vt=new T({props:{name:"class transformers.ProgressCallback",anchor:"transformers.ProgressCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/trainer_callback.py#L456"}}),kt=new T({props:{name:"class transformers.EarlyStoppingCallback",anchor:"transformers.EarlyStoppingCallback",parameters:[{name:"early_stopping_patience",val:": int = 1"},{name:"early_stopping_threshold",val:": typing.Optional[float] = 0.0"}],parametersDescription:[{anchor:"transformers.EarlyStoppingCallback.early_stopping_patience",description:`<strong>early_stopping_patience</strong> (<code>int</code>) &#x2014;
Use with <code>metric_for_best_model</code> to stop training when the specified metric worsens for
<code>early_stopping_patience</code> evaluation calls.`,name:"early_stopping_patience"},{anchor:"transformers.EarlyStoppingCallback.early_stopping_threshold(float,",description:`<strong>early_stopping_threshold(<code>float</code>,</strong> <em>optional</em>) &#x2014;
Use with TrainingArguments <code>metric_for_best_model</code> and <code>early_stopping_patience</code> to denote how much the
specified metric must improve to satisfy early stopping conditions. \``,name:"early_stopping_threshold(float,"}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/trainer_callback.py#L509"}}),Tt=new T({props:{name:"class transformers.integrations.TensorBoardCallback",anchor:"transformers.integrations.TensorBoardCallback",parameters:[{name:"tb_writer",val:" = None"}],parametersDescription:[{anchor:"transformers.integrations.TensorBoardCallback.tb_writer",description:`<strong>tb_writer</strong> (<code>SummaryWriter</code>, <em>optional</em>) &#x2014;
The writer to use. Will instantiate one if not set.`,name:"tb_writer"}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/integrations.py#L447"}}),wt=new T({props:{name:"class transformers.integrations.WandbCallback",anchor:"transformers.integrations.WandbCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/integrations.py#L535"}}),At=new T({props:{name:"setup",anchor:"transformers.integrations.WandbCallback.setup",parameters:[{name:"args",val:""},{name:"state",val:""},{name:"model",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/integrations.py#L552"}}),St=new T({props:{name:"class transformers.integrations.MLflowCallback",anchor:"transformers.integrations.MLflowCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/integrations.py#L760"}}),Pt=new T({props:{name:"setup",anchor:"transformers.integrations.MLflowCallback.setup",parameters:[{name:"args",val:""},{name:"state",val:""},{name:"model",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/integrations.py#L778"}}),It=new T({props:{name:"class transformers.integrations.AzureMLCallback",anchor:"transformers.integrations.AzureMLCallback",parameters:[{name:"azureml_run",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/integrations.py#L737"}}),Ft=new T({props:{name:"class transformers.integrations.CodeCarbonCallback",anchor:"transformers.integrations.CodeCarbonCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/integrations.py#L934"}}),Wt=new Nn({}),jt=new T({props:{name:"class transformers.TrainerCallback",anchor:"transformers.TrainerCallback",parameters:[],parametersDescription:[{anchor:"transformers.TrainerCallback.args",description:`<strong>args</strong> (<a href="/docs/transformers/pr_17067/en/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a>) &#x2014;
The training arguments used to instantiate the <a href="/docs/transformers/pr_17067/en/main_classes/trainer#transformers.Trainer">Trainer</a>.`,name:"args"},{anchor:"transformers.TrainerCallback.state",description:`<strong>state</strong> (<a href="/docs/transformers/pr_17067/en/main_classes/callback#transformers.TrainerState">TrainerState</a>) &#x2014;
The current state of the <a href="/docs/transformers/pr_17067/en/main_classes/trainer#transformers.Trainer">Trainer</a>.`,name:"state"},{anchor:"transformers.TrainerCallback.control",description:`<strong>control</strong> (<a href="/docs/transformers/pr_17067/en/main_classes/callback#transformers.TrainerControl">TrainerControl</a>) &#x2014;
The object that is returned to the <a href="/docs/transformers/pr_17067/en/main_classes/trainer#transformers.Trainer">Trainer</a> and can be used to make some decisions.`,name:"control"},{anchor:"transformers.TrainerCallback.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_17067/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <code>torch.nn.Module</code>) &#x2014;
The model being trained.`,name:"model"},{anchor:"transformers.TrainerCallback.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_17067/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer used for encoding the data.`,name:"tokenizer"},{anchor:"transformers.TrainerCallback.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.Optimizer</code>) &#x2014;
The optimizer used for the training steps.`,name:"optimizer"},{anchor:"transformers.TrainerCallback.lr_scheduler",description:`<strong>lr_scheduler</strong> (<code>torch.optim.lr_scheduler.LambdaLR</code>) &#x2014;
The scheduler used for setting the learning rate.`,name:"lr_scheduler"},{anchor:"transformers.TrainerCallback.train_dataloader",description:`<strong>train_dataloader</strong> (<code>torch.utils.data.DataLoader</code>, <em>optional</em>) &#x2014;
The current dataloader used for training.`,name:"train_dataloader"},{anchor:"transformers.TrainerCallback.eval_dataloader",description:`<strong>eval_dataloader</strong> (<code>torch.utils.data.DataLoader</code>, <em>optional</em>) &#x2014;
The current dataloader used for training.`,name:"eval_dataloader"},{anchor:"transformers.TrainerCallback.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics computed by the last evaluation phase.</p>
<p>Those are only accessible in the event <code>on_evaluate</code>.`,name:"metrics"},{anchor:"transformers.TrainerCallback.logs",description:`<strong>logs</strong>  (<code>Dict[str, float]</code>) &#x2014;
The values to log.</p>
<p>Those are only accessible in the event <code>on_log</code>.`,name:"logs"}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/trainer_callback.py#L159"}}),Pe=new Ap({props:{anchor:"transformers.TrainerCallback.example",$$slots:{default:[Dp]},$$scope:{ctx:mr}}}),Bt=new T({props:{name:"on_epoch_begin",anchor:"transformers.TrainerCallback.on_epoch_begin",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/trainer_callback.py#L227"}}),Vt=new T({props:{name:"on_epoch_end",anchor:"transformers.TrainerCallback.on_epoch_end",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/trainer_callback.py#L233"}}),Rt=new T({props:{name:"on_evaluate",anchor:"transformers.TrainerCallback.on_evaluate",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/trainer_callback.py#L259"}}),qt=new T({props:{name:"on_init_end",anchor:"transformers.TrainerCallback.on_init_end",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/trainer_callback.py#L209"}}),Ht=new T({props:{name:"on_log",anchor:"transformers.TrainerCallback.on_log",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/trainer_callback.py#L271"}}),Gt=new T({props:{name:"on_prediction_step",anchor:"transformers.TrainerCallback.on_prediction_step",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/trainer_callback.py#L277"}}),Jt=new T({props:{name:"on_save",anchor:"transformers.TrainerCallback.on_save",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/trainer_callback.py#L265"}}),Yt=new T({props:{name:"on_step_begin",anchor:"transformers.TrainerCallback.on_step_begin",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/trainer_callback.py#L239"}}),Xt=new T({props:{name:"on_step_end",anchor:"transformers.TrainerCallback.on_step_end",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/trainer_callback.py#L252"}}),Kt=new T({props:{name:"on_substep_end",anchor:"transformers.TrainerCallback.on_substep_end",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/trainer_callback.py#L246"}}),Qt=new T({props:{name:"on_train_begin",anchor:"transformers.TrainerCallback.on_train_begin",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/trainer_callback.py#L215"}}),Zt=new T({props:{name:"on_train_end",anchor:"transformers.TrainerCallback.on_train_end",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/trainer_callback.py#L221"}}),er=new Zf({props:{code:`class MyCallback(TrainerCallback):
    "A callback that prints a message at the beginning of training"

    def on_train_begin(self, args, state, control, **kwargs):
        print("Starting training")


trainer = Trainer(
    model,
    args,
    train_dataset=train_dataset,
    eval_dataset=eval_dataset,
    callbacks=[MyCallback],  # We can either pass the callback class this way or an instance of it (MyCallback())
)`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallback</span>(<span class="hljs-title class_ inherited__">TrainerCallback</span>):
    <span class="hljs-string">&quot;A callback that prints a message at the beginning of training&quot;</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on_train_begin</span>(<span class="hljs-params">self, args, state, control, **kwargs</span>):
        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Starting training&quot;</span>)


trainer = Trainer(
    model,
    args,
    train_dataset=train_dataset,
    eval_dataset=eval_dataset,
    callbacks=[MyCallback],  <span class="hljs-comment"># We can either pass the callback class this way or an instance of it (MyCallback())</span>
)`}}),tr=new Zf({props:{code:`trainer = Trainer(...)
trainer.add_callback(MyCallback)
# Alternatively, we can pass an instance of the callback class
trainer.add_callback(MyCallback())`,highlighted:`trainer = Trainer(...)
trainer.add_callback(MyCallback)
<span class="hljs-comment"># Alternatively, we can pass an instance of the callback class</span>
trainer.add_callback(MyCallback())`}}),rr=new Nn({}),ar=new T({props:{name:"class transformers.TrainerState",anchor:"transformers.TrainerState",parameters:[{name:"epoch",val:": typing.Optional[float] = None"},{name:"global_step",val:": int = 0"},{name:"max_steps",val:": int = 0"},{name:"num_train_epochs",val:": int = 0"},{name:"total_flos",val:": float = 0"},{name:"log_history",val:": typing.List[typing.Dict[str, float]] = None"},{name:"best_metric",val:": typing.Optional[float] = None"},{name:"best_model_checkpoint",val:": typing.Optional[str] = None"},{name:"is_local_process_zero",val:": bool = True"},{name:"is_world_process_zero",val:": bool = True"},{name:"is_hyper_param_search",val:": bool = False"},{name:"trial_name",val:": str = None"},{name:"trial_params",val:": typing.Dict[str, typing.Union[str, float, int, bool]] = None"}],parametersDescription:[{anchor:"transformers.TrainerState.epoch",description:`<strong>epoch</strong> (<code>float</code>, <em>optional</em>) &#x2014;
Only set during training, will represent the epoch the training is at (the decimal part being the
percentage of the current epoch completed).`,name:"epoch"},{anchor:"transformers.TrainerState.global_step",description:`<strong>global_step</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
During training, represents the number of update steps completed.`,name:"global_step"},{anchor:"transformers.TrainerState.max_steps",description:`<strong>max_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The number of update steps to do during the current training.`,name:"max_steps"},{anchor:"transformers.TrainerState.total_flos",description:`<strong>total_flos</strong> (<code>float</code>, <em>optional</em>, defaults to 0) &#x2014;
The total number of floating operations done by the model since the beginning of training (stored as floats
to avoid overflow).`,name:"total_flos"},{anchor:"transformers.TrainerState.log_history",description:`<strong>log_history</strong> (<code>List[Dict[str, float]]</code>, <em>optional</em>) &#x2014;
The list of logs done since the beginning of training.`,name:"log_history"},{anchor:"transformers.TrainerState.best_metric",description:`<strong>best_metric</strong> (<code>float</code>, <em>optional</em>) &#x2014;
When tracking the best model, the value of the best metric encountered so far.`,name:"best_metric"},{anchor:"transformers.TrainerState.best_model_checkpoint",description:`<strong>best_model_checkpoint</strong> (<code>str</code>, <em>optional</em>) &#x2014;
When tracking the best model, the value of the name of the checkpoint for the best model encountered so
far.`,name:"best_model_checkpoint"},{anchor:"transformers.TrainerState.is_local_process_zero",description:`<strong>is_local_process_zero</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not this process is the local (e.g., on one machine if training in a distributed fashion on
several machines) main process.`,name:"is_local_process_zero"},{anchor:"transformers.TrainerState.is_world_process_zero",description:`<strong>is_world_process_zero</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not this process is the global main process (when training in a distributed fashion on several
machines, this is only going to be <code>True</code> for one process).`,name:"is_world_process_zero"},{anchor:"transformers.TrainerState.is_hyper_param_search",description:`<strong>is_hyper_param_search</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether we are in the process of a hyper parameter search using Trainer.hyperparameter_search. This will
impact the way data will be logged in TensorBoard.`,name:"is_hyper_param_search"}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/trainer_callback.py#L35"}}),Ye=new yp({props:{$$slots:{default:[Lp]},$$scope:{ctx:mr}}}),nr=new T({props:{name:"load_from_json",anchor:"transformers.TrainerState.load_from_json",parameters:[{name:"json_path",val:": str"}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/trainer_callback.py#L101"}}),sr=new T({props:{name:"save_to_json",anchor:"transformers.TrainerState.save_to_json",parameters:[{name:"json_path",val:": str"}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/trainer_callback.py#L95"}}),ir=new Nn({}),cr=new T({props:{name:"class transformers.TrainerControl",anchor:"transformers.TrainerControl",parameters:[{name:"should_training_stop",val:": bool = False"},{name:"should_epoch_stop",val:": bool = False"},{name:"should_save",val:": bool = False"},{name:"should_evaluate",val:": bool = False"},{name:"should_log",val:": bool = False"}],parametersDescription:[{anchor:"transformers.TrainerControl.should_training_stop",description:`<strong>should_training_stop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the training should be interrupted.</p>
<p>If <code>True</code>, this variable will not be set back to <code>False</code>. The training will just stop.`,name:"should_training_stop"},{anchor:"transformers.TrainerControl.should_epoch_stop",description:`<strong>should_epoch_stop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the current epoch should be interrupted.</p>
<p>If <code>True</code>, this variable will be set back to <code>False</code> at the beginning of the next epoch.`,name:"should_epoch_stop"},{anchor:"transformers.TrainerControl.should_save",description:`<strong>should_save</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the model should be saved at this step.</p>
<p>If <code>True</code>, this variable will be set back to <code>False</code> at the beginning of the next step.`,name:"should_save"},{anchor:"transformers.TrainerControl.should_evaluate",description:`<strong>should_evaluate</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the model should be evaluated at this step.</p>
<p>If <code>True</code>, this variable will be set back to <code>False</code> at the beginning of the next step.`,name:"should_evaluate"},{anchor:"transformers.TrainerControl.should_log",description:`<strong>should_log</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the logs should be reported at this step.</p>
<p>If <code>True</code>, this variable will be set back to <code>False</code> at the beginning of the next step.`,name:"should_log"}],source:"https://github.com/huggingface/transformers/blob/vr_17067/src/transformers/trainer_callback.py#L110"}}),{c(){w=o("meta"),z=c(),A=o("h1"),D=o("a"),F=o("span"),g(C.$$.fragment),N=c(),ae=o("span"),ne=r("Callbacks"),W=c(),G=o("p"),hr=r(`Callbacks are objects that can customize the behavior of the training loop in the PyTorch
`),pr=o("a"),es=r("Trainer"),ts=r(` (this feature is not yet implemented in TensorFlow) that can inspect the training loop
state (for progress reporting, logging on TensorBoard or other ML platforms\u2026) and take decisions (like early
stopping).`),Wn=c(),B=o("p"),rs=r("Callbacks are \u201Cread only\u201D pieces of code, apart from the "),gr=o("a"),as=r("TrainerControl"),ns=r(` object they return, they
cannot change anything in the training loop. For customizations that require changes in the training loop, you should
subclass `),ur=o("a"),os=r("Trainer"),ss=r(" and override the methods you need (see "),_r=o("a"),ls=r("trainer"),is=r(" for examples)."),jn=c(),Ce=o("p"),cs=r("By default a "),br=o("a"),ds=r("Trainer"),fs=r(" will use the following callbacks:"),zn=c(),L=o("ul"),vr=o("li"),Er=o("a"),ms=r("DefaultFlowCallback"),hs=r(" which handles the default behavior for logging, saving and evaluation."),ps=c(),ee=o("li"),kr=o("a"),gs=r("PrinterCallback"),us=r(" or "),$r=o("a"),_s=r("ProgressCallback"),bs=r(` to display progress and print the
logs (the first one is used if you deactivate tqdm through the `),Tr=o("a"),vs=r("TrainingArguments"),Es=r(`, otherwise
it\u2019s the second one).`),ks=c(),Cr=o("li"),wr=o("a"),$s=r("TensorBoardCallback"),Ts=r(` if tensorboard is accessible (either through PyTorch >= 1.4
or tensorboardX).`),Cs=c(),we=o("li"),yr=o("a"),ws=r("WandbCallback"),ys=r(" if "),nt=o("a"),As=r("wandb"),Ds=r(" is installed."),Ls=c(),ye=o("li"),Ar=o("a"),xs=r("CometCallback"),Ss=r(" if "),ot=o("a"),Os=r("comet_ml"),Ps=r(" is installed."),Is=c(),Ae=o("li"),Dr=o("a"),Ms=r("MLflowCallback"),Fs=r(" if "),st=o("a"),Ns=r("mlflow"),Ws=r(" is installed."),js=c(),De=o("li"),Lr=o("a"),zs=r("AzureMLCallback"),Bs=r(" if "),lt=o("a"),Vs=r("azureml-sdk"),Rs=r(` is
installed.`),qs=c(),Le=o("li"),xr=o("a"),Us=r("CodeCarbonCallback"),Hs=r(" if "),it=o("a"),Gs=r("codecarbon"),Js=r(` is
installed.`),Bn=c(),S=o("p"),Ys=r("The main class that implements callbacks is "),Sr=o("a"),Xs=r("TrainerCallback"),Ks=r(`. It gets the
`),Or=o("a"),Qs=r("TrainingArguments"),Zs=r(" used to instantiate the "),Pr=o("a"),el=r("Trainer"),tl=r(`, can access that
Trainer\u2019s internal state via `),Ir=o("a"),rl=r("TrainerState"),al=r(`, and can take some actions on the training loop via
`),Mr=o("a"),nl=r("TrainerControl"),ol=r("."),Vn=c(),oe=o("h2"),xe=o("a"),pa=o("span"),g(ct.$$.fragment),sl=c(),ga=o("span"),ll=r("Available Callbacks"),Rn=c(),Se=o("p"),il=r("Here is the list of the available "),Fr=o("a"),cl=r("TrainerCallback"),dl=r(" in the library:"),qn=c(),J=o("div"),g(dt.$$.fragment),fl=c(),se=o("p"),ml=r("A "),Nr=o("a"),hl=r("TrainerCallback"),pl=r(" that sends the logs to "),ft=o("a"),gl=r("Comet ML"),ul=r("."),_l=c(),V=o("div"),g(mt.$$.fragment),bl=c(),ua=o("p"),vl=r("Setup the optional Comet.ml integration."),El=c(),y=o("p"),kl=r(`Environment:
COMET_MODE (`),_a=o("code"),$l=r("str"),Tl=r(", "),ba=o("em"),Cl=r("optional"),wl=r(`):
Whether to create an online, offline experiment or disable Comet logging. Can be \u201COFFLINE\u201D, \u201CONLINE\u201D,
or \u201CDISABLED\u201D. Defaults to \u201CONLINE\u201D.
COMET_PROJECT_NAME (`),va=o("code"),yl=r("str"),Al=r(", "),Ea=o("em"),Dl=r("optional"),Ll=r(`):
Comet project name for experiments
COMET_OFFLINE_DIRECTORY (`),ka=o("code"),xl=r("str"),Sl=r(", "),$a=o("em"),Ol=r("optional"),Pl=r(`):
Folder to use for saving offline experiments when `),Ta=o("code"),Il=r("COMET_MODE"),Ml=r(` is \u201COFFLINE\u201D
COMET_LOG_ASSETS (`),Ca=o("code"),Fl=r("str"),Nl=r(", "),wa=o("em"),Wl=r("optional"),jl=r(`):
Whether or not to log training assets (tf event logs, checkpoints, etc), to Comet. Can be \u201CTRUE\u201D, or
\u201CFALSE\u201D. Defaults to \u201CTRUE\u201D.`),zl=c(),ht=o("p"),Bl=r(`For a number of configurable items in the environment, see
`),pt=o("a"),Vl=r("here"),Rl=r("."),Un=c(),le=o("div"),g(gt.$$.fragment),ql=c(),ut=o("p"),Ul=r("A "),Wr=o("a"),Hl=r("TrainerCallback"),Gl=r(" that handles the default flow of the training loop for logs, evaluation and checkpoints."),Hn=c(),ie=o("div"),g(_t.$$.fragment),Jl=c(),bt=o("p"),Yl=r("A bare "),jr=o("a"),Xl=r("TrainerCallback"),Kl=r(" that just prints the logs."),Gn=c(),ce=o("div"),g(vt.$$.fragment),Ql=c(),Et=o("p"),Zl=r("A "),zr=o("a"),ei=r("TrainerCallback"),ti=r(" that displays the progress of training or evaluation."),Jn=c(),Y=o("div"),g(kt.$$.fragment),ri=c(),$t=o("p"),ai=r("A "),Br=o("a"),ni=r("TrainerCallback"),oi=r(" that handles early stopping."),si=c(),X=o("p"),li=r("This callback depends on "),Vr=o("a"),ii=r("TrainingArguments"),ci=r(" argument "),ya=o("em"),di=r("load_best_model_at_end"),fi=r(` functionality to set best_metric
in `),Rr=o("a"),mi=r("TrainerState"),hi=r("."),Yn=c(),de=o("div"),g(Tt.$$.fragment),pi=c(),fe=o("p"),gi=r("A "),qr=o("a"),ui=r("TrainerCallback"),_i=r(" that sends the logs to "),Ct=o("a"),bi=r("TensorBoard"),vi=r("."),Xn=c(),K=o("div"),g(wt.$$.fragment),Ei=c(),me=o("p"),ki=r("A "),Ur=o("a"),$i=r("TrainerCallback"),Ti=r(" that sends the logs to "),yt=o("a"),Ci=r("Weight and Biases"),wi=r("."),yi=c(),R=o("div"),g(At.$$.fragment),Ai=c(),Dt=o("p"),Di=r("Setup the optional Weights & Biases ("),Aa=o("em"),Li=r("wandb"),xi=r(") integration."),Si=c(),Lt=o("p"),Oi=r(`One can subclass and override this method to customize the setup if needed. Find more information
`),xt=o("a"),Pi=r("here"),Ii=r(`. You can also override the following environment
variables:`),Mi=c(),h=o("p"),Fi=r(`Environment:
WANDB_LOG_MODEL (`),Da=o("code"),Ni=r("bool"),Wi=r(", "),La=o("em"),ji=r("optional"),zi=r(", defaults to "),xa=o("code"),Bi=r("False"),Vi=r(`):
Whether or not to log model as artifact at the end of training. Use along with
`),Sa=o("em"),Ri=r("TrainingArguments.load_best_model_at_end"),qi=r(` to upload best model.
WANDB_WATCH (`),Oa=o("code"),Ui=r("str"),Hi=r(", "),Pa=o("em"),Gi=r("optional"),Ji=r(" defaults to "),Ia=o("code"),Yi=r('"gradients"'),Xi=r(`):
Can be `),Ma=o("code"),Ki=r('"gradients"'),Qi=r(", "),Fa=o("code"),Zi=r('"all"'),ec=r(" or "),Na=o("code"),tc=r('"false"'),rc=r(". Set to "),Wa=o("code"),ac=r('"false"'),nc=r(" to disable gradient logging or "),ja=o("code"),oc=r('"all"'),sc=r(` to
log gradients and parameters.
WANDB_PROJECT (`),za=o("code"),lc=r("str"),ic=r(", "),Ba=o("em"),cc=r("optional"),dc=r(", defaults to "),Va=o("code"),fc=r('"huggingface"'),mc=r(`):
Set this to a custom string to store results in a different project.
WANDB_DISABLED (`),Ra=o("code"),hc=r("bool"),pc=r(", "),qa=o("em"),gc=r("optional"),uc=r(", defaults to "),Ua=o("code"),_c=r("False"),bc=r(`):
Whether or not to disable wandb entirely. Set `),Ha=o("em"),vc=r("WANDB_DISABLED=true"),Ec=r(" to disable."),Kn=c(),Q=o("div"),g(St.$$.fragment),kc=c(),Z=o("p"),$c=r("A "),Hr=o("a"),Tc=r("TrainerCallback"),Cc=r(" that sends the logs to "),Ot=o("a"),wc=r("MLflow"),yc=r(`. Can be disabled by setting
environment variable `),Ga=o("code"),Ac=r("DISABLE_MLFLOW_INTEGRATION = TRUE"),Dc=r("."),Lc=c(),O=o("div"),g(Pt.$$.fragment),xc=c(),Ja=o("p"),Sc=r("Setup the optional MLflow integration."),Oc=c(),he=o("p"),Pc=r(`Environment:
HF_MLFLOW_LOG_ARTIFACTS (`),Ya=o("code"),Ic=r("str"),Mc=r(", "),Xa=o("em"),Fc=r("optional"),Nc=r(`):
Whether to use MLflow .log_artifact() facility to log artifacts.`),Wc=c(),j=o("p"),jc=r("This only makes sense if logging to a remote server, e.g. s3 or GCS. If set to "),Ka=o("code"),zc=r("True"),Bc=r(" or "),Qa=o("em"),Vc=r("1"),Rc=r(`, will copy
whatever is in `),Gr=o("a"),qc=r("TrainingArguments"),Uc=r("\u2019s "),Za=o("code"),Hc=r("output_dir"),Gc=r(` to the local or remote artifact storage. Using it
without a remote storage will just copy the files to your artifact location.`),Jc=c(),pe=o("p"),Yc=r("MLFLOW_EXPERIMENT_NAME ("),en=o("code"),Xc=r("str"),Kc=r(", "),tn=o("em"),Qc=r("optional"),Zc=r(`):
Whether to use an MLflow experiment_name under which to launch the run.`),ed=c(),rn=o("p"),td=r(`Default to the \u201CNone\u201D which will point to the \u201CDefault\u201D experiment in mlflow. Otherwise, it is a
case sensitive name of the experiment to be activated. If an experiment with this name does not
exist, a new experiment wth this name is created.`),Qn=c(),ge=o("div"),g(It.$$.fragment),rd=c(),ue=o("p"),ad=r("A "),Jr=o("a"),nd=r("TrainerCallback"),od=r(" that sends the logs to "),Mt=o("a"),sd=r("AzureML"),ld=r("."),Zn=c(),_e=o("div"),g(Ft.$$.fragment),id=c(),Nt=o("p"),cd=r("A "),Yr=o("a"),dd=r("TrainerCallback"),fd=r(" that tracks the CO2 emission of training."),eo=c(),be=o("h2"),Oe=o("a"),an=o("span"),g(Wt.$$.fragment),md=c(),nn=o("span"),hd=r("TrainerCallback"),to=c(),k=o("div"),g(jt.$$.fragment),pd=c(),on=o("p"),gd=r(`A class for objects that will inspect the state of the training loop at some events and take some decisions. At
each of those events the following arguments are available:`),ud=c(),zt=o("p"),_d=r("The "),sn=o("code"),bd=r("control"),vd=r(` object is the only one that can be changed by the callback, in which case the event that changes it
should return the modified version.`),Ed=c(),I=o("p"),kd=r("The argument "),ln=o("code"),$d=r("args"),Td=r(", "),cn=o("code"),Cd=r("state"),wd=r(" and "),dn=o("code"),yd=r("control"),Ad=r(" are positionals for all events, all the others are grouped in "),fn=o("code"),Dd=r("kwargs"),Ld=r(`.
You can unpack the ones you need in the signature of the event using them. As an example, see the code of the
simple `),mn=o("code"),xd=r("PrinterCallback"),Sd=r("."),Od=c(),g(Pe.$$.fragment),Pd=c(),Ie=o("div"),g(Bt.$$.fragment),Id=c(),hn=o("p"),Md=r("Event called at the beginning of an epoch."),Fd=c(),Me=o("div"),g(Vt.$$.fragment),Nd=c(),pn=o("p"),Wd=r("Event called at the end of an epoch."),jd=c(),Fe=o("div"),g(Rt.$$.fragment),zd=c(),gn=o("p"),Bd=r("Event called after an evaluation phase."),Vd=c(),Ne=o("div"),g(qt.$$.fragment),Rd=c(),Ut=o("p"),qd=r("Event called at the end of the initialization of the "),Xr=o("a"),Ud=r("Trainer"),Hd=r("."),Gd=c(),We=o("div"),g(Ht.$$.fragment),Jd=c(),un=o("p"),Yd=r("Event called after logging the last logs."),Xd=c(),je=o("div"),g(Gt.$$.fragment),Kd=c(),_n=o("p"),Qd=r("Event called after a prediction step."),Zd=c(),ze=o("div"),g(Jt.$$.fragment),ef=c(),bn=o("p"),tf=r("Event called after a checkpoint save."),rf=c(),Be=o("div"),g(Yt.$$.fragment),af=c(),vn=o("p"),nf=r(`Event called at the beginning of a training step. If using gradient accumulation, one training step might take
several inputs.`),of=c(),Ve=o("div"),g(Xt.$$.fragment),sf=c(),En=o("p"),lf=r(`Event called at the end of a training step. If using gradient accumulation, one training step might take
several inputs.`),cf=c(),Re=o("div"),g(Kt.$$.fragment),df=c(),kn=o("p"),ff=r("Event called at the end of an substep during gradient accumulation."),mf=c(),qe=o("div"),g(Qt.$$.fragment),hf=c(),$n=o("p"),pf=r("Event called at the beginning of training."),gf=c(),Ue=o("div"),g(Zt.$$.fragment),uf=c(),Tn=o("p"),_f=r("Event called at the end of training."),ro=c(),He=o("p"),bf=r("Here is an example of how to register a custom callback with the PyTorch "),Kr=o("a"),vf=r("Trainer"),Ef=r(":"),ao=c(),g(er.$$.fragment),no=c(),Ge=o("p"),kf=r("Another way to register a callback is to call "),Cn=o("code"),$f=r("trainer.add_callback()"),Tf=r(" as follows:"),oo=c(),g(tr.$$.fragment),so=c(),ve=o("h2"),Je=o("a"),wn=o("span"),g(rr.$$.fragment),Cf=c(),yn=o("span"),wf=r("TrainerState"),lo=c(),M=o("div"),g(ar.$$.fragment),yf=c(),Ee=o("p"),Af=r("A class containing the "),Qr=o("a"),Df=r("Trainer"),Lf=r(` inner state that will be saved along the model and optimizer when checkpointing
and passed to the `),Zr=o("a"),xf=r("TrainerCallback"),Sf=r("."),Of=c(),g(Ye.$$.fragment),Pf=c(),Xe=o("div"),g(nr.$$.fragment),If=c(),or=o("p"),Mf=r("Create an instance from the content of "),An=o("code"),Ff=r("json_path"),Nf=r("."),Wf=c(),Ke=o("div"),g(sr.$$.fragment),jf=c(),lr=o("p"),zf=r("Save the content of this instance in JSON format inside "),Dn=o("code"),Bf=r("json_path"),Vf=r("."),io=c(),ke=o("h2"),Qe=o("a"),Ln=o("span"),g(ir.$$.fragment),Rf=c(),xn=o("span"),qf=r("TrainerControl"),co=c(),$e=o("div"),g(cr.$$.fragment),Uf=c(),Te=o("p"),Hf=r("A class that handles the "),ea=o("a"),Gf=r("Trainer"),Jf=r(" control flow. This class is used by the "),ta=o("a"),Yf=r("TrainerCallback"),Xf=r(` to activate some
switches in the training loop.`),this.h()},l(n){const f=Tp('[data-svelte="svelte-1phssyn"]',document.head);w=s(f,"META",{name:!0,content:!0}),f.forEach(t),z=d(n),A=s(n,"H1",{class:!0});var dr=l(A);D=s(dr,"A",{id:!0,class:!0,href:!0});var Sn=l(D);F=s(Sn,"SPAN",{});var em=l(F);u(C.$$.fragment,em),em.forEach(t),Sn.forEach(t),N=d(dr),ae=s(dr,"SPAN",{});var tm=l(ae);ne=a(tm,"Callbacks"),tm.forEach(t),dr.forEach(t),W=d(n),G=s(n,"P",{});var mo=l(G);hr=a(mo,`Callbacks are objects that can customize the behavior of the training loop in the PyTorch
`),pr=s(mo,"A",{href:!0});var rm=l(pr);es=a(rm,"Trainer"),rm.forEach(t),ts=a(mo,` (this feature is not yet implemented in TensorFlow) that can inspect the training loop
state (for progress reporting, logging on TensorBoard or other ML platforms\u2026) and take decisions (like early
stopping).`),mo.forEach(t),Wn=d(n),B=s(n,"P",{});var Ze=l(B);rs=a(Ze,"Callbacks are \u201Cread only\u201D pieces of code, apart from the "),gr=s(Ze,"A",{href:!0});var am=l(gr);as=a(am,"TrainerControl"),am.forEach(t),ns=a(Ze,` object they return, they
cannot change anything in the training loop. For customizations that require changes in the training loop, you should
subclass `),ur=s(Ze,"A",{href:!0});var nm=l(ur);os=a(nm,"Trainer"),nm.forEach(t),ss=a(Ze," and override the methods you need (see "),_r=s(Ze,"A",{href:!0});var om=l(_r);ls=a(om,"trainer"),om.forEach(t),is=a(Ze," for examples)."),Ze.forEach(t),jn=d(n),Ce=s(n,"P",{});var ho=l(Ce);cs=a(ho,"By default a "),br=s(ho,"A",{href:!0});var sm=l(br);ds=a(sm,"Trainer"),sm.forEach(t),fs=a(ho," will use the following callbacks:"),ho.forEach(t),zn=d(n),L=s(n,"UL",{});var P=l(L);vr=s(P,"LI",{});var Kf=l(vr);Er=s(Kf,"A",{href:!0});var lm=l(Er);ms=a(lm,"DefaultFlowCallback"),lm.forEach(t),hs=a(Kf," which handles the default behavior for logging, saving and evaluation."),Kf.forEach(t),ps=d(P),ee=s(P,"LI",{});var fr=l(ee);kr=s(fr,"A",{href:!0});var im=l(kr);gs=a(im,"PrinterCallback"),im.forEach(t),us=a(fr," or "),$r=s(fr,"A",{href:!0});var cm=l($r);_s=a(cm,"ProgressCallback"),cm.forEach(t),bs=a(fr,` to display progress and print the
logs (the first one is used if you deactivate tqdm through the `),Tr=s(fr,"A",{href:!0});var dm=l(Tr);vs=a(dm,"TrainingArguments"),dm.forEach(t),Es=a(fr,`, otherwise
it\u2019s the second one).`),fr.forEach(t),ks=d(P),Cr=s(P,"LI",{});var Qf=l(Cr);wr=s(Qf,"A",{href:!0});var fm=l(wr);$s=a(fm,"TensorBoardCallback"),fm.forEach(t),Ts=a(Qf,` if tensorboard is accessible (either through PyTorch >= 1.4
or tensorboardX).`),Qf.forEach(t),Cs=d(P),we=s(P,"LI",{});var On=l(we);yr=s(On,"A",{href:!0});var mm=l(yr);ws=a(mm,"WandbCallback"),mm.forEach(t),ys=a(On," if "),nt=s(On,"A",{href:!0,rel:!0});var hm=l(nt);As=a(hm,"wandb"),hm.forEach(t),Ds=a(On," is installed."),On.forEach(t),Ls=d(P),ye=s(P,"LI",{});var Pn=l(ye);Ar=s(Pn,"A",{href:!0});var pm=l(Ar);xs=a(pm,"CometCallback"),pm.forEach(t),Ss=a(Pn," if "),ot=s(Pn,"A",{href:!0,rel:!0});var gm=l(ot);Os=a(gm,"comet_ml"),gm.forEach(t),Ps=a(Pn," is installed."),Pn.forEach(t),Is=d(P),Ae=s(P,"LI",{});var In=l(Ae);Dr=s(In,"A",{href:!0});var um=l(Dr);Ms=a(um,"MLflowCallback"),um.forEach(t),Fs=a(In," if "),st=s(In,"A",{href:!0,rel:!0});var _m=l(st);Ns=a(_m,"mlflow"),_m.forEach(t),Ws=a(In," is installed."),In.forEach(t),js=d(P),De=s(P,"LI",{});var Mn=l(De);Lr=s(Mn,"A",{href:!0});var bm=l(Lr);zs=a(bm,"AzureMLCallback"),bm.forEach(t),Bs=a(Mn," if "),lt=s(Mn,"A",{href:!0,rel:!0});var vm=l(lt);Vs=a(vm,"azureml-sdk"),vm.forEach(t),Rs=a(Mn,` is
installed.`),Mn.forEach(t),qs=d(P),Le=s(P,"LI",{});var Fn=l(Le);xr=s(Fn,"A",{href:!0});var Em=l(xr);Us=a(Em,"CodeCarbonCallback"),Em.forEach(t),Hs=a(Fn," if "),it=s(Fn,"A",{href:!0,rel:!0});var km=l(it);Gs=a(km,"codecarbon"),km.forEach(t),Js=a(Fn,` is
installed.`),Fn.forEach(t),P.forEach(t),Bn=d(n),S=s(n,"P",{});var q=l(S);Ys=a(q,"The main class that implements callbacks is "),Sr=s(q,"A",{href:!0});var $m=l(Sr);Xs=a($m,"TrainerCallback"),$m.forEach(t),Ks=a(q,`. It gets the
`),Or=s(q,"A",{href:!0});var Tm=l(Or);Qs=a(Tm,"TrainingArguments"),Tm.forEach(t),Zs=a(q," used to instantiate the "),Pr=s(q,"A",{href:!0});var Cm=l(Pr);el=a(Cm,"Trainer"),Cm.forEach(t),tl=a(q,`, can access that
Trainer\u2019s internal state via `),Ir=s(q,"A",{href:!0});var wm=l(Ir);rl=a(wm,"TrainerState"),wm.forEach(t),al=a(q,`, and can take some actions on the training loop via
`),Mr=s(q,"A",{href:!0});var ym=l(Mr);nl=a(ym,"TrainerControl"),ym.forEach(t),ol=a(q,"."),q.forEach(t),Vn=d(n),oe=s(n,"H2",{class:!0});var po=l(oe);xe=s(po,"A",{id:!0,class:!0,href:!0});var Am=l(xe);pa=s(Am,"SPAN",{});var Dm=l(pa);u(ct.$$.fragment,Dm),Dm.forEach(t),Am.forEach(t),sl=d(po),ga=s(po,"SPAN",{});var Lm=l(ga);ll=a(Lm,"Available Callbacks"),Lm.forEach(t),po.forEach(t),Rn=d(n),Se=s(n,"P",{});var go=l(Se);il=a(go,"Here is the list of the available "),Fr=s(go,"A",{href:!0});var xm=l(Fr);cl=a(xm,"TrainerCallback"),xm.forEach(t),dl=a(go," in the library:"),go.forEach(t),qn=d(n),J=s(n,"DIV",{class:!0});var ra=l(J);u(dt.$$.fragment,ra),fl=d(ra),se=s(ra,"P",{});var aa=l(se);ml=a(aa,"A "),Nr=s(aa,"A",{href:!0});var Sm=l(Nr);hl=a(Sm,"TrainerCallback"),Sm.forEach(t),pl=a(aa," that sends the logs to "),ft=s(aa,"A",{href:!0,rel:!0});var Om=l(ft);gl=a(Om,"Comet ML"),Om.forEach(t),ul=a(aa,"."),aa.forEach(t),_l=d(ra),V=s(ra,"DIV",{class:!0});var et=l(V);u(mt.$$.fragment,et),bl=d(et),ua=s(et,"P",{});var Pm=l(ua);vl=a(Pm,"Setup the optional Comet.ml integration."),Pm.forEach(t),El=d(et),y=s(et,"P",{});var x=l(y);kl=a(x,`Environment:
COMET_MODE (`),_a=s(x,"CODE",{});var Im=l(_a);$l=a(Im,"str"),Im.forEach(t),Tl=a(x,", "),ba=s(x,"EM",{});var Mm=l(ba);Cl=a(Mm,"optional"),Mm.forEach(t),wl=a(x,`):
Whether to create an online, offline experiment or disable Comet logging. Can be \u201COFFLINE\u201D, \u201CONLINE\u201D,
or \u201CDISABLED\u201D. Defaults to \u201CONLINE\u201D.
COMET_PROJECT_NAME (`),va=s(x,"CODE",{});var Fm=l(va);yl=a(Fm,"str"),Fm.forEach(t),Al=a(x,", "),Ea=s(x,"EM",{});var Nm=l(Ea);Dl=a(Nm,"optional"),Nm.forEach(t),Ll=a(x,`):
Comet project name for experiments
COMET_OFFLINE_DIRECTORY (`),ka=s(x,"CODE",{});var Wm=l(ka);xl=a(Wm,"str"),Wm.forEach(t),Sl=a(x,", "),$a=s(x,"EM",{});var jm=l($a);Ol=a(jm,"optional"),jm.forEach(t),Pl=a(x,`):
Folder to use for saving offline experiments when `),Ta=s(x,"CODE",{});var zm=l(Ta);Il=a(zm,"COMET_MODE"),zm.forEach(t),Ml=a(x,` is \u201COFFLINE\u201D
COMET_LOG_ASSETS (`),Ca=s(x,"CODE",{});var Bm=l(Ca);Fl=a(Bm,"str"),Bm.forEach(t),Nl=a(x,", "),wa=s(x,"EM",{});var Vm=l(wa);Wl=a(Vm,"optional"),Vm.forEach(t),jl=a(x,`):
Whether or not to log training assets (tf event logs, checkpoints, etc), to Comet. Can be \u201CTRUE\u201D, or
\u201CFALSE\u201D. Defaults to \u201CTRUE\u201D.`),x.forEach(t),zl=d(et),ht=s(et,"P",{});var uo=l(ht);Bl=a(uo,`For a number of configurable items in the environment, see
`),pt=s(uo,"A",{href:!0,rel:!0});var Rm=l(pt);Vl=a(Rm,"here"),Rm.forEach(t),Rl=a(uo,"."),uo.forEach(t),et.forEach(t),ra.forEach(t),Un=d(n),le=s(n,"DIV",{class:!0});var _o=l(le);u(gt.$$.fragment,_o),ql=d(_o),ut=s(_o,"P",{});var bo=l(ut);Ul=a(bo,"A "),Wr=s(bo,"A",{href:!0});var qm=l(Wr);Hl=a(qm,"TrainerCallback"),qm.forEach(t),Gl=a(bo," that handles the default flow of the training loop for logs, evaluation and checkpoints."),bo.forEach(t),_o.forEach(t),Hn=d(n),ie=s(n,"DIV",{class:!0});var vo=l(ie);u(_t.$$.fragment,vo),Jl=d(vo),bt=s(vo,"P",{});var Eo=l(bt);Yl=a(Eo,"A bare "),jr=s(Eo,"A",{href:!0});var Um=l(jr);Xl=a(Um,"TrainerCallback"),Um.forEach(t),Kl=a(Eo," that just prints the logs."),Eo.forEach(t),vo.forEach(t),Gn=d(n),ce=s(n,"DIV",{class:!0});var ko=l(ce);u(vt.$$.fragment,ko),Ql=d(ko),Et=s(ko,"P",{});var $o=l(Et);Zl=a($o,"A "),zr=s($o,"A",{href:!0});var Hm=l(zr);ei=a(Hm,"TrainerCallback"),Hm.forEach(t),ti=a($o," that displays the progress of training or evaluation."),$o.forEach(t),ko.forEach(t),Jn=d(n),Y=s(n,"DIV",{class:!0});var na=l(Y);u(kt.$$.fragment,na),ri=d(na),$t=s(na,"P",{});var To=l($t);ai=a(To,"A "),Br=s(To,"A",{href:!0});var Gm=l(Br);ni=a(Gm,"TrainerCallback"),Gm.forEach(t),oi=a(To," that handles early stopping."),To.forEach(t),si=d(na),X=s(na,"P",{});var tt=l(X);li=a(tt,"This callback depends on "),Vr=s(tt,"A",{href:!0});var Jm=l(Vr);ii=a(Jm,"TrainingArguments"),Jm.forEach(t),ci=a(tt," argument "),ya=s(tt,"EM",{});var Ym=l(ya);di=a(Ym,"load_best_model_at_end"),Ym.forEach(t),fi=a(tt,` functionality to set best_metric
in `),Rr=s(tt,"A",{href:!0});var Xm=l(Rr);mi=a(Xm,"TrainerState"),Xm.forEach(t),hi=a(tt,"."),tt.forEach(t),na.forEach(t),Yn=d(n),de=s(n,"DIV",{class:!0});var Co=l(de);u(Tt.$$.fragment,Co),pi=d(Co),fe=s(Co,"P",{});var oa=l(fe);gi=a(oa,"A "),qr=s(oa,"A",{href:!0});var Km=l(qr);ui=a(Km,"TrainerCallback"),Km.forEach(t),_i=a(oa," that sends the logs to "),Ct=s(oa,"A",{href:!0,rel:!0});var Qm=l(Ct);bi=a(Qm,"TensorBoard"),Qm.forEach(t),vi=a(oa,"."),oa.forEach(t),Co.forEach(t),Xn=d(n),K=s(n,"DIV",{class:!0});var sa=l(K);u(wt.$$.fragment,sa),Ei=d(sa),me=s(sa,"P",{});var la=l(me);ki=a(la,"A "),Ur=s(la,"A",{href:!0});var Zm=l(Ur);$i=a(Zm,"TrainerCallback"),Zm.forEach(t),Ti=a(la," that sends the logs to "),yt=s(la,"A",{href:!0,rel:!0});var eh=l(yt);Ci=a(eh,"Weight and Biases"),eh.forEach(t),wi=a(la,"."),la.forEach(t),yi=d(sa),R=s(sa,"DIV",{class:!0});var rt=l(R);u(At.$$.fragment,rt),Ai=d(rt),Dt=s(rt,"P",{});var wo=l(Dt);Di=a(wo,"Setup the optional Weights & Biases ("),Aa=s(wo,"EM",{});var th=l(Aa);Li=a(th,"wandb"),th.forEach(t),xi=a(wo,") integration."),wo.forEach(t),Si=d(rt),Lt=s(rt,"P",{});var yo=l(Lt);Oi=a(yo,`One can subclass and override this method to customize the setup if needed. Find more information
`),xt=s(yo,"A",{href:!0,rel:!0});var rh=l(xt);Pi=a(rh,"here"),rh.forEach(t),Ii=a(yo,`. You can also override the following environment
variables:`),yo.forEach(t),Mi=d(rt),h=s(rt,"P",{});var p=l(h);Fi=a(p,`Environment:
WANDB_LOG_MODEL (`),Da=s(p,"CODE",{});var ah=l(Da);Ni=a(ah,"bool"),ah.forEach(t),Wi=a(p,", "),La=s(p,"EM",{});var nh=l(La);ji=a(nh,"optional"),nh.forEach(t),zi=a(p,", defaults to "),xa=s(p,"CODE",{});var oh=l(xa);Bi=a(oh,"False"),oh.forEach(t),Vi=a(p,`):
Whether or not to log model as artifact at the end of training. Use along with
`),Sa=s(p,"EM",{});var sh=l(Sa);Ri=a(sh,"TrainingArguments.load_best_model_at_end"),sh.forEach(t),qi=a(p,` to upload best model.
WANDB_WATCH (`),Oa=s(p,"CODE",{});var lh=l(Oa);Ui=a(lh,"str"),lh.forEach(t),Hi=a(p,", "),Pa=s(p,"EM",{});var ih=l(Pa);Gi=a(ih,"optional"),ih.forEach(t),Ji=a(p," defaults to "),Ia=s(p,"CODE",{});var ch=l(Ia);Yi=a(ch,'"gradients"'),ch.forEach(t),Xi=a(p,`):
Can be `),Ma=s(p,"CODE",{});var dh=l(Ma);Ki=a(dh,'"gradients"'),dh.forEach(t),Qi=a(p,", "),Fa=s(p,"CODE",{});var fh=l(Fa);Zi=a(fh,'"all"'),fh.forEach(t),ec=a(p," or "),Na=s(p,"CODE",{});var mh=l(Na);tc=a(mh,'"false"'),mh.forEach(t),rc=a(p,". Set to "),Wa=s(p,"CODE",{});var hh=l(Wa);ac=a(hh,'"false"'),hh.forEach(t),nc=a(p," to disable gradient logging or "),ja=s(p,"CODE",{});var ph=l(ja);oc=a(ph,'"all"'),ph.forEach(t),sc=a(p,` to
log gradients and parameters.
WANDB_PROJECT (`),za=s(p,"CODE",{});var gh=l(za);lc=a(gh,"str"),gh.forEach(t),ic=a(p,", "),Ba=s(p,"EM",{});var uh=l(Ba);cc=a(uh,"optional"),uh.forEach(t),dc=a(p,", defaults to "),Va=s(p,"CODE",{});var _h=l(Va);fc=a(_h,'"huggingface"'),_h.forEach(t),mc=a(p,`):
Set this to a custom string to store results in a different project.
WANDB_DISABLED (`),Ra=s(p,"CODE",{});var bh=l(Ra);hc=a(bh,"bool"),bh.forEach(t),pc=a(p,", "),qa=s(p,"EM",{});var vh=l(qa);gc=a(vh,"optional"),vh.forEach(t),uc=a(p,", defaults to "),Ua=s(p,"CODE",{});var Eh=l(Ua);_c=a(Eh,"False"),Eh.forEach(t),bc=a(p,`):
Whether or not to disable wandb entirely. Set `),Ha=s(p,"EM",{});var kh=l(Ha);vc=a(kh,"WANDB_DISABLED=true"),kh.forEach(t),Ec=a(p," to disable."),p.forEach(t),rt.forEach(t),sa.forEach(t),Kn=d(n),Q=s(n,"DIV",{class:!0});var ia=l(Q);u(St.$$.fragment,ia),kc=d(ia),Z=s(ia,"P",{});var at=l(Z);$c=a(at,"A "),Hr=s(at,"A",{href:!0});var $h=l(Hr);Tc=a($h,"TrainerCallback"),$h.forEach(t),Cc=a(at," that sends the logs to "),Ot=s(at,"A",{href:!0,rel:!0});var Th=l(Ot);wc=a(Th,"MLflow"),Th.forEach(t),yc=a(at,`. Can be disabled by setting
environment variable `),Ga=s(at,"CODE",{});var Ch=l(Ga);Ac=a(Ch,"DISABLE_MLFLOW_INTEGRATION = TRUE"),Ch.forEach(t),Dc=a(at,"."),at.forEach(t),Lc=d(ia),O=s(ia,"DIV",{class:!0});var U=l(O);u(Pt.$$.fragment,U),xc=d(U),Ja=s(U,"P",{});var wh=l(Ja);Sc=a(wh,"Setup the optional MLflow integration."),wh.forEach(t),Oc=d(U),he=s(U,"P",{});var ca=l(he);Pc=a(ca,`Environment:
HF_MLFLOW_LOG_ARTIFACTS (`),Ya=s(ca,"CODE",{});var yh=l(Ya);Ic=a(yh,"str"),yh.forEach(t),Mc=a(ca,", "),Xa=s(ca,"EM",{});var Ah=l(Xa);Fc=a(Ah,"optional"),Ah.forEach(t),Nc=a(ca,`):
Whether to use MLflow .log_artifact() facility to log artifacts.`),ca.forEach(t),Wc=d(U),j=s(U,"P",{});var te=l(j);jc=a(te,"This only makes sense if logging to a remote server, e.g. s3 or GCS. If set to "),Ka=s(te,"CODE",{});var Dh=l(Ka);zc=a(Dh,"True"),Dh.forEach(t),Bc=a(te," or "),Qa=s(te,"EM",{});var Lh=l(Qa);Vc=a(Lh,"1"),Lh.forEach(t),Rc=a(te,`, will copy
whatever is in `),Gr=s(te,"A",{href:!0});var xh=l(Gr);qc=a(xh,"TrainingArguments"),xh.forEach(t),Uc=a(te,"\u2019s "),Za=s(te,"CODE",{});var Sh=l(Za);Hc=a(Sh,"output_dir"),Sh.forEach(t),Gc=a(te,` to the local or remote artifact storage. Using it
without a remote storage will just copy the files to your artifact location.`),te.forEach(t),Jc=d(U),pe=s(U,"P",{});var da=l(pe);Yc=a(da,"MLFLOW_EXPERIMENT_NAME ("),en=s(da,"CODE",{});var Oh=l(en);Xc=a(Oh,"str"),Oh.forEach(t),Kc=a(da,", "),tn=s(da,"EM",{});var Ph=l(tn);Qc=a(Ph,"optional"),Ph.forEach(t),Zc=a(da,`):
Whether to use an MLflow experiment_name under which to launch the run.`),da.forEach(t),ed=d(U),rn=s(U,"P",{});var Ih=l(rn);td=a(Ih,`Default to the \u201CNone\u201D which will point to the \u201CDefault\u201D experiment in mlflow. Otherwise, it is a
case sensitive name of the experiment to be activated. If an experiment with this name does not
exist, a new experiment wth this name is created.`),Ih.forEach(t),U.forEach(t),ia.forEach(t),Qn=d(n),ge=s(n,"DIV",{class:!0});var Ao=l(ge);u(It.$$.fragment,Ao),rd=d(Ao),ue=s(Ao,"P",{});var fa=l(ue);ad=a(fa,"A "),Jr=s(fa,"A",{href:!0});var Mh=l(Jr);nd=a(Mh,"TrainerCallback"),Mh.forEach(t),od=a(fa," that sends the logs to "),Mt=s(fa,"A",{href:!0,rel:!0});var Fh=l(Mt);sd=a(Fh,"AzureML"),Fh.forEach(t),ld=a(fa,"."),fa.forEach(t),Ao.forEach(t),Zn=d(n),_e=s(n,"DIV",{class:!0});var Do=l(_e);u(Ft.$$.fragment,Do),id=d(Do),Nt=s(Do,"P",{});var Lo=l(Nt);cd=a(Lo,"A "),Yr=s(Lo,"A",{href:!0});var Nh=l(Yr);dd=a(Nh,"TrainerCallback"),Nh.forEach(t),fd=a(Lo," that tracks the CO2 emission of training."),Lo.forEach(t),Do.forEach(t),eo=d(n),be=s(n,"H2",{class:!0});var xo=l(be);Oe=s(xo,"A",{id:!0,class:!0,href:!0});var Wh=l(Oe);an=s(Wh,"SPAN",{});var jh=l(an);u(Wt.$$.fragment,jh),jh.forEach(t),Wh.forEach(t),md=d(xo),nn=s(xo,"SPAN",{});var zh=l(nn);hd=a(zh,"TrainerCallback"),zh.forEach(t),xo.forEach(t),to=d(n),k=s(n,"DIV",{class:!0});var $=l(k);u(jt.$$.fragment,$),pd=d($),on=s($,"P",{});var Bh=l(on);gd=a(Bh,`A class for objects that will inspect the state of the training loop at some events and take some decisions. At
each of those events the following arguments are available:`),Bh.forEach(t),ud=d($),zt=s($,"P",{});var So=l(zt);_d=a(So,"The "),sn=s(So,"CODE",{});var Vh=l(sn);bd=a(Vh,"control"),Vh.forEach(t),vd=a(So,` object is the only one that can be changed by the callback, in which case the event that changes it
should return the modified version.`),So.forEach(t),Ed=d($),I=s($,"P",{});var H=l(I);kd=a(H,"The argument "),ln=s(H,"CODE",{});var Rh=l(ln);$d=a(Rh,"args"),Rh.forEach(t),Td=a(H,", "),cn=s(H,"CODE",{});var qh=l(cn);Cd=a(qh,"state"),qh.forEach(t),wd=a(H," and "),dn=s(H,"CODE",{});var Uh=l(dn);yd=a(Uh,"control"),Uh.forEach(t),Ad=a(H," are positionals for all events, all the others are grouped in "),fn=s(H,"CODE",{});var Hh=l(fn);Dd=a(Hh,"kwargs"),Hh.forEach(t),Ld=a(H,`.
You can unpack the ones you need in the signature of the event using them. As an example, see the code of the
simple `),mn=s(H,"CODE",{});var Gh=l(mn);xd=a(Gh,"PrinterCallback"),Gh.forEach(t),Sd=a(H,"."),H.forEach(t),Od=d($),u(Pe.$$.fragment,$),Pd=d($),Ie=s($,"DIV",{class:!0});var Oo=l(Ie);u(Bt.$$.fragment,Oo),Id=d(Oo),hn=s(Oo,"P",{});var Jh=l(hn);Md=a(Jh,"Event called at the beginning of an epoch."),Jh.forEach(t),Oo.forEach(t),Fd=d($),Me=s($,"DIV",{class:!0});var Po=l(Me);u(Vt.$$.fragment,Po),Nd=d(Po),pn=s(Po,"P",{});var Yh=l(pn);Wd=a(Yh,"Event called at the end of an epoch."),Yh.forEach(t),Po.forEach(t),jd=d($),Fe=s($,"DIV",{class:!0});var Io=l(Fe);u(Rt.$$.fragment,Io),zd=d(Io),gn=s(Io,"P",{});var Xh=l(gn);Bd=a(Xh,"Event called after an evaluation phase."),Xh.forEach(t),Io.forEach(t),Vd=d($),Ne=s($,"DIV",{class:!0});var Mo=l(Ne);u(qt.$$.fragment,Mo),Rd=d(Mo),Ut=s(Mo,"P",{});var Fo=l(Ut);qd=a(Fo,"Event called at the end of the initialization of the "),Xr=s(Fo,"A",{href:!0});var Kh=l(Xr);Ud=a(Kh,"Trainer"),Kh.forEach(t),Hd=a(Fo,"."),Fo.forEach(t),Mo.forEach(t),Gd=d($),We=s($,"DIV",{class:!0});var No=l(We);u(Ht.$$.fragment,No),Jd=d(No),un=s(No,"P",{});var Qh=l(un);Yd=a(Qh,"Event called after logging the last logs."),Qh.forEach(t),No.forEach(t),Xd=d($),je=s($,"DIV",{class:!0});var Wo=l(je);u(Gt.$$.fragment,Wo),Kd=d(Wo),_n=s(Wo,"P",{});var Zh=l(_n);Qd=a(Zh,"Event called after a prediction step."),Zh.forEach(t),Wo.forEach(t),Zd=d($),ze=s($,"DIV",{class:!0});var jo=l(ze);u(Jt.$$.fragment,jo),ef=d(jo),bn=s(jo,"P",{});var ep=l(bn);tf=a(ep,"Event called after a checkpoint save."),ep.forEach(t),jo.forEach(t),rf=d($),Be=s($,"DIV",{class:!0});var zo=l(Be);u(Yt.$$.fragment,zo),af=d(zo),vn=s(zo,"P",{});var tp=l(vn);nf=a(tp,`Event called at the beginning of a training step. If using gradient accumulation, one training step might take
several inputs.`),tp.forEach(t),zo.forEach(t),of=d($),Ve=s($,"DIV",{class:!0});var Bo=l(Ve);u(Xt.$$.fragment,Bo),sf=d(Bo),En=s(Bo,"P",{});var rp=l(En);lf=a(rp,`Event called at the end of a training step. If using gradient accumulation, one training step might take
several inputs.`),rp.forEach(t),Bo.forEach(t),cf=d($),Re=s($,"DIV",{class:!0});var Vo=l(Re);u(Kt.$$.fragment,Vo),df=d(Vo),kn=s(Vo,"P",{});var ap=l(kn);ff=a(ap,"Event called at the end of an substep during gradient accumulation."),ap.forEach(t),Vo.forEach(t),mf=d($),qe=s($,"DIV",{class:!0});var Ro=l(qe);u(Qt.$$.fragment,Ro),hf=d(Ro),$n=s(Ro,"P",{});var np=l($n);pf=a(np,"Event called at the beginning of training."),np.forEach(t),Ro.forEach(t),gf=d($),Ue=s($,"DIV",{class:!0});var qo=l(Ue);u(Zt.$$.fragment,qo),uf=d(qo),Tn=s(qo,"P",{});var op=l(Tn);_f=a(op,"Event called at the end of training."),op.forEach(t),qo.forEach(t),$.forEach(t),ro=d(n),He=s(n,"P",{});var Uo=l(He);bf=a(Uo,"Here is an example of how to register a custom callback with the PyTorch "),Kr=s(Uo,"A",{href:!0});var sp=l(Kr);vf=a(sp,"Trainer"),sp.forEach(t),Ef=a(Uo,":"),Uo.forEach(t),ao=d(n),u(er.$$.fragment,n),no=d(n),Ge=s(n,"P",{});var Ho=l(Ge);kf=a(Ho,"Another way to register a callback is to call "),Cn=s(Ho,"CODE",{});var lp=l(Cn);$f=a(lp,"trainer.add_callback()"),lp.forEach(t),Tf=a(Ho," as follows:"),Ho.forEach(t),oo=d(n),u(tr.$$.fragment,n),so=d(n),ve=s(n,"H2",{class:!0});var Go=l(ve);Je=s(Go,"A",{id:!0,class:!0,href:!0});var ip=l(Je);wn=s(ip,"SPAN",{});var cp=l(wn);u(rr.$$.fragment,cp),cp.forEach(t),ip.forEach(t),Cf=d(Go),yn=s(Go,"SPAN",{});var dp=l(yn);wf=a(dp,"TrainerState"),dp.forEach(t),Go.forEach(t),lo=d(n),M=s(n,"DIV",{class:!0});var re=l(M);u(ar.$$.fragment,re),yf=d(re),Ee=s(re,"P",{});var ma=l(Ee);Af=a(ma,"A class containing the "),Qr=s(ma,"A",{href:!0});var fp=l(Qr);Df=a(fp,"Trainer"),fp.forEach(t),Lf=a(ma,` inner state that will be saved along the model and optimizer when checkpointing
and passed to the `),Zr=s(ma,"A",{href:!0});var mp=l(Zr);xf=a(mp,"TrainerCallback"),mp.forEach(t),Sf=a(ma,"."),ma.forEach(t),Of=d(re),u(Ye.$$.fragment,re),Pf=d(re),Xe=s(re,"DIV",{class:!0});var Jo=l(Xe);u(nr.$$.fragment,Jo),If=d(Jo),or=s(Jo,"P",{});var Yo=l(or);Mf=a(Yo,"Create an instance from the content of "),An=s(Yo,"CODE",{});var hp=l(An);Ff=a(hp,"json_path"),hp.forEach(t),Nf=a(Yo,"."),Yo.forEach(t),Jo.forEach(t),Wf=d(re),Ke=s(re,"DIV",{class:!0});var Xo=l(Ke);u(sr.$$.fragment,Xo),jf=d(Xo),lr=s(Xo,"P",{});var Ko=l(lr);zf=a(Ko,"Save the content of this instance in JSON format inside "),Dn=s(Ko,"CODE",{});var pp=l(Dn);Bf=a(pp,"json_path"),pp.forEach(t),Vf=a(Ko,"."),Ko.forEach(t),Xo.forEach(t),re.forEach(t),io=d(n),ke=s(n,"H2",{class:!0});var Qo=l(ke);Qe=s(Qo,"A",{id:!0,class:!0,href:!0});var gp=l(Qe);Ln=s(gp,"SPAN",{});var up=l(Ln);u(ir.$$.fragment,up),up.forEach(t),gp.forEach(t),Rf=d(Qo),xn=s(Qo,"SPAN",{});var _p=l(xn);qf=a(_p,"TrainerControl"),_p.forEach(t),Qo.forEach(t),co=d(n),$e=s(n,"DIV",{class:!0});var Zo=l($e);u(cr.$$.fragment,Zo),Uf=d(Zo),Te=s(Zo,"P",{});var ha=l(Te);Hf=a(ha,"A class that handles the "),ea=s(ha,"A",{href:!0});var bp=l(ea);Gf=a(bp,"Trainer"),bp.forEach(t),Jf=a(ha," control flow. This class is used by the "),ta=s(ha,"A",{href:!0});var vp=l(ta);Yf=a(vp,"TrainerCallback"),vp.forEach(t),Xf=a(ha,` to activate some
switches in the training loop.`),ha.forEach(t),Zo.forEach(t),this.h()},h(){i(w,"name","hf:doc:metadata"),i(w,"content",JSON.stringify(Sp)),i(D,"id","callbacks"),i(D,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(D,"href","#callbacks"),i(A,"class","relative group"),i(pr,"href","/docs/transformers/pr_17067/en/main_classes/trainer#transformers.Trainer"),i(gr,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.TrainerControl"),i(ur,"href","/docs/transformers/pr_17067/en/main_classes/trainer#transformers.Trainer"),i(_r,"href","trainer"),i(br,"href","/docs/transformers/pr_17067/en/main_classes/trainer#transformers.Trainer"),i(Er,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.DefaultFlowCallback"),i(kr,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.PrinterCallback"),i($r,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.ProgressCallback"),i(Tr,"href","/docs/transformers/pr_17067/en/main_classes/trainer#transformers.TrainingArguments"),i(wr,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.integrations.TensorBoardCallback"),i(yr,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.integrations.WandbCallback"),i(nt,"href","https://www.wandb.com/"),i(nt,"rel","nofollow"),i(Ar,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.integrations.CometCallback"),i(ot,"href","https://www.comet.ml/site/"),i(ot,"rel","nofollow"),i(Dr,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.integrations.MLflowCallback"),i(st,"href","https://www.mlflow.org/"),i(st,"rel","nofollow"),i(Lr,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.integrations.AzureMLCallback"),i(lt,"href","https://pypi.org/project/azureml-sdk/"),i(lt,"rel","nofollow"),i(xr,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.integrations.CodeCarbonCallback"),i(it,"href","https://pypi.org/project/codecarbon/"),i(it,"rel","nofollow"),i(Sr,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.TrainerCallback"),i(Or,"href","/docs/transformers/pr_17067/en/main_classes/trainer#transformers.TrainingArguments"),i(Pr,"href","/docs/transformers/pr_17067/en/main_classes/trainer#transformers.Trainer"),i(Ir,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.TrainerState"),i(Mr,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.TrainerControl"),i(xe,"id","transformers.integrations.CometCallback"),i(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(xe,"href","#transformers.integrations.CometCallback"),i(oe,"class","relative group"),i(Fr,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.TrainerCallback"),i(Nr,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.TrainerCallback"),i(ft,"href","https://www.comet.ml/site/"),i(ft,"rel","nofollow"),i(pt,"href","https://www.comet.ml/docs/python-sdk/advanced/#comet-configuration-variables"),i(pt,"rel","nofollow"),i(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Wr,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.TrainerCallback"),i(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(jr,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.TrainerCallback"),i(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(zr,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.TrainerCallback"),i(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Br,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.TrainerCallback"),i(Vr,"href","/docs/transformers/pr_17067/en/main_classes/trainer#transformers.TrainingArguments"),i(Rr,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.TrainerState"),i(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(qr,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.TrainerCallback"),i(Ct,"href","https://www.tensorflow.org/tensorboard"),i(Ct,"rel","nofollow"),i(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ur,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.TrainerCallback"),i(yt,"href","https://www.wandb.com/"),i(yt,"rel","nofollow"),i(xt,"href","https://docs.wandb.ai/integrations/huggingface"),i(xt,"rel","nofollow"),i(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Hr,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.TrainerCallback"),i(Ot,"href","https://www.mlflow.org/"),i(Ot,"rel","nofollow"),i(Gr,"href","/docs/transformers/pr_17067/en/main_classes/trainer#transformers.TrainingArguments"),i(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Jr,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.TrainerCallback"),i(Mt,"href","https://pypi.org/project/azureml-sdk/"),i(Mt,"rel","nofollow"),i(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Yr,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.TrainerCallback"),i(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Oe,"id","transformers.TrainerCallback"),i(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Oe,"href","#transformers.TrainerCallback"),i(be,"class","relative group"),i(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Xr,"href","/docs/transformers/pr_17067/en/main_classes/trainer#transformers.Trainer"),i(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Kr,"href","/docs/transformers/pr_17067/en/main_classes/trainer#transformers.Trainer"),i(Je,"id","transformers.TrainerState"),i(Je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Je,"href","#transformers.TrainerState"),i(ve,"class","relative group"),i(Qr,"href","/docs/transformers/pr_17067/en/main_classes/trainer#transformers.Trainer"),i(Zr,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.TrainerCallback"),i(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Qe,"id","transformers.TrainerControl"),i(Qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Qe,"href","#transformers.TrainerControl"),i(ke,"class","relative group"),i(ea,"href","/docs/transformers/pr_17067/en/main_classes/trainer#transformers.Trainer"),i(ta,"href","/docs/transformers/pr_17067/en/main_classes/callback#transformers.TrainerCallback"),i($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(n,f){e(document.head,w),m(n,z,f),m(n,A,f),e(A,D),e(D,F),_(C,F,null),e(A,N),e(A,ae),e(ae,ne),m(n,W,f),m(n,G,f),e(G,hr),e(G,pr),e(pr,es),e(G,ts),m(n,Wn,f),m(n,B,f),e(B,rs),e(B,gr),e(gr,as),e(B,ns),e(B,ur),e(ur,os),e(B,ss),e(B,_r),e(_r,ls),e(B,is),m(n,jn,f),m(n,Ce,f),e(Ce,cs),e(Ce,br),e(br,ds),e(Ce,fs),m(n,zn,f),m(n,L,f),e(L,vr),e(vr,Er),e(Er,ms),e(vr,hs),e(L,ps),e(L,ee),e(ee,kr),e(kr,gs),e(ee,us),e(ee,$r),e($r,_s),e(ee,bs),e(ee,Tr),e(Tr,vs),e(ee,Es),e(L,ks),e(L,Cr),e(Cr,wr),e(wr,$s),e(Cr,Ts),e(L,Cs),e(L,we),e(we,yr),e(yr,ws),e(we,ys),e(we,nt),e(nt,As),e(we,Ds),e(L,Ls),e(L,ye),e(ye,Ar),e(Ar,xs),e(ye,Ss),e(ye,ot),e(ot,Os),e(ye,Ps),e(L,Is),e(L,Ae),e(Ae,Dr),e(Dr,Ms),e(Ae,Fs),e(Ae,st),e(st,Ns),e(Ae,Ws),e(L,js),e(L,De),e(De,Lr),e(Lr,zs),e(De,Bs),e(De,lt),e(lt,Vs),e(De,Rs),e(L,qs),e(L,Le),e(Le,xr),e(xr,Us),e(Le,Hs),e(Le,it),e(it,Gs),e(Le,Js),m(n,Bn,f),m(n,S,f),e(S,Ys),e(S,Sr),e(Sr,Xs),e(S,Ks),e(S,Or),e(Or,Qs),e(S,Zs),e(S,Pr),e(Pr,el),e(S,tl),e(S,Ir),e(Ir,rl),e(S,al),e(S,Mr),e(Mr,nl),e(S,ol),m(n,Vn,f),m(n,oe,f),e(oe,xe),e(xe,pa),_(ct,pa,null),e(oe,sl),e(oe,ga),e(ga,ll),m(n,Rn,f),m(n,Se,f),e(Se,il),e(Se,Fr),e(Fr,cl),e(Se,dl),m(n,qn,f),m(n,J,f),_(dt,J,null),e(J,fl),e(J,se),e(se,ml),e(se,Nr),e(Nr,hl),e(se,pl),e(se,ft),e(ft,gl),e(se,ul),e(J,_l),e(J,V),_(mt,V,null),e(V,bl),e(V,ua),e(ua,vl),e(V,El),e(V,y),e(y,kl),e(y,_a),e(_a,$l),e(y,Tl),e(y,ba),e(ba,Cl),e(y,wl),e(y,va),e(va,yl),e(y,Al),e(y,Ea),e(Ea,Dl),e(y,Ll),e(y,ka),e(ka,xl),e(y,Sl),e(y,$a),e($a,Ol),e(y,Pl),e(y,Ta),e(Ta,Il),e(y,Ml),e(y,Ca),e(Ca,Fl),e(y,Nl),e(y,wa),e(wa,Wl),e(y,jl),e(V,zl),e(V,ht),e(ht,Bl),e(ht,pt),e(pt,Vl),e(ht,Rl),m(n,Un,f),m(n,le,f),_(gt,le,null),e(le,ql),e(le,ut),e(ut,Ul),e(ut,Wr),e(Wr,Hl),e(ut,Gl),m(n,Hn,f),m(n,ie,f),_(_t,ie,null),e(ie,Jl),e(ie,bt),e(bt,Yl),e(bt,jr),e(jr,Xl),e(bt,Kl),m(n,Gn,f),m(n,ce,f),_(vt,ce,null),e(ce,Ql),e(ce,Et),e(Et,Zl),e(Et,zr),e(zr,ei),e(Et,ti),m(n,Jn,f),m(n,Y,f),_(kt,Y,null),e(Y,ri),e(Y,$t),e($t,ai),e($t,Br),e(Br,ni),e($t,oi),e(Y,si),e(Y,X),e(X,li),e(X,Vr),e(Vr,ii),e(X,ci),e(X,ya),e(ya,di),e(X,fi),e(X,Rr),e(Rr,mi),e(X,hi),m(n,Yn,f),m(n,de,f),_(Tt,de,null),e(de,pi),e(de,fe),e(fe,gi),e(fe,qr),e(qr,ui),e(fe,_i),e(fe,Ct),e(Ct,bi),e(fe,vi),m(n,Xn,f),m(n,K,f),_(wt,K,null),e(K,Ei),e(K,me),e(me,ki),e(me,Ur),e(Ur,$i),e(me,Ti),e(me,yt),e(yt,Ci),e(me,wi),e(K,yi),e(K,R),_(At,R,null),e(R,Ai),e(R,Dt),e(Dt,Di),e(Dt,Aa),e(Aa,Li),e(Dt,xi),e(R,Si),e(R,Lt),e(Lt,Oi),e(Lt,xt),e(xt,Pi),e(Lt,Ii),e(R,Mi),e(R,h),e(h,Fi),e(h,Da),e(Da,Ni),e(h,Wi),e(h,La),e(La,ji),e(h,zi),e(h,xa),e(xa,Bi),e(h,Vi),e(h,Sa),e(Sa,Ri),e(h,qi),e(h,Oa),e(Oa,Ui),e(h,Hi),e(h,Pa),e(Pa,Gi),e(h,Ji),e(h,Ia),e(Ia,Yi),e(h,Xi),e(h,Ma),e(Ma,Ki),e(h,Qi),e(h,Fa),e(Fa,Zi),e(h,ec),e(h,Na),e(Na,tc),e(h,rc),e(h,Wa),e(Wa,ac),e(h,nc),e(h,ja),e(ja,oc),e(h,sc),e(h,za),e(za,lc),e(h,ic),e(h,Ba),e(Ba,cc),e(h,dc),e(h,Va),e(Va,fc),e(h,mc),e(h,Ra),e(Ra,hc),e(h,pc),e(h,qa),e(qa,gc),e(h,uc),e(h,Ua),e(Ua,_c),e(h,bc),e(h,Ha),e(Ha,vc),e(h,Ec),m(n,Kn,f),m(n,Q,f),_(St,Q,null),e(Q,kc),e(Q,Z),e(Z,$c),e(Z,Hr),e(Hr,Tc),e(Z,Cc),e(Z,Ot),e(Ot,wc),e(Z,yc),e(Z,Ga),e(Ga,Ac),e(Z,Dc),e(Q,Lc),e(Q,O),_(Pt,O,null),e(O,xc),e(O,Ja),e(Ja,Sc),e(O,Oc),e(O,he),e(he,Pc),e(he,Ya),e(Ya,Ic),e(he,Mc),e(he,Xa),e(Xa,Fc),e(he,Nc),e(O,Wc),e(O,j),e(j,jc),e(j,Ka),e(Ka,zc),e(j,Bc),e(j,Qa),e(Qa,Vc),e(j,Rc),e(j,Gr),e(Gr,qc),e(j,Uc),e(j,Za),e(Za,Hc),e(j,Gc),e(O,Jc),e(O,pe),e(pe,Yc),e(pe,en),e(en,Xc),e(pe,Kc),e(pe,tn),e(tn,Qc),e(pe,Zc),e(O,ed),e(O,rn),e(rn,td),m(n,Qn,f),m(n,ge,f),_(It,ge,null),e(ge,rd),e(ge,ue),e(ue,ad),e(ue,Jr),e(Jr,nd),e(ue,od),e(ue,Mt),e(Mt,sd),e(ue,ld),m(n,Zn,f),m(n,_e,f),_(Ft,_e,null),e(_e,id),e(_e,Nt),e(Nt,cd),e(Nt,Yr),e(Yr,dd),e(Nt,fd),m(n,eo,f),m(n,be,f),e(be,Oe),e(Oe,an),_(Wt,an,null),e(be,md),e(be,nn),e(nn,hd),m(n,to,f),m(n,k,f),_(jt,k,null),e(k,pd),e(k,on),e(on,gd),e(k,ud),e(k,zt),e(zt,_d),e(zt,sn),e(sn,bd),e(zt,vd),e(k,Ed),e(k,I),e(I,kd),e(I,ln),e(ln,$d),e(I,Td),e(I,cn),e(cn,Cd),e(I,wd),e(I,dn),e(dn,yd),e(I,Ad),e(I,fn),e(fn,Dd),e(I,Ld),e(I,mn),e(mn,xd),e(I,Sd),e(k,Od),_(Pe,k,null),e(k,Pd),e(k,Ie),_(Bt,Ie,null),e(Ie,Id),e(Ie,hn),e(hn,Md),e(k,Fd),e(k,Me),_(Vt,Me,null),e(Me,Nd),e(Me,pn),e(pn,Wd),e(k,jd),e(k,Fe),_(Rt,Fe,null),e(Fe,zd),e(Fe,gn),e(gn,Bd),e(k,Vd),e(k,Ne),_(qt,Ne,null),e(Ne,Rd),e(Ne,Ut),e(Ut,qd),e(Ut,Xr),e(Xr,Ud),e(Ut,Hd),e(k,Gd),e(k,We),_(Ht,We,null),e(We,Jd),e(We,un),e(un,Yd),e(k,Xd),e(k,je),_(Gt,je,null),e(je,Kd),e(je,_n),e(_n,Qd),e(k,Zd),e(k,ze),_(Jt,ze,null),e(ze,ef),e(ze,bn),e(bn,tf),e(k,rf),e(k,Be),_(Yt,Be,null),e(Be,af),e(Be,vn),e(vn,nf),e(k,of),e(k,Ve),_(Xt,Ve,null),e(Ve,sf),e(Ve,En),e(En,lf),e(k,cf),e(k,Re),_(Kt,Re,null),e(Re,df),e(Re,kn),e(kn,ff),e(k,mf),e(k,qe),_(Qt,qe,null),e(qe,hf),e(qe,$n),e($n,pf),e(k,gf),e(k,Ue),_(Zt,Ue,null),e(Ue,uf),e(Ue,Tn),e(Tn,_f),m(n,ro,f),m(n,He,f),e(He,bf),e(He,Kr),e(Kr,vf),e(He,Ef),m(n,ao,f),_(er,n,f),m(n,no,f),m(n,Ge,f),e(Ge,kf),e(Ge,Cn),e(Cn,$f),e(Ge,Tf),m(n,oo,f),_(tr,n,f),m(n,so,f),m(n,ve,f),e(ve,Je),e(Je,wn),_(rr,wn,null),e(ve,Cf),e(ve,yn),e(yn,wf),m(n,lo,f),m(n,M,f),_(ar,M,null),e(M,yf),e(M,Ee),e(Ee,Af),e(Ee,Qr),e(Qr,Df),e(Ee,Lf),e(Ee,Zr),e(Zr,xf),e(Ee,Sf),e(M,Of),_(Ye,M,null),e(M,Pf),e(M,Xe),_(nr,Xe,null),e(Xe,If),e(Xe,or),e(or,Mf),e(or,An),e(An,Ff),e(or,Nf),e(M,Wf),e(M,Ke),_(sr,Ke,null),e(Ke,jf),e(Ke,lr),e(lr,zf),e(lr,Dn),e(Dn,Bf),e(lr,Vf),m(n,io,f),m(n,ke,f),e(ke,Qe),e(Qe,Ln),_(ir,Ln,null),e(ke,Rf),e(ke,xn),e(xn,qf),m(n,co,f),m(n,$e,f),_(cr,$e,null),e($e,Uf),e($e,Te),e(Te,Hf),e(Te,ea),e(ea,Gf),e(Te,Jf),e(Te,ta),e(ta,Yf),e(Te,Xf),fo=!0},p(n,[f]){const dr={};f&2&&(dr.$$scope={dirty:f,ctx:n}),Pe.$set(dr);const Sn={};f&2&&(Sn.$$scope={dirty:f,ctx:n}),Ye.$set(Sn)},i(n){fo||(b(C.$$.fragment,n),b(ct.$$.fragment,n),b(dt.$$.fragment,n),b(mt.$$.fragment,n),b(gt.$$.fragment,n),b(_t.$$.fragment,n),b(vt.$$.fragment,n),b(kt.$$.fragment,n),b(Tt.$$.fragment,n),b(wt.$$.fragment,n),b(At.$$.fragment,n),b(St.$$.fragment,n),b(Pt.$$.fragment,n),b(It.$$.fragment,n),b(Ft.$$.fragment,n),b(Wt.$$.fragment,n),b(jt.$$.fragment,n),b(Pe.$$.fragment,n),b(Bt.$$.fragment,n),b(Vt.$$.fragment,n),b(Rt.$$.fragment,n),b(qt.$$.fragment,n),b(Ht.$$.fragment,n),b(Gt.$$.fragment,n),b(Jt.$$.fragment,n),b(Yt.$$.fragment,n),b(Xt.$$.fragment,n),b(Kt.$$.fragment,n),b(Qt.$$.fragment,n),b(Zt.$$.fragment,n),b(er.$$.fragment,n),b(tr.$$.fragment,n),b(rr.$$.fragment,n),b(ar.$$.fragment,n),b(Ye.$$.fragment,n),b(nr.$$.fragment,n),b(sr.$$.fragment,n),b(ir.$$.fragment,n),b(cr.$$.fragment,n),fo=!0)},o(n){v(C.$$.fragment,n),v(ct.$$.fragment,n),v(dt.$$.fragment,n),v(mt.$$.fragment,n),v(gt.$$.fragment,n),v(_t.$$.fragment,n),v(vt.$$.fragment,n),v(kt.$$.fragment,n),v(Tt.$$.fragment,n),v(wt.$$.fragment,n),v(At.$$.fragment,n),v(St.$$.fragment,n),v(Pt.$$.fragment,n),v(It.$$.fragment,n),v(Ft.$$.fragment,n),v(Wt.$$.fragment,n),v(jt.$$.fragment,n),v(Pe.$$.fragment,n),v(Bt.$$.fragment,n),v(Vt.$$.fragment,n),v(Rt.$$.fragment,n),v(qt.$$.fragment,n),v(Ht.$$.fragment,n),v(Gt.$$.fragment,n),v(Jt.$$.fragment,n),v(Yt.$$.fragment,n),v(Xt.$$.fragment,n),v(Kt.$$.fragment,n),v(Qt.$$.fragment,n),v(Zt.$$.fragment,n),v(er.$$.fragment,n),v(tr.$$.fragment,n),v(rr.$$.fragment,n),v(ar.$$.fragment,n),v(Ye.$$.fragment,n),v(nr.$$.fragment,n),v(sr.$$.fragment,n),v(ir.$$.fragment,n),v(cr.$$.fragment,n),fo=!1},d(n){t(w),n&&t(z),n&&t(A),E(C),n&&t(W),n&&t(G),n&&t(Wn),n&&t(B),n&&t(jn),n&&t(Ce),n&&t(zn),n&&t(L),n&&t(Bn),n&&t(S),n&&t(Vn),n&&t(oe),E(ct),n&&t(Rn),n&&t(Se),n&&t(qn),n&&t(J),E(dt),E(mt),n&&t(Un),n&&t(le),E(gt),n&&t(Hn),n&&t(ie),E(_t),n&&t(Gn),n&&t(ce),E(vt),n&&t(Jn),n&&t(Y),E(kt),n&&t(Yn),n&&t(de),E(Tt),n&&t(Xn),n&&t(K),E(wt),E(At),n&&t(Kn),n&&t(Q),E(St),E(Pt),n&&t(Qn),n&&t(ge),E(It),n&&t(Zn),n&&t(_e),E(Ft),n&&t(eo),n&&t(be),E(Wt),n&&t(to),n&&t(k),E(jt),E(Pe),E(Bt),E(Vt),E(Rt),E(qt),E(Ht),E(Gt),E(Jt),E(Yt),E(Xt),E(Kt),E(Qt),E(Zt),n&&t(ro),n&&t(He),n&&t(ao),E(er,n),n&&t(no),n&&t(Ge),n&&t(oo),E(tr,n),n&&t(so),n&&t(ve),E(rr),n&&t(lo),n&&t(M),E(ar),E(Ye),E(nr),E(sr),n&&t(io),n&&t(ke),E(ir),n&&t(co),n&&t($e),E(cr)}}}const Sp={local:"callbacks",sections:[{local:"transformers.integrations.CometCallback",title:"Available Callbacks"},{local:"transformers.TrainerCallback",title:"TrainerCallback"},{local:"transformers.TrainerState",title:"TrainerState"},{local:"transformers.TrainerControl",title:"TrainerControl"}],title:"Callbacks"};function Op(mr){return Cp(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class jp extends Ep{constructor(w){super();kp(this,w,Op,xp,$p,{})}}export{jp as default,Sp as metadata};
