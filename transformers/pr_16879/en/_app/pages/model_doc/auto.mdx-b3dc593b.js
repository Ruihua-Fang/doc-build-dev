import{S as j5t,i as D5t,s as G5t,e as a,k as l,w as f,t as o,M as O5t,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as V5t}from"../../chunks/vendor-6b77c823.js";import{T as JPr}from"../../chunks/Tip-39098574.js";import{D as w}from"../../chunks/Docstring-1088f2fb.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function X5t(Nf){let Z,io,ce,Ce,lo,he,Me,Xo,ji,jf,fa,Di,Gi,xE,Df,xe,co,Oi,On,kE,Vn,Xn,SE,Vi,zn,RE,Xi,Gf,Da;return{c(){Z=a("p"),io=o("If your "),ce=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),he=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),ji=a("code"),jf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Di=a("code"),Gi=o('"new-model"'),xE=o(")."),Df=l(),xe=a("p"),co=o("Likewise, if your "),Oi=a("code"),On=o("NewModel"),kE=o(" is a subclass of "),Vn=a("a"),Xn=o("PreTrainedModel"),SE=o(`, make sure its
`),Vi=a("code"),zn=o("config_class"),RE=o(` attribute is set to the same class you use when registering the model (here
`),Xi=a("code"),Gf=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var ue=s(Z);io=r(ue,"If your "),ce=n(ue,"CODE",{});var EL=s(ce);Ce=r(EL,"NewModelConfig"),EL.forEach(t),lo=r(ue," is a subclass of "),he=n(ue,"CODE",{});var zi=s(he);Me=r(zi,"PretrainedConfig"),zi.forEach(t),Xo=r(ue,`, make sure its
`),ji=n(ue,"CODE",{});var CL=s(ji);jf=r(CL,"model_type"),CL.forEach(t),fa=r(ue," attribute is set to the same key you use when registering the config (here "),Di=n(ue,"CODE",{});var wL=s(Di);Gi=r(wL,'"new-model"'),wL.forEach(t),xE=r(ue,")."),ue.forEach(t),Df=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),Oi=n(zo,"CODE",{});var Ga=s(Oi);On=r(Ga,"NewModel"),Ga.forEach(t),kE=r(zo," is a subclass of "),Vn=n(zo,"A",{href:!0});var AL=s(Vn);Xn=r(AL,"PreTrainedModel"),AL.forEach(t),SE=r(zo,`, make sure its
`),Vi=n(zo,"CODE",{});var Of=s(Vi);zn=r(Of,"config_class"),Of.forEach(t),RE=r(zo,` attribute is set to the same class you use when registering the model (here
`),Xi=n(zo,"CODE",{});var yL=s(Xi);Gf=r(yL,"NewModelConfig"),yL.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(Vn,"href","/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel")},m(fo,ue){b(fo,Z,ue),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo),e(Z,he),e(he,Me),e(Z,Xo),e(Z,ji),e(ji,jf),e(Z,fa),e(Z,Di),e(Di,Gi),e(Z,xE),b(fo,Df,ue),b(fo,xe,ue),e(xe,co),e(xe,Oi),e(Oi,On),e(xe,kE),e(xe,Vn),e(Vn,Xn),e(xe,SE),e(xe,Vi),e(Vi,zn),e(xe,RE),e(xe,Xi),e(Xi,Gf),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(Df),fo&&t(xe)}}}function z5t(Nf){let Z,io,ce,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){Z=n(he,"P",{});var Me=s(Z);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,Z,Me),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo)},d(he){he&&t(Z)}}}function Q5t(Nf){let Z,io,ce,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){Z=n(he,"P",{});var Me=s(Z);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,Z,Me),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo)},d(he){he&&t(Z)}}}function W5t(Nf){let Z,io,ce,Ce,lo,he,Me,Xo,ji,jf,fa,Di,Gi,xE,Df,xe,co,Oi,On,kE,Vn,Xn,SE,Vi,zn,RE,Xi,Gf,Da,fo,ue,EL,zi,CL,wL,zo,Ga,AL,Of,yL,JIe,qRe,Qi,Vf,pY,BE,YIe,_Y,KIe,NRe,Qn,ZIe,uY,eqe,oqe,bY,rqe,tqe,jRe,PE,DRe,LL,aqe,GRe,Xf,ORe,Wi,zf,vY,$E,nqe,FY,sqe,VRe,Qo,IE,lqe,qE,iqe,xL,dqe,cqe,fqe,NE,mqe,TY,gqe,hqe,pqe,mo,jE,_qe,MY,uqe,bqe,Hi,vqe,EY,Fqe,Tqe,CY,Mqe,Eqe,Cqe,v,Qf,wY,wqe,Aqe,kL,yqe,Lqe,xqe,Wf,AY,kqe,Sqe,SL,Rqe,Bqe,Pqe,Hf,yY,$qe,Iqe,RL,qqe,Nqe,jqe,Uf,LY,Dqe,Gqe,BL,Oqe,Vqe,Xqe,Jf,xY,zqe,Qqe,PL,Wqe,Hqe,Uqe,Yf,kY,Jqe,Yqe,$L,Kqe,Zqe,eNe,Kf,SY,oNe,rNe,IL,tNe,aNe,nNe,Zf,RY,sNe,lNe,qL,iNe,dNe,cNe,em,BY,fNe,mNe,NL,gNe,hNe,pNe,om,PY,_Ne,uNe,jL,bNe,vNe,FNe,rm,$Y,TNe,MNe,DL,ENe,CNe,wNe,tm,IY,ANe,yNe,GL,LNe,xNe,kNe,am,qY,SNe,RNe,OL,BNe,PNe,$Ne,nm,NY,INe,qNe,VL,NNe,jNe,DNe,sm,jY,GNe,ONe,XL,VNe,XNe,zNe,lm,DY,QNe,WNe,zL,HNe,UNe,JNe,im,GY,YNe,KNe,QL,ZNe,eje,oje,dm,OY,rje,tje,WL,aje,nje,sje,cm,VY,lje,ije,HL,dje,cje,fje,fm,XY,mje,gje,UL,hje,pje,_je,mm,zY,uje,bje,JL,vje,Fje,Tje,gm,QY,Mje,Eje,YL,Cje,wje,Aje,hm,WY,yje,Lje,KL,xje,kje,Sje,pm,HY,Rje,Bje,ZL,Pje,$je,Ije,_m,UY,qje,Nje,ex,jje,Dje,Gje,um,JY,Oje,Vje,ox,Xje,zje,Qje,bm,YY,Wje,Hje,rx,Uje,Jje,Yje,vm,KY,Kje,Zje,tx,eDe,oDe,rDe,Fm,ZY,tDe,aDe,ax,nDe,sDe,lDe,Tm,eK,iDe,dDe,nx,cDe,fDe,mDe,Mm,oK,gDe,hDe,sx,pDe,_De,uDe,Em,rK,bDe,vDe,lx,FDe,TDe,MDe,Cm,tK,EDe,CDe,ix,wDe,ADe,yDe,wm,aK,LDe,xDe,dx,kDe,SDe,RDe,Am,nK,BDe,PDe,cx,$De,IDe,qDe,ym,sK,NDe,jDe,fx,DDe,GDe,ODe,Lm,lK,VDe,XDe,mx,zDe,QDe,WDe,xm,iK,HDe,UDe,gx,JDe,YDe,KDe,km,dK,ZDe,eGe,hx,oGe,rGe,tGe,Sm,cK,aGe,nGe,px,sGe,lGe,iGe,Rm,fK,dGe,cGe,_x,fGe,mGe,gGe,Bm,mK,hGe,pGe,ux,_Ge,uGe,bGe,Pm,gK,vGe,FGe,bx,TGe,MGe,EGe,$m,hK,CGe,wGe,vx,AGe,yGe,LGe,Im,pK,xGe,kGe,Fx,SGe,RGe,BGe,qm,_K,PGe,$Ge,Tx,IGe,qGe,NGe,Nm,uK,jGe,DGe,Mx,GGe,OGe,VGe,jm,bK,XGe,zGe,Ex,QGe,WGe,HGe,Dm,vK,UGe,JGe,Cx,YGe,KGe,ZGe,Gm,FK,eOe,oOe,wx,rOe,tOe,aOe,Om,TK,nOe,sOe,Ax,lOe,iOe,dOe,Vm,MK,cOe,fOe,yx,mOe,gOe,hOe,Xm,EK,pOe,_Oe,Lx,uOe,bOe,vOe,zm,CK,FOe,TOe,xx,MOe,EOe,COe,Qm,wK,wOe,AOe,kx,yOe,LOe,xOe,Wm,AK,kOe,SOe,Sx,ROe,BOe,POe,Hm,yK,$Oe,IOe,Rx,qOe,NOe,jOe,Um,LK,DOe,GOe,Bx,OOe,VOe,XOe,Jm,xK,zOe,QOe,Px,WOe,HOe,UOe,Ym,kK,JOe,YOe,$x,KOe,ZOe,eVe,Km,SK,oVe,rVe,Ix,tVe,aVe,nVe,Zm,RK,sVe,lVe,qx,iVe,dVe,cVe,eg,BK,fVe,mVe,Nx,gVe,hVe,pVe,og,PK,_Ve,uVe,jx,bVe,vVe,FVe,rg,$K,TVe,MVe,Dx,EVe,CVe,wVe,tg,IK,AVe,yVe,Gx,LVe,xVe,kVe,ag,qK,SVe,RVe,Ox,BVe,PVe,$Ve,ng,NK,IVe,qVe,Vx,NVe,jVe,DVe,sg,jK,GVe,OVe,Xx,VVe,XVe,zVe,lg,DK,QVe,WVe,zx,HVe,UVe,JVe,ig,GK,YVe,KVe,Qx,ZVe,eXe,oXe,dg,OK,rXe,tXe,Wx,aXe,nXe,sXe,cg,VK,lXe,iXe,Hx,dXe,cXe,fXe,fg,XK,mXe,gXe,Ux,hXe,pXe,_Xe,mg,zK,uXe,bXe,Jx,vXe,FXe,TXe,gg,QK,MXe,EXe,Yx,CXe,wXe,AXe,hg,WK,yXe,LXe,Kx,xXe,kXe,SXe,pg,HK,RXe,BXe,Zx,PXe,$Xe,IXe,_g,UK,qXe,NXe,ek,jXe,DXe,GXe,ug,JK,OXe,VXe,ok,XXe,zXe,QXe,bg,YK,WXe,HXe,rk,UXe,JXe,YXe,vg,KK,KXe,ZXe,tk,eze,oze,rze,Fg,ZK,tze,aze,ak,nze,sze,lze,Tg,eZ,ize,dze,nk,cze,fze,mze,Mg,oZ,gze,hze,sk,pze,_ze,uze,Eg,rZ,bze,vze,lk,Fze,Tze,Mze,Cg,tZ,Eze,Cze,ik,wze,Aze,yze,wg,aZ,Lze,xze,dk,kze,Sze,Rze,Ag,nZ,Bze,Pze,ck,$ze,Ize,qze,yg,sZ,Nze,jze,fk,Dze,Gze,Oze,Lg,lZ,Vze,Xze,mk,zze,Qze,Wze,xg,iZ,Hze,Uze,gk,Jze,Yze,Kze,kg,dZ,Zze,eQe,hk,oQe,rQe,tQe,Sg,cZ,aQe,nQe,pk,sQe,lQe,iQe,Rg,fZ,dQe,cQe,_k,fQe,mQe,gQe,Bg,mZ,hQe,pQe,uk,_Qe,uQe,bQe,Pg,gZ,vQe,FQe,bk,TQe,MQe,EQe,$g,hZ,CQe,wQe,vk,AQe,yQe,LQe,Ig,pZ,xQe,kQe,Fk,SQe,RQe,BQe,qg,_Z,PQe,$Qe,Tk,IQe,qQe,NQe,Ng,uZ,jQe,DQe,Mk,GQe,OQe,VQe,jg,bZ,XQe,zQe,Ek,QQe,WQe,HQe,vZ,UQe,JQe,DE,YQe,Dg,GE,KQe,FZ,ZQe,XRe,Ui,Gg,TZ,OE,eWe,MZ,oWe,zRe,Wo,VE,rWe,XE,tWe,Ck,aWe,nWe,sWe,zE,lWe,EZ,iWe,dWe,cWe,go,QE,fWe,CZ,mWe,gWe,Oa,hWe,wZ,pWe,_We,AZ,uWe,bWe,yZ,vWe,FWe,TWe,E,Wn,LZ,MWe,EWe,wk,CWe,wWe,Ak,AWe,yWe,LWe,Hn,xZ,xWe,kWe,yk,SWe,RWe,Lk,BWe,PWe,$We,Un,kZ,IWe,qWe,xk,NWe,jWe,kk,DWe,GWe,OWe,Og,SZ,VWe,XWe,Sk,zWe,QWe,WWe,Jn,RZ,HWe,UWe,Rk,JWe,YWe,Bk,KWe,ZWe,eHe,Vg,BZ,oHe,rHe,Pk,tHe,aHe,nHe,Xg,PZ,sHe,lHe,$k,iHe,dHe,cHe,zg,$Z,fHe,mHe,Ik,gHe,hHe,pHe,Yn,IZ,_He,uHe,qk,bHe,vHe,Nk,FHe,THe,MHe,Kn,qZ,EHe,CHe,jk,wHe,AHe,Dk,yHe,LHe,xHe,Zn,NZ,kHe,SHe,Gk,RHe,BHe,Ok,PHe,$He,IHe,Qg,jZ,qHe,NHe,Vk,jHe,DHe,GHe,Wg,DZ,OHe,VHe,Xk,XHe,zHe,QHe,es,GZ,WHe,HHe,zk,UHe,JHe,Qk,YHe,KHe,ZHe,Hg,OZ,eUe,oUe,Wk,rUe,tUe,aUe,os,VZ,nUe,sUe,Hk,lUe,iUe,Uk,dUe,cUe,fUe,rs,XZ,mUe,gUe,Jk,hUe,pUe,Yk,_Ue,uUe,bUe,ts,zZ,vUe,FUe,Kk,TUe,MUe,QZ,EUe,CUe,wUe,Ug,WZ,AUe,yUe,Zk,LUe,xUe,kUe,as,HZ,SUe,RUe,eS,BUe,PUe,oS,$Ue,IUe,qUe,ns,UZ,NUe,jUe,rS,DUe,GUe,tS,OUe,VUe,XUe,ss,JZ,zUe,QUe,aS,WUe,HUe,nS,UUe,JUe,YUe,ls,YZ,KUe,ZUe,sS,eJe,oJe,lS,rJe,tJe,aJe,is,KZ,nJe,sJe,iS,lJe,iJe,dS,dJe,cJe,fJe,Jg,ZZ,mJe,gJe,cS,hJe,pJe,_Je,ds,eee,uJe,bJe,fS,vJe,FJe,mS,TJe,MJe,EJe,Yg,oee,CJe,wJe,gS,AJe,yJe,LJe,cs,ree,xJe,kJe,hS,SJe,RJe,pS,BJe,PJe,$Je,fs,tee,IJe,qJe,_S,NJe,jJe,uS,DJe,GJe,OJe,ms,aee,VJe,XJe,bS,zJe,QJe,vS,WJe,HJe,UJe,gs,nee,JJe,YJe,FS,KJe,ZJe,TS,eYe,oYe,rYe,hs,see,tYe,aYe,MS,nYe,sYe,ES,lYe,iYe,dYe,Kg,lee,cYe,fYe,CS,mYe,gYe,hYe,ps,iee,pYe,_Ye,wS,uYe,bYe,AS,vYe,FYe,TYe,_s,dee,MYe,EYe,yS,CYe,wYe,LS,AYe,yYe,LYe,us,cee,xYe,kYe,xS,SYe,RYe,kS,BYe,PYe,$Ye,bs,fee,IYe,qYe,SS,NYe,jYe,RS,DYe,GYe,OYe,vs,mee,VYe,XYe,BS,zYe,QYe,PS,WYe,HYe,UYe,Fs,gee,JYe,YYe,$S,KYe,ZYe,IS,eKe,oKe,rKe,Zg,hee,tKe,aKe,qS,nKe,sKe,lKe,Ts,pee,iKe,dKe,NS,cKe,fKe,jS,mKe,gKe,hKe,eh,_ee,pKe,_Ke,DS,uKe,bKe,vKe,oh,uee,FKe,TKe,GS,MKe,EKe,CKe,Ms,bee,wKe,AKe,OS,yKe,LKe,VS,xKe,kKe,SKe,Es,vee,RKe,BKe,XS,PKe,$Ke,zS,IKe,qKe,NKe,rh,Fee,jKe,DKe,QS,GKe,OKe,VKe,Cs,Tee,XKe,zKe,WS,QKe,WKe,HS,HKe,UKe,JKe,ws,Mee,YKe,KKe,US,ZKe,eZe,JS,oZe,rZe,tZe,As,Eee,aZe,nZe,YS,sZe,lZe,KS,iZe,dZe,cZe,ys,Cee,fZe,mZe,ZS,gZe,hZe,eR,pZe,_Ze,uZe,Ls,wee,bZe,vZe,oR,FZe,TZe,rR,MZe,EZe,CZe,th,Aee,wZe,AZe,tR,yZe,LZe,xZe,ah,yee,kZe,SZe,aR,RZe,BZe,PZe,nh,Lee,$Ze,IZe,nR,qZe,NZe,jZe,sh,xee,DZe,GZe,sR,OZe,VZe,XZe,xs,kee,zZe,QZe,lR,WZe,HZe,iR,UZe,JZe,YZe,lh,See,KZe,ZZe,dR,eeo,oeo,reo,ks,Ree,teo,aeo,cR,neo,seo,fR,leo,ieo,deo,Ss,Bee,ceo,feo,mR,meo,geo,gR,heo,peo,_eo,Rs,Pee,ueo,beo,hR,veo,Feo,pR,Teo,Meo,Eeo,Bs,$ee,Ceo,weo,_R,Aeo,yeo,uR,Leo,xeo,keo,Ps,Iee,Seo,Reo,bR,Beo,Peo,vR,$eo,Ieo,qeo,$s,qee,Neo,jeo,FR,Deo,Geo,TR,Oeo,Veo,Xeo,ih,Nee,zeo,Qeo,MR,Weo,Heo,Ueo,dh,jee,Jeo,Yeo,ER,Keo,Zeo,eoo,Is,Dee,ooo,roo,CR,too,aoo,wR,noo,soo,loo,qs,Gee,ioo,doo,AR,coo,foo,yR,moo,goo,hoo,Ns,Oee,poo,_oo,LR,uoo,boo,xR,voo,Foo,Too,ch,Vee,Moo,Eoo,kR,Coo,woo,Aoo,fh,Xee,yoo,Loo,SR,xoo,koo,Soo,mh,zee,Roo,Boo,RR,Poo,$oo,Ioo,gh,Qee,qoo,Noo,BR,joo,Doo,Goo,hh,Wee,Ooo,Voo,PR,Xoo,zoo,Qoo,js,Hee,Woo,Hoo,$R,Uoo,Joo,IR,Yoo,Koo,Zoo,ph,Uee,ero,oro,qR,rro,tro,aro,_h,Jee,nro,sro,NR,lro,iro,dro,Ds,Yee,cro,fro,jR,mro,gro,DR,hro,pro,_ro,Gs,Kee,uro,bro,GR,vro,Fro,OR,Tro,Mro,Ero,Zee,Cro,wro,WE,Aro,uh,HE,yro,eoe,Lro,QRe,Ji,bh,ooe,UE,xro,roe,kro,WRe,Ho,JE,Sro,YE,Rro,VR,Bro,Pro,$ro,KE,Iro,toe,qro,Nro,jro,$e,ZE,Dro,aoe,Gro,Oro,Va,Vro,noe,Xro,zro,soe,Qro,Wro,loe,Hro,Uro,Jro,ee,vh,ioe,Yro,Kro,XR,Zro,eto,oto,Fh,doe,rto,tto,zR,ato,nto,sto,Th,coe,lto,ito,QR,dto,cto,fto,Mh,foe,mto,gto,WR,hto,pto,_to,Eh,moe,uto,bto,HR,vto,Fto,Tto,Ch,goe,Mto,Eto,UR,Cto,wto,Ato,wh,hoe,yto,Lto,JR,xto,kto,Sto,Ah,poe,Rto,Bto,YR,Pto,$to,Ito,yh,_oe,qto,Nto,KR,jto,Dto,Gto,Lh,uoe,Oto,Vto,ZR,Xto,zto,Qto,xh,boe,Wto,Hto,eB,Uto,Jto,Yto,kh,voe,Kto,Zto,oB,eao,oao,rao,Sh,Foe,tao,aao,rB,nao,sao,lao,Rh,Toe,iao,dao,tB,cao,fao,mao,Bh,Moe,gao,hao,aB,pao,_ao,uao,Ph,Eoe,bao,vao,nB,Fao,Tao,Mao,$h,Coe,Eao,Cao,sB,wao,Aao,yao,Ih,woe,Lao,xao,lB,kao,Sao,Rao,qh,Aoe,Bao,Pao,iB,$ao,Iao,qao,Nh,Nao,yoe,jao,Dao,e5,Gao,jh,o5,Oao,Loe,Vao,HRe,Yi,Dh,xoe,r5,Xao,koe,zao,URe,Uo,t5,Qao,a5,Wao,dB,Hao,Uao,Jao,n5,Yao,Soe,Kao,Zao,eno,Ie,s5,ono,Roe,rno,tno,Ki,ano,Boe,nno,sno,Poe,lno,ino,dno,ke,Gh,$oe,cno,fno,cB,mno,gno,hno,Oh,Ioe,pno,_no,fB,uno,bno,vno,Vh,qoe,Fno,Tno,mB,Mno,Eno,Cno,Xh,Noe,wno,Ano,gB,yno,Lno,xno,zh,joe,kno,Sno,hB,Rno,Bno,Pno,Qh,Doe,$no,Ino,pB,qno,Nno,jno,Wh,Goe,Dno,Gno,_B,Ono,Vno,Xno,Hh,Ooe,zno,Qno,uB,Wno,Hno,Uno,Uh,Jno,Voe,Yno,Kno,l5,Zno,Jh,i5,eso,Xoe,oso,JRe,Zi,Yh,zoe,d5,rso,Qoe,tso,YRe,Jo,c5,aso,ed,nso,bB,sso,lso,vB,iso,dso,cso,f5,fso,Woe,mso,gso,hso,Xr,m5,pso,Hoe,_so,uso,od,bso,Uoe,vso,Fso,FB,Tso,Mso,Eso,Joe,Cso,wso,g5,Aso,qe,h5,yso,Yoe,Lso,xso,Xa,kso,Koe,Sso,Rso,Zoe,Bso,Pso,ere,$so,Iso,qso,T,Kh,ore,Nso,jso,TB,Dso,Gso,Oso,Zh,rre,Vso,Xso,MB,zso,Qso,Wso,ep,tre,Hso,Uso,EB,Jso,Yso,Kso,op,are,Zso,elo,CB,olo,rlo,tlo,rp,nre,alo,nlo,wB,slo,llo,ilo,tp,sre,dlo,clo,AB,flo,mlo,glo,ap,lre,hlo,plo,yB,_lo,ulo,blo,np,ire,vlo,Flo,LB,Tlo,Mlo,Elo,sp,dre,Clo,wlo,xB,Alo,ylo,Llo,lp,cre,xlo,klo,kB,Slo,Rlo,Blo,ip,fre,Plo,$lo,SB,Ilo,qlo,Nlo,dp,mre,jlo,Dlo,RB,Glo,Olo,Vlo,cp,gre,Xlo,zlo,BB,Qlo,Wlo,Hlo,fp,hre,Ulo,Jlo,PB,Ylo,Klo,Zlo,mp,pre,eio,oio,$B,rio,tio,aio,gp,_re,nio,sio,IB,lio,iio,dio,hp,ure,cio,fio,qB,mio,gio,hio,pp,bre,pio,_io,NB,uio,bio,vio,_p,vre,Fio,Tio,jB,Mio,Eio,Cio,up,Fre,wio,Aio,DB,yio,Lio,xio,bp,Tre,kio,Sio,GB,Rio,Bio,Pio,vp,Mre,$io,Iio,OB,qio,Nio,jio,Fp,Ere,Dio,Gio,VB,Oio,Vio,Xio,Tp,Cre,zio,Qio,XB,Wio,Hio,Uio,Mp,wre,Jio,Yio,zB,Kio,Zio,edo,Ep,Are,odo,rdo,QB,tdo,ado,ndo,Cp,yre,sdo,ldo,WB,ido,ddo,cdo,wp,Lre,fdo,mdo,HB,gdo,hdo,pdo,Ap,xre,_do,udo,UB,bdo,vdo,Fdo,yp,kre,Tdo,Mdo,JB,Edo,Cdo,wdo,Os,Sre,Ado,ydo,YB,Ldo,xdo,KB,kdo,Sdo,Rdo,Lp,Rre,Bdo,Pdo,ZB,$do,Ido,qdo,xp,Bre,Ndo,jdo,eP,Ddo,Gdo,Odo,kp,Pre,Vdo,Xdo,oP,zdo,Qdo,Wdo,Sp,$re,Hdo,Udo,rP,Jdo,Ydo,Kdo,Rp,Ire,Zdo,eco,tP,oco,rco,tco,Bp,qre,aco,nco,aP,sco,lco,ico,Pp,Nre,dco,cco,nP,fco,mco,gco,$p,jre,hco,pco,sP,_co,uco,bco,Ip,Dre,vco,Fco,lP,Tco,Mco,Eco,qp,Gre,Cco,wco,iP,Aco,yco,Lco,Np,Ore,xco,kco,dP,Sco,Rco,Bco,jp,Vre,Pco,$co,cP,Ico,qco,Nco,Dp,Xre,jco,Dco,fP,Gco,Oco,Vco,Gp,zre,Xco,zco,mP,Qco,Wco,Hco,Op,Qre,Uco,Jco,gP,Yco,Kco,Zco,Vp,Wre,efo,ofo,hP,rfo,tfo,afo,Xp,Hre,nfo,sfo,pP,lfo,ifo,dfo,zp,Ure,cfo,ffo,_P,mfo,gfo,hfo,Qp,Jre,pfo,_fo,uP,ufo,bfo,vfo,Wp,Yre,Ffo,Tfo,bP,Mfo,Efo,Cfo,Hp,Kre,wfo,Afo,vP,yfo,Lfo,xfo,Up,Zre,kfo,Sfo,FP,Rfo,Bfo,Pfo,Jp,ete,$fo,Ifo,TP,qfo,Nfo,jfo,Yp,ote,Dfo,Gfo,MP,Ofo,Vfo,Xfo,Kp,rte,zfo,Qfo,EP,Wfo,Hfo,Ufo,Zp,tte,Jfo,Yfo,CP,Kfo,Zfo,emo,e_,ate,omo,rmo,wP,tmo,amo,nmo,o_,nte,smo,lmo,AP,imo,dmo,cmo,r_,ste,fmo,mmo,yP,gmo,hmo,pmo,t_,lte,_mo,umo,LP,bmo,vmo,Fmo,a_,ite,Tmo,Mmo,xP,Emo,Cmo,wmo,n_,dte,Amo,ymo,kP,Lmo,xmo,kmo,s_,cte,Smo,Rmo,SP,Bmo,Pmo,$mo,l_,fte,Imo,qmo,RP,Nmo,jmo,Dmo,i_,mte,Gmo,Omo,BP,Vmo,Xmo,zmo,d_,gte,Qmo,Wmo,PP,Hmo,Umo,Jmo,c_,hte,Ymo,Kmo,$P,Zmo,ego,ogo,f_,pte,rgo,tgo,IP,ago,ngo,sgo,m_,_te,lgo,igo,qP,dgo,cgo,fgo,g_,ute,mgo,ggo,NP,hgo,pgo,_go,h_,bte,ugo,bgo,jP,vgo,Fgo,Tgo,p_,vte,Mgo,Ego,DP,Cgo,wgo,Ago,__,Fte,ygo,Lgo,GP,xgo,kgo,Sgo,u_,Tte,Rgo,Bgo,OP,Pgo,$go,Igo,b_,Mte,qgo,Ngo,VP,jgo,Dgo,Ggo,v_,Ete,Ogo,Vgo,XP,Xgo,zgo,Qgo,F_,Cte,Wgo,Hgo,zP,Ugo,Jgo,Ygo,T_,wte,Kgo,Zgo,QP,eho,oho,rho,M_,Ate,tho,aho,WP,nho,sho,lho,E_,yte,iho,dho,HP,cho,fho,mho,C_,Lte,gho,hho,UP,pho,_ho,uho,w_,xte,bho,vho,JP,Fho,Tho,Mho,A_,kte,Eho,Cho,YP,who,Aho,yho,y_,Ste,Lho,xho,KP,kho,Sho,Rho,L_,Rte,Bho,Pho,ZP,$ho,Iho,qho,x_,Bte,Nho,jho,e$,Dho,Gho,Oho,k_,Pte,Vho,Xho,o$,zho,Qho,Who,S_,$te,Hho,Uho,r$,Jho,Yho,Kho,R_,Ite,Zho,epo,t$,opo,rpo,tpo,B_,qte,apo,npo,a$,spo,lpo,ipo,P_,Nte,dpo,cpo,n$,fpo,mpo,gpo,$_,jte,hpo,ppo,s$,_po,upo,bpo,I_,Dte,vpo,Fpo,l$,Tpo,Mpo,Epo,q_,Cpo,Gte,wpo,Apo,Ote,ypo,Lpo,Vte,xpo,kpo,p5,KRe,rd,N_,Xte,_5,Spo,zte,Rpo,ZRe,Yo,u5,Bpo,td,Ppo,i$,$po,Ipo,d$,qpo,Npo,jpo,b5,Dpo,Qte,Gpo,Opo,Vpo,zr,v5,Xpo,Wte,zpo,Qpo,ad,Wpo,Hte,Hpo,Upo,c$,Jpo,Ypo,Kpo,Ute,Zpo,e_o,F5,o_o,Ne,T5,r_o,Jte,t_o,a_o,za,n_o,Yte,s_o,l_o,Kte,i_o,d_o,Zte,c_o,f_o,m_o,S,j_,eae,g_o,h_o,f$,p_o,__o,u_o,D_,oae,b_o,v_o,m$,F_o,T_o,M_o,G_,rae,E_o,C_o,g$,w_o,A_o,y_o,O_,tae,L_o,x_o,h$,k_o,S_o,R_o,V_,aae,B_o,P_o,p$,$_o,I_o,q_o,X_,nae,N_o,j_o,_$,D_o,G_o,O_o,z_,sae,V_o,X_o,u$,z_o,Q_o,W_o,Q_,lae,H_o,U_o,b$,J_o,Y_o,K_o,W_,iae,Z_o,euo,v$,ouo,ruo,tuo,H_,dae,auo,nuo,F$,suo,luo,iuo,U_,cae,duo,cuo,T$,fuo,muo,guo,J_,fae,huo,puo,M$,_uo,uuo,buo,Y_,mae,vuo,Fuo,E$,Tuo,Muo,Euo,K_,gae,Cuo,wuo,C$,Auo,yuo,Luo,Z_,hae,xuo,kuo,w$,Suo,Ruo,Buo,eu,pae,Puo,$uo,A$,Iuo,quo,Nuo,ou,_ae,juo,Duo,y$,Guo,Ouo,Vuo,ru,uae,Xuo,zuo,L$,Quo,Wuo,Huo,tu,bae,Uuo,Juo,x$,Yuo,Kuo,Zuo,au,vae,e1o,o1o,k$,r1o,t1o,a1o,nu,Fae,n1o,s1o,S$,l1o,i1o,d1o,su,Tae,c1o,f1o,R$,m1o,g1o,h1o,lu,Mae,p1o,_1o,B$,u1o,b1o,v1o,iu,Eae,F1o,T1o,P$,M1o,E1o,C1o,du,Cae,w1o,A1o,$$,y1o,L1o,x1o,cu,wae,k1o,S1o,I$,R1o,B1o,P1o,fu,Aae,$1o,I1o,q$,q1o,N1o,j1o,mu,yae,D1o,G1o,N$,O1o,V1o,X1o,gu,Lae,z1o,Q1o,j$,W1o,H1o,U1o,hu,xae,J1o,Y1o,D$,K1o,Z1o,ebo,pu,kae,obo,rbo,G$,tbo,abo,nbo,_u,Sae,sbo,lbo,O$,ibo,dbo,cbo,uu,Rae,fbo,mbo,V$,gbo,hbo,pbo,bu,Bae,_bo,ubo,X$,bbo,vbo,Fbo,vu,Pae,Tbo,Mbo,z$,Ebo,Cbo,wbo,Fu,$ae,Abo,ybo,Q$,Lbo,xbo,kbo,Tu,Iae,Sbo,Rbo,W$,Bbo,Pbo,$bo,Mu,qae,Ibo,qbo,H$,Nbo,jbo,Dbo,Eu,Nae,Gbo,Obo,U$,Vbo,Xbo,zbo,Cu,Qbo,jae,Wbo,Hbo,Dae,Ubo,Jbo,Gae,Ybo,Kbo,M5,eBe,nd,wu,Oae,E5,Zbo,Vae,e2o,oBe,Ko,C5,o2o,sd,r2o,J$,t2o,a2o,Y$,n2o,s2o,l2o,w5,i2o,Xae,d2o,c2o,f2o,Qr,A5,m2o,zae,g2o,h2o,ld,p2o,Qae,_2o,u2o,K$,b2o,v2o,F2o,Wae,T2o,M2o,y5,E2o,je,L5,C2o,Hae,w2o,A2o,Qa,y2o,Uae,L2o,x2o,Jae,k2o,S2o,Yae,R2o,B2o,P2o,$,Au,Kae,$2o,I2o,Z$,q2o,N2o,j2o,yu,Zae,D2o,G2o,eI,O2o,V2o,X2o,Lu,ene,z2o,Q2o,oI,W2o,H2o,U2o,xu,one,J2o,Y2o,rI,K2o,Z2o,e6o,ku,rne,o6o,r6o,tI,t6o,a6o,n6o,Su,tne,s6o,l6o,aI,i6o,d6o,c6o,Ru,ane,f6o,m6o,nI,g6o,h6o,p6o,Bu,nne,_6o,u6o,sI,b6o,v6o,F6o,Pu,sne,T6o,M6o,lI,E6o,C6o,w6o,$u,lne,A6o,y6o,iI,L6o,x6o,k6o,Iu,ine,S6o,R6o,dI,B6o,P6o,$6o,qu,dne,I6o,q6o,cI,N6o,j6o,D6o,Nu,cne,G6o,O6o,fI,V6o,X6o,z6o,ju,fne,Q6o,W6o,mI,H6o,U6o,J6o,Du,mne,Y6o,K6o,gI,Z6o,evo,ovo,Gu,gne,rvo,tvo,hI,avo,nvo,svo,Ou,hne,lvo,ivo,pI,dvo,cvo,fvo,Vu,pne,mvo,gvo,_I,hvo,pvo,_vo,Xu,_ne,uvo,bvo,uI,vvo,Fvo,Tvo,zu,une,Mvo,Evo,bI,Cvo,wvo,Avo,Qu,bne,yvo,Lvo,vI,xvo,kvo,Svo,Wu,vne,Rvo,Bvo,FI,Pvo,$vo,Ivo,Hu,Fne,qvo,Nvo,TI,jvo,Dvo,Gvo,Uu,Tne,Ovo,Vvo,MI,Xvo,zvo,Qvo,Ju,Mne,Wvo,Hvo,EI,Uvo,Jvo,Yvo,Yu,Ene,Kvo,Zvo,CI,eFo,oFo,rFo,Ku,Cne,tFo,aFo,wI,nFo,sFo,lFo,Zu,wne,iFo,dFo,AI,cFo,fFo,mFo,e1,Ane,gFo,hFo,yI,pFo,_Fo,uFo,o1,yne,bFo,vFo,LI,FFo,TFo,MFo,r1,Lne,EFo,CFo,xI,wFo,AFo,yFo,t1,xne,LFo,xFo,kI,kFo,SFo,RFo,a1,kne,BFo,PFo,SI,$Fo,IFo,qFo,n1,Sne,NFo,jFo,RI,DFo,GFo,OFo,s1,Rne,VFo,XFo,BI,zFo,QFo,WFo,l1,HFo,Bne,UFo,JFo,Pne,YFo,KFo,$ne,ZFo,eTo,x5,rBe,id,i1,Ine,k5,oTo,qne,rTo,tBe,Zo,S5,tTo,dd,aTo,PI,nTo,sTo,$I,lTo,iTo,dTo,R5,cTo,Nne,fTo,mTo,gTo,Wr,B5,hTo,jne,pTo,_To,cd,uTo,Dne,bTo,vTo,II,FTo,TTo,MTo,Gne,ETo,CTo,P5,wTo,De,$5,ATo,One,yTo,LTo,Wa,xTo,Vne,kTo,STo,Xne,RTo,BTo,zne,PTo,$To,ITo,I,d1,Qne,qTo,NTo,qI,jTo,DTo,GTo,c1,Wne,OTo,VTo,NI,XTo,zTo,QTo,f1,Hne,WTo,HTo,jI,UTo,JTo,YTo,m1,Une,KTo,ZTo,DI,e8o,o8o,r8o,g1,Jne,t8o,a8o,GI,n8o,s8o,l8o,h1,Yne,i8o,d8o,OI,c8o,f8o,m8o,p1,Kne,g8o,h8o,VI,p8o,_8o,u8o,_1,Zne,b8o,v8o,XI,F8o,T8o,M8o,u1,ese,E8o,C8o,zI,w8o,A8o,y8o,b1,ose,L8o,x8o,QI,k8o,S8o,R8o,v1,rse,B8o,P8o,WI,$8o,I8o,q8o,F1,tse,N8o,j8o,HI,D8o,G8o,O8o,T1,ase,V8o,X8o,UI,z8o,Q8o,W8o,M1,nse,H8o,U8o,JI,J8o,Y8o,K8o,E1,sse,Z8o,e7o,YI,o7o,r7o,t7o,C1,lse,a7o,n7o,KI,s7o,l7o,i7o,w1,ise,d7o,c7o,ZI,f7o,m7o,g7o,A1,dse,h7o,p7o,eq,_7o,u7o,b7o,y1,cse,v7o,F7o,oq,T7o,M7o,E7o,L1,fse,C7o,w7o,rq,A7o,y7o,L7o,x1,mse,x7o,k7o,tq,S7o,R7o,B7o,k1,gse,P7o,$7o,aq,I7o,q7o,N7o,S1,hse,j7o,D7o,nq,G7o,O7o,V7o,R1,pse,X7o,z7o,sq,Q7o,W7o,H7o,B1,_se,U7o,J7o,lq,Y7o,K7o,Z7o,P1,use,e9o,o9o,iq,r9o,t9o,a9o,$1,bse,n9o,s9o,dq,l9o,i9o,d9o,I1,vse,c9o,f9o,cq,m9o,g9o,h9o,q1,Fse,p9o,_9o,fq,u9o,b9o,v9o,N1,Tse,F9o,T9o,mq,M9o,E9o,C9o,j1,Mse,w9o,A9o,Ese,y9o,L9o,x9o,D1,Cse,k9o,S9o,gq,R9o,B9o,P9o,G1,wse,$9o,I9o,hq,q9o,N9o,j9o,O1,Ase,D9o,G9o,pq,O9o,V9o,X9o,V1,yse,z9o,Q9o,_q,W9o,H9o,U9o,X1,J9o,Lse,Y9o,K9o,xse,Z9o,eMo,kse,oMo,rMo,I5,aBe,fd,z1,Sse,q5,tMo,Rse,aMo,nBe,er,N5,nMo,md,sMo,uq,lMo,iMo,bq,dMo,cMo,fMo,j5,mMo,Bse,gMo,hMo,pMo,Hr,D5,_Mo,Pse,uMo,bMo,gd,vMo,$se,FMo,TMo,vq,MMo,EMo,CMo,Ise,wMo,AMo,G5,yMo,Ge,O5,LMo,qse,xMo,kMo,Ha,SMo,Nse,RMo,BMo,jse,PMo,$Mo,Dse,IMo,qMo,NMo,ne,Q1,Gse,jMo,DMo,Fq,GMo,OMo,VMo,W1,Ose,XMo,zMo,Tq,QMo,WMo,HMo,H1,Vse,UMo,JMo,Mq,YMo,KMo,ZMo,U1,Xse,e4o,o4o,Eq,r4o,t4o,a4o,J1,zse,n4o,s4o,Cq,l4o,i4o,d4o,Y1,Qse,c4o,f4o,wq,m4o,g4o,h4o,K1,Wse,p4o,_4o,Aq,u4o,b4o,v4o,Z1,Hse,F4o,T4o,yq,M4o,E4o,C4o,eb,Use,w4o,A4o,Lq,y4o,L4o,x4o,ob,Jse,k4o,S4o,xq,R4o,B4o,P4o,rb,Yse,$4o,I4o,kq,q4o,N4o,j4o,tb,Kse,D4o,G4o,Sq,O4o,V4o,X4o,ab,Zse,z4o,Q4o,Rq,W4o,H4o,U4o,nb,ele,J4o,Y4o,Bq,K4o,Z4o,eEo,sb,ole,oEo,rEo,Pq,tEo,aEo,nEo,lb,rle,sEo,lEo,$q,iEo,dEo,cEo,ib,tle,fEo,mEo,Iq,gEo,hEo,pEo,db,_Eo,ale,uEo,bEo,nle,vEo,FEo,sle,TEo,MEo,V5,sBe,hd,cb,lle,X5,EEo,ile,CEo,lBe,or,z5,wEo,pd,AEo,qq,yEo,LEo,Nq,xEo,kEo,SEo,Q5,REo,dle,BEo,PEo,$Eo,Ur,W5,IEo,cle,qEo,NEo,_d,jEo,fle,DEo,GEo,jq,OEo,VEo,XEo,mle,zEo,QEo,H5,WEo,Oe,U5,HEo,gle,UEo,JEo,Ua,YEo,hle,KEo,ZEo,ple,e5o,o5o,_le,r5o,t5o,a5o,y,fb,ule,n5o,s5o,Dq,l5o,i5o,d5o,mb,ble,c5o,f5o,Gq,m5o,g5o,h5o,gb,vle,p5o,_5o,Oq,u5o,b5o,v5o,hb,Fle,F5o,T5o,Vq,M5o,E5o,C5o,pb,Tle,w5o,A5o,Xq,y5o,L5o,x5o,_b,Mle,k5o,S5o,zq,R5o,B5o,P5o,ub,Ele,$5o,I5o,Qq,q5o,N5o,j5o,bb,Cle,D5o,G5o,Wq,O5o,V5o,X5o,vb,wle,z5o,Q5o,Hq,W5o,H5o,U5o,Fb,Ale,J5o,Y5o,Uq,K5o,Z5o,e3o,Tb,yle,o3o,r3o,Jq,t3o,a3o,n3o,Mb,Lle,s3o,l3o,Yq,i3o,d3o,c3o,Eb,xle,f3o,m3o,Kq,g3o,h3o,p3o,Cb,kle,_3o,u3o,Zq,b3o,v3o,F3o,wb,Sle,T3o,M3o,eN,E3o,C3o,w3o,Ab,Rle,A3o,y3o,oN,L3o,x3o,k3o,yb,Ble,S3o,R3o,rN,B3o,P3o,$3o,Lb,Ple,I3o,q3o,tN,N3o,j3o,D3o,xb,$le,G3o,O3o,aN,V3o,X3o,z3o,kb,Ile,Q3o,W3o,nN,H3o,U3o,J3o,Sb,qle,Y3o,K3o,sN,Z3o,eCo,oCo,Rb,Nle,rCo,tCo,lN,aCo,nCo,sCo,Bb,jle,lCo,iCo,iN,dCo,cCo,fCo,Pb,Dle,mCo,gCo,dN,hCo,pCo,_Co,$b,Gle,uCo,bCo,cN,vCo,FCo,TCo,Ib,Ole,MCo,ECo,fN,CCo,wCo,ACo,qb,Vle,yCo,LCo,mN,xCo,kCo,SCo,Nb,Xle,RCo,BCo,gN,PCo,$Co,ICo,jb,zle,qCo,NCo,hN,jCo,DCo,GCo,Db,Qle,OCo,VCo,pN,XCo,zCo,QCo,Gb,Wle,WCo,HCo,_N,UCo,JCo,YCo,Ob,Hle,KCo,ZCo,uN,ewo,owo,rwo,Vb,Ule,two,awo,bN,nwo,swo,lwo,Xb,Jle,iwo,dwo,vN,cwo,fwo,mwo,zb,Yle,gwo,hwo,FN,pwo,_wo,uwo,Qb,Kle,bwo,vwo,TN,Fwo,Two,Mwo,Wb,Zle,Ewo,Cwo,MN,wwo,Awo,ywo,Hb,eie,Lwo,xwo,EN,kwo,Swo,Rwo,Ub,oie,Bwo,Pwo,CN,$wo,Iwo,qwo,Jb,rie,Nwo,jwo,wN,Dwo,Gwo,Owo,Yb,tie,Vwo,Xwo,AN,zwo,Qwo,Wwo,Kb,aie,Hwo,Uwo,yN,Jwo,Ywo,Kwo,Zb,nie,Zwo,eAo,LN,oAo,rAo,tAo,e2,sie,aAo,nAo,xN,sAo,lAo,iAo,o2,lie,dAo,cAo,kN,fAo,mAo,gAo,r2,iie,hAo,pAo,SN,_Ao,uAo,bAo,t2,die,vAo,FAo,RN,TAo,MAo,EAo,a2,CAo,cie,wAo,AAo,fie,yAo,LAo,mie,xAo,kAo,J5,iBe,ud,n2,gie,Y5,SAo,hie,RAo,dBe,rr,K5,BAo,bd,PAo,BN,$Ao,IAo,PN,qAo,NAo,jAo,Z5,DAo,pie,GAo,OAo,VAo,Jr,e3,XAo,_ie,zAo,QAo,vd,WAo,uie,HAo,UAo,$N,JAo,YAo,KAo,bie,ZAo,e0o,o3,o0o,Ve,r3,r0o,vie,t0o,a0o,Ja,n0o,Fie,s0o,l0o,Tie,i0o,d0o,Mie,c0o,f0o,m0o,G,s2,Eie,g0o,h0o,IN,p0o,_0o,u0o,l2,Cie,b0o,v0o,qN,F0o,T0o,M0o,i2,wie,E0o,C0o,NN,w0o,A0o,y0o,d2,Aie,L0o,x0o,jN,k0o,S0o,R0o,c2,yie,B0o,P0o,DN,$0o,I0o,q0o,f2,Lie,N0o,j0o,GN,D0o,G0o,O0o,m2,xie,V0o,X0o,ON,z0o,Q0o,W0o,g2,kie,H0o,U0o,VN,J0o,Y0o,K0o,h2,Sie,Z0o,eyo,XN,oyo,ryo,tyo,p2,Rie,ayo,nyo,zN,syo,lyo,iyo,_2,Bie,dyo,cyo,QN,fyo,myo,gyo,u2,Pie,hyo,pyo,WN,_yo,uyo,byo,b2,$ie,vyo,Fyo,HN,Tyo,Myo,Eyo,v2,Iie,Cyo,wyo,UN,Ayo,yyo,Lyo,F2,qie,xyo,kyo,JN,Syo,Ryo,Byo,T2,Nie,Pyo,$yo,YN,Iyo,qyo,Nyo,M2,jie,jyo,Dyo,KN,Gyo,Oyo,Vyo,E2,Die,Xyo,zyo,ZN,Qyo,Wyo,Hyo,C2,Gie,Uyo,Jyo,ej,Yyo,Kyo,Zyo,w2,Oie,eLo,oLo,oj,rLo,tLo,aLo,A2,Vie,nLo,sLo,rj,lLo,iLo,dLo,y2,Xie,cLo,fLo,tj,mLo,gLo,hLo,L2,zie,pLo,_Lo,aj,uLo,bLo,vLo,x2,Qie,FLo,TLo,nj,MLo,ELo,CLo,k2,Wie,wLo,ALo,sj,yLo,LLo,xLo,S2,Hie,kLo,SLo,lj,RLo,BLo,PLo,R2,Uie,$Lo,ILo,ij,qLo,NLo,jLo,B2,Jie,DLo,GLo,dj,OLo,VLo,XLo,P2,zLo,Yie,QLo,WLo,Kie,HLo,ULo,Zie,JLo,YLo,t3,cBe,Fd,$2,ede,a3,KLo,ode,ZLo,fBe,tr,n3,exo,Td,oxo,cj,rxo,txo,fj,axo,nxo,sxo,s3,lxo,rde,ixo,dxo,cxo,Yr,l3,fxo,tde,mxo,gxo,Md,hxo,ade,pxo,_xo,mj,uxo,bxo,vxo,nde,Fxo,Txo,i3,Mxo,Xe,d3,Exo,sde,Cxo,wxo,Ya,Axo,lde,yxo,Lxo,ide,xxo,kxo,dde,Sxo,Rxo,Bxo,da,I2,cde,Pxo,$xo,gj,Ixo,qxo,Nxo,q2,fde,jxo,Dxo,hj,Gxo,Oxo,Vxo,N2,mde,Xxo,zxo,pj,Qxo,Wxo,Hxo,j2,gde,Uxo,Jxo,_j,Yxo,Kxo,Zxo,D2,hde,eko,oko,uj,rko,tko,ako,G2,nko,pde,sko,lko,_de,iko,dko,ude,cko,fko,c3,mBe,Ed,O2,bde,f3,mko,vde,gko,gBe,ar,m3,hko,Cd,pko,bj,_ko,uko,vj,bko,vko,Fko,g3,Tko,Fde,Mko,Eko,Cko,Kr,h3,wko,Tde,Ako,yko,wd,Lko,Mde,xko,kko,Fj,Sko,Rko,Bko,Ede,Pko,$ko,p3,Iko,ze,_3,qko,Cde,Nko,jko,Ka,Dko,wde,Gko,Oko,Ade,Vko,Xko,yde,zko,Qko,Wko,j,V2,Lde,Hko,Uko,Tj,Jko,Yko,Kko,X2,xde,Zko,eSo,Mj,oSo,rSo,tSo,z2,kde,aSo,nSo,Ej,sSo,lSo,iSo,Q2,Sde,dSo,cSo,Cj,fSo,mSo,gSo,W2,Rde,hSo,pSo,wj,_So,uSo,bSo,H2,Bde,vSo,FSo,Aj,TSo,MSo,ESo,U2,Pde,CSo,wSo,yj,ASo,ySo,LSo,J2,$de,xSo,kSo,Lj,SSo,RSo,BSo,Y2,Ide,PSo,$So,xj,ISo,qSo,NSo,K2,qde,jSo,DSo,kj,GSo,OSo,VSo,Z2,Nde,XSo,zSo,Sj,QSo,WSo,HSo,e6,jde,USo,JSo,Rj,YSo,KSo,ZSo,o6,Dde,eRo,oRo,Bj,rRo,tRo,aRo,r6,Gde,nRo,sRo,Pj,lRo,iRo,dRo,t6,Ode,cRo,fRo,$j,mRo,gRo,hRo,a6,Vde,pRo,_Ro,Ij,uRo,bRo,vRo,n6,Xde,FRo,TRo,qj,MRo,ERo,CRo,s6,zde,wRo,ARo,Nj,yRo,LRo,xRo,l6,Qde,kRo,SRo,jj,RRo,BRo,PRo,i6,Wde,$Ro,IRo,Dj,qRo,NRo,jRo,d6,Hde,DRo,GRo,Gj,ORo,VRo,XRo,c6,Ude,zRo,QRo,Oj,WRo,HRo,URo,f6,Jde,JRo,YRo,Vj,KRo,ZRo,eBo,m6,Yde,oBo,rBo,Xj,tBo,aBo,nBo,g6,Kde,sBo,lBo,zj,iBo,dBo,cBo,h6,Zde,fBo,mBo,Qj,gBo,hBo,pBo,p6,ece,_Bo,uBo,Wj,bBo,vBo,FBo,_6,oce,TBo,MBo,Hj,EBo,CBo,wBo,u6,rce,ABo,yBo,Uj,LBo,xBo,kBo,b6,tce,SBo,RBo,Jj,BBo,PBo,$Bo,v6,ace,IBo,qBo,Yj,NBo,jBo,DBo,F6,nce,GBo,OBo,Kj,VBo,XBo,zBo,T6,sce,QBo,WBo,Zj,HBo,UBo,JBo,M6,YBo,lce,KBo,ZBo,ice,ePo,oPo,dce,rPo,tPo,u3,hBe,Ad,E6,cce,b3,aPo,fce,nPo,pBe,nr,v3,sPo,yd,lPo,eD,iPo,dPo,oD,cPo,fPo,mPo,F3,gPo,mce,hPo,pPo,_Po,Zr,T3,uPo,gce,bPo,vPo,Ld,FPo,hce,TPo,MPo,rD,EPo,CPo,wPo,pce,APo,yPo,M3,LPo,Qe,E3,xPo,_ce,kPo,SPo,Za,RPo,uce,BPo,PPo,bce,$Po,IPo,vce,qPo,NPo,jPo,R,C6,Fce,DPo,GPo,tD,OPo,VPo,XPo,w6,Tce,zPo,QPo,aD,WPo,HPo,UPo,A6,Mce,JPo,YPo,nD,KPo,ZPo,e$o,y6,Ece,o$o,r$o,sD,t$o,a$o,n$o,L6,Cce,s$o,l$o,lD,i$o,d$o,c$o,x6,wce,f$o,m$o,iD,g$o,h$o,p$o,k6,Ace,_$o,u$o,dD,b$o,v$o,F$o,S6,yce,T$o,M$o,cD,E$o,C$o,w$o,R6,Lce,A$o,y$o,fD,L$o,x$o,k$o,B6,xce,S$o,R$o,mD,B$o,P$o,$$o,P6,kce,I$o,q$o,gD,N$o,j$o,D$o,$6,Sce,G$o,O$o,hD,V$o,X$o,z$o,I6,Rce,Q$o,W$o,pD,H$o,U$o,J$o,q6,Bce,Y$o,K$o,_D,Z$o,eIo,oIo,N6,Pce,rIo,tIo,uD,aIo,nIo,sIo,j6,$ce,lIo,iIo,bD,dIo,cIo,fIo,D6,Ice,mIo,gIo,vD,hIo,pIo,_Io,G6,qce,uIo,bIo,FD,vIo,FIo,TIo,O6,Nce,MIo,EIo,TD,CIo,wIo,AIo,V6,jce,yIo,LIo,MD,xIo,kIo,SIo,X6,Dce,RIo,BIo,ED,PIo,$Io,IIo,z6,Gce,qIo,NIo,CD,jIo,DIo,GIo,Q6,Oce,OIo,VIo,wD,XIo,zIo,QIo,W6,Vce,WIo,HIo,AD,UIo,JIo,YIo,H6,Xce,KIo,ZIo,yD,eqo,oqo,rqo,U6,zce,tqo,aqo,LD,nqo,sqo,lqo,J6,Qce,iqo,dqo,xD,cqo,fqo,mqo,Y6,Wce,gqo,hqo,kD,pqo,_qo,uqo,K6,Hce,bqo,vqo,SD,Fqo,Tqo,Mqo,Z6,Uce,Eqo,Cqo,RD,wqo,Aqo,yqo,ev,Jce,Lqo,xqo,BD,kqo,Sqo,Rqo,ov,Yce,Bqo,Pqo,PD,$qo,Iqo,qqo,rv,Kce,Nqo,jqo,$D,Dqo,Gqo,Oqo,tv,Zce,Vqo,Xqo,ID,zqo,Qqo,Wqo,av,efe,Hqo,Uqo,qD,Jqo,Yqo,Kqo,nv,ofe,Zqo,eNo,ND,oNo,rNo,tNo,sv,rfe,aNo,nNo,jD,sNo,lNo,iNo,lv,tfe,dNo,cNo,DD,fNo,mNo,gNo,iv,afe,hNo,pNo,GD,_No,uNo,bNo,dv,vNo,nfe,FNo,TNo,sfe,MNo,ENo,lfe,CNo,wNo,C3,_Be,xd,cv,ife,w3,ANo,dfe,yNo,uBe,sr,A3,LNo,kd,xNo,OD,kNo,SNo,VD,RNo,BNo,PNo,y3,$No,cfe,INo,qNo,NNo,et,L3,jNo,ffe,DNo,GNo,Sd,ONo,mfe,VNo,XNo,XD,zNo,QNo,WNo,gfe,HNo,UNo,x3,JNo,We,k3,YNo,hfe,KNo,ZNo,en,ejo,pfe,ojo,rjo,_fe,tjo,ajo,ufe,njo,sjo,ljo,bfe,fv,vfe,ijo,djo,zD,cjo,fjo,mjo,mv,gjo,Ffe,hjo,pjo,Tfe,_jo,ujo,Mfe,bjo,vjo,S3,bBe,Rd,gv,Efe,R3,Fjo,Cfe,Tjo,vBe,lr,B3,Mjo,Bd,Ejo,QD,Cjo,wjo,WD,Ajo,yjo,Ljo,P3,xjo,wfe,kjo,Sjo,Rjo,ot,$3,Bjo,Afe,Pjo,$jo,Pd,Ijo,yfe,qjo,Njo,HD,jjo,Djo,Gjo,Lfe,Ojo,Vjo,I3,Xjo,He,q3,zjo,xfe,Qjo,Wjo,on,Hjo,kfe,Ujo,Jjo,Sfe,Yjo,Kjo,Rfe,Zjo,eDo,oDo,de,hv,Bfe,rDo,tDo,UD,aDo,nDo,sDo,pv,Pfe,lDo,iDo,JD,dDo,cDo,fDo,_v,$fe,mDo,gDo,YD,hDo,pDo,_Do,Vs,Ife,uDo,bDo,KD,vDo,FDo,ZD,TDo,MDo,EDo,uv,qfe,CDo,wDo,eG,ADo,yDo,LDo,ma,Nfe,xDo,kDo,oG,SDo,RDo,rG,BDo,PDo,tG,$Do,IDo,qDo,bv,jfe,NDo,jDo,aG,DDo,GDo,ODo,vv,Dfe,VDo,XDo,nG,zDo,QDo,WDo,Fv,Gfe,HDo,UDo,sG,JDo,YDo,KDo,Tv,Ofe,ZDo,eGo,lG,oGo,rGo,tGo,Mv,Vfe,aGo,nGo,iG,sGo,lGo,iGo,Ev,Xfe,dGo,cGo,dG,fGo,mGo,gGo,Cv,zfe,hGo,pGo,cG,_Go,uGo,bGo,wv,vGo,Qfe,FGo,TGo,Wfe,MGo,EGo,Hfe,CGo,wGo,N3,FBe,$d,Av,Ufe,j3,AGo,Jfe,yGo,TBe,ir,D3,LGo,Id,xGo,fG,kGo,SGo,mG,RGo,BGo,PGo,G3,$Go,Yfe,IGo,qGo,NGo,rt,O3,jGo,Kfe,DGo,GGo,qd,OGo,Zfe,VGo,XGo,gG,zGo,QGo,WGo,eme,HGo,UGo,V3,JGo,Ue,X3,YGo,ome,KGo,ZGo,rn,eOo,rme,oOo,rOo,tme,tOo,aOo,ame,nOo,sOo,lOo,nme,yv,sme,iOo,dOo,hG,cOo,fOo,mOo,Lv,gOo,lme,hOo,pOo,ime,_Oo,uOo,dme,bOo,vOo,z3,MBe,Nd,xv,cme,Q3,FOo,fme,TOo,EBe,dr,W3,MOo,jd,EOo,pG,COo,wOo,_G,AOo,yOo,LOo,H3,xOo,mme,kOo,SOo,ROo,tt,U3,BOo,gme,POo,$Oo,Dd,IOo,hme,qOo,NOo,uG,jOo,DOo,GOo,pme,OOo,VOo,J3,XOo,Je,Y3,zOo,_me,QOo,WOo,tn,HOo,ume,UOo,JOo,bme,YOo,KOo,vme,ZOo,eVo,oVo,Se,kv,Fme,rVo,tVo,bG,aVo,nVo,sVo,Sv,Tme,lVo,iVo,vG,dVo,cVo,fVo,Rv,Mme,mVo,gVo,FG,hVo,pVo,_Vo,Bv,Eme,uVo,bVo,TG,vVo,FVo,TVo,Pv,Cme,MVo,EVo,MG,CVo,wVo,AVo,$v,wme,yVo,LVo,EG,xVo,kVo,SVo,Iv,Ame,RVo,BVo,CG,PVo,$Vo,IVo,qv,yme,qVo,NVo,wG,jVo,DVo,GVo,Nv,OVo,Lme,VVo,XVo,xme,zVo,QVo,kme,WVo,HVo,K3,CBe,Gd,jv,Sme,Z3,UVo,Rme,JVo,wBe,cr,eC,YVo,Od,KVo,AG,ZVo,eXo,yG,oXo,rXo,tXo,oC,aXo,Bme,nXo,sXo,lXo,at,rC,iXo,Pme,dXo,cXo,Vd,fXo,$me,mXo,gXo,LG,hXo,pXo,_Xo,Ime,uXo,bXo,tC,vXo,Ye,aC,FXo,qme,TXo,MXo,an,EXo,Nme,CXo,wXo,jme,AXo,yXo,Dme,LXo,xXo,kXo,nn,Dv,Gme,SXo,RXo,xG,BXo,PXo,$Xo,Gv,Ome,IXo,qXo,kG,NXo,jXo,DXo,Ov,Vme,GXo,OXo,SG,VXo,XXo,zXo,Vv,Xme,QXo,WXo,RG,HXo,UXo,JXo,Xv,YXo,zme,KXo,ZXo,Qme,ezo,ozo,Wme,rzo,tzo,nC,ABe,Xd,zv,Hme,sC,azo,Ume,nzo,yBe,fr,lC,szo,zd,lzo,BG,izo,dzo,PG,czo,fzo,mzo,iC,gzo,Jme,hzo,pzo,_zo,nt,dC,uzo,Yme,bzo,vzo,Qd,Fzo,Kme,Tzo,Mzo,$G,Ezo,Czo,wzo,Zme,Azo,yzo,cC,Lzo,Ke,fC,xzo,ege,kzo,Szo,sn,Rzo,oge,Bzo,Pzo,rge,$zo,Izo,tge,qzo,Nzo,jzo,Re,Qv,age,Dzo,Gzo,IG,Ozo,Vzo,Xzo,Wv,nge,zzo,Qzo,qG,Wzo,Hzo,Uzo,Hv,sge,Jzo,Yzo,NG,Kzo,Zzo,eQo,Uv,lge,oQo,rQo,jG,tQo,aQo,nQo,Jv,ige,sQo,lQo,DG,iQo,dQo,cQo,Yv,dge,fQo,mQo,GG,gQo,hQo,pQo,Kv,cge,_Qo,uQo,OG,bQo,vQo,FQo,Zv,fge,TQo,MQo,VG,EQo,CQo,wQo,eF,AQo,mge,yQo,LQo,gge,xQo,kQo,hge,SQo,RQo,mC,LBe,Wd,oF,pge,gC,BQo,_ge,PQo,xBe,mr,hC,$Qo,Hd,IQo,XG,qQo,NQo,zG,jQo,DQo,GQo,pC,OQo,uge,VQo,XQo,zQo,st,_C,QQo,bge,WQo,HQo,Ud,UQo,vge,JQo,YQo,QG,KQo,ZQo,eWo,Fge,oWo,rWo,uC,tWo,Ze,bC,aWo,Tge,nWo,sWo,ln,lWo,Mge,iWo,dWo,Ege,cWo,fWo,Cge,mWo,gWo,hWo,vC,rF,wge,pWo,_Wo,WG,uWo,bWo,vWo,tF,Age,FWo,TWo,HG,MWo,EWo,CWo,aF,wWo,yge,AWo,yWo,Lge,LWo,xWo,xge,kWo,SWo,FC,kBe,Jd,nF,kge,TC,RWo,Sge,BWo,SBe,gr,MC,PWo,Yd,$Wo,UG,IWo,qWo,JG,NWo,jWo,DWo,EC,GWo,Rge,OWo,VWo,XWo,lt,CC,zWo,Bge,QWo,WWo,Kd,HWo,Pge,UWo,JWo,YG,YWo,KWo,ZWo,$ge,eHo,oHo,wC,rHo,eo,AC,tHo,Ige,aHo,nHo,dn,sHo,qge,lHo,iHo,Nge,dHo,cHo,jge,fHo,mHo,gHo,cn,sF,Dge,hHo,pHo,KG,_Ho,uHo,bHo,lF,Gge,vHo,FHo,ZG,THo,MHo,EHo,iF,Oge,CHo,wHo,eO,AHo,yHo,LHo,dF,Vge,xHo,kHo,oO,SHo,RHo,BHo,cF,PHo,Xge,$Ho,IHo,zge,qHo,NHo,Qge,jHo,DHo,yC,RBe,Zd,fF,Wge,LC,GHo,Hge,OHo,BBe,hr,xC,VHo,ec,XHo,rO,zHo,QHo,tO,WHo,HHo,UHo,kC,JHo,Uge,YHo,KHo,ZHo,it,SC,eUo,Jge,oUo,rUo,oc,tUo,Yge,aUo,nUo,aO,sUo,lUo,iUo,Kge,dUo,cUo,RC,fUo,oo,BC,mUo,Zge,gUo,hUo,fn,pUo,ehe,_Uo,uUo,ohe,bUo,vUo,rhe,FUo,TUo,MUo,rc,mF,the,EUo,CUo,nO,wUo,AUo,yUo,gF,ahe,LUo,xUo,sO,kUo,SUo,RUo,hF,nhe,BUo,PUo,lO,$Uo,IUo,qUo,pF,NUo,she,jUo,DUo,lhe,GUo,OUo,ihe,VUo,XUo,PC,PBe,tc,_F,dhe,$C,zUo,che,QUo,$Be,pr,IC,WUo,ac,HUo,iO,UUo,JUo,dO,YUo,KUo,ZUo,qC,eJo,fhe,oJo,rJo,tJo,dt,NC,aJo,mhe,nJo,sJo,nc,lJo,ghe,iJo,dJo,cO,cJo,fJo,mJo,hhe,gJo,hJo,jC,pJo,ro,DC,_Jo,phe,uJo,bJo,mn,vJo,_he,FJo,TJo,uhe,MJo,EJo,bhe,CJo,wJo,AJo,vhe,uF,Fhe,yJo,LJo,fO,xJo,kJo,SJo,bF,RJo,The,BJo,PJo,Mhe,$Jo,IJo,Ehe,qJo,NJo,GC,IBe,sc,vF,Che,OC,jJo,whe,DJo,qBe,_r,VC,GJo,lc,OJo,mO,VJo,XJo,gO,zJo,QJo,WJo,XC,HJo,Ahe,UJo,JJo,YJo,ct,zC,KJo,yhe,ZJo,eYo,ic,oYo,Lhe,rYo,tYo,hO,aYo,nYo,sYo,xhe,lYo,iYo,QC,dYo,to,WC,cYo,khe,fYo,mYo,gn,gYo,She,hYo,pYo,Rhe,_Yo,uYo,Bhe,bYo,vYo,FYo,Phe,FF,$he,TYo,MYo,pO,EYo,CYo,wYo,TF,AYo,Ihe,yYo,LYo,qhe,xYo,kYo,Nhe,SYo,RYo,HC,NBe,dc,MF,jhe,UC,BYo,Dhe,PYo,jBe,ur,JC,$Yo,cc,IYo,_O,qYo,NYo,uO,jYo,DYo,GYo,YC,OYo,Ghe,VYo,XYo,zYo,ft,KC,QYo,Ohe,WYo,HYo,fc,UYo,Vhe,JYo,YYo,bO,KYo,ZYo,eKo,Xhe,oKo,rKo,ZC,tKo,ao,ew,aKo,zhe,nKo,sKo,hn,lKo,Qhe,iKo,dKo,Whe,cKo,fKo,Hhe,mKo,gKo,hKo,pn,EF,Uhe,pKo,_Ko,vO,uKo,bKo,vKo,CF,Jhe,FKo,TKo,FO,MKo,EKo,CKo,wF,Yhe,wKo,AKo,TO,yKo,LKo,xKo,AF,Khe,kKo,SKo,MO,RKo,BKo,PKo,yF,$Ko,Zhe,IKo,qKo,epe,NKo,jKo,ope,DKo,GKo,ow,DBe,mc,LF,rpe,rw,OKo,tpe,VKo,GBe,br,tw,XKo,gc,zKo,EO,QKo,WKo,CO,HKo,UKo,JKo,aw,YKo,ape,KKo,ZKo,eZo,mt,nw,oZo,npe,rZo,tZo,hc,aZo,spe,nZo,sZo,wO,lZo,iZo,dZo,lpe,cZo,fZo,sw,mZo,no,lw,gZo,ipe,hZo,pZo,_n,_Zo,dpe,uZo,bZo,cpe,vZo,FZo,fpe,TZo,MZo,EZo,mpe,xF,gpe,CZo,wZo,AO,AZo,yZo,LZo,kF,xZo,hpe,kZo,SZo,ppe,RZo,BZo,_pe,PZo,$Zo,iw,OBe,pc,SF,upe,dw,IZo,bpe,qZo,VBe,vr,cw,NZo,_c,jZo,yO,DZo,GZo,LO,OZo,VZo,XZo,fw,zZo,vpe,QZo,WZo,HZo,gt,mw,UZo,Fpe,JZo,YZo,uc,KZo,Tpe,ZZo,eer,xO,oer,rer,ter,Mpe,aer,ner,gw,ser,ho,hw,ler,Epe,ier,der,un,cer,Cpe,fer,mer,wpe,ger,her,Ape,per,_er,uer,x,RF,ype,ber,ver,kO,Fer,Ter,Mer,BF,Lpe,Eer,Cer,SO,wer,Aer,yer,PF,xpe,Ler,xer,RO,ker,Ser,Rer,$F,kpe,Ber,Per,BO,$er,Ier,qer,IF,Spe,Ner,jer,PO,Der,Ger,Oer,qF,Rpe,Ver,Xer,$O,zer,Qer,Wer,NF,Bpe,Her,Uer,IO,Jer,Yer,Ker,jF,Ppe,Zer,eor,qO,oor,ror,tor,DF,$pe,aor,nor,NO,sor,lor,ior,GF,Ipe,dor,cor,jO,mor,gor,hor,OF,qpe,por,_or,DO,uor,bor,vor,VF,Npe,For,Tor,GO,Mor,Eor,Cor,XF,jpe,wor,Aor,OO,yor,Lor,xor,zF,Dpe,kor,Sor,VO,Ror,Bor,Por,QF,Gpe,$or,Ior,XO,qor,Nor,jor,WF,Ope,Dor,Gor,zO,Oor,Vor,Xor,Xs,Vpe,zor,Qor,QO,Wor,Hor,WO,Uor,Jor,Yor,HF,Xpe,Kor,Zor,HO,err,orr,rrr,UF,zpe,trr,arr,UO,nrr,srr,lrr,JF,Qpe,irr,drr,JO,crr,frr,mrr,YF,Wpe,grr,hrr,YO,prr,_rr,urr,KF,Hpe,brr,vrr,KO,Frr,Trr,Mrr,ZF,Upe,Err,Crr,ZO,wrr,Arr,yrr,eT,Jpe,Lrr,xrr,eV,krr,Srr,Rrr,oT,Ype,Brr,Prr,oV,$rr,Irr,qrr,rT,Kpe,Nrr,jrr,rV,Drr,Grr,Orr,tT,Zpe,Vrr,Xrr,tV,zrr,Qrr,Wrr,aT,e_e,Hrr,Urr,aV,Jrr,Yrr,Krr,nT,o_e,Zrr,etr,nV,otr,rtr,ttr,sT,r_e,atr,ntr,sV,str,ltr,itr,lT,t_e,dtr,ctr,lV,ftr,mtr,gtr,iT,a_e,htr,ptr,iV,_tr,utr,btr,dT,n_e,vtr,Ftr,dV,Ttr,Mtr,Etr,cT,s_e,Ctr,wtr,cV,Atr,ytr,Ltr,fT,l_e,xtr,ktr,fV,Str,Rtr,Btr,mT,i_e,Ptr,$tr,mV,Itr,qtr,Ntr,gT,d_e,jtr,Dtr,gV,Gtr,Otr,Vtr,hT,c_e,Xtr,ztr,hV,Qtr,Wtr,Htr,pT,f_e,Utr,Jtr,pV,Ytr,Ktr,Ztr,_T,m_e,ear,oar,_V,rar,tar,aar,uT,g_e,nar,sar,uV,lar,iar,dar,bT,h_e,car,far,bV,mar,gar,har,vT,p_e,par,_ar,vV,uar,bar,Far,FT,__e,Tar,Mar,FV,Ear,Car,war,u_e,Aar,yar,pw,XBe,bc,TT,b_e,_w,Lar,v_e,xar,zBe,Fr,uw,kar,vc,Sar,TV,Rar,Bar,MV,Par,$ar,Iar,bw,qar,F_e,Nar,jar,Dar,ht,vw,Gar,T_e,Oar,Var,Fc,Xar,M_e,zar,Qar,EV,War,Har,Uar,E_e,Jar,Yar,Fw,Kar,po,Tw,Zar,C_e,enr,onr,bn,rnr,w_e,tnr,anr,A_e,nnr,snr,y_e,lnr,inr,dnr,H,MT,L_e,cnr,fnr,CV,mnr,gnr,hnr,ET,x_e,pnr,_nr,wV,unr,bnr,vnr,CT,k_e,Fnr,Tnr,AV,Mnr,Enr,Cnr,wT,S_e,wnr,Anr,yV,ynr,Lnr,xnr,AT,R_e,knr,Snr,LV,Rnr,Bnr,Pnr,yT,B_e,$nr,Inr,xV,qnr,Nnr,jnr,LT,P_e,Dnr,Gnr,kV,Onr,Vnr,Xnr,xT,$_e,znr,Qnr,SV,Wnr,Hnr,Unr,kT,I_e,Jnr,Ynr,RV,Knr,Znr,esr,ST,q_e,osr,rsr,BV,tsr,asr,nsr,RT,N_e,ssr,lsr,PV,isr,dsr,csr,BT,j_e,fsr,msr,$V,gsr,hsr,psr,PT,D_e,_sr,usr,IV,bsr,vsr,Fsr,$T,G_e,Tsr,Msr,qV,Esr,Csr,wsr,IT,O_e,Asr,ysr,NV,Lsr,xsr,ksr,qT,V_e,Ssr,Rsr,jV,Bsr,Psr,$sr,NT,X_e,Isr,qsr,DV,Nsr,jsr,Dsr,jT,z_e,Gsr,Osr,GV,Vsr,Xsr,zsr,DT,Q_e,Qsr,Wsr,OV,Hsr,Usr,Jsr,GT,W_e,Ysr,Ksr,VV,Zsr,elr,olr,OT,H_e,rlr,tlr,XV,alr,nlr,slr,VT,U_e,llr,ilr,zV,dlr,clr,flr,XT,J_e,mlr,glr,QV,hlr,plr,_lr,Y_e,ulr,blr,Mw,QBe,Tc,zT,K_e,Ew,vlr,Z_e,Flr,WBe,Tr,Cw,Tlr,Mc,Mlr,WV,Elr,Clr,HV,wlr,Alr,ylr,ww,Llr,eue,xlr,klr,Slr,pt,Aw,Rlr,oue,Blr,Plr,Ec,$lr,rue,Ilr,qlr,UV,Nlr,jlr,Dlr,tue,Glr,Olr,yw,Vlr,_o,Lw,Xlr,aue,zlr,Qlr,vn,Wlr,nue,Hlr,Ulr,sue,Jlr,Ylr,lue,Klr,Zlr,eir,fe,QT,iue,oir,rir,JV,tir,air,nir,WT,due,sir,lir,YV,iir,dir,cir,HT,cue,fir,mir,KV,gir,hir,pir,UT,fue,_ir,uir,ZV,bir,vir,Fir,JT,mue,Tir,Mir,eX,Eir,Cir,wir,YT,gue,Air,yir,oX,Lir,xir,kir,KT,hue,Sir,Rir,rX,Bir,Pir,$ir,ZT,pue,Iir,qir,tX,Nir,jir,Dir,e8,_ue,Gir,Oir,aX,Vir,Xir,zir,o8,uue,Qir,Wir,nX,Hir,Uir,Jir,r8,bue,Yir,Kir,sX,Zir,edr,odr,t8,vue,rdr,tdr,lX,adr,ndr,sdr,Fue,ldr,idr,xw,HBe,Cc,a8,Tue,kw,ddr,Mue,cdr,UBe,Mr,Sw,fdr,wc,mdr,iX,gdr,hdr,dX,pdr,_dr,udr,Rw,bdr,Eue,vdr,Fdr,Tdr,_t,Bw,Mdr,Cue,Edr,Cdr,Ac,wdr,wue,Adr,ydr,cX,Ldr,xdr,kdr,Aue,Sdr,Rdr,Pw,Bdr,uo,$w,Pdr,yue,$dr,Idr,Fn,qdr,Lue,Ndr,jdr,xue,Ddr,Gdr,kue,Odr,Vdr,Xdr,Iw,n8,Sue,zdr,Qdr,fX,Wdr,Hdr,Udr,s8,Rue,Jdr,Ydr,mX,Kdr,Zdr,ecr,Bue,ocr,rcr,qw,JBe,yc,l8,Pue,Nw,tcr,$ue,acr,YBe,Er,jw,ncr,Lc,scr,gX,lcr,icr,hX,dcr,ccr,fcr,Dw,mcr,Iue,gcr,hcr,pcr,ut,Gw,_cr,que,ucr,bcr,xc,vcr,Nue,Fcr,Tcr,pX,Mcr,Ecr,Ccr,jue,wcr,Acr,Ow,ycr,bo,Vw,Lcr,Due,xcr,kcr,Tn,Scr,Gue,Rcr,Bcr,Oue,Pcr,$cr,Vue,Icr,qcr,Ncr,J,i8,Xue,jcr,Dcr,_X,Gcr,Ocr,Vcr,d8,zue,Xcr,zcr,uX,Qcr,Wcr,Hcr,c8,Que,Ucr,Jcr,bX,Ycr,Kcr,Zcr,f8,Wue,efr,ofr,vX,rfr,tfr,afr,m8,Hue,nfr,sfr,FX,lfr,ifr,dfr,g8,Uue,cfr,ffr,TX,mfr,gfr,hfr,h8,Jue,pfr,_fr,MX,ufr,bfr,vfr,p8,Yue,Ffr,Tfr,EX,Mfr,Efr,Cfr,_8,Kue,wfr,Afr,CX,yfr,Lfr,xfr,u8,Zue,kfr,Sfr,wX,Rfr,Bfr,Pfr,b8,e1e,$fr,Ifr,AX,qfr,Nfr,jfr,v8,o1e,Dfr,Gfr,yX,Ofr,Vfr,Xfr,F8,r1e,zfr,Qfr,LX,Wfr,Hfr,Ufr,T8,t1e,Jfr,Yfr,xX,Kfr,Zfr,emr,M8,a1e,omr,rmr,kX,tmr,amr,nmr,E8,n1e,smr,lmr,SX,imr,dmr,cmr,C8,s1e,fmr,mmr,RX,gmr,hmr,pmr,w8,l1e,_mr,umr,BX,bmr,vmr,Fmr,A8,i1e,Tmr,Mmr,PX,Emr,Cmr,wmr,y8,d1e,Amr,ymr,$X,Lmr,xmr,kmr,c1e,Smr,Rmr,Xw,KBe,kc,L8,f1e,zw,Bmr,m1e,Pmr,ZBe,Cr,Qw,$mr,Sc,Imr,IX,qmr,Nmr,qX,jmr,Dmr,Gmr,Ww,Omr,g1e,Vmr,Xmr,zmr,bt,Hw,Qmr,h1e,Wmr,Hmr,Rc,Umr,p1e,Jmr,Ymr,NX,Kmr,Zmr,egr,_1e,ogr,rgr,Uw,tgr,vo,Jw,agr,u1e,ngr,sgr,Mn,lgr,b1e,igr,dgr,v1e,cgr,fgr,F1e,mgr,ggr,hgr,be,x8,T1e,pgr,_gr,jX,ugr,bgr,vgr,k8,M1e,Fgr,Tgr,DX,Mgr,Egr,Cgr,S8,E1e,wgr,Agr,GX,ygr,Lgr,xgr,R8,C1e,kgr,Sgr,OX,Rgr,Bgr,Pgr,B8,w1e,$gr,Igr,VX,qgr,Ngr,jgr,P8,A1e,Dgr,Ggr,XX,Ogr,Vgr,Xgr,$8,y1e,zgr,Qgr,zX,Wgr,Hgr,Ugr,I8,L1e,Jgr,Ygr,QX,Kgr,Zgr,ehr,q8,x1e,ohr,rhr,WX,thr,ahr,nhr,N8,k1e,shr,lhr,HX,ihr,dhr,chr,S1e,fhr,mhr,Yw,ePe,Bc,j8,R1e,Kw,ghr,B1e,hhr,oPe,wr,Zw,phr,Pc,_hr,UX,uhr,bhr,JX,vhr,Fhr,Thr,eA,Mhr,P1e,Ehr,Chr,whr,vt,oA,Ahr,$1e,yhr,Lhr,$c,xhr,I1e,khr,Shr,YX,Rhr,Bhr,Phr,q1e,$hr,Ihr,rA,qhr,Fo,tA,Nhr,N1e,jhr,Dhr,En,Ghr,j1e,Ohr,Vhr,D1e,Xhr,zhr,G1e,Qhr,Whr,Hhr,V,D8,O1e,Uhr,Jhr,KX,Yhr,Khr,Zhr,G8,V1e,epr,opr,ZX,rpr,tpr,apr,O8,X1e,npr,spr,ez,lpr,ipr,dpr,V8,z1e,cpr,fpr,oz,mpr,gpr,hpr,X8,Q1e,ppr,_pr,rz,upr,bpr,vpr,z8,W1e,Fpr,Tpr,tz,Mpr,Epr,Cpr,Q8,H1e,wpr,Apr,az,ypr,Lpr,xpr,W8,U1e,kpr,Spr,nz,Rpr,Bpr,Ppr,H8,J1e,$pr,Ipr,sz,qpr,Npr,jpr,U8,Y1e,Dpr,Gpr,lz,Opr,Vpr,Xpr,J8,K1e,zpr,Qpr,iz,Wpr,Hpr,Upr,Y8,Z1e,Jpr,Ypr,dz,Kpr,Zpr,e_r,K8,ebe,o_r,r_r,cz,t_r,a_r,n_r,Z8,obe,s_r,l_r,fz,i_r,d_r,c_r,e7,rbe,f_r,m_r,mz,g_r,h_r,p_r,o7,tbe,__r,u_r,gz,b_r,v_r,F_r,r7,abe,T_r,M_r,hz,E_r,C_r,w_r,t7,nbe,A_r,y_r,pz,L_r,x_r,k_r,a7,sbe,S_r,R_r,_z,B_r,P_r,$_r,n7,lbe,I_r,q_r,uz,N_r,j_r,D_r,s7,ibe,G_r,O_r,bz,V_r,X_r,z_r,l7,dbe,Q_r,W_r,vz,H_r,U_r,J_r,i7,cbe,Y_r,K_r,Fz,Z_r,eur,our,d7,fbe,rur,tur,Tz,aur,nur,sur,c7,mbe,lur,iur,Mz,dur,cur,fur,f7,gbe,mur,gur,Ez,hur,pur,_ur,hbe,uur,bur,aA,rPe,Ic,m7,pbe,nA,vur,_be,Fur,tPe,Ar,sA,Tur,qc,Mur,Cz,Eur,Cur,wz,wur,Aur,yur,lA,Lur,ube,xur,kur,Sur,Ft,iA,Rur,bbe,Bur,Pur,Nc,$ur,vbe,Iur,qur,Az,Nur,jur,Dur,Fbe,Gur,Our,dA,Vur,To,cA,Xur,Tbe,zur,Qur,Cn,Wur,Mbe,Hur,Uur,Ebe,Jur,Yur,Cbe,Kur,Zur,e1r,se,g7,wbe,o1r,r1r,yz,t1r,a1r,n1r,h7,Abe,s1r,l1r,Lz,i1r,d1r,c1r,p7,ybe,f1r,m1r,xz,g1r,h1r,p1r,_7,Lbe,_1r,u1r,kz,b1r,v1r,F1r,u7,xbe,T1r,M1r,Sz,E1r,C1r,w1r,b7,kbe,A1r,y1r,Rz,L1r,x1r,k1r,v7,Sbe,S1r,R1r,Bz,B1r,P1r,$1r,F7,Rbe,I1r,q1r,Pz,N1r,j1r,D1r,T7,Bbe,G1r,O1r,$z,V1r,X1r,z1r,M7,Pbe,Q1r,W1r,Iz,H1r,U1r,J1r,E7,$be,Y1r,K1r,qz,Z1r,ebr,obr,C7,Ibe,rbr,tbr,Nz,abr,nbr,sbr,w7,qbe,lbr,ibr,jz,dbr,cbr,fbr,A7,Nbe,mbr,gbr,Dz,hbr,pbr,_br,y7,jbe,ubr,bbr,Gz,vbr,Fbr,Tbr,L7,Dbe,Mbr,Ebr,Oz,Cbr,wbr,Abr,x7,Gbe,ybr,Lbr,Vz,xbr,kbr,Sbr,Obe,Rbr,Bbr,fA,aPe,jc,k7,Vbe,mA,Pbr,Xbe,$br,nPe,yr,gA,Ibr,Dc,qbr,Xz,Nbr,jbr,zz,Dbr,Gbr,Obr,hA,Vbr,zbe,Xbr,zbr,Qbr,Tt,pA,Wbr,Qbe,Hbr,Ubr,Gc,Jbr,Wbe,Ybr,Kbr,Qz,Zbr,e2r,o2r,Hbe,r2r,t2r,_A,a2r,Mo,uA,n2r,Ube,s2r,l2r,wn,i2r,Jbe,d2r,c2r,Ybe,f2r,m2r,Kbe,g2r,h2r,p2r,Zbe,S7,e2e,_2r,u2r,Wz,b2r,v2r,F2r,o2e,T2r,M2r,bA,sPe,Oc,R7,r2e,vA,E2r,t2e,C2r,lPe,Lr,FA,w2r,Vc,A2r,Hz,y2r,L2r,Uz,x2r,k2r,S2r,TA,R2r,a2e,B2r,P2r,$2r,Mt,MA,I2r,n2e,q2r,N2r,Xc,j2r,s2e,D2r,G2r,Jz,O2r,V2r,X2r,l2e,z2r,Q2r,EA,W2r,Eo,CA,H2r,i2e,U2r,J2r,An,Y2r,d2e,K2r,Z2r,c2e,e6r,o6r,f2e,r6r,t6r,a6r,Y,B7,m2e,n6r,s6r,Yz,l6r,i6r,d6r,P7,g2e,c6r,f6r,Kz,m6r,g6r,h6r,$7,h2e,p6r,_6r,Zz,u6r,b6r,v6r,I7,p2e,F6r,T6r,eQ,M6r,E6r,C6r,q7,_2e,w6r,A6r,oQ,y6r,L6r,x6r,N7,u2e,k6r,S6r,rQ,R6r,B6r,P6r,j7,b2e,$6r,I6r,tQ,q6r,N6r,j6r,D7,v2e,D6r,G6r,aQ,O6r,V6r,X6r,G7,F2e,z6r,Q6r,nQ,W6r,H6r,U6r,O7,T2e,J6r,Y6r,sQ,K6r,Z6r,evr,V7,M2e,ovr,rvr,lQ,tvr,avr,nvr,X7,E2e,svr,lvr,iQ,ivr,dvr,cvr,z7,C2e,fvr,mvr,dQ,gvr,hvr,pvr,Q7,w2e,_vr,uvr,cQ,bvr,vvr,Fvr,W7,A2e,Tvr,Mvr,fQ,Evr,Cvr,wvr,H7,y2e,Avr,yvr,mQ,Lvr,xvr,kvr,U7,L2e,Svr,Rvr,gQ,Bvr,Pvr,$vr,J7,x2e,Ivr,qvr,hQ,Nvr,jvr,Dvr,Y7,k2e,Gvr,Ovr,pQ,Vvr,Xvr,zvr,K7,S2e,Qvr,Wvr,_Q,Hvr,Uvr,Jvr,R2e,Yvr,Kvr,wA,iPe,zc,Z7,B2e,AA,Zvr,P2e,eFr,dPe,xr,yA,oFr,Qc,rFr,uQ,tFr,aFr,bQ,nFr,sFr,lFr,LA,iFr,$2e,dFr,cFr,fFr,Et,xA,mFr,I2e,gFr,hFr,Wc,pFr,q2e,_Fr,uFr,vQ,bFr,vFr,FFr,N2e,TFr,MFr,kA,EFr,Co,SA,CFr,j2e,wFr,AFr,yn,yFr,D2e,LFr,xFr,G2e,kFr,SFr,O2e,RFr,BFr,PFr,K,e9,V2e,$Fr,IFr,FQ,qFr,NFr,jFr,o9,X2e,DFr,GFr,TQ,OFr,VFr,XFr,r9,z2e,zFr,QFr,MQ,WFr,HFr,UFr,t9,Q2e,JFr,YFr,EQ,KFr,ZFr,eTr,a9,W2e,oTr,rTr,CQ,tTr,aTr,nTr,n9,H2e,sTr,lTr,wQ,iTr,dTr,cTr,s9,U2e,fTr,mTr,AQ,gTr,hTr,pTr,l9,J2e,_Tr,uTr,yQ,bTr,vTr,FTr,i9,Y2e,TTr,MTr,LQ,ETr,CTr,wTr,d9,K2e,ATr,yTr,xQ,LTr,xTr,kTr,c9,Z2e,STr,RTr,kQ,BTr,PTr,$Tr,f9,e6e,ITr,qTr,SQ,NTr,jTr,DTr,m9,o6e,GTr,OTr,RQ,VTr,XTr,zTr,g9,r6e,QTr,WTr,BQ,HTr,UTr,JTr,h9,t6e,YTr,KTr,PQ,ZTr,e8r,o8r,p9,a6e,r8r,t8r,$Q,a8r,n8r,s8r,_9,n6e,l8r,i8r,IQ,d8r,c8r,f8r,u9,s6e,m8r,g8r,qQ,h8r,p8r,_8r,b9,l6e,u8r,b8r,NQ,v8r,F8r,T8r,v9,i6e,M8r,E8r,jQ,C8r,w8r,A8r,d6e,y8r,L8r,RA,cPe,Hc,F9,c6e,BA,x8r,f6e,k8r,fPe,kr,PA,S8r,Uc,R8r,DQ,B8r,P8r,GQ,$8r,I8r,q8r,$A,N8r,m6e,j8r,D8r,G8r,Ct,IA,O8r,g6e,V8r,X8r,Jc,z8r,h6e,Q8r,W8r,OQ,H8r,U8r,J8r,p6e,Y8r,K8r,qA,Z8r,wo,NA,e7r,_6e,o7r,r7r,Ln,t7r,u6e,a7r,n7r,b6e,s7r,l7r,v6e,i7r,d7r,c7r,F6e,T9,T6e,f7r,m7r,VQ,g7r,h7r,p7r,M6e,_7r,u7r,jA,mPe,Yc,M9,E6e,DA,b7r,C6e,v7r,gPe,Sr,GA,F7r,Kc,T7r,XQ,M7r,E7r,zQ,C7r,w7r,A7r,OA,y7r,w6e,L7r,x7r,k7r,wt,VA,S7r,A6e,R7r,B7r,Zc,P7r,y6e,$7r,I7r,QQ,q7r,N7r,j7r,L6e,D7r,G7r,XA,O7r,Ao,zA,V7r,x6e,X7r,z7r,xn,Q7r,k6e,W7r,H7r,S6e,U7r,J7r,R6e,Y7r,K7r,Z7r,B6e,E9,P6e,e9r,o9r,WQ,r9r,t9r,a9r,$6e,n9r,s9r,QA,hPe,ef,C9,I6e,WA,l9r,q6e,i9r,pPe,Rr,HA,d9r,of,c9r,HQ,f9r,m9r,UQ,g9r,h9r,p9r,UA,_9r,N6e,u9r,b9r,v9r,At,JA,F9r,j6e,T9r,M9r,rf,E9r,D6e,C9r,w9r,JQ,A9r,y9r,L9r,G6e,x9r,k9r,YA,S9r,yo,KA,R9r,O6e,B9r,P9r,kn,$9r,V6e,I9r,q9r,X6e,N9r,j9r,z6e,D9r,G9r,O9r,z,w9,Q6e,V9r,X9r,YQ,z9r,Q9r,W9r,A9,W6e,H9r,U9r,KQ,J9r,Y9r,K9r,y9,H6e,Z9r,eMr,ZQ,oMr,rMr,tMr,L9,U6e,aMr,nMr,eW,sMr,lMr,iMr,x9,J6e,dMr,cMr,oW,fMr,mMr,gMr,k9,Y6e,hMr,pMr,rW,_Mr,uMr,bMr,S9,K6e,vMr,FMr,tW,TMr,MMr,EMr,R9,Z6e,CMr,wMr,aW,AMr,yMr,LMr,B9,eve,xMr,kMr,nW,SMr,RMr,BMr,P9,ove,PMr,$Mr,sW,IMr,qMr,NMr,$9,rve,jMr,DMr,lW,GMr,OMr,VMr,I9,tve,XMr,zMr,iW,QMr,WMr,HMr,q9,ave,UMr,JMr,dW,YMr,KMr,ZMr,N9,nve,e4r,o4r,cW,r4r,t4r,a4r,j9,sve,n4r,s4r,fW,l4r,i4r,d4r,D9,lve,c4r,f4r,mW,m4r,g4r,h4r,G9,ive,p4r,_4r,gW,u4r,b4r,v4r,O9,dve,F4r,T4r,hW,M4r,E4r,C4r,V9,cve,w4r,A4r,pW,y4r,L4r,x4r,X9,fve,k4r,S4r,_W,R4r,B4r,P4r,z9,mve,$4r,I4r,uW,q4r,N4r,j4r,Q9,gve,D4r,G4r,bW,O4r,V4r,X4r,W9,hve,z4r,Q4r,vW,W4r,H4r,U4r,H9,pve,J4r,Y4r,FW,K4r,Z4r,eEr,U9,_ve,oEr,rEr,TW,tEr,aEr,nEr,uve,sEr,lEr,ZA,_Pe,tf,J9,bve,e0,iEr,vve,dEr,uPe,Br,o0,cEr,af,fEr,MW,mEr,gEr,EW,hEr,pEr,_Er,r0,uEr,Fve,bEr,vEr,FEr,yt,t0,TEr,Tve,MEr,EEr,nf,CEr,Mve,wEr,AEr,CW,yEr,LEr,xEr,Eve,kEr,SEr,a0,REr,Lo,n0,BEr,Cve,PEr,$Er,Sn,IEr,wve,qEr,NEr,Ave,jEr,DEr,yve,GEr,OEr,VEr,ca,Y9,Lve,XEr,zEr,wW,QEr,WEr,HEr,K9,xve,UEr,JEr,AW,YEr,KEr,ZEr,Z9,kve,e5r,o5r,yW,r5r,t5r,a5r,eM,Sve,n5r,s5r,LW,l5r,i5r,d5r,oM,Rve,c5r,f5r,xW,m5r,g5r,h5r,Bve,p5r,_5r,s0,bPe,sf,rM,Pve,l0,u5r,$ve,b5r,vPe,Pr,i0,v5r,lf,F5r,kW,T5r,M5r,SW,E5r,C5r,w5r,d0,A5r,Ive,y5r,L5r,x5r,Lt,c0,k5r,qve,S5r,R5r,df,B5r,Nve,P5r,$5r,RW,I5r,q5r,N5r,jve,j5r,D5r,f0,G5r,xo,m0,O5r,Dve,V5r,X5r,Rn,z5r,Gve,Q5r,W5r,Ove,H5r,U5r,Vve,J5r,Y5r,K5r,me,tM,Xve,Z5r,e3r,BW,o3r,r3r,t3r,aM,zve,a3r,n3r,PW,s3r,l3r,i3r,nM,Qve,d3r,c3r,$W,f3r,m3r,g3r,sM,Wve,h3r,p3r,IW,_3r,u3r,b3r,lM,Hve,v3r,F3r,qW,T3r,M3r,E3r,iM,Uve,C3r,w3r,NW,A3r,y3r,L3r,dM,Jve,x3r,k3r,jW,S3r,R3r,B3r,cM,Yve,P3r,$3r,DW,I3r,q3r,N3r,fM,Kve,j3r,D3r,GW,G3r,O3r,V3r,mM,Zve,X3r,z3r,OW,Q3r,W3r,H3r,gM,eFe,U3r,J3r,VW,Y3r,K3r,Z3r,hM,oFe,eCr,oCr,XW,rCr,tCr,aCr,rFe,nCr,sCr,g0,FPe,cf,pM,tFe,h0,lCr,aFe,iCr,TPe,$r,p0,dCr,ff,cCr,zW,fCr,mCr,QW,gCr,hCr,pCr,_0,_Cr,nFe,uCr,bCr,vCr,xt,u0,FCr,sFe,TCr,MCr,mf,ECr,lFe,CCr,wCr,WW,ACr,yCr,LCr,iFe,xCr,kCr,b0,SCr,ko,v0,RCr,dFe,BCr,PCr,Bn,$Cr,cFe,ICr,qCr,fFe,NCr,jCr,mFe,DCr,GCr,OCr,ve,_M,gFe,VCr,XCr,HW,zCr,QCr,WCr,uM,hFe,HCr,UCr,UW,JCr,YCr,KCr,bM,pFe,ZCr,ewr,JW,owr,rwr,twr,vM,_Fe,awr,nwr,YW,swr,lwr,iwr,FM,uFe,dwr,cwr,KW,fwr,mwr,gwr,TM,bFe,hwr,pwr,ZW,_wr,uwr,bwr,MM,vFe,vwr,Fwr,eH,Twr,Mwr,Ewr,EM,FFe,Cwr,wwr,oH,Awr,ywr,Lwr,CM,TFe,xwr,kwr,rH,Swr,Rwr,Bwr,wM,MFe,Pwr,$wr,tH,Iwr,qwr,Nwr,EFe,jwr,Dwr,F0,MPe,gf,AM,CFe,T0,Gwr,wFe,Owr,EPe,Ir,M0,Vwr,hf,Xwr,aH,zwr,Qwr,nH,Wwr,Hwr,Uwr,E0,Jwr,AFe,Ywr,Kwr,Zwr,kt,C0,eAr,yFe,oAr,rAr,pf,tAr,LFe,aAr,nAr,sH,sAr,lAr,iAr,xFe,dAr,cAr,w0,fAr,So,A0,mAr,kFe,gAr,hAr,Pn,pAr,SFe,_Ar,uAr,RFe,bAr,vAr,BFe,FAr,TAr,MAr,Ee,yM,PFe,EAr,CAr,lH,wAr,AAr,yAr,LM,$Fe,LAr,xAr,iH,kAr,SAr,RAr,xM,IFe,BAr,PAr,dH,$Ar,IAr,qAr,kM,qFe,NAr,jAr,cH,DAr,GAr,OAr,SM,NFe,VAr,XAr,fH,zAr,QAr,WAr,RM,jFe,HAr,UAr,mH,JAr,YAr,KAr,BM,DFe,ZAr,e0r,gH,o0r,r0r,t0r,PM,GFe,a0r,n0r,hH,s0r,l0r,i0r,$M,OFe,d0r,c0r,pH,f0r,m0r,g0r,VFe,h0r,p0r,y0,CPe,_f,IM,XFe,L0,_0r,zFe,u0r,wPe,qr,x0,b0r,uf,v0r,_H,F0r,T0r,uH,M0r,E0r,C0r,k0,w0r,QFe,A0r,y0r,L0r,St,S0,x0r,WFe,k0r,S0r,bf,R0r,HFe,B0r,P0r,bH,$0r,I0r,q0r,UFe,N0r,j0r,R0,D0r,Ro,B0,G0r,JFe,O0r,V0r,$n,X0r,YFe,z0r,Q0r,KFe,W0r,H0r,ZFe,U0r,J0r,Y0r,Fe,qM,eTe,K0r,Z0r,vH,eyr,oyr,ryr,NM,oTe,tyr,ayr,FH,nyr,syr,lyr,jM,rTe,iyr,dyr,TH,cyr,fyr,myr,DM,tTe,gyr,hyr,MH,pyr,_yr,uyr,GM,aTe,byr,vyr,EH,Fyr,Tyr,Myr,OM,nTe,Eyr,Cyr,CH,wyr,Ayr,yyr,VM,sTe,Lyr,xyr,wH,kyr,Syr,Ryr,XM,lTe,Byr,Pyr,AH,$yr,Iyr,qyr,zM,iTe,Nyr,jyr,yH,Dyr,Gyr,Oyr,QM,dTe,Vyr,Xyr,LH,zyr,Qyr,Wyr,cTe,Hyr,Uyr,P0,APe,vf,WM,fTe,$0,Jyr,mTe,Yyr,yPe,Nr,I0,Kyr,Ff,Zyr,xH,eLr,oLr,kH,rLr,tLr,aLr,q0,nLr,gTe,sLr,lLr,iLr,Rt,N0,dLr,hTe,cLr,fLr,Tf,mLr,pTe,gLr,hLr,SH,pLr,_Lr,uLr,_Te,bLr,vLr,j0,FLr,Bo,D0,TLr,uTe,MLr,ELr,In,CLr,bTe,wLr,ALr,vTe,yLr,LLr,FTe,xLr,kLr,SLr,Te,HM,TTe,RLr,BLr,RH,PLr,$Lr,ILr,UM,MTe,qLr,NLr,BH,jLr,DLr,GLr,JM,ETe,OLr,VLr,PH,XLr,zLr,QLr,YM,CTe,WLr,HLr,$H,ULr,JLr,YLr,KM,wTe,KLr,ZLr,IH,exr,oxr,rxr,ZM,ATe,txr,axr,qH,nxr,sxr,lxr,e4,yTe,ixr,dxr,NH,cxr,fxr,mxr,o4,LTe,gxr,hxr,jH,pxr,_xr,uxr,r4,xTe,bxr,vxr,DH,Fxr,Txr,Mxr,t4,kTe,Exr,Cxr,GH,wxr,Axr,yxr,STe,Lxr,xxr,G0,LPe,Mf,a4,RTe,O0,kxr,BTe,Sxr,xPe,jr,V0,Rxr,Ef,Bxr,OH,Pxr,$xr,VH,Ixr,qxr,Nxr,X0,jxr,PTe,Dxr,Gxr,Oxr,Bt,z0,Vxr,$Te,Xxr,zxr,Cf,Qxr,ITe,Wxr,Hxr,XH,Uxr,Jxr,Yxr,qTe,Kxr,Zxr,Q0,ekr,Po,W0,okr,NTe,rkr,tkr,qn,akr,jTe,nkr,skr,DTe,lkr,ikr,GTe,dkr,ckr,fkr,Be,n4,OTe,mkr,gkr,zH,hkr,pkr,_kr,s4,VTe,ukr,bkr,QH,vkr,Fkr,Tkr,l4,XTe,Mkr,Ekr,WH,Ckr,wkr,Akr,i4,zTe,ykr,Lkr,HH,xkr,kkr,Skr,d4,QTe,Rkr,Bkr,UH,Pkr,$kr,Ikr,c4,WTe,qkr,Nkr,JH,jkr,Dkr,Gkr,f4,HTe,Okr,Vkr,YH,Xkr,zkr,Qkr,m4,UTe,Wkr,Hkr,KH,Ukr,Jkr,Ykr,JTe,Kkr,Zkr,H0,kPe,wf,g4,YTe,U0,eSr,KTe,oSr,SPe,Dr,J0,rSr,Af,tSr,ZH,aSr,nSr,eU,sSr,lSr,iSr,Y0,dSr,ZTe,cSr,fSr,mSr,Pt,K0,gSr,e8e,hSr,pSr,yf,_Sr,o8e,uSr,bSr,oU,vSr,FSr,TSr,r8e,MSr,ESr,Z0,CSr,$o,ey,wSr,t8e,ASr,ySr,Nn,LSr,a8e,xSr,kSr,n8e,SSr,RSr,s8e,BSr,PSr,$Sr,Pe,h4,l8e,ISr,qSr,rU,NSr,jSr,DSr,p4,i8e,GSr,OSr,tU,VSr,XSr,zSr,_4,d8e,QSr,WSr,aU,HSr,USr,JSr,u4,c8e,YSr,KSr,nU,ZSr,eRr,oRr,b4,f8e,rRr,tRr,sU,aRr,nRr,sRr,v4,m8e,lRr,iRr,lU,dRr,cRr,fRr,F4,g8e,mRr,gRr,iU,hRr,pRr,_Rr,T4,h8e,uRr,bRr,dU,vRr,FRr,TRr,p8e,MRr,ERr,oy,RPe,Lf,M4,_8e,ry,CRr,u8e,wRr,BPe,Gr,ty,ARr,xf,yRr,cU,LRr,xRr,fU,kRr,SRr,RRr,ay,BRr,b8e,PRr,$Rr,IRr,$t,ny,qRr,v8e,NRr,jRr,kf,DRr,F8e,GRr,ORr,mU,VRr,XRr,zRr,T8e,QRr,WRr,sy,HRr,Io,ly,URr,M8e,JRr,YRr,jn,KRr,E8e,ZRr,eBr,C8e,oBr,rBr,w8e,tBr,aBr,nBr,A8e,E4,y8e,sBr,lBr,gU,iBr,dBr,cBr,L8e,fBr,mBr,iy,PPe,Sf,C4,x8e,dy,gBr,k8e,hBr,$Pe,Or,cy,pBr,Rf,_Br,hU,uBr,bBr,pU,vBr,FBr,TBr,fy,MBr,S8e,EBr,CBr,wBr,It,my,ABr,R8e,yBr,LBr,Bf,xBr,B8e,kBr,SBr,_U,RBr,BBr,PBr,P8e,$Br,IBr,gy,qBr,qo,hy,NBr,$8e,jBr,DBr,Dn,GBr,I8e,OBr,VBr,q8e,XBr,zBr,N8e,QBr,WBr,HBr,py,w4,j8e,UBr,JBr,uU,YBr,KBr,ZBr,A4,D8e,ePr,oPr,bU,rPr,tPr,aPr,G8e,nPr,sPr,_y,IPe,Pf,y4,O8e,uy,lPr,V8e,iPr,qPe,Vr,by,dPr,$f,cPr,vU,fPr,mPr,FU,gPr,hPr,pPr,vy,_Pr,X8e,uPr,bPr,vPr,qt,Fy,FPr,z8e,TPr,MPr,If,EPr,Q8e,CPr,wPr,TU,APr,yPr,LPr,W8e,xPr,kPr,Ty,SPr,No,My,RPr,H8e,BPr,PPr,Gn,$Pr,U8e,IPr,qPr,J8e,NPr,jPr,Y8e,DPr,GPr,OPr,K8e,L4,Z8e,VPr,XPr,MU,zPr,QPr,WPr,e7e,HPr,UPr,Ey,NPe;return he=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),BE=new X({}),PE=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Xf=new JPr({props:{warning:!0,$$slots:{default:[X5t]},$$scope:{ctx:Nf}}}),$E=new X({}),IE=new w({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/configuration_auto.py#L560"}}),jE=new w({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/configuration_auto.py#L583"}}),DE=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),GE=new w({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/configuration_auto.py#L705"}}),OE=new X({}),VE=new w({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/tokenization_auto.py#L359"}}),QE=new w({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16879/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/tokenization_auto.py#L373"}}),WE=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),HE=new w({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/tokenization_auto.py#L569"}}),UE=new X({}),JE=new w({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),ZE=new w({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16879/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/feature_extraction_auto.py#L186"}}),Nh=new JPr({props:{$$slots:{default:[z5t]},$$scope:{ctx:Nf}}}),e5=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),o5=new w({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/feature_extraction_auto.py#L313"}}),r5=new X({}),t5=new w({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/processing_auto.py#L70"}}),s5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/processing_auto.py#L84"}}),Uh=new JPr({props:{$$slots:{default:[Q5t]},$$scope:{ctx:Nf}}}),l5=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),i5=new w({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/processing_auto.py#L237"}}),d5=new X({}),c5=new w({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L714"}}),m5=new w({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),h5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),p5=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_5=new X({}),u5=new w({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L721"}}),v5=new w({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),T5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),M5=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E5=new X({}),C5=new w({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L736"}}),A5=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),y5=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),L5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),x5=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k5=new X({}),S5=new w({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L743"}}),B5=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),P5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),$5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),I5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q5=new X({}),N5=new w({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L750"}}),D5=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),G5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),O5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),V5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X5=new X({}),z5=new w({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L759"}}),W5=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),H5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),U5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),J5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y5=new X({}),K5=new w({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L793"}}),e3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),r3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),t3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a3=new X({}),n3=new w({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L800"}}),l3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),i3=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),d3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),c3=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f3=new X({}),m3=new w({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L786"}}),h3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),p3=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),_3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b3=new X({}),v3=new w({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L768"}}),T3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),M3=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),E3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w3=new X({}),A3=new w({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L775"}}),L3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),x3=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),k3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),S3=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R3=new X({}),B3=new w({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L809"}}),$3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16879/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16879/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16879/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),I3=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),q3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),N3=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j3=new X({}),D3=new w({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L848"}}),O3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),V3=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),X3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),z3=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q3=new X({}),W3=new w({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L855"}}),U3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),J3=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),Y3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),K3=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z3=new X({}),eC=new w({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L878"}}),rC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),tC=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),aC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),nC=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sC=new X({}),lC=new w({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L862"}}),dC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),cC=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),fC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),mC=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gC=new X({}),hC=new w({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L869"}}),_C=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),uC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),bC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),FC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TC=new X({}),MC=new w({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L887"}}),CC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),AC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),yC=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LC=new X({}),xC=new w({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L894"}}),SC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),RC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),BC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),PC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$C=new X({}),IC=new w({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L841"}}),NC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),jC=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),DC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),GC=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OC=new X({}),VC=new w({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L816"}}),zC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),QC=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),WC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),HC=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UC=new X({}),JC=new w({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L823"}}),KC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),ZC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),ew=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rw=new X({}),tw=new w({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_auto.py#L832"}}),nw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),sw=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),lw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),iw=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dw=new X({}),cw=new w({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),mw=new w({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),gw=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),hw=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),pw=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_w=new X({}),uw=new w({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),vw=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),Fw=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),Tw=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),Mw=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ew=new X({}),Cw=new w({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),Aw=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),yw=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),Lw=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),xw=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kw=new X({}),Sw=new w({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),Bw=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),Pw=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),$w=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),qw=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Nw=new X({}),jw=new w({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),Gw=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),Ow=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),Vw=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),Xw=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zw=new X({}),Qw=new w({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),Hw=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),Uw=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),Jw=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),Yw=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Kw=new X({}),Zw=new w({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),oA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),rA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),tA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),aA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nA=new X({}),sA=new w({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),iA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),dA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),cA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),fA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mA=new X({}),gA=new w({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),pA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),_A=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),uA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),bA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vA=new X({}),FA=new w({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),MA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),EA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),CA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),wA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AA=new X({}),yA=new w({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),xA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),kA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),SA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),RA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BA=new X({}),PA=new w({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),IA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),qA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),NA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),jA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DA=new X({}),GA=new w({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),VA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),XA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),zA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),QA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WA=new X({}),HA=new w({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),JA=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),YA=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),KA=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),ZA=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e0=new X({}),o0=new w({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),t0=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),a0=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),n0=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),s0=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l0=new X({}),i0=new w({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),c0=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),f0=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),m0=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),g0=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h0=new X({}),p0=new w({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),u0=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),b0=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),v0=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),F0=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T0=new X({}),M0=new w({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),C0=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),w0=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),A0=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),y0=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L0=new X({}),x0=new w({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),S0=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),R0=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),B0=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),P0=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$0=new X({}),I0=new w({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),N0=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),j0=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),D0=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),G0=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),O0=new X({}),V0=new w({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),z0=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),W0=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),H0=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U0=new X({}),J0=new w({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),K0=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),Z0=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),ey=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),oy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ry=new X({}),ty=new w({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),ny=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),sy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),ly=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),iy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dy=new X({}),cy=new w({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),my=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16879/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),gy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),hy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),_y=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uy=new X({}),by=new w({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),Fy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16879/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16879/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L389"}}),Ty=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),My=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16879/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16879/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16879/src/transformers/models/auto/auto_factory.py#L417"}}),Ey=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),ce=a("h1"),Ce=a("a"),lo=a("span"),f(he.$$.fragment),Me=l(),Xo=a("span"),ji=o("Auto Classes"),jf=l(),fa=a("p"),Di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Gi=a("code"),xE=o("from_pretrained()"),Df=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),Oi=o("Instantiating one of "),On=a("a"),kE=o("AutoConfig"),Vn=o(", "),Xn=a("a"),SE=o("AutoModel"),Vi=o(`, and
`),zn=a("a"),RE=o("AutoTokenizer"),Xi=o(" will directly create a class of the relevant architecture. For instance"),Gf=l(),f(Da.$$.fragment),fo=l(),ue=a("p"),EL=o("will create a model that is an instance of "),zi=a("a"),CL=o("BertModel"),wL=o("."),zo=l(),Ga=a("p"),AL=o("There is one class of "),Of=a("code"),yL=o("AutoModel"),JIe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),qRe=l(),Qi=a("h2"),Vf=a("a"),pY=a("span"),f(BE.$$.fragment),YIe=l(),_Y=a("span"),KIe=o("Extending the Auto Classes"),NRe=l(),Qn=a("p"),ZIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),uY=a("code"),eqe=o("NewModel"),oqe=o(", make sure you have a "),bY=a("code"),rqe=o("NewModelConfig"),tqe=o(` then you can add those to the auto
classes like this:`),jRe=l(),f(PE.$$.fragment),DRe=l(),LL=a("p"),aqe=o("You will then be able to use the auto classes like you would usually do!"),GRe=l(),f(Xf.$$.fragment),ORe=l(),Wi=a("h2"),zf=a("a"),vY=a("span"),f($E.$$.fragment),nqe=l(),FY=a("span"),sqe=o("AutoConfig"),VRe=l(),Qo=a("div"),f(IE.$$.fragment),lqe=l(),qE=a("p"),iqe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),xL=a("a"),dqe=o("from_pretrained()"),cqe=o(" class method."),fqe=l(),NE=a("p"),mqe=o("This class cannot be instantiated directly using "),TY=a("code"),gqe=o("__init__()"),hqe=o(" (throws an error)."),pqe=l(),mo=a("div"),f(jE.$$.fragment),_qe=l(),MY=a("p"),uqe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),bqe=l(),Hi=a("p"),vqe=o("The configuration class to instantiate is selected based on the "),EY=a("code"),Fqe=o("model_type"),Tqe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),CY=a("code"),Mqe=o("pretrained_model_name_or_path"),Eqe=o(":"),Cqe=l(),v=a("ul"),Qf=a("li"),wY=a("strong"),wqe=o("albert"),Aqe=o(" \u2014 "),kL=a("a"),yqe=o("AlbertConfig"),Lqe=o(" (ALBERT model)"),xqe=l(),Wf=a("li"),AY=a("strong"),kqe=o("bart"),Sqe=o(" \u2014 "),SL=a("a"),Rqe=o("BartConfig"),Bqe=o(" (BART model)"),Pqe=l(),Hf=a("li"),yY=a("strong"),$qe=o("beit"),Iqe=o(" \u2014 "),RL=a("a"),qqe=o("BeitConfig"),Nqe=o(" (BEiT model)"),jqe=l(),Uf=a("li"),LY=a("strong"),Dqe=o("bert"),Gqe=o(" \u2014 "),BL=a("a"),Oqe=o("BertConfig"),Vqe=o(" (BERT model)"),Xqe=l(),Jf=a("li"),xY=a("strong"),zqe=o("bert-generation"),Qqe=o(" \u2014 "),PL=a("a"),Wqe=o("BertGenerationConfig"),Hqe=o(" (Bert Generation model)"),Uqe=l(),Yf=a("li"),kY=a("strong"),Jqe=o("big_bird"),Yqe=o(" \u2014 "),$L=a("a"),Kqe=o("BigBirdConfig"),Zqe=o(" (BigBird model)"),eNe=l(),Kf=a("li"),SY=a("strong"),oNe=o("bigbird_pegasus"),rNe=o(" \u2014 "),IL=a("a"),tNe=o("BigBirdPegasusConfig"),aNe=o(" (BigBirdPegasus model)"),nNe=l(),Zf=a("li"),RY=a("strong"),sNe=o("blenderbot"),lNe=o(" \u2014 "),qL=a("a"),iNe=o("BlenderbotConfig"),dNe=o(" (Blenderbot model)"),cNe=l(),em=a("li"),BY=a("strong"),fNe=o("blenderbot-small"),mNe=o(" \u2014 "),NL=a("a"),gNe=o("BlenderbotSmallConfig"),hNe=o(" (BlenderbotSmall model)"),pNe=l(),om=a("li"),PY=a("strong"),_Ne=o("camembert"),uNe=o(" \u2014 "),jL=a("a"),bNe=o("CamembertConfig"),vNe=o(" (CamemBERT model)"),FNe=l(),rm=a("li"),$Y=a("strong"),TNe=o("canine"),MNe=o(" \u2014 "),DL=a("a"),ENe=o("CanineConfig"),CNe=o(" (Canine model)"),wNe=l(),tm=a("li"),IY=a("strong"),ANe=o("clip"),yNe=o(" \u2014 "),GL=a("a"),LNe=o("CLIPConfig"),xNe=o(" (CLIP model)"),kNe=l(),am=a("li"),qY=a("strong"),SNe=o("convbert"),RNe=o(" \u2014 "),OL=a("a"),BNe=o("ConvBertConfig"),PNe=o(" (ConvBERT model)"),$Ne=l(),nm=a("li"),NY=a("strong"),INe=o("convnext"),qNe=o(" \u2014 "),VL=a("a"),NNe=o("ConvNextConfig"),jNe=o(" (ConvNext model)"),DNe=l(),sm=a("li"),jY=a("strong"),GNe=o("ctrl"),ONe=o(" \u2014 "),XL=a("a"),VNe=o("CTRLConfig"),XNe=o(" (CTRL model)"),zNe=l(),lm=a("li"),DY=a("strong"),QNe=o("data2vec-audio"),WNe=o(" \u2014 "),zL=a("a"),HNe=o("Data2VecAudioConfig"),UNe=o(" (Data2VecAudio model)"),JNe=l(),im=a("li"),GY=a("strong"),YNe=o("data2vec-text"),KNe=o(" \u2014 "),QL=a("a"),ZNe=o("Data2VecTextConfig"),eje=o(" (Data2VecText model)"),oje=l(),dm=a("li"),OY=a("strong"),rje=o("data2vec-vision"),tje=o(" \u2014 "),WL=a("a"),aje=o("Data2VecVisionConfig"),nje=o(" (Data2VecVision model)"),sje=l(),cm=a("li"),VY=a("strong"),lje=o("deberta"),ije=o(" \u2014 "),HL=a("a"),dje=o("DebertaConfig"),cje=o(" (DeBERTa model)"),fje=l(),fm=a("li"),XY=a("strong"),mje=o("deberta-v2"),gje=o(" \u2014 "),UL=a("a"),hje=o("DebertaV2Config"),pje=o(" (DeBERTa-v2 model)"),_je=l(),mm=a("li"),zY=a("strong"),uje=o("decision_transformer"),bje=o(" \u2014 "),JL=a("a"),vje=o("DecisionTransformerConfig"),Fje=o(" (Decision Transformer model)"),Tje=l(),gm=a("li"),QY=a("strong"),Mje=o("deit"),Eje=o(" \u2014 "),YL=a("a"),Cje=o("DeiTConfig"),wje=o(" (DeiT model)"),Aje=l(),hm=a("li"),WY=a("strong"),yje=o("detr"),Lje=o(" \u2014 "),KL=a("a"),xje=o("DetrConfig"),kje=o(" (DETR model)"),Sje=l(),pm=a("li"),HY=a("strong"),Rje=o("distilbert"),Bje=o(" \u2014 "),ZL=a("a"),Pje=o("DistilBertConfig"),$je=o(" (DistilBERT model)"),Ije=l(),_m=a("li"),UY=a("strong"),qje=o("dpr"),Nje=o(" \u2014 "),ex=a("a"),jje=o("DPRConfig"),Dje=o(" (DPR model)"),Gje=l(),um=a("li"),JY=a("strong"),Oje=o("dpt"),Vje=o(" \u2014 "),ox=a("a"),Xje=o("DPTConfig"),zje=o(" (DPT model)"),Qje=l(),bm=a("li"),YY=a("strong"),Wje=o("electra"),Hje=o(" \u2014 "),rx=a("a"),Uje=o("ElectraConfig"),Jje=o(" (ELECTRA model)"),Yje=l(),vm=a("li"),KY=a("strong"),Kje=o("encoder-decoder"),Zje=o(" \u2014 "),tx=a("a"),eDe=o("EncoderDecoderConfig"),oDe=o(" (Encoder decoder model)"),rDe=l(),Fm=a("li"),ZY=a("strong"),tDe=o("flaubert"),aDe=o(" \u2014 "),ax=a("a"),nDe=o("FlaubertConfig"),sDe=o(" (FlauBERT model)"),lDe=l(),Tm=a("li"),eK=a("strong"),iDe=o("fnet"),dDe=o(" \u2014 "),nx=a("a"),cDe=o("FNetConfig"),fDe=o(" (FNet model)"),mDe=l(),Mm=a("li"),oK=a("strong"),gDe=o("fsmt"),hDe=o(" \u2014 "),sx=a("a"),pDe=o("FSMTConfig"),_De=o(" (FairSeq Machine-Translation model)"),uDe=l(),Em=a("li"),rK=a("strong"),bDe=o("funnel"),vDe=o(" \u2014 "),lx=a("a"),FDe=o("FunnelConfig"),TDe=o(" (Funnel Transformer model)"),MDe=l(),Cm=a("li"),tK=a("strong"),EDe=o("glpn"),CDe=o(" \u2014 "),ix=a("a"),wDe=o("GLPNConfig"),ADe=o(" (GLPN model)"),yDe=l(),wm=a("li"),aK=a("strong"),LDe=o("gpt2"),xDe=o(" \u2014 "),dx=a("a"),kDe=o("GPT2Config"),SDe=o(" (OpenAI GPT-2 model)"),RDe=l(),Am=a("li"),nK=a("strong"),BDe=o("gpt_neo"),PDe=o(" \u2014 "),cx=a("a"),$De=o("GPTNeoConfig"),IDe=o(" (GPT Neo model)"),qDe=l(),ym=a("li"),sK=a("strong"),NDe=o("gptj"),jDe=o(" \u2014 "),fx=a("a"),DDe=o("GPTJConfig"),GDe=o(" (GPT-J model)"),ODe=l(),Lm=a("li"),lK=a("strong"),VDe=o("hubert"),XDe=o(" \u2014 "),mx=a("a"),zDe=o("HubertConfig"),QDe=o(" (Hubert model)"),WDe=l(),xm=a("li"),iK=a("strong"),HDe=o("ibert"),UDe=o(" \u2014 "),gx=a("a"),JDe=o("IBertConfig"),YDe=o(" (I-BERT model)"),KDe=l(),km=a("li"),dK=a("strong"),ZDe=o("imagegpt"),eGe=o(" \u2014 "),hx=a("a"),oGe=o("ImageGPTConfig"),rGe=o(" (ImageGPT model)"),tGe=l(),Sm=a("li"),cK=a("strong"),aGe=o("layoutlm"),nGe=o(" \u2014 "),px=a("a"),sGe=o("LayoutLMConfig"),lGe=o(" (LayoutLM model)"),iGe=l(),Rm=a("li"),fK=a("strong"),dGe=o("layoutlmv2"),cGe=o(" \u2014 "),_x=a("a"),fGe=o("LayoutLMv2Config"),mGe=o(" (LayoutLMv2 model)"),gGe=l(),Bm=a("li"),mK=a("strong"),hGe=o("led"),pGe=o(" \u2014 "),ux=a("a"),_Ge=o("LEDConfig"),uGe=o(" (LED model)"),bGe=l(),Pm=a("li"),gK=a("strong"),vGe=o("longformer"),FGe=o(" \u2014 "),bx=a("a"),TGe=o("LongformerConfig"),MGe=o(" (Longformer model)"),EGe=l(),$m=a("li"),hK=a("strong"),CGe=o("luke"),wGe=o(" \u2014 "),vx=a("a"),AGe=o("LukeConfig"),yGe=o(" (LUKE model)"),LGe=l(),Im=a("li"),pK=a("strong"),xGe=o("lxmert"),kGe=o(" \u2014 "),Fx=a("a"),SGe=o("LxmertConfig"),RGe=o(" (LXMERT model)"),BGe=l(),qm=a("li"),_K=a("strong"),PGe=o("m2m_100"),$Ge=o(" \u2014 "),Tx=a("a"),IGe=o("M2M100Config"),qGe=o(" (M2M100 model)"),NGe=l(),Nm=a("li"),uK=a("strong"),jGe=o("marian"),DGe=o(" \u2014 "),Mx=a("a"),GGe=o("MarianConfig"),OGe=o(" (Marian model)"),VGe=l(),jm=a("li"),bK=a("strong"),XGe=o("maskformer"),zGe=o(" \u2014 "),Ex=a("a"),QGe=o("MaskFormerConfig"),WGe=o(" (MaskFormer model)"),HGe=l(),Dm=a("li"),vK=a("strong"),UGe=o("mbart"),JGe=o(" \u2014 "),Cx=a("a"),YGe=o("MBartConfig"),KGe=o(" (mBART model)"),ZGe=l(),Gm=a("li"),FK=a("strong"),eOe=o("megatron-bert"),oOe=o(" \u2014 "),wx=a("a"),rOe=o("MegatronBertConfig"),tOe=o(" (MegatronBert model)"),aOe=l(),Om=a("li"),TK=a("strong"),nOe=o("mobilebert"),sOe=o(" \u2014 "),Ax=a("a"),lOe=o("MobileBertConfig"),iOe=o(" (MobileBERT model)"),dOe=l(),Vm=a("li"),MK=a("strong"),cOe=o("mpnet"),fOe=o(" \u2014 "),yx=a("a"),mOe=o("MPNetConfig"),gOe=o(" (MPNet model)"),hOe=l(),Xm=a("li"),EK=a("strong"),pOe=o("mt5"),_Oe=o(" \u2014 "),Lx=a("a"),uOe=o("MT5Config"),bOe=o(" (mT5 model)"),vOe=l(),zm=a("li"),CK=a("strong"),FOe=o("nystromformer"),TOe=o(" \u2014 "),xx=a("a"),MOe=o("NystromformerConfig"),EOe=o(" (Nystromformer model)"),COe=l(),Qm=a("li"),wK=a("strong"),wOe=o("openai-gpt"),AOe=o(" \u2014 "),kx=a("a"),yOe=o("OpenAIGPTConfig"),LOe=o(" (OpenAI GPT model)"),xOe=l(),Wm=a("li"),AK=a("strong"),kOe=o("pegasus"),SOe=o(" \u2014 "),Sx=a("a"),ROe=o("PegasusConfig"),BOe=o(" (Pegasus model)"),POe=l(),Hm=a("li"),yK=a("strong"),$Oe=o("perceiver"),IOe=o(" \u2014 "),Rx=a("a"),qOe=o("PerceiverConfig"),NOe=o(" (Perceiver model)"),jOe=l(),Um=a("li"),LK=a("strong"),DOe=o("plbart"),GOe=o(" \u2014 "),Bx=a("a"),OOe=o("PLBartConfig"),VOe=o(" (PLBart model)"),XOe=l(),Jm=a("li"),xK=a("strong"),zOe=o("poolformer"),QOe=o(" \u2014 "),Px=a("a"),WOe=o("PoolFormerConfig"),HOe=o(" (PoolFormer model)"),UOe=l(),Ym=a("li"),kK=a("strong"),JOe=o("prophetnet"),YOe=o(" \u2014 "),$x=a("a"),KOe=o("ProphetNetConfig"),ZOe=o(" (ProphetNet model)"),eVe=l(),Km=a("li"),SK=a("strong"),oVe=o("qdqbert"),rVe=o(" \u2014 "),Ix=a("a"),tVe=o("QDQBertConfig"),aVe=o(" (QDQBert model)"),nVe=l(),Zm=a("li"),RK=a("strong"),sVe=o("rag"),lVe=o(" \u2014 "),qx=a("a"),iVe=o("RagConfig"),dVe=o(" (RAG model)"),cVe=l(),eg=a("li"),BK=a("strong"),fVe=o("realm"),mVe=o(" \u2014 "),Nx=a("a"),gVe=o("RealmConfig"),hVe=o(" (Realm model)"),pVe=l(),og=a("li"),PK=a("strong"),_Ve=o("reformer"),uVe=o(" \u2014 "),jx=a("a"),bVe=o("ReformerConfig"),vVe=o(" (Reformer model)"),FVe=l(),rg=a("li"),$K=a("strong"),TVe=o("regnet"),MVe=o(" \u2014 "),Dx=a("a"),EVe=o("RegNetConfig"),CVe=o(" (RegNet model)"),wVe=l(),tg=a("li"),IK=a("strong"),AVe=o("rembert"),yVe=o(" \u2014 "),Gx=a("a"),LVe=o("RemBertConfig"),xVe=o(" (RemBERT model)"),kVe=l(),ag=a("li"),qK=a("strong"),SVe=o("resnet"),RVe=o(" \u2014 "),Ox=a("a"),BVe=o("ResNetConfig"),PVe=o(" (ResNet model)"),$Ve=l(),ng=a("li"),NK=a("strong"),IVe=o("retribert"),qVe=o(" \u2014 "),Vx=a("a"),NVe=o("RetriBertConfig"),jVe=o(" (RetriBERT model)"),DVe=l(),sg=a("li"),jK=a("strong"),GVe=o("roberta"),OVe=o(" \u2014 "),Xx=a("a"),VVe=o("RobertaConfig"),XVe=o(" (RoBERTa model)"),zVe=l(),lg=a("li"),DK=a("strong"),QVe=o("roformer"),WVe=o(" \u2014 "),zx=a("a"),HVe=o("RoFormerConfig"),UVe=o(" (RoFormer model)"),JVe=l(),ig=a("li"),GK=a("strong"),YVe=o("segformer"),KVe=o(" \u2014 "),Qx=a("a"),ZVe=o("SegformerConfig"),eXe=o(" (SegFormer model)"),oXe=l(),dg=a("li"),OK=a("strong"),rXe=o("sew"),tXe=o(" \u2014 "),Wx=a("a"),aXe=o("SEWConfig"),nXe=o(" (SEW model)"),sXe=l(),cg=a("li"),VK=a("strong"),lXe=o("sew-d"),iXe=o(" \u2014 "),Hx=a("a"),dXe=o("SEWDConfig"),cXe=o(" (SEW-D model)"),fXe=l(),fg=a("li"),XK=a("strong"),mXe=o("speech-encoder-decoder"),gXe=o(" \u2014 "),Ux=a("a"),hXe=o("SpeechEncoderDecoderConfig"),pXe=o(" (Speech Encoder decoder model)"),_Xe=l(),mg=a("li"),zK=a("strong"),uXe=o("speech_to_text"),bXe=o(" \u2014 "),Jx=a("a"),vXe=o("Speech2TextConfig"),FXe=o(" (Speech2Text model)"),TXe=l(),gg=a("li"),QK=a("strong"),MXe=o("speech_to_text_2"),EXe=o(" \u2014 "),Yx=a("a"),CXe=o("Speech2Text2Config"),wXe=o(" (Speech2Text2 model)"),AXe=l(),hg=a("li"),WK=a("strong"),yXe=o("splinter"),LXe=o(" \u2014 "),Kx=a("a"),xXe=o("SplinterConfig"),kXe=o(" (Splinter model)"),SXe=l(),pg=a("li"),HK=a("strong"),RXe=o("squeezebert"),BXe=o(" \u2014 "),Zx=a("a"),PXe=o("SqueezeBertConfig"),$Xe=o(" (SqueezeBERT model)"),IXe=l(),_g=a("li"),UK=a("strong"),qXe=o("swin"),NXe=o(" \u2014 "),ek=a("a"),jXe=o("SwinConfig"),DXe=o(" (Swin model)"),GXe=l(),ug=a("li"),JK=a("strong"),OXe=o("t5"),VXe=o(" \u2014 "),ok=a("a"),XXe=o("T5Config"),zXe=o(" (T5 model)"),QXe=l(),bg=a("li"),YK=a("strong"),WXe=o("tapas"),HXe=o(" \u2014 "),rk=a("a"),UXe=o("TapasConfig"),JXe=o(" (TAPAS model)"),YXe=l(),vg=a("li"),KK=a("strong"),KXe=o("tapex"),ZXe=o(" \u2014 "),tk=a("a"),eze=o("BartConfig"),oze=o(" (TAPEX model)"),rze=l(),Fg=a("li"),ZK=a("strong"),tze=o("transfo-xl"),aze=o(" \u2014 "),ak=a("a"),nze=o("TransfoXLConfig"),sze=o(" (Transformer-XL model)"),lze=l(),Tg=a("li"),eZ=a("strong"),ize=o("trocr"),dze=o(" \u2014 "),nk=a("a"),cze=o("TrOCRConfig"),fze=o(" (TrOCR model)"),mze=l(),Mg=a("li"),oZ=a("strong"),gze=o("unispeech"),hze=o(" \u2014 "),sk=a("a"),pze=o("UniSpeechConfig"),_ze=o(" (UniSpeech model)"),uze=l(),Eg=a("li"),rZ=a("strong"),bze=o("unispeech-sat"),vze=o(" \u2014 "),lk=a("a"),Fze=o("UniSpeechSatConfig"),Tze=o(" (UniSpeechSat model)"),Mze=l(),Cg=a("li"),tZ=a("strong"),Eze=o("van"),Cze=o(" \u2014 "),ik=a("a"),wze=o("VanConfig"),Aze=o(" (VAN model)"),yze=l(),wg=a("li"),aZ=a("strong"),Lze=o("vilt"),xze=o(" \u2014 "),dk=a("a"),kze=o("ViltConfig"),Sze=o(" (ViLT model)"),Rze=l(),Ag=a("li"),nZ=a("strong"),Bze=o("vision-encoder-decoder"),Pze=o(" \u2014 "),ck=a("a"),$ze=o("VisionEncoderDecoderConfig"),Ize=o(" (Vision Encoder decoder model)"),qze=l(),yg=a("li"),sZ=a("strong"),Nze=o("vision-text-dual-encoder"),jze=o(" \u2014 "),fk=a("a"),Dze=o("VisionTextDualEncoderConfig"),Gze=o(" (VisionTextDualEncoder model)"),Oze=l(),Lg=a("li"),lZ=a("strong"),Vze=o("visual_bert"),Xze=o(" \u2014 "),mk=a("a"),zze=o("VisualBertConfig"),Qze=o(" (VisualBert model)"),Wze=l(),xg=a("li"),iZ=a("strong"),Hze=o("vit"),Uze=o(" \u2014 "),gk=a("a"),Jze=o("ViTConfig"),Yze=o(" (ViT model)"),Kze=l(),kg=a("li"),dZ=a("strong"),Zze=o("vit_mae"),eQe=o(" \u2014 "),hk=a("a"),oQe=o("ViTMAEConfig"),rQe=o(" (ViTMAE model)"),tQe=l(),Sg=a("li"),cZ=a("strong"),aQe=o("wav2vec2"),nQe=o(" \u2014 "),pk=a("a"),sQe=o("Wav2Vec2Config"),lQe=o(" (Wav2Vec2 model)"),iQe=l(),Rg=a("li"),fZ=a("strong"),dQe=o("wavlm"),cQe=o(" \u2014 "),_k=a("a"),fQe=o("WavLMConfig"),mQe=o(" (WavLM model)"),gQe=l(),Bg=a("li"),mZ=a("strong"),hQe=o("xglm"),pQe=o(" \u2014 "),uk=a("a"),_Qe=o("XGLMConfig"),uQe=o(" (XGLM model)"),bQe=l(),Pg=a("li"),gZ=a("strong"),vQe=o("xlm"),FQe=o(" \u2014 "),bk=a("a"),TQe=o("XLMConfig"),MQe=o(" (XLM model)"),EQe=l(),$g=a("li"),hZ=a("strong"),CQe=o("xlm-prophetnet"),wQe=o(" \u2014 "),vk=a("a"),AQe=o("XLMProphetNetConfig"),yQe=o(" (XLMProphetNet model)"),LQe=l(),Ig=a("li"),pZ=a("strong"),xQe=o("xlm-roberta"),kQe=o(" \u2014 "),Fk=a("a"),SQe=o("XLMRobertaConfig"),RQe=o(" (XLM-RoBERTa model)"),BQe=l(),qg=a("li"),_Z=a("strong"),PQe=o("xlm-roberta-xl"),$Qe=o(" \u2014 "),Tk=a("a"),IQe=o("XLMRobertaXLConfig"),qQe=o(" (XLM-RoBERTa-XL model)"),NQe=l(),Ng=a("li"),uZ=a("strong"),jQe=o("xlnet"),DQe=o(" \u2014 "),Mk=a("a"),GQe=o("XLNetConfig"),OQe=o(" (XLNet model)"),VQe=l(),jg=a("li"),bZ=a("strong"),XQe=o("yoso"),zQe=o(" \u2014 "),Ek=a("a"),QQe=o("YosoConfig"),WQe=o(" (YOSO model)"),HQe=l(),vZ=a("p"),UQe=o("Examples:"),JQe=l(),f(DE.$$.fragment),YQe=l(),Dg=a("div"),f(GE.$$.fragment),KQe=l(),FZ=a("p"),ZQe=o("Register a new configuration for this class."),XRe=l(),Ui=a("h2"),Gg=a("a"),TZ=a("span"),f(OE.$$.fragment),eWe=l(),MZ=a("span"),oWe=o("AutoTokenizer"),zRe=l(),Wo=a("div"),f(VE.$$.fragment),rWe=l(),XE=a("p"),tWe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Ck=a("a"),aWe=o("AutoTokenizer.from_pretrained()"),nWe=o(" class method."),sWe=l(),zE=a("p"),lWe=o("This class cannot be instantiated directly using "),EZ=a("code"),iWe=o("__init__()"),dWe=o(" (throws an error)."),cWe=l(),go=a("div"),f(QE.$$.fragment),fWe=l(),CZ=a("p"),mWe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),gWe=l(),Oa=a("p"),hWe=o("The tokenizer class to instantiate is selected based on the "),wZ=a("code"),pWe=o("model_type"),_We=o(` property of the config object (either
passed as an argument or loaded from `),AZ=a("code"),uWe=o("pretrained_model_name_or_path"),bWe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yZ=a("code"),vWe=o("pretrained_model_name_or_path"),FWe=o(":"),TWe=l(),E=a("ul"),Wn=a("li"),LZ=a("strong"),MWe=o("albert"),EWe=o(" \u2014 "),wk=a("a"),CWe=o("AlbertTokenizer"),wWe=o(" or "),Ak=a("a"),AWe=o("AlbertTokenizerFast"),yWe=o(" (ALBERT model)"),LWe=l(),Hn=a("li"),xZ=a("strong"),xWe=o("bart"),kWe=o(" \u2014 "),yk=a("a"),SWe=o("BartTokenizer"),RWe=o(" or "),Lk=a("a"),BWe=o("BartTokenizerFast"),PWe=o(" (BART model)"),$We=l(),Un=a("li"),kZ=a("strong"),IWe=o("barthez"),qWe=o(" \u2014 "),xk=a("a"),NWe=o("BarthezTokenizer"),jWe=o(" or "),kk=a("a"),DWe=o("BarthezTokenizerFast"),GWe=o(" (BARThez model)"),OWe=l(),Og=a("li"),SZ=a("strong"),VWe=o("bartpho"),XWe=o(" \u2014 "),Sk=a("a"),zWe=o("BartphoTokenizer"),QWe=o(" (BARTpho model)"),WWe=l(),Jn=a("li"),RZ=a("strong"),HWe=o("bert"),UWe=o(" \u2014 "),Rk=a("a"),JWe=o("BertTokenizer"),YWe=o(" or "),Bk=a("a"),KWe=o("BertTokenizerFast"),ZWe=o(" (BERT model)"),eHe=l(),Vg=a("li"),BZ=a("strong"),oHe=o("bert-generation"),rHe=o(" \u2014 "),Pk=a("a"),tHe=o("BertGenerationTokenizer"),aHe=o(" (Bert Generation model)"),nHe=l(),Xg=a("li"),PZ=a("strong"),sHe=o("bert-japanese"),lHe=o(" \u2014 "),$k=a("a"),iHe=o("BertJapaneseTokenizer"),dHe=o(" (BertJapanese model)"),cHe=l(),zg=a("li"),$Z=a("strong"),fHe=o("bertweet"),mHe=o(" \u2014 "),Ik=a("a"),gHe=o("BertweetTokenizer"),hHe=o(" (Bertweet model)"),pHe=l(),Yn=a("li"),IZ=a("strong"),_He=o("big_bird"),uHe=o(" \u2014 "),qk=a("a"),bHe=o("BigBirdTokenizer"),vHe=o(" or "),Nk=a("a"),FHe=o("BigBirdTokenizerFast"),THe=o(" (BigBird model)"),MHe=l(),Kn=a("li"),qZ=a("strong"),EHe=o("bigbird_pegasus"),CHe=o(" \u2014 "),jk=a("a"),wHe=o("PegasusTokenizer"),AHe=o(" or "),Dk=a("a"),yHe=o("PegasusTokenizerFast"),LHe=o(" (BigBirdPegasus model)"),xHe=l(),Zn=a("li"),NZ=a("strong"),kHe=o("blenderbot"),SHe=o(" \u2014 "),Gk=a("a"),RHe=o("BlenderbotTokenizer"),BHe=o(" or "),Ok=a("a"),PHe=o("BlenderbotTokenizerFast"),$He=o(" (Blenderbot model)"),IHe=l(),Qg=a("li"),jZ=a("strong"),qHe=o("blenderbot-small"),NHe=o(" \u2014 "),Vk=a("a"),jHe=o("BlenderbotSmallTokenizer"),DHe=o(" (BlenderbotSmall model)"),GHe=l(),Wg=a("li"),DZ=a("strong"),OHe=o("byt5"),VHe=o(" \u2014 "),Xk=a("a"),XHe=o("ByT5Tokenizer"),zHe=o(" (ByT5 model)"),QHe=l(),es=a("li"),GZ=a("strong"),WHe=o("camembert"),HHe=o(" \u2014 "),zk=a("a"),UHe=o("CamembertTokenizer"),JHe=o(" or "),Qk=a("a"),YHe=o("CamembertTokenizerFast"),KHe=o(" (CamemBERT model)"),ZHe=l(),Hg=a("li"),OZ=a("strong"),eUe=o("canine"),oUe=o(" \u2014 "),Wk=a("a"),rUe=o("CanineTokenizer"),tUe=o(" (Canine model)"),aUe=l(),os=a("li"),VZ=a("strong"),nUe=o("clip"),sUe=o(" \u2014 "),Hk=a("a"),lUe=o("CLIPTokenizer"),iUe=o(" or "),Uk=a("a"),dUe=o("CLIPTokenizerFast"),cUe=o(" (CLIP model)"),fUe=l(),rs=a("li"),XZ=a("strong"),mUe=o("convbert"),gUe=o(" \u2014 "),Jk=a("a"),hUe=o("ConvBertTokenizer"),pUe=o(" or "),Yk=a("a"),_Ue=o("ConvBertTokenizerFast"),uUe=o(" (ConvBERT model)"),bUe=l(),ts=a("li"),zZ=a("strong"),vUe=o("cpm"),FUe=o(" \u2014 "),Kk=a("a"),TUe=o("CpmTokenizer"),MUe=o(" or "),QZ=a("code"),EUe=o("CpmTokenizerFast"),CUe=o(" (CPM model)"),wUe=l(),Ug=a("li"),WZ=a("strong"),AUe=o("ctrl"),yUe=o(" \u2014 "),Zk=a("a"),LUe=o("CTRLTokenizer"),xUe=o(" (CTRL model)"),kUe=l(),as=a("li"),HZ=a("strong"),SUe=o("deberta"),RUe=o(" \u2014 "),eS=a("a"),BUe=o("DebertaTokenizer"),PUe=o(" or "),oS=a("a"),$Ue=o("DebertaTokenizerFast"),IUe=o(" (DeBERTa model)"),qUe=l(),ns=a("li"),UZ=a("strong"),NUe=o("deberta-v2"),jUe=o(" \u2014 "),rS=a("a"),DUe=o("DebertaV2Tokenizer"),GUe=o(" or "),tS=a("a"),OUe=o("DebertaV2TokenizerFast"),VUe=o(" (DeBERTa-v2 model)"),XUe=l(),ss=a("li"),JZ=a("strong"),zUe=o("distilbert"),QUe=o(" \u2014 "),aS=a("a"),WUe=o("DistilBertTokenizer"),HUe=o(" or "),nS=a("a"),UUe=o("DistilBertTokenizerFast"),JUe=o(" (DistilBERT model)"),YUe=l(),ls=a("li"),YZ=a("strong"),KUe=o("dpr"),ZUe=o(" \u2014 "),sS=a("a"),eJe=o("DPRQuestionEncoderTokenizer"),oJe=o(" or "),lS=a("a"),rJe=o("DPRQuestionEncoderTokenizerFast"),tJe=o(" (DPR model)"),aJe=l(),is=a("li"),KZ=a("strong"),nJe=o("electra"),sJe=o(" \u2014 "),iS=a("a"),lJe=o("ElectraTokenizer"),iJe=o(" or "),dS=a("a"),dJe=o("ElectraTokenizerFast"),cJe=o(" (ELECTRA model)"),fJe=l(),Jg=a("li"),ZZ=a("strong"),mJe=o("flaubert"),gJe=o(" \u2014 "),cS=a("a"),hJe=o("FlaubertTokenizer"),pJe=o(" (FlauBERT model)"),_Je=l(),ds=a("li"),eee=a("strong"),uJe=o("fnet"),bJe=o(" \u2014 "),fS=a("a"),vJe=o("FNetTokenizer"),FJe=o(" or "),mS=a("a"),TJe=o("FNetTokenizerFast"),MJe=o(" (FNet model)"),EJe=l(),Yg=a("li"),oee=a("strong"),CJe=o("fsmt"),wJe=o(" \u2014 "),gS=a("a"),AJe=o("FSMTTokenizer"),yJe=o(" (FairSeq Machine-Translation model)"),LJe=l(),cs=a("li"),ree=a("strong"),xJe=o("funnel"),kJe=o(" \u2014 "),hS=a("a"),SJe=o("FunnelTokenizer"),RJe=o(" or "),pS=a("a"),BJe=o("FunnelTokenizerFast"),PJe=o(" (Funnel Transformer model)"),$Je=l(),fs=a("li"),tee=a("strong"),IJe=o("gpt2"),qJe=o(" \u2014 "),_S=a("a"),NJe=o("GPT2Tokenizer"),jJe=o(" or "),uS=a("a"),DJe=o("GPT2TokenizerFast"),GJe=o(" (OpenAI GPT-2 model)"),OJe=l(),ms=a("li"),aee=a("strong"),VJe=o("gpt_neo"),XJe=o(" \u2014 "),bS=a("a"),zJe=o("GPT2Tokenizer"),QJe=o(" or "),vS=a("a"),WJe=o("GPT2TokenizerFast"),HJe=o(" (GPT Neo model)"),UJe=l(),gs=a("li"),nee=a("strong"),JJe=o("gptj"),YJe=o(" \u2014 "),FS=a("a"),KJe=o("GPT2Tokenizer"),ZJe=o(" or "),TS=a("a"),eYe=o("GPT2TokenizerFast"),oYe=o(" (GPT-J model)"),rYe=l(),hs=a("li"),see=a("strong"),tYe=o("herbert"),aYe=o(" \u2014 "),MS=a("a"),nYe=o("HerbertTokenizer"),sYe=o(" or "),ES=a("a"),lYe=o("HerbertTokenizerFast"),iYe=o(" (HerBERT model)"),dYe=l(),Kg=a("li"),lee=a("strong"),cYe=o("hubert"),fYe=o(" \u2014 "),CS=a("a"),mYe=o("Wav2Vec2CTCTokenizer"),gYe=o(" (Hubert model)"),hYe=l(),ps=a("li"),iee=a("strong"),pYe=o("ibert"),_Ye=o(" \u2014 "),wS=a("a"),uYe=o("RobertaTokenizer"),bYe=o(" or "),AS=a("a"),vYe=o("RobertaTokenizerFast"),FYe=o(" (I-BERT model)"),TYe=l(),_s=a("li"),dee=a("strong"),MYe=o("layoutlm"),EYe=o(" \u2014 "),yS=a("a"),CYe=o("LayoutLMTokenizer"),wYe=o(" or "),LS=a("a"),AYe=o("LayoutLMTokenizerFast"),yYe=o(" (LayoutLM model)"),LYe=l(),us=a("li"),cee=a("strong"),xYe=o("layoutlmv2"),kYe=o(" \u2014 "),xS=a("a"),SYe=o("LayoutLMv2Tokenizer"),RYe=o(" or "),kS=a("a"),BYe=o("LayoutLMv2TokenizerFast"),PYe=o(" (LayoutLMv2 model)"),$Ye=l(),bs=a("li"),fee=a("strong"),IYe=o("layoutxlm"),qYe=o(" \u2014 "),SS=a("a"),NYe=o("LayoutXLMTokenizer"),jYe=o(" or "),RS=a("a"),DYe=o("LayoutXLMTokenizerFast"),GYe=o(" (LayoutXLM model)"),OYe=l(),vs=a("li"),mee=a("strong"),VYe=o("led"),XYe=o(" \u2014 "),BS=a("a"),zYe=o("LEDTokenizer"),QYe=o(" or "),PS=a("a"),WYe=o("LEDTokenizerFast"),HYe=o(" (LED model)"),UYe=l(),Fs=a("li"),gee=a("strong"),JYe=o("longformer"),YYe=o(" \u2014 "),$S=a("a"),KYe=o("LongformerTokenizer"),ZYe=o(" or "),IS=a("a"),eKe=o("LongformerTokenizerFast"),oKe=o(" (Longformer model)"),rKe=l(),Zg=a("li"),hee=a("strong"),tKe=o("luke"),aKe=o(" \u2014 "),qS=a("a"),nKe=o("LukeTokenizer"),sKe=o(" (LUKE model)"),lKe=l(),Ts=a("li"),pee=a("strong"),iKe=o("lxmert"),dKe=o(" \u2014 "),NS=a("a"),cKe=o("LxmertTokenizer"),fKe=o(" or "),jS=a("a"),mKe=o("LxmertTokenizerFast"),gKe=o(" (LXMERT model)"),hKe=l(),eh=a("li"),_ee=a("strong"),pKe=o("m2m_100"),_Ke=o(" \u2014 "),DS=a("a"),uKe=o("M2M100Tokenizer"),bKe=o(" (M2M100 model)"),vKe=l(),oh=a("li"),uee=a("strong"),FKe=o("marian"),TKe=o(" \u2014 "),GS=a("a"),MKe=o("MarianTokenizer"),EKe=o(" (Marian model)"),CKe=l(),Ms=a("li"),bee=a("strong"),wKe=o("mbart"),AKe=o(" \u2014 "),OS=a("a"),yKe=o("MBartTokenizer"),LKe=o(" or "),VS=a("a"),xKe=o("MBartTokenizerFast"),kKe=o(" (mBART model)"),SKe=l(),Es=a("li"),vee=a("strong"),RKe=o("mbart50"),BKe=o(" \u2014 "),XS=a("a"),PKe=o("MBart50Tokenizer"),$Ke=o(" or "),zS=a("a"),IKe=o("MBart50TokenizerFast"),qKe=o(" (mBART-50 model)"),NKe=l(),rh=a("li"),Fee=a("strong"),jKe=o("mluke"),DKe=o(" \u2014 "),QS=a("a"),GKe=o("MLukeTokenizer"),OKe=o(" (mLUKE model)"),VKe=l(),Cs=a("li"),Tee=a("strong"),XKe=o("mobilebert"),zKe=o(" \u2014 "),WS=a("a"),QKe=o("MobileBertTokenizer"),WKe=o(" or "),HS=a("a"),HKe=o("MobileBertTokenizerFast"),UKe=o(" (MobileBERT model)"),JKe=l(),ws=a("li"),Mee=a("strong"),YKe=o("mpnet"),KKe=o(" \u2014 "),US=a("a"),ZKe=o("MPNetTokenizer"),eZe=o(" or "),JS=a("a"),oZe=o("MPNetTokenizerFast"),rZe=o(" (MPNet model)"),tZe=l(),As=a("li"),Eee=a("strong"),aZe=o("mt5"),nZe=o(" \u2014 "),YS=a("a"),sZe=o("MT5Tokenizer"),lZe=o(" or "),KS=a("a"),iZe=o("MT5TokenizerFast"),dZe=o(" (mT5 model)"),cZe=l(),ys=a("li"),Cee=a("strong"),fZe=o("openai-gpt"),mZe=o(" \u2014 "),ZS=a("a"),gZe=o("OpenAIGPTTokenizer"),hZe=o(" or "),eR=a("a"),pZe=o("OpenAIGPTTokenizerFast"),_Ze=o(" (OpenAI GPT model)"),uZe=l(),Ls=a("li"),wee=a("strong"),bZe=o("pegasus"),vZe=o(" \u2014 "),oR=a("a"),FZe=o("PegasusTokenizer"),TZe=o(" or "),rR=a("a"),MZe=o("PegasusTokenizerFast"),EZe=o(" (Pegasus model)"),CZe=l(),th=a("li"),Aee=a("strong"),wZe=o("perceiver"),AZe=o(" \u2014 "),tR=a("a"),yZe=o("PerceiverTokenizer"),LZe=o(" (Perceiver model)"),xZe=l(),ah=a("li"),yee=a("strong"),kZe=o("phobert"),SZe=o(" \u2014 "),aR=a("a"),RZe=o("PhobertTokenizer"),BZe=o(" (PhoBERT model)"),PZe=l(),nh=a("li"),Lee=a("strong"),$Ze=o("plbart"),IZe=o(" \u2014 "),nR=a("a"),qZe=o("PLBartTokenizer"),NZe=o(" (PLBart model)"),jZe=l(),sh=a("li"),xee=a("strong"),DZe=o("prophetnet"),GZe=o(" \u2014 "),sR=a("a"),OZe=o("ProphetNetTokenizer"),VZe=o(" (ProphetNet model)"),XZe=l(),xs=a("li"),kee=a("strong"),zZe=o("qdqbert"),QZe=o(" \u2014 "),lR=a("a"),WZe=o("BertTokenizer"),HZe=o(" or "),iR=a("a"),UZe=o("BertTokenizerFast"),JZe=o(" (QDQBert model)"),YZe=l(),lh=a("li"),See=a("strong"),KZe=o("rag"),ZZe=o(" \u2014 "),dR=a("a"),eeo=o("RagTokenizer"),oeo=o(" (RAG model)"),reo=l(),ks=a("li"),Ree=a("strong"),teo=o("realm"),aeo=o(" \u2014 "),cR=a("a"),neo=o("RealmTokenizer"),seo=o(" or "),fR=a("a"),leo=o("RealmTokenizerFast"),ieo=o(" (Realm model)"),deo=l(),Ss=a("li"),Bee=a("strong"),ceo=o("reformer"),feo=o(" \u2014 "),mR=a("a"),meo=o("ReformerTokenizer"),geo=o(" or "),gR=a("a"),heo=o("ReformerTokenizerFast"),peo=o(" (Reformer model)"),_eo=l(),Rs=a("li"),Pee=a("strong"),ueo=o("rembert"),beo=o(" \u2014 "),hR=a("a"),veo=o("RemBertTokenizer"),Feo=o(" or "),pR=a("a"),Teo=o("RemBertTokenizerFast"),Meo=o(" (RemBERT model)"),Eeo=l(),Bs=a("li"),$ee=a("strong"),Ceo=o("retribert"),weo=o(" \u2014 "),_R=a("a"),Aeo=o("RetriBertTokenizer"),yeo=o(" or "),uR=a("a"),Leo=o("RetriBertTokenizerFast"),xeo=o(" (RetriBERT model)"),keo=l(),Ps=a("li"),Iee=a("strong"),Seo=o("roberta"),Reo=o(" \u2014 "),bR=a("a"),Beo=o("RobertaTokenizer"),Peo=o(" or "),vR=a("a"),$eo=o("RobertaTokenizerFast"),Ieo=o(" (RoBERTa model)"),qeo=l(),$s=a("li"),qee=a("strong"),Neo=o("roformer"),jeo=o(" \u2014 "),FR=a("a"),Deo=o("RoFormerTokenizer"),Geo=o(" or "),TR=a("a"),Oeo=o("RoFormerTokenizerFast"),Veo=o(" (RoFormer model)"),Xeo=l(),ih=a("li"),Nee=a("strong"),zeo=o("speech_to_text"),Qeo=o(" \u2014 "),MR=a("a"),Weo=o("Speech2TextTokenizer"),Heo=o(" (Speech2Text model)"),Ueo=l(),dh=a("li"),jee=a("strong"),Jeo=o("speech_to_text_2"),Yeo=o(" \u2014 "),ER=a("a"),Keo=o("Speech2Text2Tokenizer"),Zeo=o(" (Speech2Text2 model)"),eoo=l(),Is=a("li"),Dee=a("strong"),ooo=o("splinter"),roo=o(" \u2014 "),CR=a("a"),too=o("SplinterTokenizer"),aoo=o(" or "),wR=a("a"),noo=o("SplinterTokenizerFast"),soo=o(" (Splinter model)"),loo=l(),qs=a("li"),Gee=a("strong"),ioo=o("squeezebert"),doo=o(" \u2014 "),AR=a("a"),coo=o("SqueezeBertTokenizer"),foo=o(" or "),yR=a("a"),moo=o("SqueezeBertTokenizerFast"),goo=o(" (SqueezeBERT model)"),hoo=l(),Ns=a("li"),Oee=a("strong"),poo=o("t5"),_oo=o(" \u2014 "),LR=a("a"),uoo=o("T5Tokenizer"),boo=o(" or "),xR=a("a"),voo=o("T5TokenizerFast"),Foo=o(" (T5 model)"),Too=l(),ch=a("li"),Vee=a("strong"),Moo=o("tapas"),Eoo=o(" \u2014 "),kR=a("a"),Coo=o("TapasTokenizer"),woo=o(" (TAPAS model)"),Aoo=l(),fh=a("li"),Xee=a("strong"),yoo=o("tapex"),Loo=o(" \u2014 "),SR=a("a"),xoo=o("TapexTokenizer"),koo=o(" (TAPEX model)"),Soo=l(),mh=a("li"),zee=a("strong"),Roo=o("transfo-xl"),Boo=o(" \u2014 "),RR=a("a"),Poo=o("TransfoXLTokenizer"),$oo=o(" (Transformer-XL model)"),Ioo=l(),gh=a("li"),Qee=a("strong"),qoo=o("wav2vec2"),Noo=o(" \u2014 "),BR=a("a"),joo=o("Wav2Vec2CTCTokenizer"),Doo=o(" (Wav2Vec2 model)"),Goo=l(),hh=a("li"),Wee=a("strong"),Ooo=o("wav2vec2_phoneme"),Voo=o(" \u2014 "),PR=a("a"),Xoo=o("Wav2Vec2PhonemeCTCTokenizer"),zoo=o(" (Wav2Vec2Phoneme model)"),Qoo=l(),js=a("li"),Hee=a("strong"),Woo=o("xglm"),Hoo=o(" \u2014 "),$R=a("a"),Uoo=o("XGLMTokenizer"),Joo=o(" or "),IR=a("a"),Yoo=o("XGLMTokenizerFast"),Koo=o(" (XGLM model)"),Zoo=l(),ph=a("li"),Uee=a("strong"),ero=o("xlm"),oro=o(" \u2014 "),qR=a("a"),rro=o("XLMTokenizer"),tro=o(" (XLM model)"),aro=l(),_h=a("li"),Jee=a("strong"),nro=o("xlm-prophetnet"),sro=o(" \u2014 "),NR=a("a"),lro=o("XLMProphetNetTokenizer"),iro=o(" (XLMProphetNet model)"),dro=l(),Ds=a("li"),Yee=a("strong"),cro=o("xlm-roberta"),fro=o(" \u2014 "),jR=a("a"),mro=o("XLMRobertaTokenizer"),gro=o(" or "),DR=a("a"),hro=o("XLMRobertaTokenizerFast"),pro=o(" (XLM-RoBERTa model)"),_ro=l(),Gs=a("li"),Kee=a("strong"),uro=o("xlnet"),bro=o(" \u2014 "),GR=a("a"),vro=o("XLNetTokenizer"),Fro=o(" or "),OR=a("a"),Tro=o("XLNetTokenizerFast"),Mro=o(" (XLNet model)"),Ero=l(),Zee=a("p"),Cro=o("Examples:"),wro=l(),f(WE.$$.fragment),Aro=l(),uh=a("div"),f(HE.$$.fragment),yro=l(),eoe=a("p"),Lro=o("Register a new tokenizer in this mapping."),QRe=l(),Ji=a("h2"),bh=a("a"),ooe=a("span"),f(UE.$$.fragment),xro=l(),roe=a("span"),kro=o("AutoFeatureExtractor"),WRe=l(),Ho=a("div"),f(JE.$$.fragment),Sro=l(),YE=a("p"),Rro=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),VR=a("a"),Bro=o("AutoFeatureExtractor.from_pretrained()"),Pro=o(" class method."),$ro=l(),KE=a("p"),Iro=o("This class cannot be instantiated directly using "),toe=a("code"),qro=o("__init__()"),Nro=o(" (throws an error)."),jro=l(),$e=a("div"),f(ZE.$$.fragment),Dro=l(),aoe=a("p"),Gro=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Oro=l(),Va=a("p"),Vro=o("The feature extractor class to instantiate is selected based on the "),noe=a("code"),Xro=o("model_type"),zro=o(` property of the config object
(either passed as an argument or loaded from `),soe=a("code"),Qro=o("pretrained_model_name_or_path"),Wro=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),loe=a("code"),Hro=o("pretrained_model_name_or_path"),Uro=o(":"),Jro=l(),ee=a("ul"),vh=a("li"),ioe=a("strong"),Yro=o("beit"),Kro=o(" \u2014 "),XR=a("a"),Zro=o("BeitFeatureExtractor"),eto=o(" (BEiT model)"),oto=l(),Fh=a("li"),doe=a("strong"),rto=o("clip"),tto=o(" \u2014 "),zR=a("a"),ato=o("CLIPFeatureExtractor"),nto=o(" (CLIP model)"),sto=l(),Th=a("li"),coe=a("strong"),lto=o("convnext"),ito=o(" \u2014 "),QR=a("a"),dto=o("ConvNextFeatureExtractor"),cto=o(" (ConvNext model)"),fto=l(),Mh=a("li"),foe=a("strong"),mto=o("deit"),gto=o(" \u2014 "),WR=a("a"),hto=o("DeiTFeatureExtractor"),pto=o(" (DeiT model)"),_to=l(),Eh=a("li"),moe=a("strong"),uto=o("detr"),bto=o(" \u2014 "),HR=a("a"),vto=o("DetrFeatureExtractor"),Fto=o(" (DETR model)"),Tto=l(),Ch=a("li"),goe=a("strong"),Mto=o("hubert"),Eto=o(" \u2014 "),UR=a("a"),Cto=o("Wav2Vec2FeatureExtractor"),wto=o(" (Hubert model)"),Ato=l(),wh=a("li"),hoe=a("strong"),yto=o("layoutlmv2"),Lto=o(" \u2014 "),JR=a("a"),xto=o("LayoutLMv2FeatureExtractor"),kto=o(" (LayoutLMv2 model)"),Sto=l(),Ah=a("li"),poe=a("strong"),Rto=o("maskformer"),Bto=o(" \u2014 "),YR=a("a"),Pto=o("MaskFormerFeatureExtractor"),$to=o(" (MaskFormer model)"),Ito=l(),yh=a("li"),_oe=a("strong"),qto=o("perceiver"),Nto=o(" \u2014 "),KR=a("a"),jto=o("PerceiverFeatureExtractor"),Dto=o(" (Perceiver model)"),Gto=l(),Lh=a("li"),uoe=a("strong"),Oto=o("poolformer"),Vto=o(" \u2014 "),ZR=a("a"),Xto=o("PoolFormerFeatureExtractor"),zto=o(" (PoolFormer model)"),Qto=l(),xh=a("li"),boe=a("strong"),Wto=o("regnet"),Hto=o(" \u2014 "),eB=a("a"),Uto=o("ConvNextFeatureExtractor"),Jto=o(" (RegNet model)"),Yto=l(),kh=a("li"),voe=a("strong"),Kto=o("resnet"),Zto=o(" \u2014 "),oB=a("a"),eao=o("ConvNextFeatureExtractor"),oao=o(" (ResNet model)"),rao=l(),Sh=a("li"),Foe=a("strong"),tao=o("segformer"),aao=o(" \u2014 "),rB=a("a"),nao=o("SegformerFeatureExtractor"),sao=o(" (SegFormer model)"),lao=l(),Rh=a("li"),Toe=a("strong"),iao=o("speech_to_text"),dao=o(" \u2014 "),tB=a("a"),cao=o("Speech2TextFeatureExtractor"),fao=o(" (Speech2Text model)"),mao=l(),Bh=a("li"),Moe=a("strong"),gao=o("swin"),hao=o(" \u2014 "),aB=a("a"),pao=o("ViTFeatureExtractor"),_ao=o(" (Swin model)"),uao=l(),Ph=a("li"),Eoe=a("strong"),bao=o("van"),vao=o(" \u2014 "),nB=a("a"),Fao=o("ConvNextFeatureExtractor"),Tao=o(" (VAN model)"),Mao=l(),$h=a("li"),Coe=a("strong"),Eao=o("vit"),Cao=o(" \u2014 "),sB=a("a"),wao=o("ViTFeatureExtractor"),Aao=o(" (ViT model)"),yao=l(),Ih=a("li"),woe=a("strong"),Lao=o("vit_mae"),xao=o(" \u2014 "),lB=a("a"),kao=o("ViTFeatureExtractor"),Sao=o(" (ViTMAE model)"),Rao=l(),qh=a("li"),Aoe=a("strong"),Bao=o("wav2vec2"),Pao=o(" \u2014 "),iB=a("a"),$ao=o("Wav2Vec2FeatureExtractor"),Iao=o(" (Wav2Vec2 model)"),qao=l(),f(Nh.$$.fragment),Nao=l(),yoe=a("p"),jao=o("Examples:"),Dao=l(),f(e5.$$.fragment),Gao=l(),jh=a("div"),f(o5.$$.fragment),Oao=l(),Loe=a("p"),Vao=o("Register a new feature extractor for this class."),HRe=l(),Yi=a("h2"),Dh=a("a"),xoe=a("span"),f(r5.$$.fragment),Xao=l(),koe=a("span"),zao=o("AutoProcessor"),URe=l(),Uo=a("div"),f(t5.$$.fragment),Qao=l(),a5=a("p"),Wao=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dB=a("a"),Hao=o("AutoProcessor.from_pretrained()"),Uao=o(" class method."),Jao=l(),n5=a("p"),Yao=o("This class cannot be instantiated directly using "),Soe=a("code"),Kao=o("__init__()"),Zao=o(" (throws an error)."),eno=l(),Ie=a("div"),f(s5.$$.fragment),ono=l(),Roe=a("p"),rno=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),tno=l(),Ki=a("p"),ano=o("The processor class to instantiate is selected based on the "),Boe=a("code"),nno=o("model_type"),sno=o(` property of the config object (either
passed as an argument or loaded from `),Poe=a("code"),lno=o("pretrained_model_name_or_path"),ino=o(" if possible):"),dno=l(),ke=a("ul"),Gh=a("li"),$oe=a("strong"),cno=o("clip"),fno=o(" \u2014 "),cB=a("a"),mno=o("CLIPProcessor"),gno=o(" (CLIP model)"),hno=l(),Oh=a("li"),Ioe=a("strong"),pno=o("layoutlmv2"),_no=o(" \u2014 "),fB=a("a"),uno=o("LayoutLMv2Processor"),bno=o(" (LayoutLMv2 model)"),vno=l(),Vh=a("li"),qoe=a("strong"),Fno=o("layoutxlm"),Tno=o(" \u2014 "),mB=a("a"),Mno=o("LayoutXLMProcessor"),Eno=o(" (LayoutXLM model)"),Cno=l(),Xh=a("li"),Noe=a("strong"),wno=o("speech_to_text"),Ano=o(" \u2014 "),gB=a("a"),yno=o("Speech2TextProcessor"),Lno=o(" (Speech2Text model)"),xno=l(),zh=a("li"),joe=a("strong"),kno=o("speech_to_text_2"),Sno=o(" \u2014 "),hB=a("a"),Rno=o("Speech2Text2Processor"),Bno=o(" (Speech2Text2 model)"),Pno=l(),Qh=a("li"),Doe=a("strong"),$no=o("trocr"),Ino=o(" \u2014 "),pB=a("a"),qno=o("TrOCRProcessor"),Nno=o(" (TrOCR model)"),jno=l(),Wh=a("li"),Goe=a("strong"),Dno=o("vision-text-dual-encoder"),Gno=o(" \u2014 "),_B=a("a"),Ono=o("VisionTextDualEncoderProcessor"),Vno=o(" (VisionTextDualEncoder model)"),Xno=l(),Hh=a("li"),Ooe=a("strong"),zno=o("wav2vec2"),Qno=o(" \u2014 "),uB=a("a"),Wno=o("Wav2Vec2Processor"),Hno=o(" (Wav2Vec2 model)"),Uno=l(),f(Uh.$$.fragment),Jno=l(),Voe=a("p"),Yno=o("Examples:"),Kno=l(),f(l5.$$.fragment),Zno=l(),Jh=a("div"),f(i5.$$.fragment),eso=l(),Xoe=a("p"),oso=o("Register a new processor for this class."),JRe=l(),Zi=a("h2"),Yh=a("a"),zoe=a("span"),f(d5.$$.fragment),rso=l(),Qoe=a("span"),tso=o("AutoModel"),YRe=l(),Jo=a("div"),f(c5.$$.fragment),aso=l(),ed=a("p"),nso=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bB=a("a"),sso=o("from_pretrained()"),lso=o(" class method or the "),vB=a("a"),iso=o("from_config()"),dso=o(` class
method.`),cso=l(),f5=a("p"),fso=o("This class cannot be instantiated directly using "),Woe=a("code"),mso=o("__init__()"),gso=o(" (throws an error)."),hso=l(),Xr=a("div"),f(m5.$$.fragment),pso=l(),Hoe=a("p"),_so=o("Instantiates one of the base model classes of the library from a configuration."),uso=l(),od=a("p"),bso=o(`Note:
Loading a model from its configuration file does `),Uoe=a("strong"),vso=o("not"),Fso=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FB=a("a"),Tso=o("from_pretrained()"),Mso=o(" to load the model weights."),Eso=l(),Joe=a("p"),Cso=o("Examples:"),wso=l(),f(g5.$$.fragment),Aso=l(),qe=a("div"),f(h5.$$.fragment),yso=l(),Yoe=a("p"),Lso=o("Instantiate one of the base model classes of the library from a pretrained model."),xso=l(),Xa=a("p"),kso=o("The model class to instantiate is selected based on the "),Koe=a("code"),Sso=o("model_type"),Rso=o(` property of the config object (either
passed as an argument or loaded from `),Zoe=a("code"),Bso=o("pretrained_model_name_or_path"),Pso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ere=a("code"),$so=o("pretrained_model_name_or_path"),Iso=o(":"),qso=l(),T=a("ul"),Kh=a("li"),ore=a("strong"),Nso=o("albert"),jso=o(" \u2014 "),TB=a("a"),Dso=o("AlbertModel"),Gso=o(" (ALBERT model)"),Oso=l(),Zh=a("li"),rre=a("strong"),Vso=o("bart"),Xso=o(" \u2014 "),MB=a("a"),zso=o("BartModel"),Qso=o(" (BART model)"),Wso=l(),ep=a("li"),tre=a("strong"),Hso=o("beit"),Uso=o(" \u2014 "),EB=a("a"),Jso=o("BeitModel"),Yso=o(" (BEiT model)"),Kso=l(),op=a("li"),are=a("strong"),Zso=o("bert"),elo=o(" \u2014 "),CB=a("a"),olo=o("BertModel"),rlo=o(" (BERT model)"),tlo=l(),rp=a("li"),nre=a("strong"),alo=o("bert-generation"),nlo=o(" \u2014 "),wB=a("a"),slo=o("BertGenerationEncoder"),llo=o(" (Bert Generation model)"),ilo=l(),tp=a("li"),sre=a("strong"),dlo=o("big_bird"),clo=o(" \u2014 "),AB=a("a"),flo=o("BigBirdModel"),mlo=o(" (BigBird model)"),glo=l(),ap=a("li"),lre=a("strong"),hlo=o("bigbird_pegasus"),plo=o(" \u2014 "),yB=a("a"),_lo=o("BigBirdPegasusModel"),ulo=o(" (BigBirdPegasus model)"),blo=l(),np=a("li"),ire=a("strong"),vlo=o("blenderbot"),Flo=o(" \u2014 "),LB=a("a"),Tlo=o("BlenderbotModel"),Mlo=o(" (Blenderbot model)"),Elo=l(),sp=a("li"),dre=a("strong"),Clo=o("blenderbot-small"),wlo=o(" \u2014 "),xB=a("a"),Alo=o("BlenderbotSmallModel"),ylo=o(" (BlenderbotSmall model)"),Llo=l(),lp=a("li"),cre=a("strong"),xlo=o("camembert"),klo=o(" \u2014 "),kB=a("a"),Slo=o("CamembertModel"),Rlo=o(" (CamemBERT model)"),Blo=l(),ip=a("li"),fre=a("strong"),Plo=o("canine"),$lo=o(" \u2014 "),SB=a("a"),Ilo=o("CanineModel"),qlo=o(" (Canine model)"),Nlo=l(),dp=a("li"),mre=a("strong"),jlo=o("clip"),Dlo=o(" \u2014 "),RB=a("a"),Glo=o("CLIPModel"),Olo=o(" (CLIP model)"),Vlo=l(),cp=a("li"),gre=a("strong"),Xlo=o("convbert"),zlo=o(" \u2014 "),BB=a("a"),Qlo=o("ConvBertModel"),Wlo=o(" (ConvBERT model)"),Hlo=l(),fp=a("li"),hre=a("strong"),Ulo=o("convnext"),Jlo=o(" \u2014 "),PB=a("a"),Ylo=o("ConvNextModel"),Klo=o(" (ConvNext model)"),Zlo=l(),mp=a("li"),pre=a("strong"),eio=o("ctrl"),oio=o(" \u2014 "),$B=a("a"),rio=o("CTRLModel"),tio=o(" (CTRL model)"),aio=l(),gp=a("li"),_re=a("strong"),nio=o("data2vec-audio"),sio=o(" \u2014 "),IB=a("a"),lio=o("Data2VecAudioModel"),iio=o(" (Data2VecAudio model)"),dio=l(),hp=a("li"),ure=a("strong"),cio=o("data2vec-text"),fio=o(" \u2014 "),qB=a("a"),mio=o("Data2VecTextModel"),gio=o(" (Data2VecText model)"),hio=l(),pp=a("li"),bre=a("strong"),pio=o("data2vec-vision"),_io=o(" \u2014 "),NB=a("a"),uio=o("Data2VecVisionModel"),bio=o(" (Data2VecVision model)"),vio=l(),_p=a("li"),vre=a("strong"),Fio=o("deberta"),Tio=o(" \u2014 "),jB=a("a"),Mio=o("DebertaModel"),Eio=o(" (DeBERTa model)"),Cio=l(),up=a("li"),Fre=a("strong"),wio=o("deberta-v2"),Aio=o(" \u2014 "),DB=a("a"),yio=o("DebertaV2Model"),Lio=o(" (DeBERTa-v2 model)"),xio=l(),bp=a("li"),Tre=a("strong"),kio=o("decision_transformer"),Sio=o(" \u2014 "),GB=a("a"),Rio=o("DecisionTransformerModel"),Bio=o(" (Decision Transformer model)"),Pio=l(),vp=a("li"),Mre=a("strong"),$io=o("deit"),Iio=o(" \u2014 "),OB=a("a"),qio=o("DeiTModel"),Nio=o(" (DeiT model)"),jio=l(),Fp=a("li"),Ere=a("strong"),Dio=o("detr"),Gio=o(" \u2014 "),VB=a("a"),Oio=o("DetrModel"),Vio=o(" (DETR model)"),Xio=l(),Tp=a("li"),Cre=a("strong"),zio=o("distilbert"),Qio=o(" \u2014 "),XB=a("a"),Wio=o("DistilBertModel"),Hio=o(" (DistilBERT model)"),Uio=l(),Mp=a("li"),wre=a("strong"),Jio=o("dpr"),Yio=o(" \u2014 "),zB=a("a"),Kio=o("DPRQuestionEncoder"),Zio=o(" (DPR model)"),edo=l(),Ep=a("li"),Are=a("strong"),odo=o("dpt"),rdo=o(" \u2014 "),QB=a("a"),tdo=o("DPTModel"),ado=o(" (DPT model)"),ndo=l(),Cp=a("li"),yre=a("strong"),sdo=o("electra"),ldo=o(" \u2014 "),WB=a("a"),ido=o("ElectraModel"),ddo=o(" (ELECTRA model)"),cdo=l(),wp=a("li"),Lre=a("strong"),fdo=o("flaubert"),mdo=o(" \u2014 "),HB=a("a"),gdo=o("FlaubertModel"),hdo=o(" (FlauBERT model)"),pdo=l(),Ap=a("li"),xre=a("strong"),_do=o("fnet"),udo=o(" \u2014 "),UB=a("a"),bdo=o("FNetModel"),vdo=o(" (FNet model)"),Fdo=l(),yp=a("li"),kre=a("strong"),Tdo=o("fsmt"),Mdo=o(" \u2014 "),JB=a("a"),Edo=o("FSMTModel"),Cdo=o(" (FairSeq Machine-Translation model)"),wdo=l(),Os=a("li"),Sre=a("strong"),Ado=o("funnel"),ydo=o(" \u2014 "),YB=a("a"),Ldo=o("FunnelModel"),xdo=o(" or "),KB=a("a"),kdo=o("FunnelBaseModel"),Sdo=o(" (Funnel Transformer model)"),Rdo=l(),Lp=a("li"),Rre=a("strong"),Bdo=o("glpn"),Pdo=o(" \u2014 "),ZB=a("a"),$do=o("GLPNModel"),Ido=o(" (GLPN model)"),qdo=l(),xp=a("li"),Bre=a("strong"),Ndo=o("gpt2"),jdo=o(" \u2014 "),eP=a("a"),Ddo=o("GPT2Model"),Gdo=o(" (OpenAI GPT-2 model)"),Odo=l(),kp=a("li"),Pre=a("strong"),Vdo=o("gpt_neo"),Xdo=o(" \u2014 "),oP=a("a"),zdo=o("GPTNeoModel"),Qdo=o(" (GPT Neo model)"),Wdo=l(),Sp=a("li"),$re=a("strong"),Hdo=o("gptj"),Udo=o(" \u2014 "),rP=a("a"),Jdo=o("GPTJModel"),Ydo=o(" (GPT-J model)"),Kdo=l(),Rp=a("li"),Ire=a("strong"),Zdo=o("hubert"),eco=o(" \u2014 "),tP=a("a"),oco=o("HubertModel"),rco=o(" (Hubert model)"),tco=l(),Bp=a("li"),qre=a("strong"),aco=o("ibert"),nco=o(" \u2014 "),aP=a("a"),sco=o("IBertModel"),lco=o(" (I-BERT model)"),ico=l(),Pp=a("li"),Nre=a("strong"),dco=o("imagegpt"),cco=o(" \u2014 "),nP=a("a"),fco=o("ImageGPTModel"),mco=o(" (ImageGPT model)"),gco=l(),$p=a("li"),jre=a("strong"),hco=o("layoutlm"),pco=o(" \u2014 "),sP=a("a"),_co=o("LayoutLMModel"),uco=o(" (LayoutLM model)"),bco=l(),Ip=a("li"),Dre=a("strong"),vco=o("layoutlmv2"),Fco=o(" \u2014 "),lP=a("a"),Tco=o("LayoutLMv2Model"),Mco=o(" (LayoutLMv2 model)"),Eco=l(),qp=a("li"),Gre=a("strong"),Cco=o("led"),wco=o(" \u2014 "),iP=a("a"),Aco=o("LEDModel"),yco=o(" (LED model)"),Lco=l(),Np=a("li"),Ore=a("strong"),xco=o("longformer"),kco=o(" \u2014 "),dP=a("a"),Sco=o("LongformerModel"),Rco=o(" (Longformer model)"),Bco=l(),jp=a("li"),Vre=a("strong"),Pco=o("luke"),$co=o(" \u2014 "),cP=a("a"),Ico=o("LukeModel"),qco=o(" (LUKE model)"),Nco=l(),Dp=a("li"),Xre=a("strong"),jco=o("lxmert"),Dco=o(" \u2014 "),fP=a("a"),Gco=o("LxmertModel"),Oco=o(" (LXMERT model)"),Vco=l(),Gp=a("li"),zre=a("strong"),Xco=o("m2m_100"),zco=o(" \u2014 "),mP=a("a"),Qco=o("M2M100Model"),Wco=o(" (M2M100 model)"),Hco=l(),Op=a("li"),Qre=a("strong"),Uco=o("marian"),Jco=o(" \u2014 "),gP=a("a"),Yco=o("MarianModel"),Kco=o(" (Marian model)"),Zco=l(),Vp=a("li"),Wre=a("strong"),efo=o("maskformer"),ofo=o(" \u2014 "),hP=a("a"),rfo=o("MaskFormerModel"),tfo=o(" (MaskFormer model)"),afo=l(),Xp=a("li"),Hre=a("strong"),nfo=o("mbart"),sfo=o(" \u2014 "),pP=a("a"),lfo=o("MBartModel"),ifo=o(" (mBART model)"),dfo=l(),zp=a("li"),Ure=a("strong"),cfo=o("megatron-bert"),ffo=o(" \u2014 "),_P=a("a"),mfo=o("MegatronBertModel"),gfo=o(" (MegatronBert model)"),hfo=l(),Qp=a("li"),Jre=a("strong"),pfo=o("mobilebert"),_fo=o(" \u2014 "),uP=a("a"),ufo=o("MobileBertModel"),bfo=o(" (MobileBERT model)"),vfo=l(),Wp=a("li"),Yre=a("strong"),Ffo=o("mpnet"),Tfo=o(" \u2014 "),bP=a("a"),Mfo=o("MPNetModel"),Efo=o(" (MPNet model)"),Cfo=l(),Hp=a("li"),Kre=a("strong"),wfo=o("mt5"),Afo=o(" \u2014 "),vP=a("a"),yfo=o("MT5Model"),Lfo=o(" (mT5 model)"),xfo=l(),Up=a("li"),Zre=a("strong"),kfo=o("nystromformer"),Sfo=o(" \u2014 "),FP=a("a"),Rfo=o("NystromformerModel"),Bfo=o(" (Nystromformer model)"),Pfo=l(),Jp=a("li"),ete=a("strong"),$fo=o("openai-gpt"),Ifo=o(" \u2014 "),TP=a("a"),qfo=o("OpenAIGPTModel"),Nfo=o(" (OpenAI GPT model)"),jfo=l(),Yp=a("li"),ote=a("strong"),Dfo=o("pegasus"),Gfo=o(" \u2014 "),MP=a("a"),Ofo=o("PegasusModel"),Vfo=o(" (Pegasus model)"),Xfo=l(),Kp=a("li"),rte=a("strong"),zfo=o("perceiver"),Qfo=o(" \u2014 "),EP=a("a"),Wfo=o("PerceiverModel"),Hfo=o(" (Perceiver model)"),Ufo=l(),Zp=a("li"),tte=a("strong"),Jfo=o("plbart"),Yfo=o(" \u2014 "),CP=a("a"),Kfo=o("PLBartModel"),Zfo=o(" (PLBart model)"),emo=l(),e_=a("li"),ate=a("strong"),omo=o("poolformer"),rmo=o(" \u2014 "),wP=a("a"),tmo=o("PoolFormerModel"),amo=o(" (PoolFormer model)"),nmo=l(),o_=a("li"),nte=a("strong"),smo=o("prophetnet"),lmo=o(" \u2014 "),AP=a("a"),imo=o("ProphetNetModel"),dmo=o(" (ProphetNet model)"),cmo=l(),r_=a("li"),ste=a("strong"),fmo=o("qdqbert"),mmo=o(" \u2014 "),yP=a("a"),gmo=o("QDQBertModel"),hmo=o(" (QDQBert model)"),pmo=l(),t_=a("li"),lte=a("strong"),_mo=o("reformer"),umo=o(" \u2014 "),LP=a("a"),bmo=o("ReformerModel"),vmo=o(" (Reformer model)"),Fmo=l(),a_=a("li"),ite=a("strong"),Tmo=o("regnet"),Mmo=o(" \u2014 "),xP=a("a"),Emo=o("RegNetModel"),Cmo=o(" (RegNet model)"),wmo=l(),n_=a("li"),dte=a("strong"),Amo=o("rembert"),ymo=o(" \u2014 "),kP=a("a"),Lmo=o("RemBertModel"),xmo=o(" (RemBERT model)"),kmo=l(),s_=a("li"),cte=a("strong"),Smo=o("resnet"),Rmo=o(" \u2014 "),SP=a("a"),Bmo=o("ResNetModel"),Pmo=o(" (ResNet model)"),$mo=l(),l_=a("li"),fte=a("strong"),Imo=o("retribert"),qmo=o(" \u2014 "),RP=a("a"),Nmo=o("RetriBertModel"),jmo=o(" (RetriBERT model)"),Dmo=l(),i_=a("li"),mte=a("strong"),Gmo=o("roberta"),Omo=o(" \u2014 "),BP=a("a"),Vmo=o("RobertaModel"),Xmo=o(" (RoBERTa model)"),zmo=l(),d_=a("li"),gte=a("strong"),Qmo=o("roformer"),Wmo=o(" \u2014 "),PP=a("a"),Hmo=o("RoFormerModel"),Umo=o(" (RoFormer model)"),Jmo=l(),c_=a("li"),hte=a("strong"),Ymo=o("segformer"),Kmo=o(" \u2014 "),$P=a("a"),Zmo=o("SegformerModel"),ego=o(" (SegFormer model)"),ogo=l(),f_=a("li"),pte=a("strong"),rgo=o("sew"),tgo=o(" \u2014 "),IP=a("a"),ago=o("SEWModel"),ngo=o(" (SEW model)"),sgo=l(),m_=a("li"),_te=a("strong"),lgo=o("sew-d"),igo=o(" \u2014 "),qP=a("a"),dgo=o("SEWDModel"),cgo=o(" (SEW-D model)"),fgo=l(),g_=a("li"),ute=a("strong"),mgo=o("speech_to_text"),ggo=o(" \u2014 "),NP=a("a"),hgo=o("Speech2TextModel"),pgo=o(" (Speech2Text model)"),_go=l(),h_=a("li"),bte=a("strong"),ugo=o("splinter"),bgo=o(" \u2014 "),jP=a("a"),vgo=o("SplinterModel"),Fgo=o(" (Splinter model)"),Tgo=l(),p_=a("li"),vte=a("strong"),Mgo=o("squeezebert"),Ego=o(" \u2014 "),DP=a("a"),Cgo=o("SqueezeBertModel"),wgo=o(" (SqueezeBERT model)"),Ago=l(),__=a("li"),Fte=a("strong"),ygo=o("swin"),Lgo=o(" \u2014 "),GP=a("a"),xgo=o("SwinModel"),kgo=o(" (Swin model)"),Sgo=l(),u_=a("li"),Tte=a("strong"),Rgo=o("t5"),Bgo=o(" \u2014 "),OP=a("a"),Pgo=o("T5Model"),$go=o(" (T5 model)"),Igo=l(),b_=a("li"),Mte=a("strong"),qgo=o("tapas"),Ngo=o(" \u2014 "),VP=a("a"),jgo=o("TapasModel"),Dgo=o(" (TAPAS model)"),Ggo=l(),v_=a("li"),Ete=a("strong"),Ogo=o("transfo-xl"),Vgo=o(" \u2014 "),XP=a("a"),Xgo=o("TransfoXLModel"),zgo=o(" (Transformer-XL model)"),Qgo=l(),F_=a("li"),Cte=a("strong"),Wgo=o("unispeech"),Hgo=o(" \u2014 "),zP=a("a"),Ugo=o("UniSpeechModel"),Jgo=o(" (UniSpeech model)"),Ygo=l(),T_=a("li"),wte=a("strong"),Kgo=o("unispeech-sat"),Zgo=o(" \u2014 "),QP=a("a"),eho=o("UniSpeechSatModel"),oho=o(" (UniSpeechSat model)"),rho=l(),M_=a("li"),Ate=a("strong"),tho=o("van"),aho=o(" \u2014 "),WP=a("a"),nho=o("VanModel"),sho=o(" (VAN model)"),lho=l(),E_=a("li"),yte=a("strong"),iho=o("vilt"),dho=o(" \u2014 "),HP=a("a"),cho=o("ViltModel"),fho=o(" (ViLT model)"),mho=l(),C_=a("li"),Lte=a("strong"),gho=o("vision-text-dual-encoder"),hho=o(" \u2014 "),UP=a("a"),pho=o("VisionTextDualEncoderModel"),_ho=o(" (VisionTextDualEncoder model)"),uho=l(),w_=a("li"),xte=a("strong"),bho=o("visual_bert"),vho=o(" \u2014 "),JP=a("a"),Fho=o("VisualBertModel"),Tho=o(" (VisualBert model)"),Mho=l(),A_=a("li"),kte=a("strong"),Eho=o("vit"),Cho=o(" \u2014 "),YP=a("a"),who=o("ViTModel"),Aho=o(" (ViT model)"),yho=l(),y_=a("li"),Ste=a("strong"),Lho=o("vit_mae"),xho=o(" \u2014 "),KP=a("a"),kho=o("ViTMAEModel"),Sho=o(" (ViTMAE model)"),Rho=l(),L_=a("li"),Rte=a("strong"),Bho=o("wav2vec2"),Pho=o(" \u2014 "),ZP=a("a"),$ho=o("Wav2Vec2Model"),Iho=o(" (Wav2Vec2 model)"),qho=l(),x_=a("li"),Bte=a("strong"),Nho=o("wavlm"),jho=o(" \u2014 "),e$=a("a"),Dho=o("WavLMModel"),Gho=o(" (WavLM model)"),Oho=l(),k_=a("li"),Pte=a("strong"),Vho=o("xglm"),Xho=o(" \u2014 "),o$=a("a"),zho=o("XGLMModel"),Qho=o(" (XGLM model)"),Who=l(),S_=a("li"),$te=a("strong"),Hho=o("xlm"),Uho=o(" \u2014 "),r$=a("a"),Jho=o("XLMModel"),Yho=o(" (XLM model)"),Kho=l(),R_=a("li"),Ite=a("strong"),Zho=o("xlm-prophetnet"),epo=o(" \u2014 "),t$=a("a"),opo=o("XLMProphetNetModel"),rpo=o(" (XLMProphetNet model)"),tpo=l(),B_=a("li"),qte=a("strong"),apo=o("xlm-roberta"),npo=o(" \u2014 "),a$=a("a"),spo=o("XLMRobertaModel"),lpo=o(" (XLM-RoBERTa model)"),ipo=l(),P_=a("li"),Nte=a("strong"),dpo=o("xlm-roberta-xl"),cpo=o(" \u2014 "),n$=a("a"),fpo=o("XLMRobertaXLModel"),mpo=o(" (XLM-RoBERTa-XL model)"),gpo=l(),$_=a("li"),jte=a("strong"),hpo=o("xlnet"),ppo=o(" \u2014 "),s$=a("a"),_po=o("XLNetModel"),upo=o(" (XLNet model)"),bpo=l(),I_=a("li"),Dte=a("strong"),vpo=o("yoso"),Fpo=o(" \u2014 "),l$=a("a"),Tpo=o("YosoModel"),Mpo=o(" (YOSO model)"),Epo=l(),q_=a("p"),Cpo=o("The model is set in evaluation mode by default using "),Gte=a("code"),wpo=o("model.eval()"),Apo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ote=a("code"),ypo=o("model.train()"),Lpo=l(),Vte=a("p"),xpo=o("Examples:"),kpo=l(),f(p5.$$.fragment),KRe=l(),rd=a("h2"),N_=a("a"),Xte=a("span"),f(_5.$$.fragment),Spo=l(),zte=a("span"),Rpo=o("AutoModelForPreTraining"),ZRe=l(),Yo=a("div"),f(u5.$$.fragment),Bpo=l(),td=a("p"),Ppo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),i$=a("a"),$po=o("from_pretrained()"),Ipo=o(" class method or the "),d$=a("a"),qpo=o("from_config()"),Npo=o(` class
method.`),jpo=l(),b5=a("p"),Dpo=o("This class cannot be instantiated directly using "),Qte=a("code"),Gpo=o("__init__()"),Opo=o(" (throws an error)."),Vpo=l(),zr=a("div"),f(v5.$$.fragment),Xpo=l(),Wte=a("p"),zpo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Qpo=l(),ad=a("p"),Wpo=o(`Note:
Loading a model from its configuration file does `),Hte=a("strong"),Hpo=o("not"),Upo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),c$=a("a"),Jpo=o("from_pretrained()"),Ypo=o(" to load the model weights."),Kpo=l(),Ute=a("p"),Zpo=o("Examples:"),e_o=l(),f(F5.$$.fragment),o_o=l(),Ne=a("div"),f(T5.$$.fragment),r_o=l(),Jte=a("p"),t_o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),a_o=l(),za=a("p"),n_o=o("The model class to instantiate is selected based on the "),Yte=a("code"),s_o=o("model_type"),l_o=o(` property of the config object (either
passed as an argument or loaded from `),Kte=a("code"),i_o=o("pretrained_model_name_or_path"),d_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zte=a("code"),c_o=o("pretrained_model_name_or_path"),f_o=o(":"),m_o=l(),S=a("ul"),j_=a("li"),eae=a("strong"),g_o=o("albert"),h_o=o(" \u2014 "),f$=a("a"),p_o=o("AlbertForPreTraining"),__o=o(" (ALBERT model)"),u_o=l(),D_=a("li"),oae=a("strong"),b_o=o("bart"),v_o=o(" \u2014 "),m$=a("a"),F_o=o("BartForConditionalGeneration"),T_o=o(" (BART model)"),M_o=l(),G_=a("li"),rae=a("strong"),E_o=o("bert"),C_o=o(" \u2014 "),g$=a("a"),w_o=o("BertForPreTraining"),A_o=o(" (BERT model)"),y_o=l(),O_=a("li"),tae=a("strong"),L_o=o("big_bird"),x_o=o(" \u2014 "),h$=a("a"),k_o=o("BigBirdForPreTraining"),S_o=o(" (BigBird model)"),R_o=l(),V_=a("li"),aae=a("strong"),B_o=o("camembert"),P_o=o(" \u2014 "),p$=a("a"),$_o=o("CamembertForMaskedLM"),I_o=o(" (CamemBERT model)"),q_o=l(),X_=a("li"),nae=a("strong"),N_o=o("ctrl"),j_o=o(" \u2014 "),_$=a("a"),D_o=o("CTRLLMHeadModel"),G_o=o(" (CTRL model)"),O_o=l(),z_=a("li"),sae=a("strong"),V_o=o("data2vec-text"),X_o=o(" \u2014 "),u$=a("a"),z_o=o("Data2VecTextForMaskedLM"),Q_o=o(" (Data2VecText model)"),W_o=l(),Q_=a("li"),lae=a("strong"),H_o=o("deberta"),U_o=o(" \u2014 "),b$=a("a"),J_o=o("DebertaForMaskedLM"),Y_o=o(" (DeBERTa model)"),K_o=l(),W_=a("li"),iae=a("strong"),Z_o=o("deberta-v2"),euo=o(" \u2014 "),v$=a("a"),ouo=o("DebertaV2ForMaskedLM"),ruo=o(" (DeBERTa-v2 model)"),tuo=l(),H_=a("li"),dae=a("strong"),auo=o("distilbert"),nuo=o(" \u2014 "),F$=a("a"),suo=o("DistilBertForMaskedLM"),luo=o(" (DistilBERT model)"),iuo=l(),U_=a("li"),cae=a("strong"),duo=o("electra"),cuo=o(" \u2014 "),T$=a("a"),fuo=o("ElectraForPreTraining"),muo=o(" (ELECTRA model)"),guo=l(),J_=a("li"),fae=a("strong"),huo=o("flaubert"),puo=o(" \u2014 "),M$=a("a"),_uo=o("FlaubertWithLMHeadModel"),uuo=o(" (FlauBERT model)"),buo=l(),Y_=a("li"),mae=a("strong"),vuo=o("fnet"),Fuo=o(" \u2014 "),E$=a("a"),Tuo=o("FNetForPreTraining"),Muo=o(" (FNet model)"),Euo=l(),K_=a("li"),gae=a("strong"),Cuo=o("fsmt"),wuo=o(" \u2014 "),C$=a("a"),Auo=o("FSMTForConditionalGeneration"),yuo=o(" (FairSeq Machine-Translation model)"),Luo=l(),Z_=a("li"),hae=a("strong"),xuo=o("funnel"),kuo=o(" \u2014 "),w$=a("a"),Suo=o("FunnelForPreTraining"),Ruo=o(" (Funnel Transformer model)"),Buo=l(),eu=a("li"),pae=a("strong"),Puo=o("gpt2"),$uo=o(" \u2014 "),A$=a("a"),Iuo=o("GPT2LMHeadModel"),quo=o(" (OpenAI GPT-2 model)"),Nuo=l(),ou=a("li"),_ae=a("strong"),juo=o("ibert"),Duo=o(" \u2014 "),y$=a("a"),Guo=o("IBertForMaskedLM"),Ouo=o(" (I-BERT model)"),Vuo=l(),ru=a("li"),uae=a("strong"),Xuo=o("layoutlm"),zuo=o(" \u2014 "),L$=a("a"),Quo=o("LayoutLMForMaskedLM"),Wuo=o(" (LayoutLM model)"),Huo=l(),tu=a("li"),bae=a("strong"),Uuo=o("longformer"),Juo=o(" \u2014 "),x$=a("a"),Yuo=o("LongformerForMaskedLM"),Kuo=o(" (Longformer model)"),Zuo=l(),au=a("li"),vae=a("strong"),e1o=o("lxmert"),o1o=o(" \u2014 "),k$=a("a"),r1o=o("LxmertForPreTraining"),t1o=o(" (LXMERT model)"),a1o=l(),nu=a("li"),Fae=a("strong"),n1o=o("megatron-bert"),s1o=o(" \u2014 "),S$=a("a"),l1o=o("MegatronBertForPreTraining"),i1o=o(" (MegatronBert model)"),d1o=l(),su=a("li"),Tae=a("strong"),c1o=o("mobilebert"),f1o=o(" \u2014 "),R$=a("a"),m1o=o("MobileBertForPreTraining"),g1o=o(" (MobileBERT model)"),h1o=l(),lu=a("li"),Mae=a("strong"),p1o=o("mpnet"),_1o=o(" \u2014 "),B$=a("a"),u1o=o("MPNetForMaskedLM"),b1o=o(" (MPNet model)"),v1o=l(),iu=a("li"),Eae=a("strong"),F1o=o("openai-gpt"),T1o=o(" \u2014 "),P$=a("a"),M1o=o("OpenAIGPTLMHeadModel"),E1o=o(" (OpenAI GPT model)"),C1o=l(),du=a("li"),Cae=a("strong"),w1o=o("retribert"),A1o=o(" \u2014 "),$$=a("a"),y1o=o("RetriBertModel"),L1o=o(" (RetriBERT model)"),x1o=l(),cu=a("li"),wae=a("strong"),k1o=o("roberta"),S1o=o(" \u2014 "),I$=a("a"),R1o=o("RobertaForMaskedLM"),B1o=o(" (RoBERTa model)"),P1o=l(),fu=a("li"),Aae=a("strong"),$1o=o("squeezebert"),I1o=o(" \u2014 "),q$=a("a"),q1o=o("SqueezeBertForMaskedLM"),N1o=o(" (SqueezeBERT model)"),j1o=l(),mu=a("li"),yae=a("strong"),D1o=o("t5"),G1o=o(" \u2014 "),N$=a("a"),O1o=o("T5ForConditionalGeneration"),V1o=o(" (T5 model)"),X1o=l(),gu=a("li"),Lae=a("strong"),z1o=o("tapas"),Q1o=o(" \u2014 "),j$=a("a"),W1o=o("TapasForMaskedLM"),H1o=o(" (TAPAS model)"),U1o=l(),hu=a("li"),xae=a("strong"),J1o=o("transfo-xl"),Y1o=o(" \u2014 "),D$=a("a"),K1o=o("TransfoXLLMHeadModel"),Z1o=o(" (Transformer-XL model)"),ebo=l(),pu=a("li"),kae=a("strong"),obo=o("unispeech"),rbo=o(" \u2014 "),G$=a("a"),tbo=o("UniSpeechForPreTraining"),abo=o(" (UniSpeech model)"),nbo=l(),_u=a("li"),Sae=a("strong"),sbo=o("unispeech-sat"),lbo=o(" \u2014 "),O$=a("a"),ibo=o("UniSpeechSatForPreTraining"),dbo=o(" (UniSpeechSat model)"),cbo=l(),uu=a("li"),Rae=a("strong"),fbo=o("visual_bert"),mbo=o(" \u2014 "),V$=a("a"),gbo=o("VisualBertForPreTraining"),hbo=o(" (VisualBert model)"),pbo=l(),bu=a("li"),Bae=a("strong"),_bo=o("vit_mae"),ubo=o(" \u2014 "),X$=a("a"),bbo=o("ViTMAEForPreTraining"),vbo=o(" (ViTMAE model)"),Fbo=l(),vu=a("li"),Pae=a("strong"),Tbo=o("wav2vec2"),Mbo=o(" \u2014 "),z$=a("a"),Ebo=o("Wav2Vec2ForPreTraining"),Cbo=o(" (Wav2Vec2 model)"),wbo=l(),Fu=a("li"),$ae=a("strong"),Abo=o("xlm"),ybo=o(" \u2014 "),Q$=a("a"),Lbo=o("XLMWithLMHeadModel"),xbo=o(" (XLM model)"),kbo=l(),Tu=a("li"),Iae=a("strong"),Sbo=o("xlm-roberta"),Rbo=o(" \u2014 "),W$=a("a"),Bbo=o("XLMRobertaForMaskedLM"),Pbo=o(" (XLM-RoBERTa model)"),$bo=l(),Mu=a("li"),qae=a("strong"),Ibo=o("xlm-roberta-xl"),qbo=o(" \u2014 "),H$=a("a"),Nbo=o("XLMRobertaXLForMaskedLM"),jbo=o(" (XLM-RoBERTa-XL model)"),Dbo=l(),Eu=a("li"),Nae=a("strong"),Gbo=o("xlnet"),Obo=o(" \u2014 "),U$=a("a"),Vbo=o("XLNetLMHeadModel"),Xbo=o(" (XLNet model)"),zbo=l(),Cu=a("p"),Qbo=o("The model is set in evaluation mode by default using "),jae=a("code"),Wbo=o("model.eval()"),Hbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dae=a("code"),Ubo=o("model.train()"),Jbo=l(),Gae=a("p"),Ybo=o("Examples:"),Kbo=l(),f(M5.$$.fragment),eBe=l(),nd=a("h2"),wu=a("a"),Oae=a("span"),f(E5.$$.fragment),Zbo=l(),Vae=a("span"),e2o=o("AutoModelForCausalLM"),oBe=l(),Ko=a("div"),f(C5.$$.fragment),o2o=l(),sd=a("p"),r2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),J$=a("a"),t2o=o("from_pretrained()"),a2o=o(" class method or the "),Y$=a("a"),n2o=o("from_config()"),s2o=o(` class
method.`),l2o=l(),w5=a("p"),i2o=o("This class cannot be instantiated directly using "),Xae=a("code"),d2o=o("__init__()"),c2o=o(" (throws an error)."),f2o=l(),Qr=a("div"),f(A5.$$.fragment),m2o=l(),zae=a("p"),g2o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),h2o=l(),ld=a("p"),p2o=o(`Note:
Loading a model from its configuration file does `),Qae=a("strong"),_2o=o("not"),u2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),K$=a("a"),b2o=o("from_pretrained()"),v2o=o(" to load the model weights."),F2o=l(),Wae=a("p"),T2o=o("Examples:"),M2o=l(),f(y5.$$.fragment),E2o=l(),je=a("div"),f(L5.$$.fragment),C2o=l(),Hae=a("p"),w2o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),A2o=l(),Qa=a("p"),y2o=o("The model class to instantiate is selected based on the "),Uae=a("code"),L2o=o("model_type"),x2o=o(` property of the config object (either
passed as an argument or loaded from `),Jae=a("code"),k2o=o("pretrained_model_name_or_path"),S2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yae=a("code"),R2o=o("pretrained_model_name_or_path"),B2o=o(":"),P2o=l(),$=a("ul"),Au=a("li"),Kae=a("strong"),$2o=o("bart"),I2o=o(" \u2014 "),Z$=a("a"),q2o=o("BartForCausalLM"),N2o=o(" (BART model)"),j2o=l(),yu=a("li"),Zae=a("strong"),D2o=o("bert"),G2o=o(" \u2014 "),eI=a("a"),O2o=o("BertLMHeadModel"),V2o=o(" (BERT model)"),X2o=l(),Lu=a("li"),ene=a("strong"),z2o=o("bert-generation"),Q2o=o(" \u2014 "),oI=a("a"),W2o=o("BertGenerationDecoder"),H2o=o(" (Bert Generation model)"),U2o=l(),xu=a("li"),one=a("strong"),J2o=o("big_bird"),Y2o=o(" \u2014 "),rI=a("a"),K2o=o("BigBirdForCausalLM"),Z2o=o(" (BigBird model)"),e6o=l(),ku=a("li"),rne=a("strong"),o6o=o("bigbird_pegasus"),r6o=o(" \u2014 "),tI=a("a"),t6o=o("BigBirdPegasusForCausalLM"),a6o=o(" (BigBirdPegasus model)"),n6o=l(),Su=a("li"),tne=a("strong"),s6o=o("blenderbot"),l6o=o(" \u2014 "),aI=a("a"),i6o=o("BlenderbotForCausalLM"),d6o=o(" (Blenderbot model)"),c6o=l(),Ru=a("li"),ane=a("strong"),f6o=o("blenderbot-small"),m6o=o(" \u2014 "),nI=a("a"),g6o=o("BlenderbotSmallForCausalLM"),h6o=o(" (BlenderbotSmall model)"),p6o=l(),Bu=a("li"),nne=a("strong"),_6o=o("camembert"),u6o=o(" \u2014 "),sI=a("a"),b6o=o("CamembertForCausalLM"),v6o=o(" (CamemBERT model)"),F6o=l(),Pu=a("li"),sne=a("strong"),T6o=o("ctrl"),M6o=o(" \u2014 "),lI=a("a"),E6o=o("CTRLLMHeadModel"),C6o=o(" (CTRL model)"),w6o=l(),$u=a("li"),lne=a("strong"),A6o=o("data2vec-text"),y6o=o(" \u2014 "),iI=a("a"),L6o=o("Data2VecTextForCausalLM"),x6o=o(" (Data2VecText model)"),k6o=l(),Iu=a("li"),ine=a("strong"),S6o=o("electra"),R6o=o(" \u2014 "),dI=a("a"),B6o=o("ElectraForCausalLM"),P6o=o(" (ELECTRA model)"),$6o=l(),qu=a("li"),dne=a("strong"),I6o=o("gpt2"),q6o=o(" \u2014 "),cI=a("a"),N6o=o("GPT2LMHeadModel"),j6o=o(" (OpenAI GPT-2 model)"),D6o=l(),Nu=a("li"),cne=a("strong"),G6o=o("gpt_neo"),O6o=o(" \u2014 "),fI=a("a"),V6o=o("GPTNeoForCausalLM"),X6o=o(" (GPT Neo model)"),z6o=l(),ju=a("li"),fne=a("strong"),Q6o=o("gptj"),W6o=o(" \u2014 "),mI=a("a"),H6o=o("GPTJForCausalLM"),U6o=o(" (GPT-J model)"),J6o=l(),Du=a("li"),mne=a("strong"),Y6o=o("marian"),K6o=o(" \u2014 "),gI=a("a"),Z6o=o("MarianForCausalLM"),evo=o(" (Marian model)"),ovo=l(),Gu=a("li"),gne=a("strong"),rvo=o("mbart"),tvo=o(" \u2014 "),hI=a("a"),avo=o("MBartForCausalLM"),nvo=o(" (mBART model)"),svo=l(),Ou=a("li"),hne=a("strong"),lvo=o("megatron-bert"),ivo=o(" \u2014 "),pI=a("a"),dvo=o("MegatronBertForCausalLM"),cvo=o(" (MegatronBert model)"),fvo=l(),Vu=a("li"),pne=a("strong"),mvo=o("openai-gpt"),gvo=o(" \u2014 "),_I=a("a"),hvo=o("OpenAIGPTLMHeadModel"),pvo=o(" (OpenAI GPT model)"),_vo=l(),Xu=a("li"),_ne=a("strong"),uvo=o("pegasus"),bvo=o(" \u2014 "),uI=a("a"),vvo=o("PegasusForCausalLM"),Fvo=o(" (Pegasus model)"),Tvo=l(),zu=a("li"),une=a("strong"),Mvo=o("plbart"),Evo=o(" \u2014 "),bI=a("a"),Cvo=o("PLBartForCausalLM"),wvo=o(" (PLBart model)"),Avo=l(),Qu=a("li"),bne=a("strong"),yvo=o("prophetnet"),Lvo=o(" \u2014 "),vI=a("a"),xvo=o("ProphetNetForCausalLM"),kvo=o(" (ProphetNet model)"),Svo=l(),Wu=a("li"),vne=a("strong"),Rvo=o("qdqbert"),Bvo=o(" \u2014 "),FI=a("a"),Pvo=o("QDQBertLMHeadModel"),$vo=o(" (QDQBert model)"),Ivo=l(),Hu=a("li"),Fne=a("strong"),qvo=o("reformer"),Nvo=o(" \u2014 "),TI=a("a"),jvo=o("ReformerModelWithLMHead"),Dvo=o(" (Reformer model)"),Gvo=l(),Uu=a("li"),Tne=a("strong"),Ovo=o("rembert"),Vvo=o(" \u2014 "),MI=a("a"),Xvo=o("RemBertForCausalLM"),zvo=o(" (RemBERT model)"),Qvo=l(),Ju=a("li"),Mne=a("strong"),Wvo=o("roberta"),Hvo=o(" \u2014 "),EI=a("a"),Uvo=o("RobertaForCausalLM"),Jvo=o(" (RoBERTa model)"),Yvo=l(),Yu=a("li"),Ene=a("strong"),Kvo=o("roformer"),Zvo=o(" \u2014 "),CI=a("a"),eFo=o("RoFormerForCausalLM"),oFo=o(" (RoFormer model)"),rFo=l(),Ku=a("li"),Cne=a("strong"),tFo=o("speech_to_text_2"),aFo=o(" \u2014 "),wI=a("a"),nFo=o("Speech2Text2ForCausalLM"),sFo=o(" (Speech2Text2 model)"),lFo=l(),Zu=a("li"),wne=a("strong"),iFo=o("transfo-xl"),dFo=o(" \u2014 "),AI=a("a"),cFo=o("TransfoXLLMHeadModel"),fFo=o(" (Transformer-XL model)"),mFo=l(),e1=a("li"),Ane=a("strong"),gFo=o("trocr"),hFo=o(" \u2014 "),yI=a("a"),pFo=o("TrOCRForCausalLM"),_Fo=o(" (TrOCR model)"),uFo=l(),o1=a("li"),yne=a("strong"),bFo=o("xglm"),vFo=o(" \u2014 "),LI=a("a"),FFo=o("XGLMForCausalLM"),TFo=o(" (XGLM model)"),MFo=l(),r1=a("li"),Lne=a("strong"),EFo=o("xlm"),CFo=o(" \u2014 "),xI=a("a"),wFo=o("XLMWithLMHeadModel"),AFo=o(" (XLM model)"),yFo=l(),t1=a("li"),xne=a("strong"),LFo=o("xlm-prophetnet"),xFo=o(" \u2014 "),kI=a("a"),kFo=o("XLMProphetNetForCausalLM"),SFo=o(" (XLMProphetNet model)"),RFo=l(),a1=a("li"),kne=a("strong"),BFo=o("xlm-roberta"),PFo=o(" \u2014 "),SI=a("a"),$Fo=o("XLMRobertaForCausalLM"),IFo=o(" (XLM-RoBERTa model)"),qFo=l(),n1=a("li"),Sne=a("strong"),NFo=o("xlm-roberta-xl"),jFo=o(" \u2014 "),RI=a("a"),DFo=o("XLMRobertaXLForCausalLM"),GFo=o(" (XLM-RoBERTa-XL model)"),OFo=l(),s1=a("li"),Rne=a("strong"),VFo=o("xlnet"),XFo=o(" \u2014 "),BI=a("a"),zFo=o("XLNetLMHeadModel"),QFo=o(" (XLNet model)"),WFo=l(),l1=a("p"),HFo=o("The model is set in evaluation mode by default using "),Bne=a("code"),UFo=o("model.eval()"),JFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pne=a("code"),YFo=o("model.train()"),KFo=l(),$ne=a("p"),ZFo=o("Examples:"),eTo=l(),f(x5.$$.fragment),rBe=l(),id=a("h2"),i1=a("a"),Ine=a("span"),f(k5.$$.fragment),oTo=l(),qne=a("span"),rTo=o("AutoModelForMaskedLM"),tBe=l(),Zo=a("div"),f(S5.$$.fragment),tTo=l(),dd=a("p"),aTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PI=a("a"),nTo=o("from_pretrained()"),sTo=o(" class method or the "),$I=a("a"),lTo=o("from_config()"),iTo=o(` class
method.`),dTo=l(),R5=a("p"),cTo=o("This class cannot be instantiated directly using "),Nne=a("code"),fTo=o("__init__()"),mTo=o(" (throws an error)."),gTo=l(),Wr=a("div"),f(B5.$$.fragment),hTo=l(),jne=a("p"),pTo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_To=l(),cd=a("p"),uTo=o(`Note:
Loading a model from its configuration file does `),Dne=a("strong"),bTo=o("not"),vTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),II=a("a"),FTo=o("from_pretrained()"),TTo=o(" to load the model weights."),MTo=l(),Gne=a("p"),ETo=o("Examples:"),CTo=l(),f(P5.$$.fragment),wTo=l(),De=a("div"),f($5.$$.fragment),ATo=l(),One=a("p"),yTo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),LTo=l(),Wa=a("p"),xTo=o("The model class to instantiate is selected based on the "),Vne=a("code"),kTo=o("model_type"),STo=o(` property of the config object (either
passed as an argument or loaded from `),Xne=a("code"),RTo=o("pretrained_model_name_or_path"),BTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zne=a("code"),PTo=o("pretrained_model_name_or_path"),$To=o(":"),ITo=l(),I=a("ul"),d1=a("li"),Qne=a("strong"),qTo=o("albert"),NTo=o(" \u2014 "),qI=a("a"),jTo=o("AlbertForMaskedLM"),DTo=o(" (ALBERT model)"),GTo=l(),c1=a("li"),Wne=a("strong"),OTo=o("bart"),VTo=o(" \u2014 "),NI=a("a"),XTo=o("BartForConditionalGeneration"),zTo=o(" (BART model)"),QTo=l(),f1=a("li"),Hne=a("strong"),WTo=o("bert"),HTo=o(" \u2014 "),jI=a("a"),UTo=o("BertForMaskedLM"),JTo=o(" (BERT model)"),YTo=l(),m1=a("li"),Une=a("strong"),KTo=o("big_bird"),ZTo=o(" \u2014 "),DI=a("a"),e8o=o("BigBirdForMaskedLM"),o8o=o(" (BigBird model)"),r8o=l(),g1=a("li"),Jne=a("strong"),t8o=o("camembert"),a8o=o(" \u2014 "),GI=a("a"),n8o=o("CamembertForMaskedLM"),s8o=o(" (CamemBERT model)"),l8o=l(),h1=a("li"),Yne=a("strong"),i8o=o("convbert"),d8o=o(" \u2014 "),OI=a("a"),c8o=o("ConvBertForMaskedLM"),f8o=o(" (ConvBERT model)"),m8o=l(),p1=a("li"),Kne=a("strong"),g8o=o("data2vec-text"),h8o=o(" \u2014 "),VI=a("a"),p8o=o("Data2VecTextForMaskedLM"),_8o=o(" (Data2VecText model)"),u8o=l(),_1=a("li"),Zne=a("strong"),b8o=o("deberta"),v8o=o(" \u2014 "),XI=a("a"),F8o=o("DebertaForMaskedLM"),T8o=o(" (DeBERTa model)"),M8o=l(),u1=a("li"),ese=a("strong"),E8o=o("deberta-v2"),C8o=o(" \u2014 "),zI=a("a"),w8o=o("DebertaV2ForMaskedLM"),A8o=o(" (DeBERTa-v2 model)"),y8o=l(),b1=a("li"),ose=a("strong"),L8o=o("distilbert"),x8o=o(" \u2014 "),QI=a("a"),k8o=o("DistilBertForMaskedLM"),S8o=o(" (DistilBERT model)"),R8o=l(),v1=a("li"),rse=a("strong"),B8o=o("electra"),P8o=o(" \u2014 "),WI=a("a"),$8o=o("ElectraForMaskedLM"),I8o=o(" (ELECTRA model)"),q8o=l(),F1=a("li"),tse=a("strong"),N8o=o("flaubert"),j8o=o(" \u2014 "),HI=a("a"),D8o=o("FlaubertWithLMHeadModel"),G8o=o(" (FlauBERT model)"),O8o=l(),T1=a("li"),ase=a("strong"),V8o=o("fnet"),X8o=o(" \u2014 "),UI=a("a"),z8o=o("FNetForMaskedLM"),Q8o=o(" (FNet model)"),W8o=l(),M1=a("li"),nse=a("strong"),H8o=o("funnel"),U8o=o(" \u2014 "),JI=a("a"),J8o=o("FunnelForMaskedLM"),Y8o=o(" (Funnel Transformer model)"),K8o=l(),E1=a("li"),sse=a("strong"),Z8o=o("ibert"),e7o=o(" \u2014 "),YI=a("a"),o7o=o("IBertForMaskedLM"),r7o=o(" (I-BERT model)"),t7o=l(),C1=a("li"),lse=a("strong"),a7o=o("layoutlm"),n7o=o(" \u2014 "),KI=a("a"),s7o=o("LayoutLMForMaskedLM"),l7o=o(" (LayoutLM model)"),i7o=l(),w1=a("li"),ise=a("strong"),d7o=o("longformer"),c7o=o(" \u2014 "),ZI=a("a"),f7o=o("LongformerForMaskedLM"),m7o=o(" (Longformer model)"),g7o=l(),A1=a("li"),dse=a("strong"),h7o=o("mbart"),p7o=o(" \u2014 "),eq=a("a"),_7o=o("MBartForConditionalGeneration"),u7o=o(" (mBART model)"),b7o=l(),y1=a("li"),cse=a("strong"),v7o=o("megatron-bert"),F7o=o(" \u2014 "),oq=a("a"),T7o=o("MegatronBertForMaskedLM"),M7o=o(" (MegatronBert model)"),E7o=l(),L1=a("li"),fse=a("strong"),C7o=o("mobilebert"),w7o=o(" \u2014 "),rq=a("a"),A7o=o("MobileBertForMaskedLM"),y7o=o(" (MobileBERT model)"),L7o=l(),x1=a("li"),mse=a("strong"),x7o=o("mpnet"),k7o=o(" \u2014 "),tq=a("a"),S7o=o("MPNetForMaskedLM"),R7o=o(" (MPNet model)"),B7o=l(),k1=a("li"),gse=a("strong"),P7o=o("nystromformer"),$7o=o(" \u2014 "),aq=a("a"),I7o=o("NystromformerForMaskedLM"),q7o=o(" (Nystromformer model)"),N7o=l(),S1=a("li"),hse=a("strong"),j7o=o("perceiver"),D7o=o(" \u2014 "),nq=a("a"),G7o=o("PerceiverForMaskedLM"),O7o=o(" (Perceiver model)"),V7o=l(),R1=a("li"),pse=a("strong"),X7o=o("qdqbert"),z7o=o(" \u2014 "),sq=a("a"),Q7o=o("QDQBertForMaskedLM"),W7o=o(" (QDQBert model)"),H7o=l(),B1=a("li"),_se=a("strong"),U7o=o("reformer"),J7o=o(" \u2014 "),lq=a("a"),Y7o=o("ReformerForMaskedLM"),K7o=o(" (Reformer model)"),Z7o=l(),P1=a("li"),use=a("strong"),e9o=o("rembert"),o9o=o(" \u2014 "),iq=a("a"),r9o=o("RemBertForMaskedLM"),t9o=o(" (RemBERT model)"),a9o=l(),$1=a("li"),bse=a("strong"),n9o=o("roberta"),s9o=o(" \u2014 "),dq=a("a"),l9o=o("RobertaForMaskedLM"),i9o=o(" (RoBERTa model)"),d9o=l(),I1=a("li"),vse=a("strong"),c9o=o("roformer"),f9o=o(" \u2014 "),cq=a("a"),m9o=o("RoFormerForMaskedLM"),g9o=o(" (RoFormer model)"),h9o=l(),q1=a("li"),Fse=a("strong"),p9o=o("squeezebert"),_9o=o(" \u2014 "),fq=a("a"),u9o=o("SqueezeBertForMaskedLM"),b9o=o(" (SqueezeBERT model)"),v9o=l(),N1=a("li"),Tse=a("strong"),F9o=o("tapas"),T9o=o(" \u2014 "),mq=a("a"),M9o=o("TapasForMaskedLM"),E9o=o(" (TAPAS model)"),C9o=l(),j1=a("li"),Mse=a("strong"),w9o=o("wav2vec2"),A9o=o(" \u2014 "),Ese=a("code"),y9o=o("Wav2Vec2ForMaskedLM"),L9o=o(" (Wav2Vec2 model)"),x9o=l(),D1=a("li"),Cse=a("strong"),k9o=o("xlm"),S9o=o(" \u2014 "),gq=a("a"),R9o=o("XLMWithLMHeadModel"),B9o=o(" (XLM model)"),P9o=l(),G1=a("li"),wse=a("strong"),$9o=o("xlm-roberta"),I9o=o(" \u2014 "),hq=a("a"),q9o=o("XLMRobertaForMaskedLM"),N9o=o(" (XLM-RoBERTa model)"),j9o=l(),O1=a("li"),Ase=a("strong"),D9o=o("xlm-roberta-xl"),G9o=o(" \u2014 "),pq=a("a"),O9o=o("XLMRobertaXLForMaskedLM"),V9o=o(" (XLM-RoBERTa-XL model)"),X9o=l(),V1=a("li"),yse=a("strong"),z9o=o("yoso"),Q9o=o(" \u2014 "),_q=a("a"),W9o=o("YosoForMaskedLM"),H9o=o(" (YOSO model)"),U9o=l(),X1=a("p"),J9o=o("The model is set in evaluation mode by default using "),Lse=a("code"),Y9o=o("model.eval()"),K9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xse=a("code"),Z9o=o("model.train()"),eMo=l(),kse=a("p"),oMo=o("Examples:"),rMo=l(),f(I5.$$.fragment),aBe=l(),fd=a("h2"),z1=a("a"),Sse=a("span"),f(q5.$$.fragment),tMo=l(),Rse=a("span"),aMo=o("AutoModelForSeq2SeqLM"),nBe=l(),er=a("div"),f(N5.$$.fragment),nMo=l(),md=a("p"),sMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uq=a("a"),lMo=o("from_pretrained()"),iMo=o(" class method or the "),bq=a("a"),dMo=o("from_config()"),cMo=o(` class
method.`),fMo=l(),j5=a("p"),mMo=o("This class cannot be instantiated directly using "),Bse=a("code"),gMo=o("__init__()"),hMo=o(" (throws an error)."),pMo=l(),Hr=a("div"),f(D5.$$.fragment),_Mo=l(),Pse=a("p"),uMo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),bMo=l(),gd=a("p"),vMo=o(`Note:
Loading a model from its configuration file does `),$se=a("strong"),FMo=o("not"),TMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vq=a("a"),MMo=o("from_pretrained()"),EMo=o(" to load the model weights."),CMo=l(),Ise=a("p"),wMo=o("Examples:"),AMo=l(),f(G5.$$.fragment),yMo=l(),Ge=a("div"),f(O5.$$.fragment),LMo=l(),qse=a("p"),xMo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kMo=l(),Ha=a("p"),SMo=o("The model class to instantiate is selected based on the "),Nse=a("code"),RMo=o("model_type"),BMo=o(` property of the config object (either
passed as an argument or loaded from `),jse=a("code"),PMo=o("pretrained_model_name_or_path"),$Mo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dse=a("code"),IMo=o("pretrained_model_name_or_path"),qMo=o(":"),NMo=l(),ne=a("ul"),Q1=a("li"),Gse=a("strong"),jMo=o("bart"),DMo=o(" \u2014 "),Fq=a("a"),GMo=o("BartForConditionalGeneration"),OMo=o(" (BART model)"),VMo=l(),W1=a("li"),Ose=a("strong"),XMo=o("bigbird_pegasus"),zMo=o(" \u2014 "),Tq=a("a"),QMo=o("BigBirdPegasusForConditionalGeneration"),WMo=o(" (BigBirdPegasus model)"),HMo=l(),H1=a("li"),Vse=a("strong"),UMo=o("blenderbot"),JMo=o(" \u2014 "),Mq=a("a"),YMo=o("BlenderbotForConditionalGeneration"),KMo=o(" (Blenderbot model)"),ZMo=l(),U1=a("li"),Xse=a("strong"),e4o=o("blenderbot-small"),o4o=o(" \u2014 "),Eq=a("a"),r4o=o("BlenderbotSmallForConditionalGeneration"),t4o=o(" (BlenderbotSmall model)"),a4o=l(),J1=a("li"),zse=a("strong"),n4o=o("encoder-decoder"),s4o=o(" \u2014 "),Cq=a("a"),l4o=o("EncoderDecoderModel"),i4o=o(" (Encoder decoder model)"),d4o=l(),Y1=a("li"),Qse=a("strong"),c4o=o("fsmt"),f4o=o(" \u2014 "),wq=a("a"),m4o=o("FSMTForConditionalGeneration"),g4o=o(" (FairSeq Machine-Translation model)"),h4o=l(),K1=a("li"),Wse=a("strong"),p4o=o("led"),_4o=o(" \u2014 "),Aq=a("a"),u4o=o("LEDForConditionalGeneration"),b4o=o(" (LED model)"),v4o=l(),Z1=a("li"),Hse=a("strong"),F4o=o("m2m_100"),T4o=o(" \u2014 "),yq=a("a"),M4o=o("M2M100ForConditionalGeneration"),E4o=o(" (M2M100 model)"),C4o=l(),eb=a("li"),Use=a("strong"),w4o=o("marian"),A4o=o(" \u2014 "),Lq=a("a"),y4o=o("MarianMTModel"),L4o=o(" (Marian model)"),x4o=l(),ob=a("li"),Jse=a("strong"),k4o=o("mbart"),S4o=o(" \u2014 "),xq=a("a"),R4o=o("MBartForConditionalGeneration"),B4o=o(" (mBART model)"),P4o=l(),rb=a("li"),Yse=a("strong"),$4o=o("mt5"),I4o=o(" \u2014 "),kq=a("a"),q4o=o("MT5ForConditionalGeneration"),N4o=o(" (mT5 model)"),j4o=l(),tb=a("li"),Kse=a("strong"),D4o=o("pegasus"),G4o=o(" \u2014 "),Sq=a("a"),O4o=o("PegasusForConditionalGeneration"),V4o=o(" (Pegasus model)"),X4o=l(),ab=a("li"),Zse=a("strong"),z4o=o("plbart"),Q4o=o(" \u2014 "),Rq=a("a"),W4o=o("PLBartForConditionalGeneration"),H4o=o(" (PLBart model)"),U4o=l(),nb=a("li"),ele=a("strong"),J4o=o("prophetnet"),Y4o=o(" \u2014 "),Bq=a("a"),K4o=o("ProphetNetForConditionalGeneration"),Z4o=o(" (ProphetNet model)"),eEo=l(),sb=a("li"),ole=a("strong"),oEo=o("t5"),rEo=o(" \u2014 "),Pq=a("a"),tEo=o("T5ForConditionalGeneration"),aEo=o(" (T5 model)"),nEo=l(),lb=a("li"),rle=a("strong"),sEo=o("tapex"),lEo=o(" \u2014 "),$q=a("a"),iEo=o("BartForConditionalGeneration"),dEo=o(" (TAPEX model)"),cEo=l(),ib=a("li"),tle=a("strong"),fEo=o("xlm-prophetnet"),mEo=o(" \u2014 "),Iq=a("a"),gEo=o("XLMProphetNetForConditionalGeneration"),hEo=o(" (XLMProphetNet model)"),pEo=l(),db=a("p"),_Eo=o("The model is set in evaluation mode by default using "),ale=a("code"),uEo=o("model.eval()"),bEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nle=a("code"),vEo=o("model.train()"),FEo=l(),sle=a("p"),TEo=o("Examples:"),MEo=l(),f(V5.$$.fragment),sBe=l(),hd=a("h2"),cb=a("a"),lle=a("span"),f(X5.$$.fragment),EEo=l(),ile=a("span"),CEo=o("AutoModelForSequenceClassification"),lBe=l(),or=a("div"),f(z5.$$.fragment),wEo=l(),pd=a("p"),AEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qq=a("a"),yEo=o("from_pretrained()"),LEo=o(" class method or the "),Nq=a("a"),xEo=o("from_config()"),kEo=o(` class
method.`),SEo=l(),Q5=a("p"),REo=o("This class cannot be instantiated directly using "),dle=a("code"),BEo=o("__init__()"),PEo=o(" (throws an error)."),$Eo=l(),Ur=a("div"),f(W5.$$.fragment),IEo=l(),cle=a("p"),qEo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),NEo=l(),_d=a("p"),jEo=o(`Note:
Loading a model from its configuration file does `),fle=a("strong"),DEo=o("not"),GEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jq=a("a"),OEo=o("from_pretrained()"),VEo=o(" to load the model weights."),XEo=l(),mle=a("p"),zEo=o("Examples:"),QEo=l(),f(H5.$$.fragment),WEo=l(),Oe=a("div"),f(U5.$$.fragment),HEo=l(),gle=a("p"),UEo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),JEo=l(),Ua=a("p"),YEo=o("The model class to instantiate is selected based on the "),hle=a("code"),KEo=o("model_type"),ZEo=o(` property of the config object (either
passed as an argument or loaded from `),ple=a("code"),e5o=o("pretrained_model_name_or_path"),o5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_le=a("code"),r5o=o("pretrained_model_name_or_path"),t5o=o(":"),a5o=l(),y=a("ul"),fb=a("li"),ule=a("strong"),n5o=o("albert"),s5o=o(" \u2014 "),Dq=a("a"),l5o=o("AlbertForSequenceClassification"),i5o=o(" (ALBERT model)"),d5o=l(),mb=a("li"),ble=a("strong"),c5o=o("bart"),f5o=o(" \u2014 "),Gq=a("a"),m5o=o("BartForSequenceClassification"),g5o=o(" (BART model)"),h5o=l(),gb=a("li"),vle=a("strong"),p5o=o("bert"),_5o=o(" \u2014 "),Oq=a("a"),u5o=o("BertForSequenceClassification"),b5o=o(" (BERT model)"),v5o=l(),hb=a("li"),Fle=a("strong"),F5o=o("big_bird"),T5o=o(" \u2014 "),Vq=a("a"),M5o=o("BigBirdForSequenceClassification"),E5o=o(" (BigBird model)"),C5o=l(),pb=a("li"),Tle=a("strong"),w5o=o("bigbird_pegasus"),A5o=o(" \u2014 "),Xq=a("a"),y5o=o("BigBirdPegasusForSequenceClassification"),L5o=o(" (BigBirdPegasus model)"),x5o=l(),_b=a("li"),Mle=a("strong"),k5o=o("camembert"),S5o=o(" \u2014 "),zq=a("a"),R5o=o("CamembertForSequenceClassification"),B5o=o(" (CamemBERT model)"),P5o=l(),ub=a("li"),Ele=a("strong"),$5o=o("canine"),I5o=o(" \u2014 "),Qq=a("a"),q5o=o("CanineForSequenceClassification"),N5o=o(" (Canine model)"),j5o=l(),bb=a("li"),Cle=a("strong"),D5o=o("convbert"),G5o=o(" \u2014 "),Wq=a("a"),O5o=o("ConvBertForSequenceClassification"),V5o=o(" (ConvBERT model)"),X5o=l(),vb=a("li"),wle=a("strong"),z5o=o("ctrl"),Q5o=o(" \u2014 "),Hq=a("a"),W5o=o("CTRLForSequenceClassification"),H5o=o(" (CTRL model)"),U5o=l(),Fb=a("li"),Ale=a("strong"),J5o=o("data2vec-text"),Y5o=o(" \u2014 "),Uq=a("a"),K5o=o("Data2VecTextForSequenceClassification"),Z5o=o(" (Data2VecText model)"),e3o=l(),Tb=a("li"),yle=a("strong"),o3o=o("deberta"),r3o=o(" \u2014 "),Jq=a("a"),t3o=o("DebertaForSequenceClassification"),a3o=o(" (DeBERTa model)"),n3o=l(),Mb=a("li"),Lle=a("strong"),s3o=o("deberta-v2"),l3o=o(" \u2014 "),Yq=a("a"),i3o=o("DebertaV2ForSequenceClassification"),d3o=o(" (DeBERTa-v2 model)"),c3o=l(),Eb=a("li"),xle=a("strong"),f3o=o("distilbert"),m3o=o(" \u2014 "),Kq=a("a"),g3o=o("DistilBertForSequenceClassification"),h3o=o(" (DistilBERT model)"),p3o=l(),Cb=a("li"),kle=a("strong"),_3o=o("electra"),u3o=o(" \u2014 "),Zq=a("a"),b3o=o("ElectraForSequenceClassification"),v3o=o(" (ELECTRA model)"),F3o=l(),wb=a("li"),Sle=a("strong"),T3o=o("flaubert"),M3o=o(" \u2014 "),eN=a("a"),E3o=o("FlaubertForSequenceClassification"),C3o=o(" (FlauBERT model)"),w3o=l(),Ab=a("li"),Rle=a("strong"),A3o=o("fnet"),y3o=o(" \u2014 "),oN=a("a"),L3o=o("FNetForSequenceClassification"),x3o=o(" (FNet model)"),k3o=l(),yb=a("li"),Ble=a("strong"),S3o=o("funnel"),R3o=o(" \u2014 "),rN=a("a"),B3o=o("FunnelForSequenceClassification"),P3o=o(" (Funnel Transformer model)"),$3o=l(),Lb=a("li"),Ple=a("strong"),I3o=o("gpt2"),q3o=o(" \u2014 "),tN=a("a"),N3o=o("GPT2ForSequenceClassification"),j3o=o(" (OpenAI GPT-2 model)"),D3o=l(),xb=a("li"),$le=a("strong"),G3o=o("gpt_neo"),O3o=o(" \u2014 "),aN=a("a"),V3o=o("GPTNeoForSequenceClassification"),X3o=o(" (GPT Neo model)"),z3o=l(),kb=a("li"),Ile=a("strong"),Q3o=o("gptj"),W3o=o(" \u2014 "),nN=a("a"),H3o=o("GPTJForSequenceClassification"),U3o=o(" (GPT-J model)"),J3o=l(),Sb=a("li"),qle=a("strong"),Y3o=o("ibert"),K3o=o(" \u2014 "),sN=a("a"),Z3o=o("IBertForSequenceClassification"),eCo=o(" (I-BERT model)"),oCo=l(),Rb=a("li"),Nle=a("strong"),rCo=o("layoutlm"),tCo=o(" \u2014 "),lN=a("a"),aCo=o("LayoutLMForSequenceClassification"),nCo=o(" (LayoutLM model)"),sCo=l(),Bb=a("li"),jle=a("strong"),lCo=o("layoutlmv2"),iCo=o(" \u2014 "),iN=a("a"),dCo=o("LayoutLMv2ForSequenceClassification"),cCo=o(" (LayoutLMv2 model)"),fCo=l(),Pb=a("li"),Dle=a("strong"),mCo=o("led"),gCo=o(" \u2014 "),dN=a("a"),hCo=o("LEDForSequenceClassification"),pCo=o(" (LED model)"),_Co=l(),$b=a("li"),Gle=a("strong"),uCo=o("longformer"),bCo=o(" \u2014 "),cN=a("a"),vCo=o("LongformerForSequenceClassification"),FCo=o(" (Longformer model)"),TCo=l(),Ib=a("li"),Ole=a("strong"),MCo=o("mbart"),ECo=o(" \u2014 "),fN=a("a"),CCo=o("MBartForSequenceClassification"),wCo=o(" (mBART model)"),ACo=l(),qb=a("li"),Vle=a("strong"),yCo=o("megatron-bert"),LCo=o(" \u2014 "),mN=a("a"),xCo=o("MegatronBertForSequenceClassification"),kCo=o(" (MegatronBert model)"),SCo=l(),Nb=a("li"),Xle=a("strong"),RCo=o("mobilebert"),BCo=o(" \u2014 "),gN=a("a"),PCo=o("MobileBertForSequenceClassification"),$Co=o(" (MobileBERT model)"),ICo=l(),jb=a("li"),zle=a("strong"),qCo=o("mpnet"),NCo=o(" \u2014 "),hN=a("a"),jCo=o("MPNetForSequenceClassification"),DCo=o(" (MPNet model)"),GCo=l(),Db=a("li"),Qle=a("strong"),OCo=o("nystromformer"),VCo=o(" \u2014 "),pN=a("a"),XCo=o("NystromformerForSequenceClassification"),zCo=o(" (Nystromformer model)"),QCo=l(),Gb=a("li"),Wle=a("strong"),WCo=o("openai-gpt"),HCo=o(" \u2014 "),_N=a("a"),UCo=o("OpenAIGPTForSequenceClassification"),JCo=o(" (OpenAI GPT model)"),YCo=l(),Ob=a("li"),Hle=a("strong"),KCo=o("perceiver"),ZCo=o(" \u2014 "),uN=a("a"),ewo=o("PerceiverForSequenceClassification"),owo=o(" (Perceiver model)"),rwo=l(),Vb=a("li"),Ule=a("strong"),two=o("plbart"),awo=o(" \u2014 "),bN=a("a"),nwo=o("PLBartForSequenceClassification"),swo=o(" (PLBart model)"),lwo=l(),Xb=a("li"),Jle=a("strong"),iwo=o("qdqbert"),dwo=o(" \u2014 "),vN=a("a"),cwo=o("QDQBertForSequenceClassification"),fwo=o(" (QDQBert model)"),mwo=l(),zb=a("li"),Yle=a("strong"),gwo=o("reformer"),hwo=o(" \u2014 "),FN=a("a"),pwo=o("ReformerForSequenceClassification"),_wo=o(" (Reformer model)"),uwo=l(),Qb=a("li"),Kle=a("strong"),bwo=o("rembert"),vwo=o(" \u2014 "),TN=a("a"),Fwo=o("RemBertForSequenceClassification"),Two=o(" (RemBERT model)"),Mwo=l(),Wb=a("li"),Zle=a("strong"),Ewo=o("roberta"),Cwo=o(" \u2014 "),MN=a("a"),wwo=o("RobertaForSequenceClassification"),Awo=o(" (RoBERTa model)"),ywo=l(),Hb=a("li"),eie=a("strong"),Lwo=o("roformer"),xwo=o(" \u2014 "),EN=a("a"),kwo=o("RoFormerForSequenceClassification"),Swo=o(" (RoFormer model)"),Rwo=l(),Ub=a("li"),oie=a("strong"),Bwo=o("squeezebert"),Pwo=o(" \u2014 "),CN=a("a"),$wo=o("SqueezeBertForSequenceClassification"),Iwo=o(" (SqueezeBERT model)"),qwo=l(),Jb=a("li"),rie=a("strong"),Nwo=o("tapas"),jwo=o(" \u2014 "),wN=a("a"),Dwo=o("TapasForSequenceClassification"),Gwo=o(" (TAPAS model)"),Owo=l(),Yb=a("li"),tie=a("strong"),Vwo=o("tapex"),Xwo=o(" \u2014 "),AN=a("a"),zwo=o("BartForSequenceClassification"),Qwo=o(" (TAPEX model)"),Wwo=l(),Kb=a("li"),aie=a("strong"),Hwo=o("transfo-xl"),Uwo=o(" \u2014 "),yN=a("a"),Jwo=o("TransfoXLForSequenceClassification"),Ywo=o(" (Transformer-XL model)"),Kwo=l(),Zb=a("li"),nie=a("strong"),Zwo=o("xlm"),eAo=o(" \u2014 "),LN=a("a"),oAo=o("XLMForSequenceClassification"),rAo=o(" (XLM model)"),tAo=l(),e2=a("li"),sie=a("strong"),aAo=o("xlm-roberta"),nAo=o(" \u2014 "),xN=a("a"),sAo=o("XLMRobertaForSequenceClassification"),lAo=o(" (XLM-RoBERTa model)"),iAo=l(),o2=a("li"),lie=a("strong"),dAo=o("xlm-roberta-xl"),cAo=o(" \u2014 "),kN=a("a"),fAo=o("XLMRobertaXLForSequenceClassification"),mAo=o(" (XLM-RoBERTa-XL model)"),gAo=l(),r2=a("li"),iie=a("strong"),hAo=o("xlnet"),pAo=o(" \u2014 "),SN=a("a"),_Ao=o("XLNetForSequenceClassification"),uAo=o(" (XLNet model)"),bAo=l(),t2=a("li"),die=a("strong"),vAo=o("yoso"),FAo=o(" \u2014 "),RN=a("a"),TAo=o("YosoForSequenceClassification"),MAo=o(" (YOSO model)"),EAo=l(),a2=a("p"),CAo=o("The model is set in evaluation mode by default using "),cie=a("code"),wAo=o("model.eval()"),AAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fie=a("code"),yAo=o("model.train()"),LAo=l(),mie=a("p"),xAo=o("Examples:"),kAo=l(),f(J5.$$.fragment),iBe=l(),ud=a("h2"),n2=a("a"),gie=a("span"),f(Y5.$$.fragment),SAo=l(),hie=a("span"),RAo=o("AutoModelForMultipleChoice"),dBe=l(),rr=a("div"),f(K5.$$.fragment),BAo=l(),bd=a("p"),PAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),BN=a("a"),$Ao=o("from_pretrained()"),IAo=o(" class method or the "),PN=a("a"),qAo=o("from_config()"),NAo=o(` class
method.`),jAo=l(),Z5=a("p"),DAo=o("This class cannot be instantiated directly using "),pie=a("code"),GAo=o("__init__()"),OAo=o(" (throws an error)."),VAo=l(),Jr=a("div"),f(e3.$$.fragment),XAo=l(),_ie=a("p"),zAo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),QAo=l(),vd=a("p"),WAo=o(`Note:
Loading a model from its configuration file does `),uie=a("strong"),HAo=o("not"),UAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$N=a("a"),JAo=o("from_pretrained()"),YAo=o(" to load the model weights."),KAo=l(),bie=a("p"),ZAo=o("Examples:"),e0o=l(),f(o3.$$.fragment),o0o=l(),Ve=a("div"),f(r3.$$.fragment),r0o=l(),vie=a("p"),t0o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),a0o=l(),Ja=a("p"),n0o=o("The model class to instantiate is selected based on the "),Fie=a("code"),s0o=o("model_type"),l0o=o(` property of the config object (either
passed as an argument or loaded from `),Tie=a("code"),i0o=o("pretrained_model_name_or_path"),d0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=a("code"),c0o=o("pretrained_model_name_or_path"),f0o=o(":"),m0o=l(),G=a("ul"),s2=a("li"),Eie=a("strong"),g0o=o("albert"),h0o=o(" \u2014 "),IN=a("a"),p0o=o("AlbertForMultipleChoice"),_0o=o(" (ALBERT model)"),u0o=l(),l2=a("li"),Cie=a("strong"),b0o=o("bert"),v0o=o(" \u2014 "),qN=a("a"),F0o=o("BertForMultipleChoice"),T0o=o(" (BERT model)"),M0o=l(),i2=a("li"),wie=a("strong"),E0o=o("big_bird"),C0o=o(" \u2014 "),NN=a("a"),w0o=o("BigBirdForMultipleChoice"),A0o=o(" (BigBird model)"),y0o=l(),d2=a("li"),Aie=a("strong"),L0o=o("camembert"),x0o=o(" \u2014 "),jN=a("a"),k0o=o("CamembertForMultipleChoice"),S0o=o(" (CamemBERT model)"),R0o=l(),c2=a("li"),yie=a("strong"),B0o=o("canine"),P0o=o(" \u2014 "),DN=a("a"),$0o=o("CanineForMultipleChoice"),I0o=o(" (Canine model)"),q0o=l(),f2=a("li"),Lie=a("strong"),N0o=o("convbert"),j0o=o(" \u2014 "),GN=a("a"),D0o=o("ConvBertForMultipleChoice"),G0o=o(" (ConvBERT model)"),O0o=l(),m2=a("li"),xie=a("strong"),V0o=o("data2vec-text"),X0o=o(" \u2014 "),ON=a("a"),z0o=o("Data2VecTextForMultipleChoice"),Q0o=o(" (Data2VecText model)"),W0o=l(),g2=a("li"),kie=a("strong"),H0o=o("distilbert"),U0o=o(" \u2014 "),VN=a("a"),J0o=o("DistilBertForMultipleChoice"),Y0o=o(" (DistilBERT model)"),K0o=l(),h2=a("li"),Sie=a("strong"),Z0o=o("electra"),eyo=o(" \u2014 "),XN=a("a"),oyo=o("ElectraForMultipleChoice"),ryo=o(" (ELECTRA model)"),tyo=l(),p2=a("li"),Rie=a("strong"),ayo=o("flaubert"),nyo=o(" \u2014 "),zN=a("a"),syo=o("FlaubertForMultipleChoice"),lyo=o(" (FlauBERT model)"),iyo=l(),_2=a("li"),Bie=a("strong"),dyo=o("fnet"),cyo=o(" \u2014 "),QN=a("a"),fyo=o("FNetForMultipleChoice"),myo=o(" (FNet model)"),gyo=l(),u2=a("li"),Pie=a("strong"),hyo=o("funnel"),pyo=o(" \u2014 "),WN=a("a"),_yo=o("FunnelForMultipleChoice"),uyo=o(" (Funnel Transformer model)"),byo=l(),b2=a("li"),$ie=a("strong"),vyo=o("ibert"),Fyo=o(" \u2014 "),HN=a("a"),Tyo=o("IBertForMultipleChoice"),Myo=o(" (I-BERT model)"),Eyo=l(),v2=a("li"),Iie=a("strong"),Cyo=o("longformer"),wyo=o(" \u2014 "),UN=a("a"),Ayo=o("LongformerForMultipleChoice"),yyo=o(" (Longformer model)"),Lyo=l(),F2=a("li"),qie=a("strong"),xyo=o("megatron-bert"),kyo=o(" \u2014 "),JN=a("a"),Syo=o("MegatronBertForMultipleChoice"),Ryo=o(" (MegatronBert model)"),Byo=l(),T2=a("li"),Nie=a("strong"),Pyo=o("mobilebert"),$yo=o(" \u2014 "),YN=a("a"),Iyo=o("MobileBertForMultipleChoice"),qyo=o(" (MobileBERT model)"),Nyo=l(),M2=a("li"),jie=a("strong"),jyo=o("mpnet"),Dyo=o(" \u2014 "),KN=a("a"),Gyo=o("MPNetForMultipleChoice"),Oyo=o(" (MPNet model)"),Vyo=l(),E2=a("li"),Die=a("strong"),Xyo=o("nystromformer"),zyo=o(" \u2014 "),ZN=a("a"),Qyo=o("NystromformerForMultipleChoice"),Wyo=o(" (Nystromformer model)"),Hyo=l(),C2=a("li"),Gie=a("strong"),Uyo=o("qdqbert"),Jyo=o(" \u2014 "),ej=a("a"),Yyo=o("QDQBertForMultipleChoice"),Kyo=o(" (QDQBert model)"),Zyo=l(),w2=a("li"),Oie=a("strong"),eLo=o("rembert"),oLo=o(" \u2014 "),oj=a("a"),rLo=o("RemBertForMultipleChoice"),tLo=o(" (RemBERT model)"),aLo=l(),A2=a("li"),Vie=a("strong"),nLo=o("roberta"),sLo=o(" \u2014 "),rj=a("a"),lLo=o("RobertaForMultipleChoice"),iLo=o(" (RoBERTa model)"),dLo=l(),y2=a("li"),Xie=a("strong"),cLo=o("roformer"),fLo=o(" \u2014 "),tj=a("a"),mLo=o("RoFormerForMultipleChoice"),gLo=o(" (RoFormer model)"),hLo=l(),L2=a("li"),zie=a("strong"),pLo=o("squeezebert"),_Lo=o(" \u2014 "),aj=a("a"),uLo=o("SqueezeBertForMultipleChoice"),bLo=o(" (SqueezeBERT model)"),vLo=l(),x2=a("li"),Qie=a("strong"),FLo=o("xlm"),TLo=o(" \u2014 "),nj=a("a"),MLo=o("XLMForMultipleChoice"),ELo=o(" (XLM model)"),CLo=l(),k2=a("li"),Wie=a("strong"),wLo=o("xlm-roberta"),ALo=o(" \u2014 "),sj=a("a"),yLo=o("XLMRobertaForMultipleChoice"),LLo=o(" (XLM-RoBERTa model)"),xLo=l(),S2=a("li"),Hie=a("strong"),kLo=o("xlm-roberta-xl"),SLo=o(" \u2014 "),lj=a("a"),RLo=o("XLMRobertaXLForMultipleChoice"),BLo=o(" (XLM-RoBERTa-XL model)"),PLo=l(),R2=a("li"),Uie=a("strong"),$Lo=o("xlnet"),ILo=o(" \u2014 "),ij=a("a"),qLo=o("XLNetForMultipleChoice"),NLo=o(" (XLNet model)"),jLo=l(),B2=a("li"),Jie=a("strong"),DLo=o("yoso"),GLo=o(" \u2014 "),dj=a("a"),OLo=o("YosoForMultipleChoice"),VLo=o(" (YOSO model)"),XLo=l(),P2=a("p"),zLo=o("The model is set in evaluation mode by default using "),Yie=a("code"),QLo=o("model.eval()"),WLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kie=a("code"),HLo=o("model.train()"),ULo=l(),Zie=a("p"),JLo=o("Examples:"),YLo=l(),f(t3.$$.fragment),cBe=l(),Fd=a("h2"),$2=a("a"),ede=a("span"),f(a3.$$.fragment),KLo=l(),ode=a("span"),ZLo=o("AutoModelForNextSentencePrediction"),fBe=l(),tr=a("div"),f(n3.$$.fragment),exo=l(),Td=a("p"),oxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cj=a("a"),rxo=o("from_pretrained()"),txo=o(" class method or the "),fj=a("a"),axo=o("from_config()"),nxo=o(` class
method.`),sxo=l(),s3=a("p"),lxo=o("This class cannot be instantiated directly using "),rde=a("code"),ixo=o("__init__()"),dxo=o(" (throws an error)."),cxo=l(),Yr=a("div"),f(l3.$$.fragment),fxo=l(),tde=a("p"),mxo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gxo=l(),Md=a("p"),hxo=o(`Note:
Loading a model from its configuration file does `),ade=a("strong"),pxo=o("not"),_xo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mj=a("a"),uxo=o("from_pretrained()"),bxo=o(" to load the model weights."),vxo=l(),nde=a("p"),Fxo=o("Examples:"),Txo=l(),f(i3.$$.fragment),Mxo=l(),Xe=a("div"),f(d3.$$.fragment),Exo=l(),sde=a("p"),Cxo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wxo=l(),Ya=a("p"),Axo=o("The model class to instantiate is selected based on the "),lde=a("code"),yxo=o("model_type"),Lxo=o(` property of the config object (either
passed as an argument or loaded from `),ide=a("code"),xxo=o("pretrained_model_name_or_path"),kxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dde=a("code"),Sxo=o("pretrained_model_name_or_path"),Rxo=o(":"),Bxo=l(),da=a("ul"),I2=a("li"),cde=a("strong"),Pxo=o("bert"),$xo=o(" \u2014 "),gj=a("a"),Ixo=o("BertForNextSentencePrediction"),qxo=o(" (BERT model)"),Nxo=l(),q2=a("li"),fde=a("strong"),jxo=o("fnet"),Dxo=o(" \u2014 "),hj=a("a"),Gxo=o("FNetForNextSentencePrediction"),Oxo=o(" (FNet model)"),Vxo=l(),N2=a("li"),mde=a("strong"),Xxo=o("megatron-bert"),zxo=o(" \u2014 "),pj=a("a"),Qxo=o("MegatronBertForNextSentencePrediction"),Wxo=o(" (MegatronBert model)"),Hxo=l(),j2=a("li"),gde=a("strong"),Uxo=o("mobilebert"),Jxo=o(" \u2014 "),_j=a("a"),Yxo=o("MobileBertForNextSentencePrediction"),Kxo=o(" (MobileBERT model)"),Zxo=l(),D2=a("li"),hde=a("strong"),eko=o("qdqbert"),oko=o(" \u2014 "),uj=a("a"),rko=o("QDQBertForNextSentencePrediction"),tko=o(" (QDQBert model)"),ako=l(),G2=a("p"),nko=o("The model is set in evaluation mode by default using "),pde=a("code"),sko=o("model.eval()"),lko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=a("code"),iko=o("model.train()"),dko=l(),ude=a("p"),cko=o("Examples:"),fko=l(),f(c3.$$.fragment),mBe=l(),Ed=a("h2"),O2=a("a"),bde=a("span"),f(f3.$$.fragment),mko=l(),vde=a("span"),gko=o("AutoModelForTokenClassification"),gBe=l(),ar=a("div"),f(m3.$$.fragment),hko=l(),Cd=a("p"),pko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bj=a("a"),_ko=o("from_pretrained()"),uko=o(" class method or the "),vj=a("a"),bko=o("from_config()"),vko=o(` class
method.`),Fko=l(),g3=a("p"),Tko=o("This class cannot be instantiated directly using "),Fde=a("code"),Mko=o("__init__()"),Eko=o(" (throws an error)."),Cko=l(),Kr=a("div"),f(h3.$$.fragment),wko=l(),Tde=a("p"),Ako=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yko=l(),wd=a("p"),Lko=o(`Note:
Loading a model from its configuration file does `),Mde=a("strong"),xko=o("not"),kko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fj=a("a"),Sko=o("from_pretrained()"),Rko=o(" to load the model weights."),Bko=l(),Ede=a("p"),Pko=o("Examples:"),$ko=l(),f(p3.$$.fragment),Iko=l(),ze=a("div"),f(_3.$$.fragment),qko=l(),Cde=a("p"),Nko=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jko=l(),Ka=a("p"),Dko=o("The model class to instantiate is selected based on the "),wde=a("code"),Gko=o("model_type"),Oko=o(` property of the config object (either
passed as an argument or loaded from `),Ade=a("code"),Vko=o("pretrained_model_name_or_path"),Xko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yde=a("code"),zko=o("pretrained_model_name_or_path"),Qko=o(":"),Wko=l(),j=a("ul"),V2=a("li"),Lde=a("strong"),Hko=o("albert"),Uko=o(" \u2014 "),Tj=a("a"),Jko=o("AlbertForTokenClassification"),Yko=o(" (ALBERT model)"),Kko=l(),X2=a("li"),xde=a("strong"),Zko=o("bert"),eSo=o(" \u2014 "),Mj=a("a"),oSo=o("BertForTokenClassification"),rSo=o(" (BERT model)"),tSo=l(),z2=a("li"),kde=a("strong"),aSo=o("big_bird"),nSo=o(" \u2014 "),Ej=a("a"),sSo=o("BigBirdForTokenClassification"),lSo=o(" (BigBird model)"),iSo=l(),Q2=a("li"),Sde=a("strong"),dSo=o("camembert"),cSo=o(" \u2014 "),Cj=a("a"),fSo=o("CamembertForTokenClassification"),mSo=o(" (CamemBERT model)"),gSo=l(),W2=a("li"),Rde=a("strong"),hSo=o("canine"),pSo=o(" \u2014 "),wj=a("a"),_So=o("CanineForTokenClassification"),uSo=o(" (Canine model)"),bSo=l(),H2=a("li"),Bde=a("strong"),vSo=o("convbert"),FSo=o(" \u2014 "),Aj=a("a"),TSo=o("ConvBertForTokenClassification"),MSo=o(" (ConvBERT model)"),ESo=l(),U2=a("li"),Pde=a("strong"),CSo=o("data2vec-text"),wSo=o(" \u2014 "),yj=a("a"),ASo=o("Data2VecTextForTokenClassification"),ySo=o(" (Data2VecText model)"),LSo=l(),J2=a("li"),$de=a("strong"),xSo=o("deberta"),kSo=o(" \u2014 "),Lj=a("a"),SSo=o("DebertaForTokenClassification"),RSo=o(" (DeBERTa model)"),BSo=l(),Y2=a("li"),Ide=a("strong"),PSo=o("deberta-v2"),$So=o(" \u2014 "),xj=a("a"),ISo=o("DebertaV2ForTokenClassification"),qSo=o(" (DeBERTa-v2 model)"),NSo=l(),K2=a("li"),qde=a("strong"),jSo=o("distilbert"),DSo=o(" \u2014 "),kj=a("a"),GSo=o("DistilBertForTokenClassification"),OSo=o(" (DistilBERT model)"),VSo=l(),Z2=a("li"),Nde=a("strong"),XSo=o("electra"),zSo=o(" \u2014 "),Sj=a("a"),QSo=o("ElectraForTokenClassification"),WSo=o(" (ELECTRA model)"),HSo=l(),e6=a("li"),jde=a("strong"),USo=o("flaubert"),JSo=o(" \u2014 "),Rj=a("a"),YSo=o("FlaubertForTokenClassification"),KSo=o(" (FlauBERT model)"),ZSo=l(),o6=a("li"),Dde=a("strong"),eRo=o("fnet"),oRo=o(" \u2014 "),Bj=a("a"),rRo=o("FNetForTokenClassification"),tRo=o(" (FNet model)"),aRo=l(),r6=a("li"),Gde=a("strong"),nRo=o("funnel"),sRo=o(" \u2014 "),Pj=a("a"),lRo=o("FunnelForTokenClassification"),iRo=o(" (Funnel Transformer model)"),dRo=l(),t6=a("li"),Ode=a("strong"),cRo=o("gpt2"),fRo=o(" \u2014 "),$j=a("a"),mRo=o("GPT2ForTokenClassification"),gRo=o(" (OpenAI GPT-2 model)"),hRo=l(),a6=a("li"),Vde=a("strong"),pRo=o("ibert"),_Ro=o(" \u2014 "),Ij=a("a"),uRo=o("IBertForTokenClassification"),bRo=o(" (I-BERT model)"),vRo=l(),n6=a("li"),Xde=a("strong"),FRo=o("layoutlm"),TRo=o(" \u2014 "),qj=a("a"),MRo=o("LayoutLMForTokenClassification"),ERo=o(" (LayoutLM model)"),CRo=l(),s6=a("li"),zde=a("strong"),wRo=o("layoutlmv2"),ARo=o(" \u2014 "),Nj=a("a"),yRo=o("LayoutLMv2ForTokenClassification"),LRo=o(" (LayoutLMv2 model)"),xRo=l(),l6=a("li"),Qde=a("strong"),kRo=o("longformer"),SRo=o(" \u2014 "),jj=a("a"),RRo=o("LongformerForTokenClassification"),BRo=o(" (Longformer model)"),PRo=l(),i6=a("li"),Wde=a("strong"),$Ro=o("megatron-bert"),IRo=o(" \u2014 "),Dj=a("a"),qRo=o("MegatronBertForTokenClassification"),NRo=o(" (MegatronBert model)"),jRo=l(),d6=a("li"),Hde=a("strong"),DRo=o("mobilebert"),GRo=o(" \u2014 "),Gj=a("a"),ORo=o("MobileBertForTokenClassification"),VRo=o(" (MobileBERT model)"),XRo=l(),c6=a("li"),Ude=a("strong"),zRo=o("mpnet"),QRo=o(" \u2014 "),Oj=a("a"),WRo=o("MPNetForTokenClassification"),HRo=o(" (MPNet model)"),URo=l(),f6=a("li"),Jde=a("strong"),JRo=o("nystromformer"),YRo=o(" \u2014 "),Vj=a("a"),KRo=o("NystromformerForTokenClassification"),ZRo=o(" (Nystromformer model)"),eBo=l(),m6=a("li"),Yde=a("strong"),oBo=o("qdqbert"),rBo=o(" \u2014 "),Xj=a("a"),tBo=o("QDQBertForTokenClassification"),aBo=o(" (QDQBert model)"),nBo=l(),g6=a("li"),Kde=a("strong"),sBo=o("rembert"),lBo=o(" \u2014 "),zj=a("a"),iBo=o("RemBertForTokenClassification"),dBo=o(" (RemBERT model)"),cBo=l(),h6=a("li"),Zde=a("strong"),fBo=o("roberta"),mBo=o(" \u2014 "),Qj=a("a"),gBo=o("RobertaForTokenClassification"),hBo=o(" (RoBERTa model)"),pBo=l(),p6=a("li"),ece=a("strong"),_Bo=o("roformer"),uBo=o(" \u2014 "),Wj=a("a"),bBo=o("RoFormerForTokenClassification"),vBo=o(" (RoFormer model)"),FBo=l(),_6=a("li"),oce=a("strong"),TBo=o("squeezebert"),MBo=o(" \u2014 "),Hj=a("a"),EBo=o("SqueezeBertForTokenClassification"),CBo=o(" (SqueezeBERT model)"),wBo=l(),u6=a("li"),rce=a("strong"),ABo=o("xlm"),yBo=o(" \u2014 "),Uj=a("a"),LBo=o("XLMForTokenClassification"),xBo=o(" (XLM model)"),kBo=l(),b6=a("li"),tce=a("strong"),SBo=o("xlm-roberta"),RBo=o(" \u2014 "),Jj=a("a"),BBo=o("XLMRobertaForTokenClassification"),PBo=o(" (XLM-RoBERTa model)"),$Bo=l(),v6=a("li"),ace=a("strong"),IBo=o("xlm-roberta-xl"),qBo=o(" \u2014 "),Yj=a("a"),NBo=o("XLMRobertaXLForTokenClassification"),jBo=o(" (XLM-RoBERTa-XL model)"),DBo=l(),F6=a("li"),nce=a("strong"),GBo=o("xlnet"),OBo=o(" \u2014 "),Kj=a("a"),VBo=o("XLNetForTokenClassification"),XBo=o(" (XLNet model)"),zBo=l(),T6=a("li"),sce=a("strong"),QBo=o("yoso"),WBo=o(" \u2014 "),Zj=a("a"),HBo=o("YosoForTokenClassification"),UBo=o(" (YOSO model)"),JBo=l(),M6=a("p"),YBo=o("The model is set in evaluation mode by default using "),lce=a("code"),KBo=o("model.eval()"),ZBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ice=a("code"),ePo=o("model.train()"),oPo=l(),dce=a("p"),rPo=o("Examples:"),tPo=l(),f(u3.$$.fragment),hBe=l(),Ad=a("h2"),E6=a("a"),cce=a("span"),f(b3.$$.fragment),aPo=l(),fce=a("span"),nPo=o("AutoModelForQuestionAnswering"),pBe=l(),nr=a("div"),f(v3.$$.fragment),sPo=l(),yd=a("p"),lPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eD=a("a"),iPo=o("from_pretrained()"),dPo=o(" class method or the "),oD=a("a"),cPo=o("from_config()"),fPo=o(` class
method.`),mPo=l(),F3=a("p"),gPo=o("This class cannot be instantiated directly using "),mce=a("code"),hPo=o("__init__()"),pPo=o(" (throws an error)."),_Po=l(),Zr=a("div"),f(T3.$$.fragment),uPo=l(),gce=a("p"),bPo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vPo=l(),Ld=a("p"),FPo=o(`Note:
Loading a model from its configuration file does `),hce=a("strong"),TPo=o("not"),MPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=a("a"),EPo=o("from_pretrained()"),CPo=o(" to load the model weights."),wPo=l(),pce=a("p"),APo=o("Examples:"),yPo=l(),f(M3.$$.fragment),LPo=l(),Qe=a("div"),f(E3.$$.fragment),xPo=l(),_ce=a("p"),kPo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),SPo=l(),Za=a("p"),RPo=o("The model class to instantiate is selected based on the "),uce=a("code"),BPo=o("model_type"),PPo=o(` property of the config object (either
passed as an argument or loaded from `),bce=a("code"),$Po=o("pretrained_model_name_or_path"),IPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vce=a("code"),qPo=o("pretrained_model_name_or_path"),NPo=o(":"),jPo=l(),R=a("ul"),C6=a("li"),Fce=a("strong"),DPo=o("albert"),GPo=o(" \u2014 "),tD=a("a"),OPo=o("AlbertForQuestionAnswering"),VPo=o(" (ALBERT model)"),XPo=l(),w6=a("li"),Tce=a("strong"),zPo=o("bart"),QPo=o(" \u2014 "),aD=a("a"),WPo=o("BartForQuestionAnswering"),HPo=o(" (BART model)"),UPo=l(),A6=a("li"),Mce=a("strong"),JPo=o("bert"),YPo=o(" \u2014 "),nD=a("a"),KPo=o("BertForQuestionAnswering"),ZPo=o(" (BERT model)"),e$o=l(),y6=a("li"),Ece=a("strong"),o$o=o("big_bird"),r$o=o(" \u2014 "),sD=a("a"),t$o=o("BigBirdForQuestionAnswering"),a$o=o(" (BigBird model)"),n$o=l(),L6=a("li"),Cce=a("strong"),s$o=o("bigbird_pegasus"),l$o=o(" \u2014 "),lD=a("a"),i$o=o("BigBirdPegasusForQuestionAnswering"),d$o=o(" (BigBirdPegasus model)"),c$o=l(),x6=a("li"),wce=a("strong"),f$o=o("camembert"),m$o=o(" \u2014 "),iD=a("a"),g$o=o("CamembertForQuestionAnswering"),h$o=o(" (CamemBERT model)"),p$o=l(),k6=a("li"),Ace=a("strong"),_$o=o("canine"),u$o=o(" \u2014 "),dD=a("a"),b$o=o("CanineForQuestionAnswering"),v$o=o(" (Canine model)"),F$o=l(),S6=a("li"),yce=a("strong"),T$o=o("convbert"),M$o=o(" \u2014 "),cD=a("a"),E$o=o("ConvBertForQuestionAnswering"),C$o=o(" (ConvBERT model)"),w$o=l(),R6=a("li"),Lce=a("strong"),A$o=o("data2vec-text"),y$o=o(" \u2014 "),fD=a("a"),L$o=o("Data2VecTextForQuestionAnswering"),x$o=o(" (Data2VecText model)"),k$o=l(),B6=a("li"),xce=a("strong"),S$o=o("deberta"),R$o=o(" \u2014 "),mD=a("a"),B$o=o("DebertaForQuestionAnswering"),P$o=o(" (DeBERTa model)"),$$o=l(),P6=a("li"),kce=a("strong"),I$o=o("deberta-v2"),q$o=o(" \u2014 "),gD=a("a"),N$o=o("DebertaV2ForQuestionAnswering"),j$o=o(" (DeBERTa-v2 model)"),D$o=l(),$6=a("li"),Sce=a("strong"),G$o=o("distilbert"),O$o=o(" \u2014 "),hD=a("a"),V$o=o("DistilBertForQuestionAnswering"),X$o=o(" (DistilBERT model)"),z$o=l(),I6=a("li"),Rce=a("strong"),Q$o=o("electra"),W$o=o(" \u2014 "),pD=a("a"),H$o=o("ElectraForQuestionAnswering"),U$o=o(" (ELECTRA model)"),J$o=l(),q6=a("li"),Bce=a("strong"),Y$o=o("flaubert"),K$o=o(" \u2014 "),_D=a("a"),Z$o=o("FlaubertForQuestionAnsweringSimple"),eIo=o(" (FlauBERT model)"),oIo=l(),N6=a("li"),Pce=a("strong"),rIo=o("fnet"),tIo=o(" \u2014 "),uD=a("a"),aIo=o("FNetForQuestionAnswering"),nIo=o(" (FNet model)"),sIo=l(),j6=a("li"),$ce=a("strong"),lIo=o("funnel"),iIo=o(" \u2014 "),bD=a("a"),dIo=o("FunnelForQuestionAnswering"),cIo=o(" (Funnel Transformer model)"),fIo=l(),D6=a("li"),Ice=a("strong"),mIo=o("gptj"),gIo=o(" \u2014 "),vD=a("a"),hIo=o("GPTJForQuestionAnswering"),pIo=o(" (GPT-J model)"),_Io=l(),G6=a("li"),qce=a("strong"),uIo=o("ibert"),bIo=o(" \u2014 "),FD=a("a"),vIo=o("IBertForQuestionAnswering"),FIo=o(" (I-BERT model)"),TIo=l(),O6=a("li"),Nce=a("strong"),MIo=o("layoutlmv2"),EIo=o(" \u2014 "),TD=a("a"),CIo=o("LayoutLMv2ForQuestionAnswering"),wIo=o(" (LayoutLMv2 model)"),AIo=l(),V6=a("li"),jce=a("strong"),yIo=o("led"),LIo=o(" \u2014 "),MD=a("a"),xIo=o("LEDForQuestionAnswering"),kIo=o(" (LED model)"),SIo=l(),X6=a("li"),Dce=a("strong"),RIo=o("longformer"),BIo=o(" \u2014 "),ED=a("a"),PIo=o("LongformerForQuestionAnswering"),$Io=o(" (Longformer model)"),IIo=l(),z6=a("li"),Gce=a("strong"),qIo=o("lxmert"),NIo=o(" \u2014 "),CD=a("a"),jIo=o("LxmertForQuestionAnswering"),DIo=o(" (LXMERT model)"),GIo=l(),Q6=a("li"),Oce=a("strong"),OIo=o("mbart"),VIo=o(" \u2014 "),wD=a("a"),XIo=o("MBartForQuestionAnswering"),zIo=o(" (mBART model)"),QIo=l(),W6=a("li"),Vce=a("strong"),WIo=o("megatron-bert"),HIo=o(" \u2014 "),AD=a("a"),UIo=o("MegatronBertForQuestionAnswering"),JIo=o(" (MegatronBert model)"),YIo=l(),H6=a("li"),Xce=a("strong"),KIo=o("mobilebert"),ZIo=o(" \u2014 "),yD=a("a"),eqo=o("MobileBertForQuestionAnswering"),oqo=o(" (MobileBERT model)"),rqo=l(),U6=a("li"),zce=a("strong"),tqo=o("mpnet"),aqo=o(" \u2014 "),LD=a("a"),nqo=o("MPNetForQuestionAnswering"),sqo=o(" (MPNet model)"),lqo=l(),J6=a("li"),Qce=a("strong"),iqo=o("nystromformer"),dqo=o(" \u2014 "),xD=a("a"),cqo=o("NystromformerForQuestionAnswering"),fqo=o(" (Nystromformer model)"),mqo=l(),Y6=a("li"),Wce=a("strong"),gqo=o("qdqbert"),hqo=o(" \u2014 "),kD=a("a"),pqo=o("QDQBertForQuestionAnswering"),_qo=o(" (QDQBert model)"),uqo=l(),K6=a("li"),Hce=a("strong"),bqo=o("reformer"),vqo=o(" \u2014 "),SD=a("a"),Fqo=o("ReformerForQuestionAnswering"),Tqo=o(" (Reformer model)"),Mqo=l(),Z6=a("li"),Uce=a("strong"),Eqo=o("rembert"),Cqo=o(" \u2014 "),RD=a("a"),wqo=o("RemBertForQuestionAnswering"),Aqo=o(" (RemBERT model)"),yqo=l(),ev=a("li"),Jce=a("strong"),Lqo=o("roberta"),xqo=o(" \u2014 "),BD=a("a"),kqo=o("RobertaForQuestionAnswering"),Sqo=o(" (RoBERTa model)"),Rqo=l(),ov=a("li"),Yce=a("strong"),Bqo=o("roformer"),Pqo=o(" \u2014 "),PD=a("a"),$qo=o("RoFormerForQuestionAnswering"),Iqo=o(" (RoFormer model)"),qqo=l(),rv=a("li"),Kce=a("strong"),Nqo=o("splinter"),jqo=o(" \u2014 "),$D=a("a"),Dqo=o("SplinterForQuestionAnswering"),Gqo=o(" (Splinter model)"),Oqo=l(),tv=a("li"),Zce=a("strong"),Vqo=o("squeezebert"),Xqo=o(" \u2014 "),ID=a("a"),zqo=o("SqueezeBertForQuestionAnswering"),Qqo=o(" (SqueezeBERT model)"),Wqo=l(),av=a("li"),efe=a("strong"),Hqo=o("xlm"),Uqo=o(" \u2014 "),qD=a("a"),Jqo=o("XLMForQuestionAnsweringSimple"),Yqo=o(" (XLM model)"),Kqo=l(),nv=a("li"),ofe=a("strong"),Zqo=o("xlm-roberta"),eNo=o(" \u2014 "),ND=a("a"),oNo=o("XLMRobertaForQuestionAnswering"),rNo=o(" (XLM-RoBERTa model)"),tNo=l(),sv=a("li"),rfe=a("strong"),aNo=o("xlm-roberta-xl"),nNo=o(" \u2014 "),jD=a("a"),sNo=o("XLMRobertaXLForQuestionAnswering"),lNo=o(" (XLM-RoBERTa-XL model)"),iNo=l(),lv=a("li"),tfe=a("strong"),dNo=o("xlnet"),cNo=o(" \u2014 "),DD=a("a"),fNo=o("XLNetForQuestionAnsweringSimple"),mNo=o(" (XLNet model)"),gNo=l(),iv=a("li"),afe=a("strong"),hNo=o("yoso"),pNo=o(" \u2014 "),GD=a("a"),_No=o("YosoForQuestionAnswering"),uNo=o(" (YOSO model)"),bNo=l(),dv=a("p"),vNo=o("The model is set in evaluation mode by default using "),nfe=a("code"),FNo=o("model.eval()"),TNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sfe=a("code"),MNo=o("model.train()"),ENo=l(),lfe=a("p"),CNo=o("Examples:"),wNo=l(),f(C3.$$.fragment),_Be=l(),xd=a("h2"),cv=a("a"),ife=a("span"),f(w3.$$.fragment),ANo=l(),dfe=a("span"),yNo=o("AutoModelForTableQuestionAnswering"),uBe=l(),sr=a("div"),f(A3.$$.fragment),LNo=l(),kd=a("p"),xNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OD=a("a"),kNo=o("from_pretrained()"),SNo=o(" class method or the "),VD=a("a"),RNo=o("from_config()"),BNo=o(` class
method.`),PNo=l(),y3=a("p"),$No=o("This class cannot be instantiated directly using "),cfe=a("code"),INo=o("__init__()"),qNo=o(" (throws an error)."),NNo=l(),et=a("div"),f(L3.$$.fragment),jNo=l(),ffe=a("p"),DNo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),GNo=l(),Sd=a("p"),ONo=o(`Note:
Loading a model from its configuration file does `),mfe=a("strong"),VNo=o("not"),XNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=a("a"),zNo=o("from_pretrained()"),QNo=o(" to load the model weights."),WNo=l(),gfe=a("p"),HNo=o("Examples:"),UNo=l(),f(x3.$$.fragment),JNo=l(),We=a("div"),f(k3.$$.fragment),YNo=l(),hfe=a("p"),KNo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ZNo=l(),en=a("p"),ejo=o("The model class to instantiate is selected based on the "),pfe=a("code"),ojo=o("model_type"),rjo=o(` property of the config object (either
passed as an argument or loaded from `),_fe=a("code"),tjo=o("pretrained_model_name_or_path"),ajo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=a("code"),njo=o("pretrained_model_name_or_path"),sjo=o(":"),ljo=l(),bfe=a("ul"),fv=a("li"),vfe=a("strong"),ijo=o("tapas"),djo=o(" \u2014 "),zD=a("a"),cjo=o("TapasForQuestionAnswering"),fjo=o(" (TAPAS model)"),mjo=l(),mv=a("p"),gjo=o("The model is set in evaluation mode by default using "),Ffe=a("code"),hjo=o("model.eval()"),pjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tfe=a("code"),_jo=o("model.train()"),ujo=l(),Mfe=a("p"),bjo=o("Examples:"),vjo=l(),f(S3.$$.fragment),bBe=l(),Rd=a("h2"),gv=a("a"),Efe=a("span"),f(R3.$$.fragment),Fjo=l(),Cfe=a("span"),Tjo=o("AutoModelForImageClassification"),vBe=l(),lr=a("div"),f(B3.$$.fragment),Mjo=l(),Bd=a("p"),Ejo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QD=a("a"),Cjo=o("from_pretrained()"),wjo=o(" class method or the "),WD=a("a"),Ajo=o("from_config()"),yjo=o(` class
method.`),Ljo=l(),P3=a("p"),xjo=o("This class cannot be instantiated directly using "),wfe=a("code"),kjo=o("__init__()"),Sjo=o(" (throws an error)."),Rjo=l(),ot=a("div"),f($3.$$.fragment),Bjo=l(),Afe=a("p"),Pjo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$jo=l(),Pd=a("p"),Ijo=o(`Note:
Loading a model from its configuration file does `),yfe=a("strong"),qjo=o("not"),Njo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HD=a("a"),jjo=o("from_pretrained()"),Djo=o(" to load the model weights."),Gjo=l(),Lfe=a("p"),Ojo=o("Examples:"),Vjo=l(),f(I3.$$.fragment),Xjo=l(),He=a("div"),f(q3.$$.fragment),zjo=l(),xfe=a("p"),Qjo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Wjo=l(),on=a("p"),Hjo=o("The model class to instantiate is selected based on the "),kfe=a("code"),Ujo=o("model_type"),Jjo=o(` property of the config object (either
passed as an argument or loaded from `),Sfe=a("code"),Yjo=o("pretrained_model_name_or_path"),Kjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rfe=a("code"),Zjo=o("pretrained_model_name_or_path"),eDo=o(":"),oDo=l(),de=a("ul"),hv=a("li"),Bfe=a("strong"),rDo=o("beit"),tDo=o(" \u2014 "),UD=a("a"),aDo=o("BeitForImageClassification"),nDo=o(" (BEiT model)"),sDo=l(),pv=a("li"),Pfe=a("strong"),lDo=o("convnext"),iDo=o(" \u2014 "),JD=a("a"),dDo=o("ConvNextForImageClassification"),cDo=o(" (ConvNext model)"),fDo=l(),_v=a("li"),$fe=a("strong"),mDo=o("data2vec-vision"),gDo=o(" \u2014 "),YD=a("a"),hDo=o("Data2VecVisionForImageClassification"),pDo=o(" (Data2VecVision model)"),_Do=l(),Vs=a("li"),Ife=a("strong"),uDo=o("deit"),bDo=o(" \u2014 "),KD=a("a"),vDo=o("DeiTForImageClassification"),FDo=o(" or "),ZD=a("a"),TDo=o("DeiTForImageClassificationWithTeacher"),MDo=o(" (DeiT model)"),EDo=l(),uv=a("li"),qfe=a("strong"),CDo=o("imagegpt"),wDo=o(" \u2014 "),eG=a("a"),ADo=o("ImageGPTForImageClassification"),yDo=o(" (ImageGPT model)"),LDo=l(),ma=a("li"),Nfe=a("strong"),xDo=o("perceiver"),kDo=o(" \u2014 "),oG=a("a"),SDo=o("PerceiverForImageClassificationLearned"),RDo=o(" or "),rG=a("a"),BDo=o("PerceiverForImageClassificationFourier"),PDo=o(" or "),tG=a("a"),$Do=o("PerceiverForImageClassificationConvProcessing"),IDo=o(" (Perceiver model)"),qDo=l(),bv=a("li"),jfe=a("strong"),NDo=o("poolformer"),jDo=o(" \u2014 "),aG=a("a"),DDo=o("PoolFormerForImageClassification"),GDo=o(" (PoolFormer model)"),ODo=l(),vv=a("li"),Dfe=a("strong"),VDo=o("regnet"),XDo=o(" \u2014 "),nG=a("a"),zDo=o("RegNetForImageClassification"),QDo=o(" (RegNet model)"),WDo=l(),Fv=a("li"),Gfe=a("strong"),HDo=o("resnet"),UDo=o(" \u2014 "),sG=a("a"),JDo=o("ResNetForImageClassification"),YDo=o(" (ResNet model)"),KDo=l(),Tv=a("li"),Ofe=a("strong"),ZDo=o("segformer"),eGo=o(" \u2014 "),lG=a("a"),oGo=o("SegformerForImageClassification"),rGo=o(" (SegFormer model)"),tGo=l(),Mv=a("li"),Vfe=a("strong"),aGo=o("swin"),nGo=o(" \u2014 "),iG=a("a"),sGo=o("SwinForImageClassification"),lGo=o(" (Swin model)"),iGo=l(),Ev=a("li"),Xfe=a("strong"),dGo=o("van"),cGo=o(" \u2014 "),dG=a("a"),fGo=o("VanForImageClassification"),mGo=o(" (VAN model)"),gGo=l(),Cv=a("li"),zfe=a("strong"),hGo=o("vit"),pGo=o(" \u2014 "),cG=a("a"),_Go=o("ViTForImageClassification"),uGo=o(" (ViT model)"),bGo=l(),wv=a("p"),vGo=o("The model is set in evaluation mode by default using "),Qfe=a("code"),FGo=o("model.eval()"),TGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wfe=a("code"),MGo=o("model.train()"),EGo=l(),Hfe=a("p"),CGo=o("Examples:"),wGo=l(),f(N3.$$.fragment),FBe=l(),$d=a("h2"),Av=a("a"),Ufe=a("span"),f(j3.$$.fragment),AGo=l(),Jfe=a("span"),yGo=o("AutoModelForVision2Seq"),TBe=l(),ir=a("div"),f(D3.$$.fragment),LGo=l(),Id=a("p"),xGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fG=a("a"),kGo=o("from_pretrained()"),SGo=o(" class method or the "),mG=a("a"),RGo=o("from_config()"),BGo=o(` class
method.`),PGo=l(),G3=a("p"),$Go=o("This class cannot be instantiated directly using "),Yfe=a("code"),IGo=o("__init__()"),qGo=o(" (throws an error)."),NGo=l(),rt=a("div"),f(O3.$$.fragment),jGo=l(),Kfe=a("p"),DGo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),GGo=l(),qd=a("p"),OGo=o(`Note:
Loading a model from its configuration file does `),Zfe=a("strong"),VGo=o("not"),XGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=a("a"),zGo=o("from_pretrained()"),QGo=o(" to load the model weights."),WGo=l(),eme=a("p"),HGo=o("Examples:"),UGo=l(),f(V3.$$.fragment),JGo=l(),Ue=a("div"),f(X3.$$.fragment),YGo=l(),ome=a("p"),KGo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ZGo=l(),rn=a("p"),eOo=o("The model class to instantiate is selected based on the "),rme=a("code"),oOo=o("model_type"),rOo=o(` property of the config object (either
passed as an argument or loaded from `),tme=a("code"),tOo=o("pretrained_model_name_or_path"),aOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ame=a("code"),nOo=o("pretrained_model_name_or_path"),sOo=o(":"),lOo=l(),nme=a("ul"),yv=a("li"),sme=a("strong"),iOo=o("vision-encoder-decoder"),dOo=o(" \u2014 "),hG=a("a"),cOo=o("VisionEncoderDecoderModel"),fOo=o(" (Vision Encoder decoder model)"),mOo=l(),Lv=a("p"),gOo=o("The model is set in evaluation mode by default using "),lme=a("code"),hOo=o("model.eval()"),pOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ime=a("code"),_Oo=o("model.train()"),uOo=l(),dme=a("p"),bOo=o("Examples:"),vOo=l(),f(z3.$$.fragment),MBe=l(),Nd=a("h2"),xv=a("a"),cme=a("span"),f(Q3.$$.fragment),FOo=l(),fme=a("span"),TOo=o("AutoModelForAudioClassification"),EBe=l(),dr=a("div"),f(W3.$$.fragment),MOo=l(),jd=a("p"),EOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),pG=a("a"),COo=o("from_pretrained()"),wOo=o(" class method or the "),_G=a("a"),AOo=o("from_config()"),yOo=o(` class
method.`),LOo=l(),H3=a("p"),xOo=o("This class cannot be instantiated directly using "),mme=a("code"),kOo=o("__init__()"),SOo=o(" (throws an error)."),ROo=l(),tt=a("div"),f(U3.$$.fragment),BOo=l(),gme=a("p"),POo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),$Oo=l(),Dd=a("p"),IOo=o(`Note:
Loading a model from its configuration file does `),hme=a("strong"),qOo=o("not"),NOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uG=a("a"),jOo=o("from_pretrained()"),DOo=o(" to load the model weights."),GOo=l(),pme=a("p"),OOo=o("Examples:"),VOo=l(),f(J3.$$.fragment),XOo=l(),Je=a("div"),f(Y3.$$.fragment),zOo=l(),_me=a("p"),QOo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),WOo=l(),tn=a("p"),HOo=o("The model class to instantiate is selected based on the "),ume=a("code"),UOo=o("model_type"),JOo=o(` property of the config object (either
passed as an argument or loaded from `),bme=a("code"),YOo=o("pretrained_model_name_or_path"),KOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vme=a("code"),ZOo=o("pretrained_model_name_or_path"),eVo=o(":"),oVo=l(),Se=a("ul"),kv=a("li"),Fme=a("strong"),rVo=o("data2vec-audio"),tVo=o(" \u2014 "),bG=a("a"),aVo=o("Data2VecAudioForSequenceClassification"),nVo=o(" (Data2VecAudio model)"),sVo=l(),Sv=a("li"),Tme=a("strong"),lVo=o("hubert"),iVo=o(" \u2014 "),vG=a("a"),dVo=o("HubertForSequenceClassification"),cVo=o(" (Hubert model)"),fVo=l(),Rv=a("li"),Mme=a("strong"),mVo=o("sew"),gVo=o(" \u2014 "),FG=a("a"),hVo=o("SEWForSequenceClassification"),pVo=o(" (SEW model)"),_Vo=l(),Bv=a("li"),Eme=a("strong"),uVo=o("sew-d"),bVo=o(" \u2014 "),TG=a("a"),vVo=o("SEWDForSequenceClassification"),FVo=o(" (SEW-D model)"),TVo=l(),Pv=a("li"),Cme=a("strong"),MVo=o("unispeech"),EVo=o(" \u2014 "),MG=a("a"),CVo=o("UniSpeechForSequenceClassification"),wVo=o(" (UniSpeech model)"),AVo=l(),$v=a("li"),wme=a("strong"),yVo=o("unispeech-sat"),LVo=o(" \u2014 "),EG=a("a"),xVo=o("UniSpeechSatForSequenceClassification"),kVo=o(" (UniSpeechSat model)"),SVo=l(),Iv=a("li"),Ame=a("strong"),RVo=o("wav2vec2"),BVo=o(" \u2014 "),CG=a("a"),PVo=o("Wav2Vec2ForSequenceClassification"),$Vo=o(" (Wav2Vec2 model)"),IVo=l(),qv=a("li"),yme=a("strong"),qVo=o("wavlm"),NVo=o(" \u2014 "),wG=a("a"),jVo=o("WavLMForSequenceClassification"),DVo=o(" (WavLM model)"),GVo=l(),Nv=a("p"),OVo=o("The model is set in evaluation mode by default using "),Lme=a("code"),VVo=o("model.eval()"),XVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xme=a("code"),zVo=o("model.train()"),QVo=l(),kme=a("p"),WVo=o("Examples:"),HVo=l(),f(K3.$$.fragment),CBe=l(),Gd=a("h2"),jv=a("a"),Sme=a("span"),f(Z3.$$.fragment),UVo=l(),Rme=a("span"),JVo=o("AutoModelForAudioFrameClassification"),wBe=l(),cr=a("div"),f(eC.$$.fragment),YVo=l(),Od=a("p"),KVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),AG=a("a"),ZVo=o("from_pretrained()"),eXo=o(" class method or the "),yG=a("a"),oXo=o("from_config()"),rXo=o(` class
method.`),tXo=l(),oC=a("p"),aXo=o("This class cannot be instantiated directly using "),Bme=a("code"),nXo=o("__init__()"),sXo=o(" (throws an error)."),lXo=l(),at=a("div"),f(rC.$$.fragment),iXo=l(),Pme=a("p"),dXo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),cXo=l(),Vd=a("p"),fXo=o(`Note:
Loading a model from its configuration file does `),$me=a("strong"),mXo=o("not"),gXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=a("a"),hXo=o("from_pretrained()"),pXo=o(" to load the model weights."),_Xo=l(),Ime=a("p"),uXo=o("Examples:"),bXo=l(),f(tC.$$.fragment),vXo=l(),Ye=a("div"),f(aC.$$.fragment),FXo=l(),qme=a("p"),TXo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),MXo=l(),an=a("p"),EXo=o("The model class to instantiate is selected based on the "),Nme=a("code"),CXo=o("model_type"),wXo=o(` property of the config object (either
passed as an argument or loaded from `),jme=a("code"),AXo=o("pretrained_model_name_or_path"),yXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dme=a("code"),LXo=o("pretrained_model_name_or_path"),xXo=o(":"),kXo=l(),nn=a("ul"),Dv=a("li"),Gme=a("strong"),SXo=o("data2vec-audio"),RXo=o(" \u2014 "),xG=a("a"),BXo=o("Data2VecAudioForAudioFrameClassification"),PXo=o(" (Data2VecAudio model)"),$Xo=l(),Gv=a("li"),Ome=a("strong"),IXo=o("unispeech-sat"),qXo=o(" \u2014 "),kG=a("a"),NXo=o("UniSpeechSatForAudioFrameClassification"),jXo=o(" (UniSpeechSat model)"),DXo=l(),Ov=a("li"),Vme=a("strong"),GXo=o("wav2vec2"),OXo=o(" \u2014 "),SG=a("a"),VXo=o("Wav2Vec2ForAudioFrameClassification"),XXo=o(" (Wav2Vec2 model)"),zXo=l(),Vv=a("li"),Xme=a("strong"),QXo=o("wavlm"),WXo=o(" \u2014 "),RG=a("a"),HXo=o("WavLMForAudioFrameClassification"),UXo=o(" (WavLM model)"),JXo=l(),Xv=a("p"),YXo=o("The model is set in evaluation mode by default using "),zme=a("code"),KXo=o("model.eval()"),ZXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qme=a("code"),ezo=o("model.train()"),ozo=l(),Wme=a("p"),rzo=o("Examples:"),tzo=l(),f(nC.$$.fragment),ABe=l(),Xd=a("h2"),zv=a("a"),Hme=a("span"),f(sC.$$.fragment),azo=l(),Ume=a("span"),nzo=o("AutoModelForCTC"),yBe=l(),fr=a("div"),f(lC.$$.fragment),szo=l(),zd=a("p"),lzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),BG=a("a"),izo=o("from_pretrained()"),dzo=o(" class method or the "),PG=a("a"),czo=o("from_config()"),fzo=o(` class
method.`),mzo=l(),iC=a("p"),gzo=o("This class cannot be instantiated directly using "),Jme=a("code"),hzo=o("__init__()"),pzo=o(" (throws an error)."),_zo=l(),nt=a("div"),f(dC.$$.fragment),uzo=l(),Yme=a("p"),bzo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),vzo=l(),Qd=a("p"),Fzo=o(`Note:
Loading a model from its configuration file does `),Kme=a("strong"),Tzo=o("not"),Mzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$G=a("a"),Ezo=o("from_pretrained()"),Czo=o(" to load the model weights."),wzo=l(),Zme=a("p"),Azo=o("Examples:"),yzo=l(),f(cC.$$.fragment),Lzo=l(),Ke=a("div"),f(fC.$$.fragment),xzo=l(),ege=a("p"),kzo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Szo=l(),sn=a("p"),Rzo=o("The model class to instantiate is selected based on the "),oge=a("code"),Bzo=o("model_type"),Pzo=o(` property of the config object (either
passed as an argument or loaded from `),rge=a("code"),$zo=o("pretrained_model_name_or_path"),Izo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tge=a("code"),qzo=o("pretrained_model_name_or_path"),Nzo=o(":"),jzo=l(),Re=a("ul"),Qv=a("li"),age=a("strong"),Dzo=o("data2vec-audio"),Gzo=o(" \u2014 "),IG=a("a"),Ozo=o("Data2VecAudioForCTC"),Vzo=o(" (Data2VecAudio model)"),Xzo=l(),Wv=a("li"),nge=a("strong"),zzo=o("hubert"),Qzo=o(" \u2014 "),qG=a("a"),Wzo=o("HubertForCTC"),Hzo=o(" (Hubert model)"),Uzo=l(),Hv=a("li"),sge=a("strong"),Jzo=o("sew"),Yzo=o(" \u2014 "),NG=a("a"),Kzo=o("SEWForCTC"),Zzo=o(" (SEW model)"),eQo=l(),Uv=a("li"),lge=a("strong"),oQo=o("sew-d"),rQo=o(" \u2014 "),jG=a("a"),tQo=o("SEWDForCTC"),aQo=o(" (SEW-D model)"),nQo=l(),Jv=a("li"),ige=a("strong"),sQo=o("unispeech"),lQo=o(" \u2014 "),DG=a("a"),iQo=o("UniSpeechForCTC"),dQo=o(" (UniSpeech model)"),cQo=l(),Yv=a("li"),dge=a("strong"),fQo=o("unispeech-sat"),mQo=o(" \u2014 "),GG=a("a"),gQo=o("UniSpeechSatForCTC"),hQo=o(" (UniSpeechSat model)"),pQo=l(),Kv=a("li"),cge=a("strong"),_Qo=o("wav2vec2"),uQo=o(" \u2014 "),OG=a("a"),bQo=o("Wav2Vec2ForCTC"),vQo=o(" (Wav2Vec2 model)"),FQo=l(),Zv=a("li"),fge=a("strong"),TQo=o("wavlm"),MQo=o(" \u2014 "),VG=a("a"),EQo=o("WavLMForCTC"),CQo=o(" (WavLM model)"),wQo=l(),eF=a("p"),AQo=o("The model is set in evaluation mode by default using "),mge=a("code"),yQo=o("model.eval()"),LQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gge=a("code"),xQo=o("model.train()"),kQo=l(),hge=a("p"),SQo=o("Examples:"),RQo=l(),f(mC.$$.fragment),LBe=l(),Wd=a("h2"),oF=a("a"),pge=a("span"),f(gC.$$.fragment),BQo=l(),_ge=a("span"),PQo=o("AutoModelForSpeechSeq2Seq"),xBe=l(),mr=a("div"),f(hC.$$.fragment),$Qo=l(),Hd=a("p"),IQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XG=a("a"),qQo=o("from_pretrained()"),NQo=o(" class method or the "),zG=a("a"),jQo=o("from_config()"),DQo=o(` class
method.`),GQo=l(),pC=a("p"),OQo=o("This class cannot be instantiated directly using "),uge=a("code"),VQo=o("__init__()"),XQo=o(" (throws an error)."),zQo=l(),st=a("div"),f(_C.$$.fragment),QQo=l(),bge=a("p"),WQo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),HQo=l(),Ud=a("p"),UQo=o(`Note:
Loading a model from its configuration file does `),vge=a("strong"),JQo=o("not"),YQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=a("a"),KQo=o("from_pretrained()"),ZQo=o(" to load the model weights."),eWo=l(),Fge=a("p"),oWo=o("Examples:"),rWo=l(),f(uC.$$.fragment),tWo=l(),Ze=a("div"),f(bC.$$.fragment),aWo=l(),Tge=a("p"),nWo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),sWo=l(),ln=a("p"),lWo=o("The model class to instantiate is selected based on the "),Mge=a("code"),iWo=o("model_type"),dWo=o(` property of the config object (either
passed as an argument or loaded from `),Ege=a("code"),cWo=o("pretrained_model_name_or_path"),fWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=a("code"),mWo=o("pretrained_model_name_or_path"),gWo=o(":"),hWo=l(),vC=a("ul"),rF=a("li"),wge=a("strong"),pWo=o("speech-encoder-decoder"),_Wo=o(" \u2014 "),WG=a("a"),uWo=o("SpeechEncoderDecoderModel"),bWo=o(" (Speech Encoder decoder model)"),vWo=l(),tF=a("li"),Age=a("strong"),FWo=o("speech_to_text"),TWo=o(" \u2014 "),HG=a("a"),MWo=o("Speech2TextForConditionalGeneration"),EWo=o(" (Speech2Text model)"),CWo=l(),aF=a("p"),wWo=o("The model is set in evaluation mode by default using "),yge=a("code"),AWo=o("model.eval()"),yWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=a("code"),LWo=o("model.train()"),xWo=l(),xge=a("p"),kWo=o("Examples:"),SWo=l(),f(FC.$$.fragment),kBe=l(),Jd=a("h2"),nF=a("a"),kge=a("span"),f(TC.$$.fragment),RWo=l(),Sge=a("span"),BWo=o("AutoModelForAudioXVector"),SBe=l(),gr=a("div"),f(MC.$$.fragment),PWo=l(),Yd=a("p"),$Wo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),UG=a("a"),IWo=o("from_pretrained()"),qWo=o(" class method or the "),JG=a("a"),NWo=o("from_config()"),jWo=o(` class
method.`),DWo=l(),EC=a("p"),GWo=o("This class cannot be instantiated directly using "),Rge=a("code"),OWo=o("__init__()"),VWo=o(" (throws an error)."),XWo=l(),lt=a("div"),f(CC.$$.fragment),zWo=l(),Bge=a("p"),QWo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),WWo=l(),Kd=a("p"),HWo=o(`Note:
Loading a model from its configuration file does `),Pge=a("strong"),UWo=o("not"),JWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=a("a"),YWo=o("from_pretrained()"),KWo=o(" to load the model weights."),ZWo=l(),$ge=a("p"),eHo=o("Examples:"),oHo=l(),f(wC.$$.fragment),rHo=l(),eo=a("div"),f(AC.$$.fragment),tHo=l(),Ige=a("p"),aHo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),nHo=l(),dn=a("p"),sHo=o("The model class to instantiate is selected based on the "),qge=a("code"),lHo=o("model_type"),iHo=o(` property of the config object (either
passed as an argument or loaded from `),Nge=a("code"),dHo=o("pretrained_model_name_or_path"),cHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jge=a("code"),fHo=o("pretrained_model_name_or_path"),mHo=o(":"),gHo=l(),cn=a("ul"),sF=a("li"),Dge=a("strong"),hHo=o("data2vec-audio"),pHo=o(" \u2014 "),KG=a("a"),_Ho=o("Data2VecAudioForXVector"),uHo=o(" (Data2VecAudio model)"),bHo=l(),lF=a("li"),Gge=a("strong"),vHo=o("unispeech-sat"),FHo=o(" \u2014 "),ZG=a("a"),THo=o("UniSpeechSatForXVector"),MHo=o(" (UniSpeechSat model)"),EHo=l(),iF=a("li"),Oge=a("strong"),CHo=o("wav2vec2"),wHo=o(" \u2014 "),eO=a("a"),AHo=o("Wav2Vec2ForXVector"),yHo=o(" (Wav2Vec2 model)"),LHo=l(),dF=a("li"),Vge=a("strong"),xHo=o("wavlm"),kHo=o(" \u2014 "),oO=a("a"),SHo=o("WavLMForXVector"),RHo=o(" (WavLM model)"),BHo=l(),cF=a("p"),PHo=o("The model is set in evaluation mode by default using "),Xge=a("code"),$Ho=o("model.eval()"),IHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=a("code"),qHo=o("model.train()"),NHo=l(),Qge=a("p"),jHo=o("Examples:"),DHo=l(),f(yC.$$.fragment),RBe=l(),Zd=a("h2"),fF=a("a"),Wge=a("span"),f(LC.$$.fragment),GHo=l(),Hge=a("span"),OHo=o("AutoModelForMaskedImageModeling"),BBe=l(),hr=a("div"),f(xC.$$.fragment),VHo=l(),ec=a("p"),XHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),rO=a("a"),zHo=o("from_pretrained()"),QHo=o(" class method or the "),tO=a("a"),WHo=o("from_config()"),HHo=o(` class
method.`),UHo=l(),kC=a("p"),JHo=o("This class cannot be instantiated directly using "),Uge=a("code"),YHo=o("__init__()"),KHo=o(" (throws an error)."),ZHo=l(),it=a("div"),f(SC.$$.fragment),eUo=l(),Jge=a("p"),oUo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),rUo=l(),oc=a("p"),tUo=o(`Note:
Loading a model from its configuration file does `),Yge=a("strong"),aUo=o("not"),nUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),sUo=o("from_pretrained()"),lUo=o(" to load the model weights."),iUo=l(),Kge=a("p"),dUo=o("Examples:"),cUo=l(),f(RC.$$.fragment),fUo=l(),oo=a("div"),f(BC.$$.fragment),mUo=l(),Zge=a("p"),gUo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),hUo=l(),fn=a("p"),pUo=o("The model class to instantiate is selected based on the "),ehe=a("code"),_Uo=o("model_type"),uUo=o(` property of the config object (either
passed as an argument or loaded from `),ohe=a("code"),bUo=o("pretrained_model_name_or_path"),vUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rhe=a("code"),FUo=o("pretrained_model_name_or_path"),TUo=o(":"),MUo=l(),rc=a("ul"),mF=a("li"),the=a("strong"),EUo=o("deit"),CUo=o(" \u2014 "),nO=a("a"),wUo=o("DeiTForMaskedImageModeling"),AUo=o(" (DeiT model)"),yUo=l(),gF=a("li"),ahe=a("strong"),LUo=o("swin"),xUo=o(" \u2014 "),sO=a("a"),kUo=o("SwinForMaskedImageModeling"),SUo=o(" (Swin model)"),RUo=l(),hF=a("li"),nhe=a("strong"),BUo=o("vit"),PUo=o(" \u2014 "),lO=a("a"),$Uo=o("ViTForMaskedImageModeling"),IUo=o(" (ViT model)"),qUo=l(),pF=a("p"),NUo=o("The model is set in evaluation mode by default using "),she=a("code"),jUo=o("model.eval()"),DUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=a("code"),GUo=o("model.train()"),OUo=l(),ihe=a("p"),VUo=o("Examples:"),XUo=l(),f(PC.$$.fragment),PBe=l(),tc=a("h2"),_F=a("a"),dhe=a("span"),f($C.$$.fragment),zUo=l(),che=a("span"),QUo=o("AutoModelForObjectDetection"),$Be=l(),pr=a("div"),f(IC.$$.fragment),WUo=l(),ac=a("p"),HUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),iO=a("a"),UUo=o("from_pretrained()"),JUo=o(" class method or the "),dO=a("a"),YUo=o("from_config()"),KUo=o(` class
method.`),ZUo=l(),qC=a("p"),eJo=o("This class cannot be instantiated directly using "),fhe=a("code"),oJo=o("__init__()"),rJo=o(" (throws an error)."),tJo=l(),dt=a("div"),f(NC.$$.fragment),aJo=l(),mhe=a("p"),nJo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),sJo=l(),nc=a("p"),lJo=o(`Note:
Loading a model from its configuration file does `),ghe=a("strong"),iJo=o("not"),dJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=a("a"),cJo=o("from_pretrained()"),fJo=o(" to load the model weights."),mJo=l(),hhe=a("p"),gJo=o("Examples:"),hJo=l(),f(jC.$$.fragment),pJo=l(),ro=a("div"),f(DC.$$.fragment),_Jo=l(),phe=a("p"),uJo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),bJo=l(),mn=a("p"),vJo=o("The model class to instantiate is selected based on the "),_he=a("code"),FJo=o("model_type"),TJo=o(` property of the config object (either
passed as an argument or loaded from `),uhe=a("code"),MJo=o("pretrained_model_name_or_path"),EJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=a("code"),CJo=o("pretrained_model_name_or_path"),wJo=o(":"),AJo=l(),vhe=a("ul"),uF=a("li"),Fhe=a("strong"),yJo=o("detr"),LJo=o(" \u2014 "),fO=a("a"),xJo=o("DetrForObjectDetection"),kJo=o(" (DETR model)"),SJo=l(),bF=a("p"),RJo=o("The model is set in evaluation mode by default using "),The=a("code"),BJo=o("model.eval()"),PJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=a("code"),$Jo=o("model.train()"),IJo=l(),Ehe=a("p"),qJo=o("Examples:"),NJo=l(),f(GC.$$.fragment),IBe=l(),sc=a("h2"),vF=a("a"),Che=a("span"),f(OC.$$.fragment),jJo=l(),whe=a("span"),DJo=o("AutoModelForImageSegmentation"),qBe=l(),_r=a("div"),f(VC.$$.fragment),GJo=l(),lc=a("p"),OJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),mO=a("a"),VJo=o("from_pretrained()"),XJo=o(" class method or the "),gO=a("a"),zJo=o("from_config()"),QJo=o(` class
method.`),WJo=l(),XC=a("p"),HJo=o("This class cannot be instantiated directly using "),Ahe=a("code"),UJo=o("__init__()"),JJo=o(" (throws an error)."),YJo=l(),ct=a("div"),f(zC.$$.fragment),KJo=l(),yhe=a("p"),ZJo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),eYo=l(),ic=a("p"),oYo=o(`Note:
Loading a model from its configuration file does `),Lhe=a("strong"),rYo=o("not"),tYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=a("a"),aYo=o("from_pretrained()"),nYo=o(" to load the model weights."),sYo=l(),xhe=a("p"),lYo=o("Examples:"),iYo=l(),f(QC.$$.fragment),dYo=l(),to=a("div"),f(WC.$$.fragment),cYo=l(),khe=a("p"),fYo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),mYo=l(),gn=a("p"),gYo=o("The model class to instantiate is selected based on the "),She=a("code"),hYo=o("model_type"),pYo=o(` property of the config object (either
passed as an argument or loaded from `),Rhe=a("code"),_Yo=o("pretrained_model_name_or_path"),uYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=a("code"),bYo=o("pretrained_model_name_or_path"),vYo=o(":"),FYo=l(),Phe=a("ul"),FF=a("li"),$he=a("strong"),TYo=o("detr"),MYo=o(" \u2014 "),pO=a("a"),EYo=o("DetrForSegmentation"),CYo=o(" (DETR model)"),wYo=l(),TF=a("p"),AYo=o("The model is set in evaluation mode by default using "),Ihe=a("code"),yYo=o("model.eval()"),LYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qhe=a("code"),xYo=o("model.train()"),kYo=l(),Nhe=a("p"),SYo=o("Examples:"),RYo=l(),f(HC.$$.fragment),NBe=l(),dc=a("h2"),MF=a("a"),jhe=a("span"),f(UC.$$.fragment),BYo=l(),Dhe=a("span"),PYo=o("AutoModelForSemanticSegmentation"),jBe=l(),ur=a("div"),f(JC.$$.fragment),$Yo=l(),cc=a("p"),IYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),_O=a("a"),qYo=o("from_pretrained()"),NYo=o(" class method or the "),uO=a("a"),jYo=o("from_config()"),DYo=o(` class
method.`),GYo=l(),YC=a("p"),OYo=o("This class cannot be instantiated directly using "),Ghe=a("code"),VYo=o("__init__()"),XYo=o(" (throws an error)."),zYo=l(),ft=a("div"),f(KC.$$.fragment),QYo=l(),Ohe=a("p"),WYo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),HYo=l(),fc=a("p"),UYo=o(`Note:
Loading a model from its configuration file does `),Vhe=a("strong"),JYo=o("not"),YYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=a("a"),KYo=o("from_pretrained()"),ZYo=o(" to load the model weights."),eKo=l(),Xhe=a("p"),oKo=o("Examples:"),rKo=l(),f(ZC.$$.fragment),tKo=l(),ao=a("div"),f(ew.$$.fragment),aKo=l(),zhe=a("p"),nKo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),sKo=l(),hn=a("p"),lKo=o("The model class to instantiate is selected based on the "),Qhe=a("code"),iKo=o("model_type"),dKo=o(` property of the config object (either
passed as an argument or loaded from `),Whe=a("code"),cKo=o("pretrained_model_name_or_path"),fKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=a("code"),mKo=o("pretrained_model_name_or_path"),gKo=o(":"),hKo=l(),pn=a("ul"),EF=a("li"),Uhe=a("strong"),pKo=o("beit"),_Ko=o(" \u2014 "),vO=a("a"),uKo=o("BeitForSemanticSegmentation"),bKo=o(" (BEiT model)"),vKo=l(),CF=a("li"),Jhe=a("strong"),FKo=o("data2vec-vision"),TKo=o(" \u2014 "),FO=a("a"),MKo=o("Data2VecVisionForSemanticSegmentation"),EKo=o(" (Data2VecVision model)"),CKo=l(),wF=a("li"),Yhe=a("strong"),wKo=o("dpt"),AKo=o(" \u2014 "),TO=a("a"),yKo=o("DPTForSemanticSegmentation"),LKo=o(" (DPT model)"),xKo=l(),AF=a("li"),Khe=a("strong"),kKo=o("segformer"),SKo=o(" \u2014 "),MO=a("a"),RKo=o("SegformerForSemanticSegmentation"),BKo=o(" (SegFormer model)"),PKo=l(),yF=a("p"),$Ko=o("The model is set in evaluation mode by default using "),Zhe=a("code"),IKo=o("model.eval()"),qKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=a("code"),NKo=o("model.train()"),jKo=l(),ope=a("p"),DKo=o("Examples:"),GKo=l(),f(ow.$$.fragment),DBe=l(),mc=a("h2"),LF=a("a"),rpe=a("span"),f(rw.$$.fragment),OKo=l(),tpe=a("span"),VKo=o("AutoModelForInstanceSegmentation"),GBe=l(),br=a("div"),f(tw.$$.fragment),XKo=l(),gc=a("p"),zKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),EO=a("a"),QKo=o("from_pretrained()"),WKo=o(" class method or the "),CO=a("a"),HKo=o("from_config()"),UKo=o(` class
method.`),JKo=l(),aw=a("p"),YKo=o("This class cannot be instantiated directly using "),ape=a("code"),KKo=o("__init__()"),ZKo=o(" (throws an error)."),eZo=l(),mt=a("div"),f(nw.$$.fragment),oZo=l(),npe=a("p"),rZo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),tZo=l(),hc=a("p"),aZo=o(`Note:
Loading a model from its configuration file does `),spe=a("strong"),nZo=o("not"),sZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=a("a"),lZo=o("from_pretrained()"),iZo=o(" to load the model weights."),dZo=l(),lpe=a("p"),cZo=o("Examples:"),fZo=l(),f(sw.$$.fragment),mZo=l(),no=a("div"),f(lw.$$.fragment),gZo=l(),ipe=a("p"),hZo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),pZo=l(),_n=a("p"),_Zo=o("The model class to instantiate is selected based on the "),dpe=a("code"),uZo=o("model_type"),bZo=o(` property of the config object (either
passed as an argument or loaded from `),cpe=a("code"),vZo=o("pretrained_model_name_or_path"),FZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=a("code"),TZo=o("pretrained_model_name_or_path"),MZo=o(":"),EZo=l(),mpe=a("ul"),xF=a("li"),gpe=a("strong"),CZo=o("maskformer"),wZo=o(" \u2014 "),AO=a("a"),AZo=o("MaskFormerForInstanceSegmentation"),yZo=o(" (MaskFormer model)"),LZo=l(),kF=a("p"),xZo=o("The model is set in evaluation mode by default using "),hpe=a("code"),kZo=o("model.eval()"),SZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ppe=a("code"),RZo=o("model.train()"),BZo=l(),_pe=a("p"),PZo=o("Examples:"),$Zo=l(),f(iw.$$.fragment),OBe=l(),pc=a("h2"),SF=a("a"),upe=a("span"),f(dw.$$.fragment),IZo=l(),bpe=a("span"),qZo=o("TFAutoModel"),VBe=l(),vr=a("div"),f(cw.$$.fragment),NZo=l(),_c=a("p"),jZo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yO=a("a"),DZo=o("from_pretrained()"),GZo=o(" class method or the "),LO=a("a"),OZo=o("from_config()"),VZo=o(` class
method.`),XZo=l(),fw=a("p"),zZo=o("This class cannot be instantiated directly using "),vpe=a("code"),QZo=o("__init__()"),WZo=o(" (throws an error)."),HZo=l(),gt=a("div"),f(mw.$$.fragment),UZo=l(),Fpe=a("p"),JZo=o("Instantiates one of the base model classes of the library from a configuration."),YZo=l(),uc=a("p"),KZo=o(`Note:
Loading a model from its configuration file does `),Tpe=a("strong"),ZZo=o("not"),eer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xO=a("a"),oer=o("from_pretrained()"),rer=o(" to load the model weights."),ter=l(),Mpe=a("p"),aer=o("Examples:"),ner=l(),f(gw.$$.fragment),ser=l(),ho=a("div"),f(hw.$$.fragment),ler=l(),Epe=a("p"),ier=o("Instantiate one of the base model classes of the library from a pretrained model."),der=l(),un=a("p"),cer=o("The model class to instantiate is selected based on the "),Cpe=a("code"),fer=o("model_type"),mer=o(` property of the config object (either
passed as an argument or loaded from `),wpe=a("code"),ger=o("pretrained_model_name_or_path"),her=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=a("code"),per=o("pretrained_model_name_or_path"),_er=o(":"),uer=l(),x=a("ul"),RF=a("li"),ype=a("strong"),ber=o("albert"),ver=o(" \u2014 "),kO=a("a"),Fer=o("TFAlbertModel"),Ter=o(" (ALBERT model)"),Mer=l(),BF=a("li"),Lpe=a("strong"),Eer=o("bart"),Cer=o(" \u2014 "),SO=a("a"),wer=o("TFBartModel"),Aer=o(" (BART model)"),yer=l(),PF=a("li"),xpe=a("strong"),Ler=o("bert"),xer=o(" \u2014 "),RO=a("a"),ker=o("TFBertModel"),Ser=o(" (BERT model)"),Rer=l(),$F=a("li"),kpe=a("strong"),Ber=o("blenderbot"),Per=o(" \u2014 "),BO=a("a"),$er=o("TFBlenderbotModel"),Ier=o(" (Blenderbot model)"),qer=l(),IF=a("li"),Spe=a("strong"),Ner=o("blenderbot-small"),jer=o(" \u2014 "),PO=a("a"),Der=o("TFBlenderbotSmallModel"),Ger=o(" (BlenderbotSmall model)"),Oer=l(),qF=a("li"),Rpe=a("strong"),Ver=o("camembert"),Xer=o(" \u2014 "),$O=a("a"),zer=o("TFCamembertModel"),Qer=o(" (CamemBERT model)"),Wer=l(),NF=a("li"),Bpe=a("strong"),Her=o("clip"),Uer=o(" \u2014 "),IO=a("a"),Jer=o("TFCLIPModel"),Yer=o(" (CLIP model)"),Ker=l(),jF=a("li"),Ppe=a("strong"),Zer=o("convbert"),eor=o(" \u2014 "),qO=a("a"),oor=o("TFConvBertModel"),ror=o(" (ConvBERT model)"),tor=l(),DF=a("li"),$pe=a("strong"),aor=o("convnext"),nor=o(" \u2014 "),NO=a("a"),sor=o("TFConvNextModel"),lor=o(" (ConvNext model)"),ior=l(),GF=a("li"),Ipe=a("strong"),dor=o("ctrl"),cor=o(" \u2014 "),jO=a("a"),mor=o("TFCTRLModel"),gor=o(" (CTRL model)"),hor=l(),OF=a("li"),qpe=a("strong"),por=o("deberta"),_or=o(" \u2014 "),DO=a("a"),uor=o("TFDebertaModel"),bor=o(" (DeBERTa model)"),vor=l(),VF=a("li"),Npe=a("strong"),For=o("deberta-v2"),Tor=o(" \u2014 "),GO=a("a"),Mor=o("TFDebertaV2Model"),Eor=o(" (DeBERTa-v2 model)"),Cor=l(),XF=a("li"),jpe=a("strong"),wor=o("distilbert"),Aor=o(" \u2014 "),OO=a("a"),yor=o("TFDistilBertModel"),Lor=o(" (DistilBERT model)"),xor=l(),zF=a("li"),Dpe=a("strong"),kor=o("dpr"),Sor=o(" \u2014 "),VO=a("a"),Ror=o("TFDPRQuestionEncoder"),Bor=o(" (DPR model)"),Por=l(),QF=a("li"),Gpe=a("strong"),$or=o("electra"),Ior=o(" \u2014 "),XO=a("a"),qor=o("TFElectraModel"),Nor=o(" (ELECTRA model)"),jor=l(),WF=a("li"),Ope=a("strong"),Dor=o("flaubert"),Gor=o(" \u2014 "),zO=a("a"),Oor=o("TFFlaubertModel"),Vor=o(" (FlauBERT model)"),Xor=l(),Xs=a("li"),Vpe=a("strong"),zor=o("funnel"),Qor=o(" \u2014 "),QO=a("a"),Wor=o("TFFunnelModel"),Hor=o(" or "),WO=a("a"),Uor=o("TFFunnelBaseModel"),Jor=o(" (Funnel Transformer model)"),Yor=l(),HF=a("li"),Xpe=a("strong"),Kor=o("gpt2"),Zor=o(" \u2014 "),HO=a("a"),err=o("TFGPT2Model"),orr=o(" (OpenAI GPT-2 model)"),rrr=l(),UF=a("li"),zpe=a("strong"),trr=o("gptj"),arr=o(" \u2014 "),UO=a("a"),nrr=o("TFGPTJModel"),srr=o(" (GPT-J model)"),lrr=l(),JF=a("li"),Qpe=a("strong"),irr=o("hubert"),drr=o(" \u2014 "),JO=a("a"),crr=o("TFHubertModel"),frr=o(" (Hubert model)"),mrr=l(),YF=a("li"),Wpe=a("strong"),grr=o("layoutlm"),hrr=o(" \u2014 "),YO=a("a"),prr=o("TFLayoutLMModel"),_rr=o(" (LayoutLM model)"),urr=l(),KF=a("li"),Hpe=a("strong"),brr=o("led"),vrr=o(" \u2014 "),KO=a("a"),Frr=o("TFLEDModel"),Trr=o(" (LED model)"),Mrr=l(),ZF=a("li"),Upe=a("strong"),Err=o("longformer"),Crr=o(" \u2014 "),ZO=a("a"),wrr=o("TFLongformerModel"),Arr=o(" (Longformer model)"),yrr=l(),eT=a("li"),Jpe=a("strong"),Lrr=o("lxmert"),xrr=o(" \u2014 "),eV=a("a"),krr=o("TFLxmertModel"),Srr=o(" (LXMERT model)"),Rrr=l(),oT=a("li"),Ype=a("strong"),Brr=o("marian"),Prr=o(" \u2014 "),oV=a("a"),$rr=o("TFMarianModel"),Irr=o(" (Marian model)"),qrr=l(),rT=a("li"),Kpe=a("strong"),Nrr=o("mbart"),jrr=o(" \u2014 "),rV=a("a"),Drr=o("TFMBartModel"),Grr=o(" (mBART model)"),Orr=l(),tT=a("li"),Zpe=a("strong"),Vrr=o("mobilebert"),Xrr=o(" \u2014 "),tV=a("a"),zrr=o("TFMobileBertModel"),Qrr=o(" (MobileBERT model)"),Wrr=l(),aT=a("li"),e_e=a("strong"),Hrr=o("mpnet"),Urr=o(" \u2014 "),aV=a("a"),Jrr=o("TFMPNetModel"),Yrr=o(" (MPNet model)"),Krr=l(),nT=a("li"),o_e=a("strong"),Zrr=o("mt5"),etr=o(" \u2014 "),nV=a("a"),otr=o("TFMT5Model"),rtr=o(" (mT5 model)"),ttr=l(),sT=a("li"),r_e=a("strong"),atr=o("openai-gpt"),ntr=o(" \u2014 "),sV=a("a"),str=o("TFOpenAIGPTModel"),ltr=o(" (OpenAI GPT model)"),itr=l(),lT=a("li"),t_e=a("strong"),dtr=o("pegasus"),ctr=o(" \u2014 "),lV=a("a"),ftr=o("TFPegasusModel"),mtr=o(" (Pegasus model)"),gtr=l(),iT=a("li"),a_e=a("strong"),htr=o("rembert"),ptr=o(" \u2014 "),iV=a("a"),_tr=o("TFRemBertModel"),utr=o(" (RemBERT model)"),btr=l(),dT=a("li"),n_e=a("strong"),vtr=o("roberta"),Ftr=o(" \u2014 "),dV=a("a"),Ttr=o("TFRobertaModel"),Mtr=o(" (RoBERTa model)"),Etr=l(),cT=a("li"),s_e=a("strong"),Ctr=o("roformer"),wtr=o(" \u2014 "),cV=a("a"),Atr=o("TFRoFormerModel"),ytr=o(" (RoFormer model)"),Ltr=l(),fT=a("li"),l_e=a("strong"),xtr=o("speech_to_text"),ktr=o(" \u2014 "),fV=a("a"),Str=o("TFSpeech2TextModel"),Rtr=o(" (Speech2Text model)"),Btr=l(),mT=a("li"),i_e=a("strong"),Ptr=o("t5"),$tr=o(" \u2014 "),mV=a("a"),Itr=o("TFT5Model"),qtr=o(" (T5 model)"),Ntr=l(),gT=a("li"),d_e=a("strong"),jtr=o("tapas"),Dtr=o(" \u2014 "),gV=a("a"),Gtr=o("TFTapasModel"),Otr=o(" (TAPAS model)"),Vtr=l(),hT=a("li"),c_e=a("strong"),Xtr=o("transfo-xl"),ztr=o(" \u2014 "),hV=a("a"),Qtr=o("TFTransfoXLModel"),Wtr=o(" (Transformer-XL model)"),Htr=l(),pT=a("li"),f_e=a("strong"),Utr=o("vit"),Jtr=o(" \u2014 "),pV=a("a"),Ytr=o("TFViTModel"),Ktr=o(" (ViT model)"),Ztr=l(),_T=a("li"),m_e=a("strong"),ear=o("vit_mae"),oar=o(" \u2014 "),_V=a("a"),rar=o("TFViTMAEModel"),tar=o(" (ViTMAE model)"),aar=l(),uT=a("li"),g_e=a("strong"),nar=o("wav2vec2"),sar=o(" \u2014 "),uV=a("a"),lar=o("TFWav2Vec2Model"),iar=o(" (Wav2Vec2 model)"),dar=l(),bT=a("li"),h_e=a("strong"),car=o("xlm"),far=o(" \u2014 "),bV=a("a"),mar=o("TFXLMModel"),gar=o(" (XLM model)"),har=l(),vT=a("li"),p_e=a("strong"),par=o("xlm-roberta"),_ar=o(" \u2014 "),vV=a("a"),uar=o("TFXLMRobertaModel"),bar=o(" (XLM-RoBERTa model)"),Far=l(),FT=a("li"),__e=a("strong"),Tar=o("xlnet"),Mar=o(" \u2014 "),FV=a("a"),Ear=o("TFXLNetModel"),Car=o(" (XLNet model)"),war=l(),u_e=a("p"),Aar=o("Examples:"),yar=l(),f(pw.$$.fragment),XBe=l(),bc=a("h2"),TT=a("a"),b_e=a("span"),f(_w.$$.fragment),Lar=l(),v_e=a("span"),xar=o("TFAutoModelForPreTraining"),zBe=l(),Fr=a("div"),f(uw.$$.fragment),kar=l(),vc=a("p"),Sar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TV=a("a"),Rar=o("from_pretrained()"),Bar=o(" class method or the "),MV=a("a"),Par=o("from_config()"),$ar=o(` class
method.`),Iar=l(),bw=a("p"),qar=o("This class cannot be instantiated directly using "),F_e=a("code"),Nar=o("__init__()"),jar=o(" (throws an error)."),Dar=l(),ht=a("div"),f(vw.$$.fragment),Gar=l(),T_e=a("p"),Oar=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Var=l(),Fc=a("p"),Xar=o(`Note:
Loading a model from its configuration file does `),M_e=a("strong"),zar=o("not"),Qar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=a("a"),War=o("from_pretrained()"),Har=o(" to load the model weights."),Uar=l(),E_e=a("p"),Jar=o("Examples:"),Yar=l(),f(Fw.$$.fragment),Kar=l(),po=a("div"),f(Tw.$$.fragment),Zar=l(),C_e=a("p"),enr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),onr=l(),bn=a("p"),rnr=o("The model class to instantiate is selected based on the "),w_e=a("code"),tnr=o("model_type"),anr=o(` property of the config object (either
passed as an argument or loaded from `),A_e=a("code"),nnr=o("pretrained_model_name_or_path"),snr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=a("code"),lnr=o("pretrained_model_name_or_path"),inr=o(":"),dnr=l(),H=a("ul"),MT=a("li"),L_e=a("strong"),cnr=o("albert"),fnr=o(" \u2014 "),CV=a("a"),mnr=o("TFAlbertForPreTraining"),gnr=o(" (ALBERT model)"),hnr=l(),ET=a("li"),x_e=a("strong"),pnr=o("bart"),_nr=o(" \u2014 "),wV=a("a"),unr=o("TFBartForConditionalGeneration"),bnr=o(" (BART model)"),vnr=l(),CT=a("li"),k_e=a("strong"),Fnr=o("bert"),Tnr=o(" \u2014 "),AV=a("a"),Mnr=o("TFBertForPreTraining"),Enr=o(" (BERT model)"),Cnr=l(),wT=a("li"),S_e=a("strong"),wnr=o("camembert"),Anr=o(" \u2014 "),yV=a("a"),ynr=o("TFCamembertForMaskedLM"),Lnr=o(" (CamemBERT model)"),xnr=l(),AT=a("li"),R_e=a("strong"),knr=o("ctrl"),Snr=o(" \u2014 "),LV=a("a"),Rnr=o("TFCTRLLMHeadModel"),Bnr=o(" (CTRL model)"),Pnr=l(),yT=a("li"),B_e=a("strong"),$nr=o("distilbert"),Inr=o(" \u2014 "),xV=a("a"),qnr=o("TFDistilBertForMaskedLM"),Nnr=o(" (DistilBERT model)"),jnr=l(),LT=a("li"),P_e=a("strong"),Dnr=o("electra"),Gnr=o(" \u2014 "),kV=a("a"),Onr=o("TFElectraForPreTraining"),Vnr=o(" (ELECTRA model)"),Xnr=l(),xT=a("li"),$_e=a("strong"),znr=o("flaubert"),Qnr=o(" \u2014 "),SV=a("a"),Wnr=o("TFFlaubertWithLMHeadModel"),Hnr=o(" (FlauBERT model)"),Unr=l(),kT=a("li"),I_e=a("strong"),Jnr=o("funnel"),Ynr=o(" \u2014 "),RV=a("a"),Knr=o("TFFunnelForPreTraining"),Znr=o(" (Funnel Transformer model)"),esr=l(),ST=a("li"),q_e=a("strong"),osr=o("gpt2"),rsr=o(" \u2014 "),BV=a("a"),tsr=o("TFGPT2LMHeadModel"),asr=o(" (OpenAI GPT-2 model)"),nsr=l(),RT=a("li"),N_e=a("strong"),ssr=o("layoutlm"),lsr=o(" \u2014 "),PV=a("a"),isr=o("TFLayoutLMForMaskedLM"),dsr=o(" (LayoutLM model)"),csr=l(),BT=a("li"),j_e=a("strong"),fsr=o("lxmert"),msr=o(" \u2014 "),$V=a("a"),gsr=o("TFLxmertForPreTraining"),hsr=o(" (LXMERT model)"),psr=l(),PT=a("li"),D_e=a("strong"),_sr=o("mobilebert"),usr=o(" \u2014 "),IV=a("a"),bsr=o("TFMobileBertForPreTraining"),vsr=o(" (MobileBERT model)"),Fsr=l(),$T=a("li"),G_e=a("strong"),Tsr=o("mpnet"),Msr=o(" \u2014 "),qV=a("a"),Esr=o("TFMPNetForMaskedLM"),Csr=o(" (MPNet model)"),wsr=l(),IT=a("li"),O_e=a("strong"),Asr=o("openai-gpt"),ysr=o(" \u2014 "),NV=a("a"),Lsr=o("TFOpenAIGPTLMHeadModel"),xsr=o(" (OpenAI GPT model)"),ksr=l(),qT=a("li"),V_e=a("strong"),Ssr=o("roberta"),Rsr=o(" \u2014 "),jV=a("a"),Bsr=o("TFRobertaForMaskedLM"),Psr=o(" (RoBERTa model)"),$sr=l(),NT=a("li"),X_e=a("strong"),Isr=o("t5"),qsr=o(" \u2014 "),DV=a("a"),Nsr=o("TFT5ForConditionalGeneration"),jsr=o(" (T5 model)"),Dsr=l(),jT=a("li"),z_e=a("strong"),Gsr=o("tapas"),Osr=o(" \u2014 "),GV=a("a"),Vsr=o("TFTapasForMaskedLM"),Xsr=o(" (TAPAS model)"),zsr=l(),DT=a("li"),Q_e=a("strong"),Qsr=o("transfo-xl"),Wsr=o(" \u2014 "),OV=a("a"),Hsr=o("TFTransfoXLLMHeadModel"),Usr=o(" (Transformer-XL model)"),Jsr=l(),GT=a("li"),W_e=a("strong"),Ysr=o("vit_mae"),Ksr=o(" \u2014 "),VV=a("a"),Zsr=o("TFViTMAEForPreTraining"),elr=o(" (ViTMAE model)"),olr=l(),OT=a("li"),H_e=a("strong"),rlr=o("xlm"),tlr=o(" \u2014 "),XV=a("a"),alr=o("TFXLMWithLMHeadModel"),nlr=o(" (XLM model)"),slr=l(),VT=a("li"),U_e=a("strong"),llr=o("xlm-roberta"),ilr=o(" \u2014 "),zV=a("a"),dlr=o("TFXLMRobertaForMaskedLM"),clr=o(" (XLM-RoBERTa model)"),flr=l(),XT=a("li"),J_e=a("strong"),mlr=o("xlnet"),glr=o(" \u2014 "),QV=a("a"),hlr=o("TFXLNetLMHeadModel"),plr=o(" (XLNet model)"),_lr=l(),Y_e=a("p"),ulr=o("Examples:"),blr=l(),f(Mw.$$.fragment),QBe=l(),Tc=a("h2"),zT=a("a"),K_e=a("span"),f(Ew.$$.fragment),vlr=l(),Z_e=a("span"),Flr=o("TFAutoModelForCausalLM"),WBe=l(),Tr=a("div"),f(Cw.$$.fragment),Tlr=l(),Mc=a("p"),Mlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WV=a("a"),Elr=o("from_pretrained()"),Clr=o(" class method or the "),HV=a("a"),wlr=o("from_config()"),Alr=o(` class
method.`),ylr=l(),ww=a("p"),Llr=o("This class cannot be instantiated directly using "),eue=a("code"),xlr=o("__init__()"),klr=o(" (throws an error)."),Slr=l(),pt=a("div"),f(Aw.$$.fragment),Rlr=l(),oue=a("p"),Blr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Plr=l(),Ec=a("p"),$lr=o(`Note:
Loading a model from its configuration file does `),rue=a("strong"),Ilr=o("not"),qlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=a("a"),Nlr=o("from_pretrained()"),jlr=o(" to load the model weights."),Dlr=l(),tue=a("p"),Glr=o("Examples:"),Olr=l(),f(yw.$$.fragment),Vlr=l(),_o=a("div"),f(Lw.$$.fragment),Xlr=l(),aue=a("p"),zlr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Qlr=l(),vn=a("p"),Wlr=o("The model class to instantiate is selected based on the "),nue=a("code"),Hlr=o("model_type"),Ulr=o(` property of the config object (either
passed as an argument or loaded from `),sue=a("code"),Jlr=o("pretrained_model_name_or_path"),Ylr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lue=a("code"),Klr=o("pretrained_model_name_or_path"),Zlr=o(":"),eir=l(),fe=a("ul"),QT=a("li"),iue=a("strong"),oir=o("bert"),rir=o(" \u2014 "),JV=a("a"),tir=o("TFBertLMHeadModel"),air=o(" (BERT model)"),nir=l(),WT=a("li"),due=a("strong"),sir=o("camembert"),lir=o(" \u2014 "),YV=a("a"),iir=o("TFCamembertForCausalLM"),dir=o(" (CamemBERT model)"),cir=l(),HT=a("li"),cue=a("strong"),fir=o("ctrl"),mir=o(" \u2014 "),KV=a("a"),gir=o("TFCTRLLMHeadModel"),hir=o(" (CTRL model)"),pir=l(),UT=a("li"),fue=a("strong"),_ir=o("gpt2"),uir=o(" \u2014 "),ZV=a("a"),bir=o("TFGPT2LMHeadModel"),vir=o(" (OpenAI GPT-2 model)"),Fir=l(),JT=a("li"),mue=a("strong"),Tir=o("gptj"),Mir=o(" \u2014 "),eX=a("a"),Eir=o("TFGPTJForCausalLM"),Cir=o(" (GPT-J model)"),wir=l(),YT=a("li"),gue=a("strong"),Air=o("openai-gpt"),yir=o(" \u2014 "),oX=a("a"),Lir=o("TFOpenAIGPTLMHeadModel"),xir=o(" (OpenAI GPT model)"),kir=l(),KT=a("li"),hue=a("strong"),Sir=o("rembert"),Rir=o(" \u2014 "),rX=a("a"),Bir=o("TFRemBertForCausalLM"),Pir=o(" (RemBERT model)"),$ir=l(),ZT=a("li"),pue=a("strong"),Iir=o("roberta"),qir=o(" \u2014 "),tX=a("a"),Nir=o("TFRobertaForCausalLM"),jir=o(" (RoBERTa model)"),Dir=l(),e8=a("li"),_ue=a("strong"),Gir=o("roformer"),Oir=o(" \u2014 "),aX=a("a"),Vir=o("TFRoFormerForCausalLM"),Xir=o(" (RoFormer model)"),zir=l(),o8=a("li"),uue=a("strong"),Qir=o("transfo-xl"),Wir=o(" \u2014 "),nX=a("a"),Hir=o("TFTransfoXLLMHeadModel"),Uir=o(" (Transformer-XL model)"),Jir=l(),r8=a("li"),bue=a("strong"),Yir=o("xlm"),Kir=o(" \u2014 "),sX=a("a"),Zir=o("TFXLMWithLMHeadModel"),edr=o(" (XLM model)"),odr=l(),t8=a("li"),vue=a("strong"),rdr=o("xlnet"),tdr=o(" \u2014 "),lX=a("a"),adr=o("TFXLNetLMHeadModel"),ndr=o(" (XLNet model)"),sdr=l(),Fue=a("p"),ldr=o("Examples:"),idr=l(),f(xw.$$.fragment),HBe=l(),Cc=a("h2"),a8=a("a"),Tue=a("span"),f(kw.$$.fragment),ddr=l(),Mue=a("span"),cdr=o("TFAutoModelForImageClassification"),UBe=l(),Mr=a("div"),f(Sw.$$.fragment),fdr=l(),wc=a("p"),mdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iX=a("a"),gdr=o("from_pretrained()"),hdr=o(" class method or the "),dX=a("a"),pdr=o("from_config()"),_dr=o(` class
method.`),udr=l(),Rw=a("p"),bdr=o("This class cannot be instantiated directly using "),Eue=a("code"),vdr=o("__init__()"),Fdr=o(" (throws an error)."),Tdr=l(),_t=a("div"),f(Bw.$$.fragment),Mdr=l(),Cue=a("p"),Edr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Cdr=l(),Ac=a("p"),wdr=o(`Note:
Loading a model from its configuration file does `),wue=a("strong"),Adr=o("not"),ydr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=a("a"),Ldr=o("from_pretrained()"),xdr=o(" to load the model weights."),kdr=l(),Aue=a("p"),Sdr=o("Examples:"),Rdr=l(),f(Pw.$$.fragment),Bdr=l(),uo=a("div"),f($w.$$.fragment),Pdr=l(),yue=a("p"),$dr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Idr=l(),Fn=a("p"),qdr=o("The model class to instantiate is selected based on the "),Lue=a("code"),Ndr=o("model_type"),jdr=o(` property of the config object (either
passed as an argument or loaded from `),xue=a("code"),Ddr=o("pretrained_model_name_or_path"),Gdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=a("code"),Odr=o("pretrained_model_name_or_path"),Vdr=o(":"),Xdr=l(),Iw=a("ul"),n8=a("li"),Sue=a("strong"),zdr=o("convnext"),Qdr=o(" \u2014 "),fX=a("a"),Wdr=o("TFConvNextForImageClassification"),Hdr=o(" (ConvNext model)"),Udr=l(),s8=a("li"),Rue=a("strong"),Jdr=o("vit"),Ydr=o(" \u2014 "),mX=a("a"),Kdr=o("TFViTForImageClassification"),Zdr=o(" (ViT model)"),ecr=l(),Bue=a("p"),ocr=o("Examples:"),rcr=l(),f(qw.$$.fragment),JBe=l(),yc=a("h2"),l8=a("a"),Pue=a("span"),f(Nw.$$.fragment),tcr=l(),$ue=a("span"),acr=o("TFAutoModelForMaskedLM"),YBe=l(),Er=a("div"),f(jw.$$.fragment),ncr=l(),Lc=a("p"),scr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gX=a("a"),lcr=o("from_pretrained()"),icr=o(" class method or the "),hX=a("a"),dcr=o("from_config()"),ccr=o(` class
method.`),fcr=l(),Dw=a("p"),mcr=o("This class cannot be instantiated directly using "),Iue=a("code"),gcr=o("__init__()"),hcr=o(" (throws an error)."),pcr=l(),ut=a("div"),f(Gw.$$.fragment),_cr=l(),que=a("p"),ucr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bcr=l(),xc=a("p"),vcr=o(`Note:
Loading a model from its configuration file does `),Nue=a("strong"),Fcr=o("not"),Tcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=a("a"),Mcr=o("from_pretrained()"),Ecr=o(" to load the model weights."),Ccr=l(),jue=a("p"),wcr=o("Examples:"),Acr=l(),f(Ow.$$.fragment),ycr=l(),bo=a("div"),f(Vw.$$.fragment),Lcr=l(),Due=a("p"),xcr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kcr=l(),Tn=a("p"),Scr=o("The model class to instantiate is selected based on the "),Gue=a("code"),Rcr=o("model_type"),Bcr=o(` property of the config object (either
passed as an argument or loaded from `),Oue=a("code"),Pcr=o("pretrained_model_name_or_path"),$cr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=a("code"),Icr=o("pretrained_model_name_or_path"),qcr=o(":"),Ncr=l(),J=a("ul"),i8=a("li"),Xue=a("strong"),jcr=o("albert"),Dcr=o(" \u2014 "),_X=a("a"),Gcr=o("TFAlbertForMaskedLM"),Ocr=o(" (ALBERT model)"),Vcr=l(),d8=a("li"),zue=a("strong"),Xcr=o("bert"),zcr=o(" \u2014 "),uX=a("a"),Qcr=o("TFBertForMaskedLM"),Wcr=o(" (BERT model)"),Hcr=l(),c8=a("li"),Que=a("strong"),Ucr=o("camembert"),Jcr=o(" \u2014 "),bX=a("a"),Ycr=o("TFCamembertForMaskedLM"),Kcr=o(" (CamemBERT model)"),Zcr=l(),f8=a("li"),Wue=a("strong"),efr=o("convbert"),ofr=o(" \u2014 "),vX=a("a"),rfr=o("TFConvBertForMaskedLM"),tfr=o(" (ConvBERT model)"),afr=l(),m8=a("li"),Hue=a("strong"),nfr=o("deberta"),sfr=o(" \u2014 "),FX=a("a"),lfr=o("TFDebertaForMaskedLM"),ifr=o(" (DeBERTa model)"),dfr=l(),g8=a("li"),Uue=a("strong"),cfr=o("deberta-v2"),ffr=o(" \u2014 "),TX=a("a"),mfr=o("TFDebertaV2ForMaskedLM"),gfr=o(" (DeBERTa-v2 model)"),hfr=l(),h8=a("li"),Jue=a("strong"),pfr=o("distilbert"),_fr=o(" \u2014 "),MX=a("a"),ufr=o("TFDistilBertForMaskedLM"),bfr=o(" (DistilBERT model)"),vfr=l(),p8=a("li"),Yue=a("strong"),Ffr=o("electra"),Tfr=o(" \u2014 "),EX=a("a"),Mfr=o("TFElectraForMaskedLM"),Efr=o(" (ELECTRA model)"),Cfr=l(),_8=a("li"),Kue=a("strong"),wfr=o("flaubert"),Afr=o(" \u2014 "),CX=a("a"),yfr=o("TFFlaubertWithLMHeadModel"),Lfr=o(" (FlauBERT model)"),xfr=l(),u8=a("li"),Zue=a("strong"),kfr=o("funnel"),Sfr=o(" \u2014 "),wX=a("a"),Rfr=o("TFFunnelForMaskedLM"),Bfr=o(" (Funnel Transformer model)"),Pfr=l(),b8=a("li"),e1e=a("strong"),$fr=o("layoutlm"),Ifr=o(" \u2014 "),AX=a("a"),qfr=o("TFLayoutLMForMaskedLM"),Nfr=o(" (LayoutLM model)"),jfr=l(),v8=a("li"),o1e=a("strong"),Dfr=o("longformer"),Gfr=o(" \u2014 "),yX=a("a"),Ofr=o("TFLongformerForMaskedLM"),Vfr=o(" (Longformer model)"),Xfr=l(),F8=a("li"),r1e=a("strong"),zfr=o("mobilebert"),Qfr=o(" \u2014 "),LX=a("a"),Wfr=o("TFMobileBertForMaskedLM"),Hfr=o(" (MobileBERT model)"),Ufr=l(),T8=a("li"),t1e=a("strong"),Jfr=o("mpnet"),Yfr=o(" \u2014 "),xX=a("a"),Kfr=o("TFMPNetForMaskedLM"),Zfr=o(" (MPNet model)"),emr=l(),M8=a("li"),a1e=a("strong"),omr=o("rembert"),rmr=o(" \u2014 "),kX=a("a"),tmr=o("TFRemBertForMaskedLM"),amr=o(" (RemBERT model)"),nmr=l(),E8=a("li"),n1e=a("strong"),smr=o("roberta"),lmr=o(" \u2014 "),SX=a("a"),imr=o("TFRobertaForMaskedLM"),dmr=o(" (RoBERTa model)"),cmr=l(),C8=a("li"),s1e=a("strong"),fmr=o("roformer"),mmr=o(" \u2014 "),RX=a("a"),gmr=o("TFRoFormerForMaskedLM"),hmr=o(" (RoFormer model)"),pmr=l(),w8=a("li"),l1e=a("strong"),_mr=o("tapas"),umr=o(" \u2014 "),BX=a("a"),bmr=o("TFTapasForMaskedLM"),vmr=o(" (TAPAS model)"),Fmr=l(),A8=a("li"),i1e=a("strong"),Tmr=o("xlm"),Mmr=o(" \u2014 "),PX=a("a"),Emr=o("TFXLMWithLMHeadModel"),Cmr=o(" (XLM model)"),wmr=l(),y8=a("li"),d1e=a("strong"),Amr=o("xlm-roberta"),ymr=o(" \u2014 "),$X=a("a"),Lmr=o("TFXLMRobertaForMaskedLM"),xmr=o(" (XLM-RoBERTa model)"),kmr=l(),c1e=a("p"),Smr=o("Examples:"),Rmr=l(),f(Xw.$$.fragment),KBe=l(),kc=a("h2"),L8=a("a"),f1e=a("span"),f(zw.$$.fragment),Bmr=l(),m1e=a("span"),Pmr=o("TFAutoModelForSeq2SeqLM"),ZBe=l(),Cr=a("div"),f(Qw.$$.fragment),$mr=l(),Sc=a("p"),Imr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IX=a("a"),qmr=o("from_pretrained()"),Nmr=o(" class method or the "),qX=a("a"),jmr=o("from_config()"),Dmr=o(` class
method.`),Gmr=l(),Ww=a("p"),Omr=o("This class cannot be instantiated directly using "),g1e=a("code"),Vmr=o("__init__()"),Xmr=o(" (throws an error)."),zmr=l(),bt=a("div"),f(Hw.$$.fragment),Qmr=l(),h1e=a("p"),Wmr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Hmr=l(),Rc=a("p"),Umr=o(`Note:
Loading a model from its configuration file does `),p1e=a("strong"),Jmr=o("not"),Ymr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=a("a"),Kmr=o("from_pretrained()"),Zmr=o(" to load the model weights."),egr=l(),_1e=a("p"),ogr=o("Examples:"),rgr=l(),f(Uw.$$.fragment),tgr=l(),vo=a("div"),f(Jw.$$.fragment),agr=l(),u1e=a("p"),ngr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sgr=l(),Mn=a("p"),lgr=o("The model class to instantiate is selected based on the "),b1e=a("code"),igr=o("model_type"),dgr=o(` property of the config object (either
passed as an argument or loaded from `),v1e=a("code"),cgr=o("pretrained_model_name_or_path"),fgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=a("code"),mgr=o("pretrained_model_name_or_path"),ggr=o(":"),hgr=l(),be=a("ul"),x8=a("li"),T1e=a("strong"),pgr=o("bart"),_gr=o(" \u2014 "),jX=a("a"),ugr=o("TFBartForConditionalGeneration"),bgr=o(" (BART model)"),vgr=l(),k8=a("li"),M1e=a("strong"),Fgr=o("blenderbot"),Tgr=o(" \u2014 "),DX=a("a"),Mgr=o("TFBlenderbotForConditionalGeneration"),Egr=o(" (Blenderbot model)"),Cgr=l(),S8=a("li"),E1e=a("strong"),wgr=o("blenderbot-small"),Agr=o(" \u2014 "),GX=a("a"),ygr=o("TFBlenderbotSmallForConditionalGeneration"),Lgr=o(" (BlenderbotSmall model)"),xgr=l(),R8=a("li"),C1e=a("strong"),kgr=o("encoder-decoder"),Sgr=o(" \u2014 "),OX=a("a"),Rgr=o("TFEncoderDecoderModel"),Bgr=o(" (Encoder decoder model)"),Pgr=l(),B8=a("li"),w1e=a("strong"),$gr=o("led"),Igr=o(" \u2014 "),VX=a("a"),qgr=o("TFLEDForConditionalGeneration"),Ngr=o(" (LED model)"),jgr=l(),P8=a("li"),A1e=a("strong"),Dgr=o("marian"),Ggr=o(" \u2014 "),XX=a("a"),Ogr=o("TFMarianMTModel"),Vgr=o(" (Marian model)"),Xgr=l(),$8=a("li"),y1e=a("strong"),zgr=o("mbart"),Qgr=o(" \u2014 "),zX=a("a"),Wgr=o("TFMBartForConditionalGeneration"),Hgr=o(" (mBART model)"),Ugr=l(),I8=a("li"),L1e=a("strong"),Jgr=o("mt5"),Ygr=o(" \u2014 "),QX=a("a"),Kgr=o("TFMT5ForConditionalGeneration"),Zgr=o(" (mT5 model)"),ehr=l(),q8=a("li"),x1e=a("strong"),ohr=o("pegasus"),rhr=o(" \u2014 "),WX=a("a"),thr=o("TFPegasusForConditionalGeneration"),ahr=o(" (Pegasus model)"),nhr=l(),N8=a("li"),k1e=a("strong"),shr=o("t5"),lhr=o(" \u2014 "),HX=a("a"),ihr=o("TFT5ForConditionalGeneration"),dhr=o(" (T5 model)"),chr=l(),S1e=a("p"),fhr=o("Examples:"),mhr=l(),f(Yw.$$.fragment),ePe=l(),Bc=a("h2"),j8=a("a"),R1e=a("span"),f(Kw.$$.fragment),ghr=l(),B1e=a("span"),hhr=o("TFAutoModelForSequenceClassification"),oPe=l(),wr=a("div"),f(Zw.$$.fragment),phr=l(),Pc=a("p"),_hr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UX=a("a"),uhr=o("from_pretrained()"),bhr=o(" class method or the "),JX=a("a"),vhr=o("from_config()"),Fhr=o(` class
method.`),Thr=l(),eA=a("p"),Mhr=o("This class cannot be instantiated directly using "),P1e=a("code"),Ehr=o("__init__()"),Chr=o(" (throws an error)."),whr=l(),vt=a("div"),f(oA.$$.fragment),Ahr=l(),$1e=a("p"),yhr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Lhr=l(),$c=a("p"),xhr=o(`Note:
Loading a model from its configuration file does `),I1e=a("strong"),khr=o("not"),Shr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=a("a"),Rhr=o("from_pretrained()"),Bhr=o(" to load the model weights."),Phr=l(),q1e=a("p"),$hr=o("Examples:"),Ihr=l(),f(rA.$$.fragment),qhr=l(),Fo=a("div"),f(tA.$$.fragment),Nhr=l(),N1e=a("p"),jhr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Dhr=l(),En=a("p"),Ghr=o("The model class to instantiate is selected based on the "),j1e=a("code"),Ohr=o("model_type"),Vhr=o(` property of the config object (either
passed as an argument or loaded from `),D1e=a("code"),Xhr=o("pretrained_model_name_or_path"),zhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=a("code"),Qhr=o("pretrained_model_name_or_path"),Whr=o(":"),Hhr=l(),V=a("ul"),D8=a("li"),O1e=a("strong"),Uhr=o("albert"),Jhr=o(" \u2014 "),KX=a("a"),Yhr=o("TFAlbertForSequenceClassification"),Khr=o(" (ALBERT model)"),Zhr=l(),G8=a("li"),V1e=a("strong"),epr=o("bert"),opr=o(" \u2014 "),ZX=a("a"),rpr=o("TFBertForSequenceClassification"),tpr=o(" (BERT model)"),apr=l(),O8=a("li"),X1e=a("strong"),npr=o("camembert"),spr=o(" \u2014 "),ez=a("a"),lpr=o("TFCamembertForSequenceClassification"),ipr=o(" (CamemBERT model)"),dpr=l(),V8=a("li"),z1e=a("strong"),cpr=o("convbert"),fpr=o(" \u2014 "),oz=a("a"),mpr=o("TFConvBertForSequenceClassification"),gpr=o(" (ConvBERT model)"),hpr=l(),X8=a("li"),Q1e=a("strong"),ppr=o("ctrl"),_pr=o(" \u2014 "),rz=a("a"),upr=o("TFCTRLForSequenceClassification"),bpr=o(" (CTRL model)"),vpr=l(),z8=a("li"),W1e=a("strong"),Fpr=o("deberta"),Tpr=o(" \u2014 "),tz=a("a"),Mpr=o("TFDebertaForSequenceClassification"),Epr=o(" (DeBERTa model)"),Cpr=l(),Q8=a("li"),H1e=a("strong"),wpr=o("deberta-v2"),Apr=o(" \u2014 "),az=a("a"),ypr=o("TFDebertaV2ForSequenceClassification"),Lpr=o(" (DeBERTa-v2 model)"),xpr=l(),W8=a("li"),U1e=a("strong"),kpr=o("distilbert"),Spr=o(" \u2014 "),nz=a("a"),Rpr=o("TFDistilBertForSequenceClassification"),Bpr=o(" (DistilBERT model)"),Ppr=l(),H8=a("li"),J1e=a("strong"),$pr=o("electra"),Ipr=o(" \u2014 "),sz=a("a"),qpr=o("TFElectraForSequenceClassification"),Npr=o(" (ELECTRA model)"),jpr=l(),U8=a("li"),Y1e=a("strong"),Dpr=o("flaubert"),Gpr=o(" \u2014 "),lz=a("a"),Opr=o("TFFlaubertForSequenceClassification"),Vpr=o(" (FlauBERT model)"),Xpr=l(),J8=a("li"),K1e=a("strong"),zpr=o("funnel"),Qpr=o(" \u2014 "),iz=a("a"),Wpr=o("TFFunnelForSequenceClassification"),Hpr=o(" (Funnel Transformer model)"),Upr=l(),Y8=a("li"),Z1e=a("strong"),Jpr=o("gpt2"),Ypr=o(" \u2014 "),dz=a("a"),Kpr=o("TFGPT2ForSequenceClassification"),Zpr=o(" (OpenAI GPT-2 model)"),e_r=l(),K8=a("li"),ebe=a("strong"),o_r=o("gptj"),r_r=o(" \u2014 "),cz=a("a"),t_r=o("TFGPTJForSequenceClassification"),a_r=o(" (GPT-J model)"),n_r=l(),Z8=a("li"),obe=a("strong"),s_r=o("layoutlm"),l_r=o(" \u2014 "),fz=a("a"),i_r=o("TFLayoutLMForSequenceClassification"),d_r=o(" (LayoutLM model)"),c_r=l(),e7=a("li"),rbe=a("strong"),f_r=o("longformer"),m_r=o(" \u2014 "),mz=a("a"),g_r=o("TFLongformerForSequenceClassification"),h_r=o(" (Longformer model)"),p_r=l(),o7=a("li"),tbe=a("strong"),__r=o("mobilebert"),u_r=o(" \u2014 "),gz=a("a"),b_r=o("TFMobileBertForSequenceClassification"),v_r=o(" (MobileBERT model)"),F_r=l(),r7=a("li"),abe=a("strong"),T_r=o("mpnet"),M_r=o(" \u2014 "),hz=a("a"),E_r=o("TFMPNetForSequenceClassification"),C_r=o(" (MPNet model)"),w_r=l(),t7=a("li"),nbe=a("strong"),A_r=o("openai-gpt"),y_r=o(" \u2014 "),pz=a("a"),L_r=o("TFOpenAIGPTForSequenceClassification"),x_r=o(" (OpenAI GPT model)"),k_r=l(),a7=a("li"),sbe=a("strong"),S_r=o("rembert"),R_r=o(" \u2014 "),_z=a("a"),B_r=o("TFRemBertForSequenceClassification"),P_r=o(" (RemBERT model)"),$_r=l(),n7=a("li"),lbe=a("strong"),I_r=o("roberta"),q_r=o(" \u2014 "),uz=a("a"),N_r=o("TFRobertaForSequenceClassification"),j_r=o(" (RoBERTa model)"),D_r=l(),s7=a("li"),ibe=a("strong"),G_r=o("roformer"),O_r=o(" \u2014 "),bz=a("a"),V_r=o("TFRoFormerForSequenceClassification"),X_r=o(" (RoFormer model)"),z_r=l(),l7=a("li"),dbe=a("strong"),Q_r=o("tapas"),W_r=o(" \u2014 "),vz=a("a"),H_r=o("TFTapasForSequenceClassification"),U_r=o(" (TAPAS model)"),J_r=l(),i7=a("li"),cbe=a("strong"),Y_r=o("transfo-xl"),K_r=o(" \u2014 "),Fz=a("a"),Z_r=o("TFTransfoXLForSequenceClassification"),eur=o(" (Transformer-XL model)"),our=l(),d7=a("li"),fbe=a("strong"),rur=o("xlm"),tur=o(" \u2014 "),Tz=a("a"),aur=o("TFXLMForSequenceClassification"),nur=o(" (XLM model)"),sur=l(),c7=a("li"),mbe=a("strong"),lur=o("xlm-roberta"),iur=o(" \u2014 "),Mz=a("a"),dur=o("TFXLMRobertaForSequenceClassification"),cur=o(" (XLM-RoBERTa model)"),fur=l(),f7=a("li"),gbe=a("strong"),mur=o("xlnet"),gur=o(" \u2014 "),Ez=a("a"),hur=o("TFXLNetForSequenceClassification"),pur=o(" (XLNet model)"),_ur=l(),hbe=a("p"),uur=o("Examples:"),bur=l(),f(aA.$$.fragment),rPe=l(),Ic=a("h2"),m7=a("a"),pbe=a("span"),f(nA.$$.fragment),vur=l(),_be=a("span"),Fur=o("TFAutoModelForMultipleChoice"),tPe=l(),Ar=a("div"),f(sA.$$.fragment),Tur=l(),qc=a("p"),Mur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Cz=a("a"),Eur=o("from_pretrained()"),Cur=o(" class method or the "),wz=a("a"),wur=o("from_config()"),Aur=o(` class
method.`),yur=l(),lA=a("p"),Lur=o("This class cannot be instantiated directly using "),ube=a("code"),xur=o("__init__()"),kur=o(" (throws an error)."),Sur=l(),Ft=a("div"),f(iA.$$.fragment),Rur=l(),bbe=a("p"),Bur=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Pur=l(),Nc=a("p"),$ur=o(`Note:
Loading a model from its configuration file does `),vbe=a("strong"),Iur=o("not"),qur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=a("a"),Nur=o("from_pretrained()"),jur=o(" to load the model weights."),Dur=l(),Fbe=a("p"),Gur=o("Examples:"),Our=l(),f(dA.$$.fragment),Vur=l(),To=a("div"),f(cA.$$.fragment),Xur=l(),Tbe=a("p"),zur=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Qur=l(),Cn=a("p"),Wur=o("The model class to instantiate is selected based on the "),Mbe=a("code"),Hur=o("model_type"),Uur=o(` property of the config object (either
passed as an argument or loaded from `),Ebe=a("code"),Jur=o("pretrained_model_name_or_path"),Yur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cbe=a("code"),Kur=o("pretrained_model_name_or_path"),Zur=o(":"),e1r=l(),se=a("ul"),g7=a("li"),wbe=a("strong"),o1r=o("albert"),r1r=o(" \u2014 "),yz=a("a"),t1r=o("TFAlbertForMultipleChoice"),a1r=o(" (ALBERT model)"),n1r=l(),h7=a("li"),Abe=a("strong"),s1r=o("bert"),l1r=o(" \u2014 "),Lz=a("a"),i1r=o("TFBertForMultipleChoice"),d1r=o(" (BERT model)"),c1r=l(),p7=a("li"),ybe=a("strong"),f1r=o("camembert"),m1r=o(" \u2014 "),xz=a("a"),g1r=o("TFCamembertForMultipleChoice"),h1r=o(" (CamemBERT model)"),p1r=l(),_7=a("li"),Lbe=a("strong"),_1r=o("convbert"),u1r=o(" \u2014 "),kz=a("a"),b1r=o("TFConvBertForMultipleChoice"),v1r=o(" (ConvBERT model)"),F1r=l(),u7=a("li"),xbe=a("strong"),T1r=o("distilbert"),M1r=o(" \u2014 "),Sz=a("a"),E1r=o("TFDistilBertForMultipleChoice"),C1r=o(" (DistilBERT model)"),w1r=l(),b7=a("li"),kbe=a("strong"),A1r=o("electra"),y1r=o(" \u2014 "),Rz=a("a"),L1r=o("TFElectraForMultipleChoice"),x1r=o(" (ELECTRA model)"),k1r=l(),v7=a("li"),Sbe=a("strong"),S1r=o("flaubert"),R1r=o(" \u2014 "),Bz=a("a"),B1r=o("TFFlaubertForMultipleChoice"),P1r=o(" (FlauBERT model)"),$1r=l(),F7=a("li"),Rbe=a("strong"),I1r=o("funnel"),q1r=o(" \u2014 "),Pz=a("a"),N1r=o("TFFunnelForMultipleChoice"),j1r=o(" (Funnel Transformer model)"),D1r=l(),T7=a("li"),Bbe=a("strong"),G1r=o("longformer"),O1r=o(" \u2014 "),$z=a("a"),V1r=o("TFLongformerForMultipleChoice"),X1r=o(" (Longformer model)"),z1r=l(),M7=a("li"),Pbe=a("strong"),Q1r=o("mobilebert"),W1r=o(" \u2014 "),Iz=a("a"),H1r=o("TFMobileBertForMultipleChoice"),U1r=o(" (MobileBERT model)"),J1r=l(),E7=a("li"),$be=a("strong"),Y1r=o("mpnet"),K1r=o(" \u2014 "),qz=a("a"),Z1r=o("TFMPNetForMultipleChoice"),ebr=o(" (MPNet model)"),obr=l(),C7=a("li"),Ibe=a("strong"),rbr=o("rembert"),tbr=o(" \u2014 "),Nz=a("a"),abr=o("TFRemBertForMultipleChoice"),nbr=o(" (RemBERT model)"),sbr=l(),w7=a("li"),qbe=a("strong"),lbr=o("roberta"),ibr=o(" \u2014 "),jz=a("a"),dbr=o("TFRobertaForMultipleChoice"),cbr=o(" (RoBERTa model)"),fbr=l(),A7=a("li"),Nbe=a("strong"),mbr=o("roformer"),gbr=o(" \u2014 "),Dz=a("a"),hbr=o("TFRoFormerForMultipleChoice"),pbr=o(" (RoFormer model)"),_br=l(),y7=a("li"),jbe=a("strong"),ubr=o("xlm"),bbr=o(" \u2014 "),Gz=a("a"),vbr=o("TFXLMForMultipleChoice"),Fbr=o(" (XLM model)"),Tbr=l(),L7=a("li"),Dbe=a("strong"),Mbr=o("xlm-roberta"),Ebr=o(" \u2014 "),Oz=a("a"),Cbr=o("TFXLMRobertaForMultipleChoice"),wbr=o(" (XLM-RoBERTa model)"),Abr=l(),x7=a("li"),Gbe=a("strong"),ybr=o("xlnet"),Lbr=o(" \u2014 "),Vz=a("a"),xbr=o("TFXLNetForMultipleChoice"),kbr=o(" (XLNet model)"),Sbr=l(),Obe=a("p"),Rbr=o("Examples:"),Bbr=l(),f(fA.$$.fragment),aPe=l(),jc=a("h2"),k7=a("a"),Vbe=a("span"),f(mA.$$.fragment),Pbr=l(),Xbe=a("span"),$br=o("TFAutoModelForTableQuestionAnswering"),nPe=l(),yr=a("div"),f(gA.$$.fragment),Ibr=l(),Dc=a("p"),qbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Xz=a("a"),Nbr=o("from_pretrained()"),jbr=o(" class method or the "),zz=a("a"),Dbr=o("from_config()"),Gbr=o(` class
method.`),Obr=l(),hA=a("p"),Vbr=o("This class cannot be instantiated directly using "),zbe=a("code"),Xbr=o("__init__()"),zbr=o(" (throws an error)."),Qbr=l(),Tt=a("div"),f(pA.$$.fragment),Wbr=l(),Qbe=a("p"),Hbr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Ubr=l(),Gc=a("p"),Jbr=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),Ybr=o("not"),Kbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),Zbr=o("from_pretrained()"),e2r=o(" to load the model weights."),o2r=l(),Hbe=a("p"),r2r=o("Examples:"),t2r=l(),f(_A.$$.fragment),a2r=l(),Mo=a("div"),f(uA.$$.fragment),n2r=l(),Ube=a("p"),s2r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),l2r=l(),wn=a("p"),i2r=o("The model class to instantiate is selected based on the "),Jbe=a("code"),d2r=o("model_type"),c2r=o(` property of the config object (either
passed as an argument or loaded from `),Ybe=a("code"),f2r=o("pretrained_model_name_or_path"),m2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=a("code"),g2r=o("pretrained_model_name_or_path"),h2r=o(":"),p2r=l(),Zbe=a("ul"),S7=a("li"),e2e=a("strong"),_2r=o("tapas"),u2r=o(" \u2014 "),Wz=a("a"),b2r=o("TFTapasForQuestionAnswering"),v2r=o(" (TAPAS model)"),F2r=l(),o2e=a("p"),T2r=o("Examples:"),M2r=l(),f(bA.$$.fragment),sPe=l(),Oc=a("h2"),R7=a("a"),r2e=a("span"),f(vA.$$.fragment),E2r=l(),t2e=a("span"),C2r=o("TFAutoModelForTokenClassification"),lPe=l(),Lr=a("div"),f(FA.$$.fragment),w2r=l(),Vc=a("p"),A2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Hz=a("a"),y2r=o("from_pretrained()"),L2r=o(" class method or the "),Uz=a("a"),x2r=o("from_config()"),k2r=o(` class
method.`),S2r=l(),TA=a("p"),R2r=o("This class cannot be instantiated directly using "),a2e=a("code"),B2r=o("__init__()"),P2r=o(" (throws an error)."),$2r=l(),Mt=a("div"),f(MA.$$.fragment),I2r=l(),n2e=a("p"),q2r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),N2r=l(),Xc=a("p"),j2r=o(`Note:
Loading a model from its configuration file does `),s2e=a("strong"),D2r=o("not"),G2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),O2r=o("from_pretrained()"),V2r=o(" to load the model weights."),X2r=l(),l2e=a("p"),z2r=o("Examples:"),Q2r=l(),f(EA.$$.fragment),W2r=l(),Eo=a("div"),f(CA.$$.fragment),H2r=l(),i2e=a("p"),U2r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),J2r=l(),An=a("p"),Y2r=o("The model class to instantiate is selected based on the "),d2e=a("code"),K2r=o("model_type"),Z2r=o(` property of the config object (either
passed as an argument or loaded from `),c2e=a("code"),e6r=o("pretrained_model_name_or_path"),o6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f2e=a("code"),r6r=o("pretrained_model_name_or_path"),t6r=o(":"),a6r=l(),Y=a("ul"),B7=a("li"),m2e=a("strong"),n6r=o("albert"),s6r=o(" \u2014 "),Yz=a("a"),l6r=o("TFAlbertForTokenClassification"),i6r=o(" (ALBERT model)"),d6r=l(),P7=a("li"),g2e=a("strong"),c6r=o("bert"),f6r=o(" \u2014 "),Kz=a("a"),m6r=o("TFBertForTokenClassification"),g6r=o(" (BERT model)"),h6r=l(),$7=a("li"),h2e=a("strong"),p6r=o("camembert"),_6r=o(" \u2014 "),Zz=a("a"),u6r=o("TFCamembertForTokenClassification"),b6r=o(" (CamemBERT model)"),v6r=l(),I7=a("li"),p2e=a("strong"),F6r=o("convbert"),T6r=o(" \u2014 "),eQ=a("a"),M6r=o("TFConvBertForTokenClassification"),E6r=o(" (ConvBERT model)"),C6r=l(),q7=a("li"),_2e=a("strong"),w6r=o("deberta"),A6r=o(" \u2014 "),oQ=a("a"),y6r=o("TFDebertaForTokenClassification"),L6r=o(" (DeBERTa model)"),x6r=l(),N7=a("li"),u2e=a("strong"),k6r=o("deberta-v2"),S6r=o(" \u2014 "),rQ=a("a"),R6r=o("TFDebertaV2ForTokenClassification"),B6r=o(" (DeBERTa-v2 model)"),P6r=l(),j7=a("li"),b2e=a("strong"),$6r=o("distilbert"),I6r=o(" \u2014 "),tQ=a("a"),q6r=o("TFDistilBertForTokenClassification"),N6r=o(" (DistilBERT model)"),j6r=l(),D7=a("li"),v2e=a("strong"),D6r=o("electra"),G6r=o(" \u2014 "),aQ=a("a"),O6r=o("TFElectraForTokenClassification"),V6r=o(" (ELECTRA model)"),X6r=l(),G7=a("li"),F2e=a("strong"),z6r=o("flaubert"),Q6r=o(" \u2014 "),nQ=a("a"),W6r=o("TFFlaubertForTokenClassification"),H6r=o(" (FlauBERT model)"),U6r=l(),O7=a("li"),T2e=a("strong"),J6r=o("funnel"),Y6r=o(" \u2014 "),sQ=a("a"),K6r=o("TFFunnelForTokenClassification"),Z6r=o(" (Funnel Transformer model)"),evr=l(),V7=a("li"),M2e=a("strong"),ovr=o("layoutlm"),rvr=o(" \u2014 "),lQ=a("a"),tvr=o("TFLayoutLMForTokenClassification"),avr=o(" (LayoutLM model)"),nvr=l(),X7=a("li"),E2e=a("strong"),svr=o("longformer"),lvr=o(" \u2014 "),iQ=a("a"),ivr=o("TFLongformerForTokenClassification"),dvr=o(" (Longformer model)"),cvr=l(),z7=a("li"),C2e=a("strong"),fvr=o("mobilebert"),mvr=o(" \u2014 "),dQ=a("a"),gvr=o("TFMobileBertForTokenClassification"),hvr=o(" (MobileBERT model)"),pvr=l(),Q7=a("li"),w2e=a("strong"),_vr=o("mpnet"),uvr=o(" \u2014 "),cQ=a("a"),bvr=o("TFMPNetForTokenClassification"),vvr=o(" (MPNet model)"),Fvr=l(),W7=a("li"),A2e=a("strong"),Tvr=o("rembert"),Mvr=o(" \u2014 "),fQ=a("a"),Evr=o("TFRemBertForTokenClassification"),Cvr=o(" (RemBERT model)"),wvr=l(),H7=a("li"),y2e=a("strong"),Avr=o("roberta"),yvr=o(" \u2014 "),mQ=a("a"),Lvr=o("TFRobertaForTokenClassification"),xvr=o(" (RoBERTa model)"),kvr=l(),U7=a("li"),L2e=a("strong"),Svr=o("roformer"),Rvr=o(" \u2014 "),gQ=a("a"),Bvr=o("TFRoFormerForTokenClassification"),Pvr=o(" (RoFormer model)"),$vr=l(),J7=a("li"),x2e=a("strong"),Ivr=o("xlm"),qvr=o(" \u2014 "),hQ=a("a"),Nvr=o("TFXLMForTokenClassification"),jvr=o(" (XLM model)"),Dvr=l(),Y7=a("li"),k2e=a("strong"),Gvr=o("xlm-roberta"),Ovr=o(" \u2014 "),pQ=a("a"),Vvr=o("TFXLMRobertaForTokenClassification"),Xvr=o(" (XLM-RoBERTa model)"),zvr=l(),K7=a("li"),S2e=a("strong"),Qvr=o("xlnet"),Wvr=o(" \u2014 "),_Q=a("a"),Hvr=o("TFXLNetForTokenClassification"),Uvr=o(" (XLNet model)"),Jvr=l(),R2e=a("p"),Yvr=o("Examples:"),Kvr=l(),f(wA.$$.fragment),iPe=l(),zc=a("h2"),Z7=a("a"),B2e=a("span"),f(AA.$$.fragment),Zvr=l(),P2e=a("span"),eFr=o("TFAutoModelForQuestionAnswering"),dPe=l(),xr=a("div"),f(yA.$$.fragment),oFr=l(),Qc=a("p"),rFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uQ=a("a"),tFr=o("from_pretrained()"),aFr=o(" class method or the "),bQ=a("a"),nFr=o("from_config()"),sFr=o(` class
method.`),lFr=l(),LA=a("p"),iFr=o("This class cannot be instantiated directly using "),$2e=a("code"),dFr=o("__init__()"),cFr=o(" (throws an error)."),fFr=l(),Et=a("div"),f(xA.$$.fragment),mFr=l(),I2e=a("p"),gFr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hFr=l(),Wc=a("p"),pFr=o(`Note:
Loading a model from its configuration file does `),q2e=a("strong"),_Fr=o("not"),uFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=a("a"),bFr=o("from_pretrained()"),vFr=o(" to load the model weights."),FFr=l(),N2e=a("p"),TFr=o("Examples:"),MFr=l(),f(kA.$$.fragment),EFr=l(),Co=a("div"),f(SA.$$.fragment),CFr=l(),j2e=a("p"),wFr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),AFr=l(),yn=a("p"),yFr=o("The model class to instantiate is selected based on the "),D2e=a("code"),LFr=o("model_type"),xFr=o(` property of the config object (either
passed as an argument or loaded from `),G2e=a("code"),kFr=o("pretrained_model_name_or_path"),SFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=a("code"),RFr=o("pretrained_model_name_or_path"),BFr=o(":"),PFr=l(),K=a("ul"),e9=a("li"),V2e=a("strong"),$Fr=o("albert"),IFr=o(" \u2014 "),FQ=a("a"),qFr=o("TFAlbertForQuestionAnswering"),NFr=o(" (ALBERT model)"),jFr=l(),o9=a("li"),X2e=a("strong"),DFr=o("bert"),GFr=o(" \u2014 "),TQ=a("a"),OFr=o("TFBertForQuestionAnswering"),VFr=o(" (BERT model)"),XFr=l(),r9=a("li"),z2e=a("strong"),zFr=o("camembert"),QFr=o(" \u2014 "),MQ=a("a"),WFr=o("TFCamembertForQuestionAnswering"),HFr=o(" (CamemBERT model)"),UFr=l(),t9=a("li"),Q2e=a("strong"),JFr=o("convbert"),YFr=o(" \u2014 "),EQ=a("a"),KFr=o("TFConvBertForQuestionAnswering"),ZFr=o(" (ConvBERT model)"),eTr=l(),a9=a("li"),W2e=a("strong"),oTr=o("deberta"),rTr=o(" \u2014 "),CQ=a("a"),tTr=o("TFDebertaForQuestionAnswering"),aTr=o(" (DeBERTa model)"),nTr=l(),n9=a("li"),H2e=a("strong"),sTr=o("deberta-v2"),lTr=o(" \u2014 "),wQ=a("a"),iTr=o("TFDebertaV2ForQuestionAnswering"),dTr=o(" (DeBERTa-v2 model)"),cTr=l(),s9=a("li"),U2e=a("strong"),fTr=o("distilbert"),mTr=o(" \u2014 "),AQ=a("a"),gTr=o("TFDistilBertForQuestionAnswering"),hTr=o(" (DistilBERT model)"),pTr=l(),l9=a("li"),J2e=a("strong"),_Tr=o("electra"),uTr=o(" \u2014 "),yQ=a("a"),bTr=o("TFElectraForQuestionAnswering"),vTr=o(" (ELECTRA model)"),FTr=l(),i9=a("li"),Y2e=a("strong"),TTr=o("flaubert"),MTr=o(" \u2014 "),LQ=a("a"),ETr=o("TFFlaubertForQuestionAnsweringSimple"),CTr=o(" (FlauBERT model)"),wTr=l(),d9=a("li"),K2e=a("strong"),ATr=o("funnel"),yTr=o(" \u2014 "),xQ=a("a"),LTr=o("TFFunnelForQuestionAnswering"),xTr=o(" (Funnel Transformer model)"),kTr=l(),c9=a("li"),Z2e=a("strong"),STr=o("gptj"),RTr=o(" \u2014 "),kQ=a("a"),BTr=o("TFGPTJForQuestionAnswering"),PTr=o(" (GPT-J model)"),$Tr=l(),f9=a("li"),e6e=a("strong"),ITr=o("longformer"),qTr=o(" \u2014 "),SQ=a("a"),NTr=o("TFLongformerForQuestionAnswering"),jTr=o(" (Longformer model)"),DTr=l(),m9=a("li"),o6e=a("strong"),GTr=o("mobilebert"),OTr=o(" \u2014 "),RQ=a("a"),VTr=o("TFMobileBertForQuestionAnswering"),XTr=o(" (MobileBERT model)"),zTr=l(),g9=a("li"),r6e=a("strong"),QTr=o("mpnet"),WTr=o(" \u2014 "),BQ=a("a"),HTr=o("TFMPNetForQuestionAnswering"),UTr=o(" (MPNet model)"),JTr=l(),h9=a("li"),t6e=a("strong"),YTr=o("rembert"),KTr=o(" \u2014 "),PQ=a("a"),ZTr=o("TFRemBertForQuestionAnswering"),e8r=o(" (RemBERT model)"),o8r=l(),p9=a("li"),a6e=a("strong"),r8r=o("roberta"),t8r=o(" \u2014 "),$Q=a("a"),a8r=o("TFRobertaForQuestionAnswering"),n8r=o(" (RoBERTa model)"),s8r=l(),_9=a("li"),n6e=a("strong"),l8r=o("roformer"),i8r=o(" \u2014 "),IQ=a("a"),d8r=o("TFRoFormerForQuestionAnswering"),c8r=o(" (RoFormer model)"),f8r=l(),u9=a("li"),s6e=a("strong"),m8r=o("xlm"),g8r=o(" \u2014 "),qQ=a("a"),h8r=o("TFXLMForQuestionAnsweringSimple"),p8r=o(" (XLM model)"),_8r=l(),b9=a("li"),l6e=a("strong"),u8r=o("xlm-roberta"),b8r=o(" \u2014 "),NQ=a("a"),v8r=o("TFXLMRobertaForQuestionAnswering"),F8r=o(" (XLM-RoBERTa model)"),T8r=l(),v9=a("li"),i6e=a("strong"),M8r=o("xlnet"),E8r=o(" \u2014 "),jQ=a("a"),C8r=o("TFXLNetForQuestionAnsweringSimple"),w8r=o(" (XLNet model)"),A8r=l(),d6e=a("p"),y8r=o("Examples:"),L8r=l(),f(RA.$$.fragment),cPe=l(),Hc=a("h2"),F9=a("a"),c6e=a("span"),f(BA.$$.fragment),x8r=l(),f6e=a("span"),k8r=o("TFAutoModelForVision2Seq"),fPe=l(),kr=a("div"),f(PA.$$.fragment),S8r=l(),Uc=a("p"),R8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DQ=a("a"),B8r=o("from_pretrained()"),P8r=o(" class method or the "),GQ=a("a"),$8r=o("from_config()"),I8r=o(` class
method.`),q8r=l(),$A=a("p"),N8r=o("This class cannot be instantiated directly using "),m6e=a("code"),j8r=o("__init__()"),D8r=o(" (throws an error)."),G8r=l(),Ct=a("div"),f(IA.$$.fragment),O8r=l(),g6e=a("p"),V8r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),X8r=l(),Jc=a("p"),z8r=o(`Note:
Loading a model from its configuration file does `),h6e=a("strong"),Q8r=o("not"),W8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=a("a"),H8r=o("from_pretrained()"),U8r=o(" to load the model weights."),J8r=l(),p6e=a("p"),Y8r=o("Examples:"),K8r=l(),f(qA.$$.fragment),Z8r=l(),wo=a("div"),f(NA.$$.fragment),e7r=l(),_6e=a("p"),o7r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),r7r=l(),Ln=a("p"),t7r=o("The model class to instantiate is selected based on the "),u6e=a("code"),a7r=o("model_type"),n7r=o(` property of the config object (either
passed as an argument or loaded from `),b6e=a("code"),s7r=o("pretrained_model_name_or_path"),l7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v6e=a("code"),i7r=o("pretrained_model_name_or_path"),d7r=o(":"),c7r=l(),F6e=a("ul"),T9=a("li"),T6e=a("strong"),f7r=o("vision-encoder-decoder"),m7r=o(" \u2014 "),VQ=a("a"),g7r=o("TFVisionEncoderDecoderModel"),h7r=o(" (Vision Encoder decoder model)"),p7r=l(),M6e=a("p"),_7r=o("Examples:"),u7r=l(),f(jA.$$.fragment),mPe=l(),Yc=a("h2"),M9=a("a"),E6e=a("span"),f(DA.$$.fragment),b7r=l(),C6e=a("span"),v7r=o("TFAutoModelForSpeechSeq2Seq"),gPe=l(),Sr=a("div"),f(GA.$$.fragment),F7r=l(),Kc=a("p"),T7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XQ=a("a"),M7r=o("from_pretrained()"),E7r=o(" class method or the "),zQ=a("a"),C7r=o("from_config()"),w7r=o(` class
method.`),A7r=l(),OA=a("p"),y7r=o("This class cannot be instantiated directly using "),w6e=a("code"),L7r=o("__init__()"),x7r=o(" (throws an error)."),k7r=l(),wt=a("div"),f(VA.$$.fragment),S7r=l(),A6e=a("p"),R7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),B7r=l(),Zc=a("p"),P7r=o(`Note:
Loading a model from its configuration file does `),y6e=a("strong"),$7r=o("not"),I7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),q7r=o("from_pretrained()"),N7r=o(" to load the model weights."),j7r=l(),L6e=a("p"),D7r=o("Examples:"),G7r=l(),f(XA.$$.fragment),O7r=l(),Ao=a("div"),f(zA.$$.fragment),V7r=l(),x6e=a("p"),X7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),z7r=l(),xn=a("p"),Q7r=o("The model class to instantiate is selected based on the "),k6e=a("code"),W7r=o("model_type"),H7r=o(` property of the config object (either
passed as an argument or loaded from `),S6e=a("code"),U7r=o("pretrained_model_name_or_path"),J7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R6e=a("code"),Y7r=o("pretrained_model_name_or_path"),K7r=o(":"),Z7r=l(),B6e=a("ul"),E9=a("li"),P6e=a("strong"),e9r=o("speech_to_text"),o9r=o(" \u2014 "),WQ=a("a"),r9r=o("TFSpeech2TextForConditionalGeneration"),t9r=o(" (Speech2Text model)"),a9r=l(),$6e=a("p"),n9r=o("Examples:"),s9r=l(),f(QA.$$.fragment),hPe=l(),ef=a("h2"),C9=a("a"),I6e=a("span"),f(WA.$$.fragment),l9r=l(),q6e=a("span"),i9r=o("FlaxAutoModel"),pPe=l(),Rr=a("div"),f(HA.$$.fragment),d9r=l(),of=a("p"),c9r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HQ=a("a"),f9r=o("from_pretrained()"),m9r=o(" class method or the "),UQ=a("a"),g9r=o("from_config()"),h9r=o(` class
method.`),p9r=l(),UA=a("p"),_9r=o("This class cannot be instantiated directly using "),N6e=a("code"),u9r=o("__init__()"),b9r=o(" (throws an error)."),v9r=l(),At=a("div"),f(JA.$$.fragment),F9r=l(),j6e=a("p"),T9r=o("Instantiates one of the base model classes of the library from a configuration."),M9r=l(),rf=a("p"),E9r=o(`Note:
Loading a model from its configuration file does `),D6e=a("strong"),C9r=o("not"),w9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),A9r=o("from_pretrained()"),y9r=o(" to load the model weights."),L9r=l(),G6e=a("p"),x9r=o("Examples:"),k9r=l(),f(YA.$$.fragment),S9r=l(),yo=a("div"),f(KA.$$.fragment),R9r=l(),O6e=a("p"),B9r=o("Instantiate one of the base model classes of the library from a pretrained model."),P9r=l(),kn=a("p"),$9r=o("The model class to instantiate is selected based on the "),V6e=a("code"),I9r=o("model_type"),q9r=o(` property of the config object (either
passed as an argument or loaded from `),X6e=a("code"),N9r=o("pretrained_model_name_or_path"),j9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z6e=a("code"),D9r=o("pretrained_model_name_or_path"),G9r=o(":"),O9r=l(),z=a("ul"),w9=a("li"),Q6e=a("strong"),V9r=o("albert"),X9r=o(" \u2014 "),YQ=a("a"),z9r=o("FlaxAlbertModel"),Q9r=o(" (ALBERT model)"),W9r=l(),A9=a("li"),W6e=a("strong"),H9r=o("bart"),U9r=o(" \u2014 "),KQ=a("a"),J9r=o("FlaxBartModel"),Y9r=o(" (BART model)"),K9r=l(),y9=a("li"),H6e=a("strong"),Z9r=o("beit"),eMr=o(" \u2014 "),ZQ=a("a"),oMr=o("FlaxBeitModel"),rMr=o(" (BEiT model)"),tMr=l(),L9=a("li"),U6e=a("strong"),aMr=o("bert"),nMr=o(" \u2014 "),eW=a("a"),sMr=o("FlaxBertModel"),lMr=o(" (BERT model)"),iMr=l(),x9=a("li"),J6e=a("strong"),dMr=o("big_bird"),cMr=o(" \u2014 "),oW=a("a"),fMr=o("FlaxBigBirdModel"),mMr=o(" (BigBird model)"),gMr=l(),k9=a("li"),Y6e=a("strong"),hMr=o("blenderbot"),pMr=o(" \u2014 "),rW=a("a"),_Mr=o("FlaxBlenderbotModel"),uMr=o(" (Blenderbot model)"),bMr=l(),S9=a("li"),K6e=a("strong"),vMr=o("blenderbot-small"),FMr=o(" \u2014 "),tW=a("a"),TMr=o("FlaxBlenderbotSmallModel"),MMr=o(" (BlenderbotSmall model)"),EMr=l(),R9=a("li"),Z6e=a("strong"),CMr=o("clip"),wMr=o(" \u2014 "),aW=a("a"),AMr=o("FlaxCLIPModel"),yMr=o(" (CLIP model)"),LMr=l(),B9=a("li"),eve=a("strong"),xMr=o("distilbert"),kMr=o(" \u2014 "),nW=a("a"),SMr=o("FlaxDistilBertModel"),RMr=o(" (DistilBERT model)"),BMr=l(),P9=a("li"),ove=a("strong"),PMr=o("electra"),$Mr=o(" \u2014 "),sW=a("a"),IMr=o("FlaxElectraModel"),qMr=o(" (ELECTRA model)"),NMr=l(),$9=a("li"),rve=a("strong"),jMr=o("gpt2"),DMr=o(" \u2014 "),lW=a("a"),GMr=o("FlaxGPT2Model"),OMr=o(" (OpenAI GPT-2 model)"),VMr=l(),I9=a("li"),tve=a("strong"),XMr=o("gpt_neo"),zMr=o(" \u2014 "),iW=a("a"),QMr=o("FlaxGPTNeoModel"),WMr=o(" (GPT Neo model)"),HMr=l(),q9=a("li"),ave=a("strong"),UMr=o("gptj"),JMr=o(" \u2014 "),dW=a("a"),YMr=o("FlaxGPTJModel"),KMr=o(" (GPT-J model)"),ZMr=l(),N9=a("li"),nve=a("strong"),e4r=o("marian"),o4r=o(" \u2014 "),cW=a("a"),r4r=o("FlaxMarianModel"),t4r=o(" (Marian model)"),a4r=l(),j9=a("li"),sve=a("strong"),n4r=o("mbart"),s4r=o(" \u2014 "),fW=a("a"),l4r=o("FlaxMBartModel"),i4r=o(" (mBART model)"),d4r=l(),D9=a("li"),lve=a("strong"),c4r=o("mt5"),f4r=o(" \u2014 "),mW=a("a"),m4r=o("FlaxMT5Model"),g4r=o(" (mT5 model)"),h4r=l(),G9=a("li"),ive=a("strong"),p4r=o("pegasus"),_4r=o(" \u2014 "),gW=a("a"),u4r=o("FlaxPegasusModel"),b4r=o(" (Pegasus model)"),v4r=l(),O9=a("li"),dve=a("strong"),F4r=o("roberta"),T4r=o(" \u2014 "),hW=a("a"),M4r=o("FlaxRobertaModel"),E4r=o(" (RoBERTa model)"),C4r=l(),V9=a("li"),cve=a("strong"),w4r=o("roformer"),A4r=o(" \u2014 "),pW=a("a"),y4r=o("FlaxRoFormerModel"),L4r=o(" (RoFormer model)"),x4r=l(),X9=a("li"),fve=a("strong"),k4r=o("t5"),S4r=o(" \u2014 "),_W=a("a"),R4r=o("FlaxT5Model"),B4r=o(" (T5 model)"),P4r=l(),z9=a("li"),mve=a("strong"),$4r=o("vision-text-dual-encoder"),I4r=o(" \u2014 "),uW=a("a"),q4r=o("FlaxVisionTextDualEncoderModel"),N4r=o(" (VisionTextDualEncoder model)"),j4r=l(),Q9=a("li"),gve=a("strong"),D4r=o("vit"),G4r=o(" \u2014 "),bW=a("a"),O4r=o("FlaxViTModel"),V4r=o(" (ViT model)"),X4r=l(),W9=a("li"),hve=a("strong"),z4r=o("wav2vec2"),Q4r=o(" \u2014 "),vW=a("a"),W4r=o("FlaxWav2Vec2Model"),H4r=o(" (Wav2Vec2 model)"),U4r=l(),H9=a("li"),pve=a("strong"),J4r=o("xglm"),Y4r=o(" \u2014 "),FW=a("a"),K4r=o("FlaxXGLMModel"),Z4r=o(" (XGLM model)"),eEr=l(),U9=a("li"),_ve=a("strong"),oEr=o("xlm-roberta"),rEr=o(" \u2014 "),TW=a("a"),tEr=o("FlaxXLMRobertaModel"),aEr=o(" (XLM-RoBERTa model)"),nEr=l(),uve=a("p"),sEr=o("Examples:"),lEr=l(),f(ZA.$$.fragment),_Pe=l(),tf=a("h2"),J9=a("a"),bve=a("span"),f(e0.$$.fragment),iEr=l(),vve=a("span"),dEr=o("FlaxAutoModelForCausalLM"),uPe=l(),Br=a("div"),f(o0.$$.fragment),cEr=l(),af=a("p"),fEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),MW=a("a"),mEr=o("from_pretrained()"),gEr=o(" class method or the "),EW=a("a"),hEr=o("from_config()"),pEr=o(` class
method.`),_Er=l(),r0=a("p"),uEr=o("This class cannot be instantiated directly using "),Fve=a("code"),bEr=o("__init__()"),vEr=o(" (throws an error)."),FEr=l(),yt=a("div"),f(t0.$$.fragment),TEr=l(),Tve=a("p"),MEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),EEr=l(),nf=a("p"),CEr=o(`Note:
Loading a model from its configuration file does `),Mve=a("strong"),wEr=o("not"),AEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=a("a"),yEr=o("from_pretrained()"),LEr=o(" to load the model weights."),xEr=l(),Eve=a("p"),kEr=o("Examples:"),SEr=l(),f(a0.$$.fragment),REr=l(),Lo=a("div"),f(n0.$$.fragment),BEr=l(),Cve=a("p"),PEr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Er=l(),Sn=a("p"),IEr=o("The model class to instantiate is selected based on the "),wve=a("code"),qEr=o("model_type"),NEr=o(` property of the config object (either
passed as an argument or loaded from `),Ave=a("code"),jEr=o("pretrained_model_name_or_path"),DEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=a("code"),GEr=o("pretrained_model_name_or_path"),OEr=o(":"),VEr=l(),ca=a("ul"),Y9=a("li"),Lve=a("strong"),XEr=o("bart"),zEr=o(" \u2014 "),wW=a("a"),QEr=o("FlaxBartForCausalLM"),WEr=o(" (BART model)"),HEr=l(),K9=a("li"),xve=a("strong"),UEr=o("gpt2"),JEr=o(" \u2014 "),AW=a("a"),YEr=o("FlaxGPT2LMHeadModel"),KEr=o(" (OpenAI GPT-2 model)"),ZEr=l(),Z9=a("li"),kve=a("strong"),e5r=o("gpt_neo"),o5r=o(" \u2014 "),yW=a("a"),r5r=o("FlaxGPTNeoForCausalLM"),t5r=o(" (GPT Neo model)"),a5r=l(),eM=a("li"),Sve=a("strong"),n5r=o("gptj"),s5r=o(" \u2014 "),LW=a("a"),l5r=o("FlaxGPTJForCausalLM"),i5r=o(" (GPT-J model)"),d5r=l(),oM=a("li"),Rve=a("strong"),c5r=o("xglm"),f5r=o(" \u2014 "),xW=a("a"),m5r=o("FlaxXGLMForCausalLM"),g5r=o(" (XGLM model)"),h5r=l(),Bve=a("p"),p5r=o("Examples:"),_5r=l(),f(s0.$$.fragment),bPe=l(),sf=a("h2"),rM=a("a"),Pve=a("span"),f(l0.$$.fragment),u5r=l(),$ve=a("span"),b5r=o("FlaxAutoModelForPreTraining"),vPe=l(),Pr=a("div"),f(i0.$$.fragment),v5r=l(),lf=a("p"),F5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kW=a("a"),T5r=o("from_pretrained()"),M5r=o(" class method or the "),SW=a("a"),E5r=o("from_config()"),C5r=o(` class
method.`),w5r=l(),d0=a("p"),A5r=o("This class cannot be instantiated directly using "),Ive=a("code"),y5r=o("__init__()"),L5r=o(" (throws an error)."),x5r=l(),Lt=a("div"),f(c0.$$.fragment),k5r=l(),qve=a("p"),S5r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),R5r=l(),df=a("p"),B5r=o(`Note:
Loading a model from its configuration file does `),Nve=a("strong"),P5r=o("not"),$5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=a("a"),I5r=o("from_pretrained()"),q5r=o(" to load the model weights."),N5r=l(),jve=a("p"),j5r=o("Examples:"),D5r=l(),f(f0.$$.fragment),G5r=l(),xo=a("div"),f(m0.$$.fragment),O5r=l(),Dve=a("p"),V5r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),X5r=l(),Rn=a("p"),z5r=o("The model class to instantiate is selected based on the "),Gve=a("code"),Q5r=o("model_type"),W5r=o(` property of the config object (either
passed as an argument or loaded from `),Ove=a("code"),H5r=o("pretrained_model_name_or_path"),U5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=a("code"),J5r=o("pretrained_model_name_or_path"),Y5r=o(":"),K5r=l(),me=a("ul"),tM=a("li"),Xve=a("strong"),Z5r=o("albert"),e3r=o(" \u2014 "),BW=a("a"),o3r=o("FlaxAlbertForPreTraining"),r3r=o(" (ALBERT model)"),t3r=l(),aM=a("li"),zve=a("strong"),a3r=o("bart"),n3r=o(" \u2014 "),PW=a("a"),s3r=o("FlaxBartForConditionalGeneration"),l3r=o(" (BART model)"),i3r=l(),nM=a("li"),Qve=a("strong"),d3r=o("bert"),c3r=o(" \u2014 "),$W=a("a"),f3r=o("FlaxBertForPreTraining"),m3r=o(" (BERT model)"),g3r=l(),sM=a("li"),Wve=a("strong"),h3r=o("big_bird"),p3r=o(" \u2014 "),IW=a("a"),_3r=o("FlaxBigBirdForPreTraining"),u3r=o(" (BigBird model)"),b3r=l(),lM=a("li"),Hve=a("strong"),v3r=o("electra"),F3r=o(" \u2014 "),qW=a("a"),T3r=o("FlaxElectraForPreTraining"),M3r=o(" (ELECTRA model)"),E3r=l(),iM=a("li"),Uve=a("strong"),C3r=o("mbart"),w3r=o(" \u2014 "),NW=a("a"),A3r=o("FlaxMBartForConditionalGeneration"),y3r=o(" (mBART model)"),L3r=l(),dM=a("li"),Jve=a("strong"),x3r=o("mt5"),k3r=o(" \u2014 "),jW=a("a"),S3r=o("FlaxMT5ForConditionalGeneration"),R3r=o(" (mT5 model)"),B3r=l(),cM=a("li"),Yve=a("strong"),P3r=o("roberta"),$3r=o(" \u2014 "),DW=a("a"),I3r=o("FlaxRobertaForMaskedLM"),q3r=o(" (RoBERTa model)"),N3r=l(),fM=a("li"),Kve=a("strong"),j3r=o("roformer"),D3r=o(" \u2014 "),GW=a("a"),G3r=o("FlaxRoFormerForMaskedLM"),O3r=o(" (RoFormer model)"),V3r=l(),mM=a("li"),Zve=a("strong"),X3r=o("t5"),z3r=o(" \u2014 "),OW=a("a"),Q3r=o("FlaxT5ForConditionalGeneration"),W3r=o(" (T5 model)"),H3r=l(),gM=a("li"),eFe=a("strong"),U3r=o("wav2vec2"),J3r=o(" \u2014 "),VW=a("a"),Y3r=o("FlaxWav2Vec2ForPreTraining"),K3r=o(" (Wav2Vec2 model)"),Z3r=l(),hM=a("li"),oFe=a("strong"),eCr=o("xlm-roberta"),oCr=o(" \u2014 "),XW=a("a"),rCr=o("FlaxXLMRobertaForMaskedLM"),tCr=o(" (XLM-RoBERTa model)"),aCr=l(),rFe=a("p"),nCr=o("Examples:"),sCr=l(),f(g0.$$.fragment),FPe=l(),cf=a("h2"),pM=a("a"),tFe=a("span"),f(h0.$$.fragment),lCr=l(),aFe=a("span"),iCr=o("FlaxAutoModelForMaskedLM"),TPe=l(),$r=a("div"),f(p0.$$.fragment),dCr=l(),ff=a("p"),cCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zW=a("a"),fCr=o("from_pretrained()"),mCr=o(" class method or the "),QW=a("a"),gCr=o("from_config()"),hCr=o(` class
method.`),pCr=l(),_0=a("p"),_Cr=o("This class cannot be instantiated directly using "),nFe=a("code"),uCr=o("__init__()"),bCr=o(" (throws an error)."),vCr=l(),xt=a("div"),f(u0.$$.fragment),FCr=l(),sFe=a("p"),TCr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),MCr=l(),mf=a("p"),ECr=o(`Note:
Loading a model from its configuration file does `),lFe=a("strong"),CCr=o("not"),wCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=a("a"),ACr=o("from_pretrained()"),yCr=o(" to load the model weights."),LCr=l(),iFe=a("p"),xCr=o("Examples:"),kCr=l(),f(b0.$$.fragment),SCr=l(),ko=a("div"),f(v0.$$.fragment),RCr=l(),dFe=a("p"),BCr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),PCr=l(),Bn=a("p"),$Cr=o("The model class to instantiate is selected based on the "),cFe=a("code"),ICr=o("model_type"),qCr=o(` property of the config object (either
passed as an argument or loaded from `),fFe=a("code"),NCr=o("pretrained_model_name_or_path"),jCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=a("code"),DCr=o("pretrained_model_name_or_path"),GCr=o(":"),OCr=l(),ve=a("ul"),_M=a("li"),gFe=a("strong"),VCr=o("albert"),XCr=o(" \u2014 "),HW=a("a"),zCr=o("FlaxAlbertForMaskedLM"),QCr=o(" (ALBERT model)"),WCr=l(),uM=a("li"),hFe=a("strong"),HCr=o("bart"),UCr=o(" \u2014 "),UW=a("a"),JCr=o("FlaxBartForConditionalGeneration"),YCr=o(" (BART model)"),KCr=l(),bM=a("li"),pFe=a("strong"),ZCr=o("bert"),ewr=o(" \u2014 "),JW=a("a"),owr=o("FlaxBertForMaskedLM"),rwr=o(" (BERT model)"),twr=l(),vM=a("li"),_Fe=a("strong"),awr=o("big_bird"),nwr=o(" \u2014 "),YW=a("a"),swr=o("FlaxBigBirdForMaskedLM"),lwr=o(" (BigBird model)"),iwr=l(),FM=a("li"),uFe=a("strong"),dwr=o("distilbert"),cwr=o(" \u2014 "),KW=a("a"),fwr=o("FlaxDistilBertForMaskedLM"),mwr=o(" (DistilBERT model)"),gwr=l(),TM=a("li"),bFe=a("strong"),hwr=o("electra"),pwr=o(" \u2014 "),ZW=a("a"),_wr=o("FlaxElectraForMaskedLM"),uwr=o(" (ELECTRA model)"),bwr=l(),MM=a("li"),vFe=a("strong"),vwr=o("mbart"),Fwr=o(" \u2014 "),eH=a("a"),Twr=o("FlaxMBartForConditionalGeneration"),Mwr=o(" (mBART model)"),Ewr=l(),EM=a("li"),FFe=a("strong"),Cwr=o("roberta"),wwr=o(" \u2014 "),oH=a("a"),Awr=o("FlaxRobertaForMaskedLM"),ywr=o(" (RoBERTa model)"),Lwr=l(),CM=a("li"),TFe=a("strong"),xwr=o("roformer"),kwr=o(" \u2014 "),rH=a("a"),Swr=o("FlaxRoFormerForMaskedLM"),Rwr=o(" (RoFormer model)"),Bwr=l(),wM=a("li"),MFe=a("strong"),Pwr=o("xlm-roberta"),$wr=o(" \u2014 "),tH=a("a"),Iwr=o("FlaxXLMRobertaForMaskedLM"),qwr=o(" (XLM-RoBERTa model)"),Nwr=l(),EFe=a("p"),jwr=o("Examples:"),Dwr=l(),f(F0.$$.fragment),MPe=l(),gf=a("h2"),AM=a("a"),CFe=a("span"),f(T0.$$.fragment),Gwr=l(),wFe=a("span"),Owr=o("FlaxAutoModelForSeq2SeqLM"),EPe=l(),Ir=a("div"),f(M0.$$.fragment),Vwr=l(),hf=a("p"),Xwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aH=a("a"),zwr=o("from_pretrained()"),Qwr=o(" class method or the "),nH=a("a"),Wwr=o("from_config()"),Hwr=o(` class
method.`),Uwr=l(),E0=a("p"),Jwr=o("This class cannot be instantiated directly using "),AFe=a("code"),Ywr=o("__init__()"),Kwr=o(" (throws an error)."),Zwr=l(),kt=a("div"),f(C0.$$.fragment),eAr=l(),yFe=a("p"),oAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rAr=l(),pf=a("p"),tAr=o(`Note:
Loading a model from its configuration file does `),LFe=a("strong"),aAr=o("not"),nAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=a("a"),sAr=o("from_pretrained()"),lAr=o(" to load the model weights."),iAr=l(),xFe=a("p"),dAr=o("Examples:"),cAr=l(),f(w0.$$.fragment),fAr=l(),So=a("div"),f(A0.$$.fragment),mAr=l(),kFe=a("p"),gAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hAr=l(),Pn=a("p"),pAr=o("The model class to instantiate is selected based on the "),SFe=a("code"),_Ar=o("model_type"),uAr=o(` property of the config object (either
passed as an argument or loaded from `),RFe=a("code"),bAr=o("pretrained_model_name_or_path"),vAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),FAr=o("pretrained_model_name_or_path"),TAr=o(":"),MAr=l(),Ee=a("ul"),yM=a("li"),PFe=a("strong"),EAr=o("bart"),CAr=o(" \u2014 "),lH=a("a"),wAr=o("FlaxBartForConditionalGeneration"),AAr=o(" (BART model)"),yAr=l(),LM=a("li"),$Fe=a("strong"),LAr=o("blenderbot"),xAr=o(" \u2014 "),iH=a("a"),kAr=o("FlaxBlenderbotForConditionalGeneration"),SAr=o(" (Blenderbot model)"),RAr=l(),xM=a("li"),IFe=a("strong"),BAr=o("blenderbot-small"),PAr=o(" \u2014 "),dH=a("a"),$Ar=o("FlaxBlenderbotSmallForConditionalGeneration"),IAr=o(" (BlenderbotSmall model)"),qAr=l(),kM=a("li"),qFe=a("strong"),NAr=o("encoder-decoder"),jAr=o(" \u2014 "),cH=a("a"),DAr=o("FlaxEncoderDecoderModel"),GAr=o(" (Encoder decoder model)"),OAr=l(),SM=a("li"),NFe=a("strong"),VAr=o("marian"),XAr=o(" \u2014 "),fH=a("a"),zAr=o("FlaxMarianMTModel"),QAr=o(" (Marian model)"),WAr=l(),RM=a("li"),jFe=a("strong"),HAr=o("mbart"),UAr=o(" \u2014 "),mH=a("a"),JAr=o("FlaxMBartForConditionalGeneration"),YAr=o(" (mBART model)"),KAr=l(),BM=a("li"),DFe=a("strong"),ZAr=o("mt5"),e0r=o(" \u2014 "),gH=a("a"),o0r=o("FlaxMT5ForConditionalGeneration"),r0r=o(" (mT5 model)"),t0r=l(),PM=a("li"),GFe=a("strong"),a0r=o("pegasus"),n0r=o(" \u2014 "),hH=a("a"),s0r=o("FlaxPegasusForConditionalGeneration"),l0r=o(" (Pegasus model)"),i0r=l(),$M=a("li"),OFe=a("strong"),d0r=o("t5"),c0r=o(" \u2014 "),pH=a("a"),f0r=o("FlaxT5ForConditionalGeneration"),m0r=o(" (T5 model)"),g0r=l(),VFe=a("p"),h0r=o("Examples:"),p0r=l(),f(y0.$$.fragment),CPe=l(),_f=a("h2"),IM=a("a"),XFe=a("span"),f(L0.$$.fragment),_0r=l(),zFe=a("span"),u0r=o("FlaxAutoModelForSequenceClassification"),wPe=l(),qr=a("div"),f(x0.$$.fragment),b0r=l(),uf=a("p"),v0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_H=a("a"),F0r=o("from_pretrained()"),T0r=o(" class method or the "),uH=a("a"),M0r=o("from_config()"),E0r=o(` class
method.`),C0r=l(),k0=a("p"),w0r=o("This class cannot be instantiated directly using "),QFe=a("code"),A0r=o("__init__()"),y0r=o(" (throws an error)."),L0r=l(),St=a("div"),f(S0.$$.fragment),x0r=l(),WFe=a("p"),k0r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),S0r=l(),bf=a("p"),R0r=o(`Note:
Loading a model from its configuration file does `),HFe=a("strong"),B0r=o("not"),P0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=a("a"),$0r=o("from_pretrained()"),I0r=o(" to load the model weights."),q0r=l(),UFe=a("p"),N0r=o("Examples:"),j0r=l(),f(R0.$$.fragment),D0r=l(),Ro=a("div"),f(B0.$$.fragment),G0r=l(),JFe=a("p"),O0r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),V0r=l(),$n=a("p"),X0r=o("The model class to instantiate is selected based on the "),YFe=a("code"),z0r=o("model_type"),Q0r=o(` property of the config object (either
passed as an argument or loaded from `),KFe=a("code"),W0r=o("pretrained_model_name_or_path"),H0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=a("code"),U0r=o("pretrained_model_name_or_path"),J0r=o(":"),Y0r=l(),Fe=a("ul"),qM=a("li"),eTe=a("strong"),K0r=o("albert"),Z0r=o(" \u2014 "),vH=a("a"),eyr=o("FlaxAlbertForSequenceClassification"),oyr=o(" (ALBERT model)"),ryr=l(),NM=a("li"),oTe=a("strong"),tyr=o("bart"),ayr=o(" \u2014 "),FH=a("a"),nyr=o("FlaxBartForSequenceClassification"),syr=o(" (BART model)"),lyr=l(),jM=a("li"),rTe=a("strong"),iyr=o("bert"),dyr=o(" \u2014 "),TH=a("a"),cyr=o("FlaxBertForSequenceClassification"),fyr=o(" (BERT model)"),myr=l(),DM=a("li"),tTe=a("strong"),gyr=o("big_bird"),hyr=o(" \u2014 "),MH=a("a"),pyr=o("FlaxBigBirdForSequenceClassification"),_yr=o(" (BigBird model)"),uyr=l(),GM=a("li"),aTe=a("strong"),byr=o("distilbert"),vyr=o(" \u2014 "),EH=a("a"),Fyr=o("FlaxDistilBertForSequenceClassification"),Tyr=o(" (DistilBERT model)"),Myr=l(),OM=a("li"),nTe=a("strong"),Eyr=o("electra"),Cyr=o(" \u2014 "),CH=a("a"),wyr=o("FlaxElectraForSequenceClassification"),Ayr=o(" (ELECTRA model)"),yyr=l(),VM=a("li"),sTe=a("strong"),Lyr=o("mbart"),xyr=o(" \u2014 "),wH=a("a"),kyr=o("FlaxMBartForSequenceClassification"),Syr=o(" (mBART model)"),Ryr=l(),XM=a("li"),lTe=a("strong"),Byr=o("roberta"),Pyr=o(" \u2014 "),AH=a("a"),$yr=o("FlaxRobertaForSequenceClassification"),Iyr=o(" (RoBERTa model)"),qyr=l(),zM=a("li"),iTe=a("strong"),Nyr=o("roformer"),jyr=o(" \u2014 "),yH=a("a"),Dyr=o("FlaxRoFormerForSequenceClassification"),Gyr=o(" (RoFormer model)"),Oyr=l(),QM=a("li"),dTe=a("strong"),Vyr=o("xlm-roberta"),Xyr=o(" \u2014 "),LH=a("a"),zyr=o("FlaxXLMRobertaForSequenceClassification"),Qyr=o(" (XLM-RoBERTa model)"),Wyr=l(),cTe=a("p"),Hyr=o("Examples:"),Uyr=l(),f(P0.$$.fragment),APe=l(),vf=a("h2"),WM=a("a"),fTe=a("span"),f($0.$$.fragment),Jyr=l(),mTe=a("span"),Yyr=o("FlaxAutoModelForQuestionAnswering"),yPe=l(),Nr=a("div"),f(I0.$$.fragment),Kyr=l(),Ff=a("p"),Zyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xH=a("a"),eLr=o("from_pretrained()"),oLr=o(" class method or the "),kH=a("a"),rLr=o("from_config()"),tLr=o(` class
method.`),aLr=l(),q0=a("p"),nLr=o("This class cannot be instantiated directly using "),gTe=a("code"),sLr=o("__init__()"),lLr=o(" (throws an error)."),iLr=l(),Rt=a("div"),f(N0.$$.fragment),dLr=l(),hTe=a("p"),cLr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fLr=l(),Tf=a("p"),mLr=o(`Note:
Loading a model from its configuration file does `),pTe=a("strong"),gLr=o("not"),hLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=a("a"),pLr=o("from_pretrained()"),_Lr=o(" to load the model weights."),uLr=l(),_Te=a("p"),bLr=o("Examples:"),vLr=l(),f(j0.$$.fragment),FLr=l(),Bo=a("div"),f(D0.$$.fragment),TLr=l(),uTe=a("p"),MLr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ELr=l(),In=a("p"),CLr=o("The model class to instantiate is selected based on the "),bTe=a("code"),wLr=o("model_type"),ALr=o(` property of the config object (either
passed as an argument or loaded from `),vTe=a("code"),yLr=o("pretrained_model_name_or_path"),LLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=a("code"),xLr=o("pretrained_model_name_or_path"),kLr=o(":"),SLr=l(),Te=a("ul"),HM=a("li"),TTe=a("strong"),RLr=o("albert"),BLr=o(" \u2014 "),RH=a("a"),PLr=o("FlaxAlbertForQuestionAnswering"),$Lr=o(" (ALBERT model)"),ILr=l(),UM=a("li"),MTe=a("strong"),qLr=o("bart"),NLr=o(" \u2014 "),BH=a("a"),jLr=o("FlaxBartForQuestionAnswering"),DLr=o(" (BART model)"),GLr=l(),JM=a("li"),ETe=a("strong"),OLr=o("bert"),VLr=o(" \u2014 "),PH=a("a"),XLr=o("FlaxBertForQuestionAnswering"),zLr=o(" (BERT model)"),QLr=l(),YM=a("li"),CTe=a("strong"),WLr=o("big_bird"),HLr=o(" \u2014 "),$H=a("a"),ULr=o("FlaxBigBirdForQuestionAnswering"),JLr=o(" (BigBird model)"),YLr=l(),KM=a("li"),wTe=a("strong"),KLr=o("distilbert"),ZLr=o(" \u2014 "),IH=a("a"),exr=o("FlaxDistilBertForQuestionAnswering"),oxr=o(" (DistilBERT model)"),rxr=l(),ZM=a("li"),ATe=a("strong"),txr=o("electra"),axr=o(" \u2014 "),qH=a("a"),nxr=o("FlaxElectraForQuestionAnswering"),sxr=o(" (ELECTRA model)"),lxr=l(),e4=a("li"),yTe=a("strong"),ixr=o("mbart"),dxr=o(" \u2014 "),NH=a("a"),cxr=o("FlaxMBartForQuestionAnswering"),fxr=o(" (mBART model)"),mxr=l(),o4=a("li"),LTe=a("strong"),gxr=o("roberta"),hxr=o(" \u2014 "),jH=a("a"),pxr=o("FlaxRobertaForQuestionAnswering"),_xr=o(" (RoBERTa model)"),uxr=l(),r4=a("li"),xTe=a("strong"),bxr=o("roformer"),vxr=o(" \u2014 "),DH=a("a"),Fxr=o("FlaxRoFormerForQuestionAnswering"),Txr=o(" (RoFormer model)"),Mxr=l(),t4=a("li"),kTe=a("strong"),Exr=o("xlm-roberta"),Cxr=o(" \u2014 "),GH=a("a"),wxr=o("FlaxXLMRobertaForQuestionAnswering"),Axr=o(" (XLM-RoBERTa model)"),yxr=l(),STe=a("p"),Lxr=o("Examples:"),xxr=l(),f(G0.$$.fragment),LPe=l(),Mf=a("h2"),a4=a("a"),RTe=a("span"),f(O0.$$.fragment),kxr=l(),BTe=a("span"),Sxr=o("FlaxAutoModelForTokenClassification"),xPe=l(),jr=a("div"),f(V0.$$.fragment),Rxr=l(),Ef=a("p"),Bxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OH=a("a"),Pxr=o("from_pretrained()"),$xr=o(" class method or the "),VH=a("a"),Ixr=o("from_config()"),qxr=o(` class
method.`),Nxr=l(),X0=a("p"),jxr=o("This class cannot be instantiated directly using "),PTe=a("code"),Dxr=o("__init__()"),Gxr=o(" (throws an error)."),Oxr=l(),Bt=a("div"),f(z0.$$.fragment),Vxr=l(),$Te=a("p"),Xxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zxr=l(),Cf=a("p"),Qxr=o(`Note:
Loading a model from its configuration file does `),ITe=a("strong"),Wxr=o("not"),Hxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),Uxr=o("from_pretrained()"),Jxr=o(" to load the model weights."),Yxr=l(),qTe=a("p"),Kxr=o("Examples:"),Zxr=l(),f(Q0.$$.fragment),ekr=l(),Po=a("div"),f(W0.$$.fragment),okr=l(),NTe=a("p"),rkr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tkr=l(),qn=a("p"),akr=o("The model class to instantiate is selected based on the "),jTe=a("code"),nkr=o("model_type"),skr=o(` property of the config object (either
passed as an argument or loaded from `),DTe=a("code"),lkr=o("pretrained_model_name_or_path"),ikr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=a("code"),dkr=o("pretrained_model_name_or_path"),ckr=o(":"),fkr=l(),Be=a("ul"),n4=a("li"),OTe=a("strong"),mkr=o("albert"),gkr=o(" \u2014 "),zH=a("a"),hkr=o("FlaxAlbertForTokenClassification"),pkr=o(" (ALBERT model)"),_kr=l(),s4=a("li"),VTe=a("strong"),ukr=o("bert"),bkr=o(" \u2014 "),QH=a("a"),vkr=o("FlaxBertForTokenClassification"),Fkr=o(" (BERT model)"),Tkr=l(),l4=a("li"),XTe=a("strong"),Mkr=o("big_bird"),Ekr=o(" \u2014 "),WH=a("a"),Ckr=o("FlaxBigBirdForTokenClassification"),wkr=o(" (BigBird model)"),Akr=l(),i4=a("li"),zTe=a("strong"),ykr=o("distilbert"),Lkr=o(" \u2014 "),HH=a("a"),xkr=o("FlaxDistilBertForTokenClassification"),kkr=o(" (DistilBERT model)"),Skr=l(),d4=a("li"),QTe=a("strong"),Rkr=o("electra"),Bkr=o(" \u2014 "),UH=a("a"),Pkr=o("FlaxElectraForTokenClassification"),$kr=o(" (ELECTRA model)"),Ikr=l(),c4=a("li"),WTe=a("strong"),qkr=o("roberta"),Nkr=o(" \u2014 "),JH=a("a"),jkr=o("FlaxRobertaForTokenClassification"),Dkr=o(" (RoBERTa model)"),Gkr=l(),f4=a("li"),HTe=a("strong"),Okr=o("roformer"),Vkr=o(" \u2014 "),YH=a("a"),Xkr=o("FlaxRoFormerForTokenClassification"),zkr=o(" (RoFormer model)"),Qkr=l(),m4=a("li"),UTe=a("strong"),Wkr=o("xlm-roberta"),Hkr=o(" \u2014 "),KH=a("a"),Ukr=o("FlaxXLMRobertaForTokenClassification"),Jkr=o(" (XLM-RoBERTa model)"),Ykr=l(),JTe=a("p"),Kkr=o("Examples:"),Zkr=l(),f(H0.$$.fragment),kPe=l(),wf=a("h2"),g4=a("a"),YTe=a("span"),f(U0.$$.fragment),eSr=l(),KTe=a("span"),oSr=o("FlaxAutoModelForMultipleChoice"),SPe=l(),Dr=a("div"),f(J0.$$.fragment),rSr=l(),Af=a("p"),tSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZH=a("a"),aSr=o("from_pretrained()"),nSr=o(" class method or the "),eU=a("a"),sSr=o("from_config()"),lSr=o(` class
method.`),iSr=l(),Y0=a("p"),dSr=o("This class cannot be instantiated directly using "),ZTe=a("code"),cSr=o("__init__()"),fSr=o(" (throws an error)."),mSr=l(),Pt=a("div"),f(K0.$$.fragment),gSr=l(),e8e=a("p"),hSr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),pSr=l(),yf=a("p"),_Sr=o(`Note:
Loading a model from its configuration file does `),o8e=a("strong"),uSr=o("not"),bSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),vSr=o("from_pretrained()"),FSr=o(" to load the model weights."),TSr=l(),r8e=a("p"),MSr=o("Examples:"),ESr=l(),f(Z0.$$.fragment),CSr=l(),$o=a("div"),f(ey.$$.fragment),wSr=l(),t8e=a("p"),ASr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ySr=l(),Nn=a("p"),LSr=o("The model class to instantiate is selected based on the "),a8e=a("code"),xSr=o("model_type"),kSr=o(` property of the config object (either
passed as an argument or loaded from `),n8e=a("code"),SSr=o("pretrained_model_name_or_path"),RSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s8e=a("code"),BSr=o("pretrained_model_name_or_path"),PSr=o(":"),$Sr=l(),Pe=a("ul"),h4=a("li"),l8e=a("strong"),ISr=o("albert"),qSr=o(" \u2014 "),rU=a("a"),NSr=o("FlaxAlbertForMultipleChoice"),jSr=o(" (ALBERT model)"),DSr=l(),p4=a("li"),i8e=a("strong"),GSr=o("bert"),OSr=o(" \u2014 "),tU=a("a"),VSr=o("FlaxBertForMultipleChoice"),XSr=o(" (BERT model)"),zSr=l(),_4=a("li"),d8e=a("strong"),QSr=o("big_bird"),WSr=o(" \u2014 "),aU=a("a"),HSr=o("FlaxBigBirdForMultipleChoice"),USr=o(" (BigBird model)"),JSr=l(),u4=a("li"),c8e=a("strong"),YSr=o("distilbert"),KSr=o(" \u2014 "),nU=a("a"),ZSr=o("FlaxDistilBertForMultipleChoice"),eRr=o(" (DistilBERT model)"),oRr=l(),b4=a("li"),f8e=a("strong"),rRr=o("electra"),tRr=o(" \u2014 "),sU=a("a"),aRr=o("FlaxElectraForMultipleChoice"),nRr=o(" (ELECTRA model)"),sRr=l(),v4=a("li"),m8e=a("strong"),lRr=o("roberta"),iRr=o(" \u2014 "),lU=a("a"),dRr=o("FlaxRobertaForMultipleChoice"),cRr=o(" (RoBERTa model)"),fRr=l(),F4=a("li"),g8e=a("strong"),mRr=o("roformer"),gRr=o(" \u2014 "),iU=a("a"),hRr=o("FlaxRoFormerForMultipleChoice"),pRr=o(" (RoFormer model)"),_Rr=l(),T4=a("li"),h8e=a("strong"),uRr=o("xlm-roberta"),bRr=o(" \u2014 "),dU=a("a"),vRr=o("FlaxXLMRobertaForMultipleChoice"),FRr=o(" (XLM-RoBERTa model)"),TRr=l(),p8e=a("p"),MRr=o("Examples:"),ERr=l(),f(oy.$$.fragment),RPe=l(),Lf=a("h2"),M4=a("a"),_8e=a("span"),f(ry.$$.fragment),CRr=l(),u8e=a("span"),wRr=o("FlaxAutoModelForNextSentencePrediction"),BPe=l(),Gr=a("div"),f(ty.$$.fragment),ARr=l(),xf=a("p"),yRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cU=a("a"),LRr=o("from_pretrained()"),xRr=o(" class method or the "),fU=a("a"),kRr=o("from_config()"),SRr=o(` class
method.`),RRr=l(),ay=a("p"),BRr=o("This class cannot be instantiated directly using "),b8e=a("code"),PRr=o("__init__()"),$Rr=o(" (throws an error)."),IRr=l(),$t=a("div"),f(ny.$$.fragment),qRr=l(),v8e=a("p"),NRr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jRr=l(),kf=a("p"),DRr=o(`Note:
Loading a model from its configuration file does `),F8e=a("strong"),GRr=o("not"),ORr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=a("a"),VRr=o("from_pretrained()"),XRr=o(" to load the model weights."),zRr=l(),T8e=a("p"),QRr=o("Examples:"),WRr=l(),f(sy.$$.fragment),HRr=l(),Io=a("div"),f(ly.$$.fragment),URr=l(),M8e=a("p"),JRr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),YRr=l(),jn=a("p"),KRr=o("The model class to instantiate is selected based on the "),E8e=a("code"),ZRr=o("model_type"),eBr=o(` property of the config object (either
passed as an argument or loaded from `),C8e=a("code"),oBr=o("pretrained_model_name_or_path"),rBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w8e=a("code"),tBr=o("pretrained_model_name_or_path"),aBr=o(":"),nBr=l(),A8e=a("ul"),E4=a("li"),y8e=a("strong"),sBr=o("bert"),lBr=o(" \u2014 "),gU=a("a"),iBr=o("FlaxBertForNextSentencePrediction"),dBr=o(" (BERT model)"),cBr=l(),L8e=a("p"),fBr=o("Examples:"),mBr=l(),f(iy.$$.fragment),PPe=l(),Sf=a("h2"),C4=a("a"),x8e=a("span"),f(dy.$$.fragment),gBr=l(),k8e=a("span"),hBr=o("FlaxAutoModelForImageClassification"),$Pe=l(),Or=a("div"),f(cy.$$.fragment),pBr=l(),Rf=a("p"),_Br=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hU=a("a"),uBr=o("from_pretrained()"),bBr=o(" class method or the "),pU=a("a"),vBr=o("from_config()"),FBr=o(` class
method.`),TBr=l(),fy=a("p"),MBr=o("This class cannot be instantiated directly using "),S8e=a("code"),EBr=o("__init__()"),CBr=o(" (throws an error)."),wBr=l(),It=a("div"),f(my.$$.fragment),ABr=l(),R8e=a("p"),yBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),LBr=l(),Bf=a("p"),xBr=o(`Note:
Loading a model from its configuration file does `),B8e=a("strong"),kBr=o("not"),SBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=a("a"),RBr=o("from_pretrained()"),BBr=o(" to load the model weights."),PBr=l(),P8e=a("p"),$Br=o("Examples:"),IBr=l(),f(gy.$$.fragment),qBr=l(),qo=a("div"),f(hy.$$.fragment),NBr=l(),$8e=a("p"),jBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),DBr=l(),Dn=a("p"),GBr=o("The model class to instantiate is selected based on the "),I8e=a("code"),OBr=o("model_type"),VBr=o(` property of the config object (either
passed as an argument or loaded from `),q8e=a("code"),XBr=o("pretrained_model_name_or_path"),zBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N8e=a("code"),QBr=o("pretrained_model_name_or_path"),WBr=o(":"),HBr=l(),py=a("ul"),w4=a("li"),j8e=a("strong"),UBr=o("beit"),JBr=o(" \u2014 "),uU=a("a"),YBr=o("FlaxBeitForImageClassification"),KBr=o(" (BEiT model)"),ZBr=l(),A4=a("li"),D8e=a("strong"),ePr=o("vit"),oPr=o(" \u2014 "),bU=a("a"),rPr=o("FlaxViTForImageClassification"),tPr=o(" (ViT model)"),aPr=l(),G8e=a("p"),nPr=o("Examples:"),sPr=l(),f(_y.$$.fragment),IPe=l(),Pf=a("h2"),y4=a("a"),O8e=a("span"),f(uy.$$.fragment),lPr=l(),V8e=a("span"),iPr=o("FlaxAutoModelForVision2Seq"),qPe=l(),Vr=a("div"),f(by.$$.fragment),dPr=l(),$f=a("p"),cPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vU=a("a"),fPr=o("from_pretrained()"),mPr=o(" class method or the "),FU=a("a"),gPr=o("from_config()"),hPr=o(` class
method.`),pPr=l(),vy=a("p"),_Pr=o("This class cannot be instantiated directly using "),X8e=a("code"),uPr=o("__init__()"),bPr=o(" (throws an error)."),vPr=l(),qt=a("div"),f(Fy.$$.fragment),FPr=l(),z8e=a("p"),TPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),MPr=l(),If=a("p"),EPr=o(`Note:
Loading a model from its configuration file does `),Q8e=a("strong"),CPr=o("not"),wPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=a("a"),APr=o("from_pretrained()"),yPr=o(" to load the model weights."),LPr=l(),W8e=a("p"),xPr=o("Examples:"),kPr=l(),f(Ty.$$.fragment),SPr=l(),No=a("div"),f(My.$$.fragment),RPr=l(),H8e=a("p"),BPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),PPr=l(),Gn=a("p"),$Pr=o("The model class to instantiate is selected based on the "),U8e=a("code"),IPr=o("model_type"),qPr=o(` property of the config object (either
passed as an argument or loaded from `),J8e=a("code"),NPr=o("pretrained_model_name_or_path"),jPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y8e=a("code"),DPr=o("pretrained_model_name_or_path"),GPr=o(":"),OPr=l(),K8e=a("ul"),L4=a("li"),Z8e=a("strong"),VPr=o("vision-encoder-decoder"),XPr=o(" \u2014 "),MU=a("a"),zPr=o("FlaxVisionEncoderDecoderModel"),QPr=o(" (Vision Encoder decoder model)"),WPr=l(),e7e=a("p"),HPr=o("Examples:"),UPr=l(),f(Ey.$$.fragment),this.h()},l(c){const u=O5t('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),ce=n(c,"H1",{class:!0});var Cy=s(ce);Ce=n(Cy,"A",{id:!0,class:!0,href:!0});var o7e=s(Ce);lo=n(o7e,"SPAN",{});var r7e=s(lo);m(he.$$.fragment,r7e),r7e.forEach(t),o7e.forEach(t),Me=i(Cy),Xo=n(Cy,"SPAN",{});var YPr=s(Xo);ji=r(YPr,"Auto Classes"),YPr.forEach(t),Cy.forEach(t),jf=i(c),fa=n(c,"P",{});var jPe=s(fa);Di=r(jPe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Gi=n(jPe,"CODE",{});var KPr=s(Gi);xE=r(KPr,"from_pretrained()"),KPr.forEach(t),Df=r(jPe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),jPe.forEach(t),xe=i(c),co=n(c,"P",{});var x4=s(co);Oi=r(x4,"Instantiating one of "),On=n(x4,"A",{href:!0});var ZPr=s(On);kE=r(ZPr,"AutoConfig"),ZPr.forEach(t),Vn=r(x4,", "),Xn=n(x4,"A",{href:!0});var e$r=s(Xn);SE=r(e$r,"AutoModel"),e$r.forEach(t),Vi=r(x4,`, and
`),zn=n(x4,"A",{href:!0});var o$r=s(zn);RE=r(o$r,"AutoTokenizer"),o$r.forEach(t),Xi=r(x4," will directly create a class of the relevant architecture. For instance"),x4.forEach(t),Gf=i(c),m(Da.$$.fragment,c),fo=i(c),ue=n(c,"P",{});var DPe=s(ue);EL=r(DPe,"will create a model that is an instance of "),zi=n(DPe,"A",{href:!0});var r$r=s(zi);CL=r(r$r,"BertModel"),r$r.forEach(t),wL=r(DPe,"."),DPe.forEach(t),zo=i(c),Ga=n(c,"P",{});var GPe=s(Ga);AL=r(GPe,"There is one class of "),Of=n(GPe,"CODE",{});var t$r=s(Of);yL=r(t$r,"AutoModel"),t$r.forEach(t),JIe=r(GPe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),GPe.forEach(t),qRe=i(c),Qi=n(c,"H2",{class:!0});var OPe=s(Qi);Vf=n(OPe,"A",{id:!0,class:!0,href:!0});var a$r=s(Vf);pY=n(a$r,"SPAN",{});var n$r=s(pY);m(BE.$$.fragment,n$r),n$r.forEach(t),a$r.forEach(t),YIe=i(OPe),_Y=n(OPe,"SPAN",{});var s$r=s(_Y);KIe=r(s$r,"Extending the Auto Classes"),s$r.forEach(t),OPe.forEach(t),NRe=i(c),Qn=n(c,"P",{});var EU=s(Qn);ZIe=r(EU,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),uY=n(EU,"CODE",{});var l$r=s(uY);eqe=r(l$r,"NewModel"),l$r.forEach(t),oqe=r(EU,", make sure you have a "),bY=n(EU,"CODE",{});var i$r=s(bY);rqe=r(i$r,"NewModelConfig"),i$r.forEach(t),tqe=r(EU,` then you can add those to the auto
classes like this:`),EU.forEach(t),jRe=i(c),m(PE.$$.fragment,c),DRe=i(c),LL=n(c,"P",{});var d$r=s(LL);aqe=r(d$r,"You will then be able to use the auto classes like you would usually do!"),d$r.forEach(t),GRe=i(c),m(Xf.$$.fragment,c),ORe=i(c),Wi=n(c,"H2",{class:!0});var VPe=s(Wi);zf=n(VPe,"A",{id:!0,class:!0,href:!0});var c$r=s(zf);vY=n(c$r,"SPAN",{});var f$r=s(vY);m($E.$$.fragment,f$r),f$r.forEach(t),c$r.forEach(t),nqe=i(VPe),FY=n(VPe,"SPAN",{});var m$r=s(FY);sqe=r(m$r,"AutoConfig"),m$r.forEach(t),VPe.forEach(t),VRe=i(c),Qo=n(c,"DIV",{class:!0});var zs=s(Qo);m(IE.$$.fragment,zs),lqe=i(zs),qE=n(zs,"P",{});var XPe=s(qE);iqe=r(XPe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),xL=n(XPe,"A",{href:!0});var g$r=s(xL);dqe=r(g$r,"from_pretrained()"),g$r.forEach(t),cqe=r(XPe," class method."),XPe.forEach(t),fqe=i(zs),NE=n(zs,"P",{});var zPe=s(NE);mqe=r(zPe,"This class cannot be instantiated directly using "),TY=n(zPe,"CODE",{});var h$r=s(TY);gqe=r(h$r,"__init__()"),h$r.forEach(t),hqe=r(zPe," (throws an error)."),zPe.forEach(t),pqe=i(zs),mo=n(zs,"DIV",{class:!0});var ga=s(mo);m(jE.$$.fragment,ga),_qe=i(ga),MY=n(ga,"P",{});var p$r=s(MY);uqe=r(p$r,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),p$r.forEach(t),bqe=i(ga),Hi=n(ga,"P",{});var CU=s(Hi);vqe=r(CU,"The configuration class to instantiate is selected based on the "),EY=n(CU,"CODE",{});var _$r=s(EY);Fqe=r(_$r,"model_type"),_$r.forEach(t),Tqe=r(CU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),CY=n(CU,"CODE",{});var u$r=s(CY);Mqe=r(u$r,"pretrained_model_name_or_path"),u$r.forEach(t),Eqe=r(CU,":"),CU.forEach(t),Cqe=i(ga),v=n(ga,"UL",{});var F=s(v);Qf=n(F,"LI",{});var t7e=s(Qf);wY=n(t7e,"STRONG",{});var b$r=s(wY);wqe=r(b$r,"albert"),b$r.forEach(t),Aqe=r(t7e," \u2014 "),kL=n(t7e,"A",{href:!0});var v$r=s(kL);yqe=r(v$r,"AlbertConfig"),v$r.forEach(t),Lqe=r(t7e," (ALBERT model)"),t7e.forEach(t),xqe=i(F),Wf=n(F,"LI",{});var a7e=s(Wf);AY=n(a7e,"STRONG",{});var F$r=s(AY);kqe=r(F$r,"bart"),F$r.forEach(t),Sqe=r(a7e," \u2014 "),SL=n(a7e,"A",{href:!0});var T$r=s(SL);Rqe=r(T$r,"BartConfig"),T$r.forEach(t),Bqe=r(a7e," (BART model)"),a7e.forEach(t),Pqe=i(F),Hf=n(F,"LI",{});var n7e=s(Hf);yY=n(n7e,"STRONG",{});var M$r=s(yY);$qe=r(M$r,"beit"),M$r.forEach(t),Iqe=r(n7e," \u2014 "),RL=n(n7e,"A",{href:!0});var E$r=s(RL);qqe=r(E$r,"BeitConfig"),E$r.forEach(t),Nqe=r(n7e," (BEiT model)"),n7e.forEach(t),jqe=i(F),Uf=n(F,"LI",{});var s7e=s(Uf);LY=n(s7e,"STRONG",{});var C$r=s(LY);Dqe=r(C$r,"bert"),C$r.forEach(t),Gqe=r(s7e," \u2014 "),BL=n(s7e,"A",{href:!0});var w$r=s(BL);Oqe=r(w$r,"BertConfig"),w$r.forEach(t),Vqe=r(s7e," (BERT model)"),s7e.forEach(t),Xqe=i(F),Jf=n(F,"LI",{});var l7e=s(Jf);xY=n(l7e,"STRONG",{});var A$r=s(xY);zqe=r(A$r,"bert-generation"),A$r.forEach(t),Qqe=r(l7e," \u2014 "),PL=n(l7e,"A",{href:!0});var y$r=s(PL);Wqe=r(y$r,"BertGenerationConfig"),y$r.forEach(t),Hqe=r(l7e," (Bert Generation model)"),l7e.forEach(t),Uqe=i(F),Yf=n(F,"LI",{});var i7e=s(Yf);kY=n(i7e,"STRONG",{});var L$r=s(kY);Jqe=r(L$r,"big_bird"),L$r.forEach(t),Yqe=r(i7e," \u2014 "),$L=n(i7e,"A",{href:!0});var x$r=s($L);Kqe=r(x$r,"BigBirdConfig"),x$r.forEach(t),Zqe=r(i7e," (BigBird model)"),i7e.forEach(t),eNe=i(F),Kf=n(F,"LI",{});var d7e=s(Kf);SY=n(d7e,"STRONG",{});var k$r=s(SY);oNe=r(k$r,"bigbird_pegasus"),k$r.forEach(t),rNe=r(d7e," \u2014 "),IL=n(d7e,"A",{href:!0});var S$r=s(IL);tNe=r(S$r,"BigBirdPegasusConfig"),S$r.forEach(t),aNe=r(d7e," (BigBirdPegasus model)"),d7e.forEach(t),nNe=i(F),Zf=n(F,"LI",{});var c7e=s(Zf);RY=n(c7e,"STRONG",{});var R$r=s(RY);sNe=r(R$r,"blenderbot"),R$r.forEach(t),lNe=r(c7e," \u2014 "),qL=n(c7e,"A",{href:!0});var B$r=s(qL);iNe=r(B$r,"BlenderbotConfig"),B$r.forEach(t),dNe=r(c7e," (Blenderbot model)"),c7e.forEach(t),cNe=i(F),em=n(F,"LI",{});var f7e=s(em);BY=n(f7e,"STRONG",{});var P$r=s(BY);fNe=r(P$r,"blenderbot-small"),P$r.forEach(t),mNe=r(f7e," \u2014 "),NL=n(f7e,"A",{href:!0});var $$r=s(NL);gNe=r($$r,"BlenderbotSmallConfig"),$$r.forEach(t),hNe=r(f7e," (BlenderbotSmall model)"),f7e.forEach(t),pNe=i(F),om=n(F,"LI",{});var m7e=s(om);PY=n(m7e,"STRONG",{});var I$r=s(PY);_Ne=r(I$r,"camembert"),I$r.forEach(t),uNe=r(m7e," \u2014 "),jL=n(m7e,"A",{href:!0});var q$r=s(jL);bNe=r(q$r,"CamembertConfig"),q$r.forEach(t),vNe=r(m7e," (CamemBERT model)"),m7e.forEach(t),FNe=i(F),rm=n(F,"LI",{});var g7e=s(rm);$Y=n(g7e,"STRONG",{});var N$r=s($Y);TNe=r(N$r,"canine"),N$r.forEach(t),MNe=r(g7e," \u2014 "),DL=n(g7e,"A",{href:!0});var j$r=s(DL);ENe=r(j$r,"CanineConfig"),j$r.forEach(t),CNe=r(g7e," (Canine model)"),g7e.forEach(t),wNe=i(F),tm=n(F,"LI",{});var h7e=s(tm);IY=n(h7e,"STRONG",{});var D$r=s(IY);ANe=r(D$r,"clip"),D$r.forEach(t),yNe=r(h7e," \u2014 "),GL=n(h7e,"A",{href:!0});var G$r=s(GL);LNe=r(G$r,"CLIPConfig"),G$r.forEach(t),xNe=r(h7e," (CLIP model)"),h7e.forEach(t),kNe=i(F),am=n(F,"LI",{});var p7e=s(am);qY=n(p7e,"STRONG",{});var O$r=s(qY);SNe=r(O$r,"convbert"),O$r.forEach(t),RNe=r(p7e," \u2014 "),OL=n(p7e,"A",{href:!0});var V$r=s(OL);BNe=r(V$r,"ConvBertConfig"),V$r.forEach(t),PNe=r(p7e," (ConvBERT model)"),p7e.forEach(t),$Ne=i(F),nm=n(F,"LI",{});var _7e=s(nm);NY=n(_7e,"STRONG",{});var X$r=s(NY);INe=r(X$r,"convnext"),X$r.forEach(t),qNe=r(_7e," \u2014 "),VL=n(_7e,"A",{href:!0});var z$r=s(VL);NNe=r(z$r,"ConvNextConfig"),z$r.forEach(t),jNe=r(_7e," (ConvNext model)"),_7e.forEach(t),DNe=i(F),sm=n(F,"LI",{});var u7e=s(sm);jY=n(u7e,"STRONG",{});var Q$r=s(jY);GNe=r(Q$r,"ctrl"),Q$r.forEach(t),ONe=r(u7e," \u2014 "),XL=n(u7e,"A",{href:!0});var W$r=s(XL);VNe=r(W$r,"CTRLConfig"),W$r.forEach(t),XNe=r(u7e," (CTRL model)"),u7e.forEach(t),zNe=i(F),lm=n(F,"LI",{});var b7e=s(lm);DY=n(b7e,"STRONG",{});var H$r=s(DY);QNe=r(H$r,"data2vec-audio"),H$r.forEach(t),WNe=r(b7e," \u2014 "),zL=n(b7e,"A",{href:!0});var U$r=s(zL);HNe=r(U$r,"Data2VecAudioConfig"),U$r.forEach(t),UNe=r(b7e," (Data2VecAudio model)"),b7e.forEach(t),JNe=i(F),im=n(F,"LI",{});var v7e=s(im);GY=n(v7e,"STRONG",{});var J$r=s(GY);YNe=r(J$r,"data2vec-text"),J$r.forEach(t),KNe=r(v7e," \u2014 "),QL=n(v7e,"A",{href:!0});var Y$r=s(QL);ZNe=r(Y$r,"Data2VecTextConfig"),Y$r.forEach(t),eje=r(v7e," (Data2VecText model)"),v7e.forEach(t),oje=i(F),dm=n(F,"LI",{});var F7e=s(dm);OY=n(F7e,"STRONG",{});var K$r=s(OY);rje=r(K$r,"data2vec-vision"),K$r.forEach(t),tje=r(F7e," \u2014 "),WL=n(F7e,"A",{href:!0});var Z$r=s(WL);aje=r(Z$r,"Data2VecVisionConfig"),Z$r.forEach(t),nje=r(F7e," (Data2VecVision model)"),F7e.forEach(t),sje=i(F),cm=n(F,"LI",{});var T7e=s(cm);VY=n(T7e,"STRONG",{});var eIr=s(VY);lje=r(eIr,"deberta"),eIr.forEach(t),ije=r(T7e," \u2014 "),HL=n(T7e,"A",{href:!0});var oIr=s(HL);dje=r(oIr,"DebertaConfig"),oIr.forEach(t),cje=r(T7e," (DeBERTa model)"),T7e.forEach(t),fje=i(F),fm=n(F,"LI",{});var M7e=s(fm);XY=n(M7e,"STRONG",{});var rIr=s(XY);mje=r(rIr,"deberta-v2"),rIr.forEach(t),gje=r(M7e," \u2014 "),UL=n(M7e,"A",{href:!0});var tIr=s(UL);hje=r(tIr,"DebertaV2Config"),tIr.forEach(t),pje=r(M7e," (DeBERTa-v2 model)"),M7e.forEach(t),_je=i(F),mm=n(F,"LI",{});var E7e=s(mm);zY=n(E7e,"STRONG",{});var aIr=s(zY);uje=r(aIr,"decision_transformer"),aIr.forEach(t),bje=r(E7e," \u2014 "),JL=n(E7e,"A",{href:!0});var nIr=s(JL);vje=r(nIr,"DecisionTransformerConfig"),nIr.forEach(t),Fje=r(E7e," (Decision Transformer model)"),E7e.forEach(t),Tje=i(F),gm=n(F,"LI",{});var C7e=s(gm);QY=n(C7e,"STRONG",{});var sIr=s(QY);Mje=r(sIr,"deit"),sIr.forEach(t),Eje=r(C7e," \u2014 "),YL=n(C7e,"A",{href:!0});var lIr=s(YL);Cje=r(lIr,"DeiTConfig"),lIr.forEach(t),wje=r(C7e," (DeiT model)"),C7e.forEach(t),Aje=i(F),hm=n(F,"LI",{});var w7e=s(hm);WY=n(w7e,"STRONG",{});var iIr=s(WY);yje=r(iIr,"detr"),iIr.forEach(t),Lje=r(w7e," \u2014 "),KL=n(w7e,"A",{href:!0});var dIr=s(KL);xje=r(dIr,"DetrConfig"),dIr.forEach(t),kje=r(w7e," (DETR model)"),w7e.forEach(t),Sje=i(F),pm=n(F,"LI",{});var A7e=s(pm);HY=n(A7e,"STRONG",{});var cIr=s(HY);Rje=r(cIr,"distilbert"),cIr.forEach(t),Bje=r(A7e," \u2014 "),ZL=n(A7e,"A",{href:!0});var fIr=s(ZL);Pje=r(fIr,"DistilBertConfig"),fIr.forEach(t),$je=r(A7e," (DistilBERT model)"),A7e.forEach(t),Ije=i(F),_m=n(F,"LI",{});var y7e=s(_m);UY=n(y7e,"STRONG",{});var mIr=s(UY);qje=r(mIr,"dpr"),mIr.forEach(t),Nje=r(y7e," \u2014 "),ex=n(y7e,"A",{href:!0});var gIr=s(ex);jje=r(gIr,"DPRConfig"),gIr.forEach(t),Dje=r(y7e," (DPR model)"),y7e.forEach(t),Gje=i(F),um=n(F,"LI",{});var L7e=s(um);JY=n(L7e,"STRONG",{});var hIr=s(JY);Oje=r(hIr,"dpt"),hIr.forEach(t),Vje=r(L7e," \u2014 "),ox=n(L7e,"A",{href:!0});var pIr=s(ox);Xje=r(pIr,"DPTConfig"),pIr.forEach(t),zje=r(L7e," (DPT model)"),L7e.forEach(t),Qje=i(F),bm=n(F,"LI",{});var x7e=s(bm);YY=n(x7e,"STRONG",{});var _Ir=s(YY);Wje=r(_Ir,"electra"),_Ir.forEach(t),Hje=r(x7e," \u2014 "),rx=n(x7e,"A",{href:!0});var uIr=s(rx);Uje=r(uIr,"ElectraConfig"),uIr.forEach(t),Jje=r(x7e," (ELECTRA model)"),x7e.forEach(t),Yje=i(F),vm=n(F,"LI",{});var k7e=s(vm);KY=n(k7e,"STRONG",{});var bIr=s(KY);Kje=r(bIr,"encoder-decoder"),bIr.forEach(t),Zje=r(k7e," \u2014 "),tx=n(k7e,"A",{href:!0});var vIr=s(tx);eDe=r(vIr,"EncoderDecoderConfig"),vIr.forEach(t),oDe=r(k7e," (Encoder decoder model)"),k7e.forEach(t),rDe=i(F),Fm=n(F,"LI",{});var S7e=s(Fm);ZY=n(S7e,"STRONG",{});var FIr=s(ZY);tDe=r(FIr,"flaubert"),FIr.forEach(t),aDe=r(S7e," \u2014 "),ax=n(S7e,"A",{href:!0});var TIr=s(ax);nDe=r(TIr,"FlaubertConfig"),TIr.forEach(t),sDe=r(S7e," (FlauBERT model)"),S7e.forEach(t),lDe=i(F),Tm=n(F,"LI",{});var R7e=s(Tm);eK=n(R7e,"STRONG",{});var MIr=s(eK);iDe=r(MIr,"fnet"),MIr.forEach(t),dDe=r(R7e," \u2014 "),nx=n(R7e,"A",{href:!0});var EIr=s(nx);cDe=r(EIr,"FNetConfig"),EIr.forEach(t),fDe=r(R7e," (FNet model)"),R7e.forEach(t),mDe=i(F),Mm=n(F,"LI",{});var B7e=s(Mm);oK=n(B7e,"STRONG",{});var CIr=s(oK);gDe=r(CIr,"fsmt"),CIr.forEach(t),hDe=r(B7e," \u2014 "),sx=n(B7e,"A",{href:!0});var wIr=s(sx);pDe=r(wIr,"FSMTConfig"),wIr.forEach(t),_De=r(B7e," (FairSeq Machine-Translation model)"),B7e.forEach(t),uDe=i(F),Em=n(F,"LI",{});var P7e=s(Em);rK=n(P7e,"STRONG",{});var AIr=s(rK);bDe=r(AIr,"funnel"),AIr.forEach(t),vDe=r(P7e," \u2014 "),lx=n(P7e,"A",{href:!0});var yIr=s(lx);FDe=r(yIr,"FunnelConfig"),yIr.forEach(t),TDe=r(P7e," (Funnel Transformer model)"),P7e.forEach(t),MDe=i(F),Cm=n(F,"LI",{});var $7e=s(Cm);tK=n($7e,"STRONG",{});var LIr=s(tK);EDe=r(LIr,"glpn"),LIr.forEach(t),CDe=r($7e," \u2014 "),ix=n($7e,"A",{href:!0});var xIr=s(ix);wDe=r(xIr,"GLPNConfig"),xIr.forEach(t),ADe=r($7e," (GLPN model)"),$7e.forEach(t),yDe=i(F),wm=n(F,"LI",{});var I7e=s(wm);aK=n(I7e,"STRONG",{});var kIr=s(aK);LDe=r(kIr,"gpt2"),kIr.forEach(t),xDe=r(I7e," \u2014 "),dx=n(I7e,"A",{href:!0});var SIr=s(dx);kDe=r(SIr,"GPT2Config"),SIr.forEach(t),SDe=r(I7e," (OpenAI GPT-2 model)"),I7e.forEach(t),RDe=i(F),Am=n(F,"LI",{});var q7e=s(Am);nK=n(q7e,"STRONG",{});var RIr=s(nK);BDe=r(RIr,"gpt_neo"),RIr.forEach(t),PDe=r(q7e," \u2014 "),cx=n(q7e,"A",{href:!0});var BIr=s(cx);$De=r(BIr,"GPTNeoConfig"),BIr.forEach(t),IDe=r(q7e," (GPT Neo model)"),q7e.forEach(t),qDe=i(F),ym=n(F,"LI",{});var N7e=s(ym);sK=n(N7e,"STRONG",{});var PIr=s(sK);NDe=r(PIr,"gptj"),PIr.forEach(t),jDe=r(N7e," \u2014 "),fx=n(N7e,"A",{href:!0});var $Ir=s(fx);DDe=r($Ir,"GPTJConfig"),$Ir.forEach(t),GDe=r(N7e," (GPT-J model)"),N7e.forEach(t),ODe=i(F),Lm=n(F,"LI",{});var j7e=s(Lm);lK=n(j7e,"STRONG",{});var IIr=s(lK);VDe=r(IIr,"hubert"),IIr.forEach(t),XDe=r(j7e," \u2014 "),mx=n(j7e,"A",{href:!0});var qIr=s(mx);zDe=r(qIr,"HubertConfig"),qIr.forEach(t),QDe=r(j7e," (Hubert model)"),j7e.forEach(t),WDe=i(F),xm=n(F,"LI",{});var D7e=s(xm);iK=n(D7e,"STRONG",{});var NIr=s(iK);HDe=r(NIr,"ibert"),NIr.forEach(t),UDe=r(D7e," \u2014 "),gx=n(D7e,"A",{href:!0});var jIr=s(gx);JDe=r(jIr,"IBertConfig"),jIr.forEach(t),YDe=r(D7e," (I-BERT model)"),D7e.forEach(t),KDe=i(F),km=n(F,"LI",{});var G7e=s(km);dK=n(G7e,"STRONG",{});var DIr=s(dK);ZDe=r(DIr,"imagegpt"),DIr.forEach(t),eGe=r(G7e," \u2014 "),hx=n(G7e,"A",{href:!0});var GIr=s(hx);oGe=r(GIr,"ImageGPTConfig"),GIr.forEach(t),rGe=r(G7e," (ImageGPT model)"),G7e.forEach(t),tGe=i(F),Sm=n(F,"LI",{});var O7e=s(Sm);cK=n(O7e,"STRONG",{});var OIr=s(cK);aGe=r(OIr,"layoutlm"),OIr.forEach(t),nGe=r(O7e," \u2014 "),px=n(O7e,"A",{href:!0});var VIr=s(px);sGe=r(VIr,"LayoutLMConfig"),VIr.forEach(t),lGe=r(O7e," (LayoutLM model)"),O7e.forEach(t),iGe=i(F),Rm=n(F,"LI",{});var V7e=s(Rm);fK=n(V7e,"STRONG",{});var XIr=s(fK);dGe=r(XIr,"layoutlmv2"),XIr.forEach(t),cGe=r(V7e," \u2014 "),_x=n(V7e,"A",{href:!0});var zIr=s(_x);fGe=r(zIr,"LayoutLMv2Config"),zIr.forEach(t),mGe=r(V7e," (LayoutLMv2 model)"),V7e.forEach(t),gGe=i(F),Bm=n(F,"LI",{});var X7e=s(Bm);mK=n(X7e,"STRONG",{});var QIr=s(mK);hGe=r(QIr,"led"),QIr.forEach(t),pGe=r(X7e," \u2014 "),ux=n(X7e,"A",{href:!0});var WIr=s(ux);_Ge=r(WIr,"LEDConfig"),WIr.forEach(t),uGe=r(X7e," (LED model)"),X7e.forEach(t),bGe=i(F),Pm=n(F,"LI",{});var z7e=s(Pm);gK=n(z7e,"STRONG",{});var HIr=s(gK);vGe=r(HIr,"longformer"),HIr.forEach(t),FGe=r(z7e," \u2014 "),bx=n(z7e,"A",{href:!0});var UIr=s(bx);TGe=r(UIr,"LongformerConfig"),UIr.forEach(t),MGe=r(z7e," (Longformer model)"),z7e.forEach(t),EGe=i(F),$m=n(F,"LI",{});var Q7e=s($m);hK=n(Q7e,"STRONG",{});var JIr=s(hK);CGe=r(JIr,"luke"),JIr.forEach(t),wGe=r(Q7e," \u2014 "),vx=n(Q7e,"A",{href:!0});var YIr=s(vx);AGe=r(YIr,"LukeConfig"),YIr.forEach(t),yGe=r(Q7e," (LUKE model)"),Q7e.forEach(t),LGe=i(F),Im=n(F,"LI",{});var W7e=s(Im);pK=n(W7e,"STRONG",{});var KIr=s(pK);xGe=r(KIr,"lxmert"),KIr.forEach(t),kGe=r(W7e," \u2014 "),Fx=n(W7e,"A",{href:!0});var ZIr=s(Fx);SGe=r(ZIr,"LxmertConfig"),ZIr.forEach(t),RGe=r(W7e," (LXMERT model)"),W7e.forEach(t),BGe=i(F),qm=n(F,"LI",{});var H7e=s(qm);_K=n(H7e,"STRONG",{});var eqr=s(_K);PGe=r(eqr,"m2m_100"),eqr.forEach(t),$Ge=r(H7e," \u2014 "),Tx=n(H7e,"A",{href:!0});var oqr=s(Tx);IGe=r(oqr,"M2M100Config"),oqr.forEach(t),qGe=r(H7e," (M2M100 model)"),H7e.forEach(t),NGe=i(F),Nm=n(F,"LI",{});var U7e=s(Nm);uK=n(U7e,"STRONG",{});var rqr=s(uK);jGe=r(rqr,"marian"),rqr.forEach(t),DGe=r(U7e," \u2014 "),Mx=n(U7e,"A",{href:!0});var tqr=s(Mx);GGe=r(tqr,"MarianConfig"),tqr.forEach(t),OGe=r(U7e," (Marian model)"),U7e.forEach(t),VGe=i(F),jm=n(F,"LI",{});var J7e=s(jm);bK=n(J7e,"STRONG",{});var aqr=s(bK);XGe=r(aqr,"maskformer"),aqr.forEach(t),zGe=r(J7e," \u2014 "),Ex=n(J7e,"A",{href:!0});var nqr=s(Ex);QGe=r(nqr,"MaskFormerConfig"),nqr.forEach(t),WGe=r(J7e," (MaskFormer model)"),J7e.forEach(t),HGe=i(F),Dm=n(F,"LI",{});var Y7e=s(Dm);vK=n(Y7e,"STRONG",{});var sqr=s(vK);UGe=r(sqr,"mbart"),sqr.forEach(t),JGe=r(Y7e," \u2014 "),Cx=n(Y7e,"A",{href:!0});var lqr=s(Cx);YGe=r(lqr,"MBartConfig"),lqr.forEach(t),KGe=r(Y7e," (mBART model)"),Y7e.forEach(t),ZGe=i(F),Gm=n(F,"LI",{});var K7e=s(Gm);FK=n(K7e,"STRONG",{});var iqr=s(FK);eOe=r(iqr,"megatron-bert"),iqr.forEach(t),oOe=r(K7e," \u2014 "),wx=n(K7e,"A",{href:!0});var dqr=s(wx);rOe=r(dqr,"MegatronBertConfig"),dqr.forEach(t),tOe=r(K7e," (MegatronBert model)"),K7e.forEach(t),aOe=i(F),Om=n(F,"LI",{});var Z7e=s(Om);TK=n(Z7e,"STRONG",{});var cqr=s(TK);nOe=r(cqr,"mobilebert"),cqr.forEach(t),sOe=r(Z7e," \u2014 "),Ax=n(Z7e,"A",{href:!0});var fqr=s(Ax);lOe=r(fqr,"MobileBertConfig"),fqr.forEach(t),iOe=r(Z7e," (MobileBERT model)"),Z7e.forEach(t),dOe=i(F),Vm=n(F,"LI",{});var e9e=s(Vm);MK=n(e9e,"STRONG",{});var mqr=s(MK);cOe=r(mqr,"mpnet"),mqr.forEach(t),fOe=r(e9e," \u2014 "),yx=n(e9e,"A",{href:!0});var gqr=s(yx);mOe=r(gqr,"MPNetConfig"),gqr.forEach(t),gOe=r(e9e," (MPNet model)"),e9e.forEach(t),hOe=i(F),Xm=n(F,"LI",{});var o9e=s(Xm);EK=n(o9e,"STRONG",{});var hqr=s(EK);pOe=r(hqr,"mt5"),hqr.forEach(t),_Oe=r(o9e," \u2014 "),Lx=n(o9e,"A",{href:!0});var pqr=s(Lx);uOe=r(pqr,"MT5Config"),pqr.forEach(t),bOe=r(o9e," (mT5 model)"),o9e.forEach(t),vOe=i(F),zm=n(F,"LI",{});var r9e=s(zm);CK=n(r9e,"STRONG",{});var _qr=s(CK);FOe=r(_qr,"nystromformer"),_qr.forEach(t),TOe=r(r9e," \u2014 "),xx=n(r9e,"A",{href:!0});var uqr=s(xx);MOe=r(uqr,"NystromformerConfig"),uqr.forEach(t),EOe=r(r9e," (Nystromformer model)"),r9e.forEach(t),COe=i(F),Qm=n(F,"LI",{});var t9e=s(Qm);wK=n(t9e,"STRONG",{});var bqr=s(wK);wOe=r(bqr,"openai-gpt"),bqr.forEach(t),AOe=r(t9e," \u2014 "),kx=n(t9e,"A",{href:!0});var vqr=s(kx);yOe=r(vqr,"OpenAIGPTConfig"),vqr.forEach(t),LOe=r(t9e," (OpenAI GPT model)"),t9e.forEach(t),xOe=i(F),Wm=n(F,"LI",{});var a9e=s(Wm);AK=n(a9e,"STRONG",{});var Fqr=s(AK);kOe=r(Fqr,"pegasus"),Fqr.forEach(t),SOe=r(a9e," \u2014 "),Sx=n(a9e,"A",{href:!0});var Tqr=s(Sx);ROe=r(Tqr,"PegasusConfig"),Tqr.forEach(t),BOe=r(a9e," (Pegasus model)"),a9e.forEach(t),POe=i(F),Hm=n(F,"LI",{});var n9e=s(Hm);yK=n(n9e,"STRONG",{});var Mqr=s(yK);$Oe=r(Mqr,"perceiver"),Mqr.forEach(t),IOe=r(n9e," \u2014 "),Rx=n(n9e,"A",{href:!0});var Eqr=s(Rx);qOe=r(Eqr,"PerceiverConfig"),Eqr.forEach(t),NOe=r(n9e," (Perceiver model)"),n9e.forEach(t),jOe=i(F),Um=n(F,"LI",{});var s9e=s(Um);LK=n(s9e,"STRONG",{});var Cqr=s(LK);DOe=r(Cqr,"plbart"),Cqr.forEach(t),GOe=r(s9e," \u2014 "),Bx=n(s9e,"A",{href:!0});var wqr=s(Bx);OOe=r(wqr,"PLBartConfig"),wqr.forEach(t),VOe=r(s9e," (PLBart model)"),s9e.forEach(t),XOe=i(F),Jm=n(F,"LI",{});var l9e=s(Jm);xK=n(l9e,"STRONG",{});var Aqr=s(xK);zOe=r(Aqr,"poolformer"),Aqr.forEach(t),QOe=r(l9e," \u2014 "),Px=n(l9e,"A",{href:!0});var yqr=s(Px);WOe=r(yqr,"PoolFormerConfig"),yqr.forEach(t),HOe=r(l9e," (PoolFormer model)"),l9e.forEach(t),UOe=i(F),Ym=n(F,"LI",{});var i9e=s(Ym);kK=n(i9e,"STRONG",{});var Lqr=s(kK);JOe=r(Lqr,"prophetnet"),Lqr.forEach(t),YOe=r(i9e," \u2014 "),$x=n(i9e,"A",{href:!0});var xqr=s($x);KOe=r(xqr,"ProphetNetConfig"),xqr.forEach(t),ZOe=r(i9e," (ProphetNet model)"),i9e.forEach(t),eVe=i(F),Km=n(F,"LI",{});var d9e=s(Km);SK=n(d9e,"STRONG",{});var kqr=s(SK);oVe=r(kqr,"qdqbert"),kqr.forEach(t),rVe=r(d9e," \u2014 "),Ix=n(d9e,"A",{href:!0});var Sqr=s(Ix);tVe=r(Sqr,"QDQBertConfig"),Sqr.forEach(t),aVe=r(d9e," (QDQBert model)"),d9e.forEach(t),nVe=i(F),Zm=n(F,"LI",{});var c9e=s(Zm);RK=n(c9e,"STRONG",{});var Rqr=s(RK);sVe=r(Rqr,"rag"),Rqr.forEach(t),lVe=r(c9e," \u2014 "),qx=n(c9e,"A",{href:!0});var Bqr=s(qx);iVe=r(Bqr,"RagConfig"),Bqr.forEach(t),dVe=r(c9e," (RAG model)"),c9e.forEach(t),cVe=i(F),eg=n(F,"LI",{});var f9e=s(eg);BK=n(f9e,"STRONG",{});var Pqr=s(BK);fVe=r(Pqr,"realm"),Pqr.forEach(t),mVe=r(f9e," \u2014 "),Nx=n(f9e,"A",{href:!0});var $qr=s(Nx);gVe=r($qr,"RealmConfig"),$qr.forEach(t),hVe=r(f9e," (Realm model)"),f9e.forEach(t),pVe=i(F),og=n(F,"LI",{});var m9e=s(og);PK=n(m9e,"STRONG",{});var Iqr=s(PK);_Ve=r(Iqr,"reformer"),Iqr.forEach(t),uVe=r(m9e," \u2014 "),jx=n(m9e,"A",{href:!0});var qqr=s(jx);bVe=r(qqr,"ReformerConfig"),qqr.forEach(t),vVe=r(m9e," (Reformer model)"),m9e.forEach(t),FVe=i(F),rg=n(F,"LI",{});var g9e=s(rg);$K=n(g9e,"STRONG",{});var Nqr=s($K);TVe=r(Nqr,"regnet"),Nqr.forEach(t),MVe=r(g9e," \u2014 "),Dx=n(g9e,"A",{href:!0});var jqr=s(Dx);EVe=r(jqr,"RegNetConfig"),jqr.forEach(t),CVe=r(g9e," (RegNet model)"),g9e.forEach(t),wVe=i(F),tg=n(F,"LI",{});var h9e=s(tg);IK=n(h9e,"STRONG",{});var Dqr=s(IK);AVe=r(Dqr,"rembert"),Dqr.forEach(t),yVe=r(h9e," \u2014 "),Gx=n(h9e,"A",{href:!0});var Gqr=s(Gx);LVe=r(Gqr,"RemBertConfig"),Gqr.forEach(t),xVe=r(h9e," (RemBERT model)"),h9e.forEach(t),kVe=i(F),ag=n(F,"LI",{});var p9e=s(ag);qK=n(p9e,"STRONG",{});var Oqr=s(qK);SVe=r(Oqr,"resnet"),Oqr.forEach(t),RVe=r(p9e," \u2014 "),Ox=n(p9e,"A",{href:!0});var Vqr=s(Ox);BVe=r(Vqr,"ResNetConfig"),Vqr.forEach(t),PVe=r(p9e," (ResNet model)"),p9e.forEach(t),$Ve=i(F),ng=n(F,"LI",{});var _9e=s(ng);NK=n(_9e,"STRONG",{});var Xqr=s(NK);IVe=r(Xqr,"retribert"),Xqr.forEach(t),qVe=r(_9e," \u2014 "),Vx=n(_9e,"A",{href:!0});var zqr=s(Vx);NVe=r(zqr,"RetriBertConfig"),zqr.forEach(t),jVe=r(_9e," (RetriBERT model)"),_9e.forEach(t),DVe=i(F),sg=n(F,"LI",{});var u9e=s(sg);jK=n(u9e,"STRONG",{});var Qqr=s(jK);GVe=r(Qqr,"roberta"),Qqr.forEach(t),OVe=r(u9e," \u2014 "),Xx=n(u9e,"A",{href:!0});var Wqr=s(Xx);VVe=r(Wqr,"RobertaConfig"),Wqr.forEach(t),XVe=r(u9e," (RoBERTa model)"),u9e.forEach(t),zVe=i(F),lg=n(F,"LI",{});var b9e=s(lg);DK=n(b9e,"STRONG",{});var Hqr=s(DK);QVe=r(Hqr,"roformer"),Hqr.forEach(t),WVe=r(b9e," \u2014 "),zx=n(b9e,"A",{href:!0});var Uqr=s(zx);HVe=r(Uqr,"RoFormerConfig"),Uqr.forEach(t),UVe=r(b9e," (RoFormer model)"),b9e.forEach(t),JVe=i(F),ig=n(F,"LI",{});var v9e=s(ig);GK=n(v9e,"STRONG",{});var Jqr=s(GK);YVe=r(Jqr,"segformer"),Jqr.forEach(t),KVe=r(v9e," \u2014 "),Qx=n(v9e,"A",{href:!0});var Yqr=s(Qx);ZVe=r(Yqr,"SegformerConfig"),Yqr.forEach(t),eXe=r(v9e," (SegFormer model)"),v9e.forEach(t),oXe=i(F),dg=n(F,"LI",{});var F9e=s(dg);OK=n(F9e,"STRONG",{});var Kqr=s(OK);rXe=r(Kqr,"sew"),Kqr.forEach(t),tXe=r(F9e," \u2014 "),Wx=n(F9e,"A",{href:!0});var Zqr=s(Wx);aXe=r(Zqr,"SEWConfig"),Zqr.forEach(t),nXe=r(F9e," (SEW model)"),F9e.forEach(t),sXe=i(F),cg=n(F,"LI",{});var T9e=s(cg);VK=n(T9e,"STRONG",{});var eNr=s(VK);lXe=r(eNr,"sew-d"),eNr.forEach(t),iXe=r(T9e," \u2014 "),Hx=n(T9e,"A",{href:!0});var oNr=s(Hx);dXe=r(oNr,"SEWDConfig"),oNr.forEach(t),cXe=r(T9e," (SEW-D model)"),T9e.forEach(t),fXe=i(F),fg=n(F,"LI",{});var M9e=s(fg);XK=n(M9e,"STRONG",{});var rNr=s(XK);mXe=r(rNr,"speech-encoder-decoder"),rNr.forEach(t),gXe=r(M9e," \u2014 "),Ux=n(M9e,"A",{href:!0});var tNr=s(Ux);hXe=r(tNr,"SpeechEncoderDecoderConfig"),tNr.forEach(t),pXe=r(M9e," (Speech Encoder decoder model)"),M9e.forEach(t),_Xe=i(F),mg=n(F,"LI",{});var E9e=s(mg);zK=n(E9e,"STRONG",{});var aNr=s(zK);uXe=r(aNr,"speech_to_text"),aNr.forEach(t),bXe=r(E9e," \u2014 "),Jx=n(E9e,"A",{href:!0});var nNr=s(Jx);vXe=r(nNr,"Speech2TextConfig"),nNr.forEach(t),FXe=r(E9e," (Speech2Text model)"),E9e.forEach(t),TXe=i(F),gg=n(F,"LI",{});var C9e=s(gg);QK=n(C9e,"STRONG",{});var sNr=s(QK);MXe=r(sNr,"speech_to_text_2"),sNr.forEach(t),EXe=r(C9e," \u2014 "),Yx=n(C9e,"A",{href:!0});var lNr=s(Yx);CXe=r(lNr,"Speech2Text2Config"),lNr.forEach(t),wXe=r(C9e," (Speech2Text2 model)"),C9e.forEach(t),AXe=i(F),hg=n(F,"LI",{});var w9e=s(hg);WK=n(w9e,"STRONG",{});var iNr=s(WK);yXe=r(iNr,"splinter"),iNr.forEach(t),LXe=r(w9e," \u2014 "),Kx=n(w9e,"A",{href:!0});var dNr=s(Kx);xXe=r(dNr,"SplinterConfig"),dNr.forEach(t),kXe=r(w9e," (Splinter model)"),w9e.forEach(t),SXe=i(F),pg=n(F,"LI",{});var A9e=s(pg);HK=n(A9e,"STRONG",{});var cNr=s(HK);RXe=r(cNr,"squeezebert"),cNr.forEach(t),BXe=r(A9e," \u2014 "),Zx=n(A9e,"A",{href:!0});var fNr=s(Zx);PXe=r(fNr,"SqueezeBertConfig"),fNr.forEach(t),$Xe=r(A9e," (SqueezeBERT model)"),A9e.forEach(t),IXe=i(F),_g=n(F,"LI",{});var y9e=s(_g);UK=n(y9e,"STRONG",{});var mNr=s(UK);qXe=r(mNr,"swin"),mNr.forEach(t),NXe=r(y9e," \u2014 "),ek=n(y9e,"A",{href:!0});var gNr=s(ek);jXe=r(gNr,"SwinConfig"),gNr.forEach(t),DXe=r(y9e," (Swin model)"),y9e.forEach(t),GXe=i(F),ug=n(F,"LI",{});var L9e=s(ug);JK=n(L9e,"STRONG",{});var hNr=s(JK);OXe=r(hNr,"t5"),hNr.forEach(t),VXe=r(L9e," \u2014 "),ok=n(L9e,"A",{href:!0});var pNr=s(ok);XXe=r(pNr,"T5Config"),pNr.forEach(t),zXe=r(L9e," (T5 model)"),L9e.forEach(t),QXe=i(F),bg=n(F,"LI",{});var x9e=s(bg);YK=n(x9e,"STRONG",{});var _Nr=s(YK);WXe=r(_Nr,"tapas"),_Nr.forEach(t),HXe=r(x9e," \u2014 "),rk=n(x9e,"A",{href:!0});var uNr=s(rk);UXe=r(uNr,"TapasConfig"),uNr.forEach(t),JXe=r(x9e," (TAPAS model)"),x9e.forEach(t),YXe=i(F),vg=n(F,"LI",{});var k9e=s(vg);KK=n(k9e,"STRONG",{});var bNr=s(KK);KXe=r(bNr,"tapex"),bNr.forEach(t),ZXe=r(k9e," \u2014 "),tk=n(k9e,"A",{href:!0});var vNr=s(tk);eze=r(vNr,"BartConfig"),vNr.forEach(t),oze=r(k9e," (TAPEX model)"),k9e.forEach(t),rze=i(F),Fg=n(F,"LI",{});var S9e=s(Fg);ZK=n(S9e,"STRONG",{});var FNr=s(ZK);tze=r(FNr,"transfo-xl"),FNr.forEach(t),aze=r(S9e," \u2014 "),ak=n(S9e,"A",{href:!0});var TNr=s(ak);nze=r(TNr,"TransfoXLConfig"),TNr.forEach(t),sze=r(S9e," (Transformer-XL model)"),S9e.forEach(t),lze=i(F),Tg=n(F,"LI",{});var R9e=s(Tg);eZ=n(R9e,"STRONG",{});var MNr=s(eZ);ize=r(MNr,"trocr"),MNr.forEach(t),dze=r(R9e," \u2014 "),nk=n(R9e,"A",{href:!0});var ENr=s(nk);cze=r(ENr,"TrOCRConfig"),ENr.forEach(t),fze=r(R9e," (TrOCR model)"),R9e.forEach(t),mze=i(F),Mg=n(F,"LI",{});var B9e=s(Mg);oZ=n(B9e,"STRONG",{});var CNr=s(oZ);gze=r(CNr,"unispeech"),CNr.forEach(t),hze=r(B9e," \u2014 "),sk=n(B9e,"A",{href:!0});var wNr=s(sk);pze=r(wNr,"UniSpeechConfig"),wNr.forEach(t),_ze=r(B9e," (UniSpeech model)"),B9e.forEach(t),uze=i(F),Eg=n(F,"LI",{});var P9e=s(Eg);rZ=n(P9e,"STRONG",{});var ANr=s(rZ);bze=r(ANr,"unispeech-sat"),ANr.forEach(t),vze=r(P9e," \u2014 "),lk=n(P9e,"A",{href:!0});var yNr=s(lk);Fze=r(yNr,"UniSpeechSatConfig"),yNr.forEach(t),Tze=r(P9e," (UniSpeechSat model)"),P9e.forEach(t),Mze=i(F),Cg=n(F,"LI",{});var $9e=s(Cg);tZ=n($9e,"STRONG",{});var LNr=s(tZ);Eze=r(LNr,"van"),LNr.forEach(t),Cze=r($9e," \u2014 "),ik=n($9e,"A",{href:!0});var xNr=s(ik);wze=r(xNr,"VanConfig"),xNr.forEach(t),Aze=r($9e," (VAN model)"),$9e.forEach(t),yze=i(F),wg=n(F,"LI",{});var I9e=s(wg);aZ=n(I9e,"STRONG",{});var kNr=s(aZ);Lze=r(kNr,"vilt"),kNr.forEach(t),xze=r(I9e," \u2014 "),dk=n(I9e,"A",{href:!0});var SNr=s(dk);kze=r(SNr,"ViltConfig"),SNr.forEach(t),Sze=r(I9e," (ViLT model)"),I9e.forEach(t),Rze=i(F),Ag=n(F,"LI",{});var q9e=s(Ag);nZ=n(q9e,"STRONG",{});var RNr=s(nZ);Bze=r(RNr,"vision-encoder-decoder"),RNr.forEach(t),Pze=r(q9e," \u2014 "),ck=n(q9e,"A",{href:!0});var BNr=s(ck);$ze=r(BNr,"VisionEncoderDecoderConfig"),BNr.forEach(t),Ize=r(q9e," (Vision Encoder decoder model)"),q9e.forEach(t),qze=i(F),yg=n(F,"LI",{});var N9e=s(yg);sZ=n(N9e,"STRONG",{});var PNr=s(sZ);Nze=r(PNr,"vision-text-dual-encoder"),PNr.forEach(t),jze=r(N9e," \u2014 "),fk=n(N9e,"A",{href:!0});var $Nr=s(fk);Dze=r($Nr,"VisionTextDualEncoderConfig"),$Nr.forEach(t),Gze=r(N9e," (VisionTextDualEncoder model)"),N9e.forEach(t),Oze=i(F),Lg=n(F,"LI",{});var j9e=s(Lg);lZ=n(j9e,"STRONG",{});var INr=s(lZ);Vze=r(INr,"visual_bert"),INr.forEach(t),Xze=r(j9e," \u2014 "),mk=n(j9e,"A",{href:!0});var qNr=s(mk);zze=r(qNr,"VisualBertConfig"),qNr.forEach(t),Qze=r(j9e," (VisualBert model)"),j9e.forEach(t),Wze=i(F),xg=n(F,"LI",{});var D9e=s(xg);iZ=n(D9e,"STRONG",{});var NNr=s(iZ);Hze=r(NNr,"vit"),NNr.forEach(t),Uze=r(D9e," \u2014 "),gk=n(D9e,"A",{href:!0});var jNr=s(gk);Jze=r(jNr,"ViTConfig"),jNr.forEach(t),Yze=r(D9e," (ViT model)"),D9e.forEach(t),Kze=i(F),kg=n(F,"LI",{});var G9e=s(kg);dZ=n(G9e,"STRONG",{});var DNr=s(dZ);Zze=r(DNr,"vit_mae"),DNr.forEach(t),eQe=r(G9e," \u2014 "),hk=n(G9e,"A",{href:!0});var GNr=s(hk);oQe=r(GNr,"ViTMAEConfig"),GNr.forEach(t),rQe=r(G9e," (ViTMAE model)"),G9e.forEach(t),tQe=i(F),Sg=n(F,"LI",{});var O9e=s(Sg);cZ=n(O9e,"STRONG",{});var ONr=s(cZ);aQe=r(ONr,"wav2vec2"),ONr.forEach(t),nQe=r(O9e," \u2014 "),pk=n(O9e,"A",{href:!0});var VNr=s(pk);sQe=r(VNr,"Wav2Vec2Config"),VNr.forEach(t),lQe=r(O9e," (Wav2Vec2 model)"),O9e.forEach(t),iQe=i(F),Rg=n(F,"LI",{});var V9e=s(Rg);fZ=n(V9e,"STRONG",{});var XNr=s(fZ);dQe=r(XNr,"wavlm"),XNr.forEach(t),cQe=r(V9e," \u2014 "),_k=n(V9e,"A",{href:!0});var zNr=s(_k);fQe=r(zNr,"WavLMConfig"),zNr.forEach(t),mQe=r(V9e," (WavLM model)"),V9e.forEach(t),gQe=i(F),Bg=n(F,"LI",{});var X9e=s(Bg);mZ=n(X9e,"STRONG",{});var QNr=s(mZ);hQe=r(QNr,"xglm"),QNr.forEach(t),pQe=r(X9e," \u2014 "),uk=n(X9e,"A",{href:!0});var WNr=s(uk);_Qe=r(WNr,"XGLMConfig"),WNr.forEach(t),uQe=r(X9e," (XGLM model)"),X9e.forEach(t),bQe=i(F),Pg=n(F,"LI",{});var z9e=s(Pg);gZ=n(z9e,"STRONG",{});var HNr=s(gZ);vQe=r(HNr,"xlm"),HNr.forEach(t),FQe=r(z9e," \u2014 "),bk=n(z9e,"A",{href:!0});var UNr=s(bk);TQe=r(UNr,"XLMConfig"),UNr.forEach(t),MQe=r(z9e," (XLM model)"),z9e.forEach(t),EQe=i(F),$g=n(F,"LI",{});var Q9e=s($g);hZ=n(Q9e,"STRONG",{});var JNr=s(hZ);CQe=r(JNr,"xlm-prophetnet"),JNr.forEach(t),wQe=r(Q9e," \u2014 "),vk=n(Q9e,"A",{href:!0});var YNr=s(vk);AQe=r(YNr,"XLMProphetNetConfig"),YNr.forEach(t),yQe=r(Q9e," (XLMProphetNet model)"),Q9e.forEach(t),LQe=i(F),Ig=n(F,"LI",{});var W9e=s(Ig);pZ=n(W9e,"STRONG",{});var KNr=s(pZ);xQe=r(KNr,"xlm-roberta"),KNr.forEach(t),kQe=r(W9e," \u2014 "),Fk=n(W9e,"A",{href:!0});var ZNr=s(Fk);SQe=r(ZNr,"XLMRobertaConfig"),ZNr.forEach(t),RQe=r(W9e," (XLM-RoBERTa model)"),W9e.forEach(t),BQe=i(F),qg=n(F,"LI",{});var H9e=s(qg);_Z=n(H9e,"STRONG",{});var ejr=s(_Z);PQe=r(ejr,"xlm-roberta-xl"),ejr.forEach(t),$Qe=r(H9e," \u2014 "),Tk=n(H9e,"A",{href:!0});var ojr=s(Tk);IQe=r(ojr,"XLMRobertaXLConfig"),ojr.forEach(t),qQe=r(H9e," (XLM-RoBERTa-XL model)"),H9e.forEach(t),NQe=i(F),Ng=n(F,"LI",{});var U9e=s(Ng);uZ=n(U9e,"STRONG",{});var rjr=s(uZ);jQe=r(rjr,"xlnet"),rjr.forEach(t),DQe=r(U9e," \u2014 "),Mk=n(U9e,"A",{href:!0});var tjr=s(Mk);GQe=r(tjr,"XLNetConfig"),tjr.forEach(t),OQe=r(U9e," (XLNet model)"),U9e.forEach(t),VQe=i(F),jg=n(F,"LI",{});var J9e=s(jg);bZ=n(J9e,"STRONG",{});var ajr=s(bZ);XQe=r(ajr,"yoso"),ajr.forEach(t),zQe=r(J9e," \u2014 "),Ek=n(J9e,"A",{href:!0});var njr=s(Ek);QQe=r(njr,"YosoConfig"),njr.forEach(t),WQe=r(J9e," (YOSO model)"),J9e.forEach(t),F.forEach(t),HQe=i(ga),vZ=n(ga,"P",{});var sjr=s(vZ);UQe=r(sjr,"Examples:"),sjr.forEach(t),JQe=i(ga),m(DE.$$.fragment,ga),ga.forEach(t),YQe=i(zs),Dg=n(zs,"DIV",{class:!0});var QPe=s(Dg);m(GE.$$.fragment,QPe),KQe=i(QPe),FZ=n(QPe,"P",{});var ljr=s(FZ);ZQe=r(ljr,"Register a new configuration for this class."),ljr.forEach(t),QPe.forEach(t),zs.forEach(t),XRe=i(c),Ui=n(c,"H2",{class:!0});var WPe=s(Ui);Gg=n(WPe,"A",{id:!0,class:!0,href:!0});var ijr=s(Gg);TZ=n(ijr,"SPAN",{});var djr=s(TZ);m(OE.$$.fragment,djr),djr.forEach(t),ijr.forEach(t),eWe=i(WPe),MZ=n(WPe,"SPAN",{});var cjr=s(MZ);oWe=r(cjr,"AutoTokenizer"),cjr.forEach(t),WPe.forEach(t),zRe=i(c),Wo=n(c,"DIV",{class:!0});var Qs=s(Wo);m(VE.$$.fragment,Qs),rWe=i(Qs),XE=n(Qs,"P",{});var HPe=s(XE);tWe=r(HPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Ck=n(HPe,"A",{href:!0});var fjr=s(Ck);aWe=r(fjr,"AutoTokenizer.from_pretrained()"),fjr.forEach(t),nWe=r(HPe," class method."),HPe.forEach(t),sWe=i(Qs),zE=n(Qs,"P",{});var UPe=s(zE);lWe=r(UPe,"This class cannot be instantiated directly using "),EZ=n(UPe,"CODE",{});var mjr=s(EZ);iWe=r(mjr,"__init__()"),mjr.forEach(t),dWe=r(UPe," (throws an error)."),UPe.forEach(t),cWe=i(Qs),go=n(Qs,"DIV",{class:!0});var ha=s(go);m(QE.$$.fragment,ha),fWe=i(ha),CZ=n(ha,"P",{});var gjr=s(CZ);mWe=r(gjr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),gjr.forEach(t),gWe=i(ha),Oa=n(ha,"P",{});var k4=s(Oa);hWe=r(k4,"The tokenizer class to instantiate is selected based on the "),wZ=n(k4,"CODE",{});var hjr=s(wZ);pWe=r(hjr,"model_type"),hjr.forEach(t),_We=r(k4,` property of the config object (either
passed as an argument or loaded from `),AZ=n(k4,"CODE",{});var pjr=s(AZ);uWe=r(pjr,"pretrained_model_name_or_path"),pjr.forEach(t),bWe=r(k4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yZ=n(k4,"CODE",{});var _jr=s(yZ);vWe=r(_jr,"pretrained_model_name_or_path"),_jr.forEach(t),FWe=r(k4,":"),k4.forEach(t),TWe=i(ha),E=n(ha,"UL",{});var C=s(E);Wn=n(C,"LI",{});var wy=s(Wn);LZ=n(wy,"STRONG",{});var ujr=s(LZ);MWe=r(ujr,"albert"),ujr.forEach(t),EWe=r(wy," \u2014 "),wk=n(wy,"A",{href:!0});var bjr=s(wk);CWe=r(bjr,"AlbertTokenizer"),bjr.forEach(t),wWe=r(wy," or "),Ak=n(wy,"A",{href:!0});var vjr=s(Ak);AWe=r(vjr,"AlbertTokenizerFast"),vjr.forEach(t),yWe=r(wy," (ALBERT model)"),wy.forEach(t),LWe=i(C),Hn=n(C,"LI",{});var Ay=s(Hn);xZ=n(Ay,"STRONG",{});var Fjr=s(xZ);xWe=r(Fjr,"bart"),Fjr.forEach(t),kWe=r(Ay," \u2014 "),yk=n(Ay,"A",{href:!0});var Tjr=s(yk);SWe=r(Tjr,"BartTokenizer"),Tjr.forEach(t),RWe=r(Ay," or "),Lk=n(Ay,"A",{href:!0});var Mjr=s(Lk);BWe=r(Mjr,"BartTokenizerFast"),Mjr.forEach(t),PWe=r(Ay," (BART model)"),Ay.forEach(t),$We=i(C),Un=n(C,"LI",{});var yy=s(Un);kZ=n(yy,"STRONG",{});var Ejr=s(kZ);IWe=r(Ejr,"barthez"),Ejr.forEach(t),qWe=r(yy," \u2014 "),xk=n(yy,"A",{href:!0});var Cjr=s(xk);NWe=r(Cjr,"BarthezTokenizer"),Cjr.forEach(t),jWe=r(yy," or "),kk=n(yy,"A",{href:!0});var wjr=s(kk);DWe=r(wjr,"BarthezTokenizerFast"),wjr.forEach(t),GWe=r(yy," (BARThez model)"),yy.forEach(t),OWe=i(C),Og=n(C,"LI",{});var Y9e=s(Og);SZ=n(Y9e,"STRONG",{});var Ajr=s(SZ);VWe=r(Ajr,"bartpho"),Ajr.forEach(t),XWe=r(Y9e," \u2014 "),Sk=n(Y9e,"A",{href:!0});var yjr=s(Sk);zWe=r(yjr,"BartphoTokenizer"),yjr.forEach(t),QWe=r(Y9e," (BARTpho model)"),Y9e.forEach(t),WWe=i(C),Jn=n(C,"LI",{});var Ly=s(Jn);RZ=n(Ly,"STRONG",{});var Ljr=s(RZ);HWe=r(Ljr,"bert"),Ljr.forEach(t),UWe=r(Ly," \u2014 "),Rk=n(Ly,"A",{href:!0});var xjr=s(Rk);JWe=r(xjr,"BertTokenizer"),xjr.forEach(t),YWe=r(Ly," or "),Bk=n(Ly,"A",{href:!0});var kjr=s(Bk);KWe=r(kjr,"BertTokenizerFast"),kjr.forEach(t),ZWe=r(Ly," (BERT model)"),Ly.forEach(t),eHe=i(C),Vg=n(C,"LI",{});var K9e=s(Vg);BZ=n(K9e,"STRONG",{});var Sjr=s(BZ);oHe=r(Sjr,"bert-generation"),Sjr.forEach(t),rHe=r(K9e," \u2014 "),Pk=n(K9e,"A",{href:!0});var Rjr=s(Pk);tHe=r(Rjr,"BertGenerationTokenizer"),Rjr.forEach(t),aHe=r(K9e," (Bert Generation model)"),K9e.forEach(t),nHe=i(C),Xg=n(C,"LI",{});var Z9e=s(Xg);PZ=n(Z9e,"STRONG",{});var Bjr=s(PZ);sHe=r(Bjr,"bert-japanese"),Bjr.forEach(t),lHe=r(Z9e," \u2014 "),$k=n(Z9e,"A",{href:!0});var Pjr=s($k);iHe=r(Pjr,"BertJapaneseTokenizer"),Pjr.forEach(t),dHe=r(Z9e," (BertJapanese model)"),Z9e.forEach(t),cHe=i(C),zg=n(C,"LI",{});var eMe=s(zg);$Z=n(eMe,"STRONG",{});var $jr=s($Z);fHe=r($jr,"bertweet"),$jr.forEach(t),mHe=r(eMe," \u2014 "),Ik=n(eMe,"A",{href:!0});var Ijr=s(Ik);gHe=r(Ijr,"BertweetTokenizer"),Ijr.forEach(t),hHe=r(eMe," (Bertweet model)"),eMe.forEach(t),pHe=i(C),Yn=n(C,"LI",{});var xy=s(Yn);IZ=n(xy,"STRONG",{});var qjr=s(IZ);_He=r(qjr,"big_bird"),qjr.forEach(t),uHe=r(xy," \u2014 "),qk=n(xy,"A",{href:!0});var Njr=s(qk);bHe=r(Njr,"BigBirdTokenizer"),Njr.forEach(t),vHe=r(xy," or "),Nk=n(xy,"A",{href:!0});var jjr=s(Nk);FHe=r(jjr,"BigBirdTokenizerFast"),jjr.forEach(t),THe=r(xy," (BigBird model)"),xy.forEach(t),MHe=i(C),Kn=n(C,"LI",{});var ky=s(Kn);qZ=n(ky,"STRONG",{});var Djr=s(qZ);EHe=r(Djr,"bigbird_pegasus"),Djr.forEach(t),CHe=r(ky," \u2014 "),jk=n(ky,"A",{href:!0});var Gjr=s(jk);wHe=r(Gjr,"PegasusTokenizer"),Gjr.forEach(t),AHe=r(ky," or "),Dk=n(ky,"A",{href:!0});var Ojr=s(Dk);yHe=r(Ojr,"PegasusTokenizerFast"),Ojr.forEach(t),LHe=r(ky," (BigBirdPegasus model)"),ky.forEach(t),xHe=i(C),Zn=n(C,"LI",{});var Sy=s(Zn);NZ=n(Sy,"STRONG",{});var Vjr=s(NZ);kHe=r(Vjr,"blenderbot"),Vjr.forEach(t),SHe=r(Sy," \u2014 "),Gk=n(Sy,"A",{href:!0});var Xjr=s(Gk);RHe=r(Xjr,"BlenderbotTokenizer"),Xjr.forEach(t),BHe=r(Sy," or "),Ok=n(Sy,"A",{href:!0});var zjr=s(Ok);PHe=r(zjr,"BlenderbotTokenizerFast"),zjr.forEach(t),$He=r(Sy," (Blenderbot model)"),Sy.forEach(t),IHe=i(C),Qg=n(C,"LI",{});var oMe=s(Qg);jZ=n(oMe,"STRONG",{});var Qjr=s(jZ);qHe=r(Qjr,"blenderbot-small"),Qjr.forEach(t),NHe=r(oMe," \u2014 "),Vk=n(oMe,"A",{href:!0});var Wjr=s(Vk);jHe=r(Wjr,"BlenderbotSmallTokenizer"),Wjr.forEach(t),DHe=r(oMe," (BlenderbotSmall model)"),oMe.forEach(t),GHe=i(C),Wg=n(C,"LI",{});var rMe=s(Wg);DZ=n(rMe,"STRONG",{});var Hjr=s(DZ);OHe=r(Hjr,"byt5"),Hjr.forEach(t),VHe=r(rMe," \u2014 "),Xk=n(rMe,"A",{href:!0});var Ujr=s(Xk);XHe=r(Ujr,"ByT5Tokenizer"),Ujr.forEach(t),zHe=r(rMe," (ByT5 model)"),rMe.forEach(t),QHe=i(C),es=n(C,"LI",{});var Ry=s(es);GZ=n(Ry,"STRONG",{});var Jjr=s(GZ);WHe=r(Jjr,"camembert"),Jjr.forEach(t),HHe=r(Ry," \u2014 "),zk=n(Ry,"A",{href:!0});var Yjr=s(zk);UHe=r(Yjr,"CamembertTokenizer"),Yjr.forEach(t),JHe=r(Ry," or "),Qk=n(Ry,"A",{href:!0});var Kjr=s(Qk);YHe=r(Kjr,"CamembertTokenizerFast"),Kjr.forEach(t),KHe=r(Ry," (CamemBERT model)"),Ry.forEach(t),ZHe=i(C),Hg=n(C,"LI",{});var tMe=s(Hg);OZ=n(tMe,"STRONG",{});var Zjr=s(OZ);eUe=r(Zjr,"canine"),Zjr.forEach(t),oUe=r(tMe," \u2014 "),Wk=n(tMe,"A",{href:!0});var eDr=s(Wk);rUe=r(eDr,"CanineTokenizer"),eDr.forEach(t),tUe=r(tMe," (Canine model)"),tMe.forEach(t),aUe=i(C),os=n(C,"LI",{});var By=s(os);VZ=n(By,"STRONG",{});var oDr=s(VZ);nUe=r(oDr,"clip"),oDr.forEach(t),sUe=r(By," \u2014 "),Hk=n(By,"A",{href:!0});var rDr=s(Hk);lUe=r(rDr,"CLIPTokenizer"),rDr.forEach(t),iUe=r(By," or "),Uk=n(By,"A",{href:!0});var tDr=s(Uk);dUe=r(tDr,"CLIPTokenizerFast"),tDr.forEach(t),cUe=r(By," (CLIP model)"),By.forEach(t),fUe=i(C),rs=n(C,"LI",{});var Py=s(rs);XZ=n(Py,"STRONG",{});var aDr=s(XZ);mUe=r(aDr,"convbert"),aDr.forEach(t),gUe=r(Py," \u2014 "),Jk=n(Py,"A",{href:!0});var nDr=s(Jk);hUe=r(nDr,"ConvBertTokenizer"),nDr.forEach(t),pUe=r(Py," or "),Yk=n(Py,"A",{href:!0});var sDr=s(Yk);_Ue=r(sDr,"ConvBertTokenizerFast"),sDr.forEach(t),uUe=r(Py," (ConvBERT model)"),Py.forEach(t),bUe=i(C),ts=n(C,"LI",{});var $y=s(ts);zZ=n($y,"STRONG",{});var lDr=s(zZ);vUe=r(lDr,"cpm"),lDr.forEach(t),FUe=r($y," \u2014 "),Kk=n($y,"A",{href:!0});var iDr=s(Kk);TUe=r(iDr,"CpmTokenizer"),iDr.forEach(t),MUe=r($y," or "),QZ=n($y,"CODE",{});var dDr=s(QZ);EUe=r(dDr,"CpmTokenizerFast"),dDr.forEach(t),CUe=r($y," (CPM model)"),$y.forEach(t),wUe=i(C),Ug=n(C,"LI",{});var aMe=s(Ug);WZ=n(aMe,"STRONG",{});var cDr=s(WZ);AUe=r(cDr,"ctrl"),cDr.forEach(t),yUe=r(aMe," \u2014 "),Zk=n(aMe,"A",{href:!0});var fDr=s(Zk);LUe=r(fDr,"CTRLTokenizer"),fDr.forEach(t),xUe=r(aMe," (CTRL model)"),aMe.forEach(t),kUe=i(C),as=n(C,"LI",{});var Iy=s(as);HZ=n(Iy,"STRONG",{});var mDr=s(HZ);SUe=r(mDr,"deberta"),mDr.forEach(t),RUe=r(Iy," \u2014 "),eS=n(Iy,"A",{href:!0});var gDr=s(eS);BUe=r(gDr,"DebertaTokenizer"),gDr.forEach(t),PUe=r(Iy," or "),oS=n(Iy,"A",{href:!0});var hDr=s(oS);$Ue=r(hDr,"DebertaTokenizerFast"),hDr.forEach(t),IUe=r(Iy," (DeBERTa model)"),Iy.forEach(t),qUe=i(C),ns=n(C,"LI",{});var qy=s(ns);UZ=n(qy,"STRONG",{});var pDr=s(UZ);NUe=r(pDr,"deberta-v2"),pDr.forEach(t),jUe=r(qy," \u2014 "),rS=n(qy,"A",{href:!0});var _Dr=s(rS);DUe=r(_Dr,"DebertaV2Tokenizer"),_Dr.forEach(t),GUe=r(qy," or "),tS=n(qy,"A",{href:!0});var uDr=s(tS);OUe=r(uDr,"DebertaV2TokenizerFast"),uDr.forEach(t),VUe=r(qy," (DeBERTa-v2 model)"),qy.forEach(t),XUe=i(C),ss=n(C,"LI",{});var Ny=s(ss);JZ=n(Ny,"STRONG",{});var bDr=s(JZ);zUe=r(bDr,"distilbert"),bDr.forEach(t),QUe=r(Ny," \u2014 "),aS=n(Ny,"A",{href:!0});var vDr=s(aS);WUe=r(vDr,"DistilBertTokenizer"),vDr.forEach(t),HUe=r(Ny," or "),nS=n(Ny,"A",{href:!0});var FDr=s(nS);UUe=r(FDr,"DistilBertTokenizerFast"),FDr.forEach(t),JUe=r(Ny," (DistilBERT model)"),Ny.forEach(t),YUe=i(C),ls=n(C,"LI",{});var jy=s(ls);YZ=n(jy,"STRONG",{});var TDr=s(YZ);KUe=r(TDr,"dpr"),TDr.forEach(t),ZUe=r(jy," \u2014 "),sS=n(jy,"A",{href:!0});var MDr=s(sS);eJe=r(MDr,"DPRQuestionEncoderTokenizer"),MDr.forEach(t),oJe=r(jy," or "),lS=n(jy,"A",{href:!0});var EDr=s(lS);rJe=r(EDr,"DPRQuestionEncoderTokenizerFast"),EDr.forEach(t),tJe=r(jy," (DPR model)"),jy.forEach(t),aJe=i(C),is=n(C,"LI",{});var Dy=s(is);KZ=n(Dy,"STRONG",{});var CDr=s(KZ);nJe=r(CDr,"electra"),CDr.forEach(t),sJe=r(Dy," \u2014 "),iS=n(Dy,"A",{href:!0});var wDr=s(iS);lJe=r(wDr,"ElectraTokenizer"),wDr.forEach(t),iJe=r(Dy," or "),dS=n(Dy,"A",{href:!0});var ADr=s(dS);dJe=r(ADr,"ElectraTokenizerFast"),ADr.forEach(t),cJe=r(Dy," (ELECTRA model)"),Dy.forEach(t),fJe=i(C),Jg=n(C,"LI",{});var nMe=s(Jg);ZZ=n(nMe,"STRONG",{});var yDr=s(ZZ);mJe=r(yDr,"flaubert"),yDr.forEach(t),gJe=r(nMe," \u2014 "),cS=n(nMe,"A",{href:!0});var LDr=s(cS);hJe=r(LDr,"FlaubertTokenizer"),LDr.forEach(t),pJe=r(nMe," (FlauBERT model)"),nMe.forEach(t),_Je=i(C),ds=n(C,"LI",{});var Gy=s(ds);eee=n(Gy,"STRONG",{});var xDr=s(eee);uJe=r(xDr,"fnet"),xDr.forEach(t),bJe=r(Gy," \u2014 "),fS=n(Gy,"A",{href:!0});var kDr=s(fS);vJe=r(kDr,"FNetTokenizer"),kDr.forEach(t),FJe=r(Gy," or "),mS=n(Gy,"A",{href:!0});var SDr=s(mS);TJe=r(SDr,"FNetTokenizerFast"),SDr.forEach(t),MJe=r(Gy," (FNet model)"),Gy.forEach(t),EJe=i(C),Yg=n(C,"LI",{});var sMe=s(Yg);oee=n(sMe,"STRONG",{});var RDr=s(oee);CJe=r(RDr,"fsmt"),RDr.forEach(t),wJe=r(sMe," \u2014 "),gS=n(sMe,"A",{href:!0});var BDr=s(gS);AJe=r(BDr,"FSMTTokenizer"),BDr.forEach(t),yJe=r(sMe," (FairSeq Machine-Translation model)"),sMe.forEach(t),LJe=i(C),cs=n(C,"LI",{});var Oy=s(cs);ree=n(Oy,"STRONG",{});var PDr=s(ree);xJe=r(PDr,"funnel"),PDr.forEach(t),kJe=r(Oy," \u2014 "),hS=n(Oy,"A",{href:!0});var $Dr=s(hS);SJe=r($Dr,"FunnelTokenizer"),$Dr.forEach(t),RJe=r(Oy," or "),pS=n(Oy,"A",{href:!0});var IDr=s(pS);BJe=r(IDr,"FunnelTokenizerFast"),IDr.forEach(t),PJe=r(Oy," (Funnel Transformer model)"),Oy.forEach(t),$Je=i(C),fs=n(C,"LI",{});var Vy=s(fs);tee=n(Vy,"STRONG",{});var qDr=s(tee);IJe=r(qDr,"gpt2"),qDr.forEach(t),qJe=r(Vy," \u2014 "),_S=n(Vy,"A",{href:!0});var NDr=s(_S);NJe=r(NDr,"GPT2Tokenizer"),NDr.forEach(t),jJe=r(Vy," or "),uS=n(Vy,"A",{href:!0});var jDr=s(uS);DJe=r(jDr,"GPT2TokenizerFast"),jDr.forEach(t),GJe=r(Vy," (OpenAI GPT-2 model)"),Vy.forEach(t),OJe=i(C),ms=n(C,"LI",{});var Xy=s(ms);aee=n(Xy,"STRONG",{});var DDr=s(aee);VJe=r(DDr,"gpt_neo"),DDr.forEach(t),XJe=r(Xy," \u2014 "),bS=n(Xy,"A",{href:!0});var GDr=s(bS);zJe=r(GDr,"GPT2Tokenizer"),GDr.forEach(t),QJe=r(Xy," or "),vS=n(Xy,"A",{href:!0});var ODr=s(vS);WJe=r(ODr,"GPT2TokenizerFast"),ODr.forEach(t),HJe=r(Xy," (GPT Neo model)"),Xy.forEach(t),UJe=i(C),gs=n(C,"LI",{});var zy=s(gs);nee=n(zy,"STRONG",{});var VDr=s(nee);JJe=r(VDr,"gptj"),VDr.forEach(t),YJe=r(zy," \u2014 "),FS=n(zy,"A",{href:!0});var XDr=s(FS);KJe=r(XDr,"GPT2Tokenizer"),XDr.forEach(t),ZJe=r(zy," or "),TS=n(zy,"A",{href:!0});var zDr=s(TS);eYe=r(zDr,"GPT2TokenizerFast"),zDr.forEach(t),oYe=r(zy," (GPT-J model)"),zy.forEach(t),rYe=i(C),hs=n(C,"LI",{});var Qy=s(hs);see=n(Qy,"STRONG",{});var QDr=s(see);tYe=r(QDr,"herbert"),QDr.forEach(t),aYe=r(Qy," \u2014 "),MS=n(Qy,"A",{href:!0});var WDr=s(MS);nYe=r(WDr,"HerbertTokenizer"),WDr.forEach(t),sYe=r(Qy," or "),ES=n(Qy,"A",{href:!0});var HDr=s(ES);lYe=r(HDr,"HerbertTokenizerFast"),HDr.forEach(t),iYe=r(Qy," (HerBERT model)"),Qy.forEach(t),dYe=i(C),Kg=n(C,"LI",{});var lMe=s(Kg);lee=n(lMe,"STRONG",{});var UDr=s(lee);cYe=r(UDr,"hubert"),UDr.forEach(t),fYe=r(lMe," \u2014 "),CS=n(lMe,"A",{href:!0});var JDr=s(CS);mYe=r(JDr,"Wav2Vec2CTCTokenizer"),JDr.forEach(t),gYe=r(lMe," (Hubert model)"),lMe.forEach(t),hYe=i(C),ps=n(C,"LI",{});var Wy=s(ps);iee=n(Wy,"STRONG",{});var YDr=s(iee);pYe=r(YDr,"ibert"),YDr.forEach(t),_Ye=r(Wy," \u2014 "),wS=n(Wy,"A",{href:!0});var KDr=s(wS);uYe=r(KDr,"RobertaTokenizer"),KDr.forEach(t),bYe=r(Wy," or "),AS=n(Wy,"A",{href:!0});var ZDr=s(AS);vYe=r(ZDr,"RobertaTokenizerFast"),ZDr.forEach(t),FYe=r(Wy," (I-BERT model)"),Wy.forEach(t),TYe=i(C),_s=n(C,"LI",{});var Hy=s(_s);dee=n(Hy,"STRONG",{});var eGr=s(dee);MYe=r(eGr,"layoutlm"),eGr.forEach(t),EYe=r(Hy," \u2014 "),yS=n(Hy,"A",{href:!0});var oGr=s(yS);CYe=r(oGr,"LayoutLMTokenizer"),oGr.forEach(t),wYe=r(Hy," or "),LS=n(Hy,"A",{href:!0});var rGr=s(LS);AYe=r(rGr,"LayoutLMTokenizerFast"),rGr.forEach(t),yYe=r(Hy," (LayoutLM model)"),Hy.forEach(t),LYe=i(C),us=n(C,"LI",{});var Uy=s(us);cee=n(Uy,"STRONG",{});var tGr=s(cee);xYe=r(tGr,"layoutlmv2"),tGr.forEach(t),kYe=r(Uy," \u2014 "),xS=n(Uy,"A",{href:!0});var aGr=s(xS);SYe=r(aGr,"LayoutLMv2Tokenizer"),aGr.forEach(t),RYe=r(Uy," or "),kS=n(Uy,"A",{href:!0});var nGr=s(kS);BYe=r(nGr,"LayoutLMv2TokenizerFast"),nGr.forEach(t),PYe=r(Uy," (LayoutLMv2 model)"),Uy.forEach(t),$Ye=i(C),bs=n(C,"LI",{});var Jy=s(bs);fee=n(Jy,"STRONG",{});var sGr=s(fee);IYe=r(sGr,"layoutxlm"),sGr.forEach(t),qYe=r(Jy," \u2014 "),SS=n(Jy,"A",{href:!0});var lGr=s(SS);NYe=r(lGr,"LayoutXLMTokenizer"),lGr.forEach(t),jYe=r(Jy," or "),RS=n(Jy,"A",{href:!0});var iGr=s(RS);DYe=r(iGr,"LayoutXLMTokenizerFast"),iGr.forEach(t),GYe=r(Jy," (LayoutXLM model)"),Jy.forEach(t),OYe=i(C),vs=n(C,"LI",{});var Yy=s(vs);mee=n(Yy,"STRONG",{});var dGr=s(mee);VYe=r(dGr,"led"),dGr.forEach(t),XYe=r(Yy," \u2014 "),BS=n(Yy,"A",{href:!0});var cGr=s(BS);zYe=r(cGr,"LEDTokenizer"),cGr.forEach(t),QYe=r(Yy," or "),PS=n(Yy,"A",{href:!0});var fGr=s(PS);WYe=r(fGr,"LEDTokenizerFast"),fGr.forEach(t),HYe=r(Yy," (LED model)"),Yy.forEach(t),UYe=i(C),Fs=n(C,"LI",{});var Ky=s(Fs);gee=n(Ky,"STRONG",{});var mGr=s(gee);JYe=r(mGr,"longformer"),mGr.forEach(t),YYe=r(Ky," \u2014 "),$S=n(Ky,"A",{href:!0});var gGr=s($S);KYe=r(gGr,"LongformerTokenizer"),gGr.forEach(t),ZYe=r(Ky," or "),IS=n(Ky,"A",{href:!0});var hGr=s(IS);eKe=r(hGr,"LongformerTokenizerFast"),hGr.forEach(t),oKe=r(Ky," (Longformer model)"),Ky.forEach(t),rKe=i(C),Zg=n(C,"LI",{});var iMe=s(Zg);hee=n(iMe,"STRONG",{});var pGr=s(hee);tKe=r(pGr,"luke"),pGr.forEach(t),aKe=r(iMe," \u2014 "),qS=n(iMe,"A",{href:!0});var _Gr=s(qS);nKe=r(_Gr,"LukeTokenizer"),_Gr.forEach(t),sKe=r(iMe," (LUKE model)"),iMe.forEach(t),lKe=i(C),Ts=n(C,"LI",{});var Zy=s(Ts);pee=n(Zy,"STRONG",{});var uGr=s(pee);iKe=r(uGr,"lxmert"),uGr.forEach(t),dKe=r(Zy," \u2014 "),NS=n(Zy,"A",{href:!0});var bGr=s(NS);cKe=r(bGr,"LxmertTokenizer"),bGr.forEach(t),fKe=r(Zy," or "),jS=n(Zy,"A",{href:!0});var vGr=s(jS);mKe=r(vGr,"LxmertTokenizerFast"),vGr.forEach(t),gKe=r(Zy," (LXMERT model)"),Zy.forEach(t),hKe=i(C),eh=n(C,"LI",{});var dMe=s(eh);_ee=n(dMe,"STRONG",{});var FGr=s(_ee);pKe=r(FGr,"m2m_100"),FGr.forEach(t),_Ke=r(dMe," \u2014 "),DS=n(dMe,"A",{href:!0});var TGr=s(DS);uKe=r(TGr,"M2M100Tokenizer"),TGr.forEach(t),bKe=r(dMe," (M2M100 model)"),dMe.forEach(t),vKe=i(C),oh=n(C,"LI",{});var cMe=s(oh);uee=n(cMe,"STRONG",{});var MGr=s(uee);FKe=r(MGr,"marian"),MGr.forEach(t),TKe=r(cMe," \u2014 "),GS=n(cMe,"A",{href:!0});var EGr=s(GS);MKe=r(EGr,"MarianTokenizer"),EGr.forEach(t),EKe=r(cMe," (Marian model)"),cMe.forEach(t),CKe=i(C),Ms=n(C,"LI",{});var eL=s(Ms);bee=n(eL,"STRONG",{});var CGr=s(bee);wKe=r(CGr,"mbart"),CGr.forEach(t),AKe=r(eL," \u2014 "),OS=n(eL,"A",{href:!0});var wGr=s(OS);yKe=r(wGr,"MBartTokenizer"),wGr.forEach(t),LKe=r(eL," or "),VS=n(eL,"A",{href:!0});var AGr=s(VS);xKe=r(AGr,"MBartTokenizerFast"),AGr.forEach(t),kKe=r(eL," (mBART model)"),eL.forEach(t),SKe=i(C),Es=n(C,"LI",{});var oL=s(Es);vee=n(oL,"STRONG",{});var yGr=s(vee);RKe=r(yGr,"mbart50"),yGr.forEach(t),BKe=r(oL," \u2014 "),XS=n(oL,"A",{href:!0});var LGr=s(XS);PKe=r(LGr,"MBart50Tokenizer"),LGr.forEach(t),$Ke=r(oL," or "),zS=n(oL,"A",{href:!0});var xGr=s(zS);IKe=r(xGr,"MBart50TokenizerFast"),xGr.forEach(t),qKe=r(oL," (mBART-50 model)"),oL.forEach(t),NKe=i(C),rh=n(C,"LI",{});var fMe=s(rh);Fee=n(fMe,"STRONG",{});var kGr=s(Fee);jKe=r(kGr,"mluke"),kGr.forEach(t),DKe=r(fMe," \u2014 "),QS=n(fMe,"A",{href:!0});var SGr=s(QS);GKe=r(SGr,"MLukeTokenizer"),SGr.forEach(t),OKe=r(fMe," (mLUKE model)"),fMe.forEach(t),VKe=i(C),Cs=n(C,"LI",{});var rL=s(Cs);Tee=n(rL,"STRONG",{});var RGr=s(Tee);XKe=r(RGr,"mobilebert"),RGr.forEach(t),zKe=r(rL," \u2014 "),WS=n(rL,"A",{href:!0});var BGr=s(WS);QKe=r(BGr,"MobileBertTokenizer"),BGr.forEach(t),WKe=r(rL," or "),HS=n(rL,"A",{href:!0});var PGr=s(HS);HKe=r(PGr,"MobileBertTokenizerFast"),PGr.forEach(t),UKe=r(rL," (MobileBERT model)"),rL.forEach(t),JKe=i(C),ws=n(C,"LI",{});var tL=s(ws);Mee=n(tL,"STRONG",{});var $Gr=s(Mee);YKe=r($Gr,"mpnet"),$Gr.forEach(t),KKe=r(tL," \u2014 "),US=n(tL,"A",{href:!0});var IGr=s(US);ZKe=r(IGr,"MPNetTokenizer"),IGr.forEach(t),eZe=r(tL," or "),JS=n(tL,"A",{href:!0});var qGr=s(JS);oZe=r(qGr,"MPNetTokenizerFast"),qGr.forEach(t),rZe=r(tL," (MPNet model)"),tL.forEach(t),tZe=i(C),As=n(C,"LI",{});var aL=s(As);Eee=n(aL,"STRONG",{});var NGr=s(Eee);aZe=r(NGr,"mt5"),NGr.forEach(t),nZe=r(aL," \u2014 "),YS=n(aL,"A",{href:!0});var jGr=s(YS);sZe=r(jGr,"MT5Tokenizer"),jGr.forEach(t),lZe=r(aL," or "),KS=n(aL,"A",{href:!0});var DGr=s(KS);iZe=r(DGr,"MT5TokenizerFast"),DGr.forEach(t),dZe=r(aL," (mT5 model)"),aL.forEach(t),cZe=i(C),ys=n(C,"LI",{});var nL=s(ys);Cee=n(nL,"STRONG",{});var GGr=s(Cee);fZe=r(GGr,"openai-gpt"),GGr.forEach(t),mZe=r(nL," \u2014 "),ZS=n(nL,"A",{href:!0});var OGr=s(ZS);gZe=r(OGr,"OpenAIGPTTokenizer"),OGr.forEach(t),hZe=r(nL," or "),eR=n(nL,"A",{href:!0});var VGr=s(eR);pZe=r(VGr,"OpenAIGPTTokenizerFast"),VGr.forEach(t),_Ze=r(nL," (OpenAI GPT model)"),nL.forEach(t),uZe=i(C),Ls=n(C,"LI",{});var sL=s(Ls);wee=n(sL,"STRONG",{});var XGr=s(wee);bZe=r(XGr,"pegasus"),XGr.forEach(t),vZe=r(sL," \u2014 "),oR=n(sL,"A",{href:!0});var zGr=s(oR);FZe=r(zGr,"PegasusTokenizer"),zGr.forEach(t),TZe=r(sL," or "),rR=n(sL,"A",{href:!0});var QGr=s(rR);MZe=r(QGr,"PegasusTokenizerFast"),QGr.forEach(t),EZe=r(sL," (Pegasus model)"),sL.forEach(t),CZe=i(C),th=n(C,"LI",{});var mMe=s(th);Aee=n(mMe,"STRONG",{});var WGr=s(Aee);wZe=r(WGr,"perceiver"),WGr.forEach(t),AZe=r(mMe," \u2014 "),tR=n(mMe,"A",{href:!0});var HGr=s(tR);yZe=r(HGr,"PerceiverTokenizer"),HGr.forEach(t),LZe=r(mMe," (Perceiver model)"),mMe.forEach(t),xZe=i(C),ah=n(C,"LI",{});var gMe=s(ah);yee=n(gMe,"STRONG",{});var UGr=s(yee);kZe=r(UGr,"phobert"),UGr.forEach(t),SZe=r(gMe," \u2014 "),aR=n(gMe,"A",{href:!0});var JGr=s(aR);RZe=r(JGr,"PhobertTokenizer"),JGr.forEach(t),BZe=r(gMe," (PhoBERT model)"),gMe.forEach(t),PZe=i(C),nh=n(C,"LI",{});var hMe=s(nh);Lee=n(hMe,"STRONG",{});var YGr=s(Lee);$Ze=r(YGr,"plbart"),YGr.forEach(t),IZe=r(hMe," \u2014 "),nR=n(hMe,"A",{href:!0});var KGr=s(nR);qZe=r(KGr,"PLBartTokenizer"),KGr.forEach(t),NZe=r(hMe," (PLBart model)"),hMe.forEach(t),jZe=i(C),sh=n(C,"LI",{});var pMe=s(sh);xee=n(pMe,"STRONG",{});var ZGr=s(xee);DZe=r(ZGr,"prophetnet"),ZGr.forEach(t),GZe=r(pMe," \u2014 "),sR=n(pMe,"A",{href:!0});var eOr=s(sR);OZe=r(eOr,"ProphetNetTokenizer"),eOr.forEach(t),VZe=r(pMe," (ProphetNet model)"),pMe.forEach(t),XZe=i(C),xs=n(C,"LI",{});var lL=s(xs);kee=n(lL,"STRONG",{});var oOr=s(kee);zZe=r(oOr,"qdqbert"),oOr.forEach(t),QZe=r(lL," \u2014 "),lR=n(lL,"A",{href:!0});var rOr=s(lR);WZe=r(rOr,"BertTokenizer"),rOr.forEach(t),HZe=r(lL," or "),iR=n(lL,"A",{href:!0});var tOr=s(iR);UZe=r(tOr,"BertTokenizerFast"),tOr.forEach(t),JZe=r(lL," (QDQBert model)"),lL.forEach(t),YZe=i(C),lh=n(C,"LI",{});var _Me=s(lh);See=n(_Me,"STRONG",{});var aOr=s(See);KZe=r(aOr,"rag"),aOr.forEach(t),ZZe=r(_Me," \u2014 "),dR=n(_Me,"A",{href:!0});var nOr=s(dR);eeo=r(nOr,"RagTokenizer"),nOr.forEach(t),oeo=r(_Me," (RAG model)"),_Me.forEach(t),reo=i(C),ks=n(C,"LI",{});var iL=s(ks);Ree=n(iL,"STRONG",{});var sOr=s(Ree);teo=r(sOr,"realm"),sOr.forEach(t),aeo=r(iL," \u2014 "),cR=n(iL,"A",{href:!0});var lOr=s(cR);neo=r(lOr,"RealmTokenizer"),lOr.forEach(t),seo=r(iL," or "),fR=n(iL,"A",{href:!0});var iOr=s(fR);leo=r(iOr,"RealmTokenizerFast"),iOr.forEach(t),ieo=r(iL," (Realm model)"),iL.forEach(t),deo=i(C),Ss=n(C,"LI",{});var dL=s(Ss);Bee=n(dL,"STRONG",{});var dOr=s(Bee);ceo=r(dOr,"reformer"),dOr.forEach(t),feo=r(dL," \u2014 "),mR=n(dL,"A",{href:!0});var cOr=s(mR);meo=r(cOr,"ReformerTokenizer"),cOr.forEach(t),geo=r(dL," or "),gR=n(dL,"A",{href:!0});var fOr=s(gR);heo=r(fOr,"ReformerTokenizerFast"),fOr.forEach(t),peo=r(dL," (Reformer model)"),dL.forEach(t),_eo=i(C),Rs=n(C,"LI",{});var cL=s(Rs);Pee=n(cL,"STRONG",{});var mOr=s(Pee);ueo=r(mOr,"rembert"),mOr.forEach(t),beo=r(cL," \u2014 "),hR=n(cL,"A",{href:!0});var gOr=s(hR);veo=r(gOr,"RemBertTokenizer"),gOr.forEach(t),Feo=r(cL," or "),pR=n(cL,"A",{href:!0});var hOr=s(pR);Teo=r(hOr,"RemBertTokenizerFast"),hOr.forEach(t),Meo=r(cL," (RemBERT model)"),cL.forEach(t),Eeo=i(C),Bs=n(C,"LI",{});var fL=s(Bs);$ee=n(fL,"STRONG",{});var pOr=s($ee);Ceo=r(pOr,"retribert"),pOr.forEach(t),weo=r(fL," \u2014 "),_R=n(fL,"A",{href:!0});var _Or=s(_R);Aeo=r(_Or,"RetriBertTokenizer"),_Or.forEach(t),yeo=r(fL," or "),uR=n(fL,"A",{href:!0});var uOr=s(uR);Leo=r(uOr,"RetriBertTokenizerFast"),uOr.forEach(t),xeo=r(fL," (RetriBERT model)"),fL.forEach(t),keo=i(C),Ps=n(C,"LI",{});var mL=s(Ps);Iee=n(mL,"STRONG",{});var bOr=s(Iee);Seo=r(bOr,"roberta"),bOr.forEach(t),Reo=r(mL," \u2014 "),bR=n(mL,"A",{href:!0});var vOr=s(bR);Beo=r(vOr,"RobertaTokenizer"),vOr.forEach(t),Peo=r(mL," or "),vR=n(mL,"A",{href:!0});var FOr=s(vR);$eo=r(FOr,"RobertaTokenizerFast"),FOr.forEach(t),Ieo=r(mL," (RoBERTa model)"),mL.forEach(t),qeo=i(C),$s=n(C,"LI",{});var gL=s($s);qee=n(gL,"STRONG",{});var TOr=s(qee);Neo=r(TOr,"roformer"),TOr.forEach(t),jeo=r(gL," \u2014 "),FR=n(gL,"A",{href:!0});var MOr=s(FR);Deo=r(MOr,"RoFormerTokenizer"),MOr.forEach(t),Geo=r(gL," or "),TR=n(gL,"A",{href:!0});var EOr=s(TR);Oeo=r(EOr,"RoFormerTokenizerFast"),EOr.forEach(t),Veo=r(gL," (RoFormer model)"),gL.forEach(t),Xeo=i(C),ih=n(C,"LI",{});var uMe=s(ih);Nee=n(uMe,"STRONG",{});var COr=s(Nee);zeo=r(COr,"speech_to_text"),COr.forEach(t),Qeo=r(uMe," \u2014 "),MR=n(uMe,"A",{href:!0});var wOr=s(MR);Weo=r(wOr,"Speech2TextTokenizer"),wOr.forEach(t),Heo=r(uMe," (Speech2Text model)"),uMe.forEach(t),Ueo=i(C),dh=n(C,"LI",{});var bMe=s(dh);jee=n(bMe,"STRONG",{});var AOr=s(jee);Jeo=r(AOr,"speech_to_text_2"),AOr.forEach(t),Yeo=r(bMe," \u2014 "),ER=n(bMe,"A",{href:!0});var yOr=s(ER);Keo=r(yOr,"Speech2Text2Tokenizer"),yOr.forEach(t),Zeo=r(bMe," (Speech2Text2 model)"),bMe.forEach(t),eoo=i(C),Is=n(C,"LI",{});var hL=s(Is);Dee=n(hL,"STRONG",{});var LOr=s(Dee);ooo=r(LOr,"splinter"),LOr.forEach(t),roo=r(hL," \u2014 "),CR=n(hL,"A",{href:!0});var xOr=s(CR);too=r(xOr,"SplinterTokenizer"),xOr.forEach(t),aoo=r(hL," or "),wR=n(hL,"A",{href:!0});var kOr=s(wR);noo=r(kOr,"SplinterTokenizerFast"),kOr.forEach(t),soo=r(hL," (Splinter model)"),hL.forEach(t),loo=i(C),qs=n(C,"LI",{});var pL=s(qs);Gee=n(pL,"STRONG",{});var SOr=s(Gee);ioo=r(SOr,"squeezebert"),SOr.forEach(t),doo=r(pL," \u2014 "),AR=n(pL,"A",{href:!0});var ROr=s(AR);coo=r(ROr,"SqueezeBertTokenizer"),ROr.forEach(t),foo=r(pL," or "),yR=n(pL,"A",{href:!0});var BOr=s(yR);moo=r(BOr,"SqueezeBertTokenizerFast"),BOr.forEach(t),goo=r(pL," (SqueezeBERT model)"),pL.forEach(t),hoo=i(C),Ns=n(C,"LI",{});var _L=s(Ns);Oee=n(_L,"STRONG",{});var POr=s(Oee);poo=r(POr,"t5"),POr.forEach(t),_oo=r(_L," \u2014 "),LR=n(_L,"A",{href:!0});var $Or=s(LR);uoo=r($Or,"T5Tokenizer"),$Or.forEach(t),boo=r(_L," or "),xR=n(_L,"A",{href:!0});var IOr=s(xR);voo=r(IOr,"T5TokenizerFast"),IOr.forEach(t),Foo=r(_L," (T5 model)"),_L.forEach(t),Too=i(C),ch=n(C,"LI",{});var vMe=s(ch);Vee=n(vMe,"STRONG",{});var qOr=s(Vee);Moo=r(qOr,"tapas"),qOr.forEach(t),Eoo=r(vMe," \u2014 "),kR=n(vMe,"A",{href:!0});var NOr=s(kR);Coo=r(NOr,"TapasTokenizer"),NOr.forEach(t),woo=r(vMe," (TAPAS model)"),vMe.forEach(t),Aoo=i(C),fh=n(C,"LI",{});var FMe=s(fh);Xee=n(FMe,"STRONG",{});var jOr=s(Xee);yoo=r(jOr,"tapex"),jOr.forEach(t),Loo=r(FMe," \u2014 "),SR=n(FMe,"A",{href:!0});var DOr=s(SR);xoo=r(DOr,"TapexTokenizer"),DOr.forEach(t),koo=r(FMe," (TAPEX model)"),FMe.forEach(t),Soo=i(C),mh=n(C,"LI",{});var TMe=s(mh);zee=n(TMe,"STRONG",{});var GOr=s(zee);Roo=r(GOr,"transfo-xl"),GOr.forEach(t),Boo=r(TMe," \u2014 "),RR=n(TMe,"A",{href:!0});var OOr=s(RR);Poo=r(OOr,"TransfoXLTokenizer"),OOr.forEach(t),$oo=r(TMe," (Transformer-XL model)"),TMe.forEach(t),Ioo=i(C),gh=n(C,"LI",{});var MMe=s(gh);Qee=n(MMe,"STRONG",{});var VOr=s(Qee);qoo=r(VOr,"wav2vec2"),VOr.forEach(t),Noo=r(MMe," \u2014 "),BR=n(MMe,"A",{href:!0});var XOr=s(BR);joo=r(XOr,"Wav2Vec2CTCTokenizer"),XOr.forEach(t),Doo=r(MMe," (Wav2Vec2 model)"),MMe.forEach(t),Goo=i(C),hh=n(C,"LI",{});var EMe=s(hh);Wee=n(EMe,"STRONG",{});var zOr=s(Wee);Ooo=r(zOr,"wav2vec2_phoneme"),zOr.forEach(t),Voo=r(EMe," \u2014 "),PR=n(EMe,"A",{href:!0});var QOr=s(PR);Xoo=r(QOr,"Wav2Vec2PhonemeCTCTokenizer"),QOr.forEach(t),zoo=r(EMe," (Wav2Vec2Phoneme model)"),EMe.forEach(t),Qoo=i(C),js=n(C,"LI",{});var uL=s(js);Hee=n(uL,"STRONG",{});var WOr=s(Hee);Woo=r(WOr,"xglm"),WOr.forEach(t),Hoo=r(uL," \u2014 "),$R=n(uL,"A",{href:!0});var HOr=s($R);Uoo=r(HOr,"XGLMTokenizer"),HOr.forEach(t),Joo=r(uL," or "),IR=n(uL,"A",{href:!0});var UOr=s(IR);Yoo=r(UOr,"XGLMTokenizerFast"),UOr.forEach(t),Koo=r(uL," (XGLM model)"),uL.forEach(t),Zoo=i(C),ph=n(C,"LI",{});var CMe=s(ph);Uee=n(CMe,"STRONG",{});var JOr=s(Uee);ero=r(JOr,"xlm"),JOr.forEach(t),oro=r(CMe," \u2014 "),qR=n(CMe,"A",{href:!0});var YOr=s(qR);rro=r(YOr,"XLMTokenizer"),YOr.forEach(t),tro=r(CMe," (XLM model)"),CMe.forEach(t),aro=i(C),_h=n(C,"LI",{});var wMe=s(_h);Jee=n(wMe,"STRONG",{});var KOr=s(Jee);nro=r(KOr,"xlm-prophetnet"),KOr.forEach(t),sro=r(wMe," \u2014 "),NR=n(wMe,"A",{href:!0});var ZOr=s(NR);lro=r(ZOr,"XLMProphetNetTokenizer"),ZOr.forEach(t),iro=r(wMe," (XLMProphetNet model)"),wMe.forEach(t),dro=i(C),Ds=n(C,"LI",{});var bL=s(Ds);Yee=n(bL,"STRONG",{});var eVr=s(Yee);cro=r(eVr,"xlm-roberta"),eVr.forEach(t),fro=r(bL," \u2014 "),jR=n(bL,"A",{href:!0});var oVr=s(jR);mro=r(oVr,"XLMRobertaTokenizer"),oVr.forEach(t),gro=r(bL," or "),DR=n(bL,"A",{href:!0});var rVr=s(DR);hro=r(rVr,"XLMRobertaTokenizerFast"),rVr.forEach(t),pro=r(bL," (XLM-RoBERTa model)"),bL.forEach(t),_ro=i(C),Gs=n(C,"LI",{});var vL=s(Gs);Kee=n(vL,"STRONG",{});var tVr=s(Kee);uro=r(tVr,"xlnet"),tVr.forEach(t),bro=r(vL," \u2014 "),GR=n(vL,"A",{href:!0});var aVr=s(GR);vro=r(aVr,"XLNetTokenizer"),aVr.forEach(t),Fro=r(vL," or "),OR=n(vL,"A",{href:!0});var nVr=s(OR);Tro=r(nVr,"XLNetTokenizerFast"),nVr.forEach(t),Mro=r(vL," (XLNet model)"),vL.forEach(t),C.forEach(t),Ero=i(ha),Zee=n(ha,"P",{});var sVr=s(Zee);Cro=r(sVr,"Examples:"),sVr.forEach(t),wro=i(ha),m(WE.$$.fragment,ha),ha.forEach(t),Aro=i(Qs),uh=n(Qs,"DIV",{class:!0});var JPe=s(uh);m(HE.$$.fragment,JPe),yro=i(JPe),eoe=n(JPe,"P",{});var lVr=s(eoe);Lro=r(lVr,"Register a new tokenizer in this mapping."),lVr.forEach(t),JPe.forEach(t),Qs.forEach(t),QRe=i(c),Ji=n(c,"H2",{class:!0});var YPe=s(Ji);bh=n(YPe,"A",{id:!0,class:!0,href:!0});var iVr=s(bh);ooe=n(iVr,"SPAN",{});var dVr=s(ooe);m(UE.$$.fragment,dVr),dVr.forEach(t),iVr.forEach(t),xro=i(YPe),roe=n(YPe,"SPAN",{});var cVr=s(roe);kro=r(cVr,"AutoFeatureExtractor"),cVr.forEach(t),YPe.forEach(t),WRe=i(c),Ho=n(c,"DIV",{class:!0});var Ws=s(Ho);m(JE.$$.fragment,Ws),Sro=i(Ws),YE=n(Ws,"P",{});var KPe=s(YE);Rro=r(KPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),VR=n(KPe,"A",{href:!0});var fVr=s(VR);Bro=r(fVr,"AutoFeatureExtractor.from_pretrained()"),fVr.forEach(t),Pro=r(KPe," class method."),KPe.forEach(t),$ro=i(Ws),KE=n(Ws,"P",{});var ZPe=s(KE);Iro=r(ZPe,"This class cannot be instantiated directly using "),toe=n(ZPe,"CODE",{});var mVr=s(toe);qro=r(mVr,"__init__()"),mVr.forEach(t),Nro=r(ZPe," (throws an error)."),ZPe.forEach(t),jro=i(Ws),$e=n(Ws,"DIV",{class:!0});var Nt=s($e);m(ZE.$$.fragment,Nt),Dro=i(Nt),aoe=n(Nt,"P",{});var gVr=s(aoe);Gro=r(gVr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),gVr.forEach(t),Oro=i(Nt),Va=n(Nt,"P",{});var S4=s(Va);Vro=r(S4,"The feature extractor class to instantiate is selected based on the "),noe=n(S4,"CODE",{});var hVr=s(noe);Xro=r(hVr,"model_type"),hVr.forEach(t),zro=r(S4,` property of the config object
(either passed as an argument or loaded from `),soe=n(S4,"CODE",{});var pVr=s(soe);Qro=r(pVr,"pretrained_model_name_or_path"),pVr.forEach(t),Wro=r(S4,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),loe=n(S4,"CODE",{});var _Vr=s(loe);Hro=r(_Vr,"pretrained_model_name_or_path"),_Vr.forEach(t),Uro=r(S4,":"),S4.forEach(t),Jro=i(Nt),ee=n(Nt,"UL",{});var ae=s(ee);vh=n(ae,"LI",{});var AMe=s(vh);ioe=n(AMe,"STRONG",{});var uVr=s(ioe);Yro=r(uVr,"beit"),uVr.forEach(t),Kro=r(AMe," \u2014 "),XR=n(AMe,"A",{href:!0});var bVr=s(XR);Zro=r(bVr,"BeitFeatureExtractor"),bVr.forEach(t),eto=r(AMe," (BEiT model)"),AMe.forEach(t),oto=i(ae),Fh=n(ae,"LI",{});var yMe=s(Fh);doe=n(yMe,"STRONG",{});var vVr=s(doe);rto=r(vVr,"clip"),vVr.forEach(t),tto=r(yMe," \u2014 "),zR=n(yMe,"A",{href:!0});var FVr=s(zR);ato=r(FVr,"CLIPFeatureExtractor"),FVr.forEach(t),nto=r(yMe," (CLIP model)"),yMe.forEach(t),sto=i(ae),Th=n(ae,"LI",{});var LMe=s(Th);coe=n(LMe,"STRONG",{});var TVr=s(coe);lto=r(TVr,"convnext"),TVr.forEach(t),ito=r(LMe," \u2014 "),QR=n(LMe,"A",{href:!0});var MVr=s(QR);dto=r(MVr,"ConvNextFeatureExtractor"),MVr.forEach(t),cto=r(LMe," (ConvNext model)"),LMe.forEach(t),fto=i(ae),Mh=n(ae,"LI",{});var xMe=s(Mh);foe=n(xMe,"STRONG",{});var EVr=s(foe);mto=r(EVr,"deit"),EVr.forEach(t),gto=r(xMe," \u2014 "),WR=n(xMe,"A",{href:!0});var CVr=s(WR);hto=r(CVr,"DeiTFeatureExtractor"),CVr.forEach(t),pto=r(xMe," (DeiT model)"),xMe.forEach(t),_to=i(ae),Eh=n(ae,"LI",{});var kMe=s(Eh);moe=n(kMe,"STRONG",{});var wVr=s(moe);uto=r(wVr,"detr"),wVr.forEach(t),bto=r(kMe," \u2014 "),HR=n(kMe,"A",{href:!0});var AVr=s(HR);vto=r(AVr,"DetrFeatureExtractor"),AVr.forEach(t),Fto=r(kMe," (DETR model)"),kMe.forEach(t),Tto=i(ae),Ch=n(ae,"LI",{});var SMe=s(Ch);goe=n(SMe,"STRONG",{});var yVr=s(goe);Mto=r(yVr,"hubert"),yVr.forEach(t),Eto=r(SMe," \u2014 "),UR=n(SMe,"A",{href:!0});var LVr=s(UR);Cto=r(LVr,"Wav2Vec2FeatureExtractor"),LVr.forEach(t),wto=r(SMe," (Hubert model)"),SMe.forEach(t),Ato=i(ae),wh=n(ae,"LI",{});var RMe=s(wh);hoe=n(RMe,"STRONG",{});var xVr=s(hoe);yto=r(xVr,"layoutlmv2"),xVr.forEach(t),Lto=r(RMe," \u2014 "),JR=n(RMe,"A",{href:!0});var kVr=s(JR);xto=r(kVr,"LayoutLMv2FeatureExtractor"),kVr.forEach(t),kto=r(RMe," (LayoutLMv2 model)"),RMe.forEach(t),Sto=i(ae),Ah=n(ae,"LI",{});var BMe=s(Ah);poe=n(BMe,"STRONG",{});var SVr=s(poe);Rto=r(SVr,"maskformer"),SVr.forEach(t),Bto=r(BMe," \u2014 "),YR=n(BMe,"A",{href:!0});var RVr=s(YR);Pto=r(RVr,"MaskFormerFeatureExtractor"),RVr.forEach(t),$to=r(BMe," (MaskFormer model)"),BMe.forEach(t),Ito=i(ae),yh=n(ae,"LI",{});var PMe=s(yh);_oe=n(PMe,"STRONG",{});var BVr=s(_oe);qto=r(BVr,"perceiver"),BVr.forEach(t),Nto=r(PMe," \u2014 "),KR=n(PMe,"A",{href:!0});var PVr=s(KR);jto=r(PVr,"PerceiverFeatureExtractor"),PVr.forEach(t),Dto=r(PMe," (Perceiver model)"),PMe.forEach(t),Gto=i(ae),Lh=n(ae,"LI",{});var $Me=s(Lh);uoe=n($Me,"STRONG",{});var $Vr=s(uoe);Oto=r($Vr,"poolformer"),$Vr.forEach(t),Vto=r($Me," \u2014 "),ZR=n($Me,"A",{href:!0});var IVr=s(ZR);Xto=r(IVr,"PoolFormerFeatureExtractor"),IVr.forEach(t),zto=r($Me," (PoolFormer model)"),$Me.forEach(t),Qto=i(ae),xh=n(ae,"LI",{});var IMe=s(xh);boe=n(IMe,"STRONG",{});var qVr=s(boe);Wto=r(qVr,"regnet"),qVr.forEach(t),Hto=r(IMe," \u2014 "),eB=n(IMe,"A",{href:!0});var NVr=s(eB);Uto=r(NVr,"ConvNextFeatureExtractor"),NVr.forEach(t),Jto=r(IMe," (RegNet model)"),IMe.forEach(t),Yto=i(ae),kh=n(ae,"LI",{});var qMe=s(kh);voe=n(qMe,"STRONG",{});var jVr=s(voe);Kto=r(jVr,"resnet"),jVr.forEach(t),Zto=r(qMe," \u2014 "),oB=n(qMe,"A",{href:!0});var DVr=s(oB);eao=r(DVr,"ConvNextFeatureExtractor"),DVr.forEach(t),oao=r(qMe," (ResNet model)"),qMe.forEach(t),rao=i(ae),Sh=n(ae,"LI",{});var NMe=s(Sh);Foe=n(NMe,"STRONG",{});var GVr=s(Foe);tao=r(GVr,"segformer"),GVr.forEach(t),aao=r(NMe," \u2014 "),rB=n(NMe,"A",{href:!0});var OVr=s(rB);nao=r(OVr,"SegformerFeatureExtractor"),OVr.forEach(t),sao=r(NMe," (SegFormer model)"),NMe.forEach(t),lao=i(ae),Rh=n(ae,"LI",{});var jMe=s(Rh);Toe=n(jMe,"STRONG",{});var VVr=s(Toe);iao=r(VVr,"speech_to_text"),VVr.forEach(t),dao=r(jMe," \u2014 "),tB=n(jMe,"A",{href:!0});var XVr=s(tB);cao=r(XVr,"Speech2TextFeatureExtractor"),XVr.forEach(t),fao=r(jMe," (Speech2Text model)"),jMe.forEach(t),mao=i(ae),Bh=n(ae,"LI",{});var DMe=s(Bh);Moe=n(DMe,"STRONG",{});var zVr=s(Moe);gao=r(zVr,"swin"),zVr.forEach(t),hao=r(DMe," \u2014 "),aB=n(DMe,"A",{href:!0});var QVr=s(aB);pao=r(QVr,"ViTFeatureExtractor"),QVr.forEach(t),_ao=r(DMe," (Swin model)"),DMe.forEach(t),uao=i(ae),Ph=n(ae,"LI",{});var GMe=s(Ph);Eoe=n(GMe,"STRONG",{});var WVr=s(Eoe);bao=r(WVr,"van"),WVr.forEach(t),vao=r(GMe," \u2014 "),nB=n(GMe,"A",{href:!0});var HVr=s(nB);Fao=r(HVr,"ConvNextFeatureExtractor"),HVr.forEach(t),Tao=r(GMe," (VAN model)"),GMe.forEach(t),Mao=i(ae),$h=n(ae,"LI",{});var OMe=s($h);Coe=n(OMe,"STRONG",{});var UVr=s(Coe);Eao=r(UVr,"vit"),UVr.forEach(t),Cao=r(OMe," \u2014 "),sB=n(OMe,"A",{href:!0});var JVr=s(sB);wao=r(JVr,"ViTFeatureExtractor"),JVr.forEach(t),Aao=r(OMe," (ViT model)"),OMe.forEach(t),yao=i(ae),Ih=n(ae,"LI",{});var VMe=s(Ih);woe=n(VMe,"STRONG",{});var YVr=s(woe);Lao=r(YVr,"vit_mae"),YVr.forEach(t),xao=r(VMe," \u2014 "),lB=n(VMe,"A",{href:!0});var KVr=s(lB);kao=r(KVr,"ViTFeatureExtractor"),KVr.forEach(t),Sao=r(VMe," (ViTMAE model)"),VMe.forEach(t),Rao=i(ae),qh=n(ae,"LI",{});var XMe=s(qh);Aoe=n(XMe,"STRONG",{});var ZVr=s(Aoe);Bao=r(ZVr,"wav2vec2"),ZVr.forEach(t),Pao=r(XMe," \u2014 "),iB=n(XMe,"A",{href:!0});var eXr=s(iB);$ao=r(eXr,"Wav2Vec2FeatureExtractor"),eXr.forEach(t),Iao=r(XMe," (Wav2Vec2 model)"),XMe.forEach(t),ae.forEach(t),qao=i(Nt),m(Nh.$$.fragment,Nt),Nao=i(Nt),yoe=n(Nt,"P",{});var oXr=s(yoe);jao=r(oXr,"Examples:"),oXr.forEach(t),Dao=i(Nt),m(e5.$$.fragment,Nt),Nt.forEach(t),Gao=i(Ws),jh=n(Ws,"DIV",{class:!0});var e$e=s(jh);m(o5.$$.fragment,e$e),Oao=i(e$e),Loe=n(e$e,"P",{});var rXr=s(Loe);Vao=r(rXr,"Register a new feature extractor for this class."),rXr.forEach(t),e$e.forEach(t),Ws.forEach(t),HRe=i(c),Yi=n(c,"H2",{class:!0});var o$e=s(Yi);Dh=n(o$e,"A",{id:!0,class:!0,href:!0});var tXr=s(Dh);xoe=n(tXr,"SPAN",{});var aXr=s(xoe);m(r5.$$.fragment,aXr),aXr.forEach(t),tXr.forEach(t),Xao=i(o$e),koe=n(o$e,"SPAN",{});var nXr=s(koe);zao=r(nXr,"AutoProcessor"),nXr.forEach(t),o$e.forEach(t),URe=i(c),Uo=n(c,"DIV",{class:!0});var Hs=s(Uo);m(t5.$$.fragment,Hs),Qao=i(Hs),a5=n(Hs,"P",{});var r$e=s(a5);Wao=r(r$e,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dB=n(r$e,"A",{href:!0});var sXr=s(dB);Hao=r(sXr,"AutoProcessor.from_pretrained()"),sXr.forEach(t),Uao=r(r$e," class method."),r$e.forEach(t),Jao=i(Hs),n5=n(Hs,"P",{});var t$e=s(n5);Yao=r(t$e,"This class cannot be instantiated directly using "),Soe=n(t$e,"CODE",{});var lXr=s(Soe);Kao=r(lXr,"__init__()"),lXr.forEach(t),Zao=r(t$e," (throws an error)."),t$e.forEach(t),eno=i(Hs),Ie=n(Hs,"DIV",{class:!0});var jt=s(Ie);m(s5.$$.fragment,jt),ono=i(jt),Roe=n(jt,"P",{});var iXr=s(Roe);rno=r(iXr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),iXr.forEach(t),tno=i(jt),Ki=n(jt,"P",{});var wU=s(Ki);ano=r(wU,"The processor class to instantiate is selected based on the "),Boe=n(wU,"CODE",{});var dXr=s(Boe);nno=r(dXr,"model_type"),dXr.forEach(t),sno=r(wU,` property of the config object (either
passed as an argument or loaded from `),Poe=n(wU,"CODE",{});var cXr=s(Poe);lno=r(cXr,"pretrained_model_name_or_path"),cXr.forEach(t),ino=r(wU," if possible):"),wU.forEach(t),dno=i(jt),ke=n(jt,"UL",{});var jo=s(ke);Gh=n(jo,"LI",{});var zMe=s(Gh);$oe=n(zMe,"STRONG",{});var fXr=s($oe);cno=r(fXr,"clip"),fXr.forEach(t),fno=r(zMe," \u2014 "),cB=n(zMe,"A",{href:!0});var mXr=s(cB);mno=r(mXr,"CLIPProcessor"),mXr.forEach(t),gno=r(zMe," (CLIP model)"),zMe.forEach(t),hno=i(jo),Oh=n(jo,"LI",{});var QMe=s(Oh);Ioe=n(QMe,"STRONG",{});var gXr=s(Ioe);pno=r(gXr,"layoutlmv2"),gXr.forEach(t),_no=r(QMe," \u2014 "),fB=n(QMe,"A",{href:!0});var hXr=s(fB);uno=r(hXr,"LayoutLMv2Processor"),hXr.forEach(t),bno=r(QMe," (LayoutLMv2 model)"),QMe.forEach(t),vno=i(jo),Vh=n(jo,"LI",{});var WMe=s(Vh);qoe=n(WMe,"STRONG",{});var pXr=s(qoe);Fno=r(pXr,"layoutxlm"),pXr.forEach(t),Tno=r(WMe," \u2014 "),mB=n(WMe,"A",{href:!0});var _Xr=s(mB);Mno=r(_Xr,"LayoutXLMProcessor"),_Xr.forEach(t),Eno=r(WMe," (LayoutXLM model)"),WMe.forEach(t),Cno=i(jo),Xh=n(jo,"LI",{});var HMe=s(Xh);Noe=n(HMe,"STRONG",{});var uXr=s(Noe);wno=r(uXr,"speech_to_text"),uXr.forEach(t),Ano=r(HMe," \u2014 "),gB=n(HMe,"A",{href:!0});var bXr=s(gB);yno=r(bXr,"Speech2TextProcessor"),bXr.forEach(t),Lno=r(HMe," (Speech2Text model)"),HMe.forEach(t),xno=i(jo),zh=n(jo,"LI",{});var UMe=s(zh);joe=n(UMe,"STRONG",{});var vXr=s(joe);kno=r(vXr,"speech_to_text_2"),vXr.forEach(t),Sno=r(UMe," \u2014 "),hB=n(UMe,"A",{href:!0});var FXr=s(hB);Rno=r(FXr,"Speech2Text2Processor"),FXr.forEach(t),Bno=r(UMe," (Speech2Text2 model)"),UMe.forEach(t),Pno=i(jo),Qh=n(jo,"LI",{});var JMe=s(Qh);Doe=n(JMe,"STRONG",{});var TXr=s(Doe);$no=r(TXr,"trocr"),TXr.forEach(t),Ino=r(JMe," \u2014 "),pB=n(JMe,"A",{href:!0});var MXr=s(pB);qno=r(MXr,"TrOCRProcessor"),MXr.forEach(t),Nno=r(JMe," (TrOCR model)"),JMe.forEach(t),jno=i(jo),Wh=n(jo,"LI",{});var YMe=s(Wh);Goe=n(YMe,"STRONG",{});var EXr=s(Goe);Dno=r(EXr,"vision-text-dual-encoder"),EXr.forEach(t),Gno=r(YMe," \u2014 "),_B=n(YMe,"A",{href:!0});var CXr=s(_B);Ono=r(CXr,"VisionTextDualEncoderProcessor"),CXr.forEach(t),Vno=r(YMe," (VisionTextDualEncoder model)"),YMe.forEach(t),Xno=i(jo),Hh=n(jo,"LI",{});var KMe=s(Hh);Ooe=n(KMe,"STRONG",{});var wXr=s(Ooe);zno=r(wXr,"wav2vec2"),wXr.forEach(t),Qno=r(KMe," \u2014 "),uB=n(KMe,"A",{href:!0});var AXr=s(uB);Wno=r(AXr,"Wav2Vec2Processor"),AXr.forEach(t),Hno=r(KMe," (Wav2Vec2 model)"),KMe.forEach(t),jo.forEach(t),Uno=i(jt),m(Uh.$$.fragment,jt),Jno=i(jt),Voe=n(jt,"P",{});var yXr=s(Voe);Yno=r(yXr,"Examples:"),yXr.forEach(t),Kno=i(jt),m(l5.$$.fragment,jt),jt.forEach(t),Zno=i(Hs),Jh=n(Hs,"DIV",{class:!0});var a$e=s(Jh);m(i5.$$.fragment,a$e),eso=i(a$e),Xoe=n(a$e,"P",{});var LXr=s(Xoe);oso=r(LXr,"Register a new processor for this class."),LXr.forEach(t),a$e.forEach(t),Hs.forEach(t),JRe=i(c),Zi=n(c,"H2",{class:!0});var n$e=s(Zi);Yh=n(n$e,"A",{id:!0,class:!0,href:!0});var xXr=s(Yh);zoe=n(xXr,"SPAN",{});var kXr=s(zoe);m(d5.$$.fragment,kXr),kXr.forEach(t),xXr.forEach(t),rso=i(n$e),Qoe=n(n$e,"SPAN",{});var SXr=s(Qoe);tso=r(SXr,"AutoModel"),SXr.forEach(t),n$e.forEach(t),YRe=i(c),Jo=n(c,"DIV",{class:!0});var Us=s(Jo);m(c5.$$.fragment,Us),aso=i(Us),ed=n(Us,"P",{});var AU=s(ed);nso=r(AU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bB=n(AU,"A",{href:!0});var RXr=s(bB);sso=r(RXr,"from_pretrained()"),RXr.forEach(t),lso=r(AU," class method or the "),vB=n(AU,"A",{href:!0});var BXr=s(vB);iso=r(BXr,"from_config()"),BXr.forEach(t),dso=r(AU,` class
method.`),AU.forEach(t),cso=i(Us),f5=n(Us,"P",{});var s$e=s(f5);fso=r(s$e,"This class cannot be instantiated directly using "),Woe=n(s$e,"CODE",{});var PXr=s(Woe);mso=r(PXr,"__init__()"),PXr.forEach(t),gso=r(s$e," (throws an error)."),s$e.forEach(t),hso=i(Us),Xr=n(Us,"DIV",{class:!0});var Js=s(Xr);m(m5.$$.fragment,Js),pso=i(Js),Hoe=n(Js,"P",{});var $Xr=s(Hoe);_so=r($Xr,"Instantiates one of the base model classes of the library from a configuration."),$Xr.forEach(t),uso=i(Js),od=n(Js,"P",{});var yU=s(od);bso=r(yU,`Note:
Loading a model from its configuration file does `),Uoe=n(yU,"STRONG",{});var IXr=s(Uoe);vso=r(IXr,"not"),IXr.forEach(t),Fso=r(yU,` load the model weights. It only affects the
model\u2019s configuration. Use `),FB=n(yU,"A",{href:!0});var qXr=s(FB);Tso=r(qXr,"from_pretrained()"),qXr.forEach(t),Mso=r(yU," to load the model weights."),yU.forEach(t),Eso=i(Js),Joe=n(Js,"P",{});var NXr=s(Joe);Cso=r(NXr,"Examples:"),NXr.forEach(t),wso=i(Js),m(g5.$$.fragment,Js),Js.forEach(t),Aso=i(Us),qe=n(Us,"DIV",{class:!0});var Dt=s(qe);m(h5.$$.fragment,Dt),yso=i(Dt),Yoe=n(Dt,"P",{});var jXr=s(Yoe);Lso=r(jXr,"Instantiate one of the base model classes of the library from a pretrained model."),jXr.forEach(t),xso=i(Dt),Xa=n(Dt,"P",{});var R4=s(Xa);kso=r(R4,"The model class to instantiate is selected based on the "),Koe=n(R4,"CODE",{});var DXr=s(Koe);Sso=r(DXr,"model_type"),DXr.forEach(t),Rso=r(R4,` property of the config object (either
passed as an argument or loaded from `),Zoe=n(R4,"CODE",{});var GXr=s(Zoe);Bso=r(GXr,"pretrained_model_name_or_path"),GXr.forEach(t),Pso=r(R4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ere=n(R4,"CODE",{});var OXr=s(ere);$so=r(OXr,"pretrained_model_name_or_path"),OXr.forEach(t),Iso=r(R4,":"),R4.forEach(t),qso=i(Dt),T=n(Dt,"UL",{});var M=s(T);Kh=n(M,"LI",{});var ZMe=s(Kh);ore=n(ZMe,"STRONG",{});var VXr=s(ore);Nso=r(VXr,"albert"),VXr.forEach(t),jso=r(ZMe," \u2014 "),TB=n(ZMe,"A",{href:!0});var XXr=s(TB);Dso=r(XXr,"AlbertModel"),XXr.forEach(t),Gso=r(ZMe," (ALBERT model)"),ZMe.forEach(t),Oso=i(M),Zh=n(M,"LI",{});var e4e=s(Zh);rre=n(e4e,"STRONG",{});var zXr=s(rre);Vso=r(zXr,"bart"),zXr.forEach(t),Xso=r(e4e," \u2014 "),MB=n(e4e,"A",{href:!0});var QXr=s(MB);zso=r(QXr,"BartModel"),QXr.forEach(t),Qso=r(e4e," (BART model)"),e4e.forEach(t),Wso=i(M),ep=n(M,"LI",{});var o4e=s(ep);tre=n(o4e,"STRONG",{});var WXr=s(tre);Hso=r(WXr,"beit"),WXr.forEach(t),Uso=r(o4e," \u2014 "),EB=n(o4e,"A",{href:!0});var HXr=s(EB);Jso=r(HXr,"BeitModel"),HXr.forEach(t),Yso=r(o4e," (BEiT model)"),o4e.forEach(t),Kso=i(M),op=n(M,"LI",{});var r4e=s(op);are=n(r4e,"STRONG",{});var UXr=s(are);Zso=r(UXr,"bert"),UXr.forEach(t),elo=r(r4e," \u2014 "),CB=n(r4e,"A",{href:!0});var JXr=s(CB);olo=r(JXr,"BertModel"),JXr.forEach(t),rlo=r(r4e," (BERT model)"),r4e.forEach(t),tlo=i(M),rp=n(M,"LI",{});var t4e=s(rp);nre=n(t4e,"STRONG",{});var YXr=s(nre);alo=r(YXr,"bert-generation"),YXr.forEach(t),nlo=r(t4e," \u2014 "),wB=n(t4e,"A",{href:!0});var KXr=s(wB);slo=r(KXr,"BertGenerationEncoder"),KXr.forEach(t),llo=r(t4e," (Bert Generation model)"),t4e.forEach(t),ilo=i(M),tp=n(M,"LI",{});var a4e=s(tp);sre=n(a4e,"STRONG",{});var ZXr=s(sre);dlo=r(ZXr,"big_bird"),ZXr.forEach(t),clo=r(a4e," \u2014 "),AB=n(a4e,"A",{href:!0});var ezr=s(AB);flo=r(ezr,"BigBirdModel"),ezr.forEach(t),mlo=r(a4e," (BigBird model)"),a4e.forEach(t),glo=i(M),ap=n(M,"LI",{});var n4e=s(ap);lre=n(n4e,"STRONG",{});var ozr=s(lre);hlo=r(ozr,"bigbird_pegasus"),ozr.forEach(t),plo=r(n4e," \u2014 "),yB=n(n4e,"A",{href:!0});var rzr=s(yB);_lo=r(rzr,"BigBirdPegasusModel"),rzr.forEach(t),ulo=r(n4e," (BigBirdPegasus model)"),n4e.forEach(t),blo=i(M),np=n(M,"LI",{});var s4e=s(np);ire=n(s4e,"STRONG",{});var tzr=s(ire);vlo=r(tzr,"blenderbot"),tzr.forEach(t),Flo=r(s4e," \u2014 "),LB=n(s4e,"A",{href:!0});var azr=s(LB);Tlo=r(azr,"BlenderbotModel"),azr.forEach(t),Mlo=r(s4e," (Blenderbot model)"),s4e.forEach(t),Elo=i(M),sp=n(M,"LI",{});var l4e=s(sp);dre=n(l4e,"STRONG",{});var nzr=s(dre);Clo=r(nzr,"blenderbot-small"),nzr.forEach(t),wlo=r(l4e," \u2014 "),xB=n(l4e,"A",{href:!0});var szr=s(xB);Alo=r(szr,"BlenderbotSmallModel"),szr.forEach(t),ylo=r(l4e," (BlenderbotSmall model)"),l4e.forEach(t),Llo=i(M),lp=n(M,"LI",{});var i4e=s(lp);cre=n(i4e,"STRONG",{});var lzr=s(cre);xlo=r(lzr,"camembert"),lzr.forEach(t),klo=r(i4e," \u2014 "),kB=n(i4e,"A",{href:!0});var izr=s(kB);Slo=r(izr,"CamembertModel"),izr.forEach(t),Rlo=r(i4e," (CamemBERT model)"),i4e.forEach(t),Blo=i(M),ip=n(M,"LI",{});var d4e=s(ip);fre=n(d4e,"STRONG",{});var dzr=s(fre);Plo=r(dzr,"canine"),dzr.forEach(t),$lo=r(d4e," \u2014 "),SB=n(d4e,"A",{href:!0});var czr=s(SB);Ilo=r(czr,"CanineModel"),czr.forEach(t),qlo=r(d4e," (Canine model)"),d4e.forEach(t),Nlo=i(M),dp=n(M,"LI",{});var c4e=s(dp);mre=n(c4e,"STRONG",{});var fzr=s(mre);jlo=r(fzr,"clip"),fzr.forEach(t),Dlo=r(c4e," \u2014 "),RB=n(c4e,"A",{href:!0});var mzr=s(RB);Glo=r(mzr,"CLIPModel"),mzr.forEach(t),Olo=r(c4e," (CLIP model)"),c4e.forEach(t),Vlo=i(M),cp=n(M,"LI",{});var f4e=s(cp);gre=n(f4e,"STRONG",{});var gzr=s(gre);Xlo=r(gzr,"convbert"),gzr.forEach(t),zlo=r(f4e," \u2014 "),BB=n(f4e,"A",{href:!0});var hzr=s(BB);Qlo=r(hzr,"ConvBertModel"),hzr.forEach(t),Wlo=r(f4e," (ConvBERT model)"),f4e.forEach(t),Hlo=i(M),fp=n(M,"LI",{});var m4e=s(fp);hre=n(m4e,"STRONG",{});var pzr=s(hre);Ulo=r(pzr,"convnext"),pzr.forEach(t),Jlo=r(m4e," \u2014 "),PB=n(m4e,"A",{href:!0});var _zr=s(PB);Ylo=r(_zr,"ConvNextModel"),_zr.forEach(t),Klo=r(m4e," (ConvNext model)"),m4e.forEach(t),Zlo=i(M),mp=n(M,"LI",{});var g4e=s(mp);pre=n(g4e,"STRONG",{});var uzr=s(pre);eio=r(uzr,"ctrl"),uzr.forEach(t),oio=r(g4e," \u2014 "),$B=n(g4e,"A",{href:!0});var bzr=s($B);rio=r(bzr,"CTRLModel"),bzr.forEach(t),tio=r(g4e," (CTRL model)"),g4e.forEach(t),aio=i(M),gp=n(M,"LI",{});var h4e=s(gp);_re=n(h4e,"STRONG",{});var vzr=s(_re);nio=r(vzr,"data2vec-audio"),vzr.forEach(t),sio=r(h4e," \u2014 "),IB=n(h4e,"A",{href:!0});var Fzr=s(IB);lio=r(Fzr,"Data2VecAudioModel"),Fzr.forEach(t),iio=r(h4e," (Data2VecAudio model)"),h4e.forEach(t),dio=i(M),hp=n(M,"LI",{});var p4e=s(hp);ure=n(p4e,"STRONG",{});var Tzr=s(ure);cio=r(Tzr,"data2vec-text"),Tzr.forEach(t),fio=r(p4e," \u2014 "),qB=n(p4e,"A",{href:!0});var Mzr=s(qB);mio=r(Mzr,"Data2VecTextModel"),Mzr.forEach(t),gio=r(p4e," (Data2VecText model)"),p4e.forEach(t),hio=i(M),pp=n(M,"LI",{});var _4e=s(pp);bre=n(_4e,"STRONG",{});var Ezr=s(bre);pio=r(Ezr,"data2vec-vision"),Ezr.forEach(t),_io=r(_4e," \u2014 "),NB=n(_4e,"A",{href:!0});var Czr=s(NB);uio=r(Czr,"Data2VecVisionModel"),Czr.forEach(t),bio=r(_4e," (Data2VecVision model)"),_4e.forEach(t),vio=i(M),_p=n(M,"LI",{});var u4e=s(_p);vre=n(u4e,"STRONG",{});var wzr=s(vre);Fio=r(wzr,"deberta"),wzr.forEach(t),Tio=r(u4e," \u2014 "),jB=n(u4e,"A",{href:!0});var Azr=s(jB);Mio=r(Azr,"DebertaModel"),Azr.forEach(t),Eio=r(u4e," (DeBERTa model)"),u4e.forEach(t),Cio=i(M),up=n(M,"LI",{});var b4e=s(up);Fre=n(b4e,"STRONG",{});var yzr=s(Fre);wio=r(yzr,"deberta-v2"),yzr.forEach(t),Aio=r(b4e," \u2014 "),DB=n(b4e,"A",{href:!0});var Lzr=s(DB);yio=r(Lzr,"DebertaV2Model"),Lzr.forEach(t),Lio=r(b4e," (DeBERTa-v2 model)"),b4e.forEach(t),xio=i(M),bp=n(M,"LI",{});var v4e=s(bp);Tre=n(v4e,"STRONG",{});var xzr=s(Tre);kio=r(xzr,"decision_transformer"),xzr.forEach(t),Sio=r(v4e," \u2014 "),GB=n(v4e,"A",{href:!0});var kzr=s(GB);Rio=r(kzr,"DecisionTransformerModel"),kzr.forEach(t),Bio=r(v4e," (Decision Transformer model)"),v4e.forEach(t),Pio=i(M),vp=n(M,"LI",{});var F4e=s(vp);Mre=n(F4e,"STRONG",{});var Szr=s(Mre);$io=r(Szr,"deit"),Szr.forEach(t),Iio=r(F4e," \u2014 "),OB=n(F4e,"A",{href:!0});var Rzr=s(OB);qio=r(Rzr,"DeiTModel"),Rzr.forEach(t),Nio=r(F4e," (DeiT model)"),F4e.forEach(t),jio=i(M),Fp=n(M,"LI",{});var T4e=s(Fp);Ere=n(T4e,"STRONG",{});var Bzr=s(Ere);Dio=r(Bzr,"detr"),Bzr.forEach(t),Gio=r(T4e," \u2014 "),VB=n(T4e,"A",{href:!0});var Pzr=s(VB);Oio=r(Pzr,"DetrModel"),Pzr.forEach(t),Vio=r(T4e," (DETR model)"),T4e.forEach(t),Xio=i(M),Tp=n(M,"LI",{});var M4e=s(Tp);Cre=n(M4e,"STRONG",{});var $zr=s(Cre);zio=r($zr,"distilbert"),$zr.forEach(t),Qio=r(M4e," \u2014 "),XB=n(M4e,"A",{href:!0});var Izr=s(XB);Wio=r(Izr,"DistilBertModel"),Izr.forEach(t),Hio=r(M4e," (DistilBERT model)"),M4e.forEach(t),Uio=i(M),Mp=n(M,"LI",{});var E4e=s(Mp);wre=n(E4e,"STRONG",{});var qzr=s(wre);Jio=r(qzr,"dpr"),qzr.forEach(t),Yio=r(E4e," \u2014 "),zB=n(E4e,"A",{href:!0});var Nzr=s(zB);Kio=r(Nzr,"DPRQuestionEncoder"),Nzr.forEach(t),Zio=r(E4e," (DPR model)"),E4e.forEach(t),edo=i(M),Ep=n(M,"LI",{});var C4e=s(Ep);Are=n(C4e,"STRONG",{});var jzr=s(Are);odo=r(jzr,"dpt"),jzr.forEach(t),rdo=r(C4e," \u2014 "),QB=n(C4e,"A",{href:!0});var Dzr=s(QB);tdo=r(Dzr,"DPTModel"),Dzr.forEach(t),ado=r(C4e," (DPT model)"),C4e.forEach(t),ndo=i(M),Cp=n(M,"LI",{});var w4e=s(Cp);yre=n(w4e,"STRONG",{});var Gzr=s(yre);sdo=r(Gzr,"electra"),Gzr.forEach(t),ldo=r(w4e," \u2014 "),WB=n(w4e,"A",{href:!0});var Ozr=s(WB);ido=r(Ozr,"ElectraModel"),Ozr.forEach(t),ddo=r(w4e," (ELECTRA model)"),w4e.forEach(t),cdo=i(M),wp=n(M,"LI",{});var A4e=s(wp);Lre=n(A4e,"STRONG",{});var Vzr=s(Lre);fdo=r(Vzr,"flaubert"),Vzr.forEach(t),mdo=r(A4e," \u2014 "),HB=n(A4e,"A",{href:!0});var Xzr=s(HB);gdo=r(Xzr,"FlaubertModel"),Xzr.forEach(t),hdo=r(A4e," (FlauBERT model)"),A4e.forEach(t),pdo=i(M),Ap=n(M,"LI",{});var y4e=s(Ap);xre=n(y4e,"STRONG",{});var zzr=s(xre);_do=r(zzr,"fnet"),zzr.forEach(t),udo=r(y4e," \u2014 "),UB=n(y4e,"A",{href:!0});var Qzr=s(UB);bdo=r(Qzr,"FNetModel"),Qzr.forEach(t),vdo=r(y4e," (FNet model)"),y4e.forEach(t),Fdo=i(M),yp=n(M,"LI",{});var L4e=s(yp);kre=n(L4e,"STRONG",{});var Wzr=s(kre);Tdo=r(Wzr,"fsmt"),Wzr.forEach(t),Mdo=r(L4e," \u2014 "),JB=n(L4e,"A",{href:!0});var Hzr=s(JB);Edo=r(Hzr,"FSMTModel"),Hzr.forEach(t),Cdo=r(L4e," (FairSeq Machine-Translation model)"),L4e.forEach(t),wdo=i(M),Os=n(M,"LI",{});var FL=s(Os);Sre=n(FL,"STRONG",{});var Uzr=s(Sre);Ado=r(Uzr,"funnel"),Uzr.forEach(t),ydo=r(FL," \u2014 "),YB=n(FL,"A",{href:!0});var Jzr=s(YB);Ldo=r(Jzr,"FunnelModel"),Jzr.forEach(t),xdo=r(FL," or "),KB=n(FL,"A",{href:!0});var Yzr=s(KB);kdo=r(Yzr,"FunnelBaseModel"),Yzr.forEach(t),Sdo=r(FL," (Funnel Transformer model)"),FL.forEach(t),Rdo=i(M),Lp=n(M,"LI",{});var x4e=s(Lp);Rre=n(x4e,"STRONG",{});var Kzr=s(Rre);Bdo=r(Kzr,"glpn"),Kzr.forEach(t),Pdo=r(x4e," \u2014 "),ZB=n(x4e,"A",{href:!0});var Zzr=s(ZB);$do=r(Zzr,"GLPNModel"),Zzr.forEach(t),Ido=r(x4e," (GLPN model)"),x4e.forEach(t),qdo=i(M),xp=n(M,"LI",{});var k4e=s(xp);Bre=n(k4e,"STRONG",{});var eQr=s(Bre);Ndo=r(eQr,"gpt2"),eQr.forEach(t),jdo=r(k4e," \u2014 "),eP=n(k4e,"A",{href:!0});var oQr=s(eP);Ddo=r(oQr,"GPT2Model"),oQr.forEach(t),Gdo=r(k4e," (OpenAI GPT-2 model)"),k4e.forEach(t),Odo=i(M),kp=n(M,"LI",{});var S4e=s(kp);Pre=n(S4e,"STRONG",{});var rQr=s(Pre);Vdo=r(rQr,"gpt_neo"),rQr.forEach(t),Xdo=r(S4e," \u2014 "),oP=n(S4e,"A",{href:!0});var tQr=s(oP);zdo=r(tQr,"GPTNeoModel"),tQr.forEach(t),Qdo=r(S4e," (GPT Neo model)"),S4e.forEach(t),Wdo=i(M),Sp=n(M,"LI",{});var R4e=s(Sp);$re=n(R4e,"STRONG",{});var aQr=s($re);Hdo=r(aQr,"gptj"),aQr.forEach(t),Udo=r(R4e," \u2014 "),rP=n(R4e,"A",{href:!0});var nQr=s(rP);Jdo=r(nQr,"GPTJModel"),nQr.forEach(t),Ydo=r(R4e," (GPT-J model)"),R4e.forEach(t),Kdo=i(M),Rp=n(M,"LI",{});var B4e=s(Rp);Ire=n(B4e,"STRONG",{});var sQr=s(Ire);Zdo=r(sQr,"hubert"),sQr.forEach(t),eco=r(B4e," \u2014 "),tP=n(B4e,"A",{href:!0});var lQr=s(tP);oco=r(lQr,"HubertModel"),lQr.forEach(t),rco=r(B4e," (Hubert model)"),B4e.forEach(t),tco=i(M),Bp=n(M,"LI",{});var P4e=s(Bp);qre=n(P4e,"STRONG",{});var iQr=s(qre);aco=r(iQr,"ibert"),iQr.forEach(t),nco=r(P4e," \u2014 "),aP=n(P4e,"A",{href:!0});var dQr=s(aP);sco=r(dQr,"IBertModel"),dQr.forEach(t),lco=r(P4e," (I-BERT model)"),P4e.forEach(t),ico=i(M),Pp=n(M,"LI",{});var $4e=s(Pp);Nre=n($4e,"STRONG",{});var cQr=s(Nre);dco=r(cQr,"imagegpt"),cQr.forEach(t),cco=r($4e," \u2014 "),nP=n($4e,"A",{href:!0});var fQr=s(nP);fco=r(fQr,"ImageGPTModel"),fQr.forEach(t),mco=r($4e," (ImageGPT model)"),$4e.forEach(t),gco=i(M),$p=n(M,"LI",{});var I4e=s($p);jre=n(I4e,"STRONG",{});var mQr=s(jre);hco=r(mQr,"layoutlm"),mQr.forEach(t),pco=r(I4e," \u2014 "),sP=n(I4e,"A",{href:!0});var gQr=s(sP);_co=r(gQr,"LayoutLMModel"),gQr.forEach(t),uco=r(I4e," (LayoutLM model)"),I4e.forEach(t),bco=i(M),Ip=n(M,"LI",{});var q4e=s(Ip);Dre=n(q4e,"STRONG",{});var hQr=s(Dre);vco=r(hQr,"layoutlmv2"),hQr.forEach(t),Fco=r(q4e," \u2014 "),lP=n(q4e,"A",{href:!0});var pQr=s(lP);Tco=r(pQr,"LayoutLMv2Model"),pQr.forEach(t),Mco=r(q4e," (LayoutLMv2 model)"),q4e.forEach(t),Eco=i(M),qp=n(M,"LI",{});var N4e=s(qp);Gre=n(N4e,"STRONG",{});var _Qr=s(Gre);Cco=r(_Qr,"led"),_Qr.forEach(t),wco=r(N4e," \u2014 "),iP=n(N4e,"A",{href:!0});var uQr=s(iP);Aco=r(uQr,"LEDModel"),uQr.forEach(t),yco=r(N4e," (LED model)"),N4e.forEach(t),Lco=i(M),Np=n(M,"LI",{});var j4e=s(Np);Ore=n(j4e,"STRONG",{});var bQr=s(Ore);xco=r(bQr,"longformer"),bQr.forEach(t),kco=r(j4e," \u2014 "),dP=n(j4e,"A",{href:!0});var vQr=s(dP);Sco=r(vQr,"LongformerModel"),vQr.forEach(t),Rco=r(j4e," (Longformer model)"),j4e.forEach(t),Bco=i(M),jp=n(M,"LI",{});var D4e=s(jp);Vre=n(D4e,"STRONG",{});var FQr=s(Vre);Pco=r(FQr,"luke"),FQr.forEach(t),$co=r(D4e," \u2014 "),cP=n(D4e,"A",{href:!0});var TQr=s(cP);Ico=r(TQr,"LukeModel"),TQr.forEach(t),qco=r(D4e," (LUKE model)"),D4e.forEach(t),Nco=i(M),Dp=n(M,"LI",{});var G4e=s(Dp);Xre=n(G4e,"STRONG",{});var MQr=s(Xre);jco=r(MQr,"lxmert"),MQr.forEach(t),Dco=r(G4e," \u2014 "),fP=n(G4e,"A",{href:!0});var EQr=s(fP);Gco=r(EQr,"LxmertModel"),EQr.forEach(t),Oco=r(G4e," (LXMERT model)"),G4e.forEach(t),Vco=i(M),Gp=n(M,"LI",{});var O4e=s(Gp);zre=n(O4e,"STRONG",{});var CQr=s(zre);Xco=r(CQr,"m2m_100"),CQr.forEach(t),zco=r(O4e," \u2014 "),mP=n(O4e,"A",{href:!0});var wQr=s(mP);Qco=r(wQr,"M2M100Model"),wQr.forEach(t),Wco=r(O4e," (M2M100 model)"),O4e.forEach(t),Hco=i(M),Op=n(M,"LI",{});var V4e=s(Op);Qre=n(V4e,"STRONG",{});var AQr=s(Qre);Uco=r(AQr,"marian"),AQr.forEach(t),Jco=r(V4e," \u2014 "),gP=n(V4e,"A",{href:!0});var yQr=s(gP);Yco=r(yQr,"MarianModel"),yQr.forEach(t),Kco=r(V4e," (Marian model)"),V4e.forEach(t),Zco=i(M),Vp=n(M,"LI",{});var X4e=s(Vp);Wre=n(X4e,"STRONG",{});var LQr=s(Wre);efo=r(LQr,"maskformer"),LQr.forEach(t),ofo=r(X4e," \u2014 "),hP=n(X4e,"A",{href:!0});var xQr=s(hP);rfo=r(xQr,"MaskFormerModel"),xQr.forEach(t),tfo=r(X4e," (MaskFormer model)"),X4e.forEach(t),afo=i(M),Xp=n(M,"LI",{});var z4e=s(Xp);Hre=n(z4e,"STRONG",{});var kQr=s(Hre);nfo=r(kQr,"mbart"),kQr.forEach(t),sfo=r(z4e," \u2014 "),pP=n(z4e,"A",{href:!0});var SQr=s(pP);lfo=r(SQr,"MBartModel"),SQr.forEach(t),ifo=r(z4e," (mBART model)"),z4e.forEach(t),dfo=i(M),zp=n(M,"LI",{});var Q4e=s(zp);Ure=n(Q4e,"STRONG",{});var RQr=s(Ure);cfo=r(RQr,"megatron-bert"),RQr.forEach(t),ffo=r(Q4e," \u2014 "),_P=n(Q4e,"A",{href:!0});var BQr=s(_P);mfo=r(BQr,"MegatronBertModel"),BQr.forEach(t),gfo=r(Q4e," (MegatronBert model)"),Q4e.forEach(t),hfo=i(M),Qp=n(M,"LI",{});var W4e=s(Qp);Jre=n(W4e,"STRONG",{});var PQr=s(Jre);pfo=r(PQr,"mobilebert"),PQr.forEach(t),_fo=r(W4e," \u2014 "),uP=n(W4e,"A",{href:!0});var $Qr=s(uP);ufo=r($Qr,"MobileBertModel"),$Qr.forEach(t),bfo=r(W4e," (MobileBERT model)"),W4e.forEach(t),vfo=i(M),Wp=n(M,"LI",{});var H4e=s(Wp);Yre=n(H4e,"STRONG",{});var IQr=s(Yre);Ffo=r(IQr,"mpnet"),IQr.forEach(t),Tfo=r(H4e," \u2014 "),bP=n(H4e,"A",{href:!0});var qQr=s(bP);Mfo=r(qQr,"MPNetModel"),qQr.forEach(t),Efo=r(H4e," (MPNet model)"),H4e.forEach(t),Cfo=i(M),Hp=n(M,"LI",{});var U4e=s(Hp);Kre=n(U4e,"STRONG",{});var NQr=s(Kre);wfo=r(NQr,"mt5"),NQr.forEach(t),Afo=r(U4e," \u2014 "),vP=n(U4e,"A",{href:!0});var jQr=s(vP);yfo=r(jQr,"MT5Model"),jQr.forEach(t),Lfo=r(U4e," (mT5 model)"),U4e.forEach(t),xfo=i(M),Up=n(M,"LI",{});var J4e=s(Up);Zre=n(J4e,"STRONG",{});var DQr=s(Zre);kfo=r(DQr,"nystromformer"),DQr.forEach(t),Sfo=r(J4e," \u2014 "),FP=n(J4e,"A",{href:!0});var GQr=s(FP);Rfo=r(GQr,"NystromformerModel"),GQr.forEach(t),Bfo=r(J4e," (Nystromformer model)"),J4e.forEach(t),Pfo=i(M),Jp=n(M,"LI",{});var Y4e=s(Jp);ete=n(Y4e,"STRONG",{});var OQr=s(ete);$fo=r(OQr,"openai-gpt"),OQr.forEach(t),Ifo=r(Y4e," \u2014 "),TP=n(Y4e,"A",{href:!0});var VQr=s(TP);qfo=r(VQr,"OpenAIGPTModel"),VQr.forEach(t),Nfo=r(Y4e," (OpenAI GPT model)"),Y4e.forEach(t),jfo=i(M),Yp=n(M,"LI",{});var K4e=s(Yp);ote=n(K4e,"STRONG",{});var XQr=s(ote);Dfo=r(XQr,"pegasus"),XQr.forEach(t),Gfo=r(K4e," \u2014 "),MP=n(K4e,"A",{href:!0});var zQr=s(MP);Ofo=r(zQr,"PegasusModel"),zQr.forEach(t),Vfo=r(K4e," (Pegasus model)"),K4e.forEach(t),Xfo=i(M),Kp=n(M,"LI",{});var Z4e=s(Kp);rte=n(Z4e,"STRONG",{});var QQr=s(rte);zfo=r(QQr,"perceiver"),QQr.forEach(t),Qfo=r(Z4e," \u2014 "),EP=n(Z4e,"A",{href:!0});var WQr=s(EP);Wfo=r(WQr,"PerceiverModel"),WQr.forEach(t),Hfo=r(Z4e," (Perceiver model)"),Z4e.forEach(t),Ufo=i(M),Zp=n(M,"LI",{});var eEe=s(Zp);tte=n(eEe,"STRONG",{});var HQr=s(tte);Jfo=r(HQr,"plbart"),HQr.forEach(t),Yfo=r(eEe," \u2014 "),CP=n(eEe,"A",{href:!0});var UQr=s(CP);Kfo=r(UQr,"PLBartModel"),UQr.forEach(t),Zfo=r(eEe," (PLBart model)"),eEe.forEach(t),emo=i(M),e_=n(M,"LI",{});var oEe=s(e_);ate=n(oEe,"STRONG",{});var JQr=s(ate);omo=r(JQr,"poolformer"),JQr.forEach(t),rmo=r(oEe," \u2014 "),wP=n(oEe,"A",{href:!0});var YQr=s(wP);tmo=r(YQr,"PoolFormerModel"),YQr.forEach(t),amo=r(oEe," (PoolFormer model)"),oEe.forEach(t),nmo=i(M),o_=n(M,"LI",{});var rEe=s(o_);nte=n(rEe,"STRONG",{});var KQr=s(nte);smo=r(KQr,"prophetnet"),KQr.forEach(t),lmo=r(rEe," \u2014 "),AP=n(rEe,"A",{href:!0});var ZQr=s(AP);imo=r(ZQr,"ProphetNetModel"),ZQr.forEach(t),dmo=r(rEe," (ProphetNet model)"),rEe.forEach(t),cmo=i(M),r_=n(M,"LI",{});var tEe=s(r_);ste=n(tEe,"STRONG",{});var eWr=s(ste);fmo=r(eWr,"qdqbert"),eWr.forEach(t),mmo=r(tEe," \u2014 "),yP=n(tEe,"A",{href:!0});var oWr=s(yP);gmo=r(oWr,"QDQBertModel"),oWr.forEach(t),hmo=r(tEe," (QDQBert model)"),tEe.forEach(t),pmo=i(M),t_=n(M,"LI",{});var aEe=s(t_);lte=n(aEe,"STRONG",{});var rWr=s(lte);_mo=r(rWr,"reformer"),rWr.forEach(t),umo=r(aEe," \u2014 "),LP=n(aEe,"A",{href:!0});var tWr=s(LP);bmo=r(tWr,"ReformerModel"),tWr.forEach(t),vmo=r(aEe," (Reformer model)"),aEe.forEach(t),Fmo=i(M),a_=n(M,"LI",{});var nEe=s(a_);ite=n(nEe,"STRONG",{});var aWr=s(ite);Tmo=r(aWr,"regnet"),aWr.forEach(t),Mmo=r(nEe," \u2014 "),xP=n(nEe,"A",{href:!0});var nWr=s(xP);Emo=r(nWr,"RegNetModel"),nWr.forEach(t),Cmo=r(nEe," (RegNet model)"),nEe.forEach(t),wmo=i(M),n_=n(M,"LI",{});var sEe=s(n_);dte=n(sEe,"STRONG",{});var sWr=s(dte);Amo=r(sWr,"rembert"),sWr.forEach(t),ymo=r(sEe," \u2014 "),kP=n(sEe,"A",{href:!0});var lWr=s(kP);Lmo=r(lWr,"RemBertModel"),lWr.forEach(t),xmo=r(sEe," (RemBERT model)"),sEe.forEach(t),kmo=i(M),s_=n(M,"LI",{});var lEe=s(s_);cte=n(lEe,"STRONG",{});var iWr=s(cte);Smo=r(iWr,"resnet"),iWr.forEach(t),Rmo=r(lEe," \u2014 "),SP=n(lEe,"A",{href:!0});var dWr=s(SP);Bmo=r(dWr,"ResNetModel"),dWr.forEach(t),Pmo=r(lEe," (ResNet model)"),lEe.forEach(t),$mo=i(M),l_=n(M,"LI",{});var iEe=s(l_);fte=n(iEe,"STRONG",{});var cWr=s(fte);Imo=r(cWr,"retribert"),cWr.forEach(t),qmo=r(iEe," \u2014 "),RP=n(iEe,"A",{href:!0});var fWr=s(RP);Nmo=r(fWr,"RetriBertModel"),fWr.forEach(t),jmo=r(iEe," (RetriBERT model)"),iEe.forEach(t),Dmo=i(M),i_=n(M,"LI",{});var dEe=s(i_);mte=n(dEe,"STRONG",{});var mWr=s(mte);Gmo=r(mWr,"roberta"),mWr.forEach(t),Omo=r(dEe," \u2014 "),BP=n(dEe,"A",{href:!0});var gWr=s(BP);Vmo=r(gWr,"RobertaModel"),gWr.forEach(t),Xmo=r(dEe," (RoBERTa model)"),dEe.forEach(t),zmo=i(M),d_=n(M,"LI",{});var cEe=s(d_);gte=n(cEe,"STRONG",{});var hWr=s(gte);Qmo=r(hWr,"roformer"),hWr.forEach(t),Wmo=r(cEe," \u2014 "),PP=n(cEe,"A",{href:!0});var pWr=s(PP);Hmo=r(pWr,"RoFormerModel"),pWr.forEach(t),Umo=r(cEe," (RoFormer model)"),cEe.forEach(t),Jmo=i(M),c_=n(M,"LI",{});var fEe=s(c_);hte=n(fEe,"STRONG",{});var _Wr=s(hte);Ymo=r(_Wr,"segformer"),_Wr.forEach(t),Kmo=r(fEe," \u2014 "),$P=n(fEe,"A",{href:!0});var uWr=s($P);Zmo=r(uWr,"SegformerModel"),uWr.forEach(t),ego=r(fEe," (SegFormer model)"),fEe.forEach(t),ogo=i(M),f_=n(M,"LI",{});var mEe=s(f_);pte=n(mEe,"STRONG",{});var bWr=s(pte);rgo=r(bWr,"sew"),bWr.forEach(t),tgo=r(mEe," \u2014 "),IP=n(mEe,"A",{href:!0});var vWr=s(IP);ago=r(vWr,"SEWModel"),vWr.forEach(t),ngo=r(mEe," (SEW model)"),mEe.forEach(t),sgo=i(M),m_=n(M,"LI",{});var gEe=s(m_);_te=n(gEe,"STRONG",{});var FWr=s(_te);lgo=r(FWr,"sew-d"),FWr.forEach(t),igo=r(gEe," \u2014 "),qP=n(gEe,"A",{href:!0});var TWr=s(qP);dgo=r(TWr,"SEWDModel"),TWr.forEach(t),cgo=r(gEe," (SEW-D model)"),gEe.forEach(t),fgo=i(M),g_=n(M,"LI",{});var hEe=s(g_);ute=n(hEe,"STRONG",{});var MWr=s(ute);mgo=r(MWr,"speech_to_text"),MWr.forEach(t),ggo=r(hEe," \u2014 "),NP=n(hEe,"A",{href:!0});var EWr=s(NP);hgo=r(EWr,"Speech2TextModel"),EWr.forEach(t),pgo=r(hEe," (Speech2Text model)"),hEe.forEach(t),_go=i(M),h_=n(M,"LI",{});var pEe=s(h_);bte=n(pEe,"STRONG",{});var CWr=s(bte);ugo=r(CWr,"splinter"),CWr.forEach(t),bgo=r(pEe," \u2014 "),jP=n(pEe,"A",{href:!0});var wWr=s(jP);vgo=r(wWr,"SplinterModel"),wWr.forEach(t),Fgo=r(pEe," (Splinter model)"),pEe.forEach(t),Tgo=i(M),p_=n(M,"LI",{});var _Ee=s(p_);vte=n(_Ee,"STRONG",{});var AWr=s(vte);Mgo=r(AWr,"squeezebert"),AWr.forEach(t),Ego=r(_Ee," \u2014 "),DP=n(_Ee,"A",{href:!0});var yWr=s(DP);Cgo=r(yWr,"SqueezeBertModel"),yWr.forEach(t),wgo=r(_Ee," (SqueezeBERT model)"),_Ee.forEach(t),Ago=i(M),__=n(M,"LI",{});var uEe=s(__);Fte=n(uEe,"STRONG",{});var LWr=s(Fte);ygo=r(LWr,"swin"),LWr.forEach(t),Lgo=r(uEe," \u2014 "),GP=n(uEe,"A",{href:!0});var xWr=s(GP);xgo=r(xWr,"SwinModel"),xWr.forEach(t),kgo=r(uEe," (Swin model)"),uEe.forEach(t),Sgo=i(M),u_=n(M,"LI",{});var bEe=s(u_);Tte=n(bEe,"STRONG",{});var kWr=s(Tte);Rgo=r(kWr,"t5"),kWr.forEach(t),Bgo=r(bEe," \u2014 "),OP=n(bEe,"A",{href:!0});var SWr=s(OP);Pgo=r(SWr,"T5Model"),SWr.forEach(t),$go=r(bEe," (T5 model)"),bEe.forEach(t),Igo=i(M),b_=n(M,"LI",{});var vEe=s(b_);Mte=n(vEe,"STRONG",{});var RWr=s(Mte);qgo=r(RWr,"tapas"),RWr.forEach(t),Ngo=r(vEe," \u2014 "),VP=n(vEe,"A",{href:!0});var BWr=s(VP);jgo=r(BWr,"TapasModel"),BWr.forEach(t),Dgo=r(vEe," (TAPAS model)"),vEe.forEach(t),Ggo=i(M),v_=n(M,"LI",{});var FEe=s(v_);Ete=n(FEe,"STRONG",{});var PWr=s(Ete);Ogo=r(PWr,"transfo-xl"),PWr.forEach(t),Vgo=r(FEe," \u2014 "),XP=n(FEe,"A",{href:!0});var $Wr=s(XP);Xgo=r($Wr,"TransfoXLModel"),$Wr.forEach(t),zgo=r(FEe," (Transformer-XL model)"),FEe.forEach(t),Qgo=i(M),F_=n(M,"LI",{});var TEe=s(F_);Cte=n(TEe,"STRONG",{});var IWr=s(Cte);Wgo=r(IWr,"unispeech"),IWr.forEach(t),Hgo=r(TEe," \u2014 "),zP=n(TEe,"A",{href:!0});var qWr=s(zP);Ugo=r(qWr,"UniSpeechModel"),qWr.forEach(t),Jgo=r(TEe," (UniSpeech model)"),TEe.forEach(t),Ygo=i(M),T_=n(M,"LI",{});var MEe=s(T_);wte=n(MEe,"STRONG",{});var NWr=s(wte);Kgo=r(NWr,"unispeech-sat"),NWr.forEach(t),Zgo=r(MEe," \u2014 "),QP=n(MEe,"A",{href:!0});var jWr=s(QP);eho=r(jWr,"UniSpeechSatModel"),jWr.forEach(t),oho=r(MEe," (UniSpeechSat model)"),MEe.forEach(t),rho=i(M),M_=n(M,"LI",{});var EEe=s(M_);Ate=n(EEe,"STRONG",{});var DWr=s(Ate);tho=r(DWr,"van"),DWr.forEach(t),aho=r(EEe," \u2014 "),WP=n(EEe,"A",{href:!0});var GWr=s(WP);nho=r(GWr,"VanModel"),GWr.forEach(t),sho=r(EEe," (VAN model)"),EEe.forEach(t),lho=i(M),E_=n(M,"LI",{});var CEe=s(E_);yte=n(CEe,"STRONG",{});var OWr=s(yte);iho=r(OWr,"vilt"),OWr.forEach(t),dho=r(CEe," \u2014 "),HP=n(CEe,"A",{href:!0});var VWr=s(HP);cho=r(VWr,"ViltModel"),VWr.forEach(t),fho=r(CEe," (ViLT model)"),CEe.forEach(t),mho=i(M),C_=n(M,"LI",{});var wEe=s(C_);Lte=n(wEe,"STRONG",{});var XWr=s(Lte);gho=r(XWr,"vision-text-dual-encoder"),XWr.forEach(t),hho=r(wEe," \u2014 "),UP=n(wEe,"A",{href:!0});var zWr=s(UP);pho=r(zWr,"VisionTextDualEncoderModel"),zWr.forEach(t),_ho=r(wEe," (VisionTextDualEncoder model)"),wEe.forEach(t),uho=i(M),w_=n(M,"LI",{});var AEe=s(w_);xte=n(AEe,"STRONG",{});var QWr=s(xte);bho=r(QWr,"visual_bert"),QWr.forEach(t),vho=r(AEe," \u2014 "),JP=n(AEe,"A",{href:!0});var WWr=s(JP);Fho=r(WWr,"VisualBertModel"),WWr.forEach(t),Tho=r(AEe," (VisualBert model)"),AEe.forEach(t),Mho=i(M),A_=n(M,"LI",{});var yEe=s(A_);kte=n(yEe,"STRONG",{});var HWr=s(kte);Eho=r(HWr,"vit"),HWr.forEach(t),Cho=r(yEe," \u2014 "),YP=n(yEe,"A",{href:!0});var UWr=s(YP);who=r(UWr,"ViTModel"),UWr.forEach(t),Aho=r(yEe," (ViT model)"),yEe.forEach(t),yho=i(M),y_=n(M,"LI",{});var LEe=s(y_);Ste=n(LEe,"STRONG",{});var JWr=s(Ste);Lho=r(JWr,"vit_mae"),JWr.forEach(t),xho=r(LEe," \u2014 "),KP=n(LEe,"A",{href:!0});var YWr=s(KP);kho=r(YWr,"ViTMAEModel"),YWr.forEach(t),Sho=r(LEe," (ViTMAE model)"),LEe.forEach(t),Rho=i(M),L_=n(M,"LI",{});var xEe=s(L_);Rte=n(xEe,"STRONG",{});var KWr=s(Rte);Bho=r(KWr,"wav2vec2"),KWr.forEach(t),Pho=r(xEe," \u2014 "),ZP=n(xEe,"A",{href:!0});var ZWr=s(ZP);$ho=r(ZWr,"Wav2Vec2Model"),ZWr.forEach(t),Iho=r(xEe," (Wav2Vec2 model)"),xEe.forEach(t),qho=i(M),x_=n(M,"LI",{});var kEe=s(x_);Bte=n(kEe,"STRONG",{});var eHr=s(Bte);Nho=r(eHr,"wavlm"),eHr.forEach(t),jho=r(kEe," \u2014 "),e$=n(kEe,"A",{href:!0});var oHr=s(e$);Dho=r(oHr,"WavLMModel"),oHr.forEach(t),Gho=r(kEe," (WavLM model)"),kEe.forEach(t),Oho=i(M),k_=n(M,"LI",{});var SEe=s(k_);Pte=n(SEe,"STRONG",{});var rHr=s(Pte);Vho=r(rHr,"xglm"),rHr.forEach(t),Xho=r(SEe," \u2014 "),o$=n(SEe,"A",{href:!0});var tHr=s(o$);zho=r(tHr,"XGLMModel"),tHr.forEach(t),Qho=r(SEe," (XGLM model)"),SEe.forEach(t),Who=i(M),S_=n(M,"LI",{});var REe=s(S_);$te=n(REe,"STRONG",{});var aHr=s($te);Hho=r(aHr,"xlm"),aHr.forEach(t),Uho=r(REe," \u2014 "),r$=n(REe,"A",{href:!0});var nHr=s(r$);Jho=r(nHr,"XLMModel"),nHr.forEach(t),Yho=r(REe," (XLM model)"),REe.forEach(t),Kho=i(M),R_=n(M,"LI",{});var BEe=s(R_);Ite=n(BEe,"STRONG",{});var sHr=s(Ite);Zho=r(sHr,"xlm-prophetnet"),sHr.forEach(t),epo=r(BEe," \u2014 "),t$=n(BEe,"A",{href:!0});var lHr=s(t$);opo=r(lHr,"XLMProphetNetModel"),lHr.forEach(t),rpo=r(BEe," (XLMProphetNet model)"),BEe.forEach(t),tpo=i(M),B_=n(M,"LI",{});var PEe=s(B_);qte=n(PEe,"STRONG",{});var iHr=s(qte);apo=r(iHr,"xlm-roberta"),iHr.forEach(t),npo=r(PEe," \u2014 "),a$=n(PEe,"A",{href:!0});var dHr=s(a$);spo=r(dHr,"XLMRobertaModel"),dHr.forEach(t),lpo=r(PEe," (XLM-RoBERTa model)"),PEe.forEach(t),ipo=i(M),P_=n(M,"LI",{});var $Ee=s(P_);Nte=n($Ee,"STRONG",{});var cHr=s(Nte);dpo=r(cHr,"xlm-roberta-xl"),cHr.forEach(t),cpo=r($Ee," \u2014 "),n$=n($Ee,"A",{href:!0});var fHr=s(n$);fpo=r(fHr,"XLMRobertaXLModel"),fHr.forEach(t),mpo=r($Ee," (XLM-RoBERTa-XL model)"),$Ee.forEach(t),gpo=i(M),$_=n(M,"LI",{});var IEe=s($_);jte=n(IEe,"STRONG",{});var mHr=s(jte);hpo=r(mHr,"xlnet"),mHr.forEach(t),ppo=r(IEe," \u2014 "),s$=n(IEe,"A",{href:!0});var gHr=s(s$);_po=r(gHr,"XLNetModel"),gHr.forEach(t),upo=r(IEe," (XLNet model)"),IEe.forEach(t),bpo=i(M),I_=n(M,"LI",{});var qEe=s(I_);Dte=n(qEe,"STRONG",{});var hHr=s(Dte);vpo=r(hHr,"yoso"),hHr.forEach(t),Fpo=r(qEe," \u2014 "),l$=n(qEe,"A",{href:!0});var pHr=s(l$);Tpo=r(pHr,"YosoModel"),pHr.forEach(t),Mpo=r(qEe," (YOSO model)"),qEe.forEach(t),M.forEach(t),Epo=i(Dt),q_=n(Dt,"P",{});var NEe=s(q_);Cpo=r(NEe,"The model is set in evaluation mode by default using "),Gte=n(NEe,"CODE",{});var _Hr=s(Gte);wpo=r(_Hr,"model.eval()"),_Hr.forEach(t),Apo=r(NEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ote=n(NEe,"CODE",{});var uHr=s(Ote);ypo=r(uHr,"model.train()"),uHr.forEach(t),NEe.forEach(t),Lpo=i(Dt),Vte=n(Dt,"P",{});var bHr=s(Vte);xpo=r(bHr,"Examples:"),bHr.forEach(t),kpo=i(Dt),m(p5.$$.fragment,Dt),Dt.forEach(t),Us.forEach(t),KRe=i(c),rd=n(c,"H2",{class:!0});var l$e=s(rd);N_=n(l$e,"A",{id:!0,class:!0,href:!0});var vHr=s(N_);Xte=n(vHr,"SPAN",{});var FHr=s(Xte);m(_5.$$.fragment,FHr),FHr.forEach(t),vHr.forEach(t),Spo=i(l$e),zte=n(l$e,"SPAN",{});var THr=s(zte);Rpo=r(THr,"AutoModelForPreTraining"),THr.forEach(t),l$e.forEach(t),ZRe=i(c),Yo=n(c,"DIV",{class:!0});var Ys=s(Yo);m(u5.$$.fragment,Ys),Bpo=i(Ys),td=n(Ys,"P",{});var LU=s(td);Ppo=r(LU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),i$=n(LU,"A",{href:!0});var MHr=s(i$);$po=r(MHr,"from_pretrained()"),MHr.forEach(t),Ipo=r(LU," class method or the "),d$=n(LU,"A",{href:!0});var EHr=s(d$);qpo=r(EHr,"from_config()"),EHr.forEach(t),Npo=r(LU,` class
method.`),LU.forEach(t),jpo=i(Ys),b5=n(Ys,"P",{});var i$e=s(b5);Dpo=r(i$e,"This class cannot be instantiated directly using "),Qte=n(i$e,"CODE",{});var CHr=s(Qte);Gpo=r(CHr,"__init__()"),CHr.forEach(t),Opo=r(i$e," (throws an error)."),i$e.forEach(t),Vpo=i(Ys),zr=n(Ys,"DIV",{class:!0});var Ks=s(zr);m(v5.$$.fragment,Ks),Xpo=i(Ks),Wte=n(Ks,"P",{});var wHr=s(Wte);zpo=r(wHr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wHr.forEach(t),Qpo=i(Ks),ad=n(Ks,"P",{});var xU=s(ad);Wpo=r(xU,`Note:
Loading a model from its configuration file does `),Hte=n(xU,"STRONG",{});var AHr=s(Hte);Hpo=r(AHr,"not"),AHr.forEach(t),Upo=r(xU,` load the model weights. It only affects the
model\u2019s configuration. Use `),c$=n(xU,"A",{href:!0});var yHr=s(c$);Jpo=r(yHr,"from_pretrained()"),yHr.forEach(t),Ypo=r(xU," to load the model weights."),xU.forEach(t),Kpo=i(Ks),Ute=n(Ks,"P",{});var LHr=s(Ute);Zpo=r(LHr,"Examples:"),LHr.forEach(t),e_o=i(Ks),m(F5.$$.fragment,Ks),Ks.forEach(t),o_o=i(Ys),Ne=n(Ys,"DIV",{class:!0});var Gt=s(Ne);m(T5.$$.fragment,Gt),r_o=i(Gt),Jte=n(Gt,"P",{});var xHr=s(Jte);t_o=r(xHr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xHr.forEach(t),a_o=i(Gt),za=n(Gt,"P",{});var B4=s(za);n_o=r(B4,"The model class to instantiate is selected based on the "),Yte=n(B4,"CODE",{});var kHr=s(Yte);s_o=r(kHr,"model_type"),kHr.forEach(t),l_o=r(B4,` property of the config object (either
passed as an argument or loaded from `),Kte=n(B4,"CODE",{});var SHr=s(Kte);i_o=r(SHr,"pretrained_model_name_or_path"),SHr.forEach(t),d_o=r(B4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zte=n(B4,"CODE",{});var RHr=s(Zte);c_o=r(RHr,"pretrained_model_name_or_path"),RHr.forEach(t),f_o=r(B4,":"),B4.forEach(t),m_o=i(Gt),S=n(Gt,"UL",{});var B=s(S);j_=n(B,"LI",{});var jEe=s(j_);eae=n(jEe,"STRONG",{});var BHr=s(eae);g_o=r(BHr,"albert"),BHr.forEach(t),h_o=r(jEe," \u2014 "),f$=n(jEe,"A",{href:!0});var PHr=s(f$);p_o=r(PHr,"AlbertForPreTraining"),PHr.forEach(t),__o=r(jEe," (ALBERT model)"),jEe.forEach(t),u_o=i(B),D_=n(B,"LI",{});var DEe=s(D_);oae=n(DEe,"STRONG",{});var $Hr=s(oae);b_o=r($Hr,"bart"),$Hr.forEach(t),v_o=r(DEe," \u2014 "),m$=n(DEe,"A",{href:!0});var IHr=s(m$);F_o=r(IHr,"BartForConditionalGeneration"),IHr.forEach(t),T_o=r(DEe," (BART model)"),DEe.forEach(t),M_o=i(B),G_=n(B,"LI",{});var GEe=s(G_);rae=n(GEe,"STRONG",{});var qHr=s(rae);E_o=r(qHr,"bert"),qHr.forEach(t),C_o=r(GEe," \u2014 "),g$=n(GEe,"A",{href:!0});var NHr=s(g$);w_o=r(NHr,"BertForPreTraining"),NHr.forEach(t),A_o=r(GEe," (BERT model)"),GEe.forEach(t),y_o=i(B),O_=n(B,"LI",{});var OEe=s(O_);tae=n(OEe,"STRONG",{});var jHr=s(tae);L_o=r(jHr,"big_bird"),jHr.forEach(t),x_o=r(OEe," \u2014 "),h$=n(OEe,"A",{href:!0});var DHr=s(h$);k_o=r(DHr,"BigBirdForPreTraining"),DHr.forEach(t),S_o=r(OEe," (BigBird model)"),OEe.forEach(t),R_o=i(B),V_=n(B,"LI",{});var VEe=s(V_);aae=n(VEe,"STRONG",{});var GHr=s(aae);B_o=r(GHr,"camembert"),GHr.forEach(t),P_o=r(VEe," \u2014 "),p$=n(VEe,"A",{href:!0});var OHr=s(p$);$_o=r(OHr,"CamembertForMaskedLM"),OHr.forEach(t),I_o=r(VEe," (CamemBERT model)"),VEe.forEach(t),q_o=i(B),X_=n(B,"LI",{});var XEe=s(X_);nae=n(XEe,"STRONG",{});var VHr=s(nae);N_o=r(VHr,"ctrl"),VHr.forEach(t),j_o=r(XEe," \u2014 "),_$=n(XEe,"A",{href:!0});var XHr=s(_$);D_o=r(XHr,"CTRLLMHeadModel"),XHr.forEach(t),G_o=r(XEe," (CTRL model)"),XEe.forEach(t),O_o=i(B),z_=n(B,"LI",{});var zEe=s(z_);sae=n(zEe,"STRONG",{});var zHr=s(sae);V_o=r(zHr,"data2vec-text"),zHr.forEach(t),X_o=r(zEe," \u2014 "),u$=n(zEe,"A",{href:!0});var QHr=s(u$);z_o=r(QHr,"Data2VecTextForMaskedLM"),QHr.forEach(t),Q_o=r(zEe," (Data2VecText model)"),zEe.forEach(t),W_o=i(B),Q_=n(B,"LI",{});var QEe=s(Q_);lae=n(QEe,"STRONG",{});var WHr=s(lae);H_o=r(WHr,"deberta"),WHr.forEach(t),U_o=r(QEe," \u2014 "),b$=n(QEe,"A",{href:!0});var HHr=s(b$);J_o=r(HHr,"DebertaForMaskedLM"),HHr.forEach(t),Y_o=r(QEe," (DeBERTa model)"),QEe.forEach(t),K_o=i(B),W_=n(B,"LI",{});var WEe=s(W_);iae=n(WEe,"STRONG",{});var UHr=s(iae);Z_o=r(UHr,"deberta-v2"),UHr.forEach(t),euo=r(WEe," \u2014 "),v$=n(WEe,"A",{href:!0});var JHr=s(v$);ouo=r(JHr,"DebertaV2ForMaskedLM"),JHr.forEach(t),ruo=r(WEe," (DeBERTa-v2 model)"),WEe.forEach(t),tuo=i(B),H_=n(B,"LI",{});var HEe=s(H_);dae=n(HEe,"STRONG",{});var YHr=s(dae);auo=r(YHr,"distilbert"),YHr.forEach(t),nuo=r(HEe," \u2014 "),F$=n(HEe,"A",{href:!0});var KHr=s(F$);suo=r(KHr,"DistilBertForMaskedLM"),KHr.forEach(t),luo=r(HEe," (DistilBERT model)"),HEe.forEach(t),iuo=i(B),U_=n(B,"LI",{});var UEe=s(U_);cae=n(UEe,"STRONG",{});var ZHr=s(cae);duo=r(ZHr,"electra"),ZHr.forEach(t),cuo=r(UEe," \u2014 "),T$=n(UEe,"A",{href:!0});var eUr=s(T$);fuo=r(eUr,"ElectraForPreTraining"),eUr.forEach(t),muo=r(UEe," (ELECTRA model)"),UEe.forEach(t),guo=i(B),J_=n(B,"LI",{});var JEe=s(J_);fae=n(JEe,"STRONG",{});var oUr=s(fae);huo=r(oUr,"flaubert"),oUr.forEach(t),puo=r(JEe," \u2014 "),M$=n(JEe,"A",{href:!0});var rUr=s(M$);_uo=r(rUr,"FlaubertWithLMHeadModel"),rUr.forEach(t),uuo=r(JEe," (FlauBERT model)"),JEe.forEach(t),buo=i(B),Y_=n(B,"LI",{});var YEe=s(Y_);mae=n(YEe,"STRONG",{});var tUr=s(mae);vuo=r(tUr,"fnet"),tUr.forEach(t),Fuo=r(YEe," \u2014 "),E$=n(YEe,"A",{href:!0});var aUr=s(E$);Tuo=r(aUr,"FNetForPreTraining"),aUr.forEach(t),Muo=r(YEe," (FNet model)"),YEe.forEach(t),Euo=i(B),K_=n(B,"LI",{});var KEe=s(K_);gae=n(KEe,"STRONG",{});var nUr=s(gae);Cuo=r(nUr,"fsmt"),nUr.forEach(t),wuo=r(KEe," \u2014 "),C$=n(KEe,"A",{href:!0});var sUr=s(C$);Auo=r(sUr,"FSMTForConditionalGeneration"),sUr.forEach(t),yuo=r(KEe," (FairSeq Machine-Translation model)"),KEe.forEach(t),Luo=i(B),Z_=n(B,"LI",{});var ZEe=s(Z_);hae=n(ZEe,"STRONG",{});var lUr=s(hae);xuo=r(lUr,"funnel"),lUr.forEach(t),kuo=r(ZEe," \u2014 "),w$=n(ZEe,"A",{href:!0});var iUr=s(w$);Suo=r(iUr,"FunnelForPreTraining"),iUr.forEach(t),Ruo=r(ZEe," (Funnel Transformer model)"),ZEe.forEach(t),Buo=i(B),eu=n(B,"LI",{});var e5e=s(eu);pae=n(e5e,"STRONG",{});var dUr=s(pae);Puo=r(dUr,"gpt2"),dUr.forEach(t),$uo=r(e5e," \u2014 "),A$=n(e5e,"A",{href:!0});var cUr=s(A$);Iuo=r(cUr,"GPT2LMHeadModel"),cUr.forEach(t),quo=r(e5e," (OpenAI GPT-2 model)"),e5e.forEach(t),Nuo=i(B),ou=n(B,"LI",{});var o5e=s(ou);_ae=n(o5e,"STRONG",{});var fUr=s(_ae);juo=r(fUr,"ibert"),fUr.forEach(t),Duo=r(o5e," \u2014 "),y$=n(o5e,"A",{href:!0});var mUr=s(y$);Guo=r(mUr,"IBertForMaskedLM"),mUr.forEach(t),Ouo=r(o5e," (I-BERT model)"),o5e.forEach(t),Vuo=i(B),ru=n(B,"LI",{});var r5e=s(ru);uae=n(r5e,"STRONG",{});var gUr=s(uae);Xuo=r(gUr,"layoutlm"),gUr.forEach(t),zuo=r(r5e," \u2014 "),L$=n(r5e,"A",{href:!0});var hUr=s(L$);Quo=r(hUr,"LayoutLMForMaskedLM"),hUr.forEach(t),Wuo=r(r5e," (LayoutLM model)"),r5e.forEach(t),Huo=i(B),tu=n(B,"LI",{});var t5e=s(tu);bae=n(t5e,"STRONG",{});var pUr=s(bae);Uuo=r(pUr,"longformer"),pUr.forEach(t),Juo=r(t5e," \u2014 "),x$=n(t5e,"A",{href:!0});var _Ur=s(x$);Yuo=r(_Ur,"LongformerForMaskedLM"),_Ur.forEach(t),Kuo=r(t5e," (Longformer model)"),t5e.forEach(t),Zuo=i(B),au=n(B,"LI",{});var a5e=s(au);vae=n(a5e,"STRONG",{});var uUr=s(vae);e1o=r(uUr,"lxmert"),uUr.forEach(t),o1o=r(a5e," \u2014 "),k$=n(a5e,"A",{href:!0});var bUr=s(k$);r1o=r(bUr,"LxmertForPreTraining"),bUr.forEach(t),t1o=r(a5e," (LXMERT model)"),a5e.forEach(t),a1o=i(B),nu=n(B,"LI",{});var n5e=s(nu);Fae=n(n5e,"STRONG",{});var vUr=s(Fae);n1o=r(vUr,"megatron-bert"),vUr.forEach(t),s1o=r(n5e," \u2014 "),S$=n(n5e,"A",{href:!0});var FUr=s(S$);l1o=r(FUr,"MegatronBertForPreTraining"),FUr.forEach(t),i1o=r(n5e," (MegatronBert model)"),n5e.forEach(t),d1o=i(B),su=n(B,"LI",{});var s5e=s(su);Tae=n(s5e,"STRONG",{});var TUr=s(Tae);c1o=r(TUr,"mobilebert"),TUr.forEach(t),f1o=r(s5e," \u2014 "),R$=n(s5e,"A",{href:!0});var MUr=s(R$);m1o=r(MUr,"MobileBertForPreTraining"),MUr.forEach(t),g1o=r(s5e," (MobileBERT model)"),s5e.forEach(t),h1o=i(B),lu=n(B,"LI",{});var l5e=s(lu);Mae=n(l5e,"STRONG",{});var EUr=s(Mae);p1o=r(EUr,"mpnet"),EUr.forEach(t),_1o=r(l5e," \u2014 "),B$=n(l5e,"A",{href:!0});var CUr=s(B$);u1o=r(CUr,"MPNetForMaskedLM"),CUr.forEach(t),b1o=r(l5e," (MPNet model)"),l5e.forEach(t),v1o=i(B),iu=n(B,"LI",{});var i5e=s(iu);Eae=n(i5e,"STRONG",{});var wUr=s(Eae);F1o=r(wUr,"openai-gpt"),wUr.forEach(t),T1o=r(i5e," \u2014 "),P$=n(i5e,"A",{href:!0});var AUr=s(P$);M1o=r(AUr,"OpenAIGPTLMHeadModel"),AUr.forEach(t),E1o=r(i5e," (OpenAI GPT model)"),i5e.forEach(t),C1o=i(B),du=n(B,"LI",{});var d5e=s(du);Cae=n(d5e,"STRONG",{});var yUr=s(Cae);w1o=r(yUr,"retribert"),yUr.forEach(t),A1o=r(d5e," \u2014 "),$$=n(d5e,"A",{href:!0});var LUr=s($$);y1o=r(LUr,"RetriBertModel"),LUr.forEach(t),L1o=r(d5e," (RetriBERT model)"),d5e.forEach(t),x1o=i(B),cu=n(B,"LI",{});var c5e=s(cu);wae=n(c5e,"STRONG",{});var xUr=s(wae);k1o=r(xUr,"roberta"),xUr.forEach(t),S1o=r(c5e," \u2014 "),I$=n(c5e,"A",{href:!0});var kUr=s(I$);R1o=r(kUr,"RobertaForMaskedLM"),kUr.forEach(t),B1o=r(c5e," (RoBERTa model)"),c5e.forEach(t),P1o=i(B),fu=n(B,"LI",{});var f5e=s(fu);Aae=n(f5e,"STRONG",{});var SUr=s(Aae);$1o=r(SUr,"squeezebert"),SUr.forEach(t),I1o=r(f5e," \u2014 "),q$=n(f5e,"A",{href:!0});var RUr=s(q$);q1o=r(RUr,"SqueezeBertForMaskedLM"),RUr.forEach(t),N1o=r(f5e," (SqueezeBERT model)"),f5e.forEach(t),j1o=i(B),mu=n(B,"LI",{});var m5e=s(mu);yae=n(m5e,"STRONG",{});var BUr=s(yae);D1o=r(BUr,"t5"),BUr.forEach(t),G1o=r(m5e," \u2014 "),N$=n(m5e,"A",{href:!0});var PUr=s(N$);O1o=r(PUr,"T5ForConditionalGeneration"),PUr.forEach(t),V1o=r(m5e," (T5 model)"),m5e.forEach(t),X1o=i(B),gu=n(B,"LI",{});var g5e=s(gu);Lae=n(g5e,"STRONG",{});var $Ur=s(Lae);z1o=r($Ur,"tapas"),$Ur.forEach(t),Q1o=r(g5e," \u2014 "),j$=n(g5e,"A",{href:!0});var IUr=s(j$);W1o=r(IUr,"TapasForMaskedLM"),IUr.forEach(t),H1o=r(g5e," (TAPAS model)"),g5e.forEach(t),U1o=i(B),hu=n(B,"LI",{});var h5e=s(hu);xae=n(h5e,"STRONG",{});var qUr=s(xae);J1o=r(qUr,"transfo-xl"),qUr.forEach(t),Y1o=r(h5e," \u2014 "),D$=n(h5e,"A",{href:!0});var NUr=s(D$);K1o=r(NUr,"TransfoXLLMHeadModel"),NUr.forEach(t),Z1o=r(h5e," (Transformer-XL model)"),h5e.forEach(t),ebo=i(B),pu=n(B,"LI",{});var p5e=s(pu);kae=n(p5e,"STRONG",{});var jUr=s(kae);obo=r(jUr,"unispeech"),jUr.forEach(t),rbo=r(p5e," \u2014 "),G$=n(p5e,"A",{href:!0});var DUr=s(G$);tbo=r(DUr,"UniSpeechForPreTraining"),DUr.forEach(t),abo=r(p5e," (UniSpeech model)"),p5e.forEach(t),nbo=i(B),_u=n(B,"LI",{});var _5e=s(_u);Sae=n(_5e,"STRONG",{});var GUr=s(Sae);sbo=r(GUr,"unispeech-sat"),GUr.forEach(t),lbo=r(_5e," \u2014 "),O$=n(_5e,"A",{href:!0});var OUr=s(O$);ibo=r(OUr,"UniSpeechSatForPreTraining"),OUr.forEach(t),dbo=r(_5e," (UniSpeechSat model)"),_5e.forEach(t),cbo=i(B),uu=n(B,"LI",{});var u5e=s(uu);Rae=n(u5e,"STRONG",{});var VUr=s(Rae);fbo=r(VUr,"visual_bert"),VUr.forEach(t),mbo=r(u5e," \u2014 "),V$=n(u5e,"A",{href:!0});var XUr=s(V$);gbo=r(XUr,"VisualBertForPreTraining"),XUr.forEach(t),hbo=r(u5e," (VisualBert model)"),u5e.forEach(t),pbo=i(B),bu=n(B,"LI",{});var b5e=s(bu);Bae=n(b5e,"STRONG",{});var zUr=s(Bae);_bo=r(zUr,"vit_mae"),zUr.forEach(t),ubo=r(b5e," \u2014 "),X$=n(b5e,"A",{href:!0});var QUr=s(X$);bbo=r(QUr,"ViTMAEForPreTraining"),QUr.forEach(t),vbo=r(b5e," (ViTMAE model)"),b5e.forEach(t),Fbo=i(B),vu=n(B,"LI",{});var v5e=s(vu);Pae=n(v5e,"STRONG",{});var WUr=s(Pae);Tbo=r(WUr,"wav2vec2"),WUr.forEach(t),Mbo=r(v5e," \u2014 "),z$=n(v5e,"A",{href:!0});var HUr=s(z$);Ebo=r(HUr,"Wav2Vec2ForPreTraining"),HUr.forEach(t),Cbo=r(v5e," (Wav2Vec2 model)"),v5e.forEach(t),wbo=i(B),Fu=n(B,"LI",{});var F5e=s(Fu);$ae=n(F5e,"STRONG",{});var UUr=s($ae);Abo=r(UUr,"xlm"),UUr.forEach(t),ybo=r(F5e," \u2014 "),Q$=n(F5e,"A",{href:!0});var JUr=s(Q$);Lbo=r(JUr,"XLMWithLMHeadModel"),JUr.forEach(t),xbo=r(F5e," (XLM model)"),F5e.forEach(t),kbo=i(B),Tu=n(B,"LI",{});var T5e=s(Tu);Iae=n(T5e,"STRONG",{});var YUr=s(Iae);Sbo=r(YUr,"xlm-roberta"),YUr.forEach(t),Rbo=r(T5e," \u2014 "),W$=n(T5e,"A",{href:!0});var KUr=s(W$);Bbo=r(KUr,"XLMRobertaForMaskedLM"),KUr.forEach(t),Pbo=r(T5e," (XLM-RoBERTa model)"),T5e.forEach(t),$bo=i(B),Mu=n(B,"LI",{});var M5e=s(Mu);qae=n(M5e,"STRONG",{});var ZUr=s(qae);Ibo=r(ZUr,"xlm-roberta-xl"),ZUr.forEach(t),qbo=r(M5e," \u2014 "),H$=n(M5e,"A",{href:!0});var eJr=s(H$);Nbo=r(eJr,"XLMRobertaXLForMaskedLM"),eJr.forEach(t),jbo=r(M5e," (XLM-RoBERTa-XL model)"),M5e.forEach(t),Dbo=i(B),Eu=n(B,"LI",{});var E5e=s(Eu);Nae=n(E5e,"STRONG",{});var oJr=s(Nae);Gbo=r(oJr,"xlnet"),oJr.forEach(t),Obo=r(E5e," \u2014 "),U$=n(E5e,"A",{href:!0});var rJr=s(U$);Vbo=r(rJr,"XLNetLMHeadModel"),rJr.forEach(t),Xbo=r(E5e," (XLNet model)"),E5e.forEach(t),B.forEach(t),zbo=i(Gt),Cu=n(Gt,"P",{});var C5e=s(Cu);Qbo=r(C5e,"The model is set in evaluation mode by default using "),jae=n(C5e,"CODE",{});var tJr=s(jae);Wbo=r(tJr,"model.eval()"),tJr.forEach(t),Hbo=r(C5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dae=n(C5e,"CODE",{});var aJr=s(Dae);Ubo=r(aJr,"model.train()"),aJr.forEach(t),C5e.forEach(t),Jbo=i(Gt),Gae=n(Gt,"P",{});var nJr=s(Gae);Ybo=r(nJr,"Examples:"),nJr.forEach(t),Kbo=i(Gt),m(M5.$$.fragment,Gt),Gt.forEach(t),Ys.forEach(t),eBe=i(c),nd=n(c,"H2",{class:!0});var d$e=s(nd);wu=n(d$e,"A",{id:!0,class:!0,href:!0});var sJr=s(wu);Oae=n(sJr,"SPAN",{});var lJr=s(Oae);m(E5.$$.fragment,lJr),lJr.forEach(t),sJr.forEach(t),Zbo=i(d$e),Vae=n(d$e,"SPAN",{});var iJr=s(Vae);e2o=r(iJr,"AutoModelForCausalLM"),iJr.forEach(t),d$e.forEach(t),oBe=i(c),Ko=n(c,"DIV",{class:!0});var Zs=s(Ko);m(C5.$$.fragment,Zs),o2o=i(Zs),sd=n(Zs,"P",{});var kU=s(sd);r2o=r(kU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),J$=n(kU,"A",{href:!0});var dJr=s(J$);t2o=r(dJr,"from_pretrained()"),dJr.forEach(t),a2o=r(kU," class method or the "),Y$=n(kU,"A",{href:!0});var cJr=s(Y$);n2o=r(cJr,"from_config()"),cJr.forEach(t),s2o=r(kU,` class
method.`),kU.forEach(t),l2o=i(Zs),w5=n(Zs,"P",{});var c$e=s(w5);i2o=r(c$e,"This class cannot be instantiated directly using "),Xae=n(c$e,"CODE",{});var fJr=s(Xae);d2o=r(fJr,"__init__()"),fJr.forEach(t),c2o=r(c$e," (throws an error)."),c$e.forEach(t),f2o=i(Zs),Qr=n(Zs,"DIV",{class:!0});var el=s(Qr);m(A5.$$.fragment,el),m2o=i(el),zae=n(el,"P",{});var mJr=s(zae);g2o=r(mJr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mJr.forEach(t),h2o=i(el),ld=n(el,"P",{});var SU=s(ld);p2o=r(SU,`Note:
Loading a model from its configuration file does `),Qae=n(SU,"STRONG",{});var gJr=s(Qae);_2o=r(gJr,"not"),gJr.forEach(t),u2o=r(SU,` load the model weights. It only affects the
model\u2019s configuration. Use `),K$=n(SU,"A",{href:!0});var hJr=s(K$);b2o=r(hJr,"from_pretrained()"),hJr.forEach(t),v2o=r(SU," to load the model weights."),SU.forEach(t),F2o=i(el),Wae=n(el,"P",{});var pJr=s(Wae);T2o=r(pJr,"Examples:"),pJr.forEach(t),M2o=i(el),m(y5.$$.fragment,el),el.forEach(t),E2o=i(Zs),je=n(Zs,"DIV",{class:!0});var Ot=s(je);m(L5.$$.fragment,Ot),C2o=i(Ot),Hae=n(Ot,"P",{});var _Jr=s(Hae);w2o=r(_Jr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_Jr.forEach(t),A2o=i(Ot),Qa=n(Ot,"P",{});var P4=s(Qa);y2o=r(P4,"The model class to instantiate is selected based on the "),Uae=n(P4,"CODE",{});var uJr=s(Uae);L2o=r(uJr,"model_type"),uJr.forEach(t),x2o=r(P4,` property of the config object (either
passed as an argument or loaded from `),Jae=n(P4,"CODE",{});var bJr=s(Jae);k2o=r(bJr,"pretrained_model_name_or_path"),bJr.forEach(t),S2o=r(P4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yae=n(P4,"CODE",{});var vJr=s(Yae);R2o=r(vJr,"pretrained_model_name_or_path"),vJr.forEach(t),B2o=r(P4,":"),P4.forEach(t),P2o=i(Ot),$=n(Ot,"UL",{});var q=s($);Au=n(q,"LI",{});var w5e=s(Au);Kae=n(w5e,"STRONG",{});var FJr=s(Kae);$2o=r(FJr,"bart"),FJr.forEach(t),I2o=r(w5e," \u2014 "),Z$=n(w5e,"A",{href:!0});var TJr=s(Z$);q2o=r(TJr,"BartForCausalLM"),TJr.forEach(t),N2o=r(w5e," (BART model)"),w5e.forEach(t),j2o=i(q),yu=n(q,"LI",{});var A5e=s(yu);Zae=n(A5e,"STRONG",{});var MJr=s(Zae);D2o=r(MJr,"bert"),MJr.forEach(t),G2o=r(A5e," \u2014 "),eI=n(A5e,"A",{href:!0});var EJr=s(eI);O2o=r(EJr,"BertLMHeadModel"),EJr.forEach(t),V2o=r(A5e," (BERT model)"),A5e.forEach(t),X2o=i(q),Lu=n(q,"LI",{});var y5e=s(Lu);ene=n(y5e,"STRONG",{});var CJr=s(ene);z2o=r(CJr,"bert-generation"),CJr.forEach(t),Q2o=r(y5e," \u2014 "),oI=n(y5e,"A",{href:!0});var wJr=s(oI);W2o=r(wJr,"BertGenerationDecoder"),wJr.forEach(t),H2o=r(y5e," (Bert Generation model)"),y5e.forEach(t),U2o=i(q),xu=n(q,"LI",{});var L5e=s(xu);one=n(L5e,"STRONG",{});var AJr=s(one);J2o=r(AJr,"big_bird"),AJr.forEach(t),Y2o=r(L5e," \u2014 "),rI=n(L5e,"A",{href:!0});var yJr=s(rI);K2o=r(yJr,"BigBirdForCausalLM"),yJr.forEach(t),Z2o=r(L5e," (BigBird model)"),L5e.forEach(t),e6o=i(q),ku=n(q,"LI",{});var x5e=s(ku);rne=n(x5e,"STRONG",{});var LJr=s(rne);o6o=r(LJr,"bigbird_pegasus"),LJr.forEach(t),r6o=r(x5e," \u2014 "),tI=n(x5e,"A",{href:!0});var xJr=s(tI);t6o=r(xJr,"BigBirdPegasusForCausalLM"),xJr.forEach(t),a6o=r(x5e," (BigBirdPegasus model)"),x5e.forEach(t),n6o=i(q),Su=n(q,"LI",{});var k5e=s(Su);tne=n(k5e,"STRONG",{});var kJr=s(tne);s6o=r(kJr,"blenderbot"),kJr.forEach(t),l6o=r(k5e," \u2014 "),aI=n(k5e,"A",{href:!0});var SJr=s(aI);i6o=r(SJr,"BlenderbotForCausalLM"),SJr.forEach(t),d6o=r(k5e," (Blenderbot model)"),k5e.forEach(t),c6o=i(q),Ru=n(q,"LI",{});var S5e=s(Ru);ane=n(S5e,"STRONG",{});var RJr=s(ane);f6o=r(RJr,"blenderbot-small"),RJr.forEach(t),m6o=r(S5e," \u2014 "),nI=n(S5e,"A",{href:!0});var BJr=s(nI);g6o=r(BJr,"BlenderbotSmallForCausalLM"),BJr.forEach(t),h6o=r(S5e," (BlenderbotSmall model)"),S5e.forEach(t),p6o=i(q),Bu=n(q,"LI",{});var R5e=s(Bu);nne=n(R5e,"STRONG",{});var PJr=s(nne);_6o=r(PJr,"camembert"),PJr.forEach(t),u6o=r(R5e," \u2014 "),sI=n(R5e,"A",{href:!0});var $Jr=s(sI);b6o=r($Jr,"CamembertForCausalLM"),$Jr.forEach(t),v6o=r(R5e," (CamemBERT model)"),R5e.forEach(t),F6o=i(q),Pu=n(q,"LI",{});var B5e=s(Pu);sne=n(B5e,"STRONG",{});var IJr=s(sne);T6o=r(IJr,"ctrl"),IJr.forEach(t),M6o=r(B5e," \u2014 "),lI=n(B5e,"A",{href:!0});var qJr=s(lI);E6o=r(qJr,"CTRLLMHeadModel"),qJr.forEach(t),C6o=r(B5e," (CTRL model)"),B5e.forEach(t),w6o=i(q),$u=n(q,"LI",{});var P5e=s($u);lne=n(P5e,"STRONG",{});var NJr=s(lne);A6o=r(NJr,"data2vec-text"),NJr.forEach(t),y6o=r(P5e," \u2014 "),iI=n(P5e,"A",{href:!0});var jJr=s(iI);L6o=r(jJr,"Data2VecTextForCausalLM"),jJr.forEach(t),x6o=r(P5e," (Data2VecText model)"),P5e.forEach(t),k6o=i(q),Iu=n(q,"LI",{});var $5e=s(Iu);ine=n($5e,"STRONG",{});var DJr=s(ine);S6o=r(DJr,"electra"),DJr.forEach(t),R6o=r($5e," \u2014 "),dI=n($5e,"A",{href:!0});var GJr=s(dI);B6o=r(GJr,"ElectraForCausalLM"),GJr.forEach(t),P6o=r($5e," (ELECTRA model)"),$5e.forEach(t),$6o=i(q),qu=n(q,"LI",{});var I5e=s(qu);dne=n(I5e,"STRONG",{});var OJr=s(dne);I6o=r(OJr,"gpt2"),OJr.forEach(t),q6o=r(I5e," \u2014 "),cI=n(I5e,"A",{href:!0});var VJr=s(cI);N6o=r(VJr,"GPT2LMHeadModel"),VJr.forEach(t),j6o=r(I5e," (OpenAI GPT-2 model)"),I5e.forEach(t),D6o=i(q),Nu=n(q,"LI",{});var q5e=s(Nu);cne=n(q5e,"STRONG",{});var XJr=s(cne);G6o=r(XJr,"gpt_neo"),XJr.forEach(t),O6o=r(q5e," \u2014 "),fI=n(q5e,"A",{href:!0});var zJr=s(fI);V6o=r(zJr,"GPTNeoForCausalLM"),zJr.forEach(t),X6o=r(q5e," (GPT Neo model)"),q5e.forEach(t),z6o=i(q),ju=n(q,"LI",{});var N5e=s(ju);fne=n(N5e,"STRONG",{});var QJr=s(fne);Q6o=r(QJr,"gptj"),QJr.forEach(t),W6o=r(N5e," \u2014 "),mI=n(N5e,"A",{href:!0});var WJr=s(mI);H6o=r(WJr,"GPTJForCausalLM"),WJr.forEach(t),U6o=r(N5e," (GPT-J model)"),N5e.forEach(t),J6o=i(q),Du=n(q,"LI",{});var j5e=s(Du);mne=n(j5e,"STRONG",{});var HJr=s(mne);Y6o=r(HJr,"marian"),HJr.forEach(t),K6o=r(j5e," \u2014 "),gI=n(j5e,"A",{href:!0});var UJr=s(gI);Z6o=r(UJr,"MarianForCausalLM"),UJr.forEach(t),evo=r(j5e," (Marian model)"),j5e.forEach(t),ovo=i(q),Gu=n(q,"LI",{});var D5e=s(Gu);gne=n(D5e,"STRONG",{});var JJr=s(gne);rvo=r(JJr,"mbart"),JJr.forEach(t),tvo=r(D5e," \u2014 "),hI=n(D5e,"A",{href:!0});var YJr=s(hI);avo=r(YJr,"MBartForCausalLM"),YJr.forEach(t),nvo=r(D5e," (mBART model)"),D5e.forEach(t),svo=i(q),Ou=n(q,"LI",{});var G5e=s(Ou);hne=n(G5e,"STRONG",{});var KJr=s(hne);lvo=r(KJr,"megatron-bert"),KJr.forEach(t),ivo=r(G5e," \u2014 "),pI=n(G5e,"A",{href:!0});var ZJr=s(pI);dvo=r(ZJr,"MegatronBertForCausalLM"),ZJr.forEach(t),cvo=r(G5e," (MegatronBert model)"),G5e.forEach(t),fvo=i(q),Vu=n(q,"LI",{});var O5e=s(Vu);pne=n(O5e,"STRONG",{});var eYr=s(pne);mvo=r(eYr,"openai-gpt"),eYr.forEach(t),gvo=r(O5e," \u2014 "),_I=n(O5e,"A",{href:!0});var oYr=s(_I);hvo=r(oYr,"OpenAIGPTLMHeadModel"),oYr.forEach(t),pvo=r(O5e," (OpenAI GPT model)"),O5e.forEach(t),_vo=i(q),Xu=n(q,"LI",{});var V5e=s(Xu);_ne=n(V5e,"STRONG",{});var rYr=s(_ne);uvo=r(rYr,"pegasus"),rYr.forEach(t),bvo=r(V5e," \u2014 "),uI=n(V5e,"A",{href:!0});var tYr=s(uI);vvo=r(tYr,"PegasusForCausalLM"),tYr.forEach(t),Fvo=r(V5e," (Pegasus model)"),V5e.forEach(t),Tvo=i(q),zu=n(q,"LI",{});var X5e=s(zu);une=n(X5e,"STRONG",{});var aYr=s(une);Mvo=r(aYr,"plbart"),aYr.forEach(t),Evo=r(X5e," \u2014 "),bI=n(X5e,"A",{href:!0});var nYr=s(bI);Cvo=r(nYr,"PLBartForCausalLM"),nYr.forEach(t),wvo=r(X5e," (PLBart model)"),X5e.forEach(t),Avo=i(q),Qu=n(q,"LI",{});var z5e=s(Qu);bne=n(z5e,"STRONG",{});var sYr=s(bne);yvo=r(sYr,"prophetnet"),sYr.forEach(t),Lvo=r(z5e," \u2014 "),vI=n(z5e,"A",{href:!0});var lYr=s(vI);xvo=r(lYr,"ProphetNetForCausalLM"),lYr.forEach(t),kvo=r(z5e," (ProphetNet model)"),z5e.forEach(t),Svo=i(q),Wu=n(q,"LI",{});var Q5e=s(Wu);vne=n(Q5e,"STRONG",{});var iYr=s(vne);Rvo=r(iYr,"qdqbert"),iYr.forEach(t),Bvo=r(Q5e," \u2014 "),FI=n(Q5e,"A",{href:!0});var dYr=s(FI);Pvo=r(dYr,"QDQBertLMHeadModel"),dYr.forEach(t),$vo=r(Q5e," (QDQBert model)"),Q5e.forEach(t),Ivo=i(q),Hu=n(q,"LI",{});var W5e=s(Hu);Fne=n(W5e,"STRONG",{});var cYr=s(Fne);qvo=r(cYr,"reformer"),cYr.forEach(t),Nvo=r(W5e," \u2014 "),TI=n(W5e,"A",{href:!0});var fYr=s(TI);jvo=r(fYr,"ReformerModelWithLMHead"),fYr.forEach(t),Dvo=r(W5e," (Reformer model)"),W5e.forEach(t),Gvo=i(q),Uu=n(q,"LI",{});var H5e=s(Uu);Tne=n(H5e,"STRONG",{});var mYr=s(Tne);Ovo=r(mYr,"rembert"),mYr.forEach(t),Vvo=r(H5e," \u2014 "),MI=n(H5e,"A",{href:!0});var gYr=s(MI);Xvo=r(gYr,"RemBertForCausalLM"),gYr.forEach(t),zvo=r(H5e," (RemBERT model)"),H5e.forEach(t),Qvo=i(q),Ju=n(q,"LI",{});var U5e=s(Ju);Mne=n(U5e,"STRONG",{});var hYr=s(Mne);Wvo=r(hYr,"roberta"),hYr.forEach(t),Hvo=r(U5e," \u2014 "),EI=n(U5e,"A",{href:!0});var pYr=s(EI);Uvo=r(pYr,"RobertaForCausalLM"),pYr.forEach(t),Jvo=r(U5e," (RoBERTa model)"),U5e.forEach(t),Yvo=i(q),Yu=n(q,"LI",{});var J5e=s(Yu);Ene=n(J5e,"STRONG",{});var _Yr=s(Ene);Kvo=r(_Yr,"roformer"),_Yr.forEach(t),Zvo=r(J5e," \u2014 "),CI=n(J5e,"A",{href:!0});var uYr=s(CI);eFo=r(uYr,"RoFormerForCausalLM"),uYr.forEach(t),oFo=r(J5e," (RoFormer model)"),J5e.forEach(t),rFo=i(q),Ku=n(q,"LI",{});var Y5e=s(Ku);Cne=n(Y5e,"STRONG",{});var bYr=s(Cne);tFo=r(bYr,"speech_to_text_2"),bYr.forEach(t),aFo=r(Y5e," \u2014 "),wI=n(Y5e,"A",{href:!0});var vYr=s(wI);nFo=r(vYr,"Speech2Text2ForCausalLM"),vYr.forEach(t),sFo=r(Y5e," (Speech2Text2 model)"),Y5e.forEach(t),lFo=i(q),Zu=n(q,"LI",{});var K5e=s(Zu);wne=n(K5e,"STRONG",{});var FYr=s(wne);iFo=r(FYr,"transfo-xl"),FYr.forEach(t),dFo=r(K5e," \u2014 "),AI=n(K5e,"A",{href:!0});var TYr=s(AI);cFo=r(TYr,"TransfoXLLMHeadModel"),TYr.forEach(t),fFo=r(K5e," (Transformer-XL model)"),K5e.forEach(t),mFo=i(q),e1=n(q,"LI",{});var Z5e=s(e1);Ane=n(Z5e,"STRONG",{});var MYr=s(Ane);gFo=r(MYr,"trocr"),MYr.forEach(t),hFo=r(Z5e," \u2014 "),yI=n(Z5e,"A",{href:!0});var EYr=s(yI);pFo=r(EYr,"TrOCRForCausalLM"),EYr.forEach(t),_Fo=r(Z5e," (TrOCR model)"),Z5e.forEach(t),uFo=i(q),o1=n(q,"LI",{});var e3e=s(o1);yne=n(e3e,"STRONG",{});var CYr=s(yne);bFo=r(CYr,"xglm"),CYr.forEach(t),vFo=r(e3e," \u2014 "),LI=n(e3e,"A",{href:!0});var wYr=s(LI);FFo=r(wYr,"XGLMForCausalLM"),wYr.forEach(t),TFo=r(e3e," (XGLM model)"),e3e.forEach(t),MFo=i(q),r1=n(q,"LI",{});var o3e=s(r1);Lne=n(o3e,"STRONG",{});var AYr=s(Lne);EFo=r(AYr,"xlm"),AYr.forEach(t),CFo=r(o3e," \u2014 "),xI=n(o3e,"A",{href:!0});var yYr=s(xI);wFo=r(yYr,"XLMWithLMHeadModel"),yYr.forEach(t),AFo=r(o3e," (XLM model)"),o3e.forEach(t),yFo=i(q),t1=n(q,"LI",{});var r3e=s(t1);xne=n(r3e,"STRONG",{});var LYr=s(xne);LFo=r(LYr,"xlm-prophetnet"),LYr.forEach(t),xFo=r(r3e," \u2014 "),kI=n(r3e,"A",{href:!0});var xYr=s(kI);kFo=r(xYr,"XLMProphetNetForCausalLM"),xYr.forEach(t),SFo=r(r3e," (XLMProphetNet model)"),r3e.forEach(t),RFo=i(q),a1=n(q,"LI",{});var t3e=s(a1);kne=n(t3e,"STRONG",{});var kYr=s(kne);BFo=r(kYr,"xlm-roberta"),kYr.forEach(t),PFo=r(t3e," \u2014 "),SI=n(t3e,"A",{href:!0});var SYr=s(SI);$Fo=r(SYr,"XLMRobertaForCausalLM"),SYr.forEach(t),IFo=r(t3e," (XLM-RoBERTa model)"),t3e.forEach(t),qFo=i(q),n1=n(q,"LI",{});var a3e=s(n1);Sne=n(a3e,"STRONG",{});var RYr=s(Sne);NFo=r(RYr,"xlm-roberta-xl"),RYr.forEach(t),jFo=r(a3e," \u2014 "),RI=n(a3e,"A",{href:!0});var BYr=s(RI);DFo=r(BYr,"XLMRobertaXLForCausalLM"),BYr.forEach(t),GFo=r(a3e," (XLM-RoBERTa-XL model)"),a3e.forEach(t),OFo=i(q),s1=n(q,"LI",{});var n3e=s(s1);Rne=n(n3e,"STRONG",{});var PYr=s(Rne);VFo=r(PYr,"xlnet"),PYr.forEach(t),XFo=r(n3e," \u2014 "),BI=n(n3e,"A",{href:!0});var $Yr=s(BI);zFo=r($Yr,"XLNetLMHeadModel"),$Yr.forEach(t),QFo=r(n3e," (XLNet model)"),n3e.forEach(t),q.forEach(t),WFo=i(Ot),l1=n(Ot,"P",{});var s3e=s(l1);HFo=r(s3e,"The model is set in evaluation mode by default using "),Bne=n(s3e,"CODE",{});var IYr=s(Bne);UFo=r(IYr,"model.eval()"),IYr.forEach(t),JFo=r(s3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pne=n(s3e,"CODE",{});var qYr=s(Pne);YFo=r(qYr,"model.train()"),qYr.forEach(t),s3e.forEach(t),KFo=i(Ot),$ne=n(Ot,"P",{});var NYr=s($ne);ZFo=r(NYr,"Examples:"),NYr.forEach(t),eTo=i(Ot),m(x5.$$.fragment,Ot),Ot.forEach(t),Zs.forEach(t),rBe=i(c),id=n(c,"H2",{class:!0});var f$e=s(id);i1=n(f$e,"A",{id:!0,class:!0,href:!0});var jYr=s(i1);Ine=n(jYr,"SPAN",{});var DYr=s(Ine);m(k5.$$.fragment,DYr),DYr.forEach(t),jYr.forEach(t),oTo=i(f$e),qne=n(f$e,"SPAN",{});var GYr=s(qne);rTo=r(GYr,"AutoModelForMaskedLM"),GYr.forEach(t),f$e.forEach(t),tBe=i(c),Zo=n(c,"DIV",{class:!0});var ol=s(Zo);m(S5.$$.fragment,ol),tTo=i(ol),dd=n(ol,"P",{});var RU=s(dd);aTo=r(RU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PI=n(RU,"A",{href:!0});var OYr=s(PI);nTo=r(OYr,"from_pretrained()"),OYr.forEach(t),sTo=r(RU," class method or the "),$I=n(RU,"A",{href:!0});var VYr=s($I);lTo=r(VYr,"from_config()"),VYr.forEach(t),iTo=r(RU,` class
method.`),RU.forEach(t),dTo=i(ol),R5=n(ol,"P",{});var m$e=s(R5);cTo=r(m$e,"This class cannot be instantiated directly using "),Nne=n(m$e,"CODE",{});var XYr=s(Nne);fTo=r(XYr,"__init__()"),XYr.forEach(t),mTo=r(m$e," (throws an error)."),m$e.forEach(t),gTo=i(ol),Wr=n(ol,"DIV",{class:!0});var rl=s(Wr);m(B5.$$.fragment,rl),hTo=i(rl),jne=n(rl,"P",{});var zYr=s(jne);pTo=r(zYr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zYr.forEach(t),_To=i(rl),cd=n(rl,"P",{});var BU=s(cd);uTo=r(BU,`Note:
Loading a model from its configuration file does `),Dne=n(BU,"STRONG",{});var QYr=s(Dne);bTo=r(QYr,"not"),QYr.forEach(t),vTo=r(BU,` load the model weights. It only affects the
model\u2019s configuration. Use `),II=n(BU,"A",{href:!0});var WYr=s(II);FTo=r(WYr,"from_pretrained()"),WYr.forEach(t),TTo=r(BU," to load the model weights."),BU.forEach(t),MTo=i(rl),Gne=n(rl,"P",{});var HYr=s(Gne);ETo=r(HYr,"Examples:"),HYr.forEach(t),CTo=i(rl),m(P5.$$.fragment,rl),rl.forEach(t),wTo=i(ol),De=n(ol,"DIV",{class:!0});var Vt=s(De);m($5.$$.fragment,Vt),ATo=i(Vt),One=n(Vt,"P",{});var UYr=s(One);yTo=r(UYr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),UYr.forEach(t),LTo=i(Vt),Wa=n(Vt,"P",{});var $4=s(Wa);xTo=r($4,"The model class to instantiate is selected based on the "),Vne=n($4,"CODE",{});var JYr=s(Vne);kTo=r(JYr,"model_type"),JYr.forEach(t),STo=r($4,` property of the config object (either
passed as an argument or loaded from `),Xne=n($4,"CODE",{});var YYr=s(Xne);RTo=r(YYr,"pretrained_model_name_or_path"),YYr.forEach(t),BTo=r($4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zne=n($4,"CODE",{});var KYr=s(zne);PTo=r(KYr,"pretrained_model_name_or_path"),KYr.forEach(t),$To=r($4,":"),$4.forEach(t),ITo=i(Vt),I=n(Vt,"UL",{});var N=s(I);d1=n(N,"LI",{});var l3e=s(d1);Qne=n(l3e,"STRONG",{});var ZYr=s(Qne);qTo=r(ZYr,"albert"),ZYr.forEach(t),NTo=r(l3e," \u2014 "),qI=n(l3e,"A",{href:!0});var eKr=s(qI);jTo=r(eKr,"AlbertForMaskedLM"),eKr.forEach(t),DTo=r(l3e," (ALBERT model)"),l3e.forEach(t),GTo=i(N),c1=n(N,"LI",{});var i3e=s(c1);Wne=n(i3e,"STRONG",{});var oKr=s(Wne);OTo=r(oKr,"bart"),oKr.forEach(t),VTo=r(i3e," \u2014 "),NI=n(i3e,"A",{href:!0});var rKr=s(NI);XTo=r(rKr,"BartForConditionalGeneration"),rKr.forEach(t),zTo=r(i3e," (BART model)"),i3e.forEach(t),QTo=i(N),f1=n(N,"LI",{});var d3e=s(f1);Hne=n(d3e,"STRONG",{});var tKr=s(Hne);WTo=r(tKr,"bert"),tKr.forEach(t),HTo=r(d3e," \u2014 "),jI=n(d3e,"A",{href:!0});var aKr=s(jI);UTo=r(aKr,"BertForMaskedLM"),aKr.forEach(t),JTo=r(d3e," (BERT model)"),d3e.forEach(t),YTo=i(N),m1=n(N,"LI",{});var c3e=s(m1);Une=n(c3e,"STRONG",{});var nKr=s(Une);KTo=r(nKr,"big_bird"),nKr.forEach(t),ZTo=r(c3e," \u2014 "),DI=n(c3e,"A",{href:!0});var sKr=s(DI);e8o=r(sKr,"BigBirdForMaskedLM"),sKr.forEach(t),o8o=r(c3e," (BigBird model)"),c3e.forEach(t),r8o=i(N),g1=n(N,"LI",{});var f3e=s(g1);Jne=n(f3e,"STRONG",{});var lKr=s(Jne);t8o=r(lKr,"camembert"),lKr.forEach(t),a8o=r(f3e," \u2014 "),GI=n(f3e,"A",{href:!0});var iKr=s(GI);n8o=r(iKr,"CamembertForMaskedLM"),iKr.forEach(t),s8o=r(f3e," (CamemBERT model)"),f3e.forEach(t),l8o=i(N),h1=n(N,"LI",{});var m3e=s(h1);Yne=n(m3e,"STRONG",{});var dKr=s(Yne);i8o=r(dKr,"convbert"),dKr.forEach(t),d8o=r(m3e," \u2014 "),OI=n(m3e,"A",{href:!0});var cKr=s(OI);c8o=r(cKr,"ConvBertForMaskedLM"),cKr.forEach(t),f8o=r(m3e," (ConvBERT model)"),m3e.forEach(t),m8o=i(N),p1=n(N,"LI",{});var g3e=s(p1);Kne=n(g3e,"STRONG",{});var fKr=s(Kne);g8o=r(fKr,"data2vec-text"),fKr.forEach(t),h8o=r(g3e," \u2014 "),VI=n(g3e,"A",{href:!0});var mKr=s(VI);p8o=r(mKr,"Data2VecTextForMaskedLM"),mKr.forEach(t),_8o=r(g3e," (Data2VecText model)"),g3e.forEach(t),u8o=i(N),_1=n(N,"LI",{});var h3e=s(_1);Zne=n(h3e,"STRONG",{});var gKr=s(Zne);b8o=r(gKr,"deberta"),gKr.forEach(t),v8o=r(h3e," \u2014 "),XI=n(h3e,"A",{href:!0});var hKr=s(XI);F8o=r(hKr,"DebertaForMaskedLM"),hKr.forEach(t),T8o=r(h3e," (DeBERTa model)"),h3e.forEach(t),M8o=i(N),u1=n(N,"LI",{});var p3e=s(u1);ese=n(p3e,"STRONG",{});var pKr=s(ese);E8o=r(pKr,"deberta-v2"),pKr.forEach(t),C8o=r(p3e," \u2014 "),zI=n(p3e,"A",{href:!0});var _Kr=s(zI);w8o=r(_Kr,"DebertaV2ForMaskedLM"),_Kr.forEach(t),A8o=r(p3e," (DeBERTa-v2 model)"),p3e.forEach(t),y8o=i(N),b1=n(N,"LI",{});var _3e=s(b1);ose=n(_3e,"STRONG",{});var uKr=s(ose);L8o=r(uKr,"distilbert"),uKr.forEach(t),x8o=r(_3e," \u2014 "),QI=n(_3e,"A",{href:!0});var bKr=s(QI);k8o=r(bKr,"DistilBertForMaskedLM"),bKr.forEach(t),S8o=r(_3e," (DistilBERT model)"),_3e.forEach(t),R8o=i(N),v1=n(N,"LI",{});var u3e=s(v1);rse=n(u3e,"STRONG",{});var vKr=s(rse);B8o=r(vKr,"electra"),vKr.forEach(t),P8o=r(u3e," \u2014 "),WI=n(u3e,"A",{href:!0});var FKr=s(WI);$8o=r(FKr,"ElectraForMaskedLM"),FKr.forEach(t),I8o=r(u3e," (ELECTRA model)"),u3e.forEach(t),q8o=i(N),F1=n(N,"LI",{});var b3e=s(F1);tse=n(b3e,"STRONG",{});var TKr=s(tse);N8o=r(TKr,"flaubert"),TKr.forEach(t),j8o=r(b3e," \u2014 "),HI=n(b3e,"A",{href:!0});var MKr=s(HI);D8o=r(MKr,"FlaubertWithLMHeadModel"),MKr.forEach(t),G8o=r(b3e," (FlauBERT model)"),b3e.forEach(t),O8o=i(N),T1=n(N,"LI",{});var v3e=s(T1);ase=n(v3e,"STRONG",{});var EKr=s(ase);V8o=r(EKr,"fnet"),EKr.forEach(t),X8o=r(v3e," \u2014 "),UI=n(v3e,"A",{href:!0});var CKr=s(UI);z8o=r(CKr,"FNetForMaskedLM"),CKr.forEach(t),Q8o=r(v3e," (FNet model)"),v3e.forEach(t),W8o=i(N),M1=n(N,"LI",{});var F3e=s(M1);nse=n(F3e,"STRONG",{});var wKr=s(nse);H8o=r(wKr,"funnel"),wKr.forEach(t),U8o=r(F3e," \u2014 "),JI=n(F3e,"A",{href:!0});var AKr=s(JI);J8o=r(AKr,"FunnelForMaskedLM"),AKr.forEach(t),Y8o=r(F3e," (Funnel Transformer model)"),F3e.forEach(t),K8o=i(N),E1=n(N,"LI",{});var T3e=s(E1);sse=n(T3e,"STRONG",{});var yKr=s(sse);Z8o=r(yKr,"ibert"),yKr.forEach(t),e7o=r(T3e," \u2014 "),YI=n(T3e,"A",{href:!0});var LKr=s(YI);o7o=r(LKr,"IBertForMaskedLM"),LKr.forEach(t),r7o=r(T3e," (I-BERT model)"),T3e.forEach(t),t7o=i(N),C1=n(N,"LI",{});var M3e=s(C1);lse=n(M3e,"STRONG",{});var xKr=s(lse);a7o=r(xKr,"layoutlm"),xKr.forEach(t),n7o=r(M3e," \u2014 "),KI=n(M3e,"A",{href:!0});var kKr=s(KI);s7o=r(kKr,"LayoutLMForMaskedLM"),kKr.forEach(t),l7o=r(M3e," (LayoutLM model)"),M3e.forEach(t),i7o=i(N),w1=n(N,"LI",{});var E3e=s(w1);ise=n(E3e,"STRONG",{});var SKr=s(ise);d7o=r(SKr,"longformer"),SKr.forEach(t),c7o=r(E3e," \u2014 "),ZI=n(E3e,"A",{href:!0});var RKr=s(ZI);f7o=r(RKr,"LongformerForMaskedLM"),RKr.forEach(t),m7o=r(E3e," (Longformer model)"),E3e.forEach(t),g7o=i(N),A1=n(N,"LI",{});var C3e=s(A1);dse=n(C3e,"STRONG",{});var BKr=s(dse);h7o=r(BKr,"mbart"),BKr.forEach(t),p7o=r(C3e," \u2014 "),eq=n(C3e,"A",{href:!0});var PKr=s(eq);_7o=r(PKr,"MBartForConditionalGeneration"),PKr.forEach(t),u7o=r(C3e," (mBART model)"),C3e.forEach(t),b7o=i(N),y1=n(N,"LI",{});var w3e=s(y1);cse=n(w3e,"STRONG",{});var $Kr=s(cse);v7o=r($Kr,"megatron-bert"),$Kr.forEach(t),F7o=r(w3e," \u2014 "),oq=n(w3e,"A",{href:!0});var IKr=s(oq);T7o=r(IKr,"MegatronBertForMaskedLM"),IKr.forEach(t),M7o=r(w3e," (MegatronBert model)"),w3e.forEach(t),E7o=i(N),L1=n(N,"LI",{});var A3e=s(L1);fse=n(A3e,"STRONG",{});var qKr=s(fse);C7o=r(qKr,"mobilebert"),qKr.forEach(t),w7o=r(A3e," \u2014 "),rq=n(A3e,"A",{href:!0});var NKr=s(rq);A7o=r(NKr,"MobileBertForMaskedLM"),NKr.forEach(t),y7o=r(A3e," (MobileBERT model)"),A3e.forEach(t),L7o=i(N),x1=n(N,"LI",{});var y3e=s(x1);mse=n(y3e,"STRONG",{});var jKr=s(mse);x7o=r(jKr,"mpnet"),jKr.forEach(t),k7o=r(y3e," \u2014 "),tq=n(y3e,"A",{href:!0});var DKr=s(tq);S7o=r(DKr,"MPNetForMaskedLM"),DKr.forEach(t),R7o=r(y3e," (MPNet model)"),y3e.forEach(t),B7o=i(N),k1=n(N,"LI",{});var L3e=s(k1);gse=n(L3e,"STRONG",{});var GKr=s(gse);P7o=r(GKr,"nystromformer"),GKr.forEach(t),$7o=r(L3e," \u2014 "),aq=n(L3e,"A",{href:!0});var OKr=s(aq);I7o=r(OKr,"NystromformerForMaskedLM"),OKr.forEach(t),q7o=r(L3e," (Nystromformer model)"),L3e.forEach(t),N7o=i(N),S1=n(N,"LI",{});var x3e=s(S1);hse=n(x3e,"STRONG",{});var VKr=s(hse);j7o=r(VKr,"perceiver"),VKr.forEach(t),D7o=r(x3e," \u2014 "),nq=n(x3e,"A",{href:!0});var XKr=s(nq);G7o=r(XKr,"PerceiverForMaskedLM"),XKr.forEach(t),O7o=r(x3e," (Perceiver model)"),x3e.forEach(t),V7o=i(N),R1=n(N,"LI",{});var k3e=s(R1);pse=n(k3e,"STRONG",{});var zKr=s(pse);X7o=r(zKr,"qdqbert"),zKr.forEach(t),z7o=r(k3e," \u2014 "),sq=n(k3e,"A",{href:!0});var QKr=s(sq);Q7o=r(QKr,"QDQBertForMaskedLM"),QKr.forEach(t),W7o=r(k3e," (QDQBert model)"),k3e.forEach(t),H7o=i(N),B1=n(N,"LI",{});var S3e=s(B1);_se=n(S3e,"STRONG",{});var WKr=s(_se);U7o=r(WKr,"reformer"),WKr.forEach(t),J7o=r(S3e," \u2014 "),lq=n(S3e,"A",{href:!0});var HKr=s(lq);Y7o=r(HKr,"ReformerForMaskedLM"),HKr.forEach(t),K7o=r(S3e," (Reformer model)"),S3e.forEach(t),Z7o=i(N),P1=n(N,"LI",{});var R3e=s(P1);use=n(R3e,"STRONG",{});var UKr=s(use);e9o=r(UKr,"rembert"),UKr.forEach(t),o9o=r(R3e," \u2014 "),iq=n(R3e,"A",{href:!0});var JKr=s(iq);r9o=r(JKr,"RemBertForMaskedLM"),JKr.forEach(t),t9o=r(R3e," (RemBERT model)"),R3e.forEach(t),a9o=i(N),$1=n(N,"LI",{});var B3e=s($1);bse=n(B3e,"STRONG",{});var YKr=s(bse);n9o=r(YKr,"roberta"),YKr.forEach(t),s9o=r(B3e," \u2014 "),dq=n(B3e,"A",{href:!0});var KKr=s(dq);l9o=r(KKr,"RobertaForMaskedLM"),KKr.forEach(t),i9o=r(B3e," (RoBERTa model)"),B3e.forEach(t),d9o=i(N),I1=n(N,"LI",{});var P3e=s(I1);vse=n(P3e,"STRONG",{});var ZKr=s(vse);c9o=r(ZKr,"roformer"),ZKr.forEach(t),f9o=r(P3e," \u2014 "),cq=n(P3e,"A",{href:!0});var eZr=s(cq);m9o=r(eZr,"RoFormerForMaskedLM"),eZr.forEach(t),g9o=r(P3e," (RoFormer model)"),P3e.forEach(t),h9o=i(N),q1=n(N,"LI",{});var $3e=s(q1);Fse=n($3e,"STRONG",{});var oZr=s(Fse);p9o=r(oZr,"squeezebert"),oZr.forEach(t),_9o=r($3e," \u2014 "),fq=n($3e,"A",{href:!0});var rZr=s(fq);u9o=r(rZr,"SqueezeBertForMaskedLM"),rZr.forEach(t),b9o=r($3e," (SqueezeBERT model)"),$3e.forEach(t),v9o=i(N),N1=n(N,"LI",{});var I3e=s(N1);Tse=n(I3e,"STRONG",{});var tZr=s(Tse);F9o=r(tZr,"tapas"),tZr.forEach(t),T9o=r(I3e," \u2014 "),mq=n(I3e,"A",{href:!0});var aZr=s(mq);M9o=r(aZr,"TapasForMaskedLM"),aZr.forEach(t),E9o=r(I3e," (TAPAS model)"),I3e.forEach(t),C9o=i(N),j1=n(N,"LI",{});var q3e=s(j1);Mse=n(q3e,"STRONG",{});var nZr=s(Mse);w9o=r(nZr,"wav2vec2"),nZr.forEach(t),A9o=r(q3e," \u2014 "),Ese=n(q3e,"CODE",{});var sZr=s(Ese);y9o=r(sZr,"Wav2Vec2ForMaskedLM"),sZr.forEach(t),L9o=r(q3e," (Wav2Vec2 model)"),q3e.forEach(t),x9o=i(N),D1=n(N,"LI",{});var N3e=s(D1);Cse=n(N3e,"STRONG",{});var lZr=s(Cse);k9o=r(lZr,"xlm"),lZr.forEach(t),S9o=r(N3e," \u2014 "),gq=n(N3e,"A",{href:!0});var iZr=s(gq);R9o=r(iZr,"XLMWithLMHeadModel"),iZr.forEach(t),B9o=r(N3e," (XLM model)"),N3e.forEach(t),P9o=i(N),G1=n(N,"LI",{});var j3e=s(G1);wse=n(j3e,"STRONG",{});var dZr=s(wse);$9o=r(dZr,"xlm-roberta"),dZr.forEach(t),I9o=r(j3e," \u2014 "),hq=n(j3e,"A",{href:!0});var cZr=s(hq);q9o=r(cZr,"XLMRobertaForMaskedLM"),cZr.forEach(t),N9o=r(j3e," (XLM-RoBERTa model)"),j3e.forEach(t),j9o=i(N),O1=n(N,"LI",{});var D3e=s(O1);Ase=n(D3e,"STRONG",{});var fZr=s(Ase);D9o=r(fZr,"xlm-roberta-xl"),fZr.forEach(t),G9o=r(D3e," \u2014 "),pq=n(D3e,"A",{href:!0});var mZr=s(pq);O9o=r(mZr,"XLMRobertaXLForMaskedLM"),mZr.forEach(t),V9o=r(D3e," (XLM-RoBERTa-XL model)"),D3e.forEach(t),X9o=i(N),V1=n(N,"LI",{});var G3e=s(V1);yse=n(G3e,"STRONG",{});var gZr=s(yse);z9o=r(gZr,"yoso"),gZr.forEach(t),Q9o=r(G3e," \u2014 "),_q=n(G3e,"A",{href:!0});var hZr=s(_q);W9o=r(hZr,"YosoForMaskedLM"),hZr.forEach(t),H9o=r(G3e," (YOSO model)"),G3e.forEach(t),N.forEach(t),U9o=i(Vt),X1=n(Vt,"P",{});var O3e=s(X1);J9o=r(O3e,"The model is set in evaluation mode by default using "),Lse=n(O3e,"CODE",{});var pZr=s(Lse);Y9o=r(pZr,"model.eval()"),pZr.forEach(t),K9o=r(O3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xse=n(O3e,"CODE",{});var _Zr=s(xse);Z9o=r(_Zr,"model.train()"),_Zr.forEach(t),O3e.forEach(t),eMo=i(Vt),kse=n(Vt,"P",{});var uZr=s(kse);oMo=r(uZr,"Examples:"),uZr.forEach(t),rMo=i(Vt),m(I5.$$.fragment,Vt),Vt.forEach(t),ol.forEach(t),aBe=i(c),fd=n(c,"H2",{class:!0});var g$e=s(fd);z1=n(g$e,"A",{id:!0,class:!0,href:!0});var bZr=s(z1);Sse=n(bZr,"SPAN",{});var vZr=s(Sse);m(q5.$$.fragment,vZr),vZr.forEach(t),bZr.forEach(t),tMo=i(g$e),Rse=n(g$e,"SPAN",{});var FZr=s(Rse);aMo=r(FZr,"AutoModelForSeq2SeqLM"),FZr.forEach(t),g$e.forEach(t),nBe=i(c),er=n(c,"DIV",{class:!0});var tl=s(er);m(N5.$$.fragment,tl),nMo=i(tl),md=n(tl,"P",{});var PU=s(md);sMo=r(PU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uq=n(PU,"A",{href:!0});var TZr=s(uq);lMo=r(TZr,"from_pretrained()"),TZr.forEach(t),iMo=r(PU," class method or the "),bq=n(PU,"A",{href:!0});var MZr=s(bq);dMo=r(MZr,"from_config()"),MZr.forEach(t),cMo=r(PU,` class
method.`),PU.forEach(t),fMo=i(tl),j5=n(tl,"P",{});var h$e=s(j5);mMo=r(h$e,"This class cannot be instantiated directly using "),Bse=n(h$e,"CODE",{});var EZr=s(Bse);gMo=r(EZr,"__init__()"),EZr.forEach(t),hMo=r(h$e," (throws an error)."),h$e.forEach(t),pMo=i(tl),Hr=n(tl,"DIV",{class:!0});var al=s(Hr);m(D5.$$.fragment,al),_Mo=i(al),Pse=n(al,"P",{});var CZr=s(Pse);uMo=r(CZr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),CZr.forEach(t),bMo=i(al),gd=n(al,"P",{});var $U=s(gd);vMo=r($U,`Note:
Loading a model from its configuration file does `),$se=n($U,"STRONG",{});var wZr=s($se);FMo=r(wZr,"not"),wZr.forEach(t),TMo=r($U,` load the model weights. It only affects the
model\u2019s configuration. Use `),vq=n($U,"A",{href:!0});var AZr=s(vq);MMo=r(AZr,"from_pretrained()"),AZr.forEach(t),EMo=r($U," to load the model weights."),$U.forEach(t),CMo=i(al),Ise=n(al,"P",{});var yZr=s(Ise);wMo=r(yZr,"Examples:"),yZr.forEach(t),AMo=i(al),m(G5.$$.fragment,al),al.forEach(t),yMo=i(tl),Ge=n(tl,"DIV",{class:!0});var Xt=s(Ge);m(O5.$$.fragment,Xt),LMo=i(Xt),qse=n(Xt,"P",{});var LZr=s(qse);xMo=r(LZr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),LZr.forEach(t),kMo=i(Xt),Ha=n(Xt,"P",{});var I4=s(Ha);SMo=r(I4,"The model class to instantiate is selected based on the "),Nse=n(I4,"CODE",{});var xZr=s(Nse);RMo=r(xZr,"model_type"),xZr.forEach(t),BMo=r(I4,` property of the config object (either
passed as an argument or loaded from `),jse=n(I4,"CODE",{});var kZr=s(jse);PMo=r(kZr,"pretrained_model_name_or_path"),kZr.forEach(t),$Mo=r(I4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dse=n(I4,"CODE",{});var SZr=s(Dse);IMo=r(SZr,"pretrained_model_name_or_path"),SZr.forEach(t),qMo=r(I4,":"),I4.forEach(t),NMo=i(Xt),ne=n(Xt,"UL",{});var le=s(ne);Q1=n(le,"LI",{});var V3e=s(Q1);Gse=n(V3e,"STRONG",{});var RZr=s(Gse);jMo=r(RZr,"bart"),RZr.forEach(t),DMo=r(V3e," \u2014 "),Fq=n(V3e,"A",{href:!0});var BZr=s(Fq);GMo=r(BZr,"BartForConditionalGeneration"),BZr.forEach(t),OMo=r(V3e," (BART model)"),V3e.forEach(t),VMo=i(le),W1=n(le,"LI",{});var X3e=s(W1);Ose=n(X3e,"STRONG",{});var PZr=s(Ose);XMo=r(PZr,"bigbird_pegasus"),PZr.forEach(t),zMo=r(X3e," \u2014 "),Tq=n(X3e,"A",{href:!0});var $Zr=s(Tq);QMo=r($Zr,"BigBirdPegasusForConditionalGeneration"),$Zr.forEach(t),WMo=r(X3e," (BigBirdPegasus model)"),X3e.forEach(t),HMo=i(le),H1=n(le,"LI",{});var z3e=s(H1);Vse=n(z3e,"STRONG",{});var IZr=s(Vse);UMo=r(IZr,"blenderbot"),IZr.forEach(t),JMo=r(z3e," \u2014 "),Mq=n(z3e,"A",{href:!0});var qZr=s(Mq);YMo=r(qZr,"BlenderbotForConditionalGeneration"),qZr.forEach(t),KMo=r(z3e," (Blenderbot model)"),z3e.forEach(t),ZMo=i(le),U1=n(le,"LI",{});var Q3e=s(U1);Xse=n(Q3e,"STRONG",{});var NZr=s(Xse);e4o=r(NZr,"blenderbot-small"),NZr.forEach(t),o4o=r(Q3e," \u2014 "),Eq=n(Q3e,"A",{href:!0});var jZr=s(Eq);r4o=r(jZr,"BlenderbotSmallForConditionalGeneration"),jZr.forEach(t),t4o=r(Q3e," (BlenderbotSmall model)"),Q3e.forEach(t),a4o=i(le),J1=n(le,"LI",{});var W3e=s(J1);zse=n(W3e,"STRONG",{});var DZr=s(zse);n4o=r(DZr,"encoder-decoder"),DZr.forEach(t),s4o=r(W3e," \u2014 "),Cq=n(W3e,"A",{href:!0});var GZr=s(Cq);l4o=r(GZr,"EncoderDecoderModel"),GZr.forEach(t),i4o=r(W3e," (Encoder decoder model)"),W3e.forEach(t),d4o=i(le),Y1=n(le,"LI",{});var H3e=s(Y1);Qse=n(H3e,"STRONG",{});var OZr=s(Qse);c4o=r(OZr,"fsmt"),OZr.forEach(t),f4o=r(H3e," \u2014 "),wq=n(H3e,"A",{href:!0});var VZr=s(wq);m4o=r(VZr,"FSMTForConditionalGeneration"),VZr.forEach(t),g4o=r(H3e," (FairSeq Machine-Translation model)"),H3e.forEach(t),h4o=i(le),K1=n(le,"LI",{});var U3e=s(K1);Wse=n(U3e,"STRONG",{});var XZr=s(Wse);p4o=r(XZr,"led"),XZr.forEach(t),_4o=r(U3e," \u2014 "),Aq=n(U3e,"A",{href:!0});var zZr=s(Aq);u4o=r(zZr,"LEDForConditionalGeneration"),zZr.forEach(t),b4o=r(U3e," (LED model)"),U3e.forEach(t),v4o=i(le),Z1=n(le,"LI",{});var J3e=s(Z1);Hse=n(J3e,"STRONG",{});var QZr=s(Hse);F4o=r(QZr,"m2m_100"),QZr.forEach(t),T4o=r(J3e," \u2014 "),yq=n(J3e,"A",{href:!0});var WZr=s(yq);M4o=r(WZr,"M2M100ForConditionalGeneration"),WZr.forEach(t),E4o=r(J3e," (M2M100 model)"),J3e.forEach(t),C4o=i(le),eb=n(le,"LI",{});var Y3e=s(eb);Use=n(Y3e,"STRONG",{});var HZr=s(Use);w4o=r(HZr,"marian"),HZr.forEach(t),A4o=r(Y3e," \u2014 "),Lq=n(Y3e,"A",{href:!0});var UZr=s(Lq);y4o=r(UZr,"MarianMTModel"),UZr.forEach(t),L4o=r(Y3e," (Marian model)"),Y3e.forEach(t),x4o=i(le),ob=n(le,"LI",{});var K3e=s(ob);Jse=n(K3e,"STRONG",{});var JZr=s(Jse);k4o=r(JZr,"mbart"),JZr.forEach(t),S4o=r(K3e," \u2014 "),xq=n(K3e,"A",{href:!0});var YZr=s(xq);R4o=r(YZr,"MBartForConditionalGeneration"),YZr.forEach(t),B4o=r(K3e," (mBART model)"),K3e.forEach(t),P4o=i(le),rb=n(le,"LI",{});var Z3e=s(rb);Yse=n(Z3e,"STRONG",{});var KZr=s(Yse);$4o=r(KZr,"mt5"),KZr.forEach(t),I4o=r(Z3e," \u2014 "),kq=n(Z3e,"A",{href:!0});var ZZr=s(kq);q4o=r(ZZr,"MT5ForConditionalGeneration"),ZZr.forEach(t),N4o=r(Z3e," (mT5 model)"),Z3e.forEach(t),j4o=i(le),tb=n(le,"LI",{});var eCe=s(tb);Kse=n(eCe,"STRONG",{});var eet=s(Kse);D4o=r(eet,"pegasus"),eet.forEach(t),G4o=r(eCe," \u2014 "),Sq=n(eCe,"A",{href:!0});var oet=s(Sq);O4o=r(oet,"PegasusForConditionalGeneration"),oet.forEach(t),V4o=r(eCe," (Pegasus model)"),eCe.forEach(t),X4o=i(le),ab=n(le,"LI",{});var oCe=s(ab);Zse=n(oCe,"STRONG",{});var ret=s(Zse);z4o=r(ret,"plbart"),ret.forEach(t),Q4o=r(oCe," \u2014 "),Rq=n(oCe,"A",{href:!0});var tet=s(Rq);W4o=r(tet,"PLBartForConditionalGeneration"),tet.forEach(t),H4o=r(oCe," (PLBart model)"),oCe.forEach(t),U4o=i(le),nb=n(le,"LI",{});var rCe=s(nb);ele=n(rCe,"STRONG",{});var aet=s(ele);J4o=r(aet,"prophetnet"),aet.forEach(t),Y4o=r(rCe," \u2014 "),Bq=n(rCe,"A",{href:!0});var net=s(Bq);K4o=r(net,"ProphetNetForConditionalGeneration"),net.forEach(t),Z4o=r(rCe," (ProphetNet model)"),rCe.forEach(t),eEo=i(le),sb=n(le,"LI",{});var tCe=s(sb);ole=n(tCe,"STRONG",{});var set=s(ole);oEo=r(set,"t5"),set.forEach(t),rEo=r(tCe," \u2014 "),Pq=n(tCe,"A",{href:!0});var iet=s(Pq);tEo=r(iet,"T5ForConditionalGeneration"),iet.forEach(t),aEo=r(tCe," (T5 model)"),tCe.forEach(t),nEo=i(le),lb=n(le,"LI",{});var aCe=s(lb);rle=n(aCe,"STRONG",{});var det=s(rle);sEo=r(det,"tapex"),det.forEach(t),lEo=r(aCe," \u2014 "),$q=n(aCe,"A",{href:!0});var cet=s($q);iEo=r(cet,"BartForConditionalGeneration"),cet.forEach(t),dEo=r(aCe," (TAPEX model)"),aCe.forEach(t),cEo=i(le),ib=n(le,"LI",{});var nCe=s(ib);tle=n(nCe,"STRONG",{});var fet=s(tle);fEo=r(fet,"xlm-prophetnet"),fet.forEach(t),mEo=r(nCe," \u2014 "),Iq=n(nCe,"A",{href:!0});var met=s(Iq);gEo=r(met,"XLMProphetNetForConditionalGeneration"),met.forEach(t),hEo=r(nCe," (XLMProphetNet model)"),nCe.forEach(t),le.forEach(t),pEo=i(Xt),db=n(Xt,"P",{});var sCe=s(db);_Eo=r(sCe,"The model is set in evaluation mode by default using "),ale=n(sCe,"CODE",{});var get=s(ale);uEo=r(get,"model.eval()"),get.forEach(t),bEo=r(sCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nle=n(sCe,"CODE",{});var het=s(nle);vEo=r(het,"model.train()"),het.forEach(t),sCe.forEach(t),FEo=i(Xt),sle=n(Xt,"P",{});var pet=s(sle);TEo=r(pet,"Examples:"),pet.forEach(t),MEo=i(Xt),m(V5.$$.fragment,Xt),Xt.forEach(t),tl.forEach(t),sBe=i(c),hd=n(c,"H2",{class:!0});var p$e=s(hd);cb=n(p$e,"A",{id:!0,class:!0,href:!0});var _et=s(cb);lle=n(_et,"SPAN",{});var uet=s(lle);m(X5.$$.fragment,uet),uet.forEach(t),_et.forEach(t),EEo=i(p$e),ile=n(p$e,"SPAN",{});var bet=s(ile);CEo=r(bet,"AutoModelForSequenceClassification"),bet.forEach(t),p$e.forEach(t),lBe=i(c),or=n(c,"DIV",{class:!0});var nl=s(or);m(z5.$$.fragment,nl),wEo=i(nl),pd=n(nl,"P",{});var IU=s(pd);AEo=r(IU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qq=n(IU,"A",{href:!0});var vet=s(qq);yEo=r(vet,"from_pretrained()"),vet.forEach(t),LEo=r(IU," class method or the "),Nq=n(IU,"A",{href:!0});var Fet=s(Nq);xEo=r(Fet,"from_config()"),Fet.forEach(t),kEo=r(IU,` class
method.`),IU.forEach(t),SEo=i(nl),Q5=n(nl,"P",{});var _$e=s(Q5);REo=r(_$e,"This class cannot be instantiated directly using "),dle=n(_$e,"CODE",{});var Tet=s(dle);BEo=r(Tet,"__init__()"),Tet.forEach(t),PEo=r(_$e," (throws an error)."),_$e.forEach(t),$Eo=i(nl),Ur=n(nl,"DIV",{class:!0});var sl=s(Ur);m(W5.$$.fragment,sl),IEo=i(sl),cle=n(sl,"P",{});var Met=s(cle);qEo=r(Met,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Met.forEach(t),NEo=i(sl),_d=n(sl,"P",{});var qU=s(_d);jEo=r(qU,`Note:
Loading a model from its configuration file does `),fle=n(qU,"STRONG",{});var Eet=s(fle);DEo=r(Eet,"not"),Eet.forEach(t),GEo=r(qU,` load the model weights. It only affects the
model\u2019s configuration. Use `),jq=n(qU,"A",{href:!0});var Cet=s(jq);OEo=r(Cet,"from_pretrained()"),Cet.forEach(t),VEo=r(qU," to load the model weights."),qU.forEach(t),XEo=i(sl),mle=n(sl,"P",{});var wet=s(mle);zEo=r(wet,"Examples:"),wet.forEach(t),QEo=i(sl),m(H5.$$.fragment,sl),sl.forEach(t),WEo=i(nl),Oe=n(nl,"DIV",{class:!0});var zt=s(Oe);m(U5.$$.fragment,zt),HEo=i(zt),gle=n(zt,"P",{});var Aet=s(gle);UEo=r(Aet,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Aet.forEach(t),JEo=i(zt),Ua=n(zt,"P",{});var q4=s(Ua);YEo=r(q4,"The model class to instantiate is selected based on the "),hle=n(q4,"CODE",{});var yet=s(hle);KEo=r(yet,"model_type"),yet.forEach(t),ZEo=r(q4,` property of the config object (either
passed as an argument or loaded from `),ple=n(q4,"CODE",{});var Let=s(ple);e5o=r(Let,"pretrained_model_name_or_path"),Let.forEach(t),o5o=r(q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_le=n(q4,"CODE",{});var xet=s(_le);r5o=r(xet,"pretrained_model_name_or_path"),xet.forEach(t),t5o=r(q4,":"),q4.forEach(t),a5o=i(zt),y=n(zt,"UL",{});var L=s(y);fb=n(L,"LI",{});var lCe=s(fb);ule=n(lCe,"STRONG",{});var ket=s(ule);n5o=r(ket,"albert"),ket.forEach(t),s5o=r(lCe," \u2014 "),Dq=n(lCe,"A",{href:!0});var Set=s(Dq);l5o=r(Set,"AlbertForSequenceClassification"),Set.forEach(t),i5o=r(lCe," (ALBERT model)"),lCe.forEach(t),d5o=i(L),mb=n(L,"LI",{});var iCe=s(mb);ble=n(iCe,"STRONG",{});var Ret=s(ble);c5o=r(Ret,"bart"),Ret.forEach(t),f5o=r(iCe," \u2014 "),Gq=n(iCe,"A",{href:!0});var Bet=s(Gq);m5o=r(Bet,"BartForSequenceClassification"),Bet.forEach(t),g5o=r(iCe," (BART model)"),iCe.forEach(t),h5o=i(L),gb=n(L,"LI",{});var dCe=s(gb);vle=n(dCe,"STRONG",{});var Pet=s(vle);p5o=r(Pet,"bert"),Pet.forEach(t),_5o=r(dCe," \u2014 "),Oq=n(dCe,"A",{href:!0});var $et=s(Oq);u5o=r($et,"BertForSequenceClassification"),$et.forEach(t),b5o=r(dCe," (BERT model)"),dCe.forEach(t),v5o=i(L),hb=n(L,"LI",{});var cCe=s(hb);Fle=n(cCe,"STRONG",{});var Iet=s(Fle);F5o=r(Iet,"big_bird"),Iet.forEach(t),T5o=r(cCe," \u2014 "),Vq=n(cCe,"A",{href:!0});var qet=s(Vq);M5o=r(qet,"BigBirdForSequenceClassification"),qet.forEach(t),E5o=r(cCe," (BigBird model)"),cCe.forEach(t),C5o=i(L),pb=n(L,"LI",{});var fCe=s(pb);Tle=n(fCe,"STRONG",{});var Net=s(Tle);w5o=r(Net,"bigbird_pegasus"),Net.forEach(t),A5o=r(fCe," \u2014 "),Xq=n(fCe,"A",{href:!0});var jet=s(Xq);y5o=r(jet,"BigBirdPegasusForSequenceClassification"),jet.forEach(t),L5o=r(fCe," (BigBirdPegasus model)"),fCe.forEach(t),x5o=i(L),_b=n(L,"LI",{});var mCe=s(_b);Mle=n(mCe,"STRONG",{});var Det=s(Mle);k5o=r(Det,"camembert"),Det.forEach(t),S5o=r(mCe," \u2014 "),zq=n(mCe,"A",{href:!0});var Get=s(zq);R5o=r(Get,"CamembertForSequenceClassification"),Get.forEach(t),B5o=r(mCe," (CamemBERT model)"),mCe.forEach(t),P5o=i(L),ub=n(L,"LI",{});var gCe=s(ub);Ele=n(gCe,"STRONG",{});var Oet=s(Ele);$5o=r(Oet,"canine"),Oet.forEach(t),I5o=r(gCe," \u2014 "),Qq=n(gCe,"A",{href:!0});var Vet=s(Qq);q5o=r(Vet,"CanineForSequenceClassification"),Vet.forEach(t),N5o=r(gCe," (Canine model)"),gCe.forEach(t),j5o=i(L),bb=n(L,"LI",{});var hCe=s(bb);Cle=n(hCe,"STRONG",{});var Xet=s(Cle);D5o=r(Xet,"convbert"),Xet.forEach(t),G5o=r(hCe," \u2014 "),Wq=n(hCe,"A",{href:!0});var zet=s(Wq);O5o=r(zet,"ConvBertForSequenceClassification"),zet.forEach(t),V5o=r(hCe," (ConvBERT model)"),hCe.forEach(t),X5o=i(L),vb=n(L,"LI",{});var pCe=s(vb);wle=n(pCe,"STRONG",{});var Qet=s(wle);z5o=r(Qet,"ctrl"),Qet.forEach(t),Q5o=r(pCe," \u2014 "),Hq=n(pCe,"A",{href:!0});var Wet=s(Hq);W5o=r(Wet,"CTRLForSequenceClassification"),Wet.forEach(t),H5o=r(pCe," (CTRL model)"),pCe.forEach(t),U5o=i(L),Fb=n(L,"LI",{});var _Ce=s(Fb);Ale=n(_Ce,"STRONG",{});var Het=s(Ale);J5o=r(Het,"data2vec-text"),Het.forEach(t),Y5o=r(_Ce," \u2014 "),Uq=n(_Ce,"A",{href:!0});var Uet=s(Uq);K5o=r(Uet,"Data2VecTextForSequenceClassification"),Uet.forEach(t),Z5o=r(_Ce," (Data2VecText model)"),_Ce.forEach(t),e3o=i(L),Tb=n(L,"LI",{});var uCe=s(Tb);yle=n(uCe,"STRONG",{});var Jet=s(yle);o3o=r(Jet,"deberta"),Jet.forEach(t),r3o=r(uCe," \u2014 "),Jq=n(uCe,"A",{href:!0});var Yet=s(Jq);t3o=r(Yet,"DebertaForSequenceClassification"),Yet.forEach(t),a3o=r(uCe," (DeBERTa model)"),uCe.forEach(t),n3o=i(L),Mb=n(L,"LI",{});var bCe=s(Mb);Lle=n(bCe,"STRONG",{});var Ket=s(Lle);s3o=r(Ket,"deberta-v2"),Ket.forEach(t),l3o=r(bCe," \u2014 "),Yq=n(bCe,"A",{href:!0});var Zet=s(Yq);i3o=r(Zet,"DebertaV2ForSequenceClassification"),Zet.forEach(t),d3o=r(bCe," (DeBERTa-v2 model)"),bCe.forEach(t),c3o=i(L),Eb=n(L,"LI",{});var vCe=s(Eb);xle=n(vCe,"STRONG",{});var eot=s(xle);f3o=r(eot,"distilbert"),eot.forEach(t),m3o=r(vCe," \u2014 "),Kq=n(vCe,"A",{href:!0});var oot=s(Kq);g3o=r(oot,"DistilBertForSequenceClassification"),oot.forEach(t),h3o=r(vCe," (DistilBERT model)"),vCe.forEach(t),p3o=i(L),Cb=n(L,"LI",{});var FCe=s(Cb);kle=n(FCe,"STRONG",{});var rot=s(kle);_3o=r(rot,"electra"),rot.forEach(t),u3o=r(FCe," \u2014 "),Zq=n(FCe,"A",{href:!0});var tot=s(Zq);b3o=r(tot,"ElectraForSequenceClassification"),tot.forEach(t),v3o=r(FCe," (ELECTRA model)"),FCe.forEach(t),F3o=i(L),wb=n(L,"LI",{});var TCe=s(wb);Sle=n(TCe,"STRONG",{});var aot=s(Sle);T3o=r(aot,"flaubert"),aot.forEach(t),M3o=r(TCe," \u2014 "),eN=n(TCe,"A",{href:!0});var not=s(eN);E3o=r(not,"FlaubertForSequenceClassification"),not.forEach(t),C3o=r(TCe," (FlauBERT model)"),TCe.forEach(t),w3o=i(L),Ab=n(L,"LI",{});var MCe=s(Ab);Rle=n(MCe,"STRONG",{});var sot=s(Rle);A3o=r(sot,"fnet"),sot.forEach(t),y3o=r(MCe," \u2014 "),oN=n(MCe,"A",{href:!0});var lot=s(oN);L3o=r(lot,"FNetForSequenceClassification"),lot.forEach(t),x3o=r(MCe," (FNet model)"),MCe.forEach(t),k3o=i(L),yb=n(L,"LI",{});var ECe=s(yb);Ble=n(ECe,"STRONG",{});var iot=s(Ble);S3o=r(iot,"funnel"),iot.forEach(t),R3o=r(ECe," \u2014 "),rN=n(ECe,"A",{href:!0});var dot=s(rN);B3o=r(dot,"FunnelForSequenceClassification"),dot.forEach(t),P3o=r(ECe," (Funnel Transformer model)"),ECe.forEach(t),$3o=i(L),Lb=n(L,"LI",{});var CCe=s(Lb);Ple=n(CCe,"STRONG",{});var cot=s(Ple);I3o=r(cot,"gpt2"),cot.forEach(t),q3o=r(CCe," \u2014 "),tN=n(CCe,"A",{href:!0});var fot=s(tN);N3o=r(fot,"GPT2ForSequenceClassification"),fot.forEach(t),j3o=r(CCe," (OpenAI GPT-2 model)"),CCe.forEach(t),D3o=i(L),xb=n(L,"LI",{});var wCe=s(xb);$le=n(wCe,"STRONG",{});var mot=s($le);G3o=r(mot,"gpt_neo"),mot.forEach(t),O3o=r(wCe," \u2014 "),aN=n(wCe,"A",{href:!0});var got=s(aN);V3o=r(got,"GPTNeoForSequenceClassification"),got.forEach(t),X3o=r(wCe," (GPT Neo model)"),wCe.forEach(t),z3o=i(L),kb=n(L,"LI",{});var ACe=s(kb);Ile=n(ACe,"STRONG",{});var hot=s(Ile);Q3o=r(hot,"gptj"),hot.forEach(t),W3o=r(ACe," \u2014 "),nN=n(ACe,"A",{href:!0});var pot=s(nN);H3o=r(pot,"GPTJForSequenceClassification"),pot.forEach(t),U3o=r(ACe," (GPT-J model)"),ACe.forEach(t),J3o=i(L),Sb=n(L,"LI",{});var yCe=s(Sb);qle=n(yCe,"STRONG",{});var _ot=s(qle);Y3o=r(_ot,"ibert"),_ot.forEach(t),K3o=r(yCe," \u2014 "),sN=n(yCe,"A",{href:!0});var uot=s(sN);Z3o=r(uot,"IBertForSequenceClassification"),uot.forEach(t),eCo=r(yCe," (I-BERT model)"),yCe.forEach(t),oCo=i(L),Rb=n(L,"LI",{});var LCe=s(Rb);Nle=n(LCe,"STRONG",{});var bot=s(Nle);rCo=r(bot,"layoutlm"),bot.forEach(t),tCo=r(LCe," \u2014 "),lN=n(LCe,"A",{href:!0});var vot=s(lN);aCo=r(vot,"LayoutLMForSequenceClassification"),vot.forEach(t),nCo=r(LCe," (LayoutLM model)"),LCe.forEach(t),sCo=i(L),Bb=n(L,"LI",{});var xCe=s(Bb);jle=n(xCe,"STRONG",{});var Fot=s(jle);lCo=r(Fot,"layoutlmv2"),Fot.forEach(t),iCo=r(xCe," \u2014 "),iN=n(xCe,"A",{href:!0});var Tot=s(iN);dCo=r(Tot,"LayoutLMv2ForSequenceClassification"),Tot.forEach(t),cCo=r(xCe," (LayoutLMv2 model)"),xCe.forEach(t),fCo=i(L),Pb=n(L,"LI",{});var kCe=s(Pb);Dle=n(kCe,"STRONG",{});var Mot=s(Dle);mCo=r(Mot,"led"),Mot.forEach(t),gCo=r(kCe," \u2014 "),dN=n(kCe,"A",{href:!0});var Eot=s(dN);hCo=r(Eot,"LEDForSequenceClassification"),Eot.forEach(t),pCo=r(kCe," (LED model)"),kCe.forEach(t),_Co=i(L),$b=n(L,"LI",{});var SCe=s($b);Gle=n(SCe,"STRONG",{});var Cot=s(Gle);uCo=r(Cot,"longformer"),Cot.forEach(t),bCo=r(SCe," \u2014 "),cN=n(SCe,"A",{href:!0});var wot=s(cN);vCo=r(wot,"LongformerForSequenceClassification"),wot.forEach(t),FCo=r(SCe," (Longformer model)"),SCe.forEach(t),TCo=i(L),Ib=n(L,"LI",{});var RCe=s(Ib);Ole=n(RCe,"STRONG",{});var Aot=s(Ole);MCo=r(Aot,"mbart"),Aot.forEach(t),ECo=r(RCe," \u2014 "),fN=n(RCe,"A",{href:!0});var yot=s(fN);CCo=r(yot,"MBartForSequenceClassification"),yot.forEach(t),wCo=r(RCe," (mBART model)"),RCe.forEach(t),ACo=i(L),qb=n(L,"LI",{});var BCe=s(qb);Vle=n(BCe,"STRONG",{});var Lot=s(Vle);yCo=r(Lot,"megatron-bert"),Lot.forEach(t),LCo=r(BCe," \u2014 "),mN=n(BCe,"A",{href:!0});var xot=s(mN);xCo=r(xot,"MegatronBertForSequenceClassification"),xot.forEach(t),kCo=r(BCe," (MegatronBert model)"),BCe.forEach(t),SCo=i(L),Nb=n(L,"LI",{});var PCe=s(Nb);Xle=n(PCe,"STRONG",{});var kot=s(Xle);RCo=r(kot,"mobilebert"),kot.forEach(t),BCo=r(PCe," \u2014 "),gN=n(PCe,"A",{href:!0});var Sot=s(gN);PCo=r(Sot,"MobileBertForSequenceClassification"),Sot.forEach(t),$Co=r(PCe," (MobileBERT model)"),PCe.forEach(t),ICo=i(L),jb=n(L,"LI",{});var $Ce=s(jb);zle=n($Ce,"STRONG",{});var Rot=s(zle);qCo=r(Rot,"mpnet"),Rot.forEach(t),NCo=r($Ce," \u2014 "),hN=n($Ce,"A",{href:!0});var Bot=s(hN);jCo=r(Bot,"MPNetForSequenceClassification"),Bot.forEach(t),DCo=r($Ce," (MPNet model)"),$Ce.forEach(t),GCo=i(L),Db=n(L,"LI",{});var ICe=s(Db);Qle=n(ICe,"STRONG",{});var Pot=s(Qle);OCo=r(Pot,"nystromformer"),Pot.forEach(t),VCo=r(ICe," \u2014 "),pN=n(ICe,"A",{href:!0});var $ot=s(pN);XCo=r($ot,"NystromformerForSequenceClassification"),$ot.forEach(t),zCo=r(ICe," (Nystromformer model)"),ICe.forEach(t),QCo=i(L),Gb=n(L,"LI",{});var qCe=s(Gb);Wle=n(qCe,"STRONG",{});var Iot=s(Wle);WCo=r(Iot,"openai-gpt"),Iot.forEach(t),HCo=r(qCe," \u2014 "),_N=n(qCe,"A",{href:!0});var qot=s(_N);UCo=r(qot,"OpenAIGPTForSequenceClassification"),qot.forEach(t),JCo=r(qCe," (OpenAI GPT model)"),qCe.forEach(t),YCo=i(L),Ob=n(L,"LI",{});var NCe=s(Ob);Hle=n(NCe,"STRONG",{});var Not=s(Hle);KCo=r(Not,"perceiver"),Not.forEach(t),ZCo=r(NCe," \u2014 "),uN=n(NCe,"A",{href:!0});var jot=s(uN);ewo=r(jot,"PerceiverForSequenceClassification"),jot.forEach(t),owo=r(NCe," (Perceiver model)"),NCe.forEach(t),rwo=i(L),Vb=n(L,"LI",{});var jCe=s(Vb);Ule=n(jCe,"STRONG",{});var Dot=s(Ule);two=r(Dot,"plbart"),Dot.forEach(t),awo=r(jCe," \u2014 "),bN=n(jCe,"A",{href:!0});var Got=s(bN);nwo=r(Got,"PLBartForSequenceClassification"),Got.forEach(t),swo=r(jCe," (PLBart model)"),jCe.forEach(t),lwo=i(L),Xb=n(L,"LI",{});var DCe=s(Xb);Jle=n(DCe,"STRONG",{});var Oot=s(Jle);iwo=r(Oot,"qdqbert"),Oot.forEach(t),dwo=r(DCe," \u2014 "),vN=n(DCe,"A",{href:!0});var Vot=s(vN);cwo=r(Vot,"QDQBertForSequenceClassification"),Vot.forEach(t),fwo=r(DCe," (QDQBert model)"),DCe.forEach(t),mwo=i(L),zb=n(L,"LI",{});var GCe=s(zb);Yle=n(GCe,"STRONG",{});var Xot=s(Yle);gwo=r(Xot,"reformer"),Xot.forEach(t),hwo=r(GCe," \u2014 "),FN=n(GCe,"A",{href:!0});var zot=s(FN);pwo=r(zot,"ReformerForSequenceClassification"),zot.forEach(t),_wo=r(GCe," (Reformer model)"),GCe.forEach(t),uwo=i(L),Qb=n(L,"LI",{});var OCe=s(Qb);Kle=n(OCe,"STRONG",{});var Qot=s(Kle);bwo=r(Qot,"rembert"),Qot.forEach(t),vwo=r(OCe," \u2014 "),TN=n(OCe,"A",{href:!0});var Wot=s(TN);Fwo=r(Wot,"RemBertForSequenceClassification"),Wot.forEach(t),Two=r(OCe," (RemBERT model)"),OCe.forEach(t),Mwo=i(L),Wb=n(L,"LI",{});var VCe=s(Wb);Zle=n(VCe,"STRONG",{});var Hot=s(Zle);Ewo=r(Hot,"roberta"),Hot.forEach(t),Cwo=r(VCe," \u2014 "),MN=n(VCe,"A",{href:!0});var Uot=s(MN);wwo=r(Uot,"RobertaForSequenceClassification"),Uot.forEach(t),Awo=r(VCe," (RoBERTa model)"),VCe.forEach(t),ywo=i(L),Hb=n(L,"LI",{});var XCe=s(Hb);eie=n(XCe,"STRONG",{});var Jot=s(eie);Lwo=r(Jot,"roformer"),Jot.forEach(t),xwo=r(XCe," \u2014 "),EN=n(XCe,"A",{href:!0});var Yot=s(EN);kwo=r(Yot,"RoFormerForSequenceClassification"),Yot.forEach(t),Swo=r(XCe," (RoFormer model)"),XCe.forEach(t),Rwo=i(L),Ub=n(L,"LI",{});var zCe=s(Ub);oie=n(zCe,"STRONG",{});var Kot=s(oie);Bwo=r(Kot,"squeezebert"),Kot.forEach(t),Pwo=r(zCe," \u2014 "),CN=n(zCe,"A",{href:!0});var Zot=s(CN);$wo=r(Zot,"SqueezeBertForSequenceClassification"),Zot.forEach(t),Iwo=r(zCe," (SqueezeBERT model)"),zCe.forEach(t),qwo=i(L),Jb=n(L,"LI",{});var QCe=s(Jb);rie=n(QCe,"STRONG",{});var ert=s(rie);Nwo=r(ert,"tapas"),ert.forEach(t),jwo=r(QCe," \u2014 "),wN=n(QCe,"A",{href:!0});var ort=s(wN);Dwo=r(ort,"TapasForSequenceClassification"),ort.forEach(t),Gwo=r(QCe," (TAPAS model)"),QCe.forEach(t),Owo=i(L),Yb=n(L,"LI",{});var WCe=s(Yb);tie=n(WCe,"STRONG",{});var rrt=s(tie);Vwo=r(rrt,"tapex"),rrt.forEach(t),Xwo=r(WCe," \u2014 "),AN=n(WCe,"A",{href:!0});var trt=s(AN);zwo=r(trt,"BartForSequenceClassification"),trt.forEach(t),Qwo=r(WCe," (TAPEX model)"),WCe.forEach(t),Wwo=i(L),Kb=n(L,"LI",{});var HCe=s(Kb);aie=n(HCe,"STRONG",{});var art=s(aie);Hwo=r(art,"transfo-xl"),art.forEach(t),Uwo=r(HCe," \u2014 "),yN=n(HCe,"A",{href:!0});var nrt=s(yN);Jwo=r(nrt,"TransfoXLForSequenceClassification"),nrt.forEach(t),Ywo=r(HCe," (Transformer-XL model)"),HCe.forEach(t),Kwo=i(L),Zb=n(L,"LI",{});var UCe=s(Zb);nie=n(UCe,"STRONG",{});var srt=s(nie);Zwo=r(srt,"xlm"),srt.forEach(t),eAo=r(UCe," \u2014 "),LN=n(UCe,"A",{href:!0});var lrt=s(LN);oAo=r(lrt,"XLMForSequenceClassification"),lrt.forEach(t),rAo=r(UCe," (XLM model)"),UCe.forEach(t),tAo=i(L),e2=n(L,"LI",{});var JCe=s(e2);sie=n(JCe,"STRONG",{});var irt=s(sie);aAo=r(irt,"xlm-roberta"),irt.forEach(t),nAo=r(JCe," \u2014 "),xN=n(JCe,"A",{href:!0});var drt=s(xN);sAo=r(drt,"XLMRobertaForSequenceClassification"),drt.forEach(t),lAo=r(JCe," (XLM-RoBERTa model)"),JCe.forEach(t),iAo=i(L),o2=n(L,"LI",{});var YCe=s(o2);lie=n(YCe,"STRONG",{});var crt=s(lie);dAo=r(crt,"xlm-roberta-xl"),crt.forEach(t),cAo=r(YCe," \u2014 "),kN=n(YCe,"A",{href:!0});var frt=s(kN);fAo=r(frt,"XLMRobertaXLForSequenceClassification"),frt.forEach(t),mAo=r(YCe," (XLM-RoBERTa-XL model)"),YCe.forEach(t),gAo=i(L),r2=n(L,"LI",{});var KCe=s(r2);iie=n(KCe,"STRONG",{});var mrt=s(iie);hAo=r(mrt,"xlnet"),mrt.forEach(t),pAo=r(KCe," \u2014 "),SN=n(KCe,"A",{href:!0});var grt=s(SN);_Ao=r(grt,"XLNetForSequenceClassification"),grt.forEach(t),uAo=r(KCe," (XLNet model)"),KCe.forEach(t),bAo=i(L),t2=n(L,"LI",{});var ZCe=s(t2);die=n(ZCe,"STRONG",{});var hrt=s(die);vAo=r(hrt,"yoso"),hrt.forEach(t),FAo=r(ZCe," \u2014 "),RN=n(ZCe,"A",{href:!0});var prt=s(RN);TAo=r(prt,"YosoForSequenceClassification"),prt.forEach(t),MAo=r(ZCe," (YOSO model)"),ZCe.forEach(t),L.forEach(t),EAo=i(zt),a2=n(zt,"P",{});var ewe=s(a2);CAo=r(ewe,"The model is set in evaluation mode by default using "),cie=n(ewe,"CODE",{});var _rt=s(cie);wAo=r(_rt,"model.eval()"),_rt.forEach(t),AAo=r(ewe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fie=n(ewe,"CODE",{});var urt=s(fie);yAo=r(urt,"model.train()"),urt.forEach(t),ewe.forEach(t),LAo=i(zt),mie=n(zt,"P",{});var brt=s(mie);xAo=r(brt,"Examples:"),brt.forEach(t),kAo=i(zt),m(J5.$$.fragment,zt),zt.forEach(t),nl.forEach(t),iBe=i(c),ud=n(c,"H2",{class:!0});var u$e=s(ud);n2=n(u$e,"A",{id:!0,class:!0,href:!0});var vrt=s(n2);gie=n(vrt,"SPAN",{});var Frt=s(gie);m(Y5.$$.fragment,Frt),Frt.forEach(t),vrt.forEach(t),SAo=i(u$e),hie=n(u$e,"SPAN",{});var Trt=s(hie);RAo=r(Trt,"AutoModelForMultipleChoice"),Trt.forEach(t),u$e.forEach(t),dBe=i(c),rr=n(c,"DIV",{class:!0});var ll=s(rr);m(K5.$$.fragment,ll),BAo=i(ll),bd=n(ll,"P",{});var NU=s(bd);PAo=r(NU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),BN=n(NU,"A",{href:!0});var Mrt=s(BN);$Ao=r(Mrt,"from_pretrained()"),Mrt.forEach(t),IAo=r(NU," class method or the "),PN=n(NU,"A",{href:!0});var Ert=s(PN);qAo=r(Ert,"from_config()"),Ert.forEach(t),NAo=r(NU,` class
method.`),NU.forEach(t),jAo=i(ll),Z5=n(ll,"P",{});var b$e=s(Z5);DAo=r(b$e,"This class cannot be instantiated directly using "),pie=n(b$e,"CODE",{});var Crt=s(pie);GAo=r(Crt,"__init__()"),Crt.forEach(t),OAo=r(b$e," (throws an error)."),b$e.forEach(t),VAo=i(ll),Jr=n(ll,"DIV",{class:!0});var il=s(Jr);m(e3.$$.fragment,il),XAo=i(il),_ie=n(il,"P",{});var wrt=s(_ie);zAo=r(wrt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wrt.forEach(t),QAo=i(il),vd=n(il,"P",{});var jU=s(vd);WAo=r(jU,`Note:
Loading a model from its configuration file does `),uie=n(jU,"STRONG",{});var Art=s(uie);HAo=r(Art,"not"),Art.forEach(t),UAo=r(jU,` load the model weights. It only affects the
model\u2019s configuration. Use `),$N=n(jU,"A",{href:!0});var yrt=s($N);JAo=r(yrt,"from_pretrained()"),yrt.forEach(t),YAo=r(jU," to load the model weights."),jU.forEach(t),KAo=i(il),bie=n(il,"P",{});var Lrt=s(bie);ZAo=r(Lrt,"Examples:"),Lrt.forEach(t),e0o=i(il),m(o3.$$.fragment,il),il.forEach(t),o0o=i(ll),Ve=n(ll,"DIV",{class:!0});var Qt=s(Ve);m(r3.$$.fragment,Qt),r0o=i(Qt),vie=n(Qt,"P",{});var xrt=s(vie);t0o=r(xrt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xrt.forEach(t),a0o=i(Qt),Ja=n(Qt,"P",{});var N4=s(Ja);n0o=r(N4,"The model class to instantiate is selected based on the "),Fie=n(N4,"CODE",{});var krt=s(Fie);s0o=r(krt,"model_type"),krt.forEach(t),l0o=r(N4,` property of the config object (either
passed as an argument or loaded from `),Tie=n(N4,"CODE",{});var Srt=s(Tie);i0o=r(Srt,"pretrained_model_name_or_path"),Srt.forEach(t),d0o=r(N4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=n(N4,"CODE",{});var Rrt=s(Mie);c0o=r(Rrt,"pretrained_model_name_or_path"),Rrt.forEach(t),f0o=r(N4,":"),N4.forEach(t),m0o=i(Qt),G=n(Qt,"UL",{});var O=s(G);s2=n(O,"LI",{});var owe=s(s2);Eie=n(owe,"STRONG",{});var Brt=s(Eie);g0o=r(Brt,"albert"),Brt.forEach(t),h0o=r(owe," \u2014 "),IN=n(owe,"A",{href:!0});var Prt=s(IN);p0o=r(Prt,"AlbertForMultipleChoice"),Prt.forEach(t),_0o=r(owe," (ALBERT model)"),owe.forEach(t),u0o=i(O),l2=n(O,"LI",{});var rwe=s(l2);Cie=n(rwe,"STRONG",{});var $rt=s(Cie);b0o=r($rt,"bert"),$rt.forEach(t),v0o=r(rwe," \u2014 "),qN=n(rwe,"A",{href:!0});var Irt=s(qN);F0o=r(Irt,"BertForMultipleChoice"),Irt.forEach(t),T0o=r(rwe," (BERT model)"),rwe.forEach(t),M0o=i(O),i2=n(O,"LI",{});var twe=s(i2);wie=n(twe,"STRONG",{});var qrt=s(wie);E0o=r(qrt,"big_bird"),qrt.forEach(t),C0o=r(twe," \u2014 "),NN=n(twe,"A",{href:!0});var Nrt=s(NN);w0o=r(Nrt,"BigBirdForMultipleChoice"),Nrt.forEach(t),A0o=r(twe," (BigBird model)"),twe.forEach(t),y0o=i(O),d2=n(O,"LI",{});var awe=s(d2);Aie=n(awe,"STRONG",{});var jrt=s(Aie);L0o=r(jrt,"camembert"),jrt.forEach(t),x0o=r(awe," \u2014 "),jN=n(awe,"A",{href:!0});var Drt=s(jN);k0o=r(Drt,"CamembertForMultipleChoice"),Drt.forEach(t),S0o=r(awe," (CamemBERT model)"),awe.forEach(t),R0o=i(O),c2=n(O,"LI",{});var nwe=s(c2);yie=n(nwe,"STRONG",{});var Grt=s(yie);B0o=r(Grt,"canine"),Grt.forEach(t),P0o=r(nwe," \u2014 "),DN=n(nwe,"A",{href:!0});var Ort=s(DN);$0o=r(Ort,"CanineForMultipleChoice"),Ort.forEach(t),I0o=r(nwe," (Canine model)"),nwe.forEach(t),q0o=i(O),f2=n(O,"LI",{});var swe=s(f2);Lie=n(swe,"STRONG",{});var Vrt=s(Lie);N0o=r(Vrt,"convbert"),Vrt.forEach(t),j0o=r(swe," \u2014 "),GN=n(swe,"A",{href:!0});var Xrt=s(GN);D0o=r(Xrt,"ConvBertForMultipleChoice"),Xrt.forEach(t),G0o=r(swe," (ConvBERT model)"),swe.forEach(t),O0o=i(O),m2=n(O,"LI",{});var lwe=s(m2);xie=n(lwe,"STRONG",{});var zrt=s(xie);V0o=r(zrt,"data2vec-text"),zrt.forEach(t),X0o=r(lwe," \u2014 "),ON=n(lwe,"A",{href:!0});var Qrt=s(ON);z0o=r(Qrt,"Data2VecTextForMultipleChoice"),Qrt.forEach(t),Q0o=r(lwe," (Data2VecText model)"),lwe.forEach(t),W0o=i(O),g2=n(O,"LI",{});var iwe=s(g2);kie=n(iwe,"STRONG",{});var Wrt=s(kie);H0o=r(Wrt,"distilbert"),Wrt.forEach(t),U0o=r(iwe," \u2014 "),VN=n(iwe,"A",{href:!0});var Hrt=s(VN);J0o=r(Hrt,"DistilBertForMultipleChoice"),Hrt.forEach(t),Y0o=r(iwe," (DistilBERT model)"),iwe.forEach(t),K0o=i(O),h2=n(O,"LI",{});var dwe=s(h2);Sie=n(dwe,"STRONG",{});var Urt=s(Sie);Z0o=r(Urt,"electra"),Urt.forEach(t),eyo=r(dwe," \u2014 "),XN=n(dwe,"A",{href:!0});var Jrt=s(XN);oyo=r(Jrt,"ElectraForMultipleChoice"),Jrt.forEach(t),ryo=r(dwe," (ELECTRA model)"),dwe.forEach(t),tyo=i(O),p2=n(O,"LI",{});var cwe=s(p2);Rie=n(cwe,"STRONG",{});var Yrt=s(Rie);ayo=r(Yrt,"flaubert"),Yrt.forEach(t),nyo=r(cwe," \u2014 "),zN=n(cwe,"A",{href:!0});var Krt=s(zN);syo=r(Krt,"FlaubertForMultipleChoice"),Krt.forEach(t),lyo=r(cwe," (FlauBERT model)"),cwe.forEach(t),iyo=i(O),_2=n(O,"LI",{});var fwe=s(_2);Bie=n(fwe,"STRONG",{});var Zrt=s(Bie);dyo=r(Zrt,"fnet"),Zrt.forEach(t),cyo=r(fwe," \u2014 "),QN=n(fwe,"A",{href:!0});var ett=s(QN);fyo=r(ett,"FNetForMultipleChoice"),ett.forEach(t),myo=r(fwe," (FNet model)"),fwe.forEach(t),gyo=i(O),u2=n(O,"LI",{});var mwe=s(u2);Pie=n(mwe,"STRONG",{});var ott=s(Pie);hyo=r(ott,"funnel"),ott.forEach(t),pyo=r(mwe," \u2014 "),WN=n(mwe,"A",{href:!0});var rtt=s(WN);_yo=r(rtt,"FunnelForMultipleChoice"),rtt.forEach(t),uyo=r(mwe," (Funnel Transformer model)"),mwe.forEach(t),byo=i(O),b2=n(O,"LI",{});var gwe=s(b2);$ie=n(gwe,"STRONG",{});var ttt=s($ie);vyo=r(ttt,"ibert"),ttt.forEach(t),Fyo=r(gwe," \u2014 "),HN=n(gwe,"A",{href:!0});var att=s(HN);Tyo=r(att,"IBertForMultipleChoice"),att.forEach(t),Myo=r(gwe," (I-BERT model)"),gwe.forEach(t),Eyo=i(O),v2=n(O,"LI",{});var hwe=s(v2);Iie=n(hwe,"STRONG",{});var ntt=s(Iie);Cyo=r(ntt,"longformer"),ntt.forEach(t),wyo=r(hwe," \u2014 "),UN=n(hwe,"A",{href:!0});var stt=s(UN);Ayo=r(stt,"LongformerForMultipleChoice"),stt.forEach(t),yyo=r(hwe," (Longformer model)"),hwe.forEach(t),Lyo=i(O),F2=n(O,"LI",{});var pwe=s(F2);qie=n(pwe,"STRONG",{});var ltt=s(qie);xyo=r(ltt,"megatron-bert"),ltt.forEach(t),kyo=r(pwe," \u2014 "),JN=n(pwe,"A",{href:!0});var itt=s(JN);Syo=r(itt,"MegatronBertForMultipleChoice"),itt.forEach(t),Ryo=r(pwe," (MegatronBert model)"),pwe.forEach(t),Byo=i(O),T2=n(O,"LI",{});var _we=s(T2);Nie=n(_we,"STRONG",{});var dtt=s(Nie);Pyo=r(dtt,"mobilebert"),dtt.forEach(t),$yo=r(_we," \u2014 "),YN=n(_we,"A",{href:!0});var ctt=s(YN);Iyo=r(ctt,"MobileBertForMultipleChoice"),ctt.forEach(t),qyo=r(_we," (MobileBERT model)"),_we.forEach(t),Nyo=i(O),M2=n(O,"LI",{});var uwe=s(M2);jie=n(uwe,"STRONG",{});var ftt=s(jie);jyo=r(ftt,"mpnet"),ftt.forEach(t),Dyo=r(uwe," \u2014 "),KN=n(uwe,"A",{href:!0});var mtt=s(KN);Gyo=r(mtt,"MPNetForMultipleChoice"),mtt.forEach(t),Oyo=r(uwe," (MPNet model)"),uwe.forEach(t),Vyo=i(O),E2=n(O,"LI",{});var bwe=s(E2);Die=n(bwe,"STRONG",{});var gtt=s(Die);Xyo=r(gtt,"nystromformer"),gtt.forEach(t),zyo=r(bwe," \u2014 "),ZN=n(bwe,"A",{href:!0});var htt=s(ZN);Qyo=r(htt,"NystromformerForMultipleChoice"),htt.forEach(t),Wyo=r(bwe," (Nystromformer model)"),bwe.forEach(t),Hyo=i(O),C2=n(O,"LI",{});var vwe=s(C2);Gie=n(vwe,"STRONG",{});var ptt=s(Gie);Uyo=r(ptt,"qdqbert"),ptt.forEach(t),Jyo=r(vwe," \u2014 "),ej=n(vwe,"A",{href:!0});var _tt=s(ej);Yyo=r(_tt,"QDQBertForMultipleChoice"),_tt.forEach(t),Kyo=r(vwe," (QDQBert model)"),vwe.forEach(t),Zyo=i(O),w2=n(O,"LI",{});var Fwe=s(w2);Oie=n(Fwe,"STRONG",{});var utt=s(Oie);eLo=r(utt,"rembert"),utt.forEach(t),oLo=r(Fwe," \u2014 "),oj=n(Fwe,"A",{href:!0});var btt=s(oj);rLo=r(btt,"RemBertForMultipleChoice"),btt.forEach(t),tLo=r(Fwe," (RemBERT model)"),Fwe.forEach(t),aLo=i(O),A2=n(O,"LI",{});var Twe=s(A2);Vie=n(Twe,"STRONG",{});var vtt=s(Vie);nLo=r(vtt,"roberta"),vtt.forEach(t),sLo=r(Twe," \u2014 "),rj=n(Twe,"A",{href:!0});var Ftt=s(rj);lLo=r(Ftt,"RobertaForMultipleChoice"),Ftt.forEach(t),iLo=r(Twe," (RoBERTa model)"),Twe.forEach(t),dLo=i(O),y2=n(O,"LI",{});var Mwe=s(y2);Xie=n(Mwe,"STRONG",{});var Ttt=s(Xie);cLo=r(Ttt,"roformer"),Ttt.forEach(t),fLo=r(Mwe," \u2014 "),tj=n(Mwe,"A",{href:!0});var Mtt=s(tj);mLo=r(Mtt,"RoFormerForMultipleChoice"),Mtt.forEach(t),gLo=r(Mwe," (RoFormer model)"),Mwe.forEach(t),hLo=i(O),L2=n(O,"LI",{});var Ewe=s(L2);zie=n(Ewe,"STRONG",{});var Ett=s(zie);pLo=r(Ett,"squeezebert"),Ett.forEach(t),_Lo=r(Ewe," \u2014 "),aj=n(Ewe,"A",{href:!0});var Ctt=s(aj);uLo=r(Ctt,"SqueezeBertForMultipleChoice"),Ctt.forEach(t),bLo=r(Ewe," (SqueezeBERT model)"),Ewe.forEach(t),vLo=i(O),x2=n(O,"LI",{});var Cwe=s(x2);Qie=n(Cwe,"STRONG",{});var wtt=s(Qie);FLo=r(wtt,"xlm"),wtt.forEach(t),TLo=r(Cwe," \u2014 "),nj=n(Cwe,"A",{href:!0});var Att=s(nj);MLo=r(Att,"XLMForMultipleChoice"),Att.forEach(t),ELo=r(Cwe," (XLM model)"),Cwe.forEach(t),CLo=i(O),k2=n(O,"LI",{});var wwe=s(k2);Wie=n(wwe,"STRONG",{});var ytt=s(Wie);wLo=r(ytt,"xlm-roberta"),ytt.forEach(t),ALo=r(wwe," \u2014 "),sj=n(wwe,"A",{href:!0});var Ltt=s(sj);yLo=r(Ltt,"XLMRobertaForMultipleChoice"),Ltt.forEach(t),LLo=r(wwe," (XLM-RoBERTa model)"),wwe.forEach(t),xLo=i(O),S2=n(O,"LI",{});var Awe=s(S2);Hie=n(Awe,"STRONG",{});var xtt=s(Hie);kLo=r(xtt,"xlm-roberta-xl"),xtt.forEach(t),SLo=r(Awe," \u2014 "),lj=n(Awe,"A",{href:!0});var ktt=s(lj);RLo=r(ktt,"XLMRobertaXLForMultipleChoice"),ktt.forEach(t),BLo=r(Awe," (XLM-RoBERTa-XL model)"),Awe.forEach(t),PLo=i(O),R2=n(O,"LI",{});var ywe=s(R2);Uie=n(ywe,"STRONG",{});var Stt=s(Uie);$Lo=r(Stt,"xlnet"),Stt.forEach(t),ILo=r(ywe," \u2014 "),ij=n(ywe,"A",{href:!0});var Rtt=s(ij);qLo=r(Rtt,"XLNetForMultipleChoice"),Rtt.forEach(t),NLo=r(ywe," (XLNet model)"),ywe.forEach(t),jLo=i(O),B2=n(O,"LI",{});var Lwe=s(B2);Jie=n(Lwe,"STRONG",{});var Btt=s(Jie);DLo=r(Btt,"yoso"),Btt.forEach(t),GLo=r(Lwe," \u2014 "),dj=n(Lwe,"A",{href:!0});var Ptt=s(dj);OLo=r(Ptt,"YosoForMultipleChoice"),Ptt.forEach(t),VLo=r(Lwe," (YOSO model)"),Lwe.forEach(t),O.forEach(t),XLo=i(Qt),P2=n(Qt,"P",{});var xwe=s(P2);zLo=r(xwe,"The model is set in evaluation mode by default using "),Yie=n(xwe,"CODE",{});var $tt=s(Yie);QLo=r($tt,"model.eval()"),$tt.forEach(t),WLo=r(xwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kie=n(xwe,"CODE",{});var Itt=s(Kie);HLo=r(Itt,"model.train()"),Itt.forEach(t),xwe.forEach(t),ULo=i(Qt),Zie=n(Qt,"P",{});var qtt=s(Zie);JLo=r(qtt,"Examples:"),qtt.forEach(t),YLo=i(Qt),m(t3.$$.fragment,Qt),Qt.forEach(t),ll.forEach(t),cBe=i(c),Fd=n(c,"H2",{class:!0});var v$e=s(Fd);$2=n(v$e,"A",{id:!0,class:!0,href:!0});var Ntt=s($2);ede=n(Ntt,"SPAN",{});var jtt=s(ede);m(a3.$$.fragment,jtt),jtt.forEach(t),Ntt.forEach(t),KLo=i(v$e),ode=n(v$e,"SPAN",{});var Dtt=s(ode);ZLo=r(Dtt,"AutoModelForNextSentencePrediction"),Dtt.forEach(t),v$e.forEach(t),fBe=i(c),tr=n(c,"DIV",{class:!0});var dl=s(tr);m(n3.$$.fragment,dl),exo=i(dl),Td=n(dl,"P",{});var DU=s(Td);oxo=r(DU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cj=n(DU,"A",{href:!0});var Gtt=s(cj);rxo=r(Gtt,"from_pretrained()"),Gtt.forEach(t),txo=r(DU," class method or the "),fj=n(DU,"A",{href:!0});var Ott=s(fj);axo=r(Ott,"from_config()"),Ott.forEach(t),nxo=r(DU,` class
method.`),DU.forEach(t),sxo=i(dl),s3=n(dl,"P",{});var F$e=s(s3);lxo=r(F$e,"This class cannot be instantiated directly using "),rde=n(F$e,"CODE",{});var Vtt=s(rde);ixo=r(Vtt,"__init__()"),Vtt.forEach(t),dxo=r(F$e," (throws an error)."),F$e.forEach(t),cxo=i(dl),Yr=n(dl,"DIV",{class:!0});var cl=s(Yr);m(l3.$$.fragment,cl),fxo=i(cl),tde=n(cl,"P",{});var Xtt=s(tde);mxo=r(Xtt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Xtt.forEach(t),gxo=i(cl),Md=n(cl,"P",{});var GU=s(Md);hxo=r(GU,`Note:
Loading a model from its configuration file does `),ade=n(GU,"STRONG",{});var ztt=s(ade);pxo=r(ztt,"not"),ztt.forEach(t),_xo=r(GU,` load the model weights. It only affects the
model\u2019s configuration. Use `),mj=n(GU,"A",{href:!0});var Qtt=s(mj);uxo=r(Qtt,"from_pretrained()"),Qtt.forEach(t),bxo=r(GU," to load the model weights."),GU.forEach(t),vxo=i(cl),nde=n(cl,"P",{});var Wtt=s(nde);Fxo=r(Wtt,"Examples:"),Wtt.forEach(t),Txo=i(cl),m(i3.$$.fragment,cl),cl.forEach(t),Mxo=i(dl),Xe=n(dl,"DIV",{class:!0});var Wt=s(Xe);m(d3.$$.fragment,Wt),Exo=i(Wt),sde=n(Wt,"P",{});var Htt=s(sde);Cxo=r(Htt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Htt.forEach(t),wxo=i(Wt),Ya=n(Wt,"P",{});var j4=s(Ya);Axo=r(j4,"The model class to instantiate is selected based on the "),lde=n(j4,"CODE",{});var Utt=s(lde);yxo=r(Utt,"model_type"),Utt.forEach(t),Lxo=r(j4,` property of the config object (either
passed as an argument or loaded from `),ide=n(j4,"CODE",{});var Jtt=s(ide);xxo=r(Jtt,"pretrained_model_name_or_path"),Jtt.forEach(t),kxo=r(j4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dde=n(j4,"CODE",{});var Ytt=s(dde);Sxo=r(Ytt,"pretrained_model_name_or_path"),Ytt.forEach(t),Rxo=r(j4,":"),j4.forEach(t),Bxo=i(Wt),da=n(Wt,"UL",{});var fl=s(da);I2=n(fl,"LI",{});var kwe=s(I2);cde=n(kwe,"STRONG",{});var Ktt=s(cde);Pxo=r(Ktt,"bert"),Ktt.forEach(t),$xo=r(kwe," \u2014 "),gj=n(kwe,"A",{href:!0});var Ztt=s(gj);Ixo=r(Ztt,"BertForNextSentencePrediction"),Ztt.forEach(t),qxo=r(kwe," (BERT model)"),kwe.forEach(t),Nxo=i(fl),q2=n(fl,"LI",{});var Swe=s(q2);fde=n(Swe,"STRONG",{});var eat=s(fde);jxo=r(eat,"fnet"),eat.forEach(t),Dxo=r(Swe," \u2014 "),hj=n(Swe,"A",{href:!0});var oat=s(hj);Gxo=r(oat,"FNetForNextSentencePrediction"),oat.forEach(t),Oxo=r(Swe," (FNet model)"),Swe.forEach(t),Vxo=i(fl),N2=n(fl,"LI",{});var Rwe=s(N2);mde=n(Rwe,"STRONG",{});var rat=s(mde);Xxo=r(rat,"megatron-bert"),rat.forEach(t),zxo=r(Rwe," \u2014 "),pj=n(Rwe,"A",{href:!0});var tat=s(pj);Qxo=r(tat,"MegatronBertForNextSentencePrediction"),tat.forEach(t),Wxo=r(Rwe," (MegatronBert model)"),Rwe.forEach(t),Hxo=i(fl),j2=n(fl,"LI",{});var Bwe=s(j2);gde=n(Bwe,"STRONG",{});var aat=s(gde);Uxo=r(aat,"mobilebert"),aat.forEach(t),Jxo=r(Bwe," \u2014 "),_j=n(Bwe,"A",{href:!0});var nat=s(_j);Yxo=r(nat,"MobileBertForNextSentencePrediction"),nat.forEach(t),Kxo=r(Bwe," (MobileBERT model)"),Bwe.forEach(t),Zxo=i(fl),D2=n(fl,"LI",{});var Pwe=s(D2);hde=n(Pwe,"STRONG",{});var sat=s(hde);eko=r(sat,"qdqbert"),sat.forEach(t),oko=r(Pwe," \u2014 "),uj=n(Pwe,"A",{href:!0});var lat=s(uj);rko=r(lat,"QDQBertForNextSentencePrediction"),lat.forEach(t),tko=r(Pwe," (QDQBert model)"),Pwe.forEach(t),fl.forEach(t),ako=i(Wt),G2=n(Wt,"P",{});var $we=s(G2);nko=r($we,"The model is set in evaluation mode by default using "),pde=n($we,"CODE",{});var iat=s(pde);sko=r(iat,"model.eval()"),iat.forEach(t),lko=r($we,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=n($we,"CODE",{});var dat=s(_de);iko=r(dat,"model.train()"),dat.forEach(t),$we.forEach(t),dko=i(Wt),ude=n(Wt,"P",{});var cat=s(ude);cko=r(cat,"Examples:"),cat.forEach(t),fko=i(Wt),m(c3.$$.fragment,Wt),Wt.forEach(t),dl.forEach(t),mBe=i(c),Ed=n(c,"H2",{class:!0});var T$e=s(Ed);O2=n(T$e,"A",{id:!0,class:!0,href:!0});var fat=s(O2);bde=n(fat,"SPAN",{});var mat=s(bde);m(f3.$$.fragment,mat),mat.forEach(t),fat.forEach(t),mko=i(T$e),vde=n(T$e,"SPAN",{});var gat=s(vde);gko=r(gat,"AutoModelForTokenClassification"),gat.forEach(t),T$e.forEach(t),gBe=i(c),ar=n(c,"DIV",{class:!0});var ml=s(ar);m(m3.$$.fragment,ml),hko=i(ml),Cd=n(ml,"P",{});var OU=s(Cd);pko=r(OU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bj=n(OU,"A",{href:!0});var hat=s(bj);_ko=r(hat,"from_pretrained()"),hat.forEach(t),uko=r(OU," class method or the "),vj=n(OU,"A",{href:!0});var pat=s(vj);bko=r(pat,"from_config()"),pat.forEach(t),vko=r(OU,` class
method.`),OU.forEach(t),Fko=i(ml),g3=n(ml,"P",{});var M$e=s(g3);Tko=r(M$e,"This class cannot be instantiated directly using "),Fde=n(M$e,"CODE",{});var _at=s(Fde);Mko=r(_at,"__init__()"),_at.forEach(t),Eko=r(M$e," (throws an error)."),M$e.forEach(t),Cko=i(ml),Kr=n(ml,"DIV",{class:!0});var gl=s(Kr);m(h3.$$.fragment,gl),wko=i(gl),Tde=n(gl,"P",{});var uat=s(Tde);Ako=r(uat,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uat.forEach(t),yko=i(gl),wd=n(gl,"P",{});var VU=s(wd);Lko=r(VU,`Note:
Loading a model from its configuration file does `),Mde=n(VU,"STRONG",{});var bat=s(Mde);xko=r(bat,"not"),bat.forEach(t),kko=r(VU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fj=n(VU,"A",{href:!0});var vat=s(Fj);Sko=r(vat,"from_pretrained()"),vat.forEach(t),Rko=r(VU," to load the model weights."),VU.forEach(t),Bko=i(gl),Ede=n(gl,"P",{});var Fat=s(Ede);Pko=r(Fat,"Examples:"),Fat.forEach(t),$ko=i(gl),m(p3.$$.fragment,gl),gl.forEach(t),Iko=i(ml),ze=n(ml,"DIV",{class:!0});var Ht=s(ze);m(_3.$$.fragment,Ht),qko=i(Ht),Cde=n(Ht,"P",{});var Tat=s(Cde);Nko=r(Tat,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Tat.forEach(t),jko=i(Ht),Ka=n(Ht,"P",{});var D4=s(Ka);Dko=r(D4,"The model class to instantiate is selected based on the "),wde=n(D4,"CODE",{});var Mat=s(wde);Gko=r(Mat,"model_type"),Mat.forEach(t),Oko=r(D4,` property of the config object (either
passed as an argument or loaded from `),Ade=n(D4,"CODE",{});var Eat=s(Ade);Vko=r(Eat,"pretrained_model_name_or_path"),Eat.forEach(t),Xko=r(D4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yde=n(D4,"CODE",{});var Cat=s(yde);zko=r(Cat,"pretrained_model_name_or_path"),Cat.forEach(t),Qko=r(D4,":"),D4.forEach(t),Wko=i(Ht),j=n(Ht,"UL",{});var D=s(j);V2=n(D,"LI",{});var Iwe=s(V2);Lde=n(Iwe,"STRONG",{});var wat=s(Lde);Hko=r(wat,"albert"),wat.forEach(t),Uko=r(Iwe," \u2014 "),Tj=n(Iwe,"A",{href:!0});var Aat=s(Tj);Jko=r(Aat,"AlbertForTokenClassification"),Aat.forEach(t),Yko=r(Iwe," (ALBERT model)"),Iwe.forEach(t),Kko=i(D),X2=n(D,"LI",{});var qwe=s(X2);xde=n(qwe,"STRONG",{});var yat=s(xde);Zko=r(yat,"bert"),yat.forEach(t),eSo=r(qwe," \u2014 "),Mj=n(qwe,"A",{href:!0});var Lat=s(Mj);oSo=r(Lat,"BertForTokenClassification"),Lat.forEach(t),rSo=r(qwe," (BERT model)"),qwe.forEach(t),tSo=i(D),z2=n(D,"LI",{});var Nwe=s(z2);kde=n(Nwe,"STRONG",{});var xat=s(kde);aSo=r(xat,"big_bird"),xat.forEach(t),nSo=r(Nwe," \u2014 "),Ej=n(Nwe,"A",{href:!0});var kat=s(Ej);sSo=r(kat,"BigBirdForTokenClassification"),kat.forEach(t),lSo=r(Nwe," (BigBird model)"),Nwe.forEach(t),iSo=i(D),Q2=n(D,"LI",{});var jwe=s(Q2);Sde=n(jwe,"STRONG",{});var Sat=s(Sde);dSo=r(Sat,"camembert"),Sat.forEach(t),cSo=r(jwe," \u2014 "),Cj=n(jwe,"A",{href:!0});var Rat=s(Cj);fSo=r(Rat,"CamembertForTokenClassification"),Rat.forEach(t),mSo=r(jwe," (CamemBERT model)"),jwe.forEach(t),gSo=i(D),W2=n(D,"LI",{});var Dwe=s(W2);Rde=n(Dwe,"STRONG",{});var Bat=s(Rde);hSo=r(Bat,"canine"),Bat.forEach(t),pSo=r(Dwe," \u2014 "),wj=n(Dwe,"A",{href:!0});var Pat=s(wj);_So=r(Pat,"CanineForTokenClassification"),Pat.forEach(t),uSo=r(Dwe," (Canine model)"),Dwe.forEach(t),bSo=i(D),H2=n(D,"LI",{});var Gwe=s(H2);Bde=n(Gwe,"STRONG",{});var $at=s(Bde);vSo=r($at,"convbert"),$at.forEach(t),FSo=r(Gwe," \u2014 "),Aj=n(Gwe,"A",{href:!0});var Iat=s(Aj);TSo=r(Iat,"ConvBertForTokenClassification"),Iat.forEach(t),MSo=r(Gwe," (ConvBERT model)"),Gwe.forEach(t),ESo=i(D),U2=n(D,"LI",{});var Owe=s(U2);Pde=n(Owe,"STRONG",{});var qat=s(Pde);CSo=r(qat,"data2vec-text"),qat.forEach(t),wSo=r(Owe," \u2014 "),yj=n(Owe,"A",{href:!0});var Nat=s(yj);ASo=r(Nat,"Data2VecTextForTokenClassification"),Nat.forEach(t),ySo=r(Owe," (Data2VecText model)"),Owe.forEach(t),LSo=i(D),J2=n(D,"LI",{});var Vwe=s(J2);$de=n(Vwe,"STRONG",{});var jat=s($de);xSo=r(jat,"deberta"),jat.forEach(t),kSo=r(Vwe," \u2014 "),Lj=n(Vwe,"A",{href:!0});var Dat=s(Lj);SSo=r(Dat,"DebertaForTokenClassification"),Dat.forEach(t),RSo=r(Vwe," (DeBERTa model)"),Vwe.forEach(t),BSo=i(D),Y2=n(D,"LI",{});var Xwe=s(Y2);Ide=n(Xwe,"STRONG",{});var Gat=s(Ide);PSo=r(Gat,"deberta-v2"),Gat.forEach(t),$So=r(Xwe," \u2014 "),xj=n(Xwe,"A",{href:!0});var Oat=s(xj);ISo=r(Oat,"DebertaV2ForTokenClassification"),Oat.forEach(t),qSo=r(Xwe," (DeBERTa-v2 model)"),Xwe.forEach(t),NSo=i(D),K2=n(D,"LI",{});var zwe=s(K2);qde=n(zwe,"STRONG",{});var Vat=s(qde);jSo=r(Vat,"distilbert"),Vat.forEach(t),DSo=r(zwe," \u2014 "),kj=n(zwe,"A",{href:!0});var Xat=s(kj);GSo=r(Xat,"DistilBertForTokenClassification"),Xat.forEach(t),OSo=r(zwe," (DistilBERT model)"),zwe.forEach(t),VSo=i(D),Z2=n(D,"LI",{});var Qwe=s(Z2);Nde=n(Qwe,"STRONG",{});var zat=s(Nde);XSo=r(zat,"electra"),zat.forEach(t),zSo=r(Qwe," \u2014 "),Sj=n(Qwe,"A",{href:!0});var Qat=s(Sj);QSo=r(Qat,"ElectraForTokenClassification"),Qat.forEach(t),WSo=r(Qwe," (ELECTRA model)"),Qwe.forEach(t),HSo=i(D),e6=n(D,"LI",{});var Wwe=s(e6);jde=n(Wwe,"STRONG",{});var Wat=s(jde);USo=r(Wat,"flaubert"),Wat.forEach(t),JSo=r(Wwe," \u2014 "),Rj=n(Wwe,"A",{href:!0});var Hat=s(Rj);YSo=r(Hat,"FlaubertForTokenClassification"),Hat.forEach(t),KSo=r(Wwe," (FlauBERT model)"),Wwe.forEach(t),ZSo=i(D),o6=n(D,"LI",{});var Hwe=s(o6);Dde=n(Hwe,"STRONG",{});var Uat=s(Dde);eRo=r(Uat,"fnet"),Uat.forEach(t),oRo=r(Hwe," \u2014 "),Bj=n(Hwe,"A",{href:!0});var Jat=s(Bj);rRo=r(Jat,"FNetForTokenClassification"),Jat.forEach(t),tRo=r(Hwe," (FNet model)"),Hwe.forEach(t),aRo=i(D),r6=n(D,"LI",{});var Uwe=s(r6);Gde=n(Uwe,"STRONG",{});var Yat=s(Gde);nRo=r(Yat,"funnel"),Yat.forEach(t),sRo=r(Uwe," \u2014 "),Pj=n(Uwe,"A",{href:!0});var Kat=s(Pj);lRo=r(Kat,"FunnelForTokenClassification"),Kat.forEach(t),iRo=r(Uwe," (Funnel Transformer model)"),Uwe.forEach(t),dRo=i(D),t6=n(D,"LI",{});var Jwe=s(t6);Ode=n(Jwe,"STRONG",{});var Zat=s(Ode);cRo=r(Zat,"gpt2"),Zat.forEach(t),fRo=r(Jwe," \u2014 "),$j=n(Jwe,"A",{href:!0});var ent=s($j);mRo=r(ent,"GPT2ForTokenClassification"),ent.forEach(t),gRo=r(Jwe," (OpenAI GPT-2 model)"),Jwe.forEach(t),hRo=i(D),a6=n(D,"LI",{});var Ywe=s(a6);Vde=n(Ywe,"STRONG",{});var ont=s(Vde);pRo=r(ont,"ibert"),ont.forEach(t),_Ro=r(Ywe," \u2014 "),Ij=n(Ywe,"A",{href:!0});var rnt=s(Ij);uRo=r(rnt,"IBertForTokenClassification"),rnt.forEach(t),bRo=r(Ywe," (I-BERT model)"),Ywe.forEach(t),vRo=i(D),n6=n(D,"LI",{});var Kwe=s(n6);Xde=n(Kwe,"STRONG",{});var tnt=s(Xde);FRo=r(tnt,"layoutlm"),tnt.forEach(t),TRo=r(Kwe," \u2014 "),qj=n(Kwe,"A",{href:!0});var ant=s(qj);MRo=r(ant,"LayoutLMForTokenClassification"),ant.forEach(t),ERo=r(Kwe," (LayoutLM model)"),Kwe.forEach(t),CRo=i(D),s6=n(D,"LI",{});var Zwe=s(s6);zde=n(Zwe,"STRONG",{});var nnt=s(zde);wRo=r(nnt,"layoutlmv2"),nnt.forEach(t),ARo=r(Zwe," \u2014 "),Nj=n(Zwe,"A",{href:!0});var snt=s(Nj);yRo=r(snt,"LayoutLMv2ForTokenClassification"),snt.forEach(t),LRo=r(Zwe," (LayoutLMv2 model)"),Zwe.forEach(t),xRo=i(D),l6=n(D,"LI",{});var eAe=s(l6);Qde=n(eAe,"STRONG",{});var lnt=s(Qde);kRo=r(lnt,"longformer"),lnt.forEach(t),SRo=r(eAe," \u2014 "),jj=n(eAe,"A",{href:!0});var int=s(jj);RRo=r(int,"LongformerForTokenClassification"),int.forEach(t),BRo=r(eAe," (Longformer model)"),eAe.forEach(t),PRo=i(D),i6=n(D,"LI",{});var oAe=s(i6);Wde=n(oAe,"STRONG",{});var dnt=s(Wde);$Ro=r(dnt,"megatron-bert"),dnt.forEach(t),IRo=r(oAe," \u2014 "),Dj=n(oAe,"A",{href:!0});var cnt=s(Dj);qRo=r(cnt,"MegatronBertForTokenClassification"),cnt.forEach(t),NRo=r(oAe," (MegatronBert model)"),oAe.forEach(t),jRo=i(D),d6=n(D,"LI",{});var rAe=s(d6);Hde=n(rAe,"STRONG",{});var fnt=s(Hde);DRo=r(fnt,"mobilebert"),fnt.forEach(t),GRo=r(rAe," \u2014 "),Gj=n(rAe,"A",{href:!0});var mnt=s(Gj);ORo=r(mnt,"MobileBertForTokenClassification"),mnt.forEach(t),VRo=r(rAe," (MobileBERT model)"),rAe.forEach(t),XRo=i(D),c6=n(D,"LI",{});var tAe=s(c6);Ude=n(tAe,"STRONG",{});var gnt=s(Ude);zRo=r(gnt,"mpnet"),gnt.forEach(t),QRo=r(tAe," \u2014 "),Oj=n(tAe,"A",{href:!0});var hnt=s(Oj);WRo=r(hnt,"MPNetForTokenClassification"),hnt.forEach(t),HRo=r(tAe," (MPNet model)"),tAe.forEach(t),URo=i(D),f6=n(D,"LI",{});var aAe=s(f6);Jde=n(aAe,"STRONG",{});var pnt=s(Jde);JRo=r(pnt,"nystromformer"),pnt.forEach(t),YRo=r(aAe," \u2014 "),Vj=n(aAe,"A",{href:!0});var _nt=s(Vj);KRo=r(_nt,"NystromformerForTokenClassification"),_nt.forEach(t),ZRo=r(aAe," (Nystromformer model)"),aAe.forEach(t),eBo=i(D),m6=n(D,"LI",{});var nAe=s(m6);Yde=n(nAe,"STRONG",{});var unt=s(Yde);oBo=r(unt,"qdqbert"),unt.forEach(t),rBo=r(nAe," \u2014 "),Xj=n(nAe,"A",{href:!0});var bnt=s(Xj);tBo=r(bnt,"QDQBertForTokenClassification"),bnt.forEach(t),aBo=r(nAe," (QDQBert model)"),nAe.forEach(t),nBo=i(D),g6=n(D,"LI",{});var sAe=s(g6);Kde=n(sAe,"STRONG",{});var vnt=s(Kde);sBo=r(vnt,"rembert"),vnt.forEach(t),lBo=r(sAe," \u2014 "),zj=n(sAe,"A",{href:!0});var Fnt=s(zj);iBo=r(Fnt,"RemBertForTokenClassification"),Fnt.forEach(t),dBo=r(sAe," (RemBERT model)"),sAe.forEach(t),cBo=i(D),h6=n(D,"LI",{});var lAe=s(h6);Zde=n(lAe,"STRONG",{});var Tnt=s(Zde);fBo=r(Tnt,"roberta"),Tnt.forEach(t),mBo=r(lAe," \u2014 "),Qj=n(lAe,"A",{href:!0});var Mnt=s(Qj);gBo=r(Mnt,"RobertaForTokenClassification"),Mnt.forEach(t),hBo=r(lAe," (RoBERTa model)"),lAe.forEach(t),pBo=i(D),p6=n(D,"LI",{});var iAe=s(p6);ece=n(iAe,"STRONG",{});var Ent=s(ece);_Bo=r(Ent,"roformer"),Ent.forEach(t),uBo=r(iAe," \u2014 "),Wj=n(iAe,"A",{href:!0});var Cnt=s(Wj);bBo=r(Cnt,"RoFormerForTokenClassification"),Cnt.forEach(t),vBo=r(iAe," (RoFormer model)"),iAe.forEach(t),FBo=i(D),_6=n(D,"LI",{});var dAe=s(_6);oce=n(dAe,"STRONG",{});var wnt=s(oce);TBo=r(wnt,"squeezebert"),wnt.forEach(t),MBo=r(dAe," \u2014 "),Hj=n(dAe,"A",{href:!0});var Ant=s(Hj);EBo=r(Ant,"SqueezeBertForTokenClassification"),Ant.forEach(t),CBo=r(dAe," (SqueezeBERT model)"),dAe.forEach(t),wBo=i(D),u6=n(D,"LI",{});var cAe=s(u6);rce=n(cAe,"STRONG",{});var ynt=s(rce);ABo=r(ynt,"xlm"),ynt.forEach(t),yBo=r(cAe," \u2014 "),Uj=n(cAe,"A",{href:!0});var Lnt=s(Uj);LBo=r(Lnt,"XLMForTokenClassification"),Lnt.forEach(t),xBo=r(cAe," (XLM model)"),cAe.forEach(t),kBo=i(D),b6=n(D,"LI",{});var fAe=s(b6);tce=n(fAe,"STRONG",{});var xnt=s(tce);SBo=r(xnt,"xlm-roberta"),xnt.forEach(t),RBo=r(fAe," \u2014 "),Jj=n(fAe,"A",{href:!0});var knt=s(Jj);BBo=r(knt,"XLMRobertaForTokenClassification"),knt.forEach(t),PBo=r(fAe," (XLM-RoBERTa model)"),fAe.forEach(t),$Bo=i(D),v6=n(D,"LI",{});var mAe=s(v6);ace=n(mAe,"STRONG",{});var Snt=s(ace);IBo=r(Snt,"xlm-roberta-xl"),Snt.forEach(t),qBo=r(mAe," \u2014 "),Yj=n(mAe,"A",{href:!0});var Rnt=s(Yj);NBo=r(Rnt,"XLMRobertaXLForTokenClassification"),Rnt.forEach(t),jBo=r(mAe," (XLM-RoBERTa-XL model)"),mAe.forEach(t),DBo=i(D),F6=n(D,"LI",{});var gAe=s(F6);nce=n(gAe,"STRONG",{});var Bnt=s(nce);GBo=r(Bnt,"xlnet"),Bnt.forEach(t),OBo=r(gAe," \u2014 "),Kj=n(gAe,"A",{href:!0});var Pnt=s(Kj);VBo=r(Pnt,"XLNetForTokenClassification"),Pnt.forEach(t),XBo=r(gAe," (XLNet model)"),gAe.forEach(t),zBo=i(D),T6=n(D,"LI",{});var hAe=s(T6);sce=n(hAe,"STRONG",{});var $nt=s(sce);QBo=r($nt,"yoso"),$nt.forEach(t),WBo=r(hAe," \u2014 "),Zj=n(hAe,"A",{href:!0});var Int=s(Zj);HBo=r(Int,"YosoForTokenClassification"),Int.forEach(t),UBo=r(hAe," (YOSO model)"),hAe.forEach(t),D.forEach(t),JBo=i(Ht),M6=n(Ht,"P",{});var pAe=s(M6);YBo=r(pAe,"The model is set in evaluation mode by default using "),lce=n(pAe,"CODE",{});var qnt=s(lce);KBo=r(qnt,"model.eval()"),qnt.forEach(t),ZBo=r(pAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ice=n(pAe,"CODE",{});var Nnt=s(ice);ePo=r(Nnt,"model.train()"),Nnt.forEach(t),pAe.forEach(t),oPo=i(Ht),dce=n(Ht,"P",{});var jnt=s(dce);rPo=r(jnt,"Examples:"),jnt.forEach(t),tPo=i(Ht),m(u3.$$.fragment,Ht),Ht.forEach(t),ml.forEach(t),hBe=i(c),Ad=n(c,"H2",{class:!0});var E$e=s(Ad);E6=n(E$e,"A",{id:!0,class:!0,href:!0});var Dnt=s(E6);cce=n(Dnt,"SPAN",{});var Gnt=s(cce);m(b3.$$.fragment,Gnt),Gnt.forEach(t),Dnt.forEach(t),aPo=i(E$e),fce=n(E$e,"SPAN",{});var Ont=s(fce);nPo=r(Ont,"AutoModelForQuestionAnswering"),Ont.forEach(t),E$e.forEach(t),pBe=i(c),nr=n(c,"DIV",{class:!0});var hl=s(nr);m(v3.$$.fragment,hl),sPo=i(hl),yd=n(hl,"P",{});var XU=s(yd);lPo=r(XU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eD=n(XU,"A",{href:!0});var Vnt=s(eD);iPo=r(Vnt,"from_pretrained()"),Vnt.forEach(t),dPo=r(XU," class method or the "),oD=n(XU,"A",{href:!0});var Xnt=s(oD);cPo=r(Xnt,"from_config()"),Xnt.forEach(t),fPo=r(XU,` class
method.`),XU.forEach(t),mPo=i(hl),F3=n(hl,"P",{});var C$e=s(F3);gPo=r(C$e,"This class cannot be instantiated directly using "),mce=n(C$e,"CODE",{});var znt=s(mce);hPo=r(znt,"__init__()"),znt.forEach(t),pPo=r(C$e," (throws an error)."),C$e.forEach(t),_Po=i(hl),Zr=n(hl,"DIV",{class:!0});var pl=s(Zr);m(T3.$$.fragment,pl),uPo=i(pl),gce=n(pl,"P",{});var Qnt=s(gce);bPo=r(Qnt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Qnt.forEach(t),vPo=i(pl),Ld=n(pl,"P",{});var zU=s(Ld);FPo=r(zU,`Note:
Loading a model from its configuration file does `),hce=n(zU,"STRONG",{});var Wnt=s(hce);TPo=r(Wnt,"not"),Wnt.forEach(t),MPo=r(zU,` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=n(zU,"A",{href:!0});var Hnt=s(rD);EPo=r(Hnt,"from_pretrained()"),Hnt.forEach(t),CPo=r(zU," to load the model weights."),zU.forEach(t),wPo=i(pl),pce=n(pl,"P",{});var Unt=s(pce);APo=r(Unt,"Examples:"),Unt.forEach(t),yPo=i(pl),m(M3.$$.fragment,pl),pl.forEach(t),LPo=i(hl),Qe=n(hl,"DIV",{class:!0});var Ut=s(Qe);m(E3.$$.fragment,Ut),xPo=i(Ut),_ce=n(Ut,"P",{});var Jnt=s(_ce);kPo=r(Jnt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Jnt.forEach(t),SPo=i(Ut),Za=n(Ut,"P",{});var G4=s(Za);RPo=r(G4,"The model class to instantiate is selected based on the "),uce=n(G4,"CODE",{});var Ynt=s(uce);BPo=r(Ynt,"model_type"),Ynt.forEach(t),PPo=r(G4,` property of the config object (either
passed as an argument or loaded from `),bce=n(G4,"CODE",{});var Knt=s(bce);$Po=r(Knt,"pretrained_model_name_or_path"),Knt.forEach(t),IPo=r(G4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vce=n(G4,"CODE",{});var Znt=s(vce);qPo=r(Znt,"pretrained_model_name_or_path"),Znt.forEach(t),NPo=r(G4,":"),G4.forEach(t),jPo=i(Ut),R=n(Ut,"UL",{});var P=s(R);C6=n(P,"LI",{});var _Ae=s(C6);Fce=n(_Ae,"STRONG",{});var est=s(Fce);DPo=r(est,"albert"),est.forEach(t),GPo=r(_Ae," \u2014 "),tD=n(_Ae,"A",{href:!0});var ost=s(tD);OPo=r(ost,"AlbertForQuestionAnswering"),ost.forEach(t),VPo=r(_Ae," (ALBERT model)"),_Ae.forEach(t),XPo=i(P),w6=n(P,"LI",{});var uAe=s(w6);Tce=n(uAe,"STRONG",{});var rst=s(Tce);zPo=r(rst,"bart"),rst.forEach(t),QPo=r(uAe," \u2014 "),aD=n(uAe,"A",{href:!0});var tst=s(aD);WPo=r(tst,"BartForQuestionAnswering"),tst.forEach(t),HPo=r(uAe," (BART model)"),uAe.forEach(t),UPo=i(P),A6=n(P,"LI",{});var bAe=s(A6);Mce=n(bAe,"STRONG",{});var ast=s(Mce);JPo=r(ast,"bert"),ast.forEach(t),YPo=r(bAe," \u2014 "),nD=n(bAe,"A",{href:!0});var nst=s(nD);KPo=r(nst,"BertForQuestionAnswering"),nst.forEach(t),ZPo=r(bAe," (BERT model)"),bAe.forEach(t),e$o=i(P),y6=n(P,"LI",{});var vAe=s(y6);Ece=n(vAe,"STRONG",{});var sst=s(Ece);o$o=r(sst,"big_bird"),sst.forEach(t),r$o=r(vAe," \u2014 "),sD=n(vAe,"A",{href:!0});var lst=s(sD);t$o=r(lst,"BigBirdForQuestionAnswering"),lst.forEach(t),a$o=r(vAe," (BigBird model)"),vAe.forEach(t),n$o=i(P),L6=n(P,"LI",{});var FAe=s(L6);Cce=n(FAe,"STRONG",{});var ist=s(Cce);s$o=r(ist,"bigbird_pegasus"),ist.forEach(t),l$o=r(FAe," \u2014 "),lD=n(FAe,"A",{href:!0});var dst=s(lD);i$o=r(dst,"BigBirdPegasusForQuestionAnswering"),dst.forEach(t),d$o=r(FAe," (BigBirdPegasus model)"),FAe.forEach(t),c$o=i(P),x6=n(P,"LI",{});var TAe=s(x6);wce=n(TAe,"STRONG",{});var cst=s(wce);f$o=r(cst,"camembert"),cst.forEach(t),m$o=r(TAe," \u2014 "),iD=n(TAe,"A",{href:!0});var fst=s(iD);g$o=r(fst,"CamembertForQuestionAnswering"),fst.forEach(t),h$o=r(TAe," (CamemBERT model)"),TAe.forEach(t),p$o=i(P),k6=n(P,"LI",{});var MAe=s(k6);Ace=n(MAe,"STRONG",{});var mst=s(Ace);_$o=r(mst,"canine"),mst.forEach(t),u$o=r(MAe," \u2014 "),dD=n(MAe,"A",{href:!0});var gst=s(dD);b$o=r(gst,"CanineForQuestionAnswering"),gst.forEach(t),v$o=r(MAe," (Canine model)"),MAe.forEach(t),F$o=i(P),S6=n(P,"LI",{});var EAe=s(S6);yce=n(EAe,"STRONG",{});var hst=s(yce);T$o=r(hst,"convbert"),hst.forEach(t),M$o=r(EAe," \u2014 "),cD=n(EAe,"A",{href:!0});var pst=s(cD);E$o=r(pst,"ConvBertForQuestionAnswering"),pst.forEach(t),C$o=r(EAe," (ConvBERT model)"),EAe.forEach(t),w$o=i(P),R6=n(P,"LI",{});var CAe=s(R6);Lce=n(CAe,"STRONG",{});var _st=s(Lce);A$o=r(_st,"data2vec-text"),_st.forEach(t),y$o=r(CAe," \u2014 "),fD=n(CAe,"A",{href:!0});var ust=s(fD);L$o=r(ust,"Data2VecTextForQuestionAnswering"),ust.forEach(t),x$o=r(CAe," (Data2VecText model)"),CAe.forEach(t),k$o=i(P),B6=n(P,"LI",{});var wAe=s(B6);xce=n(wAe,"STRONG",{});var bst=s(xce);S$o=r(bst,"deberta"),bst.forEach(t),R$o=r(wAe," \u2014 "),mD=n(wAe,"A",{href:!0});var vst=s(mD);B$o=r(vst,"DebertaForQuestionAnswering"),vst.forEach(t),P$o=r(wAe," (DeBERTa model)"),wAe.forEach(t),$$o=i(P),P6=n(P,"LI",{});var AAe=s(P6);kce=n(AAe,"STRONG",{});var Fst=s(kce);I$o=r(Fst,"deberta-v2"),Fst.forEach(t),q$o=r(AAe," \u2014 "),gD=n(AAe,"A",{href:!0});var Tst=s(gD);N$o=r(Tst,"DebertaV2ForQuestionAnswering"),Tst.forEach(t),j$o=r(AAe," (DeBERTa-v2 model)"),AAe.forEach(t),D$o=i(P),$6=n(P,"LI",{});var yAe=s($6);Sce=n(yAe,"STRONG",{});var Mst=s(Sce);G$o=r(Mst,"distilbert"),Mst.forEach(t),O$o=r(yAe," \u2014 "),hD=n(yAe,"A",{href:!0});var Est=s(hD);V$o=r(Est,"DistilBertForQuestionAnswering"),Est.forEach(t),X$o=r(yAe," (DistilBERT model)"),yAe.forEach(t),z$o=i(P),I6=n(P,"LI",{});var LAe=s(I6);Rce=n(LAe,"STRONG",{});var Cst=s(Rce);Q$o=r(Cst,"electra"),Cst.forEach(t),W$o=r(LAe," \u2014 "),pD=n(LAe,"A",{href:!0});var wst=s(pD);H$o=r(wst,"ElectraForQuestionAnswering"),wst.forEach(t),U$o=r(LAe," (ELECTRA model)"),LAe.forEach(t),J$o=i(P),q6=n(P,"LI",{});var xAe=s(q6);Bce=n(xAe,"STRONG",{});var Ast=s(Bce);Y$o=r(Ast,"flaubert"),Ast.forEach(t),K$o=r(xAe," \u2014 "),_D=n(xAe,"A",{href:!0});var yst=s(_D);Z$o=r(yst,"FlaubertForQuestionAnsweringSimple"),yst.forEach(t),eIo=r(xAe," (FlauBERT model)"),xAe.forEach(t),oIo=i(P),N6=n(P,"LI",{});var kAe=s(N6);Pce=n(kAe,"STRONG",{});var Lst=s(Pce);rIo=r(Lst,"fnet"),Lst.forEach(t),tIo=r(kAe," \u2014 "),uD=n(kAe,"A",{href:!0});var xst=s(uD);aIo=r(xst,"FNetForQuestionAnswering"),xst.forEach(t),nIo=r(kAe," (FNet model)"),kAe.forEach(t),sIo=i(P),j6=n(P,"LI",{});var SAe=s(j6);$ce=n(SAe,"STRONG",{});var kst=s($ce);lIo=r(kst,"funnel"),kst.forEach(t),iIo=r(SAe," \u2014 "),bD=n(SAe,"A",{href:!0});var Sst=s(bD);dIo=r(Sst,"FunnelForQuestionAnswering"),Sst.forEach(t),cIo=r(SAe," (Funnel Transformer model)"),SAe.forEach(t),fIo=i(P),D6=n(P,"LI",{});var RAe=s(D6);Ice=n(RAe,"STRONG",{});var Rst=s(Ice);mIo=r(Rst,"gptj"),Rst.forEach(t),gIo=r(RAe," \u2014 "),vD=n(RAe,"A",{href:!0});var Bst=s(vD);hIo=r(Bst,"GPTJForQuestionAnswering"),Bst.forEach(t),pIo=r(RAe," (GPT-J model)"),RAe.forEach(t),_Io=i(P),G6=n(P,"LI",{});var BAe=s(G6);qce=n(BAe,"STRONG",{});var Pst=s(qce);uIo=r(Pst,"ibert"),Pst.forEach(t),bIo=r(BAe," \u2014 "),FD=n(BAe,"A",{href:!0});var $st=s(FD);vIo=r($st,"IBertForQuestionAnswering"),$st.forEach(t),FIo=r(BAe," (I-BERT model)"),BAe.forEach(t),TIo=i(P),O6=n(P,"LI",{});var PAe=s(O6);Nce=n(PAe,"STRONG",{});var Ist=s(Nce);MIo=r(Ist,"layoutlmv2"),Ist.forEach(t),EIo=r(PAe," \u2014 "),TD=n(PAe,"A",{href:!0});var qst=s(TD);CIo=r(qst,"LayoutLMv2ForQuestionAnswering"),qst.forEach(t),wIo=r(PAe," (LayoutLMv2 model)"),PAe.forEach(t),AIo=i(P),V6=n(P,"LI",{});var $Ae=s(V6);jce=n($Ae,"STRONG",{});var Nst=s(jce);yIo=r(Nst,"led"),Nst.forEach(t),LIo=r($Ae," \u2014 "),MD=n($Ae,"A",{href:!0});var jst=s(MD);xIo=r(jst,"LEDForQuestionAnswering"),jst.forEach(t),kIo=r($Ae," (LED model)"),$Ae.forEach(t),SIo=i(P),X6=n(P,"LI",{});var IAe=s(X6);Dce=n(IAe,"STRONG",{});var Dst=s(Dce);RIo=r(Dst,"longformer"),Dst.forEach(t),BIo=r(IAe," \u2014 "),ED=n(IAe,"A",{href:!0});var Gst=s(ED);PIo=r(Gst,"LongformerForQuestionAnswering"),Gst.forEach(t),$Io=r(IAe," (Longformer model)"),IAe.forEach(t),IIo=i(P),z6=n(P,"LI",{});var qAe=s(z6);Gce=n(qAe,"STRONG",{});var Ost=s(Gce);qIo=r(Ost,"lxmert"),Ost.forEach(t),NIo=r(qAe," \u2014 "),CD=n(qAe,"A",{href:!0});var Vst=s(CD);jIo=r(Vst,"LxmertForQuestionAnswering"),Vst.forEach(t),DIo=r(qAe," (LXMERT model)"),qAe.forEach(t),GIo=i(P),Q6=n(P,"LI",{});var NAe=s(Q6);Oce=n(NAe,"STRONG",{});var Xst=s(Oce);OIo=r(Xst,"mbart"),Xst.forEach(t),VIo=r(NAe," \u2014 "),wD=n(NAe,"A",{href:!0});var zst=s(wD);XIo=r(zst,"MBartForQuestionAnswering"),zst.forEach(t),zIo=r(NAe," (mBART model)"),NAe.forEach(t),QIo=i(P),W6=n(P,"LI",{});var jAe=s(W6);Vce=n(jAe,"STRONG",{});var Qst=s(Vce);WIo=r(Qst,"megatron-bert"),Qst.forEach(t),HIo=r(jAe," \u2014 "),AD=n(jAe,"A",{href:!0});var Wst=s(AD);UIo=r(Wst,"MegatronBertForQuestionAnswering"),Wst.forEach(t),JIo=r(jAe," (MegatronBert model)"),jAe.forEach(t),YIo=i(P),H6=n(P,"LI",{});var DAe=s(H6);Xce=n(DAe,"STRONG",{});var Hst=s(Xce);KIo=r(Hst,"mobilebert"),Hst.forEach(t),ZIo=r(DAe," \u2014 "),yD=n(DAe,"A",{href:!0});var Ust=s(yD);eqo=r(Ust,"MobileBertForQuestionAnswering"),Ust.forEach(t),oqo=r(DAe," (MobileBERT model)"),DAe.forEach(t),rqo=i(P),U6=n(P,"LI",{});var GAe=s(U6);zce=n(GAe,"STRONG",{});var Jst=s(zce);tqo=r(Jst,"mpnet"),Jst.forEach(t),aqo=r(GAe," \u2014 "),LD=n(GAe,"A",{href:!0});var Yst=s(LD);nqo=r(Yst,"MPNetForQuestionAnswering"),Yst.forEach(t),sqo=r(GAe," (MPNet model)"),GAe.forEach(t),lqo=i(P),J6=n(P,"LI",{});var OAe=s(J6);Qce=n(OAe,"STRONG",{});var Kst=s(Qce);iqo=r(Kst,"nystromformer"),Kst.forEach(t),dqo=r(OAe," \u2014 "),xD=n(OAe,"A",{href:!0});var Zst=s(xD);cqo=r(Zst,"NystromformerForQuestionAnswering"),Zst.forEach(t),fqo=r(OAe," (Nystromformer model)"),OAe.forEach(t),mqo=i(P),Y6=n(P,"LI",{});var VAe=s(Y6);Wce=n(VAe,"STRONG",{});var elt=s(Wce);gqo=r(elt,"qdqbert"),elt.forEach(t),hqo=r(VAe," \u2014 "),kD=n(VAe,"A",{href:!0});var olt=s(kD);pqo=r(olt,"QDQBertForQuestionAnswering"),olt.forEach(t),_qo=r(VAe," (QDQBert model)"),VAe.forEach(t),uqo=i(P),K6=n(P,"LI",{});var XAe=s(K6);Hce=n(XAe,"STRONG",{});var rlt=s(Hce);bqo=r(rlt,"reformer"),rlt.forEach(t),vqo=r(XAe," \u2014 "),SD=n(XAe,"A",{href:!0});var tlt=s(SD);Fqo=r(tlt,"ReformerForQuestionAnswering"),tlt.forEach(t),Tqo=r(XAe," (Reformer model)"),XAe.forEach(t),Mqo=i(P),Z6=n(P,"LI",{});var zAe=s(Z6);Uce=n(zAe,"STRONG",{});var alt=s(Uce);Eqo=r(alt,"rembert"),alt.forEach(t),Cqo=r(zAe," \u2014 "),RD=n(zAe,"A",{href:!0});var nlt=s(RD);wqo=r(nlt,"RemBertForQuestionAnswering"),nlt.forEach(t),Aqo=r(zAe," (RemBERT model)"),zAe.forEach(t),yqo=i(P),ev=n(P,"LI",{});var QAe=s(ev);Jce=n(QAe,"STRONG",{});var slt=s(Jce);Lqo=r(slt,"roberta"),slt.forEach(t),xqo=r(QAe," \u2014 "),BD=n(QAe,"A",{href:!0});var llt=s(BD);kqo=r(llt,"RobertaForQuestionAnswering"),llt.forEach(t),Sqo=r(QAe," (RoBERTa model)"),QAe.forEach(t),Rqo=i(P),ov=n(P,"LI",{});var WAe=s(ov);Yce=n(WAe,"STRONG",{});var ilt=s(Yce);Bqo=r(ilt,"roformer"),ilt.forEach(t),Pqo=r(WAe," \u2014 "),PD=n(WAe,"A",{href:!0});var dlt=s(PD);$qo=r(dlt,"RoFormerForQuestionAnswering"),dlt.forEach(t),Iqo=r(WAe," (RoFormer model)"),WAe.forEach(t),qqo=i(P),rv=n(P,"LI",{});var HAe=s(rv);Kce=n(HAe,"STRONG",{});var clt=s(Kce);Nqo=r(clt,"splinter"),clt.forEach(t),jqo=r(HAe," \u2014 "),$D=n(HAe,"A",{href:!0});var flt=s($D);Dqo=r(flt,"SplinterForQuestionAnswering"),flt.forEach(t),Gqo=r(HAe," (Splinter model)"),HAe.forEach(t),Oqo=i(P),tv=n(P,"LI",{});var UAe=s(tv);Zce=n(UAe,"STRONG",{});var mlt=s(Zce);Vqo=r(mlt,"squeezebert"),mlt.forEach(t),Xqo=r(UAe," \u2014 "),ID=n(UAe,"A",{href:!0});var glt=s(ID);zqo=r(glt,"SqueezeBertForQuestionAnswering"),glt.forEach(t),Qqo=r(UAe," (SqueezeBERT model)"),UAe.forEach(t),Wqo=i(P),av=n(P,"LI",{});var JAe=s(av);efe=n(JAe,"STRONG",{});var hlt=s(efe);Hqo=r(hlt,"xlm"),hlt.forEach(t),Uqo=r(JAe," \u2014 "),qD=n(JAe,"A",{href:!0});var plt=s(qD);Jqo=r(plt,"XLMForQuestionAnsweringSimple"),plt.forEach(t),Yqo=r(JAe," (XLM model)"),JAe.forEach(t),Kqo=i(P),nv=n(P,"LI",{});var YAe=s(nv);ofe=n(YAe,"STRONG",{});var _lt=s(ofe);Zqo=r(_lt,"xlm-roberta"),_lt.forEach(t),eNo=r(YAe," \u2014 "),ND=n(YAe,"A",{href:!0});var ult=s(ND);oNo=r(ult,"XLMRobertaForQuestionAnswering"),ult.forEach(t),rNo=r(YAe," (XLM-RoBERTa model)"),YAe.forEach(t),tNo=i(P),sv=n(P,"LI",{});var KAe=s(sv);rfe=n(KAe,"STRONG",{});var blt=s(rfe);aNo=r(blt,"xlm-roberta-xl"),blt.forEach(t),nNo=r(KAe," \u2014 "),jD=n(KAe,"A",{href:!0});var vlt=s(jD);sNo=r(vlt,"XLMRobertaXLForQuestionAnswering"),vlt.forEach(t),lNo=r(KAe," (XLM-RoBERTa-XL model)"),KAe.forEach(t),iNo=i(P),lv=n(P,"LI",{});var ZAe=s(lv);tfe=n(ZAe,"STRONG",{});var Flt=s(tfe);dNo=r(Flt,"xlnet"),Flt.forEach(t),cNo=r(ZAe," \u2014 "),DD=n(ZAe,"A",{href:!0});var Tlt=s(DD);fNo=r(Tlt,"XLNetForQuestionAnsweringSimple"),Tlt.forEach(t),mNo=r(ZAe," (XLNet model)"),ZAe.forEach(t),gNo=i(P),iv=n(P,"LI",{});var e0e=s(iv);afe=n(e0e,"STRONG",{});var Mlt=s(afe);hNo=r(Mlt,"yoso"),Mlt.forEach(t),pNo=r(e0e," \u2014 "),GD=n(e0e,"A",{href:!0});var Elt=s(GD);_No=r(Elt,"YosoForQuestionAnswering"),Elt.forEach(t),uNo=r(e0e," (YOSO model)"),e0e.forEach(t),P.forEach(t),bNo=i(Ut),dv=n(Ut,"P",{});var o0e=s(dv);vNo=r(o0e,"The model is set in evaluation mode by default using "),nfe=n(o0e,"CODE",{});var Clt=s(nfe);FNo=r(Clt,"model.eval()"),Clt.forEach(t),TNo=r(o0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sfe=n(o0e,"CODE",{});var wlt=s(sfe);MNo=r(wlt,"model.train()"),wlt.forEach(t),o0e.forEach(t),ENo=i(Ut),lfe=n(Ut,"P",{});var Alt=s(lfe);CNo=r(Alt,"Examples:"),Alt.forEach(t),wNo=i(Ut),m(C3.$$.fragment,Ut),Ut.forEach(t),hl.forEach(t),_Be=i(c),xd=n(c,"H2",{class:!0});var w$e=s(xd);cv=n(w$e,"A",{id:!0,class:!0,href:!0});var ylt=s(cv);ife=n(ylt,"SPAN",{});var Llt=s(ife);m(w3.$$.fragment,Llt),Llt.forEach(t),ylt.forEach(t),ANo=i(w$e),dfe=n(w$e,"SPAN",{});var xlt=s(dfe);yNo=r(xlt,"AutoModelForTableQuestionAnswering"),xlt.forEach(t),w$e.forEach(t),uBe=i(c),sr=n(c,"DIV",{class:!0});var _l=s(sr);m(A3.$$.fragment,_l),LNo=i(_l),kd=n(_l,"P",{});var QU=s(kd);xNo=r(QU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OD=n(QU,"A",{href:!0});var klt=s(OD);kNo=r(klt,"from_pretrained()"),klt.forEach(t),SNo=r(QU," class method or the "),VD=n(QU,"A",{href:!0});var Slt=s(VD);RNo=r(Slt,"from_config()"),Slt.forEach(t),BNo=r(QU,` class
method.`),QU.forEach(t),PNo=i(_l),y3=n(_l,"P",{});var A$e=s(y3);$No=r(A$e,"This class cannot be instantiated directly using "),cfe=n(A$e,"CODE",{});var Rlt=s(cfe);INo=r(Rlt,"__init__()"),Rlt.forEach(t),qNo=r(A$e," (throws an error)."),A$e.forEach(t),NNo=i(_l),et=n(_l,"DIV",{class:!0});var ul=s(et);m(L3.$$.fragment,ul),jNo=i(ul),ffe=n(ul,"P",{});var Blt=s(ffe);DNo=r(Blt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Blt.forEach(t),GNo=i(ul),Sd=n(ul,"P",{});var WU=s(Sd);ONo=r(WU,`Note:
Loading a model from its configuration file does `),mfe=n(WU,"STRONG",{});var Plt=s(mfe);VNo=r(Plt,"not"),Plt.forEach(t),XNo=r(WU,` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=n(WU,"A",{href:!0});var $lt=s(XD);zNo=r($lt,"from_pretrained()"),$lt.forEach(t),QNo=r(WU," to load the model weights."),WU.forEach(t),WNo=i(ul),gfe=n(ul,"P",{});var Ilt=s(gfe);HNo=r(Ilt,"Examples:"),Ilt.forEach(t),UNo=i(ul),m(x3.$$.fragment,ul),ul.forEach(t),JNo=i(_l),We=n(_l,"DIV",{class:!0});var Jt=s(We);m(k3.$$.fragment,Jt),YNo=i(Jt),hfe=n(Jt,"P",{});var qlt=s(hfe);KNo=r(qlt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),qlt.forEach(t),ZNo=i(Jt),en=n(Jt,"P",{});var O4=s(en);ejo=r(O4,"The model class to instantiate is selected based on the "),pfe=n(O4,"CODE",{});var Nlt=s(pfe);ojo=r(Nlt,"model_type"),Nlt.forEach(t),rjo=r(O4,` property of the config object (either
passed as an argument or loaded from `),_fe=n(O4,"CODE",{});var jlt=s(_fe);tjo=r(jlt,"pretrained_model_name_or_path"),jlt.forEach(t),ajo=r(O4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=n(O4,"CODE",{});var Dlt=s(ufe);njo=r(Dlt,"pretrained_model_name_or_path"),Dlt.forEach(t),sjo=r(O4,":"),O4.forEach(t),ljo=i(Jt),bfe=n(Jt,"UL",{});var Glt=s(bfe);fv=n(Glt,"LI",{});var r0e=s(fv);vfe=n(r0e,"STRONG",{});var Olt=s(vfe);ijo=r(Olt,"tapas"),Olt.forEach(t),djo=r(r0e," \u2014 "),zD=n(r0e,"A",{href:!0});var Vlt=s(zD);cjo=r(Vlt,"TapasForQuestionAnswering"),Vlt.forEach(t),fjo=r(r0e," (TAPAS model)"),r0e.forEach(t),Glt.forEach(t),mjo=i(Jt),mv=n(Jt,"P",{});var t0e=s(mv);gjo=r(t0e,"The model is set in evaluation mode by default using "),Ffe=n(t0e,"CODE",{});var Xlt=s(Ffe);hjo=r(Xlt,"model.eval()"),Xlt.forEach(t),pjo=r(t0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tfe=n(t0e,"CODE",{});var zlt=s(Tfe);_jo=r(zlt,"model.train()"),zlt.forEach(t),t0e.forEach(t),ujo=i(Jt),Mfe=n(Jt,"P",{});var Qlt=s(Mfe);bjo=r(Qlt,"Examples:"),Qlt.forEach(t),vjo=i(Jt),m(S3.$$.fragment,Jt),Jt.forEach(t),_l.forEach(t),bBe=i(c),Rd=n(c,"H2",{class:!0});var y$e=s(Rd);gv=n(y$e,"A",{id:!0,class:!0,href:!0});var Wlt=s(gv);Efe=n(Wlt,"SPAN",{});var Hlt=s(Efe);m(R3.$$.fragment,Hlt),Hlt.forEach(t),Wlt.forEach(t),Fjo=i(y$e),Cfe=n(y$e,"SPAN",{});var Ult=s(Cfe);Tjo=r(Ult,"AutoModelForImageClassification"),Ult.forEach(t),y$e.forEach(t),vBe=i(c),lr=n(c,"DIV",{class:!0});var bl=s(lr);m(B3.$$.fragment,bl),Mjo=i(bl),Bd=n(bl,"P",{});var HU=s(Bd);Ejo=r(HU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QD=n(HU,"A",{href:!0});var Jlt=s(QD);Cjo=r(Jlt,"from_pretrained()"),Jlt.forEach(t),wjo=r(HU," class method or the "),WD=n(HU,"A",{href:!0});var Ylt=s(WD);Ajo=r(Ylt,"from_config()"),Ylt.forEach(t),yjo=r(HU,` class
method.`),HU.forEach(t),Ljo=i(bl),P3=n(bl,"P",{});var L$e=s(P3);xjo=r(L$e,"This class cannot be instantiated directly using "),wfe=n(L$e,"CODE",{});var Klt=s(wfe);kjo=r(Klt,"__init__()"),Klt.forEach(t),Sjo=r(L$e," (throws an error)."),L$e.forEach(t),Rjo=i(bl),ot=n(bl,"DIV",{class:!0});var vl=s(ot);m($3.$$.fragment,vl),Bjo=i(vl),Afe=n(vl,"P",{});var Zlt=s(Afe);Pjo=r(Zlt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Zlt.forEach(t),$jo=i(vl),Pd=n(vl,"P",{});var UU=s(Pd);Ijo=r(UU,`Note:
Loading a model from its configuration file does `),yfe=n(UU,"STRONG",{});var eit=s(yfe);qjo=r(eit,"not"),eit.forEach(t),Njo=r(UU,` load the model weights. It only affects the
model\u2019s configuration. Use `),HD=n(UU,"A",{href:!0});var oit=s(HD);jjo=r(oit,"from_pretrained()"),oit.forEach(t),Djo=r(UU," to load the model weights."),UU.forEach(t),Gjo=i(vl),Lfe=n(vl,"P",{});var rit=s(Lfe);Ojo=r(rit,"Examples:"),rit.forEach(t),Vjo=i(vl),m(I3.$$.fragment,vl),vl.forEach(t),Xjo=i(bl),He=n(bl,"DIV",{class:!0});var Yt=s(He);m(q3.$$.fragment,Yt),zjo=i(Yt),xfe=n(Yt,"P",{});var tit=s(xfe);Qjo=r(tit,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tit.forEach(t),Wjo=i(Yt),on=n(Yt,"P",{});var V4=s(on);Hjo=r(V4,"The model class to instantiate is selected based on the "),kfe=n(V4,"CODE",{});var ait=s(kfe);Ujo=r(ait,"model_type"),ait.forEach(t),Jjo=r(V4,` property of the config object (either
passed as an argument or loaded from `),Sfe=n(V4,"CODE",{});var nit=s(Sfe);Yjo=r(nit,"pretrained_model_name_or_path"),nit.forEach(t),Kjo=r(V4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rfe=n(V4,"CODE",{});var sit=s(Rfe);Zjo=r(sit,"pretrained_model_name_or_path"),sit.forEach(t),eDo=r(V4,":"),V4.forEach(t),oDo=i(Yt),de=n(Yt,"UL",{});var ge=s(de);hv=n(ge,"LI",{});var a0e=s(hv);Bfe=n(a0e,"STRONG",{});var lit=s(Bfe);rDo=r(lit,"beit"),lit.forEach(t),tDo=r(a0e," \u2014 "),UD=n(a0e,"A",{href:!0});var iit=s(UD);aDo=r(iit,"BeitForImageClassification"),iit.forEach(t),nDo=r(a0e," (BEiT model)"),a0e.forEach(t),sDo=i(ge),pv=n(ge,"LI",{});var n0e=s(pv);Pfe=n(n0e,"STRONG",{});var dit=s(Pfe);lDo=r(dit,"convnext"),dit.forEach(t),iDo=r(n0e," \u2014 "),JD=n(n0e,"A",{href:!0});var cit=s(JD);dDo=r(cit,"ConvNextForImageClassification"),cit.forEach(t),cDo=r(n0e," (ConvNext model)"),n0e.forEach(t),fDo=i(ge),_v=n(ge,"LI",{});var s0e=s(_v);$fe=n(s0e,"STRONG",{});var fit=s($fe);mDo=r(fit,"data2vec-vision"),fit.forEach(t),gDo=r(s0e," \u2014 "),YD=n(s0e,"A",{href:!0});var mit=s(YD);hDo=r(mit,"Data2VecVisionForImageClassification"),mit.forEach(t),pDo=r(s0e," (Data2VecVision model)"),s0e.forEach(t),_Do=i(ge),Vs=n(ge,"LI",{});var TL=s(Vs);Ife=n(TL,"STRONG",{});var git=s(Ife);uDo=r(git,"deit"),git.forEach(t),bDo=r(TL," \u2014 "),KD=n(TL,"A",{href:!0});var hit=s(KD);vDo=r(hit,"DeiTForImageClassification"),hit.forEach(t),FDo=r(TL," or "),ZD=n(TL,"A",{href:!0});var pit=s(ZD);TDo=r(pit,"DeiTForImageClassificationWithTeacher"),pit.forEach(t),MDo=r(TL," (DeiT model)"),TL.forEach(t),EDo=i(ge),uv=n(ge,"LI",{});var l0e=s(uv);qfe=n(l0e,"STRONG",{});var _it=s(qfe);CDo=r(_it,"imagegpt"),_it.forEach(t),wDo=r(l0e," \u2014 "),eG=n(l0e,"A",{href:!0});var uit=s(eG);ADo=r(uit,"ImageGPTForImageClassification"),uit.forEach(t),yDo=r(l0e," (ImageGPT model)"),l0e.forEach(t),LDo=i(ge),ma=n(ge,"LI",{});var qf=s(ma);Nfe=n(qf,"STRONG",{});var bit=s(Nfe);xDo=r(bit,"perceiver"),bit.forEach(t),kDo=r(qf," \u2014 "),oG=n(qf,"A",{href:!0});var vit=s(oG);SDo=r(vit,"PerceiverForImageClassificationLearned"),vit.forEach(t),RDo=r(qf," or "),rG=n(qf,"A",{href:!0});var Fit=s(rG);BDo=r(Fit,"PerceiverForImageClassificationFourier"),Fit.forEach(t),PDo=r(qf," or "),tG=n(qf,"A",{href:!0});var Tit=s(tG);$Do=r(Tit,"PerceiverForImageClassificationConvProcessing"),Tit.forEach(t),IDo=r(qf," (Perceiver model)"),qf.forEach(t),qDo=i(ge),bv=n(ge,"LI",{});var i0e=s(bv);jfe=n(i0e,"STRONG",{});var Mit=s(jfe);NDo=r(Mit,"poolformer"),Mit.forEach(t),jDo=r(i0e," \u2014 "),aG=n(i0e,"A",{href:!0});var Eit=s(aG);DDo=r(Eit,"PoolFormerForImageClassification"),Eit.forEach(t),GDo=r(i0e," (PoolFormer model)"),i0e.forEach(t),ODo=i(ge),vv=n(ge,"LI",{});var d0e=s(vv);Dfe=n(d0e,"STRONG",{});var Cit=s(Dfe);VDo=r(Cit,"regnet"),Cit.forEach(t),XDo=r(d0e," \u2014 "),nG=n(d0e,"A",{href:!0});var wit=s(nG);zDo=r(wit,"RegNetForImageClassification"),wit.forEach(t),QDo=r(d0e," (RegNet model)"),d0e.forEach(t),WDo=i(ge),Fv=n(ge,"LI",{});var c0e=s(Fv);Gfe=n(c0e,"STRONG",{});var Ait=s(Gfe);HDo=r(Ait,"resnet"),Ait.forEach(t),UDo=r(c0e," \u2014 "),sG=n(c0e,"A",{href:!0});var yit=s(sG);JDo=r(yit,"ResNetForImageClassification"),yit.forEach(t),YDo=r(c0e," (ResNet model)"),c0e.forEach(t),KDo=i(ge),Tv=n(ge,"LI",{});var f0e=s(Tv);Ofe=n(f0e,"STRONG",{});var Lit=s(Ofe);ZDo=r(Lit,"segformer"),Lit.forEach(t),eGo=r(f0e," \u2014 "),lG=n(f0e,"A",{href:!0});var xit=s(lG);oGo=r(xit,"SegformerForImageClassification"),xit.forEach(t),rGo=r(f0e," (SegFormer model)"),f0e.forEach(t),tGo=i(ge),Mv=n(ge,"LI",{});var m0e=s(Mv);Vfe=n(m0e,"STRONG",{});var kit=s(Vfe);aGo=r(kit,"swin"),kit.forEach(t),nGo=r(m0e," \u2014 "),iG=n(m0e,"A",{href:!0});var Sit=s(iG);sGo=r(Sit,"SwinForImageClassification"),Sit.forEach(t),lGo=r(m0e," (Swin model)"),m0e.forEach(t),iGo=i(ge),Ev=n(ge,"LI",{});var g0e=s(Ev);Xfe=n(g0e,"STRONG",{});var Rit=s(Xfe);dGo=r(Rit,"van"),Rit.forEach(t),cGo=r(g0e," \u2014 "),dG=n(g0e,"A",{href:!0});var Bit=s(dG);fGo=r(Bit,"VanForImageClassification"),Bit.forEach(t),mGo=r(g0e," (VAN model)"),g0e.forEach(t),gGo=i(ge),Cv=n(ge,"LI",{});var h0e=s(Cv);zfe=n(h0e,"STRONG",{});var Pit=s(zfe);hGo=r(Pit,"vit"),Pit.forEach(t),pGo=r(h0e," \u2014 "),cG=n(h0e,"A",{href:!0});var $it=s(cG);_Go=r($it,"ViTForImageClassification"),$it.forEach(t),uGo=r(h0e," (ViT model)"),h0e.forEach(t),ge.forEach(t),bGo=i(Yt),wv=n(Yt,"P",{});var p0e=s(wv);vGo=r(p0e,"The model is set in evaluation mode by default using "),Qfe=n(p0e,"CODE",{});var Iit=s(Qfe);FGo=r(Iit,"model.eval()"),Iit.forEach(t),TGo=r(p0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wfe=n(p0e,"CODE",{});var qit=s(Wfe);MGo=r(qit,"model.train()"),qit.forEach(t),p0e.forEach(t),EGo=i(Yt),Hfe=n(Yt,"P",{});var Nit=s(Hfe);CGo=r(Nit,"Examples:"),Nit.forEach(t),wGo=i(Yt),m(N3.$$.fragment,Yt),Yt.forEach(t),bl.forEach(t),FBe=i(c),$d=n(c,"H2",{class:!0});var x$e=s($d);Av=n(x$e,"A",{id:!0,class:!0,href:!0});var jit=s(Av);Ufe=n(jit,"SPAN",{});var Dit=s(Ufe);m(j3.$$.fragment,Dit),Dit.forEach(t),jit.forEach(t),AGo=i(x$e),Jfe=n(x$e,"SPAN",{});var Git=s(Jfe);yGo=r(Git,"AutoModelForVision2Seq"),Git.forEach(t),x$e.forEach(t),TBe=i(c),ir=n(c,"DIV",{class:!0});var Fl=s(ir);m(D3.$$.fragment,Fl),LGo=i(Fl),Id=n(Fl,"P",{});var JU=s(Id);xGo=r(JU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fG=n(JU,"A",{href:!0});var Oit=s(fG);kGo=r(Oit,"from_pretrained()"),Oit.forEach(t),SGo=r(JU," class method or the "),mG=n(JU,"A",{href:!0});var Vit=s(mG);RGo=r(Vit,"from_config()"),Vit.forEach(t),BGo=r(JU,` class
method.`),JU.forEach(t),PGo=i(Fl),G3=n(Fl,"P",{});var k$e=s(G3);$Go=r(k$e,"This class cannot be instantiated directly using "),Yfe=n(k$e,"CODE",{});var Xit=s(Yfe);IGo=r(Xit,"__init__()"),Xit.forEach(t),qGo=r(k$e," (throws an error)."),k$e.forEach(t),NGo=i(Fl),rt=n(Fl,"DIV",{class:!0});var Tl=s(rt);m(O3.$$.fragment,Tl),jGo=i(Tl),Kfe=n(Tl,"P",{});var zit=s(Kfe);DGo=r(zit,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zit.forEach(t),GGo=i(Tl),qd=n(Tl,"P",{});var YU=s(qd);OGo=r(YU,`Note:
Loading a model from its configuration file does `),Zfe=n(YU,"STRONG",{});var Qit=s(Zfe);VGo=r(Qit,"not"),Qit.forEach(t),XGo=r(YU,` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=n(YU,"A",{href:!0});var Wit=s(gG);zGo=r(Wit,"from_pretrained()"),Wit.forEach(t),QGo=r(YU," to load the model weights."),YU.forEach(t),WGo=i(Tl),eme=n(Tl,"P",{});var Hit=s(eme);HGo=r(Hit,"Examples:"),Hit.forEach(t),UGo=i(Tl),m(V3.$$.fragment,Tl),Tl.forEach(t),JGo=i(Fl),Ue=n(Fl,"DIV",{class:!0});var Kt=s(Ue);m(X3.$$.fragment,Kt),YGo=i(Kt),ome=n(Kt,"P",{});var Uit=s(ome);KGo=r(Uit,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Uit.forEach(t),ZGo=i(Kt),rn=n(Kt,"P",{});var X4=s(rn);eOo=r(X4,"The model class to instantiate is selected based on the "),rme=n(X4,"CODE",{});var Jit=s(rme);oOo=r(Jit,"model_type"),Jit.forEach(t),rOo=r(X4,` property of the config object (either
passed as an argument or loaded from `),tme=n(X4,"CODE",{});var Yit=s(tme);tOo=r(Yit,"pretrained_model_name_or_path"),Yit.forEach(t),aOo=r(X4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ame=n(X4,"CODE",{});var Kit=s(ame);nOo=r(Kit,"pretrained_model_name_or_path"),Kit.forEach(t),sOo=r(X4,":"),X4.forEach(t),lOo=i(Kt),nme=n(Kt,"UL",{});var Zit=s(nme);yv=n(Zit,"LI",{});var _0e=s(yv);sme=n(_0e,"STRONG",{});var edt=s(sme);iOo=r(edt,"vision-encoder-decoder"),edt.forEach(t),dOo=r(_0e," \u2014 "),hG=n(_0e,"A",{href:!0});var odt=s(hG);cOo=r(odt,"VisionEncoderDecoderModel"),odt.forEach(t),fOo=r(_0e," (Vision Encoder decoder model)"),_0e.forEach(t),Zit.forEach(t),mOo=i(Kt),Lv=n(Kt,"P",{});var u0e=s(Lv);gOo=r(u0e,"The model is set in evaluation mode by default using "),lme=n(u0e,"CODE",{});var rdt=s(lme);hOo=r(rdt,"model.eval()"),rdt.forEach(t),pOo=r(u0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ime=n(u0e,"CODE",{});var tdt=s(ime);_Oo=r(tdt,"model.train()"),tdt.forEach(t),u0e.forEach(t),uOo=i(Kt),dme=n(Kt,"P",{});var adt=s(dme);bOo=r(adt,"Examples:"),adt.forEach(t),vOo=i(Kt),m(z3.$$.fragment,Kt),Kt.forEach(t),Fl.forEach(t),MBe=i(c),Nd=n(c,"H2",{class:!0});var S$e=s(Nd);xv=n(S$e,"A",{id:!0,class:!0,href:!0});var ndt=s(xv);cme=n(ndt,"SPAN",{});var sdt=s(cme);m(Q3.$$.fragment,sdt),sdt.forEach(t),ndt.forEach(t),FOo=i(S$e),fme=n(S$e,"SPAN",{});var ldt=s(fme);TOo=r(ldt,"AutoModelForAudioClassification"),ldt.forEach(t),S$e.forEach(t),EBe=i(c),dr=n(c,"DIV",{class:!0});var Ml=s(dr);m(W3.$$.fragment,Ml),MOo=i(Ml),jd=n(Ml,"P",{});var KU=s(jd);EOo=r(KU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),pG=n(KU,"A",{href:!0});var idt=s(pG);COo=r(idt,"from_pretrained()"),idt.forEach(t),wOo=r(KU," class method or the "),_G=n(KU,"A",{href:!0});var ddt=s(_G);AOo=r(ddt,"from_config()"),ddt.forEach(t),yOo=r(KU,` class
method.`),KU.forEach(t),LOo=i(Ml),H3=n(Ml,"P",{});var R$e=s(H3);xOo=r(R$e,"This class cannot be instantiated directly using "),mme=n(R$e,"CODE",{});var cdt=s(mme);kOo=r(cdt,"__init__()"),cdt.forEach(t),SOo=r(R$e," (throws an error)."),R$e.forEach(t),ROo=i(Ml),tt=n(Ml,"DIV",{class:!0});var El=s(tt);m(U3.$$.fragment,El),BOo=i(El),gme=n(El,"P",{});var fdt=s(gme);POo=r(fdt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),fdt.forEach(t),$Oo=i(El),Dd=n(El,"P",{});var ZU=s(Dd);IOo=r(ZU,`Note:
Loading a model from its configuration file does `),hme=n(ZU,"STRONG",{});var mdt=s(hme);qOo=r(mdt,"not"),mdt.forEach(t),NOo=r(ZU,` load the model weights. It only affects the
model\u2019s configuration. Use `),uG=n(ZU,"A",{href:!0});var gdt=s(uG);jOo=r(gdt,"from_pretrained()"),gdt.forEach(t),DOo=r(ZU," to load the model weights."),ZU.forEach(t),GOo=i(El),pme=n(El,"P",{});var hdt=s(pme);OOo=r(hdt,"Examples:"),hdt.forEach(t),VOo=i(El),m(J3.$$.fragment,El),El.forEach(t),XOo=i(Ml),Je=n(Ml,"DIV",{class:!0});var Zt=s(Je);m(Y3.$$.fragment,Zt),zOo=i(Zt),_me=n(Zt,"P",{});var pdt=s(_me);QOo=r(pdt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),pdt.forEach(t),WOo=i(Zt),tn=n(Zt,"P",{});var z4=s(tn);HOo=r(z4,"The model class to instantiate is selected based on the "),ume=n(z4,"CODE",{});var _dt=s(ume);UOo=r(_dt,"model_type"),_dt.forEach(t),JOo=r(z4,` property of the config object (either
passed as an argument or loaded from `),bme=n(z4,"CODE",{});var udt=s(bme);YOo=r(udt,"pretrained_model_name_or_path"),udt.forEach(t),KOo=r(z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vme=n(z4,"CODE",{});var bdt=s(vme);ZOo=r(bdt,"pretrained_model_name_or_path"),bdt.forEach(t),eVo=r(z4,":"),z4.forEach(t),oVo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);kv=n(Do,"LI",{});var b0e=s(kv);Fme=n(b0e,"STRONG",{});var vdt=s(Fme);rVo=r(vdt,"data2vec-audio"),vdt.forEach(t),tVo=r(b0e," \u2014 "),bG=n(b0e,"A",{href:!0});var Fdt=s(bG);aVo=r(Fdt,"Data2VecAudioForSequenceClassification"),Fdt.forEach(t),nVo=r(b0e," (Data2VecAudio model)"),b0e.forEach(t),sVo=i(Do),Sv=n(Do,"LI",{});var v0e=s(Sv);Tme=n(v0e,"STRONG",{});var Tdt=s(Tme);lVo=r(Tdt,"hubert"),Tdt.forEach(t),iVo=r(v0e," \u2014 "),vG=n(v0e,"A",{href:!0});var Mdt=s(vG);dVo=r(Mdt,"HubertForSequenceClassification"),Mdt.forEach(t),cVo=r(v0e," (Hubert model)"),v0e.forEach(t),fVo=i(Do),Rv=n(Do,"LI",{});var F0e=s(Rv);Mme=n(F0e,"STRONG",{});var Edt=s(Mme);mVo=r(Edt,"sew"),Edt.forEach(t),gVo=r(F0e," \u2014 "),FG=n(F0e,"A",{href:!0});var Cdt=s(FG);hVo=r(Cdt,"SEWForSequenceClassification"),Cdt.forEach(t),pVo=r(F0e," (SEW model)"),F0e.forEach(t),_Vo=i(Do),Bv=n(Do,"LI",{});var T0e=s(Bv);Eme=n(T0e,"STRONG",{});var wdt=s(Eme);uVo=r(wdt,"sew-d"),wdt.forEach(t),bVo=r(T0e," \u2014 "),TG=n(T0e,"A",{href:!0});var Adt=s(TG);vVo=r(Adt,"SEWDForSequenceClassification"),Adt.forEach(t),FVo=r(T0e," (SEW-D model)"),T0e.forEach(t),TVo=i(Do),Pv=n(Do,"LI",{});var M0e=s(Pv);Cme=n(M0e,"STRONG",{});var ydt=s(Cme);MVo=r(ydt,"unispeech"),ydt.forEach(t),EVo=r(M0e," \u2014 "),MG=n(M0e,"A",{href:!0});var Ldt=s(MG);CVo=r(Ldt,"UniSpeechForSequenceClassification"),Ldt.forEach(t),wVo=r(M0e," (UniSpeech model)"),M0e.forEach(t),AVo=i(Do),$v=n(Do,"LI",{});var E0e=s($v);wme=n(E0e,"STRONG",{});var xdt=s(wme);yVo=r(xdt,"unispeech-sat"),xdt.forEach(t),LVo=r(E0e," \u2014 "),EG=n(E0e,"A",{href:!0});var kdt=s(EG);xVo=r(kdt,"UniSpeechSatForSequenceClassification"),kdt.forEach(t),kVo=r(E0e," (UniSpeechSat model)"),E0e.forEach(t),SVo=i(Do),Iv=n(Do,"LI",{});var C0e=s(Iv);Ame=n(C0e,"STRONG",{});var Sdt=s(Ame);RVo=r(Sdt,"wav2vec2"),Sdt.forEach(t),BVo=r(C0e," \u2014 "),CG=n(C0e,"A",{href:!0});var Rdt=s(CG);PVo=r(Rdt,"Wav2Vec2ForSequenceClassification"),Rdt.forEach(t),$Vo=r(C0e," (Wav2Vec2 model)"),C0e.forEach(t),IVo=i(Do),qv=n(Do,"LI",{});var w0e=s(qv);yme=n(w0e,"STRONG",{});var Bdt=s(yme);qVo=r(Bdt,"wavlm"),Bdt.forEach(t),NVo=r(w0e," \u2014 "),wG=n(w0e,"A",{href:!0});var Pdt=s(wG);jVo=r(Pdt,"WavLMForSequenceClassification"),Pdt.forEach(t),DVo=r(w0e," (WavLM model)"),w0e.forEach(t),Do.forEach(t),GVo=i(Zt),Nv=n(Zt,"P",{});var A0e=s(Nv);OVo=r(A0e,"The model is set in evaluation mode by default using "),Lme=n(A0e,"CODE",{});var $dt=s(Lme);VVo=r($dt,"model.eval()"),$dt.forEach(t),XVo=r(A0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xme=n(A0e,"CODE",{});var Idt=s(xme);zVo=r(Idt,"model.train()"),Idt.forEach(t),A0e.forEach(t),QVo=i(Zt),kme=n(Zt,"P",{});var qdt=s(kme);WVo=r(qdt,"Examples:"),qdt.forEach(t),HVo=i(Zt),m(K3.$$.fragment,Zt),Zt.forEach(t),Ml.forEach(t),CBe=i(c),Gd=n(c,"H2",{class:!0});var B$e=s(Gd);jv=n(B$e,"A",{id:!0,class:!0,href:!0});var Ndt=s(jv);Sme=n(Ndt,"SPAN",{});var jdt=s(Sme);m(Z3.$$.fragment,jdt),jdt.forEach(t),Ndt.forEach(t),UVo=i(B$e),Rme=n(B$e,"SPAN",{});var Ddt=s(Rme);JVo=r(Ddt,"AutoModelForAudioFrameClassification"),Ddt.forEach(t),B$e.forEach(t),wBe=i(c),cr=n(c,"DIV",{class:!0});var Cl=s(cr);m(eC.$$.fragment,Cl),YVo=i(Cl),Od=n(Cl,"P",{});var eJ=s(Od);KVo=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),AG=n(eJ,"A",{href:!0});var Gdt=s(AG);ZVo=r(Gdt,"from_pretrained()"),Gdt.forEach(t),eXo=r(eJ," class method or the "),yG=n(eJ,"A",{href:!0});var Odt=s(yG);oXo=r(Odt,"from_config()"),Odt.forEach(t),rXo=r(eJ,` class
method.`),eJ.forEach(t),tXo=i(Cl),oC=n(Cl,"P",{});var P$e=s(oC);aXo=r(P$e,"This class cannot be instantiated directly using "),Bme=n(P$e,"CODE",{});var Vdt=s(Bme);nXo=r(Vdt,"__init__()"),Vdt.forEach(t),sXo=r(P$e," (throws an error)."),P$e.forEach(t),lXo=i(Cl),at=n(Cl,"DIV",{class:!0});var wl=s(at);m(rC.$$.fragment,wl),iXo=i(wl),Pme=n(wl,"P",{});var Xdt=s(Pme);dXo=r(Xdt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Xdt.forEach(t),cXo=i(wl),Vd=n(wl,"P",{});var oJ=s(Vd);fXo=r(oJ,`Note:
Loading a model from its configuration file does `),$me=n(oJ,"STRONG",{});var zdt=s($me);mXo=r(zdt,"not"),zdt.forEach(t),gXo=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=n(oJ,"A",{href:!0});var Qdt=s(LG);hXo=r(Qdt,"from_pretrained()"),Qdt.forEach(t),pXo=r(oJ," to load the model weights."),oJ.forEach(t),_Xo=i(wl),Ime=n(wl,"P",{});var Wdt=s(Ime);uXo=r(Wdt,"Examples:"),Wdt.forEach(t),bXo=i(wl),m(tC.$$.fragment,wl),wl.forEach(t),vXo=i(Cl),Ye=n(Cl,"DIV",{class:!0});var ea=s(Ye);m(aC.$$.fragment,ea),FXo=i(ea),qme=n(ea,"P",{});var Hdt=s(qme);TXo=r(Hdt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Hdt.forEach(t),MXo=i(ea),an=n(ea,"P",{});var Q4=s(an);EXo=r(Q4,"The model class to instantiate is selected based on the "),Nme=n(Q4,"CODE",{});var Udt=s(Nme);CXo=r(Udt,"model_type"),Udt.forEach(t),wXo=r(Q4,` property of the config object (either
passed as an argument or loaded from `),jme=n(Q4,"CODE",{});var Jdt=s(jme);AXo=r(Jdt,"pretrained_model_name_or_path"),Jdt.forEach(t),yXo=r(Q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dme=n(Q4,"CODE",{});var Ydt=s(Dme);LXo=r(Ydt,"pretrained_model_name_or_path"),Ydt.forEach(t),xXo=r(Q4,":"),Q4.forEach(t),kXo=i(ea),nn=n(ea,"UL",{});var W4=s(nn);Dv=n(W4,"LI",{});var y0e=s(Dv);Gme=n(y0e,"STRONG",{});var Kdt=s(Gme);SXo=r(Kdt,"data2vec-audio"),Kdt.forEach(t),RXo=r(y0e," \u2014 "),xG=n(y0e,"A",{href:!0});var Zdt=s(xG);BXo=r(Zdt,"Data2VecAudioForAudioFrameClassification"),Zdt.forEach(t),PXo=r(y0e," (Data2VecAudio model)"),y0e.forEach(t),$Xo=i(W4),Gv=n(W4,"LI",{});var L0e=s(Gv);Ome=n(L0e,"STRONG",{});var ect=s(Ome);IXo=r(ect,"unispeech-sat"),ect.forEach(t),qXo=r(L0e," \u2014 "),kG=n(L0e,"A",{href:!0});var oct=s(kG);NXo=r(oct,"UniSpeechSatForAudioFrameClassification"),oct.forEach(t),jXo=r(L0e," (UniSpeechSat model)"),L0e.forEach(t),DXo=i(W4),Ov=n(W4,"LI",{});var x0e=s(Ov);Vme=n(x0e,"STRONG",{});var rct=s(Vme);GXo=r(rct,"wav2vec2"),rct.forEach(t),OXo=r(x0e," \u2014 "),SG=n(x0e,"A",{href:!0});var tct=s(SG);VXo=r(tct,"Wav2Vec2ForAudioFrameClassification"),tct.forEach(t),XXo=r(x0e," (Wav2Vec2 model)"),x0e.forEach(t),zXo=i(W4),Vv=n(W4,"LI",{});var k0e=s(Vv);Xme=n(k0e,"STRONG",{});var act=s(Xme);QXo=r(act,"wavlm"),act.forEach(t),WXo=r(k0e," \u2014 "),RG=n(k0e,"A",{href:!0});var nct=s(RG);HXo=r(nct,"WavLMForAudioFrameClassification"),nct.forEach(t),UXo=r(k0e," (WavLM model)"),k0e.forEach(t),W4.forEach(t),JXo=i(ea),Xv=n(ea,"P",{});var S0e=s(Xv);YXo=r(S0e,"The model is set in evaluation mode by default using "),zme=n(S0e,"CODE",{});var sct=s(zme);KXo=r(sct,"model.eval()"),sct.forEach(t),ZXo=r(S0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qme=n(S0e,"CODE",{});var lct=s(Qme);ezo=r(lct,"model.train()"),lct.forEach(t),S0e.forEach(t),ozo=i(ea),Wme=n(ea,"P",{});var ict=s(Wme);rzo=r(ict,"Examples:"),ict.forEach(t),tzo=i(ea),m(nC.$$.fragment,ea),ea.forEach(t),Cl.forEach(t),ABe=i(c),Xd=n(c,"H2",{class:!0});var $$e=s(Xd);zv=n($$e,"A",{id:!0,class:!0,href:!0});var dct=s(zv);Hme=n(dct,"SPAN",{});var cct=s(Hme);m(sC.$$.fragment,cct),cct.forEach(t),dct.forEach(t),azo=i($$e),Ume=n($$e,"SPAN",{});var fct=s(Ume);nzo=r(fct,"AutoModelForCTC"),fct.forEach(t),$$e.forEach(t),yBe=i(c),fr=n(c,"DIV",{class:!0});var Al=s(fr);m(lC.$$.fragment,Al),szo=i(Al),zd=n(Al,"P",{});var rJ=s(zd);lzo=r(rJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),BG=n(rJ,"A",{href:!0});var mct=s(BG);izo=r(mct,"from_pretrained()"),mct.forEach(t),dzo=r(rJ," class method or the "),PG=n(rJ,"A",{href:!0});var gct=s(PG);czo=r(gct,"from_config()"),gct.forEach(t),fzo=r(rJ,` class
method.`),rJ.forEach(t),mzo=i(Al),iC=n(Al,"P",{});var I$e=s(iC);gzo=r(I$e,"This class cannot be instantiated directly using "),Jme=n(I$e,"CODE",{});var hct=s(Jme);hzo=r(hct,"__init__()"),hct.forEach(t),pzo=r(I$e," (throws an error)."),I$e.forEach(t),_zo=i(Al),nt=n(Al,"DIV",{class:!0});var yl=s(nt);m(dC.$$.fragment,yl),uzo=i(yl),Yme=n(yl,"P",{});var pct=s(Yme);bzo=r(pct,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),pct.forEach(t),vzo=i(yl),Qd=n(yl,"P",{});var tJ=s(Qd);Fzo=r(tJ,`Note:
Loading a model from its configuration file does `),Kme=n(tJ,"STRONG",{});var _ct=s(Kme);Tzo=r(_ct,"not"),_ct.forEach(t),Mzo=r(tJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$G=n(tJ,"A",{href:!0});var uct=s($G);Ezo=r(uct,"from_pretrained()"),uct.forEach(t),Czo=r(tJ," to load the model weights."),tJ.forEach(t),wzo=i(yl),Zme=n(yl,"P",{});var bct=s(Zme);Azo=r(bct,"Examples:"),bct.forEach(t),yzo=i(yl),m(cC.$$.fragment,yl),yl.forEach(t),Lzo=i(Al),Ke=n(Al,"DIV",{class:!0});var oa=s(Ke);m(fC.$$.fragment,oa),xzo=i(oa),ege=n(oa,"P",{});var vct=s(ege);kzo=r(vct,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),vct.forEach(t),Szo=i(oa),sn=n(oa,"P",{});var H4=s(sn);Rzo=r(H4,"The model class to instantiate is selected based on the "),oge=n(H4,"CODE",{});var Fct=s(oge);Bzo=r(Fct,"model_type"),Fct.forEach(t),Pzo=r(H4,` property of the config object (either
passed as an argument or loaded from `),rge=n(H4,"CODE",{});var Tct=s(rge);$zo=r(Tct,"pretrained_model_name_or_path"),Tct.forEach(t),Izo=r(H4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tge=n(H4,"CODE",{});var Mct=s(tge);qzo=r(Mct,"pretrained_model_name_or_path"),Mct.forEach(t),Nzo=r(H4,":"),H4.forEach(t),jzo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);Qv=n(Go,"LI",{});var R0e=s(Qv);age=n(R0e,"STRONG",{});var Ect=s(age);Dzo=r(Ect,"data2vec-audio"),Ect.forEach(t),Gzo=r(R0e," \u2014 "),IG=n(R0e,"A",{href:!0});var Cct=s(IG);Ozo=r(Cct,"Data2VecAudioForCTC"),Cct.forEach(t),Vzo=r(R0e," (Data2VecAudio model)"),R0e.forEach(t),Xzo=i(Go),Wv=n(Go,"LI",{});var B0e=s(Wv);nge=n(B0e,"STRONG",{});var wct=s(nge);zzo=r(wct,"hubert"),wct.forEach(t),Qzo=r(B0e," \u2014 "),qG=n(B0e,"A",{href:!0});var Act=s(qG);Wzo=r(Act,"HubertForCTC"),Act.forEach(t),Hzo=r(B0e," (Hubert model)"),B0e.forEach(t),Uzo=i(Go),Hv=n(Go,"LI",{});var P0e=s(Hv);sge=n(P0e,"STRONG",{});var yct=s(sge);Jzo=r(yct,"sew"),yct.forEach(t),Yzo=r(P0e," \u2014 "),NG=n(P0e,"A",{href:!0});var Lct=s(NG);Kzo=r(Lct,"SEWForCTC"),Lct.forEach(t),Zzo=r(P0e," (SEW model)"),P0e.forEach(t),eQo=i(Go),Uv=n(Go,"LI",{});var $0e=s(Uv);lge=n($0e,"STRONG",{});var xct=s(lge);oQo=r(xct,"sew-d"),xct.forEach(t),rQo=r($0e," \u2014 "),jG=n($0e,"A",{href:!0});var kct=s(jG);tQo=r(kct,"SEWDForCTC"),kct.forEach(t),aQo=r($0e," (SEW-D model)"),$0e.forEach(t),nQo=i(Go),Jv=n(Go,"LI",{});var I0e=s(Jv);ige=n(I0e,"STRONG",{});var Sct=s(ige);sQo=r(Sct,"unispeech"),Sct.forEach(t),lQo=r(I0e," \u2014 "),DG=n(I0e,"A",{href:!0});var Rct=s(DG);iQo=r(Rct,"UniSpeechForCTC"),Rct.forEach(t),dQo=r(I0e," (UniSpeech model)"),I0e.forEach(t),cQo=i(Go),Yv=n(Go,"LI",{});var q0e=s(Yv);dge=n(q0e,"STRONG",{});var Bct=s(dge);fQo=r(Bct,"unispeech-sat"),Bct.forEach(t),mQo=r(q0e," \u2014 "),GG=n(q0e,"A",{href:!0});var Pct=s(GG);gQo=r(Pct,"UniSpeechSatForCTC"),Pct.forEach(t),hQo=r(q0e," (UniSpeechSat model)"),q0e.forEach(t),pQo=i(Go),Kv=n(Go,"LI",{});var N0e=s(Kv);cge=n(N0e,"STRONG",{});var $ct=s(cge);_Qo=r($ct,"wav2vec2"),$ct.forEach(t),uQo=r(N0e," \u2014 "),OG=n(N0e,"A",{href:!0});var Ict=s(OG);bQo=r(Ict,"Wav2Vec2ForCTC"),Ict.forEach(t),vQo=r(N0e," (Wav2Vec2 model)"),N0e.forEach(t),FQo=i(Go),Zv=n(Go,"LI",{});var j0e=s(Zv);fge=n(j0e,"STRONG",{});var qct=s(fge);TQo=r(qct,"wavlm"),qct.forEach(t),MQo=r(j0e," \u2014 "),VG=n(j0e,"A",{href:!0});var Nct=s(VG);EQo=r(Nct,"WavLMForCTC"),Nct.forEach(t),CQo=r(j0e," (WavLM model)"),j0e.forEach(t),Go.forEach(t),wQo=i(oa),eF=n(oa,"P",{});var D0e=s(eF);AQo=r(D0e,"The model is set in evaluation mode by default using "),mge=n(D0e,"CODE",{});var jct=s(mge);yQo=r(jct,"model.eval()"),jct.forEach(t),LQo=r(D0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gge=n(D0e,"CODE",{});var Dct=s(gge);xQo=r(Dct,"model.train()"),Dct.forEach(t),D0e.forEach(t),kQo=i(oa),hge=n(oa,"P",{});var Gct=s(hge);SQo=r(Gct,"Examples:"),Gct.forEach(t),RQo=i(oa),m(mC.$$.fragment,oa),oa.forEach(t),Al.forEach(t),LBe=i(c),Wd=n(c,"H2",{class:!0});var q$e=s(Wd);oF=n(q$e,"A",{id:!0,class:!0,href:!0});var Oct=s(oF);pge=n(Oct,"SPAN",{});var Vct=s(pge);m(gC.$$.fragment,Vct),Vct.forEach(t),Oct.forEach(t),BQo=i(q$e),_ge=n(q$e,"SPAN",{});var Xct=s(_ge);PQo=r(Xct,"AutoModelForSpeechSeq2Seq"),Xct.forEach(t),q$e.forEach(t),xBe=i(c),mr=n(c,"DIV",{class:!0});var Ll=s(mr);m(hC.$$.fragment,Ll),$Qo=i(Ll),Hd=n(Ll,"P",{});var aJ=s(Hd);IQo=r(aJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XG=n(aJ,"A",{href:!0});var zct=s(XG);qQo=r(zct,"from_pretrained()"),zct.forEach(t),NQo=r(aJ," class method or the "),zG=n(aJ,"A",{href:!0});var Qct=s(zG);jQo=r(Qct,"from_config()"),Qct.forEach(t),DQo=r(aJ,` class
method.`),aJ.forEach(t),GQo=i(Ll),pC=n(Ll,"P",{});var N$e=s(pC);OQo=r(N$e,"This class cannot be instantiated directly using "),uge=n(N$e,"CODE",{});var Wct=s(uge);VQo=r(Wct,"__init__()"),Wct.forEach(t),XQo=r(N$e," (throws an error)."),N$e.forEach(t),zQo=i(Ll),st=n(Ll,"DIV",{class:!0});var xl=s(st);m(_C.$$.fragment,xl),QQo=i(xl),bge=n(xl,"P",{});var Hct=s(bge);WQo=r(Hct,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Hct.forEach(t),HQo=i(xl),Ud=n(xl,"P",{});var nJ=s(Ud);UQo=r(nJ,`Note:
Loading a model from its configuration file does `),vge=n(nJ,"STRONG",{});var Uct=s(vge);JQo=r(Uct,"not"),Uct.forEach(t),YQo=r(nJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=n(nJ,"A",{href:!0});var Jct=s(QG);KQo=r(Jct,"from_pretrained()"),Jct.forEach(t),ZQo=r(nJ," to load the model weights."),nJ.forEach(t),eWo=i(xl),Fge=n(xl,"P",{});var Yct=s(Fge);oWo=r(Yct,"Examples:"),Yct.forEach(t),rWo=i(xl),m(uC.$$.fragment,xl),xl.forEach(t),tWo=i(Ll),Ze=n(Ll,"DIV",{class:!0});var ra=s(Ze);m(bC.$$.fragment,ra),aWo=i(ra),Tge=n(ra,"P",{});var Kct=s(Tge);nWo=r(Kct,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Kct.forEach(t),sWo=i(ra),ln=n(ra,"P",{});var U4=s(ln);lWo=r(U4,"The model class to instantiate is selected based on the "),Mge=n(U4,"CODE",{});var Zct=s(Mge);iWo=r(Zct,"model_type"),Zct.forEach(t),dWo=r(U4,` property of the config object (either
passed as an argument or loaded from `),Ege=n(U4,"CODE",{});var eft=s(Ege);cWo=r(eft,"pretrained_model_name_or_path"),eft.forEach(t),fWo=r(U4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=n(U4,"CODE",{});var oft=s(Cge);mWo=r(oft,"pretrained_model_name_or_path"),oft.forEach(t),gWo=r(U4,":"),U4.forEach(t),hWo=i(ra),vC=n(ra,"UL",{});var j$e=s(vC);rF=n(j$e,"LI",{});var G0e=s(rF);wge=n(G0e,"STRONG",{});var rft=s(wge);pWo=r(rft,"speech-encoder-decoder"),rft.forEach(t),_Wo=r(G0e," \u2014 "),WG=n(G0e,"A",{href:!0});var tft=s(WG);uWo=r(tft,"SpeechEncoderDecoderModel"),tft.forEach(t),bWo=r(G0e," (Speech Encoder decoder model)"),G0e.forEach(t),vWo=i(j$e),tF=n(j$e,"LI",{});var O0e=s(tF);Age=n(O0e,"STRONG",{});var aft=s(Age);FWo=r(aft,"speech_to_text"),aft.forEach(t),TWo=r(O0e," \u2014 "),HG=n(O0e,"A",{href:!0});var nft=s(HG);MWo=r(nft,"Speech2TextForConditionalGeneration"),nft.forEach(t),EWo=r(O0e," (Speech2Text model)"),O0e.forEach(t),j$e.forEach(t),CWo=i(ra),aF=n(ra,"P",{});var V0e=s(aF);wWo=r(V0e,"The model is set in evaluation mode by default using "),yge=n(V0e,"CODE",{});var sft=s(yge);AWo=r(sft,"model.eval()"),sft.forEach(t),yWo=r(V0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=n(V0e,"CODE",{});var lft=s(Lge);LWo=r(lft,"model.train()"),lft.forEach(t),V0e.forEach(t),xWo=i(ra),xge=n(ra,"P",{});var ift=s(xge);kWo=r(ift,"Examples:"),ift.forEach(t),SWo=i(ra),m(FC.$$.fragment,ra),ra.forEach(t),Ll.forEach(t),kBe=i(c),Jd=n(c,"H2",{class:!0});var D$e=s(Jd);nF=n(D$e,"A",{id:!0,class:!0,href:!0});var dft=s(nF);kge=n(dft,"SPAN",{});var cft=s(kge);m(TC.$$.fragment,cft),cft.forEach(t),dft.forEach(t),RWo=i(D$e),Sge=n(D$e,"SPAN",{});var fft=s(Sge);BWo=r(fft,"AutoModelForAudioXVector"),fft.forEach(t),D$e.forEach(t),SBe=i(c),gr=n(c,"DIV",{class:!0});var kl=s(gr);m(MC.$$.fragment,kl),PWo=i(kl),Yd=n(kl,"P",{});var sJ=s(Yd);$Wo=r(sJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),UG=n(sJ,"A",{href:!0});var mft=s(UG);IWo=r(mft,"from_pretrained()"),mft.forEach(t),qWo=r(sJ," class method or the "),JG=n(sJ,"A",{href:!0});var gft=s(JG);NWo=r(gft,"from_config()"),gft.forEach(t),jWo=r(sJ,` class
method.`),sJ.forEach(t),DWo=i(kl),EC=n(kl,"P",{});var G$e=s(EC);GWo=r(G$e,"This class cannot be instantiated directly using "),Rge=n(G$e,"CODE",{});var hft=s(Rge);OWo=r(hft,"__init__()"),hft.forEach(t),VWo=r(G$e," (throws an error)."),G$e.forEach(t),XWo=i(kl),lt=n(kl,"DIV",{class:!0});var Sl=s(lt);m(CC.$$.fragment,Sl),zWo=i(Sl),Bge=n(Sl,"P",{});var pft=s(Bge);QWo=r(pft,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),pft.forEach(t),WWo=i(Sl),Kd=n(Sl,"P",{});var lJ=s(Kd);HWo=r(lJ,`Note:
Loading a model from its configuration file does `),Pge=n(lJ,"STRONG",{});var _ft=s(Pge);UWo=r(_ft,"not"),_ft.forEach(t),JWo=r(lJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=n(lJ,"A",{href:!0});var uft=s(YG);YWo=r(uft,"from_pretrained()"),uft.forEach(t),KWo=r(lJ," to load the model weights."),lJ.forEach(t),ZWo=i(Sl),$ge=n(Sl,"P",{});var bft=s($ge);eHo=r(bft,"Examples:"),bft.forEach(t),oHo=i(Sl),m(wC.$$.fragment,Sl),Sl.forEach(t),rHo=i(kl),eo=n(kl,"DIV",{class:!0});var ta=s(eo);m(AC.$$.fragment,ta),tHo=i(ta),Ige=n(ta,"P",{});var vft=s(Ige);aHo=r(vft,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),vft.forEach(t),nHo=i(ta),dn=n(ta,"P",{});var J4=s(dn);sHo=r(J4,"The model class to instantiate is selected based on the "),qge=n(J4,"CODE",{});var Fft=s(qge);lHo=r(Fft,"model_type"),Fft.forEach(t),iHo=r(J4,` property of the config object (either
passed as an argument or loaded from `),Nge=n(J4,"CODE",{});var Tft=s(Nge);dHo=r(Tft,"pretrained_model_name_or_path"),Tft.forEach(t),cHo=r(J4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jge=n(J4,"CODE",{});var Mft=s(jge);fHo=r(Mft,"pretrained_model_name_or_path"),Mft.forEach(t),mHo=r(J4,":"),J4.forEach(t),gHo=i(ta),cn=n(ta,"UL",{});var Y4=s(cn);sF=n(Y4,"LI",{});var X0e=s(sF);Dge=n(X0e,"STRONG",{});var Eft=s(Dge);hHo=r(Eft,"data2vec-audio"),Eft.forEach(t),pHo=r(X0e," \u2014 "),KG=n(X0e,"A",{href:!0});var Cft=s(KG);_Ho=r(Cft,"Data2VecAudioForXVector"),Cft.forEach(t),uHo=r(X0e," (Data2VecAudio model)"),X0e.forEach(t),bHo=i(Y4),lF=n(Y4,"LI",{});var z0e=s(lF);Gge=n(z0e,"STRONG",{});var wft=s(Gge);vHo=r(wft,"unispeech-sat"),wft.forEach(t),FHo=r(z0e," \u2014 "),ZG=n(z0e,"A",{href:!0});var Aft=s(ZG);THo=r(Aft,"UniSpeechSatForXVector"),Aft.forEach(t),MHo=r(z0e," (UniSpeechSat model)"),z0e.forEach(t),EHo=i(Y4),iF=n(Y4,"LI",{});var Q0e=s(iF);Oge=n(Q0e,"STRONG",{});var yft=s(Oge);CHo=r(yft,"wav2vec2"),yft.forEach(t),wHo=r(Q0e," \u2014 "),eO=n(Q0e,"A",{href:!0});var Lft=s(eO);AHo=r(Lft,"Wav2Vec2ForXVector"),Lft.forEach(t),yHo=r(Q0e," (Wav2Vec2 model)"),Q0e.forEach(t),LHo=i(Y4),dF=n(Y4,"LI",{});var W0e=s(dF);Vge=n(W0e,"STRONG",{});var xft=s(Vge);xHo=r(xft,"wavlm"),xft.forEach(t),kHo=r(W0e," \u2014 "),oO=n(W0e,"A",{href:!0});var kft=s(oO);SHo=r(kft,"WavLMForXVector"),kft.forEach(t),RHo=r(W0e," (WavLM model)"),W0e.forEach(t),Y4.forEach(t),BHo=i(ta),cF=n(ta,"P",{});var H0e=s(cF);PHo=r(H0e,"The model is set in evaluation mode by default using "),Xge=n(H0e,"CODE",{});var Sft=s(Xge);$Ho=r(Sft,"model.eval()"),Sft.forEach(t),IHo=r(H0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=n(H0e,"CODE",{});var Rft=s(zge);qHo=r(Rft,"model.train()"),Rft.forEach(t),H0e.forEach(t),NHo=i(ta),Qge=n(ta,"P",{});var Bft=s(Qge);jHo=r(Bft,"Examples:"),Bft.forEach(t),DHo=i(ta),m(yC.$$.fragment,ta),ta.forEach(t),kl.forEach(t),RBe=i(c),Zd=n(c,"H2",{class:!0});var O$e=s(Zd);fF=n(O$e,"A",{id:!0,class:!0,href:!0});var Pft=s(fF);Wge=n(Pft,"SPAN",{});var $ft=s(Wge);m(LC.$$.fragment,$ft),$ft.forEach(t),Pft.forEach(t),GHo=i(O$e),Hge=n(O$e,"SPAN",{});var Ift=s(Hge);OHo=r(Ift,"AutoModelForMaskedImageModeling"),Ift.forEach(t),O$e.forEach(t),BBe=i(c),hr=n(c,"DIV",{class:!0});var Rl=s(hr);m(xC.$$.fragment,Rl),VHo=i(Rl),ec=n(Rl,"P",{});var iJ=s(ec);XHo=r(iJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),rO=n(iJ,"A",{href:!0});var qft=s(rO);zHo=r(qft,"from_pretrained()"),qft.forEach(t),QHo=r(iJ," class method or the "),tO=n(iJ,"A",{href:!0});var Nft=s(tO);WHo=r(Nft,"from_config()"),Nft.forEach(t),HHo=r(iJ,` class
method.`),iJ.forEach(t),UHo=i(Rl),kC=n(Rl,"P",{});var V$e=s(kC);JHo=r(V$e,"This class cannot be instantiated directly using "),Uge=n(V$e,"CODE",{});var jft=s(Uge);YHo=r(jft,"__init__()"),jft.forEach(t),KHo=r(V$e," (throws an error)."),V$e.forEach(t),ZHo=i(Rl),it=n(Rl,"DIV",{class:!0});var Bl=s(it);m(SC.$$.fragment,Bl),eUo=i(Bl),Jge=n(Bl,"P",{});var Dft=s(Jge);oUo=r(Dft,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Dft.forEach(t),rUo=i(Bl),oc=n(Bl,"P",{});var dJ=s(oc);tUo=r(dJ,`Note:
Loading a model from its configuration file does `),Yge=n(dJ,"STRONG",{});var Gft=s(Yge);aUo=r(Gft,"not"),Gft.forEach(t),nUo=r(dJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(dJ,"A",{href:!0});var Oft=s(aO);sUo=r(Oft,"from_pretrained()"),Oft.forEach(t),lUo=r(dJ," to load the model weights."),dJ.forEach(t),iUo=i(Bl),Kge=n(Bl,"P",{});var Vft=s(Kge);dUo=r(Vft,"Examples:"),Vft.forEach(t),cUo=i(Bl),m(RC.$$.fragment,Bl),Bl.forEach(t),fUo=i(Rl),oo=n(Rl,"DIV",{class:!0});var aa=s(oo);m(BC.$$.fragment,aa),mUo=i(aa),Zge=n(aa,"P",{});var Xft=s(Zge);gUo=r(Xft,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Xft.forEach(t),hUo=i(aa),fn=n(aa,"P",{});var K4=s(fn);pUo=r(K4,"The model class to instantiate is selected based on the "),ehe=n(K4,"CODE",{});var zft=s(ehe);_Uo=r(zft,"model_type"),zft.forEach(t),uUo=r(K4,` property of the config object (either
passed as an argument or loaded from `),ohe=n(K4,"CODE",{});var Qft=s(ohe);bUo=r(Qft,"pretrained_model_name_or_path"),Qft.forEach(t),vUo=r(K4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rhe=n(K4,"CODE",{});var Wft=s(rhe);FUo=r(Wft,"pretrained_model_name_or_path"),Wft.forEach(t),TUo=r(K4,":"),K4.forEach(t),MUo=i(aa),rc=n(aa,"UL",{});var cJ=s(rc);mF=n(cJ,"LI",{});var U0e=s(mF);the=n(U0e,"STRONG",{});var Hft=s(the);EUo=r(Hft,"deit"),Hft.forEach(t),CUo=r(U0e," \u2014 "),nO=n(U0e,"A",{href:!0});var Uft=s(nO);wUo=r(Uft,"DeiTForMaskedImageModeling"),Uft.forEach(t),AUo=r(U0e," (DeiT model)"),U0e.forEach(t),yUo=i(cJ),gF=n(cJ,"LI",{});var J0e=s(gF);ahe=n(J0e,"STRONG",{});var Jft=s(ahe);LUo=r(Jft,"swin"),Jft.forEach(t),xUo=r(J0e," \u2014 "),sO=n(J0e,"A",{href:!0});var Yft=s(sO);kUo=r(Yft,"SwinForMaskedImageModeling"),Yft.forEach(t),SUo=r(J0e," (Swin model)"),J0e.forEach(t),RUo=i(cJ),hF=n(cJ,"LI",{});var Y0e=s(hF);nhe=n(Y0e,"STRONG",{});var Kft=s(nhe);BUo=r(Kft,"vit"),Kft.forEach(t),PUo=r(Y0e," \u2014 "),lO=n(Y0e,"A",{href:!0});var Zft=s(lO);$Uo=r(Zft,"ViTForMaskedImageModeling"),Zft.forEach(t),IUo=r(Y0e," (ViT model)"),Y0e.forEach(t),cJ.forEach(t),qUo=i(aa),pF=n(aa,"P",{});var K0e=s(pF);NUo=r(K0e,"The model is set in evaluation mode by default using "),she=n(K0e,"CODE",{});var emt=s(she);jUo=r(emt,"model.eval()"),emt.forEach(t),DUo=r(K0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=n(K0e,"CODE",{});var omt=s(lhe);GUo=r(omt,"model.train()"),omt.forEach(t),K0e.forEach(t),OUo=i(aa),ihe=n(aa,"P",{});var rmt=s(ihe);VUo=r(rmt,"Examples:"),rmt.forEach(t),XUo=i(aa),m(PC.$$.fragment,aa),aa.forEach(t),Rl.forEach(t),PBe=i(c),tc=n(c,"H2",{class:!0});var X$e=s(tc);_F=n(X$e,"A",{id:!0,class:!0,href:!0});var tmt=s(_F);dhe=n(tmt,"SPAN",{});var amt=s(dhe);m($C.$$.fragment,amt),amt.forEach(t),tmt.forEach(t),zUo=i(X$e),che=n(X$e,"SPAN",{});var nmt=s(che);QUo=r(nmt,"AutoModelForObjectDetection"),nmt.forEach(t),X$e.forEach(t),$Be=i(c),pr=n(c,"DIV",{class:!0});var Pl=s(pr);m(IC.$$.fragment,Pl),WUo=i(Pl),ac=n(Pl,"P",{});var fJ=s(ac);HUo=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),iO=n(fJ,"A",{href:!0});var smt=s(iO);UUo=r(smt,"from_pretrained()"),smt.forEach(t),JUo=r(fJ," class method or the "),dO=n(fJ,"A",{href:!0});var lmt=s(dO);YUo=r(lmt,"from_config()"),lmt.forEach(t),KUo=r(fJ,` class
method.`),fJ.forEach(t),ZUo=i(Pl),qC=n(Pl,"P",{});var z$e=s(qC);eJo=r(z$e,"This class cannot be instantiated directly using "),fhe=n(z$e,"CODE",{});var imt=s(fhe);oJo=r(imt,"__init__()"),imt.forEach(t),rJo=r(z$e," (throws an error)."),z$e.forEach(t),tJo=i(Pl),dt=n(Pl,"DIV",{class:!0});var $l=s(dt);m(NC.$$.fragment,$l),aJo=i($l),mhe=n($l,"P",{});var dmt=s(mhe);nJo=r(dmt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),dmt.forEach(t),sJo=i($l),nc=n($l,"P",{});var mJ=s(nc);lJo=r(mJ,`Note:
Loading a model from its configuration file does `),ghe=n(mJ,"STRONG",{});var cmt=s(ghe);iJo=r(cmt,"not"),cmt.forEach(t),dJo=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=n(mJ,"A",{href:!0});var fmt=s(cO);cJo=r(fmt,"from_pretrained()"),fmt.forEach(t),fJo=r(mJ," to load the model weights."),mJ.forEach(t),mJo=i($l),hhe=n($l,"P",{});var mmt=s(hhe);gJo=r(mmt,"Examples:"),mmt.forEach(t),hJo=i($l),m(jC.$$.fragment,$l),$l.forEach(t),pJo=i(Pl),ro=n(Pl,"DIV",{class:!0});var na=s(ro);m(DC.$$.fragment,na),_Jo=i(na),phe=n(na,"P",{});var gmt=s(phe);uJo=r(gmt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),gmt.forEach(t),bJo=i(na),mn=n(na,"P",{});var Z4=s(mn);vJo=r(Z4,"The model class to instantiate is selected based on the "),_he=n(Z4,"CODE",{});var hmt=s(_he);FJo=r(hmt,"model_type"),hmt.forEach(t),TJo=r(Z4,` property of the config object (either
passed as an argument or loaded from `),uhe=n(Z4,"CODE",{});var pmt=s(uhe);MJo=r(pmt,"pretrained_model_name_or_path"),pmt.forEach(t),EJo=r(Z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=n(Z4,"CODE",{});var _mt=s(bhe);CJo=r(_mt,"pretrained_model_name_or_path"),_mt.forEach(t),wJo=r(Z4,":"),Z4.forEach(t),AJo=i(na),vhe=n(na,"UL",{});var umt=s(vhe);uF=n(umt,"LI",{});var Z0e=s(uF);Fhe=n(Z0e,"STRONG",{});var bmt=s(Fhe);yJo=r(bmt,"detr"),bmt.forEach(t),LJo=r(Z0e," \u2014 "),fO=n(Z0e,"A",{href:!0});var vmt=s(fO);xJo=r(vmt,"DetrForObjectDetection"),vmt.forEach(t),kJo=r(Z0e," (DETR model)"),Z0e.forEach(t),umt.forEach(t),SJo=i(na),bF=n(na,"P",{});var eye=s(bF);RJo=r(eye,"The model is set in evaluation mode by default using "),The=n(eye,"CODE",{});var Fmt=s(The);BJo=r(Fmt,"model.eval()"),Fmt.forEach(t),PJo=r(eye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=n(eye,"CODE",{});var Tmt=s(Mhe);$Jo=r(Tmt,"model.train()"),Tmt.forEach(t),eye.forEach(t),IJo=i(na),Ehe=n(na,"P",{});var Mmt=s(Ehe);qJo=r(Mmt,"Examples:"),Mmt.forEach(t),NJo=i(na),m(GC.$$.fragment,na),na.forEach(t),Pl.forEach(t),IBe=i(c),sc=n(c,"H2",{class:!0});var Q$e=s(sc);vF=n(Q$e,"A",{id:!0,class:!0,href:!0});var Emt=s(vF);Che=n(Emt,"SPAN",{});var Cmt=s(Che);m(OC.$$.fragment,Cmt),Cmt.forEach(t),Emt.forEach(t),jJo=i(Q$e),whe=n(Q$e,"SPAN",{});var wmt=s(whe);DJo=r(wmt,"AutoModelForImageSegmentation"),wmt.forEach(t),Q$e.forEach(t),qBe=i(c),_r=n(c,"DIV",{class:!0});var Il=s(_r);m(VC.$$.fragment,Il),GJo=i(Il),lc=n(Il,"P",{});var gJ=s(lc);OJo=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),mO=n(gJ,"A",{href:!0});var Amt=s(mO);VJo=r(Amt,"from_pretrained()"),Amt.forEach(t),XJo=r(gJ," class method or the "),gO=n(gJ,"A",{href:!0});var ymt=s(gO);zJo=r(ymt,"from_config()"),ymt.forEach(t),QJo=r(gJ,` class
method.`),gJ.forEach(t),WJo=i(Il),XC=n(Il,"P",{});var W$e=s(XC);HJo=r(W$e,"This class cannot be instantiated directly using "),Ahe=n(W$e,"CODE",{});var Lmt=s(Ahe);UJo=r(Lmt,"__init__()"),Lmt.forEach(t),JJo=r(W$e," (throws an error)."),W$e.forEach(t),YJo=i(Il),ct=n(Il,"DIV",{class:!0});var ql=s(ct);m(zC.$$.fragment,ql),KJo=i(ql),yhe=n(ql,"P",{});var xmt=s(yhe);ZJo=r(xmt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),xmt.forEach(t),eYo=i(ql),ic=n(ql,"P",{});var hJ=s(ic);oYo=r(hJ,`Note:
Loading a model from its configuration file does `),Lhe=n(hJ,"STRONG",{});var kmt=s(Lhe);rYo=r(kmt,"not"),kmt.forEach(t),tYo=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=n(hJ,"A",{href:!0});var Smt=s(hO);aYo=r(Smt,"from_pretrained()"),Smt.forEach(t),nYo=r(hJ," to load the model weights."),hJ.forEach(t),sYo=i(ql),xhe=n(ql,"P",{});var Rmt=s(xhe);lYo=r(Rmt,"Examples:"),Rmt.forEach(t),iYo=i(ql),m(QC.$$.fragment,ql),ql.forEach(t),dYo=i(Il),to=n(Il,"DIV",{class:!0});var sa=s(to);m(WC.$$.fragment,sa),cYo=i(sa),khe=n(sa,"P",{});var Bmt=s(khe);fYo=r(Bmt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Bmt.forEach(t),mYo=i(sa),gn=n(sa,"P",{});var eE=s(gn);gYo=r(eE,"The model class to instantiate is selected based on the "),She=n(eE,"CODE",{});var Pmt=s(She);hYo=r(Pmt,"model_type"),Pmt.forEach(t),pYo=r(eE,` property of the config object (either
passed as an argument or loaded from `),Rhe=n(eE,"CODE",{});var $mt=s(Rhe);_Yo=r($mt,"pretrained_model_name_or_path"),$mt.forEach(t),uYo=r(eE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=n(eE,"CODE",{});var Imt=s(Bhe);bYo=r(Imt,"pretrained_model_name_or_path"),Imt.forEach(t),vYo=r(eE,":"),eE.forEach(t),FYo=i(sa),Phe=n(sa,"UL",{});var qmt=s(Phe);FF=n(qmt,"LI",{});var oye=s(FF);$he=n(oye,"STRONG",{});var Nmt=s($he);TYo=r(Nmt,"detr"),Nmt.forEach(t),MYo=r(oye," \u2014 "),pO=n(oye,"A",{href:!0});var jmt=s(pO);EYo=r(jmt,"DetrForSegmentation"),jmt.forEach(t),CYo=r(oye," (DETR model)"),oye.forEach(t),qmt.forEach(t),wYo=i(sa),TF=n(sa,"P",{});var rye=s(TF);AYo=r(rye,"The model is set in evaluation mode by default using "),Ihe=n(rye,"CODE",{});var Dmt=s(Ihe);yYo=r(Dmt,"model.eval()"),Dmt.forEach(t),LYo=r(rye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qhe=n(rye,"CODE",{});var Gmt=s(qhe);xYo=r(Gmt,"model.train()"),Gmt.forEach(t),rye.forEach(t),kYo=i(sa),Nhe=n(sa,"P",{});var Omt=s(Nhe);SYo=r(Omt,"Examples:"),Omt.forEach(t),RYo=i(sa),m(HC.$$.fragment,sa),sa.forEach(t),Il.forEach(t),NBe=i(c),dc=n(c,"H2",{class:!0});var H$e=s(dc);MF=n(H$e,"A",{id:!0,class:!0,href:!0});var Vmt=s(MF);jhe=n(Vmt,"SPAN",{});var Xmt=s(jhe);m(UC.$$.fragment,Xmt),Xmt.forEach(t),Vmt.forEach(t),BYo=i(H$e),Dhe=n(H$e,"SPAN",{});var zmt=s(Dhe);PYo=r(zmt,"AutoModelForSemanticSegmentation"),zmt.forEach(t),H$e.forEach(t),jBe=i(c),ur=n(c,"DIV",{class:!0});var Nl=s(ur);m(JC.$$.fragment,Nl),$Yo=i(Nl),cc=n(Nl,"P",{});var pJ=s(cc);IYo=r(pJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),_O=n(pJ,"A",{href:!0});var Qmt=s(_O);qYo=r(Qmt,"from_pretrained()"),Qmt.forEach(t),NYo=r(pJ," class method or the "),uO=n(pJ,"A",{href:!0});var Wmt=s(uO);jYo=r(Wmt,"from_config()"),Wmt.forEach(t),DYo=r(pJ,` class
method.`),pJ.forEach(t),GYo=i(Nl),YC=n(Nl,"P",{});var U$e=s(YC);OYo=r(U$e,"This class cannot be instantiated directly using "),Ghe=n(U$e,"CODE",{});var Hmt=s(Ghe);VYo=r(Hmt,"__init__()"),Hmt.forEach(t),XYo=r(U$e," (throws an error)."),U$e.forEach(t),zYo=i(Nl),ft=n(Nl,"DIV",{class:!0});var jl=s(ft);m(KC.$$.fragment,jl),QYo=i(jl),Ohe=n(jl,"P",{});var Umt=s(Ohe);WYo=r(Umt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Umt.forEach(t),HYo=i(jl),fc=n(jl,"P",{});var _J=s(fc);UYo=r(_J,`Note:
Loading a model from its configuration file does `),Vhe=n(_J,"STRONG",{});var Jmt=s(Vhe);JYo=r(Jmt,"not"),Jmt.forEach(t),YYo=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=n(_J,"A",{href:!0});var Ymt=s(bO);KYo=r(Ymt,"from_pretrained()"),Ymt.forEach(t),ZYo=r(_J," to load the model weights."),_J.forEach(t),eKo=i(jl),Xhe=n(jl,"P",{});var Kmt=s(Xhe);oKo=r(Kmt,"Examples:"),Kmt.forEach(t),rKo=i(jl),m(ZC.$$.fragment,jl),jl.forEach(t),tKo=i(Nl),ao=n(Nl,"DIV",{class:!0});var la=s(ao);m(ew.$$.fragment,la),aKo=i(la),zhe=n(la,"P",{});var Zmt=s(zhe);nKo=r(Zmt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Zmt.forEach(t),sKo=i(la),hn=n(la,"P",{});var oE=s(hn);lKo=r(oE,"The model class to instantiate is selected based on the "),Qhe=n(oE,"CODE",{});var egt=s(Qhe);iKo=r(egt,"model_type"),egt.forEach(t),dKo=r(oE,` property of the config object (either
passed as an argument or loaded from `),Whe=n(oE,"CODE",{});var ogt=s(Whe);cKo=r(ogt,"pretrained_model_name_or_path"),ogt.forEach(t),fKo=r(oE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=n(oE,"CODE",{});var rgt=s(Hhe);mKo=r(rgt,"pretrained_model_name_or_path"),rgt.forEach(t),gKo=r(oE,":"),oE.forEach(t),hKo=i(la),pn=n(la,"UL",{});var rE=s(pn);EF=n(rE,"LI",{});var tye=s(EF);Uhe=n(tye,"STRONG",{});var tgt=s(Uhe);pKo=r(tgt,"beit"),tgt.forEach(t),_Ko=r(tye," \u2014 "),vO=n(tye,"A",{href:!0});var agt=s(vO);uKo=r(agt,"BeitForSemanticSegmentation"),agt.forEach(t),bKo=r(tye," (BEiT model)"),tye.forEach(t),vKo=i(rE),CF=n(rE,"LI",{});var aye=s(CF);Jhe=n(aye,"STRONG",{});var ngt=s(Jhe);FKo=r(ngt,"data2vec-vision"),ngt.forEach(t),TKo=r(aye," \u2014 "),FO=n(aye,"A",{href:!0});var sgt=s(FO);MKo=r(sgt,"Data2VecVisionForSemanticSegmentation"),sgt.forEach(t),EKo=r(aye," (Data2VecVision model)"),aye.forEach(t),CKo=i(rE),wF=n(rE,"LI",{});var nye=s(wF);Yhe=n(nye,"STRONG",{});var lgt=s(Yhe);wKo=r(lgt,"dpt"),lgt.forEach(t),AKo=r(nye," \u2014 "),TO=n(nye,"A",{href:!0});var igt=s(TO);yKo=r(igt,"DPTForSemanticSegmentation"),igt.forEach(t),LKo=r(nye," (DPT model)"),nye.forEach(t),xKo=i(rE),AF=n(rE,"LI",{});var sye=s(AF);Khe=n(sye,"STRONG",{});var dgt=s(Khe);kKo=r(dgt,"segformer"),dgt.forEach(t),SKo=r(sye," \u2014 "),MO=n(sye,"A",{href:!0});var cgt=s(MO);RKo=r(cgt,"SegformerForSemanticSegmentation"),cgt.forEach(t),BKo=r(sye," (SegFormer model)"),sye.forEach(t),rE.forEach(t),PKo=i(la),yF=n(la,"P",{});var lye=s(yF);$Ko=r(lye,"The model is set in evaluation mode by default using "),Zhe=n(lye,"CODE",{});var fgt=s(Zhe);IKo=r(fgt,"model.eval()"),fgt.forEach(t),qKo=r(lye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=n(lye,"CODE",{});var mgt=s(epe);NKo=r(mgt,"model.train()"),mgt.forEach(t),lye.forEach(t),jKo=i(la),ope=n(la,"P",{});var ggt=s(ope);DKo=r(ggt,"Examples:"),ggt.forEach(t),GKo=i(la),m(ow.$$.fragment,la),la.forEach(t),Nl.forEach(t),DBe=i(c),mc=n(c,"H2",{class:!0});var J$e=s(mc);LF=n(J$e,"A",{id:!0,class:!0,href:!0});var hgt=s(LF);rpe=n(hgt,"SPAN",{});var pgt=s(rpe);m(rw.$$.fragment,pgt),pgt.forEach(t),hgt.forEach(t),OKo=i(J$e),tpe=n(J$e,"SPAN",{});var _gt=s(tpe);VKo=r(_gt,"AutoModelForInstanceSegmentation"),_gt.forEach(t),J$e.forEach(t),GBe=i(c),br=n(c,"DIV",{class:!0});var Dl=s(br);m(tw.$$.fragment,Dl),XKo=i(Dl),gc=n(Dl,"P",{});var uJ=s(gc);zKo=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),EO=n(uJ,"A",{href:!0});var ugt=s(EO);QKo=r(ugt,"from_pretrained()"),ugt.forEach(t),WKo=r(uJ," class method or the "),CO=n(uJ,"A",{href:!0});var bgt=s(CO);HKo=r(bgt,"from_config()"),bgt.forEach(t),UKo=r(uJ,` class
method.`),uJ.forEach(t),JKo=i(Dl),aw=n(Dl,"P",{});var Y$e=s(aw);YKo=r(Y$e,"This class cannot be instantiated directly using "),ape=n(Y$e,"CODE",{});var vgt=s(ape);KKo=r(vgt,"__init__()"),vgt.forEach(t),ZKo=r(Y$e," (throws an error)."),Y$e.forEach(t),eZo=i(Dl),mt=n(Dl,"DIV",{class:!0});var Gl=s(mt);m(nw.$$.fragment,Gl),oZo=i(Gl),npe=n(Gl,"P",{});var Fgt=s(npe);rZo=r(Fgt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Fgt.forEach(t),tZo=i(Gl),hc=n(Gl,"P",{});var bJ=s(hc);aZo=r(bJ,`Note:
Loading a model from its configuration file does `),spe=n(bJ,"STRONG",{});var Tgt=s(spe);nZo=r(Tgt,"not"),Tgt.forEach(t),sZo=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=n(bJ,"A",{href:!0});var Mgt=s(wO);lZo=r(Mgt,"from_pretrained()"),Mgt.forEach(t),iZo=r(bJ," to load the model weights."),bJ.forEach(t),dZo=i(Gl),lpe=n(Gl,"P",{});var Egt=s(lpe);cZo=r(Egt,"Examples:"),Egt.forEach(t),fZo=i(Gl),m(sw.$$.fragment,Gl),Gl.forEach(t),mZo=i(Dl),no=n(Dl,"DIV",{class:!0});var ia=s(no);m(lw.$$.fragment,ia),gZo=i(ia),ipe=n(ia,"P",{});var Cgt=s(ipe);hZo=r(Cgt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Cgt.forEach(t),pZo=i(ia),_n=n(ia,"P",{});var tE=s(_n);_Zo=r(tE,"The model class to instantiate is selected based on the "),dpe=n(tE,"CODE",{});var wgt=s(dpe);uZo=r(wgt,"model_type"),wgt.forEach(t),bZo=r(tE,` property of the config object (either
passed as an argument or loaded from `),cpe=n(tE,"CODE",{});var Agt=s(cpe);vZo=r(Agt,"pretrained_model_name_or_path"),Agt.forEach(t),FZo=r(tE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=n(tE,"CODE",{});var ygt=s(fpe);TZo=r(ygt,"pretrained_model_name_or_path"),ygt.forEach(t),MZo=r(tE,":"),tE.forEach(t),EZo=i(ia),mpe=n(ia,"UL",{});var Lgt=s(mpe);xF=n(Lgt,"LI",{});var iye=s(xF);gpe=n(iye,"STRONG",{});var xgt=s(gpe);CZo=r(xgt,"maskformer"),xgt.forEach(t),wZo=r(iye," \u2014 "),AO=n(iye,"A",{href:!0});var kgt=s(AO);AZo=r(kgt,"MaskFormerForInstanceSegmentation"),kgt.forEach(t),yZo=r(iye," (MaskFormer model)"),iye.forEach(t),Lgt.forEach(t),LZo=i(ia),kF=n(ia,"P",{});var dye=s(kF);xZo=r(dye,"The model is set in evaluation mode by default using "),hpe=n(dye,"CODE",{});var Sgt=s(hpe);kZo=r(Sgt,"model.eval()"),Sgt.forEach(t),SZo=r(dye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ppe=n(dye,"CODE",{});var Rgt=s(ppe);RZo=r(Rgt,"model.train()"),Rgt.forEach(t),dye.forEach(t),BZo=i(ia),_pe=n(ia,"P",{});var Bgt=s(_pe);PZo=r(Bgt,"Examples:"),Bgt.forEach(t),$Zo=i(ia),m(iw.$$.fragment,ia),ia.forEach(t),Dl.forEach(t),OBe=i(c),pc=n(c,"H2",{class:!0});var K$e=s(pc);SF=n(K$e,"A",{id:!0,class:!0,href:!0});var Pgt=s(SF);upe=n(Pgt,"SPAN",{});var $gt=s(upe);m(dw.$$.fragment,$gt),$gt.forEach(t),Pgt.forEach(t),IZo=i(K$e),bpe=n(K$e,"SPAN",{});var Igt=s(bpe);qZo=r(Igt,"TFAutoModel"),Igt.forEach(t),K$e.forEach(t),VBe=i(c),vr=n(c,"DIV",{class:!0});var Ol=s(vr);m(cw.$$.fragment,Ol),NZo=i(Ol),_c=n(Ol,"P",{});var vJ=s(_c);jZo=r(vJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yO=n(vJ,"A",{href:!0});var qgt=s(yO);DZo=r(qgt,"from_pretrained()"),qgt.forEach(t),GZo=r(vJ," class method or the "),LO=n(vJ,"A",{href:!0});var Ngt=s(LO);OZo=r(Ngt,"from_config()"),Ngt.forEach(t),VZo=r(vJ,` class
method.`),vJ.forEach(t),XZo=i(Ol),fw=n(Ol,"P",{});var Z$e=s(fw);zZo=r(Z$e,"This class cannot be instantiated directly using "),vpe=n(Z$e,"CODE",{});var jgt=s(vpe);QZo=r(jgt,"__init__()"),jgt.forEach(t),WZo=r(Z$e," (throws an error)."),Z$e.forEach(t),HZo=i(Ol),gt=n(Ol,"DIV",{class:!0});var Vl=s(gt);m(mw.$$.fragment,Vl),UZo=i(Vl),Fpe=n(Vl,"P",{});var Dgt=s(Fpe);JZo=r(Dgt,"Instantiates one of the base model classes of the library from a configuration."),Dgt.forEach(t),YZo=i(Vl),uc=n(Vl,"P",{});var FJ=s(uc);KZo=r(FJ,`Note:
Loading a model from its configuration file does `),Tpe=n(FJ,"STRONG",{});var Ggt=s(Tpe);ZZo=r(Ggt,"not"),Ggt.forEach(t),eer=r(FJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xO=n(FJ,"A",{href:!0});var Ogt=s(xO);oer=r(Ogt,"from_pretrained()"),Ogt.forEach(t),rer=r(FJ," to load the model weights."),FJ.forEach(t),ter=i(Vl),Mpe=n(Vl,"P",{});var Vgt=s(Mpe);aer=r(Vgt,"Examples:"),Vgt.forEach(t),ner=i(Vl),m(gw.$$.fragment,Vl),Vl.forEach(t),ser=i(Ol),ho=n(Ol,"DIV",{class:!0});var pa=s(ho);m(hw.$$.fragment,pa),ler=i(pa),Epe=n(pa,"P",{});var Xgt=s(Epe);ier=r(Xgt,"Instantiate one of the base model classes of the library from a pretrained model."),Xgt.forEach(t),der=i(pa),un=n(pa,"P",{});var aE=s(un);cer=r(aE,"The model class to instantiate is selected based on the "),Cpe=n(aE,"CODE",{});var zgt=s(Cpe);fer=r(zgt,"model_type"),zgt.forEach(t),mer=r(aE,` property of the config object (either
passed as an argument or loaded from `),wpe=n(aE,"CODE",{});var Qgt=s(wpe);ger=r(Qgt,"pretrained_model_name_or_path"),Qgt.forEach(t),her=r(aE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=n(aE,"CODE",{});var Wgt=s(Ape);per=r(Wgt,"pretrained_model_name_or_path"),Wgt.forEach(t),_er=r(aE,":"),aE.forEach(t),uer=i(pa),x=n(pa,"UL",{});var k=s(x);RF=n(k,"LI",{});var cye=s(RF);ype=n(cye,"STRONG",{});var Hgt=s(ype);ber=r(Hgt,"albert"),Hgt.forEach(t),ver=r(cye," \u2014 "),kO=n(cye,"A",{href:!0});var Ugt=s(kO);Fer=r(Ugt,"TFAlbertModel"),Ugt.forEach(t),Ter=r(cye," (ALBERT model)"),cye.forEach(t),Mer=i(k),BF=n(k,"LI",{});var fye=s(BF);Lpe=n(fye,"STRONG",{});var Jgt=s(Lpe);Eer=r(Jgt,"bart"),Jgt.forEach(t),Cer=r(fye," \u2014 "),SO=n(fye,"A",{href:!0});var Ygt=s(SO);wer=r(Ygt,"TFBartModel"),Ygt.forEach(t),Aer=r(fye," (BART model)"),fye.forEach(t),yer=i(k),PF=n(k,"LI",{});var mye=s(PF);xpe=n(mye,"STRONG",{});var Kgt=s(xpe);Ler=r(Kgt,"bert"),Kgt.forEach(t),xer=r(mye," \u2014 "),RO=n(mye,"A",{href:!0});var Zgt=s(RO);ker=r(Zgt,"TFBertModel"),Zgt.forEach(t),Ser=r(mye," (BERT model)"),mye.forEach(t),Rer=i(k),$F=n(k,"LI",{});var gye=s($F);kpe=n(gye,"STRONG",{});var eht=s(kpe);Ber=r(eht,"blenderbot"),eht.forEach(t),Per=r(gye," \u2014 "),BO=n(gye,"A",{href:!0});var oht=s(BO);$er=r(oht,"TFBlenderbotModel"),oht.forEach(t),Ier=r(gye," (Blenderbot model)"),gye.forEach(t),qer=i(k),IF=n(k,"LI",{});var hye=s(IF);Spe=n(hye,"STRONG",{});var rht=s(Spe);Ner=r(rht,"blenderbot-small"),rht.forEach(t),jer=r(hye," \u2014 "),PO=n(hye,"A",{href:!0});var tht=s(PO);Der=r(tht,"TFBlenderbotSmallModel"),tht.forEach(t),Ger=r(hye," (BlenderbotSmall model)"),hye.forEach(t),Oer=i(k),qF=n(k,"LI",{});var pye=s(qF);Rpe=n(pye,"STRONG",{});var aht=s(Rpe);Ver=r(aht,"camembert"),aht.forEach(t),Xer=r(pye," \u2014 "),$O=n(pye,"A",{href:!0});var nht=s($O);zer=r(nht,"TFCamembertModel"),nht.forEach(t),Qer=r(pye," (CamemBERT model)"),pye.forEach(t),Wer=i(k),NF=n(k,"LI",{});var _ye=s(NF);Bpe=n(_ye,"STRONG",{});var sht=s(Bpe);Her=r(sht,"clip"),sht.forEach(t),Uer=r(_ye," \u2014 "),IO=n(_ye,"A",{href:!0});var lht=s(IO);Jer=r(lht,"TFCLIPModel"),lht.forEach(t),Yer=r(_ye," (CLIP model)"),_ye.forEach(t),Ker=i(k),jF=n(k,"LI",{});var uye=s(jF);Ppe=n(uye,"STRONG",{});var iht=s(Ppe);Zer=r(iht,"convbert"),iht.forEach(t),eor=r(uye," \u2014 "),qO=n(uye,"A",{href:!0});var dht=s(qO);oor=r(dht,"TFConvBertModel"),dht.forEach(t),ror=r(uye," (ConvBERT model)"),uye.forEach(t),tor=i(k),DF=n(k,"LI",{});var bye=s(DF);$pe=n(bye,"STRONG",{});var cht=s($pe);aor=r(cht,"convnext"),cht.forEach(t),nor=r(bye," \u2014 "),NO=n(bye,"A",{href:!0});var fht=s(NO);sor=r(fht,"TFConvNextModel"),fht.forEach(t),lor=r(bye," (ConvNext model)"),bye.forEach(t),ior=i(k),GF=n(k,"LI",{});var vye=s(GF);Ipe=n(vye,"STRONG",{});var mht=s(Ipe);dor=r(mht,"ctrl"),mht.forEach(t),cor=r(vye," \u2014 "),jO=n(vye,"A",{href:!0});var ght=s(jO);mor=r(ght,"TFCTRLModel"),ght.forEach(t),gor=r(vye," (CTRL model)"),vye.forEach(t),hor=i(k),OF=n(k,"LI",{});var Fye=s(OF);qpe=n(Fye,"STRONG",{});var hht=s(qpe);por=r(hht,"deberta"),hht.forEach(t),_or=r(Fye," \u2014 "),DO=n(Fye,"A",{href:!0});var pht=s(DO);uor=r(pht,"TFDebertaModel"),pht.forEach(t),bor=r(Fye," (DeBERTa model)"),Fye.forEach(t),vor=i(k),VF=n(k,"LI",{});var Tye=s(VF);Npe=n(Tye,"STRONG",{});var _ht=s(Npe);For=r(_ht,"deberta-v2"),_ht.forEach(t),Tor=r(Tye," \u2014 "),GO=n(Tye,"A",{href:!0});var uht=s(GO);Mor=r(uht,"TFDebertaV2Model"),uht.forEach(t),Eor=r(Tye," (DeBERTa-v2 model)"),Tye.forEach(t),Cor=i(k),XF=n(k,"LI",{});var Mye=s(XF);jpe=n(Mye,"STRONG",{});var bht=s(jpe);wor=r(bht,"distilbert"),bht.forEach(t),Aor=r(Mye," \u2014 "),OO=n(Mye,"A",{href:!0});var vht=s(OO);yor=r(vht,"TFDistilBertModel"),vht.forEach(t),Lor=r(Mye," (DistilBERT model)"),Mye.forEach(t),xor=i(k),zF=n(k,"LI",{});var Eye=s(zF);Dpe=n(Eye,"STRONG",{});var Fht=s(Dpe);kor=r(Fht,"dpr"),Fht.forEach(t),Sor=r(Eye," \u2014 "),VO=n(Eye,"A",{href:!0});var Tht=s(VO);Ror=r(Tht,"TFDPRQuestionEncoder"),Tht.forEach(t),Bor=r(Eye," (DPR model)"),Eye.forEach(t),Por=i(k),QF=n(k,"LI",{});var Cye=s(QF);Gpe=n(Cye,"STRONG",{});var Mht=s(Gpe);$or=r(Mht,"electra"),Mht.forEach(t),Ior=r(Cye," \u2014 "),XO=n(Cye,"A",{href:!0});var Eht=s(XO);qor=r(Eht,"TFElectraModel"),Eht.forEach(t),Nor=r(Cye," (ELECTRA model)"),Cye.forEach(t),jor=i(k),WF=n(k,"LI",{});var wye=s(WF);Ope=n(wye,"STRONG",{});var Cht=s(Ope);Dor=r(Cht,"flaubert"),Cht.forEach(t),Gor=r(wye," \u2014 "),zO=n(wye,"A",{href:!0});var wht=s(zO);Oor=r(wht,"TFFlaubertModel"),wht.forEach(t),Vor=r(wye," (FlauBERT model)"),wye.forEach(t),Xor=i(k),Xs=n(k,"LI",{});var ML=s(Xs);Vpe=n(ML,"STRONG",{});var Aht=s(Vpe);zor=r(Aht,"funnel"),Aht.forEach(t),Qor=r(ML," \u2014 "),QO=n(ML,"A",{href:!0});var yht=s(QO);Wor=r(yht,"TFFunnelModel"),yht.forEach(t),Hor=r(ML," or "),WO=n(ML,"A",{href:!0});var Lht=s(WO);Uor=r(Lht,"TFFunnelBaseModel"),Lht.forEach(t),Jor=r(ML," (Funnel Transformer model)"),ML.forEach(t),Yor=i(k),HF=n(k,"LI",{});var Aye=s(HF);Xpe=n(Aye,"STRONG",{});var xht=s(Xpe);Kor=r(xht,"gpt2"),xht.forEach(t),Zor=r(Aye," \u2014 "),HO=n(Aye,"A",{href:!0});var kht=s(HO);err=r(kht,"TFGPT2Model"),kht.forEach(t),orr=r(Aye," (OpenAI GPT-2 model)"),Aye.forEach(t),rrr=i(k),UF=n(k,"LI",{});var yye=s(UF);zpe=n(yye,"STRONG",{});var Sht=s(zpe);trr=r(Sht,"gptj"),Sht.forEach(t),arr=r(yye," \u2014 "),UO=n(yye,"A",{href:!0});var Rht=s(UO);nrr=r(Rht,"TFGPTJModel"),Rht.forEach(t),srr=r(yye," (GPT-J model)"),yye.forEach(t),lrr=i(k),JF=n(k,"LI",{});var Lye=s(JF);Qpe=n(Lye,"STRONG",{});var Bht=s(Qpe);irr=r(Bht,"hubert"),Bht.forEach(t),drr=r(Lye," \u2014 "),JO=n(Lye,"A",{href:!0});var Pht=s(JO);crr=r(Pht,"TFHubertModel"),Pht.forEach(t),frr=r(Lye," (Hubert model)"),Lye.forEach(t),mrr=i(k),YF=n(k,"LI",{});var xye=s(YF);Wpe=n(xye,"STRONG",{});var $ht=s(Wpe);grr=r($ht,"layoutlm"),$ht.forEach(t),hrr=r(xye," \u2014 "),YO=n(xye,"A",{href:!0});var Iht=s(YO);prr=r(Iht,"TFLayoutLMModel"),Iht.forEach(t),_rr=r(xye," (LayoutLM model)"),xye.forEach(t),urr=i(k),KF=n(k,"LI",{});var kye=s(KF);Hpe=n(kye,"STRONG",{});var qht=s(Hpe);brr=r(qht,"led"),qht.forEach(t),vrr=r(kye," \u2014 "),KO=n(kye,"A",{href:!0});var Nht=s(KO);Frr=r(Nht,"TFLEDModel"),Nht.forEach(t),Trr=r(kye," (LED model)"),kye.forEach(t),Mrr=i(k),ZF=n(k,"LI",{});var Sye=s(ZF);Upe=n(Sye,"STRONG",{});var jht=s(Upe);Err=r(jht,"longformer"),jht.forEach(t),Crr=r(Sye," \u2014 "),ZO=n(Sye,"A",{href:!0});var Dht=s(ZO);wrr=r(Dht,"TFLongformerModel"),Dht.forEach(t),Arr=r(Sye," (Longformer model)"),Sye.forEach(t),yrr=i(k),eT=n(k,"LI",{});var Rye=s(eT);Jpe=n(Rye,"STRONG",{});var Ght=s(Jpe);Lrr=r(Ght,"lxmert"),Ght.forEach(t),xrr=r(Rye," \u2014 "),eV=n(Rye,"A",{href:!0});var Oht=s(eV);krr=r(Oht,"TFLxmertModel"),Oht.forEach(t),Srr=r(Rye," (LXMERT model)"),Rye.forEach(t),Rrr=i(k),oT=n(k,"LI",{});var Bye=s(oT);Ype=n(Bye,"STRONG",{});var Vht=s(Ype);Brr=r(Vht,"marian"),Vht.forEach(t),Prr=r(Bye," \u2014 "),oV=n(Bye,"A",{href:!0});var Xht=s(oV);$rr=r(Xht,"TFMarianModel"),Xht.forEach(t),Irr=r(Bye," (Marian model)"),Bye.forEach(t),qrr=i(k),rT=n(k,"LI",{});var Pye=s(rT);Kpe=n(Pye,"STRONG",{});var zht=s(Kpe);Nrr=r(zht,"mbart"),zht.forEach(t),jrr=r(Pye," \u2014 "),rV=n(Pye,"A",{href:!0});var Qht=s(rV);Drr=r(Qht,"TFMBartModel"),Qht.forEach(t),Grr=r(Pye," (mBART model)"),Pye.forEach(t),Orr=i(k),tT=n(k,"LI",{});var $ye=s(tT);Zpe=n($ye,"STRONG",{});var Wht=s(Zpe);Vrr=r(Wht,"mobilebert"),Wht.forEach(t),Xrr=r($ye," \u2014 "),tV=n($ye,"A",{href:!0});var Hht=s(tV);zrr=r(Hht,"TFMobileBertModel"),Hht.forEach(t),Qrr=r($ye," (MobileBERT model)"),$ye.forEach(t),Wrr=i(k),aT=n(k,"LI",{});var Iye=s(aT);e_e=n(Iye,"STRONG",{});var Uht=s(e_e);Hrr=r(Uht,"mpnet"),Uht.forEach(t),Urr=r(Iye," \u2014 "),aV=n(Iye,"A",{href:!0});var Jht=s(aV);Jrr=r(Jht,"TFMPNetModel"),Jht.forEach(t),Yrr=r(Iye," (MPNet model)"),Iye.forEach(t),Krr=i(k),nT=n(k,"LI",{});var qye=s(nT);o_e=n(qye,"STRONG",{});var Yht=s(o_e);Zrr=r(Yht,"mt5"),Yht.forEach(t),etr=r(qye," \u2014 "),nV=n(qye,"A",{href:!0});var Kht=s(nV);otr=r(Kht,"TFMT5Model"),Kht.forEach(t),rtr=r(qye," (mT5 model)"),qye.forEach(t),ttr=i(k),sT=n(k,"LI",{});var Nye=s(sT);r_e=n(Nye,"STRONG",{});var Zht=s(r_e);atr=r(Zht,"openai-gpt"),Zht.forEach(t),ntr=r(Nye," \u2014 "),sV=n(Nye,"A",{href:!0});var ept=s(sV);str=r(ept,"TFOpenAIGPTModel"),ept.forEach(t),ltr=r(Nye," (OpenAI GPT model)"),Nye.forEach(t),itr=i(k),lT=n(k,"LI",{});var jye=s(lT);t_e=n(jye,"STRONG",{});var opt=s(t_e);dtr=r(opt,"pegasus"),opt.forEach(t),ctr=r(jye," \u2014 "),lV=n(jye,"A",{href:!0});var rpt=s(lV);ftr=r(rpt,"TFPegasusModel"),rpt.forEach(t),mtr=r(jye," (Pegasus model)"),jye.forEach(t),gtr=i(k),iT=n(k,"LI",{});var Dye=s(iT);a_e=n(Dye,"STRONG",{});var tpt=s(a_e);htr=r(tpt,"rembert"),tpt.forEach(t),ptr=r(Dye," \u2014 "),iV=n(Dye,"A",{href:!0});var apt=s(iV);_tr=r(apt,"TFRemBertModel"),apt.forEach(t),utr=r(Dye," (RemBERT model)"),Dye.forEach(t),btr=i(k),dT=n(k,"LI",{});var Gye=s(dT);n_e=n(Gye,"STRONG",{});var npt=s(n_e);vtr=r(npt,"roberta"),npt.forEach(t),Ftr=r(Gye," \u2014 "),dV=n(Gye,"A",{href:!0});var spt=s(dV);Ttr=r(spt,"TFRobertaModel"),spt.forEach(t),Mtr=r(Gye," (RoBERTa model)"),Gye.forEach(t),Etr=i(k),cT=n(k,"LI",{});var Oye=s(cT);s_e=n(Oye,"STRONG",{});var lpt=s(s_e);Ctr=r(lpt,"roformer"),lpt.forEach(t),wtr=r(Oye," \u2014 "),cV=n(Oye,"A",{href:!0});var ipt=s(cV);Atr=r(ipt,"TFRoFormerModel"),ipt.forEach(t),ytr=r(Oye," (RoFormer model)"),Oye.forEach(t),Ltr=i(k),fT=n(k,"LI",{});var Vye=s(fT);l_e=n(Vye,"STRONG",{});var dpt=s(l_e);xtr=r(dpt,"speech_to_text"),dpt.forEach(t),ktr=r(Vye," \u2014 "),fV=n(Vye,"A",{href:!0});var cpt=s(fV);Str=r(cpt,"TFSpeech2TextModel"),cpt.forEach(t),Rtr=r(Vye," (Speech2Text model)"),Vye.forEach(t),Btr=i(k),mT=n(k,"LI",{});var Xye=s(mT);i_e=n(Xye,"STRONG",{});var fpt=s(i_e);Ptr=r(fpt,"t5"),fpt.forEach(t),$tr=r(Xye," \u2014 "),mV=n(Xye,"A",{href:!0});var mpt=s(mV);Itr=r(mpt,"TFT5Model"),mpt.forEach(t),qtr=r(Xye," (T5 model)"),Xye.forEach(t),Ntr=i(k),gT=n(k,"LI",{});var zye=s(gT);d_e=n(zye,"STRONG",{});var gpt=s(d_e);jtr=r(gpt,"tapas"),gpt.forEach(t),Dtr=r(zye," \u2014 "),gV=n(zye,"A",{href:!0});var hpt=s(gV);Gtr=r(hpt,"TFTapasModel"),hpt.forEach(t),Otr=r(zye," (TAPAS model)"),zye.forEach(t),Vtr=i(k),hT=n(k,"LI",{});var Qye=s(hT);c_e=n(Qye,"STRONG",{});var ppt=s(c_e);Xtr=r(ppt,"transfo-xl"),ppt.forEach(t),ztr=r(Qye," \u2014 "),hV=n(Qye,"A",{href:!0});var _pt=s(hV);Qtr=r(_pt,"TFTransfoXLModel"),_pt.forEach(t),Wtr=r(Qye," (Transformer-XL model)"),Qye.forEach(t),Htr=i(k),pT=n(k,"LI",{});var Wye=s(pT);f_e=n(Wye,"STRONG",{});var upt=s(f_e);Utr=r(upt,"vit"),upt.forEach(t),Jtr=r(Wye," \u2014 "),pV=n(Wye,"A",{href:!0});var bpt=s(pV);Ytr=r(bpt,"TFViTModel"),bpt.forEach(t),Ktr=r(Wye," (ViT model)"),Wye.forEach(t),Ztr=i(k),_T=n(k,"LI",{});var Hye=s(_T);m_e=n(Hye,"STRONG",{});var vpt=s(m_e);ear=r(vpt,"vit_mae"),vpt.forEach(t),oar=r(Hye," \u2014 "),_V=n(Hye,"A",{href:!0});var Fpt=s(_V);rar=r(Fpt,"TFViTMAEModel"),Fpt.forEach(t),tar=r(Hye," (ViTMAE model)"),Hye.forEach(t),aar=i(k),uT=n(k,"LI",{});var Uye=s(uT);g_e=n(Uye,"STRONG",{});var Tpt=s(g_e);nar=r(Tpt,"wav2vec2"),Tpt.forEach(t),sar=r(Uye," \u2014 "),uV=n(Uye,"A",{href:!0});var Mpt=s(uV);lar=r(Mpt,"TFWav2Vec2Model"),Mpt.forEach(t),iar=r(Uye," (Wav2Vec2 model)"),Uye.forEach(t),dar=i(k),bT=n(k,"LI",{});var Jye=s(bT);h_e=n(Jye,"STRONG",{});var Ept=s(h_e);car=r(Ept,"xlm"),Ept.forEach(t),far=r(Jye," \u2014 "),bV=n(Jye,"A",{href:!0});var Cpt=s(bV);mar=r(Cpt,"TFXLMModel"),Cpt.forEach(t),gar=r(Jye," (XLM model)"),Jye.forEach(t),har=i(k),vT=n(k,"LI",{});var Yye=s(vT);p_e=n(Yye,"STRONG",{});var wpt=s(p_e);par=r(wpt,"xlm-roberta"),wpt.forEach(t),_ar=r(Yye," \u2014 "),vV=n(Yye,"A",{href:!0});var Apt=s(vV);uar=r(Apt,"TFXLMRobertaModel"),Apt.forEach(t),bar=r(Yye," (XLM-RoBERTa model)"),Yye.forEach(t),Far=i(k),FT=n(k,"LI",{});var Kye=s(FT);__e=n(Kye,"STRONG",{});var ypt=s(__e);Tar=r(ypt,"xlnet"),ypt.forEach(t),Mar=r(Kye," \u2014 "),FV=n(Kye,"A",{href:!0});var Lpt=s(FV);Ear=r(Lpt,"TFXLNetModel"),Lpt.forEach(t),Car=r(Kye," (XLNet model)"),Kye.forEach(t),k.forEach(t),war=i(pa),u_e=n(pa,"P",{});var xpt=s(u_e);Aar=r(xpt,"Examples:"),xpt.forEach(t),yar=i(pa),m(pw.$$.fragment,pa),pa.forEach(t),Ol.forEach(t),XBe=i(c),bc=n(c,"H2",{class:!0});var eIe=s(bc);TT=n(eIe,"A",{id:!0,class:!0,href:!0});var kpt=s(TT);b_e=n(kpt,"SPAN",{});var Spt=s(b_e);m(_w.$$.fragment,Spt),Spt.forEach(t),kpt.forEach(t),Lar=i(eIe),v_e=n(eIe,"SPAN",{});var Rpt=s(v_e);xar=r(Rpt,"TFAutoModelForPreTraining"),Rpt.forEach(t),eIe.forEach(t),zBe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(uw.$$.fragment,Xl),kar=i(Xl),vc=n(Xl,"P",{});var TJ=s(vc);Sar=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TV=n(TJ,"A",{href:!0});var Bpt=s(TV);Rar=r(Bpt,"from_pretrained()"),Bpt.forEach(t),Bar=r(TJ," class method or the "),MV=n(TJ,"A",{href:!0});var Ppt=s(MV);Par=r(Ppt,"from_config()"),Ppt.forEach(t),$ar=r(TJ,` class
method.`),TJ.forEach(t),Iar=i(Xl),bw=n(Xl,"P",{});var oIe=s(bw);qar=r(oIe,"This class cannot be instantiated directly using "),F_e=n(oIe,"CODE",{});var $pt=s(F_e);Nar=r($pt,"__init__()"),$pt.forEach(t),jar=r(oIe," (throws an error)."),oIe.forEach(t),Dar=i(Xl),ht=n(Xl,"DIV",{class:!0});var zl=s(ht);m(vw.$$.fragment,zl),Gar=i(zl),T_e=n(zl,"P",{});var Ipt=s(T_e);Oar=r(Ipt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ipt.forEach(t),Var=i(zl),Fc=n(zl,"P",{});var MJ=s(Fc);Xar=r(MJ,`Note:
Loading a model from its configuration file does `),M_e=n(MJ,"STRONG",{});var qpt=s(M_e);zar=r(qpt,"not"),qpt.forEach(t),Qar=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=n(MJ,"A",{href:!0});var Npt=s(EV);War=r(Npt,"from_pretrained()"),Npt.forEach(t),Har=r(MJ," to load the model weights."),MJ.forEach(t),Uar=i(zl),E_e=n(zl,"P",{});var jpt=s(E_e);Jar=r(jpt,"Examples:"),jpt.forEach(t),Yar=i(zl),m(Fw.$$.fragment,zl),zl.forEach(t),Kar=i(Xl),po=n(Xl,"DIV",{class:!0});var _a=s(po);m(Tw.$$.fragment,_a),Zar=i(_a),C_e=n(_a,"P",{});var Dpt=s(C_e);enr=r(Dpt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Dpt.forEach(t),onr=i(_a),bn=n(_a,"P",{});var nE=s(bn);rnr=r(nE,"The model class to instantiate is selected based on the "),w_e=n(nE,"CODE",{});var Gpt=s(w_e);tnr=r(Gpt,"model_type"),Gpt.forEach(t),anr=r(nE,` property of the config object (either
passed as an argument or loaded from `),A_e=n(nE,"CODE",{});var Opt=s(A_e);nnr=r(Opt,"pretrained_model_name_or_path"),Opt.forEach(t),snr=r(nE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=n(nE,"CODE",{});var Vpt=s(y_e);lnr=r(Vpt,"pretrained_model_name_or_path"),Vpt.forEach(t),inr=r(nE,":"),nE.forEach(t),dnr=i(_a),H=n(_a,"UL",{});var U=s(H);MT=n(U,"LI",{});var Zye=s(MT);L_e=n(Zye,"STRONG",{});var Xpt=s(L_e);cnr=r(Xpt,"albert"),Xpt.forEach(t),fnr=r(Zye," \u2014 "),CV=n(Zye,"A",{href:!0});var zpt=s(CV);mnr=r(zpt,"TFAlbertForPreTraining"),zpt.forEach(t),gnr=r(Zye," (ALBERT model)"),Zye.forEach(t),hnr=i(U),ET=n(U,"LI",{});var eLe=s(ET);x_e=n(eLe,"STRONG",{});var Qpt=s(x_e);pnr=r(Qpt,"bart"),Qpt.forEach(t),_nr=r(eLe," \u2014 "),wV=n(eLe,"A",{href:!0});var Wpt=s(wV);unr=r(Wpt,"TFBartForConditionalGeneration"),Wpt.forEach(t),bnr=r(eLe," (BART model)"),eLe.forEach(t),vnr=i(U),CT=n(U,"LI",{});var oLe=s(CT);k_e=n(oLe,"STRONG",{});var Hpt=s(k_e);Fnr=r(Hpt,"bert"),Hpt.forEach(t),Tnr=r(oLe," \u2014 "),AV=n(oLe,"A",{href:!0});var Upt=s(AV);Mnr=r(Upt,"TFBertForPreTraining"),Upt.forEach(t),Enr=r(oLe," (BERT model)"),oLe.forEach(t),Cnr=i(U),wT=n(U,"LI",{});var rLe=s(wT);S_e=n(rLe,"STRONG",{});var Jpt=s(S_e);wnr=r(Jpt,"camembert"),Jpt.forEach(t),Anr=r(rLe," \u2014 "),yV=n(rLe,"A",{href:!0});var Ypt=s(yV);ynr=r(Ypt,"TFCamembertForMaskedLM"),Ypt.forEach(t),Lnr=r(rLe," (CamemBERT model)"),rLe.forEach(t),xnr=i(U),AT=n(U,"LI",{});var tLe=s(AT);R_e=n(tLe,"STRONG",{});var Kpt=s(R_e);knr=r(Kpt,"ctrl"),Kpt.forEach(t),Snr=r(tLe," \u2014 "),LV=n(tLe,"A",{href:!0});var Zpt=s(LV);Rnr=r(Zpt,"TFCTRLLMHeadModel"),Zpt.forEach(t),Bnr=r(tLe," (CTRL model)"),tLe.forEach(t),Pnr=i(U),yT=n(U,"LI",{});var aLe=s(yT);B_e=n(aLe,"STRONG",{});var e_t=s(B_e);$nr=r(e_t,"distilbert"),e_t.forEach(t),Inr=r(aLe," \u2014 "),xV=n(aLe,"A",{href:!0});var o_t=s(xV);qnr=r(o_t,"TFDistilBertForMaskedLM"),o_t.forEach(t),Nnr=r(aLe," (DistilBERT model)"),aLe.forEach(t),jnr=i(U),LT=n(U,"LI",{});var nLe=s(LT);P_e=n(nLe,"STRONG",{});var r_t=s(P_e);Dnr=r(r_t,"electra"),r_t.forEach(t),Gnr=r(nLe," \u2014 "),kV=n(nLe,"A",{href:!0});var t_t=s(kV);Onr=r(t_t,"TFElectraForPreTraining"),t_t.forEach(t),Vnr=r(nLe," (ELECTRA model)"),nLe.forEach(t),Xnr=i(U),xT=n(U,"LI",{});var sLe=s(xT);$_e=n(sLe,"STRONG",{});var a_t=s($_e);znr=r(a_t,"flaubert"),a_t.forEach(t),Qnr=r(sLe," \u2014 "),SV=n(sLe,"A",{href:!0});var n_t=s(SV);Wnr=r(n_t,"TFFlaubertWithLMHeadModel"),n_t.forEach(t),Hnr=r(sLe," (FlauBERT model)"),sLe.forEach(t),Unr=i(U),kT=n(U,"LI",{});var lLe=s(kT);I_e=n(lLe,"STRONG",{});var s_t=s(I_e);Jnr=r(s_t,"funnel"),s_t.forEach(t),Ynr=r(lLe," \u2014 "),RV=n(lLe,"A",{href:!0});var l_t=s(RV);Knr=r(l_t,"TFFunnelForPreTraining"),l_t.forEach(t),Znr=r(lLe," (Funnel Transformer model)"),lLe.forEach(t),esr=i(U),ST=n(U,"LI",{});var iLe=s(ST);q_e=n(iLe,"STRONG",{});var i_t=s(q_e);osr=r(i_t,"gpt2"),i_t.forEach(t),rsr=r(iLe," \u2014 "),BV=n(iLe,"A",{href:!0});var d_t=s(BV);tsr=r(d_t,"TFGPT2LMHeadModel"),d_t.forEach(t),asr=r(iLe," (OpenAI GPT-2 model)"),iLe.forEach(t),nsr=i(U),RT=n(U,"LI",{});var dLe=s(RT);N_e=n(dLe,"STRONG",{});var c_t=s(N_e);ssr=r(c_t,"layoutlm"),c_t.forEach(t),lsr=r(dLe," \u2014 "),PV=n(dLe,"A",{href:!0});var f_t=s(PV);isr=r(f_t,"TFLayoutLMForMaskedLM"),f_t.forEach(t),dsr=r(dLe," (LayoutLM model)"),dLe.forEach(t),csr=i(U),BT=n(U,"LI",{});var cLe=s(BT);j_e=n(cLe,"STRONG",{});var m_t=s(j_e);fsr=r(m_t,"lxmert"),m_t.forEach(t),msr=r(cLe," \u2014 "),$V=n(cLe,"A",{href:!0});var g_t=s($V);gsr=r(g_t,"TFLxmertForPreTraining"),g_t.forEach(t),hsr=r(cLe," (LXMERT model)"),cLe.forEach(t),psr=i(U),PT=n(U,"LI",{});var fLe=s(PT);D_e=n(fLe,"STRONG",{});var h_t=s(D_e);_sr=r(h_t,"mobilebert"),h_t.forEach(t),usr=r(fLe," \u2014 "),IV=n(fLe,"A",{href:!0});var p_t=s(IV);bsr=r(p_t,"TFMobileBertForPreTraining"),p_t.forEach(t),vsr=r(fLe," (MobileBERT model)"),fLe.forEach(t),Fsr=i(U),$T=n(U,"LI",{});var mLe=s($T);G_e=n(mLe,"STRONG",{});var __t=s(G_e);Tsr=r(__t,"mpnet"),__t.forEach(t),Msr=r(mLe," \u2014 "),qV=n(mLe,"A",{href:!0});var u_t=s(qV);Esr=r(u_t,"TFMPNetForMaskedLM"),u_t.forEach(t),Csr=r(mLe," (MPNet model)"),mLe.forEach(t),wsr=i(U),IT=n(U,"LI",{});var gLe=s(IT);O_e=n(gLe,"STRONG",{});var b_t=s(O_e);Asr=r(b_t,"openai-gpt"),b_t.forEach(t),ysr=r(gLe," \u2014 "),NV=n(gLe,"A",{href:!0});var v_t=s(NV);Lsr=r(v_t,"TFOpenAIGPTLMHeadModel"),v_t.forEach(t),xsr=r(gLe," (OpenAI GPT model)"),gLe.forEach(t),ksr=i(U),qT=n(U,"LI",{});var hLe=s(qT);V_e=n(hLe,"STRONG",{});var F_t=s(V_e);Ssr=r(F_t,"roberta"),F_t.forEach(t),Rsr=r(hLe," \u2014 "),jV=n(hLe,"A",{href:!0});var T_t=s(jV);Bsr=r(T_t,"TFRobertaForMaskedLM"),T_t.forEach(t),Psr=r(hLe," (RoBERTa model)"),hLe.forEach(t),$sr=i(U),NT=n(U,"LI",{});var pLe=s(NT);X_e=n(pLe,"STRONG",{});var M_t=s(X_e);Isr=r(M_t,"t5"),M_t.forEach(t),qsr=r(pLe," \u2014 "),DV=n(pLe,"A",{href:!0});var E_t=s(DV);Nsr=r(E_t,"TFT5ForConditionalGeneration"),E_t.forEach(t),jsr=r(pLe," (T5 model)"),pLe.forEach(t),Dsr=i(U),jT=n(U,"LI",{});var _Le=s(jT);z_e=n(_Le,"STRONG",{});var C_t=s(z_e);Gsr=r(C_t,"tapas"),C_t.forEach(t),Osr=r(_Le," \u2014 "),GV=n(_Le,"A",{href:!0});var w_t=s(GV);Vsr=r(w_t,"TFTapasForMaskedLM"),w_t.forEach(t),Xsr=r(_Le," (TAPAS model)"),_Le.forEach(t),zsr=i(U),DT=n(U,"LI",{});var uLe=s(DT);Q_e=n(uLe,"STRONG",{});var A_t=s(Q_e);Qsr=r(A_t,"transfo-xl"),A_t.forEach(t),Wsr=r(uLe," \u2014 "),OV=n(uLe,"A",{href:!0});var y_t=s(OV);Hsr=r(y_t,"TFTransfoXLLMHeadModel"),y_t.forEach(t),Usr=r(uLe," (Transformer-XL model)"),uLe.forEach(t),Jsr=i(U),GT=n(U,"LI",{});var bLe=s(GT);W_e=n(bLe,"STRONG",{});var L_t=s(W_e);Ysr=r(L_t,"vit_mae"),L_t.forEach(t),Ksr=r(bLe," \u2014 "),VV=n(bLe,"A",{href:!0});var x_t=s(VV);Zsr=r(x_t,"TFViTMAEForPreTraining"),x_t.forEach(t),elr=r(bLe," (ViTMAE model)"),bLe.forEach(t),olr=i(U),OT=n(U,"LI",{});var vLe=s(OT);H_e=n(vLe,"STRONG",{});var k_t=s(H_e);rlr=r(k_t,"xlm"),k_t.forEach(t),tlr=r(vLe," \u2014 "),XV=n(vLe,"A",{href:!0});var S_t=s(XV);alr=r(S_t,"TFXLMWithLMHeadModel"),S_t.forEach(t),nlr=r(vLe," (XLM model)"),vLe.forEach(t),slr=i(U),VT=n(U,"LI",{});var FLe=s(VT);U_e=n(FLe,"STRONG",{});var R_t=s(U_e);llr=r(R_t,"xlm-roberta"),R_t.forEach(t),ilr=r(FLe," \u2014 "),zV=n(FLe,"A",{href:!0});var B_t=s(zV);dlr=r(B_t,"TFXLMRobertaForMaskedLM"),B_t.forEach(t),clr=r(FLe," (XLM-RoBERTa model)"),FLe.forEach(t),flr=i(U),XT=n(U,"LI",{});var TLe=s(XT);J_e=n(TLe,"STRONG",{});var P_t=s(J_e);mlr=r(P_t,"xlnet"),P_t.forEach(t),glr=r(TLe," \u2014 "),QV=n(TLe,"A",{href:!0});var $_t=s(QV);hlr=r($_t,"TFXLNetLMHeadModel"),$_t.forEach(t),plr=r(TLe," (XLNet model)"),TLe.forEach(t),U.forEach(t),_lr=i(_a),Y_e=n(_a,"P",{});var I_t=s(Y_e);ulr=r(I_t,"Examples:"),I_t.forEach(t),blr=i(_a),m(Mw.$$.fragment,_a),_a.forEach(t),Xl.forEach(t),QBe=i(c),Tc=n(c,"H2",{class:!0});var rIe=s(Tc);zT=n(rIe,"A",{id:!0,class:!0,href:!0});var q_t=s(zT);K_e=n(q_t,"SPAN",{});var N_t=s(K_e);m(Ew.$$.fragment,N_t),N_t.forEach(t),q_t.forEach(t),vlr=i(rIe),Z_e=n(rIe,"SPAN",{});var j_t=s(Z_e);Flr=r(j_t,"TFAutoModelForCausalLM"),j_t.forEach(t),rIe.forEach(t),WBe=i(c),Tr=n(c,"DIV",{class:!0});var Ql=s(Tr);m(Cw.$$.fragment,Ql),Tlr=i(Ql),Mc=n(Ql,"P",{});var EJ=s(Mc);Mlr=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WV=n(EJ,"A",{href:!0});var D_t=s(WV);Elr=r(D_t,"from_pretrained()"),D_t.forEach(t),Clr=r(EJ," class method or the "),HV=n(EJ,"A",{href:!0});var G_t=s(HV);wlr=r(G_t,"from_config()"),G_t.forEach(t),Alr=r(EJ,` class
method.`),EJ.forEach(t),ylr=i(Ql),ww=n(Ql,"P",{});var tIe=s(ww);Llr=r(tIe,"This class cannot be instantiated directly using "),eue=n(tIe,"CODE",{});var O_t=s(eue);xlr=r(O_t,"__init__()"),O_t.forEach(t),klr=r(tIe," (throws an error)."),tIe.forEach(t),Slr=i(Ql),pt=n(Ql,"DIV",{class:!0});var Wl=s(pt);m(Aw.$$.fragment,Wl),Rlr=i(Wl),oue=n(Wl,"P",{});var V_t=s(oue);Blr=r(V_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),V_t.forEach(t),Plr=i(Wl),Ec=n(Wl,"P",{});var CJ=s(Ec);$lr=r(CJ,`Note:
Loading a model from its configuration file does `),rue=n(CJ,"STRONG",{});var X_t=s(rue);Ilr=r(X_t,"not"),X_t.forEach(t),qlr=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=n(CJ,"A",{href:!0});var z_t=s(UV);Nlr=r(z_t,"from_pretrained()"),z_t.forEach(t),jlr=r(CJ," to load the model weights."),CJ.forEach(t),Dlr=i(Wl),tue=n(Wl,"P",{});var Q_t=s(tue);Glr=r(Q_t,"Examples:"),Q_t.forEach(t),Olr=i(Wl),m(yw.$$.fragment,Wl),Wl.forEach(t),Vlr=i(Ql),_o=n(Ql,"DIV",{class:!0});var ua=s(_o);m(Lw.$$.fragment,ua),Xlr=i(ua),aue=n(ua,"P",{});var W_t=s(aue);zlr=r(W_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),W_t.forEach(t),Qlr=i(ua),vn=n(ua,"P",{});var sE=s(vn);Wlr=r(sE,"The model class to instantiate is selected based on the "),nue=n(sE,"CODE",{});var H_t=s(nue);Hlr=r(H_t,"model_type"),H_t.forEach(t),Ulr=r(sE,` property of the config object (either
passed as an argument or loaded from `),sue=n(sE,"CODE",{});var U_t=s(sue);Jlr=r(U_t,"pretrained_model_name_or_path"),U_t.forEach(t),Ylr=r(sE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lue=n(sE,"CODE",{});var J_t=s(lue);Klr=r(J_t,"pretrained_model_name_or_path"),J_t.forEach(t),Zlr=r(sE,":"),sE.forEach(t),eir=i(ua),fe=n(ua,"UL",{});var pe=s(fe);QT=n(pe,"LI",{});var MLe=s(QT);iue=n(MLe,"STRONG",{});var Y_t=s(iue);oir=r(Y_t,"bert"),Y_t.forEach(t),rir=r(MLe," \u2014 "),JV=n(MLe,"A",{href:!0});var K_t=s(JV);tir=r(K_t,"TFBertLMHeadModel"),K_t.forEach(t),air=r(MLe," (BERT model)"),MLe.forEach(t),nir=i(pe),WT=n(pe,"LI",{});var ELe=s(WT);due=n(ELe,"STRONG",{});var Z_t=s(due);sir=r(Z_t,"camembert"),Z_t.forEach(t),lir=r(ELe," \u2014 "),YV=n(ELe,"A",{href:!0});var eut=s(YV);iir=r(eut,"TFCamembertForCausalLM"),eut.forEach(t),dir=r(ELe," (CamemBERT model)"),ELe.forEach(t),cir=i(pe),HT=n(pe,"LI",{});var CLe=s(HT);cue=n(CLe,"STRONG",{});var out=s(cue);fir=r(out,"ctrl"),out.forEach(t),mir=r(CLe," \u2014 "),KV=n(CLe,"A",{href:!0});var rut=s(KV);gir=r(rut,"TFCTRLLMHeadModel"),rut.forEach(t),hir=r(CLe," (CTRL model)"),CLe.forEach(t),pir=i(pe),UT=n(pe,"LI",{});var wLe=s(UT);fue=n(wLe,"STRONG",{});var tut=s(fue);_ir=r(tut,"gpt2"),tut.forEach(t),uir=r(wLe," \u2014 "),ZV=n(wLe,"A",{href:!0});var aut=s(ZV);bir=r(aut,"TFGPT2LMHeadModel"),aut.forEach(t),vir=r(wLe," (OpenAI GPT-2 model)"),wLe.forEach(t),Fir=i(pe),JT=n(pe,"LI",{});var ALe=s(JT);mue=n(ALe,"STRONG",{});var nut=s(mue);Tir=r(nut,"gptj"),nut.forEach(t),Mir=r(ALe," \u2014 "),eX=n(ALe,"A",{href:!0});var sut=s(eX);Eir=r(sut,"TFGPTJForCausalLM"),sut.forEach(t),Cir=r(ALe," (GPT-J model)"),ALe.forEach(t),wir=i(pe),YT=n(pe,"LI",{});var yLe=s(YT);gue=n(yLe,"STRONG",{});var lut=s(gue);Air=r(lut,"openai-gpt"),lut.forEach(t),yir=r(yLe," \u2014 "),oX=n(yLe,"A",{href:!0});var iut=s(oX);Lir=r(iut,"TFOpenAIGPTLMHeadModel"),iut.forEach(t),xir=r(yLe," (OpenAI GPT model)"),yLe.forEach(t),kir=i(pe),KT=n(pe,"LI",{});var LLe=s(KT);hue=n(LLe,"STRONG",{});var dut=s(hue);Sir=r(dut,"rembert"),dut.forEach(t),Rir=r(LLe," \u2014 "),rX=n(LLe,"A",{href:!0});var cut=s(rX);Bir=r(cut,"TFRemBertForCausalLM"),cut.forEach(t),Pir=r(LLe," (RemBERT model)"),LLe.forEach(t),$ir=i(pe),ZT=n(pe,"LI",{});var xLe=s(ZT);pue=n(xLe,"STRONG",{});var fut=s(pue);Iir=r(fut,"roberta"),fut.forEach(t),qir=r(xLe," \u2014 "),tX=n(xLe,"A",{href:!0});var mut=s(tX);Nir=r(mut,"TFRobertaForCausalLM"),mut.forEach(t),jir=r(xLe," (RoBERTa model)"),xLe.forEach(t),Dir=i(pe),e8=n(pe,"LI",{});var kLe=s(e8);_ue=n(kLe,"STRONG",{});var gut=s(_ue);Gir=r(gut,"roformer"),gut.forEach(t),Oir=r(kLe," \u2014 "),aX=n(kLe,"A",{href:!0});var hut=s(aX);Vir=r(hut,"TFRoFormerForCausalLM"),hut.forEach(t),Xir=r(kLe," (RoFormer model)"),kLe.forEach(t),zir=i(pe),o8=n(pe,"LI",{});var SLe=s(o8);uue=n(SLe,"STRONG",{});var put=s(uue);Qir=r(put,"transfo-xl"),put.forEach(t),Wir=r(SLe," \u2014 "),nX=n(SLe,"A",{href:!0});var _ut=s(nX);Hir=r(_ut,"TFTransfoXLLMHeadModel"),_ut.forEach(t),Uir=r(SLe," (Transformer-XL model)"),SLe.forEach(t),Jir=i(pe),r8=n(pe,"LI",{});var RLe=s(r8);bue=n(RLe,"STRONG",{});var uut=s(bue);Yir=r(uut,"xlm"),uut.forEach(t),Kir=r(RLe," \u2014 "),sX=n(RLe,"A",{href:!0});var but=s(sX);Zir=r(but,"TFXLMWithLMHeadModel"),but.forEach(t),edr=r(RLe," (XLM model)"),RLe.forEach(t),odr=i(pe),t8=n(pe,"LI",{});var BLe=s(t8);vue=n(BLe,"STRONG",{});var vut=s(vue);rdr=r(vut,"xlnet"),vut.forEach(t),tdr=r(BLe," \u2014 "),lX=n(BLe,"A",{href:!0});var Fut=s(lX);adr=r(Fut,"TFXLNetLMHeadModel"),Fut.forEach(t),ndr=r(BLe," (XLNet model)"),BLe.forEach(t),pe.forEach(t),sdr=i(ua),Fue=n(ua,"P",{});var Tut=s(Fue);ldr=r(Tut,"Examples:"),Tut.forEach(t),idr=i(ua),m(xw.$$.fragment,ua),ua.forEach(t),Ql.forEach(t),HBe=i(c),Cc=n(c,"H2",{class:!0});var aIe=s(Cc);a8=n(aIe,"A",{id:!0,class:!0,href:!0});var Mut=s(a8);Tue=n(Mut,"SPAN",{});var Eut=s(Tue);m(kw.$$.fragment,Eut),Eut.forEach(t),Mut.forEach(t),ddr=i(aIe),Mue=n(aIe,"SPAN",{});var Cut=s(Mue);cdr=r(Cut,"TFAutoModelForImageClassification"),Cut.forEach(t),aIe.forEach(t),UBe=i(c),Mr=n(c,"DIV",{class:!0});var Hl=s(Mr);m(Sw.$$.fragment,Hl),fdr=i(Hl),wc=n(Hl,"P",{});var wJ=s(wc);mdr=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iX=n(wJ,"A",{href:!0});var wut=s(iX);gdr=r(wut,"from_pretrained()"),wut.forEach(t),hdr=r(wJ," class method or the "),dX=n(wJ,"A",{href:!0});var Aut=s(dX);pdr=r(Aut,"from_config()"),Aut.forEach(t),_dr=r(wJ,` class
method.`),wJ.forEach(t),udr=i(Hl),Rw=n(Hl,"P",{});var nIe=s(Rw);bdr=r(nIe,"This class cannot be instantiated directly using "),Eue=n(nIe,"CODE",{});var yut=s(Eue);vdr=r(yut,"__init__()"),yut.forEach(t),Fdr=r(nIe," (throws an error)."),nIe.forEach(t),Tdr=i(Hl),_t=n(Hl,"DIV",{class:!0});var Ul=s(_t);m(Bw.$$.fragment,Ul),Mdr=i(Ul),Cue=n(Ul,"P",{});var Lut=s(Cue);Edr=r(Lut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lut.forEach(t),Cdr=i(Ul),Ac=n(Ul,"P",{});var AJ=s(Ac);wdr=r(AJ,`Note:
Loading a model from its configuration file does `),wue=n(AJ,"STRONG",{});var xut=s(wue);Adr=r(xut,"not"),xut.forEach(t),ydr=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=n(AJ,"A",{href:!0});var kut=s(cX);Ldr=r(kut,"from_pretrained()"),kut.forEach(t),xdr=r(AJ," to load the model weights."),AJ.forEach(t),kdr=i(Ul),Aue=n(Ul,"P",{});var Sut=s(Aue);Sdr=r(Sut,"Examples:"),Sut.forEach(t),Rdr=i(Ul),m(Pw.$$.fragment,Ul),Ul.forEach(t),Bdr=i(Hl),uo=n(Hl,"DIV",{class:!0});var ba=s(uo);m($w.$$.fragment,ba),Pdr=i(ba),yue=n(ba,"P",{});var Rut=s(yue);$dr=r(Rut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Rut.forEach(t),Idr=i(ba),Fn=n(ba,"P",{});var lE=s(Fn);qdr=r(lE,"The model class to instantiate is selected based on the "),Lue=n(lE,"CODE",{});var But=s(Lue);Ndr=r(But,"model_type"),But.forEach(t),jdr=r(lE,` property of the config object (either
passed as an argument or loaded from `),xue=n(lE,"CODE",{});var Put=s(xue);Ddr=r(Put,"pretrained_model_name_or_path"),Put.forEach(t),Gdr=r(lE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=n(lE,"CODE",{});var $ut=s(kue);Odr=r($ut,"pretrained_model_name_or_path"),$ut.forEach(t),Vdr=r(lE,":"),lE.forEach(t),Xdr=i(ba),Iw=n(ba,"UL",{});var sIe=s(Iw);n8=n(sIe,"LI",{});var PLe=s(n8);Sue=n(PLe,"STRONG",{});var Iut=s(Sue);zdr=r(Iut,"convnext"),Iut.forEach(t),Qdr=r(PLe," \u2014 "),fX=n(PLe,"A",{href:!0});var qut=s(fX);Wdr=r(qut,"TFConvNextForImageClassification"),qut.forEach(t),Hdr=r(PLe," (ConvNext model)"),PLe.forEach(t),Udr=i(sIe),s8=n(sIe,"LI",{});var $Le=s(s8);Rue=n($Le,"STRONG",{});var Nut=s(Rue);Jdr=r(Nut,"vit"),Nut.forEach(t),Ydr=r($Le," \u2014 "),mX=n($Le,"A",{href:!0});var jut=s(mX);Kdr=r(jut,"TFViTForImageClassification"),jut.forEach(t),Zdr=r($Le," (ViT model)"),$Le.forEach(t),sIe.forEach(t),ecr=i(ba),Bue=n(ba,"P",{});var Dut=s(Bue);ocr=r(Dut,"Examples:"),Dut.forEach(t),rcr=i(ba),m(qw.$$.fragment,ba),ba.forEach(t),Hl.forEach(t),JBe=i(c),yc=n(c,"H2",{class:!0});var lIe=s(yc);l8=n(lIe,"A",{id:!0,class:!0,href:!0});var Gut=s(l8);Pue=n(Gut,"SPAN",{});var Out=s(Pue);m(Nw.$$.fragment,Out),Out.forEach(t),Gut.forEach(t),tcr=i(lIe),$ue=n(lIe,"SPAN",{});var Vut=s($ue);acr=r(Vut,"TFAutoModelForMaskedLM"),Vut.forEach(t),lIe.forEach(t),YBe=i(c),Er=n(c,"DIV",{class:!0});var Jl=s(Er);m(jw.$$.fragment,Jl),ncr=i(Jl),Lc=n(Jl,"P",{});var yJ=s(Lc);scr=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gX=n(yJ,"A",{href:!0});var Xut=s(gX);lcr=r(Xut,"from_pretrained()"),Xut.forEach(t),icr=r(yJ," class method or the "),hX=n(yJ,"A",{href:!0});var zut=s(hX);dcr=r(zut,"from_config()"),zut.forEach(t),ccr=r(yJ,` class
method.`),yJ.forEach(t),fcr=i(Jl),Dw=n(Jl,"P",{});var iIe=s(Dw);mcr=r(iIe,"This class cannot be instantiated directly using "),Iue=n(iIe,"CODE",{});var Qut=s(Iue);gcr=r(Qut,"__init__()"),Qut.forEach(t),hcr=r(iIe," (throws an error)."),iIe.forEach(t),pcr=i(Jl),ut=n(Jl,"DIV",{class:!0});var Yl=s(ut);m(Gw.$$.fragment,Yl),_cr=i(Yl),que=n(Yl,"P",{});var Wut=s(que);ucr=r(Wut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Wut.forEach(t),bcr=i(Yl),xc=n(Yl,"P",{});var LJ=s(xc);vcr=r(LJ,`Note:
Loading a model from its configuration file does `),Nue=n(LJ,"STRONG",{});var Hut=s(Nue);Fcr=r(Hut,"not"),Hut.forEach(t),Tcr=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=n(LJ,"A",{href:!0});var Uut=s(pX);Mcr=r(Uut,"from_pretrained()"),Uut.forEach(t),Ecr=r(LJ," to load the model weights."),LJ.forEach(t),Ccr=i(Yl),jue=n(Yl,"P",{});var Jut=s(jue);wcr=r(Jut,"Examples:"),Jut.forEach(t),Acr=i(Yl),m(Ow.$$.fragment,Yl),Yl.forEach(t),ycr=i(Jl),bo=n(Jl,"DIV",{class:!0});var va=s(bo);m(Vw.$$.fragment,va),Lcr=i(va),Due=n(va,"P",{});var Yut=s(Due);xcr=r(Yut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Yut.forEach(t),kcr=i(va),Tn=n(va,"P",{});var iE=s(Tn);Scr=r(iE,"The model class to instantiate is selected based on the "),Gue=n(iE,"CODE",{});var Kut=s(Gue);Rcr=r(Kut,"model_type"),Kut.forEach(t),Bcr=r(iE,` property of the config object (either
passed as an argument or loaded from `),Oue=n(iE,"CODE",{});var Zut=s(Oue);Pcr=r(Zut,"pretrained_model_name_or_path"),Zut.forEach(t),$cr=r(iE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=n(iE,"CODE",{});var e1t=s(Vue);Icr=r(e1t,"pretrained_model_name_or_path"),e1t.forEach(t),qcr=r(iE,":"),iE.forEach(t),Ncr=i(va),J=n(va,"UL",{});var oe=s(J);i8=n(oe,"LI",{});var ILe=s(i8);Xue=n(ILe,"STRONG",{});var o1t=s(Xue);jcr=r(o1t,"albert"),o1t.forEach(t),Dcr=r(ILe," \u2014 "),_X=n(ILe,"A",{href:!0});var r1t=s(_X);Gcr=r(r1t,"TFAlbertForMaskedLM"),r1t.forEach(t),Ocr=r(ILe," (ALBERT model)"),ILe.forEach(t),Vcr=i(oe),d8=n(oe,"LI",{});var qLe=s(d8);zue=n(qLe,"STRONG",{});var t1t=s(zue);Xcr=r(t1t,"bert"),t1t.forEach(t),zcr=r(qLe," \u2014 "),uX=n(qLe,"A",{href:!0});var a1t=s(uX);Qcr=r(a1t,"TFBertForMaskedLM"),a1t.forEach(t),Wcr=r(qLe," (BERT model)"),qLe.forEach(t),Hcr=i(oe),c8=n(oe,"LI",{});var NLe=s(c8);Que=n(NLe,"STRONG",{});var n1t=s(Que);Ucr=r(n1t,"camembert"),n1t.forEach(t),Jcr=r(NLe," \u2014 "),bX=n(NLe,"A",{href:!0});var s1t=s(bX);Ycr=r(s1t,"TFCamembertForMaskedLM"),s1t.forEach(t),Kcr=r(NLe," (CamemBERT model)"),NLe.forEach(t),Zcr=i(oe),f8=n(oe,"LI",{});var jLe=s(f8);Wue=n(jLe,"STRONG",{});var l1t=s(Wue);efr=r(l1t,"convbert"),l1t.forEach(t),ofr=r(jLe," \u2014 "),vX=n(jLe,"A",{href:!0});var i1t=s(vX);rfr=r(i1t,"TFConvBertForMaskedLM"),i1t.forEach(t),tfr=r(jLe," (ConvBERT model)"),jLe.forEach(t),afr=i(oe),m8=n(oe,"LI",{});var DLe=s(m8);Hue=n(DLe,"STRONG",{});var d1t=s(Hue);nfr=r(d1t,"deberta"),d1t.forEach(t),sfr=r(DLe," \u2014 "),FX=n(DLe,"A",{href:!0});var c1t=s(FX);lfr=r(c1t,"TFDebertaForMaskedLM"),c1t.forEach(t),ifr=r(DLe," (DeBERTa model)"),DLe.forEach(t),dfr=i(oe),g8=n(oe,"LI",{});var GLe=s(g8);Uue=n(GLe,"STRONG",{});var f1t=s(Uue);cfr=r(f1t,"deberta-v2"),f1t.forEach(t),ffr=r(GLe," \u2014 "),TX=n(GLe,"A",{href:!0});var m1t=s(TX);mfr=r(m1t,"TFDebertaV2ForMaskedLM"),m1t.forEach(t),gfr=r(GLe," (DeBERTa-v2 model)"),GLe.forEach(t),hfr=i(oe),h8=n(oe,"LI",{});var OLe=s(h8);Jue=n(OLe,"STRONG",{});var g1t=s(Jue);pfr=r(g1t,"distilbert"),g1t.forEach(t),_fr=r(OLe," \u2014 "),MX=n(OLe,"A",{href:!0});var h1t=s(MX);ufr=r(h1t,"TFDistilBertForMaskedLM"),h1t.forEach(t),bfr=r(OLe," (DistilBERT model)"),OLe.forEach(t),vfr=i(oe),p8=n(oe,"LI",{});var VLe=s(p8);Yue=n(VLe,"STRONG",{});var p1t=s(Yue);Ffr=r(p1t,"electra"),p1t.forEach(t),Tfr=r(VLe," \u2014 "),EX=n(VLe,"A",{href:!0});var _1t=s(EX);Mfr=r(_1t,"TFElectraForMaskedLM"),_1t.forEach(t),Efr=r(VLe," (ELECTRA model)"),VLe.forEach(t),Cfr=i(oe),_8=n(oe,"LI",{});var XLe=s(_8);Kue=n(XLe,"STRONG",{});var u1t=s(Kue);wfr=r(u1t,"flaubert"),u1t.forEach(t),Afr=r(XLe," \u2014 "),CX=n(XLe,"A",{href:!0});var b1t=s(CX);yfr=r(b1t,"TFFlaubertWithLMHeadModel"),b1t.forEach(t),Lfr=r(XLe," (FlauBERT model)"),XLe.forEach(t),xfr=i(oe),u8=n(oe,"LI",{});var zLe=s(u8);Zue=n(zLe,"STRONG",{});var v1t=s(Zue);kfr=r(v1t,"funnel"),v1t.forEach(t),Sfr=r(zLe," \u2014 "),wX=n(zLe,"A",{href:!0});var F1t=s(wX);Rfr=r(F1t,"TFFunnelForMaskedLM"),F1t.forEach(t),Bfr=r(zLe," (Funnel Transformer model)"),zLe.forEach(t),Pfr=i(oe),b8=n(oe,"LI",{});var QLe=s(b8);e1e=n(QLe,"STRONG",{});var T1t=s(e1e);$fr=r(T1t,"layoutlm"),T1t.forEach(t),Ifr=r(QLe," \u2014 "),AX=n(QLe,"A",{href:!0});var M1t=s(AX);qfr=r(M1t,"TFLayoutLMForMaskedLM"),M1t.forEach(t),Nfr=r(QLe," (LayoutLM model)"),QLe.forEach(t),jfr=i(oe),v8=n(oe,"LI",{});var WLe=s(v8);o1e=n(WLe,"STRONG",{});var E1t=s(o1e);Dfr=r(E1t,"longformer"),E1t.forEach(t),Gfr=r(WLe," \u2014 "),yX=n(WLe,"A",{href:!0});var C1t=s(yX);Ofr=r(C1t,"TFLongformerForMaskedLM"),C1t.forEach(t),Vfr=r(WLe," (Longformer model)"),WLe.forEach(t),Xfr=i(oe),F8=n(oe,"LI",{});var HLe=s(F8);r1e=n(HLe,"STRONG",{});var w1t=s(r1e);zfr=r(w1t,"mobilebert"),w1t.forEach(t),Qfr=r(HLe," \u2014 "),LX=n(HLe,"A",{href:!0});var A1t=s(LX);Wfr=r(A1t,"TFMobileBertForMaskedLM"),A1t.forEach(t),Hfr=r(HLe," (MobileBERT model)"),HLe.forEach(t),Ufr=i(oe),T8=n(oe,"LI",{});var ULe=s(T8);t1e=n(ULe,"STRONG",{});var y1t=s(t1e);Jfr=r(y1t,"mpnet"),y1t.forEach(t),Yfr=r(ULe," \u2014 "),xX=n(ULe,"A",{href:!0});var L1t=s(xX);Kfr=r(L1t,"TFMPNetForMaskedLM"),L1t.forEach(t),Zfr=r(ULe," (MPNet model)"),ULe.forEach(t),emr=i(oe),M8=n(oe,"LI",{});var JLe=s(M8);a1e=n(JLe,"STRONG",{});var x1t=s(a1e);omr=r(x1t,"rembert"),x1t.forEach(t),rmr=r(JLe," \u2014 "),kX=n(JLe,"A",{href:!0});var k1t=s(kX);tmr=r(k1t,"TFRemBertForMaskedLM"),k1t.forEach(t),amr=r(JLe," (RemBERT model)"),JLe.forEach(t),nmr=i(oe),E8=n(oe,"LI",{});var YLe=s(E8);n1e=n(YLe,"STRONG",{});var S1t=s(n1e);smr=r(S1t,"roberta"),S1t.forEach(t),lmr=r(YLe," \u2014 "),SX=n(YLe,"A",{href:!0});var R1t=s(SX);imr=r(R1t,"TFRobertaForMaskedLM"),R1t.forEach(t),dmr=r(YLe," (RoBERTa model)"),YLe.forEach(t),cmr=i(oe),C8=n(oe,"LI",{});var KLe=s(C8);s1e=n(KLe,"STRONG",{});var B1t=s(s1e);fmr=r(B1t,"roformer"),B1t.forEach(t),mmr=r(KLe," \u2014 "),RX=n(KLe,"A",{href:!0});var P1t=s(RX);gmr=r(P1t,"TFRoFormerForMaskedLM"),P1t.forEach(t),hmr=r(KLe," (RoFormer model)"),KLe.forEach(t),pmr=i(oe),w8=n(oe,"LI",{});var ZLe=s(w8);l1e=n(ZLe,"STRONG",{});var $1t=s(l1e);_mr=r($1t,"tapas"),$1t.forEach(t),umr=r(ZLe," \u2014 "),BX=n(ZLe,"A",{href:!0});var I1t=s(BX);bmr=r(I1t,"TFTapasForMaskedLM"),I1t.forEach(t),vmr=r(ZLe," (TAPAS model)"),ZLe.forEach(t),Fmr=i(oe),A8=n(oe,"LI",{});var exe=s(A8);i1e=n(exe,"STRONG",{});var q1t=s(i1e);Tmr=r(q1t,"xlm"),q1t.forEach(t),Mmr=r(exe," \u2014 "),PX=n(exe,"A",{href:!0});var N1t=s(PX);Emr=r(N1t,"TFXLMWithLMHeadModel"),N1t.forEach(t),Cmr=r(exe," (XLM model)"),exe.forEach(t),wmr=i(oe),y8=n(oe,"LI",{});var oxe=s(y8);d1e=n(oxe,"STRONG",{});var j1t=s(d1e);Amr=r(j1t,"xlm-roberta"),j1t.forEach(t),ymr=r(oxe," \u2014 "),$X=n(oxe,"A",{href:!0});var D1t=s($X);Lmr=r(D1t,"TFXLMRobertaForMaskedLM"),D1t.forEach(t),xmr=r(oxe," (XLM-RoBERTa model)"),oxe.forEach(t),oe.forEach(t),kmr=i(va),c1e=n(va,"P",{});var G1t=s(c1e);Smr=r(G1t,"Examples:"),G1t.forEach(t),Rmr=i(va),m(Xw.$$.fragment,va),va.forEach(t),Jl.forEach(t),KBe=i(c),kc=n(c,"H2",{class:!0});var dIe=s(kc);L8=n(dIe,"A",{id:!0,class:!0,href:!0});var O1t=s(L8);f1e=n(O1t,"SPAN",{});var V1t=s(f1e);m(zw.$$.fragment,V1t),V1t.forEach(t),O1t.forEach(t),Bmr=i(dIe),m1e=n(dIe,"SPAN",{});var X1t=s(m1e);Pmr=r(X1t,"TFAutoModelForSeq2SeqLM"),X1t.forEach(t),dIe.forEach(t),ZBe=i(c),Cr=n(c,"DIV",{class:!0});var Kl=s(Cr);m(Qw.$$.fragment,Kl),$mr=i(Kl),Sc=n(Kl,"P",{});var xJ=s(Sc);Imr=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IX=n(xJ,"A",{href:!0});var z1t=s(IX);qmr=r(z1t,"from_pretrained()"),z1t.forEach(t),Nmr=r(xJ," class method or the "),qX=n(xJ,"A",{href:!0});var Q1t=s(qX);jmr=r(Q1t,"from_config()"),Q1t.forEach(t),Dmr=r(xJ,` class
method.`),xJ.forEach(t),Gmr=i(Kl),Ww=n(Kl,"P",{});var cIe=s(Ww);Omr=r(cIe,"This class cannot be instantiated directly using "),g1e=n(cIe,"CODE",{});var W1t=s(g1e);Vmr=r(W1t,"__init__()"),W1t.forEach(t),Xmr=r(cIe," (throws an error)."),cIe.forEach(t),zmr=i(Kl),bt=n(Kl,"DIV",{class:!0});var Zl=s(bt);m(Hw.$$.fragment,Zl),Qmr=i(Zl),h1e=n(Zl,"P",{});var H1t=s(h1e);Wmr=r(H1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),H1t.forEach(t),Hmr=i(Zl),Rc=n(Zl,"P",{});var kJ=s(Rc);Umr=r(kJ,`Note:
Loading a model from its configuration file does `),p1e=n(kJ,"STRONG",{});var U1t=s(p1e);Jmr=r(U1t,"not"),U1t.forEach(t),Ymr=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=n(kJ,"A",{href:!0});var J1t=s(NX);Kmr=r(J1t,"from_pretrained()"),J1t.forEach(t),Zmr=r(kJ," to load the model weights."),kJ.forEach(t),egr=i(Zl),_1e=n(Zl,"P",{});var Y1t=s(_1e);ogr=r(Y1t,"Examples:"),Y1t.forEach(t),rgr=i(Zl),m(Uw.$$.fragment,Zl),Zl.forEach(t),tgr=i(Kl),vo=n(Kl,"DIV",{class:!0});var Fa=s(vo);m(Jw.$$.fragment,Fa),agr=i(Fa),u1e=n(Fa,"P",{});var K1t=s(u1e);ngr=r(K1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),K1t.forEach(t),sgr=i(Fa),Mn=n(Fa,"P",{});var dE=s(Mn);lgr=r(dE,"The model class to instantiate is selected based on the "),b1e=n(dE,"CODE",{});var Z1t=s(b1e);igr=r(Z1t,"model_type"),Z1t.forEach(t),dgr=r(dE,` property of the config object (either
passed as an argument or loaded from `),v1e=n(dE,"CODE",{});var ebt=s(v1e);cgr=r(ebt,"pretrained_model_name_or_path"),ebt.forEach(t),fgr=r(dE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=n(dE,"CODE",{});var obt=s(F1e);mgr=r(obt,"pretrained_model_name_or_path"),obt.forEach(t),ggr=r(dE,":"),dE.forEach(t),hgr=i(Fa),be=n(Fa,"UL",{});var we=s(be);x8=n(we,"LI",{});var rxe=s(x8);T1e=n(rxe,"STRONG",{});var rbt=s(T1e);pgr=r(rbt,"bart"),rbt.forEach(t),_gr=r(rxe," \u2014 "),jX=n(rxe,"A",{href:!0});var tbt=s(jX);ugr=r(tbt,"TFBartForConditionalGeneration"),tbt.forEach(t),bgr=r(rxe," (BART model)"),rxe.forEach(t),vgr=i(we),k8=n(we,"LI",{});var txe=s(k8);M1e=n(txe,"STRONG",{});var abt=s(M1e);Fgr=r(abt,"blenderbot"),abt.forEach(t),Tgr=r(txe," \u2014 "),DX=n(txe,"A",{href:!0});var nbt=s(DX);Mgr=r(nbt,"TFBlenderbotForConditionalGeneration"),nbt.forEach(t),Egr=r(txe," (Blenderbot model)"),txe.forEach(t),Cgr=i(we),S8=n(we,"LI",{});var axe=s(S8);E1e=n(axe,"STRONG",{});var sbt=s(E1e);wgr=r(sbt,"blenderbot-small"),sbt.forEach(t),Agr=r(axe," \u2014 "),GX=n(axe,"A",{href:!0});var lbt=s(GX);ygr=r(lbt,"TFBlenderbotSmallForConditionalGeneration"),lbt.forEach(t),Lgr=r(axe," (BlenderbotSmall model)"),axe.forEach(t),xgr=i(we),R8=n(we,"LI",{});var nxe=s(R8);C1e=n(nxe,"STRONG",{});var ibt=s(C1e);kgr=r(ibt,"encoder-decoder"),ibt.forEach(t),Sgr=r(nxe," \u2014 "),OX=n(nxe,"A",{href:!0});var dbt=s(OX);Rgr=r(dbt,"TFEncoderDecoderModel"),dbt.forEach(t),Bgr=r(nxe," (Encoder decoder model)"),nxe.forEach(t),Pgr=i(we),B8=n(we,"LI",{});var sxe=s(B8);w1e=n(sxe,"STRONG",{});var cbt=s(w1e);$gr=r(cbt,"led"),cbt.forEach(t),Igr=r(sxe," \u2014 "),VX=n(sxe,"A",{href:!0});var fbt=s(VX);qgr=r(fbt,"TFLEDForConditionalGeneration"),fbt.forEach(t),Ngr=r(sxe," (LED model)"),sxe.forEach(t),jgr=i(we),P8=n(we,"LI",{});var lxe=s(P8);A1e=n(lxe,"STRONG",{});var mbt=s(A1e);Dgr=r(mbt,"marian"),mbt.forEach(t),Ggr=r(lxe," \u2014 "),XX=n(lxe,"A",{href:!0});var gbt=s(XX);Ogr=r(gbt,"TFMarianMTModel"),gbt.forEach(t),Vgr=r(lxe," (Marian model)"),lxe.forEach(t),Xgr=i(we),$8=n(we,"LI",{});var ixe=s($8);y1e=n(ixe,"STRONG",{});var hbt=s(y1e);zgr=r(hbt,"mbart"),hbt.forEach(t),Qgr=r(ixe," \u2014 "),zX=n(ixe,"A",{href:!0});var pbt=s(zX);Wgr=r(pbt,"TFMBartForConditionalGeneration"),pbt.forEach(t),Hgr=r(ixe," (mBART model)"),ixe.forEach(t),Ugr=i(we),I8=n(we,"LI",{});var dxe=s(I8);L1e=n(dxe,"STRONG",{});var _bt=s(L1e);Jgr=r(_bt,"mt5"),_bt.forEach(t),Ygr=r(dxe," \u2014 "),QX=n(dxe,"A",{href:!0});var ubt=s(QX);Kgr=r(ubt,"TFMT5ForConditionalGeneration"),ubt.forEach(t),Zgr=r(dxe," (mT5 model)"),dxe.forEach(t),ehr=i(we),q8=n(we,"LI",{});var cxe=s(q8);x1e=n(cxe,"STRONG",{});var bbt=s(x1e);ohr=r(bbt,"pegasus"),bbt.forEach(t),rhr=r(cxe," \u2014 "),WX=n(cxe,"A",{href:!0});var vbt=s(WX);thr=r(vbt,"TFPegasusForConditionalGeneration"),vbt.forEach(t),ahr=r(cxe," (Pegasus model)"),cxe.forEach(t),nhr=i(we),N8=n(we,"LI",{});var fxe=s(N8);k1e=n(fxe,"STRONG",{});var Fbt=s(k1e);shr=r(Fbt,"t5"),Fbt.forEach(t),lhr=r(fxe," \u2014 "),HX=n(fxe,"A",{href:!0});var Tbt=s(HX);ihr=r(Tbt,"TFT5ForConditionalGeneration"),Tbt.forEach(t),dhr=r(fxe," (T5 model)"),fxe.forEach(t),we.forEach(t),chr=i(Fa),S1e=n(Fa,"P",{});var Mbt=s(S1e);fhr=r(Mbt,"Examples:"),Mbt.forEach(t),mhr=i(Fa),m(Yw.$$.fragment,Fa),Fa.forEach(t),Kl.forEach(t),ePe=i(c),Bc=n(c,"H2",{class:!0});var fIe=s(Bc);j8=n(fIe,"A",{id:!0,class:!0,href:!0});var Ebt=s(j8);R1e=n(Ebt,"SPAN",{});var Cbt=s(R1e);m(Kw.$$.fragment,Cbt),Cbt.forEach(t),Ebt.forEach(t),ghr=i(fIe),B1e=n(fIe,"SPAN",{});var wbt=s(B1e);hhr=r(wbt,"TFAutoModelForSequenceClassification"),wbt.forEach(t),fIe.forEach(t),oPe=i(c),wr=n(c,"DIV",{class:!0});var ei=s(wr);m(Zw.$$.fragment,ei),phr=i(ei),Pc=n(ei,"P",{});var SJ=s(Pc);_hr=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UX=n(SJ,"A",{href:!0});var Abt=s(UX);uhr=r(Abt,"from_pretrained()"),Abt.forEach(t),bhr=r(SJ," class method or the "),JX=n(SJ,"A",{href:!0});var ybt=s(JX);vhr=r(ybt,"from_config()"),ybt.forEach(t),Fhr=r(SJ,` class
method.`),SJ.forEach(t),Thr=i(ei),eA=n(ei,"P",{});var mIe=s(eA);Mhr=r(mIe,"This class cannot be instantiated directly using "),P1e=n(mIe,"CODE",{});var Lbt=s(P1e);Ehr=r(Lbt,"__init__()"),Lbt.forEach(t),Chr=r(mIe," (throws an error)."),mIe.forEach(t),whr=i(ei),vt=n(ei,"DIV",{class:!0});var oi=s(vt);m(oA.$$.fragment,oi),Ahr=i(oi),$1e=n(oi,"P",{});var xbt=s($1e);yhr=r(xbt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),xbt.forEach(t),Lhr=i(oi),$c=n(oi,"P",{});var RJ=s($c);xhr=r(RJ,`Note:
Loading a model from its configuration file does `),I1e=n(RJ,"STRONG",{});var kbt=s(I1e);khr=r(kbt,"not"),kbt.forEach(t),Shr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=n(RJ,"A",{href:!0});var Sbt=s(YX);Rhr=r(Sbt,"from_pretrained()"),Sbt.forEach(t),Bhr=r(RJ," to load the model weights."),RJ.forEach(t),Phr=i(oi),q1e=n(oi,"P",{});var Rbt=s(q1e);$hr=r(Rbt,"Examples:"),Rbt.forEach(t),Ihr=i(oi),m(rA.$$.fragment,oi),oi.forEach(t),qhr=i(ei),Fo=n(ei,"DIV",{class:!0});var Ta=s(Fo);m(tA.$$.fragment,Ta),Nhr=i(Ta),N1e=n(Ta,"P",{});var Bbt=s(N1e);jhr=r(Bbt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Bbt.forEach(t),Dhr=i(Ta),En=n(Ta,"P",{});var cE=s(En);Ghr=r(cE,"The model class to instantiate is selected based on the "),j1e=n(cE,"CODE",{});var Pbt=s(j1e);Ohr=r(Pbt,"model_type"),Pbt.forEach(t),Vhr=r(cE,` property of the config object (either
passed as an argument or loaded from `),D1e=n(cE,"CODE",{});var $bt=s(D1e);Xhr=r($bt,"pretrained_model_name_or_path"),$bt.forEach(t),zhr=r(cE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=n(cE,"CODE",{});var Ibt=s(G1e);Qhr=r(Ibt,"pretrained_model_name_or_path"),Ibt.forEach(t),Whr=r(cE,":"),cE.forEach(t),Hhr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);D8=n(Q,"LI",{});var mxe=s(D8);O1e=n(mxe,"STRONG",{});var qbt=s(O1e);Uhr=r(qbt,"albert"),qbt.forEach(t),Jhr=r(mxe," \u2014 "),KX=n(mxe,"A",{href:!0});var Nbt=s(KX);Yhr=r(Nbt,"TFAlbertForSequenceClassification"),Nbt.forEach(t),Khr=r(mxe," (ALBERT model)"),mxe.forEach(t),Zhr=i(Q),G8=n(Q,"LI",{});var gxe=s(G8);V1e=n(gxe,"STRONG",{});var jbt=s(V1e);epr=r(jbt,"bert"),jbt.forEach(t),opr=r(gxe," \u2014 "),ZX=n(gxe,"A",{href:!0});var Dbt=s(ZX);rpr=r(Dbt,"TFBertForSequenceClassification"),Dbt.forEach(t),tpr=r(gxe," (BERT model)"),gxe.forEach(t),apr=i(Q),O8=n(Q,"LI",{});var hxe=s(O8);X1e=n(hxe,"STRONG",{});var Gbt=s(X1e);npr=r(Gbt,"camembert"),Gbt.forEach(t),spr=r(hxe," \u2014 "),ez=n(hxe,"A",{href:!0});var Obt=s(ez);lpr=r(Obt,"TFCamembertForSequenceClassification"),Obt.forEach(t),ipr=r(hxe," (CamemBERT model)"),hxe.forEach(t),dpr=i(Q),V8=n(Q,"LI",{});var pxe=s(V8);z1e=n(pxe,"STRONG",{});var Vbt=s(z1e);cpr=r(Vbt,"convbert"),Vbt.forEach(t),fpr=r(pxe," \u2014 "),oz=n(pxe,"A",{href:!0});var Xbt=s(oz);mpr=r(Xbt,"TFConvBertForSequenceClassification"),Xbt.forEach(t),gpr=r(pxe," (ConvBERT model)"),pxe.forEach(t),hpr=i(Q),X8=n(Q,"LI",{});var _xe=s(X8);Q1e=n(_xe,"STRONG",{});var zbt=s(Q1e);ppr=r(zbt,"ctrl"),zbt.forEach(t),_pr=r(_xe," \u2014 "),rz=n(_xe,"A",{href:!0});var Qbt=s(rz);upr=r(Qbt,"TFCTRLForSequenceClassification"),Qbt.forEach(t),bpr=r(_xe," (CTRL model)"),_xe.forEach(t),vpr=i(Q),z8=n(Q,"LI",{});var uxe=s(z8);W1e=n(uxe,"STRONG",{});var Wbt=s(W1e);Fpr=r(Wbt,"deberta"),Wbt.forEach(t),Tpr=r(uxe," \u2014 "),tz=n(uxe,"A",{href:!0});var Hbt=s(tz);Mpr=r(Hbt,"TFDebertaForSequenceClassification"),Hbt.forEach(t),Epr=r(uxe," (DeBERTa model)"),uxe.forEach(t),Cpr=i(Q),Q8=n(Q,"LI",{});var bxe=s(Q8);H1e=n(bxe,"STRONG",{});var Ubt=s(H1e);wpr=r(Ubt,"deberta-v2"),Ubt.forEach(t),Apr=r(bxe," \u2014 "),az=n(bxe,"A",{href:!0});var Jbt=s(az);ypr=r(Jbt,"TFDebertaV2ForSequenceClassification"),Jbt.forEach(t),Lpr=r(bxe," (DeBERTa-v2 model)"),bxe.forEach(t),xpr=i(Q),W8=n(Q,"LI",{});var vxe=s(W8);U1e=n(vxe,"STRONG",{});var Ybt=s(U1e);kpr=r(Ybt,"distilbert"),Ybt.forEach(t),Spr=r(vxe," \u2014 "),nz=n(vxe,"A",{href:!0});var Kbt=s(nz);Rpr=r(Kbt,"TFDistilBertForSequenceClassification"),Kbt.forEach(t),Bpr=r(vxe," (DistilBERT model)"),vxe.forEach(t),Ppr=i(Q),H8=n(Q,"LI",{});var Fxe=s(H8);J1e=n(Fxe,"STRONG",{});var Zbt=s(J1e);$pr=r(Zbt,"electra"),Zbt.forEach(t),Ipr=r(Fxe," \u2014 "),sz=n(Fxe,"A",{href:!0});var e2t=s(sz);qpr=r(e2t,"TFElectraForSequenceClassification"),e2t.forEach(t),Npr=r(Fxe," (ELECTRA model)"),Fxe.forEach(t),jpr=i(Q),U8=n(Q,"LI",{});var Txe=s(U8);Y1e=n(Txe,"STRONG",{});var o2t=s(Y1e);Dpr=r(o2t,"flaubert"),o2t.forEach(t),Gpr=r(Txe," \u2014 "),lz=n(Txe,"A",{href:!0});var r2t=s(lz);Opr=r(r2t,"TFFlaubertForSequenceClassification"),r2t.forEach(t),Vpr=r(Txe," (FlauBERT model)"),Txe.forEach(t),Xpr=i(Q),J8=n(Q,"LI",{});var Mxe=s(J8);K1e=n(Mxe,"STRONG",{});var t2t=s(K1e);zpr=r(t2t,"funnel"),t2t.forEach(t),Qpr=r(Mxe," \u2014 "),iz=n(Mxe,"A",{href:!0});var a2t=s(iz);Wpr=r(a2t,"TFFunnelForSequenceClassification"),a2t.forEach(t),Hpr=r(Mxe," (Funnel Transformer model)"),Mxe.forEach(t),Upr=i(Q),Y8=n(Q,"LI",{});var Exe=s(Y8);Z1e=n(Exe,"STRONG",{});var n2t=s(Z1e);Jpr=r(n2t,"gpt2"),n2t.forEach(t),Ypr=r(Exe," \u2014 "),dz=n(Exe,"A",{href:!0});var s2t=s(dz);Kpr=r(s2t,"TFGPT2ForSequenceClassification"),s2t.forEach(t),Zpr=r(Exe," (OpenAI GPT-2 model)"),Exe.forEach(t),e_r=i(Q),K8=n(Q,"LI",{});var Cxe=s(K8);ebe=n(Cxe,"STRONG",{});var l2t=s(ebe);o_r=r(l2t,"gptj"),l2t.forEach(t),r_r=r(Cxe," \u2014 "),cz=n(Cxe,"A",{href:!0});var i2t=s(cz);t_r=r(i2t,"TFGPTJForSequenceClassification"),i2t.forEach(t),a_r=r(Cxe," (GPT-J model)"),Cxe.forEach(t),n_r=i(Q),Z8=n(Q,"LI",{});var wxe=s(Z8);obe=n(wxe,"STRONG",{});var d2t=s(obe);s_r=r(d2t,"layoutlm"),d2t.forEach(t),l_r=r(wxe," \u2014 "),fz=n(wxe,"A",{href:!0});var c2t=s(fz);i_r=r(c2t,"TFLayoutLMForSequenceClassification"),c2t.forEach(t),d_r=r(wxe," (LayoutLM model)"),wxe.forEach(t),c_r=i(Q),e7=n(Q,"LI",{});var Axe=s(e7);rbe=n(Axe,"STRONG",{});var f2t=s(rbe);f_r=r(f2t,"longformer"),f2t.forEach(t),m_r=r(Axe," \u2014 "),mz=n(Axe,"A",{href:!0});var m2t=s(mz);g_r=r(m2t,"TFLongformerForSequenceClassification"),m2t.forEach(t),h_r=r(Axe," (Longformer model)"),Axe.forEach(t),p_r=i(Q),o7=n(Q,"LI",{});var yxe=s(o7);tbe=n(yxe,"STRONG",{});var g2t=s(tbe);__r=r(g2t,"mobilebert"),g2t.forEach(t),u_r=r(yxe," \u2014 "),gz=n(yxe,"A",{href:!0});var h2t=s(gz);b_r=r(h2t,"TFMobileBertForSequenceClassification"),h2t.forEach(t),v_r=r(yxe," (MobileBERT model)"),yxe.forEach(t),F_r=i(Q),r7=n(Q,"LI",{});var Lxe=s(r7);abe=n(Lxe,"STRONG",{});var p2t=s(abe);T_r=r(p2t,"mpnet"),p2t.forEach(t),M_r=r(Lxe," \u2014 "),hz=n(Lxe,"A",{href:!0});var _2t=s(hz);E_r=r(_2t,"TFMPNetForSequenceClassification"),_2t.forEach(t),C_r=r(Lxe," (MPNet model)"),Lxe.forEach(t),w_r=i(Q),t7=n(Q,"LI",{});var xxe=s(t7);nbe=n(xxe,"STRONG",{});var u2t=s(nbe);A_r=r(u2t,"openai-gpt"),u2t.forEach(t),y_r=r(xxe," \u2014 "),pz=n(xxe,"A",{href:!0});var b2t=s(pz);L_r=r(b2t,"TFOpenAIGPTForSequenceClassification"),b2t.forEach(t),x_r=r(xxe," (OpenAI GPT model)"),xxe.forEach(t),k_r=i(Q),a7=n(Q,"LI",{});var kxe=s(a7);sbe=n(kxe,"STRONG",{});var v2t=s(sbe);S_r=r(v2t,"rembert"),v2t.forEach(t),R_r=r(kxe," \u2014 "),_z=n(kxe,"A",{href:!0});var F2t=s(_z);B_r=r(F2t,"TFRemBertForSequenceClassification"),F2t.forEach(t),P_r=r(kxe," (RemBERT model)"),kxe.forEach(t),$_r=i(Q),n7=n(Q,"LI",{});var Sxe=s(n7);lbe=n(Sxe,"STRONG",{});var T2t=s(lbe);I_r=r(T2t,"roberta"),T2t.forEach(t),q_r=r(Sxe," \u2014 "),uz=n(Sxe,"A",{href:!0});var M2t=s(uz);N_r=r(M2t,"TFRobertaForSequenceClassification"),M2t.forEach(t),j_r=r(Sxe," (RoBERTa model)"),Sxe.forEach(t),D_r=i(Q),s7=n(Q,"LI",{});var Rxe=s(s7);ibe=n(Rxe,"STRONG",{});var E2t=s(ibe);G_r=r(E2t,"roformer"),E2t.forEach(t),O_r=r(Rxe," \u2014 "),bz=n(Rxe,"A",{href:!0});var C2t=s(bz);V_r=r(C2t,"TFRoFormerForSequenceClassification"),C2t.forEach(t),X_r=r(Rxe," (RoFormer model)"),Rxe.forEach(t),z_r=i(Q),l7=n(Q,"LI",{});var Bxe=s(l7);dbe=n(Bxe,"STRONG",{});var w2t=s(dbe);Q_r=r(w2t,"tapas"),w2t.forEach(t),W_r=r(Bxe," \u2014 "),vz=n(Bxe,"A",{href:!0});var A2t=s(vz);H_r=r(A2t,"TFTapasForSequenceClassification"),A2t.forEach(t),U_r=r(Bxe," (TAPAS model)"),Bxe.forEach(t),J_r=i(Q),i7=n(Q,"LI",{});var Pxe=s(i7);cbe=n(Pxe,"STRONG",{});var y2t=s(cbe);Y_r=r(y2t,"transfo-xl"),y2t.forEach(t),K_r=r(Pxe," \u2014 "),Fz=n(Pxe,"A",{href:!0});var L2t=s(Fz);Z_r=r(L2t,"TFTransfoXLForSequenceClassification"),L2t.forEach(t),eur=r(Pxe," (Transformer-XL model)"),Pxe.forEach(t),our=i(Q),d7=n(Q,"LI",{});var $xe=s(d7);fbe=n($xe,"STRONG",{});var x2t=s(fbe);rur=r(x2t,"xlm"),x2t.forEach(t),tur=r($xe," \u2014 "),Tz=n($xe,"A",{href:!0});var k2t=s(Tz);aur=r(k2t,"TFXLMForSequenceClassification"),k2t.forEach(t),nur=r($xe," (XLM model)"),$xe.forEach(t),sur=i(Q),c7=n(Q,"LI",{});var Ixe=s(c7);mbe=n(Ixe,"STRONG",{});var S2t=s(mbe);lur=r(S2t,"xlm-roberta"),S2t.forEach(t),iur=r(Ixe," \u2014 "),Mz=n(Ixe,"A",{href:!0});var R2t=s(Mz);dur=r(R2t,"TFXLMRobertaForSequenceClassification"),R2t.forEach(t),cur=r(Ixe," (XLM-RoBERTa model)"),Ixe.forEach(t),fur=i(Q),f7=n(Q,"LI",{});var qxe=s(f7);gbe=n(qxe,"STRONG",{});var B2t=s(gbe);mur=r(B2t,"xlnet"),B2t.forEach(t),gur=r(qxe," \u2014 "),Ez=n(qxe,"A",{href:!0});var P2t=s(Ez);hur=r(P2t,"TFXLNetForSequenceClassification"),P2t.forEach(t),pur=r(qxe," (XLNet model)"),qxe.forEach(t),Q.forEach(t),_ur=i(Ta),hbe=n(Ta,"P",{});var $2t=s(hbe);uur=r($2t,"Examples:"),$2t.forEach(t),bur=i(Ta),m(aA.$$.fragment,Ta),Ta.forEach(t),ei.forEach(t),rPe=i(c),Ic=n(c,"H2",{class:!0});var gIe=s(Ic);m7=n(gIe,"A",{id:!0,class:!0,href:!0});var I2t=s(m7);pbe=n(I2t,"SPAN",{});var q2t=s(pbe);m(nA.$$.fragment,q2t),q2t.forEach(t),I2t.forEach(t),vur=i(gIe),_be=n(gIe,"SPAN",{});var N2t=s(_be);Fur=r(N2t,"TFAutoModelForMultipleChoice"),N2t.forEach(t),gIe.forEach(t),tPe=i(c),Ar=n(c,"DIV",{class:!0});var ri=s(Ar);m(sA.$$.fragment,ri),Tur=i(ri),qc=n(ri,"P",{});var BJ=s(qc);Mur=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Cz=n(BJ,"A",{href:!0});var j2t=s(Cz);Eur=r(j2t,"from_pretrained()"),j2t.forEach(t),Cur=r(BJ," class method or the "),wz=n(BJ,"A",{href:!0});var D2t=s(wz);wur=r(D2t,"from_config()"),D2t.forEach(t),Aur=r(BJ,` class
method.`),BJ.forEach(t),yur=i(ri),lA=n(ri,"P",{});var hIe=s(lA);Lur=r(hIe,"This class cannot be instantiated directly using "),ube=n(hIe,"CODE",{});var G2t=s(ube);xur=r(G2t,"__init__()"),G2t.forEach(t),kur=r(hIe," (throws an error)."),hIe.forEach(t),Sur=i(ri),Ft=n(ri,"DIV",{class:!0});var ti=s(Ft);m(iA.$$.fragment,ti),Rur=i(ti),bbe=n(ti,"P",{});var O2t=s(bbe);Bur=r(O2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),O2t.forEach(t),Pur=i(ti),Nc=n(ti,"P",{});var PJ=s(Nc);$ur=r(PJ,`Note:
Loading a model from its configuration file does `),vbe=n(PJ,"STRONG",{});var V2t=s(vbe);Iur=r(V2t,"not"),V2t.forEach(t),qur=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=n(PJ,"A",{href:!0});var X2t=s(Az);Nur=r(X2t,"from_pretrained()"),X2t.forEach(t),jur=r(PJ," to load the model weights."),PJ.forEach(t),Dur=i(ti),Fbe=n(ti,"P",{});var z2t=s(Fbe);Gur=r(z2t,"Examples:"),z2t.forEach(t),Our=i(ti),m(dA.$$.fragment,ti),ti.forEach(t),Vur=i(ri),To=n(ri,"DIV",{class:!0});var Ma=s(To);m(cA.$$.fragment,Ma),Xur=i(Ma),Tbe=n(Ma,"P",{});var Q2t=s(Tbe);zur=r(Q2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Q2t.forEach(t),Qur=i(Ma),Cn=n(Ma,"P",{});var fE=s(Cn);Wur=r(fE,"The model class to instantiate is selected based on the "),Mbe=n(fE,"CODE",{});var W2t=s(Mbe);Hur=r(W2t,"model_type"),W2t.forEach(t),Uur=r(fE,` property of the config object (either
passed as an argument or loaded from `),Ebe=n(fE,"CODE",{});var H2t=s(Ebe);Jur=r(H2t,"pretrained_model_name_or_path"),H2t.forEach(t),Yur=r(fE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cbe=n(fE,"CODE",{});var U2t=s(Cbe);Kur=r(U2t,"pretrained_model_name_or_path"),U2t.forEach(t),Zur=r(fE,":"),fE.forEach(t),e1r=i(Ma),se=n(Ma,"UL",{});var ie=s(se);g7=n(ie,"LI",{});var Nxe=s(g7);wbe=n(Nxe,"STRONG",{});var J2t=s(wbe);o1r=r(J2t,"albert"),J2t.forEach(t),r1r=r(Nxe," \u2014 "),yz=n(Nxe,"A",{href:!0});var Y2t=s(yz);t1r=r(Y2t,"TFAlbertForMultipleChoice"),Y2t.forEach(t),a1r=r(Nxe," (ALBERT model)"),Nxe.forEach(t),n1r=i(ie),h7=n(ie,"LI",{});var jxe=s(h7);Abe=n(jxe,"STRONG",{});var K2t=s(Abe);s1r=r(K2t,"bert"),K2t.forEach(t),l1r=r(jxe," \u2014 "),Lz=n(jxe,"A",{href:!0});var Z2t=s(Lz);i1r=r(Z2t,"TFBertForMultipleChoice"),Z2t.forEach(t),d1r=r(jxe," (BERT model)"),jxe.forEach(t),c1r=i(ie),p7=n(ie,"LI",{});var Dxe=s(p7);ybe=n(Dxe,"STRONG",{});var e6t=s(ybe);f1r=r(e6t,"camembert"),e6t.forEach(t),m1r=r(Dxe," \u2014 "),xz=n(Dxe,"A",{href:!0});var o6t=s(xz);g1r=r(o6t,"TFCamembertForMultipleChoice"),o6t.forEach(t),h1r=r(Dxe," (CamemBERT model)"),Dxe.forEach(t),p1r=i(ie),_7=n(ie,"LI",{});var Gxe=s(_7);Lbe=n(Gxe,"STRONG",{});var r6t=s(Lbe);_1r=r(r6t,"convbert"),r6t.forEach(t),u1r=r(Gxe," \u2014 "),kz=n(Gxe,"A",{href:!0});var t6t=s(kz);b1r=r(t6t,"TFConvBertForMultipleChoice"),t6t.forEach(t),v1r=r(Gxe," (ConvBERT model)"),Gxe.forEach(t),F1r=i(ie),u7=n(ie,"LI",{});var Oxe=s(u7);xbe=n(Oxe,"STRONG",{});var a6t=s(xbe);T1r=r(a6t,"distilbert"),a6t.forEach(t),M1r=r(Oxe," \u2014 "),Sz=n(Oxe,"A",{href:!0});var n6t=s(Sz);E1r=r(n6t,"TFDistilBertForMultipleChoice"),n6t.forEach(t),C1r=r(Oxe," (DistilBERT model)"),Oxe.forEach(t),w1r=i(ie),b7=n(ie,"LI",{});var Vxe=s(b7);kbe=n(Vxe,"STRONG",{});var s6t=s(kbe);A1r=r(s6t,"electra"),s6t.forEach(t),y1r=r(Vxe," \u2014 "),Rz=n(Vxe,"A",{href:!0});var l6t=s(Rz);L1r=r(l6t,"TFElectraForMultipleChoice"),l6t.forEach(t),x1r=r(Vxe," (ELECTRA model)"),Vxe.forEach(t),k1r=i(ie),v7=n(ie,"LI",{});var Xxe=s(v7);Sbe=n(Xxe,"STRONG",{});var i6t=s(Sbe);S1r=r(i6t,"flaubert"),i6t.forEach(t),R1r=r(Xxe," \u2014 "),Bz=n(Xxe,"A",{href:!0});var d6t=s(Bz);B1r=r(d6t,"TFFlaubertForMultipleChoice"),d6t.forEach(t),P1r=r(Xxe," (FlauBERT model)"),Xxe.forEach(t),$1r=i(ie),F7=n(ie,"LI",{});var zxe=s(F7);Rbe=n(zxe,"STRONG",{});var c6t=s(Rbe);I1r=r(c6t,"funnel"),c6t.forEach(t),q1r=r(zxe," \u2014 "),Pz=n(zxe,"A",{href:!0});var f6t=s(Pz);N1r=r(f6t,"TFFunnelForMultipleChoice"),f6t.forEach(t),j1r=r(zxe," (Funnel Transformer model)"),zxe.forEach(t),D1r=i(ie),T7=n(ie,"LI",{});var Qxe=s(T7);Bbe=n(Qxe,"STRONG",{});var m6t=s(Bbe);G1r=r(m6t,"longformer"),m6t.forEach(t),O1r=r(Qxe," \u2014 "),$z=n(Qxe,"A",{href:!0});var g6t=s($z);V1r=r(g6t,"TFLongformerForMultipleChoice"),g6t.forEach(t),X1r=r(Qxe," (Longformer model)"),Qxe.forEach(t),z1r=i(ie),M7=n(ie,"LI",{});var Wxe=s(M7);Pbe=n(Wxe,"STRONG",{});var h6t=s(Pbe);Q1r=r(h6t,"mobilebert"),h6t.forEach(t),W1r=r(Wxe," \u2014 "),Iz=n(Wxe,"A",{href:!0});var p6t=s(Iz);H1r=r(p6t,"TFMobileBertForMultipleChoice"),p6t.forEach(t),U1r=r(Wxe," (MobileBERT model)"),Wxe.forEach(t),J1r=i(ie),E7=n(ie,"LI",{});var Hxe=s(E7);$be=n(Hxe,"STRONG",{});var _6t=s($be);Y1r=r(_6t,"mpnet"),_6t.forEach(t),K1r=r(Hxe," \u2014 "),qz=n(Hxe,"A",{href:!0});var u6t=s(qz);Z1r=r(u6t,"TFMPNetForMultipleChoice"),u6t.forEach(t),ebr=r(Hxe," (MPNet model)"),Hxe.forEach(t),obr=i(ie),C7=n(ie,"LI",{});var Uxe=s(C7);Ibe=n(Uxe,"STRONG",{});var b6t=s(Ibe);rbr=r(b6t,"rembert"),b6t.forEach(t),tbr=r(Uxe," \u2014 "),Nz=n(Uxe,"A",{href:!0});var v6t=s(Nz);abr=r(v6t,"TFRemBertForMultipleChoice"),v6t.forEach(t),nbr=r(Uxe," (RemBERT model)"),Uxe.forEach(t),sbr=i(ie),w7=n(ie,"LI",{});var Jxe=s(w7);qbe=n(Jxe,"STRONG",{});var F6t=s(qbe);lbr=r(F6t,"roberta"),F6t.forEach(t),ibr=r(Jxe," \u2014 "),jz=n(Jxe,"A",{href:!0});var T6t=s(jz);dbr=r(T6t,"TFRobertaForMultipleChoice"),T6t.forEach(t),cbr=r(Jxe," (RoBERTa model)"),Jxe.forEach(t),fbr=i(ie),A7=n(ie,"LI",{});var Yxe=s(A7);Nbe=n(Yxe,"STRONG",{});var M6t=s(Nbe);mbr=r(M6t,"roformer"),M6t.forEach(t),gbr=r(Yxe," \u2014 "),Dz=n(Yxe,"A",{href:!0});var E6t=s(Dz);hbr=r(E6t,"TFRoFormerForMultipleChoice"),E6t.forEach(t),pbr=r(Yxe," (RoFormer model)"),Yxe.forEach(t),_br=i(ie),y7=n(ie,"LI",{});var Kxe=s(y7);jbe=n(Kxe,"STRONG",{});var C6t=s(jbe);ubr=r(C6t,"xlm"),C6t.forEach(t),bbr=r(Kxe," \u2014 "),Gz=n(Kxe,"A",{href:!0});var w6t=s(Gz);vbr=r(w6t,"TFXLMForMultipleChoice"),w6t.forEach(t),Fbr=r(Kxe," (XLM model)"),Kxe.forEach(t),Tbr=i(ie),L7=n(ie,"LI",{});var Zxe=s(L7);Dbe=n(Zxe,"STRONG",{});var A6t=s(Dbe);Mbr=r(A6t,"xlm-roberta"),A6t.forEach(t),Ebr=r(Zxe," \u2014 "),Oz=n(Zxe,"A",{href:!0});var y6t=s(Oz);Cbr=r(y6t,"TFXLMRobertaForMultipleChoice"),y6t.forEach(t),wbr=r(Zxe," (XLM-RoBERTa model)"),Zxe.forEach(t),Abr=i(ie),x7=n(ie,"LI",{});var eke=s(x7);Gbe=n(eke,"STRONG",{});var L6t=s(Gbe);ybr=r(L6t,"xlnet"),L6t.forEach(t),Lbr=r(eke," \u2014 "),Vz=n(eke,"A",{href:!0});var x6t=s(Vz);xbr=r(x6t,"TFXLNetForMultipleChoice"),x6t.forEach(t),kbr=r(eke," (XLNet model)"),eke.forEach(t),ie.forEach(t),Sbr=i(Ma),Obe=n(Ma,"P",{});var k6t=s(Obe);Rbr=r(k6t,"Examples:"),k6t.forEach(t),Bbr=i(Ma),m(fA.$$.fragment,Ma),Ma.forEach(t),ri.forEach(t),aPe=i(c),jc=n(c,"H2",{class:!0});var pIe=s(jc);k7=n(pIe,"A",{id:!0,class:!0,href:!0});var S6t=s(k7);Vbe=n(S6t,"SPAN",{});var R6t=s(Vbe);m(mA.$$.fragment,R6t),R6t.forEach(t),S6t.forEach(t),Pbr=i(pIe),Xbe=n(pIe,"SPAN",{});var B6t=s(Xbe);$br=r(B6t,"TFAutoModelForTableQuestionAnswering"),B6t.forEach(t),pIe.forEach(t),nPe=i(c),yr=n(c,"DIV",{class:!0});var ai=s(yr);m(gA.$$.fragment,ai),Ibr=i(ai),Dc=n(ai,"P",{});var $J=s(Dc);qbr=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Xz=n($J,"A",{href:!0});var P6t=s(Xz);Nbr=r(P6t,"from_pretrained()"),P6t.forEach(t),jbr=r($J," class method or the "),zz=n($J,"A",{href:!0});var $6t=s(zz);Dbr=r($6t,"from_config()"),$6t.forEach(t),Gbr=r($J,` class
method.`),$J.forEach(t),Obr=i(ai),hA=n(ai,"P",{});var _Ie=s(hA);Vbr=r(_Ie,"This class cannot be instantiated directly using "),zbe=n(_Ie,"CODE",{});var I6t=s(zbe);Xbr=r(I6t,"__init__()"),I6t.forEach(t),zbr=r(_Ie," (throws an error)."),_Ie.forEach(t),Qbr=i(ai),Tt=n(ai,"DIV",{class:!0});var ni=s(Tt);m(pA.$$.fragment,ni),Wbr=i(ni),Qbe=n(ni,"P",{});var q6t=s(Qbe);Hbr=r(q6t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),q6t.forEach(t),Ubr=i(ni),Gc=n(ni,"P",{});var IJ=s(Gc);Jbr=r(IJ,`Note:
Loading a model from its configuration file does `),Wbe=n(IJ,"STRONG",{});var N6t=s(Wbe);Ybr=r(N6t,"not"),N6t.forEach(t),Kbr=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n(IJ,"A",{href:!0});var j6t=s(Qz);Zbr=r(j6t,"from_pretrained()"),j6t.forEach(t),e2r=r(IJ," to load the model weights."),IJ.forEach(t),o2r=i(ni),Hbe=n(ni,"P",{});var D6t=s(Hbe);r2r=r(D6t,"Examples:"),D6t.forEach(t),t2r=i(ni),m(_A.$$.fragment,ni),ni.forEach(t),a2r=i(ai),Mo=n(ai,"DIV",{class:!0});var Ea=s(Mo);m(uA.$$.fragment,Ea),n2r=i(Ea),Ube=n(Ea,"P",{});var G6t=s(Ube);s2r=r(G6t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),G6t.forEach(t),l2r=i(Ea),wn=n(Ea,"P",{});var mE=s(wn);i2r=r(mE,"The model class to instantiate is selected based on the "),Jbe=n(mE,"CODE",{});var O6t=s(Jbe);d2r=r(O6t,"model_type"),O6t.forEach(t),c2r=r(mE,` property of the config object (either
passed as an argument or loaded from `),Ybe=n(mE,"CODE",{});var V6t=s(Ybe);f2r=r(V6t,"pretrained_model_name_or_path"),V6t.forEach(t),m2r=r(mE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=n(mE,"CODE",{});var X6t=s(Kbe);g2r=r(X6t,"pretrained_model_name_or_path"),X6t.forEach(t),h2r=r(mE,":"),mE.forEach(t),p2r=i(Ea),Zbe=n(Ea,"UL",{});var z6t=s(Zbe);S7=n(z6t,"LI",{});var oke=s(S7);e2e=n(oke,"STRONG",{});var Q6t=s(e2e);_2r=r(Q6t,"tapas"),Q6t.forEach(t),u2r=r(oke," \u2014 "),Wz=n(oke,"A",{href:!0});var W6t=s(Wz);b2r=r(W6t,"TFTapasForQuestionAnswering"),W6t.forEach(t),v2r=r(oke," (TAPAS model)"),oke.forEach(t),z6t.forEach(t),F2r=i(Ea),o2e=n(Ea,"P",{});var H6t=s(o2e);T2r=r(H6t,"Examples:"),H6t.forEach(t),M2r=i(Ea),m(bA.$$.fragment,Ea),Ea.forEach(t),ai.forEach(t),sPe=i(c),Oc=n(c,"H2",{class:!0});var uIe=s(Oc);R7=n(uIe,"A",{id:!0,class:!0,href:!0});var U6t=s(R7);r2e=n(U6t,"SPAN",{});var J6t=s(r2e);m(vA.$$.fragment,J6t),J6t.forEach(t),U6t.forEach(t),E2r=i(uIe),t2e=n(uIe,"SPAN",{});var Y6t=s(t2e);C2r=r(Y6t,"TFAutoModelForTokenClassification"),Y6t.forEach(t),uIe.forEach(t),lPe=i(c),Lr=n(c,"DIV",{class:!0});var si=s(Lr);m(FA.$$.fragment,si),w2r=i(si),Vc=n(si,"P",{});var qJ=s(Vc);A2r=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Hz=n(qJ,"A",{href:!0});var K6t=s(Hz);y2r=r(K6t,"from_pretrained()"),K6t.forEach(t),L2r=r(qJ," class method or the "),Uz=n(qJ,"A",{href:!0});var Z6t=s(Uz);x2r=r(Z6t,"from_config()"),Z6t.forEach(t),k2r=r(qJ,` class
method.`),qJ.forEach(t),S2r=i(si),TA=n(si,"P",{});var bIe=s(TA);R2r=r(bIe,"This class cannot be instantiated directly using "),a2e=n(bIe,"CODE",{});var evt=s(a2e);B2r=r(evt,"__init__()"),evt.forEach(t),P2r=r(bIe," (throws an error)."),bIe.forEach(t),$2r=i(si),Mt=n(si,"DIV",{class:!0});var li=s(Mt);m(MA.$$.fragment,li),I2r=i(li),n2e=n(li,"P",{});var ovt=s(n2e);q2r=r(ovt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ovt.forEach(t),N2r=i(li),Xc=n(li,"P",{});var NJ=s(Xc);j2r=r(NJ,`Note:
Loading a model from its configuration file does `),s2e=n(NJ,"STRONG",{});var rvt=s(s2e);D2r=r(rvt,"not"),rvt.forEach(t),G2r=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(NJ,"A",{href:!0});var tvt=s(Jz);O2r=r(tvt,"from_pretrained()"),tvt.forEach(t),V2r=r(NJ," to load the model weights."),NJ.forEach(t),X2r=i(li),l2e=n(li,"P",{});var avt=s(l2e);z2r=r(avt,"Examples:"),avt.forEach(t),Q2r=i(li),m(EA.$$.fragment,li),li.forEach(t),W2r=i(si),Eo=n(si,"DIV",{class:!0});var Ca=s(Eo);m(CA.$$.fragment,Ca),H2r=i(Ca),i2e=n(Ca,"P",{});var nvt=s(i2e);U2r=r(nvt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nvt.forEach(t),J2r=i(Ca),An=n(Ca,"P",{});var gE=s(An);Y2r=r(gE,"The model class to instantiate is selected based on the "),d2e=n(gE,"CODE",{});var svt=s(d2e);K2r=r(svt,"model_type"),svt.forEach(t),Z2r=r(gE,` property of the config object (either
passed as an argument or loaded from `),c2e=n(gE,"CODE",{});var lvt=s(c2e);e6r=r(lvt,"pretrained_model_name_or_path"),lvt.forEach(t),o6r=r(gE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f2e=n(gE,"CODE",{});var ivt=s(f2e);r6r=r(ivt,"pretrained_model_name_or_path"),ivt.forEach(t),t6r=r(gE,":"),gE.forEach(t),a6r=i(Ca),Y=n(Ca,"UL",{});var re=s(Y);B7=n(re,"LI",{});var rke=s(B7);m2e=n(rke,"STRONG",{});var dvt=s(m2e);n6r=r(dvt,"albert"),dvt.forEach(t),s6r=r(rke," \u2014 "),Yz=n(rke,"A",{href:!0});var cvt=s(Yz);l6r=r(cvt,"TFAlbertForTokenClassification"),cvt.forEach(t),i6r=r(rke," (ALBERT model)"),rke.forEach(t),d6r=i(re),P7=n(re,"LI",{});var tke=s(P7);g2e=n(tke,"STRONG",{});var fvt=s(g2e);c6r=r(fvt,"bert"),fvt.forEach(t),f6r=r(tke," \u2014 "),Kz=n(tke,"A",{href:!0});var mvt=s(Kz);m6r=r(mvt,"TFBertForTokenClassification"),mvt.forEach(t),g6r=r(tke," (BERT model)"),tke.forEach(t),h6r=i(re),$7=n(re,"LI",{});var ake=s($7);h2e=n(ake,"STRONG",{});var gvt=s(h2e);p6r=r(gvt,"camembert"),gvt.forEach(t),_6r=r(ake," \u2014 "),Zz=n(ake,"A",{href:!0});var hvt=s(Zz);u6r=r(hvt,"TFCamembertForTokenClassification"),hvt.forEach(t),b6r=r(ake," (CamemBERT model)"),ake.forEach(t),v6r=i(re),I7=n(re,"LI",{});var nke=s(I7);p2e=n(nke,"STRONG",{});var pvt=s(p2e);F6r=r(pvt,"convbert"),pvt.forEach(t),T6r=r(nke," \u2014 "),eQ=n(nke,"A",{href:!0});var _vt=s(eQ);M6r=r(_vt,"TFConvBertForTokenClassification"),_vt.forEach(t),E6r=r(nke," (ConvBERT model)"),nke.forEach(t),C6r=i(re),q7=n(re,"LI",{});var ske=s(q7);_2e=n(ske,"STRONG",{});var uvt=s(_2e);w6r=r(uvt,"deberta"),uvt.forEach(t),A6r=r(ske," \u2014 "),oQ=n(ske,"A",{href:!0});var bvt=s(oQ);y6r=r(bvt,"TFDebertaForTokenClassification"),bvt.forEach(t),L6r=r(ske," (DeBERTa model)"),ske.forEach(t),x6r=i(re),N7=n(re,"LI",{});var lke=s(N7);u2e=n(lke,"STRONG",{});var vvt=s(u2e);k6r=r(vvt,"deberta-v2"),vvt.forEach(t),S6r=r(lke," \u2014 "),rQ=n(lke,"A",{href:!0});var Fvt=s(rQ);R6r=r(Fvt,"TFDebertaV2ForTokenClassification"),Fvt.forEach(t),B6r=r(lke," (DeBERTa-v2 model)"),lke.forEach(t),P6r=i(re),j7=n(re,"LI",{});var ike=s(j7);b2e=n(ike,"STRONG",{});var Tvt=s(b2e);$6r=r(Tvt,"distilbert"),Tvt.forEach(t),I6r=r(ike," \u2014 "),tQ=n(ike,"A",{href:!0});var Mvt=s(tQ);q6r=r(Mvt,"TFDistilBertForTokenClassification"),Mvt.forEach(t),N6r=r(ike," (DistilBERT model)"),ike.forEach(t),j6r=i(re),D7=n(re,"LI",{});var dke=s(D7);v2e=n(dke,"STRONG",{});var Evt=s(v2e);D6r=r(Evt,"electra"),Evt.forEach(t),G6r=r(dke," \u2014 "),aQ=n(dke,"A",{href:!0});var Cvt=s(aQ);O6r=r(Cvt,"TFElectraForTokenClassification"),Cvt.forEach(t),V6r=r(dke," (ELECTRA model)"),dke.forEach(t),X6r=i(re),G7=n(re,"LI",{});var cke=s(G7);F2e=n(cke,"STRONG",{});var wvt=s(F2e);z6r=r(wvt,"flaubert"),wvt.forEach(t),Q6r=r(cke," \u2014 "),nQ=n(cke,"A",{href:!0});var Avt=s(nQ);W6r=r(Avt,"TFFlaubertForTokenClassification"),Avt.forEach(t),H6r=r(cke," (FlauBERT model)"),cke.forEach(t),U6r=i(re),O7=n(re,"LI",{});var fke=s(O7);T2e=n(fke,"STRONG",{});var yvt=s(T2e);J6r=r(yvt,"funnel"),yvt.forEach(t),Y6r=r(fke," \u2014 "),sQ=n(fke,"A",{href:!0});var Lvt=s(sQ);K6r=r(Lvt,"TFFunnelForTokenClassification"),Lvt.forEach(t),Z6r=r(fke," (Funnel Transformer model)"),fke.forEach(t),evr=i(re),V7=n(re,"LI",{});var mke=s(V7);M2e=n(mke,"STRONG",{});var xvt=s(M2e);ovr=r(xvt,"layoutlm"),xvt.forEach(t),rvr=r(mke," \u2014 "),lQ=n(mke,"A",{href:!0});var kvt=s(lQ);tvr=r(kvt,"TFLayoutLMForTokenClassification"),kvt.forEach(t),avr=r(mke," (LayoutLM model)"),mke.forEach(t),nvr=i(re),X7=n(re,"LI",{});var gke=s(X7);E2e=n(gke,"STRONG",{});var Svt=s(E2e);svr=r(Svt,"longformer"),Svt.forEach(t),lvr=r(gke," \u2014 "),iQ=n(gke,"A",{href:!0});var Rvt=s(iQ);ivr=r(Rvt,"TFLongformerForTokenClassification"),Rvt.forEach(t),dvr=r(gke," (Longformer model)"),gke.forEach(t),cvr=i(re),z7=n(re,"LI",{});var hke=s(z7);C2e=n(hke,"STRONG",{});var Bvt=s(C2e);fvr=r(Bvt,"mobilebert"),Bvt.forEach(t),mvr=r(hke," \u2014 "),dQ=n(hke,"A",{href:!0});var Pvt=s(dQ);gvr=r(Pvt,"TFMobileBertForTokenClassification"),Pvt.forEach(t),hvr=r(hke," (MobileBERT model)"),hke.forEach(t),pvr=i(re),Q7=n(re,"LI",{});var pke=s(Q7);w2e=n(pke,"STRONG",{});var $vt=s(w2e);_vr=r($vt,"mpnet"),$vt.forEach(t),uvr=r(pke," \u2014 "),cQ=n(pke,"A",{href:!0});var Ivt=s(cQ);bvr=r(Ivt,"TFMPNetForTokenClassification"),Ivt.forEach(t),vvr=r(pke," (MPNet model)"),pke.forEach(t),Fvr=i(re),W7=n(re,"LI",{});var _ke=s(W7);A2e=n(_ke,"STRONG",{});var qvt=s(A2e);Tvr=r(qvt,"rembert"),qvt.forEach(t),Mvr=r(_ke," \u2014 "),fQ=n(_ke,"A",{href:!0});var Nvt=s(fQ);Evr=r(Nvt,"TFRemBertForTokenClassification"),Nvt.forEach(t),Cvr=r(_ke," (RemBERT model)"),_ke.forEach(t),wvr=i(re),H7=n(re,"LI",{});var uke=s(H7);y2e=n(uke,"STRONG",{});var jvt=s(y2e);Avr=r(jvt,"roberta"),jvt.forEach(t),yvr=r(uke," \u2014 "),mQ=n(uke,"A",{href:!0});var Dvt=s(mQ);Lvr=r(Dvt,"TFRobertaForTokenClassification"),Dvt.forEach(t),xvr=r(uke," (RoBERTa model)"),uke.forEach(t),kvr=i(re),U7=n(re,"LI",{});var bke=s(U7);L2e=n(bke,"STRONG",{});var Gvt=s(L2e);Svr=r(Gvt,"roformer"),Gvt.forEach(t),Rvr=r(bke," \u2014 "),gQ=n(bke,"A",{href:!0});var Ovt=s(gQ);Bvr=r(Ovt,"TFRoFormerForTokenClassification"),Ovt.forEach(t),Pvr=r(bke," (RoFormer model)"),bke.forEach(t),$vr=i(re),J7=n(re,"LI",{});var vke=s(J7);x2e=n(vke,"STRONG",{});var Vvt=s(x2e);Ivr=r(Vvt,"xlm"),Vvt.forEach(t),qvr=r(vke," \u2014 "),hQ=n(vke,"A",{href:!0});var Xvt=s(hQ);Nvr=r(Xvt,"TFXLMForTokenClassification"),Xvt.forEach(t),jvr=r(vke," (XLM model)"),vke.forEach(t),Dvr=i(re),Y7=n(re,"LI",{});var Fke=s(Y7);k2e=n(Fke,"STRONG",{});var zvt=s(k2e);Gvr=r(zvt,"xlm-roberta"),zvt.forEach(t),Ovr=r(Fke," \u2014 "),pQ=n(Fke,"A",{href:!0});var Qvt=s(pQ);Vvr=r(Qvt,"TFXLMRobertaForTokenClassification"),Qvt.forEach(t),Xvr=r(Fke," (XLM-RoBERTa model)"),Fke.forEach(t),zvr=i(re),K7=n(re,"LI",{});var Tke=s(K7);S2e=n(Tke,"STRONG",{});var Wvt=s(S2e);Qvr=r(Wvt,"xlnet"),Wvt.forEach(t),Wvr=r(Tke," \u2014 "),_Q=n(Tke,"A",{href:!0});var Hvt=s(_Q);Hvr=r(Hvt,"TFXLNetForTokenClassification"),Hvt.forEach(t),Uvr=r(Tke," (XLNet model)"),Tke.forEach(t),re.forEach(t),Jvr=i(Ca),R2e=n(Ca,"P",{});var Uvt=s(R2e);Yvr=r(Uvt,"Examples:"),Uvt.forEach(t),Kvr=i(Ca),m(wA.$$.fragment,Ca),Ca.forEach(t),si.forEach(t),iPe=i(c),zc=n(c,"H2",{class:!0});var vIe=s(zc);Z7=n(vIe,"A",{id:!0,class:!0,href:!0});var Jvt=s(Z7);B2e=n(Jvt,"SPAN",{});var Yvt=s(B2e);m(AA.$$.fragment,Yvt),Yvt.forEach(t),Jvt.forEach(t),Zvr=i(vIe),P2e=n(vIe,"SPAN",{});var Kvt=s(P2e);eFr=r(Kvt,"TFAutoModelForQuestionAnswering"),Kvt.forEach(t),vIe.forEach(t),dPe=i(c),xr=n(c,"DIV",{class:!0});var ii=s(xr);m(yA.$$.fragment,ii),oFr=i(ii),Qc=n(ii,"P",{});var jJ=s(Qc);rFr=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uQ=n(jJ,"A",{href:!0});var Zvt=s(uQ);tFr=r(Zvt,"from_pretrained()"),Zvt.forEach(t),aFr=r(jJ," class method or the "),bQ=n(jJ,"A",{href:!0});var eFt=s(bQ);nFr=r(eFt,"from_config()"),eFt.forEach(t),sFr=r(jJ,` class
method.`),jJ.forEach(t),lFr=i(ii),LA=n(ii,"P",{});var FIe=s(LA);iFr=r(FIe,"This class cannot be instantiated directly using "),$2e=n(FIe,"CODE",{});var oFt=s($2e);dFr=r(oFt,"__init__()"),oFt.forEach(t),cFr=r(FIe," (throws an error)."),FIe.forEach(t),fFr=i(ii),Et=n(ii,"DIV",{class:!0});var di=s(Et);m(xA.$$.fragment,di),mFr=i(di),I2e=n(di,"P",{});var rFt=s(I2e);gFr=r(rFt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rFt.forEach(t),hFr=i(di),Wc=n(di,"P",{});var DJ=s(Wc);pFr=r(DJ,`Note:
Loading a model from its configuration file does `),q2e=n(DJ,"STRONG",{});var tFt=s(q2e);_Fr=r(tFt,"not"),tFt.forEach(t),uFr=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=n(DJ,"A",{href:!0});var aFt=s(vQ);bFr=r(aFt,"from_pretrained()"),aFt.forEach(t),vFr=r(DJ," to load the model weights."),DJ.forEach(t),FFr=i(di),N2e=n(di,"P",{});var nFt=s(N2e);TFr=r(nFt,"Examples:"),nFt.forEach(t),MFr=i(di),m(kA.$$.fragment,di),di.forEach(t),EFr=i(ii),Co=n(ii,"DIV",{class:!0});var wa=s(Co);m(SA.$$.fragment,wa),CFr=i(wa),j2e=n(wa,"P",{});var sFt=s(j2e);wFr=r(sFt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),sFt.forEach(t),AFr=i(wa),yn=n(wa,"P",{});var hE=s(yn);yFr=r(hE,"The model class to instantiate is selected based on the "),D2e=n(hE,"CODE",{});var lFt=s(D2e);LFr=r(lFt,"model_type"),lFt.forEach(t),xFr=r(hE,` property of the config object (either
passed as an argument or loaded from `),G2e=n(hE,"CODE",{});var iFt=s(G2e);kFr=r(iFt,"pretrained_model_name_or_path"),iFt.forEach(t),SFr=r(hE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=n(hE,"CODE",{});var dFt=s(O2e);RFr=r(dFt,"pretrained_model_name_or_path"),dFt.forEach(t),BFr=r(hE,":"),hE.forEach(t),PFr=i(wa),K=n(wa,"UL",{});var te=s(K);e9=n(te,"LI",{});var Mke=s(e9);V2e=n(Mke,"STRONG",{});var cFt=s(V2e);$Fr=r(cFt,"albert"),cFt.forEach(t),IFr=r(Mke," \u2014 "),FQ=n(Mke,"A",{href:!0});var fFt=s(FQ);qFr=r(fFt,"TFAlbertForQuestionAnswering"),fFt.forEach(t),NFr=r(Mke," (ALBERT model)"),Mke.forEach(t),jFr=i(te),o9=n(te,"LI",{});var Eke=s(o9);X2e=n(Eke,"STRONG",{});var mFt=s(X2e);DFr=r(mFt,"bert"),mFt.forEach(t),GFr=r(Eke," \u2014 "),TQ=n(Eke,"A",{href:!0});var gFt=s(TQ);OFr=r(gFt,"TFBertForQuestionAnswering"),gFt.forEach(t),VFr=r(Eke," (BERT model)"),Eke.forEach(t),XFr=i(te),r9=n(te,"LI",{});var Cke=s(r9);z2e=n(Cke,"STRONG",{});var hFt=s(z2e);zFr=r(hFt,"camembert"),hFt.forEach(t),QFr=r(Cke," \u2014 "),MQ=n(Cke,"A",{href:!0});var pFt=s(MQ);WFr=r(pFt,"TFCamembertForQuestionAnswering"),pFt.forEach(t),HFr=r(Cke," (CamemBERT model)"),Cke.forEach(t),UFr=i(te),t9=n(te,"LI",{});var wke=s(t9);Q2e=n(wke,"STRONG",{});var _Ft=s(Q2e);JFr=r(_Ft,"convbert"),_Ft.forEach(t),YFr=r(wke," \u2014 "),EQ=n(wke,"A",{href:!0});var uFt=s(EQ);KFr=r(uFt,"TFConvBertForQuestionAnswering"),uFt.forEach(t),ZFr=r(wke," (ConvBERT model)"),wke.forEach(t),eTr=i(te),a9=n(te,"LI",{});var Ake=s(a9);W2e=n(Ake,"STRONG",{});var bFt=s(W2e);oTr=r(bFt,"deberta"),bFt.forEach(t),rTr=r(Ake," \u2014 "),CQ=n(Ake,"A",{href:!0});var vFt=s(CQ);tTr=r(vFt,"TFDebertaForQuestionAnswering"),vFt.forEach(t),aTr=r(Ake," (DeBERTa model)"),Ake.forEach(t),nTr=i(te),n9=n(te,"LI",{});var yke=s(n9);H2e=n(yke,"STRONG",{});var FFt=s(H2e);sTr=r(FFt,"deberta-v2"),FFt.forEach(t),lTr=r(yke," \u2014 "),wQ=n(yke,"A",{href:!0});var TFt=s(wQ);iTr=r(TFt,"TFDebertaV2ForQuestionAnswering"),TFt.forEach(t),dTr=r(yke," (DeBERTa-v2 model)"),yke.forEach(t),cTr=i(te),s9=n(te,"LI",{});var Lke=s(s9);U2e=n(Lke,"STRONG",{});var MFt=s(U2e);fTr=r(MFt,"distilbert"),MFt.forEach(t),mTr=r(Lke," \u2014 "),AQ=n(Lke,"A",{href:!0});var EFt=s(AQ);gTr=r(EFt,"TFDistilBertForQuestionAnswering"),EFt.forEach(t),hTr=r(Lke," (DistilBERT model)"),Lke.forEach(t),pTr=i(te),l9=n(te,"LI",{});var xke=s(l9);J2e=n(xke,"STRONG",{});var CFt=s(J2e);_Tr=r(CFt,"electra"),CFt.forEach(t),uTr=r(xke," \u2014 "),yQ=n(xke,"A",{href:!0});var wFt=s(yQ);bTr=r(wFt,"TFElectraForQuestionAnswering"),wFt.forEach(t),vTr=r(xke," (ELECTRA model)"),xke.forEach(t),FTr=i(te),i9=n(te,"LI",{});var kke=s(i9);Y2e=n(kke,"STRONG",{});var AFt=s(Y2e);TTr=r(AFt,"flaubert"),AFt.forEach(t),MTr=r(kke," \u2014 "),LQ=n(kke,"A",{href:!0});var yFt=s(LQ);ETr=r(yFt,"TFFlaubertForQuestionAnsweringSimple"),yFt.forEach(t),CTr=r(kke," (FlauBERT model)"),kke.forEach(t),wTr=i(te),d9=n(te,"LI",{});var Ske=s(d9);K2e=n(Ske,"STRONG",{});var LFt=s(K2e);ATr=r(LFt,"funnel"),LFt.forEach(t),yTr=r(Ske," \u2014 "),xQ=n(Ske,"A",{href:!0});var xFt=s(xQ);LTr=r(xFt,"TFFunnelForQuestionAnswering"),xFt.forEach(t),xTr=r(Ske," (Funnel Transformer model)"),Ske.forEach(t),kTr=i(te),c9=n(te,"LI",{});var Rke=s(c9);Z2e=n(Rke,"STRONG",{});var kFt=s(Z2e);STr=r(kFt,"gptj"),kFt.forEach(t),RTr=r(Rke," \u2014 "),kQ=n(Rke,"A",{href:!0});var SFt=s(kQ);BTr=r(SFt,"TFGPTJForQuestionAnswering"),SFt.forEach(t),PTr=r(Rke," (GPT-J model)"),Rke.forEach(t),$Tr=i(te),f9=n(te,"LI",{});var Bke=s(f9);e6e=n(Bke,"STRONG",{});var RFt=s(e6e);ITr=r(RFt,"longformer"),RFt.forEach(t),qTr=r(Bke," \u2014 "),SQ=n(Bke,"A",{href:!0});var BFt=s(SQ);NTr=r(BFt,"TFLongformerForQuestionAnswering"),BFt.forEach(t),jTr=r(Bke," (Longformer model)"),Bke.forEach(t),DTr=i(te),m9=n(te,"LI",{});var Pke=s(m9);o6e=n(Pke,"STRONG",{});var PFt=s(o6e);GTr=r(PFt,"mobilebert"),PFt.forEach(t),OTr=r(Pke," \u2014 "),RQ=n(Pke,"A",{href:!0});var $Ft=s(RQ);VTr=r($Ft,"TFMobileBertForQuestionAnswering"),$Ft.forEach(t),XTr=r(Pke," (MobileBERT model)"),Pke.forEach(t),zTr=i(te),g9=n(te,"LI",{});var $ke=s(g9);r6e=n($ke,"STRONG",{});var IFt=s(r6e);QTr=r(IFt,"mpnet"),IFt.forEach(t),WTr=r($ke," \u2014 "),BQ=n($ke,"A",{href:!0});var qFt=s(BQ);HTr=r(qFt,"TFMPNetForQuestionAnswering"),qFt.forEach(t),UTr=r($ke," (MPNet model)"),$ke.forEach(t),JTr=i(te),h9=n(te,"LI",{});var Ike=s(h9);t6e=n(Ike,"STRONG",{});var NFt=s(t6e);YTr=r(NFt,"rembert"),NFt.forEach(t),KTr=r(Ike," \u2014 "),PQ=n(Ike,"A",{href:!0});var jFt=s(PQ);ZTr=r(jFt,"TFRemBertForQuestionAnswering"),jFt.forEach(t),e8r=r(Ike," (RemBERT model)"),Ike.forEach(t),o8r=i(te),p9=n(te,"LI",{});var qke=s(p9);a6e=n(qke,"STRONG",{});var DFt=s(a6e);r8r=r(DFt,"roberta"),DFt.forEach(t),t8r=r(qke," \u2014 "),$Q=n(qke,"A",{href:!0});var GFt=s($Q);a8r=r(GFt,"TFRobertaForQuestionAnswering"),GFt.forEach(t),n8r=r(qke," (RoBERTa model)"),qke.forEach(t),s8r=i(te),_9=n(te,"LI",{});var Nke=s(_9);n6e=n(Nke,"STRONG",{});var OFt=s(n6e);l8r=r(OFt,"roformer"),OFt.forEach(t),i8r=r(Nke," \u2014 "),IQ=n(Nke,"A",{href:!0});var VFt=s(IQ);d8r=r(VFt,"TFRoFormerForQuestionAnswering"),VFt.forEach(t),c8r=r(Nke," (RoFormer model)"),Nke.forEach(t),f8r=i(te),u9=n(te,"LI",{});var jke=s(u9);s6e=n(jke,"STRONG",{});var XFt=s(s6e);m8r=r(XFt,"xlm"),XFt.forEach(t),g8r=r(jke," \u2014 "),qQ=n(jke,"A",{href:!0});var zFt=s(qQ);h8r=r(zFt,"TFXLMForQuestionAnsweringSimple"),zFt.forEach(t),p8r=r(jke," (XLM model)"),jke.forEach(t),_8r=i(te),b9=n(te,"LI",{});var Dke=s(b9);l6e=n(Dke,"STRONG",{});var QFt=s(l6e);u8r=r(QFt,"xlm-roberta"),QFt.forEach(t),b8r=r(Dke," \u2014 "),NQ=n(Dke,"A",{href:!0});var WFt=s(NQ);v8r=r(WFt,"TFXLMRobertaForQuestionAnswering"),WFt.forEach(t),F8r=r(Dke," (XLM-RoBERTa model)"),Dke.forEach(t),T8r=i(te),v9=n(te,"LI",{});var Gke=s(v9);i6e=n(Gke,"STRONG",{});var HFt=s(i6e);M8r=r(HFt,"xlnet"),HFt.forEach(t),E8r=r(Gke," \u2014 "),jQ=n(Gke,"A",{href:!0});var UFt=s(jQ);C8r=r(UFt,"TFXLNetForQuestionAnsweringSimple"),UFt.forEach(t),w8r=r(Gke," (XLNet model)"),Gke.forEach(t),te.forEach(t),A8r=i(wa),d6e=n(wa,"P",{});var JFt=s(d6e);y8r=r(JFt,"Examples:"),JFt.forEach(t),L8r=i(wa),m(RA.$$.fragment,wa),wa.forEach(t),ii.forEach(t),cPe=i(c),Hc=n(c,"H2",{class:!0});var TIe=s(Hc);F9=n(TIe,"A",{id:!0,class:!0,href:!0});var YFt=s(F9);c6e=n(YFt,"SPAN",{});var KFt=s(c6e);m(BA.$$.fragment,KFt),KFt.forEach(t),YFt.forEach(t),x8r=i(TIe),f6e=n(TIe,"SPAN",{});var ZFt=s(f6e);k8r=r(ZFt,"TFAutoModelForVision2Seq"),ZFt.forEach(t),TIe.forEach(t),fPe=i(c),kr=n(c,"DIV",{class:!0});var ci=s(kr);m(PA.$$.fragment,ci),S8r=i(ci),Uc=n(ci,"P",{});var GJ=s(Uc);R8r=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DQ=n(GJ,"A",{href:!0});var eTt=s(DQ);B8r=r(eTt,"from_pretrained()"),eTt.forEach(t),P8r=r(GJ," class method or the "),GQ=n(GJ,"A",{href:!0});var oTt=s(GQ);$8r=r(oTt,"from_config()"),oTt.forEach(t),I8r=r(GJ,` class
method.`),GJ.forEach(t),q8r=i(ci),$A=n(ci,"P",{});var MIe=s($A);N8r=r(MIe,"This class cannot be instantiated directly using "),m6e=n(MIe,"CODE",{});var rTt=s(m6e);j8r=r(rTt,"__init__()"),rTt.forEach(t),D8r=r(MIe," (throws an error)."),MIe.forEach(t),G8r=i(ci),Ct=n(ci,"DIV",{class:!0});var fi=s(Ct);m(IA.$$.fragment,fi),O8r=i(fi),g6e=n(fi,"P",{});var tTt=s(g6e);V8r=r(tTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tTt.forEach(t),X8r=i(fi),Jc=n(fi,"P",{});var OJ=s(Jc);z8r=r(OJ,`Note:
Loading a model from its configuration file does `),h6e=n(OJ,"STRONG",{});var aTt=s(h6e);Q8r=r(aTt,"not"),aTt.forEach(t),W8r=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=n(OJ,"A",{href:!0});var nTt=s(OQ);H8r=r(nTt,"from_pretrained()"),nTt.forEach(t),U8r=r(OJ," to load the model weights."),OJ.forEach(t),J8r=i(fi),p6e=n(fi,"P",{});var sTt=s(p6e);Y8r=r(sTt,"Examples:"),sTt.forEach(t),K8r=i(fi),m(qA.$$.fragment,fi),fi.forEach(t),Z8r=i(ci),wo=n(ci,"DIV",{class:!0});var Aa=s(wo);m(NA.$$.fragment,Aa),e7r=i(Aa),_6e=n(Aa,"P",{});var lTt=s(_6e);o7r=r(lTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lTt.forEach(t),r7r=i(Aa),Ln=n(Aa,"P",{});var pE=s(Ln);t7r=r(pE,"The model class to instantiate is selected based on the "),u6e=n(pE,"CODE",{});var iTt=s(u6e);a7r=r(iTt,"model_type"),iTt.forEach(t),n7r=r(pE,` property of the config object (either
passed as an argument or loaded from `),b6e=n(pE,"CODE",{});var dTt=s(b6e);s7r=r(dTt,"pretrained_model_name_or_path"),dTt.forEach(t),l7r=r(pE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v6e=n(pE,"CODE",{});var cTt=s(v6e);i7r=r(cTt,"pretrained_model_name_or_path"),cTt.forEach(t),d7r=r(pE,":"),pE.forEach(t),c7r=i(Aa),F6e=n(Aa,"UL",{});var fTt=s(F6e);T9=n(fTt,"LI",{});var Oke=s(T9);T6e=n(Oke,"STRONG",{});var mTt=s(T6e);f7r=r(mTt,"vision-encoder-decoder"),mTt.forEach(t),m7r=r(Oke," \u2014 "),VQ=n(Oke,"A",{href:!0});var gTt=s(VQ);g7r=r(gTt,"TFVisionEncoderDecoderModel"),gTt.forEach(t),h7r=r(Oke," (Vision Encoder decoder model)"),Oke.forEach(t),fTt.forEach(t),p7r=i(Aa),M6e=n(Aa,"P",{});var hTt=s(M6e);_7r=r(hTt,"Examples:"),hTt.forEach(t),u7r=i(Aa),m(jA.$$.fragment,Aa),Aa.forEach(t),ci.forEach(t),mPe=i(c),Yc=n(c,"H2",{class:!0});var EIe=s(Yc);M9=n(EIe,"A",{id:!0,class:!0,href:!0});var pTt=s(M9);E6e=n(pTt,"SPAN",{});var _Tt=s(E6e);m(DA.$$.fragment,_Tt),_Tt.forEach(t),pTt.forEach(t),b7r=i(EIe),C6e=n(EIe,"SPAN",{});var uTt=s(C6e);v7r=r(uTt,"TFAutoModelForSpeechSeq2Seq"),uTt.forEach(t),EIe.forEach(t),gPe=i(c),Sr=n(c,"DIV",{class:!0});var mi=s(Sr);m(GA.$$.fragment,mi),F7r=i(mi),Kc=n(mi,"P",{});var VJ=s(Kc);T7r=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XQ=n(VJ,"A",{href:!0});var bTt=s(XQ);M7r=r(bTt,"from_pretrained()"),bTt.forEach(t),E7r=r(VJ," class method or the "),zQ=n(VJ,"A",{href:!0});var vTt=s(zQ);C7r=r(vTt,"from_config()"),vTt.forEach(t),w7r=r(VJ,` class
method.`),VJ.forEach(t),A7r=i(mi),OA=n(mi,"P",{});var CIe=s(OA);y7r=r(CIe,"This class cannot be instantiated directly using "),w6e=n(CIe,"CODE",{});var FTt=s(w6e);L7r=r(FTt,"__init__()"),FTt.forEach(t),x7r=r(CIe," (throws an error)."),CIe.forEach(t),k7r=i(mi),wt=n(mi,"DIV",{class:!0});var gi=s(wt);m(VA.$$.fragment,gi),S7r=i(gi),A6e=n(gi,"P",{});var TTt=s(A6e);R7r=r(TTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),TTt.forEach(t),B7r=i(gi),Zc=n(gi,"P",{});var XJ=s(Zc);P7r=r(XJ,`Note:
Loading a model from its configuration file does `),y6e=n(XJ,"STRONG",{});var MTt=s(y6e);$7r=r(MTt,"not"),MTt.forEach(t),I7r=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n(XJ,"A",{href:!0});var ETt=s(QQ);q7r=r(ETt,"from_pretrained()"),ETt.forEach(t),N7r=r(XJ," to load the model weights."),XJ.forEach(t),j7r=i(gi),L6e=n(gi,"P",{});var CTt=s(L6e);D7r=r(CTt,"Examples:"),CTt.forEach(t),G7r=i(gi),m(XA.$$.fragment,gi),gi.forEach(t),O7r=i(mi),Ao=n(mi,"DIV",{class:!0});var ya=s(Ao);m(zA.$$.fragment,ya),V7r=i(ya),x6e=n(ya,"P",{});var wTt=s(x6e);X7r=r(wTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wTt.forEach(t),z7r=i(ya),xn=n(ya,"P",{});var _E=s(xn);Q7r=r(_E,"The model class to instantiate is selected based on the "),k6e=n(_E,"CODE",{});var ATt=s(k6e);W7r=r(ATt,"model_type"),ATt.forEach(t),H7r=r(_E,` property of the config object (either
passed as an argument or loaded from `),S6e=n(_E,"CODE",{});var yTt=s(S6e);U7r=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),J7r=r(_E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R6e=n(_E,"CODE",{});var LTt=s(R6e);Y7r=r(LTt,"pretrained_model_name_or_path"),LTt.forEach(t),K7r=r(_E,":"),_E.forEach(t),Z7r=i(ya),B6e=n(ya,"UL",{});var xTt=s(B6e);E9=n(xTt,"LI",{});var Vke=s(E9);P6e=n(Vke,"STRONG",{});var kTt=s(P6e);e9r=r(kTt,"speech_to_text"),kTt.forEach(t),o9r=r(Vke," \u2014 "),WQ=n(Vke,"A",{href:!0});var STt=s(WQ);r9r=r(STt,"TFSpeech2TextForConditionalGeneration"),STt.forEach(t),t9r=r(Vke," (Speech2Text model)"),Vke.forEach(t),xTt.forEach(t),a9r=i(ya),$6e=n(ya,"P",{});var RTt=s($6e);n9r=r(RTt,"Examples:"),RTt.forEach(t),s9r=i(ya),m(QA.$$.fragment,ya),ya.forEach(t),mi.forEach(t),hPe=i(c),ef=n(c,"H2",{class:!0});var wIe=s(ef);C9=n(wIe,"A",{id:!0,class:!0,href:!0});var BTt=s(C9);I6e=n(BTt,"SPAN",{});var PTt=s(I6e);m(WA.$$.fragment,PTt),PTt.forEach(t),BTt.forEach(t),l9r=i(wIe),q6e=n(wIe,"SPAN",{});var $Tt=s(q6e);i9r=r($Tt,"FlaxAutoModel"),$Tt.forEach(t),wIe.forEach(t),pPe=i(c),Rr=n(c,"DIV",{class:!0});var hi=s(Rr);m(HA.$$.fragment,hi),d9r=i(hi),of=n(hi,"P",{});var zJ=s(of);c9r=r(zJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HQ=n(zJ,"A",{href:!0});var ITt=s(HQ);f9r=r(ITt,"from_pretrained()"),ITt.forEach(t),m9r=r(zJ," class method or the "),UQ=n(zJ,"A",{href:!0});var qTt=s(UQ);g9r=r(qTt,"from_config()"),qTt.forEach(t),h9r=r(zJ,` class
method.`),zJ.forEach(t),p9r=i(hi),UA=n(hi,"P",{});var AIe=s(UA);_9r=r(AIe,"This class cannot be instantiated directly using "),N6e=n(AIe,"CODE",{});var NTt=s(N6e);u9r=r(NTt,"__init__()"),NTt.forEach(t),b9r=r(AIe," (throws an error)."),AIe.forEach(t),v9r=i(hi),At=n(hi,"DIV",{class:!0});var pi=s(At);m(JA.$$.fragment,pi),F9r=i(pi),j6e=n(pi,"P",{});var jTt=s(j6e);T9r=r(jTt,"Instantiates one of the base model classes of the library from a configuration."),jTt.forEach(t),M9r=i(pi),rf=n(pi,"P",{});var QJ=s(rf);E9r=r(QJ,`Note:
Loading a model from its configuration file does `),D6e=n(QJ,"STRONG",{});var DTt=s(D6e);C9r=r(DTt,"not"),DTt.forEach(t),w9r=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(QJ,"A",{href:!0});var GTt=s(JQ);A9r=r(GTt,"from_pretrained()"),GTt.forEach(t),y9r=r(QJ," to load the model weights."),QJ.forEach(t),L9r=i(pi),G6e=n(pi,"P",{});var OTt=s(G6e);x9r=r(OTt,"Examples:"),OTt.forEach(t),k9r=i(pi),m(YA.$$.fragment,pi),pi.forEach(t),S9r=i(hi),yo=n(hi,"DIV",{class:!0});var La=s(yo);m(KA.$$.fragment,La),R9r=i(La),O6e=n(La,"P",{});var VTt=s(O6e);B9r=r(VTt,"Instantiate one of the base model classes of the library from a pretrained model."),VTt.forEach(t),P9r=i(La),kn=n(La,"P",{});var uE=s(kn);$9r=r(uE,"The model class to instantiate is selected based on the "),V6e=n(uE,"CODE",{});var XTt=s(V6e);I9r=r(XTt,"model_type"),XTt.forEach(t),q9r=r(uE,` property of the config object (either
passed as an argument or loaded from `),X6e=n(uE,"CODE",{});var zTt=s(X6e);N9r=r(zTt,"pretrained_model_name_or_path"),zTt.forEach(t),j9r=r(uE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z6e=n(uE,"CODE",{});var QTt=s(z6e);D9r=r(QTt,"pretrained_model_name_or_path"),QTt.forEach(t),G9r=r(uE,":"),uE.forEach(t),O9r=i(La),z=n(La,"UL",{});var W=s(z);w9=n(W,"LI",{});var Xke=s(w9);Q6e=n(Xke,"STRONG",{});var WTt=s(Q6e);V9r=r(WTt,"albert"),WTt.forEach(t),X9r=r(Xke," \u2014 "),YQ=n(Xke,"A",{href:!0});var HTt=s(YQ);z9r=r(HTt,"FlaxAlbertModel"),HTt.forEach(t),Q9r=r(Xke," (ALBERT model)"),Xke.forEach(t),W9r=i(W),A9=n(W,"LI",{});var zke=s(A9);W6e=n(zke,"STRONG",{});var UTt=s(W6e);H9r=r(UTt,"bart"),UTt.forEach(t),U9r=r(zke," \u2014 "),KQ=n(zke,"A",{href:!0});var JTt=s(KQ);J9r=r(JTt,"FlaxBartModel"),JTt.forEach(t),Y9r=r(zke," (BART model)"),zke.forEach(t),K9r=i(W),y9=n(W,"LI",{});var Qke=s(y9);H6e=n(Qke,"STRONG",{});var YTt=s(H6e);Z9r=r(YTt,"beit"),YTt.forEach(t),eMr=r(Qke," \u2014 "),ZQ=n(Qke,"A",{href:!0});var KTt=s(ZQ);oMr=r(KTt,"FlaxBeitModel"),KTt.forEach(t),rMr=r(Qke," (BEiT model)"),Qke.forEach(t),tMr=i(W),L9=n(W,"LI",{});var Wke=s(L9);U6e=n(Wke,"STRONG",{});var ZTt=s(U6e);aMr=r(ZTt,"bert"),ZTt.forEach(t),nMr=r(Wke," \u2014 "),eW=n(Wke,"A",{href:!0});var e8t=s(eW);sMr=r(e8t,"FlaxBertModel"),e8t.forEach(t),lMr=r(Wke," (BERT model)"),Wke.forEach(t),iMr=i(W),x9=n(W,"LI",{});var Hke=s(x9);J6e=n(Hke,"STRONG",{});var o8t=s(J6e);dMr=r(o8t,"big_bird"),o8t.forEach(t),cMr=r(Hke," \u2014 "),oW=n(Hke,"A",{href:!0});var r8t=s(oW);fMr=r(r8t,"FlaxBigBirdModel"),r8t.forEach(t),mMr=r(Hke," (BigBird model)"),Hke.forEach(t),gMr=i(W),k9=n(W,"LI",{});var Uke=s(k9);Y6e=n(Uke,"STRONG",{});var t8t=s(Y6e);hMr=r(t8t,"blenderbot"),t8t.forEach(t),pMr=r(Uke," \u2014 "),rW=n(Uke,"A",{href:!0});var a8t=s(rW);_Mr=r(a8t,"FlaxBlenderbotModel"),a8t.forEach(t),uMr=r(Uke," (Blenderbot model)"),Uke.forEach(t),bMr=i(W),S9=n(W,"LI",{});var Jke=s(S9);K6e=n(Jke,"STRONG",{});var n8t=s(K6e);vMr=r(n8t,"blenderbot-small"),n8t.forEach(t),FMr=r(Jke," \u2014 "),tW=n(Jke,"A",{href:!0});var s8t=s(tW);TMr=r(s8t,"FlaxBlenderbotSmallModel"),s8t.forEach(t),MMr=r(Jke," (BlenderbotSmall model)"),Jke.forEach(t),EMr=i(W),R9=n(W,"LI",{});var Yke=s(R9);Z6e=n(Yke,"STRONG",{});var l8t=s(Z6e);CMr=r(l8t,"clip"),l8t.forEach(t),wMr=r(Yke," \u2014 "),aW=n(Yke,"A",{href:!0});var i8t=s(aW);AMr=r(i8t,"FlaxCLIPModel"),i8t.forEach(t),yMr=r(Yke," (CLIP model)"),Yke.forEach(t),LMr=i(W),B9=n(W,"LI",{});var Kke=s(B9);eve=n(Kke,"STRONG",{});var d8t=s(eve);xMr=r(d8t,"distilbert"),d8t.forEach(t),kMr=r(Kke," \u2014 "),nW=n(Kke,"A",{href:!0});var c8t=s(nW);SMr=r(c8t,"FlaxDistilBertModel"),c8t.forEach(t),RMr=r(Kke," (DistilBERT model)"),Kke.forEach(t),BMr=i(W),P9=n(W,"LI",{});var Zke=s(P9);ove=n(Zke,"STRONG",{});var f8t=s(ove);PMr=r(f8t,"electra"),f8t.forEach(t),$Mr=r(Zke," \u2014 "),sW=n(Zke,"A",{href:!0});var m8t=s(sW);IMr=r(m8t,"FlaxElectraModel"),m8t.forEach(t),qMr=r(Zke," (ELECTRA model)"),Zke.forEach(t),NMr=i(W),$9=n(W,"LI",{});var eSe=s($9);rve=n(eSe,"STRONG",{});var g8t=s(rve);jMr=r(g8t,"gpt2"),g8t.forEach(t),DMr=r(eSe," \u2014 "),lW=n(eSe,"A",{href:!0});var h8t=s(lW);GMr=r(h8t,"FlaxGPT2Model"),h8t.forEach(t),OMr=r(eSe," (OpenAI GPT-2 model)"),eSe.forEach(t),VMr=i(W),I9=n(W,"LI",{});var oSe=s(I9);tve=n(oSe,"STRONG",{});var p8t=s(tve);XMr=r(p8t,"gpt_neo"),p8t.forEach(t),zMr=r(oSe," \u2014 "),iW=n(oSe,"A",{href:!0});var _8t=s(iW);QMr=r(_8t,"FlaxGPTNeoModel"),_8t.forEach(t),WMr=r(oSe," (GPT Neo model)"),oSe.forEach(t),HMr=i(W),q9=n(W,"LI",{});var rSe=s(q9);ave=n(rSe,"STRONG",{});var u8t=s(ave);UMr=r(u8t,"gptj"),u8t.forEach(t),JMr=r(rSe," \u2014 "),dW=n(rSe,"A",{href:!0});var b8t=s(dW);YMr=r(b8t,"FlaxGPTJModel"),b8t.forEach(t),KMr=r(rSe," (GPT-J model)"),rSe.forEach(t),ZMr=i(W),N9=n(W,"LI",{});var tSe=s(N9);nve=n(tSe,"STRONG",{});var v8t=s(nve);e4r=r(v8t,"marian"),v8t.forEach(t),o4r=r(tSe," \u2014 "),cW=n(tSe,"A",{href:!0});var F8t=s(cW);r4r=r(F8t,"FlaxMarianModel"),F8t.forEach(t),t4r=r(tSe," (Marian model)"),tSe.forEach(t),a4r=i(W),j9=n(W,"LI",{});var aSe=s(j9);sve=n(aSe,"STRONG",{});var T8t=s(sve);n4r=r(T8t,"mbart"),T8t.forEach(t),s4r=r(aSe," \u2014 "),fW=n(aSe,"A",{href:!0});var M8t=s(fW);l4r=r(M8t,"FlaxMBartModel"),M8t.forEach(t),i4r=r(aSe," (mBART model)"),aSe.forEach(t),d4r=i(W),D9=n(W,"LI",{});var nSe=s(D9);lve=n(nSe,"STRONG",{});var E8t=s(lve);c4r=r(E8t,"mt5"),E8t.forEach(t),f4r=r(nSe," \u2014 "),mW=n(nSe,"A",{href:!0});var C8t=s(mW);m4r=r(C8t,"FlaxMT5Model"),C8t.forEach(t),g4r=r(nSe," (mT5 model)"),nSe.forEach(t),h4r=i(W),G9=n(W,"LI",{});var sSe=s(G9);ive=n(sSe,"STRONG",{});var w8t=s(ive);p4r=r(w8t,"pegasus"),w8t.forEach(t),_4r=r(sSe," \u2014 "),gW=n(sSe,"A",{href:!0});var A8t=s(gW);u4r=r(A8t,"FlaxPegasusModel"),A8t.forEach(t),b4r=r(sSe," (Pegasus model)"),sSe.forEach(t),v4r=i(W),O9=n(W,"LI",{});var lSe=s(O9);dve=n(lSe,"STRONG",{});var y8t=s(dve);F4r=r(y8t,"roberta"),y8t.forEach(t),T4r=r(lSe," \u2014 "),hW=n(lSe,"A",{href:!0});var L8t=s(hW);M4r=r(L8t,"FlaxRobertaModel"),L8t.forEach(t),E4r=r(lSe," (RoBERTa model)"),lSe.forEach(t),C4r=i(W),V9=n(W,"LI",{});var iSe=s(V9);cve=n(iSe,"STRONG",{});var x8t=s(cve);w4r=r(x8t,"roformer"),x8t.forEach(t),A4r=r(iSe," \u2014 "),pW=n(iSe,"A",{href:!0});var k8t=s(pW);y4r=r(k8t,"FlaxRoFormerModel"),k8t.forEach(t),L4r=r(iSe," (RoFormer model)"),iSe.forEach(t),x4r=i(W),X9=n(W,"LI",{});var dSe=s(X9);fve=n(dSe,"STRONG",{});var S8t=s(fve);k4r=r(S8t,"t5"),S8t.forEach(t),S4r=r(dSe," \u2014 "),_W=n(dSe,"A",{href:!0});var R8t=s(_W);R4r=r(R8t,"FlaxT5Model"),R8t.forEach(t),B4r=r(dSe," (T5 model)"),dSe.forEach(t),P4r=i(W),z9=n(W,"LI",{});var cSe=s(z9);mve=n(cSe,"STRONG",{});var B8t=s(mve);$4r=r(B8t,"vision-text-dual-encoder"),B8t.forEach(t),I4r=r(cSe," \u2014 "),uW=n(cSe,"A",{href:!0});var P8t=s(uW);q4r=r(P8t,"FlaxVisionTextDualEncoderModel"),P8t.forEach(t),N4r=r(cSe," (VisionTextDualEncoder model)"),cSe.forEach(t),j4r=i(W),Q9=n(W,"LI",{});var fSe=s(Q9);gve=n(fSe,"STRONG",{});var $8t=s(gve);D4r=r($8t,"vit"),$8t.forEach(t),G4r=r(fSe," \u2014 "),bW=n(fSe,"A",{href:!0});var I8t=s(bW);O4r=r(I8t,"FlaxViTModel"),I8t.forEach(t),V4r=r(fSe," (ViT model)"),fSe.forEach(t),X4r=i(W),W9=n(W,"LI",{});var mSe=s(W9);hve=n(mSe,"STRONG",{});var q8t=s(hve);z4r=r(q8t,"wav2vec2"),q8t.forEach(t),Q4r=r(mSe," \u2014 "),vW=n(mSe,"A",{href:!0});var N8t=s(vW);W4r=r(N8t,"FlaxWav2Vec2Model"),N8t.forEach(t),H4r=r(mSe," (Wav2Vec2 model)"),mSe.forEach(t),U4r=i(W),H9=n(W,"LI",{});var gSe=s(H9);pve=n(gSe,"STRONG",{});var j8t=s(pve);J4r=r(j8t,"xglm"),j8t.forEach(t),Y4r=r(gSe," \u2014 "),FW=n(gSe,"A",{href:!0});var D8t=s(FW);K4r=r(D8t,"FlaxXGLMModel"),D8t.forEach(t),Z4r=r(gSe," (XGLM model)"),gSe.forEach(t),eEr=i(W),U9=n(W,"LI",{});var hSe=s(U9);_ve=n(hSe,"STRONG",{});var G8t=s(_ve);oEr=r(G8t,"xlm-roberta"),G8t.forEach(t),rEr=r(hSe," \u2014 "),TW=n(hSe,"A",{href:!0});var O8t=s(TW);tEr=r(O8t,"FlaxXLMRobertaModel"),O8t.forEach(t),aEr=r(hSe," (XLM-RoBERTa model)"),hSe.forEach(t),W.forEach(t),nEr=i(La),uve=n(La,"P",{});var V8t=s(uve);sEr=r(V8t,"Examples:"),V8t.forEach(t),lEr=i(La),m(ZA.$$.fragment,La),La.forEach(t),hi.forEach(t),_Pe=i(c),tf=n(c,"H2",{class:!0});var yIe=s(tf);J9=n(yIe,"A",{id:!0,class:!0,href:!0});var X8t=s(J9);bve=n(X8t,"SPAN",{});var z8t=s(bve);m(e0.$$.fragment,z8t),z8t.forEach(t),X8t.forEach(t),iEr=i(yIe),vve=n(yIe,"SPAN",{});var Q8t=s(vve);dEr=r(Q8t,"FlaxAutoModelForCausalLM"),Q8t.forEach(t),yIe.forEach(t),uPe=i(c),Br=n(c,"DIV",{class:!0});var _i=s(Br);m(o0.$$.fragment,_i),cEr=i(_i),af=n(_i,"P",{});var WJ=s(af);fEr=r(WJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),MW=n(WJ,"A",{href:!0});var W8t=s(MW);mEr=r(W8t,"from_pretrained()"),W8t.forEach(t),gEr=r(WJ," class method or the "),EW=n(WJ,"A",{href:!0});var H8t=s(EW);hEr=r(H8t,"from_config()"),H8t.forEach(t),pEr=r(WJ,` class
method.`),WJ.forEach(t),_Er=i(_i),r0=n(_i,"P",{});var LIe=s(r0);uEr=r(LIe,"This class cannot be instantiated directly using "),Fve=n(LIe,"CODE",{});var U8t=s(Fve);bEr=r(U8t,"__init__()"),U8t.forEach(t),vEr=r(LIe," (throws an error)."),LIe.forEach(t),FEr=i(_i),yt=n(_i,"DIV",{class:!0});var ui=s(yt);m(t0.$$.fragment,ui),TEr=i(ui),Tve=n(ui,"P",{});var J8t=s(Tve);MEr=r(J8t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),J8t.forEach(t),EEr=i(ui),nf=n(ui,"P",{});var HJ=s(nf);CEr=r(HJ,`Note:
Loading a model from its configuration file does `),Mve=n(HJ,"STRONG",{});var Y8t=s(Mve);wEr=r(Y8t,"not"),Y8t.forEach(t),AEr=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=n(HJ,"A",{href:!0});var K8t=s(CW);yEr=r(K8t,"from_pretrained()"),K8t.forEach(t),LEr=r(HJ," to load the model weights."),HJ.forEach(t),xEr=i(ui),Eve=n(ui,"P",{});var Z8t=s(Eve);kEr=r(Z8t,"Examples:"),Z8t.forEach(t),SEr=i(ui),m(a0.$$.fragment,ui),ui.forEach(t),REr=i(_i),Lo=n(_i,"DIV",{class:!0});var xa=s(Lo);m(n0.$$.fragment,xa),BEr=i(xa),Cve=n(xa,"P",{});var e7t=s(Cve);PEr=r(e7t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),e7t.forEach(t),$Er=i(xa),Sn=n(xa,"P",{});var bE=s(Sn);IEr=r(bE,"The model class to instantiate is selected based on the "),wve=n(bE,"CODE",{});var o7t=s(wve);qEr=r(o7t,"model_type"),o7t.forEach(t),NEr=r(bE,` property of the config object (either
passed as an argument or loaded from `),Ave=n(bE,"CODE",{});var r7t=s(Ave);jEr=r(r7t,"pretrained_model_name_or_path"),r7t.forEach(t),DEr=r(bE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=n(bE,"CODE",{});var t7t=s(yve);GEr=r(t7t,"pretrained_model_name_or_path"),t7t.forEach(t),OEr=r(bE,":"),bE.forEach(t),VEr=i(xa),ca=n(xa,"UL",{});var bi=s(ca);Y9=n(bi,"LI",{});var pSe=s(Y9);Lve=n(pSe,"STRONG",{});var a7t=s(Lve);XEr=r(a7t,"bart"),a7t.forEach(t),zEr=r(pSe," \u2014 "),wW=n(pSe,"A",{href:!0});var n7t=s(wW);QEr=r(n7t,"FlaxBartForCausalLM"),n7t.forEach(t),WEr=r(pSe," (BART model)"),pSe.forEach(t),HEr=i(bi),K9=n(bi,"LI",{});var _Se=s(K9);xve=n(_Se,"STRONG",{});var s7t=s(xve);UEr=r(s7t,"gpt2"),s7t.forEach(t),JEr=r(_Se," \u2014 "),AW=n(_Se,"A",{href:!0});var l7t=s(AW);YEr=r(l7t,"FlaxGPT2LMHeadModel"),l7t.forEach(t),KEr=r(_Se," (OpenAI GPT-2 model)"),_Se.forEach(t),ZEr=i(bi),Z9=n(bi,"LI",{});var uSe=s(Z9);kve=n(uSe,"STRONG",{});var i7t=s(kve);e5r=r(i7t,"gpt_neo"),i7t.forEach(t),o5r=r(uSe," \u2014 "),yW=n(uSe,"A",{href:!0});var d7t=s(yW);r5r=r(d7t,"FlaxGPTNeoForCausalLM"),d7t.forEach(t),t5r=r(uSe," (GPT Neo model)"),uSe.forEach(t),a5r=i(bi),eM=n(bi,"LI",{});var bSe=s(eM);Sve=n(bSe,"STRONG",{});var c7t=s(Sve);n5r=r(c7t,"gptj"),c7t.forEach(t),s5r=r(bSe," \u2014 "),LW=n(bSe,"A",{href:!0});var f7t=s(LW);l5r=r(f7t,"FlaxGPTJForCausalLM"),f7t.forEach(t),i5r=r(bSe," (GPT-J model)"),bSe.forEach(t),d5r=i(bi),oM=n(bi,"LI",{});var vSe=s(oM);Rve=n(vSe,"STRONG",{});var m7t=s(Rve);c5r=r(m7t,"xglm"),m7t.forEach(t),f5r=r(vSe," \u2014 "),xW=n(vSe,"A",{href:!0});var g7t=s(xW);m5r=r(g7t,"FlaxXGLMForCausalLM"),g7t.forEach(t),g5r=r(vSe," (XGLM model)"),vSe.forEach(t),bi.forEach(t),h5r=i(xa),Bve=n(xa,"P",{});var h7t=s(Bve);p5r=r(h7t,"Examples:"),h7t.forEach(t),_5r=i(xa),m(s0.$$.fragment,xa),xa.forEach(t),_i.forEach(t),bPe=i(c),sf=n(c,"H2",{class:!0});var xIe=s(sf);rM=n(xIe,"A",{id:!0,class:!0,href:!0});var p7t=s(rM);Pve=n(p7t,"SPAN",{});var _7t=s(Pve);m(l0.$$.fragment,_7t),_7t.forEach(t),p7t.forEach(t),u5r=i(xIe),$ve=n(xIe,"SPAN",{});var u7t=s($ve);b5r=r(u7t,"FlaxAutoModelForPreTraining"),u7t.forEach(t),xIe.forEach(t),vPe=i(c),Pr=n(c,"DIV",{class:!0});var vi=s(Pr);m(i0.$$.fragment,vi),v5r=i(vi),lf=n(vi,"P",{});var UJ=s(lf);F5r=r(UJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kW=n(UJ,"A",{href:!0});var b7t=s(kW);T5r=r(b7t,"from_pretrained()"),b7t.forEach(t),M5r=r(UJ," class method or the "),SW=n(UJ,"A",{href:!0});var v7t=s(SW);E5r=r(v7t,"from_config()"),v7t.forEach(t),C5r=r(UJ,` class
method.`),UJ.forEach(t),w5r=i(vi),d0=n(vi,"P",{});var kIe=s(d0);A5r=r(kIe,"This class cannot be instantiated directly using "),Ive=n(kIe,"CODE",{});var F7t=s(Ive);y5r=r(F7t,"__init__()"),F7t.forEach(t),L5r=r(kIe," (throws an error)."),kIe.forEach(t),x5r=i(vi),Lt=n(vi,"DIV",{class:!0});var Fi=s(Lt);m(c0.$$.fragment,Fi),k5r=i(Fi),qve=n(Fi,"P",{});var T7t=s(qve);S5r=r(T7t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),T7t.forEach(t),R5r=i(Fi),df=n(Fi,"P",{});var JJ=s(df);B5r=r(JJ,`Note:
Loading a model from its configuration file does `),Nve=n(JJ,"STRONG",{});var M7t=s(Nve);P5r=r(M7t,"not"),M7t.forEach(t),$5r=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=n(JJ,"A",{href:!0});var E7t=s(RW);I5r=r(E7t,"from_pretrained()"),E7t.forEach(t),q5r=r(JJ," to load the model weights."),JJ.forEach(t),N5r=i(Fi),jve=n(Fi,"P",{});var C7t=s(jve);j5r=r(C7t,"Examples:"),C7t.forEach(t),D5r=i(Fi),m(f0.$$.fragment,Fi),Fi.forEach(t),G5r=i(vi),xo=n(vi,"DIV",{class:!0});var ka=s(xo);m(m0.$$.fragment,ka),O5r=i(ka),Dve=n(ka,"P",{});var w7t=s(Dve);V5r=r(w7t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),w7t.forEach(t),X5r=i(ka),Rn=n(ka,"P",{});var vE=s(Rn);z5r=r(vE,"The model class to instantiate is selected based on the "),Gve=n(vE,"CODE",{});var A7t=s(Gve);Q5r=r(A7t,"model_type"),A7t.forEach(t),W5r=r(vE,` property of the config object (either
passed as an argument or loaded from `),Ove=n(vE,"CODE",{});var y7t=s(Ove);H5r=r(y7t,"pretrained_model_name_or_path"),y7t.forEach(t),U5r=r(vE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=n(vE,"CODE",{});var L7t=s(Vve);J5r=r(L7t,"pretrained_model_name_or_path"),L7t.forEach(t),Y5r=r(vE,":"),vE.forEach(t),K5r=i(ka),me=n(ka,"UL",{});var _e=s(me);tM=n(_e,"LI",{});var FSe=s(tM);Xve=n(FSe,"STRONG",{});var x7t=s(Xve);Z5r=r(x7t,"albert"),x7t.forEach(t),e3r=r(FSe," \u2014 "),BW=n(FSe,"A",{href:!0});var k7t=s(BW);o3r=r(k7t,"FlaxAlbertForPreTraining"),k7t.forEach(t),r3r=r(FSe," (ALBERT model)"),FSe.forEach(t),t3r=i(_e),aM=n(_e,"LI",{});var TSe=s(aM);zve=n(TSe,"STRONG",{});var S7t=s(zve);a3r=r(S7t,"bart"),S7t.forEach(t),n3r=r(TSe," \u2014 "),PW=n(TSe,"A",{href:!0});var R7t=s(PW);s3r=r(R7t,"FlaxBartForConditionalGeneration"),R7t.forEach(t),l3r=r(TSe," (BART model)"),TSe.forEach(t),i3r=i(_e),nM=n(_e,"LI",{});var MSe=s(nM);Qve=n(MSe,"STRONG",{});var B7t=s(Qve);d3r=r(B7t,"bert"),B7t.forEach(t),c3r=r(MSe," \u2014 "),$W=n(MSe,"A",{href:!0});var P7t=s($W);f3r=r(P7t,"FlaxBertForPreTraining"),P7t.forEach(t),m3r=r(MSe," (BERT model)"),MSe.forEach(t),g3r=i(_e),sM=n(_e,"LI",{});var ESe=s(sM);Wve=n(ESe,"STRONG",{});var $7t=s(Wve);h3r=r($7t,"big_bird"),$7t.forEach(t),p3r=r(ESe," \u2014 "),IW=n(ESe,"A",{href:!0});var I7t=s(IW);_3r=r(I7t,"FlaxBigBirdForPreTraining"),I7t.forEach(t),u3r=r(ESe," (BigBird model)"),ESe.forEach(t),b3r=i(_e),lM=n(_e,"LI",{});var CSe=s(lM);Hve=n(CSe,"STRONG",{});var q7t=s(Hve);v3r=r(q7t,"electra"),q7t.forEach(t),F3r=r(CSe," \u2014 "),qW=n(CSe,"A",{href:!0});var N7t=s(qW);T3r=r(N7t,"FlaxElectraForPreTraining"),N7t.forEach(t),M3r=r(CSe," (ELECTRA model)"),CSe.forEach(t),E3r=i(_e),iM=n(_e,"LI",{});var wSe=s(iM);Uve=n(wSe,"STRONG",{});var j7t=s(Uve);C3r=r(j7t,"mbart"),j7t.forEach(t),w3r=r(wSe," \u2014 "),NW=n(wSe,"A",{href:!0});var D7t=s(NW);A3r=r(D7t,"FlaxMBartForConditionalGeneration"),D7t.forEach(t),y3r=r(wSe," (mBART model)"),wSe.forEach(t),L3r=i(_e),dM=n(_e,"LI",{});var ASe=s(dM);Jve=n(ASe,"STRONG",{});var G7t=s(Jve);x3r=r(G7t,"mt5"),G7t.forEach(t),k3r=r(ASe," \u2014 "),jW=n(ASe,"A",{href:!0});var O7t=s(jW);S3r=r(O7t,"FlaxMT5ForConditionalGeneration"),O7t.forEach(t),R3r=r(ASe," (mT5 model)"),ASe.forEach(t),B3r=i(_e),cM=n(_e,"LI",{});var ySe=s(cM);Yve=n(ySe,"STRONG",{});var V7t=s(Yve);P3r=r(V7t,"roberta"),V7t.forEach(t),$3r=r(ySe," \u2014 "),DW=n(ySe,"A",{href:!0});var X7t=s(DW);I3r=r(X7t,"FlaxRobertaForMaskedLM"),X7t.forEach(t),q3r=r(ySe," (RoBERTa model)"),ySe.forEach(t),N3r=i(_e),fM=n(_e,"LI",{});var LSe=s(fM);Kve=n(LSe,"STRONG",{});var z7t=s(Kve);j3r=r(z7t,"roformer"),z7t.forEach(t),D3r=r(LSe," \u2014 "),GW=n(LSe,"A",{href:!0});var Q7t=s(GW);G3r=r(Q7t,"FlaxRoFormerForMaskedLM"),Q7t.forEach(t),O3r=r(LSe," (RoFormer model)"),LSe.forEach(t),V3r=i(_e),mM=n(_e,"LI",{});var xSe=s(mM);Zve=n(xSe,"STRONG",{});var W7t=s(Zve);X3r=r(W7t,"t5"),W7t.forEach(t),z3r=r(xSe," \u2014 "),OW=n(xSe,"A",{href:!0});var H7t=s(OW);Q3r=r(H7t,"FlaxT5ForConditionalGeneration"),H7t.forEach(t),W3r=r(xSe," (T5 model)"),xSe.forEach(t),H3r=i(_e),gM=n(_e,"LI",{});var kSe=s(gM);eFe=n(kSe,"STRONG",{});var U7t=s(eFe);U3r=r(U7t,"wav2vec2"),U7t.forEach(t),J3r=r(kSe," \u2014 "),VW=n(kSe,"A",{href:!0});var J7t=s(VW);Y3r=r(J7t,"FlaxWav2Vec2ForPreTraining"),J7t.forEach(t),K3r=r(kSe," (Wav2Vec2 model)"),kSe.forEach(t),Z3r=i(_e),hM=n(_e,"LI",{});var SSe=s(hM);oFe=n(SSe,"STRONG",{});var Y7t=s(oFe);eCr=r(Y7t,"xlm-roberta"),Y7t.forEach(t),oCr=r(SSe," \u2014 "),XW=n(SSe,"A",{href:!0});var K7t=s(XW);rCr=r(K7t,"FlaxXLMRobertaForMaskedLM"),K7t.forEach(t),tCr=r(SSe," (XLM-RoBERTa model)"),SSe.forEach(t),_e.forEach(t),aCr=i(ka),rFe=n(ka,"P",{});var Z7t=s(rFe);nCr=r(Z7t,"Examples:"),Z7t.forEach(t),sCr=i(ka),m(g0.$$.fragment,ka),ka.forEach(t),vi.forEach(t),FPe=i(c),cf=n(c,"H2",{class:!0});var SIe=s(cf);pM=n(SIe,"A",{id:!0,class:!0,href:!0});var e9t=s(pM);tFe=n(e9t,"SPAN",{});var o9t=s(tFe);m(h0.$$.fragment,o9t),o9t.forEach(t),e9t.forEach(t),lCr=i(SIe),aFe=n(SIe,"SPAN",{});var r9t=s(aFe);iCr=r(r9t,"FlaxAutoModelForMaskedLM"),r9t.forEach(t),SIe.forEach(t),TPe=i(c),$r=n(c,"DIV",{class:!0});var Ti=s($r);m(p0.$$.fragment,Ti),dCr=i(Ti),ff=n(Ti,"P",{});var YJ=s(ff);cCr=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zW=n(YJ,"A",{href:!0});var t9t=s(zW);fCr=r(t9t,"from_pretrained()"),t9t.forEach(t),mCr=r(YJ," class method or the "),QW=n(YJ,"A",{href:!0});var a9t=s(QW);gCr=r(a9t,"from_config()"),a9t.forEach(t),hCr=r(YJ,` class
method.`),YJ.forEach(t),pCr=i(Ti),_0=n(Ti,"P",{});var RIe=s(_0);_Cr=r(RIe,"This class cannot be instantiated directly using "),nFe=n(RIe,"CODE",{});var n9t=s(nFe);uCr=r(n9t,"__init__()"),n9t.forEach(t),bCr=r(RIe," (throws an error)."),RIe.forEach(t),vCr=i(Ti),xt=n(Ti,"DIV",{class:!0});var Mi=s(xt);m(u0.$$.fragment,Mi),FCr=i(Mi),sFe=n(Mi,"P",{});var s9t=s(sFe);TCr=r(s9t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),s9t.forEach(t),MCr=i(Mi),mf=n(Mi,"P",{});var KJ=s(mf);ECr=r(KJ,`Note:
Loading a model from its configuration file does `),lFe=n(KJ,"STRONG",{});var l9t=s(lFe);CCr=r(l9t,"not"),l9t.forEach(t),wCr=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=n(KJ,"A",{href:!0});var i9t=s(WW);ACr=r(i9t,"from_pretrained()"),i9t.forEach(t),yCr=r(KJ," to load the model weights."),KJ.forEach(t),LCr=i(Mi),iFe=n(Mi,"P",{});var d9t=s(iFe);xCr=r(d9t,"Examples:"),d9t.forEach(t),kCr=i(Mi),m(b0.$$.fragment,Mi),Mi.forEach(t),SCr=i(Ti),ko=n(Ti,"DIV",{class:!0});var Sa=s(ko);m(v0.$$.fragment,Sa),RCr=i(Sa),dFe=n(Sa,"P",{});var c9t=s(dFe);BCr=r(c9t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),c9t.forEach(t),PCr=i(Sa),Bn=n(Sa,"P",{});var FE=s(Bn);$Cr=r(FE,"The model class to instantiate is selected based on the "),cFe=n(FE,"CODE",{});var f9t=s(cFe);ICr=r(f9t,"model_type"),f9t.forEach(t),qCr=r(FE,` property of the config object (either
passed as an argument or loaded from `),fFe=n(FE,"CODE",{});var m9t=s(fFe);NCr=r(m9t,"pretrained_model_name_or_path"),m9t.forEach(t),jCr=r(FE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=n(FE,"CODE",{});var g9t=s(mFe);DCr=r(g9t,"pretrained_model_name_or_path"),g9t.forEach(t),GCr=r(FE,":"),FE.forEach(t),OCr=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);_M=n(Ae,"LI",{});var RSe=s(_M);gFe=n(RSe,"STRONG",{});var h9t=s(gFe);VCr=r(h9t,"albert"),h9t.forEach(t),XCr=r(RSe," \u2014 "),HW=n(RSe,"A",{href:!0});var p9t=s(HW);zCr=r(p9t,"FlaxAlbertForMaskedLM"),p9t.forEach(t),QCr=r(RSe," (ALBERT model)"),RSe.forEach(t),WCr=i(Ae),uM=n(Ae,"LI",{});var BSe=s(uM);hFe=n(BSe,"STRONG",{});var _9t=s(hFe);HCr=r(_9t,"bart"),_9t.forEach(t),UCr=r(BSe," \u2014 "),UW=n(BSe,"A",{href:!0});var u9t=s(UW);JCr=r(u9t,"FlaxBartForConditionalGeneration"),u9t.forEach(t),YCr=r(BSe," (BART model)"),BSe.forEach(t),KCr=i(Ae),bM=n(Ae,"LI",{});var PSe=s(bM);pFe=n(PSe,"STRONG",{});var b9t=s(pFe);ZCr=r(b9t,"bert"),b9t.forEach(t),ewr=r(PSe," \u2014 "),JW=n(PSe,"A",{href:!0});var v9t=s(JW);owr=r(v9t,"FlaxBertForMaskedLM"),v9t.forEach(t),rwr=r(PSe," (BERT model)"),PSe.forEach(t),twr=i(Ae),vM=n(Ae,"LI",{});var $Se=s(vM);_Fe=n($Se,"STRONG",{});var F9t=s(_Fe);awr=r(F9t,"big_bird"),F9t.forEach(t),nwr=r($Se," \u2014 "),YW=n($Se,"A",{href:!0});var T9t=s(YW);swr=r(T9t,"FlaxBigBirdForMaskedLM"),T9t.forEach(t),lwr=r($Se," (BigBird model)"),$Se.forEach(t),iwr=i(Ae),FM=n(Ae,"LI",{});var ISe=s(FM);uFe=n(ISe,"STRONG",{});var M9t=s(uFe);dwr=r(M9t,"distilbert"),M9t.forEach(t),cwr=r(ISe," \u2014 "),KW=n(ISe,"A",{href:!0});var E9t=s(KW);fwr=r(E9t,"FlaxDistilBertForMaskedLM"),E9t.forEach(t),mwr=r(ISe," (DistilBERT model)"),ISe.forEach(t),gwr=i(Ae),TM=n(Ae,"LI",{});var qSe=s(TM);bFe=n(qSe,"STRONG",{});var C9t=s(bFe);hwr=r(C9t,"electra"),C9t.forEach(t),pwr=r(qSe," \u2014 "),ZW=n(qSe,"A",{href:!0});var w9t=s(ZW);_wr=r(w9t,"FlaxElectraForMaskedLM"),w9t.forEach(t),uwr=r(qSe," (ELECTRA model)"),qSe.forEach(t),bwr=i(Ae),MM=n(Ae,"LI",{});var NSe=s(MM);vFe=n(NSe,"STRONG",{});var A9t=s(vFe);vwr=r(A9t,"mbart"),A9t.forEach(t),Fwr=r(NSe," \u2014 "),eH=n(NSe,"A",{href:!0});var y9t=s(eH);Twr=r(y9t,"FlaxMBartForConditionalGeneration"),y9t.forEach(t),Mwr=r(NSe," (mBART model)"),NSe.forEach(t),Ewr=i(Ae),EM=n(Ae,"LI",{});var jSe=s(EM);FFe=n(jSe,"STRONG",{});var L9t=s(FFe);Cwr=r(L9t,"roberta"),L9t.forEach(t),wwr=r(jSe," \u2014 "),oH=n(jSe,"A",{href:!0});var x9t=s(oH);Awr=r(x9t,"FlaxRobertaForMaskedLM"),x9t.forEach(t),ywr=r(jSe," (RoBERTa model)"),jSe.forEach(t),Lwr=i(Ae),CM=n(Ae,"LI",{});var DSe=s(CM);TFe=n(DSe,"STRONG",{});var k9t=s(TFe);xwr=r(k9t,"roformer"),k9t.forEach(t),kwr=r(DSe," \u2014 "),rH=n(DSe,"A",{href:!0});var S9t=s(rH);Swr=r(S9t,"FlaxRoFormerForMaskedLM"),S9t.forEach(t),Rwr=r(DSe," (RoFormer model)"),DSe.forEach(t),Bwr=i(Ae),wM=n(Ae,"LI",{});var GSe=s(wM);MFe=n(GSe,"STRONG",{});var R9t=s(MFe);Pwr=r(R9t,"xlm-roberta"),R9t.forEach(t),$wr=r(GSe," \u2014 "),tH=n(GSe,"A",{href:!0});var B9t=s(tH);Iwr=r(B9t,"FlaxXLMRobertaForMaskedLM"),B9t.forEach(t),qwr=r(GSe," (XLM-RoBERTa model)"),GSe.forEach(t),Ae.forEach(t),Nwr=i(Sa),EFe=n(Sa,"P",{});var P9t=s(EFe);jwr=r(P9t,"Examples:"),P9t.forEach(t),Dwr=i(Sa),m(F0.$$.fragment,Sa),Sa.forEach(t),Ti.forEach(t),MPe=i(c),gf=n(c,"H2",{class:!0});var BIe=s(gf);AM=n(BIe,"A",{id:!0,class:!0,href:!0});var $9t=s(AM);CFe=n($9t,"SPAN",{});var I9t=s(CFe);m(T0.$$.fragment,I9t),I9t.forEach(t),$9t.forEach(t),Gwr=i(BIe),wFe=n(BIe,"SPAN",{});var q9t=s(wFe);Owr=r(q9t,"FlaxAutoModelForSeq2SeqLM"),q9t.forEach(t),BIe.forEach(t),EPe=i(c),Ir=n(c,"DIV",{class:!0});var Ei=s(Ir);m(M0.$$.fragment,Ei),Vwr=i(Ei),hf=n(Ei,"P",{});var ZJ=s(hf);Xwr=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aH=n(ZJ,"A",{href:!0});var N9t=s(aH);zwr=r(N9t,"from_pretrained()"),N9t.forEach(t),Qwr=r(ZJ," class method or the "),nH=n(ZJ,"A",{href:!0});var j9t=s(nH);Wwr=r(j9t,"from_config()"),j9t.forEach(t),Hwr=r(ZJ,` class
method.`),ZJ.forEach(t),Uwr=i(Ei),E0=n(Ei,"P",{});var PIe=s(E0);Jwr=r(PIe,"This class cannot be instantiated directly using "),AFe=n(PIe,"CODE",{});var D9t=s(AFe);Ywr=r(D9t,"__init__()"),D9t.forEach(t),Kwr=r(PIe," (throws an error)."),PIe.forEach(t),Zwr=i(Ei),kt=n(Ei,"DIV",{class:!0});var Ci=s(kt);m(C0.$$.fragment,Ci),eAr=i(Ci),yFe=n(Ci,"P",{});var G9t=s(yFe);oAr=r(G9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),G9t.forEach(t),rAr=i(Ci),pf=n(Ci,"P",{});var eY=s(pf);tAr=r(eY,`Note:
Loading a model from its configuration file does `),LFe=n(eY,"STRONG",{});var O9t=s(LFe);aAr=r(O9t,"not"),O9t.forEach(t),nAr=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=n(eY,"A",{href:!0});var V9t=s(sH);sAr=r(V9t,"from_pretrained()"),V9t.forEach(t),lAr=r(eY," to load the model weights."),eY.forEach(t),iAr=i(Ci),xFe=n(Ci,"P",{});var X9t=s(xFe);dAr=r(X9t,"Examples:"),X9t.forEach(t),cAr=i(Ci),m(w0.$$.fragment,Ci),Ci.forEach(t),fAr=i(Ei),So=n(Ei,"DIV",{class:!0});var Ra=s(So);m(A0.$$.fragment,Ra),mAr=i(Ra),kFe=n(Ra,"P",{});var z9t=s(kFe);gAr=r(z9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),z9t.forEach(t),hAr=i(Ra),Pn=n(Ra,"P",{});var TE=s(Pn);pAr=r(TE,"The model class to instantiate is selected based on the "),SFe=n(TE,"CODE",{});var Q9t=s(SFe);_Ar=r(Q9t,"model_type"),Q9t.forEach(t),uAr=r(TE,` property of the config object (either
passed as an argument or loaded from `),RFe=n(TE,"CODE",{});var W9t=s(RFe);bAr=r(W9t,"pretrained_model_name_or_path"),W9t.forEach(t),vAr=r(TE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(TE,"CODE",{});var H9t=s(BFe);FAr=r(H9t,"pretrained_model_name_or_path"),H9t.forEach(t),TAr=r(TE,":"),TE.forEach(t),MAr=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);yM=n(so,"LI",{});var OSe=s(yM);PFe=n(OSe,"STRONG",{});var U9t=s(PFe);EAr=r(U9t,"bart"),U9t.forEach(t),CAr=r(OSe," \u2014 "),lH=n(OSe,"A",{href:!0});var J9t=s(lH);wAr=r(J9t,"FlaxBartForConditionalGeneration"),J9t.forEach(t),AAr=r(OSe," (BART model)"),OSe.forEach(t),yAr=i(so),LM=n(so,"LI",{});var VSe=s(LM);$Fe=n(VSe,"STRONG",{});var Y9t=s($Fe);LAr=r(Y9t,"blenderbot"),Y9t.forEach(t),xAr=r(VSe," \u2014 "),iH=n(VSe,"A",{href:!0});var K9t=s(iH);kAr=r(K9t,"FlaxBlenderbotForConditionalGeneration"),K9t.forEach(t),SAr=r(VSe," (Blenderbot model)"),VSe.forEach(t),RAr=i(so),xM=n(so,"LI",{});var XSe=s(xM);IFe=n(XSe,"STRONG",{});var Z9t=s(IFe);BAr=r(Z9t,"blenderbot-small"),Z9t.forEach(t),PAr=r(XSe," \u2014 "),dH=n(XSe,"A",{href:!0});var eMt=s(dH);$Ar=r(eMt,"FlaxBlenderbotSmallForConditionalGeneration"),eMt.forEach(t),IAr=r(XSe," (BlenderbotSmall model)"),XSe.forEach(t),qAr=i(so),kM=n(so,"LI",{});var zSe=s(kM);qFe=n(zSe,"STRONG",{});var oMt=s(qFe);NAr=r(oMt,"encoder-decoder"),oMt.forEach(t),jAr=r(zSe," \u2014 "),cH=n(zSe,"A",{href:!0});var rMt=s(cH);DAr=r(rMt,"FlaxEncoderDecoderModel"),rMt.forEach(t),GAr=r(zSe," (Encoder decoder model)"),zSe.forEach(t),OAr=i(so),SM=n(so,"LI",{});var QSe=s(SM);NFe=n(QSe,"STRONG",{});var tMt=s(NFe);VAr=r(tMt,"marian"),tMt.forEach(t),XAr=r(QSe," \u2014 "),fH=n(QSe,"A",{href:!0});var aMt=s(fH);zAr=r(aMt,"FlaxMarianMTModel"),aMt.forEach(t),QAr=r(QSe," (Marian model)"),QSe.forEach(t),WAr=i(so),RM=n(so,"LI",{});var WSe=s(RM);jFe=n(WSe,"STRONG",{});var nMt=s(jFe);HAr=r(nMt,"mbart"),nMt.forEach(t),UAr=r(WSe," \u2014 "),mH=n(WSe,"A",{href:!0});var sMt=s(mH);JAr=r(sMt,"FlaxMBartForConditionalGeneration"),sMt.forEach(t),YAr=r(WSe," (mBART model)"),WSe.forEach(t),KAr=i(so),BM=n(so,"LI",{});var HSe=s(BM);DFe=n(HSe,"STRONG",{});var lMt=s(DFe);ZAr=r(lMt,"mt5"),lMt.forEach(t),e0r=r(HSe," \u2014 "),gH=n(HSe,"A",{href:!0});var iMt=s(gH);o0r=r(iMt,"FlaxMT5ForConditionalGeneration"),iMt.forEach(t),r0r=r(HSe," (mT5 model)"),HSe.forEach(t),t0r=i(so),PM=n(so,"LI",{});var USe=s(PM);GFe=n(USe,"STRONG",{});var dMt=s(GFe);a0r=r(dMt,"pegasus"),dMt.forEach(t),n0r=r(USe," \u2014 "),hH=n(USe,"A",{href:!0});var cMt=s(hH);s0r=r(cMt,"FlaxPegasusForConditionalGeneration"),cMt.forEach(t),l0r=r(USe," (Pegasus model)"),USe.forEach(t),i0r=i(so),$M=n(so,"LI",{});var JSe=s($M);OFe=n(JSe,"STRONG",{});var fMt=s(OFe);d0r=r(fMt,"t5"),fMt.forEach(t),c0r=r(JSe," \u2014 "),pH=n(JSe,"A",{href:!0});var mMt=s(pH);f0r=r(mMt,"FlaxT5ForConditionalGeneration"),mMt.forEach(t),m0r=r(JSe," (T5 model)"),JSe.forEach(t),so.forEach(t),g0r=i(Ra),VFe=n(Ra,"P",{});var gMt=s(VFe);h0r=r(gMt,"Examples:"),gMt.forEach(t),p0r=i(Ra),m(y0.$$.fragment,Ra),Ra.forEach(t),Ei.forEach(t),CPe=i(c),_f=n(c,"H2",{class:!0});var $Ie=s(_f);IM=n($Ie,"A",{id:!0,class:!0,href:!0});var hMt=s(IM);XFe=n(hMt,"SPAN",{});var pMt=s(XFe);m(L0.$$.fragment,pMt),pMt.forEach(t),hMt.forEach(t),_0r=i($Ie),zFe=n($Ie,"SPAN",{});var _Mt=s(zFe);u0r=r(_Mt,"FlaxAutoModelForSequenceClassification"),_Mt.forEach(t),$Ie.forEach(t),wPe=i(c),qr=n(c,"DIV",{class:!0});var wi=s(qr);m(x0.$$.fragment,wi),b0r=i(wi),uf=n(wi,"P",{});var oY=s(uf);v0r=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_H=n(oY,"A",{href:!0});var uMt=s(_H);F0r=r(uMt,"from_pretrained()"),uMt.forEach(t),T0r=r(oY," class method or the "),uH=n(oY,"A",{href:!0});var bMt=s(uH);M0r=r(bMt,"from_config()"),bMt.forEach(t),E0r=r(oY,` class
method.`),oY.forEach(t),C0r=i(wi),k0=n(wi,"P",{});var IIe=s(k0);w0r=r(IIe,"This class cannot be instantiated directly using "),QFe=n(IIe,"CODE",{});var vMt=s(QFe);A0r=r(vMt,"__init__()"),vMt.forEach(t),y0r=r(IIe," (throws an error)."),IIe.forEach(t),L0r=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(S0.$$.fragment,Ai),x0r=i(Ai),WFe=n(Ai,"P",{});var FMt=s(WFe);k0r=r(FMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),FMt.forEach(t),S0r=i(Ai),bf=n(Ai,"P",{});var rY=s(bf);R0r=r(rY,`Note:
Loading a model from its configuration file does `),HFe=n(rY,"STRONG",{});var TMt=s(HFe);B0r=r(TMt,"not"),TMt.forEach(t),P0r=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=n(rY,"A",{href:!0});var MMt=s(bH);$0r=r(MMt,"from_pretrained()"),MMt.forEach(t),I0r=r(rY," to load the model weights."),rY.forEach(t),q0r=i(Ai),UFe=n(Ai,"P",{});var EMt=s(UFe);N0r=r(EMt,"Examples:"),EMt.forEach(t),j0r=i(Ai),m(R0.$$.fragment,Ai),Ai.forEach(t),D0r=i(wi),Ro=n(wi,"DIV",{class:!0});var Ba=s(Ro);m(B0.$$.fragment,Ba),G0r=i(Ba),JFe=n(Ba,"P",{});var CMt=s(JFe);O0r=r(CMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),CMt.forEach(t),V0r=i(Ba),$n=n(Ba,"P",{});var ME=s($n);X0r=r(ME,"The model class to instantiate is selected based on the "),YFe=n(ME,"CODE",{});var wMt=s(YFe);z0r=r(wMt,"model_type"),wMt.forEach(t),Q0r=r(ME,` property of the config object (either
passed as an argument or loaded from `),KFe=n(ME,"CODE",{});var AMt=s(KFe);W0r=r(AMt,"pretrained_model_name_or_path"),AMt.forEach(t),H0r=r(ME,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=n(ME,"CODE",{});var yMt=s(ZFe);U0r=r(yMt,"pretrained_model_name_or_path"),yMt.forEach(t),J0r=r(ME,":"),ME.forEach(t),Y0r=i(Ba),Fe=n(Ba,"UL",{});var ye=s(Fe);qM=n(ye,"LI",{});var YSe=s(qM);eTe=n(YSe,"STRONG",{});var LMt=s(eTe);K0r=r(LMt,"albert"),LMt.forEach(t),Z0r=r(YSe," \u2014 "),vH=n(YSe,"A",{href:!0});var xMt=s(vH);eyr=r(xMt,"FlaxAlbertForSequenceClassification"),xMt.forEach(t),oyr=r(YSe," (ALBERT model)"),YSe.forEach(t),ryr=i(ye),NM=n(ye,"LI",{});var KSe=s(NM);oTe=n(KSe,"STRONG",{});var kMt=s(oTe);tyr=r(kMt,"bart"),kMt.forEach(t),ayr=r(KSe," \u2014 "),FH=n(KSe,"A",{href:!0});var SMt=s(FH);nyr=r(SMt,"FlaxBartForSequenceClassification"),SMt.forEach(t),syr=r(KSe," (BART model)"),KSe.forEach(t),lyr=i(ye),jM=n(ye,"LI",{});var ZSe=s(jM);rTe=n(ZSe,"STRONG",{});var RMt=s(rTe);iyr=r(RMt,"bert"),RMt.forEach(t),dyr=r(ZSe," \u2014 "),TH=n(ZSe,"A",{href:!0});var BMt=s(TH);cyr=r(BMt,"FlaxBertForSequenceClassification"),BMt.forEach(t),fyr=r(ZSe," (BERT model)"),ZSe.forEach(t),myr=i(ye),DM=n(ye,"LI",{});var eRe=s(DM);tTe=n(eRe,"STRONG",{});var PMt=s(tTe);gyr=r(PMt,"big_bird"),PMt.forEach(t),hyr=r(eRe," \u2014 "),MH=n(eRe,"A",{href:!0});var $Mt=s(MH);pyr=r($Mt,"FlaxBigBirdForSequenceClassification"),$Mt.forEach(t),_yr=r(eRe," (BigBird model)"),eRe.forEach(t),uyr=i(ye),GM=n(ye,"LI",{});var oRe=s(GM);aTe=n(oRe,"STRONG",{});var IMt=s(aTe);byr=r(IMt,"distilbert"),IMt.forEach(t),vyr=r(oRe," \u2014 "),EH=n(oRe,"A",{href:!0});var qMt=s(EH);Fyr=r(qMt,"FlaxDistilBertForSequenceClassification"),qMt.forEach(t),Tyr=r(oRe," (DistilBERT model)"),oRe.forEach(t),Myr=i(ye),OM=n(ye,"LI",{});var rRe=s(OM);nTe=n(rRe,"STRONG",{});var NMt=s(nTe);Eyr=r(NMt,"electra"),NMt.forEach(t),Cyr=r(rRe," \u2014 "),CH=n(rRe,"A",{href:!0});var jMt=s(CH);wyr=r(jMt,"FlaxElectraForSequenceClassification"),jMt.forEach(t),Ayr=r(rRe," (ELECTRA model)"),rRe.forEach(t),yyr=i(ye),VM=n(ye,"LI",{});var tRe=s(VM);sTe=n(tRe,"STRONG",{});var DMt=s(sTe);Lyr=r(DMt,"mbart"),DMt.forEach(t),xyr=r(tRe," \u2014 "),wH=n(tRe,"A",{href:!0});var GMt=s(wH);kyr=r(GMt,"FlaxMBartForSequenceClassification"),GMt.forEach(t),Syr=r(tRe," (mBART model)"),tRe.forEach(t),Ryr=i(ye),XM=n(ye,"LI",{});var aRe=s(XM);lTe=n(aRe,"STRONG",{});var OMt=s(lTe);Byr=r(OMt,"roberta"),OMt.forEach(t),Pyr=r(aRe," \u2014 "),AH=n(aRe,"A",{href:!0});var VMt=s(AH);$yr=r(VMt,"FlaxRobertaForSequenceClassification"),VMt.forEach(t),Iyr=r(aRe," (RoBERTa model)"),aRe.forEach(t),qyr=i(ye),zM=n(ye,"LI",{});var nRe=s(zM);iTe=n(nRe,"STRONG",{});var XMt=s(iTe);Nyr=r(XMt,"roformer"),XMt.forEach(t),jyr=r(nRe," \u2014 "),yH=n(nRe,"A",{href:!0});var zMt=s(yH);Dyr=r(zMt,"FlaxRoFormerForSequenceClassification"),zMt.forEach(t),Gyr=r(nRe," (RoFormer model)"),nRe.forEach(t),Oyr=i(ye),QM=n(ye,"LI",{});var sRe=s(QM);dTe=n(sRe,"STRONG",{});var QMt=s(dTe);Vyr=r(QMt,"xlm-roberta"),QMt.forEach(t),Xyr=r(sRe," \u2014 "),LH=n(sRe,"A",{href:!0});var WMt=s(LH);zyr=r(WMt,"FlaxXLMRobertaForSequenceClassification"),WMt.forEach(t),Qyr=r(sRe," (XLM-RoBERTa model)"),sRe.forEach(t),ye.forEach(t),Wyr=i(Ba),cTe=n(Ba,"P",{});var HMt=s(cTe);Hyr=r(HMt,"Examples:"),HMt.forEach(t),Uyr=i(Ba),m(P0.$$.fragment,Ba),Ba.forEach(t),wi.forEach(t),APe=i(c),vf=n(c,"H2",{class:!0});var qIe=s(vf);WM=n(qIe,"A",{id:!0,class:!0,href:!0});var UMt=s(WM);fTe=n(UMt,"SPAN",{});var JMt=s(fTe);m($0.$$.fragment,JMt),JMt.forEach(t),UMt.forEach(t),Jyr=i(qIe),mTe=n(qIe,"SPAN",{});var YMt=s(mTe);Yyr=r(YMt,"FlaxAutoModelForQuestionAnswering"),YMt.forEach(t),qIe.forEach(t),yPe=i(c),Nr=n(c,"DIV",{class:!0});var yi=s(Nr);m(I0.$$.fragment,yi),Kyr=i(yi),Ff=n(yi,"P",{});var tY=s(Ff);Zyr=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xH=n(tY,"A",{href:!0});var KMt=s(xH);eLr=r(KMt,"from_pretrained()"),KMt.forEach(t),oLr=r(tY," class method or the "),kH=n(tY,"A",{href:!0});var ZMt=s(kH);rLr=r(ZMt,"from_config()"),ZMt.forEach(t),tLr=r(tY,` class
method.`),tY.forEach(t),aLr=i(yi),q0=n(yi,"P",{});var NIe=s(q0);nLr=r(NIe,"This class cannot be instantiated directly using "),gTe=n(NIe,"CODE",{});var e4t=s(gTe);sLr=r(e4t,"__init__()"),e4t.forEach(t),lLr=r(NIe," (throws an error)."),NIe.forEach(t),iLr=i(yi),Rt=n(yi,"DIV",{class:!0});var Li=s(Rt);m(N0.$$.fragment,Li),dLr=i(Li),hTe=n(Li,"P",{});var o4t=s(hTe);cLr=r(o4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),o4t.forEach(t),fLr=i(Li),Tf=n(Li,"P",{});var aY=s(Tf);mLr=r(aY,`Note:
Loading a model from its configuration file does `),pTe=n(aY,"STRONG",{});var r4t=s(pTe);gLr=r(r4t,"not"),r4t.forEach(t),hLr=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=n(aY,"A",{href:!0});var t4t=s(SH);pLr=r(t4t,"from_pretrained()"),t4t.forEach(t),_Lr=r(aY," to load the model weights."),aY.forEach(t),uLr=i(Li),_Te=n(Li,"P",{});var a4t=s(_Te);bLr=r(a4t,"Examples:"),a4t.forEach(t),vLr=i(Li),m(j0.$$.fragment,Li),Li.forEach(t),FLr=i(yi),Bo=n(yi,"DIV",{class:!0});var Pa=s(Bo);m(D0.$$.fragment,Pa),TLr=i(Pa),uTe=n(Pa,"P",{});var n4t=s(uTe);MLr=r(n4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),n4t.forEach(t),ELr=i(Pa),In=n(Pa,"P",{});var EE=s(In);CLr=r(EE,"The model class to instantiate is selected based on the "),bTe=n(EE,"CODE",{});var s4t=s(bTe);wLr=r(s4t,"model_type"),s4t.forEach(t),ALr=r(EE,` property of the config object (either
passed as an argument or loaded from `),vTe=n(EE,"CODE",{});var l4t=s(vTe);yLr=r(l4t,"pretrained_model_name_or_path"),l4t.forEach(t),LLr=r(EE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=n(EE,"CODE",{});var i4t=s(FTe);xLr=r(i4t,"pretrained_model_name_or_path"),i4t.forEach(t),kLr=r(EE,":"),EE.forEach(t),SLr=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);HM=n(Le,"LI",{});var lRe=s(HM);TTe=n(lRe,"STRONG",{});var d4t=s(TTe);RLr=r(d4t,"albert"),d4t.forEach(t),BLr=r(lRe," \u2014 "),RH=n(lRe,"A",{href:!0});var c4t=s(RH);PLr=r(c4t,"FlaxAlbertForQuestionAnswering"),c4t.forEach(t),$Lr=r(lRe," (ALBERT model)"),lRe.forEach(t),ILr=i(Le),UM=n(Le,"LI",{});var iRe=s(UM);MTe=n(iRe,"STRONG",{});var f4t=s(MTe);qLr=r(f4t,"bart"),f4t.forEach(t),NLr=r(iRe," \u2014 "),BH=n(iRe,"A",{href:!0});var m4t=s(BH);jLr=r(m4t,"FlaxBartForQuestionAnswering"),m4t.forEach(t),DLr=r(iRe," (BART model)"),iRe.forEach(t),GLr=i(Le),JM=n(Le,"LI",{});var dRe=s(JM);ETe=n(dRe,"STRONG",{});var g4t=s(ETe);OLr=r(g4t,"bert"),g4t.forEach(t),VLr=r(dRe," \u2014 "),PH=n(dRe,"A",{href:!0});var h4t=s(PH);XLr=r(h4t,"FlaxBertForQuestionAnswering"),h4t.forEach(t),zLr=r(dRe," (BERT model)"),dRe.forEach(t),QLr=i(Le),YM=n(Le,"LI",{});var cRe=s(YM);CTe=n(cRe,"STRONG",{});var p4t=s(CTe);WLr=r(p4t,"big_bird"),p4t.forEach(t),HLr=r(cRe," \u2014 "),$H=n(cRe,"A",{href:!0});var _4t=s($H);ULr=r(_4t,"FlaxBigBirdForQuestionAnswering"),_4t.forEach(t),JLr=r(cRe," (BigBird model)"),cRe.forEach(t),YLr=i(Le),KM=n(Le,"LI",{});var fRe=s(KM);wTe=n(fRe,"STRONG",{});var u4t=s(wTe);KLr=r(u4t,"distilbert"),u4t.forEach(t),ZLr=r(fRe," \u2014 "),IH=n(fRe,"A",{href:!0});var b4t=s(IH);exr=r(b4t,"FlaxDistilBertForQuestionAnswering"),b4t.forEach(t),oxr=r(fRe," (DistilBERT model)"),fRe.forEach(t),rxr=i(Le),ZM=n(Le,"LI",{});var mRe=s(ZM);ATe=n(mRe,"STRONG",{});var v4t=s(ATe);txr=r(v4t,"electra"),v4t.forEach(t),axr=r(mRe," \u2014 "),qH=n(mRe,"A",{href:!0});var F4t=s(qH);nxr=r(F4t,"FlaxElectraForQuestionAnswering"),F4t.forEach(t),sxr=r(mRe," (ELECTRA model)"),mRe.forEach(t),lxr=i(Le),e4=n(Le,"LI",{});var gRe=s(e4);yTe=n(gRe,"STRONG",{});var T4t=s(yTe);ixr=r(T4t,"mbart"),T4t.forEach(t),dxr=r(gRe," \u2014 "),NH=n(gRe,"A",{href:!0});var M4t=s(NH);cxr=r(M4t,"FlaxMBartForQuestionAnswering"),M4t.forEach(t),fxr=r(gRe," (mBART model)"),gRe.forEach(t),mxr=i(Le),o4=n(Le,"LI",{});var hRe=s(o4);LTe=n(hRe,"STRONG",{});var E4t=s(LTe);gxr=r(E4t,"roberta"),E4t.forEach(t),hxr=r(hRe," \u2014 "),jH=n(hRe,"A",{href:!0});var C4t=s(jH);pxr=r(C4t,"FlaxRobertaForQuestionAnswering"),C4t.forEach(t),_xr=r(hRe," (RoBERTa model)"),hRe.forEach(t),uxr=i(Le),r4=n(Le,"LI",{});var pRe=s(r4);xTe=n(pRe,"STRONG",{});var w4t=s(xTe);bxr=r(w4t,"roformer"),w4t.forEach(t),vxr=r(pRe," \u2014 "),DH=n(pRe,"A",{href:!0});var A4t=s(DH);Fxr=r(A4t,"FlaxRoFormerForQuestionAnswering"),A4t.forEach(t),Txr=r(pRe," (RoFormer model)"),pRe.forEach(t),Mxr=i(Le),t4=n(Le,"LI",{});var _Re=s(t4);kTe=n(_Re,"STRONG",{});var y4t=s(kTe);Exr=r(y4t,"xlm-roberta"),y4t.forEach(t),Cxr=r(_Re," \u2014 "),GH=n(_Re,"A",{href:!0});var L4t=s(GH);wxr=r(L4t,"FlaxXLMRobertaForQuestionAnswering"),L4t.forEach(t),Axr=r(_Re," (XLM-RoBERTa model)"),_Re.forEach(t),Le.forEach(t),yxr=i(Pa),STe=n(Pa,"P",{});var x4t=s(STe);Lxr=r(x4t,"Examples:"),x4t.forEach(t),xxr=i(Pa),m(G0.$$.fragment,Pa),Pa.forEach(t),yi.forEach(t),LPe=i(c),Mf=n(c,"H2",{class:!0});var jIe=s(Mf);a4=n(jIe,"A",{id:!0,class:!0,href:!0});var k4t=s(a4);RTe=n(k4t,"SPAN",{});var S4t=s(RTe);m(O0.$$.fragment,S4t),S4t.forEach(t),k4t.forEach(t),kxr=i(jIe),BTe=n(jIe,"SPAN",{});var R4t=s(BTe);Sxr=r(R4t,"FlaxAutoModelForTokenClassification"),R4t.forEach(t),jIe.forEach(t),xPe=i(c),jr=n(c,"DIV",{class:!0});var xi=s(jr);m(V0.$$.fragment,xi),Rxr=i(xi),Ef=n(xi,"P",{});var nY=s(Ef);Bxr=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OH=n(nY,"A",{href:!0});var B4t=s(OH);Pxr=r(B4t,"from_pretrained()"),B4t.forEach(t),$xr=r(nY," class method or the "),VH=n(nY,"A",{href:!0});var P4t=s(VH);Ixr=r(P4t,"from_config()"),P4t.forEach(t),qxr=r(nY,` class
method.`),nY.forEach(t),Nxr=i(xi),X0=n(xi,"P",{});var DIe=s(X0);jxr=r(DIe,"This class cannot be instantiated directly using "),PTe=n(DIe,"CODE",{});var $4t=s(PTe);Dxr=r($4t,"__init__()"),$4t.forEach(t),Gxr=r(DIe," (throws an error)."),DIe.forEach(t),Oxr=i(xi),Bt=n(xi,"DIV",{class:!0});var ki=s(Bt);m(z0.$$.fragment,ki),Vxr=i(ki),$Te=n(ki,"P",{});var I4t=s($Te);Xxr=r(I4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),I4t.forEach(t),zxr=i(ki),Cf=n(ki,"P",{});var sY=s(Cf);Qxr=r(sY,`Note:
Loading a model from its configuration file does `),ITe=n(sY,"STRONG",{});var q4t=s(ITe);Wxr=r(q4t,"not"),q4t.forEach(t),Hxr=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(sY,"A",{href:!0});var N4t=s(XH);Uxr=r(N4t,"from_pretrained()"),N4t.forEach(t),Jxr=r(sY," to load the model weights."),sY.forEach(t),Yxr=i(ki),qTe=n(ki,"P",{});var j4t=s(qTe);Kxr=r(j4t,"Examples:"),j4t.forEach(t),Zxr=i(ki),m(Q0.$$.fragment,ki),ki.forEach(t),ekr=i(xi),Po=n(xi,"DIV",{class:!0});var $a=s(Po);m(W0.$$.fragment,$a),okr=i($a),NTe=n($a,"P",{});var D4t=s(NTe);rkr=r(D4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),D4t.forEach(t),tkr=i($a),qn=n($a,"P",{});var CE=s(qn);akr=r(CE,"The model class to instantiate is selected based on the "),jTe=n(CE,"CODE",{});var G4t=s(jTe);nkr=r(G4t,"model_type"),G4t.forEach(t),skr=r(CE,` property of the config object (either
passed as an argument or loaded from `),DTe=n(CE,"CODE",{});var O4t=s(DTe);lkr=r(O4t,"pretrained_model_name_or_path"),O4t.forEach(t),ikr=r(CE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=n(CE,"CODE",{});var V4t=s(GTe);dkr=r(V4t,"pretrained_model_name_or_path"),V4t.forEach(t),ckr=r(CE,":"),CE.forEach(t),fkr=i($a),Be=n($a,"UL",{});var Oo=s(Be);n4=n(Oo,"LI",{});var uRe=s(n4);OTe=n(uRe,"STRONG",{});var X4t=s(OTe);mkr=r(X4t,"albert"),X4t.forEach(t),gkr=r(uRe," \u2014 "),zH=n(uRe,"A",{href:!0});var z4t=s(zH);hkr=r(z4t,"FlaxAlbertForTokenClassification"),z4t.forEach(t),pkr=r(uRe," (ALBERT model)"),uRe.forEach(t),_kr=i(Oo),s4=n(Oo,"LI",{});var bRe=s(s4);VTe=n(bRe,"STRONG",{});var Q4t=s(VTe);ukr=r(Q4t,"bert"),Q4t.forEach(t),bkr=r(bRe," \u2014 "),QH=n(bRe,"A",{href:!0});var W4t=s(QH);vkr=r(W4t,"FlaxBertForTokenClassification"),W4t.forEach(t),Fkr=r(bRe," (BERT model)"),bRe.forEach(t),Tkr=i(Oo),l4=n(Oo,"LI",{});var vRe=s(l4);XTe=n(vRe,"STRONG",{});var H4t=s(XTe);Mkr=r(H4t,"big_bird"),H4t.forEach(t),Ekr=r(vRe," \u2014 "),WH=n(vRe,"A",{href:!0});var U4t=s(WH);Ckr=r(U4t,"FlaxBigBirdForTokenClassification"),U4t.forEach(t),wkr=r(vRe," (BigBird model)"),vRe.forEach(t),Akr=i(Oo),i4=n(Oo,"LI",{});var FRe=s(i4);zTe=n(FRe,"STRONG",{});var J4t=s(zTe);ykr=r(J4t,"distilbert"),J4t.forEach(t),Lkr=r(FRe," \u2014 "),HH=n(FRe,"A",{href:!0});var Y4t=s(HH);xkr=r(Y4t,"FlaxDistilBertForTokenClassification"),Y4t.forEach(t),kkr=r(FRe," (DistilBERT model)"),FRe.forEach(t),Skr=i(Oo),d4=n(Oo,"LI",{});var TRe=s(d4);QTe=n(TRe,"STRONG",{});var K4t=s(QTe);Rkr=r(K4t,"electra"),K4t.forEach(t),Bkr=r(TRe," \u2014 "),UH=n(TRe,"A",{href:!0});var Z4t=s(UH);Pkr=r(Z4t,"FlaxElectraForTokenClassification"),Z4t.forEach(t),$kr=r(TRe," (ELECTRA model)"),TRe.forEach(t),Ikr=i(Oo),c4=n(Oo,"LI",{});var MRe=s(c4);WTe=n(MRe,"STRONG",{});var eEt=s(WTe);qkr=r(eEt,"roberta"),eEt.forEach(t),Nkr=r(MRe," \u2014 "),JH=n(MRe,"A",{href:!0});var oEt=s(JH);jkr=r(oEt,"FlaxRobertaForTokenClassification"),oEt.forEach(t),Dkr=r(MRe," (RoBERTa model)"),MRe.forEach(t),Gkr=i(Oo),f4=n(Oo,"LI",{});var ERe=s(f4);HTe=n(ERe,"STRONG",{});var rEt=s(HTe);Okr=r(rEt,"roformer"),rEt.forEach(t),Vkr=r(ERe," \u2014 "),YH=n(ERe,"A",{href:!0});var tEt=s(YH);Xkr=r(tEt,"FlaxRoFormerForTokenClassification"),tEt.forEach(t),zkr=r(ERe," (RoFormer model)"),ERe.forEach(t),Qkr=i(Oo),m4=n(Oo,"LI",{});var CRe=s(m4);UTe=n(CRe,"STRONG",{});var aEt=s(UTe);Wkr=r(aEt,"xlm-roberta"),aEt.forEach(t),Hkr=r(CRe," \u2014 "),KH=n(CRe,"A",{href:!0});var nEt=s(KH);Ukr=r(nEt,"FlaxXLMRobertaForTokenClassification"),nEt.forEach(t),Jkr=r(CRe," (XLM-RoBERTa model)"),CRe.forEach(t),Oo.forEach(t),Ykr=i($a),JTe=n($a,"P",{});var sEt=s(JTe);Kkr=r(sEt,"Examples:"),sEt.forEach(t),Zkr=i($a),m(H0.$$.fragment,$a),$a.forEach(t),xi.forEach(t),kPe=i(c),wf=n(c,"H2",{class:!0});var GIe=s(wf);g4=n(GIe,"A",{id:!0,class:!0,href:!0});var lEt=s(g4);YTe=n(lEt,"SPAN",{});var iEt=s(YTe);m(U0.$$.fragment,iEt),iEt.forEach(t),lEt.forEach(t),eSr=i(GIe),KTe=n(GIe,"SPAN",{});var dEt=s(KTe);oSr=r(dEt,"FlaxAutoModelForMultipleChoice"),dEt.forEach(t),GIe.forEach(t),SPe=i(c),Dr=n(c,"DIV",{class:!0});var Si=s(Dr);m(J0.$$.fragment,Si),rSr=i(Si),Af=n(Si,"P",{});var lY=s(Af);tSr=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZH=n(lY,"A",{href:!0});var cEt=s(ZH);aSr=r(cEt,"from_pretrained()"),cEt.forEach(t),nSr=r(lY," class method or the "),eU=n(lY,"A",{href:!0});var fEt=s(eU);sSr=r(fEt,"from_config()"),fEt.forEach(t),lSr=r(lY,` class
method.`),lY.forEach(t),iSr=i(Si),Y0=n(Si,"P",{});var OIe=s(Y0);dSr=r(OIe,"This class cannot be instantiated directly using "),ZTe=n(OIe,"CODE",{});var mEt=s(ZTe);cSr=r(mEt,"__init__()"),mEt.forEach(t),fSr=r(OIe," (throws an error)."),OIe.forEach(t),mSr=i(Si),Pt=n(Si,"DIV",{class:!0});var Ri=s(Pt);m(K0.$$.fragment,Ri),gSr=i(Ri),e8e=n(Ri,"P",{});var gEt=s(e8e);hSr=r(gEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gEt.forEach(t),pSr=i(Ri),yf=n(Ri,"P",{});var iY=s(yf);_Sr=r(iY,`Note:
Loading a model from its configuration file does `),o8e=n(iY,"STRONG",{});var hEt=s(o8e);uSr=r(hEt,"not"),hEt.forEach(t),bSr=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(iY,"A",{href:!0});var pEt=s(oU);vSr=r(pEt,"from_pretrained()"),pEt.forEach(t),FSr=r(iY," to load the model weights."),iY.forEach(t),TSr=i(Ri),r8e=n(Ri,"P",{});var _Et=s(r8e);MSr=r(_Et,"Examples:"),_Et.forEach(t),ESr=i(Ri),m(Z0.$$.fragment,Ri),Ri.forEach(t),CSr=i(Si),$o=n(Si,"DIV",{class:!0});var Ia=s($o);m(ey.$$.fragment,Ia),wSr=i(Ia),t8e=n(Ia,"P",{});var uEt=s(t8e);ASr=r(uEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uEt.forEach(t),ySr=i(Ia),Nn=n(Ia,"P",{});var wE=s(Nn);LSr=r(wE,"The model class to instantiate is selected based on the "),a8e=n(wE,"CODE",{});var bEt=s(a8e);xSr=r(bEt,"model_type"),bEt.forEach(t),kSr=r(wE,` property of the config object (either
passed as an argument or loaded from `),n8e=n(wE,"CODE",{});var vEt=s(n8e);SSr=r(vEt,"pretrained_model_name_or_path"),vEt.forEach(t),RSr=r(wE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s8e=n(wE,"CODE",{});var FEt=s(s8e);BSr=r(FEt,"pretrained_model_name_or_path"),FEt.forEach(t),PSr=r(wE,":"),wE.forEach(t),$Sr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);h4=n(Vo,"LI",{});var wRe=s(h4);l8e=n(wRe,"STRONG",{});var TEt=s(l8e);ISr=r(TEt,"albert"),TEt.forEach(t),qSr=r(wRe," \u2014 "),rU=n(wRe,"A",{href:!0});var MEt=s(rU);NSr=r(MEt,"FlaxAlbertForMultipleChoice"),MEt.forEach(t),jSr=r(wRe," (ALBERT model)"),wRe.forEach(t),DSr=i(Vo),p4=n(Vo,"LI",{});var ARe=s(p4);i8e=n(ARe,"STRONG",{});var EEt=s(i8e);GSr=r(EEt,"bert"),EEt.forEach(t),OSr=r(ARe," \u2014 "),tU=n(ARe,"A",{href:!0});var CEt=s(tU);VSr=r(CEt,"FlaxBertForMultipleChoice"),CEt.forEach(t),XSr=r(ARe," (BERT model)"),ARe.forEach(t),zSr=i(Vo),_4=n(Vo,"LI",{});var yRe=s(_4);d8e=n(yRe,"STRONG",{});var wEt=s(d8e);QSr=r(wEt,"big_bird"),wEt.forEach(t),WSr=r(yRe," \u2014 "),aU=n(yRe,"A",{href:!0});var AEt=s(aU);HSr=r(AEt,"FlaxBigBirdForMultipleChoice"),AEt.forEach(t),USr=r(yRe," (BigBird model)"),yRe.forEach(t),JSr=i(Vo),u4=n(Vo,"LI",{});var LRe=s(u4);c8e=n(LRe,"STRONG",{});var yEt=s(c8e);YSr=r(yEt,"distilbert"),yEt.forEach(t),KSr=r(LRe," \u2014 "),nU=n(LRe,"A",{href:!0});var LEt=s(nU);ZSr=r(LEt,"FlaxDistilBertForMultipleChoice"),LEt.forEach(t),eRr=r(LRe," (DistilBERT model)"),LRe.forEach(t),oRr=i(Vo),b4=n(Vo,"LI",{});var xRe=s(b4);f8e=n(xRe,"STRONG",{});var xEt=s(f8e);rRr=r(xEt,"electra"),xEt.forEach(t),tRr=r(xRe," \u2014 "),sU=n(xRe,"A",{href:!0});var kEt=s(sU);aRr=r(kEt,"FlaxElectraForMultipleChoice"),kEt.forEach(t),nRr=r(xRe," (ELECTRA model)"),xRe.forEach(t),sRr=i(Vo),v4=n(Vo,"LI",{});var kRe=s(v4);m8e=n(kRe,"STRONG",{});var SEt=s(m8e);lRr=r(SEt,"roberta"),SEt.forEach(t),iRr=r(kRe," \u2014 "),lU=n(kRe,"A",{href:!0});var REt=s(lU);dRr=r(REt,"FlaxRobertaForMultipleChoice"),REt.forEach(t),cRr=r(kRe," (RoBERTa model)"),kRe.forEach(t),fRr=i(Vo),F4=n(Vo,"LI",{});var SRe=s(F4);g8e=n(SRe,"STRONG",{});var BEt=s(g8e);mRr=r(BEt,"roformer"),BEt.forEach(t),gRr=r(SRe," \u2014 "),iU=n(SRe,"A",{href:!0});var PEt=s(iU);hRr=r(PEt,"FlaxRoFormerForMultipleChoice"),PEt.forEach(t),pRr=r(SRe," (RoFormer model)"),SRe.forEach(t),_Rr=i(Vo),T4=n(Vo,"LI",{});var RRe=s(T4);h8e=n(RRe,"STRONG",{});var $Et=s(h8e);uRr=r($Et,"xlm-roberta"),$Et.forEach(t),bRr=r(RRe," \u2014 "),dU=n(RRe,"A",{href:!0});var IEt=s(dU);vRr=r(IEt,"FlaxXLMRobertaForMultipleChoice"),IEt.forEach(t),FRr=r(RRe," (XLM-RoBERTa model)"),RRe.forEach(t),Vo.forEach(t),TRr=i(Ia),p8e=n(Ia,"P",{});var qEt=s(p8e);MRr=r(qEt,"Examples:"),qEt.forEach(t),ERr=i(Ia),m(oy.$$.fragment,Ia),Ia.forEach(t),Si.forEach(t),RPe=i(c),Lf=n(c,"H2",{class:!0});var VIe=s(Lf);M4=n(VIe,"A",{id:!0,class:!0,href:!0});var NEt=s(M4);_8e=n(NEt,"SPAN",{});var jEt=s(_8e);m(ry.$$.fragment,jEt),jEt.forEach(t),NEt.forEach(t),CRr=i(VIe),u8e=n(VIe,"SPAN",{});var DEt=s(u8e);wRr=r(DEt,"FlaxAutoModelForNextSentencePrediction"),DEt.forEach(t),VIe.forEach(t),BPe=i(c),Gr=n(c,"DIV",{class:!0});var Bi=s(Gr);m(ty.$$.fragment,Bi),ARr=i(Bi),xf=n(Bi,"P",{});var dY=s(xf);yRr=r(dY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cU=n(dY,"A",{href:!0});var GEt=s(cU);LRr=r(GEt,"from_pretrained()"),GEt.forEach(t),xRr=r(dY," class method or the "),fU=n(dY,"A",{href:!0});var OEt=s(fU);kRr=r(OEt,"from_config()"),OEt.forEach(t),SRr=r(dY,` class
method.`),dY.forEach(t),RRr=i(Bi),ay=n(Bi,"P",{});var XIe=s(ay);BRr=r(XIe,"This class cannot be instantiated directly using "),b8e=n(XIe,"CODE",{});var VEt=s(b8e);PRr=r(VEt,"__init__()"),VEt.forEach(t),$Rr=r(XIe," (throws an error)."),XIe.forEach(t),IRr=i(Bi),$t=n(Bi,"DIV",{class:!0});var Pi=s($t);m(ny.$$.fragment,Pi),qRr=i(Pi),v8e=n(Pi,"P",{});var XEt=s(v8e);NRr=r(XEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),XEt.forEach(t),jRr=i(Pi),kf=n(Pi,"P",{});var cY=s(kf);DRr=r(cY,`Note:
Loading a model from its configuration file does `),F8e=n(cY,"STRONG",{});var zEt=s(F8e);GRr=r(zEt,"not"),zEt.forEach(t),ORr=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=n(cY,"A",{href:!0});var QEt=s(mU);VRr=r(QEt,"from_pretrained()"),QEt.forEach(t),XRr=r(cY," to load the model weights."),cY.forEach(t),zRr=i(Pi),T8e=n(Pi,"P",{});var WEt=s(T8e);QRr=r(WEt,"Examples:"),WEt.forEach(t),WRr=i(Pi),m(sy.$$.fragment,Pi),Pi.forEach(t),HRr=i(Bi),Io=n(Bi,"DIV",{class:!0});var qa=s(Io);m(ly.$$.fragment,qa),URr=i(qa),M8e=n(qa,"P",{});var HEt=s(M8e);JRr=r(HEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),HEt.forEach(t),YRr=i(qa),jn=n(qa,"P",{});var AE=s(jn);KRr=r(AE,"The model class to instantiate is selected based on the "),E8e=n(AE,"CODE",{});var UEt=s(E8e);ZRr=r(UEt,"model_type"),UEt.forEach(t),eBr=r(AE,` property of the config object (either
passed as an argument or loaded from `),C8e=n(AE,"CODE",{});var JEt=s(C8e);oBr=r(JEt,"pretrained_model_name_or_path"),JEt.forEach(t),rBr=r(AE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w8e=n(AE,"CODE",{});var YEt=s(w8e);tBr=r(YEt,"pretrained_model_name_or_path"),YEt.forEach(t),aBr=r(AE,":"),AE.forEach(t),nBr=i(qa),A8e=n(qa,"UL",{});var KEt=s(A8e);E4=n(KEt,"LI",{});var BRe=s(E4);y8e=n(BRe,"STRONG",{});var ZEt=s(y8e);sBr=r(ZEt,"bert"),ZEt.forEach(t),lBr=r(BRe," \u2014 "),gU=n(BRe,"A",{href:!0});var e5t=s(gU);iBr=r(e5t,"FlaxBertForNextSentencePrediction"),e5t.forEach(t),dBr=r(BRe," (BERT model)"),BRe.forEach(t),KEt.forEach(t),cBr=i(qa),L8e=n(qa,"P",{});var o5t=s(L8e);fBr=r(o5t,"Examples:"),o5t.forEach(t),mBr=i(qa),m(iy.$$.fragment,qa),qa.forEach(t),Bi.forEach(t),PPe=i(c),Sf=n(c,"H2",{class:!0});var zIe=s(Sf);C4=n(zIe,"A",{id:!0,class:!0,href:!0});var r5t=s(C4);x8e=n(r5t,"SPAN",{});var t5t=s(x8e);m(dy.$$.fragment,t5t),t5t.forEach(t),r5t.forEach(t),gBr=i(zIe),k8e=n(zIe,"SPAN",{});var a5t=s(k8e);hBr=r(a5t,"FlaxAutoModelForImageClassification"),a5t.forEach(t),zIe.forEach(t),$Pe=i(c),Or=n(c,"DIV",{class:!0});var $i=s(Or);m(cy.$$.fragment,$i),pBr=i($i),Rf=n($i,"P",{});var fY=s(Rf);_Br=r(fY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hU=n(fY,"A",{href:!0});var n5t=s(hU);uBr=r(n5t,"from_pretrained()"),n5t.forEach(t),bBr=r(fY," class method or the "),pU=n(fY,"A",{href:!0});var s5t=s(pU);vBr=r(s5t,"from_config()"),s5t.forEach(t),FBr=r(fY,` class
method.`),fY.forEach(t),TBr=i($i),fy=n($i,"P",{});var QIe=s(fy);MBr=r(QIe,"This class cannot be instantiated directly using "),S8e=n(QIe,"CODE",{});var l5t=s(S8e);EBr=r(l5t,"__init__()"),l5t.forEach(t),CBr=r(QIe," (throws an error)."),QIe.forEach(t),wBr=i($i),It=n($i,"DIV",{class:!0});var Ii=s(It);m(my.$$.fragment,Ii),ABr=i(Ii),R8e=n(Ii,"P",{});var i5t=s(R8e);yBr=r(i5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),i5t.forEach(t),LBr=i(Ii),Bf=n(Ii,"P",{});var mY=s(Bf);xBr=r(mY,`Note:
Loading a model from its configuration file does `),B8e=n(mY,"STRONG",{});var d5t=s(B8e);kBr=r(d5t,"not"),d5t.forEach(t),SBr=r(mY,` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=n(mY,"A",{href:!0});var c5t=s(_U);RBr=r(c5t,"from_pretrained()"),c5t.forEach(t),BBr=r(mY," to load the model weights."),mY.forEach(t),PBr=i(Ii),P8e=n(Ii,"P",{});var f5t=s(P8e);$Br=r(f5t,"Examples:"),f5t.forEach(t),IBr=i(Ii),m(gy.$$.fragment,Ii),Ii.forEach(t),qBr=i($i),qo=n($i,"DIV",{class:!0});var Na=s(qo);m(hy.$$.fragment,Na),NBr=i(Na),$8e=n(Na,"P",{});var m5t=s($8e);jBr=r(m5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),m5t.forEach(t),DBr=i(Na),Dn=n(Na,"P",{});var yE=s(Dn);GBr=r(yE,"The model class to instantiate is selected based on the "),I8e=n(yE,"CODE",{});var g5t=s(I8e);OBr=r(g5t,"model_type"),g5t.forEach(t),VBr=r(yE,` property of the config object (either
passed as an argument or loaded from `),q8e=n(yE,"CODE",{});var h5t=s(q8e);XBr=r(h5t,"pretrained_model_name_or_path"),h5t.forEach(t),zBr=r(yE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N8e=n(yE,"CODE",{});var p5t=s(N8e);QBr=r(p5t,"pretrained_model_name_or_path"),p5t.forEach(t),WBr=r(yE,":"),yE.forEach(t),HBr=i(Na),py=n(Na,"UL",{});var WIe=s(py);w4=n(WIe,"LI",{});var PRe=s(w4);j8e=n(PRe,"STRONG",{});var _5t=s(j8e);UBr=r(_5t,"beit"),_5t.forEach(t),JBr=r(PRe," \u2014 "),uU=n(PRe,"A",{href:!0});var u5t=s(uU);YBr=r(u5t,"FlaxBeitForImageClassification"),u5t.forEach(t),KBr=r(PRe," (BEiT model)"),PRe.forEach(t),ZBr=i(WIe),A4=n(WIe,"LI",{});var $Re=s(A4);D8e=n($Re,"STRONG",{});var b5t=s(D8e);ePr=r(b5t,"vit"),b5t.forEach(t),oPr=r($Re," \u2014 "),bU=n($Re,"A",{href:!0});var v5t=s(bU);rPr=r(v5t,"FlaxViTForImageClassification"),v5t.forEach(t),tPr=r($Re," (ViT model)"),$Re.forEach(t),WIe.forEach(t),aPr=i(Na),G8e=n(Na,"P",{});var F5t=s(G8e);nPr=r(F5t,"Examples:"),F5t.forEach(t),sPr=i(Na),m(_y.$$.fragment,Na),Na.forEach(t),$i.forEach(t),IPe=i(c),Pf=n(c,"H2",{class:!0});var HIe=s(Pf);y4=n(HIe,"A",{id:!0,class:!0,href:!0});var T5t=s(y4);O8e=n(T5t,"SPAN",{});var M5t=s(O8e);m(uy.$$.fragment,M5t),M5t.forEach(t),T5t.forEach(t),lPr=i(HIe),V8e=n(HIe,"SPAN",{});var E5t=s(V8e);iPr=r(E5t,"FlaxAutoModelForVision2Seq"),E5t.forEach(t),HIe.forEach(t),qPe=i(c),Vr=n(c,"DIV",{class:!0});var qi=s(Vr);m(by.$$.fragment,qi),dPr=i(qi),$f=n(qi,"P",{});var gY=s($f);cPr=r(gY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vU=n(gY,"A",{href:!0});var C5t=s(vU);fPr=r(C5t,"from_pretrained()"),C5t.forEach(t),mPr=r(gY," class method or the "),FU=n(gY,"A",{href:!0});var w5t=s(FU);gPr=r(w5t,"from_config()"),w5t.forEach(t),hPr=r(gY,` class
method.`),gY.forEach(t),pPr=i(qi),vy=n(qi,"P",{});var UIe=s(vy);_Pr=r(UIe,"This class cannot be instantiated directly using "),X8e=n(UIe,"CODE",{});var A5t=s(X8e);uPr=r(A5t,"__init__()"),A5t.forEach(t),bPr=r(UIe," (throws an error)."),UIe.forEach(t),vPr=i(qi),qt=n(qi,"DIV",{class:!0});var Ni=s(qt);m(Fy.$$.fragment,Ni),FPr=i(Ni),z8e=n(Ni,"P",{});var y5t=s(z8e);TPr=r(y5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),y5t.forEach(t),MPr=i(Ni),If=n(Ni,"P",{});var hY=s(If);EPr=r(hY,`Note:
Loading a model from its configuration file does `),Q8e=n(hY,"STRONG",{});var L5t=s(Q8e);CPr=r(L5t,"not"),L5t.forEach(t),wPr=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=n(hY,"A",{href:!0});var x5t=s(TU);APr=r(x5t,"from_pretrained()"),x5t.forEach(t),yPr=r(hY," to load the model weights."),hY.forEach(t),LPr=i(Ni),W8e=n(Ni,"P",{});var k5t=s(W8e);xPr=r(k5t,"Examples:"),k5t.forEach(t),kPr=i(Ni),m(Ty.$$.fragment,Ni),Ni.forEach(t),SPr=i(qi),No=n(qi,"DIV",{class:!0});var ja=s(No);m(My.$$.fragment,ja),RPr=i(ja),H8e=n(ja,"P",{});var S5t=s(H8e);BPr=r(S5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),S5t.forEach(t),PPr=i(ja),Gn=n(ja,"P",{});var LE=s(Gn);$Pr=r(LE,"The model class to instantiate is selected based on the "),U8e=n(LE,"CODE",{});var R5t=s(U8e);IPr=r(R5t,"model_type"),R5t.forEach(t),qPr=r(LE,` property of the config object (either
passed as an argument or loaded from `),J8e=n(LE,"CODE",{});var B5t=s(J8e);NPr=r(B5t,"pretrained_model_name_or_path"),B5t.forEach(t),jPr=r(LE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y8e=n(LE,"CODE",{});var P5t=s(Y8e);DPr=r(P5t,"pretrained_model_name_or_path"),P5t.forEach(t),GPr=r(LE,":"),LE.forEach(t),OPr=i(ja),K8e=n(ja,"UL",{});var $5t=s(K8e);L4=n($5t,"LI",{});var IRe=s(L4);Z8e=n(IRe,"STRONG",{});var I5t=s(Z8e);VPr=r(I5t,"vision-encoder-decoder"),I5t.forEach(t),XPr=r(IRe," \u2014 "),MU=n(IRe,"A",{href:!0});var q5t=s(MU);zPr=r(q5t,"FlaxVisionEncoderDecoderModel"),q5t.forEach(t),QPr=r(IRe," (Vision Encoder decoder model)"),IRe.forEach(t),$5t.forEach(t),WPr=i(ja),e7e=n(ja,"P",{});var N5t=s(e7e);HPr=r(N5t,"Examples:"),N5t.forEach(t),UPr=i(ja),m(Ey.$$.fragment,ja),ja.forEach(t),qi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(H5t)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(ce,"class","relative group"),d(On,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.AutoModel"),d(zn,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.AutoTokenizer"),d(zi,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertModel"),d(Vf,"id","extending-the-auto-classes"),d(Vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vf,"href","#extending-the-auto-classes"),d(Qi,"class","relative group"),d(zf,"id","transformers.AutoConfig"),d(zf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zf,"href","#transformers.AutoConfig"),d(Wi,"class","relative group"),d(xL,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(kL,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertConfig"),d(SL,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartConfig"),d(RL,"href","/docs/transformers/pr_16879/en/model_doc/beit#transformers.BeitConfig"),d(BL,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertConfig"),d(PL,"href","/docs/transformers/pr_16879/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d($L,"href","/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdConfig"),d(IL,"href","/docs/transformers/pr_16879/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(qL,"href","/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(NL,"href","/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(jL,"href","/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertConfig"),d(DL,"href","/docs/transformers/pr_16879/en/model_doc/canine#transformers.CanineConfig"),d(GL,"href","/docs/transformers/pr_16879/en/model_doc/clip#transformers.CLIPConfig"),d(OL,"href","/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertConfig"),d(VL,"href","/docs/transformers/pr_16879/en/model_doc/convnext#transformers.ConvNextConfig"),d(XL,"href","/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.CTRLConfig"),d(zL,"href","/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(QL,"href","/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(WL,"href","/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(HL,"href","/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaConfig"),d(UL,"href","/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(JL,"href","/docs/transformers/pr_16879/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(YL,"href","/docs/transformers/pr_16879/en/model_doc/deit#transformers.DeiTConfig"),d(KL,"href","/docs/transformers/pr_16879/en/model_doc/detr#transformers.DetrConfig"),d(ZL,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertConfig"),d(ex,"href","/docs/transformers/pr_16879/en/model_doc/dpr#transformers.DPRConfig"),d(ox,"href","/docs/transformers/pr_16879/en/model_doc/dpt#transformers.DPTConfig"),d(rx,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraConfig"),d(tx,"href","/docs/transformers/pr_16879/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(ax,"href","/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertConfig"),d(nx,"href","/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetConfig"),d(sx,"href","/docs/transformers/pr_16879/en/model_doc/fsmt#transformers.FSMTConfig"),d(lx,"href","/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelConfig"),d(ix,"href","/docs/transformers/pr_16879/en/model_doc/glpn#transformers.GLPNConfig"),d(dx,"href","/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2Config"),d(cx,"href","/docs/transformers/pr_16879/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(fx,"href","/docs/transformers/pr_16879/en/model_doc/gptj#transformers.GPTJConfig"),d(mx,"href","/docs/transformers/pr_16879/en/model_doc/hubert#transformers.HubertConfig"),d(gx,"href","/docs/transformers/pr_16879/en/model_doc/ibert#transformers.IBertConfig"),d(hx,"href","/docs/transformers/pr_16879/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(px,"href","/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(_x,"href","/docs/transformers/pr_16879/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(ux,"href","/docs/transformers/pr_16879/en/model_doc/led#transformers.LEDConfig"),d(bx,"href","/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerConfig"),d(vx,"href","/docs/transformers/pr_16879/en/model_doc/luke#transformers.LukeConfig"),d(Fx,"href","/docs/transformers/pr_16879/en/model_doc/lxmert#transformers.LxmertConfig"),d(Tx,"href","/docs/transformers/pr_16879/en/model_doc/m2m_100#transformers.M2M100Config"),d(Mx,"href","/docs/transformers/pr_16879/en/model_doc/marian#transformers.MarianConfig"),d(Ex,"href","/docs/transformers/pr_16879/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(Cx,"href","/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartConfig"),d(wx,"href","/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(Ax,"href","/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(yx,"href","/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetConfig"),d(Lx,"href","/docs/transformers/pr_16879/en/model_doc/mt5#transformers.MT5Config"),d(xx,"href","/docs/transformers/pr_16879/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(kx,"href","/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(Sx,"href","/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.PegasusConfig"),d(Rx,"href","/docs/transformers/pr_16879/en/model_doc/perceiver#transformers.PerceiverConfig"),d(Bx,"href","/docs/transformers/pr_16879/en/model_doc/plbart#transformers.PLBartConfig"),d(Px,"href","/docs/transformers/pr_16879/en/model_doc/poolformer#transformers.PoolFormerConfig"),d($x,"href","/docs/transformers/pr_16879/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(Ix,"href","/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(qx,"href","/docs/transformers/pr_16879/en/model_doc/rag#transformers.RagConfig"),d(Nx,"href","/docs/transformers/pr_16879/en/model_doc/realm#transformers.RealmConfig"),d(jx,"href","/docs/transformers/pr_16879/en/model_doc/reformer#transformers.ReformerConfig"),d(Dx,"href","/docs/transformers/pr_16879/en/model_doc/regnet#transformers.RegNetConfig"),d(Gx,"href","/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertConfig"),d(Ox,"href","/docs/transformers/pr_16879/en/model_doc/resnet#transformers.ResNetConfig"),d(Vx,"href","/docs/transformers/pr_16879/en/model_doc/retribert#transformers.RetriBertConfig"),d(Xx,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaConfig"),d(zx,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerConfig"),d(Qx,"href","/docs/transformers/pr_16879/en/model_doc/segformer#transformers.SegformerConfig"),d(Wx,"href","/docs/transformers/pr_16879/en/model_doc/sew#transformers.SEWConfig"),d(Hx,"href","/docs/transformers/pr_16879/en/model_doc/sew-d#transformers.SEWDConfig"),d(Ux,"href","/docs/transformers/pr_16879/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Jx,"href","/docs/transformers/pr_16879/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Yx,"href","/docs/transformers/pr_16879/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Kx,"href","/docs/transformers/pr_16879/en/model_doc/splinter#transformers.SplinterConfig"),d(Zx,"href","/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(ek,"href","/docs/transformers/pr_16879/en/model_doc/swin#transformers.SwinConfig"),d(ok,"href","/docs/transformers/pr_16879/en/model_doc/t5#transformers.T5Config"),d(rk,"href","/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TapasConfig"),d(tk,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartConfig"),d(ak,"href","/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(nk,"href","/docs/transformers/pr_16879/en/model_doc/trocr#transformers.TrOCRConfig"),d(sk,"href","/docs/transformers/pr_16879/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(lk,"href","/docs/transformers/pr_16879/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(ik,"href","/docs/transformers/pr_16879/en/model_doc/van#transformers.VanConfig"),d(dk,"href","/docs/transformers/pr_16879/en/model_doc/vilt#transformers.ViltConfig"),d(ck,"href","/docs/transformers/pr_16879/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(fk,"href","/docs/transformers/pr_16879/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(mk,"href","/docs/transformers/pr_16879/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(gk,"href","/docs/transformers/pr_16879/en/model_doc/vit#transformers.ViTConfig"),d(hk,"href","/docs/transformers/pr_16879/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(pk,"href","/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(_k,"href","/docs/transformers/pr_16879/en/model_doc/wavlm#transformers.WavLMConfig"),d(uk,"href","/docs/transformers/pr_16879/en/model_doc/xglm#transformers.XGLMConfig"),d(bk,"href","/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMConfig"),d(vk,"href","/docs/transformers/pr_16879/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(Fk,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(Tk,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(Mk,"href","/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetConfig"),d(Ek,"href","/docs/transformers/pr_16879/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gg,"id","transformers.AutoTokenizer"),d(Gg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gg,"href","#transformers.AutoTokenizer"),d(Ui,"class","relative group"),d(Ck,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(wk,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertTokenizer"),d(Ak,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(yk,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartTokenizer"),d(Lk,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartTokenizerFast"),d(xk,"href","/docs/transformers/pr_16879/en/model_doc/barthez#transformers.BarthezTokenizer"),d(kk,"href","/docs/transformers/pr_16879/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(Sk,"href","/docs/transformers/pr_16879/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(Rk,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertTokenizer"),d(Bk,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertTokenizerFast"),d(Pk,"href","/docs/transformers/pr_16879/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d($k,"href","/docs/transformers/pr_16879/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(Ik,"href","/docs/transformers/pr_16879/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(qk,"href","/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(Nk,"href","/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(jk,"href","/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Dk,"href","/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Gk,"href","/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Ok,"href","/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Vk,"href","/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Xk,"href","/docs/transformers/pr_16879/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(zk,"href","/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Qk,"href","/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Wk,"href","/docs/transformers/pr_16879/en/model_doc/canine#transformers.CanineTokenizer"),d(Hk,"href","/docs/transformers/pr_16879/en/model_doc/clip#transformers.CLIPTokenizer"),d(Uk,"href","/docs/transformers/pr_16879/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Jk,"href","/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Yk,"href","/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Kk,"href","/docs/transformers/pr_16879/en/model_doc/cpm#transformers.CpmTokenizer"),d(Zk,"href","/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(eS,"href","/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaTokenizer"),d(oS,"href","/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(rS,"href","/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(tS,"href","/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(aS,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(nS,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(sS,"href","/docs/transformers/pr_16879/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(lS,"href","/docs/transformers/pr_16879/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(iS,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraTokenizer"),d(dS,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(cS,"href","/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(fS,"href","/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetTokenizer"),d(mS,"href","/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(gS,"href","/docs/transformers/pr_16879/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(hS,"href","/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelTokenizer"),d(pS,"href","/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(_S,"href","/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(uS,"href","/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(bS,"href","/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(vS,"href","/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(FS,"href","/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(TS,"href","/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(MS,"href","/docs/transformers/pr_16879/en/model_doc/herbert#transformers.HerbertTokenizer"),d(ES,"href","/docs/transformers/pr_16879/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(CS,"href","/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(wS,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaTokenizer"),d(AS,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(yS,"href","/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(LS,"href","/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(xS,"href","/docs/transformers/pr_16879/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(kS,"href","/docs/transformers/pr_16879/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(SS,"href","/docs/transformers/pr_16879/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(RS,"href","/docs/transformers/pr_16879/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(BS,"href","/docs/transformers/pr_16879/en/model_doc/led#transformers.LEDTokenizer"),d(PS,"href","/docs/transformers/pr_16879/en/model_doc/led#transformers.LEDTokenizerFast"),d($S,"href","/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerTokenizer"),d(IS,"href","/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(qS,"href","/docs/transformers/pr_16879/en/model_doc/luke#transformers.LukeTokenizer"),d(NS,"href","/docs/transformers/pr_16879/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(jS,"href","/docs/transformers/pr_16879/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(DS,"href","/docs/transformers/pr_16879/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(GS,"href","/docs/transformers/pr_16879/en/model_doc/marian#transformers.MarianTokenizer"),d(OS,"href","/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartTokenizer"),d(VS,"href","/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(XS,"href","/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(zS,"href","/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(QS,"href","/docs/transformers/pr_16879/en/model_doc/mluke#transformers.MLukeTokenizer"),d(WS,"href","/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(HS,"href","/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(US,"href","/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(JS,"href","/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(YS,"href","/docs/transformers/pr_16879/en/model_doc/mt5#transformers.T5Tokenizer"),d(KS,"href","/docs/transformers/pr_16879/en/model_doc/mt5#transformers.T5TokenizerFast"),d(ZS,"href","/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(eR,"href","/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(oR,"href","/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(rR,"href","/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(tR,"href","/docs/transformers/pr_16879/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(aR,"href","/docs/transformers/pr_16879/en/model_doc/phobert#transformers.PhobertTokenizer"),d(nR,"href","/docs/transformers/pr_16879/en/model_doc/plbart#transformers.PLBartTokenizer"),d(sR,"href","/docs/transformers/pr_16879/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(lR,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertTokenizer"),d(iR,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertTokenizerFast"),d(dR,"href","/docs/transformers/pr_16879/en/model_doc/rag#transformers.RagTokenizer"),d(cR,"href","/docs/transformers/pr_16879/en/model_doc/realm#transformers.RealmTokenizer"),d(fR,"href","/docs/transformers/pr_16879/en/model_doc/realm#transformers.RealmTokenizerFast"),d(mR,"href","/docs/transformers/pr_16879/en/model_doc/reformer#transformers.ReformerTokenizer"),d(gR,"href","/docs/transformers/pr_16879/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(hR,"href","/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertTokenizer"),d(pR,"href","/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(_R,"href","/docs/transformers/pr_16879/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(uR,"href","/docs/transformers/pr_16879/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(bR,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaTokenizer"),d(vR,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(FR,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(TR,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(MR,"href","/docs/transformers/pr_16879/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(ER,"href","/docs/transformers/pr_16879/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(CR,"href","/docs/transformers/pr_16879/en/model_doc/splinter#transformers.SplinterTokenizer"),d(wR,"href","/docs/transformers/pr_16879/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(AR,"href","/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(yR,"href","/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(LR,"href","/docs/transformers/pr_16879/en/model_doc/mt5#transformers.T5Tokenizer"),d(xR,"href","/docs/transformers/pr_16879/en/model_doc/mt5#transformers.T5TokenizerFast"),d(kR,"href","/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TapasTokenizer"),d(SR,"href","/docs/transformers/pr_16879/en/model_doc/tapex#transformers.TapexTokenizer"),d(RR,"href","/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(BR,"href","/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(PR,"href","/docs/transformers/pr_16879/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d($R,"href","/docs/transformers/pr_16879/en/model_doc/xglm#transformers.XGLMTokenizer"),d(IR,"href","/docs/transformers/pr_16879/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(qR,"href","/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMTokenizer"),d(NR,"href","/docs/transformers/pr_16879/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(jR,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(DR,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(GR,"href","/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(OR,"href","/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bh,"id","transformers.AutoFeatureExtractor"),d(bh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bh,"href","#transformers.AutoFeatureExtractor"),d(Ji,"class","relative group"),d(VR,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(XR,"href","/docs/transformers/pr_16879/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(zR,"href","/docs/transformers/pr_16879/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(QR,"href","/docs/transformers/pr_16879/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(WR,"href","/docs/transformers/pr_16879/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(HR,"href","/docs/transformers/pr_16879/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(UR,"href","/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(JR,"href","/docs/transformers/pr_16879/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(YR,"href","/docs/transformers/pr_16879/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(KR,"href","/docs/transformers/pr_16879/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(ZR,"href","/docs/transformers/pr_16879/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(eB,"href","/docs/transformers/pr_16879/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(oB,"href","/docs/transformers/pr_16879/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(rB,"href","/docs/transformers/pr_16879/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(tB,"href","/docs/transformers/pr_16879/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(aB,"href","/docs/transformers/pr_16879/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(nB,"href","/docs/transformers/pr_16879/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(sB,"href","/docs/transformers/pr_16879/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(lB,"href","/docs/transformers/pr_16879/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(iB,"href","/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dh,"id","transformers.AutoProcessor"),d(Dh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Dh,"href","#transformers.AutoProcessor"),d(Yi,"class","relative group"),d(dB,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(cB,"href","/docs/transformers/pr_16879/en/model_doc/clip#transformers.CLIPProcessor"),d(fB,"href","/docs/transformers/pr_16879/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(mB,"href","/docs/transformers/pr_16879/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(gB,"href","/docs/transformers/pr_16879/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(hB,"href","/docs/transformers/pr_16879/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(pB,"href","/docs/transformers/pr_16879/en/model_doc/trocr#transformers.TrOCRProcessor"),d(_B,"href","/docs/transformers/pr_16879/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(uB,"href","/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yh,"id","transformers.AutoModel"),d(Yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yh,"href","#transformers.AutoModel"),d(Zi,"class","relative group"),d(bB,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vB,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FB,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TB,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertModel"),d(MB,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartModel"),d(EB,"href","/docs/transformers/pr_16879/en/model_doc/beit#transformers.BeitModel"),d(CB,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertModel"),d(wB,"href","/docs/transformers/pr_16879/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(AB,"href","/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdModel"),d(yB,"href","/docs/transformers/pr_16879/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(LB,"href","/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(xB,"href","/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(kB,"href","/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertModel"),d(SB,"href","/docs/transformers/pr_16879/en/model_doc/canine#transformers.CanineModel"),d(RB,"href","/docs/transformers/pr_16879/en/model_doc/clip#transformers.CLIPModel"),d(BB,"href","/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertModel"),d(PB,"href","/docs/transformers/pr_16879/en/model_doc/convnext#transformers.ConvNextModel"),d($B,"href","/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.CTRLModel"),d(IB,"href","/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(qB,"href","/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(NB,"href","/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(jB,"href","/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaModel"),d(DB,"href","/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(GB,"href","/docs/transformers/pr_16879/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(OB,"href","/docs/transformers/pr_16879/en/model_doc/deit#transformers.DeiTModel"),d(VB,"href","/docs/transformers/pr_16879/en/model_doc/detr#transformers.DetrModel"),d(XB,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertModel"),d(zB,"href","/docs/transformers/pr_16879/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(QB,"href","/docs/transformers/pr_16879/en/model_doc/dpt#transformers.DPTModel"),d(WB,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraModel"),d(HB,"href","/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertModel"),d(UB,"href","/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetModel"),d(JB,"href","/docs/transformers/pr_16879/en/model_doc/fsmt#transformers.FSMTModel"),d(YB,"href","/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelModel"),d(KB,"href","/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelBaseModel"),d(ZB,"href","/docs/transformers/pr_16879/en/model_doc/glpn#transformers.GLPNModel"),d(eP,"href","/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2Model"),d(oP,"href","/docs/transformers/pr_16879/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(rP,"href","/docs/transformers/pr_16879/en/model_doc/gptj#transformers.GPTJModel"),d(tP,"href","/docs/transformers/pr_16879/en/model_doc/hubert#transformers.HubertModel"),d(aP,"href","/docs/transformers/pr_16879/en/model_doc/ibert#transformers.IBertModel"),d(nP,"href","/docs/transformers/pr_16879/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(sP,"href","/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(lP,"href","/docs/transformers/pr_16879/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(iP,"href","/docs/transformers/pr_16879/en/model_doc/led#transformers.LEDModel"),d(dP,"href","/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerModel"),d(cP,"href","/docs/transformers/pr_16879/en/model_doc/luke#transformers.LukeModel"),d(fP,"href","/docs/transformers/pr_16879/en/model_doc/lxmert#transformers.LxmertModel"),d(mP,"href","/docs/transformers/pr_16879/en/model_doc/m2m_100#transformers.M2M100Model"),d(gP,"href","/docs/transformers/pr_16879/en/model_doc/marian#transformers.MarianModel"),d(hP,"href","/docs/transformers/pr_16879/en/model_doc/maskformer#transformers.MaskFormerModel"),d(pP,"href","/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartModel"),d(_P,"href","/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(uP,"href","/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertModel"),d(bP,"href","/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetModel"),d(vP,"href","/docs/transformers/pr_16879/en/model_doc/mt5#transformers.MT5Model"),d(FP,"href","/docs/transformers/pr_16879/en/model_doc/nystromformer#transformers.NystromformerModel"),d(TP,"href","/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(MP,"href","/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.PegasusModel"),d(EP,"href","/docs/transformers/pr_16879/en/model_doc/perceiver#transformers.PerceiverModel"),d(CP,"href","/docs/transformers/pr_16879/en/model_doc/plbart#transformers.PLBartModel"),d(wP,"href","/docs/transformers/pr_16879/en/model_doc/poolformer#transformers.PoolFormerModel"),d(AP,"href","/docs/transformers/pr_16879/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(yP,"href","/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertModel"),d(LP,"href","/docs/transformers/pr_16879/en/model_doc/reformer#transformers.ReformerModel"),d(xP,"href","/docs/transformers/pr_16879/en/model_doc/regnet#transformers.RegNetModel"),d(kP,"href","/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertModel"),d(SP,"href","/docs/transformers/pr_16879/en/model_doc/resnet#transformers.ResNetModel"),d(RP,"href","/docs/transformers/pr_16879/en/model_doc/retribert#transformers.RetriBertModel"),d(BP,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaModel"),d(PP,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerModel"),d($P,"href","/docs/transformers/pr_16879/en/model_doc/segformer#transformers.SegformerModel"),d(IP,"href","/docs/transformers/pr_16879/en/model_doc/sew#transformers.SEWModel"),d(qP,"href","/docs/transformers/pr_16879/en/model_doc/sew-d#transformers.SEWDModel"),d(NP,"href","/docs/transformers/pr_16879/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(jP,"href","/docs/transformers/pr_16879/en/model_doc/splinter#transformers.SplinterModel"),d(DP,"href","/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(GP,"href","/docs/transformers/pr_16879/en/model_doc/swin#transformers.SwinModel"),d(OP,"href","/docs/transformers/pr_16879/en/model_doc/t5#transformers.T5Model"),d(VP,"href","/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TapasModel"),d(XP,"href","/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(zP,"href","/docs/transformers/pr_16879/en/model_doc/unispeech#transformers.UniSpeechModel"),d(QP,"href","/docs/transformers/pr_16879/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(WP,"href","/docs/transformers/pr_16879/en/model_doc/van#transformers.VanModel"),d(HP,"href","/docs/transformers/pr_16879/en/model_doc/vilt#transformers.ViltModel"),d(UP,"href","/docs/transformers/pr_16879/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(JP,"href","/docs/transformers/pr_16879/en/model_doc/visual_bert#transformers.VisualBertModel"),d(YP,"href","/docs/transformers/pr_16879/en/model_doc/vit#transformers.ViTModel"),d(KP,"href","/docs/transformers/pr_16879/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(ZP,"href","/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(e$,"href","/docs/transformers/pr_16879/en/model_doc/wavlm#transformers.WavLMModel"),d(o$,"href","/docs/transformers/pr_16879/en/model_doc/xglm#transformers.XGLMModel"),d(r$,"href","/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMModel"),d(t$,"href","/docs/transformers/pr_16879/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(a$,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(n$,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(s$,"href","/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetModel"),d(l$,"href","/docs/transformers/pr_16879/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N_,"id","transformers.AutoModelForPreTraining"),d(N_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N_,"href","#transformers.AutoModelForPreTraining"),d(rd,"class","relative group"),d(i$,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(d$,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(c$,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(f$,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertForPreTraining"),d(m$,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(g$,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertForPreTraining"),d(h$,"href","/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(p$,"href","/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(_$,"href","/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(u$,"href","/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(b$,"href","/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(v$,"href","/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(F$,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(T$,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraForPreTraining"),d(M$,"href","/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(E$,"href","/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetForPreTraining"),d(C$,"href","/docs/transformers/pr_16879/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(w$,"href","/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(A$,"href","/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(y$,"href","/docs/transformers/pr_16879/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(L$,"href","/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(x$,"href","/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(k$,"href","/docs/transformers/pr_16879/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(S$,"href","/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(R$,"href","/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(B$,"href","/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(P$,"href","/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d($$,"href","/docs/transformers/pr_16879/en/model_doc/retribert#transformers.RetriBertModel"),d(I$,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(q$,"href","/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(N$,"href","/docs/transformers/pr_16879/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(j$,"href","/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(D$,"href","/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(G$,"href","/docs/transformers/pr_16879/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(O$,"href","/docs/transformers/pr_16879/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(V$,"href","/docs/transformers/pr_16879/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(X$,"href","/docs/transformers/pr_16879/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(z$,"href","/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(Q$,"href","/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(W$,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(H$,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(U$,"href","/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wu,"id","transformers.AutoModelForCausalLM"),d(wu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wu,"href","#transformers.AutoModelForCausalLM"),d(nd,"class","relative group"),d(J$,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Y$,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(K$,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z$,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartForCausalLM"),d(eI,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertLMHeadModel"),d(oI,"href","/docs/transformers/pr_16879/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(rI,"href","/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(tI,"href","/docs/transformers/pr_16879/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(aI,"href","/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(nI,"href","/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(sI,"href","/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(lI,"href","/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(iI,"href","/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(dI,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraForCausalLM"),d(cI,"href","/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(fI,"href","/docs/transformers/pr_16879/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(mI,"href","/docs/transformers/pr_16879/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(gI,"href","/docs/transformers/pr_16879/en/model_doc/marian#transformers.MarianForCausalLM"),d(hI,"href","/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartForCausalLM"),d(pI,"href","/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(_I,"href","/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(uI,"href","/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(bI,"href","/docs/transformers/pr_16879/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(vI,"href","/docs/transformers/pr_16879/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(FI,"href","/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(TI,"href","/docs/transformers/pr_16879/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(MI,"href","/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(EI,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(CI,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(wI,"href","/docs/transformers/pr_16879/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(AI,"href","/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(yI,"href","/docs/transformers/pr_16879/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(LI,"href","/docs/transformers/pr_16879/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(xI,"href","/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(kI,"href","/docs/transformers/pr_16879/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(SI,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(RI,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(BI,"href","/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(i1,"id","transformers.AutoModelForMaskedLM"),d(i1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i1,"href","#transformers.AutoModelForMaskedLM"),d(id,"class","relative group"),d(PI,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($I,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(II,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qI,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(NI,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(jI,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertForMaskedLM"),d(DI,"href","/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(GI,"href","/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(OI,"href","/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(VI,"href","/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(XI,"href","/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(zI,"href","/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(QI,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(WI,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(HI,"href","/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(UI,"href","/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(JI,"href","/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(YI,"href","/docs/transformers/pr_16879/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(KI,"href","/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(ZI,"href","/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(eq,"href","/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(oq,"href","/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(rq,"href","/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(tq,"href","/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(aq,"href","/docs/transformers/pr_16879/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(nq,"href","/docs/transformers/pr_16879/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(sq,"href","/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(lq,"href","/docs/transformers/pr_16879/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(iq,"href","/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(dq,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(cq,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(fq,"href","/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(mq,"href","/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(gq,"href","/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(hq,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(pq,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(_q,"href","/docs/transformers/pr_16879/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(z1,"id","transformers.AutoModelForSeq2SeqLM"),d(z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z1,"href","#transformers.AutoModelForSeq2SeqLM"),d(fd,"class","relative group"),d(uq,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bq,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vq,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fq,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Tq,"href","/docs/transformers/pr_16879/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(Mq,"href","/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(Eq,"href","/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(Cq,"href","/docs/transformers/pr_16879/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(wq,"href","/docs/transformers/pr_16879/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(Aq,"href","/docs/transformers/pr_16879/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(yq,"href","/docs/transformers/pr_16879/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(Lq,"href","/docs/transformers/pr_16879/en/model_doc/marian#transformers.MarianMTModel"),d(xq,"href","/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(kq,"href","/docs/transformers/pr_16879/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(Sq,"href","/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(Rq,"href","/docs/transformers/pr_16879/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(Bq,"href","/docs/transformers/pr_16879/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(Pq,"href","/docs/transformers/pr_16879/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d($q,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Iq,"href","/docs/transformers/pr_16879/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cb,"id","transformers.AutoModelForSequenceClassification"),d(cb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cb,"href","#transformers.AutoModelForSequenceClassification"),d(hd,"class","relative group"),d(qq,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nq,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jq,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dq,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_16879/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(zq,"href","/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_16879/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16879/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16879/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16879/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(lN,"href","/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(iN,"href","/docs/transformers/pr_16879/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(dN,"href","/docs/transformers/pr_16879/en/model_doc/led#transformers.LEDForSequenceClassification"),d(cN,"href","/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(fN,"href","/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(mN,"href","/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(gN,"href","/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(hN,"href","/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(pN,"href","/docs/transformers/pr_16879/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(_N,"href","/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(uN,"href","/docs/transformers/pr_16879/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(bN,"href","/docs/transformers/pr_16879/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(vN,"href","/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(FN,"href","/docs/transformers/pr_16879/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(TN,"href","/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(MN,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(EN,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(CN,"href","/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(wN,"href","/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(AN,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartForSequenceClassification"),d(yN,"href","/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(LN,"href","/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(xN,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(kN,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(SN,"href","/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(RN,"href","/docs/transformers/pr_16879/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(n2,"id","transformers.AutoModelForMultipleChoice"),d(n2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n2,"href","#transformers.AutoModelForMultipleChoice"),d(ud,"class","relative group"),d(BN,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PN,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($N,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IN,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(qN,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertForMultipleChoice"),d(NN,"href","/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(jN,"href","/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(DN,"href","/docs/transformers/pr_16879/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(GN,"href","/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(ON,"href","/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(VN,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(XN,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(zN,"href","/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(QN,"href","/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(WN,"href","/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(HN,"href","/docs/transformers/pr_16879/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(UN,"href","/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(JN,"href","/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(YN,"href","/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(KN,"href","/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(ZN,"href","/docs/transformers/pr_16879/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(ej,"href","/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(oj,"href","/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(rj,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(tj,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(aj,"href","/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(nj,"href","/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(sj,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(lj,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(ij,"href","/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(dj,"href","/docs/transformers/pr_16879/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($2,"id","transformers.AutoModelForNextSentencePrediction"),d($2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($2,"href","#transformers.AutoModelForNextSentencePrediction"),d(Fd,"class","relative group"),d(cj,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fj,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mj,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gj,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(hj,"href","/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(pj,"href","/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(_j,"href","/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(uj,"href","/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O2,"id","transformers.AutoModelForTokenClassification"),d(O2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O2,"href","#transformers.AutoModelForTokenClassification"),d(Ed,"class","relative group"),d(bj,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vj,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Fj,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tj,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(Mj,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertForTokenClassification"),d(Ej,"href","/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(Cj,"href","/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(wj,"href","/docs/transformers/pr_16879/en/model_doc/canine#transformers.CanineForTokenClassification"),d(Aj,"href","/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(yj,"href","/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(Lj,"href","/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(xj,"href","/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(kj,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(Sj,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(Rj,"href","/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(Bj,"href","/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(Pj,"href","/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d($j,"href","/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(Ij,"href","/docs/transformers/pr_16879/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(qj,"href","/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(Nj,"href","/docs/transformers/pr_16879/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(jj,"href","/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(Dj,"href","/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(Gj,"href","/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(Oj,"href","/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(Vj,"href","/docs/transformers/pr_16879/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Xj,"href","/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(zj,"href","/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(Qj,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Wj,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Hj,"href","/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Uj,"href","/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Jj,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Yj,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Kj,"href","/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Zj,"href","/docs/transformers/pr_16879/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(E6,"id","transformers.AutoModelForQuestionAnswering"),d(E6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E6,"href","#transformers.AutoModelForQuestionAnswering"),d(Ad,"class","relative group"),d(eD,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oD,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rD,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tD,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16879/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16879/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16879/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16879/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_16879/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(uD,"href","/docs/transformers/pr_16879/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_16879/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_16879/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_16879/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_16879/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_16879/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_16879/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_16879/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(wD,"href","/docs/transformers/pr_16879/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_16879/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(yD,"href","/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(LD,"href","/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(xD,"href","/docs/transformers/pr_16879/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(kD,"href","/docs/transformers/pr_16879/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(SD,"href","/docs/transformers/pr_16879/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(RD,"href","/docs/transformers/pr_16879/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(BD,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(PD,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d($D,"href","/docs/transformers/pr_16879/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(ID,"href","/docs/transformers/pr_16879/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(qD,"href","/docs/transformers/pr_16879/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(ND,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(jD,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(DD,"href","/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(GD,"href","/docs/transformers/pr_16879/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cv,"id","transformers.AutoModelForTableQuestionAnswering"),d(cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cv,"href","#transformers.AutoModelForTableQuestionAnswering"),d(xd,"class","relative group"),d(OD,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VD,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XD,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zD,"href","/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gv,"id","transformers.AutoModelForImageClassification"),d(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gv,"href","#transformers.AutoModelForImageClassification"),d(Rd,"class","relative group"),d(QD,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WD,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HD,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UD,"href","/docs/transformers/pr_16879/en/model_doc/beit#transformers.BeitForImageClassification"),d(JD,"href","/docs/transformers/pr_16879/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(YD,"href","/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(KD,"href","/docs/transformers/pr_16879/en/model_doc/deit#transformers.DeiTForImageClassification"),d(ZD,"href","/docs/transformers/pr_16879/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(eG,"href","/docs/transformers/pr_16879/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(oG,"href","/docs/transformers/pr_16879/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(rG,"href","/docs/transformers/pr_16879/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(tG,"href","/docs/transformers/pr_16879/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(aG,"href","/docs/transformers/pr_16879/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(nG,"href","/docs/transformers/pr_16879/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(sG,"href","/docs/transformers/pr_16879/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(lG,"href","/docs/transformers/pr_16879/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(iG,"href","/docs/transformers/pr_16879/en/model_doc/swin#transformers.SwinForImageClassification"),d(dG,"href","/docs/transformers/pr_16879/en/model_doc/van#transformers.VanForImageClassification"),d(cG,"href","/docs/transformers/pr_16879/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Av,"id","transformers.AutoModelForVision2Seq"),d(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Av,"href","#transformers.AutoModelForVision2Seq"),d($d,"class","relative group"),d(fG,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mG,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gG,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hG,"href","/docs/transformers/pr_16879/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xv,"id","transformers.AutoModelForAudioClassification"),d(xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xv,"href","#transformers.AutoModelForAudioClassification"),d(Nd,"class","relative group"),d(pG,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_G,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uG,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bG,"href","/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(vG,"href","/docs/transformers/pr_16879/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(FG,"href","/docs/transformers/pr_16879/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(TG,"href","/docs/transformers/pr_16879/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(MG,"href","/docs/transformers/pr_16879/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(EG,"href","/docs/transformers/pr_16879/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(CG,"href","/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(wG,"href","/docs/transformers/pr_16879/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jv,"id","transformers.AutoModelForAudioFrameClassification"),d(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jv,"href","#transformers.AutoModelForAudioFrameClassification"),d(Gd,"class","relative group"),d(AG,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yG,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LG,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xG,"href","/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(kG,"href","/docs/transformers/pr_16879/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(SG,"href","/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(RG,"href","/docs/transformers/pr_16879/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zv,"id","transformers.AutoModelForCTC"),d(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zv,"href","#transformers.AutoModelForCTC"),d(Xd,"class","relative group"),d(BG,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PG,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($G,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IG,"href","/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(qG,"href","/docs/transformers/pr_16879/en/model_doc/hubert#transformers.HubertForCTC"),d(NG,"href","/docs/transformers/pr_16879/en/model_doc/sew#transformers.SEWForCTC"),d(jG,"href","/docs/transformers/pr_16879/en/model_doc/sew-d#transformers.SEWDForCTC"),d(DG,"href","/docs/transformers/pr_16879/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(GG,"href","/docs/transformers/pr_16879/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(OG,"href","/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(VG,"href","/docs/transformers/pr_16879/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oF,"id","transformers.AutoModelForSpeechSeq2Seq"),d(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oF,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Wd,"class","relative group"),d(XG,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zG,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QG,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WG,"href","/docs/transformers/pr_16879/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(HG,"href","/docs/transformers/pr_16879/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nF,"id","transformers.AutoModelForAudioXVector"),d(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nF,"href","#transformers.AutoModelForAudioXVector"),d(Jd,"class","relative group"),d(UG,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JG,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YG,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KG,"href","/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(ZG,"href","/docs/transformers/pr_16879/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(eO,"href","/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(oO,"href","/docs/transformers/pr_16879/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fF,"id","transformers.AutoModelForMaskedImageModeling"),d(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fF,"href","#transformers.AutoModelForMaskedImageModeling"),d(Zd,"class","relative group"),d(rO,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tO,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aO,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nO,"href","/docs/transformers/pr_16879/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(sO,"href","/docs/transformers/pr_16879/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(lO,"href","/docs/transformers/pr_16879/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_F,"id","transformers.AutoModelForObjectDetection"),d(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_F,"href","#transformers.AutoModelForObjectDetection"),d(tc,"class","relative group"),d(iO,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dO,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cO,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fO,"href","/docs/transformers/pr_16879/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vF,"id","transformers.AutoModelForImageSegmentation"),d(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vF,"href","#transformers.AutoModelForImageSegmentation"),d(sc,"class","relative group"),d(mO,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gO,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hO,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pO,"href","/docs/transformers/pr_16879/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MF,"id","transformers.AutoModelForSemanticSegmentation"),d(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MF,"href","#transformers.AutoModelForSemanticSegmentation"),d(dc,"class","relative group"),d(_O,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uO,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bO,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vO,"href","/docs/transformers/pr_16879/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(FO,"href","/docs/transformers/pr_16879/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(TO,"href","/docs/transformers/pr_16879/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(MO,"href","/docs/transformers/pr_16879/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LF,"id","transformers.AutoModelForInstanceSegmentation"),d(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LF,"href","#transformers.AutoModelForInstanceSegmentation"),d(mc,"class","relative group"),d(EO,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CO,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wO,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AO,"href","/docs/transformers/pr_16879/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SF,"id","transformers.TFAutoModel"),d(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SF,"href","#transformers.TFAutoModel"),d(pc,"class","relative group"),d(yO,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LO,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xO,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kO,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.TFAlbertModel"),d(SO,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.TFBartModel"),d(RO,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.TFBertModel"),d(BO,"href","/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(PO,"href","/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d($O,"href","/docs/transformers/pr_16879/en/model_doc/camembert#transformers.TFCamembertModel"),d(IO,"href","/docs/transformers/pr_16879/en/model_doc/clip#transformers.TFCLIPModel"),d(qO,"href","/docs/transformers/pr_16879/en/model_doc/convbert#transformers.TFConvBertModel"),d(NO,"href","/docs/transformers/pr_16879/en/model_doc/convnext#transformers.TFConvNextModel"),d(jO,"href","/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.TFCTRLModel"),d(DO,"href","/docs/transformers/pr_16879/en/model_doc/deberta#transformers.TFDebertaModel"),d(GO,"href","/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(OO,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(VO,"href","/docs/transformers/pr_16879/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(XO,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.TFElectraModel"),d(zO,"href","/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(QO,"href","/docs/transformers/pr_16879/en/model_doc/funnel#transformers.TFFunnelModel"),d(WO,"href","/docs/transformers/pr_16879/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(HO,"href","/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.TFGPT2Model"),d(UO,"href","/docs/transformers/pr_16879/en/model_doc/gptj#transformers.TFGPTJModel"),d(JO,"href","/docs/transformers/pr_16879/en/model_doc/hubert#transformers.TFHubertModel"),d(YO,"href","/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(KO,"href","/docs/transformers/pr_16879/en/model_doc/led#transformers.TFLEDModel"),d(ZO,"href","/docs/transformers/pr_16879/en/model_doc/longformer#transformers.TFLongformerModel"),d(eV,"href","/docs/transformers/pr_16879/en/model_doc/lxmert#transformers.TFLxmertModel"),d(oV,"href","/docs/transformers/pr_16879/en/model_doc/marian#transformers.TFMarianModel"),d(rV,"href","/docs/transformers/pr_16879/en/model_doc/mbart#transformers.TFMBartModel"),d(tV,"href","/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(aV,"href","/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.TFMPNetModel"),d(nV,"href","/docs/transformers/pr_16879/en/model_doc/mt5#transformers.TFMT5Model"),d(sV,"href","/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(lV,"href","/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.TFPegasusModel"),d(iV,"href","/docs/transformers/pr_16879/en/model_doc/rembert#transformers.TFRemBertModel"),d(dV,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.TFRobertaModel"),d(cV,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.TFRoFormerModel"),d(fV,"href","/docs/transformers/pr_16879/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(mV,"href","/docs/transformers/pr_16879/en/model_doc/t5#transformers.TFT5Model"),d(gV,"href","/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TFTapasModel"),d(hV,"href","/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(pV,"href","/docs/transformers/pr_16879/en/model_doc/vit#transformers.TFViTModel"),d(_V,"href","/docs/transformers/pr_16879/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(uV,"href","/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(bV,"href","/docs/transformers/pr_16879/en/model_doc/xlm#transformers.TFXLMModel"),d(vV,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(FV,"href","/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TT,"id","transformers.TFAutoModelForPreTraining"),d(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TT,"href","#transformers.TFAutoModelForPreTraining"),d(bc,"class","relative group"),d(TV,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MV,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EV,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CV,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(wV,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(AV,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.TFBertForPreTraining"),d(yV,"href","/docs/transformers/pr_16879/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(LV,"href","/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(xV,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(kV,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(SV,"href","/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(RV,"href","/docs/transformers/pr_16879/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(BV,"href","/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(PV,"href","/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d($V,"href","/docs/transformers/pr_16879/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(IV,"href","/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(qV,"href","/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(NV,"href","/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(jV,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(DV,"href","/docs/transformers/pr_16879/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(GV,"href","/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(OV,"href","/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(VV,"href","/docs/transformers/pr_16879/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(XV,"href","/docs/transformers/pr_16879/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(zV,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(QV,"href","/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zT,"id","transformers.TFAutoModelForCausalLM"),d(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zT,"href","#transformers.TFAutoModelForCausalLM"),d(Tc,"class","relative group"),d(WV,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HV,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UV,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(JV,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(YV,"href","/docs/transformers/pr_16879/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(KV,"href","/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(ZV,"href","/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(eX,"href","/docs/transformers/pr_16879/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(oX,"href","/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(rX,"href","/docs/transformers/pr_16879/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(tX,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(aX,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(nX,"href","/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(sX,"href","/docs/transformers/pr_16879/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(lX,"href","/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(a8,"id","transformers.TFAutoModelForImageClassification"),d(a8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a8,"href","#transformers.TFAutoModelForImageClassification"),d(Cc,"class","relative group"),d(iX,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dX,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cX,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fX,"href","/docs/transformers/pr_16879/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(mX,"href","/docs/transformers/pr_16879/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l8,"id","transformers.TFAutoModelForMaskedLM"),d(l8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l8,"href","#transformers.TFAutoModelForMaskedLM"),d(yc,"class","relative group"),d(gX,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hX,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pX,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_X,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(uX,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(bX,"href","/docs/transformers/pr_16879/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(vX,"href","/docs/transformers/pr_16879/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(FX,"href","/docs/transformers/pr_16879/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(TX,"href","/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(MX,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(EX,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(CX,"href","/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(wX,"href","/docs/transformers/pr_16879/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(AX,"href","/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(yX,"href","/docs/transformers/pr_16879/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(LX,"href","/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(xX,"href","/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(kX,"href","/docs/transformers/pr_16879/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(SX,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(RX,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(BX,"href","/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(PX,"href","/docs/transformers/pr_16879/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d($X,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(L8,"id","transformers.TFAutoModelForSeq2SeqLM"),d(L8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L8,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(kc,"class","relative group"),d(IX,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qX,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NX,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jX,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(DX,"href","/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(GX,"href","/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(OX,"href","/docs/transformers/pr_16879/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(VX,"href","/docs/transformers/pr_16879/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(XX,"href","/docs/transformers/pr_16879/en/model_doc/marian#transformers.TFMarianMTModel"),d(zX,"href","/docs/transformers/pr_16879/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(QX,"href","/docs/transformers/pr_16879/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(WX,"href","/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(HX,"href","/docs/transformers/pr_16879/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j8,"id","transformers.TFAutoModelForSequenceClassification"),d(j8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j8,"href","#transformers.TFAutoModelForSequenceClassification"),d(Bc,"class","relative group"),d(UX,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JX,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YX,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KX,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(ez,"href","/docs/transformers/pr_16879/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(oz,"href","/docs/transformers/pr_16879/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(rz,"href","/docs/transformers/pr_16879/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(tz,"href","/docs/transformers/pr_16879/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(az,"href","/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(nz,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(sz,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(lz,"href","/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(iz,"href","/docs/transformers/pr_16879/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(dz,"href","/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(cz,"href","/docs/transformers/pr_16879/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(fz,"href","/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(mz,"href","/docs/transformers/pr_16879/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(gz,"href","/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(hz,"href","/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(pz,"href","/docs/transformers/pr_16879/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(_z,"href","/docs/transformers/pr_16879/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(uz,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(bz,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(vz,"href","/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(Fz,"href","/docs/transformers/pr_16879/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(Tz,"href","/docs/transformers/pr_16879/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(Mz,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(Ez,"href","/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(m7,"id","transformers.TFAutoModelForMultipleChoice"),d(m7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m7,"href","#transformers.TFAutoModelForMultipleChoice"),d(Ic,"class","relative group"),d(Cz,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wz,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Az,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yz,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(xz,"href","/docs/transformers/pr_16879/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(kz,"href","/docs/transformers/pr_16879/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(Sz,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(Bz,"href","/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(Pz,"href","/docs/transformers/pr_16879/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d($z,"href","/docs/transformers/pr_16879/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(Iz,"href","/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(qz,"href","/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(Nz,"href","/docs/transformers/pr_16879/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(jz,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(Dz,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(Gz,"href","/docs/transformers/pr_16879/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(Oz,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(Vz,"href","/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(k7,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(k7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k7,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(jc,"class","relative group"),d(Xz,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zz,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Qz,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wz,"href","/docs/transformers/pr_16879/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R7,"id","transformers.TFAutoModelForTokenClassification"),d(R7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R7,"href","#transformers.TFAutoModelForTokenClassification"),d(Oc,"class","relative group"),d(Hz,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Uz,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Jz,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yz,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(Kz,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Zz,"href","/docs/transformers/pr_16879/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(eQ,"href","/docs/transformers/pr_16879/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(oQ,"href","/docs/transformers/pr_16879/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(rQ,"href","/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(tQ,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(aQ,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(nQ,"href","/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(sQ,"href","/docs/transformers/pr_16879/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(lQ,"href","/docs/transformers/pr_16879/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(iQ,"href","/docs/transformers/pr_16879/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(dQ,"href","/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(cQ,"href","/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(fQ,"href","/docs/transformers/pr_16879/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(mQ,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(gQ,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(hQ,"href","/docs/transformers/pr_16879/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(pQ,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(_Q,"href","/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z7,"id","transformers.TFAutoModelForQuestionAnswering"),d(Z7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z7,"href","#transformers.TFAutoModelForQuestionAnswering"),d(zc,"class","relative group"),d(uQ,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bQ,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vQ,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FQ,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(MQ,"href","/docs/transformers/pr_16879/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(EQ,"href","/docs/transformers/pr_16879/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_16879/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(wQ,"href","/docs/transformers/pr_16879/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(AQ,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(yQ,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(LQ,"href","/docs/transformers/pr_16879/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(xQ,"href","/docs/transformers/pr_16879/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(kQ,"href","/docs/transformers/pr_16879/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(SQ,"href","/docs/transformers/pr_16879/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(RQ,"href","/docs/transformers/pr_16879/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(BQ,"href","/docs/transformers/pr_16879/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(PQ,"href","/docs/transformers/pr_16879/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d($Q,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(IQ,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(qQ,"href","/docs/transformers/pr_16879/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(NQ,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(jQ,"href","/docs/transformers/pr_16879/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F9,"id","transformers.TFAutoModelForVision2Seq"),d(F9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F9,"href","#transformers.TFAutoModelForVision2Seq"),d(Hc,"class","relative group"),d(DQ,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GQ,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OQ,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VQ,"href","/docs/transformers/pr_16879/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(M9,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(M9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M9,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Yc,"class","relative group"),d(XQ,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zQ,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QQ,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WQ,"href","/docs/transformers/pr_16879/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C9,"id","transformers.FlaxAutoModel"),d(C9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C9,"href","#transformers.FlaxAutoModel"),d(ef,"class","relative group"),d(HQ,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UQ,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JQ,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YQ,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.FlaxAlbertModel"),d(KQ,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.FlaxBartModel"),d(ZQ,"href","/docs/transformers/pr_16879/en/model_doc/beit#transformers.FlaxBeitModel"),d(eW,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.FlaxBertModel"),d(oW,"href","/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(rW,"href","/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(tW,"href","/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(aW,"href","/docs/transformers/pr_16879/en/model_doc/clip#transformers.FlaxCLIPModel"),d(nW,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(sW,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.FlaxElectraModel"),d(lW,"href","/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(iW,"href","/docs/transformers/pr_16879/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(dW,"href","/docs/transformers/pr_16879/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(cW,"href","/docs/transformers/pr_16879/en/model_doc/marian#transformers.FlaxMarianModel"),d(fW,"href","/docs/transformers/pr_16879/en/model_doc/mbart#transformers.FlaxMBartModel"),d(mW,"href","/docs/transformers/pr_16879/en/model_doc/mt5#transformers.FlaxMT5Model"),d(gW,"href","/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(hW,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(pW,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(_W,"href","/docs/transformers/pr_16879/en/model_doc/t5#transformers.FlaxT5Model"),d(uW,"href","/docs/transformers/pr_16879/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(bW,"href","/docs/transformers/pr_16879/en/model_doc/vit#transformers.FlaxViTModel"),d(vW,"href","/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(FW,"href","/docs/transformers/pr_16879/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(TW,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J9,"id","transformers.FlaxAutoModelForCausalLM"),d(J9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J9,"href","#transformers.FlaxAutoModelForCausalLM"),d(tf,"class","relative group"),d(MW,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EW,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CW,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wW,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(AW,"href","/docs/transformers/pr_16879/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(yW,"href","/docs/transformers/pr_16879/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(LW,"href","/docs/transformers/pr_16879/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(xW,"href","/docs/transformers/pr_16879/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rM,"id","transformers.FlaxAutoModelForPreTraining"),d(rM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rM,"href","#transformers.FlaxAutoModelForPreTraining"),d(sf,"class","relative group"),d(kW,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SW,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RW,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BW,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(PW,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d($W,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(IW,"href","/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(qW,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(NW,"href","/docs/transformers/pr_16879/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(jW,"href","/docs/transformers/pr_16879/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(DW,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(GW,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(OW,"href","/docs/transformers/pr_16879/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(VW,"href","/docs/transformers/pr_16879/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(XW,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pM,"id","transformers.FlaxAutoModelForMaskedLM"),d(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pM,"href","#transformers.FlaxAutoModelForMaskedLM"),d(cf,"class","relative group"),d(zW,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QW,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WW,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HW,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(UW,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(JW,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(YW,"href","/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(KW,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(ZW,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(eH,"href","/docs/transformers/pr_16879/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(oH,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(rH,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(tH,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AM,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(AM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AM,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(gf,"class","relative group"),d(aH,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nH,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sH,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lH,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(iH,"href","/docs/transformers/pr_16879/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(dH,"href","/docs/transformers/pr_16879/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(cH,"href","/docs/transformers/pr_16879/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(fH,"href","/docs/transformers/pr_16879/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(mH,"href","/docs/transformers/pr_16879/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(gH,"href","/docs/transformers/pr_16879/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(hH,"href","/docs/transformers/pr_16879/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(pH,"href","/docs/transformers/pr_16879/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IM,"id","transformers.FlaxAutoModelForSequenceClassification"),d(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(IM,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(_f,"class","relative group"),d(_H,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uH,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bH,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vH,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(FH,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(TH,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(MH,"href","/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(EH,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(CH,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(wH,"href","/docs/transformers/pr_16879/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(AH,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(yH,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(LH,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WM,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(WM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WM,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(vf,"class","relative group"),d(xH,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kH,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SH,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RH,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(BH,"href","/docs/transformers/pr_16879/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(PH,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d($H,"href","/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(IH,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(qH,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(NH,"href","/docs/transformers/pr_16879/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(jH,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(DH,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(GH,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(a4,"id","transformers.FlaxAutoModelForTokenClassification"),d(a4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a4,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Mf,"class","relative group"),d(OH,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VH,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XH,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zH,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(QH,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(WH,"href","/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(HH,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(UH,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(JH,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(YH,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(KH,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(g4,"id","transformers.FlaxAutoModelForMultipleChoice"),d(g4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g4,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(wf,"class","relative group"),d(ZH,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eU,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oU,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rU,"href","/docs/transformers/pr_16879/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(tU,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(aU,"href","/docs/transformers/pr_16879/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(nU,"href","/docs/transformers/pr_16879/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(sU,"href","/docs/transformers/pr_16879/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(lU,"href","/docs/transformers/pr_16879/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(iU,"href","/docs/transformers/pr_16879/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(dU,"href","/docs/transformers/pr_16879/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(M4,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(M4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M4,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Lf,"class","relative group"),d(cU,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fU,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mU,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gU,"href","/docs/transformers/pr_16879/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C4,"id","transformers.FlaxAutoModelForImageClassification"),d(C4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C4,"href","#transformers.FlaxAutoModelForImageClassification"),d(Sf,"class","relative group"),d(hU,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pU,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_U,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uU,"href","/docs/transformers/pr_16879/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(bU,"href","/docs/transformers/pr_16879/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y4,"id","transformers.FlaxAutoModelForVision2Seq"),d(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y4,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Pf,"class","relative group"),d(vU,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FU,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TU,"href","/docs/transformers/pr_16879/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MU,"href","/docs/transformers/pr_16879/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,u){e(document.head,Z),b(c,io,u),b(c,ce,u),e(ce,Ce),e(Ce,lo),g(he,lo,null),e(ce,Me),e(ce,Xo),e(Xo,ji),b(c,jf,u),b(c,fa,u),e(fa,Di),e(fa,Gi),e(Gi,xE),e(fa,Df),b(c,xe,u),b(c,co,u),e(co,Oi),e(co,On),e(On,kE),e(co,Vn),e(co,Xn),e(Xn,SE),e(co,Vi),e(co,zn),e(zn,RE),e(co,Xi),b(c,Gf,u),g(Da,c,u),b(c,fo,u),b(c,ue,u),e(ue,EL),e(ue,zi),e(zi,CL),e(ue,wL),b(c,zo,u),b(c,Ga,u),e(Ga,AL),e(Ga,Of),e(Of,yL),e(Ga,JIe),b(c,qRe,u),b(c,Qi,u),e(Qi,Vf),e(Vf,pY),g(BE,pY,null),e(Qi,YIe),e(Qi,_Y),e(_Y,KIe),b(c,NRe,u),b(c,Qn,u),e(Qn,ZIe),e(Qn,uY),e(uY,eqe),e(Qn,oqe),e(Qn,bY),e(bY,rqe),e(Qn,tqe),b(c,jRe,u),g(PE,c,u),b(c,DRe,u),b(c,LL,u),e(LL,aqe),b(c,GRe,u),g(Xf,c,u),b(c,ORe,u),b(c,Wi,u),e(Wi,zf),e(zf,vY),g($E,vY,null),e(Wi,nqe),e(Wi,FY),e(FY,sqe),b(c,VRe,u),b(c,Qo,u),g(IE,Qo,null),e(Qo,lqe),e(Qo,qE),e(qE,iqe),e(qE,xL),e(xL,dqe),e(qE,cqe),e(Qo,fqe),e(Qo,NE),e(NE,mqe),e(NE,TY),e(TY,gqe),e(NE,hqe),e(Qo,pqe),e(Qo,mo),g(jE,mo,null),e(mo,_qe),e(mo,MY),e(MY,uqe),e(mo,bqe),e(mo,Hi),e(Hi,vqe),e(Hi,EY),e(EY,Fqe),e(Hi,Tqe),e(Hi,CY),e(CY,Mqe),e(Hi,Eqe),e(mo,Cqe),e(mo,v),e(v,Qf),e(Qf,wY),e(wY,wqe),e(Qf,Aqe),e(Qf,kL),e(kL,yqe),e(Qf,Lqe),e(v,xqe),e(v,Wf),e(Wf,AY),e(AY,kqe),e(Wf,Sqe),e(Wf,SL),e(SL,Rqe),e(Wf,Bqe),e(v,Pqe),e(v,Hf),e(Hf,yY),e(yY,$qe),e(Hf,Iqe),e(Hf,RL),e(RL,qqe),e(Hf,Nqe),e(v,jqe),e(v,Uf),e(Uf,LY),e(LY,Dqe),e(Uf,Gqe),e(Uf,BL),e(BL,Oqe),e(Uf,Vqe),e(v,Xqe),e(v,Jf),e(Jf,xY),e(xY,zqe),e(Jf,Qqe),e(Jf,PL),e(PL,Wqe),e(Jf,Hqe),e(v,Uqe),e(v,Yf),e(Yf,kY),e(kY,Jqe),e(Yf,Yqe),e(Yf,$L),e($L,Kqe),e(Yf,Zqe),e(v,eNe),e(v,Kf),e(Kf,SY),e(SY,oNe),e(Kf,rNe),e(Kf,IL),e(IL,tNe),e(Kf,aNe),e(v,nNe),e(v,Zf),e(Zf,RY),e(RY,sNe),e(Zf,lNe),e(Zf,qL),e(qL,iNe),e(Zf,dNe),e(v,cNe),e(v,em),e(em,BY),e(BY,fNe),e(em,mNe),e(em,NL),e(NL,gNe),e(em,hNe),e(v,pNe),e(v,om),e(om,PY),e(PY,_Ne),e(om,uNe),e(om,jL),e(jL,bNe),e(om,vNe),e(v,FNe),e(v,rm),e(rm,$Y),e($Y,TNe),e(rm,MNe),e(rm,DL),e(DL,ENe),e(rm,CNe),e(v,wNe),e(v,tm),e(tm,IY),e(IY,ANe),e(tm,yNe),e(tm,GL),e(GL,LNe),e(tm,xNe),e(v,kNe),e(v,am),e(am,qY),e(qY,SNe),e(am,RNe),e(am,OL),e(OL,BNe),e(am,PNe),e(v,$Ne),e(v,nm),e(nm,NY),e(NY,INe),e(nm,qNe),e(nm,VL),e(VL,NNe),e(nm,jNe),e(v,DNe),e(v,sm),e(sm,jY),e(jY,GNe),e(sm,ONe),e(sm,XL),e(XL,VNe),e(sm,XNe),e(v,zNe),e(v,lm),e(lm,DY),e(DY,QNe),e(lm,WNe),e(lm,zL),e(zL,HNe),e(lm,UNe),e(v,JNe),e(v,im),e(im,GY),e(GY,YNe),e(im,KNe),e(im,QL),e(QL,ZNe),e(im,eje),e(v,oje),e(v,dm),e(dm,OY),e(OY,rje),e(dm,tje),e(dm,WL),e(WL,aje),e(dm,nje),e(v,sje),e(v,cm),e(cm,VY),e(VY,lje),e(cm,ije),e(cm,HL),e(HL,dje),e(cm,cje),e(v,fje),e(v,fm),e(fm,XY),e(XY,mje),e(fm,gje),e(fm,UL),e(UL,hje),e(fm,pje),e(v,_je),e(v,mm),e(mm,zY),e(zY,uje),e(mm,bje),e(mm,JL),e(JL,vje),e(mm,Fje),e(v,Tje),e(v,gm),e(gm,QY),e(QY,Mje),e(gm,Eje),e(gm,YL),e(YL,Cje),e(gm,wje),e(v,Aje),e(v,hm),e(hm,WY),e(WY,yje),e(hm,Lje),e(hm,KL),e(KL,xje),e(hm,kje),e(v,Sje),e(v,pm),e(pm,HY),e(HY,Rje),e(pm,Bje),e(pm,ZL),e(ZL,Pje),e(pm,$je),e(v,Ije),e(v,_m),e(_m,UY),e(UY,qje),e(_m,Nje),e(_m,ex),e(ex,jje),e(_m,Dje),e(v,Gje),e(v,um),e(um,JY),e(JY,Oje),e(um,Vje),e(um,ox),e(ox,Xje),e(um,zje),e(v,Qje),e(v,bm),e(bm,YY),e(YY,Wje),e(bm,Hje),e(bm,rx),e(rx,Uje),e(bm,Jje),e(v,Yje),e(v,vm),e(vm,KY),e(KY,Kje),e(vm,Zje),e(vm,tx),e(tx,eDe),e(vm,oDe),e(v,rDe),e(v,Fm),e(Fm,ZY),e(ZY,tDe),e(Fm,aDe),e(Fm,ax),e(ax,nDe),e(Fm,sDe),e(v,lDe),e(v,Tm),e(Tm,eK),e(eK,iDe),e(Tm,dDe),e(Tm,nx),e(nx,cDe),e(Tm,fDe),e(v,mDe),e(v,Mm),e(Mm,oK),e(oK,gDe),e(Mm,hDe),e(Mm,sx),e(sx,pDe),e(Mm,_De),e(v,uDe),e(v,Em),e(Em,rK),e(rK,bDe),e(Em,vDe),e(Em,lx),e(lx,FDe),e(Em,TDe),e(v,MDe),e(v,Cm),e(Cm,tK),e(tK,EDe),e(Cm,CDe),e(Cm,ix),e(ix,wDe),e(Cm,ADe),e(v,yDe),e(v,wm),e(wm,aK),e(aK,LDe),e(wm,xDe),e(wm,dx),e(dx,kDe),e(wm,SDe),e(v,RDe),e(v,Am),e(Am,nK),e(nK,BDe),e(Am,PDe),e(Am,cx),e(cx,$De),e(Am,IDe),e(v,qDe),e(v,ym),e(ym,sK),e(sK,NDe),e(ym,jDe),e(ym,fx),e(fx,DDe),e(ym,GDe),e(v,ODe),e(v,Lm),e(Lm,lK),e(lK,VDe),e(Lm,XDe),e(Lm,mx),e(mx,zDe),e(Lm,QDe),e(v,WDe),e(v,xm),e(xm,iK),e(iK,HDe),e(xm,UDe),e(xm,gx),e(gx,JDe),e(xm,YDe),e(v,KDe),e(v,km),e(km,dK),e(dK,ZDe),e(km,eGe),e(km,hx),e(hx,oGe),e(km,rGe),e(v,tGe),e(v,Sm),e(Sm,cK),e(cK,aGe),e(Sm,nGe),e(Sm,px),e(px,sGe),e(Sm,lGe),e(v,iGe),e(v,Rm),e(Rm,fK),e(fK,dGe),e(Rm,cGe),e(Rm,_x),e(_x,fGe),e(Rm,mGe),e(v,gGe),e(v,Bm),e(Bm,mK),e(mK,hGe),e(Bm,pGe),e(Bm,ux),e(ux,_Ge),e(Bm,uGe),e(v,bGe),e(v,Pm),e(Pm,gK),e(gK,vGe),e(Pm,FGe),e(Pm,bx),e(bx,TGe),e(Pm,MGe),e(v,EGe),e(v,$m),e($m,hK),e(hK,CGe),e($m,wGe),e($m,vx),e(vx,AGe),e($m,yGe),e(v,LGe),e(v,Im),e(Im,pK),e(pK,xGe),e(Im,kGe),e(Im,Fx),e(Fx,SGe),e(Im,RGe),e(v,BGe),e(v,qm),e(qm,_K),e(_K,PGe),e(qm,$Ge),e(qm,Tx),e(Tx,IGe),e(qm,qGe),e(v,NGe),e(v,Nm),e(Nm,uK),e(uK,jGe),e(Nm,DGe),e(Nm,Mx),e(Mx,GGe),e(Nm,OGe),e(v,VGe),e(v,jm),e(jm,bK),e(bK,XGe),e(jm,zGe),e(jm,Ex),e(Ex,QGe),e(jm,WGe),e(v,HGe),e(v,Dm),e(Dm,vK),e(vK,UGe),e(Dm,JGe),e(Dm,Cx),e(Cx,YGe),e(Dm,KGe),e(v,ZGe),e(v,Gm),e(Gm,FK),e(FK,eOe),e(Gm,oOe),e(Gm,wx),e(wx,rOe),e(Gm,tOe),e(v,aOe),e(v,Om),e(Om,TK),e(TK,nOe),e(Om,sOe),e(Om,Ax),e(Ax,lOe),e(Om,iOe),e(v,dOe),e(v,Vm),e(Vm,MK),e(MK,cOe),e(Vm,fOe),e(Vm,yx),e(yx,mOe),e(Vm,gOe),e(v,hOe),e(v,Xm),e(Xm,EK),e(EK,pOe),e(Xm,_Oe),e(Xm,Lx),e(Lx,uOe),e(Xm,bOe),e(v,vOe),e(v,zm),e(zm,CK),e(CK,FOe),e(zm,TOe),e(zm,xx),e(xx,MOe),e(zm,EOe),e(v,COe),e(v,Qm),e(Qm,wK),e(wK,wOe),e(Qm,AOe),e(Qm,kx),e(kx,yOe),e(Qm,LOe),e(v,xOe),e(v,Wm),e(Wm,AK),e(AK,kOe),e(Wm,SOe),e(Wm,Sx),e(Sx,ROe),e(Wm,BOe),e(v,POe),e(v,Hm),e(Hm,yK),e(yK,$Oe),e(Hm,IOe),e(Hm,Rx),e(Rx,qOe),e(Hm,NOe),e(v,jOe),e(v,Um),e(Um,LK),e(LK,DOe),e(Um,GOe),e(Um,Bx),e(Bx,OOe),e(Um,VOe),e(v,XOe),e(v,Jm),e(Jm,xK),e(xK,zOe),e(Jm,QOe),e(Jm,Px),e(Px,WOe),e(Jm,HOe),e(v,UOe),e(v,Ym),e(Ym,kK),e(kK,JOe),e(Ym,YOe),e(Ym,$x),e($x,KOe),e(Ym,ZOe),e(v,eVe),e(v,Km),e(Km,SK),e(SK,oVe),e(Km,rVe),e(Km,Ix),e(Ix,tVe),e(Km,aVe),e(v,nVe),e(v,Zm),e(Zm,RK),e(RK,sVe),e(Zm,lVe),e(Zm,qx),e(qx,iVe),e(Zm,dVe),e(v,cVe),e(v,eg),e(eg,BK),e(BK,fVe),e(eg,mVe),e(eg,Nx),e(Nx,gVe),e(eg,hVe),e(v,pVe),e(v,og),e(og,PK),e(PK,_Ve),e(og,uVe),e(og,jx),e(jx,bVe),e(og,vVe),e(v,FVe),e(v,rg),e(rg,$K),e($K,TVe),e(rg,MVe),e(rg,Dx),e(Dx,EVe),e(rg,CVe),e(v,wVe),e(v,tg),e(tg,IK),e(IK,AVe),e(tg,yVe),e(tg,Gx),e(Gx,LVe),e(tg,xVe),e(v,kVe),e(v,ag),e(ag,qK),e(qK,SVe),e(ag,RVe),e(ag,Ox),e(Ox,BVe),e(ag,PVe),e(v,$Ve),e(v,ng),e(ng,NK),e(NK,IVe),e(ng,qVe),e(ng,Vx),e(Vx,NVe),e(ng,jVe),e(v,DVe),e(v,sg),e(sg,jK),e(jK,GVe),e(sg,OVe),e(sg,Xx),e(Xx,VVe),e(sg,XVe),e(v,zVe),e(v,lg),e(lg,DK),e(DK,QVe),e(lg,WVe),e(lg,zx),e(zx,HVe),e(lg,UVe),e(v,JVe),e(v,ig),e(ig,GK),e(GK,YVe),e(ig,KVe),e(ig,Qx),e(Qx,ZVe),e(ig,eXe),e(v,oXe),e(v,dg),e(dg,OK),e(OK,rXe),e(dg,tXe),e(dg,Wx),e(Wx,aXe),e(dg,nXe),e(v,sXe),e(v,cg),e(cg,VK),e(VK,lXe),e(cg,iXe),e(cg,Hx),e(Hx,dXe),e(cg,cXe),e(v,fXe),e(v,fg),e(fg,XK),e(XK,mXe),e(fg,gXe),e(fg,Ux),e(Ux,hXe),e(fg,pXe),e(v,_Xe),e(v,mg),e(mg,zK),e(zK,uXe),e(mg,bXe),e(mg,Jx),e(Jx,vXe),e(mg,FXe),e(v,TXe),e(v,gg),e(gg,QK),e(QK,MXe),e(gg,EXe),e(gg,Yx),e(Yx,CXe),e(gg,wXe),e(v,AXe),e(v,hg),e(hg,WK),e(WK,yXe),e(hg,LXe),e(hg,Kx),e(Kx,xXe),e(hg,kXe),e(v,SXe),e(v,pg),e(pg,HK),e(HK,RXe),e(pg,BXe),e(pg,Zx),e(Zx,PXe),e(pg,$Xe),e(v,IXe),e(v,_g),e(_g,UK),e(UK,qXe),e(_g,NXe),e(_g,ek),e(ek,jXe),e(_g,DXe),e(v,GXe),e(v,ug),e(ug,JK),e(JK,OXe),e(ug,VXe),e(ug,ok),e(ok,XXe),e(ug,zXe),e(v,QXe),e(v,bg),e(bg,YK),e(YK,WXe),e(bg,HXe),e(bg,rk),e(rk,UXe),e(bg,JXe),e(v,YXe),e(v,vg),e(vg,KK),e(KK,KXe),e(vg,ZXe),e(vg,tk),e(tk,eze),e(vg,oze),e(v,rze),e(v,Fg),e(Fg,ZK),e(ZK,tze),e(Fg,aze),e(Fg,ak),e(ak,nze),e(Fg,sze),e(v,lze),e(v,Tg),e(Tg,eZ),e(eZ,ize),e(Tg,dze),e(Tg,nk),e(nk,cze),e(Tg,fze),e(v,mze),e(v,Mg),e(Mg,oZ),e(oZ,gze),e(Mg,hze),e(Mg,sk),e(sk,pze),e(Mg,_ze),e(v,uze),e(v,Eg),e(Eg,rZ),e(rZ,bze),e(Eg,vze),e(Eg,lk),e(lk,Fze),e(Eg,Tze),e(v,Mze),e(v,Cg),e(Cg,tZ),e(tZ,Eze),e(Cg,Cze),e(Cg,ik),e(ik,wze),e(Cg,Aze),e(v,yze),e(v,wg),e(wg,aZ),e(aZ,Lze),e(wg,xze),e(wg,dk),e(dk,kze),e(wg,Sze),e(v,Rze),e(v,Ag),e(Ag,nZ),e(nZ,Bze),e(Ag,Pze),e(Ag,ck),e(ck,$ze),e(Ag,Ize),e(v,qze),e(v,yg),e(yg,sZ),e(sZ,Nze),e(yg,jze),e(yg,fk),e(fk,Dze),e(yg,Gze),e(v,Oze),e(v,Lg),e(Lg,lZ),e(lZ,Vze),e(Lg,Xze),e(Lg,mk),e(mk,zze),e(Lg,Qze),e(v,Wze),e(v,xg),e(xg,iZ),e(iZ,Hze),e(xg,Uze),e(xg,gk),e(gk,Jze),e(xg,Yze),e(v,Kze),e(v,kg),e(kg,dZ),e(dZ,Zze),e(kg,eQe),e(kg,hk),e(hk,oQe),e(kg,rQe),e(v,tQe),e(v,Sg),e(Sg,cZ),e(cZ,aQe),e(Sg,nQe),e(Sg,pk),e(pk,sQe),e(Sg,lQe),e(v,iQe),e(v,Rg),e(Rg,fZ),e(fZ,dQe),e(Rg,cQe),e(Rg,_k),e(_k,fQe),e(Rg,mQe),e(v,gQe),e(v,Bg),e(Bg,mZ),e(mZ,hQe),e(Bg,pQe),e(Bg,uk),e(uk,_Qe),e(Bg,uQe),e(v,bQe),e(v,Pg),e(Pg,gZ),e(gZ,vQe),e(Pg,FQe),e(Pg,bk),e(bk,TQe),e(Pg,MQe),e(v,EQe),e(v,$g),e($g,hZ),e(hZ,CQe),e($g,wQe),e($g,vk),e(vk,AQe),e($g,yQe),e(v,LQe),e(v,Ig),e(Ig,pZ),e(pZ,xQe),e(Ig,kQe),e(Ig,Fk),e(Fk,SQe),e(Ig,RQe),e(v,BQe),e(v,qg),e(qg,_Z),e(_Z,PQe),e(qg,$Qe),e(qg,Tk),e(Tk,IQe),e(qg,qQe),e(v,NQe),e(v,Ng),e(Ng,uZ),e(uZ,jQe),e(Ng,DQe),e(Ng,Mk),e(Mk,GQe),e(Ng,OQe),e(v,VQe),e(v,jg),e(jg,bZ),e(bZ,XQe),e(jg,zQe),e(jg,Ek),e(Ek,QQe),e(jg,WQe),e(mo,HQe),e(mo,vZ),e(vZ,UQe),e(mo,JQe),g(DE,mo,null),e(Qo,YQe),e(Qo,Dg),g(GE,Dg,null),e(Dg,KQe),e(Dg,FZ),e(FZ,ZQe),b(c,XRe,u),b(c,Ui,u),e(Ui,Gg),e(Gg,TZ),g(OE,TZ,null),e(Ui,eWe),e(Ui,MZ),e(MZ,oWe),b(c,zRe,u),b(c,Wo,u),g(VE,Wo,null),e(Wo,rWe),e(Wo,XE),e(XE,tWe),e(XE,Ck),e(Ck,aWe),e(XE,nWe),e(Wo,sWe),e(Wo,zE),e(zE,lWe),e(zE,EZ),e(EZ,iWe),e(zE,dWe),e(Wo,cWe),e(Wo,go),g(QE,go,null),e(go,fWe),e(go,CZ),e(CZ,mWe),e(go,gWe),e(go,Oa),e(Oa,hWe),e(Oa,wZ),e(wZ,pWe),e(Oa,_We),e(Oa,AZ),e(AZ,uWe),e(Oa,bWe),e(Oa,yZ),e(yZ,vWe),e(Oa,FWe),e(go,TWe),e(go,E),e(E,Wn),e(Wn,LZ),e(LZ,MWe),e(Wn,EWe),e(Wn,wk),e(wk,CWe),e(Wn,wWe),e(Wn,Ak),e(Ak,AWe),e(Wn,yWe),e(E,LWe),e(E,Hn),e(Hn,xZ),e(xZ,xWe),e(Hn,kWe),e(Hn,yk),e(yk,SWe),e(Hn,RWe),e(Hn,Lk),e(Lk,BWe),e(Hn,PWe),e(E,$We),e(E,Un),e(Un,kZ),e(kZ,IWe),e(Un,qWe),e(Un,xk),e(xk,NWe),e(Un,jWe),e(Un,kk),e(kk,DWe),e(Un,GWe),e(E,OWe),e(E,Og),e(Og,SZ),e(SZ,VWe),e(Og,XWe),e(Og,Sk),e(Sk,zWe),e(Og,QWe),e(E,WWe),e(E,Jn),e(Jn,RZ),e(RZ,HWe),e(Jn,UWe),e(Jn,Rk),e(Rk,JWe),e(Jn,YWe),e(Jn,Bk),e(Bk,KWe),e(Jn,ZWe),e(E,eHe),e(E,Vg),e(Vg,BZ),e(BZ,oHe),e(Vg,rHe),e(Vg,Pk),e(Pk,tHe),e(Vg,aHe),e(E,nHe),e(E,Xg),e(Xg,PZ),e(PZ,sHe),e(Xg,lHe),e(Xg,$k),e($k,iHe),e(Xg,dHe),e(E,cHe),e(E,zg),e(zg,$Z),e($Z,fHe),e(zg,mHe),e(zg,Ik),e(Ik,gHe),e(zg,hHe),e(E,pHe),e(E,Yn),e(Yn,IZ),e(IZ,_He),e(Yn,uHe),e(Yn,qk),e(qk,bHe),e(Yn,vHe),e(Yn,Nk),e(Nk,FHe),e(Yn,THe),e(E,MHe),e(E,Kn),e(Kn,qZ),e(qZ,EHe),e(Kn,CHe),e(Kn,jk),e(jk,wHe),e(Kn,AHe),e(Kn,Dk),e(Dk,yHe),e(Kn,LHe),e(E,xHe),e(E,Zn),e(Zn,NZ),e(NZ,kHe),e(Zn,SHe),e(Zn,Gk),e(Gk,RHe),e(Zn,BHe),e(Zn,Ok),e(Ok,PHe),e(Zn,$He),e(E,IHe),e(E,Qg),e(Qg,jZ),e(jZ,qHe),e(Qg,NHe),e(Qg,Vk),e(Vk,jHe),e(Qg,DHe),e(E,GHe),e(E,Wg),e(Wg,DZ),e(DZ,OHe),e(Wg,VHe),e(Wg,Xk),e(Xk,XHe),e(Wg,zHe),e(E,QHe),e(E,es),e(es,GZ),e(GZ,WHe),e(es,HHe),e(es,zk),e(zk,UHe),e(es,JHe),e(es,Qk),e(Qk,YHe),e(es,KHe),e(E,ZHe),e(E,Hg),e(Hg,OZ),e(OZ,eUe),e(Hg,oUe),e(Hg,Wk),e(Wk,rUe),e(Hg,tUe),e(E,aUe),e(E,os),e(os,VZ),e(VZ,nUe),e(os,sUe),e(os,Hk),e(Hk,lUe),e(os,iUe),e(os,Uk),e(Uk,dUe),e(os,cUe),e(E,fUe),e(E,rs),e(rs,XZ),e(XZ,mUe),e(rs,gUe),e(rs,Jk),e(Jk,hUe),e(rs,pUe),e(rs,Yk),e(Yk,_Ue),e(rs,uUe),e(E,bUe),e(E,ts),e(ts,zZ),e(zZ,vUe),e(ts,FUe),e(ts,Kk),e(Kk,TUe),e(ts,MUe),e(ts,QZ),e(QZ,EUe),e(ts,CUe),e(E,wUe),e(E,Ug),e(Ug,WZ),e(WZ,AUe),e(Ug,yUe),e(Ug,Zk),e(Zk,LUe),e(Ug,xUe),e(E,kUe),e(E,as),e(as,HZ),e(HZ,SUe),e(as,RUe),e(as,eS),e(eS,BUe),e(as,PUe),e(as,oS),e(oS,$Ue),e(as,IUe),e(E,qUe),e(E,ns),e(ns,UZ),e(UZ,NUe),e(ns,jUe),e(ns,rS),e(rS,DUe),e(ns,GUe),e(ns,tS),e(tS,OUe),e(ns,VUe),e(E,XUe),e(E,ss),e(ss,JZ),e(JZ,zUe),e(ss,QUe),e(ss,aS),e(aS,WUe),e(ss,HUe),e(ss,nS),e(nS,UUe),e(ss,JUe),e(E,YUe),e(E,ls),e(ls,YZ),e(YZ,KUe),e(ls,ZUe),e(ls,sS),e(sS,eJe),e(ls,oJe),e(ls,lS),e(lS,rJe),e(ls,tJe),e(E,aJe),e(E,is),e(is,KZ),e(KZ,nJe),e(is,sJe),e(is,iS),e(iS,lJe),e(is,iJe),e(is,dS),e(dS,dJe),e(is,cJe),e(E,fJe),e(E,Jg),e(Jg,ZZ),e(ZZ,mJe),e(Jg,gJe),e(Jg,cS),e(cS,hJe),e(Jg,pJe),e(E,_Je),e(E,ds),e(ds,eee),e(eee,uJe),e(ds,bJe),e(ds,fS),e(fS,vJe),e(ds,FJe),e(ds,mS),e(mS,TJe),e(ds,MJe),e(E,EJe),e(E,Yg),e(Yg,oee),e(oee,CJe),e(Yg,wJe),e(Yg,gS),e(gS,AJe),e(Yg,yJe),e(E,LJe),e(E,cs),e(cs,ree),e(ree,xJe),e(cs,kJe),e(cs,hS),e(hS,SJe),e(cs,RJe),e(cs,pS),e(pS,BJe),e(cs,PJe),e(E,$Je),e(E,fs),e(fs,tee),e(tee,IJe),e(fs,qJe),e(fs,_S),e(_S,NJe),e(fs,jJe),e(fs,uS),e(uS,DJe),e(fs,GJe),e(E,OJe),e(E,ms),e(ms,aee),e(aee,VJe),e(ms,XJe),e(ms,bS),e(bS,zJe),e(ms,QJe),e(ms,vS),e(vS,WJe),e(ms,HJe),e(E,UJe),e(E,gs),e(gs,nee),e(nee,JJe),e(gs,YJe),e(gs,FS),e(FS,KJe),e(gs,ZJe),e(gs,TS),e(TS,eYe),e(gs,oYe),e(E,rYe),e(E,hs),e(hs,see),e(see,tYe),e(hs,aYe),e(hs,MS),e(MS,nYe),e(hs,sYe),e(hs,ES),e(ES,lYe),e(hs,iYe),e(E,dYe),e(E,Kg),e(Kg,lee),e(lee,cYe),e(Kg,fYe),e(Kg,CS),e(CS,mYe),e(Kg,gYe),e(E,hYe),e(E,ps),e(ps,iee),e(iee,pYe),e(ps,_Ye),e(ps,wS),e(wS,uYe),e(ps,bYe),e(ps,AS),e(AS,vYe),e(ps,FYe),e(E,TYe),e(E,_s),e(_s,dee),e(dee,MYe),e(_s,EYe),e(_s,yS),e(yS,CYe),e(_s,wYe),e(_s,LS),e(LS,AYe),e(_s,yYe),e(E,LYe),e(E,us),e(us,cee),e(cee,xYe),e(us,kYe),e(us,xS),e(xS,SYe),e(us,RYe),e(us,kS),e(kS,BYe),e(us,PYe),e(E,$Ye),e(E,bs),e(bs,fee),e(fee,IYe),e(bs,qYe),e(bs,SS),e(SS,NYe),e(bs,jYe),e(bs,RS),e(RS,DYe),e(bs,GYe),e(E,OYe),e(E,vs),e(vs,mee),e(mee,VYe),e(vs,XYe),e(vs,BS),e(BS,zYe),e(vs,QYe),e(vs,PS),e(PS,WYe),e(vs,HYe),e(E,UYe),e(E,Fs),e(Fs,gee),e(gee,JYe),e(Fs,YYe),e(Fs,$S),e($S,KYe),e(Fs,ZYe),e(Fs,IS),e(IS,eKe),e(Fs,oKe),e(E,rKe),e(E,Zg),e(Zg,hee),e(hee,tKe),e(Zg,aKe),e(Zg,qS),e(qS,nKe),e(Zg,sKe),e(E,lKe),e(E,Ts),e(Ts,pee),e(pee,iKe),e(Ts,dKe),e(Ts,NS),e(NS,cKe),e(Ts,fKe),e(Ts,jS),e(jS,mKe),e(Ts,gKe),e(E,hKe),e(E,eh),e(eh,_ee),e(_ee,pKe),e(eh,_Ke),e(eh,DS),e(DS,uKe),e(eh,bKe),e(E,vKe),e(E,oh),e(oh,uee),e(uee,FKe),e(oh,TKe),e(oh,GS),e(GS,MKe),e(oh,EKe),e(E,CKe),e(E,Ms),e(Ms,bee),e(bee,wKe),e(Ms,AKe),e(Ms,OS),e(OS,yKe),e(Ms,LKe),e(Ms,VS),e(VS,xKe),e(Ms,kKe),e(E,SKe),e(E,Es),e(Es,vee),e(vee,RKe),e(Es,BKe),e(Es,XS),e(XS,PKe),e(Es,$Ke),e(Es,zS),e(zS,IKe),e(Es,qKe),e(E,NKe),e(E,rh),e(rh,Fee),e(Fee,jKe),e(rh,DKe),e(rh,QS),e(QS,GKe),e(rh,OKe),e(E,VKe),e(E,Cs),e(Cs,Tee),e(Tee,XKe),e(Cs,zKe),e(Cs,WS),e(WS,QKe),e(Cs,WKe),e(Cs,HS),e(HS,HKe),e(Cs,UKe),e(E,JKe),e(E,ws),e(ws,Mee),e(Mee,YKe),e(ws,KKe),e(ws,US),e(US,ZKe),e(ws,eZe),e(ws,JS),e(JS,oZe),e(ws,rZe),e(E,tZe),e(E,As),e(As,Eee),e(Eee,aZe),e(As,nZe),e(As,YS),e(YS,sZe),e(As,lZe),e(As,KS),e(KS,iZe),e(As,dZe),e(E,cZe),e(E,ys),e(ys,Cee),e(Cee,fZe),e(ys,mZe),e(ys,ZS),e(ZS,gZe),e(ys,hZe),e(ys,eR),e(eR,pZe),e(ys,_Ze),e(E,uZe),e(E,Ls),e(Ls,wee),e(wee,bZe),e(Ls,vZe),e(Ls,oR),e(oR,FZe),e(Ls,TZe),e(Ls,rR),e(rR,MZe),e(Ls,EZe),e(E,CZe),e(E,th),e(th,Aee),e(Aee,wZe),e(th,AZe),e(th,tR),e(tR,yZe),e(th,LZe),e(E,xZe),e(E,ah),e(ah,yee),e(yee,kZe),e(ah,SZe),e(ah,aR),e(aR,RZe),e(ah,BZe),e(E,PZe),e(E,nh),e(nh,Lee),e(Lee,$Ze),e(nh,IZe),e(nh,nR),e(nR,qZe),e(nh,NZe),e(E,jZe),e(E,sh),e(sh,xee),e(xee,DZe),e(sh,GZe),e(sh,sR),e(sR,OZe),e(sh,VZe),e(E,XZe),e(E,xs),e(xs,kee),e(kee,zZe),e(xs,QZe),e(xs,lR),e(lR,WZe),e(xs,HZe),e(xs,iR),e(iR,UZe),e(xs,JZe),e(E,YZe),e(E,lh),e(lh,See),e(See,KZe),e(lh,ZZe),e(lh,dR),e(dR,eeo),e(lh,oeo),e(E,reo),e(E,ks),e(ks,Ree),e(Ree,teo),e(ks,aeo),e(ks,cR),e(cR,neo),e(ks,seo),e(ks,fR),e(fR,leo),e(ks,ieo),e(E,deo),e(E,Ss),e(Ss,Bee),e(Bee,ceo),e(Ss,feo),e(Ss,mR),e(mR,meo),e(Ss,geo),e(Ss,gR),e(gR,heo),e(Ss,peo),e(E,_eo),e(E,Rs),e(Rs,Pee),e(Pee,ueo),e(Rs,beo),e(Rs,hR),e(hR,veo),e(Rs,Feo),e(Rs,pR),e(pR,Teo),e(Rs,Meo),e(E,Eeo),e(E,Bs),e(Bs,$ee),e($ee,Ceo),e(Bs,weo),e(Bs,_R),e(_R,Aeo),e(Bs,yeo),e(Bs,uR),e(uR,Leo),e(Bs,xeo),e(E,keo),e(E,Ps),e(Ps,Iee),e(Iee,Seo),e(Ps,Reo),e(Ps,bR),e(bR,Beo),e(Ps,Peo),e(Ps,vR),e(vR,$eo),e(Ps,Ieo),e(E,qeo),e(E,$s),e($s,qee),e(qee,Neo),e($s,jeo),e($s,FR),e(FR,Deo),e($s,Geo),e($s,TR),e(TR,Oeo),e($s,Veo),e(E,Xeo),e(E,ih),e(ih,Nee),e(Nee,zeo),e(ih,Qeo),e(ih,MR),e(MR,Weo),e(ih,Heo),e(E,Ueo),e(E,dh),e(dh,jee),e(jee,Jeo),e(dh,Yeo),e(dh,ER),e(ER,Keo),e(dh,Zeo),e(E,eoo),e(E,Is),e(Is,Dee),e(Dee,ooo),e(Is,roo),e(Is,CR),e(CR,too),e(Is,aoo),e(Is,wR),e(wR,noo),e(Is,soo),e(E,loo),e(E,qs),e(qs,Gee),e(Gee,ioo),e(qs,doo),e(qs,AR),e(AR,coo),e(qs,foo),e(qs,yR),e(yR,moo),e(qs,goo),e(E,hoo),e(E,Ns),e(Ns,Oee),e(Oee,poo),e(Ns,_oo),e(Ns,LR),e(LR,uoo),e(Ns,boo),e(Ns,xR),e(xR,voo),e(Ns,Foo),e(E,Too),e(E,ch),e(ch,Vee),e(Vee,Moo),e(ch,Eoo),e(ch,kR),e(kR,Coo),e(ch,woo),e(E,Aoo),e(E,fh),e(fh,Xee),e(Xee,yoo),e(fh,Loo),e(fh,SR),e(SR,xoo),e(fh,koo),e(E,Soo),e(E,mh),e(mh,zee),e(zee,Roo),e(mh,Boo),e(mh,RR),e(RR,Poo),e(mh,$oo),e(E,Ioo),e(E,gh),e(gh,Qee),e(Qee,qoo),e(gh,Noo),e(gh,BR),e(BR,joo),e(gh,Doo),e(E,Goo),e(E,hh),e(hh,Wee),e(Wee,Ooo),e(hh,Voo),e(hh,PR),e(PR,Xoo),e(hh,zoo),e(E,Qoo),e(E,js),e(js,Hee),e(Hee,Woo),e(js,Hoo),e(js,$R),e($R,Uoo),e(js,Joo),e(js,IR),e(IR,Yoo),e(js,Koo),e(E,Zoo),e(E,ph),e(ph,Uee),e(Uee,ero),e(ph,oro),e(ph,qR),e(qR,rro),e(ph,tro),e(E,aro),e(E,_h),e(_h,Jee),e(Jee,nro),e(_h,sro),e(_h,NR),e(NR,lro),e(_h,iro),e(E,dro),e(E,Ds),e(Ds,Yee),e(Yee,cro),e(Ds,fro),e(Ds,jR),e(jR,mro),e(Ds,gro),e(Ds,DR),e(DR,hro),e(Ds,pro),e(E,_ro),e(E,Gs),e(Gs,Kee),e(Kee,uro),e(Gs,bro),e(Gs,GR),e(GR,vro),e(Gs,Fro),e(Gs,OR),e(OR,Tro),e(Gs,Mro),e(go,Ero),e(go,Zee),e(Zee,Cro),e(go,wro),g(WE,go,null),e(Wo,Aro),e(Wo,uh),g(HE,uh,null),e(uh,yro),e(uh,eoe),e(eoe,Lro),b(c,QRe,u),b(c,Ji,u),e(Ji,bh),e(bh,ooe),g(UE,ooe,null),e(Ji,xro),e(Ji,roe),e(roe,kro),b(c,WRe,u),b(c,Ho,u),g(JE,Ho,null),e(Ho,Sro),e(Ho,YE),e(YE,Rro),e(YE,VR),e(VR,Bro),e(YE,Pro),e(Ho,$ro),e(Ho,KE),e(KE,Iro),e(KE,toe),e(toe,qro),e(KE,Nro),e(Ho,jro),e(Ho,$e),g(ZE,$e,null),e($e,Dro),e($e,aoe),e(aoe,Gro),e($e,Oro),e($e,Va),e(Va,Vro),e(Va,noe),e(noe,Xro),e(Va,zro),e(Va,soe),e(soe,Qro),e(Va,Wro),e(Va,loe),e(loe,Hro),e(Va,Uro),e($e,Jro),e($e,ee),e(ee,vh),e(vh,ioe),e(ioe,Yro),e(vh,Kro),e(vh,XR),e(XR,Zro),e(vh,eto),e(ee,oto),e(ee,Fh),e(Fh,doe),e(doe,rto),e(Fh,tto),e(Fh,zR),e(zR,ato),e(Fh,nto),e(ee,sto),e(ee,Th),e(Th,coe),e(coe,lto),e(Th,ito),e(Th,QR),e(QR,dto),e(Th,cto),e(ee,fto),e(ee,Mh),e(Mh,foe),e(foe,mto),e(Mh,gto),e(Mh,WR),e(WR,hto),e(Mh,pto),e(ee,_to),e(ee,Eh),e(Eh,moe),e(moe,uto),e(Eh,bto),e(Eh,HR),e(HR,vto),e(Eh,Fto),e(ee,Tto),e(ee,Ch),e(Ch,goe),e(goe,Mto),e(Ch,Eto),e(Ch,UR),e(UR,Cto),e(Ch,wto),e(ee,Ato),e(ee,wh),e(wh,hoe),e(hoe,yto),e(wh,Lto),e(wh,JR),e(JR,xto),e(wh,kto),e(ee,Sto),e(ee,Ah),e(Ah,poe),e(poe,Rto),e(Ah,Bto),e(Ah,YR),e(YR,Pto),e(Ah,$to),e(ee,Ito),e(ee,yh),e(yh,_oe),e(_oe,qto),e(yh,Nto),e(yh,KR),e(KR,jto),e(yh,Dto),e(ee,Gto),e(ee,Lh),e(Lh,uoe),e(uoe,Oto),e(Lh,Vto),e(Lh,ZR),e(ZR,Xto),e(Lh,zto),e(ee,Qto),e(ee,xh),e(xh,boe),e(boe,Wto),e(xh,Hto),e(xh,eB),e(eB,Uto),e(xh,Jto),e(ee,Yto),e(ee,kh),e(kh,voe),e(voe,Kto),e(kh,Zto),e(kh,oB),e(oB,eao),e(kh,oao),e(ee,rao),e(ee,Sh),e(Sh,Foe),e(Foe,tao),e(Sh,aao),e(Sh,rB),e(rB,nao),e(Sh,sao),e(ee,lao),e(ee,Rh),e(Rh,Toe),e(Toe,iao),e(Rh,dao),e(Rh,tB),e(tB,cao),e(Rh,fao),e(ee,mao),e(ee,Bh),e(Bh,Moe),e(Moe,gao),e(Bh,hao),e(Bh,aB),e(aB,pao),e(Bh,_ao),e(ee,uao),e(ee,Ph),e(Ph,Eoe),e(Eoe,bao),e(Ph,vao),e(Ph,nB),e(nB,Fao),e(Ph,Tao),e(ee,Mao),e(ee,$h),e($h,Coe),e(Coe,Eao),e($h,Cao),e($h,sB),e(sB,wao),e($h,Aao),e(ee,yao),e(ee,Ih),e(Ih,woe),e(woe,Lao),e(Ih,xao),e(Ih,lB),e(lB,kao),e(Ih,Sao),e(ee,Rao),e(ee,qh),e(qh,Aoe),e(Aoe,Bao),e(qh,Pao),e(qh,iB),e(iB,$ao),e(qh,Iao),e($e,qao),g(Nh,$e,null),e($e,Nao),e($e,yoe),e(yoe,jao),e($e,Dao),g(e5,$e,null),e(Ho,Gao),e(Ho,jh),g(o5,jh,null),e(jh,Oao),e(jh,Loe),e(Loe,Vao),b(c,HRe,u),b(c,Yi,u),e(Yi,Dh),e(Dh,xoe),g(r5,xoe,null),e(Yi,Xao),e(Yi,koe),e(koe,zao),b(c,URe,u),b(c,Uo,u),g(t5,Uo,null),e(Uo,Qao),e(Uo,a5),e(a5,Wao),e(a5,dB),e(dB,Hao),e(a5,Uao),e(Uo,Jao),e(Uo,n5),e(n5,Yao),e(n5,Soe),e(Soe,Kao),e(n5,Zao),e(Uo,eno),e(Uo,Ie),g(s5,Ie,null),e(Ie,ono),e(Ie,Roe),e(Roe,rno),e(Ie,tno),e(Ie,Ki),e(Ki,ano),e(Ki,Boe),e(Boe,nno),e(Ki,sno),e(Ki,Poe),e(Poe,lno),e(Ki,ino),e(Ie,dno),e(Ie,ke),e(ke,Gh),e(Gh,$oe),e($oe,cno),e(Gh,fno),e(Gh,cB),e(cB,mno),e(Gh,gno),e(ke,hno),e(ke,Oh),e(Oh,Ioe),e(Ioe,pno),e(Oh,_no),e(Oh,fB),e(fB,uno),e(Oh,bno),e(ke,vno),e(ke,Vh),e(Vh,qoe),e(qoe,Fno),e(Vh,Tno),e(Vh,mB),e(mB,Mno),e(Vh,Eno),e(ke,Cno),e(ke,Xh),e(Xh,Noe),e(Noe,wno),e(Xh,Ano),e(Xh,gB),e(gB,yno),e(Xh,Lno),e(ke,xno),e(ke,zh),e(zh,joe),e(joe,kno),e(zh,Sno),e(zh,hB),e(hB,Rno),e(zh,Bno),e(ke,Pno),e(ke,Qh),e(Qh,Doe),e(Doe,$no),e(Qh,Ino),e(Qh,pB),e(pB,qno),e(Qh,Nno),e(ke,jno),e(ke,Wh),e(Wh,Goe),e(Goe,Dno),e(Wh,Gno),e(Wh,_B),e(_B,Ono),e(Wh,Vno),e(ke,Xno),e(ke,Hh),e(Hh,Ooe),e(Ooe,zno),e(Hh,Qno),e(Hh,uB),e(uB,Wno),e(Hh,Hno),e(Ie,Uno),g(Uh,Ie,null),e(Ie,Jno),e(Ie,Voe),e(Voe,Yno),e(Ie,Kno),g(l5,Ie,null),e(Uo,Zno),e(Uo,Jh),g(i5,Jh,null),e(Jh,eso),e(Jh,Xoe),e(Xoe,oso),b(c,JRe,u),b(c,Zi,u),e(Zi,Yh),e(Yh,zoe),g(d5,zoe,null),e(Zi,rso),e(Zi,Qoe),e(Qoe,tso),b(c,YRe,u),b(c,Jo,u),g(c5,Jo,null),e(Jo,aso),e(Jo,ed),e(ed,nso),e(ed,bB),e(bB,sso),e(ed,lso),e(ed,vB),e(vB,iso),e(ed,dso),e(Jo,cso),e(Jo,f5),e(f5,fso),e(f5,Woe),e(Woe,mso),e(f5,gso),e(Jo,hso),e(Jo,Xr),g(m5,Xr,null),e(Xr,pso),e(Xr,Hoe),e(Hoe,_so),e(Xr,uso),e(Xr,od),e(od,bso),e(od,Uoe),e(Uoe,vso),e(od,Fso),e(od,FB),e(FB,Tso),e(od,Mso),e(Xr,Eso),e(Xr,Joe),e(Joe,Cso),e(Xr,wso),g(g5,Xr,null),e(Jo,Aso),e(Jo,qe),g(h5,qe,null),e(qe,yso),e(qe,Yoe),e(Yoe,Lso),e(qe,xso),e(qe,Xa),e(Xa,kso),e(Xa,Koe),e(Koe,Sso),e(Xa,Rso),e(Xa,Zoe),e(Zoe,Bso),e(Xa,Pso),e(Xa,ere),e(ere,$so),e(Xa,Iso),e(qe,qso),e(qe,T),e(T,Kh),e(Kh,ore),e(ore,Nso),e(Kh,jso),e(Kh,TB),e(TB,Dso),e(Kh,Gso),e(T,Oso),e(T,Zh),e(Zh,rre),e(rre,Vso),e(Zh,Xso),e(Zh,MB),e(MB,zso),e(Zh,Qso),e(T,Wso),e(T,ep),e(ep,tre),e(tre,Hso),e(ep,Uso),e(ep,EB),e(EB,Jso),e(ep,Yso),e(T,Kso),e(T,op),e(op,are),e(are,Zso),e(op,elo),e(op,CB),e(CB,olo),e(op,rlo),e(T,tlo),e(T,rp),e(rp,nre),e(nre,alo),e(rp,nlo),e(rp,wB),e(wB,slo),e(rp,llo),e(T,ilo),e(T,tp),e(tp,sre),e(sre,dlo),e(tp,clo),e(tp,AB),e(AB,flo),e(tp,mlo),e(T,glo),e(T,ap),e(ap,lre),e(lre,hlo),e(ap,plo),e(ap,yB),e(yB,_lo),e(ap,ulo),e(T,blo),e(T,np),e(np,ire),e(ire,vlo),e(np,Flo),e(np,LB),e(LB,Tlo),e(np,Mlo),e(T,Elo),e(T,sp),e(sp,dre),e(dre,Clo),e(sp,wlo),e(sp,xB),e(xB,Alo),e(sp,ylo),e(T,Llo),e(T,lp),e(lp,cre),e(cre,xlo),e(lp,klo),e(lp,kB),e(kB,Slo),e(lp,Rlo),e(T,Blo),e(T,ip),e(ip,fre),e(fre,Plo),e(ip,$lo),e(ip,SB),e(SB,Ilo),e(ip,qlo),e(T,Nlo),e(T,dp),e(dp,mre),e(mre,jlo),e(dp,Dlo),e(dp,RB),e(RB,Glo),e(dp,Olo),e(T,Vlo),e(T,cp),e(cp,gre),e(gre,Xlo),e(cp,zlo),e(cp,BB),e(BB,Qlo),e(cp,Wlo),e(T,Hlo),e(T,fp),e(fp,hre),e(hre,Ulo),e(fp,Jlo),e(fp,PB),e(PB,Ylo),e(fp,Klo),e(T,Zlo),e(T,mp),e(mp,pre),e(pre,eio),e(mp,oio),e(mp,$B),e($B,rio),e(mp,tio),e(T,aio),e(T,gp),e(gp,_re),e(_re,nio),e(gp,sio),e(gp,IB),e(IB,lio),e(gp,iio),e(T,dio),e(T,hp),e(hp,ure),e(ure,cio),e(hp,fio),e(hp,qB),e(qB,mio),e(hp,gio),e(T,hio),e(T,pp),e(pp,bre),e(bre,pio),e(pp,_io),e(pp,NB),e(NB,uio),e(pp,bio),e(T,vio),e(T,_p),e(_p,vre),e(vre,Fio),e(_p,Tio),e(_p,jB),e(jB,Mio),e(_p,Eio),e(T,Cio),e(T,up),e(up,Fre),e(Fre,wio),e(up,Aio),e(up,DB),e(DB,yio),e(up,Lio),e(T,xio),e(T,bp),e(bp,Tre),e(Tre,kio),e(bp,Sio),e(bp,GB),e(GB,Rio),e(bp,Bio),e(T,Pio),e(T,vp),e(vp,Mre),e(Mre,$io),e(vp,Iio),e(vp,OB),e(OB,qio),e(vp,Nio),e(T,jio),e(T,Fp),e(Fp,Ere),e(Ere,Dio),e(Fp,Gio),e(Fp,VB),e(VB,Oio),e(Fp,Vio),e(T,Xio),e(T,Tp),e(Tp,Cre),e(Cre,zio),e(Tp,Qio),e(Tp,XB),e(XB,Wio),e(Tp,Hio),e(T,Uio),e(T,Mp),e(Mp,wre),e(wre,Jio),e(Mp,Yio),e(Mp,zB),e(zB,Kio),e(Mp,Zio),e(T,edo),e(T,Ep),e(Ep,Are),e(Are,odo),e(Ep,rdo),e(Ep,QB),e(QB,tdo),e(Ep,ado),e(T,ndo),e(T,Cp),e(Cp,yre),e(yre,sdo),e(Cp,ldo),e(Cp,WB),e(WB,ido),e(Cp,ddo),e(T,cdo),e(T,wp),e(wp,Lre),e(Lre,fdo),e(wp,mdo),e(wp,HB),e(HB,gdo),e(wp,hdo),e(T,pdo),e(T,Ap),e(Ap,xre),e(xre,_do),e(Ap,udo),e(Ap,UB),e(UB,bdo),e(Ap,vdo),e(T,Fdo),e(T,yp),e(yp,kre),e(kre,Tdo),e(yp,Mdo),e(yp,JB),e(JB,Edo),e(yp,Cdo),e(T,wdo),e(T,Os),e(Os,Sre),e(Sre,Ado),e(Os,ydo),e(Os,YB),e(YB,Ldo),e(Os,xdo),e(Os,KB),e(KB,kdo),e(Os,Sdo),e(T,Rdo),e(T,Lp),e(Lp,Rre),e(Rre,Bdo),e(Lp,Pdo),e(Lp,ZB),e(ZB,$do),e(Lp,Ido),e(T,qdo),e(T,xp),e(xp,Bre),e(Bre,Ndo),e(xp,jdo),e(xp,eP),e(eP,Ddo),e(xp,Gdo),e(T,Odo),e(T,kp),e(kp,Pre),e(Pre,Vdo),e(kp,Xdo),e(kp,oP),e(oP,zdo),e(kp,Qdo),e(T,Wdo),e(T,Sp),e(Sp,$re),e($re,Hdo),e(Sp,Udo),e(Sp,rP),e(rP,Jdo),e(Sp,Ydo),e(T,Kdo),e(T,Rp),e(Rp,Ire),e(Ire,Zdo),e(Rp,eco),e(Rp,tP),e(tP,oco),e(Rp,rco),e(T,tco),e(T,Bp),e(Bp,qre),e(qre,aco),e(Bp,nco),e(Bp,aP),e(aP,sco),e(Bp,lco),e(T,ico),e(T,Pp),e(Pp,Nre),e(Nre,dco),e(Pp,cco),e(Pp,nP),e(nP,fco),e(Pp,mco),e(T,gco),e(T,$p),e($p,jre),e(jre,hco),e($p,pco),e($p,sP),e(sP,_co),e($p,uco),e(T,bco),e(T,Ip),e(Ip,Dre),e(Dre,vco),e(Ip,Fco),e(Ip,lP),e(lP,Tco),e(Ip,Mco),e(T,Eco),e(T,qp),e(qp,Gre),e(Gre,Cco),e(qp,wco),e(qp,iP),e(iP,Aco),e(qp,yco),e(T,Lco),e(T,Np),e(Np,Ore),e(Ore,xco),e(Np,kco),e(Np,dP),e(dP,Sco),e(Np,Rco),e(T,Bco),e(T,jp),e(jp,Vre),e(Vre,Pco),e(jp,$co),e(jp,cP),e(cP,Ico),e(jp,qco),e(T,Nco),e(T,Dp),e(Dp,Xre),e(Xre,jco),e(Dp,Dco),e(Dp,fP),e(fP,Gco),e(Dp,Oco),e(T,Vco),e(T,Gp),e(Gp,zre),e(zre,Xco),e(Gp,zco),e(Gp,mP),e(mP,Qco),e(Gp,Wco),e(T,Hco),e(T,Op),e(Op,Qre),e(Qre,Uco),e(Op,Jco),e(Op,gP),e(gP,Yco),e(Op,Kco),e(T,Zco),e(T,Vp),e(Vp,Wre),e(Wre,efo),e(Vp,ofo),e(Vp,hP),e(hP,rfo),e(Vp,tfo),e(T,afo),e(T,Xp),e(Xp,Hre),e(Hre,nfo),e(Xp,sfo),e(Xp,pP),e(pP,lfo),e(Xp,ifo),e(T,dfo),e(T,zp),e(zp,Ure),e(Ure,cfo),e(zp,ffo),e(zp,_P),e(_P,mfo),e(zp,gfo),e(T,hfo),e(T,Qp),e(Qp,Jre),e(Jre,pfo),e(Qp,_fo),e(Qp,uP),e(uP,ufo),e(Qp,bfo),e(T,vfo),e(T,Wp),e(Wp,Yre),e(Yre,Ffo),e(Wp,Tfo),e(Wp,bP),e(bP,Mfo),e(Wp,Efo),e(T,Cfo),e(T,Hp),e(Hp,Kre),e(Kre,wfo),e(Hp,Afo),e(Hp,vP),e(vP,yfo),e(Hp,Lfo),e(T,xfo),e(T,Up),e(Up,Zre),e(Zre,kfo),e(Up,Sfo),e(Up,FP),e(FP,Rfo),e(Up,Bfo),e(T,Pfo),e(T,Jp),e(Jp,ete),e(ete,$fo),e(Jp,Ifo),e(Jp,TP),e(TP,qfo),e(Jp,Nfo),e(T,jfo),e(T,Yp),e(Yp,ote),e(ote,Dfo),e(Yp,Gfo),e(Yp,MP),e(MP,Ofo),e(Yp,Vfo),e(T,Xfo),e(T,Kp),e(Kp,rte),e(rte,zfo),e(Kp,Qfo),e(Kp,EP),e(EP,Wfo),e(Kp,Hfo),e(T,Ufo),e(T,Zp),e(Zp,tte),e(tte,Jfo),e(Zp,Yfo),e(Zp,CP),e(CP,Kfo),e(Zp,Zfo),e(T,emo),e(T,e_),e(e_,ate),e(ate,omo),e(e_,rmo),e(e_,wP),e(wP,tmo),e(e_,amo),e(T,nmo),e(T,o_),e(o_,nte),e(nte,smo),e(o_,lmo),e(o_,AP),e(AP,imo),e(o_,dmo),e(T,cmo),e(T,r_),e(r_,ste),e(ste,fmo),e(r_,mmo),e(r_,yP),e(yP,gmo),e(r_,hmo),e(T,pmo),e(T,t_),e(t_,lte),e(lte,_mo),e(t_,umo),e(t_,LP),e(LP,bmo),e(t_,vmo),e(T,Fmo),e(T,a_),e(a_,ite),e(ite,Tmo),e(a_,Mmo),e(a_,xP),e(xP,Emo),e(a_,Cmo),e(T,wmo),e(T,n_),e(n_,dte),e(dte,Amo),e(n_,ymo),e(n_,kP),e(kP,Lmo),e(n_,xmo),e(T,kmo),e(T,s_),e(s_,cte),e(cte,Smo),e(s_,Rmo),e(s_,SP),e(SP,Bmo),e(s_,Pmo),e(T,$mo),e(T,l_),e(l_,fte),e(fte,Imo),e(l_,qmo),e(l_,RP),e(RP,Nmo),e(l_,jmo),e(T,Dmo),e(T,i_),e(i_,mte),e(mte,Gmo),e(i_,Omo),e(i_,BP),e(BP,Vmo),e(i_,Xmo),e(T,zmo),e(T,d_),e(d_,gte),e(gte,Qmo),e(d_,Wmo),e(d_,PP),e(PP,Hmo),e(d_,Umo),e(T,Jmo),e(T,c_),e(c_,hte),e(hte,Ymo),e(c_,Kmo),e(c_,$P),e($P,Zmo),e(c_,ego),e(T,ogo),e(T,f_),e(f_,pte),e(pte,rgo),e(f_,tgo),e(f_,IP),e(IP,ago),e(f_,ngo),e(T,sgo),e(T,m_),e(m_,_te),e(_te,lgo),e(m_,igo),e(m_,qP),e(qP,dgo),e(m_,cgo),e(T,fgo),e(T,g_),e(g_,ute),e(ute,mgo),e(g_,ggo),e(g_,NP),e(NP,hgo),e(g_,pgo),e(T,_go),e(T,h_),e(h_,bte),e(bte,ugo),e(h_,bgo),e(h_,jP),e(jP,vgo),e(h_,Fgo),e(T,Tgo),e(T,p_),e(p_,vte),e(vte,Mgo),e(p_,Ego),e(p_,DP),e(DP,Cgo),e(p_,wgo),e(T,Ago),e(T,__),e(__,Fte),e(Fte,ygo),e(__,Lgo),e(__,GP),e(GP,xgo),e(__,kgo),e(T,Sgo),e(T,u_),e(u_,Tte),e(Tte,Rgo),e(u_,Bgo),e(u_,OP),e(OP,Pgo),e(u_,$go),e(T,Igo),e(T,b_),e(b_,Mte),e(Mte,qgo),e(b_,Ngo),e(b_,VP),e(VP,jgo),e(b_,Dgo),e(T,Ggo),e(T,v_),e(v_,Ete),e(Ete,Ogo),e(v_,Vgo),e(v_,XP),e(XP,Xgo),e(v_,zgo),e(T,Qgo),e(T,F_),e(F_,Cte),e(Cte,Wgo),e(F_,Hgo),e(F_,zP),e(zP,Ugo),e(F_,Jgo),e(T,Ygo),e(T,T_),e(T_,wte),e(wte,Kgo),e(T_,Zgo),e(T_,QP),e(QP,eho),e(T_,oho),e(T,rho),e(T,M_),e(M_,Ate),e(Ate,tho),e(M_,aho),e(M_,WP),e(WP,nho),e(M_,sho),e(T,lho),e(T,E_),e(E_,yte),e(yte,iho),e(E_,dho),e(E_,HP),e(HP,cho),e(E_,fho),e(T,mho),e(T,C_),e(C_,Lte),e(Lte,gho),e(C_,hho),e(C_,UP),e(UP,pho),e(C_,_ho),e(T,uho),e(T,w_),e(w_,xte),e(xte,bho),e(w_,vho),e(w_,JP),e(JP,Fho),e(w_,Tho),e(T,Mho),e(T,A_),e(A_,kte),e(kte,Eho),e(A_,Cho),e(A_,YP),e(YP,who),e(A_,Aho),e(T,yho),e(T,y_),e(y_,Ste),e(Ste,Lho),e(y_,xho),e(y_,KP),e(KP,kho),e(y_,Sho),e(T,Rho),e(T,L_),e(L_,Rte),e(Rte,Bho),e(L_,Pho),e(L_,ZP),e(ZP,$ho),e(L_,Iho),e(T,qho),e(T,x_),e(x_,Bte),e(Bte,Nho),e(x_,jho),e(x_,e$),e(e$,Dho),e(x_,Gho),e(T,Oho),e(T,k_),e(k_,Pte),e(Pte,Vho),e(k_,Xho),e(k_,o$),e(o$,zho),e(k_,Qho),e(T,Who),e(T,S_),e(S_,$te),e($te,Hho),e(S_,Uho),e(S_,r$),e(r$,Jho),e(S_,Yho),e(T,Kho),e(T,R_),e(R_,Ite),e(Ite,Zho),e(R_,epo),e(R_,t$),e(t$,opo),e(R_,rpo),e(T,tpo),e(T,B_),e(B_,qte),e(qte,apo),e(B_,npo),e(B_,a$),e(a$,spo),e(B_,lpo),e(T,ipo),e(T,P_),e(P_,Nte),e(Nte,dpo),e(P_,cpo),e(P_,n$),e(n$,fpo),e(P_,mpo),e(T,gpo),e(T,$_),e($_,jte),e(jte,hpo),e($_,ppo),e($_,s$),e(s$,_po),e($_,upo),e(T,bpo),e(T,I_),e(I_,Dte),e(Dte,vpo),e(I_,Fpo),e(I_,l$),e(l$,Tpo),e(I_,Mpo),e(qe,Epo),e(qe,q_),e(q_,Cpo),e(q_,Gte),e(Gte,wpo),e(q_,Apo),e(q_,Ote),e(Ote,ypo),e(qe,Lpo),e(qe,Vte),e(Vte,xpo),e(qe,kpo),g(p5,qe,null),b(c,KRe,u),b(c,rd,u),e(rd,N_),e(N_,Xte),g(_5,Xte,null),e(rd,Spo),e(rd,zte),e(zte,Rpo),b(c,ZRe,u),b(c,Yo,u),g(u5,Yo,null),e(Yo,Bpo),e(Yo,td),e(td,Ppo),e(td,i$),e(i$,$po),e(td,Ipo),e(td,d$),e(d$,qpo),e(td,Npo),e(Yo,jpo),e(Yo,b5),e(b5,Dpo),e(b5,Qte),e(Qte,Gpo),e(b5,Opo),e(Yo,Vpo),e(Yo,zr),g(v5,zr,null),e(zr,Xpo),e(zr,Wte),e(Wte,zpo),e(zr,Qpo),e(zr,ad),e(ad,Wpo),e(ad,Hte),e(Hte,Hpo),e(ad,Upo),e(ad,c$),e(c$,Jpo),e(ad,Ypo),e(zr,Kpo),e(zr,Ute),e(Ute,Zpo),e(zr,e_o),g(F5,zr,null),e(Yo,o_o),e(Yo,Ne),g(T5,Ne,null),e(Ne,r_o),e(Ne,Jte),e(Jte,t_o),e(Ne,a_o),e(Ne,za),e(za,n_o),e(za,Yte),e(Yte,s_o),e(za,l_o),e(za,Kte),e(Kte,i_o),e(za,d_o),e(za,Zte),e(Zte,c_o),e(za,f_o),e(Ne,m_o),e(Ne,S),e(S,j_),e(j_,eae),e(eae,g_o),e(j_,h_o),e(j_,f$),e(f$,p_o),e(j_,__o),e(S,u_o),e(S,D_),e(D_,oae),e(oae,b_o),e(D_,v_o),e(D_,m$),e(m$,F_o),e(D_,T_o),e(S,M_o),e(S,G_),e(G_,rae),e(rae,E_o),e(G_,C_o),e(G_,g$),e(g$,w_o),e(G_,A_o),e(S,y_o),e(S,O_),e(O_,tae),e(tae,L_o),e(O_,x_o),e(O_,h$),e(h$,k_o),e(O_,S_o),e(S,R_o),e(S,V_),e(V_,aae),e(aae,B_o),e(V_,P_o),e(V_,p$),e(p$,$_o),e(V_,I_o),e(S,q_o),e(S,X_),e(X_,nae),e(nae,N_o),e(X_,j_o),e(X_,_$),e(_$,D_o),e(X_,G_o),e(S,O_o),e(S,z_),e(z_,sae),e(sae,V_o),e(z_,X_o),e(z_,u$),e(u$,z_o),e(z_,Q_o),e(S,W_o),e(S,Q_),e(Q_,lae),e(lae,H_o),e(Q_,U_o),e(Q_,b$),e(b$,J_o),e(Q_,Y_o),e(S,K_o),e(S,W_),e(W_,iae),e(iae,Z_o),e(W_,euo),e(W_,v$),e(v$,ouo),e(W_,ruo),e(S,tuo),e(S,H_),e(H_,dae),e(dae,auo),e(H_,nuo),e(H_,F$),e(F$,suo),e(H_,luo),e(S,iuo),e(S,U_),e(U_,cae),e(cae,duo),e(U_,cuo),e(U_,T$),e(T$,fuo),e(U_,muo),e(S,guo),e(S,J_),e(J_,fae),e(fae,huo),e(J_,puo),e(J_,M$),e(M$,_uo),e(J_,uuo),e(S,buo),e(S,Y_),e(Y_,mae),e(mae,vuo),e(Y_,Fuo),e(Y_,E$),e(E$,Tuo),e(Y_,Muo),e(S,Euo),e(S,K_),e(K_,gae),e(gae,Cuo),e(K_,wuo),e(K_,C$),e(C$,Auo),e(K_,yuo),e(S,Luo),e(S,Z_),e(Z_,hae),e(hae,xuo),e(Z_,kuo),e(Z_,w$),e(w$,Suo),e(Z_,Ruo),e(S,Buo),e(S,eu),e(eu,pae),e(pae,Puo),e(eu,$uo),e(eu,A$),e(A$,Iuo),e(eu,quo),e(S,Nuo),e(S,ou),e(ou,_ae),e(_ae,juo),e(ou,Duo),e(ou,y$),e(y$,Guo),e(ou,Ouo),e(S,Vuo),e(S,ru),e(ru,uae),e(uae,Xuo),e(ru,zuo),e(ru,L$),e(L$,Quo),e(ru,Wuo),e(S,Huo),e(S,tu),e(tu,bae),e(bae,Uuo),e(tu,Juo),e(tu,x$),e(x$,Yuo),e(tu,Kuo),e(S,Zuo),e(S,au),e(au,vae),e(vae,e1o),e(au,o1o),e(au,k$),e(k$,r1o),e(au,t1o),e(S,a1o),e(S,nu),e(nu,Fae),e(Fae,n1o),e(nu,s1o),e(nu,S$),e(S$,l1o),e(nu,i1o),e(S,d1o),e(S,su),e(su,Tae),e(Tae,c1o),e(su,f1o),e(su,R$),e(R$,m1o),e(su,g1o),e(S,h1o),e(S,lu),e(lu,Mae),e(Mae,p1o),e(lu,_1o),e(lu,B$),e(B$,u1o),e(lu,b1o),e(S,v1o),e(S,iu),e(iu,Eae),e(Eae,F1o),e(iu,T1o),e(iu,P$),e(P$,M1o),e(iu,E1o),e(S,C1o),e(S,du),e(du,Cae),e(Cae,w1o),e(du,A1o),e(du,$$),e($$,y1o),e(du,L1o),e(S,x1o),e(S,cu),e(cu,wae),e(wae,k1o),e(cu,S1o),e(cu,I$),e(I$,R1o),e(cu,B1o),e(S,P1o),e(S,fu),e(fu,Aae),e(Aae,$1o),e(fu,I1o),e(fu,q$),e(q$,q1o),e(fu,N1o),e(S,j1o),e(S,mu),e(mu,yae),e(yae,D1o),e(mu,G1o),e(mu,N$),e(N$,O1o),e(mu,V1o),e(S,X1o),e(S,gu),e(gu,Lae),e(Lae,z1o),e(gu,Q1o),e(gu,j$),e(j$,W1o),e(gu,H1o),e(S,U1o),e(S,hu),e(hu,xae),e(xae,J1o),e(hu,Y1o),e(hu,D$),e(D$,K1o),e(hu,Z1o),e(S,ebo),e(S,pu),e(pu,kae),e(kae,obo),e(pu,rbo),e(pu,G$),e(G$,tbo),e(pu,abo),e(S,nbo),e(S,_u),e(_u,Sae),e(Sae,sbo),e(_u,lbo),e(_u,O$),e(O$,ibo),e(_u,dbo),e(S,cbo),e(S,uu),e(uu,Rae),e(Rae,fbo),e(uu,mbo),e(uu,V$),e(V$,gbo),e(uu,hbo),e(S,pbo),e(S,bu),e(bu,Bae),e(Bae,_bo),e(bu,ubo),e(bu,X$),e(X$,bbo),e(bu,vbo),e(S,Fbo),e(S,vu),e(vu,Pae),e(Pae,Tbo),e(vu,Mbo),e(vu,z$),e(z$,Ebo),e(vu,Cbo),e(S,wbo),e(S,Fu),e(Fu,$ae),e($ae,Abo),e(Fu,ybo),e(Fu,Q$),e(Q$,Lbo),e(Fu,xbo),e(S,kbo),e(S,Tu),e(Tu,Iae),e(Iae,Sbo),e(Tu,Rbo),e(Tu,W$),e(W$,Bbo),e(Tu,Pbo),e(S,$bo),e(S,Mu),e(Mu,qae),e(qae,Ibo),e(Mu,qbo),e(Mu,H$),e(H$,Nbo),e(Mu,jbo),e(S,Dbo),e(S,Eu),e(Eu,Nae),e(Nae,Gbo),e(Eu,Obo),e(Eu,U$),e(U$,Vbo),e(Eu,Xbo),e(Ne,zbo),e(Ne,Cu),e(Cu,Qbo),e(Cu,jae),e(jae,Wbo),e(Cu,Hbo),e(Cu,Dae),e(Dae,Ubo),e(Ne,Jbo),e(Ne,Gae),e(Gae,Ybo),e(Ne,Kbo),g(M5,Ne,null),b(c,eBe,u),b(c,nd,u),e(nd,wu),e(wu,Oae),g(E5,Oae,null),e(nd,Zbo),e(nd,Vae),e(Vae,e2o),b(c,oBe,u),b(c,Ko,u),g(C5,Ko,null),e(Ko,o2o),e(Ko,sd),e(sd,r2o),e(sd,J$),e(J$,t2o),e(sd,a2o),e(sd,Y$),e(Y$,n2o),e(sd,s2o),e(Ko,l2o),e(Ko,w5),e(w5,i2o),e(w5,Xae),e(Xae,d2o),e(w5,c2o),e(Ko,f2o),e(Ko,Qr),g(A5,Qr,null),e(Qr,m2o),e(Qr,zae),e(zae,g2o),e(Qr,h2o),e(Qr,ld),e(ld,p2o),e(ld,Qae),e(Qae,_2o),e(ld,u2o),e(ld,K$),e(K$,b2o),e(ld,v2o),e(Qr,F2o),e(Qr,Wae),e(Wae,T2o),e(Qr,M2o),g(y5,Qr,null),e(Ko,E2o),e(Ko,je),g(L5,je,null),e(je,C2o),e(je,Hae),e(Hae,w2o),e(je,A2o),e(je,Qa),e(Qa,y2o),e(Qa,Uae),e(Uae,L2o),e(Qa,x2o),e(Qa,Jae),e(Jae,k2o),e(Qa,S2o),e(Qa,Yae),e(Yae,R2o),e(Qa,B2o),e(je,P2o),e(je,$),e($,Au),e(Au,Kae),e(Kae,$2o),e(Au,I2o),e(Au,Z$),e(Z$,q2o),e(Au,N2o),e($,j2o),e($,yu),e(yu,Zae),e(Zae,D2o),e(yu,G2o),e(yu,eI),e(eI,O2o),e(yu,V2o),e($,X2o),e($,Lu),e(Lu,ene),e(ene,z2o),e(Lu,Q2o),e(Lu,oI),e(oI,W2o),e(Lu,H2o),e($,U2o),e($,xu),e(xu,one),e(one,J2o),e(xu,Y2o),e(xu,rI),e(rI,K2o),e(xu,Z2o),e($,e6o),e($,ku),e(ku,rne),e(rne,o6o),e(ku,r6o),e(ku,tI),e(tI,t6o),e(ku,a6o),e($,n6o),e($,Su),e(Su,tne),e(tne,s6o),e(Su,l6o),e(Su,aI),e(aI,i6o),e(Su,d6o),e($,c6o),e($,Ru),e(Ru,ane),e(ane,f6o),e(Ru,m6o),e(Ru,nI),e(nI,g6o),e(Ru,h6o),e($,p6o),e($,Bu),e(Bu,nne),e(nne,_6o),e(Bu,u6o),e(Bu,sI),e(sI,b6o),e(Bu,v6o),e($,F6o),e($,Pu),e(Pu,sne),e(sne,T6o),e(Pu,M6o),e(Pu,lI),e(lI,E6o),e(Pu,C6o),e($,w6o),e($,$u),e($u,lne),e(lne,A6o),e($u,y6o),e($u,iI),e(iI,L6o),e($u,x6o),e($,k6o),e($,Iu),e(Iu,ine),e(ine,S6o),e(Iu,R6o),e(Iu,dI),e(dI,B6o),e(Iu,P6o),e($,$6o),e($,qu),e(qu,dne),e(dne,I6o),e(qu,q6o),e(qu,cI),e(cI,N6o),e(qu,j6o),e($,D6o),e($,Nu),e(Nu,cne),e(cne,G6o),e(Nu,O6o),e(Nu,fI),e(fI,V6o),e(Nu,X6o),e($,z6o),e($,ju),e(ju,fne),e(fne,Q6o),e(ju,W6o),e(ju,mI),e(mI,H6o),e(ju,U6o),e($,J6o),e($,Du),e(Du,mne),e(mne,Y6o),e(Du,K6o),e(Du,gI),e(gI,Z6o),e(Du,evo),e($,ovo),e($,Gu),e(Gu,gne),e(gne,rvo),e(Gu,tvo),e(Gu,hI),e(hI,avo),e(Gu,nvo),e($,svo),e($,Ou),e(Ou,hne),e(hne,lvo),e(Ou,ivo),e(Ou,pI),e(pI,dvo),e(Ou,cvo),e($,fvo),e($,Vu),e(Vu,pne),e(pne,mvo),e(Vu,gvo),e(Vu,_I),e(_I,hvo),e(Vu,pvo),e($,_vo),e($,Xu),e(Xu,_ne),e(_ne,uvo),e(Xu,bvo),e(Xu,uI),e(uI,vvo),e(Xu,Fvo),e($,Tvo),e($,zu),e(zu,une),e(une,Mvo),e(zu,Evo),e(zu,bI),e(bI,Cvo),e(zu,wvo),e($,Avo),e($,Qu),e(Qu,bne),e(bne,yvo),e(Qu,Lvo),e(Qu,vI),e(vI,xvo),e(Qu,kvo),e($,Svo),e($,Wu),e(Wu,vne),e(vne,Rvo),e(Wu,Bvo),e(Wu,FI),e(FI,Pvo),e(Wu,$vo),e($,Ivo),e($,Hu),e(Hu,Fne),e(Fne,qvo),e(Hu,Nvo),e(Hu,TI),e(TI,jvo),e(Hu,Dvo),e($,Gvo),e($,Uu),e(Uu,Tne),e(Tne,Ovo),e(Uu,Vvo),e(Uu,MI),e(MI,Xvo),e(Uu,zvo),e($,Qvo),e($,Ju),e(Ju,Mne),e(Mne,Wvo),e(Ju,Hvo),e(Ju,EI),e(EI,Uvo),e(Ju,Jvo),e($,Yvo),e($,Yu),e(Yu,Ene),e(Ene,Kvo),e(Yu,Zvo),e(Yu,CI),e(CI,eFo),e(Yu,oFo),e($,rFo),e($,Ku),e(Ku,Cne),e(Cne,tFo),e(Ku,aFo),e(Ku,wI),e(wI,nFo),e(Ku,sFo),e($,lFo),e($,Zu),e(Zu,wne),e(wne,iFo),e(Zu,dFo),e(Zu,AI),e(AI,cFo),e(Zu,fFo),e($,mFo),e($,e1),e(e1,Ane),e(Ane,gFo),e(e1,hFo),e(e1,yI),e(yI,pFo),e(e1,_Fo),e($,uFo),e($,o1),e(o1,yne),e(yne,bFo),e(o1,vFo),e(o1,LI),e(LI,FFo),e(o1,TFo),e($,MFo),e($,r1),e(r1,Lne),e(Lne,EFo),e(r1,CFo),e(r1,xI),e(xI,wFo),e(r1,AFo),e($,yFo),e($,t1),e(t1,xne),e(xne,LFo),e(t1,xFo),e(t1,kI),e(kI,kFo),e(t1,SFo),e($,RFo),e($,a1),e(a1,kne),e(kne,BFo),e(a1,PFo),e(a1,SI),e(SI,$Fo),e(a1,IFo),e($,qFo),e($,n1),e(n1,Sne),e(Sne,NFo),e(n1,jFo),e(n1,RI),e(RI,DFo),e(n1,GFo),e($,OFo),e($,s1),e(s1,Rne),e(Rne,VFo),e(s1,XFo),e(s1,BI),e(BI,zFo),e(s1,QFo),e(je,WFo),e(je,l1),e(l1,HFo),e(l1,Bne),e(Bne,UFo),e(l1,JFo),e(l1,Pne),e(Pne,YFo),e(je,KFo),e(je,$ne),e($ne,ZFo),e(je,eTo),g(x5,je,null),b(c,rBe,u),b(c,id,u),e(id,i1),e(i1,Ine),g(k5,Ine,null),e(id,oTo),e(id,qne),e(qne,rTo),b(c,tBe,u),b(c,Zo,u),g(S5,Zo,null),e(Zo,tTo),e(Zo,dd),e(dd,aTo),e(dd,PI),e(PI,nTo),e(dd,sTo),e(dd,$I),e($I,lTo),e(dd,iTo),e(Zo,dTo),e(Zo,R5),e(R5,cTo),e(R5,Nne),e(Nne,fTo),e(R5,mTo),e(Zo,gTo),e(Zo,Wr),g(B5,Wr,null),e(Wr,hTo),e(Wr,jne),e(jne,pTo),e(Wr,_To),e(Wr,cd),e(cd,uTo),e(cd,Dne),e(Dne,bTo),e(cd,vTo),e(cd,II),e(II,FTo),e(cd,TTo),e(Wr,MTo),e(Wr,Gne),e(Gne,ETo),e(Wr,CTo),g(P5,Wr,null),e(Zo,wTo),e(Zo,De),g($5,De,null),e(De,ATo),e(De,One),e(One,yTo),e(De,LTo),e(De,Wa),e(Wa,xTo),e(Wa,Vne),e(Vne,kTo),e(Wa,STo),e(Wa,Xne),e(Xne,RTo),e(Wa,BTo),e(Wa,zne),e(zne,PTo),e(Wa,$To),e(De,ITo),e(De,I),e(I,d1),e(d1,Qne),e(Qne,qTo),e(d1,NTo),e(d1,qI),e(qI,jTo),e(d1,DTo),e(I,GTo),e(I,c1),e(c1,Wne),e(Wne,OTo),e(c1,VTo),e(c1,NI),e(NI,XTo),e(c1,zTo),e(I,QTo),e(I,f1),e(f1,Hne),e(Hne,WTo),e(f1,HTo),e(f1,jI),e(jI,UTo),e(f1,JTo),e(I,YTo),e(I,m1),e(m1,Une),e(Une,KTo),e(m1,ZTo),e(m1,DI),e(DI,e8o),e(m1,o8o),e(I,r8o),e(I,g1),e(g1,Jne),e(Jne,t8o),e(g1,a8o),e(g1,GI),e(GI,n8o),e(g1,s8o),e(I,l8o),e(I,h1),e(h1,Yne),e(Yne,i8o),e(h1,d8o),e(h1,OI),e(OI,c8o),e(h1,f8o),e(I,m8o),e(I,p1),e(p1,Kne),e(Kne,g8o),e(p1,h8o),e(p1,VI),e(VI,p8o),e(p1,_8o),e(I,u8o),e(I,_1),e(_1,Zne),e(Zne,b8o),e(_1,v8o),e(_1,XI),e(XI,F8o),e(_1,T8o),e(I,M8o),e(I,u1),e(u1,ese),e(ese,E8o),e(u1,C8o),e(u1,zI),e(zI,w8o),e(u1,A8o),e(I,y8o),e(I,b1),e(b1,ose),e(ose,L8o),e(b1,x8o),e(b1,QI),e(QI,k8o),e(b1,S8o),e(I,R8o),e(I,v1),e(v1,rse),e(rse,B8o),e(v1,P8o),e(v1,WI),e(WI,$8o),e(v1,I8o),e(I,q8o),e(I,F1),e(F1,tse),e(tse,N8o),e(F1,j8o),e(F1,HI),e(HI,D8o),e(F1,G8o),e(I,O8o),e(I,T1),e(T1,ase),e(ase,V8o),e(T1,X8o),e(T1,UI),e(UI,z8o),e(T1,Q8o),e(I,W8o),e(I,M1),e(M1,nse),e(nse,H8o),e(M1,U8o),e(M1,JI),e(JI,J8o),e(M1,Y8o),e(I,K8o),e(I,E1),e(E1,sse),e(sse,Z8o),e(E1,e7o),e(E1,YI),e(YI,o7o),e(E1,r7o),e(I,t7o),e(I,C1),e(C1,lse),e(lse,a7o),e(C1,n7o),e(C1,KI),e(KI,s7o),e(C1,l7o),e(I,i7o),e(I,w1),e(w1,ise),e(ise,d7o),e(w1,c7o),e(w1,ZI),e(ZI,f7o),e(w1,m7o),e(I,g7o),e(I,A1),e(A1,dse),e(dse,h7o),e(A1,p7o),e(A1,eq),e(eq,_7o),e(A1,u7o),e(I,b7o),e(I,y1),e(y1,cse),e(cse,v7o),e(y1,F7o),e(y1,oq),e(oq,T7o),e(y1,M7o),e(I,E7o),e(I,L1),e(L1,fse),e(fse,C7o),e(L1,w7o),e(L1,rq),e(rq,A7o),e(L1,y7o),e(I,L7o),e(I,x1),e(x1,mse),e(mse,x7o),e(x1,k7o),e(x1,tq),e(tq,S7o),e(x1,R7o),e(I,B7o),e(I,k1),e(k1,gse),e(gse,P7o),e(k1,$7o),e(k1,aq),e(aq,I7o),e(k1,q7o),e(I,N7o),e(I,S1),e(S1,hse),e(hse,j7o),e(S1,D7o),e(S1,nq),e(nq,G7o),e(S1,O7o),e(I,V7o),e(I,R1),e(R1,pse),e(pse,X7o),e(R1,z7o),e(R1,sq),e(sq,Q7o),e(R1,W7o),e(I,H7o),e(I,B1),e(B1,_se),e(_se,U7o),e(B1,J7o),e(B1,lq),e(lq,Y7o),e(B1,K7o),e(I,Z7o),e(I,P1),e(P1,use),e(use,e9o),e(P1,o9o),e(P1,iq),e(iq,r9o),e(P1,t9o),e(I,a9o),e(I,$1),e($1,bse),e(bse,n9o),e($1,s9o),e($1,dq),e(dq,l9o),e($1,i9o),e(I,d9o),e(I,I1),e(I1,vse),e(vse,c9o),e(I1,f9o),e(I1,cq),e(cq,m9o),e(I1,g9o),e(I,h9o),e(I,q1),e(q1,Fse),e(Fse,p9o),e(q1,_9o),e(q1,fq),e(fq,u9o),e(q1,b9o),e(I,v9o),e(I,N1),e(N1,Tse),e(Tse,F9o),e(N1,T9o),e(N1,mq),e(mq,M9o),e(N1,E9o),e(I,C9o),e(I,j1),e(j1,Mse),e(Mse,w9o),e(j1,A9o),e(j1,Ese),e(Ese,y9o),e(j1,L9o),e(I,x9o),e(I,D1),e(D1,Cse),e(Cse,k9o),e(D1,S9o),e(D1,gq),e(gq,R9o),e(D1,B9o),e(I,P9o),e(I,G1),e(G1,wse),e(wse,$9o),e(G1,I9o),e(G1,hq),e(hq,q9o),e(G1,N9o),e(I,j9o),e(I,O1),e(O1,Ase),e(Ase,D9o),e(O1,G9o),e(O1,pq),e(pq,O9o),e(O1,V9o),e(I,X9o),e(I,V1),e(V1,yse),e(yse,z9o),e(V1,Q9o),e(V1,_q),e(_q,W9o),e(V1,H9o),e(De,U9o),e(De,X1),e(X1,J9o),e(X1,Lse),e(Lse,Y9o),e(X1,K9o),e(X1,xse),e(xse,Z9o),e(De,eMo),e(De,kse),e(kse,oMo),e(De,rMo),g(I5,De,null),b(c,aBe,u),b(c,fd,u),e(fd,z1),e(z1,Sse),g(q5,Sse,null),e(fd,tMo),e(fd,Rse),e(Rse,aMo),b(c,nBe,u),b(c,er,u),g(N5,er,null),e(er,nMo),e(er,md),e(md,sMo),e(md,uq),e(uq,lMo),e(md,iMo),e(md,bq),e(bq,dMo),e(md,cMo),e(er,fMo),e(er,j5),e(j5,mMo),e(j5,Bse),e(Bse,gMo),e(j5,hMo),e(er,pMo),e(er,Hr),g(D5,Hr,null),e(Hr,_Mo),e(Hr,Pse),e(Pse,uMo),e(Hr,bMo),e(Hr,gd),e(gd,vMo),e(gd,$se),e($se,FMo),e(gd,TMo),e(gd,vq),e(vq,MMo),e(gd,EMo),e(Hr,CMo),e(Hr,Ise),e(Ise,wMo),e(Hr,AMo),g(G5,Hr,null),e(er,yMo),e(er,Ge),g(O5,Ge,null),e(Ge,LMo),e(Ge,qse),e(qse,xMo),e(Ge,kMo),e(Ge,Ha),e(Ha,SMo),e(Ha,Nse),e(Nse,RMo),e(Ha,BMo),e(Ha,jse),e(jse,PMo),e(Ha,$Mo),e(Ha,Dse),e(Dse,IMo),e(Ha,qMo),e(Ge,NMo),e(Ge,ne),e(ne,Q1),e(Q1,Gse),e(Gse,jMo),e(Q1,DMo),e(Q1,Fq),e(Fq,GMo),e(Q1,OMo),e(ne,VMo),e(ne,W1),e(W1,Ose),e(Ose,XMo),e(W1,zMo),e(W1,Tq),e(Tq,QMo),e(W1,WMo),e(ne,HMo),e(ne,H1),e(H1,Vse),e(Vse,UMo),e(H1,JMo),e(H1,Mq),e(Mq,YMo),e(H1,KMo),e(ne,ZMo),e(ne,U1),e(U1,Xse),e(Xse,e4o),e(U1,o4o),e(U1,Eq),e(Eq,r4o),e(U1,t4o),e(ne,a4o),e(ne,J1),e(J1,zse),e(zse,n4o),e(J1,s4o),e(J1,Cq),e(Cq,l4o),e(J1,i4o),e(ne,d4o),e(ne,Y1),e(Y1,Qse),e(Qse,c4o),e(Y1,f4o),e(Y1,wq),e(wq,m4o),e(Y1,g4o),e(ne,h4o),e(ne,K1),e(K1,Wse),e(Wse,p4o),e(K1,_4o),e(K1,Aq),e(Aq,u4o),e(K1,b4o),e(ne,v4o),e(ne,Z1),e(Z1,Hse),e(Hse,F4o),e(Z1,T4o),e(Z1,yq),e(yq,M4o),e(Z1,E4o),e(ne,C4o),e(ne,eb),e(eb,Use),e(Use,w4o),e(eb,A4o),e(eb,Lq),e(Lq,y4o),e(eb,L4o),e(ne,x4o),e(ne,ob),e(ob,Jse),e(Jse,k4o),e(ob,S4o),e(ob,xq),e(xq,R4o),e(ob,B4o),e(ne,P4o),e(ne,rb),e(rb,Yse),e(Yse,$4o),e(rb,I4o),e(rb,kq),e(kq,q4o),e(rb,N4o),e(ne,j4o),e(ne,tb),e(tb,Kse),e(Kse,D4o),e(tb,G4o),e(tb,Sq),e(Sq,O4o),e(tb,V4o),e(ne,X4o),e(ne,ab),e(ab,Zse),e(Zse,z4o),e(ab,Q4o),e(ab,Rq),e(Rq,W4o),e(ab,H4o),e(ne,U4o),e(ne,nb),e(nb,ele),e(ele,J4o),e(nb,Y4o),e(nb,Bq),e(Bq,K4o),e(nb,Z4o),e(ne,eEo),e(ne,sb),e(sb,ole),e(ole,oEo),e(sb,rEo),e(sb,Pq),e(Pq,tEo),e(sb,aEo),e(ne,nEo),e(ne,lb),e(lb,rle),e(rle,sEo),e(lb,lEo),e(lb,$q),e($q,iEo),e(lb,dEo),e(ne,cEo),e(ne,ib),e(ib,tle),e(tle,fEo),e(ib,mEo),e(ib,Iq),e(Iq,gEo),e(ib,hEo),e(Ge,pEo),e(Ge,db),e(db,_Eo),e(db,ale),e(ale,uEo),e(db,bEo),e(db,nle),e(nle,vEo),e(Ge,FEo),e(Ge,sle),e(sle,TEo),e(Ge,MEo),g(V5,Ge,null),b(c,sBe,u),b(c,hd,u),e(hd,cb),e(cb,lle),g(X5,lle,null),e(hd,EEo),e(hd,ile),e(ile,CEo),b(c,lBe,u),b(c,or,u),g(z5,or,null),e(or,wEo),e(or,pd),e(pd,AEo),e(pd,qq),e(qq,yEo),e(pd,LEo),e(pd,Nq),e(Nq,xEo),e(pd,kEo),e(or,SEo),e(or,Q5),e(Q5,REo),e(Q5,dle),e(dle,BEo),e(Q5,PEo),e(or,$Eo),e(or,Ur),g(W5,Ur,null),e(Ur,IEo),e(Ur,cle),e(cle,qEo),e(Ur,NEo),e(Ur,_d),e(_d,jEo),e(_d,fle),e(fle,DEo),e(_d,GEo),e(_d,jq),e(jq,OEo),e(_d,VEo),e(Ur,XEo),e(Ur,mle),e(mle,zEo),e(Ur,QEo),g(H5,Ur,null),e(or,WEo),e(or,Oe),g(U5,Oe,null),e(Oe,HEo),e(Oe,gle),e(gle,UEo),e(Oe,JEo),e(Oe,Ua),e(Ua,YEo),e(Ua,hle),e(hle,KEo),e(Ua,ZEo),e(Ua,ple),e(ple,e5o),e(Ua,o5o),e(Ua,_le),e(_le,r5o),e(Ua,t5o),e(Oe,a5o),e(Oe,y),e(y,fb),e(fb,ule),e(ule,n5o),e(fb,s5o),e(fb,Dq),e(Dq,l5o),e(fb,i5o),e(y,d5o),e(y,mb),e(mb,ble),e(ble,c5o),e(mb,f5o),e(mb,Gq),e(Gq,m5o),e(mb,g5o),e(y,h5o),e(y,gb),e(gb,vle),e(vle,p5o),e(gb,_5o),e(gb,Oq),e(Oq,u5o),e(gb,b5o),e(y,v5o),e(y,hb),e(hb,Fle),e(Fle,F5o),e(hb,T5o),e(hb,Vq),e(Vq,M5o),e(hb,E5o),e(y,C5o),e(y,pb),e(pb,Tle),e(Tle,w5o),e(pb,A5o),e(pb,Xq),e(Xq,y5o),e(pb,L5o),e(y,x5o),e(y,_b),e(_b,Mle),e(Mle,k5o),e(_b,S5o),e(_b,zq),e(zq,R5o),e(_b,B5o),e(y,P5o),e(y,ub),e(ub,Ele),e(Ele,$5o),e(ub,I5o),e(ub,Qq),e(Qq,q5o),e(ub,N5o),e(y,j5o),e(y,bb),e(bb,Cle),e(Cle,D5o),e(bb,G5o),e(bb,Wq),e(Wq,O5o),e(bb,V5o),e(y,X5o),e(y,vb),e(vb,wle),e(wle,z5o),e(vb,Q5o),e(vb,Hq),e(Hq,W5o),e(vb,H5o),e(y,U5o),e(y,Fb),e(Fb,Ale),e(Ale,J5o),e(Fb,Y5o),e(Fb,Uq),e(Uq,K5o),e(Fb,Z5o),e(y,e3o),e(y,Tb),e(Tb,yle),e(yle,o3o),e(Tb,r3o),e(Tb,Jq),e(Jq,t3o),e(Tb,a3o),e(y,n3o),e(y,Mb),e(Mb,Lle),e(Lle,s3o),e(Mb,l3o),e(Mb,Yq),e(Yq,i3o),e(Mb,d3o),e(y,c3o),e(y,Eb),e(Eb,xle),e(xle,f3o),e(Eb,m3o),e(Eb,Kq),e(Kq,g3o),e(Eb,h3o),e(y,p3o),e(y,Cb),e(Cb,kle),e(kle,_3o),e(Cb,u3o),e(Cb,Zq),e(Zq,b3o),e(Cb,v3o),e(y,F3o),e(y,wb),e(wb,Sle),e(Sle,T3o),e(wb,M3o),e(wb,eN),e(eN,E3o),e(wb,C3o),e(y,w3o),e(y,Ab),e(Ab,Rle),e(Rle,A3o),e(Ab,y3o),e(Ab,oN),e(oN,L3o),e(Ab,x3o),e(y,k3o),e(y,yb),e(yb,Ble),e(Ble,S3o),e(yb,R3o),e(yb,rN),e(rN,B3o),e(yb,P3o),e(y,$3o),e(y,Lb),e(Lb,Ple),e(Ple,I3o),e(Lb,q3o),e(Lb,tN),e(tN,N3o),e(Lb,j3o),e(y,D3o),e(y,xb),e(xb,$le),e($le,G3o),e(xb,O3o),e(xb,aN),e(aN,V3o),e(xb,X3o),e(y,z3o),e(y,kb),e(kb,Ile),e(Ile,Q3o),e(kb,W3o),e(kb,nN),e(nN,H3o),e(kb,U3o),e(y,J3o),e(y,Sb),e(Sb,qle),e(qle,Y3o),e(Sb,K3o),e(Sb,sN),e(sN,Z3o),e(Sb,eCo),e(y,oCo),e(y,Rb),e(Rb,Nle),e(Nle,rCo),e(Rb,tCo),e(Rb,lN),e(lN,aCo),e(Rb,nCo),e(y,sCo),e(y,Bb),e(Bb,jle),e(jle,lCo),e(Bb,iCo),e(Bb,iN),e(iN,dCo),e(Bb,cCo),e(y,fCo),e(y,Pb),e(Pb,Dle),e(Dle,mCo),e(Pb,gCo),e(Pb,dN),e(dN,hCo),e(Pb,pCo),e(y,_Co),e(y,$b),e($b,Gle),e(Gle,uCo),e($b,bCo),e($b,cN),e(cN,vCo),e($b,FCo),e(y,TCo),e(y,Ib),e(Ib,Ole),e(Ole,MCo),e(Ib,ECo),e(Ib,fN),e(fN,CCo),e(Ib,wCo),e(y,ACo),e(y,qb),e(qb,Vle),e(Vle,yCo),e(qb,LCo),e(qb,mN),e(mN,xCo),e(qb,kCo),e(y,SCo),e(y,Nb),e(Nb,Xle),e(Xle,RCo),e(Nb,BCo),e(Nb,gN),e(gN,PCo),e(Nb,$Co),e(y,ICo),e(y,jb),e(jb,zle),e(zle,qCo),e(jb,NCo),e(jb,hN),e(hN,jCo),e(jb,DCo),e(y,GCo),e(y,Db),e(Db,Qle),e(Qle,OCo),e(Db,VCo),e(Db,pN),e(pN,XCo),e(Db,zCo),e(y,QCo),e(y,Gb),e(Gb,Wle),e(Wle,WCo),e(Gb,HCo),e(Gb,_N),e(_N,UCo),e(Gb,JCo),e(y,YCo),e(y,Ob),e(Ob,Hle),e(Hle,KCo),e(Ob,ZCo),e(Ob,uN),e(uN,ewo),e(Ob,owo),e(y,rwo),e(y,Vb),e(Vb,Ule),e(Ule,two),e(Vb,awo),e(Vb,bN),e(bN,nwo),e(Vb,swo),e(y,lwo),e(y,Xb),e(Xb,Jle),e(Jle,iwo),e(Xb,dwo),e(Xb,vN),e(vN,cwo),e(Xb,fwo),e(y,mwo),e(y,zb),e(zb,Yle),e(Yle,gwo),e(zb,hwo),e(zb,FN),e(FN,pwo),e(zb,_wo),e(y,uwo),e(y,Qb),e(Qb,Kle),e(Kle,bwo),e(Qb,vwo),e(Qb,TN),e(TN,Fwo),e(Qb,Two),e(y,Mwo),e(y,Wb),e(Wb,Zle),e(Zle,Ewo),e(Wb,Cwo),e(Wb,MN),e(MN,wwo),e(Wb,Awo),e(y,ywo),e(y,Hb),e(Hb,eie),e(eie,Lwo),e(Hb,xwo),e(Hb,EN),e(EN,kwo),e(Hb,Swo),e(y,Rwo),e(y,Ub),e(Ub,oie),e(oie,Bwo),e(Ub,Pwo),e(Ub,CN),e(CN,$wo),e(Ub,Iwo),e(y,qwo),e(y,Jb),e(Jb,rie),e(rie,Nwo),e(Jb,jwo),e(Jb,wN),e(wN,Dwo),e(Jb,Gwo),e(y,Owo),e(y,Yb),e(Yb,tie),e(tie,Vwo),e(Yb,Xwo),e(Yb,AN),e(AN,zwo),e(Yb,Qwo),e(y,Wwo),e(y,Kb),e(Kb,aie),e(aie,Hwo),e(Kb,Uwo),e(Kb,yN),e(yN,Jwo),e(Kb,Ywo),e(y,Kwo),e(y,Zb),e(Zb,nie),e(nie,Zwo),e(Zb,eAo),e(Zb,LN),e(LN,oAo),e(Zb,rAo),e(y,tAo),e(y,e2),e(e2,sie),e(sie,aAo),e(e2,nAo),e(e2,xN),e(xN,sAo),e(e2,lAo),e(y,iAo),e(y,o2),e(o2,lie),e(lie,dAo),e(o2,cAo),e(o2,kN),e(kN,fAo),e(o2,mAo),e(y,gAo),e(y,r2),e(r2,iie),e(iie,hAo),e(r2,pAo),e(r2,SN),e(SN,_Ao),e(r2,uAo),e(y,bAo),e(y,t2),e(t2,die),e(die,vAo),e(t2,FAo),e(t2,RN),e(RN,TAo),e(t2,MAo),e(Oe,EAo),e(Oe,a2),e(a2,CAo),e(a2,cie),e(cie,wAo),e(a2,AAo),e(a2,fie),e(fie,yAo),e(Oe,LAo),e(Oe,mie),e(mie,xAo),e(Oe,kAo),g(J5,Oe,null),b(c,iBe,u),b(c,ud,u),e(ud,n2),e(n2,gie),g(Y5,gie,null),e(ud,SAo),e(ud,hie),e(hie,RAo),b(c,dBe,u),b(c,rr,u),g(K5,rr,null),e(rr,BAo),e(rr,bd),e(bd,PAo),e(bd,BN),e(BN,$Ao),e(bd,IAo),e(bd,PN),e(PN,qAo),e(bd,NAo),e(rr,jAo),e(rr,Z5),e(Z5,DAo),e(Z5,pie),e(pie,GAo),e(Z5,OAo),e(rr,VAo),e(rr,Jr),g(e3,Jr,null),e(Jr,XAo),e(Jr,_ie),e(_ie,zAo),e(Jr,QAo),e(Jr,vd),e(vd,WAo),e(vd,uie),e(uie,HAo),e(vd,UAo),e(vd,$N),e($N,JAo),e(vd,YAo),e(Jr,KAo),e(Jr,bie),e(bie,ZAo),e(Jr,e0o),g(o3,Jr,null),e(rr,o0o),e(rr,Ve),g(r3,Ve,null),e(Ve,r0o),e(Ve,vie),e(vie,t0o),e(Ve,a0o),e(Ve,Ja),e(Ja,n0o),e(Ja,Fie),e(Fie,s0o),e(Ja,l0o),e(Ja,Tie),e(Tie,i0o),e(Ja,d0o),e(Ja,Mie),e(Mie,c0o),e(Ja,f0o),e(Ve,m0o),e(Ve,G),e(G,s2),e(s2,Eie),e(Eie,g0o),e(s2,h0o),e(s2,IN),e(IN,p0o),e(s2,_0o),e(G,u0o),e(G,l2),e(l2,Cie),e(Cie,b0o),e(l2,v0o),e(l2,qN),e(qN,F0o),e(l2,T0o),e(G,M0o),e(G,i2),e(i2,wie),e(wie,E0o),e(i2,C0o),e(i2,NN),e(NN,w0o),e(i2,A0o),e(G,y0o),e(G,d2),e(d2,Aie),e(Aie,L0o),e(d2,x0o),e(d2,jN),e(jN,k0o),e(d2,S0o),e(G,R0o),e(G,c2),e(c2,yie),e(yie,B0o),e(c2,P0o),e(c2,DN),e(DN,$0o),e(c2,I0o),e(G,q0o),e(G,f2),e(f2,Lie),e(Lie,N0o),e(f2,j0o),e(f2,GN),e(GN,D0o),e(f2,G0o),e(G,O0o),e(G,m2),e(m2,xie),e(xie,V0o),e(m2,X0o),e(m2,ON),e(ON,z0o),e(m2,Q0o),e(G,W0o),e(G,g2),e(g2,kie),e(kie,H0o),e(g2,U0o),e(g2,VN),e(VN,J0o),e(g2,Y0o),e(G,K0o),e(G,h2),e(h2,Sie),e(Sie,Z0o),e(h2,eyo),e(h2,XN),e(XN,oyo),e(h2,ryo),e(G,tyo),e(G,p2),e(p2,Rie),e(Rie,ayo),e(p2,nyo),e(p2,zN),e(zN,syo),e(p2,lyo),e(G,iyo),e(G,_2),e(_2,Bie),e(Bie,dyo),e(_2,cyo),e(_2,QN),e(QN,fyo),e(_2,myo),e(G,gyo),e(G,u2),e(u2,Pie),e(Pie,hyo),e(u2,pyo),e(u2,WN),e(WN,_yo),e(u2,uyo),e(G,byo),e(G,b2),e(b2,$ie),e($ie,vyo),e(b2,Fyo),e(b2,HN),e(HN,Tyo),e(b2,Myo),e(G,Eyo),e(G,v2),e(v2,Iie),e(Iie,Cyo),e(v2,wyo),e(v2,UN),e(UN,Ayo),e(v2,yyo),e(G,Lyo),e(G,F2),e(F2,qie),e(qie,xyo),e(F2,kyo),e(F2,JN),e(JN,Syo),e(F2,Ryo),e(G,Byo),e(G,T2),e(T2,Nie),e(Nie,Pyo),e(T2,$yo),e(T2,YN),e(YN,Iyo),e(T2,qyo),e(G,Nyo),e(G,M2),e(M2,jie),e(jie,jyo),e(M2,Dyo),e(M2,KN),e(KN,Gyo),e(M2,Oyo),e(G,Vyo),e(G,E2),e(E2,Die),e(Die,Xyo),e(E2,zyo),e(E2,ZN),e(ZN,Qyo),e(E2,Wyo),e(G,Hyo),e(G,C2),e(C2,Gie),e(Gie,Uyo),e(C2,Jyo),e(C2,ej),e(ej,Yyo),e(C2,Kyo),e(G,Zyo),e(G,w2),e(w2,Oie),e(Oie,eLo),e(w2,oLo),e(w2,oj),e(oj,rLo),e(w2,tLo),e(G,aLo),e(G,A2),e(A2,Vie),e(Vie,nLo),e(A2,sLo),e(A2,rj),e(rj,lLo),e(A2,iLo),e(G,dLo),e(G,y2),e(y2,Xie),e(Xie,cLo),e(y2,fLo),e(y2,tj),e(tj,mLo),e(y2,gLo),e(G,hLo),e(G,L2),e(L2,zie),e(zie,pLo),e(L2,_Lo),e(L2,aj),e(aj,uLo),e(L2,bLo),e(G,vLo),e(G,x2),e(x2,Qie),e(Qie,FLo),e(x2,TLo),e(x2,nj),e(nj,MLo),e(x2,ELo),e(G,CLo),e(G,k2),e(k2,Wie),e(Wie,wLo),e(k2,ALo),e(k2,sj),e(sj,yLo),e(k2,LLo),e(G,xLo),e(G,S2),e(S2,Hie),e(Hie,kLo),e(S2,SLo),e(S2,lj),e(lj,RLo),e(S2,BLo),e(G,PLo),e(G,R2),e(R2,Uie),e(Uie,$Lo),e(R2,ILo),e(R2,ij),e(ij,qLo),e(R2,NLo),e(G,jLo),e(G,B2),e(B2,Jie),e(Jie,DLo),e(B2,GLo),e(B2,dj),e(dj,OLo),e(B2,VLo),e(Ve,XLo),e(Ve,P2),e(P2,zLo),e(P2,Yie),e(Yie,QLo),e(P2,WLo),e(P2,Kie),e(Kie,HLo),e(Ve,ULo),e(Ve,Zie),e(Zie,JLo),e(Ve,YLo),g(t3,Ve,null),b(c,cBe,u),b(c,Fd,u),e(Fd,$2),e($2,ede),g(a3,ede,null),e(Fd,KLo),e(Fd,ode),e(ode,ZLo),b(c,fBe,u),b(c,tr,u),g(n3,tr,null),e(tr,exo),e(tr,Td),e(Td,oxo),e(Td,cj),e(cj,rxo),e(Td,txo),e(Td,fj),e(fj,axo),e(Td,nxo),e(tr,sxo),e(tr,s3),e(s3,lxo),e(s3,rde),e(rde,ixo),e(s3,dxo),e(tr,cxo),e(tr,Yr),g(l3,Yr,null),e(Yr,fxo),e(Yr,tde),e(tde,mxo),e(Yr,gxo),e(Yr,Md),e(Md,hxo),e(Md,ade),e(ade,pxo),e(Md,_xo),e(Md,mj),e(mj,uxo),e(Md,bxo),e(Yr,vxo),e(Yr,nde),e(nde,Fxo),e(Yr,Txo),g(i3,Yr,null),e(tr,Mxo),e(tr,Xe),g(d3,Xe,null),e(Xe,Exo),e(Xe,sde),e(sde,Cxo),e(Xe,wxo),e(Xe,Ya),e(Ya,Axo),e(Ya,lde),e(lde,yxo),e(Ya,Lxo),e(Ya,ide),e(ide,xxo),e(Ya,kxo),e(Ya,dde),e(dde,Sxo),e(Ya,Rxo),e(Xe,Bxo),e(Xe,da),e(da,I2),e(I2,cde),e(cde,Pxo),e(I2,$xo),e(I2,gj),e(gj,Ixo),e(I2,qxo),e(da,Nxo),e(da,q2),e(q2,fde),e(fde,jxo),e(q2,Dxo),e(q2,hj),e(hj,Gxo),e(q2,Oxo),e(da,Vxo),e(da,N2),e(N2,mde),e(mde,Xxo),e(N2,zxo),e(N2,pj),e(pj,Qxo),e(N2,Wxo),e(da,Hxo),e(da,j2),e(j2,gde),e(gde,Uxo),e(j2,Jxo),e(j2,_j),e(_j,Yxo),e(j2,Kxo),e(da,Zxo),e(da,D2),e(D2,hde),e(hde,eko),e(D2,oko),e(D2,uj),e(uj,rko),e(D2,tko),e(Xe,ako),e(Xe,G2),e(G2,nko),e(G2,pde),e(pde,sko),e(G2,lko),e(G2,_de),e(_de,iko),e(Xe,dko),e(Xe,ude),e(ude,cko),e(Xe,fko),g(c3,Xe,null),b(c,mBe,u),b(c,Ed,u),e(Ed,O2),e(O2,bde),g(f3,bde,null),e(Ed,mko),e(Ed,vde),e(vde,gko),b(c,gBe,u),b(c,ar,u),g(m3,ar,null),e(ar,hko),e(ar,Cd),e(Cd,pko),e(Cd,bj),e(bj,_ko),e(Cd,uko),e(Cd,vj),e(vj,bko),e(Cd,vko),e(ar,Fko),e(ar,g3),e(g3,Tko),e(g3,Fde),e(Fde,Mko),e(g3,Eko),e(ar,Cko),e(ar,Kr),g(h3,Kr,null),e(Kr,wko),e(Kr,Tde),e(Tde,Ako),e(Kr,yko),e(Kr,wd),e(wd,Lko),e(wd,Mde),e(Mde,xko),e(wd,kko),e(wd,Fj),e(Fj,Sko),e(wd,Rko),e(Kr,Bko),e(Kr,Ede),e(Ede,Pko),e(Kr,$ko),g(p3,Kr,null),e(ar,Iko),e(ar,ze),g(_3,ze,null),e(ze,qko),e(ze,Cde),e(Cde,Nko),e(ze,jko),e(ze,Ka),e(Ka,Dko),e(Ka,wde),e(wde,Gko),e(Ka,Oko),e(Ka,Ade),e(Ade,Vko),e(Ka,Xko),e(Ka,yde),e(yde,zko),e(Ka,Qko),e(ze,Wko),e(ze,j),e(j,V2),e(V2,Lde),e(Lde,Hko),e(V2,Uko),e(V2,Tj),e(Tj,Jko),e(V2,Yko),e(j,Kko),e(j,X2),e(X2,xde),e(xde,Zko),e(X2,eSo),e(X2,Mj),e(Mj,oSo),e(X2,rSo),e(j,tSo),e(j,z2),e(z2,kde),e(kde,aSo),e(z2,nSo),e(z2,Ej),e(Ej,sSo),e(z2,lSo),e(j,iSo),e(j,Q2),e(Q2,Sde),e(Sde,dSo),e(Q2,cSo),e(Q2,Cj),e(Cj,fSo),e(Q2,mSo),e(j,gSo),e(j,W2),e(W2,Rde),e(Rde,hSo),e(W2,pSo),e(W2,wj),e(wj,_So),e(W2,uSo),e(j,bSo),e(j,H2),e(H2,Bde),e(Bde,vSo),e(H2,FSo),e(H2,Aj),e(Aj,TSo),e(H2,MSo),e(j,ESo),e(j,U2),e(U2,Pde),e(Pde,CSo),e(U2,wSo),e(U2,yj),e(yj,ASo),e(U2,ySo),e(j,LSo),e(j,J2),e(J2,$de),e($de,xSo),e(J2,kSo),e(J2,Lj),e(Lj,SSo),e(J2,RSo),e(j,BSo),e(j,Y2),e(Y2,Ide),e(Ide,PSo),e(Y2,$So),e(Y2,xj),e(xj,ISo),e(Y2,qSo),e(j,NSo),e(j,K2),e(K2,qde),e(qde,jSo),e(K2,DSo),e(K2,kj),e(kj,GSo),e(K2,OSo),e(j,VSo),e(j,Z2),e(Z2,Nde),e(Nde,XSo),e(Z2,zSo),e(Z2,Sj),e(Sj,QSo),e(Z2,WSo),e(j,HSo),e(j,e6),e(e6,jde),e(jde,USo),e(e6,JSo),e(e6,Rj),e(Rj,YSo),e(e6,KSo),e(j,ZSo),e(j,o6),e(o6,Dde),e(Dde,eRo),e(o6,oRo),e(o6,Bj),e(Bj,rRo),e(o6,tRo),e(j,aRo),e(j,r6),e(r6,Gde),e(Gde,nRo),e(r6,sRo),e(r6,Pj),e(Pj,lRo),e(r6,iRo),e(j,dRo),e(j,t6),e(t6,Ode),e(Ode,cRo),e(t6,fRo),e(t6,$j),e($j,mRo),e(t6,gRo),e(j,hRo),e(j,a6),e(a6,Vde),e(Vde,pRo),e(a6,_Ro),e(a6,Ij),e(Ij,uRo),e(a6,bRo),e(j,vRo),e(j,n6),e(n6,Xde),e(Xde,FRo),e(n6,TRo),e(n6,qj),e(qj,MRo),e(n6,ERo),e(j,CRo),e(j,s6),e(s6,zde),e(zde,wRo),e(s6,ARo),e(s6,Nj),e(Nj,yRo),e(s6,LRo),e(j,xRo),e(j,l6),e(l6,Qde),e(Qde,kRo),e(l6,SRo),e(l6,jj),e(jj,RRo),e(l6,BRo),e(j,PRo),e(j,i6),e(i6,Wde),e(Wde,$Ro),e(i6,IRo),e(i6,Dj),e(Dj,qRo),e(i6,NRo),e(j,jRo),e(j,d6),e(d6,Hde),e(Hde,DRo),e(d6,GRo),e(d6,Gj),e(Gj,ORo),e(d6,VRo),e(j,XRo),e(j,c6),e(c6,Ude),e(Ude,zRo),e(c6,QRo),e(c6,Oj),e(Oj,WRo),e(c6,HRo),e(j,URo),e(j,f6),e(f6,Jde),e(Jde,JRo),e(f6,YRo),e(f6,Vj),e(Vj,KRo),e(f6,ZRo),e(j,eBo),e(j,m6),e(m6,Yde),e(Yde,oBo),e(m6,rBo),e(m6,Xj),e(Xj,tBo),e(m6,aBo),e(j,nBo),e(j,g6),e(g6,Kde),e(Kde,sBo),e(g6,lBo),e(g6,zj),e(zj,iBo),e(g6,dBo),e(j,cBo),e(j,h6),e(h6,Zde),e(Zde,fBo),e(h6,mBo),e(h6,Qj),e(Qj,gBo),e(h6,hBo),e(j,pBo),e(j,p6),e(p6,ece),e(ece,_Bo),e(p6,uBo),e(p6,Wj),e(Wj,bBo),e(p6,vBo),e(j,FBo),e(j,_6),e(_6,oce),e(oce,TBo),e(_6,MBo),e(_6,Hj),e(Hj,EBo),e(_6,CBo),e(j,wBo),e(j,u6),e(u6,rce),e(rce,ABo),e(u6,yBo),e(u6,Uj),e(Uj,LBo),e(u6,xBo),e(j,kBo),e(j,b6),e(b6,tce),e(tce,SBo),e(b6,RBo),e(b6,Jj),e(Jj,BBo),e(b6,PBo),e(j,$Bo),e(j,v6),e(v6,ace),e(ace,IBo),e(v6,qBo),e(v6,Yj),e(Yj,NBo),e(v6,jBo),e(j,DBo),e(j,F6),e(F6,nce),e(nce,GBo),e(F6,OBo),e(F6,Kj),e(Kj,VBo),e(F6,XBo),e(j,zBo),e(j,T6),e(T6,sce),e(sce,QBo),e(T6,WBo),e(T6,Zj),e(Zj,HBo),e(T6,UBo),e(ze,JBo),e(ze,M6),e(M6,YBo),e(M6,lce),e(lce,KBo),e(M6,ZBo),e(M6,ice),e(ice,ePo),e(ze,oPo),e(ze,dce),e(dce,rPo),e(ze,tPo),g(u3,ze,null),b(c,hBe,u),b(c,Ad,u),e(Ad,E6),e(E6,cce),g(b3,cce,null),e(Ad,aPo),e(Ad,fce),e(fce,nPo),b(c,pBe,u),b(c,nr,u),g(v3,nr,null),e(nr,sPo),e(nr,yd),e(yd,lPo),e(yd,eD),e(eD,iPo),e(yd,dPo),e(yd,oD),e(oD,cPo),e(yd,fPo),e(nr,mPo),e(nr,F3),e(F3,gPo),e(F3,mce),e(mce,hPo),e(F3,pPo),e(nr,_Po),e(nr,Zr),g(T3,Zr,null),e(Zr,uPo),e(Zr,gce),e(gce,bPo),e(Zr,vPo),e(Zr,Ld),e(Ld,FPo),e(Ld,hce),e(hce,TPo),e(Ld,MPo),e(Ld,rD),e(rD,EPo),e(Ld,CPo),e(Zr,wPo),e(Zr,pce),e(pce,APo),e(Zr,yPo),g(M3,Zr,null),e(nr,LPo),e(nr,Qe),g(E3,Qe,null),e(Qe,xPo),e(Qe,_ce),e(_ce,kPo),e(Qe,SPo),e(Qe,Za),e(Za,RPo),e(Za,uce),e(uce,BPo),e(Za,PPo),e(Za,bce),e(bce,$Po),e(Za,IPo),e(Za,vce),e(vce,qPo),e(Za,NPo),e(Qe,jPo),e(Qe,R),e(R,C6),e(C6,Fce),e(Fce,DPo),e(C6,GPo),e(C6,tD),e(tD,OPo),e(C6,VPo),e(R,XPo),e(R,w6),e(w6,Tce),e(Tce,zPo),e(w6,QPo),e(w6,aD),e(aD,WPo),e(w6,HPo),e(R,UPo),e(R,A6),e(A6,Mce),e(Mce,JPo),e(A6,YPo),e(A6,nD),e(nD,KPo),e(A6,ZPo),e(R,e$o),e(R,y6),e(y6,Ece),e(Ece,o$o),e(y6,r$o),e(y6,sD),e(sD,t$o),e(y6,a$o),e(R,n$o),e(R,L6),e(L6,Cce),e(Cce,s$o),e(L6,l$o),e(L6,lD),e(lD,i$o),e(L6,d$o),e(R,c$o),e(R,x6),e(x6,wce),e(wce,f$o),e(x6,m$o),e(x6,iD),e(iD,g$o),e(x6,h$o),e(R,p$o),e(R,k6),e(k6,Ace),e(Ace,_$o),e(k6,u$o),e(k6,dD),e(dD,b$o),e(k6,v$o),e(R,F$o),e(R,S6),e(S6,yce),e(yce,T$o),e(S6,M$o),e(S6,cD),e(cD,E$o),e(S6,C$o),e(R,w$o),e(R,R6),e(R6,Lce),e(Lce,A$o),e(R6,y$o),e(R6,fD),e(fD,L$o),e(R6,x$o),e(R,k$o),e(R,B6),e(B6,xce),e(xce,S$o),e(B6,R$o),e(B6,mD),e(mD,B$o),e(B6,P$o),e(R,$$o),e(R,P6),e(P6,kce),e(kce,I$o),e(P6,q$o),e(P6,gD),e(gD,N$o),e(P6,j$o),e(R,D$o),e(R,$6),e($6,Sce),e(Sce,G$o),e($6,O$o),e($6,hD),e(hD,V$o),e($6,X$o),e(R,z$o),e(R,I6),e(I6,Rce),e(Rce,Q$o),e(I6,W$o),e(I6,pD),e(pD,H$o),e(I6,U$o),e(R,J$o),e(R,q6),e(q6,Bce),e(Bce,Y$o),e(q6,K$o),e(q6,_D),e(_D,Z$o),e(q6,eIo),e(R,oIo),e(R,N6),e(N6,Pce),e(Pce,rIo),e(N6,tIo),e(N6,uD),e(uD,aIo),e(N6,nIo),e(R,sIo),e(R,j6),e(j6,$ce),e($ce,lIo),e(j6,iIo),e(j6,bD),e(bD,dIo),e(j6,cIo),e(R,fIo),e(R,D6),e(D6,Ice),e(Ice,mIo),e(D6,gIo),e(D6,vD),e(vD,hIo),e(D6,pIo),e(R,_Io),e(R,G6),e(G6,qce),e(qce,uIo),e(G6,bIo),e(G6,FD),e(FD,vIo),e(G6,FIo),e(R,TIo),e(R,O6),e(O6,Nce),e(Nce,MIo),e(O6,EIo),e(O6,TD),e(TD,CIo),e(O6,wIo),e(R,AIo),e(R,V6),e(V6,jce),e(jce,yIo),e(V6,LIo),e(V6,MD),e(MD,xIo),e(V6,kIo),e(R,SIo),e(R,X6),e(X6,Dce),e(Dce,RIo),e(X6,BIo),e(X6,ED),e(ED,PIo),e(X6,$Io),e(R,IIo),e(R,z6),e(z6,Gce),e(Gce,qIo),e(z6,NIo),e(z6,CD),e(CD,jIo),e(z6,DIo),e(R,GIo),e(R,Q6),e(Q6,Oce),e(Oce,OIo),e(Q6,VIo),e(Q6,wD),e(wD,XIo),e(Q6,zIo),e(R,QIo),e(R,W6),e(W6,Vce),e(Vce,WIo),e(W6,HIo),e(W6,AD),e(AD,UIo),e(W6,JIo),e(R,YIo),e(R,H6),e(H6,Xce),e(Xce,KIo),e(H6,ZIo),e(H6,yD),e(yD,eqo),e(H6,oqo),e(R,rqo),e(R,U6),e(U6,zce),e(zce,tqo),e(U6,aqo),e(U6,LD),e(LD,nqo),e(U6,sqo),e(R,lqo),e(R,J6),e(J6,Qce),e(Qce,iqo),e(J6,dqo),e(J6,xD),e(xD,cqo),e(J6,fqo),e(R,mqo),e(R,Y6),e(Y6,Wce),e(Wce,gqo),e(Y6,hqo),e(Y6,kD),e(kD,pqo),e(Y6,_qo),e(R,uqo),e(R,K6),e(K6,Hce),e(Hce,bqo),e(K6,vqo),e(K6,SD),e(SD,Fqo),e(K6,Tqo),e(R,Mqo),e(R,Z6),e(Z6,Uce),e(Uce,Eqo),e(Z6,Cqo),e(Z6,RD),e(RD,wqo),e(Z6,Aqo),e(R,yqo),e(R,ev),e(ev,Jce),e(Jce,Lqo),e(ev,xqo),e(ev,BD),e(BD,kqo),e(ev,Sqo),e(R,Rqo),e(R,ov),e(ov,Yce),e(Yce,Bqo),e(ov,Pqo),e(ov,PD),e(PD,$qo),e(ov,Iqo),e(R,qqo),e(R,rv),e(rv,Kce),e(Kce,Nqo),e(rv,jqo),e(rv,$D),e($D,Dqo),e(rv,Gqo),e(R,Oqo),e(R,tv),e(tv,Zce),e(Zce,Vqo),e(tv,Xqo),e(tv,ID),e(ID,zqo),e(tv,Qqo),e(R,Wqo),e(R,av),e(av,efe),e(efe,Hqo),e(av,Uqo),e(av,qD),e(qD,Jqo),e(av,Yqo),e(R,Kqo),e(R,nv),e(nv,ofe),e(ofe,Zqo),e(nv,eNo),e(nv,ND),e(ND,oNo),e(nv,rNo),e(R,tNo),e(R,sv),e(sv,rfe),e(rfe,aNo),e(sv,nNo),e(sv,jD),e(jD,sNo),e(sv,lNo),e(R,iNo),e(R,lv),e(lv,tfe),e(tfe,dNo),e(lv,cNo),e(lv,DD),e(DD,fNo),e(lv,mNo),e(R,gNo),e(R,iv),e(iv,afe),e(afe,hNo),e(iv,pNo),e(iv,GD),e(GD,_No),e(iv,uNo),e(Qe,bNo),e(Qe,dv),e(dv,vNo),e(dv,nfe),e(nfe,FNo),e(dv,TNo),e(dv,sfe),e(sfe,MNo),e(Qe,ENo),e(Qe,lfe),e(lfe,CNo),e(Qe,wNo),g(C3,Qe,null),b(c,_Be,u),b(c,xd,u),e(xd,cv),e(cv,ife),g(w3,ife,null),e(xd,ANo),e(xd,dfe),e(dfe,yNo),b(c,uBe,u),b(c,sr,u),g(A3,sr,null),e(sr,LNo),e(sr,kd),e(kd,xNo),e(kd,OD),e(OD,kNo),e(kd,SNo),e(kd,VD),e(VD,RNo),e(kd,BNo),e(sr,PNo),e(sr,y3),e(y3,$No),e(y3,cfe),e(cfe,INo),e(y3,qNo),e(sr,NNo),e(sr,et),g(L3,et,null),e(et,jNo),e(et,ffe),e(ffe,DNo),e(et,GNo),e(et,Sd),e(Sd,ONo),e(Sd,mfe),e(mfe,VNo),e(Sd,XNo),e(Sd,XD),e(XD,zNo),e(Sd,QNo),e(et,WNo),e(et,gfe),e(gfe,HNo),e(et,UNo),g(x3,et,null),e(sr,JNo),e(sr,We),g(k3,We,null),e(We,YNo),e(We,hfe),e(hfe,KNo),e(We,ZNo),e(We,en),e(en,ejo),e(en,pfe),e(pfe,ojo),e(en,rjo),e(en,_fe),e(_fe,tjo),e(en,ajo),e(en,ufe),e(ufe,njo),e(en,sjo),e(We,ljo),e(We,bfe),e(bfe,fv),e(fv,vfe),e(vfe,ijo),e(fv,djo),e(fv,zD),e(zD,cjo),e(fv,fjo),e(We,mjo),e(We,mv),e(mv,gjo),e(mv,Ffe),e(Ffe,hjo),e(mv,pjo),e(mv,Tfe),e(Tfe,_jo),e(We,ujo),e(We,Mfe),e(Mfe,bjo),e(We,vjo),g(S3,We,null),b(c,bBe,u),b(c,Rd,u),e(Rd,gv),e(gv,Efe),g(R3,Efe,null),e(Rd,Fjo),e(Rd,Cfe),e(Cfe,Tjo),b(c,vBe,u),b(c,lr,u),g(B3,lr,null),e(lr,Mjo),e(lr,Bd),e(Bd,Ejo),e(Bd,QD),e(QD,Cjo),e(Bd,wjo),e(Bd,WD),e(WD,Ajo),e(Bd,yjo),e(lr,Ljo),e(lr,P3),e(P3,xjo),e(P3,wfe),e(wfe,kjo),e(P3,Sjo),e(lr,Rjo),e(lr,ot),g($3,ot,null),e(ot,Bjo),e(ot,Afe),e(Afe,Pjo),e(ot,$jo),e(ot,Pd),e(Pd,Ijo),e(Pd,yfe),e(yfe,qjo),e(Pd,Njo),e(Pd,HD),e(HD,jjo),e(Pd,Djo),e(ot,Gjo),e(ot,Lfe),e(Lfe,Ojo),e(ot,Vjo),g(I3,ot,null),e(lr,Xjo),e(lr,He),g(q3,He,null),e(He,zjo),e(He,xfe),e(xfe,Qjo),e(He,Wjo),e(He,on),e(on,Hjo),e(on,kfe),e(kfe,Ujo),e(on,Jjo),e(on,Sfe),e(Sfe,Yjo),e(on,Kjo),e(on,Rfe),e(Rfe,Zjo),e(on,eDo),e(He,oDo),e(He,de),e(de,hv),e(hv,Bfe),e(Bfe,rDo),e(hv,tDo),e(hv,UD),e(UD,aDo),e(hv,nDo),e(de,sDo),e(de,pv),e(pv,Pfe),e(Pfe,lDo),e(pv,iDo),e(pv,JD),e(JD,dDo),e(pv,cDo),e(de,fDo),e(de,_v),e(_v,$fe),e($fe,mDo),e(_v,gDo),e(_v,YD),e(YD,hDo),e(_v,pDo),e(de,_Do),e(de,Vs),e(Vs,Ife),e(Ife,uDo),e(Vs,bDo),e(Vs,KD),e(KD,vDo),e(Vs,FDo),e(Vs,ZD),e(ZD,TDo),e(Vs,MDo),e(de,EDo),e(de,uv),e(uv,qfe),e(qfe,CDo),e(uv,wDo),e(uv,eG),e(eG,ADo),e(uv,yDo),e(de,LDo),e(de,ma),e(ma,Nfe),e(Nfe,xDo),e(ma,kDo),e(ma,oG),e(oG,SDo),e(ma,RDo),e(ma,rG),e(rG,BDo),e(ma,PDo),e(ma,tG),e(tG,$Do),e(ma,IDo),e(de,qDo),e(de,bv),e(bv,jfe),e(jfe,NDo),e(bv,jDo),e(bv,aG),e(aG,DDo),e(bv,GDo),e(de,ODo),e(de,vv),e(vv,Dfe),e(Dfe,VDo),e(vv,XDo),e(vv,nG),e(nG,zDo),e(vv,QDo),e(de,WDo),e(de,Fv),e(Fv,Gfe),e(Gfe,HDo),e(Fv,UDo),e(Fv,sG),e(sG,JDo),e(Fv,YDo),e(de,KDo),e(de,Tv),e(Tv,Ofe),e(Ofe,ZDo),e(Tv,eGo),e(Tv,lG),e(lG,oGo),e(Tv,rGo),e(de,tGo),e(de,Mv),e(Mv,Vfe),e(Vfe,aGo),e(Mv,nGo),e(Mv,iG),e(iG,sGo),e(Mv,lGo),e(de,iGo),e(de,Ev),e(Ev,Xfe),e(Xfe,dGo),e(Ev,cGo),e(Ev,dG),e(dG,fGo),e(Ev,mGo),e(de,gGo),e(de,Cv),e(Cv,zfe),e(zfe,hGo),e(Cv,pGo),e(Cv,cG),e(cG,_Go),e(Cv,uGo),e(He,bGo),e(He,wv),e(wv,vGo),e(wv,Qfe),e(Qfe,FGo),e(wv,TGo),e(wv,Wfe),e(Wfe,MGo),e(He,EGo),e(He,Hfe),e(Hfe,CGo),e(He,wGo),g(N3,He,null),b(c,FBe,u),b(c,$d,u),e($d,Av),e(Av,Ufe),g(j3,Ufe,null),e($d,AGo),e($d,Jfe),e(Jfe,yGo),b(c,TBe,u),b(c,ir,u),g(D3,ir,null),e(ir,LGo),e(ir,Id),e(Id,xGo),e(Id,fG),e(fG,kGo),e(Id,SGo),e(Id,mG),e(mG,RGo),e(Id,BGo),e(ir,PGo),e(ir,G3),e(G3,$Go),e(G3,Yfe),e(Yfe,IGo),e(G3,qGo),e(ir,NGo),e(ir,rt),g(O3,rt,null),e(rt,jGo),e(rt,Kfe),e(Kfe,DGo),e(rt,GGo),e(rt,qd),e(qd,OGo),e(qd,Zfe),e(Zfe,VGo),e(qd,XGo),e(qd,gG),e(gG,zGo),e(qd,QGo),e(rt,WGo),e(rt,eme),e(eme,HGo),e(rt,UGo),g(V3,rt,null),e(ir,JGo),e(ir,Ue),g(X3,Ue,null),e(Ue,YGo),e(Ue,ome),e(ome,KGo),e(Ue,ZGo),e(Ue,rn),e(rn,eOo),e(rn,rme),e(rme,oOo),e(rn,rOo),e(rn,tme),e(tme,tOo),e(rn,aOo),e(rn,ame),e(ame,nOo),e(rn,sOo),e(Ue,lOo),e(Ue,nme),e(nme,yv),e(yv,sme),e(sme,iOo),e(yv,dOo),e(yv,hG),e(hG,cOo),e(yv,fOo),e(Ue,mOo),e(Ue,Lv),e(Lv,gOo),e(Lv,lme),e(lme,hOo),e(Lv,pOo),e(Lv,ime),e(ime,_Oo),e(Ue,uOo),e(Ue,dme),e(dme,bOo),e(Ue,vOo),g(z3,Ue,null),b(c,MBe,u),b(c,Nd,u),e(Nd,xv),e(xv,cme),g(Q3,cme,null),e(Nd,FOo),e(Nd,fme),e(fme,TOo),b(c,EBe,u),b(c,dr,u),g(W3,dr,null),e(dr,MOo),e(dr,jd),e(jd,EOo),e(jd,pG),e(pG,COo),e(jd,wOo),e(jd,_G),e(_G,AOo),e(jd,yOo),e(dr,LOo),e(dr,H3),e(H3,xOo),e(H3,mme),e(mme,kOo),e(H3,SOo),e(dr,ROo),e(dr,tt),g(U3,tt,null),e(tt,BOo),e(tt,gme),e(gme,POo),e(tt,$Oo),e(tt,Dd),e(Dd,IOo),e(Dd,hme),e(hme,qOo),e(Dd,NOo),e(Dd,uG),e(uG,jOo),e(Dd,DOo),e(tt,GOo),e(tt,pme),e(pme,OOo),e(tt,VOo),g(J3,tt,null),e(dr,XOo),e(dr,Je),g(Y3,Je,null),e(Je,zOo),e(Je,_me),e(_me,QOo),e(Je,WOo),e(Je,tn),e(tn,HOo),e(tn,ume),e(ume,UOo),e(tn,JOo),e(tn,bme),e(bme,YOo),e(tn,KOo),e(tn,vme),e(vme,ZOo),e(tn,eVo),e(Je,oVo),e(Je,Se),e(Se,kv),e(kv,Fme),e(Fme,rVo),e(kv,tVo),e(kv,bG),e(bG,aVo),e(kv,nVo),e(Se,sVo),e(Se,Sv),e(Sv,Tme),e(Tme,lVo),e(Sv,iVo),e(Sv,vG),e(vG,dVo),e(Sv,cVo),e(Se,fVo),e(Se,Rv),e(Rv,Mme),e(Mme,mVo),e(Rv,gVo),e(Rv,FG),e(FG,hVo),e(Rv,pVo),e(Se,_Vo),e(Se,Bv),e(Bv,Eme),e(Eme,uVo),e(Bv,bVo),e(Bv,TG),e(TG,vVo),e(Bv,FVo),e(Se,TVo),e(Se,Pv),e(Pv,Cme),e(Cme,MVo),e(Pv,EVo),e(Pv,MG),e(MG,CVo),e(Pv,wVo),e(Se,AVo),e(Se,$v),e($v,wme),e(wme,yVo),e($v,LVo),e($v,EG),e(EG,xVo),e($v,kVo),e(Se,SVo),e(Se,Iv),e(Iv,Ame),e(Ame,RVo),e(Iv,BVo),e(Iv,CG),e(CG,PVo),e(Iv,$Vo),e(Se,IVo),e(Se,qv),e(qv,yme),e(yme,qVo),e(qv,NVo),e(qv,wG),e(wG,jVo),e(qv,DVo),e(Je,GVo),e(Je,Nv),e(Nv,OVo),e(Nv,Lme),e(Lme,VVo),e(Nv,XVo),e(Nv,xme),e(xme,zVo),e(Je,QVo),e(Je,kme),e(kme,WVo),e(Je,HVo),g(K3,Je,null),b(c,CBe,u),b(c,Gd,u),e(Gd,jv),e(jv,Sme),g(Z3,Sme,null),e(Gd,UVo),e(Gd,Rme),e(Rme,JVo),b(c,wBe,u),b(c,cr,u),g(eC,cr,null),e(cr,YVo),e(cr,Od),e(Od,KVo),e(Od,AG),e(AG,ZVo),e(Od,eXo),e(Od,yG),e(yG,oXo),e(Od,rXo),e(cr,tXo),e(cr,oC),e(oC,aXo),e(oC,Bme),e(Bme,nXo),e(oC,sXo),e(cr,lXo),e(cr,at),g(rC,at,null),e(at,iXo),e(at,Pme),e(Pme,dXo),e(at,cXo),e(at,Vd),e(Vd,fXo),e(Vd,$me),e($me,mXo),e(Vd,gXo),e(Vd,LG),e(LG,hXo),e(Vd,pXo),e(at,_Xo),e(at,Ime),e(Ime,uXo),e(at,bXo),g(tC,at,null),e(cr,vXo),e(cr,Ye),g(aC,Ye,null),e(Ye,FXo),e(Ye,qme),e(qme,TXo),e(Ye,MXo),e(Ye,an),e(an,EXo),e(an,Nme),e(Nme,CXo),e(an,wXo),e(an,jme),e(jme,AXo),e(an,yXo),e(an,Dme),e(Dme,LXo),e(an,xXo),e(Ye,kXo),e(Ye,nn),e(nn,Dv),e(Dv,Gme),e(Gme,SXo),e(Dv,RXo),e(Dv,xG),e(xG,BXo),e(Dv,PXo),e(nn,$Xo),e(nn,Gv),e(Gv,Ome),e(Ome,IXo),e(Gv,qXo),e(Gv,kG),e(kG,NXo),e(Gv,jXo),e(nn,DXo),e(nn,Ov),e(Ov,Vme),e(Vme,GXo),e(Ov,OXo),e(Ov,SG),e(SG,VXo),e(Ov,XXo),e(nn,zXo),e(nn,Vv),e(Vv,Xme),e(Xme,QXo),e(Vv,WXo),e(Vv,RG),e(RG,HXo),e(Vv,UXo),e(Ye,JXo),e(Ye,Xv),e(Xv,YXo),e(Xv,zme),e(zme,KXo),e(Xv,ZXo),e(Xv,Qme),e(Qme,ezo),e(Ye,ozo),e(Ye,Wme),e(Wme,rzo),e(Ye,tzo),g(nC,Ye,null),b(c,ABe,u),b(c,Xd,u),e(Xd,zv),e(zv,Hme),g(sC,Hme,null),e(Xd,azo),e(Xd,Ume),e(Ume,nzo),b(c,yBe,u),b(c,fr,u),g(lC,fr,null),e(fr,szo),e(fr,zd),e(zd,lzo),e(zd,BG),e(BG,izo),e(zd,dzo),e(zd,PG),e(PG,czo),e(zd,fzo),e(fr,mzo),e(fr,iC),e(iC,gzo),e(iC,Jme),e(Jme,hzo),e(iC,pzo),e(fr,_zo),e(fr,nt),g(dC,nt,null),e(nt,uzo),e(nt,Yme),e(Yme,bzo),e(nt,vzo),e(nt,Qd),e(Qd,Fzo),e(Qd,Kme),e(Kme,Tzo),e(Qd,Mzo),e(Qd,$G),e($G,Ezo),e(Qd,Czo),e(nt,wzo),e(nt,Zme),e(Zme,Azo),e(nt,yzo),g(cC,nt,null),e(fr,Lzo),e(fr,Ke),g(fC,Ke,null),e(Ke,xzo),e(Ke,ege),e(ege,kzo),e(Ke,Szo),e(Ke,sn),e(sn,Rzo),e(sn,oge),e(oge,Bzo),e(sn,Pzo),e(sn,rge),e(rge,$zo),e(sn,Izo),e(sn,tge),e(tge,qzo),e(sn,Nzo),e(Ke,jzo),e(Ke,Re),e(Re,Qv),e(Qv,age),e(age,Dzo),e(Qv,Gzo),e(Qv,IG),e(IG,Ozo),e(Qv,Vzo),e(Re,Xzo),e(Re,Wv),e(Wv,nge),e(nge,zzo),e(Wv,Qzo),e(Wv,qG),e(qG,Wzo),e(Wv,Hzo),e(Re,Uzo),e(Re,Hv),e(Hv,sge),e(sge,Jzo),e(Hv,Yzo),e(Hv,NG),e(NG,Kzo),e(Hv,Zzo),e(Re,eQo),e(Re,Uv),e(Uv,lge),e(lge,oQo),e(Uv,rQo),e(Uv,jG),e(jG,tQo),e(Uv,aQo),e(Re,nQo),e(Re,Jv),e(Jv,ige),e(ige,sQo),e(Jv,lQo),e(Jv,DG),e(DG,iQo),e(Jv,dQo),e(Re,cQo),e(Re,Yv),e(Yv,dge),e(dge,fQo),e(Yv,mQo),e(Yv,GG),e(GG,gQo),e(Yv,hQo),e(Re,pQo),e(Re,Kv),e(Kv,cge),e(cge,_Qo),e(Kv,uQo),e(Kv,OG),e(OG,bQo),e(Kv,vQo),e(Re,FQo),e(Re,Zv),e(Zv,fge),e(fge,TQo),e(Zv,MQo),e(Zv,VG),e(VG,EQo),e(Zv,CQo),e(Ke,wQo),e(Ke,eF),e(eF,AQo),e(eF,mge),e(mge,yQo),e(eF,LQo),e(eF,gge),e(gge,xQo),e(Ke,kQo),e(Ke,hge),e(hge,SQo),e(Ke,RQo),g(mC,Ke,null),b(c,LBe,u),b(c,Wd,u),e(Wd,oF),e(oF,pge),g(gC,pge,null),e(Wd,BQo),e(Wd,_ge),e(_ge,PQo),b(c,xBe,u),b(c,mr,u),g(hC,mr,null),e(mr,$Qo),e(mr,Hd),e(Hd,IQo),e(Hd,XG),e(XG,qQo),e(Hd,NQo),e(Hd,zG),e(zG,jQo),e(Hd,DQo),e(mr,GQo),e(mr,pC),e(pC,OQo),e(pC,uge),e(uge,VQo),e(pC,XQo),e(mr,zQo),e(mr,st),g(_C,st,null),e(st,QQo),e(st,bge),e(bge,WQo),e(st,HQo),e(st,Ud),e(Ud,UQo),e(Ud,vge),e(vge,JQo),e(Ud,YQo),e(Ud,QG),e(QG,KQo),e(Ud,ZQo),e(st,eWo),e(st,Fge),e(Fge,oWo),e(st,rWo),g(uC,st,null),e(mr,tWo),e(mr,Ze),g(bC,Ze,null),e(Ze,aWo),e(Ze,Tge),e(Tge,nWo),e(Ze,sWo),e(Ze,ln),e(ln,lWo),e(ln,Mge),e(Mge,iWo),e(ln,dWo),e(ln,Ege),e(Ege,cWo),e(ln,fWo),e(ln,Cge),e(Cge,mWo),e(ln,gWo),e(Ze,hWo),e(Ze,vC),e(vC,rF),e(rF,wge),e(wge,pWo),e(rF,_Wo),e(rF,WG),e(WG,uWo),e(rF,bWo),e(vC,vWo),e(vC,tF),e(tF,Age),e(Age,FWo),e(tF,TWo),e(tF,HG),e(HG,MWo),e(tF,EWo),e(Ze,CWo),e(Ze,aF),e(aF,wWo),e(aF,yge),e(yge,AWo),e(aF,yWo),e(aF,Lge),e(Lge,LWo),e(Ze,xWo),e(Ze,xge),e(xge,kWo),e(Ze,SWo),g(FC,Ze,null),b(c,kBe,u),b(c,Jd,u),e(Jd,nF),e(nF,kge),g(TC,kge,null),e(Jd,RWo),e(Jd,Sge),e(Sge,BWo),b(c,SBe,u),b(c,gr,u),g(MC,gr,null),e(gr,PWo),e(gr,Yd),e(Yd,$Wo),e(Yd,UG),e(UG,IWo),e(Yd,qWo),e(Yd,JG),e(JG,NWo),e(Yd,jWo),e(gr,DWo),e(gr,EC),e(EC,GWo),e(EC,Rge),e(Rge,OWo),e(EC,VWo),e(gr,XWo),e(gr,lt),g(CC,lt,null),e(lt,zWo),e(lt,Bge),e(Bge,QWo),e(lt,WWo),e(lt,Kd),e(Kd,HWo),e(Kd,Pge),e(Pge,UWo),e(Kd,JWo),e(Kd,YG),e(YG,YWo),e(Kd,KWo),e(lt,ZWo),e(lt,$ge),e($ge,eHo),e(lt,oHo),g(wC,lt,null),e(gr,rHo),e(gr,eo),g(AC,eo,null),e(eo,tHo),e(eo,Ige),e(Ige,aHo),e(eo,nHo),e(eo,dn),e(dn,sHo),e(dn,qge),e(qge,lHo),e(dn,iHo),e(dn,Nge),e(Nge,dHo),e(dn,cHo),e(dn,jge),e(jge,fHo),e(dn,mHo),e(eo,gHo),e(eo,cn),e(cn,sF),e(sF,Dge),e(Dge,hHo),e(sF,pHo),e(sF,KG),e(KG,_Ho),e(sF,uHo),e(cn,bHo),e(cn,lF),e(lF,Gge),e(Gge,vHo),e(lF,FHo),e(lF,ZG),e(ZG,THo),e(lF,MHo),e(cn,EHo),e(cn,iF),e(iF,Oge),e(Oge,CHo),e(iF,wHo),e(iF,eO),e(eO,AHo),e(iF,yHo),e(cn,LHo),e(cn,dF),e(dF,Vge),e(Vge,xHo),e(dF,kHo),e(dF,oO),e(oO,SHo),e(dF,RHo),e(eo,BHo),e(eo,cF),e(cF,PHo),e(cF,Xge),e(Xge,$Ho),e(cF,IHo),e(cF,zge),e(zge,qHo),e(eo,NHo),e(eo,Qge),e(Qge,jHo),e(eo,DHo),g(yC,eo,null),b(c,RBe,u),b(c,Zd,u),e(Zd,fF),e(fF,Wge),g(LC,Wge,null),e(Zd,GHo),e(Zd,Hge),e(Hge,OHo),b(c,BBe,u),b(c,hr,u),g(xC,hr,null),e(hr,VHo),e(hr,ec),e(ec,XHo),e(ec,rO),e(rO,zHo),e(ec,QHo),e(ec,tO),e(tO,WHo),e(ec,HHo),e(hr,UHo),e(hr,kC),e(kC,JHo),e(kC,Uge),e(Uge,YHo),e(kC,KHo),e(hr,ZHo),e(hr,it),g(SC,it,null),e(it,eUo),e(it,Jge),e(Jge,oUo),e(it,rUo),e(it,oc),e(oc,tUo),e(oc,Yge),e(Yge,aUo),e(oc,nUo),e(oc,aO),e(aO,sUo),e(oc,lUo),e(it,iUo),e(it,Kge),e(Kge,dUo),e(it,cUo),g(RC,it,null),e(hr,fUo),e(hr,oo),g(BC,oo,null),e(oo,mUo),e(oo,Zge),e(Zge,gUo),e(oo,hUo),e(oo,fn),e(fn,pUo),e(fn,ehe),e(ehe,_Uo),e(fn,uUo),e(fn,ohe),e(ohe,bUo),e(fn,vUo),e(fn,rhe),e(rhe,FUo),e(fn,TUo),e(oo,MUo),e(oo,rc),e(rc,mF),e(mF,the),e(the,EUo),e(mF,CUo),e(mF,nO),e(nO,wUo),e(mF,AUo),e(rc,yUo),e(rc,gF),e(gF,ahe),e(ahe,LUo),e(gF,xUo),e(gF,sO),e(sO,kUo),e(gF,SUo),e(rc,RUo),e(rc,hF),e(hF,nhe),e(nhe,BUo),e(hF,PUo),e(hF,lO),e(lO,$Uo),e(hF,IUo),e(oo,qUo),e(oo,pF),e(pF,NUo),e(pF,she),e(she,jUo),e(pF,DUo),e(pF,lhe),e(lhe,GUo),e(oo,OUo),e(oo,ihe),e(ihe,VUo),e(oo,XUo),g(PC,oo,null),b(c,PBe,u),b(c,tc,u),e(tc,_F),e(_F,dhe),g($C,dhe,null),e(tc,zUo),e(tc,che),e(che,QUo),b(c,$Be,u),b(c,pr,u),g(IC,pr,null),e(pr,WUo),e(pr,ac),e(ac,HUo),e(ac,iO),e(iO,UUo),e(ac,JUo),e(ac,dO),e(dO,YUo),e(ac,KUo),e(pr,ZUo),e(pr,qC),e(qC,eJo),e(qC,fhe),e(fhe,oJo),e(qC,rJo),e(pr,tJo),e(pr,dt),g(NC,dt,null),e(dt,aJo),e(dt,mhe),e(mhe,nJo),e(dt,sJo),e(dt,nc),e(nc,lJo),e(nc,ghe),e(ghe,iJo),e(nc,dJo),e(nc,cO),e(cO,cJo),e(nc,fJo),e(dt,mJo),e(dt,hhe),e(hhe,gJo),e(dt,hJo),g(jC,dt,null),e(pr,pJo),e(pr,ro),g(DC,ro,null),e(ro,_Jo),e(ro,phe),e(phe,uJo),e(ro,bJo),e(ro,mn),e(mn,vJo),e(mn,_he),e(_he,FJo),e(mn,TJo),e(mn,uhe),e(uhe,MJo),e(mn,EJo),e(mn,bhe),e(bhe,CJo),e(mn,wJo),e(ro,AJo),e(ro,vhe),e(vhe,uF),e(uF,Fhe),e(Fhe,yJo),e(uF,LJo),e(uF,fO),e(fO,xJo),e(uF,kJo),e(ro,SJo),e(ro,bF),e(bF,RJo),e(bF,The),e(The,BJo),e(bF,PJo),e(bF,Mhe),e(Mhe,$Jo),e(ro,IJo),e(ro,Ehe),e(Ehe,qJo),e(ro,NJo),g(GC,ro,null),b(c,IBe,u),b(c,sc,u),e(sc,vF),e(vF,Che),g(OC,Che,null),e(sc,jJo),e(sc,whe),e(whe,DJo),b(c,qBe,u),b(c,_r,u),g(VC,_r,null),e(_r,GJo),e(_r,lc),e(lc,OJo),e(lc,mO),e(mO,VJo),e(lc,XJo),e(lc,gO),e(gO,zJo),e(lc,QJo),e(_r,WJo),e(_r,XC),e(XC,HJo),e(XC,Ahe),e(Ahe,UJo),e(XC,JJo),e(_r,YJo),e(_r,ct),g(zC,ct,null),e(ct,KJo),e(ct,yhe),e(yhe,ZJo),e(ct,eYo),e(ct,ic),e(ic,oYo),e(ic,Lhe),e(Lhe,rYo),e(ic,tYo),e(ic,hO),e(hO,aYo),e(ic,nYo),e(ct,sYo),e(ct,xhe),e(xhe,lYo),e(ct,iYo),g(QC,ct,null),e(_r,dYo),e(_r,to),g(WC,to,null),e(to,cYo),e(to,khe),e(khe,fYo),e(to,mYo),e(to,gn),e(gn,gYo),e(gn,She),e(She,hYo),e(gn,pYo),e(gn,Rhe),e(Rhe,_Yo),e(gn,uYo),e(gn,Bhe),e(Bhe,bYo),e(gn,vYo),e(to,FYo),e(to,Phe),e(Phe,FF),e(FF,$he),e($he,TYo),e(FF,MYo),e(FF,pO),e(pO,EYo),e(FF,CYo),e(to,wYo),e(to,TF),e(TF,AYo),e(TF,Ihe),e(Ihe,yYo),e(TF,LYo),e(TF,qhe),e(qhe,xYo),e(to,kYo),e(to,Nhe),e(Nhe,SYo),e(to,RYo),g(HC,to,null),b(c,NBe,u),b(c,dc,u),e(dc,MF),e(MF,jhe),g(UC,jhe,null),e(dc,BYo),e(dc,Dhe),e(Dhe,PYo),b(c,jBe,u),b(c,ur,u),g(JC,ur,null),e(ur,$Yo),e(ur,cc),e(cc,IYo),e(cc,_O),e(_O,qYo),e(cc,NYo),e(cc,uO),e(uO,jYo),e(cc,DYo),e(ur,GYo),e(ur,YC),e(YC,OYo),e(YC,Ghe),e(Ghe,VYo),e(YC,XYo),e(ur,zYo),e(ur,ft),g(KC,ft,null),e(ft,QYo),e(ft,Ohe),e(Ohe,WYo),e(ft,HYo),e(ft,fc),e(fc,UYo),e(fc,Vhe),e(Vhe,JYo),e(fc,YYo),e(fc,bO),e(bO,KYo),e(fc,ZYo),e(ft,eKo),e(ft,Xhe),e(Xhe,oKo),e(ft,rKo),g(ZC,ft,null),e(ur,tKo),e(ur,ao),g(ew,ao,null),e(ao,aKo),e(ao,zhe),e(zhe,nKo),e(ao,sKo),e(ao,hn),e(hn,lKo),e(hn,Qhe),e(Qhe,iKo),e(hn,dKo),e(hn,Whe),e(Whe,cKo),e(hn,fKo),e(hn,Hhe),e(Hhe,mKo),e(hn,gKo),e(ao,hKo),e(ao,pn),e(pn,EF),e(EF,Uhe),e(Uhe,pKo),e(EF,_Ko),e(EF,vO),e(vO,uKo),e(EF,bKo),e(pn,vKo),e(pn,CF),e(CF,Jhe),e(Jhe,FKo),e(CF,TKo),e(CF,FO),e(FO,MKo),e(CF,EKo),e(pn,CKo),e(pn,wF),e(wF,Yhe),e(Yhe,wKo),e(wF,AKo),e(wF,TO),e(TO,yKo),e(wF,LKo),e(pn,xKo),e(pn,AF),e(AF,Khe),e(Khe,kKo),e(AF,SKo),e(AF,MO),e(MO,RKo),e(AF,BKo),e(ao,PKo),e(ao,yF),e(yF,$Ko),e(yF,Zhe),e(Zhe,IKo),e(yF,qKo),e(yF,epe),e(epe,NKo),e(ao,jKo),e(ao,ope),e(ope,DKo),e(ao,GKo),g(ow,ao,null),b(c,DBe,u),b(c,mc,u),e(mc,LF),e(LF,rpe),g(rw,rpe,null),e(mc,OKo),e(mc,tpe),e(tpe,VKo),b(c,GBe,u),b(c,br,u),g(tw,br,null),e(br,XKo),e(br,gc),e(gc,zKo),e(gc,EO),e(EO,QKo),e(gc,WKo),e(gc,CO),e(CO,HKo),e(gc,UKo),e(br,JKo),e(br,aw),e(aw,YKo),e(aw,ape),e(ape,KKo),e(aw,ZKo),e(br,eZo),e(br,mt),g(nw,mt,null),e(mt,oZo),e(mt,npe),e(npe,rZo),e(mt,tZo),e(mt,hc),e(hc,aZo),e(hc,spe),e(spe,nZo),e(hc,sZo),e(hc,wO),e(wO,lZo),e(hc,iZo),e(mt,dZo),e(mt,lpe),e(lpe,cZo),e(mt,fZo),g(sw,mt,null),e(br,mZo),e(br,no),g(lw,no,null),e(no,gZo),e(no,ipe),e(ipe,hZo),e(no,pZo),e(no,_n),e(_n,_Zo),e(_n,dpe),e(dpe,uZo),e(_n,bZo),e(_n,cpe),e(cpe,vZo),e(_n,FZo),e(_n,fpe),e(fpe,TZo),e(_n,MZo),e(no,EZo),e(no,mpe),e(mpe,xF),e(xF,gpe),e(gpe,CZo),e(xF,wZo),e(xF,AO),e(AO,AZo),e(xF,yZo),e(no,LZo),e(no,kF),e(kF,xZo),e(kF,hpe),e(hpe,kZo),e(kF,SZo),e(kF,ppe),e(ppe,RZo),e(no,BZo),e(no,_pe),e(_pe,PZo),e(no,$Zo),g(iw,no,null),b(c,OBe,u),b(c,pc,u),e(pc,SF),e(SF,upe),g(dw,upe,null),e(pc,IZo),e(pc,bpe),e(bpe,qZo),b(c,VBe,u),b(c,vr,u),g(cw,vr,null),e(vr,NZo),e(vr,_c),e(_c,jZo),e(_c,yO),e(yO,DZo),e(_c,GZo),e(_c,LO),e(LO,OZo),e(_c,VZo),e(vr,XZo),e(vr,fw),e(fw,zZo),e(fw,vpe),e(vpe,QZo),e(fw,WZo),e(vr,HZo),e(vr,gt),g(mw,gt,null),e(gt,UZo),e(gt,Fpe),e(Fpe,JZo),e(gt,YZo),e(gt,uc),e(uc,KZo),e(uc,Tpe),e(Tpe,ZZo),e(uc,eer),e(uc,xO),e(xO,oer),e(uc,rer),e(gt,ter),e(gt,Mpe),e(Mpe,aer),e(gt,ner),g(gw,gt,null),e(vr,ser),e(vr,ho),g(hw,ho,null),e(ho,ler),e(ho,Epe),e(Epe,ier),e(ho,der),e(ho,un),e(un,cer),e(un,Cpe),e(Cpe,fer),e(un,mer),e(un,wpe),e(wpe,ger),e(un,her),e(un,Ape),e(Ape,per),e(un,_er),e(ho,uer),e(ho,x),e(x,RF),e(RF,ype),e(ype,ber),e(RF,ver),e(RF,kO),e(kO,Fer),e(RF,Ter),e(x,Mer),e(x,BF),e(BF,Lpe),e(Lpe,Eer),e(BF,Cer),e(BF,SO),e(SO,wer),e(BF,Aer),e(x,yer),e(x,PF),e(PF,xpe),e(xpe,Ler),e(PF,xer),e(PF,RO),e(RO,ker),e(PF,Ser),e(x,Rer),e(x,$F),e($F,kpe),e(kpe,Ber),e($F,Per),e($F,BO),e(BO,$er),e($F,Ier),e(x,qer),e(x,IF),e(IF,Spe),e(Spe,Ner),e(IF,jer),e(IF,PO),e(PO,Der),e(IF,Ger),e(x,Oer),e(x,qF),e(qF,Rpe),e(Rpe,Ver),e(qF,Xer),e(qF,$O),e($O,zer),e(qF,Qer),e(x,Wer),e(x,NF),e(NF,Bpe),e(Bpe,Her),e(NF,Uer),e(NF,IO),e(IO,Jer),e(NF,Yer),e(x,Ker),e(x,jF),e(jF,Ppe),e(Ppe,Zer),e(jF,eor),e(jF,qO),e(qO,oor),e(jF,ror),e(x,tor),e(x,DF),e(DF,$pe),e($pe,aor),e(DF,nor),e(DF,NO),e(NO,sor),e(DF,lor),e(x,ior),e(x,GF),e(GF,Ipe),e(Ipe,dor),e(GF,cor),e(GF,jO),e(jO,mor),e(GF,gor),e(x,hor),e(x,OF),e(OF,qpe),e(qpe,por),e(OF,_or),e(OF,DO),e(DO,uor),e(OF,bor),e(x,vor),e(x,VF),e(VF,Npe),e(Npe,For),e(VF,Tor),e(VF,GO),e(GO,Mor),e(VF,Eor),e(x,Cor),e(x,XF),e(XF,jpe),e(jpe,wor),e(XF,Aor),e(XF,OO),e(OO,yor),e(XF,Lor),e(x,xor),e(x,zF),e(zF,Dpe),e(Dpe,kor),e(zF,Sor),e(zF,VO),e(VO,Ror),e(zF,Bor),e(x,Por),e(x,QF),e(QF,Gpe),e(Gpe,$or),e(QF,Ior),e(QF,XO),e(XO,qor),e(QF,Nor),e(x,jor),e(x,WF),e(WF,Ope),e(Ope,Dor),e(WF,Gor),e(WF,zO),e(zO,Oor),e(WF,Vor),e(x,Xor),e(x,Xs),e(Xs,Vpe),e(Vpe,zor),e(Xs,Qor),e(Xs,QO),e(QO,Wor),e(Xs,Hor),e(Xs,WO),e(WO,Uor),e(Xs,Jor),e(x,Yor),e(x,HF),e(HF,Xpe),e(Xpe,Kor),e(HF,Zor),e(HF,HO),e(HO,err),e(HF,orr),e(x,rrr),e(x,UF),e(UF,zpe),e(zpe,trr),e(UF,arr),e(UF,UO),e(UO,nrr),e(UF,srr),e(x,lrr),e(x,JF),e(JF,Qpe),e(Qpe,irr),e(JF,drr),e(JF,JO),e(JO,crr),e(JF,frr),e(x,mrr),e(x,YF),e(YF,Wpe),e(Wpe,grr),e(YF,hrr),e(YF,YO),e(YO,prr),e(YF,_rr),e(x,urr),e(x,KF),e(KF,Hpe),e(Hpe,brr),e(KF,vrr),e(KF,KO),e(KO,Frr),e(KF,Trr),e(x,Mrr),e(x,ZF),e(ZF,Upe),e(Upe,Err),e(ZF,Crr),e(ZF,ZO),e(ZO,wrr),e(ZF,Arr),e(x,yrr),e(x,eT),e(eT,Jpe),e(Jpe,Lrr),e(eT,xrr),e(eT,eV),e(eV,krr),e(eT,Srr),e(x,Rrr),e(x,oT),e(oT,Ype),e(Ype,Brr),e(oT,Prr),e(oT,oV),e(oV,$rr),e(oT,Irr),e(x,qrr),e(x,rT),e(rT,Kpe),e(Kpe,Nrr),e(rT,jrr),e(rT,rV),e(rV,Drr),e(rT,Grr),e(x,Orr),e(x,tT),e(tT,Zpe),e(Zpe,Vrr),e(tT,Xrr),e(tT,tV),e(tV,zrr),e(tT,Qrr),e(x,Wrr),e(x,aT),e(aT,e_e),e(e_e,Hrr),e(aT,Urr),e(aT,aV),e(aV,Jrr),e(aT,Yrr),e(x,Krr),e(x,nT),e(nT,o_e),e(o_e,Zrr),e(nT,etr),e(nT,nV),e(nV,otr),e(nT,rtr),e(x,ttr),e(x,sT),e(sT,r_e),e(r_e,atr),e(sT,ntr),e(sT,sV),e(sV,str),e(sT,ltr),e(x,itr),e(x,lT),e(lT,t_e),e(t_e,dtr),e(lT,ctr),e(lT,lV),e(lV,ftr),e(lT,mtr),e(x,gtr),e(x,iT),e(iT,a_e),e(a_e,htr),e(iT,ptr),e(iT,iV),e(iV,_tr),e(iT,utr),e(x,btr),e(x,dT),e(dT,n_e),e(n_e,vtr),e(dT,Ftr),e(dT,dV),e(dV,Ttr),e(dT,Mtr),e(x,Etr),e(x,cT),e(cT,s_e),e(s_e,Ctr),e(cT,wtr),e(cT,cV),e(cV,Atr),e(cT,ytr),e(x,Ltr),e(x,fT),e(fT,l_e),e(l_e,xtr),e(fT,ktr),e(fT,fV),e(fV,Str),e(fT,Rtr),e(x,Btr),e(x,mT),e(mT,i_e),e(i_e,Ptr),e(mT,$tr),e(mT,mV),e(mV,Itr),e(mT,qtr),e(x,Ntr),e(x,gT),e(gT,d_e),e(d_e,jtr),e(gT,Dtr),e(gT,gV),e(gV,Gtr),e(gT,Otr),e(x,Vtr),e(x,hT),e(hT,c_e),e(c_e,Xtr),e(hT,ztr),e(hT,hV),e(hV,Qtr),e(hT,Wtr),e(x,Htr),e(x,pT),e(pT,f_e),e(f_e,Utr),e(pT,Jtr),e(pT,pV),e(pV,Ytr),e(pT,Ktr),e(x,Ztr),e(x,_T),e(_T,m_e),e(m_e,ear),e(_T,oar),e(_T,_V),e(_V,rar),e(_T,tar),e(x,aar),e(x,uT),e(uT,g_e),e(g_e,nar),e(uT,sar),e(uT,uV),e(uV,lar),e(uT,iar),e(x,dar),e(x,bT),e(bT,h_e),e(h_e,car),e(bT,far),e(bT,bV),e(bV,mar),e(bT,gar),e(x,har),e(x,vT),e(vT,p_e),e(p_e,par),e(vT,_ar),e(vT,vV),e(vV,uar),e(vT,bar),e(x,Far),e(x,FT),e(FT,__e),e(__e,Tar),e(FT,Mar),e(FT,FV),e(FV,Ear),e(FT,Car),e(ho,war),e(ho,u_e),e(u_e,Aar),e(ho,yar),g(pw,ho,null),b(c,XBe,u),b(c,bc,u),e(bc,TT),e(TT,b_e),g(_w,b_e,null),e(bc,Lar),e(bc,v_e),e(v_e,xar),b(c,zBe,u),b(c,Fr,u),g(uw,Fr,null),e(Fr,kar),e(Fr,vc),e(vc,Sar),e(vc,TV),e(TV,Rar),e(vc,Bar),e(vc,MV),e(MV,Par),e(vc,$ar),e(Fr,Iar),e(Fr,bw),e(bw,qar),e(bw,F_e),e(F_e,Nar),e(bw,jar),e(Fr,Dar),e(Fr,ht),g(vw,ht,null),e(ht,Gar),e(ht,T_e),e(T_e,Oar),e(ht,Var),e(ht,Fc),e(Fc,Xar),e(Fc,M_e),e(M_e,zar),e(Fc,Qar),e(Fc,EV),e(EV,War),e(Fc,Har),e(ht,Uar),e(ht,E_e),e(E_e,Jar),e(ht,Yar),g(Fw,ht,null),e(Fr,Kar),e(Fr,po),g(Tw,po,null),e(po,Zar),e(po,C_e),e(C_e,enr),e(po,onr),e(po,bn),e(bn,rnr),e(bn,w_e),e(w_e,tnr),e(bn,anr),e(bn,A_e),e(A_e,nnr),e(bn,snr),e(bn,y_e),e(y_e,lnr),e(bn,inr),e(po,dnr),e(po,H),e(H,MT),e(MT,L_e),e(L_e,cnr),e(MT,fnr),e(MT,CV),e(CV,mnr),e(MT,gnr),e(H,hnr),e(H,ET),e(ET,x_e),e(x_e,pnr),e(ET,_nr),e(ET,wV),e(wV,unr),e(ET,bnr),e(H,vnr),e(H,CT),e(CT,k_e),e(k_e,Fnr),e(CT,Tnr),e(CT,AV),e(AV,Mnr),e(CT,Enr),e(H,Cnr),e(H,wT),e(wT,S_e),e(S_e,wnr),e(wT,Anr),e(wT,yV),e(yV,ynr),e(wT,Lnr),e(H,xnr),e(H,AT),e(AT,R_e),e(R_e,knr),e(AT,Snr),e(AT,LV),e(LV,Rnr),e(AT,Bnr),e(H,Pnr),e(H,yT),e(yT,B_e),e(B_e,$nr),e(yT,Inr),e(yT,xV),e(xV,qnr),e(yT,Nnr),e(H,jnr),e(H,LT),e(LT,P_e),e(P_e,Dnr),e(LT,Gnr),e(LT,kV),e(kV,Onr),e(LT,Vnr),e(H,Xnr),e(H,xT),e(xT,$_e),e($_e,znr),e(xT,Qnr),e(xT,SV),e(SV,Wnr),e(xT,Hnr),e(H,Unr),e(H,kT),e(kT,I_e),e(I_e,Jnr),e(kT,Ynr),e(kT,RV),e(RV,Knr),e(kT,Znr),e(H,esr),e(H,ST),e(ST,q_e),e(q_e,osr),e(ST,rsr),e(ST,BV),e(BV,tsr),e(ST,asr),e(H,nsr),e(H,RT),e(RT,N_e),e(N_e,ssr),e(RT,lsr),e(RT,PV),e(PV,isr),e(RT,dsr),e(H,csr),e(H,BT),e(BT,j_e),e(j_e,fsr),e(BT,msr),e(BT,$V),e($V,gsr),e(BT,hsr),e(H,psr),e(H,PT),e(PT,D_e),e(D_e,_sr),e(PT,usr),e(PT,IV),e(IV,bsr),e(PT,vsr),e(H,Fsr),e(H,$T),e($T,G_e),e(G_e,Tsr),e($T,Msr),e($T,qV),e(qV,Esr),e($T,Csr),e(H,wsr),e(H,IT),e(IT,O_e),e(O_e,Asr),e(IT,ysr),e(IT,NV),e(NV,Lsr),e(IT,xsr),e(H,ksr),e(H,qT),e(qT,V_e),e(V_e,Ssr),e(qT,Rsr),e(qT,jV),e(jV,Bsr),e(qT,Psr),e(H,$sr),e(H,NT),e(NT,X_e),e(X_e,Isr),e(NT,qsr),e(NT,DV),e(DV,Nsr),e(NT,jsr),e(H,Dsr),e(H,jT),e(jT,z_e),e(z_e,Gsr),e(jT,Osr),e(jT,GV),e(GV,Vsr),e(jT,Xsr),e(H,zsr),e(H,DT),e(DT,Q_e),e(Q_e,Qsr),e(DT,Wsr),e(DT,OV),e(OV,Hsr),e(DT,Usr),e(H,Jsr),e(H,GT),e(GT,W_e),e(W_e,Ysr),e(GT,Ksr),e(GT,VV),e(VV,Zsr),e(GT,elr),e(H,olr),e(H,OT),e(OT,H_e),e(H_e,rlr),e(OT,tlr),e(OT,XV),e(XV,alr),e(OT,nlr),e(H,slr),e(H,VT),e(VT,U_e),e(U_e,llr),e(VT,ilr),e(VT,zV),e(zV,dlr),e(VT,clr),e(H,flr),e(H,XT),e(XT,J_e),e(J_e,mlr),e(XT,glr),e(XT,QV),e(QV,hlr),e(XT,plr),e(po,_lr),e(po,Y_e),e(Y_e,ulr),e(po,blr),g(Mw,po,null),b(c,QBe,u),b(c,Tc,u),e(Tc,zT),e(zT,K_e),g(Ew,K_e,null),e(Tc,vlr),e(Tc,Z_e),e(Z_e,Flr),b(c,WBe,u),b(c,Tr,u),g(Cw,Tr,null),e(Tr,Tlr),e(Tr,Mc),e(Mc,Mlr),e(Mc,WV),e(WV,Elr),e(Mc,Clr),e(Mc,HV),e(HV,wlr),e(Mc,Alr),e(Tr,ylr),e(Tr,ww),e(ww,Llr),e(ww,eue),e(eue,xlr),e(ww,klr),e(Tr,Slr),e(Tr,pt),g(Aw,pt,null),e(pt,Rlr),e(pt,oue),e(oue,Blr),e(pt,Plr),e(pt,Ec),e(Ec,$lr),e(Ec,rue),e(rue,Ilr),e(Ec,qlr),e(Ec,UV),e(UV,Nlr),e(Ec,jlr),e(pt,Dlr),e(pt,tue),e(tue,Glr),e(pt,Olr),g(yw,pt,null),e(Tr,Vlr),e(Tr,_o),g(Lw,_o,null),e(_o,Xlr),e(_o,aue),e(aue,zlr),e(_o,Qlr),e(_o,vn),e(vn,Wlr),e(vn,nue),e(nue,Hlr),e(vn,Ulr),e(vn,sue),e(sue,Jlr),e(vn,Ylr),e(vn,lue),e(lue,Klr),e(vn,Zlr),e(_o,eir),e(_o,fe),e(fe,QT),e(QT,iue),e(iue,oir),e(QT,rir),e(QT,JV),e(JV,tir),e(QT,air),e(fe,nir),e(fe,WT),e(WT,due),e(due,sir),e(WT,lir),e(WT,YV),e(YV,iir),e(WT,dir),e(fe,cir),e(fe,HT),e(HT,cue),e(cue,fir),e(HT,mir),e(HT,KV),e(KV,gir),e(HT,hir),e(fe,pir),e(fe,UT),e(UT,fue),e(fue,_ir),e(UT,uir),e(UT,ZV),e(ZV,bir),e(UT,vir),e(fe,Fir),e(fe,JT),e(JT,mue),e(mue,Tir),e(JT,Mir),e(JT,eX),e(eX,Eir),e(JT,Cir),e(fe,wir),e(fe,YT),e(YT,gue),e(gue,Air),e(YT,yir),e(YT,oX),e(oX,Lir),e(YT,xir),e(fe,kir),e(fe,KT),e(KT,hue),e(hue,Sir),e(KT,Rir),e(KT,rX),e(rX,Bir),e(KT,Pir),e(fe,$ir),e(fe,ZT),e(ZT,pue),e(pue,Iir),e(ZT,qir),e(ZT,tX),e(tX,Nir),e(ZT,jir),e(fe,Dir),e(fe,e8),e(e8,_ue),e(_ue,Gir),e(e8,Oir),e(e8,aX),e(aX,Vir),e(e8,Xir),e(fe,zir),e(fe,o8),e(o8,uue),e(uue,Qir),e(o8,Wir),e(o8,nX),e(nX,Hir),e(o8,Uir),e(fe,Jir),e(fe,r8),e(r8,bue),e(bue,Yir),e(r8,Kir),e(r8,sX),e(sX,Zir),e(r8,edr),e(fe,odr),e(fe,t8),e(t8,vue),e(vue,rdr),e(t8,tdr),e(t8,lX),e(lX,adr),e(t8,ndr),e(_o,sdr),e(_o,Fue),e(Fue,ldr),e(_o,idr),g(xw,_o,null),b(c,HBe,u),b(c,Cc,u),e(Cc,a8),e(a8,Tue),g(kw,Tue,null),e(Cc,ddr),e(Cc,Mue),e(Mue,cdr),b(c,UBe,u),b(c,Mr,u),g(Sw,Mr,null),e(Mr,fdr),e(Mr,wc),e(wc,mdr),e(wc,iX),e(iX,gdr),e(wc,hdr),e(wc,dX),e(dX,pdr),e(wc,_dr),e(Mr,udr),e(Mr,Rw),e(Rw,bdr),e(Rw,Eue),e(Eue,vdr),e(Rw,Fdr),e(Mr,Tdr),e(Mr,_t),g(Bw,_t,null),e(_t,Mdr),e(_t,Cue),e(Cue,Edr),e(_t,Cdr),e(_t,Ac),e(Ac,wdr),e(Ac,wue),e(wue,Adr),e(Ac,ydr),e(Ac,cX),e(cX,Ldr),e(Ac,xdr),e(_t,kdr),e(_t,Aue),e(Aue,Sdr),e(_t,Rdr),g(Pw,_t,null),e(Mr,Bdr),e(Mr,uo),g($w,uo,null),e(uo,Pdr),e(uo,yue),e(yue,$dr),e(uo,Idr),e(uo,Fn),e(Fn,qdr),e(Fn,Lue),e(Lue,Ndr),e(Fn,jdr),e(Fn,xue),e(xue,Ddr),e(Fn,Gdr),e(Fn,kue),e(kue,Odr),e(Fn,Vdr),e(uo,Xdr),e(uo,Iw),e(Iw,n8),e(n8,Sue),e(Sue,zdr),e(n8,Qdr),e(n8,fX),e(fX,Wdr),e(n8,Hdr),e(Iw,Udr),e(Iw,s8),e(s8,Rue),e(Rue,Jdr),e(s8,Ydr),e(s8,mX),e(mX,Kdr),e(s8,Zdr),e(uo,ecr),e(uo,Bue),e(Bue,ocr),e(uo,rcr),g(qw,uo,null),b(c,JBe,u),b(c,yc,u),e(yc,l8),e(l8,Pue),g(Nw,Pue,null),e(yc,tcr),e(yc,$ue),e($ue,acr),b(c,YBe,u),b(c,Er,u),g(jw,Er,null),e(Er,ncr),e(Er,Lc),e(Lc,scr),e(Lc,gX),e(gX,lcr),e(Lc,icr),e(Lc,hX),e(hX,dcr),e(Lc,ccr),e(Er,fcr),e(Er,Dw),e(Dw,mcr),e(Dw,Iue),e(Iue,gcr),e(Dw,hcr),e(Er,pcr),e(Er,ut),g(Gw,ut,null),e(ut,_cr),e(ut,que),e(que,ucr),e(ut,bcr),e(ut,xc),e(xc,vcr),e(xc,Nue),e(Nue,Fcr),e(xc,Tcr),e(xc,pX),e(pX,Mcr),e(xc,Ecr),e(ut,Ccr),e(ut,jue),e(jue,wcr),e(ut,Acr),g(Ow,ut,null),e(Er,ycr),e(Er,bo),g(Vw,bo,null),e(bo,Lcr),e(bo,Due),e(Due,xcr),e(bo,kcr),e(bo,Tn),e(Tn,Scr),e(Tn,Gue),e(Gue,Rcr),e(Tn,Bcr),e(Tn,Oue),e(Oue,Pcr),e(Tn,$cr),e(Tn,Vue),e(Vue,Icr),e(Tn,qcr),e(bo,Ncr),e(bo,J),e(J,i8),e(i8,Xue),e(Xue,jcr),e(i8,Dcr),e(i8,_X),e(_X,Gcr),e(i8,Ocr),e(J,Vcr),e(J,d8),e(d8,zue),e(zue,Xcr),e(d8,zcr),e(d8,uX),e(uX,Qcr),e(d8,Wcr),e(J,Hcr),e(J,c8),e(c8,Que),e(Que,Ucr),e(c8,Jcr),e(c8,bX),e(bX,Ycr),e(c8,Kcr),e(J,Zcr),e(J,f8),e(f8,Wue),e(Wue,efr),e(f8,ofr),e(f8,vX),e(vX,rfr),e(f8,tfr),e(J,afr),e(J,m8),e(m8,Hue),e(Hue,nfr),e(m8,sfr),e(m8,FX),e(FX,lfr),e(m8,ifr),e(J,dfr),e(J,g8),e(g8,Uue),e(Uue,cfr),e(g8,ffr),e(g8,TX),e(TX,mfr),e(g8,gfr),e(J,hfr),e(J,h8),e(h8,Jue),e(Jue,pfr),e(h8,_fr),e(h8,MX),e(MX,ufr),e(h8,bfr),e(J,vfr),e(J,p8),e(p8,Yue),e(Yue,Ffr),e(p8,Tfr),e(p8,EX),e(EX,Mfr),e(p8,Efr),e(J,Cfr),e(J,_8),e(_8,Kue),e(Kue,wfr),e(_8,Afr),e(_8,CX),e(CX,yfr),e(_8,Lfr),e(J,xfr),e(J,u8),e(u8,Zue),e(Zue,kfr),e(u8,Sfr),e(u8,wX),e(wX,Rfr),e(u8,Bfr),e(J,Pfr),e(J,b8),e(b8,e1e),e(e1e,$fr),e(b8,Ifr),e(b8,AX),e(AX,qfr),e(b8,Nfr),e(J,jfr),e(J,v8),e(v8,o1e),e(o1e,Dfr),e(v8,Gfr),e(v8,yX),e(yX,Ofr),e(v8,Vfr),e(J,Xfr),e(J,F8),e(F8,r1e),e(r1e,zfr),e(F8,Qfr),e(F8,LX),e(LX,Wfr),e(F8,Hfr),e(J,Ufr),e(J,T8),e(T8,t1e),e(t1e,Jfr),e(T8,Yfr),e(T8,xX),e(xX,Kfr),e(T8,Zfr),e(J,emr),e(J,M8),e(M8,a1e),e(a1e,omr),e(M8,rmr),e(M8,kX),e(kX,tmr),e(M8,amr),e(J,nmr),e(J,E8),e(E8,n1e),e(n1e,smr),e(E8,lmr),e(E8,SX),e(SX,imr),e(E8,dmr),e(J,cmr),e(J,C8),e(C8,s1e),e(s1e,fmr),e(C8,mmr),e(C8,RX),e(RX,gmr),e(C8,hmr),e(J,pmr),e(J,w8),e(w8,l1e),e(l1e,_mr),e(w8,umr),e(w8,BX),e(BX,bmr),e(w8,vmr),e(J,Fmr),e(J,A8),e(A8,i1e),e(i1e,Tmr),e(A8,Mmr),e(A8,PX),e(PX,Emr),e(A8,Cmr),e(J,wmr),e(J,y8),e(y8,d1e),e(d1e,Amr),e(y8,ymr),e(y8,$X),e($X,Lmr),e(y8,xmr),e(bo,kmr),e(bo,c1e),e(c1e,Smr),e(bo,Rmr),g(Xw,bo,null),b(c,KBe,u),b(c,kc,u),e(kc,L8),e(L8,f1e),g(zw,f1e,null),e(kc,Bmr),e(kc,m1e),e(m1e,Pmr),b(c,ZBe,u),b(c,Cr,u),g(Qw,Cr,null),e(Cr,$mr),e(Cr,Sc),e(Sc,Imr),e(Sc,IX),e(IX,qmr),e(Sc,Nmr),e(Sc,qX),e(qX,jmr),e(Sc,Dmr),e(Cr,Gmr),e(Cr,Ww),e(Ww,Omr),e(Ww,g1e),e(g1e,Vmr),e(Ww,Xmr),e(Cr,zmr),e(Cr,bt),g(Hw,bt,null),e(bt,Qmr),e(bt,h1e),e(h1e,Wmr),e(bt,Hmr),e(bt,Rc),e(Rc,Umr),e(Rc,p1e),e(p1e,Jmr),e(Rc,Ymr),e(Rc,NX),e(NX,Kmr),e(Rc,Zmr),e(bt,egr),e(bt,_1e),e(_1e,ogr),e(bt,rgr),g(Uw,bt,null),e(Cr,tgr),e(Cr,vo),g(Jw,vo,null),e(vo,agr),e(vo,u1e),e(u1e,ngr),e(vo,sgr),e(vo,Mn),e(Mn,lgr),e(Mn,b1e),e(b1e,igr),e(Mn,dgr),e(Mn,v1e),e(v1e,cgr),e(Mn,fgr),e(Mn,F1e),e(F1e,mgr),e(Mn,ggr),e(vo,hgr),e(vo,be),e(be,x8),e(x8,T1e),e(T1e,pgr),e(x8,_gr),e(x8,jX),e(jX,ugr),e(x8,bgr),e(be,vgr),e(be,k8),e(k8,M1e),e(M1e,Fgr),e(k8,Tgr),e(k8,DX),e(DX,Mgr),e(k8,Egr),e(be,Cgr),e(be,S8),e(S8,E1e),e(E1e,wgr),e(S8,Agr),e(S8,GX),e(GX,ygr),e(S8,Lgr),e(be,xgr),e(be,R8),e(R8,C1e),e(C1e,kgr),e(R8,Sgr),e(R8,OX),e(OX,Rgr),e(R8,Bgr),e(be,Pgr),e(be,B8),e(B8,w1e),e(w1e,$gr),e(B8,Igr),e(B8,VX),e(VX,qgr),e(B8,Ngr),e(be,jgr),e(be,P8),e(P8,A1e),e(A1e,Dgr),e(P8,Ggr),e(P8,XX),e(XX,Ogr),e(P8,Vgr),e(be,Xgr),e(be,$8),e($8,y1e),e(y1e,zgr),e($8,Qgr),e($8,zX),e(zX,Wgr),e($8,Hgr),e(be,Ugr),e(be,I8),e(I8,L1e),e(L1e,Jgr),e(I8,Ygr),e(I8,QX),e(QX,Kgr),e(I8,Zgr),e(be,ehr),e(be,q8),e(q8,x1e),e(x1e,ohr),e(q8,rhr),e(q8,WX),e(WX,thr),e(q8,ahr),e(be,nhr),e(be,N8),e(N8,k1e),e(k1e,shr),e(N8,lhr),e(N8,HX),e(HX,ihr),e(N8,dhr),e(vo,chr),e(vo,S1e),e(S1e,fhr),e(vo,mhr),g(Yw,vo,null),b(c,ePe,u),b(c,Bc,u),e(Bc,j8),e(j8,R1e),g(Kw,R1e,null),e(Bc,ghr),e(Bc,B1e),e(B1e,hhr),b(c,oPe,u),b(c,wr,u),g(Zw,wr,null),e(wr,phr),e(wr,Pc),e(Pc,_hr),e(Pc,UX),e(UX,uhr),e(Pc,bhr),e(Pc,JX),e(JX,vhr),e(Pc,Fhr),e(wr,Thr),e(wr,eA),e(eA,Mhr),e(eA,P1e),e(P1e,Ehr),e(eA,Chr),e(wr,whr),e(wr,vt),g(oA,vt,null),e(vt,Ahr),e(vt,$1e),e($1e,yhr),e(vt,Lhr),e(vt,$c),e($c,xhr),e($c,I1e),e(I1e,khr),e($c,Shr),e($c,YX),e(YX,Rhr),e($c,Bhr),e(vt,Phr),e(vt,q1e),e(q1e,$hr),e(vt,Ihr),g(rA,vt,null),e(wr,qhr),e(wr,Fo),g(tA,Fo,null),e(Fo,Nhr),e(Fo,N1e),e(N1e,jhr),e(Fo,Dhr),e(Fo,En),e(En,Ghr),e(En,j1e),e(j1e,Ohr),e(En,Vhr),e(En,D1e),e(D1e,Xhr),e(En,zhr),e(En,G1e),e(G1e,Qhr),e(En,Whr),e(Fo,Hhr),e(Fo,V),e(V,D8),e(D8,O1e),e(O1e,Uhr),e(D8,Jhr),e(D8,KX),e(KX,Yhr),e(D8,Khr),e(V,Zhr),e(V,G8),e(G8,V1e),e(V1e,epr),e(G8,opr),e(G8,ZX),e(ZX,rpr),e(G8,tpr),e(V,apr),e(V,O8),e(O8,X1e),e(X1e,npr),e(O8,spr),e(O8,ez),e(ez,lpr),e(O8,ipr),e(V,dpr),e(V,V8),e(V8,z1e),e(z1e,cpr),e(V8,fpr),e(V8,oz),e(oz,mpr),e(V8,gpr),e(V,hpr),e(V,X8),e(X8,Q1e),e(Q1e,ppr),e(X8,_pr),e(X8,rz),e(rz,upr),e(X8,bpr),e(V,vpr),e(V,z8),e(z8,W1e),e(W1e,Fpr),e(z8,Tpr),e(z8,tz),e(tz,Mpr),e(z8,Epr),e(V,Cpr),e(V,Q8),e(Q8,H1e),e(H1e,wpr),e(Q8,Apr),e(Q8,az),e(az,ypr),e(Q8,Lpr),e(V,xpr),e(V,W8),e(W8,U1e),e(U1e,kpr),e(W8,Spr),e(W8,nz),e(nz,Rpr),e(W8,Bpr),e(V,Ppr),e(V,H8),e(H8,J1e),e(J1e,$pr),e(H8,Ipr),e(H8,sz),e(sz,qpr),e(H8,Npr),e(V,jpr),e(V,U8),e(U8,Y1e),e(Y1e,Dpr),e(U8,Gpr),e(U8,lz),e(lz,Opr),e(U8,Vpr),e(V,Xpr),e(V,J8),e(J8,K1e),e(K1e,zpr),e(J8,Qpr),e(J8,iz),e(iz,Wpr),e(J8,Hpr),e(V,Upr),e(V,Y8),e(Y8,Z1e),e(Z1e,Jpr),e(Y8,Ypr),e(Y8,dz),e(dz,Kpr),e(Y8,Zpr),e(V,e_r),e(V,K8),e(K8,ebe),e(ebe,o_r),e(K8,r_r),e(K8,cz),e(cz,t_r),e(K8,a_r),e(V,n_r),e(V,Z8),e(Z8,obe),e(obe,s_r),e(Z8,l_r),e(Z8,fz),e(fz,i_r),e(Z8,d_r),e(V,c_r),e(V,e7),e(e7,rbe),e(rbe,f_r),e(e7,m_r),e(e7,mz),e(mz,g_r),e(e7,h_r),e(V,p_r),e(V,o7),e(o7,tbe),e(tbe,__r),e(o7,u_r),e(o7,gz),e(gz,b_r),e(o7,v_r),e(V,F_r),e(V,r7),e(r7,abe),e(abe,T_r),e(r7,M_r),e(r7,hz),e(hz,E_r),e(r7,C_r),e(V,w_r),e(V,t7),e(t7,nbe),e(nbe,A_r),e(t7,y_r),e(t7,pz),e(pz,L_r),e(t7,x_r),e(V,k_r),e(V,a7),e(a7,sbe),e(sbe,S_r),e(a7,R_r),e(a7,_z),e(_z,B_r),e(a7,P_r),e(V,$_r),e(V,n7),e(n7,lbe),e(lbe,I_r),e(n7,q_r),e(n7,uz),e(uz,N_r),e(n7,j_r),e(V,D_r),e(V,s7),e(s7,ibe),e(ibe,G_r),e(s7,O_r),e(s7,bz),e(bz,V_r),e(s7,X_r),e(V,z_r),e(V,l7),e(l7,dbe),e(dbe,Q_r),e(l7,W_r),e(l7,vz),e(vz,H_r),e(l7,U_r),e(V,J_r),e(V,i7),e(i7,cbe),e(cbe,Y_r),e(i7,K_r),e(i7,Fz),e(Fz,Z_r),e(i7,eur),e(V,our),e(V,d7),e(d7,fbe),e(fbe,rur),e(d7,tur),e(d7,Tz),e(Tz,aur),e(d7,nur),e(V,sur),e(V,c7),e(c7,mbe),e(mbe,lur),e(c7,iur),e(c7,Mz),e(Mz,dur),e(c7,cur),e(V,fur),e(V,f7),e(f7,gbe),e(gbe,mur),e(f7,gur),e(f7,Ez),e(Ez,hur),e(f7,pur),e(Fo,_ur),e(Fo,hbe),e(hbe,uur),e(Fo,bur),g(aA,Fo,null),b(c,rPe,u),b(c,Ic,u),e(Ic,m7),e(m7,pbe),g(nA,pbe,null),e(Ic,vur),e(Ic,_be),e(_be,Fur),b(c,tPe,u),b(c,Ar,u),g(sA,Ar,null),e(Ar,Tur),e(Ar,qc),e(qc,Mur),e(qc,Cz),e(Cz,Eur),e(qc,Cur),e(qc,wz),e(wz,wur),e(qc,Aur),e(Ar,yur),e(Ar,lA),e(lA,Lur),e(lA,ube),e(ube,xur),e(lA,kur),e(Ar,Sur),e(Ar,Ft),g(iA,Ft,null),e(Ft,Rur),e(Ft,bbe),e(bbe,Bur),e(Ft,Pur),e(Ft,Nc),e(Nc,$ur),e(Nc,vbe),e(vbe,Iur),e(Nc,qur),e(Nc,Az),e(Az,Nur),e(Nc,jur),e(Ft,Dur),e(Ft,Fbe),e(Fbe,Gur),e(Ft,Our),g(dA,Ft,null),e(Ar,Vur),e(Ar,To),g(cA,To,null),e(To,Xur),e(To,Tbe),e(Tbe,zur),e(To,Qur),e(To,Cn),e(Cn,Wur),e(Cn,Mbe),e(Mbe,Hur),e(Cn,Uur),e(Cn,Ebe),e(Ebe,Jur),e(Cn,Yur),e(Cn,Cbe),e(Cbe,Kur),e(Cn,Zur),e(To,e1r),e(To,se),e(se,g7),e(g7,wbe),e(wbe,o1r),e(g7,r1r),e(g7,yz),e(yz,t1r),e(g7,a1r),e(se,n1r),e(se,h7),e(h7,Abe),e(Abe,s1r),e(h7,l1r),e(h7,Lz),e(Lz,i1r),e(h7,d1r),e(se,c1r),e(se,p7),e(p7,ybe),e(ybe,f1r),e(p7,m1r),e(p7,xz),e(xz,g1r),e(p7,h1r),e(se,p1r),e(se,_7),e(_7,Lbe),e(Lbe,_1r),e(_7,u1r),e(_7,kz),e(kz,b1r),e(_7,v1r),e(se,F1r),e(se,u7),e(u7,xbe),e(xbe,T1r),e(u7,M1r),e(u7,Sz),e(Sz,E1r),e(u7,C1r),e(se,w1r),e(se,b7),e(b7,kbe),e(kbe,A1r),e(b7,y1r),e(b7,Rz),e(Rz,L1r),e(b7,x1r),e(se,k1r),e(se,v7),e(v7,Sbe),e(Sbe,S1r),e(v7,R1r),e(v7,Bz),e(Bz,B1r),e(v7,P1r),e(se,$1r),e(se,F7),e(F7,Rbe),e(Rbe,I1r),e(F7,q1r),e(F7,Pz),e(Pz,N1r),e(F7,j1r),e(se,D1r),e(se,T7),e(T7,Bbe),e(Bbe,G1r),e(T7,O1r),e(T7,$z),e($z,V1r),e(T7,X1r),e(se,z1r),e(se,M7),e(M7,Pbe),e(Pbe,Q1r),e(M7,W1r),e(M7,Iz),e(Iz,H1r),e(M7,U1r),e(se,J1r),e(se,E7),e(E7,$be),e($be,Y1r),e(E7,K1r),e(E7,qz),e(qz,Z1r),e(E7,ebr),e(se,obr),e(se,C7),e(C7,Ibe),e(Ibe,rbr),e(C7,tbr),e(C7,Nz),e(Nz,abr),e(C7,nbr),e(se,sbr),e(se,w7),e(w7,qbe),e(qbe,lbr),e(w7,ibr),e(w7,jz),e(jz,dbr),e(w7,cbr),e(se,fbr),e(se,A7),e(A7,Nbe),e(Nbe,mbr),e(A7,gbr),e(A7,Dz),e(Dz,hbr),e(A7,pbr),e(se,_br),e(se,y7),e(y7,jbe),e(jbe,ubr),e(y7,bbr),e(y7,Gz),e(Gz,vbr),e(y7,Fbr),e(se,Tbr),e(se,L7),e(L7,Dbe),e(Dbe,Mbr),e(L7,Ebr),e(L7,Oz),e(Oz,Cbr),e(L7,wbr),e(se,Abr),e(se,x7),e(x7,Gbe),e(Gbe,ybr),e(x7,Lbr),e(x7,Vz),e(Vz,xbr),e(x7,kbr),e(To,Sbr),e(To,Obe),e(Obe,Rbr),e(To,Bbr),g(fA,To,null),b(c,aPe,u),b(c,jc,u),e(jc,k7),e(k7,Vbe),g(mA,Vbe,null),e(jc,Pbr),e(jc,Xbe),e(Xbe,$br),b(c,nPe,u),b(c,yr,u),g(gA,yr,null),e(yr,Ibr),e(yr,Dc),e(Dc,qbr),e(Dc,Xz),e(Xz,Nbr),e(Dc,jbr),e(Dc,zz),e(zz,Dbr),e(Dc,Gbr),e(yr,Obr),e(yr,hA),e(hA,Vbr),e(hA,zbe),e(zbe,Xbr),e(hA,zbr),e(yr,Qbr),e(yr,Tt),g(pA,Tt,null),e(Tt,Wbr),e(Tt,Qbe),e(Qbe,Hbr),e(Tt,Ubr),e(Tt,Gc),e(Gc,Jbr),e(Gc,Wbe),e(Wbe,Ybr),e(Gc,Kbr),e(Gc,Qz),e(Qz,Zbr),e(Gc,e2r),e(Tt,o2r),e(Tt,Hbe),e(Hbe,r2r),e(Tt,t2r),g(_A,Tt,null),e(yr,a2r),e(yr,Mo),g(uA,Mo,null),e(Mo,n2r),e(Mo,Ube),e(Ube,s2r),e(Mo,l2r),e(Mo,wn),e(wn,i2r),e(wn,Jbe),e(Jbe,d2r),e(wn,c2r),e(wn,Ybe),e(Ybe,f2r),e(wn,m2r),e(wn,Kbe),e(Kbe,g2r),e(wn,h2r),e(Mo,p2r),e(Mo,Zbe),e(Zbe,S7),e(S7,e2e),e(e2e,_2r),e(S7,u2r),e(S7,Wz),e(Wz,b2r),e(S7,v2r),e(Mo,F2r),e(Mo,o2e),e(o2e,T2r),e(Mo,M2r),g(bA,Mo,null),b(c,sPe,u),b(c,Oc,u),e(Oc,R7),e(R7,r2e),g(vA,r2e,null),e(Oc,E2r),e(Oc,t2e),e(t2e,C2r),b(c,lPe,u),b(c,Lr,u),g(FA,Lr,null),e(Lr,w2r),e(Lr,Vc),e(Vc,A2r),e(Vc,Hz),e(Hz,y2r),e(Vc,L2r),e(Vc,Uz),e(Uz,x2r),e(Vc,k2r),e(Lr,S2r),e(Lr,TA),e(TA,R2r),e(TA,a2e),e(a2e,B2r),e(TA,P2r),e(Lr,$2r),e(Lr,Mt),g(MA,Mt,null),e(Mt,I2r),e(Mt,n2e),e(n2e,q2r),e(Mt,N2r),e(Mt,Xc),e(Xc,j2r),e(Xc,s2e),e(s2e,D2r),e(Xc,G2r),e(Xc,Jz),e(Jz,O2r),e(Xc,V2r),e(Mt,X2r),e(Mt,l2e),e(l2e,z2r),e(Mt,Q2r),g(EA,Mt,null),e(Lr,W2r),e(Lr,Eo),g(CA,Eo,null),e(Eo,H2r),e(Eo,i2e),e(i2e,U2r),e(Eo,J2r),e(Eo,An),e(An,Y2r),e(An,d2e),e(d2e,K2r),e(An,Z2r),e(An,c2e),e(c2e,e6r),e(An,o6r),e(An,f2e),e(f2e,r6r),e(An,t6r),e(Eo,a6r),e(Eo,Y),e(Y,B7),e(B7,m2e),e(m2e,n6r),e(B7,s6r),e(B7,Yz),e(Yz,l6r),e(B7,i6r),e(Y,d6r),e(Y,P7),e(P7,g2e),e(g2e,c6r),e(P7,f6r),e(P7,Kz),e(Kz,m6r),e(P7,g6r),e(Y,h6r),e(Y,$7),e($7,h2e),e(h2e,p6r),e($7,_6r),e($7,Zz),e(Zz,u6r),e($7,b6r),e(Y,v6r),e(Y,I7),e(I7,p2e),e(p2e,F6r),e(I7,T6r),e(I7,eQ),e(eQ,M6r),e(I7,E6r),e(Y,C6r),e(Y,q7),e(q7,_2e),e(_2e,w6r),e(q7,A6r),e(q7,oQ),e(oQ,y6r),e(q7,L6r),e(Y,x6r),e(Y,N7),e(N7,u2e),e(u2e,k6r),e(N7,S6r),e(N7,rQ),e(rQ,R6r),e(N7,B6r),e(Y,P6r),e(Y,j7),e(j7,b2e),e(b2e,$6r),e(j7,I6r),e(j7,tQ),e(tQ,q6r),e(j7,N6r),e(Y,j6r),e(Y,D7),e(D7,v2e),e(v2e,D6r),e(D7,G6r),e(D7,aQ),e(aQ,O6r),e(D7,V6r),e(Y,X6r),e(Y,G7),e(G7,F2e),e(F2e,z6r),e(G7,Q6r),e(G7,nQ),e(nQ,W6r),e(G7,H6r),e(Y,U6r),e(Y,O7),e(O7,T2e),e(T2e,J6r),e(O7,Y6r),e(O7,sQ),e(sQ,K6r),e(O7,Z6r),e(Y,evr),e(Y,V7),e(V7,M2e),e(M2e,ovr),e(V7,rvr),e(V7,lQ),e(lQ,tvr),e(V7,avr),e(Y,nvr),e(Y,X7),e(X7,E2e),e(E2e,svr),e(X7,lvr),e(X7,iQ),e(iQ,ivr),e(X7,dvr),e(Y,cvr),e(Y,z7),e(z7,C2e),e(C2e,fvr),e(z7,mvr),e(z7,dQ),e(dQ,gvr),e(z7,hvr),e(Y,pvr),e(Y,Q7),e(Q7,w2e),e(w2e,_vr),e(Q7,uvr),e(Q7,cQ),e(cQ,bvr),e(Q7,vvr),e(Y,Fvr),e(Y,W7),e(W7,A2e),e(A2e,Tvr),e(W7,Mvr),e(W7,fQ),e(fQ,Evr),e(W7,Cvr),e(Y,wvr),e(Y,H7),e(H7,y2e),e(y2e,Avr),e(H7,yvr),e(H7,mQ),e(mQ,Lvr),e(H7,xvr),e(Y,kvr),e(Y,U7),e(U7,L2e),e(L2e,Svr),e(U7,Rvr),e(U7,gQ),e(gQ,Bvr),e(U7,Pvr),e(Y,$vr),e(Y,J7),e(J7,x2e),e(x2e,Ivr),e(J7,qvr),e(J7,hQ),e(hQ,Nvr),e(J7,jvr),e(Y,Dvr),e(Y,Y7),e(Y7,k2e),e(k2e,Gvr),e(Y7,Ovr),e(Y7,pQ),e(pQ,Vvr),e(Y7,Xvr),e(Y,zvr),e(Y,K7),e(K7,S2e),e(S2e,Qvr),e(K7,Wvr),e(K7,_Q),e(_Q,Hvr),e(K7,Uvr),e(Eo,Jvr),e(Eo,R2e),e(R2e,Yvr),e(Eo,Kvr),g(wA,Eo,null),b(c,iPe,u),b(c,zc,u),e(zc,Z7),e(Z7,B2e),g(AA,B2e,null),e(zc,Zvr),e(zc,P2e),e(P2e,eFr),b(c,dPe,u),b(c,xr,u),g(yA,xr,null),e(xr,oFr),e(xr,Qc),e(Qc,rFr),e(Qc,uQ),e(uQ,tFr),e(Qc,aFr),e(Qc,bQ),e(bQ,nFr),e(Qc,sFr),e(xr,lFr),e(xr,LA),e(LA,iFr),e(LA,$2e),e($2e,dFr),e(LA,cFr),e(xr,fFr),e(xr,Et),g(xA,Et,null),e(Et,mFr),e(Et,I2e),e(I2e,gFr),e(Et,hFr),e(Et,Wc),e(Wc,pFr),e(Wc,q2e),e(q2e,_Fr),e(Wc,uFr),e(Wc,vQ),e(vQ,bFr),e(Wc,vFr),e(Et,FFr),e(Et,N2e),e(N2e,TFr),e(Et,MFr),g(kA,Et,null),e(xr,EFr),e(xr,Co),g(SA,Co,null),e(Co,CFr),e(Co,j2e),e(j2e,wFr),e(Co,AFr),e(Co,yn),e(yn,yFr),e(yn,D2e),e(D2e,LFr),e(yn,xFr),e(yn,G2e),e(G2e,kFr),e(yn,SFr),e(yn,O2e),e(O2e,RFr),e(yn,BFr),e(Co,PFr),e(Co,K),e(K,e9),e(e9,V2e),e(V2e,$Fr),e(e9,IFr),e(e9,FQ),e(FQ,qFr),e(e9,NFr),e(K,jFr),e(K,o9),e(o9,X2e),e(X2e,DFr),e(o9,GFr),e(o9,TQ),e(TQ,OFr),e(o9,VFr),e(K,XFr),e(K,r9),e(r9,z2e),e(z2e,zFr),e(r9,QFr),e(r9,MQ),e(MQ,WFr),e(r9,HFr),e(K,UFr),e(K,t9),e(t9,Q2e),e(Q2e,JFr),e(t9,YFr),e(t9,EQ),e(EQ,KFr),e(t9,ZFr),e(K,eTr),e(K,a9),e(a9,W2e),e(W2e,oTr),e(a9,rTr),e(a9,CQ),e(CQ,tTr),e(a9,aTr),e(K,nTr),e(K,n9),e(n9,H2e),e(H2e,sTr),e(n9,lTr),e(n9,wQ),e(wQ,iTr),e(n9,dTr),e(K,cTr),e(K,s9),e(s9,U2e),e(U2e,fTr),e(s9,mTr),e(s9,AQ),e(AQ,gTr),e(s9,hTr),e(K,pTr),e(K,l9),e(l9,J2e),e(J2e,_Tr),e(l9,uTr),e(l9,yQ),e(yQ,bTr),e(l9,vTr),e(K,FTr),e(K,i9),e(i9,Y2e),e(Y2e,TTr),e(i9,MTr),e(i9,LQ),e(LQ,ETr),e(i9,CTr),e(K,wTr),e(K,d9),e(d9,K2e),e(K2e,ATr),e(d9,yTr),e(d9,xQ),e(xQ,LTr),e(d9,xTr),e(K,kTr),e(K,c9),e(c9,Z2e),e(Z2e,STr),e(c9,RTr),e(c9,kQ),e(kQ,BTr),e(c9,PTr),e(K,$Tr),e(K,f9),e(f9,e6e),e(e6e,ITr),e(f9,qTr),e(f9,SQ),e(SQ,NTr),e(f9,jTr),e(K,DTr),e(K,m9),e(m9,o6e),e(o6e,GTr),e(m9,OTr),e(m9,RQ),e(RQ,VTr),e(m9,XTr),e(K,zTr),e(K,g9),e(g9,r6e),e(r6e,QTr),e(g9,WTr),e(g9,BQ),e(BQ,HTr),e(g9,UTr),e(K,JTr),e(K,h9),e(h9,t6e),e(t6e,YTr),e(h9,KTr),e(h9,PQ),e(PQ,ZTr),e(h9,e8r),e(K,o8r),e(K,p9),e(p9,a6e),e(a6e,r8r),e(p9,t8r),e(p9,$Q),e($Q,a8r),e(p9,n8r),e(K,s8r),e(K,_9),e(_9,n6e),e(n6e,l8r),e(_9,i8r),e(_9,IQ),e(IQ,d8r),e(_9,c8r),e(K,f8r),e(K,u9),e(u9,s6e),e(s6e,m8r),e(u9,g8r),e(u9,qQ),e(qQ,h8r),e(u9,p8r),e(K,_8r),e(K,b9),e(b9,l6e),e(l6e,u8r),e(b9,b8r),e(b9,NQ),e(NQ,v8r),e(b9,F8r),e(K,T8r),e(K,v9),e(v9,i6e),e(i6e,M8r),e(v9,E8r),e(v9,jQ),e(jQ,C8r),e(v9,w8r),e(Co,A8r),e(Co,d6e),e(d6e,y8r),e(Co,L8r),g(RA,Co,null),b(c,cPe,u),b(c,Hc,u),e(Hc,F9),e(F9,c6e),g(BA,c6e,null),e(Hc,x8r),e(Hc,f6e),e(f6e,k8r),b(c,fPe,u),b(c,kr,u),g(PA,kr,null),e(kr,S8r),e(kr,Uc),e(Uc,R8r),e(Uc,DQ),e(DQ,B8r),e(Uc,P8r),e(Uc,GQ),e(GQ,$8r),e(Uc,I8r),e(kr,q8r),e(kr,$A),e($A,N8r),e($A,m6e),e(m6e,j8r),e($A,D8r),e(kr,G8r),e(kr,Ct),g(IA,Ct,null),e(Ct,O8r),e(Ct,g6e),e(g6e,V8r),e(Ct,X8r),e(Ct,Jc),e(Jc,z8r),e(Jc,h6e),e(h6e,Q8r),e(Jc,W8r),e(Jc,OQ),e(OQ,H8r),e(Jc,U8r),e(Ct,J8r),e(Ct,p6e),e(p6e,Y8r),e(Ct,K8r),g(qA,Ct,null),e(kr,Z8r),e(kr,wo),g(NA,wo,null),e(wo,e7r),e(wo,_6e),e(_6e,o7r),e(wo,r7r),e(wo,Ln),e(Ln,t7r),e(Ln,u6e),e(u6e,a7r),e(Ln,n7r),e(Ln,b6e),e(b6e,s7r),e(Ln,l7r),e(Ln,v6e),e(v6e,i7r),e(Ln,d7r),e(wo,c7r),e(wo,F6e),e(F6e,T9),e(T9,T6e),e(T6e,f7r),e(T9,m7r),e(T9,VQ),e(VQ,g7r),e(T9,h7r),e(wo,p7r),e(wo,M6e),e(M6e,_7r),e(wo,u7r),g(jA,wo,null),b(c,mPe,u),b(c,Yc,u),e(Yc,M9),e(M9,E6e),g(DA,E6e,null),e(Yc,b7r),e(Yc,C6e),e(C6e,v7r),b(c,gPe,u),b(c,Sr,u),g(GA,Sr,null),e(Sr,F7r),e(Sr,Kc),e(Kc,T7r),e(Kc,XQ),e(XQ,M7r),e(Kc,E7r),e(Kc,zQ),e(zQ,C7r),e(Kc,w7r),e(Sr,A7r),e(Sr,OA),e(OA,y7r),e(OA,w6e),e(w6e,L7r),e(OA,x7r),e(Sr,k7r),e(Sr,wt),g(VA,wt,null),e(wt,S7r),e(wt,A6e),e(A6e,R7r),e(wt,B7r),e(wt,Zc),e(Zc,P7r),e(Zc,y6e),e(y6e,$7r),e(Zc,I7r),e(Zc,QQ),e(QQ,q7r),e(Zc,N7r),e(wt,j7r),e(wt,L6e),e(L6e,D7r),e(wt,G7r),g(XA,wt,null),e(Sr,O7r),e(Sr,Ao),g(zA,Ao,null),e(Ao,V7r),e(Ao,x6e),e(x6e,X7r),e(Ao,z7r),e(Ao,xn),e(xn,Q7r),e(xn,k6e),e(k6e,W7r),e(xn,H7r),e(xn,S6e),e(S6e,U7r),e(xn,J7r),e(xn,R6e),e(R6e,Y7r),e(xn,K7r),e(Ao,Z7r),e(Ao,B6e),e(B6e,E9),e(E9,P6e),e(P6e,e9r),e(E9,o9r),e(E9,WQ),e(WQ,r9r),e(E9,t9r),e(Ao,a9r),e(Ao,$6e),e($6e,n9r),e(Ao,s9r),g(QA,Ao,null),b(c,hPe,u),b(c,ef,u),e(ef,C9),e(C9,I6e),g(WA,I6e,null),e(ef,l9r),e(ef,q6e),e(q6e,i9r),b(c,pPe,u),b(c,Rr,u),g(HA,Rr,null),e(Rr,d9r),e(Rr,of),e(of,c9r),e(of,HQ),e(HQ,f9r),e(of,m9r),e(of,UQ),e(UQ,g9r),e(of,h9r),e(Rr,p9r),e(Rr,UA),e(UA,_9r),e(UA,N6e),e(N6e,u9r),e(UA,b9r),e(Rr,v9r),e(Rr,At),g(JA,At,null),e(At,F9r),e(At,j6e),e(j6e,T9r),e(At,M9r),e(At,rf),e(rf,E9r),e(rf,D6e),e(D6e,C9r),e(rf,w9r),e(rf,JQ),e(JQ,A9r),e(rf,y9r),e(At,L9r),e(At,G6e),e(G6e,x9r),e(At,k9r),g(YA,At,null),e(Rr,S9r),e(Rr,yo),g(KA,yo,null),e(yo,R9r),e(yo,O6e),e(O6e,B9r),e(yo,P9r),e(yo,kn),e(kn,$9r),e(kn,V6e),e(V6e,I9r),e(kn,q9r),e(kn,X6e),e(X6e,N9r),e(kn,j9r),e(kn,z6e),e(z6e,D9r),e(kn,G9r),e(yo,O9r),e(yo,z),e(z,w9),e(w9,Q6e),e(Q6e,V9r),e(w9,X9r),e(w9,YQ),e(YQ,z9r),e(w9,Q9r),e(z,W9r),e(z,A9),e(A9,W6e),e(W6e,H9r),e(A9,U9r),e(A9,KQ),e(KQ,J9r),e(A9,Y9r),e(z,K9r),e(z,y9),e(y9,H6e),e(H6e,Z9r),e(y9,eMr),e(y9,ZQ),e(ZQ,oMr),e(y9,rMr),e(z,tMr),e(z,L9),e(L9,U6e),e(U6e,aMr),e(L9,nMr),e(L9,eW),e(eW,sMr),e(L9,lMr),e(z,iMr),e(z,x9),e(x9,J6e),e(J6e,dMr),e(x9,cMr),e(x9,oW),e(oW,fMr),e(x9,mMr),e(z,gMr),e(z,k9),e(k9,Y6e),e(Y6e,hMr),e(k9,pMr),e(k9,rW),e(rW,_Mr),e(k9,uMr),e(z,bMr),e(z,S9),e(S9,K6e),e(K6e,vMr),e(S9,FMr),e(S9,tW),e(tW,TMr),e(S9,MMr),e(z,EMr),e(z,R9),e(R9,Z6e),e(Z6e,CMr),e(R9,wMr),e(R9,aW),e(aW,AMr),e(R9,yMr),e(z,LMr),e(z,B9),e(B9,eve),e(eve,xMr),e(B9,kMr),e(B9,nW),e(nW,SMr),e(B9,RMr),e(z,BMr),e(z,P9),e(P9,ove),e(ove,PMr),e(P9,$Mr),e(P9,sW),e(sW,IMr),e(P9,qMr),e(z,NMr),e(z,$9),e($9,rve),e(rve,jMr),e($9,DMr),e($9,lW),e(lW,GMr),e($9,OMr),e(z,VMr),e(z,I9),e(I9,tve),e(tve,XMr),e(I9,zMr),e(I9,iW),e(iW,QMr),e(I9,WMr),e(z,HMr),e(z,q9),e(q9,ave),e(ave,UMr),e(q9,JMr),e(q9,dW),e(dW,YMr),e(q9,KMr),e(z,ZMr),e(z,N9),e(N9,nve),e(nve,e4r),e(N9,o4r),e(N9,cW),e(cW,r4r),e(N9,t4r),e(z,a4r),e(z,j9),e(j9,sve),e(sve,n4r),e(j9,s4r),e(j9,fW),e(fW,l4r),e(j9,i4r),e(z,d4r),e(z,D9),e(D9,lve),e(lve,c4r),e(D9,f4r),e(D9,mW),e(mW,m4r),e(D9,g4r),e(z,h4r),e(z,G9),e(G9,ive),e(ive,p4r),e(G9,_4r),e(G9,gW),e(gW,u4r),e(G9,b4r),e(z,v4r),e(z,O9),e(O9,dve),e(dve,F4r),e(O9,T4r),e(O9,hW),e(hW,M4r),e(O9,E4r),e(z,C4r),e(z,V9),e(V9,cve),e(cve,w4r),e(V9,A4r),e(V9,pW),e(pW,y4r),e(V9,L4r),e(z,x4r),e(z,X9),e(X9,fve),e(fve,k4r),e(X9,S4r),e(X9,_W),e(_W,R4r),e(X9,B4r),e(z,P4r),e(z,z9),e(z9,mve),e(mve,$4r),e(z9,I4r),e(z9,uW),e(uW,q4r),e(z9,N4r),e(z,j4r),e(z,Q9),e(Q9,gve),e(gve,D4r),e(Q9,G4r),e(Q9,bW),e(bW,O4r),e(Q9,V4r),e(z,X4r),e(z,W9),e(W9,hve),e(hve,z4r),e(W9,Q4r),e(W9,vW),e(vW,W4r),e(W9,H4r),e(z,U4r),e(z,H9),e(H9,pve),e(pve,J4r),e(H9,Y4r),e(H9,FW),e(FW,K4r),e(H9,Z4r),e(z,eEr),e(z,U9),e(U9,_ve),e(_ve,oEr),e(U9,rEr),e(U9,TW),e(TW,tEr),e(U9,aEr),e(yo,nEr),e(yo,uve),e(uve,sEr),e(yo,lEr),g(ZA,yo,null),b(c,_Pe,u),b(c,tf,u),e(tf,J9),e(J9,bve),g(e0,bve,null),e(tf,iEr),e(tf,vve),e(vve,dEr),b(c,uPe,u),b(c,Br,u),g(o0,Br,null),e(Br,cEr),e(Br,af),e(af,fEr),e(af,MW),e(MW,mEr),e(af,gEr),e(af,EW),e(EW,hEr),e(af,pEr),e(Br,_Er),e(Br,r0),e(r0,uEr),e(r0,Fve),e(Fve,bEr),e(r0,vEr),e(Br,FEr),e(Br,yt),g(t0,yt,null),e(yt,TEr),e(yt,Tve),e(Tve,MEr),e(yt,EEr),e(yt,nf),e(nf,CEr),e(nf,Mve),e(Mve,wEr),e(nf,AEr),e(nf,CW),e(CW,yEr),e(nf,LEr),e(yt,xEr),e(yt,Eve),e(Eve,kEr),e(yt,SEr),g(a0,yt,null),e(Br,REr),e(Br,Lo),g(n0,Lo,null),e(Lo,BEr),e(Lo,Cve),e(Cve,PEr),e(Lo,$Er),e(Lo,Sn),e(Sn,IEr),e(Sn,wve),e(wve,qEr),e(Sn,NEr),e(Sn,Ave),e(Ave,jEr),e(Sn,DEr),e(Sn,yve),e(yve,GEr),e(Sn,OEr),e(Lo,VEr),e(Lo,ca),e(ca,Y9),e(Y9,Lve),e(Lve,XEr),e(Y9,zEr),e(Y9,wW),e(wW,QEr),e(Y9,WEr),e(ca,HEr),e(ca,K9),e(K9,xve),e(xve,UEr),e(K9,JEr),e(K9,AW),e(AW,YEr),e(K9,KEr),e(ca,ZEr),e(ca,Z9),e(Z9,kve),e(kve,e5r),e(Z9,o5r),e(Z9,yW),e(yW,r5r),e(Z9,t5r),e(ca,a5r),e(ca,eM),e(eM,Sve),e(Sve,n5r),e(eM,s5r),e(eM,LW),e(LW,l5r),e(eM,i5r),e(ca,d5r),e(ca,oM),e(oM,Rve),e(Rve,c5r),e(oM,f5r),e(oM,xW),e(xW,m5r),e(oM,g5r),e(Lo,h5r),e(Lo,Bve),e(Bve,p5r),e(Lo,_5r),g(s0,Lo,null),b(c,bPe,u),b(c,sf,u),e(sf,rM),e(rM,Pve),g(l0,Pve,null),e(sf,u5r),e(sf,$ve),e($ve,b5r),b(c,vPe,u),b(c,Pr,u),g(i0,Pr,null),e(Pr,v5r),e(Pr,lf),e(lf,F5r),e(lf,kW),e(kW,T5r),e(lf,M5r),e(lf,SW),e(SW,E5r),e(lf,C5r),e(Pr,w5r),e(Pr,d0),e(d0,A5r),e(d0,Ive),e(Ive,y5r),e(d0,L5r),e(Pr,x5r),e(Pr,Lt),g(c0,Lt,null),e(Lt,k5r),e(Lt,qve),e(qve,S5r),e(Lt,R5r),e(Lt,df),e(df,B5r),e(df,Nve),e(Nve,P5r),e(df,$5r),e(df,RW),e(RW,I5r),e(df,q5r),e(Lt,N5r),e(Lt,jve),e(jve,j5r),e(Lt,D5r),g(f0,Lt,null),e(Pr,G5r),e(Pr,xo),g(m0,xo,null),e(xo,O5r),e(xo,Dve),e(Dve,V5r),e(xo,X5r),e(xo,Rn),e(Rn,z5r),e(Rn,Gve),e(Gve,Q5r),e(Rn,W5r),e(Rn,Ove),e(Ove,H5r),e(Rn,U5r),e(Rn,Vve),e(Vve,J5r),e(Rn,Y5r),e(xo,K5r),e(xo,me),e(me,tM),e(tM,Xve),e(Xve,Z5r),e(tM,e3r),e(tM,BW),e(BW,o3r),e(tM,r3r),e(me,t3r),e(me,aM),e(aM,zve),e(zve,a3r),e(aM,n3r),e(aM,PW),e(PW,s3r),e(aM,l3r),e(me,i3r),e(me,nM),e(nM,Qve),e(Qve,d3r),e(nM,c3r),e(nM,$W),e($W,f3r),e(nM,m3r),e(me,g3r),e(me,sM),e(sM,Wve),e(Wve,h3r),e(sM,p3r),e(sM,IW),e(IW,_3r),e(sM,u3r),e(me,b3r),e(me,lM),e(lM,Hve),e(Hve,v3r),e(lM,F3r),e(lM,qW),e(qW,T3r),e(lM,M3r),e(me,E3r),e(me,iM),e(iM,Uve),e(Uve,C3r),e(iM,w3r),e(iM,NW),e(NW,A3r),e(iM,y3r),e(me,L3r),e(me,dM),e(dM,Jve),e(Jve,x3r),e(dM,k3r),e(dM,jW),e(jW,S3r),e(dM,R3r),e(me,B3r),e(me,cM),e(cM,Yve),e(Yve,P3r),e(cM,$3r),e(cM,DW),e(DW,I3r),e(cM,q3r),e(me,N3r),e(me,fM),e(fM,Kve),e(Kve,j3r),e(fM,D3r),e(fM,GW),e(GW,G3r),e(fM,O3r),e(me,V3r),e(me,mM),e(mM,Zve),e(Zve,X3r),e(mM,z3r),e(mM,OW),e(OW,Q3r),e(mM,W3r),e(me,H3r),e(me,gM),e(gM,eFe),e(eFe,U3r),e(gM,J3r),e(gM,VW),e(VW,Y3r),e(gM,K3r),e(me,Z3r),e(me,hM),e(hM,oFe),e(oFe,eCr),e(hM,oCr),e(hM,XW),e(XW,rCr),e(hM,tCr),e(xo,aCr),e(xo,rFe),e(rFe,nCr),e(xo,sCr),g(g0,xo,null),b(c,FPe,u),b(c,cf,u),e(cf,pM),e(pM,tFe),g(h0,tFe,null),e(cf,lCr),e(cf,aFe),e(aFe,iCr),b(c,TPe,u),b(c,$r,u),g(p0,$r,null),e($r,dCr),e($r,ff),e(ff,cCr),e(ff,zW),e(zW,fCr),e(ff,mCr),e(ff,QW),e(QW,gCr),e(ff,hCr),e($r,pCr),e($r,_0),e(_0,_Cr),e(_0,nFe),e(nFe,uCr),e(_0,bCr),e($r,vCr),e($r,xt),g(u0,xt,null),e(xt,FCr),e(xt,sFe),e(sFe,TCr),e(xt,MCr),e(xt,mf),e(mf,ECr),e(mf,lFe),e(lFe,CCr),e(mf,wCr),e(mf,WW),e(WW,ACr),e(mf,yCr),e(xt,LCr),e(xt,iFe),e(iFe,xCr),e(xt,kCr),g(b0,xt,null),e($r,SCr),e($r,ko),g(v0,ko,null),e(ko,RCr),e(ko,dFe),e(dFe,BCr),e(ko,PCr),e(ko,Bn),e(Bn,$Cr),e(Bn,cFe),e(cFe,ICr),e(Bn,qCr),e(Bn,fFe),e(fFe,NCr),e(Bn,jCr),e(Bn,mFe),e(mFe,DCr),e(Bn,GCr),e(ko,OCr),e(ko,ve),e(ve,_M),e(_M,gFe),e(gFe,VCr),e(_M,XCr),e(_M,HW),e(HW,zCr),e(_M,QCr),e(ve,WCr),e(ve,uM),e(uM,hFe),e(hFe,HCr),e(uM,UCr),e(uM,UW),e(UW,JCr),e(uM,YCr),e(ve,KCr),e(ve,bM),e(bM,pFe),e(pFe,ZCr),e(bM,ewr),e(bM,JW),e(JW,owr),e(bM,rwr),e(ve,twr),e(ve,vM),e(vM,_Fe),e(_Fe,awr),e(vM,nwr),e(vM,YW),e(YW,swr),e(vM,lwr),e(ve,iwr),e(ve,FM),e(FM,uFe),e(uFe,dwr),e(FM,cwr),e(FM,KW),e(KW,fwr),e(FM,mwr),e(ve,gwr),e(ve,TM),e(TM,bFe),e(bFe,hwr),e(TM,pwr),e(TM,ZW),e(ZW,_wr),e(TM,uwr),e(ve,bwr),e(ve,MM),e(MM,vFe),e(vFe,vwr),e(MM,Fwr),e(MM,eH),e(eH,Twr),e(MM,Mwr),e(ve,Ewr),e(ve,EM),e(EM,FFe),e(FFe,Cwr),e(EM,wwr),e(EM,oH),e(oH,Awr),e(EM,ywr),e(ve,Lwr),e(ve,CM),e(CM,TFe),e(TFe,xwr),e(CM,kwr),e(CM,rH),e(rH,Swr),e(CM,Rwr),e(ve,Bwr),e(ve,wM),e(wM,MFe),e(MFe,Pwr),e(wM,$wr),e(wM,tH),e(tH,Iwr),e(wM,qwr),e(ko,Nwr),e(ko,EFe),e(EFe,jwr),e(ko,Dwr),g(F0,ko,null),b(c,MPe,u),b(c,gf,u),e(gf,AM),e(AM,CFe),g(T0,CFe,null),e(gf,Gwr),e(gf,wFe),e(wFe,Owr),b(c,EPe,u),b(c,Ir,u),g(M0,Ir,null),e(Ir,Vwr),e(Ir,hf),e(hf,Xwr),e(hf,aH),e(aH,zwr),e(hf,Qwr),e(hf,nH),e(nH,Wwr),e(hf,Hwr),e(Ir,Uwr),e(Ir,E0),e(E0,Jwr),e(E0,AFe),e(AFe,Ywr),e(E0,Kwr),e(Ir,Zwr),e(Ir,kt),g(C0,kt,null),e(kt,eAr),e(kt,yFe),e(yFe,oAr),e(kt,rAr),e(kt,pf),e(pf,tAr),e(pf,LFe),e(LFe,aAr),e(pf,nAr),e(pf,sH),e(sH,sAr),e(pf,lAr),e(kt,iAr),e(kt,xFe),e(xFe,dAr),e(kt,cAr),g(w0,kt,null),e(Ir,fAr),e(Ir,So),g(A0,So,null),e(So,mAr),e(So,kFe),e(kFe,gAr),e(So,hAr),e(So,Pn),e(Pn,pAr),e(Pn,SFe),e(SFe,_Ar),e(Pn,uAr),e(Pn,RFe),e(RFe,bAr),e(Pn,vAr),e(Pn,BFe),e(BFe,FAr),e(Pn,TAr),e(So,MAr),e(So,Ee),e(Ee,yM),e(yM,PFe),e(PFe,EAr),e(yM,CAr),e(yM,lH),e(lH,wAr),e(yM,AAr),e(Ee,yAr),e(Ee,LM),e(LM,$Fe),e($Fe,LAr),e(LM,xAr),e(LM,iH),e(iH,kAr),e(LM,SAr),e(Ee,RAr),e(Ee,xM),e(xM,IFe),e(IFe,BAr),e(xM,PAr),e(xM,dH),e(dH,$Ar),e(xM,IAr),e(Ee,qAr),e(Ee,kM),e(kM,qFe),e(qFe,NAr),e(kM,jAr),e(kM,cH),e(cH,DAr),e(kM,GAr),e(Ee,OAr),e(Ee,SM),e(SM,NFe),e(NFe,VAr),e(SM,XAr),e(SM,fH),e(fH,zAr),e(SM,QAr),e(Ee,WAr),e(Ee,RM),e(RM,jFe),e(jFe,HAr),e(RM,UAr),e(RM,mH),e(mH,JAr),e(RM,YAr),e(Ee,KAr),e(Ee,BM),e(BM,DFe),e(DFe,ZAr),e(BM,e0r),e(BM,gH),e(gH,o0r),e(BM,r0r),e(Ee,t0r),e(Ee,PM),e(PM,GFe),e(GFe,a0r),e(PM,n0r),e(PM,hH),e(hH,s0r),e(PM,l0r),e(Ee,i0r),e(Ee,$M),e($M,OFe),e(OFe,d0r),e($M,c0r),e($M,pH),e(pH,f0r),e($M,m0r),e(So,g0r),e(So,VFe),e(VFe,h0r),e(So,p0r),g(y0,So,null),b(c,CPe,u),b(c,_f,u),e(_f,IM),e(IM,XFe),g(L0,XFe,null),e(_f,_0r),e(_f,zFe),e(zFe,u0r),b(c,wPe,u),b(c,qr,u),g(x0,qr,null),e(qr,b0r),e(qr,uf),e(uf,v0r),e(uf,_H),e(_H,F0r),e(uf,T0r),e(uf,uH),e(uH,M0r),e(uf,E0r),e(qr,C0r),e(qr,k0),e(k0,w0r),e(k0,QFe),e(QFe,A0r),e(k0,y0r),e(qr,L0r),e(qr,St),g(S0,St,null),e(St,x0r),e(St,WFe),e(WFe,k0r),e(St,S0r),e(St,bf),e(bf,R0r),e(bf,HFe),e(HFe,B0r),e(bf,P0r),e(bf,bH),e(bH,$0r),e(bf,I0r),e(St,q0r),e(St,UFe),e(UFe,N0r),e(St,j0r),g(R0,St,null),e(qr,D0r),e(qr,Ro),g(B0,Ro,null),e(Ro,G0r),e(Ro,JFe),e(JFe,O0r),e(Ro,V0r),e(Ro,$n),e($n,X0r),e($n,YFe),e(YFe,z0r),e($n,Q0r),e($n,KFe),e(KFe,W0r),e($n,H0r),e($n,ZFe),e(ZFe,U0r),e($n,J0r),e(Ro,Y0r),e(Ro,Fe),e(Fe,qM),e(qM,eTe),e(eTe,K0r),e(qM,Z0r),e(qM,vH),e(vH,eyr),e(qM,oyr),e(Fe,ryr),e(Fe,NM),e(NM,oTe),e(oTe,tyr),e(NM,ayr),e(NM,FH),e(FH,nyr),e(NM,syr),e(Fe,lyr),e(Fe,jM),e(jM,rTe),e(rTe,iyr),e(jM,dyr),e(jM,TH),e(TH,cyr),e(jM,fyr),e(Fe,myr),e(Fe,DM),e(DM,tTe),e(tTe,gyr),e(DM,hyr),e(DM,MH),e(MH,pyr),e(DM,_yr),e(Fe,uyr),e(Fe,GM),e(GM,aTe),e(aTe,byr),e(GM,vyr),e(GM,EH),e(EH,Fyr),e(GM,Tyr),e(Fe,Myr),e(Fe,OM),e(OM,nTe),e(nTe,Eyr),e(OM,Cyr),e(OM,CH),e(CH,wyr),e(OM,Ayr),e(Fe,yyr),e(Fe,VM),e(VM,sTe),e(sTe,Lyr),e(VM,xyr),e(VM,wH),e(wH,kyr),e(VM,Syr),e(Fe,Ryr),e(Fe,XM),e(XM,lTe),e(lTe,Byr),e(XM,Pyr),e(XM,AH),e(AH,$yr),e(XM,Iyr),e(Fe,qyr),e(Fe,zM),e(zM,iTe),e(iTe,Nyr),e(zM,jyr),e(zM,yH),e(yH,Dyr),e(zM,Gyr),e(Fe,Oyr),e(Fe,QM),e(QM,dTe),e(dTe,Vyr),e(QM,Xyr),e(QM,LH),e(LH,zyr),e(QM,Qyr),e(Ro,Wyr),e(Ro,cTe),e(cTe,Hyr),e(Ro,Uyr),g(P0,Ro,null),b(c,APe,u),b(c,vf,u),e(vf,WM),e(WM,fTe),g($0,fTe,null),e(vf,Jyr),e(vf,mTe),e(mTe,Yyr),b(c,yPe,u),b(c,Nr,u),g(I0,Nr,null),e(Nr,Kyr),e(Nr,Ff),e(Ff,Zyr),e(Ff,xH),e(xH,eLr),e(Ff,oLr),e(Ff,kH),e(kH,rLr),e(Ff,tLr),e(Nr,aLr),e(Nr,q0),e(q0,nLr),e(q0,gTe),e(gTe,sLr),e(q0,lLr),e(Nr,iLr),e(Nr,Rt),g(N0,Rt,null),e(Rt,dLr),e(Rt,hTe),e(hTe,cLr),e(Rt,fLr),e(Rt,Tf),e(Tf,mLr),e(Tf,pTe),e(pTe,gLr),e(Tf,hLr),e(Tf,SH),e(SH,pLr),e(Tf,_Lr),e(Rt,uLr),e(Rt,_Te),e(_Te,bLr),e(Rt,vLr),g(j0,Rt,null),e(Nr,FLr),e(Nr,Bo),g(D0,Bo,null),e(Bo,TLr),e(Bo,uTe),e(uTe,MLr),e(Bo,ELr),e(Bo,In),e(In,CLr),e(In,bTe),e(bTe,wLr),e(In,ALr),e(In,vTe),e(vTe,yLr),e(In,LLr),e(In,FTe),e(FTe,xLr),e(In,kLr),e(Bo,SLr),e(Bo,Te),e(Te,HM),e(HM,TTe),e(TTe,RLr),e(HM,BLr),e(HM,RH),e(RH,PLr),e(HM,$Lr),e(Te,ILr),e(Te,UM),e(UM,MTe),e(MTe,qLr),e(UM,NLr),e(UM,BH),e(BH,jLr),e(UM,DLr),e(Te,GLr),e(Te,JM),e(JM,ETe),e(ETe,OLr),e(JM,VLr),e(JM,PH),e(PH,XLr),e(JM,zLr),e(Te,QLr),e(Te,YM),e(YM,CTe),e(CTe,WLr),e(YM,HLr),e(YM,$H),e($H,ULr),e(YM,JLr),e(Te,YLr),e(Te,KM),e(KM,wTe),e(wTe,KLr),e(KM,ZLr),e(KM,IH),e(IH,exr),e(KM,oxr),e(Te,rxr),e(Te,ZM),e(ZM,ATe),e(ATe,txr),e(ZM,axr),e(ZM,qH),e(qH,nxr),e(ZM,sxr),e(Te,lxr),e(Te,e4),e(e4,yTe),e(yTe,ixr),e(e4,dxr),e(e4,NH),e(NH,cxr),e(e4,fxr),e(Te,mxr),e(Te,o4),e(o4,LTe),e(LTe,gxr),e(o4,hxr),e(o4,jH),e(jH,pxr),e(o4,_xr),e(Te,uxr),e(Te,r4),e(r4,xTe),e(xTe,bxr),e(r4,vxr),e(r4,DH),e(DH,Fxr),e(r4,Txr),e(Te,Mxr),e(Te,t4),e(t4,kTe),e(kTe,Exr),e(t4,Cxr),e(t4,GH),e(GH,wxr),e(t4,Axr),e(Bo,yxr),e(Bo,STe),e(STe,Lxr),e(Bo,xxr),g(G0,Bo,null),b(c,LPe,u),b(c,Mf,u),e(Mf,a4),e(a4,RTe),g(O0,RTe,null),e(Mf,kxr),e(Mf,BTe),e(BTe,Sxr),b(c,xPe,u),b(c,jr,u),g(V0,jr,null),e(jr,Rxr),e(jr,Ef),e(Ef,Bxr),e(Ef,OH),e(OH,Pxr),e(Ef,$xr),e(Ef,VH),e(VH,Ixr),e(Ef,qxr),e(jr,Nxr),e(jr,X0),e(X0,jxr),e(X0,PTe),e(PTe,Dxr),e(X0,Gxr),e(jr,Oxr),e(jr,Bt),g(z0,Bt,null),e(Bt,Vxr),e(Bt,$Te),e($Te,Xxr),e(Bt,zxr),e(Bt,Cf),e(Cf,Qxr),e(Cf,ITe),e(ITe,Wxr),e(Cf,Hxr),e(Cf,XH),e(XH,Uxr),e(Cf,Jxr),e(Bt,Yxr),e(Bt,qTe),e(qTe,Kxr),e(Bt,Zxr),g(Q0,Bt,null),e(jr,ekr),e(jr,Po),g(W0,Po,null),e(Po,okr),e(Po,NTe),e(NTe,rkr),e(Po,tkr),e(Po,qn),e(qn,akr),e(qn,jTe),e(jTe,nkr),e(qn,skr),e(qn,DTe),e(DTe,lkr),e(qn,ikr),e(qn,GTe),e(GTe,dkr),e(qn,ckr),e(Po,fkr),e(Po,Be),e(Be,n4),e(n4,OTe),e(OTe,mkr),e(n4,gkr),e(n4,zH),e(zH,hkr),e(n4,pkr),e(Be,_kr),e(Be,s4),e(s4,VTe),e(VTe,ukr),e(s4,bkr),e(s4,QH),e(QH,vkr),e(s4,Fkr),e(Be,Tkr),e(Be,l4),e(l4,XTe),e(XTe,Mkr),e(l4,Ekr),e(l4,WH),e(WH,Ckr),e(l4,wkr),e(Be,Akr),e(Be,i4),e(i4,zTe),e(zTe,ykr),e(i4,Lkr),e(i4,HH),e(HH,xkr),e(i4,kkr),e(Be,Skr),e(Be,d4),e(d4,QTe),e(QTe,Rkr),e(d4,Bkr),e(d4,UH),e(UH,Pkr),e(d4,$kr),e(Be,Ikr),e(Be,c4),e(c4,WTe),e(WTe,qkr),e(c4,Nkr),e(c4,JH),e(JH,jkr),e(c4,Dkr),e(Be,Gkr),e(Be,f4),e(f4,HTe),e(HTe,Okr),e(f4,Vkr),e(f4,YH),e(YH,Xkr),e(f4,zkr),e(Be,Qkr),e(Be,m4),e(m4,UTe),e(UTe,Wkr),e(m4,Hkr),e(m4,KH),e(KH,Ukr),e(m4,Jkr),e(Po,Ykr),e(Po,JTe),e(JTe,Kkr),e(Po,Zkr),g(H0,Po,null),b(c,kPe,u),b(c,wf,u),e(wf,g4),e(g4,YTe),g(U0,YTe,null),e(wf,eSr),e(wf,KTe),e(KTe,oSr),b(c,SPe,u),b(c,Dr,u),g(J0,Dr,null),e(Dr,rSr),e(Dr,Af),e(Af,tSr),e(Af,ZH),e(ZH,aSr),e(Af,nSr),e(Af,eU),e(eU,sSr),e(Af,lSr),e(Dr,iSr),e(Dr,Y0),e(Y0,dSr),e(Y0,ZTe),e(ZTe,cSr),e(Y0,fSr),e(Dr,mSr),e(Dr,Pt),g(K0,Pt,null),e(Pt,gSr),e(Pt,e8e),e(e8e,hSr),e(Pt,pSr),e(Pt,yf),e(yf,_Sr),e(yf,o8e),e(o8e,uSr),e(yf,bSr),e(yf,oU),e(oU,vSr),e(yf,FSr),e(Pt,TSr),e(Pt,r8e),e(r8e,MSr),e(Pt,ESr),g(Z0,Pt,null),e(Dr,CSr),e(Dr,$o),g(ey,$o,null),e($o,wSr),e($o,t8e),e(t8e,ASr),e($o,ySr),e($o,Nn),e(Nn,LSr),e(Nn,a8e),e(a8e,xSr),e(Nn,kSr),e(Nn,n8e),e(n8e,SSr),e(Nn,RSr),e(Nn,s8e),e(s8e,BSr),e(Nn,PSr),e($o,$Sr),e($o,Pe),e(Pe,h4),e(h4,l8e),e(l8e,ISr),e(h4,qSr),e(h4,rU),e(rU,NSr),e(h4,jSr),e(Pe,DSr),e(Pe,p4),e(p4,i8e),e(i8e,GSr),e(p4,OSr),e(p4,tU),e(tU,VSr),e(p4,XSr),e(Pe,zSr),e(Pe,_4),e(_4,d8e),e(d8e,QSr),e(_4,WSr),e(_4,aU),e(aU,HSr),e(_4,USr),e(Pe,JSr),e(Pe,u4),e(u4,c8e),e(c8e,YSr),e(u4,KSr),e(u4,nU),e(nU,ZSr),e(u4,eRr),e(Pe,oRr),e(Pe,b4),e(b4,f8e),e(f8e,rRr),e(b4,tRr),e(b4,sU),e(sU,aRr),e(b4,nRr),e(Pe,sRr),e(Pe,v4),e(v4,m8e),e(m8e,lRr),e(v4,iRr),e(v4,lU),e(lU,dRr),e(v4,cRr),e(Pe,fRr),e(Pe,F4),e(F4,g8e),e(g8e,mRr),e(F4,gRr),e(F4,iU),e(iU,hRr),e(F4,pRr),e(Pe,_Rr),e(Pe,T4),e(T4,h8e),e(h8e,uRr),e(T4,bRr),e(T4,dU),e(dU,vRr),e(T4,FRr),e($o,TRr),e($o,p8e),e(p8e,MRr),e($o,ERr),g(oy,$o,null),b(c,RPe,u),b(c,Lf,u),e(Lf,M4),e(M4,_8e),g(ry,_8e,null),e(Lf,CRr),e(Lf,u8e),e(u8e,wRr),b(c,BPe,u),b(c,Gr,u),g(ty,Gr,null),e(Gr,ARr),e(Gr,xf),e(xf,yRr),e(xf,cU),e(cU,LRr),e(xf,xRr),e(xf,fU),e(fU,kRr),e(xf,SRr),e(Gr,RRr),e(Gr,ay),e(ay,BRr),e(ay,b8e),e(b8e,PRr),e(ay,$Rr),e(Gr,IRr),e(Gr,$t),g(ny,$t,null),e($t,qRr),e($t,v8e),e(v8e,NRr),e($t,jRr),e($t,kf),e(kf,DRr),e(kf,F8e),e(F8e,GRr),e(kf,ORr),e(kf,mU),e(mU,VRr),e(kf,XRr),e($t,zRr),e($t,T8e),e(T8e,QRr),e($t,WRr),g(sy,$t,null),e(Gr,HRr),e(Gr,Io),g(ly,Io,null),e(Io,URr),e(Io,M8e),e(M8e,JRr),e(Io,YRr),e(Io,jn),e(jn,KRr),e(jn,E8e),e(E8e,ZRr),e(jn,eBr),e(jn,C8e),e(C8e,oBr),e(jn,rBr),e(jn,w8e),e(w8e,tBr),e(jn,aBr),e(Io,nBr),e(Io,A8e),e(A8e,E4),e(E4,y8e),e(y8e,sBr),e(E4,lBr),e(E4,gU),e(gU,iBr),e(E4,dBr),e(Io,cBr),e(Io,L8e),e(L8e,fBr),e(Io,mBr),g(iy,Io,null),b(c,PPe,u),b(c,Sf,u),e(Sf,C4),e(C4,x8e),g(dy,x8e,null),e(Sf,gBr),e(Sf,k8e),e(k8e,hBr),b(c,$Pe,u),b(c,Or,u),g(cy,Or,null),e(Or,pBr),e(Or,Rf),e(Rf,_Br),e(Rf,hU),e(hU,uBr),e(Rf,bBr),e(Rf,pU),e(pU,vBr),e(Rf,FBr),e(Or,TBr),e(Or,fy),e(fy,MBr),e(fy,S8e),e(S8e,EBr),e(fy,CBr),e(Or,wBr),e(Or,It),g(my,It,null),e(It,ABr),e(It,R8e),e(R8e,yBr),e(It,LBr),e(It,Bf),e(Bf,xBr),e(Bf,B8e),e(B8e,kBr),e(Bf,SBr),e(Bf,_U),e(_U,RBr),e(Bf,BBr),e(It,PBr),e(It,P8e),e(P8e,$Br),e(It,IBr),g(gy,It,null),e(Or,qBr),e(Or,qo),g(hy,qo,null),e(qo,NBr),e(qo,$8e),e($8e,jBr),e(qo,DBr),e(qo,Dn),e(Dn,GBr),e(Dn,I8e),e(I8e,OBr),e(Dn,VBr),e(Dn,q8e),e(q8e,XBr),e(Dn,zBr),e(Dn,N8e),e(N8e,QBr),e(Dn,WBr),e(qo,HBr),e(qo,py),e(py,w4),e(w4,j8e),e(j8e,UBr),e(w4,JBr),e(w4,uU),e(uU,YBr),e(w4,KBr),e(py,ZBr),e(py,A4),e(A4,D8e),e(D8e,ePr),e(A4,oPr),e(A4,bU),e(bU,rPr),e(A4,tPr),e(qo,aPr),e(qo,G8e),e(G8e,nPr),e(qo,sPr),g(_y,qo,null),b(c,IPe,u),b(c,Pf,u),e(Pf,y4),e(y4,O8e),g(uy,O8e,null),e(Pf,lPr),e(Pf,V8e),e(V8e,iPr),b(c,qPe,u),b(c,Vr,u),g(by,Vr,null),e(Vr,dPr),e(Vr,$f),e($f,cPr),e($f,vU),e(vU,fPr),e($f,mPr),e($f,FU),e(FU,gPr),e($f,hPr),e(Vr,pPr),e(Vr,vy),e(vy,_Pr),e(vy,X8e),e(X8e,uPr),e(vy,bPr),e(Vr,vPr),e(Vr,qt),g(Fy,qt,null),e(qt,FPr),e(qt,z8e),e(z8e,TPr),e(qt,MPr),e(qt,If),e(If,EPr),e(If,Q8e),e(Q8e,CPr),e(If,wPr),e(If,TU),e(TU,APr),e(If,yPr),e(qt,LPr),e(qt,W8e),e(W8e,xPr),e(qt,kPr),g(Ty,qt,null),e(Vr,SPr),e(Vr,No),g(My,No,null),e(No,RPr),e(No,H8e),e(H8e,BPr),e(No,PPr),e(No,Gn),e(Gn,$Pr),e(Gn,U8e),e(U8e,IPr),e(Gn,qPr),e(Gn,J8e),e(J8e,NPr),e(Gn,jPr),e(Gn,Y8e),e(Y8e,DPr),e(Gn,GPr),e(No,OPr),e(No,K8e),e(K8e,L4),e(L4,Z8e),e(Z8e,VPr),e(L4,XPr),e(L4,MU),e(MU,zPr),e(L4,QPr),e(No,WPr),e(No,e7e),e(e7e,HPr),e(No,UPr),g(Ey,No,null),NPe=!0},p(c,[u]){const Cy={};u&2&&(Cy.$$scope={dirty:u,ctx:c}),Xf.$set(Cy);const o7e={};u&2&&(o7e.$$scope={dirty:u,ctx:c}),Nh.$set(o7e);const r7e={};u&2&&(r7e.$$scope={dirty:u,ctx:c}),Uh.$set(r7e)},i(c){NPe||(h(he.$$.fragment,c),h(Da.$$.fragment,c),h(BE.$$.fragment,c),h(PE.$$.fragment,c),h(Xf.$$.fragment,c),h($E.$$.fragment,c),h(IE.$$.fragment,c),h(jE.$$.fragment,c),h(DE.$$.fragment,c),h(GE.$$.fragment,c),h(OE.$$.fragment,c),h(VE.$$.fragment,c),h(QE.$$.fragment,c),h(WE.$$.fragment,c),h(HE.$$.fragment,c),h(UE.$$.fragment,c),h(JE.$$.fragment,c),h(ZE.$$.fragment,c),h(Nh.$$.fragment,c),h(e5.$$.fragment,c),h(o5.$$.fragment,c),h(r5.$$.fragment,c),h(t5.$$.fragment,c),h(s5.$$.fragment,c),h(Uh.$$.fragment,c),h(l5.$$.fragment,c),h(i5.$$.fragment,c),h(d5.$$.fragment,c),h(c5.$$.fragment,c),h(m5.$$.fragment,c),h(g5.$$.fragment,c),h(h5.$$.fragment,c),h(p5.$$.fragment,c),h(_5.$$.fragment,c),h(u5.$$.fragment,c),h(v5.$$.fragment,c),h(F5.$$.fragment,c),h(T5.$$.fragment,c),h(M5.$$.fragment,c),h(E5.$$.fragment,c),h(C5.$$.fragment,c),h(A5.$$.fragment,c),h(y5.$$.fragment,c),h(L5.$$.fragment,c),h(x5.$$.fragment,c),h(k5.$$.fragment,c),h(S5.$$.fragment,c),h(B5.$$.fragment,c),h(P5.$$.fragment,c),h($5.$$.fragment,c),h(I5.$$.fragment,c),h(q5.$$.fragment,c),h(N5.$$.fragment,c),h(D5.$$.fragment,c),h(G5.$$.fragment,c),h(O5.$$.fragment,c),h(V5.$$.fragment,c),h(X5.$$.fragment,c),h(z5.$$.fragment,c),h(W5.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(J5.$$.fragment,c),h(Y5.$$.fragment,c),h(K5.$$.fragment,c),h(e3.$$.fragment,c),h(o3.$$.fragment,c),h(r3.$$.fragment,c),h(t3.$$.fragment,c),h(a3.$$.fragment,c),h(n3.$$.fragment,c),h(l3.$$.fragment,c),h(i3.$$.fragment,c),h(d3.$$.fragment,c),h(c3.$$.fragment,c),h(f3.$$.fragment,c),h(m3.$$.fragment,c),h(h3.$$.fragment,c),h(p3.$$.fragment,c),h(_3.$$.fragment,c),h(u3.$$.fragment,c),h(b3.$$.fragment,c),h(v3.$$.fragment,c),h(T3.$$.fragment,c),h(M3.$$.fragment,c),h(E3.$$.fragment,c),h(C3.$$.fragment,c),h(w3.$$.fragment,c),h(A3.$$.fragment,c),h(L3.$$.fragment,c),h(x3.$$.fragment,c),h(k3.$$.fragment,c),h(S3.$$.fragment,c),h(R3.$$.fragment,c),h(B3.$$.fragment,c),h($3.$$.fragment,c),h(I3.$$.fragment,c),h(q3.$$.fragment,c),h(N3.$$.fragment,c),h(j3.$$.fragment,c),h(D3.$$.fragment,c),h(O3.$$.fragment,c),h(V3.$$.fragment,c),h(X3.$$.fragment,c),h(z3.$$.fragment,c),h(Q3.$$.fragment,c),h(W3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(Z3.$$.fragment,c),h(eC.$$.fragment,c),h(rC.$$.fragment,c),h(tC.$$.fragment,c),h(aC.$$.fragment,c),h(nC.$$.fragment,c),h(sC.$$.fragment,c),h(lC.$$.fragment,c),h(dC.$$.fragment,c),h(cC.$$.fragment,c),h(fC.$$.fragment,c),h(mC.$$.fragment,c),h(gC.$$.fragment,c),h(hC.$$.fragment,c),h(_C.$$.fragment,c),h(uC.$$.fragment,c),h(bC.$$.fragment,c),h(FC.$$.fragment,c),h(TC.$$.fragment,c),h(MC.$$.fragment,c),h(CC.$$.fragment,c),h(wC.$$.fragment,c),h(AC.$$.fragment,c),h(yC.$$.fragment,c),h(LC.$$.fragment,c),h(xC.$$.fragment,c),h(SC.$$.fragment,c),h(RC.$$.fragment,c),h(BC.$$.fragment,c),h(PC.$$.fragment,c),h($C.$$.fragment,c),h(IC.$$.fragment,c),h(NC.$$.fragment,c),h(jC.$$.fragment,c),h(DC.$$.fragment,c),h(GC.$$.fragment,c),h(OC.$$.fragment,c),h(VC.$$.fragment,c),h(zC.$$.fragment,c),h(QC.$$.fragment,c),h(WC.$$.fragment,c),h(HC.$$.fragment,c),h(UC.$$.fragment,c),h(JC.$$.fragment,c),h(KC.$$.fragment,c),h(ZC.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(vw.$$.fragment,c),h(Fw.$$.fragment,c),h(Tw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(FA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(F0.$$.fragment,c),h(T0.$$.fragment,c),h(M0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(Fy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),NPe=!0)},o(c){p(he.$$.fragment,c),p(Da.$$.fragment,c),p(BE.$$.fragment,c),p(PE.$$.fragment,c),p(Xf.$$.fragment,c),p($E.$$.fragment,c),p(IE.$$.fragment,c),p(jE.$$.fragment,c),p(DE.$$.fragment,c),p(GE.$$.fragment,c),p(OE.$$.fragment,c),p(VE.$$.fragment,c),p(QE.$$.fragment,c),p(WE.$$.fragment,c),p(HE.$$.fragment,c),p(UE.$$.fragment,c),p(JE.$$.fragment,c),p(ZE.$$.fragment,c),p(Nh.$$.fragment,c),p(e5.$$.fragment,c),p(o5.$$.fragment,c),p(r5.$$.fragment,c),p(t5.$$.fragment,c),p(s5.$$.fragment,c),p(Uh.$$.fragment,c),p(l5.$$.fragment,c),p(i5.$$.fragment,c),p(d5.$$.fragment,c),p(c5.$$.fragment,c),p(m5.$$.fragment,c),p(g5.$$.fragment,c),p(h5.$$.fragment,c),p(p5.$$.fragment,c),p(_5.$$.fragment,c),p(u5.$$.fragment,c),p(v5.$$.fragment,c),p(F5.$$.fragment,c),p(T5.$$.fragment,c),p(M5.$$.fragment,c),p(E5.$$.fragment,c),p(C5.$$.fragment,c),p(A5.$$.fragment,c),p(y5.$$.fragment,c),p(L5.$$.fragment,c),p(x5.$$.fragment,c),p(k5.$$.fragment,c),p(S5.$$.fragment,c),p(B5.$$.fragment,c),p(P5.$$.fragment,c),p($5.$$.fragment,c),p(I5.$$.fragment,c),p(q5.$$.fragment,c),p(N5.$$.fragment,c),p(D5.$$.fragment,c),p(G5.$$.fragment,c),p(O5.$$.fragment,c),p(V5.$$.fragment,c),p(X5.$$.fragment,c),p(z5.$$.fragment,c),p(W5.$$.fragment,c),p(H5.$$.fragment,c),p(U5.$$.fragment,c),p(J5.$$.fragment,c),p(Y5.$$.fragment,c),p(K5.$$.fragment,c),p(e3.$$.fragment,c),p(o3.$$.fragment,c),p(r3.$$.fragment,c),p(t3.$$.fragment,c),p(a3.$$.fragment,c),p(n3.$$.fragment,c),p(l3.$$.fragment,c),p(i3.$$.fragment,c),p(d3.$$.fragment,c),p(c3.$$.fragment,c),p(f3.$$.fragment,c),p(m3.$$.fragment,c),p(h3.$$.fragment,c),p(p3.$$.fragment,c),p(_3.$$.fragment,c),p(u3.$$.fragment,c),p(b3.$$.fragment,c),p(v3.$$.fragment,c),p(T3.$$.fragment,c),p(M3.$$.fragment,c),p(E3.$$.fragment,c),p(C3.$$.fragment,c),p(w3.$$.fragment,c),p(A3.$$.fragment,c),p(L3.$$.fragment,c),p(x3.$$.fragment,c),p(k3.$$.fragment,c),p(S3.$$.fragment,c),p(R3.$$.fragment,c),p(B3.$$.fragment,c),p($3.$$.fragment,c),p(I3.$$.fragment,c),p(q3.$$.fragment,c),p(N3.$$.fragment,c),p(j3.$$.fragment,c),p(D3.$$.fragment,c),p(O3.$$.fragment,c),p(V3.$$.fragment,c),p(X3.$$.fragment,c),p(z3.$$.fragment,c),p(Q3.$$.fragment,c),p(W3.$$.fragment,c),p(U3.$$.fragment,c),p(J3.$$.fragment,c),p(Y3.$$.fragment,c),p(K3.$$.fragment,c),p(Z3.$$.fragment,c),p(eC.$$.fragment,c),p(rC.$$.fragment,c),p(tC.$$.fragment,c),p(aC.$$.fragment,c),p(nC.$$.fragment,c),p(sC.$$.fragment,c),p(lC.$$.fragment,c),p(dC.$$.fragment,c),p(cC.$$.fragment,c),p(fC.$$.fragment,c),p(mC.$$.fragment,c),p(gC.$$.fragment,c),p(hC.$$.fragment,c),p(_C.$$.fragment,c),p(uC.$$.fragment,c),p(bC.$$.fragment,c),p(FC.$$.fragment,c),p(TC.$$.fragment,c),p(MC.$$.fragment,c),p(CC.$$.fragment,c),p(wC.$$.fragment,c),p(AC.$$.fragment,c),p(yC.$$.fragment,c),p(LC.$$.fragment,c),p(xC.$$.fragment,c),p(SC.$$.fragment,c),p(RC.$$.fragment,c),p(BC.$$.fragment,c),p(PC.$$.fragment,c),p($C.$$.fragment,c),p(IC.$$.fragment,c),p(NC.$$.fragment,c),p(jC.$$.fragment,c),p(DC.$$.fragment,c),p(GC.$$.fragment,c),p(OC.$$.fragment,c),p(VC.$$.fragment,c),p(zC.$$.fragment,c),p(QC.$$.fragment,c),p(WC.$$.fragment,c),p(HC.$$.fragment,c),p(UC.$$.fragment,c),p(JC.$$.fragment,c),p(KC.$$.fragment,c),p(ZC.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(vw.$$.fragment,c),p(Fw.$$.fragment,c),p(Tw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(Aw.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(qw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(FA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(CA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(v0.$$.fragment,c),p(F0.$$.fragment,c),p(T0.$$.fragment,c),p(M0.$$.fragment,c),p(C0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(y0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(B0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(Fy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),NPe=!1},d(c){t(Z),c&&t(io),c&&t(ce),_(he),c&&t(jf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(Gf),_(Da,c),c&&t(fo),c&&t(ue),c&&t(zo),c&&t(Ga),c&&t(qRe),c&&t(Qi),_(BE),c&&t(NRe),c&&t(Qn),c&&t(jRe),_(PE,c),c&&t(DRe),c&&t(LL),c&&t(GRe),_(Xf,c),c&&t(ORe),c&&t(Wi),_($E),c&&t(VRe),c&&t(Qo),_(IE),_(jE),_(DE),_(GE),c&&t(XRe),c&&t(Ui),_(OE),c&&t(zRe),c&&t(Wo),_(VE),_(QE),_(WE),_(HE),c&&t(QRe),c&&t(Ji),_(UE),c&&t(WRe),c&&t(Ho),_(JE),_(ZE),_(Nh),_(e5),_(o5),c&&t(HRe),c&&t(Yi),_(r5),c&&t(URe),c&&t(Uo),_(t5),_(s5),_(Uh),_(l5),_(i5),c&&t(JRe),c&&t(Zi),_(d5),c&&t(YRe),c&&t(Jo),_(c5),_(m5),_(g5),_(h5),_(p5),c&&t(KRe),c&&t(rd),_(_5),c&&t(ZRe),c&&t(Yo),_(u5),_(v5),_(F5),_(T5),_(M5),c&&t(eBe),c&&t(nd),_(E5),c&&t(oBe),c&&t(Ko),_(C5),_(A5),_(y5),_(L5),_(x5),c&&t(rBe),c&&t(id),_(k5),c&&t(tBe),c&&t(Zo),_(S5),_(B5),_(P5),_($5),_(I5),c&&t(aBe),c&&t(fd),_(q5),c&&t(nBe),c&&t(er),_(N5),_(D5),_(G5),_(O5),_(V5),c&&t(sBe),c&&t(hd),_(X5),c&&t(lBe),c&&t(or),_(z5),_(W5),_(H5),_(U5),_(J5),c&&t(iBe),c&&t(ud),_(Y5),c&&t(dBe),c&&t(rr),_(K5),_(e3),_(o3),_(r3),_(t3),c&&t(cBe),c&&t(Fd),_(a3),c&&t(fBe),c&&t(tr),_(n3),_(l3),_(i3),_(d3),_(c3),c&&t(mBe),c&&t(Ed),_(f3),c&&t(gBe),c&&t(ar),_(m3),_(h3),_(p3),_(_3),_(u3),c&&t(hBe),c&&t(Ad),_(b3),c&&t(pBe),c&&t(nr),_(v3),_(T3),_(M3),_(E3),_(C3),c&&t(_Be),c&&t(xd),_(w3),c&&t(uBe),c&&t(sr),_(A3),_(L3),_(x3),_(k3),_(S3),c&&t(bBe),c&&t(Rd),_(R3),c&&t(vBe),c&&t(lr),_(B3),_($3),_(I3),_(q3),_(N3),c&&t(FBe),c&&t($d),_(j3),c&&t(TBe),c&&t(ir),_(D3),_(O3),_(V3),_(X3),_(z3),c&&t(MBe),c&&t(Nd),_(Q3),c&&t(EBe),c&&t(dr),_(W3),_(U3),_(J3),_(Y3),_(K3),c&&t(CBe),c&&t(Gd),_(Z3),c&&t(wBe),c&&t(cr),_(eC),_(rC),_(tC),_(aC),_(nC),c&&t(ABe),c&&t(Xd),_(sC),c&&t(yBe),c&&t(fr),_(lC),_(dC),_(cC),_(fC),_(mC),c&&t(LBe),c&&t(Wd),_(gC),c&&t(xBe),c&&t(mr),_(hC),_(_C),_(uC),_(bC),_(FC),c&&t(kBe),c&&t(Jd),_(TC),c&&t(SBe),c&&t(gr),_(MC),_(CC),_(wC),_(AC),_(yC),c&&t(RBe),c&&t(Zd),_(LC),c&&t(BBe),c&&t(hr),_(xC),_(SC),_(RC),_(BC),_(PC),c&&t(PBe),c&&t(tc),_($C),c&&t($Be),c&&t(pr),_(IC),_(NC),_(jC),_(DC),_(GC),c&&t(IBe),c&&t(sc),_(OC),c&&t(qBe),c&&t(_r),_(VC),_(zC),_(QC),_(WC),_(HC),c&&t(NBe),c&&t(dc),_(UC),c&&t(jBe),c&&t(ur),_(JC),_(KC),_(ZC),_(ew),_(ow),c&&t(DBe),c&&t(mc),_(rw),c&&t(GBe),c&&t(br),_(tw),_(nw),_(sw),_(lw),_(iw),c&&t(OBe),c&&t(pc),_(dw),c&&t(VBe),c&&t(vr),_(cw),_(mw),_(gw),_(hw),_(pw),c&&t(XBe),c&&t(bc),_(_w),c&&t(zBe),c&&t(Fr),_(uw),_(vw),_(Fw),_(Tw),_(Mw),c&&t(QBe),c&&t(Tc),_(Ew),c&&t(WBe),c&&t(Tr),_(Cw),_(Aw),_(yw),_(Lw),_(xw),c&&t(HBe),c&&t(Cc),_(kw),c&&t(UBe),c&&t(Mr),_(Sw),_(Bw),_(Pw),_($w),_(qw),c&&t(JBe),c&&t(yc),_(Nw),c&&t(YBe),c&&t(Er),_(jw),_(Gw),_(Ow),_(Vw),_(Xw),c&&t(KBe),c&&t(kc),_(zw),c&&t(ZBe),c&&t(Cr),_(Qw),_(Hw),_(Uw),_(Jw),_(Yw),c&&t(ePe),c&&t(Bc),_(Kw),c&&t(oPe),c&&t(wr),_(Zw),_(oA),_(rA),_(tA),_(aA),c&&t(rPe),c&&t(Ic),_(nA),c&&t(tPe),c&&t(Ar),_(sA),_(iA),_(dA),_(cA),_(fA),c&&t(aPe),c&&t(jc),_(mA),c&&t(nPe),c&&t(yr),_(gA),_(pA),_(_A),_(uA),_(bA),c&&t(sPe),c&&t(Oc),_(vA),c&&t(lPe),c&&t(Lr),_(FA),_(MA),_(EA),_(CA),_(wA),c&&t(iPe),c&&t(zc),_(AA),c&&t(dPe),c&&t(xr),_(yA),_(xA),_(kA),_(SA),_(RA),c&&t(cPe),c&&t(Hc),_(BA),c&&t(fPe),c&&t(kr),_(PA),_(IA),_(qA),_(NA),_(jA),c&&t(mPe),c&&t(Yc),_(DA),c&&t(gPe),c&&t(Sr),_(GA),_(VA),_(XA),_(zA),_(QA),c&&t(hPe),c&&t(ef),_(WA),c&&t(pPe),c&&t(Rr),_(HA),_(JA),_(YA),_(KA),_(ZA),c&&t(_Pe),c&&t(tf),_(e0),c&&t(uPe),c&&t(Br),_(o0),_(t0),_(a0),_(n0),_(s0),c&&t(bPe),c&&t(sf),_(l0),c&&t(vPe),c&&t(Pr),_(i0),_(c0),_(f0),_(m0),_(g0),c&&t(FPe),c&&t(cf),_(h0),c&&t(TPe),c&&t($r),_(p0),_(u0),_(b0),_(v0),_(F0),c&&t(MPe),c&&t(gf),_(T0),c&&t(EPe),c&&t(Ir),_(M0),_(C0),_(w0),_(A0),_(y0),c&&t(CPe),c&&t(_f),_(L0),c&&t(wPe),c&&t(qr),_(x0),_(S0),_(R0),_(B0),_(P0),c&&t(APe),c&&t(vf),_($0),c&&t(yPe),c&&t(Nr),_(I0),_(N0),_(j0),_(D0),_(G0),c&&t(LPe),c&&t(Mf),_(O0),c&&t(xPe),c&&t(jr),_(V0),_(z0),_(Q0),_(W0),_(H0),c&&t(kPe),c&&t(wf),_(U0),c&&t(SPe),c&&t(Dr),_(J0),_(K0),_(Z0),_(ey),_(oy),c&&t(RPe),c&&t(Lf),_(ry),c&&t(BPe),c&&t(Gr),_(ty),_(ny),_(sy),_(ly),_(iy),c&&t(PPe),c&&t(Sf),_(dy),c&&t($Pe),c&&t(Or),_(cy),_(my),_(gy),_(hy),_(_y),c&&t(IPe),c&&t(Pf),_(uy),c&&t(qPe),c&&t(Vr),_(by),_(Fy),_(Ty),_(My),_(Ey)}}}const H5t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function U5t(Nf){return V5t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class o3t extends j5t{constructor(Z){super();D5t(this,Z,U5t,W5t,G5t,{})}}export{o3t as default,H5t as metadata};
