import{S as is,i as ps,s as fs,e as o,k as m,w as y,t as p,M as cs,c as n,d as e,m as h,a as l,x as b,h as f,b as u,F as t,g as i,y as k,q as j,o as E,B as T}from"../chunks/vendor-6b77c823.js";import{T as xa}from"../chunks/Tip-39098574.js";import{Y as qa}from"../chunks/Youtube-5c6e11e6.js";import{I as Lt}from"../chunks/IconCopyLink-7a11ce68.js";import{C as J}from"../chunks/CodeBlock-3a8b25a8.js";import{D as ms}from"../chunks/DocNotebookDropdown-b2654249.js";import{F as ls,M as za}from"../chunks/Markdown-4489c441.js";function hs(Se){let g,A;return{c(){g=o("p"),A=p(`You will see a warning about some of the pretrained weights not being used and some weights being randomly
initialized. Don\u2019t worry, this is completely normal! The pretrained head of the BERT model is discarded, and replaced with a randomly initialized classification head. You will fine-tune this new model head on your sequence classification task, transferring the knowledge of the pretrained model to it.`)},l(d){g=n(d,"P",{});var w=l(g);A=f(w,`You will see a warning about some of the pretrained weights not being used and some weights being randomly
initialized. Don\u2019t worry, this is completely normal! The pretrained head of the BERT model is discarded, and replaced with a randomly initialized classification head. You will fine-tune this new model head on your sequence classification task, transferring the knowledge of the pretrained model to it.`),w.forEach(e)},m(d,w){i(d,g,w),t(g,A)},d(d){d&&e(g)}}}function us(Se){let g,A,d,w,q,N,X,x,D,I,S,Z,Q,Oe,Be,M,Fe,le,G,te,ge,Ae,ae,Ze,ie,Qe,U,lt,F,L,V,O,it,He,pe,pt,xt,Pe,_e,yt,Ne,B,Ve,z,H,fe,ce,Ye,qe,$e,et,C,ve,xe,Y,se,we,Ie,W,ye,tt,bt,re,me,We,c,P,K,oe,ze,be,R,ft,Le,ke,ee,je,Re,Ge,ne,Ce,kt,Me,he,Ue,ue,ct,at,Rt,zt,mt,Ee,Te,Ke,de,Mt,ht,Gt,st,Ct,ut,dt,rt,jt,Ft,Et,Tt,At,gt,Je,_t,$t,Ut,vt,ot,s,_;return g=new qa({props:{id:"nvBXf7s7vTI"}}),le=new J({props:{code:`from transformers import AutoModelForSequenceClassification

model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", num_labels=5)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, num_labels=<span class="hljs-number">5</span>)`}}),te=new xa({props:{$$slots:{default:[hs]},$$scope:{ctx:Se}}}),ie=new Lt({}),B=new J({props:{code:`from transformers import TrainingArguments

training_args = TrainingArguments(output_dir="test_trainer")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TrainingArguments

<span class="hljs-meta">&gt;&gt;&gt; </span>training_args = TrainingArguments(output_dir=<span class="hljs-string">&quot;test_trainer&quot;</span>)`}}),ce=new Lt({}),ze=new J({props:{code:`import numpy as np
from datasets import load_metric

metric = load_metric("accuracy")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric

<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)`}}),he=new J({props:{code:`def compute_metrics(eval_pred):
    logits, labels = eval_pred
    predictions = np.argmax(logits, axis=-1)
    return metric.compute(predictions=predictions, references=labels)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_metrics</span>(<span class="hljs-params">eval_pred</span>):
<span class="hljs-meta">... </span>    logits, labels = eval_pred
<span class="hljs-meta">... </span>    predictions = np.argmax(logits, axis=-<span class="hljs-number">1</span>)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> metric.compute(predictions=predictions, references=labels)`}}),Ee=new J({props:{code:`from transformers import TrainingArguments

training_args = TrainingArguments(output_dir="test_trainer", evaluation_strategy="epoch")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TrainingArguments

<span class="hljs-meta">&gt;&gt;&gt; </span>training_args = TrainingArguments(output_dir=<span class="hljs-string">&quot;test_trainer&quot;</span>, evaluation_strategy=<span class="hljs-string">&quot;epoch&quot;</span>)`}}),ht=new Lt({}),At=new J({props:{code:`trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=small_train_dataset,
    eval_dataset=small_eval_dataset,
    compute_metrics=compute_metrics,
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>trainer = Trainer(
<span class="hljs-meta">... </span>    model=model,
<span class="hljs-meta">... </span>    args=training_args,
<span class="hljs-meta">... </span>    train_dataset=small_train_dataset,
<span class="hljs-meta">... </span>    eval_dataset=small_eval_dataset,
<span class="hljs-meta">... </span>    compute_metrics=compute_metrics,
<span class="hljs-meta">... </span>)`}}),s=new J({props:{code:"trainer.train()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>trainer.train()'}}),{c(){y(g.$$.fragment),A=m(),d=o("p"),w=p("\u{1F917} Transformers provides a "),q=o("a"),N=p("Trainer"),X=p(" class optimized for training \u{1F917} Transformers models, making it easier to start training without manually writing your own training loop. The "),x=o("a"),D=p("Trainer"),I=p(" API supports a wide range of training options and features such as logging, gradient accumulation, and mixed precision."),S=m(),Z=o("p"),Q=p("Start by loading your model and specify the number of expected labels. From the Yelp Review "),Oe=o("a"),Be=p("dataset card"),M=p(", you know there are five labels:"),Fe=m(),y(le.$$.fragment),G=m(),y(te.$$.fragment),ge=m(),Ae=o("h3"),ae=o("a"),Ze=o("span"),y(ie.$$.fragment),Qe=m(),U=o("span"),lt=p("Training hyperparameters"),F=m(),L=o("p"),V=p("Next, create a "),O=o("a"),it=p("TrainingArguments"),He=p(" class which contains all the hyperparameters you can tune as well as flags for activating different training options. For this tutorial you can start with the default training "),pe=o("a"),pt=p("hyperparameters"),xt=p(", but feel free to experiment with these to find your optimal settings."),Pe=m(),_e=o("p"),yt=p("Specify where to save the checkpoints from your training:"),Ne=m(),y(B.$$.fragment),Ve=m(),z=o("h3"),H=o("a"),fe=o("span"),y(ce.$$.fragment),Ye=m(),qe=o("span"),$e=p("Metrics"),et=m(),C=o("p"),ve=o("a"),xe=p("Trainer"),Y=p(" does not automatically evaluate model performance during training. You will need to pass "),se=o("a"),we=p("Trainer"),Ie=p(" a function to compute and report metrics. The \u{1F917} Datasets library provides a simple "),W=o("a"),ye=o("code"),tt=p("accuracy"),bt=p(" function you can load with the "),re=o("code"),me=p("load_metric"),We=p(" (see this "),c=o("a"),P=p("tutorial"),K=p(" for more information) function:"),oe=m(),y(ze.$$.fragment),be=m(),R=o("p"),ft=p("Call "),Le=o("code"),ke=p("compute"),ee=p(" on "),je=o("code"),Re=p("metric"),Ge=p(" to calculate the accuracy of your predictions. Before passing your predictions to "),ne=o("code"),Ce=p("compute"),kt=p(", you need to convert the predictions to logits (remember all \u{1F917} Transformers models return logits):"),Me=m(),y(he.$$.fragment),Ue=m(),ue=o("p"),ct=p("If you\u2019d like to monitor your evaluation metrics during fine-tuning, specify the "),at=o("code"),Rt=p("evaluation_strategy"),zt=p(" parameter in your training arguments to report the evaluation metric at the end of each epoch:"),mt=m(),y(Ee.$$.fragment),Te=m(),Ke=o("h3"),de=o("a"),Mt=o("span"),y(ht.$$.fragment),Gt=m(),st=o("span"),Ct=p("Trainer"),ut=m(),dt=o("p"),rt=p("Create a "),jt=o("a"),Ft=p("Trainer"),Et=p(" object with your model, training arguments, training and test datasets, and evaluation function:"),Tt=m(),y(At.$$.fragment),gt=m(),Je=o("p"),_t=p("Then fine-tune your model by calling "),$t=o("a"),Ut=p("train()"),vt=p(":"),ot=m(),y(s.$$.fragment),this.h()},l(r){b(g.$$.fragment,r),A=h(r),d=n(r,"P",{});var v=l(d);w=f(v,"\u{1F917} Transformers provides a "),q=n(v,"A",{href:!0});var Kt=l(q);N=f(Kt,"Trainer"),Kt.forEach(e),X=f(v," class optimized for training \u{1F917} Transformers models, making it easier to start training without manually writing your own training loop. The "),x=n(v,"A",{href:!0});var ta=l(x);D=f(ta,"Trainer"),ta.forEach(e),I=f(v," API supports a wide range of training options and features such as logging, gradient accumulation, and mixed precision."),v.forEach(e),S=h(r),Z=n(r,"P",{});var Pt=l(Z);Q=f(Pt,"Start by loading your model and specify the number of expected labels. From the Yelp Review "),Oe=n(Pt,"A",{href:!0,rel:!0});var Ot=l(Oe);Be=f(Ot,"dataset card"),Ot.forEach(e),M=f(Pt,", you know there are five labels:"),Pt.forEach(e),Fe=h(r),b(le.$$.fragment,r),G=h(r),b(te.$$.fragment,r),ge=h(r),Ae=n(r,"H3",{class:!0});var wt=l(Ae);ae=n(wt,"A",{id:!0,class:!0,href:!0});var la=l(ae);Ze=n(la,"SPAN",{});var ia=l(Ze);b(ie.$$.fragment,ia),ia.forEach(e),la.forEach(e),Qe=h(wt),U=n(wt,"SPAN",{});var aa=l(U);lt=f(aa,"Training hyperparameters"),aa.forEach(e),wt.forEach(e),F=h(r),L=n(r,"P",{});var Xe=l(L);V=f(Xe,"Next, create a "),O=n(Xe,"A",{href:!0});var sa=l(O);it=f(sa,"TrainingArguments"),sa.forEach(e),He=f(Xe," class which contains all the hyperparameters you can tune as well as flags for activating different training options. For this tutorial you can start with the default training "),pe=n(Xe,"A",{href:!0,rel:!0});var Dt=l(pe);pt=f(Dt,"hyperparameters"),Dt.forEach(e),xt=f(Xe,", but feel free to experiment with these to find your optimal settings."),Xe.forEach(e),Pe=h(r),_e=n(r,"P",{});var Nt=l(_e);yt=f(Nt,"Specify where to save the checkpoints from your training:"),Nt.forEach(e),Ne=h(r),b(B.$$.fragment,r),Ve=h(r),z=n(r,"H3",{class:!0});var Bt=l(z);H=n(Bt,"A",{id:!0,class:!0,href:!0});var St=l(H);fe=n(St,"SPAN",{});var pa=l(fe);b(ce.$$.fragment,pa),pa.forEach(e),St.forEach(e),Ye=h(Bt),qe=n(Bt,"SPAN",{});var Ht=l(qe);$e=f(Ht,"Metrics"),Ht.forEach(e),Bt.forEach(e),et=h(r),C=n(r,"P",{});var nt=l(C);ve=n(nt,"A",{href:!0});var ra=l(ve);xe=f(ra,"Trainer"),ra.forEach(e),Y=f(nt," does not automatically evaluate model performance during training. You will need to pass "),se=n(nt,"A",{href:!0});var qt=l(se);we=f(qt,"Trainer"),qt.forEach(e),Ie=f(nt," a function to compute and report metrics. The \u{1F917} Datasets library provides a simple "),W=n(nt,"A",{href:!0,rel:!0});var Qt=l(W);ye=n(Qt,"CODE",{});var Jt=l(ye);tt=f(Jt,"accuracy"),Jt.forEach(e),Qt.forEach(e),bt=f(nt," function you can load with the "),re=n(nt,"CODE",{});var fa=l(re);me=f(fa,"load_metric"),fa.forEach(e),We=f(nt," (see this "),c=n(nt,"A",{href:!0,rel:!0});var ca=l(c);P=f(ca,"tutorial"),ca.forEach(e),K=f(nt," for more information) function:"),nt.forEach(e),oe=h(r),b(ze.$$.fragment,r),be=h(r),R=n(r,"P",{});var De=l(R);ft=f(De,"Call "),Le=n(De,"CODE",{});var Vt=l(Le);ke=f(Vt,"compute"),Vt.forEach(e),ee=f(De," on "),je=n(De,"CODE",{});var ma=l(je);Re=f(ma,"metric"),ma.forEach(e),Ge=f(De," to calculate the accuracy of your predictions. Before passing your predictions to "),ne=n(De,"CODE",{});var ha=l(ne);Ce=f(ha,"compute"),ha.forEach(e),kt=f(De,", you need to convert the predictions to logits (remember all \u{1F917} Transformers models return logits):"),De.forEach(e),Me=h(r),b(he.$$.fragment,r),Ue=h(r),ue=n(r,"P",{});var It=l(ue);ct=f(It,"If you\u2019d like to monitor your evaluation metrics during fine-tuning, specify the "),at=n(It,"CODE",{});var Yt=l(at);Rt=f(Yt,"evaluation_strategy"),Yt.forEach(e),zt=f(It," parameter in your training arguments to report the evaluation metric at the end of each epoch:"),It.forEach(e),mt=h(r),b(Ee.$$.fragment,r),Te=h(r),Ke=n(r,"H3",{class:!0});var Xt=l(Ke);de=n(Xt,"A",{id:!0,class:!0,href:!0});var a=l(de);Mt=n(a,"SPAN",{});var $=l(Mt);b(ht.$$.fragment,$),$.forEach(e),a.forEach(e),Gt=h(Xt),st=n(Xt,"SPAN",{});var Wt=l(st);Ct=f(Wt,"Trainer"),Wt.forEach(e),Xt.forEach(e),ut=h(r),dt=n(r,"P",{});var oa=l(dt);rt=f(oa,"Create a "),jt=n(oa,"A",{href:!0});var ea=l(jt);Ft=f(ea,"Trainer"),ea.forEach(e),Et=f(oa," object with your model, training arguments, training and test datasets, and evaluation function:"),oa.forEach(e),Tt=h(r),b(At.$$.fragment,r),gt=h(r),Je=n(r,"P",{});var na=l(Je);_t=f(na,"Then fine-tune your model by calling "),$t=n(na,"A",{href:!0});var Zt=l($t);Ut=f(Zt,"train()"),Zt.forEach(e),vt=f(na,":"),na.forEach(e),ot=h(r),b(s.$$.fragment,r),this.h()},h(){u(q,"href","/docs/transformers/pr_16350/en/main_classes/trainer#transformers.Trainer"),u(x,"href","/docs/transformers/pr_16350/en/main_classes/trainer#transformers.Trainer"),u(Oe,"href","https://huggingface.co/datasets/yelp_review_full#data-fields"),u(Oe,"rel","nofollow"),u(ae,"id","training-hyperparameters"),u(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ae,"href","#training-hyperparameters"),u(Ae,"class","relative group"),u(O,"href","/docs/transformers/pr_16350/en/main_classes/trainer#transformers.TrainingArguments"),u(pe,"href","https://huggingface.co/docs/transformers/main_classes/trainer#transformers.TrainingArguments"),u(pe,"rel","nofollow"),u(H,"id","metrics"),u(H,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(H,"href","#metrics"),u(z,"class","relative group"),u(ve,"href","/docs/transformers/pr_16350/en/main_classes/trainer#transformers.Trainer"),u(se,"href","/docs/transformers/pr_16350/en/main_classes/trainer#transformers.Trainer"),u(W,"href","https://huggingface.co/metrics/accuracy"),u(W,"rel","nofollow"),u(c,"href","https://huggingface.co/docs/datasets/metrics.html"),u(c,"rel","nofollow"),u(de,"id","trainer"),u(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(de,"href","#trainer"),u(Ke,"class","relative group"),u(jt,"href","/docs/transformers/pr_16350/en/main_classes/trainer#transformers.Trainer"),u($t,"href","/docs/transformers/pr_16350/en/main_classes/trainer#transformers.Trainer.train")},m(r,v){k(g,r,v),i(r,A,v),i(r,d,v),t(d,w),t(d,q),t(q,N),t(d,X),t(d,x),t(x,D),t(d,I),i(r,S,v),i(r,Z,v),t(Z,Q),t(Z,Oe),t(Oe,Be),t(Z,M),i(r,Fe,v),k(le,r,v),i(r,G,v),k(te,r,v),i(r,ge,v),i(r,Ae,v),t(Ae,ae),t(ae,Ze),k(ie,Ze,null),t(Ae,Qe),t(Ae,U),t(U,lt),i(r,F,v),i(r,L,v),t(L,V),t(L,O),t(O,it),t(L,He),t(L,pe),t(pe,pt),t(L,xt),i(r,Pe,v),i(r,_e,v),t(_e,yt),i(r,Ne,v),k(B,r,v),i(r,Ve,v),i(r,z,v),t(z,H),t(H,fe),k(ce,fe,null),t(z,Ye),t(z,qe),t(qe,$e),i(r,et,v),i(r,C,v),t(C,ve),t(ve,xe),t(C,Y),t(C,se),t(se,we),t(C,Ie),t(C,W),t(W,ye),t(ye,tt),t(C,bt),t(C,re),t(re,me),t(C,We),t(C,c),t(c,P),t(C,K),i(r,oe,v),k(ze,r,v),i(r,be,v),i(r,R,v),t(R,ft),t(R,Le),t(Le,ke),t(R,ee),t(R,je),t(je,Re),t(R,Ge),t(R,ne),t(ne,Ce),t(R,kt),i(r,Me,v),k(he,r,v),i(r,Ue,v),i(r,ue,v),t(ue,ct),t(ue,at),t(at,Rt),t(ue,zt),i(r,mt,v),k(Ee,r,v),i(r,Te,v),i(r,Ke,v),t(Ke,de),t(de,Mt),k(ht,Mt,null),t(Ke,Gt),t(Ke,st),t(st,Ct),i(r,ut,v),i(r,dt,v),t(dt,rt),t(dt,jt),t(jt,Ft),t(dt,Et),i(r,Tt,v),k(At,r,v),i(r,gt,v),i(r,Je,v),t(Je,_t),t(Je,$t),t($t,Ut),t(Je,vt),i(r,ot,v),k(s,r,v),_=!0},p(r,v){const Kt={};v&2&&(Kt.$$scope={dirty:v,ctx:r}),te.$set(Kt)},i(r){_||(j(g.$$.fragment,r),j(le.$$.fragment,r),j(te.$$.fragment,r),j(ie.$$.fragment,r),j(B.$$.fragment,r),j(ce.$$.fragment,r),j(ze.$$.fragment,r),j(he.$$.fragment,r),j(Ee.$$.fragment,r),j(ht.$$.fragment,r),j(At.$$.fragment,r),j(s.$$.fragment,r),_=!0)},o(r){E(g.$$.fragment,r),E(le.$$.fragment,r),E(te.$$.fragment,r),E(ie.$$.fragment,r),E(B.$$.fragment,r),E(ce.$$.fragment,r),E(ze.$$.fragment,r),E(he.$$.fragment,r),E(Ee.$$.fragment,r),E(ht.$$.fragment,r),E(At.$$.fragment,r),E(s.$$.fragment,r),_=!1},d(r){T(g,r),r&&e(A),r&&e(d),r&&e(S),r&&e(Z),r&&e(Fe),T(le,r),r&&e(G),T(te,r),r&&e(ge),r&&e(Ae),T(ie),r&&e(F),r&&e(L),r&&e(Pe),r&&e(_e),r&&e(Ne),T(B,r),r&&e(Ve),r&&e(z),T(ce),r&&e(et),r&&e(C),r&&e(oe),T(ze,r),r&&e(be),r&&e(R),r&&e(Me),T(he,r),r&&e(Ue),r&&e(ue),r&&e(mt),T(Ee,r),r&&e(Te),r&&e(Ke),T(ht),r&&e(ut),r&&e(dt),r&&e(Tt),T(At,r),r&&e(gt),r&&e(Je),r&&e(ot),T(s,r)}}}function ds(Se){let g,A;return g=new za({props:{$$slots:{default:[us]},$$scope:{ctx:Se}}}),{c(){y(g.$$.fragment)},l(d){b(g.$$.fragment,d)},m(d,w){k(g,d,w),A=!0},p(d,w){const q={};w&2&&(q.$$scope={dirty:w,ctx:d}),g.$set(q)},i(d){A||(j(g.$$.fragment,d),A=!0)},o(d){E(g.$$.fragment,d),A=!1},d(d){T(g,d)}}}function gs(Se){let g,A,d,w,q,N,X;return{c(){g=o("p"),A=o("a"),d=p("Trainer"),w=p(" uses "),q=o("a"),N=p("DataCollatorWithPadding"),X=p(" by default so you don\u2019t need to explicitly specify a data collator."),this.h()},l(x){g=n(x,"P",{});var D=l(g);A=n(D,"A",{href:!0});var I=l(A);d=f(I,"Trainer"),I.forEach(e),w=f(D," uses "),q=n(D,"A",{href:!0});var S=l(q);N=f(S,"DataCollatorWithPadding"),S.forEach(e),X=f(D," by default so you don\u2019t need to explicitly specify a data collator."),D.forEach(e),this.h()},h(){u(A,"href","/docs/transformers/pr_16350/en/main_classes/trainer#transformers.Trainer"),u(q,"href","/docs/transformers/pr_16350/en/main_classes/data_collator#transformers.DataCollatorWithPadding")},m(x,D){i(x,g,D),t(g,A),t(A,d),t(g,w),t(g,q),t(q,N),t(g,X)},d(x){x&&e(g)}}}function _s(Se){let g,A,d,w,q,N,X,x,D,I,S,Z,Q,Oe,Be,M,Fe,le,G,te,ge,Ae,ae,Ze,ie,Qe,U,lt,F,L,V,O,it,He,pe,pt,xt,Pe,_e,yt,Ne,B,Ve,z,H,fe,ce,Ye,qe,$e,et,C,ve,xe,Y,se,we,Ie,W,ye,tt,bt,re,me,We;return d=new qa({props:{id:"rnTGBy2ax1c"}}),S=new Lt({}),ie=new J({props:{code:`from transformers import DefaultDataCollator

data_collator = DefaultDataCollator(return_tensors="tf")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DefaultDataCollator

<span class="hljs-meta">&gt;&gt;&gt; </span>data_collator = DefaultDataCollator(return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)`}}),U=new xa({props:{$$slots:{default:[gs]},$$scope:{ctx:Se}}}),B=new J({props:{code:`tf_train_dataset = small_train_dataset.to_tf_dataset(
    columns=["attention_mask", "input_ids", "token_type_ids"],
    label_cols=["labels"],
    shuffle=True,
    collate_fn=data_collator,
    batch_size=8,
)

tf_validation_dataset = small_eval_dataset.to_tf_dataset(
    columns=["attention_mask", "input_ids", "token_type_ids"],
    label_cols=["labels"],
    shuffle=False,
    collate_fn=data_collator,
    batch_size=8,
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>tf_train_dataset = small_train_dataset.to_tf_dataset(
<span class="hljs-meta">... </span>    columns=[<span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;token_type_ids&quot;</span>],
<span class="hljs-meta">... </span>    label_cols=[<span class="hljs-string">&quot;labels&quot;</span>],
<span class="hljs-meta">... </span>    shuffle=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    collate_fn=data_collator,
<span class="hljs-meta">... </span>    batch_size=<span class="hljs-number">8</span>,
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>tf_validation_dataset = small_eval_dataset.to_tf_dataset(
<span class="hljs-meta">... </span>    columns=[<span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;token_type_ids&quot;</span>],
<span class="hljs-meta">... </span>    label_cols=[<span class="hljs-string">&quot;labels&quot;</span>],
<span class="hljs-meta">... </span>    shuffle=<span class="hljs-literal">False</span>,
<span class="hljs-meta">... </span>    collate_fn=data_collator,
<span class="hljs-meta">... </span>    batch_size=<span class="hljs-number">8</span>,
<span class="hljs-meta">... </span>)`}}),ce=new Lt({}),Y=new J({props:{code:`import tensorflow as tf
from transformers import TFAutoModelForSequenceClassification

model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", num_labels=5)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, num_labels=<span class="hljs-number">5</span>)`}}),me=new J({props:{code:`model.compile(
    optimizer=tf.keras.optimizers.Adam(learning_rate=5e-5),
    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
    metrics=tf.metrics.SparseCategoricalAccuracy(),
)

model.fit(tf_train_dataset, validation_data=tf_validation_dataset, epochs=3)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>model.<span class="hljs-built_in">compile</span>(
<span class="hljs-meta">... </span>    optimizer=tf.keras.optimizers.Adam(learning_rate=<span class="hljs-number">5e-5</span>),
<span class="hljs-meta">... </span>    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="hljs-literal">True</span>),
<span class="hljs-meta">... </span>    metrics=tf.metrics.SparseCategoricalAccuracy(),
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>model.fit(tf_train_dataset, validation_data=tf_validation_dataset, epochs=<span class="hljs-number">3</span>)`}}),{c(){g=o("a"),A=m(),y(d.$$.fragment),w=m(),q=o("p"),N=p("\u{1F917} Transformers models also supports training in TensorFlow with the Keras API."),X=m(),x=o("h3"),D=o("a"),I=o("span"),y(S.$$.fragment),Z=m(),Q=o("span"),Oe=p("Convert dataset to TensorFlow format"),Be=m(),M=o("p"),Fe=p("The "),le=o("a"),G=p("DefaultDataCollator"),te=p(" assembles tensors into a batch for the model to train on. Make sure you specify "),ge=o("code"),Ae=p("return_tensors"),ae=p(" to return TensorFlow tensors:"),Ze=m(),y(ie.$$.fragment),Qe=m(),y(U.$$.fragment),lt=m(),F=o("p"),L=p("Next, convert the tokenized datasets to TensorFlow datasets with the "),V=o("a"),O=o("code"),it=p("to_tf_dataset"),He=p(" method. Specify your inputs in "),pe=o("code"),pt=p("columns"),xt=p(", and your label in "),Pe=o("code"),_e=p("label_cols"),yt=p(":"),Ne=m(),y(B.$$.fragment),Ve=m(),z=o("h3"),H=o("a"),fe=o("span"),y(ce.$$.fragment),Ye=m(),qe=o("span"),$e=p("Compile and fit"),et=m(),C=o("p"),ve=p("Load a TensorFlow model with the expected number of labels:"),xe=m(),y(Y.$$.fragment),se=m(),we=o("p"),Ie=p("Then compile and fine-tune your model with "),W=o("a"),ye=o("code"),tt=p("fit"),bt=p(" as you would with any other Keras model:"),re=m(),y(me.$$.fragment),this.h()},l(c){g=n(c,"A",{id:!0}),l(g).forEach(e),A=h(c),b(d.$$.fragment,c),w=h(c),q=n(c,"P",{});var P=l(q);N=f(P,"\u{1F917} Transformers models also supports training in TensorFlow with the Keras API."),P.forEach(e),X=h(c),x=n(c,"H3",{class:!0});var K=l(x);D=n(K,"A",{id:!0,class:!0,href:!0});var oe=l(D);I=n(oe,"SPAN",{});var ze=l(I);b(S.$$.fragment,ze),ze.forEach(e),oe.forEach(e),Z=h(K),Q=n(K,"SPAN",{});var be=l(Q);Oe=f(be,"Convert dataset to TensorFlow format"),be.forEach(e),K.forEach(e),Be=h(c),M=n(c,"P",{});var R=l(M);Fe=f(R,"The "),le=n(R,"A",{href:!0});var ft=l(le);G=f(ft,"DefaultDataCollator"),ft.forEach(e),te=f(R," assembles tensors into a batch for the model to train on. Make sure you specify "),ge=n(R,"CODE",{});var Le=l(ge);Ae=f(Le,"return_tensors"),Le.forEach(e),ae=f(R," to return TensorFlow tensors:"),R.forEach(e),Ze=h(c),b(ie.$$.fragment,c),Qe=h(c),b(U.$$.fragment,c),lt=h(c),F=n(c,"P",{});var ke=l(F);L=f(ke,"Next, convert the tokenized datasets to TensorFlow datasets with the "),V=n(ke,"A",{href:!0,rel:!0});var ee=l(V);O=n(ee,"CODE",{});var je=l(O);it=f(je,"to_tf_dataset"),je.forEach(e),ee.forEach(e),He=f(ke," method. Specify your inputs in "),pe=n(ke,"CODE",{});var Re=l(pe);pt=f(Re,"columns"),Re.forEach(e),xt=f(ke,", and your label in "),Pe=n(ke,"CODE",{});var Ge=l(Pe);_e=f(Ge,"label_cols"),Ge.forEach(e),yt=f(ke,":"),ke.forEach(e),Ne=h(c),b(B.$$.fragment,c),Ve=h(c),z=n(c,"H3",{class:!0});var ne=l(z);H=n(ne,"A",{id:!0,class:!0,href:!0});var Ce=l(H);fe=n(Ce,"SPAN",{});var kt=l(fe);b(ce.$$.fragment,kt),kt.forEach(e),Ce.forEach(e),Ye=h(ne),qe=n(ne,"SPAN",{});var Me=l(qe);$e=f(Me,"Compile and fit"),Me.forEach(e),ne.forEach(e),et=h(c),C=n(c,"P",{});var he=l(C);ve=f(he,"Load a TensorFlow model with the expected number of labels:"),he.forEach(e),xe=h(c),b(Y.$$.fragment,c),se=h(c),we=n(c,"P",{});var Ue=l(we);Ie=f(Ue,"Then compile and fine-tune your model with "),W=n(Ue,"A",{href:!0,rel:!0});var ue=l(W);ye=n(ue,"CODE",{});var ct=l(ye);tt=f(ct,"fit"),ct.forEach(e),ue.forEach(e),bt=f(Ue," as you would with any other Keras model:"),Ue.forEach(e),re=h(c),b(me.$$.fragment,c),this.h()},h(){u(g,"id","keras"),u(D,"id","convert-dataset-to-tensorflow-format"),u(D,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(D,"href","#convert-dataset-to-tensorflow-format"),u(x,"class","relative group"),u(le,"href","/docs/transformers/pr_16350/en/main_classes/data_collator#transformers.DefaultDataCollator"),u(V,"href","https://huggingface.co/docs/datasets/package_reference/main_classes.html#datasets.Dataset.to_tf_dataset"),u(V,"rel","nofollow"),u(H,"id","compile-and-fit"),u(H,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(H,"href","#compile-and-fit"),u(z,"class","relative group"),u(W,"href","https://keras.io/api/models/model_training_apis/"),u(W,"rel","nofollow")},m(c,P){i(c,g,P),i(c,A,P),k(d,c,P),i(c,w,P),i(c,q,P),t(q,N),i(c,X,P),i(c,x,P),t(x,D),t(D,I),k(S,I,null),t(x,Z),t(x,Q),t(Q,Oe),i(c,Be,P),i(c,M,P),t(M,Fe),t(M,le),t(le,G),t(M,te),t(M,ge),t(ge,Ae),t(M,ae),i(c,Ze,P),k(ie,c,P),i(c,Qe,P),k(U,c,P),i(c,lt,P),i(c,F,P),t(F,L),t(F,V),t(V,O),t(O,it),t(F,He),t(F,pe),t(pe,pt),t(F,xt),t(F,Pe),t(Pe,_e),t(F,yt),i(c,Ne,P),k(B,c,P),i(c,Ve,P),i(c,z,P),t(z,H),t(H,fe),k(ce,fe,null),t(z,Ye),t(z,qe),t(qe,$e),i(c,et,P),i(c,C,P),t(C,ve),i(c,xe,P),k(Y,c,P),i(c,se,P),i(c,we,P),t(we,Ie),t(we,W),t(W,ye),t(ye,tt),t(we,bt),i(c,re,P),k(me,c,P),We=!0},p(c,P){const K={};P&2&&(K.$$scope={dirty:P,ctx:c}),U.$set(K)},i(c){We||(j(d.$$.fragment,c),j(S.$$.fragment,c),j(ie.$$.fragment,c),j(U.$$.fragment,c),j(B.$$.fragment,c),j(ce.$$.fragment,c),j(Y.$$.fragment,c),j(me.$$.fragment,c),We=!0)},o(c){E(d.$$.fragment,c),E(S.$$.fragment,c),E(ie.$$.fragment,c),E(U.$$.fragment,c),E(B.$$.fragment,c),E(ce.$$.fragment,c),E(Y.$$.fragment,c),E(me.$$.fragment,c),We=!1},d(c){c&&e(g),c&&e(A),T(d,c),c&&e(w),c&&e(q),c&&e(X),c&&e(x),T(S),c&&e(Be),c&&e(M),c&&e(Ze),T(ie,c),c&&e(Qe),T(U,c),c&&e(lt),c&&e(F),c&&e(Ne),T(B,c),c&&e(Ve),c&&e(z),T(ce),c&&e(et),c&&e(C),c&&e(xe),T(Y,c),c&&e(se),c&&e(we),c&&e(re),T(me,c)}}}function $s(Se){let g,A;return g=new za({props:{$$slots:{default:[_s]},$$scope:{ctx:Se}}}),{c(){y(g.$$.fragment)},l(d){b(g.$$.fragment,d)},m(d,w){k(g,d,w),A=!0},p(d,w){const q={};w&2&&(q.$$scope={dirty:w,ctx:d}),g.$set(q)},i(d){A||(j(g.$$.fragment,d),A=!0)},o(d){E(g.$$.fragment,d),A=!1},d(d){T(g,d)}}}function vs(Se){let g,A,d,w,q,N,X,x;return{c(){g=o("p"),A=p("Get free access to a cloud GPU if you don\u2019t have one with a hosted notebook like "),d=o("a"),w=p("Colaboratory"),q=p(" or "),N=o("a"),X=p("SageMaker StudioLab"),x=p("."),this.h()},l(D){g=n(D,"P",{});var I=l(g);A=f(I,"Get free access to a cloud GPU if you don\u2019t have one with a hosted notebook like "),d=n(I,"A",{href:!0,rel:!0});var S=l(d);w=f(S,"Colaboratory"),S.forEach(e),q=f(I," or "),N=n(I,"A",{href:!0,rel:!0});var Z=l(N);X=f(Z,"SageMaker StudioLab"),Z.forEach(e),x=f(I,"."),I.forEach(e),this.h()},h(){u(d,"href","https://colab.research.google.com/"),u(d,"rel","nofollow"),u(N,"href","https://studiolab.sagemaker.aws/"),u(N,"rel","nofollow")},m(D,I){i(D,g,I),t(g,A),t(g,d),t(d,w),t(g,q),t(g,N),t(N,X),t(g,x)},d(D){D&&e(g)}}}function ws(Se){let g,A,d,w,q,N,X,x,D,I,S,Z,Q,Oe,Be,M,Fe,le,G,te,ge,Ae,ae,Ze,ie,Qe,U,lt,F,L,V,O,it,He,pe,pt,xt,Pe,_e,yt,Ne,B,Ve,z,H,fe,ce,Ye,qe,$e,et,C,ve,xe,Y,se,we,Ie,W,ye,tt,bt,re,me,We,c,P,K,oe,ze,be,R,ft,Le,ke,ee,je,Re,Ge,ne,Ce,kt,Me,he,Ue,ue,ct,at,Rt,zt,mt,Ee,Te,Ke,de,Mt,ht,Gt,st,Ct,ut,dt,rt,jt,Ft,Et,Tt,At,gt,Je,_t,$t,Ut,vt,ot,s,_,r,v,Kt,ta,Pt,Ot,wt,la,ia,aa,Xe,sa,Dt,Nt,Bt,St,pa,Ht,nt,ra,qt,Qt,Jt,fa,ca,De,Vt,ma,ha,It,Yt,Xt;return g=new qa({props:{id:"Dh9CL8fyG80"}}),S=new J({props:{code:`del model
del pytorch_model
del trainer
torch.cuda.empty_cache()`,highlighted:`<span class="hljs-keyword">del</span> model
<span class="hljs-keyword">del</span> pytorch_model
<span class="hljs-keyword">del</span> trainer
torch.cuda.empty_cache()`}}),U=new J({props:{code:'tokenized_datasets = tokenized_datasets.remove_columns(["text"])',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tokenized_datasets = tokenized_datasets.remove_columns([<span class="hljs-string">&quot;text&quot;</span>])'}}),B=new J({props:{code:'tokenized_datasets = tokenized_datasets.rename_column("label", "labels")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tokenized_datasets = tokenized_datasets.rename_column(<span class="hljs-string">&quot;label&quot;</span>, <span class="hljs-string">&quot;labels&quot;</span>)'}}),Ye=new J({props:{code:'tokenized_datasets.set_format("torch")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tokenized_datasets.set_format(<span class="hljs-string">&quot;torch&quot;</span>)'}}),ve=new J({props:{code:`small_train_dataset = tokenized_datasets["train"].shuffle(seed=42).select(range(1000))
small_eval_dataset = tokenized_datasets["test"].shuffle(seed=42).select(range(1000))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>small_train_dataset = tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>].shuffle(seed=<span class="hljs-number">42</span>).select(<span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>small_eval_dataset = tokenized_datasets[<span class="hljs-string">&quot;test&quot;</span>].shuffle(seed=<span class="hljs-number">42</span>).select(<span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>))`}}),Ie=new Lt({}),oe=new J({props:{code:`from torch.utils.data import DataLoader

train_dataloader = DataLoader(small_train_dataset, shuffle=True, batch_size=8)
eval_dataloader = DataLoader(small_eval_dataset, batch_size=8)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader

<span class="hljs-meta">&gt;&gt;&gt; </span>train_dataloader = DataLoader(small_train_dataset, shuffle=<span class="hljs-literal">True</span>, batch_size=<span class="hljs-number">8</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>eval_dataloader = DataLoader(small_eval_dataset, batch_size=<span class="hljs-number">8</span>)`}}),Le=new J({props:{code:`from transformers import AutoModelForSequenceClassification

model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", num_labels=5)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, num_labels=<span class="hljs-number">5</span>)`}}),Ge=new Lt({}),mt=new J({props:{code:`from torch.optim import AdamW

optimizer = AdamW(model.parameters(), lr=5e-5)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torch.optim <span class="hljs-keyword">import</span> AdamW

<span class="hljs-meta">&gt;&gt;&gt; </span>optimizer = AdamW(model.parameters(), lr=<span class="hljs-number">5e-5</span>)`}}),st=new J({props:{code:`from transformers import get_scheduler

num_epochs = 3
num_training_steps = num_epochs * len(train_dataloader)
lr_scheduler = get_scheduler(
    name="linear", optimizer=optimizer, num_warmup_steps=0, num_training_steps=num_training_steps
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> get_scheduler

<span class="hljs-meta">&gt;&gt;&gt; </span>num_epochs = <span class="hljs-number">3</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>num_training_steps = num_epochs * <span class="hljs-built_in">len</span>(train_dataloader)
<span class="hljs-meta">&gt;&gt;&gt; </span>lr_scheduler = get_scheduler(
<span class="hljs-meta">... </span>    name=<span class="hljs-string">&quot;linear&quot;</span>, optimizer=optimizer, num_warmup_steps=<span class="hljs-number">0</span>, num_training_steps=num_training_steps
<span class="hljs-meta">... </span>)`}}),Tt=new J({props:{code:`import torch

device = torch.device("cuda") if torch.cuda.is_available() else torch.device("cpu")
model.to(device)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span>) <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> torch.device(<span class="hljs-string">&quot;cpu&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.to(device)`}}),gt=new xa({props:{$$slots:{default:[vs]},$$scope:{ctx:Se}}}),_=new Lt({}),Xe=new J({props:{code:`from tqdm.auto import tqdm

progress_bar = tqdm(range(num_training_steps))

model.train()
for epoch in range(num_epochs):
    for batch in train_dataloader:
        batch = {k: v.to(device) for k, v in batch.items()}
        outputs = model(**batch)
        loss = outputs.loss
        loss.backward()

        optimizer.step()
        lr_scheduler.step()
        optimizer.zero_grad()
        progress_bar.update(1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> tqdm.auto <span class="hljs-keyword">import</span> tqdm

<span class="hljs-meta">&gt;&gt;&gt; </span>progress_bar = tqdm(<span class="hljs-built_in">range</span>(num_training_steps))

<span class="hljs-meta">&gt;&gt;&gt; </span>model.train()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> train_dataloader:
<span class="hljs-meta">... </span>        batch = {k: v.to(device) <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> batch.items()}
<span class="hljs-meta">... </span>        outputs = model(**batch)
<span class="hljs-meta">... </span>        loss = outputs.loss
<span class="hljs-meta">... </span>        loss.backward()

<span class="hljs-meta">... </span>        optimizer.step()
<span class="hljs-meta">... </span>        lr_scheduler.step()
<span class="hljs-meta">... </span>        optimizer.zero_grad()
<span class="hljs-meta">... </span>        progress_bar.update(<span class="hljs-number">1</span>)`}}),St=new Lt({}),Yt=new J({props:{code:`metric = load_metric("accuracy")
model.eval()
for batch in eval_dataloader:
    batch = {k: v.to(device) for k, v in batch.items()}
    with torch.no_grad():
        outputs = model(**batch)

    logits = outputs.logits
    predictions = torch.argmax(logits, dim=-1)
    metric.add_batch(predictions=predictions, references=batch["labels"])

metric.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.<span class="hljs-built_in">eval</span>()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> eval_dataloader:
<span class="hljs-meta">... </span>    batch = {k: v.to(device) <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> batch.items()}
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>        outputs = model(**batch)

<span class="hljs-meta">... </span>    logits = outputs.logits
<span class="hljs-meta">... </span>    predictions = torch.argmax(logits, dim=-<span class="hljs-number">1</span>)
<span class="hljs-meta">... </span>    metric.add_batch(predictions=predictions, references=batch[<span class="hljs-string">&quot;labels&quot;</span>])

<span class="hljs-meta">&gt;&gt;&gt; </span>metric.compute()`}}),{c(){y(g.$$.fragment),A=m(),d=o("p"),w=o("a"),q=p("Trainer"),N=p(" takes care of the training loop and allows you to fine-tune a model in a single line of code. For users who prefer to write their own training loop, you can also fine-tune a \u{1F917} Transformers model in native PyTorch."),X=m(),x=o("p"),D=p("At this point, you may need to restart your notebook or execute the following code to free some memory:"),I=m(),y(S.$$.fragment),Z=m(),Q=o("p"),Oe=p("Next, manually postprocess "),Be=o("code"),M=p("tokenized_dataset"),Fe=p(" to prepare it for training."),le=m(),G=o("ol"),te=o("li"),ge=o("p"),Ae=p("Remove the "),ae=o("code"),Ze=p("text"),ie=p(" column because the model does not accept raw text as an input:"),Qe=m(),y(U.$$.fragment),lt=m(),F=o("li"),L=o("p"),V=p("Rename the "),O=o("code"),it=p("label"),He=p(" column to "),pe=o("code"),pt=p("labels"),xt=p(" because the model expects the argument to be named "),Pe=o("code"),_e=p("labels"),yt=p(":"),Ne=m(),y(B.$$.fragment),Ve=m(),z=o("li"),H=o("p"),fe=p("Set the format of the dataset to return PyTorch tensors instead of lists:"),ce=m(),y(Ye.$$.fragment),qe=m(),$e=o("p"),et=p("Then create a smaller subset of the dataset as previously shown to speed up the fine-tuning:"),C=m(),y(ve.$$.fragment),xe=m(),Y=o("h3"),se=o("a"),we=o("span"),y(Ie.$$.fragment),W=m(),ye=o("span"),tt=p("DataLoader"),bt=m(),re=o("p"),me=p("Create a "),We=o("code"),c=p("DataLoader"),P=p(" for your training and test datasets so you can iterate over batches of data:"),K=m(),y(oe.$$.fragment),ze=m(),be=o("p"),R=p("Load your model with the number of expected labels:"),ft=m(),y(Le.$$.fragment),ke=m(),ee=o("h3"),je=o("a"),Re=o("span"),y(Ge.$$.fragment),ne=m(),Ce=o("span"),kt=p("Optimizer and learning rate scheduler"),Me=m(),he=o("p"),Ue=p("Create an optimizer and learning rate scheduler to fine-tune the model. Let\u2019s use the "),ue=o("a"),ct=o("code"),at=p("AdamW"),Rt=p(" optimizer from PyTorch:"),zt=m(),y(mt.$$.fragment),Ee=m(),Te=o("p"),Ke=p("Create the default learning rate scheduler from "),de=o("a"),Mt=p("Trainer"),ht=p(":"),Gt=m(),y(st.$$.fragment),Ct=m(),ut=o("p"),dt=p("Lastly, specify "),rt=o("code"),jt=p("device"),Ft=p(" to use a GPU if you have access to one. Otherwise, training on a CPU may take several hours instead of a couple of minutes."),Et=m(),y(Tt.$$.fragment),At=m(),y(gt.$$.fragment),Je=m(),_t=o("p"),$t=p("Great, now you are ready to train! \u{1F973}"),Ut=m(),vt=o("h3"),ot=o("a"),s=o("span"),y(_.$$.fragment),r=m(),v=o("span"),Kt=p("Training loop"),ta=m(),Pt=o("p"),Ot=p("To keep track of your training progress, use the "),wt=o("a"),la=p("tqdm"),ia=p(" library to add a progress bar over the number of training steps:"),aa=m(),y(Xe.$$.fragment),sa=m(),Dt=o("h3"),Nt=o("a"),Bt=o("span"),y(St.$$.fragment),pa=m(),Ht=o("span"),nt=p("Metrics"),ra=m(),qt=o("p"),Qt=p("Just like how you need to add an evaluation function to "),Jt=o("a"),fa=p("Trainer"),ca=p(", you need to do the same when you write your own training loop. But instead of calculating and reporting the metric at the end of each epoch, this time you will accumulate all the batches with "),De=o("a"),Vt=o("code"),ma=p("add_batch"),ha=p(" and calculate the metric at the very end."),It=m(),y(Yt.$$.fragment),this.h()},l(a){b(g.$$.fragment,a),A=h(a),d=n(a,"P",{});var $=l(d);w=n($,"A",{href:!0});var Wt=l(w);q=f(Wt,"Trainer"),Wt.forEach(e),N=f($," takes care of the training loop and allows you to fine-tune a model in a single line of code. For users who prefer to write their own training loop, you can also fine-tune a \u{1F917} Transformers model in native PyTorch."),$.forEach(e),X=h(a),x=n(a,"P",{});var oa=l(x);D=f(oa,"At this point, you may need to restart your notebook or execute the following code to free some memory:"),oa.forEach(e),I=h(a),b(S.$$.fragment,a),Z=h(a),Q=n(a,"P",{});var ea=l(Q);Oe=f(ea,"Next, manually postprocess "),Be=n(ea,"CODE",{});var na=l(Be);M=f(na,"tokenized_dataset"),na.forEach(e),Fe=f(ea," to prepare it for training."),ea.forEach(e),le=h(a),G=n(a,"OL",{});var Zt=l(G);te=n(Zt,"LI",{});var ua=l(te);ge=n(ua,"P",{});var ga=l(ge);Ae=f(ga,"Remove the "),ae=n(ga,"CODE",{});var Ca=l(ae);Ze=f(Ca,"text"),Ca.forEach(e),ie=f(ga," column because the model does not accept raw text as an input:"),ga.forEach(e),Qe=h(ua),b(U.$$.fragment,ua),ua.forEach(e),lt=h(Zt),F=n(Zt,"LI",{});var $a=l(F);L=n($a,"P",{});var da=l(L);V=f(da,"Rename the "),O=n(da,"CODE",{});var Da=l(O);it=f(Da,"label"),Da.forEach(e),He=f(da," column to "),pe=n(da,"CODE",{});var Sa=l(pe);pt=f(Sa,"labels"),Sa.forEach(e),xt=f(da," because the model expects the argument to be named "),Pe=n(da,"CODE",{});var Fa=l(Pe);_e=f(Fa,"labels"),Fa.forEach(e),yt=f(da,":"),da.forEach(e),Ne=h($a),b(B.$$.fragment,$a),$a.forEach(e),Ve=h(Zt),z=n(Zt,"LI",{});var va=l(z);H=n(va,"P",{});var Na=l(H);fe=f(Na,"Set the format of the dataset to return PyTorch tensors instead of lists:"),Na.forEach(e),ce=h(va),b(Ye.$$.fragment,va),va.forEach(e),Zt.forEach(e),qe=h(a),$e=n(a,"P",{});var Ia=l($e);et=f(Ia,"Then create a smaller subset of the dataset as previously shown to speed up the fine-tuning:"),Ia.forEach(e),C=h(a),b(ve.$$.fragment,a),xe=h(a),Y=n(a,"H3",{class:!0});var wa=l(Y);se=n(wa,"A",{id:!0,class:!0,href:!0});var La=l(se);we=n(La,"SPAN",{});var Ma=l(we);b(Ie.$$.fragment,Ma),Ma.forEach(e),La.forEach(e),W=h(wa),ye=n(wa,"SPAN",{});var Oa=l(ye);tt=f(Oa,"DataLoader"),Oa.forEach(e),wa.forEach(e),bt=h(a),re=n(a,"P",{});var ya=l(re);me=f(ya,"Create a "),We=n(ya,"CODE",{});var Ba=l(We);c=f(Ba,"DataLoader"),Ba.forEach(e),P=f(ya," for your training and test datasets so you can iterate over batches of data:"),ya.forEach(e),K=h(a),b(oe.$$.fragment,a),ze=h(a),be=n(a,"P",{});var Ha=l(be);R=f(Ha,"Load your model with the number of expected labels:"),Ha.forEach(e),ft=h(a),b(Le.$$.fragment,a),ke=h(a),ee=n(a,"H3",{class:!0});var ba=l(ee);je=n(ba,"A",{id:!0,class:!0,href:!0});var Ya=l(je);Re=n(Ya,"SPAN",{});var Wa=l(Re);b(Ge.$$.fragment,Wa),Wa.forEach(e),Ya.forEach(e),ne=h(ba),Ce=n(ba,"SPAN",{});var Ra=l(Ce);kt=f(Ra,"Optimizer and learning rate scheduler"),Ra.forEach(e),ba.forEach(e),Me=h(a),he=n(a,"P",{});var ka=l(he);Ue=f(ka,"Create an optimizer and learning rate scheduler to fine-tune the model. Let\u2019s use the "),ue=n(ka,"A",{href:!0,rel:!0});var Ga=l(ue);ct=n(Ga,"CODE",{});var Ua=l(ct);at=f(Ua,"AdamW"),Ua.forEach(e),Ga.forEach(e),Rt=f(ka," optimizer from PyTorch:"),ka.forEach(e),zt=h(a),b(mt.$$.fragment,a),Ee=h(a),Te=n(a,"P",{});var ja=l(Te);Ke=f(ja,"Create the default learning rate scheduler from "),de=n(ja,"A",{href:!0});var Ka=l(de);Mt=f(Ka,"Trainer"),Ka.forEach(e),ht=f(ja,":"),ja.forEach(e),Gt=h(a),b(st.$$.fragment,a),Ct=h(a),ut=n(a,"P",{});var Ea=l(ut);dt=f(Ea,"Lastly, specify "),rt=n(Ea,"CODE",{});var Ja=l(rt);jt=f(Ja,"device"),Ja.forEach(e),Ft=f(Ea," to use a GPU if you have access to one. Otherwise, training on a CPU may take several hours instead of a couple of minutes."),Ea.forEach(e),Et=h(a),b(Tt.$$.fragment,a),At=h(a),b(gt.$$.fragment,a),Je=h(a),_t=n(a,"P",{});var Xa=l(_t);$t=f(Xa,"Great, now you are ready to train! \u{1F973}"),Xa.forEach(e),Ut=h(a),vt=n(a,"H3",{class:!0});var Ta=l(vt);ot=n(Ta,"A",{id:!0,class:!0,href:!0});var Za=l(ot);s=n(Za,"SPAN",{});var Qa=l(s);b(_.$$.fragment,Qa),Qa.forEach(e),Za.forEach(e),r=h(Ta),v=n(Ta,"SPAN",{});var Va=l(v);Kt=f(Va,"Training loop"),Va.forEach(e),Ta.forEach(e),ta=h(a),Pt=n(a,"P",{});var Aa=l(Pt);Ot=f(Aa,"To keep track of your training progress, use the "),wt=n(Aa,"A",{href:!0,rel:!0});var es=l(wt);la=f(es,"tqdm"),es.forEach(e),ia=f(Aa," library to add a progress bar over the number of training steps:"),Aa.forEach(e),aa=h(a),b(Xe.$$.fragment,a),sa=h(a),Dt=n(a,"H3",{class:!0});var Pa=l(Dt);Nt=n(Pa,"A",{id:!0,class:!0,href:!0});var ts=l(Nt);Bt=n(ts,"SPAN",{});var as=l(Bt);b(St.$$.fragment,as),as.forEach(e),ts.forEach(e),pa=h(Pa),Ht=n(Pa,"SPAN",{});var ss=l(Ht);nt=f(ss,"Metrics"),ss.forEach(e),Pa.forEach(e),ra=h(a),qt=n(a,"P",{});var _a=l(qt);Qt=f(_a,"Just like how you need to add an evaluation function to "),Jt=n(_a,"A",{href:!0});var rs=l(Jt);fa=f(rs,"Trainer"),rs.forEach(e),ca=f(_a,", you need to do the same when you write your own training loop. But instead of calculating and reporting the metric at the end of each epoch, this time you will accumulate all the batches with "),De=n(_a,"A",{href:!0,rel:!0});var os=l(De);Vt=n(os,"CODE",{});var ns=l(Vt);ma=f(ns,"add_batch"),ns.forEach(e),os.forEach(e),ha=f(_a," and calculate the metric at the very end."),_a.forEach(e),It=h(a),b(Yt.$$.fragment,a),this.h()},h(){u(w,"href","/docs/transformers/pr_16350/en/main_classes/trainer#transformers.Trainer"),u(se,"id","dataloader"),u(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(se,"href","#dataloader"),u(Y,"class","relative group"),u(je,"id","optimizer-and-learning-rate-scheduler"),u(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(je,"href","#optimizer-and-learning-rate-scheduler"),u(ee,"class","relative group"),u(ue,"href","https://pytorch.org/docs/stable/generated/torch.optim.AdamW.html"),u(ue,"rel","nofollow"),u(de,"href","/docs/transformers/pr_16350/en/main_classes/trainer#transformers.Trainer"),u(ot,"id","training-loop"),u(ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ot,"href","#training-loop"),u(vt,"class","relative group"),u(wt,"href","https://tqdm.github.io/"),u(wt,"rel","nofollow"),u(Nt,"id","metrics"),u(Nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Nt,"href","#metrics"),u(Dt,"class","relative group"),u(Jt,"href","/docs/transformers/pr_16350/en/main_classes/trainer#transformers.Trainer"),u(De,"href","https://huggingface.co/docs/datasets/package_reference/main_classes.html?highlight=add_batch#datasets.Metric.add_batch"),u(De,"rel","nofollow")},m(a,$){k(g,a,$),i(a,A,$),i(a,d,$),t(d,w),t(w,q),t(d,N),i(a,X,$),i(a,x,$),t(x,D),i(a,I,$),k(S,a,$),i(a,Z,$),i(a,Q,$),t(Q,Oe),t(Q,Be),t(Be,M),t(Q,Fe),i(a,le,$),i(a,G,$),t(G,te),t(te,ge),t(ge,Ae),t(ge,ae),t(ae,Ze),t(ge,ie),t(te,Qe),k(U,te,null),t(G,lt),t(G,F),t(F,L),t(L,V),t(L,O),t(O,it),t(L,He),t(L,pe),t(pe,pt),t(L,xt),t(L,Pe),t(Pe,_e),t(L,yt),t(F,Ne),k(B,F,null),t(G,Ve),t(G,z),t(z,H),t(H,fe),t(z,ce),k(Ye,z,null),i(a,qe,$),i(a,$e,$),t($e,et),i(a,C,$),k(ve,a,$),i(a,xe,$),i(a,Y,$),t(Y,se),t(se,we),k(Ie,we,null),t(Y,W),t(Y,ye),t(ye,tt),i(a,bt,$),i(a,re,$),t(re,me),t(re,We),t(We,c),t(re,P),i(a,K,$),k(oe,a,$),i(a,ze,$),i(a,be,$),t(be,R),i(a,ft,$),k(Le,a,$),i(a,ke,$),i(a,ee,$),t(ee,je),t(je,Re),k(Ge,Re,null),t(ee,ne),t(ee,Ce),t(Ce,kt),i(a,Me,$),i(a,he,$),t(he,Ue),t(he,ue),t(ue,ct),t(ct,at),t(he,Rt),i(a,zt,$),k(mt,a,$),i(a,Ee,$),i(a,Te,$),t(Te,Ke),t(Te,de),t(de,Mt),t(Te,ht),i(a,Gt,$),k(st,a,$),i(a,Ct,$),i(a,ut,$),t(ut,dt),t(ut,rt),t(rt,jt),t(ut,Ft),i(a,Et,$),k(Tt,a,$),i(a,At,$),k(gt,a,$),i(a,Je,$),i(a,_t,$),t(_t,$t),i(a,Ut,$),i(a,vt,$),t(vt,ot),t(ot,s),k(_,s,null),t(vt,r),t(vt,v),t(v,Kt),i(a,ta,$),i(a,Pt,$),t(Pt,Ot),t(Pt,wt),t(wt,la),t(Pt,ia),i(a,aa,$),k(Xe,a,$),i(a,sa,$),i(a,Dt,$),t(Dt,Nt),t(Nt,Bt),k(St,Bt,null),t(Dt,pa),t(Dt,Ht),t(Ht,nt),i(a,ra,$),i(a,qt,$),t(qt,Qt),t(qt,Jt),t(Jt,fa),t(qt,ca),t(qt,De),t(De,Vt),t(Vt,ma),t(qt,ha),i(a,It,$),k(Yt,a,$),Xt=!0},p(a,$){const Wt={};$&2&&(Wt.$$scope={dirty:$,ctx:a}),gt.$set(Wt)},i(a){Xt||(j(g.$$.fragment,a),j(S.$$.fragment,a),j(U.$$.fragment,a),j(B.$$.fragment,a),j(Ye.$$.fragment,a),j(ve.$$.fragment,a),j(Ie.$$.fragment,a),j(oe.$$.fragment,a),j(Le.$$.fragment,a),j(Ge.$$.fragment,a),j(mt.$$.fragment,a),j(st.$$.fragment,a),j(Tt.$$.fragment,a),j(gt.$$.fragment,a),j(_.$$.fragment,a),j(Xe.$$.fragment,a),j(St.$$.fragment,a),j(Yt.$$.fragment,a),Xt=!0)},o(a){E(g.$$.fragment,a),E(S.$$.fragment,a),E(U.$$.fragment,a),E(B.$$.fragment,a),E(Ye.$$.fragment,a),E(ve.$$.fragment,a),E(Ie.$$.fragment,a),E(oe.$$.fragment,a),E(Le.$$.fragment,a),E(Ge.$$.fragment,a),E(mt.$$.fragment,a),E(st.$$.fragment,a),E(Tt.$$.fragment,a),E(gt.$$.fragment,a),E(_.$$.fragment,a),E(Xe.$$.fragment,a),E(St.$$.fragment,a),E(Yt.$$.fragment,a),Xt=!1},d(a){T(g,a),a&&e(A),a&&e(d),a&&e(X),a&&e(x),a&&e(I),T(S,a),a&&e(Z),a&&e(Q),a&&e(le),a&&e(G),T(U),T(B),T(Ye),a&&e(qe),a&&e($e),a&&e(C),T(ve,a),a&&e(xe),a&&e(Y),T(Ie),a&&e(bt),a&&e(re),a&&e(K),T(oe,a),a&&e(ze),a&&e(be),a&&e(ft),T(Le,a),a&&e(ke),a&&e(ee),T(Ge),a&&e(Me),a&&e(he),a&&e(zt),T(mt,a),a&&e(Ee),a&&e(Te),a&&e(Gt),T(st,a),a&&e(Ct),a&&e(ut),a&&e(Et),T(Tt,a),a&&e(At),T(gt,a),a&&e(Je),a&&e(_t),a&&e(Ut),a&&e(vt),T(_),a&&e(ta),a&&e(Pt),a&&e(aa),T(Xe,a),a&&e(sa),a&&e(Dt),T(St),a&&e(ra),a&&e(qt),a&&e(It),T(Yt,a)}}}function ys(Se){let g,A;return g=new za({props:{$$slots:{default:[ws]},$$scope:{ctx:Se}}}),{c(){y(g.$$.fragment)},l(d){b(g.$$.fragment,d)},m(d,w){k(g,d,w),A=!0},p(d,w){const q={};w&2&&(q.$$scope={dirty:w,ctx:d}),g.$set(q)},i(d){A||(j(g.$$.fragment,d),A=!0)},o(d){E(g.$$.fragment,d),A=!1},d(d){T(g,d)}}}function bs(Se){let g,A,d,w,q,N,X,x,D,I,S,Z,Q,Oe,Be,M,Fe,le,G,te,ge,Ae,ae,Ze,ie,Qe,U,lt,F,L,V,O,it,He,pe,pt,xt,Pe,_e,yt,Ne,B,Ve,z,H,fe,ce,Ye,qe,$e,et,C,ve,xe,Y,se,we,Ie,W,ye,tt,bt,re,me,We,c,P,K,oe,ze,be,R,ft,Le,ke,ee,je,Re,Ge,ne,Ce,kt,Me,he,Ue,ue,ct,at,Rt,zt,mt,Ee,Te,Ke,de,Mt,ht,Gt,st,Ct,ut,dt,rt,jt,Ft,Et,Tt,At,gt,Je,_t,$t,Ut,vt,ot;return N=new Lt({}),S=new ms({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Mixed",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/transformers_doc/training.ipynb"},{label:"PyTorch",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/transformers_doc/pytorch/training.ipynb"},{label:"TensorFlow",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/transformers_doc/tensorflow/training.ipynb"},{label:"Mixed",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/transformers_doc/training.ipynb"},{label:"PyTorch",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/transformers_doc/pytorch/training.ipynb"},{label:"TensorFlow",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/transformers_doc/tensorflow/training.ipynb"}]}}),He=new Lt({}),_e=new qa({props:{id:"_BZearw7f0w"}}),$e=new J({props:{code:`from datasets import load_dataset

dataset = load_dataset("yelp_review_full")
dataset["train"][100]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;yelp_review_full&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">100</span>]
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;My expectations for McDonalds are t rarely high. But for one to still fail so spectacularly...that takes something special!\\\\nThe cashier took my friends\\&#x27;s order, then promptly ignored me. I had to force myself in front of a cashier who opened his register to wait on the person BEHIND me. I waited over five minutes for a gigantic order that included precisely one kid\\&#x27;s meal. After watching two people who ordered after me be handed their food, I asked where mine was. The manager started yelling at the cashiers for \\\\&quot;serving off their orders\\\\&quot; when they didn\\&#x27;t have their food. But neither cashier was anywhere near those controls, and the manager was the one serving food to customers and clearing the boards.\\\\nThe manager was rude when giving me my order. She didn\\&#x27;t make sure that I had everything ON MY RECEIPT, and never even had the decency to apologize that I felt I was getting poor service.\\\\nI\\&#x27;ve eaten at various McDonalds restaurants for over 30 years. I\\&#x27;ve worked at more than one location. I expect bad days, bad moods, and the occasional mistake. But I have yet to have a decent experience at this store. It will remain a place I avoid unless someone in my party needs to avoid illness from low blood sugar. Perhaps I should go back to the racially biased service of Steak n Shake instead!&#x27;</span>}`}}),W=new J({props:{code:`from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")


def tokenize_function(examples):
    return tokenizer(examples["text"], padding="max_length", truncation=True)


tokenized_datasets = dataset.map(tokenize_function, batched=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)


<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">tokenize_function</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(examples[<span class="hljs-string">&quot;text&quot;</span>], padding=<span class="hljs-string">&quot;max_length&quot;</span>, truncation=<span class="hljs-literal">True</span>)


<span class="hljs-meta">&gt;&gt;&gt; </span>tokenized_datasets = dataset.<span class="hljs-built_in">map</span>(tokenize_function, batched=<span class="hljs-literal">True</span>)`}}),me=new J({props:{code:`small_train_dataset = tokenized_datasets["train"].shuffle(seed=42).select(range(1000))
small_eval_dataset = tokenized_datasets["test"].shuffle(seed=42).select(range(1000))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>small_train_dataset = tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>].shuffle(seed=<span class="hljs-number">42</span>).select(<span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>small_eval_dataset = tokenized_datasets[<span class="hljs-string">&quot;test&quot;</span>].shuffle(seed=<span class="hljs-number">42</span>).select(<span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>))`}}),be=new Lt({}),ee=new ls({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[$s],pytorch:[ds]},$$scope:{ctx:Se}}}),Me=new Lt({}),at=new ls({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{pytorch:[ys]},$$scope:{ctx:Se}}}),de=new Lt({}),{c(){g=o("meta"),A=m(),d=o("h1"),w=o("a"),q=o("span"),y(N.$$.fragment),X=m(),x=o("span"),D=p("Fine-tune a pretrained model"),I=m(),y(S.$$.fragment),Z=m(),Q=o("p"),Oe=p("There are significant benefits to using a pretrained model. It reduces computation costs, your carbon footprint, and allows you to use state-of-the-art models without having to train one from scratch. \u{1F917} Transformers provides access to thousands of pretrained models for a wide range of tasks. When you use a pretrained model, you train it on a dataset specific to your task. This is known as fine-tuning, an incredibly powerful training technique. In this tutorial, you will fine-tune a pretrained model with a deep learning framework of your choice:"),Be=m(),M=o("ul"),Fe=o("li"),le=p("Fine-tune a pretrained model with \u{1F917} Transformers "),G=o("a"),te=p("Trainer"),ge=p("."),Ae=m(),ae=o("li"),Ze=p("Fine-tune a pretrained model in TensorFlow with Keras."),ie=m(),Qe=o("li"),U=p("Fine-tune a pretrained model in native PyTorch."),lt=m(),F=o("a"),L=m(),V=o("h2"),O=o("a"),it=o("span"),y(He.$$.fragment),pe=m(),pt=o("span"),xt=p("Prepare a dataset"),Pe=m(),y(_e.$$.fragment),yt=m(),Ne=o("p"),B=p("Before you can fine-tune a pretrained model, download a dataset and prepare it for training. The previous tutorial showed you how to process data for training, and now you get an opportunity to put those skills to the test!"),Ve=m(),z=o("p"),H=p("Begin by loading the "),fe=o("a"),ce=p("Yelp Reviews"),Ye=p(" dataset:"),qe=m(),y($e.$$.fragment),et=m(),C=o("p"),ve=p("As you now know, you need a tokenizer to process the text and include a padding and truncation strategy to handle any variable sequence lengths. To process your dataset in one step, use \u{1F917} Datasets "),xe=o("a"),Y=o("code"),se=p("map"),we=p(" method to apply a preprocessing function over the entire dataset:"),Ie=m(),y(W.$$.fragment),ye=m(),tt=o("p"),bt=p("If you like, you can create a smaller subset of the full dataset to fine-tune on to reduce the time it takes:"),re=m(),y(me.$$.fragment),We=m(),c=o("a"),P=m(),K=o("h2"),oe=o("a"),ze=o("span"),y(be.$$.fragment),R=m(),ft=o("span"),Le=p("Train"),ke=m(),y(ee.$$.fragment),je=m(),Re=o("a"),Ge=m(),ne=o("h2"),Ce=o("a"),kt=o("span"),y(Me.$$.fragment),he=m(),Ue=o("span"),ue=p("Train in native PyTorch"),ct=m(),y(at.$$.fragment),Rt=m(),zt=o("a"),mt=m(),Ee=o("h2"),Te=o("a"),Ke=o("span"),y(de.$$.fragment),Mt=m(),ht=o("span"),Gt=p("Additional resources"),st=m(),Ct=o("p"),ut=p("For more fine-tuning examples, refer to:"),dt=m(),rt=o("ul"),jt=o("li"),Ft=o("p"),Et=o("a"),Tt=p("\u{1F917} Transformers Examples"),At=p(` includes scripts
to train common NLP tasks in PyTorch and TensorFlow.`),gt=m(),Je=o("li"),_t=o("p"),$t=o("a"),Ut=p("\u{1F917} Transformers Notebooks"),vt=p(" contains various notebooks on how to fine-tune a model for specific tasks in PyTorch and TensorFlow."),this.h()},l(s){const _=cs('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(e),A=h(s),d=n(s,"H1",{class:!0});var r=l(d);w=n(r,"A",{id:!0,class:!0,href:!0});var v=l(w);q=n(v,"SPAN",{});var Kt=l(q);b(N.$$.fragment,Kt),Kt.forEach(e),v.forEach(e),X=h(r),x=n(r,"SPAN",{});var ta=l(x);D=f(ta,"Fine-tune a pretrained model"),ta.forEach(e),r.forEach(e),I=h(s),b(S.$$.fragment,s),Z=h(s),Q=n(s,"P",{});var Pt=l(Q);Oe=f(Pt,"There are significant benefits to using a pretrained model. It reduces computation costs, your carbon footprint, and allows you to use state-of-the-art models without having to train one from scratch. \u{1F917} Transformers provides access to thousands of pretrained models for a wide range of tasks. When you use a pretrained model, you train it on a dataset specific to your task. This is known as fine-tuning, an incredibly powerful training technique. In this tutorial, you will fine-tune a pretrained model with a deep learning framework of your choice:"),Pt.forEach(e),Be=h(s),M=n(s,"UL",{});var Ot=l(M);Fe=n(Ot,"LI",{});var wt=l(Fe);le=f(wt,"Fine-tune a pretrained model with \u{1F917} Transformers "),G=n(wt,"A",{href:!0});var la=l(G);te=f(la,"Trainer"),la.forEach(e),ge=f(wt,"."),wt.forEach(e),Ae=h(Ot),ae=n(Ot,"LI",{});var ia=l(ae);Ze=f(ia,"Fine-tune a pretrained model in TensorFlow with Keras."),ia.forEach(e),ie=h(Ot),Qe=n(Ot,"LI",{});var aa=l(Qe);U=f(aa,"Fine-tune a pretrained model in native PyTorch."),aa.forEach(e),Ot.forEach(e),lt=h(s),F=n(s,"A",{id:!0}),l(F).forEach(e),L=h(s),V=n(s,"H2",{class:!0});var Xe=l(V);O=n(Xe,"A",{id:!0,class:!0,href:!0});var sa=l(O);it=n(sa,"SPAN",{});var Dt=l(it);b(He.$$.fragment,Dt),Dt.forEach(e),sa.forEach(e),pe=h(Xe),pt=n(Xe,"SPAN",{});var Nt=l(pt);xt=f(Nt,"Prepare a dataset"),Nt.forEach(e),Xe.forEach(e),Pe=h(s),b(_e.$$.fragment,s),yt=h(s),Ne=n(s,"P",{});var Bt=l(Ne);B=f(Bt,"Before you can fine-tune a pretrained model, download a dataset and prepare it for training. The previous tutorial showed you how to process data for training, and now you get an opportunity to put those skills to the test!"),Bt.forEach(e),Ve=h(s),z=n(s,"P",{});var St=l(z);H=f(St,"Begin by loading the "),fe=n(St,"A",{href:!0,rel:!0});var pa=l(fe);ce=f(pa,"Yelp Reviews"),pa.forEach(e),Ye=f(St," dataset:"),St.forEach(e),qe=h(s),b($e.$$.fragment,s),et=h(s),C=n(s,"P",{});var Ht=l(C);ve=f(Ht,"As you now know, you need a tokenizer to process the text and include a padding and truncation strategy to handle any variable sequence lengths. To process your dataset in one step, use \u{1F917} Datasets "),xe=n(Ht,"A",{href:!0,rel:!0});var nt=l(xe);Y=n(nt,"CODE",{});var ra=l(Y);se=f(ra,"map"),ra.forEach(e),nt.forEach(e),we=f(Ht," method to apply a preprocessing function over the entire dataset:"),Ht.forEach(e),Ie=h(s),b(W.$$.fragment,s),ye=h(s),tt=n(s,"P",{});var qt=l(tt);bt=f(qt,"If you like, you can create a smaller subset of the full dataset to fine-tune on to reduce the time it takes:"),qt.forEach(e),re=h(s),b(me.$$.fragment,s),We=h(s),c=n(s,"A",{id:!0}),l(c).forEach(e),P=h(s),K=n(s,"H2",{class:!0});var Qt=l(K);oe=n(Qt,"A",{id:!0,class:!0,href:!0});var Jt=l(oe);ze=n(Jt,"SPAN",{});var fa=l(ze);b(be.$$.fragment,fa),fa.forEach(e),Jt.forEach(e),R=h(Qt),ft=n(Qt,"SPAN",{});var ca=l(ft);Le=f(ca,"Train"),ca.forEach(e),Qt.forEach(e),ke=h(s),b(ee.$$.fragment,s),je=h(s),Re=n(s,"A",{id:!0}),l(Re).forEach(e),Ge=h(s),ne=n(s,"H2",{class:!0});var De=l(ne);Ce=n(De,"A",{id:!0,class:!0,href:!0});var Vt=l(Ce);kt=n(Vt,"SPAN",{});var ma=l(kt);b(Me.$$.fragment,ma),ma.forEach(e),Vt.forEach(e),he=h(De),Ue=n(De,"SPAN",{});var ha=l(Ue);ue=f(ha,"Train in native PyTorch"),ha.forEach(e),De.forEach(e),ct=h(s),b(at.$$.fragment,s),Rt=h(s),zt=n(s,"A",{id:!0}),l(zt).forEach(e),mt=h(s),Ee=n(s,"H2",{class:!0});var It=l(Ee);Te=n(It,"A",{id:!0,class:!0,href:!0});var Yt=l(Te);Ke=n(Yt,"SPAN",{});var Xt=l(Ke);b(de.$$.fragment,Xt),Xt.forEach(e),Yt.forEach(e),Mt=h(It),ht=n(It,"SPAN",{});var a=l(ht);Gt=f(a,"Additional resources"),a.forEach(e),It.forEach(e),st=h(s),Ct=n(s,"P",{});var $=l(Ct);ut=f($,"For more fine-tuning examples, refer to:"),$.forEach(e),dt=h(s),rt=n(s,"UL",{});var Wt=l(rt);jt=n(Wt,"LI",{});var oa=l(jt);Ft=n(oa,"P",{});var ea=l(Ft);Et=n(ea,"A",{href:!0,rel:!0});var na=l(Et);Tt=f(na,"\u{1F917} Transformers Examples"),na.forEach(e),At=f(ea,` includes scripts
to train common NLP tasks in PyTorch and TensorFlow.`),ea.forEach(e),oa.forEach(e),gt=h(Wt),Je=n(Wt,"LI",{});var Zt=l(Je);_t=n(Zt,"P",{});var ua=l(_t);$t=n(ua,"A",{href:!0});var ga=l($t);Ut=f(ga,"\u{1F917} Transformers Notebooks"),ga.forEach(e),vt=f(ua," contains various notebooks on how to fine-tune a model for specific tasks in PyTorch and TensorFlow."),ua.forEach(e),Zt.forEach(e),Wt.forEach(e),this.h()},h(){u(g,"name","hf:doc:metadata"),u(g,"content",JSON.stringify(ks)),u(w,"id","finetune-a-pretrained-model"),u(w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(w,"href","#finetune-a-pretrained-model"),u(d,"class","relative group"),u(G,"href","/docs/transformers/pr_16350/en/main_classes/trainer#transformers.Trainer"),u(F,"id","data-processing"),u(O,"id","prepare-a-dataset"),u(O,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(O,"href","#prepare-a-dataset"),u(V,"class","relative group"),u(fe,"href","https://huggingface.co/datasets/yelp_review_full"),u(fe,"rel","nofollow"),u(xe,"href","https://huggingface.co/docs/datasets/process.html#map"),u(xe,"rel","nofollow"),u(c,"id","trainer"),u(oe,"id","train"),u(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(oe,"href","#train"),u(K,"class","relative group"),u(Re,"id","pytorch_native"),u(Ce,"id","train-in-native-pytorch"),u(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ce,"href","#train-in-native-pytorch"),u(ne,"class","relative group"),u(zt,"id","additional-resources"),u(Te,"id","additional-resources"),u(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Te,"href","#additional-resources"),u(Ee,"class","relative group"),u(Et,"href","https://github.com/huggingface/transformers/tree/master/examples"),u(Et,"rel","nofollow"),u($t,"href","notebooks")},m(s,_){t(document.head,g),i(s,A,_),i(s,d,_),t(d,w),t(w,q),k(N,q,null),t(d,X),t(d,x),t(x,D),i(s,I,_),k(S,s,_),i(s,Z,_),i(s,Q,_),t(Q,Oe),i(s,Be,_),i(s,M,_),t(M,Fe),t(Fe,le),t(Fe,G),t(G,te),t(Fe,ge),t(M,Ae),t(M,ae),t(ae,Ze),t(M,ie),t(M,Qe),t(Qe,U),i(s,lt,_),i(s,F,_),i(s,L,_),i(s,V,_),t(V,O),t(O,it),k(He,it,null),t(V,pe),t(V,pt),t(pt,xt),i(s,Pe,_),k(_e,s,_),i(s,yt,_),i(s,Ne,_),t(Ne,B),i(s,Ve,_),i(s,z,_),t(z,H),t(z,fe),t(fe,ce),t(z,Ye),i(s,qe,_),k($e,s,_),i(s,et,_),i(s,C,_),t(C,ve),t(C,xe),t(xe,Y),t(Y,se),t(C,we),i(s,Ie,_),k(W,s,_),i(s,ye,_),i(s,tt,_),t(tt,bt),i(s,re,_),k(me,s,_),i(s,We,_),i(s,c,_),i(s,P,_),i(s,K,_),t(K,oe),t(oe,ze),k(be,ze,null),t(K,R),t(K,ft),t(ft,Le),i(s,ke,_),k(ee,s,_),i(s,je,_),i(s,Re,_),i(s,Ge,_),i(s,ne,_),t(ne,Ce),t(Ce,kt),k(Me,kt,null),t(ne,he),t(ne,Ue),t(Ue,ue),i(s,ct,_),k(at,s,_),i(s,Rt,_),i(s,zt,_),i(s,mt,_),i(s,Ee,_),t(Ee,Te),t(Te,Ke),k(de,Ke,null),t(Ee,Mt),t(Ee,ht),t(ht,Gt),i(s,st,_),i(s,Ct,_),t(Ct,ut),i(s,dt,_),i(s,rt,_),t(rt,jt),t(jt,Ft),t(Ft,Et),t(Et,Tt),t(Ft,At),t(rt,gt),t(rt,Je),t(Je,_t),t(_t,$t),t($t,Ut),t(_t,vt),ot=!0},p(s,[_]){const r={};_&2&&(r.$$scope={dirty:_,ctx:s}),ee.$set(r);const v={};_&2&&(v.$$scope={dirty:_,ctx:s}),at.$set(v)},i(s){ot||(j(N.$$.fragment,s),j(S.$$.fragment,s),j(He.$$.fragment,s),j(_e.$$.fragment,s),j($e.$$.fragment,s),j(W.$$.fragment,s),j(me.$$.fragment,s),j(be.$$.fragment,s),j(ee.$$.fragment,s),j(Me.$$.fragment,s),j(at.$$.fragment,s),j(de.$$.fragment,s),ot=!0)},o(s){E(N.$$.fragment,s),E(S.$$.fragment,s),E(He.$$.fragment,s),E(_e.$$.fragment,s),E($e.$$.fragment,s),E(W.$$.fragment,s),E(me.$$.fragment,s),E(be.$$.fragment,s),E(ee.$$.fragment,s),E(Me.$$.fragment,s),E(at.$$.fragment,s),E(de.$$.fragment,s),ot=!1},d(s){e(g),s&&e(A),s&&e(d),T(N),s&&e(I),T(S,s),s&&e(Z),s&&e(Q),s&&e(Be),s&&e(M),s&&e(lt),s&&e(F),s&&e(L),s&&e(V),T(He),s&&e(Pe),T(_e,s),s&&e(yt),s&&e(Ne),s&&e(Ve),s&&e(z),s&&e(qe),T($e,s),s&&e(et),s&&e(C),s&&e(Ie),T(W,s),s&&e(ye),s&&e(tt),s&&e(re),T(me,s),s&&e(We),s&&e(c),s&&e(P),s&&e(K),T(be),s&&e(ke),T(ee,s),s&&e(je),s&&e(Re),s&&e(Ge),s&&e(ne),T(Me),s&&e(ct),T(at,s),s&&e(Rt),s&&e(zt),s&&e(mt),s&&e(Ee),T(de),s&&e(st),s&&e(Ct),s&&e(dt),s&&e(rt)}}}const ks={local:"finetune-a-pretrained-model",sections:[{local:"prepare-a-dataset",title:"Prepare a dataset"},{local:"train",sections:[{local:"training-hyperparameters",title:"Training hyperparameters"},{local:"metrics",title:"Metrics"},{local:"trainer",title:"Trainer"},{local:"convert-dataset-to-tensorflow-format",title:"Convert dataset to TensorFlow format"},{local:"compile-and-fit",title:"Compile and fit"}],title:"Train"},{local:"train-in-native-pytorch",sections:[{local:"dataloader",title:"DataLoader"},{local:"optimizer-and-learning-rate-scheduler",title:"Optimizer and learning rate scheduler"},{local:"training-loop",title:"Training loop"},{local:"metrics",title:"Metrics"}],title:"Train in native PyTorch"},{local:"additional-resources",title:"Additional resources"}],title:"Fine-tune a pretrained model"};function js(Se,g,A){let{fw:d}=g;return Se.$$set=w=>{"fw"in w&&A(0,d=w.fw)},[d]}class Cs extends is{constructor(g){super();ps(this,g,js,bs,fs,{fw:0})}}export{Cs as default,ks as metadata};
