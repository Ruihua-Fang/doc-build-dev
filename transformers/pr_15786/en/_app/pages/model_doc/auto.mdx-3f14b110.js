import{S as D_t,i as q_t,s as G_t,e as a,k as l,w as f,t as o,M as O_t,c as n,d as t,m as i,a as s,x as m,h as r,b as c,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-4833417e.js";import{T as $3r}from"../../chunks/Tip-fffd6df1.js";import{D as E}from"../../chunks/Docstring-44c5af16.js";import{C as w}from"../../chunks/CodeBlock-90ffda97.js";import{I as z}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-04a16537.js";function X_t(yi){let J,Ae,ie,me,to,ce,ue,Do,wi,Ef,sa,Ai,Li,t4,yf,ye,io,Bi,Pn,a4,$n,In,n4,xi,jn,s4,ki,wf,$a;return{c(){J=a("p"),Ae=o("If your "),ie=a("code"),me=o("NewModelConfig"),to=o(" is a subclass of "),ce=a("code"),ue=o("PretrainedConfig"),Do=o(`, make sure its
`),wi=a("code"),Ef=o("model_type"),sa=o(" attribute is set to the same key you use when registering the config (here "),Ai=a("code"),Li=o('"new-model"'),t4=o(")."),yf=l(),ye=a("p"),io=o("Likewise, if your "),Bi=a("code"),Pn=o("NewModel"),a4=o(" is a subclass of "),$n=a("a"),In=o("PreTrainedModel"),n4=o(`, make sure its
`),xi=a("code"),jn=o("config_class"),s4=o(` attribute is set to the same class you use when registering the model (here
`),ki=a("code"),wf=o("NewModelConfig"),$a=o(")."),this.h()},l(co){J=n(co,"P",{});var ge=s(J);Ae=r(ge,"If your "),ie=n(ge,"CODE",{});var O0=s(ie);me=r(O0,"NewModelConfig"),O0.forEach(t),to=r(ge," is a subclass of "),ce=n(ge,"CODE",{});var Ri=s(ce);ue=r(Ri,"PretrainedConfig"),Ri.forEach(t),Do=r(ge,`, make sure its
`),wi=n(ge,"CODE",{});var X0=s(wi);Ef=r(X0,"model_type"),X0.forEach(t),sa=r(ge," attribute is set to the same key you use when registering the config (here "),Ai=n(ge,"CODE",{});var z0=s(Ai);Li=r(z0,'"new-model"'),z0.forEach(t),t4=r(ge,")."),ge.forEach(t),yf=i(co),ye=n(co,"P",{});var qo=s(ye);io=r(qo,"Likewise, if your "),Bi=n(qo,"CODE",{});var Ia=s(Bi);Pn=r(Ia,"NewModel"),Ia.forEach(t),a4=r(qo," is a subclass of "),$n=n(qo,"A",{href:!0});var V0=s($n);In=r(V0,"PreTrainedModel"),V0.forEach(t),n4=r(qo,`, make sure its
`),xi=n(qo,"CODE",{});var Af=s(xi);jn=r(Af,"config_class"),Af.forEach(t),s4=r(qo,` attribute is set to the same class you use when registering the model (here
`),ki=n(qo,"CODE",{});var W0=s(ki);wf=r(W0,"NewModelConfig"),W0.forEach(t),$a=r(qo,")."),qo.forEach(t),this.h()},h(){c($n,"href","/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel")},m(co,ge){b(co,J,ge),e(J,Ae),e(J,ie),e(ie,me),e(J,to),e(J,ce),e(ce,ue),e(J,Do),e(J,wi),e(wi,Ef),e(J,sa),e(J,Ai),e(Ai,Li),e(J,t4),b(co,yf,ge),b(co,ye,ge),e(ye,io),e(ye,Bi),e(Bi,Pn),e(ye,a4),e(ye,$n),e($n,In),e(ye,n4),e(ye,xi),e(xi,jn),e(ye,s4),e(ye,ki),e(ki,wf),e(ye,$a)},d(co){co&&t(J),co&&t(yf),co&&t(ye)}}}function z_t(yi){let J,Ae,ie,me,to;return{c(){J=a("p"),Ae=o("Passing "),ie=a("code"),me=o("use_auth_token=True"),to=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Ae=r(ue,"Passing "),ie=n(ue,"CODE",{});var Do=s(ie);me=r(Do,"use_auth_token=True"),Do.forEach(t),to=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Ae),e(J,ie),e(ie,me),e(J,to)},d(ce){ce&&t(J)}}}function V_t(yi){let J,Ae,ie,me,to;return{c(){J=a("p"),Ae=o("Passing "),ie=a("code"),me=o("use_auth_token=True"),to=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Ae=r(ue,"Passing "),ie=n(ue,"CODE",{});var Do=s(ie);me=r(Do,"use_auth_token=True"),Do.forEach(t),to=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Ae),e(J,ie),e(ie,me),e(J,to)},d(ce){ce&&t(J)}}}function W_t(yi){let J,Ae,ie,me,to,ce,ue,Do,wi,Ef,sa,Ai,Li,t4,yf,ye,io,Bi,Pn,a4,$n,In,n4,xi,jn,s4,ki,wf,$a,co,ge,O0,Ri,X0,z0,qo,Ia,V0,Af,W0,Fke,fLe,Si,Lf,qV,l4,Cke,GV,Mke,mLe,Nn,Eke,OV,yke,wke,XV,Ake,Lke,gLe,i4,hLe,Q0,Bke,pLe,Bf,_Le,Pi,xf,zV,d4,xke,VV,kke,uLe,Go,c4,Rke,f4,Ske,H0,Pke,$ke,Ike,m4,jke,WV,Nke,Dke,qke,fo,g4,Gke,QV,Oke,Xke,$i,zke,HV,Vke,Wke,UV,Qke,Hke,Uke,v,kf,JV,Jke,Yke,U0,Kke,Zke,eRe,Rf,YV,oRe,rRe,J0,tRe,aRe,nRe,Sf,KV,sRe,lRe,Y0,iRe,dRe,cRe,Pf,ZV,fRe,mRe,K0,gRe,hRe,pRe,$f,eW,_Re,uRe,Z0,bRe,vRe,TRe,If,oW,FRe,CRe,eL,MRe,ERe,yRe,jf,rW,wRe,ARe,oL,LRe,BRe,xRe,Nf,tW,kRe,RRe,rL,SRe,PRe,$Re,Df,aW,IRe,jRe,tL,NRe,DRe,qRe,qf,nW,GRe,ORe,aL,XRe,zRe,VRe,Gf,sW,WRe,QRe,nL,HRe,URe,JRe,Of,lW,YRe,KRe,sL,ZRe,eSe,oSe,Xf,iW,rSe,tSe,lL,aSe,nSe,sSe,zf,dW,lSe,iSe,iL,dSe,cSe,fSe,Vf,cW,mSe,gSe,dL,hSe,pSe,_Se,Wf,fW,uSe,bSe,cL,vSe,TSe,FSe,Qf,mW,CSe,MSe,fL,ESe,ySe,wSe,Hf,gW,ASe,LSe,mL,BSe,xSe,kSe,Uf,hW,RSe,SSe,gL,PSe,$Se,ISe,Jf,pW,jSe,NSe,hL,DSe,qSe,GSe,Yf,_W,OSe,XSe,pL,zSe,VSe,WSe,Kf,uW,QSe,HSe,_L,USe,JSe,YSe,Zf,bW,KSe,ZSe,uL,ePe,oPe,rPe,em,vW,tPe,aPe,bL,nPe,sPe,lPe,om,TW,iPe,dPe,vL,cPe,fPe,mPe,rm,FW,gPe,hPe,TL,pPe,_Pe,uPe,tm,CW,bPe,vPe,FL,TPe,FPe,CPe,am,MW,MPe,EPe,CL,yPe,wPe,APe,nm,EW,LPe,BPe,ML,xPe,kPe,RPe,sm,yW,SPe,PPe,EL,$Pe,IPe,jPe,lm,wW,NPe,DPe,yL,qPe,GPe,OPe,im,AW,XPe,zPe,wL,VPe,WPe,QPe,dm,LW,HPe,UPe,AL,JPe,YPe,KPe,cm,BW,ZPe,e$e,LL,o$e,r$e,t$e,fm,xW,a$e,n$e,BL,s$e,l$e,i$e,mm,kW,d$e,c$e,xL,f$e,m$e,g$e,gm,RW,h$e,p$e,kL,_$e,u$e,b$e,hm,SW,v$e,T$e,RL,F$e,C$e,M$e,pm,PW,E$e,y$e,SL,w$e,A$e,L$e,_m,$W,B$e,x$e,PL,k$e,R$e,S$e,um,IW,P$e,$$e,$L,I$e,j$e,N$e,bm,jW,D$e,q$e,IL,G$e,O$e,X$e,vm,NW,z$e,V$e,jL,W$e,Q$e,H$e,Tm,DW,U$e,J$e,NL,Y$e,K$e,Z$e,Fm,qW,eIe,oIe,DL,rIe,tIe,aIe,Cm,GW,nIe,sIe,qL,lIe,iIe,dIe,Mm,OW,cIe,fIe,GL,mIe,gIe,hIe,Em,XW,pIe,_Ie,OL,uIe,bIe,vIe,ym,zW,TIe,FIe,XL,CIe,MIe,EIe,wm,VW,yIe,wIe,zL,AIe,LIe,BIe,Am,WW,xIe,kIe,VL,RIe,SIe,PIe,Lm,QW,$Ie,IIe,WL,jIe,NIe,DIe,Bm,HW,qIe,GIe,QL,OIe,XIe,zIe,xm,UW,VIe,WIe,HL,QIe,HIe,UIe,km,JW,JIe,YIe,UL,KIe,ZIe,eje,Rm,YW,oje,rje,JL,tje,aje,nje,Sm,KW,sje,lje,YL,ije,dje,cje,Pm,ZW,fje,mje,KL,gje,hje,pje,$m,eQ,_je,uje,ZL,bje,vje,Tje,Im,oQ,Fje,Cje,e9,Mje,Eje,yje,jm,rQ,wje,Aje,o9,Lje,Bje,xje,Nm,tQ,kje,Rje,r9,Sje,Pje,$je,Dm,aQ,Ije,jje,t9,Nje,Dje,qje,qm,nQ,Gje,Oje,a9,Xje,zje,Vje,Gm,sQ,Wje,Qje,n9,Hje,Uje,Jje,Om,lQ,Yje,Kje,s9,Zje,eNe,oNe,Xm,iQ,rNe,tNe,l9,aNe,nNe,sNe,zm,dQ,lNe,iNe,i9,dNe,cNe,fNe,Vm,cQ,mNe,gNe,d9,hNe,pNe,_Ne,Wm,fQ,uNe,bNe,c9,vNe,TNe,FNe,Qm,mQ,CNe,MNe,f9,ENe,yNe,wNe,Hm,gQ,ANe,LNe,m9,BNe,xNe,kNe,Um,hQ,RNe,SNe,g9,PNe,$Ne,INe,Jm,pQ,jNe,NNe,h9,DNe,qNe,GNe,Ym,_Q,ONe,XNe,p9,zNe,VNe,WNe,Km,uQ,QNe,HNe,_9,UNe,JNe,YNe,Zm,bQ,KNe,ZNe,u9,eDe,oDe,rDe,eg,vQ,tDe,aDe,b9,nDe,sDe,lDe,og,TQ,iDe,dDe,v9,cDe,fDe,mDe,rg,FQ,gDe,hDe,T9,pDe,_De,uDe,tg,CQ,bDe,vDe,F9,TDe,FDe,CDe,ag,MQ,MDe,EDe,C9,yDe,wDe,ADe,ng,EQ,LDe,BDe,M9,xDe,kDe,RDe,sg,yQ,SDe,PDe,E9,$De,IDe,jDe,lg,wQ,NDe,DDe,y9,qDe,GDe,ODe,ig,AQ,XDe,zDe,w9,VDe,WDe,QDe,dg,LQ,HDe,UDe,A9,JDe,YDe,KDe,cg,BQ,ZDe,eqe,L9,oqe,rqe,tqe,fg,xQ,aqe,nqe,B9,sqe,lqe,iqe,mg,kQ,dqe,cqe,x9,fqe,mqe,gqe,gg,RQ,hqe,pqe,k9,_qe,uqe,bqe,SQ,vqe,Tqe,h4,Fqe,hg,p4,Cqe,PQ,Mqe,bLe,Ii,pg,$Q,_4,Eqe,IQ,yqe,vLe,Oo,u4,wqe,b4,Aqe,R9,Lqe,Bqe,xqe,v4,kqe,jQ,Rqe,Sqe,Pqe,mo,T4,$qe,NQ,Iqe,jqe,ja,Nqe,DQ,Dqe,qqe,qQ,Gqe,Oqe,GQ,Xqe,zqe,Vqe,M,Dn,OQ,Wqe,Qqe,S9,Hqe,Uqe,P9,Jqe,Yqe,Kqe,qn,XQ,Zqe,eGe,$9,oGe,rGe,I9,tGe,aGe,nGe,Gn,zQ,sGe,lGe,j9,iGe,dGe,N9,cGe,fGe,mGe,_g,VQ,gGe,hGe,D9,pGe,_Ge,uGe,On,WQ,bGe,vGe,q9,TGe,FGe,G9,CGe,MGe,EGe,ug,QQ,yGe,wGe,O9,AGe,LGe,BGe,bg,HQ,xGe,kGe,X9,RGe,SGe,PGe,vg,UQ,$Ge,IGe,z9,jGe,NGe,DGe,Xn,JQ,qGe,GGe,V9,OGe,XGe,W9,zGe,VGe,WGe,zn,YQ,QGe,HGe,Q9,UGe,JGe,H9,YGe,KGe,ZGe,Vn,KQ,eOe,oOe,U9,rOe,tOe,J9,aOe,nOe,sOe,Tg,ZQ,lOe,iOe,Y9,dOe,cOe,fOe,Fg,eH,mOe,gOe,K9,hOe,pOe,_Oe,Wn,oH,uOe,bOe,Z9,vOe,TOe,eB,FOe,COe,MOe,Cg,rH,EOe,yOe,oB,wOe,AOe,LOe,Qn,tH,BOe,xOe,rB,kOe,ROe,tB,SOe,POe,$Oe,Hn,aH,IOe,jOe,aB,NOe,DOe,nB,qOe,GOe,OOe,Un,nH,XOe,zOe,sB,VOe,WOe,sH,QOe,HOe,UOe,Mg,lH,JOe,YOe,lB,KOe,ZOe,eXe,Jn,iH,oXe,rXe,iB,tXe,aXe,dB,nXe,sXe,lXe,Eg,dH,iXe,dXe,cB,cXe,fXe,mXe,Yn,cH,gXe,hXe,fB,pXe,_Xe,mB,uXe,bXe,vXe,Kn,fH,TXe,FXe,gB,CXe,MXe,hB,EXe,yXe,wXe,Zn,mH,AXe,LXe,pB,BXe,xXe,_B,kXe,RXe,SXe,yg,gH,PXe,$Xe,uB,IXe,jXe,NXe,es,hH,DXe,qXe,bB,GXe,OXe,vB,XXe,zXe,VXe,wg,pH,WXe,QXe,TB,HXe,UXe,JXe,os,_H,YXe,KXe,FB,ZXe,eze,CB,oze,rze,tze,rs,uH,aze,nze,MB,sze,lze,EB,ize,dze,cze,ts,bH,fze,mze,yB,gze,hze,wB,pze,_ze,uze,as,vH,bze,vze,AB,Tze,Fze,LB,Cze,Mze,Eze,Ag,TH,yze,wze,BB,Aze,Lze,Bze,ns,FH,xze,kze,xB,Rze,Sze,kB,Pze,$ze,Ize,ss,CH,jze,Nze,RB,Dze,qze,SB,Gze,Oze,Xze,ls,MH,zze,Vze,PB,Wze,Qze,$B,Hze,Uze,Jze,is,EH,Yze,Kze,IB,Zze,eVe,jB,oVe,rVe,tVe,ds,yH,aVe,nVe,NB,sVe,lVe,DB,iVe,dVe,cVe,cs,wH,fVe,mVe,qB,gVe,hVe,GB,pVe,_Ve,uVe,Lg,AH,bVe,vVe,OB,TVe,FVe,CVe,fs,LH,MVe,EVe,XB,yVe,wVe,zB,AVe,LVe,BVe,Bg,BH,xVe,kVe,VB,RVe,SVe,PVe,xg,xH,$Ve,IVe,WB,jVe,NVe,DVe,ms,kH,qVe,GVe,QB,OVe,XVe,HB,zVe,VVe,WVe,gs,RH,QVe,HVe,UB,UVe,JVe,JB,YVe,KVe,ZVe,kg,SH,eWe,oWe,YB,rWe,tWe,aWe,hs,PH,nWe,sWe,KB,lWe,iWe,ZB,dWe,cWe,fWe,ps,$H,mWe,gWe,ex,hWe,pWe,ox,_We,uWe,bWe,_s,IH,vWe,TWe,rx,FWe,CWe,tx,MWe,EWe,yWe,us,jH,wWe,AWe,ax,LWe,BWe,nx,xWe,kWe,RWe,bs,NH,SWe,PWe,sx,$We,IWe,lx,jWe,NWe,DWe,Rg,DH,qWe,GWe,ix,OWe,XWe,zWe,Sg,qH,VWe,WWe,dx,QWe,HWe,UWe,Pg,GH,JWe,YWe,cx,KWe,ZWe,eQe,$g,OH,oQe,rQe,fx,tQe,aQe,nQe,vs,XH,sQe,lQe,mx,iQe,dQe,gx,cQe,fQe,mQe,Ig,zH,gQe,hQe,hx,pQe,_Qe,uQe,Ts,VH,bQe,vQe,px,TQe,FQe,_x,CQe,MQe,EQe,Fs,WH,yQe,wQe,ux,AQe,LQe,bx,BQe,xQe,kQe,Cs,QH,RQe,SQe,vx,PQe,$Qe,Tx,IQe,jQe,NQe,Ms,HH,DQe,qQe,Fx,GQe,OQe,Cx,XQe,zQe,VQe,Es,UH,WQe,QQe,Mx,HQe,UQe,Ex,JQe,YQe,KQe,jg,JH,ZQe,eHe,yx,oHe,rHe,tHe,Ng,YH,aHe,nHe,wx,sHe,lHe,iHe,ys,KH,dHe,cHe,Ax,fHe,mHe,Lx,gHe,hHe,pHe,ws,ZH,_He,uHe,Bx,bHe,vHe,xx,THe,FHe,CHe,As,eU,MHe,EHe,kx,yHe,wHe,Rx,AHe,LHe,BHe,Dg,oU,xHe,kHe,Sx,RHe,SHe,PHe,qg,rU,$He,IHe,Px,jHe,NHe,DHe,Gg,tU,qHe,GHe,$x,OHe,XHe,zHe,Og,aU,VHe,WHe,Ix,QHe,HHe,UHe,Ls,nU,JHe,YHe,jx,KHe,ZHe,Nx,eUe,oUe,rUe,Xg,sU,tUe,aUe,Dx,nUe,sUe,lUe,zg,lU,iUe,dUe,qx,cUe,fUe,mUe,Bs,iU,gUe,hUe,Gx,pUe,_Ue,Ox,uUe,bUe,vUe,xs,dU,TUe,FUe,Xx,CUe,MUe,zx,EUe,yUe,wUe,cU,AUe,LUe,F4,BUe,Vg,C4,xUe,fU,kUe,TLe,ji,Wg,mU,M4,RUe,gU,SUe,FLe,Xo,E4,PUe,y4,$Ue,Vx,IUe,jUe,NUe,w4,DUe,hU,qUe,GUe,OUe,Le,A4,XUe,pU,zUe,VUe,Na,WUe,_U,QUe,HUe,uU,UUe,JUe,bU,YUe,KUe,ZUe,se,Qg,vU,eJe,oJe,Wx,rJe,tJe,aJe,Hg,TU,nJe,sJe,Qx,lJe,iJe,dJe,Ug,FU,cJe,fJe,Hx,mJe,gJe,hJe,Jg,CU,pJe,_Je,Ux,uJe,bJe,vJe,Yg,MU,TJe,FJe,Jx,CJe,MJe,EJe,Kg,EU,yJe,wJe,Yx,AJe,LJe,BJe,Zg,yU,xJe,kJe,Kx,RJe,SJe,PJe,eh,wU,$Je,IJe,Zx,jJe,NJe,DJe,oh,AU,qJe,GJe,ek,OJe,XJe,zJe,rh,LU,VJe,WJe,ok,QJe,HJe,UJe,th,BU,JJe,YJe,rk,KJe,ZJe,eYe,ah,xU,oYe,rYe,tk,tYe,aYe,nYe,nh,kU,sYe,lYe,ak,iYe,dYe,cYe,sh,RU,fYe,mYe,nk,gYe,hYe,pYe,lh,SU,_Ye,uYe,sk,bYe,vYe,TYe,ih,FYe,PU,CYe,MYe,L4,EYe,dh,B4,yYe,$U,wYe,CLe,Ni,ch,IU,x4,AYe,jU,LYe,MLe,zo,k4,BYe,R4,xYe,lk,kYe,RYe,SYe,S4,PYe,NU,$Ye,IYe,jYe,Be,P4,NYe,DU,DYe,qYe,Di,GYe,qU,OYe,XYe,GU,zYe,VYe,WYe,we,fh,OU,QYe,HYe,ik,UYe,JYe,YYe,mh,XU,KYe,ZYe,dk,eKe,oKe,rKe,gh,zU,tKe,aKe,ck,nKe,sKe,lKe,hh,VU,iKe,dKe,fk,cKe,fKe,mKe,ph,WU,gKe,hKe,mk,pKe,_Ke,uKe,_h,QU,bKe,vKe,gk,TKe,FKe,CKe,uh,HU,MKe,EKe,hk,yKe,wKe,AKe,bh,UU,LKe,BKe,pk,xKe,kKe,RKe,vh,SKe,JU,PKe,$Ke,$4,IKe,Th,I4,jKe,YU,NKe,ELe,qi,Fh,KU,j4,DKe,ZU,qKe,yLe,Vo,N4,GKe,Gi,OKe,eJ,XKe,zKe,oJ,VKe,WKe,QKe,D4,HKe,rJ,UKe,JKe,YKe,Nr,q4,KKe,tJ,ZKe,eZe,Oi,oZe,aJ,rZe,tZe,nJ,aZe,nZe,sZe,sJ,lZe,iZe,G4,dZe,xe,O4,cZe,lJ,fZe,mZe,Da,gZe,iJ,hZe,pZe,dJ,_Ze,uZe,cJ,bZe,vZe,TZe,F,Ch,fJ,FZe,CZe,_k,MZe,EZe,yZe,Mh,mJ,wZe,AZe,uk,LZe,BZe,xZe,Eh,gJ,kZe,RZe,bk,SZe,PZe,$Ze,yh,hJ,IZe,jZe,vk,NZe,DZe,qZe,wh,pJ,GZe,OZe,Tk,XZe,zZe,VZe,Ah,_J,WZe,QZe,Fk,HZe,UZe,JZe,Lh,uJ,YZe,KZe,Ck,ZZe,eeo,oeo,Bh,bJ,reo,teo,Mk,aeo,neo,seo,xh,vJ,leo,ieo,Ek,deo,ceo,feo,kh,TJ,meo,geo,yk,heo,peo,_eo,Rh,FJ,ueo,beo,wk,veo,Teo,Feo,Sh,CJ,Ceo,Meo,Ak,Eeo,yeo,weo,Ph,MJ,Aeo,Leo,Lk,Beo,xeo,keo,$h,EJ,Reo,Seo,Bk,Peo,$eo,Ieo,Ih,yJ,jeo,Neo,xk,Deo,qeo,Geo,jh,wJ,Oeo,Xeo,kk,zeo,Veo,Weo,Nh,AJ,Qeo,Heo,Rk,Ueo,Jeo,Yeo,Dh,LJ,Keo,Zeo,Sk,eoo,ooo,roo,qh,BJ,too,aoo,Pk,noo,soo,loo,Gh,xJ,ioo,doo,$k,coo,foo,moo,Oh,kJ,goo,hoo,Ik,poo,_oo,uoo,Xh,RJ,boo,voo,jk,Too,Foo,Coo,zh,SJ,Moo,Eoo,Nk,yoo,woo,Aoo,Vh,PJ,Loo,Boo,Dk,xoo,koo,Roo,Wh,$J,Soo,Poo,qk,$oo,Ioo,joo,ks,IJ,Noo,Doo,Gk,qoo,Goo,Ok,Ooo,Xoo,zoo,Qh,jJ,Voo,Woo,Xk,Qoo,Hoo,Uoo,Hh,NJ,Joo,Yoo,zk,Koo,Zoo,ero,Uh,DJ,oro,rro,Vk,tro,aro,nro,Jh,qJ,sro,lro,Wk,iro,dro,cro,Yh,GJ,fro,mro,Qk,gro,hro,pro,Kh,OJ,_ro,uro,Hk,bro,vro,Tro,Zh,XJ,Fro,Cro,Uk,Mro,Ero,yro,ep,zJ,wro,Aro,Jk,Lro,Bro,xro,op,VJ,kro,Rro,Yk,Sro,Pro,$ro,rp,WJ,Iro,jro,Kk,Nro,Dro,qro,tp,QJ,Gro,Oro,Zk,Xro,zro,Vro,ap,HJ,Wro,Qro,eR,Hro,Uro,Jro,np,UJ,Yro,Kro,oR,Zro,eto,oto,sp,JJ,rto,tto,rR,ato,nto,sto,lp,YJ,lto,ito,tR,dto,cto,fto,ip,KJ,mto,gto,aR,hto,pto,_to,dp,ZJ,uto,bto,nR,vto,Tto,Fto,cp,eY,Cto,Mto,sR,Eto,yto,wto,fp,oY,Ato,Lto,lR,Bto,xto,kto,mp,rY,Rto,Sto,iR,Pto,$to,Ito,gp,tY,jto,Nto,dR,Dto,qto,Gto,hp,aY,Oto,Xto,cR,zto,Vto,Wto,pp,nY,Qto,Hto,fR,Uto,Jto,Yto,_p,sY,Kto,Zto,mR,eao,oao,rao,up,lY,tao,aao,gR,nao,sao,lao,bp,iY,iao,dao,hR,cao,fao,mao,vp,dY,gao,hao,pR,pao,_ao,uao,Tp,cY,bao,vao,_R,Tao,Fao,Cao,Fp,fY,Mao,Eao,uR,yao,wao,Aao,Cp,mY,Lao,Bao,bR,xao,kao,Rao,Mp,gY,Sao,Pao,vR,$ao,Iao,jao,Ep,hY,Nao,Dao,TR,qao,Gao,Oao,yp,pY,Xao,zao,FR,Vao,Wao,Qao,wp,_Y,Hao,Uao,CR,Jao,Yao,Kao,Ap,uY,Zao,eno,MR,ono,rno,tno,Lp,bY,ano,nno,ER,sno,lno,ino,Bp,vY,dno,cno,yR,fno,mno,gno,xp,TY,hno,pno,wR,_no,uno,bno,kp,FY,vno,Tno,AR,Fno,Cno,Mno,Rp,CY,Eno,yno,LR,wno,Ano,Lno,Sp,MY,Bno,xno,BR,kno,Rno,Sno,Pp,EY,Pno,$no,xR,Ino,jno,Nno,$p,yY,Dno,qno,kR,Gno,Ono,Xno,Ip,wY,zno,Vno,RR,Wno,Qno,Hno,jp,AY,Uno,Jno,SR,Yno,Kno,Zno,Np,LY,eso,oso,PR,rso,tso,aso,Dp,BY,nso,sso,$R,lso,iso,dso,qp,xY,cso,fso,IR,mso,gso,hso,Gp,kY,pso,_so,jR,uso,bso,vso,Op,RY,Tso,Fso,NR,Cso,Mso,Eso,Xp,SY,yso,wso,DR,Aso,Lso,Bso,zp,PY,xso,kso,qR,Rso,Sso,Pso,Vp,$Y,$so,Iso,GR,jso,Nso,Dso,Wp,IY,qso,Gso,OR,Oso,Xso,zso,Qp,jY,Vso,Wso,XR,Qso,Hso,Uso,Hp,NY,Jso,Yso,zR,Kso,Zso,elo,Up,DY,olo,rlo,VR,tlo,alo,nlo,Jp,qY,slo,llo,WR,ilo,dlo,clo,Yp,flo,GY,mlo,glo,OY,hlo,plo,XY,_lo,ulo,X4,wLe,Xi,Kp,zY,z4,blo,VY,vlo,ALe,Wo,V4,Tlo,zi,Flo,WY,Clo,Mlo,QY,Elo,ylo,wlo,W4,Alo,HY,Llo,Blo,xlo,Dr,Q4,klo,UY,Rlo,Slo,Vi,Plo,JY,$lo,Ilo,YY,jlo,Nlo,Dlo,KY,qlo,Glo,H4,Olo,ke,U4,Xlo,ZY,zlo,Vlo,qa,Wlo,eK,Qlo,Hlo,oK,Ulo,Jlo,rK,Ylo,Klo,Zlo,k,Zp,tK,eio,oio,QR,rio,tio,aio,e_,aK,nio,sio,HR,lio,iio,dio,o_,nK,cio,fio,UR,mio,gio,hio,r_,sK,pio,_io,JR,uio,bio,vio,t_,lK,Tio,Fio,YR,Cio,Mio,Eio,a_,iK,yio,wio,KR,Aio,Lio,Bio,n_,dK,xio,kio,ZR,Rio,Sio,Pio,s_,cK,$io,Iio,eS,jio,Nio,Dio,l_,fK,qio,Gio,oS,Oio,Xio,zio,i_,mK,Vio,Wio,rS,Qio,Hio,Uio,d_,gK,Jio,Yio,tS,Kio,Zio,edo,c_,hK,odo,rdo,aS,tdo,ado,ndo,f_,pK,sdo,ldo,nS,ido,ddo,cdo,m_,_K,fdo,mdo,sS,gdo,hdo,pdo,g_,uK,_do,udo,lS,bdo,vdo,Tdo,h_,bK,Fdo,Cdo,iS,Mdo,Edo,ydo,p_,vK,wdo,Ado,dS,Ldo,Bdo,xdo,__,TK,kdo,Rdo,cS,Sdo,Pdo,$do,u_,FK,Ido,jdo,fS,Ndo,Ddo,qdo,b_,CK,Gdo,Odo,mS,Xdo,zdo,Vdo,v_,MK,Wdo,Qdo,gS,Hdo,Udo,Jdo,T_,EK,Ydo,Kdo,hS,Zdo,eco,oco,F_,yK,rco,tco,pS,aco,nco,sco,C_,wK,lco,ico,_S,dco,cco,fco,M_,AK,mco,gco,uS,hco,pco,_co,E_,LK,uco,bco,bS,vco,Tco,Fco,y_,BK,Cco,Mco,vS,Eco,yco,wco,w_,xK,Aco,Lco,TS,Bco,xco,kco,A_,kK,Rco,Sco,FS,Pco,$co,Ico,L_,RK,jco,Nco,CS,Dco,qco,Gco,B_,SK,Oco,Xco,MS,zco,Vco,Wco,x_,PK,Qco,Hco,ES,Uco,Jco,Yco,k_,$K,Kco,Zco,yS,efo,ofo,rfo,R_,IK,tfo,afo,wS,nfo,sfo,lfo,S_,jK,ifo,dfo,AS,cfo,ffo,mfo,P_,NK,gfo,hfo,LS,pfo,_fo,ufo,$_,DK,bfo,vfo,BS,Tfo,Ffo,Cfo,I_,qK,Mfo,Efo,xS,yfo,wfo,Afo,j_,Lfo,GK,Bfo,xfo,OK,kfo,Rfo,XK,Sfo,Pfo,J4,LLe,Wi,N_,zK,Y4,$fo,VK,Ifo,BLe,Qo,K4,jfo,Qi,Nfo,WK,Dfo,qfo,QK,Gfo,Ofo,Xfo,Z4,zfo,HK,Vfo,Wfo,Qfo,qr,eM,Hfo,UK,Ufo,Jfo,Hi,Yfo,JK,Kfo,Zfo,YK,emo,omo,rmo,KK,tmo,amo,oM,nmo,Re,rM,smo,ZK,lmo,imo,Ga,dmo,eZ,cmo,fmo,oZ,mmo,gmo,rZ,hmo,pmo,_mo,$,D_,tZ,umo,bmo,kS,vmo,Tmo,Fmo,q_,aZ,Cmo,Mmo,RS,Emo,ymo,wmo,G_,nZ,Amo,Lmo,SS,Bmo,xmo,kmo,O_,sZ,Rmo,Smo,PS,Pmo,$mo,Imo,X_,lZ,jmo,Nmo,$S,Dmo,qmo,Gmo,z_,iZ,Omo,Xmo,IS,zmo,Vmo,Wmo,V_,dZ,Qmo,Hmo,jS,Umo,Jmo,Ymo,W_,cZ,Kmo,Zmo,NS,ego,ogo,rgo,Q_,fZ,tgo,ago,DS,ngo,sgo,lgo,H_,mZ,igo,dgo,qS,cgo,fgo,mgo,U_,gZ,ggo,hgo,GS,pgo,_go,ugo,J_,hZ,bgo,vgo,OS,Tgo,Fgo,Cgo,Y_,pZ,Mgo,Ego,XS,ygo,wgo,Ago,K_,_Z,Lgo,Bgo,zS,xgo,kgo,Rgo,Z_,uZ,Sgo,Pgo,VS,$go,Igo,jgo,eu,bZ,Ngo,Dgo,WS,qgo,Ggo,Ogo,ou,vZ,Xgo,zgo,QS,Vgo,Wgo,Qgo,ru,TZ,Hgo,Ugo,HS,Jgo,Ygo,Kgo,tu,FZ,Zgo,eho,US,oho,rho,tho,au,CZ,aho,nho,JS,sho,lho,iho,nu,MZ,dho,cho,YS,fho,mho,gho,su,EZ,hho,pho,KS,_ho,uho,bho,lu,yZ,vho,Tho,ZS,Fho,Cho,Mho,iu,wZ,Eho,yho,eP,who,Aho,Lho,du,AZ,Bho,xho,oP,kho,Rho,Sho,cu,LZ,Pho,$ho,rP,Iho,jho,Nho,fu,BZ,Dho,qho,tP,Gho,Oho,Xho,mu,xZ,zho,Vho,aP,Who,Qho,Hho,gu,kZ,Uho,Jho,nP,Yho,Kho,Zho,hu,RZ,epo,opo,sP,rpo,tpo,apo,pu,SZ,npo,spo,lP,lpo,ipo,dpo,_u,PZ,cpo,fpo,iP,mpo,gpo,hpo,uu,$Z,ppo,_po,dP,upo,bpo,vpo,bu,IZ,Tpo,Fpo,cP,Cpo,Mpo,Epo,vu,ypo,jZ,wpo,Apo,NZ,Lpo,Bpo,DZ,xpo,kpo,tM,xLe,Ui,Tu,qZ,aM,Rpo,GZ,Spo,kLe,Ho,nM,Ppo,Ji,$po,OZ,Ipo,jpo,XZ,Npo,Dpo,qpo,sM,Gpo,zZ,Opo,Xpo,zpo,Gr,lM,Vpo,VZ,Wpo,Qpo,Yi,Hpo,WZ,Upo,Jpo,QZ,Ypo,Kpo,Zpo,HZ,e_o,o_o,iM,r_o,Se,dM,t_o,UZ,a_o,n_o,Oa,s_o,JZ,l_o,i_o,YZ,d_o,c_o,KZ,f_o,m_o,g_o,I,Fu,ZZ,h_o,p_o,fP,__o,u_o,b_o,Cu,eee,v_o,T_o,mP,F_o,C_o,M_o,Mu,oee,E_o,y_o,gP,w_o,A_o,L_o,Eu,ree,B_o,x_o,hP,k_o,R_o,S_o,yu,tee,P_o,$_o,pP,I_o,j_o,N_o,wu,aee,D_o,q_o,_P,G_o,O_o,X_o,Au,nee,z_o,V_o,uP,W_o,Q_o,H_o,Lu,see,U_o,J_o,bP,Y_o,K_o,Z_o,Bu,lee,euo,ouo,vP,ruo,tuo,auo,xu,iee,nuo,suo,TP,luo,iuo,duo,ku,dee,cuo,fuo,FP,muo,guo,huo,Ru,cee,puo,_uo,CP,uuo,buo,vuo,Su,fee,Tuo,Fuo,MP,Cuo,Muo,Euo,Pu,mee,yuo,wuo,EP,Auo,Luo,Buo,$u,gee,xuo,kuo,yP,Ruo,Suo,Puo,Iu,hee,$uo,Iuo,wP,juo,Nuo,Duo,ju,pee,quo,Guo,AP,Ouo,Xuo,zuo,Nu,_ee,Vuo,Wuo,LP,Quo,Huo,Uuo,Du,uee,Juo,Yuo,BP,Kuo,Zuo,e1o,qu,bee,o1o,r1o,xP,t1o,a1o,n1o,Gu,vee,s1o,l1o,kP,i1o,d1o,c1o,Ou,Tee,f1o,m1o,RP,g1o,h1o,p1o,Xu,Fee,_1o,u1o,SP,b1o,v1o,T1o,zu,Cee,F1o,C1o,PP,M1o,E1o,y1o,Vu,Mee,w1o,A1o,$P,L1o,B1o,x1o,Wu,Eee,k1o,R1o,IP,S1o,P1o,$1o,Qu,yee,I1o,j1o,jP,N1o,D1o,q1o,Hu,wee,G1o,O1o,NP,X1o,z1o,V1o,Uu,Aee,W1o,Q1o,DP,H1o,U1o,J1o,Ju,Lee,Y1o,K1o,Bee,Z1o,ebo,obo,Yu,xee,rbo,tbo,qP,abo,nbo,sbo,Ku,kee,lbo,ibo,GP,dbo,cbo,fbo,Zu,Ree,mbo,gbo,OP,hbo,pbo,_bo,e1,See,ubo,bbo,XP,vbo,Tbo,Fbo,o1,Cbo,Pee,Mbo,Ebo,$ee,ybo,wbo,Iee,Abo,Lbo,cM,RLe,Ki,r1,jee,fM,Bbo,Nee,xbo,SLe,Uo,mM,kbo,Zi,Rbo,Dee,Sbo,Pbo,qee,$bo,Ibo,jbo,gM,Nbo,Gee,Dbo,qbo,Gbo,Or,hM,Obo,Oee,Xbo,zbo,ed,Vbo,Xee,Wbo,Qbo,zee,Hbo,Ubo,Jbo,Vee,Ybo,Kbo,pM,Zbo,Pe,_M,e5o,Wee,o5o,r5o,Xa,t5o,Qee,a5o,n5o,Hee,s5o,l5o,Uee,i5o,d5o,c5o,ae,t1,Jee,f5o,m5o,zP,g5o,h5o,p5o,a1,Yee,_5o,u5o,VP,b5o,v5o,T5o,n1,Kee,F5o,C5o,WP,M5o,E5o,y5o,s1,Zee,w5o,A5o,QP,L5o,B5o,x5o,l1,eoe,k5o,R5o,HP,S5o,P5o,$5o,i1,ooe,I5o,j5o,UP,N5o,D5o,q5o,d1,roe,G5o,O5o,JP,X5o,z5o,V5o,c1,toe,W5o,Q5o,YP,H5o,U5o,J5o,f1,aoe,Y5o,K5o,KP,Z5o,e2o,o2o,m1,noe,r2o,t2o,ZP,a2o,n2o,s2o,g1,soe,l2o,i2o,e$,d2o,c2o,f2o,h1,loe,m2o,g2o,o$,h2o,p2o,_2o,p1,ioe,u2o,b2o,r$,v2o,T2o,F2o,_1,doe,C2o,M2o,t$,E2o,y2o,w2o,u1,coe,A2o,L2o,a$,B2o,x2o,k2o,b1,foe,R2o,S2o,n$,P2o,$2o,I2o,v1,j2o,moe,N2o,D2o,goe,q2o,G2o,hoe,O2o,X2o,uM,PLe,od,T1,poe,bM,z2o,_oe,V2o,$Le,Jo,vM,W2o,rd,Q2o,uoe,H2o,U2o,boe,J2o,Y2o,K2o,TM,Z2o,voe,evo,ovo,rvo,Xr,FM,tvo,Toe,avo,nvo,td,svo,Foe,lvo,ivo,Coe,dvo,cvo,fvo,Moe,mvo,gvo,CM,hvo,$e,MM,pvo,Eoe,_vo,uvo,za,bvo,yoe,vvo,Tvo,woe,Fvo,Cvo,Aoe,Mvo,Evo,yvo,A,F1,Loe,wvo,Avo,s$,Lvo,Bvo,xvo,C1,Boe,kvo,Rvo,l$,Svo,Pvo,$vo,M1,xoe,Ivo,jvo,i$,Nvo,Dvo,qvo,E1,koe,Gvo,Ovo,d$,Xvo,zvo,Vvo,y1,Roe,Wvo,Qvo,c$,Hvo,Uvo,Jvo,w1,Soe,Yvo,Kvo,f$,Zvo,e6o,o6o,A1,Poe,r6o,t6o,m$,a6o,n6o,s6o,L1,$oe,l6o,i6o,g$,d6o,c6o,f6o,B1,Ioe,m6o,g6o,h$,h6o,p6o,_6o,x1,joe,u6o,b6o,p$,v6o,T6o,F6o,k1,Noe,C6o,M6o,_$,E6o,y6o,w6o,R1,Doe,A6o,L6o,u$,B6o,x6o,k6o,S1,qoe,R6o,S6o,b$,P6o,$6o,I6o,P1,Goe,j6o,N6o,v$,D6o,q6o,G6o,$1,Ooe,O6o,X6o,T$,z6o,V6o,W6o,I1,Xoe,Q6o,H6o,F$,U6o,J6o,Y6o,j1,zoe,K6o,Z6o,C$,eTo,oTo,rTo,N1,Voe,tTo,aTo,M$,nTo,sTo,lTo,D1,Woe,iTo,dTo,E$,cTo,fTo,mTo,q1,Qoe,gTo,hTo,y$,pTo,_To,uTo,G1,Hoe,bTo,vTo,w$,TTo,FTo,CTo,O1,Uoe,MTo,ETo,A$,yTo,wTo,ATo,X1,Joe,LTo,BTo,L$,xTo,kTo,RTo,z1,Yoe,STo,PTo,B$,$To,ITo,jTo,V1,Koe,NTo,DTo,x$,qTo,GTo,OTo,W1,Zoe,XTo,zTo,k$,VTo,WTo,QTo,Q1,ere,HTo,UTo,R$,JTo,YTo,KTo,H1,ore,ZTo,e7o,S$,o7o,r7o,t7o,U1,rre,a7o,n7o,P$,s7o,l7o,i7o,J1,tre,d7o,c7o,$$,f7o,m7o,g7o,Y1,are,h7o,p7o,I$,_7o,u7o,b7o,K1,nre,v7o,T7o,j$,F7o,C7o,M7o,Z1,sre,E7o,y7o,N$,w7o,A7o,L7o,eb,lre,B7o,x7o,D$,k7o,R7o,S7o,ob,ire,P7o,$7o,q$,I7o,j7o,N7o,rb,dre,D7o,q7o,G$,G7o,O7o,X7o,tb,cre,z7o,V7o,O$,W7o,Q7o,H7o,ab,fre,U7o,J7o,X$,Y7o,K7o,Z7o,nb,mre,e8o,o8o,z$,r8o,t8o,a8o,sb,gre,n8o,s8o,V$,l8o,i8o,d8o,lb,hre,c8o,f8o,W$,m8o,g8o,h8o,ib,pre,p8o,_8o,Q$,u8o,b8o,v8o,db,_re,T8o,F8o,H$,C8o,M8o,E8o,cb,ure,y8o,w8o,U$,A8o,L8o,B8o,fb,bre,x8o,k8o,J$,R8o,S8o,P8o,mb,$8o,vre,I8o,j8o,Tre,N8o,D8o,Fre,q8o,G8o,EM,ILe,ad,gb,Cre,yM,O8o,Mre,X8o,jLe,Yo,wM,z8o,nd,V8o,Ere,W8o,Q8o,yre,H8o,U8o,J8o,AM,Y8o,wre,K8o,Z8o,eFo,zr,LM,oFo,Are,rFo,tFo,sd,aFo,Lre,nFo,sFo,Bre,lFo,iFo,dFo,xre,cFo,fFo,BM,mFo,Ie,xM,gFo,kre,hFo,pFo,Va,_Fo,Rre,uFo,bFo,Sre,vFo,TFo,Pre,FFo,CFo,MFo,G,hb,$re,EFo,yFo,Y$,wFo,AFo,LFo,pb,Ire,BFo,xFo,K$,kFo,RFo,SFo,_b,jre,PFo,$Fo,Z$,IFo,jFo,NFo,ub,Nre,DFo,qFo,eI,GFo,OFo,XFo,bb,Dre,zFo,VFo,oI,WFo,QFo,HFo,vb,qre,UFo,JFo,rI,YFo,KFo,ZFo,Tb,Gre,eCo,oCo,tI,rCo,tCo,aCo,Fb,Ore,nCo,sCo,aI,lCo,iCo,dCo,Cb,Xre,cCo,fCo,nI,mCo,gCo,hCo,Mb,zre,pCo,_Co,sI,uCo,bCo,vCo,Eb,Vre,TCo,FCo,lI,CCo,MCo,ECo,yb,Wre,yCo,wCo,iI,ACo,LCo,BCo,wb,Qre,xCo,kCo,dI,RCo,SCo,PCo,Ab,Hre,$Co,ICo,cI,jCo,NCo,DCo,Lb,Ure,qCo,GCo,fI,OCo,XCo,zCo,Bb,Jre,VCo,WCo,mI,QCo,HCo,UCo,xb,Yre,JCo,YCo,gI,KCo,ZCo,e4o,kb,Kre,o4o,r4o,hI,t4o,a4o,n4o,Rb,Zre,s4o,l4o,pI,i4o,d4o,c4o,Sb,ete,f4o,m4o,_I,g4o,h4o,p4o,Pb,ote,_4o,u4o,uI,b4o,v4o,T4o,$b,rte,F4o,C4o,bI,M4o,E4o,y4o,Ib,tte,w4o,A4o,vI,L4o,B4o,x4o,jb,ate,k4o,R4o,TI,S4o,P4o,$4o,Nb,nte,I4o,j4o,FI,N4o,D4o,q4o,Db,ste,G4o,O4o,CI,X4o,z4o,V4o,qb,lte,W4o,Q4o,MI,H4o,U4o,J4o,Gb,Y4o,ite,K4o,Z4o,dte,eMo,oMo,cte,rMo,tMo,kM,NLe,ld,Ob,fte,RM,aMo,mte,nMo,DLe,Ko,SM,sMo,id,lMo,gte,iMo,dMo,hte,cMo,fMo,mMo,PM,gMo,pte,hMo,pMo,_Mo,Vr,$M,uMo,_te,bMo,vMo,dd,TMo,ute,FMo,CMo,bte,MMo,EMo,yMo,vte,wMo,AMo,IM,LMo,je,jM,BMo,Tte,xMo,kMo,Wa,RMo,Fte,SMo,PMo,Cte,$Mo,IMo,Mte,jMo,NMo,DMo,na,Xb,Ete,qMo,GMo,EI,OMo,XMo,zMo,zb,yte,VMo,WMo,yI,QMo,HMo,UMo,Vb,wte,JMo,YMo,wI,KMo,ZMo,eEo,Wb,Ate,oEo,rEo,AI,tEo,aEo,nEo,Qb,Lte,sEo,lEo,LI,iEo,dEo,cEo,Hb,fEo,Bte,mEo,gEo,xte,hEo,pEo,kte,_Eo,uEo,NM,qLe,cd,Ub,Rte,DM,bEo,Ste,vEo,GLe,Zo,qM,TEo,fd,FEo,Pte,CEo,MEo,$te,EEo,yEo,wEo,GM,AEo,Ite,LEo,BEo,xEo,Wr,OM,kEo,jte,REo,SEo,md,PEo,Nte,$Eo,IEo,Dte,jEo,NEo,DEo,qte,qEo,GEo,XM,OEo,Ne,zM,XEo,Gte,zEo,VEo,Qa,WEo,Ote,QEo,HEo,Xte,UEo,JEo,zte,YEo,KEo,ZEo,D,Jb,Vte,e3o,o3o,BI,r3o,t3o,a3o,Yb,Wte,n3o,s3o,xI,l3o,i3o,d3o,Kb,Qte,c3o,f3o,kI,m3o,g3o,h3o,Zb,Hte,p3o,_3o,RI,u3o,b3o,v3o,e5,Ute,T3o,F3o,SI,C3o,M3o,E3o,o5,Jte,y3o,w3o,PI,A3o,L3o,B3o,r5,Yte,x3o,k3o,$I,R3o,S3o,P3o,t5,Kte,$3o,I3o,II,j3o,N3o,D3o,a5,Zte,q3o,G3o,jI,O3o,X3o,z3o,n5,eae,V3o,W3o,NI,Q3o,H3o,U3o,s5,oae,J3o,Y3o,DI,K3o,Z3o,eyo,l5,rae,oyo,ryo,qI,tyo,ayo,nyo,i5,tae,syo,lyo,GI,iyo,dyo,cyo,d5,aae,fyo,myo,OI,gyo,hyo,pyo,c5,nae,_yo,uyo,XI,byo,vyo,Tyo,f5,sae,Fyo,Cyo,zI,Myo,Eyo,yyo,m5,lae,wyo,Ayo,VI,Lyo,Byo,xyo,g5,iae,kyo,Ryo,WI,Syo,Pyo,$yo,h5,dae,Iyo,jyo,QI,Nyo,Dyo,qyo,p5,cae,Gyo,Oyo,HI,Xyo,zyo,Vyo,_5,fae,Wyo,Qyo,UI,Hyo,Uyo,Jyo,u5,mae,Yyo,Kyo,JI,Zyo,ewo,owo,b5,gae,rwo,two,YI,awo,nwo,swo,v5,hae,lwo,iwo,KI,dwo,cwo,fwo,T5,pae,mwo,gwo,ZI,hwo,pwo,_wo,F5,_ae,uwo,bwo,ej,vwo,Two,Fwo,C5,uae,Cwo,Mwo,oj,Ewo,ywo,wwo,M5,bae,Awo,Lwo,rj,Bwo,xwo,kwo,E5,vae,Rwo,Swo,tj,Pwo,$wo,Iwo,y5,Tae,jwo,Nwo,aj,Dwo,qwo,Gwo,w5,Fae,Owo,Xwo,nj,zwo,Vwo,Wwo,A5,Cae,Qwo,Hwo,sj,Uwo,Jwo,Ywo,L5,Kwo,Mae,Zwo,eAo,Eae,oAo,rAo,yae,tAo,aAo,VM,OLe,gd,B5,wae,WM,nAo,Aae,sAo,XLe,er,QM,lAo,hd,iAo,Lae,dAo,cAo,Bae,fAo,mAo,gAo,HM,hAo,xae,pAo,_Ao,uAo,Qr,UM,bAo,kae,vAo,TAo,pd,FAo,Rae,CAo,MAo,Sae,EAo,yAo,wAo,Pae,AAo,LAo,JM,BAo,De,YM,xAo,$ae,kAo,RAo,Ha,SAo,Iae,PAo,$Ao,jae,IAo,jAo,Nae,NAo,DAo,qAo,R,x5,Dae,GAo,OAo,lj,XAo,zAo,VAo,k5,qae,WAo,QAo,ij,HAo,UAo,JAo,R5,Gae,YAo,KAo,dj,ZAo,e0o,o0o,S5,Oae,r0o,t0o,cj,a0o,n0o,s0o,P5,Xae,l0o,i0o,fj,d0o,c0o,f0o,$5,zae,m0o,g0o,mj,h0o,p0o,_0o,I5,Vae,u0o,b0o,gj,v0o,T0o,F0o,j5,Wae,C0o,M0o,hj,E0o,y0o,w0o,N5,Qae,A0o,L0o,pj,B0o,x0o,k0o,D5,Hae,R0o,S0o,_j,P0o,$0o,I0o,q5,Uae,j0o,N0o,uj,D0o,q0o,G0o,G5,Jae,O0o,X0o,bj,z0o,V0o,W0o,O5,Yae,Q0o,H0o,vj,U0o,J0o,Y0o,X5,Kae,K0o,Z0o,Tj,eLo,oLo,rLo,z5,Zae,tLo,aLo,Fj,nLo,sLo,lLo,V5,ene,iLo,dLo,Cj,cLo,fLo,mLo,W5,one,gLo,hLo,Mj,pLo,_Lo,uLo,Q5,rne,bLo,vLo,Ej,TLo,FLo,CLo,H5,tne,MLo,ELo,yj,yLo,wLo,ALo,U5,ane,LLo,BLo,wj,xLo,kLo,RLo,J5,nne,SLo,PLo,Aj,$Lo,ILo,jLo,Y5,sne,NLo,DLo,Lj,qLo,GLo,OLo,K5,lne,XLo,zLo,Bj,VLo,WLo,QLo,Z5,ine,HLo,ULo,xj,JLo,YLo,KLo,e2,dne,ZLo,e9o,kj,o9o,r9o,t9o,o2,cne,a9o,n9o,Rj,s9o,l9o,i9o,r2,fne,d9o,c9o,Sj,f9o,m9o,g9o,t2,mne,h9o,p9o,Pj,_9o,u9o,b9o,a2,gne,v9o,T9o,$j,F9o,C9o,M9o,n2,hne,E9o,y9o,Ij,w9o,A9o,L9o,s2,pne,B9o,x9o,jj,k9o,R9o,S9o,l2,_ne,P9o,$9o,Nj,I9o,j9o,N9o,i2,une,D9o,q9o,Dj,G9o,O9o,X9o,d2,bne,z9o,V9o,qj,W9o,Q9o,H9o,c2,vne,U9o,J9o,Gj,Y9o,K9o,Z9o,f2,Tne,eBo,oBo,Oj,rBo,tBo,aBo,m2,Fne,nBo,sBo,Xj,lBo,iBo,dBo,g2,Cne,cBo,fBo,zj,mBo,gBo,hBo,h2,pBo,Mne,_Bo,uBo,Ene,bBo,vBo,yne,TBo,FBo,KM,zLe,_d,p2,wne,ZM,CBo,Ane,MBo,VLe,or,eE,EBo,ud,yBo,Lne,wBo,ABo,Bne,LBo,BBo,xBo,oE,kBo,xne,RBo,SBo,PBo,Hr,rE,$Bo,kne,IBo,jBo,bd,NBo,Rne,DBo,qBo,Sne,GBo,OBo,XBo,Pne,zBo,VBo,tE,WBo,qe,aE,QBo,$ne,HBo,UBo,Ua,JBo,Ine,YBo,KBo,jne,ZBo,exo,Nne,oxo,rxo,txo,Dne,_2,qne,axo,nxo,Vj,sxo,lxo,ixo,u2,dxo,Gne,cxo,fxo,One,mxo,gxo,Xne,hxo,pxo,nE,WLe,vd,b2,zne,sE,_xo,Vne,uxo,QLe,rr,lE,bxo,Td,vxo,Wne,Txo,Fxo,Qne,Cxo,Mxo,Exo,iE,yxo,Hne,wxo,Axo,Lxo,Ur,dE,Bxo,Une,xxo,kxo,Fd,Rxo,Jne,Sxo,Pxo,Yne,$xo,Ixo,jxo,Kne,Nxo,Dxo,cE,qxo,Ge,fE,Gxo,Zne,Oxo,Xxo,Ja,zxo,ese,Vxo,Wxo,ose,Qxo,Hxo,rse,Uxo,Jxo,Yxo,be,v2,tse,Kxo,Zxo,Wj,eko,oko,rko,T2,ase,tko,ako,Qj,nko,sko,lko,Rs,nse,iko,dko,Hj,cko,fko,Uj,mko,gko,hko,F2,sse,pko,_ko,Jj,uko,bko,vko,la,lse,Tko,Fko,Yj,Cko,Mko,Kj,Eko,yko,Zj,wko,Ako,Lko,C2,ise,Bko,xko,eN,kko,Rko,Sko,M2,dse,Pko,$ko,oN,Iko,jko,Nko,E2,cse,Dko,qko,rN,Gko,Oko,Xko,y2,fse,zko,Vko,tN,Wko,Qko,Hko,w2,Uko,mse,Jko,Yko,gse,Kko,Zko,hse,eRo,oRo,mE,HLe,Cd,A2,pse,gE,rRo,_se,tRo,ULe,tr,hE,aRo,Md,nRo,use,sRo,lRo,bse,iRo,dRo,cRo,pE,fRo,vse,mRo,gRo,hRo,Jr,_E,pRo,Tse,_Ro,uRo,Ed,bRo,Fse,vRo,TRo,Cse,FRo,CRo,MRo,Mse,ERo,yRo,uE,wRo,Oe,bE,ARo,Ese,LRo,BRo,Ya,xRo,yse,kRo,RRo,wse,SRo,PRo,Ase,$Ro,IRo,jRo,Lse,L2,Bse,NRo,DRo,aN,qRo,GRo,ORo,B2,XRo,xse,zRo,VRo,kse,WRo,QRo,Rse,HRo,URo,vE,JLe,yd,x2,Sse,TE,JRo,Pse,YRo,YLe,ar,FE,KRo,wd,ZRo,$se,eSo,oSo,Ise,rSo,tSo,aSo,CE,nSo,jse,sSo,lSo,iSo,Yr,ME,dSo,Nse,cSo,fSo,Ad,mSo,Dse,gSo,hSo,qse,pSo,_So,uSo,Gse,bSo,vSo,EE,TSo,Xe,yE,FSo,Ose,CSo,MSo,Ka,ESo,Xse,ySo,wSo,zse,ASo,LSo,Vse,BSo,xSo,kSo,ao,k2,Wse,RSo,SSo,nN,PSo,$So,ISo,R2,Qse,jSo,NSo,sN,DSo,qSo,GSo,S2,Hse,OSo,XSo,lN,zSo,VSo,WSo,P2,Use,QSo,HSo,iN,USo,JSo,YSo,$2,Jse,KSo,ZSo,dN,ePo,oPo,rPo,I2,Yse,tPo,aPo,cN,nPo,sPo,lPo,j2,Kse,iPo,dPo,fN,cPo,fPo,mPo,N2,gPo,Zse,hPo,pPo,ele,_Po,uPo,ole,bPo,vPo,wE,KLe,Ld,D2,rle,AE,TPo,tle,FPo,ZLe,nr,LE,CPo,Bd,MPo,ale,EPo,yPo,nle,wPo,APo,LPo,BE,BPo,sle,xPo,kPo,RPo,Kr,xE,SPo,lle,PPo,$Po,xd,IPo,ile,jPo,NPo,dle,DPo,qPo,GPo,cle,OPo,XPo,kE,zPo,ze,RE,VPo,fle,WPo,QPo,Za,HPo,mle,UPo,JPo,gle,YPo,KPo,hle,ZPo,e$o,o$o,kd,q2,ple,r$o,t$o,mN,a$o,n$o,s$o,G2,_le,l$o,i$o,gN,d$o,c$o,f$o,O2,ule,m$o,g$o,hN,h$o,p$o,_$o,X2,u$o,ble,b$o,v$o,vle,T$o,F$o,Tle,C$o,M$o,SE,e9e,Rd,z2,Fle,PE,E$o,Cle,y$o,o9e,sr,$E,w$o,Sd,A$o,Mle,L$o,B$o,Ele,x$o,k$o,R$o,IE,S$o,yle,P$o,$$o,I$o,Zr,jE,j$o,wle,N$o,D$o,Pd,q$o,Ale,G$o,O$o,Lle,X$o,z$o,V$o,Ble,W$o,Q$o,NE,H$o,Ve,DE,U$o,xle,J$o,Y$o,en,K$o,kle,Z$o,eIo,Rle,oIo,rIo,Sle,tIo,aIo,nIo,no,V2,Ple,sIo,lIo,pN,iIo,dIo,cIo,W2,$le,fIo,mIo,_N,gIo,hIo,pIo,Q2,Ile,_Io,uIo,uN,bIo,vIo,TIo,H2,jle,FIo,CIo,bN,MIo,EIo,yIo,U2,Nle,wIo,AIo,vN,LIo,BIo,xIo,J2,Dle,kIo,RIo,TN,SIo,PIo,$Io,Y2,qle,IIo,jIo,FN,NIo,DIo,qIo,K2,GIo,Gle,OIo,XIo,Ole,zIo,VIo,Xle,WIo,QIo,qE,r9e,$d,Z2,zle,GE,HIo,Vle,UIo,t9e,lr,OE,JIo,Id,YIo,Wle,KIo,ZIo,Qle,ejo,ojo,rjo,XE,tjo,Hle,ajo,njo,sjo,et,zE,ljo,Ule,ijo,djo,jd,cjo,Jle,fjo,mjo,Yle,gjo,hjo,pjo,Kle,_jo,ujo,VE,bjo,We,WE,vjo,Zle,Tjo,Fjo,on,Cjo,eie,Mjo,Ejo,oie,yjo,wjo,rie,Ajo,Ljo,Bjo,QE,ev,tie,xjo,kjo,CN,Rjo,Sjo,Pjo,ov,aie,$jo,Ijo,MN,jjo,Njo,Djo,rv,qjo,nie,Gjo,Ojo,sie,Xjo,zjo,lie,Vjo,Wjo,HE,a9e,Nd,tv,iie,UE,Qjo,die,Hjo,n9e,ir,JE,Ujo,Dd,Jjo,cie,Yjo,Kjo,fie,Zjo,eNo,oNo,YE,rNo,mie,tNo,aNo,nNo,ot,KE,sNo,gie,lNo,iNo,qd,dNo,hie,cNo,fNo,pie,mNo,gNo,hNo,_ie,pNo,_No,ZE,uNo,Qe,e3,bNo,uie,vNo,TNo,rn,FNo,bie,CNo,MNo,vie,ENo,yNo,Tie,wNo,ANo,LNo,Gd,av,Fie,BNo,xNo,EN,kNo,RNo,SNo,nv,Cie,PNo,$No,yN,INo,jNo,NNo,sv,Mie,DNo,qNo,wN,GNo,ONo,XNo,lv,zNo,Eie,VNo,WNo,yie,QNo,HNo,wie,UNo,JNo,o3,s9e,Od,iv,Aie,r3,YNo,Lie,KNo,l9e,dr,t3,ZNo,Xd,eDo,Bie,oDo,rDo,xie,tDo,aDo,nDo,a3,sDo,kie,lDo,iDo,dDo,rt,n3,cDo,Rie,fDo,mDo,zd,gDo,Sie,hDo,pDo,Pie,_Do,uDo,bDo,$ie,vDo,TDo,s3,FDo,He,l3,CDo,Iie,MDo,EDo,tn,yDo,jie,wDo,ADo,Nie,LDo,BDo,Die,xDo,kDo,RDo,Vd,dv,qie,SDo,PDo,AN,$Do,IDo,jDo,cv,Gie,NDo,DDo,LN,qDo,GDo,ODo,fv,Oie,XDo,zDo,BN,VDo,WDo,QDo,mv,HDo,Xie,UDo,JDo,zie,YDo,KDo,Vie,ZDo,eqo,i3,i9e,Wd,gv,Wie,d3,oqo,Qie,rqo,d9e,cr,c3,tqo,Qd,aqo,Hie,nqo,sqo,Uie,lqo,iqo,dqo,f3,cqo,Jie,fqo,mqo,gqo,tt,m3,hqo,Yie,pqo,_qo,Hd,uqo,Kie,bqo,vqo,Zie,Tqo,Fqo,Cqo,ede,Mqo,Eqo,g3,yqo,Ue,h3,wqo,ode,Aqo,Lqo,an,Bqo,rde,xqo,kqo,tde,Rqo,Sqo,ade,Pqo,$qo,Iqo,nde,hv,sde,jqo,Nqo,xN,Dqo,qqo,Gqo,pv,Oqo,lde,Xqo,zqo,ide,Vqo,Wqo,dde,Qqo,Hqo,p3,c9e,Ud,_v,cde,_3,Uqo,fde,Jqo,f9e,fr,u3,Yqo,Jd,Kqo,mde,Zqo,eGo,gde,oGo,rGo,tGo,b3,aGo,hde,nGo,sGo,lGo,at,v3,iGo,pde,dGo,cGo,Yd,fGo,_de,mGo,gGo,ude,hGo,pGo,_Go,bde,uGo,bGo,T3,vGo,Je,F3,TGo,vde,FGo,CGo,nn,MGo,Tde,EGo,yGo,Fde,wGo,AGo,Cde,LGo,BGo,xGo,Mde,uv,Ede,kGo,RGo,kN,SGo,PGo,$Go,bv,IGo,yde,jGo,NGo,wde,DGo,qGo,Ade,GGo,OGo,C3,m9e,Kd,vv,Lde,M3,XGo,Bde,zGo,g9e,mr,E3,VGo,Zd,WGo,xde,QGo,HGo,kde,UGo,JGo,YGo,y3,KGo,Rde,ZGo,eOo,oOo,nt,w3,rOo,Sde,tOo,aOo,ec,nOo,Pde,sOo,lOo,$de,iOo,dOo,cOo,Ide,fOo,mOo,A3,gOo,Ye,L3,hOo,jde,pOo,_Oo,sn,uOo,Nde,bOo,vOo,Dde,TOo,FOo,qde,COo,MOo,EOo,B3,Tv,Gde,yOo,wOo,RN,AOo,LOo,BOo,Fv,Ode,xOo,kOo,SN,ROo,SOo,POo,Cv,$Oo,Xde,IOo,jOo,zde,NOo,DOo,Vde,qOo,GOo,x3,h9e,oc,Mv,Wde,k3,OOo,Qde,XOo,p9e,gr,R3,zOo,rc,VOo,Hde,WOo,QOo,Ude,HOo,UOo,JOo,S3,YOo,Jde,KOo,ZOo,eXo,st,P3,oXo,Yde,rXo,tXo,tc,aXo,Kde,nXo,sXo,Zde,lXo,iXo,dXo,ece,cXo,fXo,$3,mXo,go,I3,gXo,oce,hXo,pXo,ln,_Xo,rce,uXo,bXo,tce,vXo,TXo,ace,FXo,CXo,MXo,B,Ev,nce,EXo,yXo,PN,wXo,AXo,LXo,yv,sce,BXo,xXo,$N,kXo,RXo,SXo,wv,lce,PXo,$Xo,IN,IXo,jXo,NXo,Av,ice,DXo,qXo,jN,GXo,OXo,XXo,Lv,dce,zXo,VXo,NN,WXo,QXo,HXo,Bv,cce,UXo,JXo,DN,YXo,KXo,ZXo,xv,fce,ezo,ozo,qN,rzo,tzo,azo,kv,mce,nzo,szo,GN,lzo,izo,dzo,Rv,gce,czo,fzo,ON,mzo,gzo,hzo,Sv,hce,pzo,_zo,XN,uzo,bzo,vzo,Pv,pce,Tzo,Fzo,zN,Czo,Mzo,Ezo,$v,_ce,yzo,wzo,VN,Azo,Lzo,Bzo,Iv,uce,xzo,kzo,WN,Rzo,Szo,Pzo,jv,bce,$zo,Izo,QN,jzo,Nzo,Dzo,Nv,vce,qzo,Gzo,HN,Ozo,Xzo,zzo,Dv,Tce,Vzo,Wzo,UN,Qzo,Hzo,Uzo,Ss,Fce,Jzo,Yzo,JN,Kzo,Zzo,YN,eVo,oVo,rVo,qv,Cce,tVo,aVo,KN,nVo,sVo,lVo,Gv,Mce,iVo,dVo,ZN,cVo,fVo,mVo,Ov,Ece,gVo,hVo,eD,pVo,_Vo,uVo,Xv,yce,bVo,vVo,oD,TVo,FVo,CVo,zv,wce,MVo,EVo,rD,yVo,wVo,AVo,Vv,Ace,LVo,BVo,tD,xVo,kVo,RVo,Wv,Lce,SVo,PVo,aD,$Vo,IVo,jVo,Qv,Bce,NVo,DVo,nD,qVo,GVo,OVo,Hv,xce,XVo,zVo,sD,VVo,WVo,QVo,Uv,kce,HVo,UVo,lD,JVo,YVo,KVo,Jv,Rce,ZVo,eWo,iD,oWo,rWo,tWo,Yv,Sce,aWo,nWo,dD,sWo,lWo,iWo,Kv,Pce,dWo,cWo,cD,fWo,mWo,gWo,Zv,$ce,hWo,pWo,fD,_Wo,uWo,bWo,e6,Ice,vWo,TWo,mD,FWo,CWo,MWo,o6,jce,EWo,yWo,gD,wWo,AWo,LWo,r6,Nce,BWo,xWo,hD,kWo,RWo,SWo,t6,Dce,PWo,$Wo,pD,IWo,jWo,NWo,a6,qce,DWo,qWo,_D,GWo,OWo,XWo,n6,Gce,zWo,VWo,uD,WWo,QWo,HWo,s6,Oce,UWo,JWo,bD,YWo,KWo,ZWo,l6,Xce,eQo,oQo,vD,rQo,tQo,aQo,i6,zce,nQo,sQo,TD,lQo,iQo,dQo,d6,Vce,cQo,fQo,FD,mQo,gQo,hQo,c6,Wce,pQo,_Qo,CD,uQo,bQo,vQo,Qce,TQo,FQo,j3,_9e,ac,f6,Hce,N3,CQo,Uce,MQo,u9e,hr,D3,EQo,nc,yQo,Jce,wQo,AQo,Yce,LQo,BQo,xQo,q3,kQo,Kce,RQo,SQo,PQo,lt,G3,$Qo,Zce,IQo,jQo,sc,NQo,efe,DQo,qQo,ofe,GQo,OQo,XQo,rfe,zQo,VQo,O3,WQo,ho,X3,QQo,tfe,HQo,UQo,dn,JQo,afe,YQo,KQo,nfe,ZQo,eHo,sfe,oHo,rHo,tHo,H,m6,lfe,aHo,nHo,MD,sHo,lHo,iHo,g6,ife,dHo,cHo,ED,fHo,mHo,gHo,h6,dfe,hHo,pHo,yD,_Ho,uHo,bHo,p6,cfe,vHo,THo,wD,FHo,CHo,MHo,_6,ffe,EHo,yHo,AD,wHo,AHo,LHo,u6,mfe,BHo,xHo,LD,kHo,RHo,SHo,b6,gfe,PHo,$Ho,BD,IHo,jHo,NHo,v6,hfe,DHo,qHo,xD,GHo,OHo,XHo,T6,pfe,zHo,VHo,kD,WHo,QHo,HHo,F6,_fe,UHo,JHo,RD,YHo,KHo,ZHo,C6,ufe,eUo,oUo,SD,rUo,tUo,aUo,M6,bfe,nUo,sUo,PD,lUo,iUo,dUo,E6,vfe,cUo,fUo,$D,mUo,gUo,hUo,y6,Tfe,pUo,_Uo,ID,uUo,bUo,vUo,w6,Ffe,TUo,FUo,jD,CUo,MUo,EUo,A6,Cfe,yUo,wUo,ND,AUo,LUo,BUo,L6,Mfe,xUo,kUo,DD,RUo,SUo,PUo,B6,Efe,$Uo,IUo,qD,jUo,NUo,DUo,x6,yfe,qUo,GUo,GD,OUo,XUo,zUo,k6,wfe,VUo,WUo,OD,QUo,HUo,UUo,R6,Afe,JUo,YUo,XD,KUo,ZUo,eJo,S6,Lfe,oJo,rJo,zD,tJo,aJo,nJo,Bfe,sJo,lJo,z3,b9e,lc,P6,xfe,V3,iJo,kfe,dJo,v9e,pr,W3,cJo,ic,fJo,Rfe,mJo,gJo,Sfe,hJo,pJo,_Jo,Q3,uJo,Pfe,bJo,vJo,TJo,it,H3,FJo,$fe,CJo,MJo,dc,EJo,Ife,yJo,wJo,jfe,AJo,LJo,BJo,Nfe,xJo,kJo,U3,RJo,po,J3,SJo,Dfe,PJo,$Jo,cn,IJo,qfe,jJo,NJo,Gfe,DJo,qJo,Ofe,GJo,OJo,XJo,he,$6,Xfe,zJo,VJo,VD,WJo,QJo,HJo,I6,zfe,UJo,JJo,WD,YJo,KJo,ZJo,j6,Vfe,eYo,oYo,QD,rYo,tYo,aYo,N6,Wfe,nYo,sYo,HD,lYo,iYo,dYo,D6,Qfe,cYo,fYo,UD,mYo,gYo,hYo,q6,Hfe,pYo,_Yo,JD,uYo,bYo,vYo,G6,Ufe,TYo,FYo,YD,CYo,MYo,EYo,O6,Jfe,yYo,wYo,KD,AYo,LYo,BYo,X6,Yfe,xYo,kYo,ZD,RYo,SYo,PYo,z6,Kfe,$Yo,IYo,eq,jYo,NYo,DYo,Zfe,qYo,GYo,Y3,T9e,cc,V6,eme,K3,OYo,ome,XYo,F9e,_r,Z3,zYo,fc,VYo,rme,WYo,QYo,tme,HYo,UYo,JYo,ey,YYo,ame,KYo,ZYo,eKo,dt,oy,oKo,nme,rKo,tKo,mc,aKo,sme,nKo,sKo,lme,lKo,iKo,dKo,ime,cKo,fKo,ry,mKo,_o,ty,gKo,dme,hKo,pKo,fn,_Ko,cme,uKo,bKo,fme,vKo,TKo,mme,FKo,CKo,MKo,ay,W6,gme,EKo,yKo,oq,wKo,AKo,LKo,Q6,hme,BKo,xKo,rq,kKo,RKo,SKo,pme,PKo,$Ko,ny,C9e,gc,H6,_me,sy,IKo,ume,jKo,M9e,ur,ly,NKo,hc,DKo,bme,qKo,GKo,vme,OKo,XKo,zKo,iy,VKo,Tme,WKo,QKo,HKo,ct,dy,UKo,Fme,JKo,YKo,pc,KKo,Cme,ZKo,eZo,Mme,oZo,rZo,tZo,Eme,aZo,nZo,cy,sZo,uo,fy,lZo,yme,iZo,dZo,mn,cZo,wme,fZo,mZo,Ame,gZo,hZo,Lme,pZo,_Zo,uZo,Y,U6,Bme,bZo,vZo,tq,TZo,FZo,CZo,J6,xme,MZo,EZo,aq,yZo,wZo,AZo,Y6,kme,LZo,BZo,nq,xZo,kZo,RZo,K6,Rme,SZo,PZo,sq,$Zo,IZo,jZo,Z6,Sme,NZo,DZo,lq,qZo,GZo,OZo,eT,Pme,XZo,zZo,iq,VZo,WZo,QZo,oT,$me,HZo,UZo,dq,JZo,YZo,KZo,rT,Ime,ZZo,eer,cq,oer,rer,ter,tT,jme,aer,ner,fq,ser,ler,ier,aT,Nme,der,cer,mq,fer,mer,ger,nT,Dme,her,per,gq,_er,uer,ber,sT,qme,ver,Ter,hq,Fer,Cer,Mer,lT,Gme,Eer,yer,pq,wer,Aer,Ler,iT,Ome,Ber,xer,_q,ker,Rer,Ser,dT,Xme,Per,$er,uq,Ier,jer,Ner,cT,zme,Der,qer,bq,Ger,Oer,Xer,fT,Vme,zer,Ver,vq,Wer,Qer,Her,mT,Wme,Uer,Jer,Tq,Yer,Ker,Zer,gT,Qme,eor,oor,Fq,ror,tor,aor,hT,Hme,nor,sor,Cq,lor,ior,dor,Ume,cor,mor,my,E9e,_c,pT,Jme,gy,gor,Yme,hor,y9e,br,hy,por,uc,_or,Kme,uor,bor,Zme,vor,Tor,For,py,Cor,ege,Mor,Eor,yor,ft,_y,wor,oge,Aor,Lor,bc,Bor,rge,xor,kor,tge,Ror,Sor,Por,age,$or,Ior,uy,jor,bo,by,Nor,nge,Dor,qor,gn,Gor,sge,Oor,Xor,lge,zor,Vor,ige,Wor,Qor,Hor,pe,_T,dge,Uor,Jor,Mq,Yor,Kor,Zor,uT,cge,err,orr,Eq,rrr,trr,arr,bT,fge,nrr,srr,yq,lrr,irr,drr,vT,mge,crr,frr,wq,mrr,grr,hrr,TT,gge,prr,_rr,Aq,urr,brr,vrr,FT,hge,Trr,Frr,Lq,Crr,Mrr,Err,CT,pge,yrr,wrr,Bq,Arr,Lrr,Brr,MT,_ge,xrr,krr,xq,Rrr,Srr,Prr,ET,uge,$rr,Irr,kq,jrr,Nrr,Drr,yT,bge,qrr,Grr,Rq,Orr,Xrr,zrr,vge,Vrr,Wrr,vy,w9e,vc,wT,Tge,Ty,Qrr,Fge,Hrr,A9e,vr,Fy,Urr,Tc,Jrr,Cge,Yrr,Krr,Mge,Zrr,etr,otr,Cy,rtr,Ege,ttr,atr,ntr,mt,My,str,yge,ltr,itr,Fc,dtr,wge,ctr,ftr,Age,mtr,gtr,htr,Lge,ptr,_tr,Ey,utr,vo,yy,btr,Bge,vtr,Ttr,hn,Ftr,xge,Ctr,Mtr,kge,Etr,ytr,Rge,wtr,Atr,Ltr,X,AT,Sge,Btr,xtr,Sq,ktr,Rtr,Str,LT,Pge,Ptr,$tr,Pq,Itr,jtr,Ntr,BT,$ge,Dtr,qtr,$q,Gtr,Otr,Xtr,xT,Ige,ztr,Vtr,Iq,Wtr,Qtr,Htr,kT,jge,Utr,Jtr,jq,Ytr,Ktr,Ztr,RT,Nge,ear,oar,Nq,rar,tar,aar,ST,Dge,nar,sar,Dq,lar,iar,dar,PT,qge,car,far,qq,mar,gar,har,$T,Gge,par,_ar,Gq,uar,bar,Tar,IT,Oge,Far,Car,Oq,Mar,Ear,yar,jT,Xge,war,Aar,Xq,Lar,Bar,xar,NT,zge,kar,Rar,zq,Sar,Par,$ar,DT,Vge,Iar,jar,Vq,Nar,Dar,qar,qT,Wge,Gar,Oar,Wq,Xar,zar,Var,GT,Qge,War,Qar,Qq,Har,Uar,Jar,OT,Hge,Yar,Kar,Hq,Zar,enr,onr,XT,Uge,rnr,tnr,Uq,anr,nnr,snr,zT,Jge,lnr,inr,Jq,dnr,cnr,fnr,VT,Yge,mnr,gnr,Yq,hnr,pnr,_nr,WT,Kge,unr,bnr,Kq,vnr,Tnr,Fnr,QT,Zge,Cnr,Mnr,Zq,Enr,ynr,wnr,HT,ehe,Anr,Lnr,eG,Bnr,xnr,knr,UT,ohe,Rnr,Snr,oG,Pnr,$nr,Inr,JT,rhe,jnr,Nnr,rG,Dnr,qnr,Gnr,YT,the,Onr,Xnr,tG,znr,Vnr,Wnr,ahe,Qnr,Hnr,wy,L9e,Cc,KT,nhe,Ay,Unr,she,Jnr,B9e,Tr,Ly,Ynr,Mc,Knr,lhe,Znr,esr,ihe,osr,rsr,tsr,By,asr,dhe,nsr,ssr,lsr,gt,xy,isr,che,dsr,csr,Ec,fsr,fhe,msr,gsr,mhe,hsr,psr,_sr,ghe,usr,bsr,ky,vsr,To,Ry,Tsr,hhe,Fsr,Csr,pn,Msr,phe,Esr,ysr,_he,wsr,Asr,uhe,Lsr,Bsr,xsr,te,ZT,bhe,ksr,Rsr,aG,Ssr,Psr,$sr,e7,vhe,Isr,jsr,nG,Nsr,Dsr,qsr,o7,The,Gsr,Osr,sG,Xsr,zsr,Vsr,r7,Fhe,Wsr,Qsr,lG,Hsr,Usr,Jsr,t7,Che,Ysr,Ksr,iG,Zsr,elr,olr,a7,Mhe,rlr,tlr,dG,alr,nlr,slr,n7,Ehe,llr,ilr,cG,dlr,clr,flr,s7,yhe,mlr,glr,fG,hlr,plr,_lr,l7,whe,ulr,blr,mG,vlr,Tlr,Flr,i7,Ahe,Clr,Mlr,gG,Elr,ylr,wlr,d7,Lhe,Alr,Llr,hG,Blr,xlr,klr,c7,Bhe,Rlr,Slr,pG,Plr,$lr,Ilr,f7,xhe,jlr,Nlr,_G,Dlr,qlr,Glr,m7,khe,Olr,Xlr,uG,zlr,Vlr,Wlr,g7,Rhe,Qlr,Hlr,bG,Ulr,Jlr,Ylr,h7,She,Klr,Zlr,vG,eir,oir,rir,p7,Phe,tir,air,TG,nir,sir,lir,$he,iir,dir,Sy,x9e,yc,_7,Ihe,Py,cir,jhe,fir,k9e,Fr,$y,mir,wc,gir,Nhe,hir,pir,Dhe,_ir,uir,bir,Iy,vir,qhe,Tir,Fir,Cir,ht,jy,Mir,Ghe,Eir,yir,Ac,wir,Ohe,Air,Lir,Xhe,Bir,xir,kir,zhe,Rir,Sir,Ny,Pir,Fo,Dy,$ir,Vhe,Iir,jir,_n,Nir,Whe,Dir,qir,Qhe,Gir,Oir,Hhe,Xir,zir,Vir,Uhe,u7,Jhe,Wir,Qir,FG,Hir,Uir,Jir,Yhe,Yir,Kir,qy,R9e,Lc,b7,Khe,Gy,Zir,Zhe,edr,S9e,Cr,Oy,odr,Bc,rdr,epe,tdr,adr,ope,ndr,sdr,ldr,Xy,idr,rpe,ddr,cdr,fdr,pt,zy,mdr,tpe,gdr,hdr,xc,pdr,ape,_dr,udr,npe,bdr,vdr,Tdr,spe,Fdr,Cdr,Vy,Mdr,Co,Wy,Edr,lpe,ydr,wdr,un,Adr,ipe,Ldr,Bdr,dpe,xdr,kdr,cpe,Rdr,Sdr,Pdr,K,v7,fpe,$dr,Idr,CG,jdr,Ndr,Ddr,T7,mpe,qdr,Gdr,MG,Odr,Xdr,zdr,F7,gpe,Vdr,Wdr,EG,Qdr,Hdr,Udr,C7,hpe,Jdr,Ydr,yG,Kdr,Zdr,ecr,M7,ppe,ocr,rcr,wG,tcr,acr,ncr,E7,_pe,scr,lcr,AG,icr,dcr,ccr,y7,upe,fcr,mcr,LG,gcr,hcr,pcr,w7,bpe,_cr,ucr,BG,bcr,vcr,Tcr,A7,vpe,Fcr,Ccr,xG,Mcr,Ecr,ycr,L7,Tpe,wcr,Acr,kG,Lcr,Bcr,xcr,B7,Fpe,kcr,Rcr,RG,Scr,Pcr,$cr,x7,Cpe,Icr,jcr,SG,Ncr,Dcr,qcr,k7,Mpe,Gcr,Ocr,PG,Xcr,zcr,Vcr,R7,Epe,Wcr,Qcr,$G,Hcr,Ucr,Jcr,S7,ype,Ycr,Kcr,IG,Zcr,efr,ofr,P7,wpe,rfr,tfr,jG,afr,nfr,sfr,$7,Ape,lfr,ifr,NG,dfr,cfr,ffr,I7,Lpe,mfr,gfr,DG,hfr,pfr,_fr,j7,Bpe,ufr,bfr,qG,vfr,Tfr,Ffr,N7,xpe,Cfr,Mfr,GG,Efr,yfr,wfr,kpe,Afr,Lfr,Qy,P9e,kc,D7,Rpe,Hy,Bfr,Spe,xfr,$9e,Mr,Uy,kfr,Rc,Rfr,Ppe,Sfr,Pfr,$pe,$fr,Ifr,jfr,Jy,Nfr,Ipe,Dfr,qfr,Gfr,_t,Yy,Ofr,jpe,Xfr,zfr,Sc,Vfr,Npe,Wfr,Qfr,Dpe,Hfr,Ufr,Jfr,qpe,Yfr,Kfr,Ky,Zfr,Mo,Zy,emr,Gpe,omr,rmr,bn,tmr,Ope,amr,nmr,Xpe,smr,lmr,zpe,imr,dmr,cmr,Z,q7,Vpe,fmr,mmr,OG,gmr,hmr,pmr,G7,Wpe,_mr,umr,XG,bmr,vmr,Tmr,O7,Qpe,Fmr,Cmr,zG,Mmr,Emr,ymr,X7,Hpe,wmr,Amr,VG,Lmr,Bmr,xmr,z7,Upe,kmr,Rmr,WG,Smr,Pmr,$mr,V7,Jpe,Imr,jmr,QG,Nmr,Dmr,qmr,W7,Ype,Gmr,Omr,HG,Xmr,zmr,Vmr,Q7,Kpe,Wmr,Qmr,UG,Hmr,Umr,Jmr,H7,Zpe,Ymr,Kmr,JG,Zmr,egr,ogr,U7,e_e,rgr,tgr,YG,agr,ngr,sgr,J7,o_e,lgr,igr,KG,dgr,cgr,fgr,Y7,r_e,mgr,ggr,ZG,hgr,pgr,_gr,K7,t_e,ugr,bgr,eO,vgr,Tgr,Fgr,Z7,a_e,Cgr,Mgr,oO,Egr,ygr,wgr,e8,n_e,Agr,Lgr,rO,Bgr,xgr,kgr,o8,s_e,Rgr,Sgr,tO,Pgr,$gr,Igr,r8,l_e,jgr,Ngr,aO,Dgr,qgr,Ggr,t8,i_e,Ogr,Xgr,nO,zgr,Vgr,Wgr,a8,d_e,Qgr,Hgr,sO,Ugr,Jgr,Ygr,c_e,Kgr,Zgr,ew,I9e,Pc,n8,f_e,ow,ehr,m_e,ohr,j9e,Er,rw,rhr,$c,thr,g_e,ahr,nhr,h_e,shr,lhr,ihr,tw,dhr,p_e,chr,fhr,mhr,ut,aw,ghr,__e,hhr,phr,Ic,_hr,u_e,uhr,bhr,b_e,vhr,Thr,Fhr,v_e,Chr,Mhr,nw,Ehr,Eo,sw,yhr,T_e,whr,Ahr,vn,Lhr,F_e,Bhr,xhr,C_e,khr,Rhr,M_e,Shr,Phr,$hr,E_e,s8,y_e,Ihr,jhr,lO,Nhr,Dhr,qhr,w_e,Ghr,Ohr,lw,N9e,jc,l8,A_e,iw,Xhr,L_e,zhr,D9e,yr,dw,Vhr,Nc,Whr,B_e,Qhr,Hhr,x_e,Uhr,Jhr,Yhr,cw,Khr,k_e,Zhr,epr,opr,bt,fw,rpr,R_e,tpr,apr,Dc,npr,S_e,spr,lpr,P_e,ipr,dpr,cpr,$_e,fpr,mpr,mw,gpr,yo,gw,hpr,I_e,ppr,_pr,Tn,upr,j_e,bpr,vpr,N_e,Tpr,Fpr,D_e,Cpr,Mpr,Epr,q_e,i8,G_e,ypr,wpr,iO,Apr,Lpr,Bpr,O_e,xpr,kpr,hw,q9e,qc,d8,X_e,pw,Rpr,z_e,Spr,G9e,wr,_w,Ppr,Gc,$pr,V_e,Ipr,jpr,W_e,Npr,Dpr,qpr,uw,Gpr,Q_e,Opr,Xpr,zpr,vt,bw,Vpr,H_e,Wpr,Qpr,Oc,Hpr,U_e,Upr,Jpr,J_e,Ypr,Kpr,Zpr,Y_e,e_r,o_r,vw,r_r,wo,Tw,t_r,K_e,a_r,n_r,Fn,s_r,Z_e,l_r,i_r,eue,d_r,c_r,oue,f_r,m_r,g_r,V,c8,rue,h_r,p_r,dO,__r,u_r,b_r,f8,tue,v_r,T_r,cO,F_r,C_r,M_r,m8,aue,E_r,y_r,fO,w_r,A_r,L_r,g8,nue,B_r,x_r,mO,k_r,R_r,S_r,h8,sue,P_r,$_r,gO,I_r,j_r,N_r,p8,lue,D_r,q_r,hO,G_r,O_r,X_r,_8,iue,z_r,V_r,pO,W_r,Q_r,H_r,u8,due,U_r,J_r,_O,Y_r,K_r,Z_r,b8,cue,eur,our,uO,rur,tur,aur,v8,fue,nur,sur,bO,lur,iur,dur,T8,mue,cur,fur,vO,mur,gur,hur,F8,gue,pur,_ur,TO,uur,bur,vur,C8,hue,Tur,Fur,FO,Cur,Mur,Eur,M8,pue,yur,wur,CO,Aur,Lur,Bur,E8,_ue,xur,kur,MO,Rur,Sur,Pur,y8,uue,$ur,Iur,EO,jur,Nur,Dur,w8,bue,qur,Gur,yO,Our,Xur,zur,A8,vue,Vur,Wur,wO,Qur,Hur,Uur,L8,Tue,Jur,Yur,AO,Kur,Zur,e1r,B8,Fue,o1r,r1r,LO,t1r,a1r,n1r,x8,Cue,s1r,l1r,BO,i1r,d1r,c1r,k8,Mue,f1r,m1r,xO,g1r,h1r,p1r,R8,Eue,_1r,u1r,kO,b1r,v1r,T1r,S8,yue,F1r,C1r,RO,M1r,E1r,y1r,wue,w1r,A1r,Fw,O9e,Xc,P8,Aue,Cw,L1r,Lue,B1r,X9e,Ar,Mw,x1r,zc,k1r,Bue,R1r,S1r,xue,P1r,$1r,I1r,Ew,j1r,kue,N1r,D1r,q1r,Tt,yw,G1r,Rue,O1r,X1r,Vc,z1r,Sue,V1r,W1r,Pue,Q1r,H1r,U1r,$ue,J1r,Y1r,ww,K1r,Ao,Aw,Z1r,Iue,ebr,obr,Cn,rbr,jue,tbr,abr,Nue,nbr,sbr,Due,lbr,ibr,dbr,Mn,$8,que,cbr,fbr,SO,mbr,gbr,hbr,I8,Gue,pbr,_br,PO,ubr,bbr,vbr,j8,Oue,Tbr,Fbr,$O,Cbr,Mbr,Ebr,N8,Xue,ybr,wbr,IO,Abr,Lbr,Bbr,zue,xbr,kbr,Lw,z9e,Wc,D8,Vue,Bw,Rbr,Wue,Sbr,V9e,Lr,xw,Pbr,Qc,$br,Que,Ibr,jbr,Hue,Nbr,Dbr,qbr,kw,Gbr,Uue,Obr,Xbr,zbr,Ft,Rw,Vbr,Jue,Wbr,Qbr,Hc,Hbr,Yue,Ubr,Jbr,Kue,Ybr,Kbr,Zbr,Zue,e5r,o5r,Sw,r5r,Lo,Pw,t5r,e1e,a5r,n5r,En,s5r,o1e,l5r,i5r,r1e,d5r,c5r,t1e,f5r,m5r,g5r,fe,q8,a1e,h5r,p5r,jO,_5r,u5r,b5r,G8,n1e,v5r,T5r,NO,F5r,C5r,M5r,O8,s1e,E5r,y5r,DO,w5r,A5r,L5r,X8,l1e,B5r,x5r,qO,k5r,R5r,S5r,z8,i1e,P5r,$5r,GO,I5r,j5r,N5r,V8,d1e,D5r,q5r,OO,G5r,O5r,X5r,W8,c1e,z5r,V5r,XO,W5r,Q5r,H5r,Q8,f1e,U5r,J5r,zO,Y5r,K5r,Z5r,H8,m1e,e2r,o2r,VO,r2r,t2r,a2r,U8,g1e,n2r,s2r,WO,l2r,i2r,d2r,J8,h1e,c2r,f2r,QO,m2r,g2r,h2r,p1e,p2r,_2r,$w,W9e,Uc,Y8,_1e,Iw,u2r,u1e,b2r,Q9e,Br,jw,v2r,Jc,T2r,b1e,F2r,C2r,v1e,M2r,E2r,y2r,Nw,w2r,T1e,A2r,L2r,B2r,Ct,Dw,x2r,F1e,k2r,R2r,Yc,S2r,C1e,P2r,$2r,M1e,I2r,j2r,N2r,E1e,D2r,q2r,qw,G2r,Bo,Gw,O2r,y1e,X2r,z2r,yn,V2r,w1e,W2r,Q2r,A1e,H2r,U2r,L1e,J2r,Y2r,K2r,ve,K8,B1e,Z2r,evr,HO,ovr,rvr,tvr,Z8,x1e,avr,nvr,UO,svr,lvr,ivr,eF,k1e,dvr,cvr,JO,fvr,mvr,gvr,oF,R1e,hvr,pvr,YO,_vr,uvr,bvr,rF,S1e,vvr,Tvr,KO,Fvr,Cvr,Mvr,tF,P1e,Evr,yvr,ZO,wvr,Avr,Lvr,aF,$1e,Bvr,xvr,eX,kvr,Rvr,Svr,nF,I1e,Pvr,$vr,oX,Ivr,jvr,Nvr,sF,j1e,Dvr,qvr,rX,Gvr,Ovr,Xvr,N1e,zvr,Vvr,Ow,H9e,Kc,lF,D1e,Xw,Wvr,q1e,Qvr,U9e,xr,zw,Hvr,Zc,Uvr,G1e,Jvr,Yvr,O1e,Kvr,Zvr,e6r,Vw,o6r,X1e,r6r,t6r,a6r,Mt,Ww,n6r,z1e,s6r,l6r,ef,i6r,V1e,d6r,c6r,W1e,f6r,m6r,g6r,Q1e,h6r,p6r,Qw,_6r,xo,Hw,u6r,H1e,b6r,v6r,wn,T6r,U1e,F6r,C6r,J1e,M6r,E6r,Y1e,y6r,w6r,A6r,Te,iF,K1e,L6r,B6r,tX,x6r,k6r,R6r,dF,Z1e,S6r,P6r,aX,$6r,I6r,j6r,cF,ebe,N6r,D6r,nX,q6r,G6r,O6r,fF,obe,X6r,z6r,sX,V6r,W6r,Q6r,mF,rbe,H6r,U6r,lX,J6r,Y6r,K6r,gF,tbe,Z6r,eTr,iX,oTr,rTr,tTr,hF,abe,aTr,nTr,dX,sTr,lTr,iTr,pF,nbe,dTr,cTr,cX,fTr,mTr,gTr,_F,sbe,hTr,pTr,fX,_Tr,uTr,bTr,lbe,vTr,TTr,Uw,J9e,of,uF,ibe,Jw,FTr,dbe,CTr,Y9e,kr,Yw,MTr,rf,ETr,cbe,yTr,wTr,fbe,ATr,LTr,BTr,Kw,xTr,mbe,kTr,RTr,STr,Et,Zw,PTr,gbe,$Tr,ITr,tf,jTr,hbe,NTr,DTr,pbe,qTr,GTr,OTr,_be,XTr,zTr,eA,VTr,ko,oA,WTr,ube,QTr,HTr,An,UTr,bbe,JTr,YTr,vbe,KTr,ZTr,Tbe,e7r,o7r,r7r,Fe,bF,Fbe,t7r,a7r,mX,n7r,s7r,l7r,vF,Cbe,i7r,d7r,gX,c7r,f7r,m7r,TF,Mbe,g7r,h7r,hX,p7r,_7r,u7r,FF,Ebe,b7r,v7r,pX,T7r,F7r,C7r,CF,ybe,M7r,E7r,_X,y7r,w7r,A7r,MF,wbe,L7r,B7r,uX,x7r,k7r,R7r,EF,Abe,S7r,P7r,bX,$7r,I7r,j7r,yF,Lbe,N7r,D7r,vX,q7r,G7r,O7r,wF,Bbe,X7r,z7r,TX,V7r,W7r,Q7r,xbe,H7r,U7r,rA,K9e,af,AF,kbe,tA,J7r,Rbe,Y7r,Z9e,Rr,aA,K7r,nf,Z7r,Sbe,e8r,o8r,Pbe,r8r,t8r,a8r,nA,n8r,$be,s8r,l8r,i8r,yt,sA,d8r,Ibe,c8r,f8r,sf,m8r,jbe,g8r,h8r,Nbe,p8r,_8r,u8r,Dbe,b8r,v8r,lA,T8r,Ro,iA,F8r,qbe,C8r,M8r,Ln,E8r,Gbe,y8r,w8r,Obe,A8r,L8r,Xbe,B8r,x8r,k8r,Ce,LF,zbe,R8r,S8r,FX,P8r,$8r,I8r,BF,Vbe,j8r,N8r,CX,D8r,q8r,G8r,xF,Wbe,O8r,X8r,MX,z8r,V8r,W8r,kF,Qbe,Q8r,H8r,EX,U8r,J8r,Y8r,RF,Hbe,K8r,Z8r,yX,eFr,oFr,rFr,SF,Ube,tFr,aFr,wX,nFr,sFr,lFr,PF,Jbe,iFr,dFr,AX,cFr,fFr,mFr,$F,Ybe,gFr,hFr,LX,pFr,_Fr,uFr,IF,Kbe,bFr,vFr,BX,TFr,FFr,CFr,Zbe,MFr,EFr,dA,eBe,lf,jF,e5e,cA,yFr,o5e,wFr,oBe,Sr,fA,AFr,df,LFr,r5e,BFr,xFr,t5e,kFr,RFr,SFr,mA,PFr,a5e,$Fr,IFr,jFr,wt,gA,NFr,n5e,DFr,qFr,cf,GFr,s5e,OFr,XFr,l5e,zFr,VFr,WFr,i5e,QFr,HFr,hA,UFr,So,pA,JFr,d5e,YFr,KFr,Bn,ZFr,c5e,eCr,oCr,f5e,rCr,tCr,m5e,aCr,nCr,sCr,so,NF,g5e,lCr,iCr,xX,dCr,cCr,fCr,DF,h5e,mCr,gCr,kX,hCr,pCr,_Cr,qF,p5e,uCr,bCr,RX,vCr,TCr,FCr,GF,_5e,CCr,MCr,SX,ECr,yCr,wCr,OF,u5e,ACr,LCr,PX,BCr,xCr,kCr,XF,b5e,RCr,SCr,$X,PCr,$Cr,ICr,zF,v5e,jCr,NCr,IX,DCr,qCr,GCr,T5e,OCr,XCr,_A,rBe,ff,VF,F5e,uA,zCr,C5e,VCr,tBe,Pr,bA,WCr,mf,QCr,M5e,HCr,UCr,E5e,JCr,YCr,KCr,vA,ZCr,y5e,e4r,o4r,r4r,At,TA,t4r,w5e,a4r,n4r,gf,s4r,A5e,l4r,i4r,L5e,d4r,c4r,f4r,B5e,m4r,g4r,FA,h4r,Po,CA,p4r,x5e,_4r,u4r,xn,b4r,k5e,v4r,T4r,R5e,F4r,C4r,S5e,M4r,E4r,y4r,lo,WF,P5e,w4r,A4r,jX,L4r,B4r,x4r,QF,$5e,k4r,R4r,NX,S4r,P4r,$4r,HF,I5e,I4r,j4r,DX,N4r,D4r,q4r,UF,j5e,G4r,O4r,qX,X4r,z4r,V4r,JF,N5e,W4r,Q4r,GX,H4r,U4r,J4r,YF,D5e,Y4r,K4r,OX,Z4r,eMr,oMr,KF,q5e,rMr,tMr,XX,aMr,nMr,sMr,G5e,lMr,iMr,MA,aBe,hf,ZF,O5e,EA,dMr,X5e,cMr,nBe,$r,yA,fMr,pf,mMr,z5e,gMr,hMr,V5e,pMr,_Mr,uMr,wA,bMr,W5e,vMr,TMr,FMr,Lt,AA,CMr,Q5e,MMr,EMr,_f,yMr,H5e,wMr,AMr,U5e,LMr,BMr,xMr,J5e,kMr,RMr,LA,SMr,$o,BA,PMr,Y5e,$Mr,IMr,kn,jMr,K5e,NMr,DMr,Z5e,qMr,GMr,e2e,OMr,XMr,zMr,o2e,eC,r2e,VMr,WMr,zX,QMr,HMr,UMr,t2e,JMr,YMr,xA,sBe,uf,oC,a2e,kA,KMr,n2e,ZMr,lBe,Ir,RA,eEr,bf,oEr,s2e,rEr,tEr,l2e,aEr,nEr,sEr,SA,lEr,i2e,iEr,dEr,cEr,Bt,PA,fEr,d2e,mEr,gEr,vf,hEr,c2e,pEr,_Er,f2e,uEr,bEr,vEr,m2e,TEr,FEr,$A,CEr,Io,IA,MEr,g2e,EEr,yEr,Rn,wEr,h2e,AEr,LEr,p2e,BEr,xEr,_2e,kEr,REr,SEr,jA,rC,u2e,PEr,$Er,VX,IEr,jEr,NEr,tC,b2e,DEr,qEr,WX,GEr,OEr,XEr,v2e,zEr,VEr,NA,iBe,Tf,aC,T2e,DA,WEr,F2e,QEr,dBe,jr,qA,HEr,Ff,UEr,C2e,JEr,YEr,M2e,KEr,ZEr,e3r,GA,o3r,E2e,r3r,t3r,a3r,xt,OA,n3r,y2e,s3r,l3r,Cf,i3r,w2e,d3r,c3r,A2e,f3r,m3r,g3r,L2e,h3r,p3r,XA,_3r,jo,zA,u3r,B2e,b3r,v3r,Sn,T3r,x2e,F3r,C3r,k2e,M3r,E3r,R2e,y3r,w3r,A3r,S2e,nC,P2e,L3r,B3r,QX,x3r,k3r,R3r,$2e,S3r,P3r,VA,cBe;return ce=new z({}),$a=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased"),',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),l4=new z({}),i4=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel),`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Bf=new $3r({props:{warning:"&lcub;true}",$$slots:{default:[X_t]},$$scope:{ctx:yi}}}),d4=new z({}),c4=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/configuration_auto.py#L515"}}),g4=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/configuration_auto.py#L538",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),h4=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),p4=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/configuration_auto.py#L660",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),_4=new z({}),u4=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/tokenization_auto.py#L351"}}),T4=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15786/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),F4=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),C4=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),M4=new z({}),E4=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/feature_extraction_auto.py#L169"}}),A4=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/feature_extraction_auto.py#L183",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15786/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),ih=new $3r({props:{$$slots:{default:[z_t]},$$scope:{ctx:yi}}}),L4=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),B4=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/feature_extraction_auto.py#L310",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),x4=new z({}),k4=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/processing_auto.py#L71"}}),P4=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),vh=new $3r({props:{$$slots:{default:[V_t]},$$scope:{ctx:yi}}}),$4=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),I4=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),j4=new z({}),N4=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_auto.py#L672"}}),q4=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),G4=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),O4=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X4=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z4=new z({}),V4=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_auto.py#L679"}}),Q4=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),H4=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),U4=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),J4=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y4=new z({}),K4=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_auto.py#L694"}}),eM=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),oM=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),rM=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tM=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aM=new z({}),nM=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_auto.py#L701"}}),lM=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),iM=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),dM=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cM=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fM=new z({}),mM=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_auto.py#L708"}}),hM=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),pM=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),_M=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uM=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bM=new z({}),vM=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_auto.py#L717"}}),FM=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),CM=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),MM=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),EM=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yM=new z({}),wM=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_auto.py#L751"}}),LM=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),BM=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),xM=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kM=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RM=new z({}),SM=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_auto.py#L758"}}),$M=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),IM=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),jM=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NM=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DM=new z({}),qM=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_auto.py#L744"}}),OM=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),XM=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),zM=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),VM=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WM=new z({}),QM=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_auto.py#L726"}}),UM=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),JM=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),YM=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),KM=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZM=new z({}),eE=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_auto.py#L733"}}),rE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),tE=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),aE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nE=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sE=new z({}),lE=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_auto.py#L767"}}),dE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15786/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15786/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15786/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),cE=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),fE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mE=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gE=new z({}),hE=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_auto.py#L797"}}),_E=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),uE=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),bE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vE=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TE=new z({}),FE=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_auto.py#L804"}}),ME=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),EE=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),yE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wE=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AE=new z({}),LE=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_auto.py#L827"}}),xE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),kE=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),RE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),SE=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PE=new z({}),$E=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_auto.py#L811"}}),jE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),NE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),DE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GE=new z({}),OE=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_auto.py#L818"}}),zE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),VE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),WE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),HE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UE=new z({}),JE=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_auto.py#L836"}}),KE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),ZE=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),e3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),o3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r3=new z({}),t3=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_auto.py#L843"}}),n3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),s3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),l3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),i3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d3=new z({}),c3=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_auto.py#L790"}}),m3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),g3=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),h3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),p3=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_3=new z({}),u3=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_auto.py#L774"}}),v3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),T3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),F3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),C3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M3=new z({}),E3=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_auto.py#L781"}}),w3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),A3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),L3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k3=new z({}),R3=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_tf_auto.py#L373"}}),P3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),$3=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),I3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),j3=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),N3=new z({}),D3=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_tf_auto.py#L380"}}),G3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),O3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),X3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),z3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V3=new z({}),W3=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_tf_auto.py#L395"}}),H3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),U3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),J3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Y3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K3=new z({}),Z3=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_tf_auto.py#L402"}}),oy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),ry=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),ty=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ny=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sy=new z({}),ly=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),dy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),cy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),fy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),my=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gy=new z({}),hy=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),_y=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),uy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),by=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ty=new z({}),Fy=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),My=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Ey=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),yy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ay=new z({}),Ly=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),xy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),ky=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Ry=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Py=new z({}),$y=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),jy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Ny=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),Dy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gy=new z({}),Oy=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),zy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Vy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),Wy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hy=new z({}),Uy=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),Yy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Ky=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),Zy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ew=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ow=new z({}),rw=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),aw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),nw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),sw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iw=new z({}),dw=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),fw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),mw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),gw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pw=new z({}),_w=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_flax_auto.py#L229"}}),bw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),vw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),Tw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Fw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cw=new z({}),Mw=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),yw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),ww=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),Aw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Lw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Bw=new z({}),xw=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_flax_auto.py#L236"}}),Rw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
</ul>`,name:"config"}]}}),Sw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),Pw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$w=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Iw=new z({}),jw=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),Dw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),qw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),Gw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ow=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xw=new z({}),zw=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),Ww=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),Qw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),Hw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Uw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Jw=new z({}),Yw=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_flax_auto.py#L266"}}),Zw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),eA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),oA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tA=new z({}),aA=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_flax_auto.py#L275"}}),sA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),iA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cA=new z({}),fA=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_flax_auto.py#L282"}}),gA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),hA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),pA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_A=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uA=new z({}),bA=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_flax_auto.py#L291"}}),TA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),FA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),CA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),MA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EA=new z({}),yA=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_flax_auto.py#L298"}}),AA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),LA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),BA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kA=new z({}),RA=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_flax_auto.py#L307"}}),PA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15786/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),$A=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),IA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DA=new z({}),qA=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/modeling_flax_auto.py#L316"}}),OA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15786/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15786/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),XA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),zA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15786/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15786/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15786/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),VA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Ae=l(),ie=a("h1"),me=a("a"),to=a("span"),f(ce.$$.fragment),ue=l(),Do=a("span"),wi=o("Auto Classes"),Ef=l(),sa=a("p"),Ai=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Li=a("code"),t4=o("from_pretrained()"),yf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ye=l(),io=a("p"),Bi=o("Instantiating one of "),Pn=a("a"),a4=o("AutoConfig"),$n=o(", "),In=a("a"),n4=o("AutoModel"),xi=o(`, and
`),jn=a("a"),s4=o("AutoTokenizer"),ki=o(" will directly create a class of the relevant architecture. For instance"),wf=l(),f($a.$$.fragment),co=l(),ge=a("p"),O0=o("will create a model that is an instance of "),Ri=a("a"),X0=o("BertModel"),z0=o("."),qo=l(),Ia=a("p"),V0=o("There is one class of "),Af=a("code"),W0=o("AutoModel"),Fke=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),fLe=l(),Si=a("h2"),Lf=a("a"),qV=a("span"),f(l4.$$.fragment),Cke=l(),GV=a("span"),Mke=o("Extending the Auto Classes"),mLe=l(),Nn=a("p"),Eke=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),OV=a("code"),yke=o("NewModel"),wke=o(", make sure you have a "),XV=a("code"),Ake=o("NewModelConfig"),Lke=o(` then you can add those to the auto
classes like this:`),gLe=l(),f(i4.$$.fragment),hLe=l(),Q0=a("p"),Bke=o("You will then be able to use the auto classes like you would usually do!"),pLe=l(),f(Bf.$$.fragment),_Le=l(),Pi=a("h2"),xf=a("a"),zV=a("span"),f(d4.$$.fragment),xke=l(),VV=a("span"),kke=o("AutoConfig"),uLe=l(),Go=a("div"),f(c4.$$.fragment),Rke=l(),f4=a("p"),Ske=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),H0=a("a"),Pke=o("from_pretrained()"),$ke=o(" class method."),Ike=l(),m4=a("p"),jke=o("This class cannot be instantiated directly using "),WV=a("code"),Nke=o("__init__()"),Dke=o(" (throws an error)."),qke=l(),fo=a("div"),f(g4.$$.fragment),Gke=l(),QV=a("p"),Oke=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Xke=l(),$i=a("p"),zke=o("The configuration class to instantiate is selected based on the "),HV=a("code"),Vke=o("model_type"),Wke=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),UV=a("code"),Qke=o("pretrained_model_name_or_path"),Hke=o(":"),Uke=l(),v=a("ul"),kf=a("li"),JV=a("strong"),Jke=o("albert"),Yke=o(" \u2014 "),U0=a("a"),Kke=o("AlbertConfig"),Zke=o(" (ALBERT model)"),eRe=l(),Rf=a("li"),YV=a("strong"),oRe=o("bart"),rRe=o(" \u2014 "),J0=a("a"),tRe=o("BartConfig"),aRe=o(" (BART model)"),nRe=l(),Sf=a("li"),KV=a("strong"),sRe=o("beit"),lRe=o(" \u2014 "),Y0=a("a"),iRe=o("BeitConfig"),dRe=o(" (BEiT model)"),cRe=l(),Pf=a("li"),ZV=a("strong"),fRe=o("bert"),mRe=o(" \u2014 "),K0=a("a"),gRe=o("BertConfig"),hRe=o(" (BERT model)"),pRe=l(),$f=a("li"),eW=a("strong"),_Re=o("bert-generation"),uRe=o(" \u2014 "),Z0=a("a"),bRe=o("BertGenerationConfig"),vRe=o(" (Bert Generation model)"),TRe=l(),If=a("li"),oW=a("strong"),FRe=o("big_bird"),CRe=o(" \u2014 "),eL=a("a"),MRe=o("BigBirdConfig"),ERe=o(" (BigBird model)"),yRe=l(),jf=a("li"),rW=a("strong"),wRe=o("bigbird_pegasus"),ARe=o(" \u2014 "),oL=a("a"),LRe=o("BigBirdPegasusConfig"),BRe=o(" (BigBirdPegasus model)"),xRe=l(),Nf=a("li"),tW=a("strong"),kRe=o("blenderbot"),RRe=o(" \u2014 "),rL=a("a"),SRe=o("BlenderbotConfig"),PRe=o(" (Blenderbot model)"),$Re=l(),Df=a("li"),aW=a("strong"),IRe=o("blenderbot-small"),jRe=o(" \u2014 "),tL=a("a"),NRe=o("BlenderbotSmallConfig"),DRe=o(" (BlenderbotSmall model)"),qRe=l(),qf=a("li"),nW=a("strong"),GRe=o("camembert"),ORe=o(" \u2014 "),aL=a("a"),XRe=o("CamembertConfig"),zRe=o(" (CamemBERT model)"),VRe=l(),Gf=a("li"),sW=a("strong"),WRe=o("canine"),QRe=o(" \u2014 "),nL=a("a"),HRe=o("CanineConfig"),URe=o(" (Canine model)"),JRe=l(),Of=a("li"),lW=a("strong"),YRe=o("clip"),KRe=o(" \u2014 "),sL=a("a"),ZRe=o("CLIPConfig"),eSe=o(" (CLIP model)"),oSe=l(),Xf=a("li"),iW=a("strong"),rSe=o("convbert"),tSe=o(" \u2014 "),lL=a("a"),aSe=o("ConvBertConfig"),nSe=o(" (ConvBERT model)"),sSe=l(),zf=a("li"),dW=a("strong"),lSe=o("convnext"),iSe=o(" \u2014 "),iL=a("a"),dSe=o("ConvNextConfig"),cSe=o(" (ConvNext model)"),fSe=l(),Vf=a("li"),cW=a("strong"),mSe=o("ctrl"),gSe=o(" \u2014 "),dL=a("a"),hSe=o("CTRLConfig"),pSe=o(" (CTRL model)"),_Se=l(),Wf=a("li"),fW=a("strong"),uSe=o("deberta"),bSe=o(" \u2014 "),cL=a("a"),vSe=o("DebertaConfig"),TSe=o(" (DeBERTa model)"),FSe=l(),Qf=a("li"),mW=a("strong"),CSe=o("deberta-v2"),MSe=o(" \u2014 "),fL=a("a"),ESe=o("DebertaV2Config"),ySe=o(" (DeBERTa-v2 model)"),wSe=l(),Hf=a("li"),gW=a("strong"),ASe=o("deit"),LSe=o(" \u2014 "),mL=a("a"),BSe=o("DeiTConfig"),xSe=o(" (DeiT model)"),kSe=l(),Uf=a("li"),hW=a("strong"),RSe=o("detr"),SSe=o(" \u2014 "),gL=a("a"),PSe=o("DetrConfig"),$Se=o(" (DETR model)"),ISe=l(),Jf=a("li"),pW=a("strong"),jSe=o("distilbert"),NSe=o(" \u2014 "),hL=a("a"),DSe=o("DistilBertConfig"),qSe=o(" (DistilBERT model)"),GSe=l(),Yf=a("li"),_W=a("strong"),OSe=o("dpr"),XSe=o(" \u2014 "),pL=a("a"),zSe=o("DPRConfig"),VSe=o(" (DPR model)"),WSe=l(),Kf=a("li"),uW=a("strong"),QSe=o("electra"),HSe=o(" \u2014 "),_L=a("a"),USe=o("ElectraConfig"),JSe=o(" (ELECTRA model)"),YSe=l(),Zf=a("li"),bW=a("strong"),KSe=o("encoder-decoder"),ZSe=o(" \u2014 "),uL=a("a"),ePe=o("EncoderDecoderConfig"),oPe=o(" (Encoder decoder model)"),rPe=l(),em=a("li"),vW=a("strong"),tPe=o("flaubert"),aPe=o(" \u2014 "),bL=a("a"),nPe=o("FlaubertConfig"),sPe=o(" (FlauBERT model)"),lPe=l(),om=a("li"),TW=a("strong"),iPe=o("fnet"),dPe=o(" \u2014 "),vL=a("a"),cPe=o("FNetConfig"),fPe=o(" (FNet model)"),mPe=l(),rm=a("li"),FW=a("strong"),gPe=o("fsmt"),hPe=o(" \u2014 "),TL=a("a"),pPe=o("FSMTConfig"),_Pe=o(" (FairSeq Machine-Translation model)"),uPe=l(),tm=a("li"),CW=a("strong"),bPe=o("funnel"),vPe=o(" \u2014 "),FL=a("a"),TPe=o("FunnelConfig"),FPe=o(" (Funnel Transformer model)"),CPe=l(),am=a("li"),MW=a("strong"),MPe=o("gpt2"),EPe=o(" \u2014 "),CL=a("a"),yPe=o("GPT2Config"),wPe=o(" (OpenAI GPT-2 model)"),APe=l(),nm=a("li"),EW=a("strong"),LPe=o("gpt_neo"),BPe=o(" \u2014 "),ML=a("a"),xPe=o("GPTNeoConfig"),kPe=o(" (GPT Neo model)"),RPe=l(),sm=a("li"),yW=a("strong"),SPe=o("gptj"),PPe=o(" \u2014 "),EL=a("a"),$Pe=o("GPTJConfig"),IPe=o(" (GPT-J model)"),jPe=l(),lm=a("li"),wW=a("strong"),NPe=o("hubert"),DPe=o(" \u2014 "),yL=a("a"),qPe=o("HubertConfig"),GPe=o(" (Hubert model)"),OPe=l(),im=a("li"),AW=a("strong"),XPe=o("ibert"),zPe=o(" \u2014 "),wL=a("a"),VPe=o("IBertConfig"),WPe=o(" (I-BERT model)"),QPe=l(),dm=a("li"),LW=a("strong"),HPe=o("imagegpt"),UPe=o(" \u2014 "),AL=a("a"),JPe=o("ImageGPTConfig"),YPe=o(" (ImageGPT model)"),KPe=l(),cm=a("li"),BW=a("strong"),ZPe=o("layoutlm"),e$e=o(" \u2014 "),LL=a("a"),o$e=o("LayoutLMConfig"),r$e=o(" (LayoutLM model)"),t$e=l(),fm=a("li"),xW=a("strong"),a$e=o("layoutlmv2"),n$e=o(" \u2014 "),BL=a("a"),s$e=o("LayoutLMv2Config"),l$e=o(" (LayoutLMv2 model)"),i$e=l(),mm=a("li"),kW=a("strong"),d$e=o("led"),c$e=o(" \u2014 "),xL=a("a"),f$e=o("LEDConfig"),m$e=o(" (LED model)"),g$e=l(),gm=a("li"),RW=a("strong"),h$e=o("longformer"),p$e=o(" \u2014 "),kL=a("a"),_$e=o("LongformerConfig"),u$e=o(" (Longformer model)"),b$e=l(),hm=a("li"),SW=a("strong"),v$e=o("luke"),T$e=o(" \u2014 "),RL=a("a"),F$e=o("LukeConfig"),C$e=o(" (LUKE model)"),M$e=l(),pm=a("li"),PW=a("strong"),E$e=o("lxmert"),y$e=o(" \u2014 "),SL=a("a"),w$e=o("LxmertConfig"),A$e=o(" (LXMERT model)"),L$e=l(),_m=a("li"),$W=a("strong"),B$e=o("m2m_100"),x$e=o(" \u2014 "),PL=a("a"),k$e=o("M2M100Config"),R$e=o(" (M2M100 model)"),S$e=l(),um=a("li"),IW=a("strong"),P$e=o("marian"),$$e=o(" \u2014 "),$L=a("a"),I$e=o("MarianConfig"),j$e=o(" (Marian model)"),N$e=l(),bm=a("li"),jW=a("strong"),D$e=o("mbart"),q$e=o(" \u2014 "),IL=a("a"),G$e=o("MBartConfig"),O$e=o(" (mBART model)"),X$e=l(),vm=a("li"),NW=a("strong"),z$e=o("megatron-bert"),V$e=o(" \u2014 "),jL=a("a"),W$e=o("MegatronBertConfig"),Q$e=o(" (MegatronBert model)"),H$e=l(),Tm=a("li"),DW=a("strong"),U$e=o("mobilebert"),J$e=o(" \u2014 "),NL=a("a"),Y$e=o("MobileBertConfig"),K$e=o(" (MobileBERT model)"),Z$e=l(),Fm=a("li"),qW=a("strong"),eIe=o("mpnet"),oIe=o(" \u2014 "),DL=a("a"),rIe=o("MPNetConfig"),tIe=o(" (MPNet model)"),aIe=l(),Cm=a("li"),GW=a("strong"),nIe=o("mt5"),sIe=o(" \u2014 "),qL=a("a"),lIe=o("MT5Config"),iIe=o(" (mT5 model)"),dIe=l(),Mm=a("li"),OW=a("strong"),cIe=o("nystromformer"),fIe=o(" \u2014 "),GL=a("a"),mIe=o("NystromformerConfig"),gIe=o(" (Nystromformer model)"),hIe=l(),Em=a("li"),XW=a("strong"),pIe=o("openai-gpt"),_Ie=o(" \u2014 "),OL=a("a"),uIe=o("OpenAIGPTConfig"),bIe=o(" (OpenAI GPT model)"),vIe=l(),ym=a("li"),zW=a("strong"),TIe=o("pegasus"),FIe=o(" \u2014 "),XL=a("a"),CIe=o("PegasusConfig"),MIe=o(" (Pegasus model)"),EIe=l(),wm=a("li"),VW=a("strong"),yIe=o("perceiver"),wIe=o(" \u2014 "),zL=a("a"),AIe=o("PerceiverConfig"),LIe=o(" (Perceiver model)"),BIe=l(),Am=a("li"),WW=a("strong"),xIe=o("plbart"),kIe=o(" \u2014 "),VL=a("a"),RIe=o("PLBartConfig"),SIe=o(" (PLBart model)"),PIe=l(),Lm=a("li"),QW=a("strong"),$Ie=o("poolformer"),IIe=o(" \u2014 "),WL=a("a"),jIe=o("PoolFormerConfig"),NIe=o(" (PoolFormer model)"),DIe=l(),Bm=a("li"),HW=a("strong"),qIe=o("prophetnet"),GIe=o(" \u2014 "),QL=a("a"),OIe=o("ProphetNetConfig"),XIe=o(" (ProphetNet model)"),zIe=l(),xm=a("li"),UW=a("strong"),VIe=o("qdqbert"),WIe=o(" \u2014 "),HL=a("a"),QIe=o("QDQBertConfig"),HIe=o(" (QDQBert model)"),UIe=l(),km=a("li"),JW=a("strong"),JIe=o("rag"),YIe=o(" \u2014 "),UL=a("a"),KIe=o("RagConfig"),ZIe=o(" (RAG model)"),eje=l(),Rm=a("li"),YW=a("strong"),oje=o("realm"),rje=o(" \u2014 "),JL=a("a"),tje=o("RealmConfig"),aje=o(" (Realm model)"),nje=l(),Sm=a("li"),KW=a("strong"),sje=o("reformer"),lje=o(" \u2014 "),YL=a("a"),ije=o("ReformerConfig"),dje=o(" (Reformer model)"),cje=l(),Pm=a("li"),ZW=a("strong"),fje=o("rembert"),mje=o(" \u2014 "),KL=a("a"),gje=o("RemBertConfig"),hje=o(" (RemBERT model)"),pje=l(),$m=a("li"),eQ=a("strong"),_je=o("retribert"),uje=o(" \u2014 "),ZL=a("a"),bje=o("RetriBertConfig"),vje=o(" (RetriBERT model)"),Tje=l(),Im=a("li"),oQ=a("strong"),Fje=o("roberta"),Cje=o(" \u2014 "),e9=a("a"),Mje=o("RobertaConfig"),Eje=o(" (RoBERTa model)"),yje=l(),jm=a("li"),rQ=a("strong"),wje=o("roformer"),Aje=o(" \u2014 "),o9=a("a"),Lje=o("RoFormerConfig"),Bje=o(" (RoFormer model)"),xje=l(),Nm=a("li"),tQ=a("strong"),kje=o("segformer"),Rje=o(" \u2014 "),r9=a("a"),Sje=o("SegformerConfig"),Pje=o(" (SegFormer model)"),$je=l(),Dm=a("li"),aQ=a("strong"),Ije=o("sew"),jje=o(" \u2014 "),t9=a("a"),Nje=o("SEWConfig"),Dje=o(" (SEW model)"),qje=l(),qm=a("li"),nQ=a("strong"),Gje=o("sew-d"),Oje=o(" \u2014 "),a9=a("a"),Xje=o("SEWDConfig"),zje=o(" (SEW-D model)"),Vje=l(),Gm=a("li"),sQ=a("strong"),Wje=o("speech-encoder-decoder"),Qje=o(" \u2014 "),n9=a("a"),Hje=o("SpeechEncoderDecoderConfig"),Uje=o(" (Speech Encoder decoder model)"),Jje=l(),Om=a("li"),lQ=a("strong"),Yje=o("speech_to_text"),Kje=o(" \u2014 "),s9=a("a"),Zje=o("Speech2TextConfig"),eNe=o(" (Speech2Text model)"),oNe=l(),Xm=a("li"),iQ=a("strong"),rNe=o("speech_to_text_2"),tNe=o(" \u2014 "),l9=a("a"),aNe=o("Speech2Text2Config"),nNe=o(" (Speech2Text2 model)"),sNe=l(),zm=a("li"),dQ=a("strong"),lNe=o("splinter"),iNe=o(" \u2014 "),i9=a("a"),dNe=o("SplinterConfig"),cNe=o(" (Splinter model)"),fNe=l(),Vm=a("li"),cQ=a("strong"),mNe=o("squeezebert"),gNe=o(" \u2014 "),d9=a("a"),hNe=o("SqueezeBertConfig"),pNe=o(" (SqueezeBERT model)"),_Ne=l(),Wm=a("li"),fQ=a("strong"),uNe=o("swin"),bNe=o(" \u2014 "),c9=a("a"),vNe=o("SwinConfig"),TNe=o(" (Swin model)"),FNe=l(),Qm=a("li"),mQ=a("strong"),CNe=o("t5"),MNe=o(" \u2014 "),f9=a("a"),ENe=o("T5Config"),yNe=o(" (T5 model)"),wNe=l(),Hm=a("li"),gQ=a("strong"),ANe=o("tapas"),LNe=o(" \u2014 "),m9=a("a"),BNe=o("TapasConfig"),xNe=o(" (TAPAS model)"),kNe=l(),Um=a("li"),hQ=a("strong"),RNe=o("transfo-xl"),SNe=o(" \u2014 "),g9=a("a"),PNe=o("TransfoXLConfig"),$Ne=o(" (Transformer-XL model)"),INe=l(),Jm=a("li"),pQ=a("strong"),jNe=o("trocr"),NNe=o(" \u2014 "),h9=a("a"),DNe=o("TrOCRConfig"),qNe=o(" (TrOCR model)"),GNe=l(),Ym=a("li"),_Q=a("strong"),ONe=o("unispeech"),XNe=o(" \u2014 "),p9=a("a"),zNe=o("UniSpeechConfig"),VNe=o(" (UniSpeech model)"),WNe=l(),Km=a("li"),uQ=a("strong"),QNe=o("unispeech-sat"),HNe=o(" \u2014 "),_9=a("a"),UNe=o("UniSpeechSatConfig"),JNe=o(" (UniSpeechSat model)"),YNe=l(),Zm=a("li"),bQ=a("strong"),KNe=o("vilt"),ZNe=o(" \u2014 "),u9=a("a"),eDe=o("ViltConfig"),oDe=o(" (ViLT model)"),rDe=l(),eg=a("li"),vQ=a("strong"),tDe=o("vision-encoder-decoder"),aDe=o(" \u2014 "),b9=a("a"),nDe=o("VisionEncoderDecoderConfig"),sDe=o(" (Vision Encoder decoder model)"),lDe=l(),og=a("li"),TQ=a("strong"),iDe=o("vision-text-dual-encoder"),dDe=o(" \u2014 "),v9=a("a"),cDe=o("VisionTextDualEncoderConfig"),fDe=o(" (VisionTextDualEncoder model)"),mDe=l(),rg=a("li"),FQ=a("strong"),gDe=o("visual_bert"),hDe=o(" \u2014 "),T9=a("a"),pDe=o("VisualBertConfig"),_De=o(" (VisualBert model)"),uDe=l(),tg=a("li"),CQ=a("strong"),bDe=o("vit"),vDe=o(" \u2014 "),F9=a("a"),TDe=o("ViTConfig"),FDe=o(" (ViT model)"),CDe=l(),ag=a("li"),MQ=a("strong"),MDe=o("vit_mae"),EDe=o(" \u2014 "),C9=a("a"),yDe=o("ViTMAEConfig"),wDe=o(" (ViTMAE model)"),ADe=l(),ng=a("li"),EQ=a("strong"),LDe=o("wav2vec2"),BDe=o(" \u2014 "),M9=a("a"),xDe=o("Wav2Vec2Config"),kDe=o(" (Wav2Vec2 model)"),RDe=l(),sg=a("li"),yQ=a("strong"),SDe=o("wavlm"),PDe=o(" \u2014 "),E9=a("a"),$De=o("WavLMConfig"),IDe=o(" (WavLM model)"),jDe=l(),lg=a("li"),wQ=a("strong"),NDe=o("xglm"),DDe=o(" \u2014 "),y9=a("a"),qDe=o("XGLMConfig"),GDe=o(" (XGLM model)"),ODe=l(),ig=a("li"),AQ=a("strong"),XDe=o("xlm"),zDe=o(" \u2014 "),w9=a("a"),VDe=o("XLMConfig"),WDe=o(" (XLM model)"),QDe=l(),dg=a("li"),LQ=a("strong"),HDe=o("xlm-prophetnet"),UDe=o(" \u2014 "),A9=a("a"),JDe=o("XLMProphetNetConfig"),YDe=o(" (XLMProphetNet model)"),KDe=l(),cg=a("li"),BQ=a("strong"),ZDe=o("xlm-roberta"),eqe=o(" \u2014 "),L9=a("a"),oqe=o("XLMRobertaConfig"),rqe=o(" (XLM-RoBERTa model)"),tqe=l(),fg=a("li"),xQ=a("strong"),aqe=o("xlm-roberta-xl"),nqe=o(" \u2014 "),B9=a("a"),sqe=o("XLMRobertaXLConfig"),lqe=o(" (XLM-RoBERTa-XL model)"),iqe=l(),mg=a("li"),kQ=a("strong"),dqe=o("xlnet"),cqe=o(" \u2014 "),x9=a("a"),fqe=o("XLNetConfig"),mqe=o(" (XLNet model)"),gqe=l(),gg=a("li"),RQ=a("strong"),hqe=o("yoso"),pqe=o(" \u2014 "),k9=a("a"),_qe=o("YosoConfig"),uqe=o(" (YOSO model)"),bqe=l(),SQ=a("p"),vqe=o("Examples:"),Tqe=l(),f(h4.$$.fragment),Fqe=l(),hg=a("div"),f(p4.$$.fragment),Cqe=l(),PQ=a("p"),Mqe=o("Register a new configuration for this class."),bLe=l(),Ii=a("h2"),pg=a("a"),$Q=a("span"),f(_4.$$.fragment),Eqe=l(),IQ=a("span"),yqe=o("AutoTokenizer"),vLe=l(),Oo=a("div"),f(u4.$$.fragment),wqe=l(),b4=a("p"),Aqe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),R9=a("a"),Lqe=o("AutoTokenizer.from_pretrained()"),Bqe=o(" class method."),xqe=l(),v4=a("p"),kqe=o("This class cannot be instantiated directly using "),jQ=a("code"),Rqe=o("__init__()"),Sqe=o(" (throws an error)."),Pqe=l(),mo=a("div"),f(T4.$$.fragment),$qe=l(),NQ=a("p"),Iqe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),jqe=l(),ja=a("p"),Nqe=o("The tokenizer class to instantiate is selected based on the "),DQ=a("code"),Dqe=o("model_type"),qqe=o(` property of the config object (either
passed as an argument or loaded from `),qQ=a("code"),Gqe=o("pretrained_model_name_or_path"),Oqe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GQ=a("code"),Xqe=o("pretrained_model_name_or_path"),zqe=o(":"),Vqe=l(),M=a("ul"),Dn=a("li"),OQ=a("strong"),Wqe=o("albert"),Qqe=o(" \u2014 "),S9=a("a"),Hqe=o("AlbertTokenizer"),Uqe=o(" or "),P9=a("a"),Jqe=o("AlbertTokenizerFast"),Yqe=o(" (ALBERT model)"),Kqe=l(),qn=a("li"),XQ=a("strong"),Zqe=o("bart"),eGe=o(" \u2014 "),$9=a("a"),oGe=o("BartTokenizer"),rGe=o(" or "),I9=a("a"),tGe=o("BartTokenizerFast"),aGe=o(" (BART model)"),nGe=l(),Gn=a("li"),zQ=a("strong"),sGe=o("barthez"),lGe=o(" \u2014 "),j9=a("a"),iGe=o("BarthezTokenizer"),dGe=o(" or "),N9=a("a"),cGe=o("BarthezTokenizerFast"),fGe=o(" (BARThez model)"),mGe=l(),_g=a("li"),VQ=a("strong"),gGe=o("bartpho"),hGe=o(" \u2014 "),D9=a("a"),pGe=o("BartphoTokenizer"),_Ge=o(" (BARTpho model)"),uGe=l(),On=a("li"),WQ=a("strong"),bGe=o("bert"),vGe=o(" \u2014 "),q9=a("a"),TGe=o("BertTokenizer"),FGe=o(" or "),G9=a("a"),CGe=o("BertTokenizerFast"),MGe=o(" (BERT model)"),EGe=l(),ug=a("li"),QQ=a("strong"),yGe=o("bert-generation"),wGe=o(" \u2014 "),O9=a("a"),AGe=o("BertGenerationTokenizer"),LGe=o(" (Bert Generation model)"),BGe=l(),bg=a("li"),HQ=a("strong"),xGe=o("bert-japanese"),kGe=o(" \u2014 "),X9=a("a"),RGe=o("BertJapaneseTokenizer"),SGe=o(" (BertJapanese model)"),PGe=l(),vg=a("li"),UQ=a("strong"),$Ge=o("bertweet"),IGe=o(" \u2014 "),z9=a("a"),jGe=o("BertweetTokenizer"),NGe=o(" (Bertweet model)"),DGe=l(),Xn=a("li"),JQ=a("strong"),qGe=o("big_bird"),GGe=o(" \u2014 "),V9=a("a"),OGe=o("BigBirdTokenizer"),XGe=o(" or "),W9=a("a"),zGe=o("BigBirdTokenizerFast"),VGe=o(" (BigBird model)"),WGe=l(),zn=a("li"),YQ=a("strong"),QGe=o("bigbird_pegasus"),HGe=o(" \u2014 "),Q9=a("a"),UGe=o("PegasusTokenizer"),JGe=o(" or "),H9=a("a"),YGe=o("PegasusTokenizerFast"),KGe=o(" (BigBirdPegasus model)"),ZGe=l(),Vn=a("li"),KQ=a("strong"),eOe=o("blenderbot"),oOe=o(" \u2014 "),U9=a("a"),rOe=o("BlenderbotTokenizer"),tOe=o(" or "),J9=a("a"),aOe=o("BlenderbotTokenizerFast"),nOe=o(" (Blenderbot model)"),sOe=l(),Tg=a("li"),ZQ=a("strong"),lOe=o("blenderbot-small"),iOe=o(" \u2014 "),Y9=a("a"),dOe=o("BlenderbotSmallTokenizer"),cOe=o(" (BlenderbotSmall model)"),fOe=l(),Fg=a("li"),eH=a("strong"),mOe=o("byt5"),gOe=o(" \u2014 "),K9=a("a"),hOe=o("ByT5Tokenizer"),pOe=o(" (ByT5 model)"),_Oe=l(),Wn=a("li"),oH=a("strong"),uOe=o("camembert"),bOe=o(" \u2014 "),Z9=a("a"),vOe=o("CamembertTokenizer"),TOe=o(" or "),eB=a("a"),FOe=o("CamembertTokenizerFast"),COe=o(" (CamemBERT model)"),MOe=l(),Cg=a("li"),rH=a("strong"),EOe=o("canine"),yOe=o(" \u2014 "),oB=a("a"),wOe=o("CanineTokenizer"),AOe=o(" (Canine model)"),LOe=l(),Qn=a("li"),tH=a("strong"),BOe=o("clip"),xOe=o(" \u2014 "),rB=a("a"),kOe=o("CLIPTokenizer"),ROe=o(" or "),tB=a("a"),SOe=o("CLIPTokenizerFast"),POe=o(" (CLIP model)"),$Oe=l(),Hn=a("li"),aH=a("strong"),IOe=o("convbert"),jOe=o(" \u2014 "),aB=a("a"),NOe=o("ConvBertTokenizer"),DOe=o(" or "),nB=a("a"),qOe=o("ConvBertTokenizerFast"),GOe=o(" (ConvBERT model)"),OOe=l(),Un=a("li"),nH=a("strong"),XOe=o("cpm"),zOe=o(" \u2014 "),sB=a("a"),VOe=o("CpmTokenizer"),WOe=o(" or "),sH=a("code"),QOe=o("CpmTokenizerFast"),HOe=o(" (CPM model)"),UOe=l(),Mg=a("li"),lH=a("strong"),JOe=o("ctrl"),YOe=o(" \u2014 "),lB=a("a"),KOe=o("CTRLTokenizer"),ZOe=o(" (CTRL model)"),eXe=l(),Jn=a("li"),iH=a("strong"),oXe=o("deberta"),rXe=o(" \u2014 "),iB=a("a"),tXe=o("DebertaTokenizer"),aXe=o(" or "),dB=a("a"),nXe=o("DebertaTokenizerFast"),sXe=o(" (DeBERTa model)"),lXe=l(),Eg=a("li"),dH=a("strong"),iXe=o("deberta-v2"),dXe=o(" \u2014 "),cB=a("a"),cXe=o("DebertaV2Tokenizer"),fXe=o(" (DeBERTa-v2 model)"),mXe=l(),Yn=a("li"),cH=a("strong"),gXe=o("distilbert"),hXe=o(" \u2014 "),fB=a("a"),pXe=o("DistilBertTokenizer"),_Xe=o(" or "),mB=a("a"),uXe=o("DistilBertTokenizerFast"),bXe=o(" (DistilBERT model)"),vXe=l(),Kn=a("li"),fH=a("strong"),TXe=o("dpr"),FXe=o(" \u2014 "),gB=a("a"),CXe=o("DPRQuestionEncoderTokenizer"),MXe=o(" or "),hB=a("a"),EXe=o("DPRQuestionEncoderTokenizerFast"),yXe=o(" (DPR model)"),wXe=l(),Zn=a("li"),mH=a("strong"),AXe=o("electra"),LXe=o(" \u2014 "),pB=a("a"),BXe=o("ElectraTokenizer"),xXe=o(" or "),_B=a("a"),kXe=o("ElectraTokenizerFast"),RXe=o(" (ELECTRA model)"),SXe=l(),yg=a("li"),gH=a("strong"),PXe=o("flaubert"),$Xe=o(" \u2014 "),uB=a("a"),IXe=o("FlaubertTokenizer"),jXe=o(" (FlauBERT model)"),NXe=l(),es=a("li"),hH=a("strong"),DXe=o("fnet"),qXe=o(" \u2014 "),bB=a("a"),GXe=o("FNetTokenizer"),OXe=o(" or "),vB=a("a"),XXe=o("FNetTokenizerFast"),zXe=o(" (FNet model)"),VXe=l(),wg=a("li"),pH=a("strong"),WXe=o("fsmt"),QXe=o(" \u2014 "),TB=a("a"),HXe=o("FSMTTokenizer"),UXe=o(" (FairSeq Machine-Translation model)"),JXe=l(),os=a("li"),_H=a("strong"),YXe=o("funnel"),KXe=o(" \u2014 "),FB=a("a"),ZXe=o("FunnelTokenizer"),eze=o(" or "),CB=a("a"),oze=o("FunnelTokenizerFast"),rze=o(" (Funnel Transformer model)"),tze=l(),rs=a("li"),uH=a("strong"),aze=o("gpt2"),nze=o(" \u2014 "),MB=a("a"),sze=o("GPT2Tokenizer"),lze=o(" or "),EB=a("a"),ize=o("GPT2TokenizerFast"),dze=o(" (OpenAI GPT-2 model)"),cze=l(),ts=a("li"),bH=a("strong"),fze=o("gpt_neo"),mze=o(" \u2014 "),yB=a("a"),gze=o("GPT2Tokenizer"),hze=o(" or "),wB=a("a"),pze=o("GPT2TokenizerFast"),_ze=o(" (GPT Neo model)"),uze=l(),as=a("li"),vH=a("strong"),bze=o("herbert"),vze=o(" \u2014 "),AB=a("a"),Tze=o("HerbertTokenizer"),Fze=o(" or "),LB=a("a"),Cze=o("HerbertTokenizerFast"),Mze=o(" (HerBERT model)"),Eze=l(),Ag=a("li"),TH=a("strong"),yze=o("hubert"),wze=o(" \u2014 "),BB=a("a"),Aze=o("Wav2Vec2CTCTokenizer"),Lze=o(" (Hubert model)"),Bze=l(),ns=a("li"),FH=a("strong"),xze=o("ibert"),kze=o(" \u2014 "),xB=a("a"),Rze=o("RobertaTokenizer"),Sze=o(" or "),kB=a("a"),Pze=o("RobertaTokenizerFast"),$ze=o(" (I-BERT model)"),Ize=l(),ss=a("li"),CH=a("strong"),jze=o("layoutlm"),Nze=o(" \u2014 "),RB=a("a"),Dze=o("LayoutLMTokenizer"),qze=o(" or "),SB=a("a"),Gze=o("LayoutLMTokenizerFast"),Oze=o(" (LayoutLM model)"),Xze=l(),ls=a("li"),MH=a("strong"),zze=o("layoutlmv2"),Vze=o(" \u2014 "),PB=a("a"),Wze=o("LayoutLMv2Tokenizer"),Qze=o(" or "),$B=a("a"),Hze=o("LayoutLMv2TokenizerFast"),Uze=o(" (LayoutLMv2 model)"),Jze=l(),is=a("li"),EH=a("strong"),Yze=o("layoutxlm"),Kze=o(" \u2014 "),IB=a("a"),Zze=o("LayoutXLMTokenizer"),eVe=o(" or "),jB=a("a"),oVe=o("LayoutXLMTokenizerFast"),rVe=o(" (LayoutXLM model)"),tVe=l(),ds=a("li"),yH=a("strong"),aVe=o("led"),nVe=o(" \u2014 "),NB=a("a"),sVe=o("LEDTokenizer"),lVe=o(" or "),DB=a("a"),iVe=o("LEDTokenizerFast"),dVe=o(" (LED model)"),cVe=l(),cs=a("li"),wH=a("strong"),fVe=o("longformer"),mVe=o(" \u2014 "),qB=a("a"),gVe=o("LongformerTokenizer"),hVe=o(" or "),GB=a("a"),pVe=o("LongformerTokenizerFast"),_Ve=o(" (Longformer model)"),uVe=l(),Lg=a("li"),AH=a("strong"),bVe=o("luke"),vVe=o(" \u2014 "),OB=a("a"),TVe=o("LukeTokenizer"),FVe=o(" (LUKE model)"),CVe=l(),fs=a("li"),LH=a("strong"),MVe=o("lxmert"),EVe=o(" \u2014 "),XB=a("a"),yVe=o("LxmertTokenizer"),wVe=o(" or "),zB=a("a"),AVe=o("LxmertTokenizerFast"),LVe=o(" (LXMERT model)"),BVe=l(),Bg=a("li"),BH=a("strong"),xVe=o("m2m_100"),kVe=o(" \u2014 "),VB=a("a"),RVe=o("M2M100Tokenizer"),SVe=o(" (M2M100 model)"),PVe=l(),xg=a("li"),xH=a("strong"),$Ve=o("marian"),IVe=o(" \u2014 "),WB=a("a"),jVe=o("MarianTokenizer"),NVe=o(" (Marian model)"),DVe=l(),ms=a("li"),kH=a("strong"),qVe=o("mbart"),GVe=o(" \u2014 "),QB=a("a"),OVe=o("MBartTokenizer"),XVe=o(" or "),HB=a("a"),zVe=o("MBartTokenizerFast"),VVe=o(" (mBART model)"),WVe=l(),gs=a("li"),RH=a("strong"),QVe=o("mbart50"),HVe=o(" \u2014 "),UB=a("a"),UVe=o("MBart50Tokenizer"),JVe=o(" or "),JB=a("a"),YVe=o("MBart50TokenizerFast"),KVe=o(" (mBART-50 model)"),ZVe=l(),kg=a("li"),SH=a("strong"),eWe=o("mluke"),oWe=o(" \u2014 "),YB=a("a"),rWe=o("MLukeTokenizer"),tWe=o(" (mLUKE model)"),aWe=l(),hs=a("li"),PH=a("strong"),nWe=o("mobilebert"),sWe=o(" \u2014 "),KB=a("a"),lWe=o("MobileBertTokenizer"),iWe=o(" or "),ZB=a("a"),dWe=o("MobileBertTokenizerFast"),cWe=o(" (MobileBERT model)"),fWe=l(),ps=a("li"),$H=a("strong"),mWe=o("mpnet"),gWe=o(" \u2014 "),ex=a("a"),hWe=o("MPNetTokenizer"),pWe=o(" or "),ox=a("a"),_We=o("MPNetTokenizerFast"),uWe=o(" (MPNet model)"),bWe=l(),_s=a("li"),IH=a("strong"),vWe=o("mt5"),TWe=o(" \u2014 "),rx=a("a"),FWe=o("MT5Tokenizer"),CWe=o(" or "),tx=a("a"),MWe=o("MT5TokenizerFast"),EWe=o(" (mT5 model)"),yWe=l(),us=a("li"),jH=a("strong"),wWe=o("openai-gpt"),AWe=o(" \u2014 "),ax=a("a"),LWe=o("OpenAIGPTTokenizer"),BWe=o(" or "),nx=a("a"),xWe=o("OpenAIGPTTokenizerFast"),kWe=o(" (OpenAI GPT model)"),RWe=l(),bs=a("li"),NH=a("strong"),SWe=o("pegasus"),PWe=o(" \u2014 "),sx=a("a"),$We=o("PegasusTokenizer"),IWe=o(" or "),lx=a("a"),jWe=o("PegasusTokenizerFast"),NWe=o(" (Pegasus model)"),DWe=l(),Rg=a("li"),DH=a("strong"),qWe=o("perceiver"),GWe=o(" \u2014 "),ix=a("a"),OWe=o("PerceiverTokenizer"),XWe=o(" (Perceiver model)"),zWe=l(),Sg=a("li"),qH=a("strong"),VWe=o("phobert"),WWe=o(" \u2014 "),dx=a("a"),QWe=o("PhobertTokenizer"),HWe=o(" (PhoBERT model)"),UWe=l(),Pg=a("li"),GH=a("strong"),JWe=o("plbart"),YWe=o(" \u2014 "),cx=a("a"),KWe=o("PLBartTokenizer"),ZWe=o(" (PLBart model)"),eQe=l(),$g=a("li"),OH=a("strong"),oQe=o("prophetnet"),rQe=o(" \u2014 "),fx=a("a"),tQe=o("ProphetNetTokenizer"),aQe=o(" (ProphetNet model)"),nQe=l(),vs=a("li"),XH=a("strong"),sQe=o("qdqbert"),lQe=o(" \u2014 "),mx=a("a"),iQe=o("BertTokenizer"),dQe=o(" or "),gx=a("a"),cQe=o("BertTokenizerFast"),fQe=o(" (QDQBert model)"),mQe=l(),Ig=a("li"),zH=a("strong"),gQe=o("rag"),hQe=o(" \u2014 "),hx=a("a"),pQe=o("RagTokenizer"),_Qe=o(" (RAG model)"),uQe=l(),Ts=a("li"),VH=a("strong"),bQe=o("reformer"),vQe=o(" \u2014 "),px=a("a"),TQe=o("ReformerTokenizer"),FQe=o(" or "),_x=a("a"),CQe=o("ReformerTokenizerFast"),MQe=o(" (Reformer model)"),EQe=l(),Fs=a("li"),WH=a("strong"),yQe=o("rembert"),wQe=o(" \u2014 "),ux=a("a"),AQe=o("RemBertTokenizer"),LQe=o(" or "),bx=a("a"),BQe=o("RemBertTokenizerFast"),xQe=o(" (RemBERT model)"),kQe=l(),Cs=a("li"),QH=a("strong"),RQe=o("retribert"),SQe=o(" \u2014 "),vx=a("a"),PQe=o("RetriBertTokenizer"),$Qe=o(" or "),Tx=a("a"),IQe=o("RetriBertTokenizerFast"),jQe=o(" (RetriBERT model)"),NQe=l(),Ms=a("li"),HH=a("strong"),DQe=o("roberta"),qQe=o(" \u2014 "),Fx=a("a"),GQe=o("RobertaTokenizer"),OQe=o(" or "),Cx=a("a"),XQe=o("RobertaTokenizerFast"),zQe=o(" (RoBERTa model)"),VQe=l(),Es=a("li"),UH=a("strong"),WQe=o("roformer"),QQe=o(" \u2014 "),Mx=a("a"),HQe=o("RoFormerTokenizer"),UQe=o(" or "),Ex=a("a"),JQe=o("RoFormerTokenizerFast"),YQe=o(" (RoFormer model)"),KQe=l(),jg=a("li"),JH=a("strong"),ZQe=o("speech_to_text"),eHe=o(" \u2014 "),yx=a("a"),oHe=o("Speech2TextTokenizer"),rHe=o(" (Speech2Text model)"),tHe=l(),Ng=a("li"),YH=a("strong"),aHe=o("speech_to_text_2"),nHe=o(" \u2014 "),wx=a("a"),sHe=o("Speech2Text2Tokenizer"),lHe=o(" (Speech2Text2 model)"),iHe=l(),ys=a("li"),KH=a("strong"),dHe=o("splinter"),cHe=o(" \u2014 "),Ax=a("a"),fHe=o("SplinterTokenizer"),mHe=o(" or "),Lx=a("a"),gHe=o("SplinterTokenizerFast"),hHe=o(" (Splinter model)"),pHe=l(),ws=a("li"),ZH=a("strong"),_He=o("squeezebert"),uHe=o(" \u2014 "),Bx=a("a"),bHe=o("SqueezeBertTokenizer"),vHe=o(" or "),xx=a("a"),THe=o("SqueezeBertTokenizerFast"),FHe=o(" (SqueezeBERT model)"),CHe=l(),As=a("li"),eU=a("strong"),MHe=o("t5"),EHe=o(" \u2014 "),kx=a("a"),yHe=o("T5Tokenizer"),wHe=o(" or "),Rx=a("a"),AHe=o("T5TokenizerFast"),LHe=o(" (T5 model)"),BHe=l(),Dg=a("li"),oU=a("strong"),xHe=o("tapas"),kHe=o(" \u2014 "),Sx=a("a"),RHe=o("TapasTokenizer"),SHe=o(" (TAPAS model)"),PHe=l(),qg=a("li"),rU=a("strong"),$He=o("transfo-xl"),IHe=o(" \u2014 "),Px=a("a"),jHe=o("TransfoXLTokenizer"),NHe=o(" (Transformer-XL model)"),DHe=l(),Gg=a("li"),tU=a("strong"),qHe=o("wav2vec2"),GHe=o(" \u2014 "),$x=a("a"),OHe=o("Wav2Vec2CTCTokenizer"),XHe=o(" (Wav2Vec2 model)"),zHe=l(),Og=a("li"),aU=a("strong"),VHe=o("wav2vec2_phoneme"),WHe=o(" \u2014 "),Ix=a("a"),QHe=o("Wav2Vec2PhonemeCTCTokenizer"),HHe=o(" (Wav2Vec2Phoneme model)"),UHe=l(),Ls=a("li"),nU=a("strong"),JHe=o("xglm"),YHe=o(" \u2014 "),jx=a("a"),KHe=o("XGLMTokenizer"),ZHe=o(" or "),Nx=a("a"),eUe=o("XGLMTokenizerFast"),oUe=o(" (XGLM model)"),rUe=l(),Xg=a("li"),sU=a("strong"),tUe=o("xlm"),aUe=o(" \u2014 "),Dx=a("a"),nUe=o("XLMTokenizer"),sUe=o(" (XLM model)"),lUe=l(),zg=a("li"),lU=a("strong"),iUe=o("xlm-prophetnet"),dUe=o(" \u2014 "),qx=a("a"),cUe=o("XLMProphetNetTokenizer"),fUe=o(" (XLMProphetNet model)"),mUe=l(),Bs=a("li"),iU=a("strong"),gUe=o("xlm-roberta"),hUe=o(" \u2014 "),Gx=a("a"),pUe=o("XLMRobertaTokenizer"),_Ue=o(" or "),Ox=a("a"),uUe=o("XLMRobertaTokenizerFast"),bUe=o(" (XLM-RoBERTa model)"),vUe=l(),xs=a("li"),dU=a("strong"),TUe=o("xlnet"),FUe=o(" \u2014 "),Xx=a("a"),CUe=o("XLNetTokenizer"),MUe=o(" or "),zx=a("a"),EUe=o("XLNetTokenizerFast"),yUe=o(" (XLNet model)"),wUe=l(),cU=a("p"),AUe=o("Examples:"),LUe=l(),f(F4.$$.fragment),BUe=l(),Vg=a("div"),f(C4.$$.fragment),xUe=l(),fU=a("p"),kUe=o("Register a new tokenizer in this mapping."),TLe=l(),ji=a("h2"),Wg=a("a"),mU=a("span"),f(M4.$$.fragment),RUe=l(),gU=a("span"),SUe=o("AutoFeatureExtractor"),FLe=l(),Xo=a("div"),f(E4.$$.fragment),PUe=l(),y4=a("p"),$Ue=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Vx=a("a"),IUe=o("AutoFeatureExtractor.from_pretrained()"),jUe=o(" class method."),NUe=l(),w4=a("p"),DUe=o("This class cannot be instantiated directly using "),hU=a("code"),qUe=o("__init__()"),GUe=o(" (throws an error)."),OUe=l(),Le=a("div"),f(A4.$$.fragment),XUe=l(),pU=a("p"),zUe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),VUe=l(),Na=a("p"),WUe=o("The feature extractor class to instantiate is selected based on the "),_U=a("code"),QUe=o("model_type"),HUe=o(` property of the config object
(either passed as an argument or loaded from `),uU=a("code"),UUe=o("pretrained_model_name_or_path"),JUe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),bU=a("code"),YUe=o("pretrained_model_name_or_path"),KUe=o(":"),ZUe=l(),se=a("ul"),Qg=a("li"),vU=a("strong"),eJe=o("beit"),oJe=o(" \u2014 "),Wx=a("a"),rJe=o("BeitFeatureExtractor"),tJe=o(" (BEiT model)"),aJe=l(),Hg=a("li"),TU=a("strong"),nJe=o("clip"),sJe=o(" \u2014 "),Qx=a("a"),lJe=o("CLIPFeatureExtractor"),iJe=o(" (CLIP model)"),dJe=l(),Ug=a("li"),FU=a("strong"),cJe=o("convnext"),fJe=o(" \u2014 "),Hx=a("a"),mJe=o("ConvNextFeatureExtractor"),gJe=o(" (ConvNext model)"),hJe=l(),Jg=a("li"),CU=a("strong"),pJe=o("deit"),_Je=o(" \u2014 "),Ux=a("a"),uJe=o("DeiTFeatureExtractor"),bJe=o(" (DeiT model)"),vJe=l(),Yg=a("li"),MU=a("strong"),TJe=o("detr"),FJe=o(" \u2014 "),Jx=a("a"),CJe=o("DetrFeatureExtractor"),MJe=o(" (DETR model)"),EJe=l(),Kg=a("li"),EU=a("strong"),yJe=o("hubert"),wJe=o(" \u2014 "),Yx=a("a"),AJe=o("Wav2Vec2FeatureExtractor"),LJe=o(" (Hubert model)"),BJe=l(),Zg=a("li"),yU=a("strong"),xJe=o("layoutlmv2"),kJe=o(" \u2014 "),Kx=a("a"),RJe=o("LayoutLMv2FeatureExtractor"),SJe=o(" (LayoutLMv2 model)"),PJe=l(),eh=a("li"),wU=a("strong"),$Je=o("perceiver"),IJe=o(" \u2014 "),Zx=a("a"),jJe=o("PerceiverFeatureExtractor"),NJe=o(" (Perceiver model)"),DJe=l(),oh=a("li"),AU=a("strong"),qJe=o("poolformer"),GJe=o(" \u2014 "),ek=a("a"),OJe=o("PoolFormerFeatureExtractor"),XJe=o(" (PoolFormer model)"),zJe=l(),rh=a("li"),LU=a("strong"),VJe=o("segformer"),WJe=o(" \u2014 "),ok=a("a"),QJe=o("SegformerFeatureExtractor"),HJe=o(" (SegFormer model)"),UJe=l(),th=a("li"),BU=a("strong"),JJe=o("speech_to_text"),YJe=o(" \u2014 "),rk=a("a"),KJe=o("Speech2TextFeatureExtractor"),ZJe=o(" (Speech2Text model)"),eYe=l(),ah=a("li"),xU=a("strong"),oYe=o("swin"),rYe=o(" \u2014 "),tk=a("a"),tYe=o("ViTFeatureExtractor"),aYe=o(" (Swin model)"),nYe=l(),nh=a("li"),kU=a("strong"),sYe=o("vit"),lYe=o(" \u2014 "),ak=a("a"),iYe=o("ViTFeatureExtractor"),dYe=o(" (ViT model)"),cYe=l(),sh=a("li"),RU=a("strong"),fYe=o("vit_mae"),mYe=o(" \u2014 "),nk=a("a"),gYe=o("ViTFeatureExtractor"),hYe=o(" (ViTMAE model)"),pYe=l(),lh=a("li"),SU=a("strong"),_Ye=o("wav2vec2"),uYe=o(" \u2014 "),sk=a("a"),bYe=o("Wav2Vec2FeatureExtractor"),vYe=o(" (Wav2Vec2 model)"),TYe=l(),f(ih.$$.fragment),FYe=l(),PU=a("p"),CYe=o("Examples:"),MYe=l(),f(L4.$$.fragment),EYe=l(),dh=a("div"),f(B4.$$.fragment),yYe=l(),$U=a("p"),wYe=o("Register a new feature extractor for this class."),CLe=l(),Ni=a("h2"),ch=a("a"),IU=a("span"),f(x4.$$.fragment),AYe=l(),jU=a("span"),LYe=o("AutoProcessor"),MLe=l(),zo=a("div"),f(k4.$$.fragment),BYe=l(),R4=a("p"),xYe=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),lk=a("a"),kYe=o("AutoProcessor.from_pretrained()"),RYe=o(" class method."),SYe=l(),S4=a("p"),PYe=o("This class cannot be instantiated directly using "),NU=a("code"),$Ye=o("__init__()"),IYe=o(" (throws an error)."),jYe=l(),Be=a("div"),f(P4.$$.fragment),NYe=l(),DU=a("p"),DYe=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),qYe=l(),Di=a("p"),GYe=o("The processor class to instantiate is selected based on the "),qU=a("code"),OYe=o("model_type"),XYe=o(` property of the config object (either
passed as an argument or loaded from `),GU=a("code"),zYe=o("pretrained_model_name_or_path"),VYe=o(" if possible):"),WYe=l(),we=a("ul"),fh=a("li"),OU=a("strong"),QYe=o("clip"),HYe=o(" \u2014 "),ik=a("a"),UYe=o("CLIPProcessor"),JYe=o(" (CLIP model)"),YYe=l(),mh=a("li"),XU=a("strong"),KYe=o("layoutlmv2"),ZYe=o(" \u2014 "),dk=a("a"),eKe=o("LayoutLMv2Processor"),oKe=o(" (LayoutLMv2 model)"),rKe=l(),gh=a("li"),zU=a("strong"),tKe=o("layoutxlm"),aKe=o(" \u2014 "),ck=a("a"),nKe=o("LayoutXLMProcessor"),sKe=o(" (LayoutXLM model)"),lKe=l(),hh=a("li"),VU=a("strong"),iKe=o("speech_to_text"),dKe=o(" \u2014 "),fk=a("a"),cKe=o("Speech2TextProcessor"),fKe=o(" (Speech2Text model)"),mKe=l(),ph=a("li"),WU=a("strong"),gKe=o("speech_to_text_2"),hKe=o(" \u2014 "),mk=a("a"),pKe=o("Speech2Text2Processor"),_Ke=o(" (Speech2Text2 model)"),uKe=l(),_h=a("li"),QU=a("strong"),bKe=o("trocr"),vKe=o(" \u2014 "),gk=a("a"),TKe=o("TrOCRProcessor"),FKe=o(" (TrOCR model)"),CKe=l(),uh=a("li"),HU=a("strong"),MKe=o("vision-text-dual-encoder"),EKe=o(" \u2014 "),hk=a("a"),yKe=o("VisionTextDualEncoderProcessor"),wKe=o(" (VisionTextDualEncoder model)"),AKe=l(),bh=a("li"),UU=a("strong"),LKe=o("wav2vec2"),BKe=o(" \u2014 "),pk=a("a"),xKe=o("Wav2Vec2Processor"),kKe=o(" (Wav2Vec2 model)"),RKe=l(),f(vh.$$.fragment),SKe=l(),JU=a("p"),PKe=o("Examples:"),$Ke=l(),f($4.$$.fragment),IKe=l(),Th=a("div"),f(I4.$$.fragment),jKe=l(),YU=a("p"),NKe=o("Register a new processor for this class."),ELe=l(),qi=a("h2"),Fh=a("a"),KU=a("span"),f(j4.$$.fragment),DKe=l(),ZU=a("span"),qKe=o("AutoModel"),yLe=l(),Vo=a("div"),f(N4.$$.fragment),GKe=l(),Gi=a("p"),OKe=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eJ=a("code"),XKe=o("from_pretrained()"),zKe=o("class method or the "),oJ=a("code"),VKe=o("from_config()"),WKe=o(`class
method.`),QKe=l(),D4=a("p"),HKe=o("This class cannot be instantiated directly using "),rJ=a("code"),UKe=o("__init__()"),JKe=o(" (throws an error)."),YKe=l(),Nr=a("div"),f(q4.$$.fragment),KKe=l(),tJ=a("p"),ZKe=o("Instantiates one of the base model classes of the library from a configuration."),eZe=l(),Oi=a("p"),oZe=o(`Note:
Loading a model from its configuration file does `),aJ=a("strong"),rZe=o("not"),tZe=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("code"),aZe=o("from_pretrained()"),nZe=o("to load the model weights."),sZe=l(),sJ=a("p"),lZe=o("Examples:"),iZe=l(),f(G4.$$.fragment),dZe=l(),xe=a("div"),f(O4.$$.fragment),cZe=l(),lJ=a("p"),fZe=o("Instantiate one of the base model classes of the library from a pretrained model."),mZe=l(),Da=a("p"),gZe=o("The model class to instantiate is selected based on the "),iJ=a("code"),hZe=o("model_type"),pZe=o(` property of the config object (either
passed as an argument or loaded from `),dJ=a("code"),_Ze=o("pretrained_model_name_or_path"),uZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cJ=a("code"),bZe=o("pretrained_model_name_or_path"),vZe=o(":"),TZe=l(),F=a("ul"),Ch=a("li"),fJ=a("strong"),FZe=o("albert"),CZe=o(" \u2014 "),_k=a("a"),MZe=o("AlbertModel"),EZe=o(" (ALBERT model)"),yZe=l(),Mh=a("li"),mJ=a("strong"),wZe=o("bart"),AZe=o(" \u2014 "),uk=a("a"),LZe=o("BartModel"),BZe=o(" (BART model)"),xZe=l(),Eh=a("li"),gJ=a("strong"),kZe=o("beit"),RZe=o(" \u2014 "),bk=a("a"),SZe=o("BeitModel"),PZe=o(" (BEiT model)"),$Ze=l(),yh=a("li"),hJ=a("strong"),IZe=o("bert"),jZe=o(" \u2014 "),vk=a("a"),NZe=o("BertModel"),DZe=o(" (BERT model)"),qZe=l(),wh=a("li"),pJ=a("strong"),GZe=o("bert-generation"),OZe=o(" \u2014 "),Tk=a("a"),XZe=o("BertGenerationEncoder"),zZe=o(" (Bert Generation model)"),VZe=l(),Ah=a("li"),_J=a("strong"),WZe=o("big_bird"),QZe=o(" \u2014 "),Fk=a("a"),HZe=o("BigBirdModel"),UZe=o(" (BigBird model)"),JZe=l(),Lh=a("li"),uJ=a("strong"),YZe=o("bigbird_pegasus"),KZe=o(" \u2014 "),Ck=a("a"),ZZe=o("BigBirdPegasusModel"),eeo=o(" (BigBirdPegasus model)"),oeo=l(),Bh=a("li"),bJ=a("strong"),reo=o("blenderbot"),teo=o(" \u2014 "),Mk=a("a"),aeo=o("BlenderbotModel"),neo=o(" (Blenderbot model)"),seo=l(),xh=a("li"),vJ=a("strong"),leo=o("blenderbot-small"),ieo=o(" \u2014 "),Ek=a("a"),deo=o("BlenderbotSmallModel"),ceo=o(" (BlenderbotSmall model)"),feo=l(),kh=a("li"),TJ=a("strong"),meo=o("camembert"),geo=o(" \u2014 "),yk=a("a"),heo=o("CamembertModel"),peo=o(" (CamemBERT model)"),_eo=l(),Rh=a("li"),FJ=a("strong"),ueo=o("canine"),beo=o(" \u2014 "),wk=a("a"),veo=o("CanineModel"),Teo=o(" (Canine model)"),Feo=l(),Sh=a("li"),CJ=a("strong"),Ceo=o("clip"),Meo=o(" \u2014 "),Ak=a("a"),Eeo=o("CLIPModel"),yeo=o(" (CLIP model)"),weo=l(),Ph=a("li"),MJ=a("strong"),Aeo=o("convbert"),Leo=o(" \u2014 "),Lk=a("a"),Beo=o("ConvBertModel"),xeo=o(" (ConvBERT model)"),keo=l(),$h=a("li"),EJ=a("strong"),Reo=o("convnext"),Seo=o(" \u2014 "),Bk=a("a"),Peo=o("ConvNextModel"),$eo=o(" (ConvNext model)"),Ieo=l(),Ih=a("li"),yJ=a("strong"),jeo=o("ctrl"),Neo=o(" \u2014 "),xk=a("a"),Deo=o("CTRLModel"),qeo=o(" (CTRL model)"),Geo=l(),jh=a("li"),wJ=a("strong"),Oeo=o("deberta"),Xeo=o(" \u2014 "),kk=a("a"),zeo=o("DebertaModel"),Veo=o(" (DeBERTa model)"),Weo=l(),Nh=a("li"),AJ=a("strong"),Qeo=o("deberta-v2"),Heo=o(" \u2014 "),Rk=a("a"),Ueo=o("DebertaV2Model"),Jeo=o(" (DeBERTa-v2 model)"),Yeo=l(),Dh=a("li"),LJ=a("strong"),Keo=o("deit"),Zeo=o(" \u2014 "),Sk=a("a"),eoo=o("DeiTModel"),ooo=o(" (DeiT model)"),roo=l(),qh=a("li"),BJ=a("strong"),too=o("detr"),aoo=o(" \u2014 "),Pk=a("a"),noo=o("DetrModel"),soo=o(" (DETR model)"),loo=l(),Gh=a("li"),xJ=a("strong"),ioo=o("distilbert"),doo=o(" \u2014 "),$k=a("a"),coo=o("DistilBertModel"),foo=o(" (DistilBERT model)"),moo=l(),Oh=a("li"),kJ=a("strong"),goo=o("dpr"),hoo=o(" \u2014 "),Ik=a("a"),poo=o("DPRQuestionEncoder"),_oo=o(" (DPR model)"),uoo=l(),Xh=a("li"),RJ=a("strong"),boo=o("electra"),voo=o(" \u2014 "),jk=a("a"),Too=o("ElectraModel"),Foo=o(" (ELECTRA model)"),Coo=l(),zh=a("li"),SJ=a("strong"),Moo=o("flaubert"),Eoo=o(" \u2014 "),Nk=a("a"),yoo=o("FlaubertModel"),woo=o(" (FlauBERT model)"),Aoo=l(),Vh=a("li"),PJ=a("strong"),Loo=o("fnet"),Boo=o(" \u2014 "),Dk=a("a"),xoo=o("FNetModel"),koo=o(" (FNet model)"),Roo=l(),Wh=a("li"),$J=a("strong"),Soo=o("fsmt"),Poo=o(" \u2014 "),qk=a("a"),$oo=o("FSMTModel"),Ioo=o(" (FairSeq Machine-Translation model)"),joo=l(),ks=a("li"),IJ=a("strong"),Noo=o("funnel"),Doo=o(" \u2014 "),Gk=a("a"),qoo=o("FunnelModel"),Goo=o(" or "),Ok=a("a"),Ooo=o("FunnelBaseModel"),Xoo=o(" (Funnel Transformer model)"),zoo=l(),Qh=a("li"),jJ=a("strong"),Voo=o("gpt2"),Woo=o(" \u2014 "),Xk=a("a"),Qoo=o("GPT2Model"),Hoo=o(" (OpenAI GPT-2 model)"),Uoo=l(),Hh=a("li"),NJ=a("strong"),Joo=o("gpt_neo"),Yoo=o(" \u2014 "),zk=a("a"),Koo=o("GPTNeoModel"),Zoo=o(" (GPT Neo model)"),ero=l(),Uh=a("li"),DJ=a("strong"),oro=o("gptj"),rro=o(" \u2014 "),Vk=a("a"),tro=o("GPTJModel"),aro=o(" (GPT-J model)"),nro=l(),Jh=a("li"),qJ=a("strong"),sro=o("hubert"),lro=o(" \u2014 "),Wk=a("a"),iro=o("HubertModel"),dro=o(" (Hubert model)"),cro=l(),Yh=a("li"),GJ=a("strong"),fro=o("ibert"),mro=o(" \u2014 "),Qk=a("a"),gro=o("IBertModel"),hro=o(" (I-BERT model)"),pro=l(),Kh=a("li"),OJ=a("strong"),_ro=o("imagegpt"),uro=o(" \u2014 "),Hk=a("a"),bro=o("ImageGPTModel"),vro=o(" (ImageGPT model)"),Tro=l(),Zh=a("li"),XJ=a("strong"),Fro=o("layoutlm"),Cro=o(" \u2014 "),Uk=a("a"),Mro=o("LayoutLMModel"),Ero=o(" (LayoutLM model)"),yro=l(),ep=a("li"),zJ=a("strong"),wro=o("layoutlmv2"),Aro=o(" \u2014 "),Jk=a("a"),Lro=o("LayoutLMv2Model"),Bro=o(" (LayoutLMv2 model)"),xro=l(),op=a("li"),VJ=a("strong"),kro=o("led"),Rro=o(" \u2014 "),Yk=a("a"),Sro=o("LEDModel"),Pro=o(" (LED model)"),$ro=l(),rp=a("li"),WJ=a("strong"),Iro=o("longformer"),jro=o(" \u2014 "),Kk=a("a"),Nro=o("LongformerModel"),Dro=o(" (Longformer model)"),qro=l(),tp=a("li"),QJ=a("strong"),Gro=o("luke"),Oro=o(" \u2014 "),Zk=a("a"),Xro=o("LukeModel"),zro=o(" (LUKE model)"),Vro=l(),ap=a("li"),HJ=a("strong"),Wro=o("lxmert"),Qro=o(" \u2014 "),eR=a("a"),Hro=o("LxmertModel"),Uro=o(" (LXMERT model)"),Jro=l(),np=a("li"),UJ=a("strong"),Yro=o("m2m_100"),Kro=o(" \u2014 "),oR=a("a"),Zro=o("M2M100Model"),eto=o(" (M2M100 model)"),oto=l(),sp=a("li"),JJ=a("strong"),rto=o("marian"),tto=o(" \u2014 "),rR=a("a"),ato=o("MarianModel"),nto=o(" (Marian model)"),sto=l(),lp=a("li"),YJ=a("strong"),lto=o("mbart"),ito=o(" \u2014 "),tR=a("a"),dto=o("MBartModel"),cto=o(" (mBART model)"),fto=l(),ip=a("li"),KJ=a("strong"),mto=o("megatron-bert"),gto=o(" \u2014 "),aR=a("a"),hto=o("MegatronBertModel"),pto=o(" (MegatronBert model)"),_to=l(),dp=a("li"),ZJ=a("strong"),uto=o("mobilebert"),bto=o(" \u2014 "),nR=a("a"),vto=o("MobileBertModel"),Tto=o(" (MobileBERT model)"),Fto=l(),cp=a("li"),eY=a("strong"),Cto=o("mpnet"),Mto=o(" \u2014 "),sR=a("a"),Eto=o("MPNetModel"),yto=o(" (MPNet model)"),wto=l(),fp=a("li"),oY=a("strong"),Ato=o("mt5"),Lto=o(" \u2014 "),lR=a("a"),Bto=o("MT5Model"),xto=o(" (mT5 model)"),kto=l(),mp=a("li"),rY=a("strong"),Rto=o("nystromformer"),Sto=o(" \u2014 "),iR=a("a"),Pto=o("NystromformerModel"),$to=o(" (Nystromformer model)"),Ito=l(),gp=a("li"),tY=a("strong"),jto=o("openai-gpt"),Nto=o(" \u2014 "),dR=a("a"),Dto=o("OpenAIGPTModel"),qto=o(" (OpenAI GPT model)"),Gto=l(),hp=a("li"),aY=a("strong"),Oto=o("pegasus"),Xto=o(" \u2014 "),cR=a("a"),zto=o("PegasusModel"),Vto=o(" (Pegasus model)"),Wto=l(),pp=a("li"),nY=a("strong"),Qto=o("perceiver"),Hto=o(" \u2014 "),fR=a("a"),Uto=o("PerceiverModel"),Jto=o(" (Perceiver model)"),Yto=l(),_p=a("li"),sY=a("strong"),Kto=o("plbart"),Zto=o(" \u2014 "),mR=a("a"),eao=o("PLBartModel"),oao=o(" (PLBart model)"),rao=l(),up=a("li"),lY=a("strong"),tao=o("poolformer"),aao=o(" \u2014 "),gR=a("a"),nao=o("PoolFormerModel"),sao=o(" (PoolFormer model)"),lao=l(),bp=a("li"),iY=a("strong"),iao=o("prophetnet"),dao=o(" \u2014 "),hR=a("a"),cao=o("ProphetNetModel"),fao=o(" (ProphetNet model)"),mao=l(),vp=a("li"),dY=a("strong"),gao=o("qdqbert"),hao=o(" \u2014 "),pR=a("a"),pao=o("QDQBertModel"),_ao=o(" (QDQBert model)"),uao=l(),Tp=a("li"),cY=a("strong"),bao=o("reformer"),vao=o(" \u2014 "),_R=a("a"),Tao=o("ReformerModel"),Fao=o(" (Reformer model)"),Cao=l(),Fp=a("li"),fY=a("strong"),Mao=o("rembert"),Eao=o(" \u2014 "),uR=a("a"),yao=o("RemBertModel"),wao=o(" (RemBERT model)"),Aao=l(),Cp=a("li"),mY=a("strong"),Lao=o("retribert"),Bao=o(" \u2014 "),bR=a("a"),xao=o("RetriBertModel"),kao=o(" (RetriBERT model)"),Rao=l(),Mp=a("li"),gY=a("strong"),Sao=o("roberta"),Pao=o(" \u2014 "),vR=a("a"),$ao=o("RobertaModel"),Iao=o(" (RoBERTa model)"),jao=l(),Ep=a("li"),hY=a("strong"),Nao=o("roformer"),Dao=o(" \u2014 "),TR=a("a"),qao=o("RoFormerModel"),Gao=o(" (RoFormer model)"),Oao=l(),yp=a("li"),pY=a("strong"),Xao=o("segformer"),zao=o(" \u2014 "),FR=a("a"),Vao=o("SegformerModel"),Wao=o(" (SegFormer model)"),Qao=l(),wp=a("li"),_Y=a("strong"),Hao=o("sew"),Uao=o(" \u2014 "),CR=a("a"),Jao=o("SEWModel"),Yao=o(" (SEW model)"),Kao=l(),Ap=a("li"),uY=a("strong"),Zao=o("sew-d"),eno=o(" \u2014 "),MR=a("a"),ono=o("SEWDModel"),rno=o(" (SEW-D model)"),tno=l(),Lp=a("li"),bY=a("strong"),ano=o("speech_to_text"),nno=o(" \u2014 "),ER=a("a"),sno=o("Speech2TextModel"),lno=o(" (Speech2Text model)"),ino=l(),Bp=a("li"),vY=a("strong"),dno=o("splinter"),cno=o(" \u2014 "),yR=a("a"),fno=o("SplinterModel"),mno=o(" (Splinter model)"),gno=l(),xp=a("li"),TY=a("strong"),hno=o("squeezebert"),pno=o(" \u2014 "),wR=a("a"),_no=o("SqueezeBertModel"),uno=o(" (SqueezeBERT model)"),bno=l(),kp=a("li"),FY=a("strong"),vno=o("swin"),Tno=o(" \u2014 "),AR=a("a"),Fno=o("SwinModel"),Cno=o(" (Swin model)"),Mno=l(),Rp=a("li"),CY=a("strong"),Eno=o("t5"),yno=o(" \u2014 "),LR=a("a"),wno=o("T5Model"),Ano=o(" (T5 model)"),Lno=l(),Sp=a("li"),MY=a("strong"),Bno=o("tapas"),xno=o(" \u2014 "),BR=a("a"),kno=o("TapasModel"),Rno=o(" (TAPAS model)"),Sno=l(),Pp=a("li"),EY=a("strong"),Pno=o("transfo-xl"),$no=o(" \u2014 "),xR=a("a"),Ino=o("TransfoXLModel"),jno=o(" (Transformer-XL model)"),Nno=l(),$p=a("li"),yY=a("strong"),Dno=o("unispeech"),qno=o(" \u2014 "),kR=a("a"),Gno=o("UniSpeechModel"),Ono=o(" (UniSpeech model)"),Xno=l(),Ip=a("li"),wY=a("strong"),zno=o("unispeech-sat"),Vno=o(" \u2014 "),RR=a("a"),Wno=o("UniSpeechSatModel"),Qno=o(" (UniSpeechSat model)"),Hno=l(),jp=a("li"),AY=a("strong"),Uno=o("vilt"),Jno=o(" \u2014 "),SR=a("a"),Yno=o("ViltModel"),Kno=o(" (ViLT model)"),Zno=l(),Np=a("li"),LY=a("strong"),eso=o("vision-text-dual-encoder"),oso=o(" \u2014 "),PR=a("a"),rso=o("VisionTextDualEncoderModel"),tso=o(" (VisionTextDualEncoder model)"),aso=l(),Dp=a("li"),BY=a("strong"),nso=o("visual_bert"),sso=o(" \u2014 "),$R=a("a"),lso=o("VisualBertModel"),iso=o(" (VisualBert model)"),dso=l(),qp=a("li"),xY=a("strong"),cso=o("vit"),fso=o(" \u2014 "),IR=a("a"),mso=o("ViTModel"),gso=o(" (ViT model)"),hso=l(),Gp=a("li"),kY=a("strong"),pso=o("vit_mae"),_so=o(" \u2014 "),jR=a("a"),uso=o("ViTMAEModel"),bso=o(" (ViTMAE model)"),vso=l(),Op=a("li"),RY=a("strong"),Tso=o("wav2vec2"),Fso=o(" \u2014 "),NR=a("a"),Cso=o("Wav2Vec2Model"),Mso=o(" (Wav2Vec2 model)"),Eso=l(),Xp=a("li"),SY=a("strong"),yso=o("wavlm"),wso=o(" \u2014 "),DR=a("a"),Aso=o("WavLMModel"),Lso=o(" (WavLM model)"),Bso=l(),zp=a("li"),PY=a("strong"),xso=o("xglm"),kso=o(" \u2014 "),qR=a("a"),Rso=o("XGLMModel"),Sso=o(" (XGLM model)"),Pso=l(),Vp=a("li"),$Y=a("strong"),$so=o("xlm"),Iso=o(" \u2014 "),GR=a("a"),jso=o("XLMModel"),Nso=o(" (XLM model)"),Dso=l(),Wp=a("li"),IY=a("strong"),qso=o("xlm-prophetnet"),Gso=o(" \u2014 "),OR=a("a"),Oso=o("XLMProphetNetModel"),Xso=o(" (XLMProphetNet model)"),zso=l(),Qp=a("li"),jY=a("strong"),Vso=o("xlm-roberta"),Wso=o(" \u2014 "),XR=a("a"),Qso=o("XLMRobertaModel"),Hso=o(" (XLM-RoBERTa model)"),Uso=l(),Hp=a("li"),NY=a("strong"),Jso=o("xlm-roberta-xl"),Yso=o(" \u2014 "),zR=a("a"),Kso=o("XLMRobertaXLModel"),Zso=o(" (XLM-RoBERTa-XL model)"),elo=l(),Up=a("li"),DY=a("strong"),olo=o("xlnet"),rlo=o(" \u2014 "),VR=a("a"),tlo=o("XLNetModel"),alo=o(" (XLNet model)"),nlo=l(),Jp=a("li"),qY=a("strong"),slo=o("yoso"),llo=o(" \u2014 "),WR=a("a"),ilo=o("YosoModel"),dlo=o(" (YOSO model)"),clo=l(),Yp=a("p"),flo=o("The model is set in evaluation mode by default using "),GY=a("code"),mlo=o("model.eval()"),glo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OY=a("code"),hlo=o("model.train()"),plo=l(),XY=a("p"),_lo=o("Examples:"),ulo=l(),f(X4.$$.fragment),wLe=l(),Xi=a("h2"),Kp=a("a"),zY=a("span"),f(z4.$$.fragment),blo=l(),VY=a("span"),vlo=o("AutoModelForPreTraining"),ALe=l(),Wo=a("div"),f(V4.$$.fragment),Tlo=l(),zi=a("p"),Flo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WY=a("code"),Clo=o("from_pretrained()"),Mlo=o("class method or the "),QY=a("code"),Elo=o("from_config()"),ylo=o(`class
method.`),wlo=l(),W4=a("p"),Alo=o("This class cannot be instantiated directly using "),HY=a("code"),Llo=o("__init__()"),Blo=o(" (throws an error)."),xlo=l(),Dr=a("div"),f(Q4.$$.fragment),klo=l(),UY=a("p"),Rlo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Slo=l(),Vi=a("p"),Plo=o(`Note:
Loading a model from its configuration file does `),JY=a("strong"),$lo=o("not"),Ilo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=a("code"),jlo=o("from_pretrained()"),Nlo=o("to load the model weights."),Dlo=l(),KY=a("p"),qlo=o("Examples:"),Glo=l(),f(H4.$$.fragment),Olo=l(),ke=a("div"),f(U4.$$.fragment),Xlo=l(),ZY=a("p"),zlo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Vlo=l(),qa=a("p"),Wlo=o("The model class to instantiate is selected based on the "),eK=a("code"),Qlo=o("model_type"),Hlo=o(` property of the config object (either
passed as an argument or loaded from `),oK=a("code"),Ulo=o("pretrained_model_name_or_path"),Jlo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rK=a("code"),Ylo=o("pretrained_model_name_or_path"),Klo=o(":"),Zlo=l(),k=a("ul"),Zp=a("li"),tK=a("strong"),eio=o("albert"),oio=o(" \u2014 "),QR=a("a"),rio=o("AlbertForPreTraining"),tio=o(" (ALBERT model)"),aio=l(),e_=a("li"),aK=a("strong"),nio=o("bart"),sio=o(" \u2014 "),HR=a("a"),lio=o("BartForConditionalGeneration"),iio=o(" (BART model)"),dio=l(),o_=a("li"),nK=a("strong"),cio=o("bert"),fio=o(" \u2014 "),UR=a("a"),mio=o("BertForPreTraining"),gio=o(" (BERT model)"),hio=l(),r_=a("li"),sK=a("strong"),pio=o("big_bird"),_io=o(" \u2014 "),JR=a("a"),uio=o("BigBirdForPreTraining"),bio=o(" (BigBird model)"),vio=l(),t_=a("li"),lK=a("strong"),Tio=o("camembert"),Fio=o(" \u2014 "),YR=a("a"),Cio=o("CamembertForMaskedLM"),Mio=o(" (CamemBERT model)"),Eio=l(),a_=a("li"),iK=a("strong"),yio=o("ctrl"),wio=o(" \u2014 "),KR=a("a"),Aio=o("CTRLLMHeadModel"),Lio=o(" (CTRL model)"),Bio=l(),n_=a("li"),dK=a("strong"),xio=o("deberta"),kio=o(" \u2014 "),ZR=a("a"),Rio=o("DebertaForMaskedLM"),Sio=o(" (DeBERTa model)"),Pio=l(),s_=a("li"),cK=a("strong"),$io=o("deberta-v2"),Iio=o(" \u2014 "),eS=a("a"),jio=o("DebertaV2ForMaskedLM"),Nio=o(" (DeBERTa-v2 model)"),Dio=l(),l_=a("li"),fK=a("strong"),qio=o("distilbert"),Gio=o(" \u2014 "),oS=a("a"),Oio=o("DistilBertForMaskedLM"),Xio=o(" (DistilBERT model)"),zio=l(),i_=a("li"),mK=a("strong"),Vio=o("electra"),Wio=o(" \u2014 "),rS=a("a"),Qio=o("ElectraForPreTraining"),Hio=o(" (ELECTRA model)"),Uio=l(),d_=a("li"),gK=a("strong"),Jio=o("flaubert"),Yio=o(" \u2014 "),tS=a("a"),Kio=o("FlaubertWithLMHeadModel"),Zio=o(" (FlauBERT model)"),edo=l(),c_=a("li"),hK=a("strong"),odo=o("fnet"),rdo=o(" \u2014 "),aS=a("a"),tdo=o("FNetForPreTraining"),ado=o(" (FNet model)"),ndo=l(),f_=a("li"),pK=a("strong"),sdo=o("fsmt"),ldo=o(" \u2014 "),nS=a("a"),ido=o("FSMTForConditionalGeneration"),ddo=o(" (FairSeq Machine-Translation model)"),cdo=l(),m_=a("li"),_K=a("strong"),fdo=o("funnel"),mdo=o(" \u2014 "),sS=a("a"),gdo=o("FunnelForPreTraining"),hdo=o(" (Funnel Transformer model)"),pdo=l(),g_=a("li"),uK=a("strong"),_do=o("gpt2"),udo=o(" \u2014 "),lS=a("a"),bdo=o("GPT2LMHeadModel"),vdo=o(" (OpenAI GPT-2 model)"),Tdo=l(),h_=a("li"),bK=a("strong"),Fdo=o("ibert"),Cdo=o(" \u2014 "),iS=a("a"),Mdo=o("IBertForMaskedLM"),Edo=o(" (I-BERT model)"),ydo=l(),p_=a("li"),vK=a("strong"),wdo=o("layoutlm"),Ado=o(" \u2014 "),dS=a("a"),Ldo=o("LayoutLMForMaskedLM"),Bdo=o(" (LayoutLM model)"),xdo=l(),__=a("li"),TK=a("strong"),kdo=o("longformer"),Rdo=o(" \u2014 "),cS=a("a"),Sdo=o("LongformerForMaskedLM"),Pdo=o(" (Longformer model)"),$do=l(),u_=a("li"),FK=a("strong"),Ido=o("lxmert"),jdo=o(" \u2014 "),fS=a("a"),Ndo=o("LxmertForPreTraining"),Ddo=o(" (LXMERT model)"),qdo=l(),b_=a("li"),CK=a("strong"),Gdo=o("megatron-bert"),Odo=o(" \u2014 "),mS=a("a"),Xdo=o("MegatronBertForPreTraining"),zdo=o(" (MegatronBert model)"),Vdo=l(),v_=a("li"),MK=a("strong"),Wdo=o("mobilebert"),Qdo=o(" \u2014 "),gS=a("a"),Hdo=o("MobileBertForPreTraining"),Udo=o(" (MobileBERT model)"),Jdo=l(),T_=a("li"),EK=a("strong"),Ydo=o("mpnet"),Kdo=o(" \u2014 "),hS=a("a"),Zdo=o("MPNetForMaskedLM"),eco=o(" (MPNet model)"),oco=l(),F_=a("li"),yK=a("strong"),rco=o("openai-gpt"),tco=o(" \u2014 "),pS=a("a"),aco=o("OpenAIGPTLMHeadModel"),nco=o(" (OpenAI GPT model)"),sco=l(),C_=a("li"),wK=a("strong"),lco=o("retribert"),ico=o(" \u2014 "),_S=a("a"),dco=o("RetriBertModel"),cco=o(" (RetriBERT model)"),fco=l(),M_=a("li"),AK=a("strong"),mco=o("roberta"),gco=o(" \u2014 "),uS=a("a"),hco=o("RobertaForMaskedLM"),pco=o(" (RoBERTa model)"),_co=l(),E_=a("li"),LK=a("strong"),uco=o("squeezebert"),bco=o(" \u2014 "),bS=a("a"),vco=o("SqueezeBertForMaskedLM"),Tco=o(" (SqueezeBERT model)"),Fco=l(),y_=a("li"),BK=a("strong"),Cco=o("t5"),Mco=o(" \u2014 "),vS=a("a"),Eco=o("T5ForConditionalGeneration"),yco=o(" (T5 model)"),wco=l(),w_=a("li"),xK=a("strong"),Aco=o("tapas"),Lco=o(" \u2014 "),TS=a("a"),Bco=o("TapasForMaskedLM"),xco=o(" (TAPAS model)"),kco=l(),A_=a("li"),kK=a("strong"),Rco=o("transfo-xl"),Sco=o(" \u2014 "),FS=a("a"),Pco=o("TransfoXLLMHeadModel"),$co=o(" (Transformer-XL model)"),Ico=l(),L_=a("li"),RK=a("strong"),jco=o("unispeech"),Nco=o(" \u2014 "),CS=a("a"),Dco=o("UniSpeechForPreTraining"),qco=o(" (UniSpeech model)"),Gco=l(),B_=a("li"),SK=a("strong"),Oco=o("unispeech-sat"),Xco=o(" \u2014 "),MS=a("a"),zco=o("UniSpeechSatForPreTraining"),Vco=o(" (UniSpeechSat model)"),Wco=l(),x_=a("li"),PK=a("strong"),Qco=o("visual_bert"),Hco=o(" \u2014 "),ES=a("a"),Uco=o("VisualBertForPreTraining"),Jco=o(" (VisualBert model)"),Yco=l(),k_=a("li"),$K=a("strong"),Kco=o("vit_mae"),Zco=o(" \u2014 "),yS=a("a"),efo=o("ViTMAEForPreTraining"),ofo=o(" (ViTMAE model)"),rfo=l(),R_=a("li"),IK=a("strong"),tfo=o("wav2vec2"),afo=o(" \u2014 "),wS=a("a"),nfo=o("Wav2Vec2ForPreTraining"),sfo=o(" (Wav2Vec2 model)"),lfo=l(),S_=a("li"),jK=a("strong"),ifo=o("xlm"),dfo=o(" \u2014 "),AS=a("a"),cfo=o("XLMWithLMHeadModel"),ffo=o(" (XLM model)"),mfo=l(),P_=a("li"),NK=a("strong"),gfo=o("xlm-roberta"),hfo=o(" \u2014 "),LS=a("a"),pfo=o("XLMRobertaForMaskedLM"),_fo=o(" (XLM-RoBERTa model)"),ufo=l(),$_=a("li"),DK=a("strong"),bfo=o("xlm-roberta-xl"),vfo=o(" \u2014 "),BS=a("a"),Tfo=o("XLMRobertaXLForMaskedLM"),Ffo=o(" (XLM-RoBERTa-XL model)"),Cfo=l(),I_=a("li"),qK=a("strong"),Mfo=o("xlnet"),Efo=o(" \u2014 "),xS=a("a"),yfo=o("XLNetLMHeadModel"),wfo=o(" (XLNet model)"),Afo=l(),j_=a("p"),Lfo=o("The model is set in evaluation mode by default using "),GK=a("code"),Bfo=o("model.eval()"),xfo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OK=a("code"),kfo=o("model.train()"),Rfo=l(),XK=a("p"),Sfo=o("Examples:"),Pfo=l(),f(J4.$$.fragment),LLe=l(),Wi=a("h2"),N_=a("a"),zK=a("span"),f(Y4.$$.fragment),$fo=l(),VK=a("span"),Ifo=o("AutoModelForCausalLM"),BLe=l(),Qo=a("div"),f(K4.$$.fragment),jfo=l(),Qi=a("p"),Nfo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WK=a("code"),Dfo=o("from_pretrained()"),qfo=o("class method or the "),QK=a("code"),Gfo=o("from_config()"),Ofo=o(`class
method.`),Xfo=l(),Z4=a("p"),zfo=o("This class cannot be instantiated directly using "),HK=a("code"),Vfo=o("__init__()"),Wfo=o(" (throws an error)."),Qfo=l(),qr=a("div"),f(eM.$$.fragment),Hfo=l(),UK=a("p"),Ufo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Jfo=l(),Hi=a("p"),Yfo=o(`Note:
Loading a model from its configuration file does `),JK=a("strong"),Kfo=o("not"),Zfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=a("code"),emo=o("from_pretrained()"),omo=o("to load the model weights."),rmo=l(),KK=a("p"),tmo=o("Examples:"),amo=l(),f(oM.$$.fragment),nmo=l(),Re=a("div"),f(rM.$$.fragment),smo=l(),ZK=a("p"),lmo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),imo=l(),Ga=a("p"),dmo=o("The model class to instantiate is selected based on the "),eZ=a("code"),cmo=o("model_type"),fmo=o(` property of the config object (either
passed as an argument or loaded from `),oZ=a("code"),mmo=o("pretrained_model_name_or_path"),gmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rZ=a("code"),hmo=o("pretrained_model_name_or_path"),pmo=o(":"),_mo=l(),$=a("ul"),D_=a("li"),tZ=a("strong"),umo=o("bart"),bmo=o(" \u2014 "),kS=a("a"),vmo=o("BartForCausalLM"),Tmo=o(" (BART model)"),Fmo=l(),q_=a("li"),aZ=a("strong"),Cmo=o("bert"),Mmo=o(" \u2014 "),RS=a("a"),Emo=o("BertLMHeadModel"),ymo=o(" (BERT model)"),wmo=l(),G_=a("li"),nZ=a("strong"),Amo=o("bert-generation"),Lmo=o(" \u2014 "),SS=a("a"),Bmo=o("BertGenerationDecoder"),xmo=o(" (Bert Generation model)"),kmo=l(),O_=a("li"),sZ=a("strong"),Rmo=o("big_bird"),Smo=o(" \u2014 "),PS=a("a"),Pmo=o("BigBirdForCausalLM"),$mo=o(" (BigBird model)"),Imo=l(),X_=a("li"),lZ=a("strong"),jmo=o("bigbird_pegasus"),Nmo=o(" \u2014 "),$S=a("a"),Dmo=o("BigBirdPegasusForCausalLM"),qmo=o(" (BigBirdPegasus model)"),Gmo=l(),z_=a("li"),iZ=a("strong"),Omo=o("blenderbot"),Xmo=o(" \u2014 "),IS=a("a"),zmo=o("BlenderbotForCausalLM"),Vmo=o(" (Blenderbot model)"),Wmo=l(),V_=a("li"),dZ=a("strong"),Qmo=o("blenderbot-small"),Hmo=o(" \u2014 "),jS=a("a"),Umo=o("BlenderbotSmallForCausalLM"),Jmo=o(" (BlenderbotSmall model)"),Ymo=l(),W_=a("li"),cZ=a("strong"),Kmo=o("camembert"),Zmo=o(" \u2014 "),NS=a("a"),ego=o("CamembertForCausalLM"),ogo=o(" (CamemBERT model)"),rgo=l(),Q_=a("li"),fZ=a("strong"),tgo=o("ctrl"),ago=o(" \u2014 "),DS=a("a"),ngo=o("CTRLLMHeadModel"),sgo=o(" (CTRL model)"),lgo=l(),H_=a("li"),mZ=a("strong"),igo=o("electra"),dgo=o(" \u2014 "),qS=a("a"),cgo=o("ElectraForCausalLM"),fgo=o(" (ELECTRA model)"),mgo=l(),U_=a("li"),gZ=a("strong"),ggo=o("gpt2"),hgo=o(" \u2014 "),GS=a("a"),pgo=o("GPT2LMHeadModel"),_go=o(" (OpenAI GPT-2 model)"),ugo=l(),J_=a("li"),hZ=a("strong"),bgo=o("gpt_neo"),vgo=o(" \u2014 "),OS=a("a"),Tgo=o("GPTNeoForCausalLM"),Fgo=o(" (GPT Neo model)"),Cgo=l(),Y_=a("li"),pZ=a("strong"),Mgo=o("gptj"),Ego=o(" \u2014 "),XS=a("a"),ygo=o("GPTJForCausalLM"),wgo=o(" (GPT-J model)"),Ago=l(),K_=a("li"),_Z=a("strong"),Lgo=o("marian"),Bgo=o(" \u2014 "),zS=a("a"),xgo=o("MarianForCausalLM"),kgo=o(" (Marian model)"),Rgo=l(),Z_=a("li"),uZ=a("strong"),Sgo=o("mbart"),Pgo=o(" \u2014 "),VS=a("a"),$go=o("MBartForCausalLM"),Igo=o(" (mBART model)"),jgo=l(),eu=a("li"),bZ=a("strong"),Ngo=o("megatron-bert"),Dgo=o(" \u2014 "),WS=a("a"),qgo=o("MegatronBertForCausalLM"),Ggo=o(" (MegatronBert model)"),Ogo=l(),ou=a("li"),vZ=a("strong"),Xgo=o("openai-gpt"),zgo=o(" \u2014 "),QS=a("a"),Vgo=o("OpenAIGPTLMHeadModel"),Wgo=o(" (OpenAI GPT model)"),Qgo=l(),ru=a("li"),TZ=a("strong"),Hgo=o("pegasus"),Ugo=o(" \u2014 "),HS=a("a"),Jgo=o("PegasusForCausalLM"),Ygo=o(" (Pegasus model)"),Kgo=l(),tu=a("li"),FZ=a("strong"),Zgo=o("plbart"),eho=o(" \u2014 "),US=a("a"),oho=o("PLBartForCausalLM"),rho=o(" (PLBart model)"),tho=l(),au=a("li"),CZ=a("strong"),aho=o("prophetnet"),nho=o(" \u2014 "),JS=a("a"),sho=o("ProphetNetForCausalLM"),lho=o(" (ProphetNet model)"),iho=l(),nu=a("li"),MZ=a("strong"),dho=o("qdqbert"),cho=o(" \u2014 "),YS=a("a"),fho=o("QDQBertLMHeadModel"),mho=o(" (QDQBert model)"),gho=l(),su=a("li"),EZ=a("strong"),hho=o("reformer"),pho=o(" \u2014 "),KS=a("a"),_ho=o("ReformerModelWithLMHead"),uho=o(" (Reformer model)"),bho=l(),lu=a("li"),yZ=a("strong"),vho=o("rembert"),Tho=o(" \u2014 "),ZS=a("a"),Fho=o("RemBertForCausalLM"),Cho=o(" (RemBERT model)"),Mho=l(),iu=a("li"),wZ=a("strong"),Eho=o("roberta"),yho=o(" \u2014 "),eP=a("a"),who=o("RobertaForCausalLM"),Aho=o(" (RoBERTa model)"),Lho=l(),du=a("li"),AZ=a("strong"),Bho=o("roformer"),xho=o(" \u2014 "),oP=a("a"),kho=o("RoFormerForCausalLM"),Rho=o(" (RoFormer model)"),Sho=l(),cu=a("li"),LZ=a("strong"),Pho=o("speech_to_text_2"),$ho=o(" \u2014 "),rP=a("a"),Iho=o("Speech2Text2ForCausalLM"),jho=o(" (Speech2Text2 model)"),Nho=l(),fu=a("li"),BZ=a("strong"),Dho=o("transfo-xl"),qho=o(" \u2014 "),tP=a("a"),Gho=o("TransfoXLLMHeadModel"),Oho=o(" (Transformer-XL model)"),Xho=l(),mu=a("li"),xZ=a("strong"),zho=o("trocr"),Vho=o(" \u2014 "),aP=a("a"),Who=o("TrOCRForCausalLM"),Qho=o(" (TrOCR model)"),Hho=l(),gu=a("li"),kZ=a("strong"),Uho=o("xglm"),Jho=o(" \u2014 "),nP=a("a"),Yho=o("XGLMForCausalLM"),Kho=o(" (XGLM model)"),Zho=l(),hu=a("li"),RZ=a("strong"),epo=o("xlm"),opo=o(" \u2014 "),sP=a("a"),rpo=o("XLMWithLMHeadModel"),tpo=o(" (XLM model)"),apo=l(),pu=a("li"),SZ=a("strong"),npo=o("xlm-prophetnet"),spo=o(" \u2014 "),lP=a("a"),lpo=o("XLMProphetNetForCausalLM"),ipo=o(" (XLMProphetNet model)"),dpo=l(),_u=a("li"),PZ=a("strong"),cpo=o("xlm-roberta"),fpo=o(" \u2014 "),iP=a("a"),mpo=o("XLMRobertaForCausalLM"),gpo=o(" (XLM-RoBERTa model)"),hpo=l(),uu=a("li"),$Z=a("strong"),ppo=o("xlm-roberta-xl"),_po=o(" \u2014 "),dP=a("a"),upo=o("XLMRobertaXLForCausalLM"),bpo=o(" (XLM-RoBERTa-XL model)"),vpo=l(),bu=a("li"),IZ=a("strong"),Tpo=o("xlnet"),Fpo=o(" \u2014 "),cP=a("a"),Cpo=o("XLNetLMHeadModel"),Mpo=o(" (XLNet model)"),Epo=l(),vu=a("p"),ypo=o("The model is set in evaluation mode by default using "),jZ=a("code"),wpo=o("model.eval()"),Apo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),NZ=a("code"),Lpo=o("model.train()"),Bpo=l(),DZ=a("p"),xpo=o("Examples:"),kpo=l(),f(tM.$$.fragment),xLe=l(),Ui=a("h2"),Tu=a("a"),qZ=a("span"),f(aM.$$.fragment),Rpo=l(),GZ=a("span"),Spo=o("AutoModelForMaskedLM"),kLe=l(),Ho=a("div"),f(nM.$$.fragment),Ppo=l(),Ji=a("p"),$po=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OZ=a("code"),Ipo=o("from_pretrained()"),jpo=o("class method or the "),XZ=a("code"),Npo=o("from_config()"),Dpo=o(`class
method.`),qpo=l(),sM=a("p"),Gpo=o("This class cannot be instantiated directly using "),zZ=a("code"),Opo=o("__init__()"),Xpo=o(" (throws an error)."),zpo=l(),Gr=a("div"),f(lM.$$.fragment),Vpo=l(),VZ=a("p"),Wpo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Qpo=l(),Yi=a("p"),Hpo=o(`Note:
Loading a model from its configuration file does `),WZ=a("strong"),Upo=o("not"),Jpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=a("code"),Ypo=o("from_pretrained()"),Kpo=o("to load the model weights."),Zpo=l(),HZ=a("p"),e_o=o("Examples:"),o_o=l(),f(iM.$$.fragment),r_o=l(),Se=a("div"),f(dM.$$.fragment),t_o=l(),UZ=a("p"),a_o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),n_o=l(),Oa=a("p"),s_o=o("The model class to instantiate is selected based on the "),JZ=a("code"),l_o=o("model_type"),i_o=o(` property of the config object (either
passed as an argument or loaded from `),YZ=a("code"),d_o=o("pretrained_model_name_or_path"),c_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KZ=a("code"),f_o=o("pretrained_model_name_or_path"),m_o=o(":"),g_o=l(),I=a("ul"),Fu=a("li"),ZZ=a("strong"),h_o=o("albert"),p_o=o(" \u2014 "),fP=a("a"),__o=o("AlbertForMaskedLM"),u_o=o(" (ALBERT model)"),b_o=l(),Cu=a("li"),eee=a("strong"),v_o=o("bart"),T_o=o(" \u2014 "),mP=a("a"),F_o=o("BartForConditionalGeneration"),C_o=o(" (BART model)"),M_o=l(),Mu=a("li"),oee=a("strong"),E_o=o("bert"),y_o=o(" \u2014 "),gP=a("a"),w_o=o("BertForMaskedLM"),A_o=o(" (BERT model)"),L_o=l(),Eu=a("li"),ree=a("strong"),B_o=o("big_bird"),x_o=o(" \u2014 "),hP=a("a"),k_o=o("BigBirdForMaskedLM"),R_o=o(" (BigBird model)"),S_o=l(),yu=a("li"),tee=a("strong"),P_o=o("camembert"),$_o=o(" \u2014 "),pP=a("a"),I_o=o("CamembertForMaskedLM"),j_o=o(" (CamemBERT model)"),N_o=l(),wu=a("li"),aee=a("strong"),D_o=o("convbert"),q_o=o(" \u2014 "),_P=a("a"),G_o=o("ConvBertForMaskedLM"),O_o=o(" (ConvBERT model)"),X_o=l(),Au=a("li"),nee=a("strong"),z_o=o("deberta"),V_o=o(" \u2014 "),uP=a("a"),W_o=o("DebertaForMaskedLM"),Q_o=o(" (DeBERTa model)"),H_o=l(),Lu=a("li"),see=a("strong"),U_o=o("deberta-v2"),J_o=o(" \u2014 "),bP=a("a"),Y_o=o("DebertaV2ForMaskedLM"),K_o=o(" (DeBERTa-v2 model)"),Z_o=l(),Bu=a("li"),lee=a("strong"),euo=o("distilbert"),ouo=o(" \u2014 "),vP=a("a"),ruo=o("DistilBertForMaskedLM"),tuo=o(" (DistilBERT model)"),auo=l(),xu=a("li"),iee=a("strong"),nuo=o("electra"),suo=o(" \u2014 "),TP=a("a"),luo=o("ElectraForMaskedLM"),iuo=o(" (ELECTRA model)"),duo=l(),ku=a("li"),dee=a("strong"),cuo=o("flaubert"),fuo=o(" \u2014 "),FP=a("a"),muo=o("FlaubertWithLMHeadModel"),guo=o(" (FlauBERT model)"),huo=l(),Ru=a("li"),cee=a("strong"),puo=o("fnet"),_uo=o(" \u2014 "),CP=a("a"),uuo=o("FNetForMaskedLM"),buo=o(" (FNet model)"),vuo=l(),Su=a("li"),fee=a("strong"),Tuo=o("funnel"),Fuo=o(" \u2014 "),MP=a("a"),Cuo=o("FunnelForMaskedLM"),Muo=o(" (Funnel Transformer model)"),Euo=l(),Pu=a("li"),mee=a("strong"),yuo=o("ibert"),wuo=o(" \u2014 "),EP=a("a"),Auo=o("IBertForMaskedLM"),Luo=o(" (I-BERT model)"),Buo=l(),$u=a("li"),gee=a("strong"),xuo=o("layoutlm"),kuo=o(" \u2014 "),yP=a("a"),Ruo=o("LayoutLMForMaskedLM"),Suo=o(" (LayoutLM model)"),Puo=l(),Iu=a("li"),hee=a("strong"),$uo=o("longformer"),Iuo=o(" \u2014 "),wP=a("a"),juo=o("LongformerForMaskedLM"),Nuo=o(" (Longformer model)"),Duo=l(),ju=a("li"),pee=a("strong"),quo=o("mbart"),Guo=o(" \u2014 "),AP=a("a"),Ouo=o("MBartForConditionalGeneration"),Xuo=o(" (mBART model)"),zuo=l(),Nu=a("li"),_ee=a("strong"),Vuo=o("megatron-bert"),Wuo=o(" \u2014 "),LP=a("a"),Quo=o("MegatronBertForMaskedLM"),Huo=o(" (MegatronBert model)"),Uuo=l(),Du=a("li"),uee=a("strong"),Juo=o("mobilebert"),Yuo=o(" \u2014 "),BP=a("a"),Kuo=o("MobileBertForMaskedLM"),Zuo=o(" (MobileBERT model)"),e1o=l(),qu=a("li"),bee=a("strong"),o1o=o("mpnet"),r1o=o(" \u2014 "),xP=a("a"),t1o=o("MPNetForMaskedLM"),a1o=o(" (MPNet model)"),n1o=l(),Gu=a("li"),vee=a("strong"),s1o=o("nystromformer"),l1o=o(" \u2014 "),kP=a("a"),i1o=o("NystromformerForMaskedLM"),d1o=o(" (Nystromformer model)"),c1o=l(),Ou=a("li"),Tee=a("strong"),f1o=o("perceiver"),m1o=o(" \u2014 "),RP=a("a"),g1o=o("PerceiverForMaskedLM"),h1o=o(" (Perceiver model)"),p1o=l(),Xu=a("li"),Fee=a("strong"),_1o=o("qdqbert"),u1o=o(" \u2014 "),SP=a("a"),b1o=o("QDQBertForMaskedLM"),v1o=o(" (QDQBert model)"),T1o=l(),zu=a("li"),Cee=a("strong"),F1o=o("reformer"),C1o=o(" \u2014 "),PP=a("a"),M1o=o("ReformerForMaskedLM"),E1o=o(" (Reformer model)"),y1o=l(),Vu=a("li"),Mee=a("strong"),w1o=o("rembert"),A1o=o(" \u2014 "),$P=a("a"),L1o=o("RemBertForMaskedLM"),B1o=o(" (RemBERT model)"),x1o=l(),Wu=a("li"),Eee=a("strong"),k1o=o("roberta"),R1o=o(" \u2014 "),IP=a("a"),S1o=o("RobertaForMaskedLM"),P1o=o(" (RoBERTa model)"),$1o=l(),Qu=a("li"),yee=a("strong"),I1o=o("roformer"),j1o=o(" \u2014 "),jP=a("a"),N1o=o("RoFormerForMaskedLM"),D1o=o(" (RoFormer model)"),q1o=l(),Hu=a("li"),wee=a("strong"),G1o=o("squeezebert"),O1o=o(" \u2014 "),NP=a("a"),X1o=o("SqueezeBertForMaskedLM"),z1o=o(" (SqueezeBERT model)"),V1o=l(),Uu=a("li"),Aee=a("strong"),W1o=o("tapas"),Q1o=o(" \u2014 "),DP=a("a"),H1o=o("TapasForMaskedLM"),U1o=o(" (TAPAS model)"),J1o=l(),Ju=a("li"),Lee=a("strong"),Y1o=o("wav2vec2"),K1o=o(" \u2014 "),Bee=a("code"),Z1o=o("Wav2Vec2ForMaskedLM"),ebo=o("(Wav2Vec2 model)"),obo=l(),Yu=a("li"),xee=a("strong"),rbo=o("xlm"),tbo=o(" \u2014 "),qP=a("a"),abo=o("XLMWithLMHeadModel"),nbo=o(" (XLM model)"),sbo=l(),Ku=a("li"),kee=a("strong"),lbo=o("xlm-roberta"),ibo=o(" \u2014 "),GP=a("a"),dbo=o("XLMRobertaForMaskedLM"),cbo=o(" (XLM-RoBERTa model)"),fbo=l(),Zu=a("li"),Ree=a("strong"),mbo=o("xlm-roberta-xl"),gbo=o(" \u2014 "),OP=a("a"),hbo=o("XLMRobertaXLForMaskedLM"),pbo=o(" (XLM-RoBERTa-XL model)"),_bo=l(),e1=a("li"),See=a("strong"),ubo=o("yoso"),bbo=o(" \u2014 "),XP=a("a"),vbo=o("YosoForMaskedLM"),Tbo=o(" (YOSO model)"),Fbo=l(),o1=a("p"),Cbo=o("The model is set in evaluation mode by default using "),Pee=a("code"),Mbo=o("model.eval()"),Ebo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ee=a("code"),ybo=o("model.train()"),wbo=l(),Iee=a("p"),Abo=o("Examples:"),Lbo=l(),f(cM.$$.fragment),RLe=l(),Ki=a("h2"),r1=a("a"),jee=a("span"),f(fM.$$.fragment),Bbo=l(),Nee=a("span"),xbo=o("AutoModelForSeq2SeqLM"),SLe=l(),Uo=a("div"),f(mM.$$.fragment),kbo=l(),Zi=a("p"),Rbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Dee=a("code"),Sbo=o("from_pretrained()"),Pbo=o("class method or the "),qee=a("code"),$bo=o("from_config()"),Ibo=o(`class
method.`),jbo=l(),gM=a("p"),Nbo=o("This class cannot be instantiated directly using "),Gee=a("code"),Dbo=o("__init__()"),qbo=o(" (throws an error)."),Gbo=l(),Or=a("div"),f(hM.$$.fragment),Obo=l(),Oee=a("p"),Xbo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),zbo=l(),ed=a("p"),Vbo=o(`Note:
Loading a model from its configuration file does `),Xee=a("strong"),Wbo=o("not"),Qbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=a("code"),Hbo=o("from_pretrained()"),Ubo=o("to load the model weights."),Jbo=l(),Vee=a("p"),Ybo=o("Examples:"),Kbo=l(),f(pM.$$.fragment),Zbo=l(),Pe=a("div"),f(_M.$$.fragment),e5o=l(),Wee=a("p"),o5o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),r5o=l(),Xa=a("p"),t5o=o("The model class to instantiate is selected based on the "),Qee=a("code"),a5o=o("model_type"),n5o=o(` property of the config object (either
passed as an argument or loaded from `),Hee=a("code"),s5o=o("pretrained_model_name_or_path"),l5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uee=a("code"),i5o=o("pretrained_model_name_or_path"),d5o=o(":"),c5o=l(),ae=a("ul"),t1=a("li"),Jee=a("strong"),f5o=o("bart"),m5o=o(" \u2014 "),zP=a("a"),g5o=o("BartForConditionalGeneration"),h5o=o(" (BART model)"),p5o=l(),a1=a("li"),Yee=a("strong"),_5o=o("bigbird_pegasus"),u5o=o(" \u2014 "),VP=a("a"),b5o=o("BigBirdPegasusForConditionalGeneration"),v5o=o(" (BigBirdPegasus model)"),T5o=l(),n1=a("li"),Kee=a("strong"),F5o=o("blenderbot"),C5o=o(" \u2014 "),WP=a("a"),M5o=o("BlenderbotForConditionalGeneration"),E5o=o(" (Blenderbot model)"),y5o=l(),s1=a("li"),Zee=a("strong"),w5o=o("blenderbot-small"),A5o=o(" \u2014 "),QP=a("a"),L5o=o("BlenderbotSmallForConditionalGeneration"),B5o=o(" (BlenderbotSmall model)"),x5o=l(),l1=a("li"),eoe=a("strong"),k5o=o("encoder-decoder"),R5o=o(" \u2014 "),HP=a("a"),S5o=o("EncoderDecoderModel"),P5o=o(" (Encoder decoder model)"),$5o=l(),i1=a("li"),ooe=a("strong"),I5o=o("fsmt"),j5o=o(" \u2014 "),UP=a("a"),N5o=o("FSMTForConditionalGeneration"),D5o=o(" (FairSeq Machine-Translation model)"),q5o=l(),d1=a("li"),roe=a("strong"),G5o=o("led"),O5o=o(" \u2014 "),JP=a("a"),X5o=o("LEDForConditionalGeneration"),z5o=o(" (LED model)"),V5o=l(),c1=a("li"),toe=a("strong"),W5o=o("m2m_100"),Q5o=o(" \u2014 "),YP=a("a"),H5o=o("M2M100ForConditionalGeneration"),U5o=o(" (M2M100 model)"),J5o=l(),f1=a("li"),aoe=a("strong"),Y5o=o("marian"),K5o=o(" \u2014 "),KP=a("a"),Z5o=o("MarianMTModel"),e2o=o(" (Marian model)"),o2o=l(),m1=a("li"),noe=a("strong"),r2o=o("mbart"),t2o=o(" \u2014 "),ZP=a("a"),a2o=o("MBartForConditionalGeneration"),n2o=o(" (mBART model)"),s2o=l(),g1=a("li"),soe=a("strong"),l2o=o("mt5"),i2o=o(" \u2014 "),e$=a("a"),d2o=o("MT5ForConditionalGeneration"),c2o=o(" (mT5 model)"),f2o=l(),h1=a("li"),loe=a("strong"),m2o=o("pegasus"),g2o=o(" \u2014 "),o$=a("a"),h2o=o("PegasusForConditionalGeneration"),p2o=o(" (Pegasus model)"),_2o=l(),p1=a("li"),ioe=a("strong"),u2o=o("plbart"),b2o=o(" \u2014 "),r$=a("a"),v2o=o("PLBartForConditionalGeneration"),T2o=o(" (PLBart model)"),F2o=l(),_1=a("li"),doe=a("strong"),C2o=o("prophetnet"),M2o=o(" \u2014 "),t$=a("a"),E2o=o("ProphetNetForConditionalGeneration"),y2o=o(" (ProphetNet model)"),w2o=l(),u1=a("li"),coe=a("strong"),A2o=o("t5"),L2o=o(" \u2014 "),a$=a("a"),B2o=o("T5ForConditionalGeneration"),x2o=o(" (T5 model)"),k2o=l(),b1=a("li"),foe=a("strong"),R2o=o("xlm-prophetnet"),S2o=o(" \u2014 "),n$=a("a"),P2o=o("XLMProphetNetForConditionalGeneration"),$2o=o(" (XLMProphetNet model)"),I2o=l(),v1=a("p"),j2o=o("The model is set in evaluation mode by default using "),moe=a("code"),N2o=o("model.eval()"),D2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),goe=a("code"),q2o=o("model.train()"),G2o=l(),hoe=a("p"),O2o=o("Examples:"),X2o=l(),f(uM.$$.fragment),PLe=l(),od=a("h2"),T1=a("a"),poe=a("span"),f(bM.$$.fragment),z2o=l(),_oe=a("span"),V2o=o("AutoModelForSequenceClassification"),$Le=l(),Jo=a("div"),f(vM.$$.fragment),W2o=l(),rd=a("p"),Q2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uoe=a("code"),H2o=o("from_pretrained()"),U2o=o("class method or the "),boe=a("code"),J2o=o("from_config()"),Y2o=o(`class
method.`),K2o=l(),TM=a("p"),Z2o=o("This class cannot be instantiated directly using "),voe=a("code"),evo=o("__init__()"),ovo=o(" (throws an error)."),rvo=l(),Xr=a("div"),f(FM.$$.fragment),tvo=l(),Toe=a("p"),avo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nvo=l(),td=a("p"),svo=o(`Note:
Loading a model from its configuration file does `),Foe=a("strong"),lvo=o("not"),ivo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Coe=a("code"),dvo=o("from_pretrained()"),cvo=o("to load the model weights."),fvo=l(),Moe=a("p"),mvo=o("Examples:"),gvo=l(),f(CM.$$.fragment),hvo=l(),$e=a("div"),f(MM.$$.fragment),pvo=l(),Eoe=a("p"),_vo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uvo=l(),za=a("p"),bvo=o("The model class to instantiate is selected based on the "),yoe=a("code"),vvo=o("model_type"),Tvo=o(` property of the config object (either
passed as an argument or loaded from `),woe=a("code"),Fvo=o("pretrained_model_name_or_path"),Cvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aoe=a("code"),Mvo=o("pretrained_model_name_or_path"),Evo=o(":"),yvo=l(),A=a("ul"),F1=a("li"),Loe=a("strong"),wvo=o("albert"),Avo=o(" \u2014 "),s$=a("a"),Lvo=o("AlbertForSequenceClassification"),Bvo=o(" (ALBERT model)"),xvo=l(),C1=a("li"),Boe=a("strong"),kvo=o("bart"),Rvo=o(" \u2014 "),l$=a("a"),Svo=o("BartForSequenceClassification"),Pvo=o(" (BART model)"),$vo=l(),M1=a("li"),xoe=a("strong"),Ivo=o("bert"),jvo=o(" \u2014 "),i$=a("a"),Nvo=o("BertForSequenceClassification"),Dvo=o(" (BERT model)"),qvo=l(),E1=a("li"),koe=a("strong"),Gvo=o("big_bird"),Ovo=o(" \u2014 "),d$=a("a"),Xvo=o("BigBirdForSequenceClassification"),zvo=o(" (BigBird model)"),Vvo=l(),y1=a("li"),Roe=a("strong"),Wvo=o("bigbird_pegasus"),Qvo=o(" \u2014 "),c$=a("a"),Hvo=o("BigBirdPegasusForSequenceClassification"),Uvo=o(" (BigBirdPegasus model)"),Jvo=l(),w1=a("li"),Soe=a("strong"),Yvo=o("camembert"),Kvo=o(" \u2014 "),f$=a("a"),Zvo=o("CamembertForSequenceClassification"),e6o=o(" (CamemBERT model)"),o6o=l(),A1=a("li"),Poe=a("strong"),r6o=o("canine"),t6o=o(" \u2014 "),m$=a("a"),a6o=o("CanineForSequenceClassification"),n6o=o(" (Canine model)"),s6o=l(),L1=a("li"),$oe=a("strong"),l6o=o("convbert"),i6o=o(" \u2014 "),g$=a("a"),d6o=o("ConvBertForSequenceClassification"),c6o=o(" (ConvBERT model)"),f6o=l(),B1=a("li"),Ioe=a("strong"),m6o=o("ctrl"),g6o=o(" \u2014 "),h$=a("a"),h6o=o("CTRLForSequenceClassification"),p6o=o(" (CTRL model)"),_6o=l(),x1=a("li"),joe=a("strong"),u6o=o("deberta"),b6o=o(" \u2014 "),p$=a("a"),v6o=o("DebertaForSequenceClassification"),T6o=o(" (DeBERTa model)"),F6o=l(),k1=a("li"),Noe=a("strong"),C6o=o("deberta-v2"),M6o=o(" \u2014 "),_$=a("a"),E6o=o("DebertaV2ForSequenceClassification"),y6o=o(" (DeBERTa-v2 model)"),w6o=l(),R1=a("li"),Doe=a("strong"),A6o=o("distilbert"),L6o=o(" \u2014 "),u$=a("a"),B6o=o("DistilBertForSequenceClassification"),x6o=o(" (DistilBERT model)"),k6o=l(),S1=a("li"),qoe=a("strong"),R6o=o("electra"),S6o=o(" \u2014 "),b$=a("a"),P6o=o("ElectraForSequenceClassification"),$6o=o(" (ELECTRA model)"),I6o=l(),P1=a("li"),Goe=a("strong"),j6o=o("flaubert"),N6o=o(" \u2014 "),v$=a("a"),D6o=o("FlaubertForSequenceClassification"),q6o=o(" (FlauBERT model)"),G6o=l(),$1=a("li"),Ooe=a("strong"),O6o=o("fnet"),X6o=o(" \u2014 "),T$=a("a"),z6o=o("FNetForSequenceClassification"),V6o=o(" (FNet model)"),W6o=l(),I1=a("li"),Xoe=a("strong"),Q6o=o("funnel"),H6o=o(" \u2014 "),F$=a("a"),U6o=o("FunnelForSequenceClassification"),J6o=o(" (Funnel Transformer model)"),Y6o=l(),j1=a("li"),zoe=a("strong"),K6o=o("gpt2"),Z6o=o(" \u2014 "),C$=a("a"),eTo=o("GPT2ForSequenceClassification"),oTo=o(" (OpenAI GPT-2 model)"),rTo=l(),N1=a("li"),Voe=a("strong"),tTo=o("gpt_neo"),aTo=o(" \u2014 "),M$=a("a"),nTo=o("GPTNeoForSequenceClassification"),sTo=o(" (GPT Neo model)"),lTo=l(),D1=a("li"),Woe=a("strong"),iTo=o("gptj"),dTo=o(" \u2014 "),E$=a("a"),cTo=o("GPTJForSequenceClassification"),fTo=o(" (GPT-J model)"),mTo=l(),q1=a("li"),Qoe=a("strong"),gTo=o("ibert"),hTo=o(" \u2014 "),y$=a("a"),pTo=o("IBertForSequenceClassification"),_To=o(" (I-BERT model)"),uTo=l(),G1=a("li"),Hoe=a("strong"),bTo=o("layoutlm"),vTo=o(" \u2014 "),w$=a("a"),TTo=o("LayoutLMForSequenceClassification"),FTo=o(" (LayoutLM model)"),CTo=l(),O1=a("li"),Uoe=a("strong"),MTo=o("layoutlmv2"),ETo=o(" \u2014 "),A$=a("a"),yTo=o("LayoutLMv2ForSequenceClassification"),wTo=o(" (LayoutLMv2 model)"),ATo=l(),X1=a("li"),Joe=a("strong"),LTo=o("led"),BTo=o(" \u2014 "),L$=a("a"),xTo=o("LEDForSequenceClassification"),kTo=o(" (LED model)"),RTo=l(),z1=a("li"),Yoe=a("strong"),STo=o("longformer"),PTo=o(" \u2014 "),B$=a("a"),$To=o("LongformerForSequenceClassification"),ITo=o(" (Longformer model)"),jTo=l(),V1=a("li"),Koe=a("strong"),NTo=o("mbart"),DTo=o(" \u2014 "),x$=a("a"),qTo=o("MBartForSequenceClassification"),GTo=o(" (mBART model)"),OTo=l(),W1=a("li"),Zoe=a("strong"),XTo=o("megatron-bert"),zTo=o(" \u2014 "),k$=a("a"),VTo=o("MegatronBertForSequenceClassification"),WTo=o(" (MegatronBert model)"),QTo=l(),Q1=a("li"),ere=a("strong"),HTo=o("mobilebert"),UTo=o(" \u2014 "),R$=a("a"),JTo=o("MobileBertForSequenceClassification"),YTo=o(" (MobileBERT model)"),KTo=l(),H1=a("li"),ore=a("strong"),ZTo=o("mpnet"),e7o=o(" \u2014 "),S$=a("a"),o7o=o("MPNetForSequenceClassification"),r7o=o(" (MPNet model)"),t7o=l(),U1=a("li"),rre=a("strong"),a7o=o("nystromformer"),n7o=o(" \u2014 "),P$=a("a"),s7o=o("NystromformerForSequenceClassification"),l7o=o(" (Nystromformer model)"),i7o=l(),J1=a("li"),tre=a("strong"),d7o=o("openai-gpt"),c7o=o(" \u2014 "),$$=a("a"),f7o=o("OpenAIGPTForSequenceClassification"),m7o=o(" (OpenAI GPT model)"),g7o=l(),Y1=a("li"),are=a("strong"),h7o=o("perceiver"),p7o=o(" \u2014 "),I$=a("a"),_7o=o("PerceiverForSequenceClassification"),u7o=o(" (Perceiver model)"),b7o=l(),K1=a("li"),nre=a("strong"),v7o=o("plbart"),T7o=o(" \u2014 "),j$=a("a"),F7o=o("PLBartForSequenceClassification"),C7o=o(" (PLBart model)"),M7o=l(),Z1=a("li"),sre=a("strong"),E7o=o("qdqbert"),y7o=o(" \u2014 "),N$=a("a"),w7o=o("QDQBertForSequenceClassification"),A7o=o(" (QDQBert model)"),L7o=l(),eb=a("li"),lre=a("strong"),B7o=o("reformer"),x7o=o(" \u2014 "),D$=a("a"),k7o=o("ReformerForSequenceClassification"),R7o=o(" (Reformer model)"),S7o=l(),ob=a("li"),ire=a("strong"),P7o=o("rembert"),$7o=o(" \u2014 "),q$=a("a"),I7o=o("RemBertForSequenceClassification"),j7o=o(" (RemBERT model)"),N7o=l(),rb=a("li"),dre=a("strong"),D7o=o("roberta"),q7o=o(" \u2014 "),G$=a("a"),G7o=o("RobertaForSequenceClassification"),O7o=o(" (RoBERTa model)"),X7o=l(),tb=a("li"),cre=a("strong"),z7o=o("roformer"),V7o=o(" \u2014 "),O$=a("a"),W7o=o("RoFormerForSequenceClassification"),Q7o=o(" (RoFormer model)"),H7o=l(),ab=a("li"),fre=a("strong"),U7o=o("squeezebert"),J7o=o(" \u2014 "),X$=a("a"),Y7o=o("SqueezeBertForSequenceClassification"),K7o=o(" (SqueezeBERT model)"),Z7o=l(),nb=a("li"),mre=a("strong"),e8o=o("tapas"),o8o=o(" \u2014 "),z$=a("a"),r8o=o("TapasForSequenceClassification"),t8o=o(" (TAPAS model)"),a8o=l(),sb=a("li"),gre=a("strong"),n8o=o("transfo-xl"),s8o=o(" \u2014 "),V$=a("a"),l8o=o("TransfoXLForSequenceClassification"),i8o=o(" (Transformer-XL model)"),d8o=l(),lb=a("li"),hre=a("strong"),c8o=o("xlm"),f8o=o(" \u2014 "),W$=a("a"),m8o=o("XLMForSequenceClassification"),g8o=o(" (XLM model)"),h8o=l(),ib=a("li"),pre=a("strong"),p8o=o("xlm-roberta"),_8o=o(" \u2014 "),Q$=a("a"),u8o=o("XLMRobertaForSequenceClassification"),b8o=o(" (XLM-RoBERTa model)"),v8o=l(),db=a("li"),_re=a("strong"),T8o=o("xlm-roberta-xl"),F8o=o(" \u2014 "),H$=a("a"),C8o=o("XLMRobertaXLForSequenceClassification"),M8o=o(" (XLM-RoBERTa-XL model)"),E8o=l(),cb=a("li"),ure=a("strong"),y8o=o("xlnet"),w8o=o(" \u2014 "),U$=a("a"),A8o=o("XLNetForSequenceClassification"),L8o=o(" (XLNet model)"),B8o=l(),fb=a("li"),bre=a("strong"),x8o=o("yoso"),k8o=o(" \u2014 "),J$=a("a"),R8o=o("YosoForSequenceClassification"),S8o=o(" (YOSO model)"),P8o=l(),mb=a("p"),$8o=o("The model is set in evaluation mode by default using "),vre=a("code"),I8o=o("model.eval()"),j8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tre=a("code"),N8o=o("model.train()"),D8o=l(),Fre=a("p"),q8o=o("Examples:"),G8o=l(),f(EM.$$.fragment),ILe=l(),ad=a("h2"),gb=a("a"),Cre=a("span"),f(yM.$$.fragment),O8o=l(),Mre=a("span"),X8o=o("AutoModelForMultipleChoice"),jLe=l(),Yo=a("div"),f(wM.$$.fragment),z8o=l(),nd=a("p"),V8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Ere=a("code"),W8o=o("from_pretrained()"),Q8o=o("class method or the "),yre=a("code"),H8o=o("from_config()"),U8o=o(`class
method.`),J8o=l(),AM=a("p"),Y8o=o("This class cannot be instantiated directly using "),wre=a("code"),K8o=o("__init__()"),Z8o=o(" (throws an error)."),eFo=l(),zr=a("div"),f(LM.$$.fragment),oFo=l(),Are=a("p"),rFo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tFo=l(),sd=a("p"),aFo=o(`Note:
Loading a model from its configuration file does `),Lre=a("strong"),nFo=o("not"),sFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=a("code"),lFo=o("from_pretrained()"),iFo=o("to load the model weights."),dFo=l(),xre=a("p"),cFo=o("Examples:"),fFo=l(),f(BM.$$.fragment),mFo=l(),Ie=a("div"),f(xM.$$.fragment),gFo=l(),kre=a("p"),hFo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pFo=l(),Va=a("p"),_Fo=o("The model class to instantiate is selected based on the "),Rre=a("code"),uFo=o("model_type"),bFo=o(` property of the config object (either
passed as an argument or loaded from `),Sre=a("code"),vFo=o("pretrained_model_name_or_path"),TFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pre=a("code"),FFo=o("pretrained_model_name_or_path"),CFo=o(":"),MFo=l(),G=a("ul"),hb=a("li"),$re=a("strong"),EFo=o("albert"),yFo=o(" \u2014 "),Y$=a("a"),wFo=o("AlbertForMultipleChoice"),AFo=o(" (ALBERT model)"),LFo=l(),pb=a("li"),Ire=a("strong"),BFo=o("bert"),xFo=o(" \u2014 "),K$=a("a"),kFo=o("BertForMultipleChoice"),RFo=o(" (BERT model)"),SFo=l(),_b=a("li"),jre=a("strong"),PFo=o("big_bird"),$Fo=o(" \u2014 "),Z$=a("a"),IFo=o("BigBirdForMultipleChoice"),jFo=o(" (BigBird model)"),NFo=l(),ub=a("li"),Nre=a("strong"),DFo=o("camembert"),qFo=o(" \u2014 "),eI=a("a"),GFo=o("CamembertForMultipleChoice"),OFo=o(" (CamemBERT model)"),XFo=l(),bb=a("li"),Dre=a("strong"),zFo=o("canine"),VFo=o(" \u2014 "),oI=a("a"),WFo=o("CanineForMultipleChoice"),QFo=o(" (Canine model)"),HFo=l(),vb=a("li"),qre=a("strong"),UFo=o("convbert"),JFo=o(" \u2014 "),rI=a("a"),YFo=o("ConvBertForMultipleChoice"),KFo=o(" (ConvBERT model)"),ZFo=l(),Tb=a("li"),Gre=a("strong"),eCo=o("distilbert"),oCo=o(" \u2014 "),tI=a("a"),rCo=o("DistilBertForMultipleChoice"),tCo=o(" (DistilBERT model)"),aCo=l(),Fb=a("li"),Ore=a("strong"),nCo=o("electra"),sCo=o(" \u2014 "),aI=a("a"),lCo=o("ElectraForMultipleChoice"),iCo=o(" (ELECTRA model)"),dCo=l(),Cb=a("li"),Xre=a("strong"),cCo=o("flaubert"),fCo=o(" \u2014 "),nI=a("a"),mCo=o("FlaubertForMultipleChoice"),gCo=o(" (FlauBERT model)"),hCo=l(),Mb=a("li"),zre=a("strong"),pCo=o("fnet"),_Co=o(" \u2014 "),sI=a("a"),uCo=o("FNetForMultipleChoice"),bCo=o(" (FNet model)"),vCo=l(),Eb=a("li"),Vre=a("strong"),TCo=o("funnel"),FCo=o(" \u2014 "),lI=a("a"),CCo=o("FunnelForMultipleChoice"),MCo=o(" (Funnel Transformer model)"),ECo=l(),yb=a("li"),Wre=a("strong"),yCo=o("ibert"),wCo=o(" \u2014 "),iI=a("a"),ACo=o("IBertForMultipleChoice"),LCo=o(" (I-BERT model)"),BCo=l(),wb=a("li"),Qre=a("strong"),xCo=o("longformer"),kCo=o(" \u2014 "),dI=a("a"),RCo=o("LongformerForMultipleChoice"),SCo=o(" (Longformer model)"),PCo=l(),Ab=a("li"),Hre=a("strong"),$Co=o("megatron-bert"),ICo=o(" \u2014 "),cI=a("a"),jCo=o("MegatronBertForMultipleChoice"),NCo=o(" (MegatronBert model)"),DCo=l(),Lb=a("li"),Ure=a("strong"),qCo=o("mobilebert"),GCo=o(" \u2014 "),fI=a("a"),OCo=o("MobileBertForMultipleChoice"),XCo=o(" (MobileBERT model)"),zCo=l(),Bb=a("li"),Jre=a("strong"),VCo=o("mpnet"),WCo=o(" \u2014 "),mI=a("a"),QCo=o("MPNetForMultipleChoice"),HCo=o(" (MPNet model)"),UCo=l(),xb=a("li"),Yre=a("strong"),JCo=o("nystromformer"),YCo=o(" \u2014 "),gI=a("a"),KCo=o("NystromformerForMultipleChoice"),ZCo=o(" (Nystromformer model)"),e4o=l(),kb=a("li"),Kre=a("strong"),o4o=o("qdqbert"),r4o=o(" \u2014 "),hI=a("a"),t4o=o("QDQBertForMultipleChoice"),a4o=o(" (QDQBert model)"),n4o=l(),Rb=a("li"),Zre=a("strong"),s4o=o("rembert"),l4o=o(" \u2014 "),pI=a("a"),i4o=o("RemBertForMultipleChoice"),d4o=o(" (RemBERT model)"),c4o=l(),Sb=a("li"),ete=a("strong"),f4o=o("roberta"),m4o=o(" \u2014 "),_I=a("a"),g4o=o("RobertaForMultipleChoice"),h4o=o(" (RoBERTa model)"),p4o=l(),Pb=a("li"),ote=a("strong"),_4o=o("roformer"),u4o=o(" \u2014 "),uI=a("a"),b4o=o("RoFormerForMultipleChoice"),v4o=o(" (RoFormer model)"),T4o=l(),$b=a("li"),rte=a("strong"),F4o=o("squeezebert"),C4o=o(" \u2014 "),bI=a("a"),M4o=o("SqueezeBertForMultipleChoice"),E4o=o(" (SqueezeBERT model)"),y4o=l(),Ib=a("li"),tte=a("strong"),w4o=o("xlm"),A4o=o(" \u2014 "),vI=a("a"),L4o=o("XLMForMultipleChoice"),B4o=o(" (XLM model)"),x4o=l(),jb=a("li"),ate=a("strong"),k4o=o("xlm-roberta"),R4o=o(" \u2014 "),TI=a("a"),S4o=o("XLMRobertaForMultipleChoice"),P4o=o(" (XLM-RoBERTa model)"),$4o=l(),Nb=a("li"),nte=a("strong"),I4o=o("xlm-roberta-xl"),j4o=o(" \u2014 "),FI=a("a"),N4o=o("XLMRobertaXLForMultipleChoice"),D4o=o(" (XLM-RoBERTa-XL model)"),q4o=l(),Db=a("li"),ste=a("strong"),G4o=o("xlnet"),O4o=o(" \u2014 "),CI=a("a"),X4o=o("XLNetForMultipleChoice"),z4o=o(" (XLNet model)"),V4o=l(),qb=a("li"),lte=a("strong"),W4o=o("yoso"),Q4o=o(" \u2014 "),MI=a("a"),H4o=o("YosoForMultipleChoice"),U4o=o(" (YOSO model)"),J4o=l(),Gb=a("p"),Y4o=o("The model is set in evaluation mode by default using "),ite=a("code"),K4o=o("model.eval()"),Z4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dte=a("code"),eMo=o("model.train()"),oMo=l(),cte=a("p"),rMo=o("Examples:"),tMo=l(),f(kM.$$.fragment),NLe=l(),ld=a("h2"),Ob=a("a"),fte=a("span"),f(RM.$$.fragment),aMo=l(),mte=a("span"),nMo=o("AutoModelForNextSentencePrediction"),DLe=l(),Ko=a("div"),f(SM.$$.fragment),sMo=l(),id=a("p"),lMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gte=a("code"),iMo=o("from_pretrained()"),dMo=o("class method or the "),hte=a("code"),cMo=o("from_config()"),fMo=o(`class
method.`),mMo=l(),PM=a("p"),gMo=o("This class cannot be instantiated directly using "),pte=a("code"),hMo=o("__init__()"),pMo=o(" (throws an error)."),_Mo=l(),Vr=a("div"),f($M.$$.fragment),uMo=l(),_te=a("p"),bMo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vMo=l(),dd=a("p"),TMo=o(`Note:
Loading a model from its configuration file does `),ute=a("strong"),FMo=o("not"),CMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bte=a("code"),MMo=o("from_pretrained()"),EMo=o("to load the model weights."),yMo=l(),vte=a("p"),wMo=o("Examples:"),AMo=l(),f(IM.$$.fragment),LMo=l(),je=a("div"),f(jM.$$.fragment),BMo=l(),Tte=a("p"),xMo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kMo=l(),Wa=a("p"),RMo=o("The model class to instantiate is selected based on the "),Fte=a("code"),SMo=o("model_type"),PMo=o(` property of the config object (either
passed as an argument or loaded from `),Cte=a("code"),$Mo=o("pretrained_model_name_or_path"),IMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mte=a("code"),jMo=o("pretrained_model_name_or_path"),NMo=o(":"),DMo=l(),na=a("ul"),Xb=a("li"),Ete=a("strong"),qMo=o("bert"),GMo=o(" \u2014 "),EI=a("a"),OMo=o("BertForNextSentencePrediction"),XMo=o(" (BERT model)"),zMo=l(),zb=a("li"),yte=a("strong"),VMo=o("fnet"),WMo=o(" \u2014 "),yI=a("a"),QMo=o("FNetForNextSentencePrediction"),HMo=o(" (FNet model)"),UMo=l(),Vb=a("li"),wte=a("strong"),JMo=o("megatron-bert"),YMo=o(" \u2014 "),wI=a("a"),KMo=o("MegatronBertForNextSentencePrediction"),ZMo=o(" (MegatronBert model)"),eEo=l(),Wb=a("li"),Ate=a("strong"),oEo=o("mobilebert"),rEo=o(" \u2014 "),AI=a("a"),tEo=o("MobileBertForNextSentencePrediction"),aEo=o(" (MobileBERT model)"),nEo=l(),Qb=a("li"),Lte=a("strong"),sEo=o("qdqbert"),lEo=o(" \u2014 "),LI=a("a"),iEo=o("QDQBertForNextSentencePrediction"),dEo=o(" (QDQBert model)"),cEo=l(),Hb=a("p"),fEo=o("The model is set in evaluation mode by default using "),Bte=a("code"),mEo=o("model.eval()"),gEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xte=a("code"),hEo=o("model.train()"),pEo=l(),kte=a("p"),_Eo=o("Examples:"),uEo=l(),f(NM.$$.fragment),qLe=l(),cd=a("h2"),Ub=a("a"),Rte=a("span"),f(DM.$$.fragment),bEo=l(),Ste=a("span"),vEo=o("AutoModelForTokenClassification"),GLe=l(),Zo=a("div"),f(qM.$$.fragment),TEo=l(),fd=a("p"),FEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Pte=a("code"),CEo=o("from_pretrained()"),MEo=o("class method or the "),$te=a("code"),EEo=o("from_config()"),yEo=o(`class
method.`),wEo=l(),GM=a("p"),AEo=o("This class cannot be instantiated directly using "),Ite=a("code"),LEo=o("__init__()"),BEo=o(" (throws an error)."),xEo=l(),Wr=a("div"),f(OM.$$.fragment),kEo=l(),jte=a("p"),REo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),SEo=l(),md=a("p"),PEo=o(`Note:
Loading a model from its configuration file does `),Nte=a("strong"),$Eo=o("not"),IEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dte=a("code"),jEo=o("from_pretrained()"),NEo=o("to load the model weights."),DEo=l(),qte=a("p"),qEo=o("Examples:"),GEo=l(),f(XM.$$.fragment),OEo=l(),Ne=a("div"),f(zM.$$.fragment),XEo=l(),Gte=a("p"),zEo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),VEo=l(),Qa=a("p"),WEo=o("The model class to instantiate is selected based on the "),Ote=a("code"),QEo=o("model_type"),HEo=o(` property of the config object (either
passed as an argument or loaded from `),Xte=a("code"),UEo=o("pretrained_model_name_or_path"),JEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zte=a("code"),YEo=o("pretrained_model_name_or_path"),KEo=o(":"),ZEo=l(),D=a("ul"),Jb=a("li"),Vte=a("strong"),e3o=o("albert"),o3o=o(" \u2014 "),BI=a("a"),r3o=o("AlbertForTokenClassification"),t3o=o(" (ALBERT model)"),a3o=l(),Yb=a("li"),Wte=a("strong"),n3o=o("bert"),s3o=o(" \u2014 "),xI=a("a"),l3o=o("BertForTokenClassification"),i3o=o(" (BERT model)"),d3o=l(),Kb=a("li"),Qte=a("strong"),c3o=o("big_bird"),f3o=o(" \u2014 "),kI=a("a"),m3o=o("BigBirdForTokenClassification"),g3o=o(" (BigBird model)"),h3o=l(),Zb=a("li"),Hte=a("strong"),p3o=o("camembert"),_3o=o(" \u2014 "),RI=a("a"),u3o=o("CamembertForTokenClassification"),b3o=o(" (CamemBERT model)"),v3o=l(),e5=a("li"),Ute=a("strong"),T3o=o("canine"),F3o=o(" \u2014 "),SI=a("a"),C3o=o("CanineForTokenClassification"),M3o=o(" (Canine model)"),E3o=l(),o5=a("li"),Jte=a("strong"),y3o=o("convbert"),w3o=o(" \u2014 "),PI=a("a"),A3o=o("ConvBertForTokenClassification"),L3o=o(" (ConvBERT model)"),B3o=l(),r5=a("li"),Yte=a("strong"),x3o=o("deberta"),k3o=o(" \u2014 "),$I=a("a"),R3o=o("DebertaForTokenClassification"),S3o=o(" (DeBERTa model)"),P3o=l(),t5=a("li"),Kte=a("strong"),$3o=o("deberta-v2"),I3o=o(" \u2014 "),II=a("a"),j3o=o("DebertaV2ForTokenClassification"),N3o=o(" (DeBERTa-v2 model)"),D3o=l(),a5=a("li"),Zte=a("strong"),q3o=o("distilbert"),G3o=o(" \u2014 "),jI=a("a"),O3o=o("DistilBertForTokenClassification"),X3o=o(" (DistilBERT model)"),z3o=l(),n5=a("li"),eae=a("strong"),V3o=o("electra"),W3o=o(" \u2014 "),NI=a("a"),Q3o=o("ElectraForTokenClassification"),H3o=o(" (ELECTRA model)"),U3o=l(),s5=a("li"),oae=a("strong"),J3o=o("flaubert"),Y3o=o(" \u2014 "),DI=a("a"),K3o=o("FlaubertForTokenClassification"),Z3o=o(" (FlauBERT model)"),eyo=l(),l5=a("li"),rae=a("strong"),oyo=o("fnet"),ryo=o(" \u2014 "),qI=a("a"),tyo=o("FNetForTokenClassification"),ayo=o(" (FNet model)"),nyo=l(),i5=a("li"),tae=a("strong"),syo=o("funnel"),lyo=o(" \u2014 "),GI=a("a"),iyo=o("FunnelForTokenClassification"),dyo=o(" (Funnel Transformer model)"),cyo=l(),d5=a("li"),aae=a("strong"),fyo=o("gpt2"),myo=o(" \u2014 "),OI=a("a"),gyo=o("GPT2ForTokenClassification"),hyo=o(" (OpenAI GPT-2 model)"),pyo=l(),c5=a("li"),nae=a("strong"),_yo=o("ibert"),uyo=o(" \u2014 "),XI=a("a"),byo=o("IBertForTokenClassification"),vyo=o(" (I-BERT model)"),Tyo=l(),f5=a("li"),sae=a("strong"),Fyo=o("layoutlm"),Cyo=o(" \u2014 "),zI=a("a"),Myo=o("LayoutLMForTokenClassification"),Eyo=o(" (LayoutLM model)"),yyo=l(),m5=a("li"),lae=a("strong"),wyo=o("layoutlmv2"),Ayo=o(" \u2014 "),VI=a("a"),Lyo=o("LayoutLMv2ForTokenClassification"),Byo=o(" (LayoutLMv2 model)"),xyo=l(),g5=a("li"),iae=a("strong"),kyo=o("longformer"),Ryo=o(" \u2014 "),WI=a("a"),Syo=o("LongformerForTokenClassification"),Pyo=o(" (Longformer model)"),$yo=l(),h5=a("li"),dae=a("strong"),Iyo=o("megatron-bert"),jyo=o(" \u2014 "),QI=a("a"),Nyo=o("MegatronBertForTokenClassification"),Dyo=o(" (MegatronBert model)"),qyo=l(),p5=a("li"),cae=a("strong"),Gyo=o("mobilebert"),Oyo=o(" \u2014 "),HI=a("a"),Xyo=o("MobileBertForTokenClassification"),zyo=o(" (MobileBERT model)"),Vyo=l(),_5=a("li"),fae=a("strong"),Wyo=o("mpnet"),Qyo=o(" \u2014 "),UI=a("a"),Hyo=o("MPNetForTokenClassification"),Uyo=o(" (MPNet model)"),Jyo=l(),u5=a("li"),mae=a("strong"),Yyo=o("nystromformer"),Kyo=o(" \u2014 "),JI=a("a"),Zyo=o("NystromformerForTokenClassification"),ewo=o(" (Nystromformer model)"),owo=l(),b5=a("li"),gae=a("strong"),rwo=o("qdqbert"),two=o(" \u2014 "),YI=a("a"),awo=o("QDQBertForTokenClassification"),nwo=o(" (QDQBert model)"),swo=l(),v5=a("li"),hae=a("strong"),lwo=o("rembert"),iwo=o(" \u2014 "),KI=a("a"),dwo=o("RemBertForTokenClassification"),cwo=o(" (RemBERT model)"),fwo=l(),T5=a("li"),pae=a("strong"),mwo=o("roberta"),gwo=o(" \u2014 "),ZI=a("a"),hwo=o("RobertaForTokenClassification"),pwo=o(" (RoBERTa model)"),_wo=l(),F5=a("li"),_ae=a("strong"),uwo=o("roformer"),bwo=o(" \u2014 "),ej=a("a"),vwo=o("RoFormerForTokenClassification"),Two=o(" (RoFormer model)"),Fwo=l(),C5=a("li"),uae=a("strong"),Cwo=o("squeezebert"),Mwo=o(" \u2014 "),oj=a("a"),Ewo=o("SqueezeBertForTokenClassification"),ywo=o(" (SqueezeBERT model)"),wwo=l(),M5=a("li"),bae=a("strong"),Awo=o("xlm"),Lwo=o(" \u2014 "),rj=a("a"),Bwo=o("XLMForTokenClassification"),xwo=o(" (XLM model)"),kwo=l(),E5=a("li"),vae=a("strong"),Rwo=o("xlm-roberta"),Swo=o(" \u2014 "),tj=a("a"),Pwo=o("XLMRobertaForTokenClassification"),$wo=o(" (XLM-RoBERTa model)"),Iwo=l(),y5=a("li"),Tae=a("strong"),jwo=o("xlm-roberta-xl"),Nwo=o(" \u2014 "),aj=a("a"),Dwo=o("XLMRobertaXLForTokenClassification"),qwo=o(" (XLM-RoBERTa-XL model)"),Gwo=l(),w5=a("li"),Fae=a("strong"),Owo=o("xlnet"),Xwo=o(" \u2014 "),nj=a("a"),zwo=o("XLNetForTokenClassification"),Vwo=o(" (XLNet model)"),Wwo=l(),A5=a("li"),Cae=a("strong"),Qwo=o("yoso"),Hwo=o(" \u2014 "),sj=a("a"),Uwo=o("YosoForTokenClassification"),Jwo=o(" (YOSO model)"),Ywo=l(),L5=a("p"),Kwo=o("The model is set in evaluation mode by default using "),Mae=a("code"),Zwo=o("model.eval()"),eAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eae=a("code"),oAo=o("model.train()"),rAo=l(),yae=a("p"),tAo=o("Examples:"),aAo=l(),f(VM.$$.fragment),OLe=l(),gd=a("h2"),B5=a("a"),wae=a("span"),f(WM.$$.fragment),nAo=l(),Aae=a("span"),sAo=o("AutoModelForQuestionAnswering"),XLe=l(),er=a("div"),f(QM.$$.fragment),lAo=l(),hd=a("p"),iAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Lae=a("code"),dAo=o("from_pretrained()"),cAo=o("class method or the "),Bae=a("code"),fAo=o("from_config()"),mAo=o(`class
method.`),gAo=l(),HM=a("p"),hAo=o("This class cannot be instantiated directly using "),xae=a("code"),pAo=o("__init__()"),_Ao=o(" (throws an error)."),uAo=l(),Qr=a("div"),f(UM.$$.fragment),bAo=l(),kae=a("p"),vAo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),TAo=l(),pd=a("p"),FAo=o(`Note:
Loading a model from its configuration file does `),Rae=a("strong"),CAo=o("not"),MAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sae=a("code"),EAo=o("from_pretrained()"),yAo=o("to load the model weights."),wAo=l(),Pae=a("p"),AAo=o("Examples:"),LAo=l(),f(JM.$$.fragment),BAo=l(),De=a("div"),f(YM.$$.fragment),xAo=l(),$ae=a("p"),kAo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),RAo=l(),Ha=a("p"),SAo=o("The model class to instantiate is selected based on the "),Iae=a("code"),PAo=o("model_type"),$Ao=o(` property of the config object (either
passed as an argument or loaded from `),jae=a("code"),IAo=o("pretrained_model_name_or_path"),jAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nae=a("code"),NAo=o("pretrained_model_name_or_path"),DAo=o(":"),qAo=l(),R=a("ul"),x5=a("li"),Dae=a("strong"),GAo=o("albert"),OAo=o(" \u2014 "),lj=a("a"),XAo=o("AlbertForQuestionAnswering"),zAo=o(" (ALBERT model)"),VAo=l(),k5=a("li"),qae=a("strong"),WAo=o("bart"),QAo=o(" \u2014 "),ij=a("a"),HAo=o("BartForQuestionAnswering"),UAo=o(" (BART model)"),JAo=l(),R5=a("li"),Gae=a("strong"),YAo=o("bert"),KAo=o(" \u2014 "),dj=a("a"),ZAo=o("BertForQuestionAnswering"),e0o=o(" (BERT model)"),o0o=l(),S5=a("li"),Oae=a("strong"),r0o=o("big_bird"),t0o=o(" \u2014 "),cj=a("a"),a0o=o("BigBirdForQuestionAnswering"),n0o=o(" (BigBird model)"),s0o=l(),P5=a("li"),Xae=a("strong"),l0o=o("bigbird_pegasus"),i0o=o(" \u2014 "),fj=a("a"),d0o=o("BigBirdPegasusForQuestionAnswering"),c0o=o(" (BigBirdPegasus model)"),f0o=l(),$5=a("li"),zae=a("strong"),m0o=o("camembert"),g0o=o(" \u2014 "),mj=a("a"),h0o=o("CamembertForQuestionAnswering"),p0o=o(" (CamemBERT model)"),_0o=l(),I5=a("li"),Vae=a("strong"),u0o=o("canine"),b0o=o(" \u2014 "),gj=a("a"),v0o=o("CanineForQuestionAnswering"),T0o=o(" (Canine model)"),F0o=l(),j5=a("li"),Wae=a("strong"),C0o=o("convbert"),M0o=o(" \u2014 "),hj=a("a"),E0o=o("ConvBertForQuestionAnswering"),y0o=o(" (ConvBERT model)"),w0o=l(),N5=a("li"),Qae=a("strong"),A0o=o("deberta"),L0o=o(" \u2014 "),pj=a("a"),B0o=o("DebertaForQuestionAnswering"),x0o=o(" (DeBERTa model)"),k0o=l(),D5=a("li"),Hae=a("strong"),R0o=o("deberta-v2"),S0o=o(" \u2014 "),_j=a("a"),P0o=o("DebertaV2ForQuestionAnswering"),$0o=o(" (DeBERTa-v2 model)"),I0o=l(),q5=a("li"),Uae=a("strong"),j0o=o("distilbert"),N0o=o(" \u2014 "),uj=a("a"),D0o=o("DistilBertForQuestionAnswering"),q0o=o(" (DistilBERT model)"),G0o=l(),G5=a("li"),Jae=a("strong"),O0o=o("electra"),X0o=o(" \u2014 "),bj=a("a"),z0o=o("ElectraForQuestionAnswering"),V0o=o(" (ELECTRA model)"),W0o=l(),O5=a("li"),Yae=a("strong"),Q0o=o("flaubert"),H0o=o(" \u2014 "),vj=a("a"),U0o=o("FlaubertForQuestionAnsweringSimple"),J0o=o(" (FlauBERT model)"),Y0o=l(),X5=a("li"),Kae=a("strong"),K0o=o("fnet"),Z0o=o(" \u2014 "),Tj=a("a"),eLo=o("FNetForQuestionAnswering"),oLo=o(" (FNet model)"),rLo=l(),z5=a("li"),Zae=a("strong"),tLo=o("funnel"),aLo=o(" \u2014 "),Fj=a("a"),nLo=o("FunnelForQuestionAnswering"),sLo=o(" (Funnel Transformer model)"),lLo=l(),V5=a("li"),ene=a("strong"),iLo=o("gptj"),dLo=o(" \u2014 "),Cj=a("a"),cLo=o("GPTJForQuestionAnswering"),fLo=o(" (GPT-J model)"),mLo=l(),W5=a("li"),one=a("strong"),gLo=o("ibert"),hLo=o(" \u2014 "),Mj=a("a"),pLo=o("IBertForQuestionAnswering"),_Lo=o(" (I-BERT model)"),uLo=l(),Q5=a("li"),rne=a("strong"),bLo=o("layoutlmv2"),vLo=o(" \u2014 "),Ej=a("a"),TLo=o("LayoutLMv2ForQuestionAnswering"),FLo=o(" (LayoutLMv2 model)"),CLo=l(),H5=a("li"),tne=a("strong"),MLo=o("led"),ELo=o(" \u2014 "),yj=a("a"),yLo=o("LEDForQuestionAnswering"),wLo=o(" (LED model)"),ALo=l(),U5=a("li"),ane=a("strong"),LLo=o("longformer"),BLo=o(" \u2014 "),wj=a("a"),xLo=o("LongformerForQuestionAnswering"),kLo=o(" (Longformer model)"),RLo=l(),J5=a("li"),nne=a("strong"),SLo=o("lxmert"),PLo=o(" \u2014 "),Aj=a("a"),$Lo=o("LxmertForQuestionAnswering"),ILo=o(" (LXMERT model)"),jLo=l(),Y5=a("li"),sne=a("strong"),NLo=o("mbart"),DLo=o(" \u2014 "),Lj=a("a"),qLo=o("MBartForQuestionAnswering"),GLo=o(" (mBART model)"),OLo=l(),K5=a("li"),lne=a("strong"),XLo=o("megatron-bert"),zLo=o(" \u2014 "),Bj=a("a"),VLo=o("MegatronBertForQuestionAnswering"),WLo=o(" (MegatronBert model)"),QLo=l(),Z5=a("li"),ine=a("strong"),HLo=o("mobilebert"),ULo=o(" \u2014 "),xj=a("a"),JLo=o("MobileBertForQuestionAnswering"),YLo=o(" (MobileBERT model)"),KLo=l(),e2=a("li"),dne=a("strong"),ZLo=o("mpnet"),e9o=o(" \u2014 "),kj=a("a"),o9o=o("MPNetForQuestionAnswering"),r9o=o(" (MPNet model)"),t9o=l(),o2=a("li"),cne=a("strong"),a9o=o("nystromformer"),n9o=o(" \u2014 "),Rj=a("a"),s9o=o("NystromformerForQuestionAnswering"),l9o=o(" (Nystromformer model)"),i9o=l(),r2=a("li"),fne=a("strong"),d9o=o("qdqbert"),c9o=o(" \u2014 "),Sj=a("a"),f9o=o("QDQBertForQuestionAnswering"),m9o=o(" (QDQBert model)"),g9o=l(),t2=a("li"),mne=a("strong"),h9o=o("reformer"),p9o=o(" \u2014 "),Pj=a("a"),_9o=o("ReformerForQuestionAnswering"),u9o=o(" (Reformer model)"),b9o=l(),a2=a("li"),gne=a("strong"),v9o=o("rembert"),T9o=o(" \u2014 "),$j=a("a"),F9o=o("RemBertForQuestionAnswering"),C9o=o(" (RemBERT model)"),M9o=l(),n2=a("li"),hne=a("strong"),E9o=o("roberta"),y9o=o(" \u2014 "),Ij=a("a"),w9o=o("RobertaForQuestionAnswering"),A9o=o(" (RoBERTa model)"),L9o=l(),s2=a("li"),pne=a("strong"),B9o=o("roformer"),x9o=o(" \u2014 "),jj=a("a"),k9o=o("RoFormerForQuestionAnswering"),R9o=o(" (RoFormer model)"),S9o=l(),l2=a("li"),_ne=a("strong"),P9o=o("splinter"),$9o=o(" \u2014 "),Nj=a("a"),I9o=o("SplinterForQuestionAnswering"),j9o=o(" (Splinter model)"),N9o=l(),i2=a("li"),une=a("strong"),D9o=o("squeezebert"),q9o=o(" \u2014 "),Dj=a("a"),G9o=o("SqueezeBertForQuestionAnswering"),O9o=o(" (SqueezeBERT model)"),X9o=l(),d2=a("li"),bne=a("strong"),z9o=o("xlm"),V9o=o(" \u2014 "),qj=a("a"),W9o=o("XLMForQuestionAnsweringSimple"),Q9o=o(" (XLM model)"),H9o=l(),c2=a("li"),vne=a("strong"),U9o=o("xlm-roberta"),J9o=o(" \u2014 "),Gj=a("a"),Y9o=o("XLMRobertaForQuestionAnswering"),K9o=o(" (XLM-RoBERTa model)"),Z9o=l(),f2=a("li"),Tne=a("strong"),eBo=o("xlm-roberta-xl"),oBo=o(" \u2014 "),Oj=a("a"),rBo=o("XLMRobertaXLForQuestionAnswering"),tBo=o(" (XLM-RoBERTa-XL model)"),aBo=l(),m2=a("li"),Fne=a("strong"),nBo=o("xlnet"),sBo=o(" \u2014 "),Xj=a("a"),lBo=o("XLNetForQuestionAnsweringSimple"),iBo=o(" (XLNet model)"),dBo=l(),g2=a("li"),Cne=a("strong"),cBo=o("yoso"),fBo=o(" \u2014 "),zj=a("a"),mBo=o("YosoForQuestionAnswering"),gBo=o(" (YOSO model)"),hBo=l(),h2=a("p"),pBo=o("The model is set in evaluation mode by default using "),Mne=a("code"),_Bo=o("model.eval()"),uBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ene=a("code"),bBo=o("model.train()"),vBo=l(),yne=a("p"),TBo=o("Examples:"),FBo=l(),f(KM.$$.fragment),zLe=l(),_d=a("h2"),p2=a("a"),wne=a("span"),f(ZM.$$.fragment),CBo=l(),Ane=a("span"),MBo=o("AutoModelForTableQuestionAnswering"),VLe=l(),or=a("div"),f(eE.$$.fragment),EBo=l(),ud=a("p"),yBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Lne=a("code"),wBo=o("from_pretrained()"),ABo=o("class method or the "),Bne=a("code"),LBo=o("from_config()"),BBo=o(`class
method.`),xBo=l(),oE=a("p"),kBo=o("This class cannot be instantiated directly using "),xne=a("code"),RBo=o("__init__()"),SBo=o(" (throws an error)."),PBo=l(),Hr=a("div"),f(rE.$$.fragment),$Bo=l(),kne=a("p"),IBo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),jBo=l(),bd=a("p"),NBo=o(`Note:
Loading a model from its configuration file does `),Rne=a("strong"),DBo=o("not"),qBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sne=a("code"),GBo=o("from_pretrained()"),OBo=o("to load the model weights."),XBo=l(),Pne=a("p"),zBo=o("Examples:"),VBo=l(),f(tE.$$.fragment),WBo=l(),qe=a("div"),f(aE.$$.fragment),QBo=l(),$ne=a("p"),HBo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),UBo=l(),Ua=a("p"),JBo=o("The model class to instantiate is selected based on the "),Ine=a("code"),YBo=o("model_type"),KBo=o(` property of the config object (either
passed as an argument or loaded from `),jne=a("code"),ZBo=o("pretrained_model_name_or_path"),exo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nne=a("code"),oxo=o("pretrained_model_name_or_path"),rxo=o(":"),txo=l(),Dne=a("ul"),_2=a("li"),qne=a("strong"),axo=o("tapas"),nxo=o(" \u2014 "),Vj=a("a"),sxo=o("TapasForQuestionAnswering"),lxo=o(" (TAPAS model)"),ixo=l(),u2=a("p"),dxo=o("The model is set in evaluation mode by default using "),Gne=a("code"),cxo=o("model.eval()"),fxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),One=a("code"),mxo=o("model.train()"),gxo=l(),Xne=a("p"),hxo=o("Examples:"),pxo=l(),f(nE.$$.fragment),WLe=l(),vd=a("h2"),b2=a("a"),zne=a("span"),f(sE.$$.fragment),_xo=l(),Vne=a("span"),uxo=o("AutoModelForImageClassification"),QLe=l(),rr=a("div"),f(lE.$$.fragment),bxo=l(),Td=a("p"),vxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Wne=a("code"),Txo=o("from_pretrained()"),Fxo=o("class method or the "),Qne=a("code"),Cxo=o("from_config()"),Mxo=o(`class
method.`),Exo=l(),iE=a("p"),yxo=o("This class cannot be instantiated directly using "),Hne=a("code"),wxo=o("__init__()"),Axo=o(" (throws an error)."),Lxo=l(),Ur=a("div"),f(dE.$$.fragment),Bxo=l(),Une=a("p"),xxo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kxo=l(),Fd=a("p"),Rxo=o(`Note:
Loading a model from its configuration file does `),Jne=a("strong"),Sxo=o("not"),Pxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yne=a("code"),$xo=o("from_pretrained()"),Ixo=o("to load the model weights."),jxo=l(),Kne=a("p"),Nxo=o("Examples:"),Dxo=l(),f(cE.$$.fragment),qxo=l(),Ge=a("div"),f(fE.$$.fragment),Gxo=l(),Zne=a("p"),Oxo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Xxo=l(),Ja=a("p"),zxo=o("The model class to instantiate is selected based on the "),ese=a("code"),Vxo=o("model_type"),Wxo=o(` property of the config object (either
passed as an argument or loaded from `),ose=a("code"),Qxo=o("pretrained_model_name_or_path"),Hxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rse=a("code"),Uxo=o("pretrained_model_name_or_path"),Jxo=o(":"),Yxo=l(),be=a("ul"),v2=a("li"),tse=a("strong"),Kxo=o("beit"),Zxo=o(" \u2014 "),Wj=a("a"),eko=o("BeitForImageClassification"),oko=o(" (BEiT model)"),rko=l(),T2=a("li"),ase=a("strong"),tko=o("convnext"),ako=o(" \u2014 "),Qj=a("a"),nko=o("ConvNextForImageClassification"),sko=o(" (ConvNext model)"),lko=l(),Rs=a("li"),nse=a("strong"),iko=o("deit"),dko=o(" \u2014 "),Hj=a("a"),cko=o("DeiTForImageClassification"),fko=o(" or "),Uj=a("a"),mko=o("DeiTForImageClassificationWithTeacher"),gko=o(" (DeiT model)"),hko=l(),F2=a("li"),sse=a("strong"),pko=o("imagegpt"),_ko=o(" \u2014 "),Jj=a("a"),uko=o("ImageGPTForImageClassification"),bko=o(" (ImageGPT model)"),vko=l(),la=a("li"),lse=a("strong"),Tko=o("perceiver"),Fko=o(" \u2014 "),Yj=a("a"),Cko=o("PerceiverForImageClassificationLearned"),Mko=o(" or "),Kj=a("a"),Eko=o("PerceiverForImageClassificationFourier"),yko=o(" or "),Zj=a("a"),wko=o("PerceiverForImageClassificationConvProcessing"),Ako=o(" (Perceiver model)"),Lko=l(),C2=a("li"),ise=a("strong"),Bko=o("poolformer"),xko=o(" \u2014 "),eN=a("a"),kko=o("PoolFormerForImageClassification"),Rko=o(" (PoolFormer model)"),Sko=l(),M2=a("li"),dse=a("strong"),Pko=o("segformer"),$ko=o(" \u2014 "),oN=a("a"),Iko=o("SegformerForImageClassification"),jko=o(" (SegFormer model)"),Nko=l(),E2=a("li"),cse=a("strong"),Dko=o("swin"),qko=o(" \u2014 "),rN=a("a"),Gko=o("SwinForImageClassification"),Oko=o(" (Swin model)"),Xko=l(),y2=a("li"),fse=a("strong"),zko=o("vit"),Vko=o(" \u2014 "),tN=a("a"),Wko=o("ViTForImageClassification"),Qko=o(" (ViT model)"),Hko=l(),w2=a("p"),Uko=o("The model is set in evaluation mode by default using "),mse=a("code"),Jko=o("model.eval()"),Yko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gse=a("code"),Kko=o("model.train()"),Zko=l(),hse=a("p"),eRo=o("Examples:"),oRo=l(),f(mE.$$.fragment),HLe=l(),Cd=a("h2"),A2=a("a"),pse=a("span"),f(gE.$$.fragment),rRo=l(),_se=a("span"),tRo=o("AutoModelForVision2Seq"),ULe=l(),tr=a("div"),f(hE.$$.fragment),aRo=l(),Md=a("p"),nRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),use=a("code"),sRo=o("from_pretrained()"),lRo=o("class method or the "),bse=a("code"),iRo=o("from_config()"),dRo=o(`class
method.`),cRo=l(),pE=a("p"),fRo=o("This class cannot be instantiated directly using "),vse=a("code"),mRo=o("__init__()"),gRo=o(" (throws an error)."),hRo=l(),Jr=a("div"),f(_E.$$.fragment),pRo=l(),Tse=a("p"),_Ro=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uRo=l(),Ed=a("p"),bRo=o(`Note:
Loading a model from its configuration file does `),Fse=a("strong"),vRo=o("not"),TRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cse=a("code"),FRo=o("from_pretrained()"),CRo=o("to load the model weights."),MRo=l(),Mse=a("p"),ERo=o("Examples:"),yRo=l(),f(uE.$$.fragment),wRo=l(),Oe=a("div"),f(bE.$$.fragment),ARo=l(),Ese=a("p"),LRo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),BRo=l(),Ya=a("p"),xRo=o("The model class to instantiate is selected based on the "),yse=a("code"),kRo=o("model_type"),RRo=o(` property of the config object (either
passed as an argument or loaded from `),wse=a("code"),SRo=o("pretrained_model_name_or_path"),PRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ase=a("code"),$Ro=o("pretrained_model_name_or_path"),IRo=o(":"),jRo=l(),Lse=a("ul"),L2=a("li"),Bse=a("strong"),NRo=o("vision-encoder-decoder"),DRo=o(" \u2014 "),aN=a("a"),qRo=o("VisionEncoderDecoderModel"),GRo=o(" (Vision Encoder decoder model)"),ORo=l(),B2=a("p"),XRo=o("The model is set in evaluation mode by default using "),xse=a("code"),zRo=o("model.eval()"),VRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kse=a("code"),WRo=o("model.train()"),QRo=l(),Rse=a("p"),HRo=o("Examples:"),URo=l(),f(vE.$$.fragment),JLe=l(),yd=a("h2"),x2=a("a"),Sse=a("span"),f(TE.$$.fragment),JRo=l(),Pse=a("span"),YRo=o("AutoModelForAudioClassification"),YLe=l(),ar=a("div"),f(FE.$$.fragment),KRo=l(),wd=a("p"),ZRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),$se=a("code"),eSo=o("from_pretrained()"),oSo=o("class method or the "),Ise=a("code"),rSo=o("from_config()"),tSo=o(`class
method.`),aSo=l(),CE=a("p"),nSo=o("This class cannot be instantiated directly using "),jse=a("code"),sSo=o("__init__()"),lSo=o(" (throws an error)."),iSo=l(),Yr=a("div"),f(ME.$$.fragment),dSo=l(),Nse=a("p"),cSo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),fSo=l(),Ad=a("p"),mSo=o(`Note:
Loading a model from its configuration file does `),Dse=a("strong"),gSo=o("not"),hSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qse=a("code"),pSo=o("from_pretrained()"),_So=o("to load the model weights."),uSo=l(),Gse=a("p"),bSo=o("Examples:"),vSo=l(),f(EE.$$.fragment),TSo=l(),Xe=a("div"),f(yE.$$.fragment),FSo=l(),Ose=a("p"),CSo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),MSo=l(),Ka=a("p"),ESo=o("The model class to instantiate is selected based on the "),Xse=a("code"),ySo=o("model_type"),wSo=o(` property of the config object (either
passed as an argument or loaded from `),zse=a("code"),ASo=o("pretrained_model_name_or_path"),LSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vse=a("code"),BSo=o("pretrained_model_name_or_path"),xSo=o(":"),kSo=l(),ao=a("ul"),k2=a("li"),Wse=a("strong"),RSo=o("hubert"),SSo=o(" \u2014 "),nN=a("a"),PSo=o("HubertForSequenceClassification"),$So=o(" (Hubert model)"),ISo=l(),R2=a("li"),Qse=a("strong"),jSo=o("sew"),NSo=o(" \u2014 "),sN=a("a"),DSo=o("SEWForSequenceClassification"),qSo=o(" (SEW model)"),GSo=l(),S2=a("li"),Hse=a("strong"),OSo=o("sew-d"),XSo=o(" \u2014 "),lN=a("a"),zSo=o("SEWDForSequenceClassification"),VSo=o(" (SEW-D model)"),WSo=l(),P2=a("li"),Use=a("strong"),QSo=o("unispeech"),HSo=o(" \u2014 "),iN=a("a"),USo=o("UniSpeechForSequenceClassification"),JSo=o(" (UniSpeech model)"),YSo=l(),$2=a("li"),Jse=a("strong"),KSo=o("unispeech-sat"),ZSo=o(" \u2014 "),dN=a("a"),ePo=o("UniSpeechSatForSequenceClassification"),oPo=o(" (UniSpeechSat model)"),rPo=l(),I2=a("li"),Yse=a("strong"),tPo=o("wav2vec2"),aPo=o(" \u2014 "),cN=a("a"),nPo=o("Wav2Vec2ForSequenceClassification"),sPo=o(" (Wav2Vec2 model)"),lPo=l(),j2=a("li"),Kse=a("strong"),iPo=o("wavlm"),dPo=o(" \u2014 "),fN=a("a"),cPo=o("WavLMForSequenceClassification"),fPo=o(" (WavLM model)"),mPo=l(),N2=a("p"),gPo=o("The model is set in evaluation mode by default using "),Zse=a("code"),hPo=o("model.eval()"),pPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ele=a("code"),_Po=o("model.train()"),uPo=l(),ole=a("p"),bPo=o("Examples:"),vPo=l(),f(wE.$$.fragment),KLe=l(),Ld=a("h2"),D2=a("a"),rle=a("span"),f(AE.$$.fragment),TPo=l(),tle=a("span"),FPo=o("AutoModelForAudioFrameClassification"),ZLe=l(),nr=a("div"),f(LE.$$.fragment),CPo=l(),Bd=a("p"),MPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ale=a("code"),EPo=o("from_pretrained()"),yPo=o("class method or the "),nle=a("code"),wPo=o("from_config()"),APo=o(`class
method.`),LPo=l(),BE=a("p"),BPo=o("This class cannot be instantiated directly using "),sle=a("code"),xPo=o("__init__()"),kPo=o(" (throws an error)."),RPo=l(),Kr=a("div"),f(xE.$$.fragment),SPo=l(),lle=a("p"),PPo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),$Po=l(),xd=a("p"),IPo=o(`Note:
Loading a model from its configuration file does `),ile=a("strong"),jPo=o("not"),NPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dle=a("code"),DPo=o("from_pretrained()"),qPo=o("to load the model weights."),GPo=l(),cle=a("p"),OPo=o("Examples:"),XPo=l(),f(kE.$$.fragment),zPo=l(),ze=a("div"),f(RE.$$.fragment),VPo=l(),fle=a("p"),WPo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),QPo=l(),Za=a("p"),HPo=o("The model class to instantiate is selected based on the "),mle=a("code"),UPo=o("model_type"),JPo=o(` property of the config object (either
passed as an argument or loaded from `),gle=a("code"),YPo=o("pretrained_model_name_or_path"),KPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hle=a("code"),ZPo=o("pretrained_model_name_or_path"),e$o=o(":"),o$o=l(),kd=a("ul"),q2=a("li"),ple=a("strong"),r$o=o("unispeech-sat"),t$o=o(" \u2014 "),mN=a("a"),a$o=o("UniSpeechSatForAudioFrameClassification"),n$o=o(" (UniSpeechSat model)"),s$o=l(),G2=a("li"),_le=a("strong"),l$o=o("wav2vec2"),i$o=o(" \u2014 "),gN=a("a"),d$o=o("Wav2Vec2ForAudioFrameClassification"),c$o=o(" (Wav2Vec2 model)"),f$o=l(),O2=a("li"),ule=a("strong"),m$o=o("wavlm"),g$o=o(" \u2014 "),hN=a("a"),h$o=o("WavLMForAudioFrameClassification"),p$o=o(" (WavLM model)"),_$o=l(),X2=a("p"),u$o=o("The model is set in evaluation mode by default using "),ble=a("code"),b$o=o("model.eval()"),v$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vle=a("code"),T$o=o("model.train()"),F$o=l(),Tle=a("p"),C$o=o("Examples:"),M$o=l(),f(SE.$$.fragment),e9e=l(),Rd=a("h2"),z2=a("a"),Fle=a("span"),f(PE.$$.fragment),E$o=l(),Cle=a("span"),y$o=o("AutoModelForCTC"),o9e=l(),sr=a("div"),f($E.$$.fragment),w$o=l(),Sd=a("p"),A$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Mle=a("code"),L$o=o("from_pretrained()"),B$o=o("class method or the "),Ele=a("code"),x$o=o("from_config()"),k$o=o(`class
method.`),R$o=l(),IE=a("p"),S$o=o("This class cannot be instantiated directly using "),yle=a("code"),P$o=o("__init__()"),$$o=o(" (throws an error)."),I$o=l(),Zr=a("div"),f(jE.$$.fragment),j$o=l(),wle=a("p"),N$o=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),D$o=l(),Pd=a("p"),q$o=o(`Note:
Loading a model from its configuration file does `),Ale=a("strong"),G$o=o("not"),O$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lle=a("code"),X$o=o("from_pretrained()"),z$o=o("to load the model weights."),V$o=l(),Ble=a("p"),W$o=o("Examples:"),Q$o=l(),f(NE.$$.fragment),H$o=l(),Ve=a("div"),f(DE.$$.fragment),U$o=l(),xle=a("p"),J$o=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Y$o=l(),en=a("p"),K$o=o("The model class to instantiate is selected based on the "),kle=a("code"),Z$o=o("model_type"),eIo=o(` property of the config object (either
passed as an argument or loaded from `),Rle=a("code"),oIo=o("pretrained_model_name_or_path"),rIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sle=a("code"),tIo=o("pretrained_model_name_or_path"),aIo=o(":"),nIo=l(),no=a("ul"),V2=a("li"),Ple=a("strong"),sIo=o("hubert"),lIo=o(" \u2014 "),pN=a("a"),iIo=o("HubertForCTC"),dIo=o(" (Hubert model)"),cIo=l(),W2=a("li"),$le=a("strong"),fIo=o("sew"),mIo=o(" \u2014 "),_N=a("a"),gIo=o("SEWForCTC"),hIo=o(" (SEW model)"),pIo=l(),Q2=a("li"),Ile=a("strong"),_Io=o("sew-d"),uIo=o(" \u2014 "),uN=a("a"),bIo=o("SEWDForCTC"),vIo=o(" (SEW-D model)"),TIo=l(),H2=a("li"),jle=a("strong"),FIo=o("unispeech"),CIo=o(" \u2014 "),bN=a("a"),MIo=o("UniSpeechForCTC"),EIo=o(" (UniSpeech model)"),yIo=l(),U2=a("li"),Nle=a("strong"),wIo=o("unispeech-sat"),AIo=o(" \u2014 "),vN=a("a"),LIo=o("UniSpeechSatForCTC"),BIo=o(" (UniSpeechSat model)"),xIo=l(),J2=a("li"),Dle=a("strong"),kIo=o("wav2vec2"),RIo=o(" \u2014 "),TN=a("a"),SIo=o("Wav2Vec2ForCTC"),PIo=o(" (Wav2Vec2 model)"),$Io=l(),Y2=a("li"),qle=a("strong"),IIo=o("wavlm"),jIo=o(" \u2014 "),FN=a("a"),NIo=o("WavLMForCTC"),DIo=o(" (WavLM model)"),qIo=l(),K2=a("p"),GIo=o("The model is set in evaluation mode by default using "),Gle=a("code"),OIo=o("model.eval()"),XIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ole=a("code"),zIo=o("model.train()"),VIo=l(),Xle=a("p"),WIo=o("Examples:"),QIo=l(),f(qE.$$.fragment),r9e=l(),$d=a("h2"),Z2=a("a"),zle=a("span"),f(GE.$$.fragment),HIo=l(),Vle=a("span"),UIo=o("AutoModelForSpeechSeq2Seq"),t9e=l(),lr=a("div"),f(OE.$$.fragment),JIo=l(),Id=a("p"),YIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Wle=a("code"),KIo=o("from_pretrained()"),ZIo=o("class method or the "),Qle=a("code"),ejo=o("from_config()"),ojo=o(`class
method.`),rjo=l(),XE=a("p"),tjo=o("This class cannot be instantiated directly using "),Hle=a("code"),ajo=o("__init__()"),njo=o(" (throws an error)."),sjo=l(),et=a("div"),f(zE.$$.fragment),ljo=l(),Ule=a("p"),ijo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),djo=l(),jd=a("p"),cjo=o(`Note:
Loading a model from its configuration file does `),Jle=a("strong"),fjo=o("not"),mjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yle=a("code"),gjo=o("from_pretrained()"),hjo=o("to load the model weights."),pjo=l(),Kle=a("p"),_jo=o("Examples:"),ujo=l(),f(VE.$$.fragment),bjo=l(),We=a("div"),f(WE.$$.fragment),vjo=l(),Zle=a("p"),Tjo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Fjo=l(),on=a("p"),Cjo=o("The model class to instantiate is selected based on the "),eie=a("code"),Mjo=o("model_type"),Ejo=o(` property of the config object (either
passed as an argument or loaded from `),oie=a("code"),yjo=o("pretrained_model_name_or_path"),wjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rie=a("code"),Ajo=o("pretrained_model_name_or_path"),Ljo=o(":"),Bjo=l(),QE=a("ul"),ev=a("li"),tie=a("strong"),xjo=o("speech-encoder-decoder"),kjo=o(" \u2014 "),CN=a("a"),Rjo=o("SpeechEncoderDecoderModel"),Sjo=o(" (Speech Encoder decoder model)"),Pjo=l(),ov=a("li"),aie=a("strong"),$jo=o("speech_to_text"),Ijo=o(" \u2014 "),MN=a("a"),jjo=o("Speech2TextForConditionalGeneration"),Njo=o(" (Speech2Text model)"),Djo=l(),rv=a("p"),qjo=o("The model is set in evaluation mode by default using "),nie=a("code"),Gjo=o("model.eval()"),Ojo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sie=a("code"),Xjo=o("model.train()"),zjo=l(),lie=a("p"),Vjo=o("Examples:"),Wjo=l(),f(HE.$$.fragment),a9e=l(),Nd=a("h2"),tv=a("a"),iie=a("span"),f(UE.$$.fragment),Qjo=l(),die=a("span"),Hjo=o("AutoModelForAudioXVector"),n9e=l(),ir=a("div"),f(JE.$$.fragment),Ujo=l(),Dd=a("p"),Jjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),cie=a("code"),Yjo=o("from_pretrained()"),Kjo=o("class method or the "),fie=a("code"),Zjo=o("from_config()"),eNo=o(`class
method.`),oNo=l(),YE=a("p"),rNo=o("This class cannot be instantiated directly using "),mie=a("code"),tNo=o("__init__()"),aNo=o(" (throws an error)."),nNo=l(),ot=a("div"),f(KE.$$.fragment),sNo=l(),gie=a("p"),lNo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),iNo=l(),qd=a("p"),dNo=o(`Note:
Loading a model from its configuration file does `),hie=a("strong"),cNo=o("not"),fNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pie=a("code"),mNo=o("from_pretrained()"),gNo=o("to load the model weights."),hNo=l(),_ie=a("p"),pNo=o("Examples:"),_No=l(),f(ZE.$$.fragment),uNo=l(),Qe=a("div"),f(e3.$$.fragment),bNo=l(),uie=a("p"),vNo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),TNo=l(),rn=a("p"),FNo=o("The model class to instantiate is selected based on the "),bie=a("code"),CNo=o("model_type"),MNo=o(` property of the config object (either
passed as an argument or loaded from `),vie=a("code"),ENo=o("pretrained_model_name_or_path"),yNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tie=a("code"),wNo=o("pretrained_model_name_or_path"),ANo=o(":"),LNo=l(),Gd=a("ul"),av=a("li"),Fie=a("strong"),BNo=o("unispeech-sat"),xNo=o(" \u2014 "),EN=a("a"),kNo=o("UniSpeechSatForXVector"),RNo=o(" (UniSpeechSat model)"),SNo=l(),nv=a("li"),Cie=a("strong"),PNo=o("wav2vec2"),$No=o(" \u2014 "),yN=a("a"),INo=o("Wav2Vec2ForXVector"),jNo=o(" (Wav2Vec2 model)"),NNo=l(),sv=a("li"),Mie=a("strong"),DNo=o("wavlm"),qNo=o(" \u2014 "),wN=a("a"),GNo=o("WavLMForXVector"),ONo=o(" (WavLM model)"),XNo=l(),lv=a("p"),zNo=o("The model is set in evaluation mode by default using "),Eie=a("code"),VNo=o("model.eval()"),WNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yie=a("code"),QNo=o("model.train()"),HNo=l(),wie=a("p"),UNo=o("Examples:"),JNo=l(),f(o3.$$.fragment),s9e=l(),Od=a("h2"),iv=a("a"),Aie=a("span"),f(r3.$$.fragment),YNo=l(),Lie=a("span"),KNo=o("AutoModelForMaskedImageModeling"),l9e=l(),dr=a("div"),f(t3.$$.fragment),ZNo=l(),Xd=a("p"),eDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Bie=a("code"),oDo=o("from_pretrained()"),rDo=o("class method or the "),xie=a("code"),tDo=o("from_config()"),aDo=o(`class
method.`),nDo=l(),a3=a("p"),sDo=o("This class cannot be instantiated directly using "),kie=a("code"),lDo=o("__init__()"),iDo=o(" (throws an error)."),dDo=l(),rt=a("div"),f(n3.$$.fragment),cDo=l(),Rie=a("p"),fDo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),mDo=l(),zd=a("p"),gDo=o(`Note:
Loading a model from its configuration file does `),Sie=a("strong"),hDo=o("not"),pDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pie=a("code"),_Do=o("from_pretrained()"),uDo=o("to load the model weights."),bDo=l(),$ie=a("p"),vDo=o("Examples:"),TDo=l(),f(s3.$$.fragment),FDo=l(),He=a("div"),f(l3.$$.fragment),CDo=l(),Iie=a("p"),MDo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),EDo=l(),tn=a("p"),yDo=o("The model class to instantiate is selected based on the "),jie=a("code"),wDo=o("model_type"),ADo=o(` property of the config object (either
passed as an argument or loaded from `),Nie=a("code"),LDo=o("pretrained_model_name_or_path"),BDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=a("code"),xDo=o("pretrained_model_name_or_path"),kDo=o(":"),RDo=l(),Vd=a("ul"),dv=a("li"),qie=a("strong"),SDo=o("deit"),PDo=o(" \u2014 "),AN=a("a"),$Do=o("DeiTForMaskedImageModeling"),IDo=o(" (DeiT model)"),jDo=l(),cv=a("li"),Gie=a("strong"),NDo=o("swin"),DDo=o(" \u2014 "),LN=a("a"),qDo=o("SwinForMaskedImageModeling"),GDo=o(" (Swin model)"),ODo=l(),fv=a("li"),Oie=a("strong"),XDo=o("vit"),zDo=o(" \u2014 "),BN=a("a"),VDo=o("ViTForMaskedImageModeling"),WDo=o(" (ViT model)"),QDo=l(),mv=a("p"),HDo=o("The model is set in evaluation mode by default using "),Xie=a("code"),UDo=o("model.eval()"),JDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zie=a("code"),YDo=o("model.train()"),KDo=l(),Vie=a("p"),ZDo=o("Examples:"),eqo=l(),f(i3.$$.fragment),i9e=l(),Wd=a("h2"),gv=a("a"),Wie=a("span"),f(d3.$$.fragment),oqo=l(),Qie=a("span"),rqo=o("AutoModelForObjectDetection"),d9e=l(),cr=a("div"),f(c3.$$.fragment),tqo=l(),Qd=a("p"),aqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Hie=a("code"),nqo=o("from_pretrained()"),sqo=o("class method or the "),Uie=a("code"),lqo=o("from_config()"),iqo=o(`class
method.`),dqo=l(),f3=a("p"),cqo=o("This class cannot be instantiated directly using "),Jie=a("code"),fqo=o("__init__()"),mqo=o(" (throws an error)."),gqo=l(),tt=a("div"),f(m3.$$.fragment),hqo=l(),Yie=a("p"),pqo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),_qo=l(),Hd=a("p"),uqo=o(`Note:
Loading a model from its configuration file does `),Kie=a("strong"),bqo=o("not"),vqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zie=a("code"),Tqo=o("from_pretrained()"),Fqo=o("to load the model weights."),Cqo=l(),ede=a("p"),Mqo=o("Examples:"),Eqo=l(),f(g3.$$.fragment),yqo=l(),Ue=a("div"),f(h3.$$.fragment),wqo=l(),ode=a("p"),Aqo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Lqo=l(),an=a("p"),Bqo=o("The model class to instantiate is selected based on the "),rde=a("code"),xqo=o("model_type"),kqo=o(` property of the config object (either
passed as an argument or loaded from `),tde=a("code"),Rqo=o("pretrained_model_name_or_path"),Sqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=a("code"),Pqo=o("pretrained_model_name_or_path"),$qo=o(":"),Iqo=l(),nde=a("ul"),hv=a("li"),sde=a("strong"),jqo=o("detr"),Nqo=o(" \u2014 "),xN=a("a"),Dqo=o("DetrForObjectDetection"),qqo=o(" (DETR model)"),Gqo=l(),pv=a("p"),Oqo=o("The model is set in evaluation mode by default using "),lde=a("code"),Xqo=o("model.eval()"),zqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ide=a("code"),Vqo=o("model.train()"),Wqo=l(),dde=a("p"),Qqo=o("Examples:"),Hqo=l(),f(p3.$$.fragment),c9e=l(),Ud=a("h2"),_v=a("a"),cde=a("span"),f(_3.$$.fragment),Uqo=l(),fde=a("span"),Jqo=o("AutoModelForImageSegmentation"),f9e=l(),fr=a("div"),f(u3.$$.fragment),Yqo=l(),Jd=a("p"),Kqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),mde=a("code"),Zqo=o("from_pretrained()"),eGo=o("class method or the "),gde=a("code"),oGo=o("from_config()"),rGo=o(`class
method.`),tGo=l(),b3=a("p"),aGo=o("This class cannot be instantiated directly using "),hde=a("code"),nGo=o("__init__()"),sGo=o(" (throws an error)."),lGo=l(),at=a("div"),f(v3.$$.fragment),iGo=l(),pde=a("p"),dGo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),cGo=l(),Yd=a("p"),fGo=o(`Note:
Loading a model from its configuration file does `),_de=a("strong"),mGo=o("not"),gGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ude=a("code"),hGo=o("from_pretrained()"),pGo=o("to load the model weights."),_Go=l(),bde=a("p"),uGo=o("Examples:"),bGo=l(),f(T3.$$.fragment),vGo=l(),Je=a("div"),f(F3.$$.fragment),TGo=l(),vde=a("p"),FGo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),CGo=l(),nn=a("p"),MGo=o("The model class to instantiate is selected based on the "),Tde=a("code"),EGo=o("model_type"),yGo=o(` property of the config object (either
passed as an argument or loaded from `),Fde=a("code"),wGo=o("pretrained_model_name_or_path"),AGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cde=a("code"),LGo=o("pretrained_model_name_or_path"),BGo=o(":"),xGo=l(),Mde=a("ul"),uv=a("li"),Ede=a("strong"),kGo=o("detr"),RGo=o(" \u2014 "),kN=a("a"),SGo=o("DetrForSegmentation"),PGo=o(" (DETR model)"),$Go=l(),bv=a("p"),IGo=o("The model is set in evaluation mode by default using "),yde=a("code"),jGo=o("model.eval()"),NGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wde=a("code"),DGo=o("model.train()"),qGo=l(),Ade=a("p"),GGo=o("Examples:"),OGo=l(),f(C3.$$.fragment),m9e=l(),Kd=a("h2"),vv=a("a"),Lde=a("span"),f(M3.$$.fragment),XGo=l(),Bde=a("span"),zGo=o("AutoModelForSemanticSegmentation"),g9e=l(),mr=a("div"),f(E3.$$.fragment),VGo=l(),Zd=a("p"),WGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),xde=a("code"),QGo=o("from_pretrained()"),HGo=o("class method or the "),kde=a("code"),UGo=o("from_config()"),JGo=o(`class
method.`),YGo=l(),y3=a("p"),KGo=o("This class cannot be instantiated directly using "),Rde=a("code"),ZGo=o("__init__()"),eOo=o(" (throws an error)."),oOo=l(),nt=a("div"),f(w3.$$.fragment),rOo=l(),Sde=a("p"),tOo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),aOo=l(),ec=a("p"),nOo=o(`Note:
Loading a model from its configuration file does `),Pde=a("strong"),sOo=o("not"),lOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$de=a("code"),iOo=o("from_pretrained()"),dOo=o("to load the model weights."),cOo=l(),Ide=a("p"),fOo=o("Examples:"),mOo=l(),f(A3.$$.fragment),gOo=l(),Ye=a("div"),f(L3.$$.fragment),hOo=l(),jde=a("p"),pOo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),_Oo=l(),sn=a("p"),uOo=o("The model class to instantiate is selected based on the "),Nde=a("code"),bOo=o("model_type"),vOo=o(` property of the config object (either
passed as an argument or loaded from `),Dde=a("code"),TOo=o("pretrained_model_name_or_path"),FOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qde=a("code"),COo=o("pretrained_model_name_or_path"),MOo=o(":"),EOo=l(),B3=a("ul"),Tv=a("li"),Gde=a("strong"),yOo=o("beit"),wOo=o(" \u2014 "),RN=a("a"),AOo=o("BeitForSemanticSegmentation"),LOo=o(" (BEiT model)"),BOo=l(),Fv=a("li"),Ode=a("strong"),xOo=o("segformer"),kOo=o(" \u2014 "),SN=a("a"),ROo=o("SegformerForSemanticSegmentation"),SOo=o(" (SegFormer model)"),POo=l(),Cv=a("p"),$Oo=o("The model is set in evaluation mode by default using "),Xde=a("code"),IOo=o("model.eval()"),jOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zde=a("code"),NOo=o("model.train()"),DOo=l(),Vde=a("p"),qOo=o("Examples:"),GOo=l(),f(x3.$$.fragment),h9e=l(),oc=a("h2"),Mv=a("a"),Wde=a("span"),f(k3.$$.fragment),OOo=l(),Qde=a("span"),XOo=o("TFAutoModel"),p9e=l(),gr=a("div"),f(R3.$$.fragment),zOo=l(),rc=a("p"),VOo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Hde=a("code"),WOo=o("from_pretrained()"),QOo=o("class method or the "),Ude=a("code"),HOo=o("from_config()"),UOo=o(`class
method.`),JOo=l(),S3=a("p"),YOo=o("This class cannot be instantiated directly using "),Jde=a("code"),KOo=o("__init__()"),ZOo=o(" (throws an error)."),eXo=l(),st=a("div"),f(P3.$$.fragment),oXo=l(),Yde=a("p"),rXo=o("Instantiates one of the base model classes of the library from a configuration."),tXo=l(),tc=a("p"),aXo=o(`Note:
Loading a model from its configuration file does `),Kde=a("strong"),nXo=o("not"),sXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zde=a("code"),lXo=o("from_pretrained()"),iXo=o("to load the model weights."),dXo=l(),ece=a("p"),cXo=o("Examples:"),fXo=l(),f($3.$$.fragment),mXo=l(),go=a("div"),f(I3.$$.fragment),gXo=l(),oce=a("p"),hXo=o("Instantiate one of the base model classes of the library from a pretrained model."),pXo=l(),ln=a("p"),_Xo=o("The model class to instantiate is selected based on the "),rce=a("code"),uXo=o("model_type"),bXo=o(` property of the config object (either
passed as an argument or loaded from `),tce=a("code"),vXo=o("pretrained_model_name_or_path"),TXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ace=a("code"),FXo=o("pretrained_model_name_or_path"),CXo=o(":"),MXo=l(),B=a("ul"),Ev=a("li"),nce=a("strong"),EXo=o("albert"),yXo=o(" \u2014 "),PN=a("a"),wXo=o("TFAlbertModel"),AXo=o(" (ALBERT model)"),LXo=l(),yv=a("li"),sce=a("strong"),BXo=o("bart"),xXo=o(" \u2014 "),$N=a("a"),kXo=o("TFBartModel"),RXo=o(" (BART model)"),SXo=l(),wv=a("li"),lce=a("strong"),PXo=o("bert"),$Xo=o(" \u2014 "),IN=a("a"),IXo=o("TFBertModel"),jXo=o(" (BERT model)"),NXo=l(),Av=a("li"),ice=a("strong"),DXo=o("blenderbot"),qXo=o(" \u2014 "),jN=a("a"),GXo=o("TFBlenderbotModel"),OXo=o(" (Blenderbot model)"),XXo=l(),Lv=a("li"),dce=a("strong"),zXo=o("blenderbot-small"),VXo=o(" \u2014 "),NN=a("a"),WXo=o("TFBlenderbotSmallModel"),QXo=o(" (BlenderbotSmall model)"),HXo=l(),Bv=a("li"),cce=a("strong"),UXo=o("camembert"),JXo=o(" \u2014 "),DN=a("a"),YXo=o("TFCamembertModel"),KXo=o(" (CamemBERT model)"),ZXo=l(),xv=a("li"),fce=a("strong"),ezo=o("clip"),ozo=o(" \u2014 "),qN=a("a"),rzo=o("TFCLIPModel"),tzo=o(" (CLIP model)"),azo=l(),kv=a("li"),mce=a("strong"),nzo=o("convbert"),szo=o(" \u2014 "),GN=a("a"),lzo=o("TFConvBertModel"),izo=o(" (ConvBERT model)"),dzo=l(),Rv=a("li"),gce=a("strong"),czo=o("convnext"),fzo=o(" \u2014 "),ON=a("a"),mzo=o("TFConvNextModel"),gzo=o(" (ConvNext model)"),hzo=l(),Sv=a("li"),hce=a("strong"),pzo=o("ctrl"),_zo=o(" \u2014 "),XN=a("a"),uzo=o("TFCTRLModel"),bzo=o(" (CTRL model)"),vzo=l(),Pv=a("li"),pce=a("strong"),Tzo=o("deberta"),Fzo=o(" \u2014 "),zN=a("a"),Czo=o("TFDebertaModel"),Mzo=o(" (DeBERTa model)"),Ezo=l(),$v=a("li"),_ce=a("strong"),yzo=o("deberta-v2"),wzo=o(" \u2014 "),VN=a("a"),Azo=o("TFDebertaV2Model"),Lzo=o(" (DeBERTa-v2 model)"),Bzo=l(),Iv=a("li"),uce=a("strong"),xzo=o("distilbert"),kzo=o(" \u2014 "),WN=a("a"),Rzo=o("TFDistilBertModel"),Szo=o(" (DistilBERT model)"),Pzo=l(),jv=a("li"),bce=a("strong"),$zo=o("dpr"),Izo=o(" \u2014 "),QN=a("a"),jzo=o("TFDPRQuestionEncoder"),Nzo=o(" (DPR model)"),Dzo=l(),Nv=a("li"),vce=a("strong"),qzo=o("electra"),Gzo=o(" \u2014 "),HN=a("a"),Ozo=o("TFElectraModel"),Xzo=o(" (ELECTRA model)"),zzo=l(),Dv=a("li"),Tce=a("strong"),Vzo=o("flaubert"),Wzo=o(" \u2014 "),UN=a("a"),Qzo=o("TFFlaubertModel"),Hzo=o(" (FlauBERT model)"),Uzo=l(),Ss=a("li"),Fce=a("strong"),Jzo=o("funnel"),Yzo=o(" \u2014 "),JN=a("a"),Kzo=o("TFFunnelModel"),Zzo=o(" or "),YN=a("a"),eVo=o("TFFunnelBaseModel"),oVo=o(" (Funnel Transformer model)"),rVo=l(),qv=a("li"),Cce=a("strong"),tVo=o("gpt2"),aVo=o(" \u2014 "),KN=a("a"),nVo=o("TFGPT2Model"),sVo=o(" (OpenAI GPT-2 model)"),lVo=l(),Gv=a("li"),Mce=a("strong"),iVo=o("hubert"),dVo=o(" \u2014 "),ZN=a("a"),cVo=o("TFHubertModel"),fVo=o(" (Hubert model)"),mVo=l(),Ov=a("li"),Ece=a("strong"),gVo=o("layoutlm"),hVo=o(" \u2014 "),eD=a("a"),pVo=o("TFLayoutLMModel"),_Vo=o(" (LayoutLM model)"),uVo=l(),Xv=a("li"),yce=a("strong"),bVo=o("led"),vVo=o(" \u2014 "),oD=a("a"),TVo=o("TFLEDModel"),FVo=o(" (LED model)"),CVo=l(),zv=a("li"),wce=a("strong"),MVo=o("longformer"),EVo=o(" \u2014 "),rD=a("a"),yVo=o("TFLongformerModel"),wVo=o(" (Longformer model)"),AVo=l(),Vv=a("li"),Ace=a("strong"),LVo=o("lxmert"),BVo=o(" \u2014 "),tD=a("a"),xVo=o("TFLxmertModel"),kVo=o(" (LXMERT model)"),RVo=l(),Wv=a("li"),Lce=a("strong"),SVo=o("marian"),PVo=o(" \u2014 "),aD=a("a"),$Vo=o("TFMarianModel"),IVo=o(" (Marian model)"),jVo=l(),Qv=a("li"),Bce=a("strong"),NVo=o("mbart"),DVo=o(" \u2014 "),nD=a("a"),qVo=o("TFMBartModel"),GVo=o(" (mBART model)"),OVo=l(),Hv=a("li"),xce=a("strong"),XVo=o("mobilebert"),zVo=o(" \u2014 "),sD=a("a"),VVo=o("TFMobileBertModel"),WVo=o(" (MobileBERT model)"),QVo=l(),Uv=a("li"),kce=a("strong"),HVo=o("mpnet"),UVo=o(" \u2014 "),lD=a("a"),JVo=o("TFMPNetModel"),YVo=o(" (MPNet model)"),KVo=l(),Jv=a("li"),Rce=a("strong"),ZVo=o("mt5"),eWo=o(" \u2014 "),iD=a("a"),oWo=o("TFMT5Model"),rWo=o(" (mT5 model)"),tWo=l(),Yv=a("li"),Sce=a("strong"),aWo=o("openai-gpt"),nWo=o(" \u2014 "),dD=a("a"),sWo=o("TFOpenAIGPTModel"),lWo=o(" (OpenAI GPT model)"),iWo=l(),Kv=a("li"),Pce=a("strong"),dWo=o("pegasus"),cWo=o(" \u2014 "),cD=a("a"),fWo=o("TFPegasusModel"),mWo=o(" (Pegasus model)"),gWo=l(),Zv=a("li"),$ce=a("strong"),hWo=o("rembert"),pWo=o(" \u2014 "),fD=a("a"),_Wo=o("TFRemBertModel"),uWo=o(" (RemBERT model)"),bWo=l(),e6=a("li"),Ice=a("strong"),vWo=o("roberta"),TWo=o(" \u2014 "),mD=a("a"),FWo=o("TFRobertaModel"),CWo=o(" (RoBERTa model)"),MWo=l(),o6=a("li"),jce=a("strong"),EWo=o("roformer"),yWo=o(" \u2014 "),gD=a("a"),wWo=o("TFRoFormerModel"),AWo=o(" (RoFormer model)"),LWo=l(),r6=a("li"),Nce=a("strong"),BWo=o("speech_to_text"),xWo=o(" \u2014 "),hD=a("a"),kWo=o("TFSpeech2TextModel"),RWo=o(" (Speech2Text model)"),SWo=l(),t6=a("li"),Dce=a("strong"),PWo=o("t5"),$Wo=o(" \u2014 "),pD=a("a"),IWo=o("TFT5Model"),jWo=o(" (T5 model)"),NWo=l(),a6=a("li"),qce=a("strong"),DWo=o("tapas"),qWo=o(" \u2014 "),_D=a("a"),GWo=o("TFTapasModel"),OWo=o(" (TAPAS model)"),XWo=l(),n6=a("li"),Gce=a("strong"),zWo=o("transfo-xl"),VWo=o(" \u2014 "),uD=a("a"),WWo=o("TFTransfoXLModel"),QWo=o(" (Transformer-XL model)"),HWo=l(),s6=a("li"),Oce=a("strong"),UWo=o("vit"),JWo=o(" \u2014 "),bD=a("a"),YWo=o("TFViTModel"),KWo=o(" (ViT model)"),ZWo=l(),l6=a("li"),Xce=a("strong"),eQo=o("wav2vec2"),oQo=o(" \u2014 "),vD=a("a"),rQo=o("TFWav2Vec2Model"),tQo=o(" (Wav2Vec2 model)"),aQo=l(),i6=a("li"),zce=a("strong"),nQo=o("xlm"),sQo=o(" \u2014 "),TD=a("a"),lQo=o("TFXLMModel"),iQo=o(" (XLM model)"),dQo=l(),d6=a("li"),Vce=a("strong"),cQo=o("xlm-roberta"),fQo=o(" \u2014 "),FD=a("a"),mQo=o("TFXLMRobertaModel"),gQo=o(" (XLM-RoBERTa model)"),hQo=l(),c6=a("li"),Wce=a("strong"),pQo=o("xlnet"),_Qo=o(" \u2014 "),CD=a("a"),uQo=o("TFXLNetModel"),bQo=o(" (XLNet model)"),vQo=l(),Qce=a("p"),TQo=o("Examples:"),FQo=l(),f(j3.$$.fragment),_9e=l(),ac=a("h2"),f6=a("a"),Hce=a("span"),f(N3.$$.fragment),CQo=l(),Uce=a("span"),MQo=o("TFAutoModelForPreTraining"),u9e=l(),hr=a("div"),f(D3.$$.fragment),EQo=l(),nc=a("p"),yQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jce=a("code"),wQo=o("from_pretrained()"),AQo=o("class method or the "),Yce=a("code"),LQo=o("from_config()"),BQo=o(`class
method.`),xQo=l(),q3=a("p"),kQo=o("This class cannot be instantiated directly using "),Kce=a("code"),RQo=o("__init__()"),SQo=o(" (throws an error)."),PQo=l(),lt=a("div"),f(G3.$$.fragment),$Qo=l(),Zce=a("p"),IQo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),jQo=l(),sc=a("p"),NQo=o(`Note:
Loading a model from its configuration file does `),efe=a("strong"),DQo=o("not"),qQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ofe=a("code"),GQo=o("from_pretrained()"),OQo=o("to load the model weights."),XQo=l(),rfe=a("p"),zQo=o("Examples:"),VQo=l(),f(O3.$$.fragment),WQo=l(),ho=a("div"),f(X3.$$.fragment),QQo=l(),tfe=a("p"),HQo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),UQo=l(),dn=a("p"),JQo=o("The model class to instantiate is selected based on the "),afe=a("code"),YQo=o("model_type"),KQo=o(` property of the config object (either
passed as an argument or loaded from `),nfe=a("code"),ZQo=o("pretrained_model_name_or_path"),eHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sfe=a("code"),oHo=o("pretrained_model_name_or_path"),rHo=o(":"),tHo=l(),H=a("ul"),m6=a("li"),lfe=a("strong"),aHo=o("albert"),nHo=o(" \u2014 "),MD=a("a"),sHo=o("TFAlbertForPreTraining"),lHo=o(" (ALBERT model)"),iHo=l(),g6=a("li"),ife=a("strong"),dHo=o("bart"),cHo=o(" \u2014 "),ED=a("a"),fHo=o("TFBartForConditionalGeneration"),mHo=o(" (BART model)"),gHo=l(),h6=a("li"),dfe=a("strong"),hHo=o("bert"),pHo=o(" \u2014 "),yD=a("a"),_Ho=o("TFBertForPreTraining"),uHo=o(" (BERT model)"),bHo=l(),p6=a("li"),cfe=a("strong"),vHo=o("camembert"),THo=o(" \u2014 "),wD=a("a"),FHo=o("TFCamembertForMaskedLM"),CHo=o(" (CamemBERT model)"),MHo=l(),_6=a("li"),ffe=a("strong"),EHo=o("ctrl"),yHo=o(" \u2014 "),AD=a("a"),wHo=o("TFCTRLLMHeadModel"),AHo=o(" (CTRL model)"),LHo=l(),u6=a("li"),mfe=a("strong"),BHo=o("distilbert"),xHo=o(" \u2014 "),LD=a("a"),kHo=o("TFDistilBertForMaskedLM"),RHo=o(" (DistilBERT model)"),SHo=l(),b6=a("li"),gfe=a("strong"),PHo=o("electra"),$Ho=o(" \u2014 "),BD=a("a"),IHo=o("TFElectraForPreTraining"),jHo=o(" (ELECTRA model)"),NHo=l(),v6=a("li"),hfe=a("strong"),DHo=o("flaubert"),qHo=o(" \u2014 "),xD=a("a"),GHo=o("TFFlaubertWithLMHeadModel"),OHo=o(" (FlauBERT model)"),XHo=l(),T6=a("li"),pfe=a("strong"),zHo=o("funnel"),VHo=o(" \u2014 "),kD=a("a"),WHo=o("TFFunnelForPreTraining"),QHo=o(" (Funnel Transformer model)"),HHo=l(),F6=a("li"),_fe=a("strong"),UHo=o("gpt2"),JHo=o(" \u2014 "),RD=a("a"),YHo=o("TFGPT2LMHeadModel"),KHo=o(" (OpenAI GPT-2 model)"),ZHo=l(),C6=a("li"),ufe=a("strong"),eUo=o("layoutlm"),oUo=o(" \u2014 "),SD=a("a"),rUo=o("TFLayoutLMForMaskedLM"),tUo=o(" (LayoutLM model)"),aUo=l(),M6=a("li"),bfe=a("strong"),nUo=o("lxmert"),sUo=o(" \u2014 "),PD=a("a"),lUo=o("TFLxmertForPreTraining"),iUo=o(" (LXMERT model)"),dUo=l(),E6=a("li"),vfe=a("strong"),cUo=o("mobilebert"),fUo=o(" \u2014 "),$D=a("a"),mUo=o("TFMobileBertForPreTraining"),gUo=o(" (MobileBERT model)"),hUo=l(),y6=a("li"),Tfe=a("strong"),pUo=o("mpnet"),_Uo=o(" \u2014 "),ID=a("a"),uUo=o("TFMPNetForMaskedLM"),bUo=o(" (MPNet model)"),vUo=l(),w6=a("li"),Ffe=a("strong"),TUo=o("openai-gpt"),FUo=o(" \u2014 "),jD=a("a"),CUo=o("TFOpenAIGPTLMHeadModel"),MUo=o(" (OpenAI GPT model)"),EUo=l(),A6=a("li"),Cfe=a("strong"),yUo=o("roberta"),wUo=o(" \u2014 "),ND=a("a"),AUo=o("TFRobertaForMaskedLM"),LUo=o(" (RoBERTa model)"),BUo=l(),L6=a("li"),Mfe=a("strong"),xUo=o("t5"),kUo=o(" \u2014 "),DD=a("a"),RUo=o("TFT5ForConditionalGeneration"),SUo=o(" (T5 model)"),PUo=l(),B6=a("li"),Efe=a("strong"),$Uo=o("tapas"),IUo=o(" \u2014 "),qD=a("a"),jUo=o("TFTapasForMaskedLM"),NUo=o(" (TAPAS model)"),DUo=l(),x6=a("li"),yfe=a("strong"),qUo=o("transfo-xl"),GUo=o(" \u2014 "),GD=a("a"),OUo=o("TFTransfoXLLMHeadModel"),XUo=o(" (Transformer-XL model)"),zUo=l(),k6=a("li"),wfe=a("strong"),VUo=o("xlm"),WUo=o(" \u2014 "),OD=a("a"),QUo=o("TFXLMWithLMHeadModel"),HUo=o(" (XLM model)"),UUo=l(),R6=a("li"),Afe=a("strong"),JUo=o("xlm-roberta"),YUo=o(" \u2014 "),XD=a("a"),KUo=o("TFXLMRobertaForMaskedLM"),ZUo=o(" (XLM-RoBERTa model)"),eJo=l(),S6=a("li"),Lfe=a("strong"),oJo=o("xlnet"),rJo=o(" \u2014 "),zD=a("a"),tJo=o("TFXLNetLMHeadModel"),aJo=o(" (XLNet model)"),nJo=l(),Bfe=a("p"),sJo=o("Examples:"),lJo=l(),f(z3.$$.fragment),b9e=l(),lc=a("h2"),P6=a("a"),xfe=a("span"),f(V3.$$.fragment),iJo=l(),kfe=a("span"),dJo=o("TFAutoModelForCausalLM"),v9e=l(),pr=a("div"),f(W3.$$.fragment),cJo=l(),ic=a("p"),fJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Rfe=a("code"),mJo=o("from_pretrained()"),gJo=o("class method or the "),Sfe=a("code"),hJo=o("from_config()"),pJo=o(`class
method.`),_Jo=l(),Q3=a("p"),uJo=o("This class cannot be instantiated directly using "),Pfe=a("code"),bJo=o("__init__()"),vJo=o(" (throws an error)."),TJo=l(),it=a("div"),f(H3.$$.fragment),FJo=l(),$fe=a("p"),CJo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),MJo=l(),dc=a("p"),EJo=o(`Note:
Loading a model from its configuration file does `),Ife=a("strong"),yJo=o("not"),wJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jfe=a("code"),AJo=o("from_pretrained()"),LJo=o("to load the model weights."),BJo=l(),Nfe=a("p"),xJo=o("Examples:"),kJo=l(),f(U3.$$.fragment),RJo=l(),po=a("div"),f(J3.$$.fragment),SJo=l(),Dfe=a("p"),PJo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Jo=l(),cn=a("p"),IJo=o("The model class to instantiate is selected based on the "),qfe=a("code"),jJo=o("model_type"),NJo=o(` property of the config object (either
passed as an argument or loaded from `),Gfe=a("code"),DJo=o("pretrained_model_name_or_path"),qJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ofe=a("code"),GJo=o("pretrained_model_name_or_path"),OJo=o(":"),XJo=l(),he=a("ul"),$6=a("li"),Xfe=a("strong"),zJo=o("bert"),VJo=o(" \u2014 "),VD=a("a"),WJo=o("TFBertLMHeadModel"),QJo=o(" (BERT model)"),HJo=l(),I6=a("li"),zfe=a("strong"),UJo=o("ctrl"),JJo=o(" \u2014 "),WD=a("a"),YJo=o("TFCTRLLMHeadModel"),KJo=o(" (CTRL model)"),ZJo=l(),j6=a("li"),Vfe=a("strong"),eYo=o("gpt2"),oYo=o(" \u2014 "),QD=a("a"),rYo=o("TFGPT2LMHeadModel"),tYo=o(" (OpenAI GPT-2 model)"),aYo=l(),N6=a("li"),Wfe=a("strong"),nYo=o("openai-gpt"),sYo=o(" \u2014 "),HD=a("a"),lYo=o("TFOpenAIGPTLMHeadModel"),iYo=o(" (OpenAI GPT model)"),dYo=l(),D6=a("li"),Qfe=a("strong"),cYo=o("rembert"),fYo=o(" \u2014 "),UD=a("a"),mYo=o("TFRemBertForCausalLM"),gYo=o(" (RemBERT model)"),hYo=l(),q6=a("li"),Hfe=a("strong"),pYo=o("roberta"),_Yo=o(" \u2014 "),JD=a("a"),uYo=o("TFRobertaForCausalLM"),bYo=o(" (RoBERTa model)"),vYo=l(),G6=a("li"),Ufe=a("strong"),TYo=o("roformer"),FYo=o(" \u2014 "),YD=a("a"),CYo=o("TFRoFormerForCausalLM"),MYo=o(" (RoFormer model)"),EYo=l(),O6=a("li"),Jfe=a("strong"),yYo=o("transfo-xl"),wYo=o(" \u2014 "),KD=a("a"),AYo=o("TFTransfoXLLMHeadModel"),LYo=o(" (Transformer-XL model)"),BYo=l(),X6=a("li"),Yfe=a("strong"),xYo=o("xlm"),kYo=o(" \u2014 "),ZD=a("a"),RYo=o("TFXLMWithLMHeadModel"),SYo=o(" (XLM model)"),PYo=l(),z6=a("li"),Kfe=a("strong"),$Yo=o("xlnet"),IYo=o(" \u2014 "),eq=a("a"),jYo=o("TFXLNetLMHeadModel"),NYo=o(" (XLNet model)"),DYo=l(),Zfe=a("p"),qYo=o("Examples:"),GYo=l(),f(Y3.$$.fragment),T9e=l(),cc=a("h2"),V6=a("a"),eme=a("span"),f(K3.$$.fragment),OYo=l(),ome=a("span"),XYo=o("TFAutoModelForImageClassification"),F9e=l(),_r=a("div"),f(Z3.$$.fragment),zYo=l(),fc=a("p"),VYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rme=a("code"),WYo=o("from_pretrained()"),QYo=o("class method or the "),tme=a("code"),HYo=o("from_config()"),UYo=o(`class
method.`),JYo=l(),ey=a("p"),YYo=o("This class cannot be instantiated directly using "),ame=a("code"),KYo=o("__init__()"),ZYo=o(" (throws an error)."),eKo=l(),dt=a("div"),f(oy.$$.fragment),oKo=l(),nme=a("p"),rKo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),tKo=l(),mc=a("p"),aKo=o(`Note:
Loading a model from its configuration file does `),sme=a("strong"),nKo=o("not"),sKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lme=a("code"),lKo=o("from_pretrained()"),iKo=o("to load the model weights."),dKo=l(),ime=a("p"),cKo=o("Examples:"),fKo=l(),f(ry.$$.fragment),mKo=l(),_o=a("div"),f(ty.$$.fragment),gKo=l(),dme=a("p"),hKo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),pKo=l(),fn=a("p"),_Ko=o("The model class to instantiate is selected based on the "),cme=a("code"),uKo=o("model_type"),bKo=o(` property of the config object (either
passed as an argument or loaded from `),fme=a("code"),vKo=o("pretrained_model_name_or_path"),TKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mme=a("code"),FKo=o("pretrained_model_name_or_path"),CKo=o(":"),MKo=l(),ay=a("ul"),W6=a("li"),gme=a("strong"),EKo=o("convnext"),yKo=o(" \u2014 "),oq=a("a"),wKo=o("TFConvNextForImageClassification"),AKo=o(" (ConvNext model)"),LKo=l(),Q6=a("li"),hme=a("strong"),BKo=o("vit"),xKo=o(" \u2014 "),rq=a("a"),kKo=o("TFViTForImageClassification"),RKo=o(" (ViT model)"),SKo=l(),pme=a("p"),PKo=o("Examples:"),$Ko=l(),f(ny.$$.fragment),C9e=l(),gc=a("h2"),H6=a("a"),_me=a("span"),f(sy.$$.fragment),IKo=l(),ume=a("span"),jKo=o("TFAutoModelForMaskedLM"),M9e=l(),ur=a("div"),f(ly.$$.fragment),NKo=l(),hc=a("p"),DKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bme=a("code"),qKo=o("from_pretrained()"),GKo=o("class method or the "),vme=a("code"),OKo=o("from_config()"),XKo=o(`class
method.`),zKo=l(),iy=a("p"),VKo=o("This class cannot be instantiated directly using "),Tme=a("code"),WKo=o("__init__()"),QKo=o(" (throws an error)."),HKo=l(),ct=a("div"),f(dy.$$.fragment),UKo=l(),Fme=a("p"),JKo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),YKo=l(),pc=a("p"),KKo=o(`Note:
Loading a model from its configuration file does `),Cme=a("strong"),ZKo=o("not"),eZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mme=a("code"),oZo=o("from_pretrained()"),rZo=o("to load the model weights."),tZo=l(),Eme=a("p"),aZo=o("Examples:"),nZo=l(),f(cy.$$.fragment),sZo=l(),uo=a("div"),f(fy.$$.fragment),lZo=l(),yme=a("p"),iZo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dZo=l(),mn=a("p"),cZo=o("The model class to instantiate is selected based on the "),wme=a("code"),fZo=o("model_type"),mZo=o(` property of the config object (either
passed as an argument or loaded from `),Ame=a("code"),gZo=o("pretrained_model_name_or_path"),hZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=a("code"),pZo=o("pretrained_model_name_or_path"),_Zo=o(":"),uZo=l(),Y=a("ul"),U6=a("li"),Bme=a("strong"),bZo=o("albert"),vZo=o(" \u2014 "),tq=a("a"),TZo=o("TFAlbertForMaskedLM"),FZo=o(" (ALBERT model)"),CZo=l(),J6=a("li"),xme=a("strong"),MZo=o("bert"),EZo=o(" \u2014 "),aq=a("a"),yZo=o("TFBertForMaskedLM"),wZo=o(" (BERT model)"),AZo=l(),Y6=a("li"),kme=a("strong"),LZo=o("camembert"),BZo=o(" \u2014 "),nq=a("a"),xZo=o("TFCamembertForMaskedLM"),kZo=o(" (CamemBERT model)"),RZo=l(),K6=a("li"),Rme=a("strong"),SZo=o("convbert"),PZo=o(" \u2014 "),sq=a("a"),$Zo=o("TFConvBertForMaskedLM"),IZo=o(" (ConvBERT model)"),jZo=l(),Z6=a("li"),Sme=a("strong"),NZo=o("deberta"),DZo=o(" \u2014 "),lq=a("a"),qZo=o("TFDebertaForMaskedLM"),GZo=o(" (DeBERTa model)"),OZo=l(),eT=a("li"),Pme=a("strong"),XZo=o("deberta-v2"),zZo=o(" \u2014 "),iq=a("a"),VZo=o("TFDebertaV2ForMaskedLM"),WZo=o(" (DeBERTa-v2 model)"),QZo=l(),oT=a("li"),$me=a("strong"),HZo=o("distilbert"),UZo=o(" \u2014 "),dq=a("a"),JZo=o("TFDistilBertForMaskedLM"),YZo=o(" (DistilBERT model)"),KZo=l(),rT=a("li"),Ime=a("strong"),ZZo=o("electra"),eer=o(" \u2014 "),cq=a("a"),oer=o("TFElectraForMaskedLM"),rer=o(" (ELECTRA model)"),ter=l(),tT=a("li"),jme=a("strong"),aer=o("flaubert"),ner=o(" \u2014 "),fq=a("a"),ser=o("TFFlaubertWithLMHeadModel"),ler=o(" (FlauBERT model)"),ier=l(),aT=a("li"),Nme=a("strong"),der=o("funnel"),cer=o(" \u2014 "),mq=a("a"),fer=o("TFFunnelForMaskedLM"),mer=o(" (Funnel Transformer model)"),ger=l(),nT=a("li"),Dme=a("strong"),her=o("layoutlm"),per=o(" \u2014 "),gq=a("a"),_er=o("TFLayoutLMForMaskedLM"),uer=o(" (LayoutLM model)"),ber=l(),sT=a("li"),qme=a("strong"),ver=o("longformer"),Ter=o(" \u2014 "),hq=a("a"),Fer=o("TFLongformerForMaskedLM"),Cer=o(" (Longformer model)"),Mer=l(),lT=a("li"),Gme=a("strong"),Eer=o("mobilebert"),yer=o(" \u2014 "),pq=a("a"),wer=o("TFMobileBertForMaskedLM"),Aer=o(" (MobileBERT model)"),Ler=l(),iT=a("li"),Ome=a("strong"),Ber=o("mpnet"),xer=o(" \u2014 "),_q=a("a"),ker=o("TFMPNetForMaskedLM"),Rer=o(" (MPNet model)"),Ser=l(),dT=a("li"),Xme=a("strong"),Per=o("rembert"),$er=o(" \u2014 "),uq=a("a"),Ier=o("TFRemBertForMaskedLM"),jer=o(" (RemBERT model)"),Ner=l(),cT=a("li"),zme=a("strong"),Der=o("roberta"),qer=o(" \u2014 "),bq=a("a"),Ger=o("TFRobertaForMaskedLM"),Oer=o(" (RoBERTa model)"),Xer=l(),fT=a("li"),Vme=a("strong"),zer=o("roformer"),Ver=o(" \u2014 "),vq=a("a"),Wer=o("TFRoFormerForMaskedLM"),Qer=o(" (RoFormer model)"),Her=l(),mT=a("li"),Wme=a("strong"),Uer=o("tapas"),Jer=o(" \u2014 "),Tq=a("a"),Yer=o("TFTapasForMaskedLM"),Ker=o(" (TAPAS model)"),Zer=l(),gT=a("li"),Qme=a("strong"),eor=o("xlm"),oor=o(" \u2014 "),Fq=a("a"),ror=o("TFXLMWithLMHeadModel"),tor=o(" (XLM model)"),aor=l(),hT=a("li"),Hme=a("strong"),nor=o("xlm-roberta"),sor=o(" \u2014 "),Cq=a("a"),lor=o("TFXLMRobertaForMaskedLM"),ior=o(" (XLM-RoBERTa model)"),dor=l(),Ume=a("p"),cor=o("Examples:"),mor=l(),f(my.$$.fragment),E9e=l(),_c=a("h2"),pT=a("a"),Jme=a("span"),f(gy.$$.fragment),gor=l(),Yme=a("span"),hor=o("TFAutoModelForSeq2SeqLM"),y9e=l(),br=a("div"),f(hy.$$.fragment),por=l(),uc=a("p"),_or=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Kme=a("code"),uor=o("from_pretrained()"),bor=o("class method or the "),Zme=a("code"),vor=o("from_config()"),Tor=o(`class
method.`),For=l(),py=a("p"),Cor=o("This class cannot be instantiated directly using "),ege=a("code"),Mor=o("__init__()"),Eor=o(" (throws an error)."),yor=l(),ft=a("div"),f(_y.$$.fragment),wor=l(),oge=a("p"),Aor=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Lor=l(),bc=a("p"),Bor=o(`Note:
Loading a model from its configuration file does `),rge=a("strong"),xor=o("not"),kor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tge=a("code"),Ror=o("from_pretrained()"),Sor=o("to load the model weights."),Por=l(),age=a("p"),$or=o("Examples:"),Ior=l(),f(uy.$$.fragment),jor=l(),bo=a("div"),f(by.$$.fragment),Nor=l(),nge=a("p"),Dor=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qor=l(),gn=a("p"),Gor=o("The model class to instantiate is selected based on the "),sge=a("code"),Oor=o("model_type"),Xor=o(` property of the config object (either
passed as an argument or loaded from `),lge=a("code"),zor=o("pretrained_model_name_or_path"),Vor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=a("code"),Wor=o("pretrained_model_name_or_path"),Qor=o(":"),Hor=l(),pe=a("ul"),_T=a("li"),dge=a("strong"),Uor=o("bart"),Jor=o(" \u2014 "),Mq=a("a"),Yor=o("TFBartForConditionalGeneration"),Kor=o(" (BART model)"),Zor=l(),uT=a("li"),cge=a("strong"),err=o("blenderbot"),orr=o(" \u2014 "),Eq=a("a"),rrr=o("TFBlenderbotForConditionalGeneration"),trr=o(" (Blenderbot model)"),arr=l(),bT=a("li"),fge=a("strong"),nrr=o("blenderbot-small"),srr=o(" \u2014 "),yq=a("a"),lrr=o("TFBlenderbotSmallForConditionalGeneration"),irr=o(" (BlenderbotSmall model)"),drr=l(),vT=a("li"),mge=a("strong"),crr=o("encoder-decoder"),frr=o(" \u2014 "),wq=a("a"),mrr=o("TFEncoderDecoderModel"),grr=o(" (Encoder decoder model)"),hrr=l(),TT=a("li"),gge=a("strong"),prr=o("led"),_rr=o(" \u2014 "),Aq=a("a"),urr=o("TFLEDForConditionalGeneration"),brr=o(" (LED model)"),vrr=l(),FT=a("li"),hge=a("strong"),Trr=o("marian"),Frr=o(" \u2014 "),Lq=a("a"),Crr=o("TFMarianMTModel"),Mrr=o(" (Marian model)"),Err=l(),CT=a("li"),pge=a("strong"),yrr=o("mbart"),wrr=o(" \u2014 "),Bq=a("a"),Arr=o("TFMBartForConditionalGeneration"),Lrr=o(" (mBART model)"),Brr=l(),MT=a("li"),_ge=a("strong"),xrr=o("mt5"),krr=o(" \u2014 "),xq=a("a"),Rrr=o("TFMT5ForConditionalGeneration"),Srr=o(" (mT5 model)"),Prr=l(),ET=a("li"),uge=a("strong"),$rr=o("pegasus"),Irr=o(" \u2014 "),kq=a("a"),jrr=o("TFPegasusForConditionalGeneration"),Nrr=o(" (Pegasus model)"),Drr=l(),yT=a("li"),bge=a("strong"),qrr=o("t5"),Grr=o(" \u2014 "),Rq=a("a"),Orr=o("TFT5ForConditionalGeneration"),Xrr=o(" (T5 model)"),zrr=l(),vge=a("p"),Vrr=o("Examples:"),Wrr=l(),f(vy.$$.fragment),w9e=l(),vc=a("h2"),wT=a("a"),Tge=a("span"),f(Ty.$$.fragment),Qrr=l(),Fge=a("span"),Hrr=o("TFAutoModelForSequenceClassification"),A9e=l(),vr=a("div"),f(Fy.$$.fragment),Urr=l(),Tc=a("p"),Jrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Cge=a("code"),Yrr=o("from_pretrained()"),Krr=o("class method or the "),Mge=a("code"),Zrr=o("from_config()"),etr=o(`class
method.`),otr=l(),Cy=a("p"),rtr=o("This class cannot be instantiated directly using "),Ege=a("code"),ttr=o("__init__()"),atr=o(" (throws an error)."),ntr=l(),mt=a("div"),f(My.$$.fragment),str=l(),yge=a("p"),ltr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),itr=l(),Fc=a("p"),dtr=o(`Note:
Loading a model from its configuration file does `),wge=a("strong"),ctr=o("not"),ftr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Age=a("code"),mtr=o("from_pretrained()"),gtr=o("to load the model weights."),htr=l(),Lge=a("p"),ptr=o("Examples:"),_tr=l(),f(Ey.$$.fragment),utr=l(),vo=a("div"),f(yy.$$.fragment),btr=l(),Bge=a("p"),vtr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ttr=l(),hn=a("p"),Ftr=o("The model class to instantiate is selected based on the "),xge=a("code"),Ctr=o("model_type"),Mtr=o(` property of the config object (either
passed as an argument or loaded from `),kge=a("code"),Etr=o("pretrained_model_name_or_path"),ytr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=a("code"),wtr=o("pretrained_model_name_or_path"),Atr=o(":"),Ltr=l(),X=a("ul"),AT=a("li"),Sge=a("strong"),Btr=o("albert"),xtr=o(" \u2014 "),Sq=a("a"),ktr=o("TFAlbertForSequenceClassification"),Rtr=o(" (ALBERT model)"),Str=l(),LT=a("li"),Pge=a("strong"),Ptr=o("bert"),$tr=o(" \u2014 "),Pq=a("a"),Itr=o("TFBertForSequenceClassification"),jtr=o(" (BERT model)"),Ntr=l(),BT=a("li"),$ge=a("strong"),Dtr=o("camembert"),qtr=o(" \u2014 "),$q=a("a"),Gtr=o("TFCamembertForSequenceClassification"),Otr=o(" (CamemBERT model)"),Xtr=l(),xT=a("li"),Ige=a("strong"),ztr=o("convbert"),Vtr=o(" \u2014 "),Iq=a("a"),Wtr=o("TFConvBertForSequenceClassification"),Qtr=o(" (ConvBERT model)"),Htr=l(),kT=a("li"),jge=a("strong"),Utr=o("ctrl"),Jtr=o(" \u2014 "),jq=a("a"),Ytr=o("TFCTRLForSequenceClassification"),Ktr=o(" (CTRL model)"),Ztr=l(),RT=a("li"),Nge=a("strong"),ear=o("deberta"),oar=o(" \u2014 "),Nq=a("a"),rar=o("TFDebertaForSequenceClassification"),tar=o(" (DeBERTa model)"),aar=l(),ST=a("li"),Dge=a("strong"),nar=o("deberta-v2"),sar=o(" \u2014 "),Dq=a("a"),lar=o("TFDebertaV2ForSequenceClassification"),iar=o(" (DeBERTa-v2 model)"),dar=l(),PT=a("li"),qge=a("strong"),car=o("distilbert"),far=o(" \u2014 "),qq=a("a"),mar=o("TFDistilBertForSequenceClassification"),gar=o(" (DistilBERT model)"),har=l(),$T=a("li"),Gge=a("strong"),par=o("electra"),_ar=o(" \u2014 "),Gq=a("a"),uar=o("TFElectraForSequenceClassification"),bar=o(" (ELECTRA model)"),Tar=l(),IT=a("li"),Oge=a("strong"),Far=o("flaubert"),Car=o(" \u2014 "),Oq=a("a"),Mar=o("TFFlaubertForSequenceClassification"),Ear=o(" (FlauBERT model)"),yar=l(),jT=a("li"),Xge=a("strong"),war=o("funnel"),Aar=o(" \u2014 "),Xq=a("a"),Lar=o("TFFunnelForSequenceClassification"),Bar=o(" (Funnel Transformer model)"),xar=l(),NT=a("li"),zge=a("strong"),kar=o("gpt2"),Rar=o(" \u2014 "),zq=a("a"),Sar=o("TFGPT2ForSequenceClassification"),Par=o(" (OpenAI GPT-2 model)"),$ar=l(),DT=a("li"),Vge=a("strong"),Iar=o("layoutlm"),jar=o(" \u2014 "),Vq=a("a"),Nar=o("TFLayoutLMForSequenceClassification"),Dar=o(" (LayoutLM model)"),qar=l(),qT=a("li"),Wge=a("strong"),Gar=o("longformer"),Oar=o(" \u2014 "),Wq=a("a"),Xar=o("TFLongformerForSequenceClassification"),zar=o(" (Longformer model)"),Var=l(),GT=a("li"),Qge=a("strong"),War=o("mobilebert"),Qar=o(" \u2014 "),Qq=a("a"),Har=o("TFMobileBertForSequenceClassification"),Uar=o(" (MobileBERT model)"),Jar=l(),OT=a("li"),Hge=a("strong"),Yar=o("mpnet"),Kar=o(" \u2014 "),Hq=a("a"),Zar=o("TFMPNetForSequenceClassification"),enr=o(" (MPNet model)"),onr=l(),XT=a("li"),Uge=a("strong"),rnr=o("openai-gpt"),tnr=o(" \u2014 "),Uq=a("a"),anr=o("TFOpenAIGPTForSequenceClassification"),nnr=o(" (OpenAI GPT model)"),snr=l(),zT=a("li"),Jge=a("strong"),lnr=o("rembert"),inr=o(" \u2014 "),Jq=a("a"),dnr=o("TFRemBertForSequenceClassification"),cnr=o(" (RemBERT model)"),fnr=l(),VT=a("li"),Yge=a("strong"),mnr=o("roberta"),gnr=o(" \u2014 "),Yq=a("a"),hnr=o("TFRobertaForSequenceClassification"),pnr=o(" (RoBERTa model)"),_nr=l(),WT=a("li"),Kge=a("strong"),unr=o("roformer"),bnr=o(" \u2014 "),Kq=a("a"),vnr=o("TFRoFormerForSequenceClassification"),Tnr=o(" (RoFormer model)"),Fnr=l(),QT=a("li"),Zge=a("strong"),Cnr=o("tapas"),Mnr=o(" \u2014 "),Zq=a("a"),Enr=o("TFTapasForSequenceClassification"),ynr=o(" (TAPAS model)"),wnr=l(),HT=a("li"),ehe=a("strong"),Anr=o("transfo-xl"),Lnr=o(" \u2014 "),eG=a("a"),Bnr=o("TFTransfoXLForSequenceClassification"),xnr=o(" (Transformer-XL model)"),knr=l(),UT=a("li"),ohe=a("strong"),Rnr=o("xlm"),Snr=o(" \u2014 "),oG=a("a"),Pnr=o("TFXLMForSequenceClassification"),$nr=o(" (XLM model)"),Inr=l(),JT=a("li"),rhe=a("strong"),jnr=o("xlm-roberta"),Nnr=o(" \u2014 "),rG=a("a"),Dnr=o("TFXLMRobertaForSequenceClassification"),qnr=o(" (XLM-RoBERTa model)"),Gnr=l(),YT=a("li"),the=a("strong"),Onr=o("xlnet"),Xnr=o(" \u2014 "),tG=a("a"),znr=o("TFXLNetForSequenceClassification"),Vnr=o(" (XLNet model)"),Wnr=l(),ahe=a("p"),Qnr=o("Examples:"),Hnr=l(),f(wy.$$.fragment),L9e=l(),Cc=a("h2"),KT=a("a"),nhe=a("span"),f(Ay.$$.fragment),Unr=l(),she=a("span"),Jnr=o("TFAutoModelForMultipleChoice"),B9e=l(),Tr=a("div"),f(Ly.$$.fragment),Ynr=l(),Mc=a("p"),Knr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lhe=a("code"),Znr=o("from_pretrained()"),esr=o("class method or the "),ihe=a("code"),osr=o("from_config()"),rsr=o(`class
method.`),tsr=l(),By=a("p"),asr=o("This class cannot be instantiated directly using "),dhe=a("code"),nsr=o("__init__()"),ssr=o(" (throws an error)."),lsr=l(),gt=a("div"),f(xy.$$.fragment),isr=l(),che=a("p"),dsr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),csr=l(),Ec=a("p"),fsr=o(`Note:
Loading a model from its configuration file does `),fhe=a("strong"),msr=o("not"),gsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mhe=a("code"),hsr=o("from_pretrained()"),psr=o("to load the model weights."),_sr=l(),ghe=a("p"),usr=o("Examples:"),bsr=l(),f(ky.$$.fragment),vsr=l(),To=a("div"),f(Ry.$$.fragment),Tsr=l(),hhe=a("p"),Fsr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Csr=l(),pn=a("p"),Msr=o("The model class to instantiate is selected based on the "),phe=a("code"),Esr=o("model_type"),ysr=o(` property of the config object (either
passed as an argument or loaded from `),_he=a("code"),wsr=o("pretrained_model_name_or_path"),Asr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=a("code"),Lsr=o("pretrained_model_name_or_path"),Bsr=o(":"),xsr=l(),te=a("ul"),ZT=a("li"),bhe=a("strong"),ksr=o("albert"),Rsr=o(" \u2014 "),aG=a("a"),Ssr=o("TFAlbertForMultipleChoice"),Psr=o(" (ALBERT model)"),$sr=l(),e7=a("li"),vhe=a("strong"),Isr=o("bert"),jsr=o(" \u2014 "),nG=a("a"),Nsr=o("TFBertForMultipleChoice"),Dsr=o(" (BERT model)"),qsr=l(),o7=a("li"),The=a("strong"),Gsr=o("camembert"),Osr=o(" \u2014 "),sG=a("a"),Xsr=o("TFCamembertForMultipleChoice"),zsr=o(" (CamemBERT model)"),Vsr=l(),r7=a("li"),Fhe=a("strong"),Wsr=o("convbert"),Qsr=o(" \u2014 "),lG=a("a"),Hsr=o("TFConvBertForMultipleChoice"),Usr=o(" (ConvBERT model)"),Jsr=l(),t7=a("li"),Che=a("strong"),Ysr=o("distilbert"),Ksr=o(" \u2014 "),iG=a("a"),Zsr=o("TFDistilBertForMultipleChoice"),elr=o(" (DistilBERT model)"),olr=l(),a7=a("li"),Mhe=a("strong"),rlr=o("electra"),tlr=o(" \u2014 "),dG=a("a"),alr=o("TFElectraForMultipleChoice"),nlr=o(" (ELECTRA model)"),slr=l(),n7=a("li"),Ehe=a("strong"),llr=o("flaubert"),ilr=o(" \u2014 "),cG=a("a"),dlr=o("TFFlaubertForMultipleChoice"),clr=o(" (FlauBERT model)"),flr=l(),s7=a("li"),yhe=a("strong"),mlr=o("funnel"),glr=o(" \u2014 "),fG=a("a"),hlr=o("TFFunnelForMultipleChoice"),plr=o(" (Funnel Transformer model)"),_lr=l(),l7=a("li"),whe=a("strong"),ulr=o("longformer"),blr=o(" \u2014 "),mG=a("a"),vlr=o("TFLongformerForMultipleChoice"),Tlr=o(" (Longformer model)"),Flr=l(),i7=a("li"),Ahe=a("strong"),Clr=o("mobilebert"),Mlr=o(" \u2014 "),gG=a("a"),Elr=o("TFMobileBertForMultipleChoice"),ylr=o(" (MobileBERT model)"),wlr=l(),d7=a("li"),Lhe=a("strong"),Alr=o("mpnet"),Llr=o(" \u2014 "),hG=a("a"),Blr=o("TFMPNetForMultipleChoice"),xlr=o(" (MPNet model)"),klr=l(),c7=a("li"),Bhe=a("strong"),Rlr=o("rembert"),Slr=o(" \u2014 "),pG=a("a"),Plr=o("TFRemBertForMultipleChoice"),$lr=o(" (RemBERT model)"),Ilr=l(),f7=a("li"),xhe=a("strong"),jlr=o("roberta"),Nlr=o(" \u2014 "),_G=a("a"),Dlr=o("TFRobertaForMultipleChoice"),qlr=o(" (RoBERTa model)"),Glr=l(),m7=a("li"),khe=a("strong"),Olr=o("roformer"),Xlr=o(" \u2014 "),uG=a("a"),zlr=o("TFRoFormerForMultipleChoice"),Vlr=o(" (RoFormer model)"),Wlr=l(),g7=a("li"),Rhe=a("strong"),Qlr=o("xlm"),Hlr=o(" \u2014 "),bG=a("a"),Ulr=o("TFXLMForMultipleChoice"),Jlr=o(" (XLM model)"),Ylr=l(),h7=a("li"),She=a("strong"),Klr=o("xlm-roberta"),Zlr=o(" \u2014 "),vG=a("a"),eir=o("TFXLMRobertaForMultipleChoice"),oir=o(" (XLM-RoBERTa model)"),rir=l(),p7=a("li"),Phe=a("strong"),tir=o("xlnet"),air=o(" \u2014 "),TG=a("a"),nir=o("TFXLNetForMultipleChoice"),sir=o(" (XLNet model)"),lir=l(),$he=a("p"),iir=o("Examples:"),dir=l(),f(Sy.$$.fragment),x9e=l(),yc=a("h2"),_7=a("a"),Ihe=a("span"),f(Py.$$.fragment),cir=l(),jhe=a("span"),fir=o("TFAutoModelForTableQuestionAnswering"),k9e=l(),Fr=a("div"),f($y.$$.fragment),mir=l(),wc=a("p"),gir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Nhe=a("code"),hir=o("from_pretrained()"),pir=o("class method or the "),Dhe=a("code"),_ir=o("from_config()"),uir=o(`class
method.`),bir=l(),Iy=a("p"),vir=o("This class cannot be instantiated directly using "),qhe=a("code"),Tir=o("__init__()"),Fir=o(" (throws an error)."),Cir=l(),ht=a("div"),f(jy.$$.fragment),Mir=l(),Ghe=a("p"),Eir=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),yir=l(),Ac=a("p"),wir=o(`Note:
Loading a model from its configuration file does `),Ohe=a("strong"),Air=o("not"),Lir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xhe=a("code"),Bir=o("from_pretrained()"),xir=o("to load the model weights."),kir=l(),zhe=a("p"),Rir=o("Examples:"),Sir=l(),f(Ny.$$.fragment),Pir=l(),Fo=a("div"),f(Dy.$$.fragment),$ir=l(),Vhe=a("p"),Iir=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jir=l(),_n=a("p"),Nir=o("The model class to instantiate is selected based on the "),Whe=a("code"),Dir=o("model_type"),qir=o(` property of the config object (either
passed as an argument or loaded from `),Qhe=a("code"),Gir=o("pretrained_model_name_or_path"),Oir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=a("code"),Xir=o("pretrained_model_name_or_path"),zir=o(":"),Vir=l(),Uhe=a("ul"),u7=a("li"),Jhe=a("strong"),Wir=o("tapas"),Qir=o(" \u2014 "),FG=a("a"),Hir=o("TFTapasForQuestionAnswering"),Uir=o(" (TAPAS model)"),Jir=l(),Yhe=a("p"),Yir=o("Examples:"),Kir=l(),f(qy.$$.fragment),R9e=l(),Lc=a("h2"),b7=a("a"),Khe=a("span"),f(Gy.$$.fragment),Zir=l(),Zhe=a("span"),edr=o("TFAutoModelForTokenClassification"),S9e=l(),Cr=a("div"),f(Oy.$$.fragment),odr=l(),Bc=a("p"),rdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),epe=a("code"),tdr=o("from_pretrained()"),adr=o("class method or the "),ope=a("code"),ndr=o("from_config()"),sdr=o(`class
method.`),ldr=l(),Xy=a("p"),idr=o("This class cannot be instantiated directly using "),rpe=a("code"),ddr=o("__init__()"),cdr=o(" (throws an error)."),fdr=l(),pt=a("div"),f(zy.$$.fragment),mdr=l(),tpe=a("p"),gdr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hdr=l(),xc=a("p"),pdr=o(`Note:
Loading a model from its configuration file does `),ape=a("strong"),_dr=o("not"),udr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),npe=a("code"),bdr=o("from_pretrained()"),vdr=o("to load the model weights."),Tdr=l(),spe=a("p"),Fdr=o("Examples:"),Cdr=l(),f(Vy.$$.fragment),Mdr=l(),Co=a("div"),f(Wy.$$.fragment),Edr=l(),lpe=a("p"),ydr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wdr=l(),un=a("p"),Adr=o("The model class to instantiate is selected based on the "),ipe=a("code"),Ldr=o("model_type"),Bdr=o(` property of the config object (either
passed as an argument or loaded from `),dpe=a("code"),xdr=o("pretrained_model_name_or_path"),kdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=a("code"),Rdr=o("pretrained_model_name_or_path"),Sdr=o(":"),Pdr=l(),K=a("ul"),v7=a("li"),fpe=a("strong"),$dr=o("albert"),Idr=o(" \u2014 "),CG=a("a"),jdr=o("TFAlbertForTokenClassification"),Ndr=o(" (ALBERT model)"),Ddr=l(),T7=a("li"),mpe=a("strong"),qdr=o("bert"),Gdr=o(" \u2014 "),MG=a("a"),Odr=o("TFBertForTokenClassification"),Xdr=o(" (BERT model)"),zdr=l(),F7=a("li"),gpe=a("strong"),Vdr=o("camembert"),Wdr=o(" \u2014 "),EG=a("a"),Qdr=o("TFCamembertForTokenClassification"),Hdr=o(" (CamemBERT model)"),Udr=l(),C7=a("li"),hpe=a("strong"),Jdr=o("convbert"),Ydr=o(" \u2014 "),yG=a("a"),Kdr=o("TFConvBertForTokenClassification"),Zdr=o(" (ConvBERT model)"),ecr=l(),M7=a("li"),ppe=a("strong"),ocr=o("deberta"),rcr=o(" \u2014 "),wG=a("a"),tcr=o("TFDebertaForTokenClassification"),acr=o(" (DeBERTa model)"),ncr=l(),E7=a("li"),_pe=a("strong"),scr=o("deberta-v2"),lcr=o(" \u2014 "),AG=a("a"),icr=o("TFDebertaV2ForTokenClassification"),dcr=o(" (DeBERTa-v2 model)"),ccr=l(),y7=a("li"),upe=a("strong"),fcr=o("distilbert"),mcr=o(" \u2014 "),LG=a("a"),gcr=o("TFDistilBertForTokenClassification"),hcr=o(" (DistilBERT model)"),pcr=l(),w7=a("li"),bpe=a("strong"),_cr=o("electra"),ucr=o(" \u2014 "),BG=a("a"),bcr=o("TFElectraForTokenClassification"),vcr=o(" (ELECTRA model)"),Tcr=l(),A7=a("li"),vpe=a("strong"),Fcr=o("flaubert"),Ccr=o(" \u2014 "),xG=a("a"),Mcr=o("TFFlaubertForTokenClassification"),Ecr=o(" (FlauBERT model)"),ycr=l(),L7=a("li"),Tpe=a("strong"),wcr=o("funnel"),Acr=o(" \u2014 "),kG=a("a"),Lcr=o("TFFunnelForTokenClassification"),Bcr=o(" (Funnel Transformer model)"),xcr=l(),B7=a("li"),Fpe=a("strong"),kcr=o("layoutlm"),Rcr=o(" \u2014 "),RG=a("a"),Scr=o("TFLayoutLMForTokenClassification"),Pcr=o(" (LayoutLM model)"),$cr=l(),x7=a("li"),Cpe=a("strong"),Icr=o("longformer"),jcr=o(" \u2014 "),SG=a("a"),Ncr=o("TFLongformerForTokenClassification"),Dcr=o(" (Longformer model)"),qcr=l(),k7=a("li"),Mpe=a("strong"),Gcr=o("mobilebert"),Ocr=o(" \u2014 "),PG=a("a"),Xcr=o("TFMobileBertForTokenClassification"),zcr=o(" (MobileBERT model)"),Vcr=l(),R7=a("li"),Epe=a("strong"),Wcr=o("mpnet"),Qcr=o(" \u2014 "),$G=a("a"),Hcr=o("TFMPNetForTokenClassification"),Ucr=o(" (MPNet model)"),Jcr=l(),S7=a("li"),ype=a("strong"),Ycr=o("rembert"),Kcr=o(" \u2014 "),IG=a("a"),Zcr=o("TFRemBertForTokenClassification"),efr=o(" (RemBERT model)"),ofr=l(),P7=a("li"),wpe=a("strong"),rfr=o("roberta"),tfr=o(" \u2014 "),jG=a("a"),afr=o("TFRobertaForTokenClassification"),nfr=o(" (RoBERTa model)"),sfr=l(),$7=a("li"),Ape=a("strong"),lfr=o("roformer"),ifr=o(" \u2014 "),NG=a("a"),dfr=o("TFRoFormerForTokenClassification"),cfr=o(" (RoFormer model)"),ffr=l(),I7=a("li"),Lpe=a("strong"),mfr=o("xlm"),gfr=o(" \u2014 "),DG=a("a"),hfr=o("TFXLMForTokenClassification"),pfr=o(" (XLM model)"),_fr=l(),j7=a("li"),Bpe=a("strong"),ufr=o("xlm-roberta"),bfr=o(" \u2014 "),qG=a("a"),vfr=o("TFXLMRobertaForTokenClassification"),Tfr=o(" (XLM-RoBERTa model)"),Ffr=l(),N7=a("li"),xpe=a("strong"),Cfr=o("xlnet"),Mfr=o(" \u2014 "),GG=a("a"),Efr=o("TFXLNetForTokenClassification"),yfr=o(" (XLNet model)"),wfr=l(),kpe=a("p"),Afr=o("Examples:"),Lfr=l(),f(Qy.$$.fragment),P9e=l(),kc=a("h2"),D7=a("a"),Rpe=a("span"),f(Hy.$$.fragment),Bfr=l(),Spe=a("span"),xfr=o("TFAutoModelForQuestionAnswering"),$9e=l(),Mr=a("div"),f(Uy.$$.fragment),kfr=l(),Rc=a("p"),Rfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ppe=a("code"),Sfr=o("from_pretrained()"),Pfr=o("class method or the "),$pe=a("code"),$fr=o("from_config()"),Ifr=o(`class
method.`),jfr=l(),Jy=a("p"),Nfr=o("This class cannot be instantiated directly using "),Ipe=a("code"),Dfr=o("__init__()"),qfr=o(" (throws an error)."),Gfr=l(),_t=a("div"),f(Yy.$$.fragment),Ofr=l(),jpe=a("p"),Xfr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zfr=l(),Sc=a("p"),Vfr=o(`Note:
Loading a model from its configuration file does `),Npe=a("strong"),Wfr=o("not"),Qfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dpe=a("code"),Hfr=o("from_pretrained()"),Ufr=o("to load the model weights."),Jfr=l(),qpe=a("p"),Yfr=o("Examples:"),Kfr=l(),f(Ky.$$.fragment),Zfr=l(),Mo=a("div"),f(Zy.$$.fragment),emr=l(),Gpe=a("p"),omr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rmr=l(),bn=a("p"),tmr=o("The model class to instantiate is selected based on the "),Ope=a("code"),amr=o("model_type"),nmr=o(` property of the config object (either
passed as an argument or loaded from `),Xpe=a("code"),smr=o("pretrained_model_name_or_path"),lmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=a("code"),imr=o("pretrained_model_name_or_path"),dmr=o(":"),cmr=l(),Z=a("ul"),q7=a("li"),Vpe=a("strong"),fmr=o("albert"),mmr=o(" \u2014 "),OG=a("a"),gmr=o("TFAlbertForQuestionAnswering"),hmr=o(" (ALBERT model)"),pmr=l(),G7=a("li"),Wpe=a("strong"),_mr=o("bert"),umr=o(" \u2014 "),XG=a("a"),bmr=o("TFBertForQuestionAnswering"),vmr=o(" (BERT model)"),Tmr=l(),O7=a("li"),Qpe=a("strong"),Fmr=o("camembert"),Cmr=o(" \u2014 "),zG=a("a"),Mmr=o("TFCamembertForQuestionAnswering"),Emr=o(" (CamemBERT model)"),ymr=l(),X7=a("li"),Hpe=a("strong"),wmr=o("convbert"),Amr=o(" \u2014 "),VG=a("a"),Lmr=o("TFConvBertForQuestionAnswering"),Bmr=o(" (ConvBERT model)"),xmr=l(),z7=a("li"),Upe=a("strong"),kmr=o("deberta"),Rmr=o(" \u2014 "),WG=a("a"),Smr=o("TFDebertaForQuestionAnswering"),Pmr=o(" (DeBERTa model)"),$mr=l(),V7=a("li"),Jpe=a("strong"),Imr=o("deberta-v2"),jmr=o(" \u2014 "),QG=a("a"),Nmr=o("TFDebertaV2ForQuestionAnswering"),Dmr=o(" (DeBERTa-v2 model)"),qmr=l(),W7=a("li"),Ype=a("strong"),Gmr=o("distilbert"),Omr=o(" \u2014 "),HG=a("a"),Xmr=o("TFDistilBertForQuestionAnswering"),zmr=o(" (DistilBERT model)"),Vmr=l(),Q7=a("li"),Kpe=a("strong"),Wmr=o("electra"),Qmr=o(" \u2014 "),UG=a("a"),Hmr=o("TFElectraForQuestionAnswering"),Umr=o(" (ELECTRA model)"),Jmr=l(),H7=a("li"),Zpe=a("strong"),Ymr=o("flaubert"),Kmr=o(" \u2014 "),JG=a("a"),Zmr=o("TFFlaubertForQuestionAnsweringSimple"),egr=o(" (FlauBERT model)"),ogr=l(),U7=a("li"),e_e=a("strong"),rgr=o("funnel"),tgr=o(" \u2014 "),YG=a("a"),agr=o("TFFunnelForQuestionAnswering"),ngr=o(" (Funnel Transformer model)"),sgr=l(),J7=a("li"),o_e=a("strong"),lgr=o("longformer"),igr=o(" \u2014 "),KG=a("a"),dgr=o("TFLongformerForQuestionAnswering"),cgr=o(" (Longformer model)"),fgr=l(),Y7=a("li"),r_e=a("strong"),mgr=o("mobilebert"),ggr=o(" \u2014 "),ZG=a("a"),hgr=o("TFMobileBertForQuestionAnswering"),pgr=o(" (MobileBERT model)"),_gr=l(),K7=a("li"),t_e=a("strong"),ugr=o("mpnet"),bgr=o(" \u2014 "),eO=a("a"),vgr=o("TFMPNetForQuestionAnswering"),Tgr=o(" (MPNet model)"),Fgr=l(),Z7=a("li"),a_e=a("strong"),Cgr=o("rembert"),Mgr=o(" \u2014 "),oO=a("a"),Egr=o("TFRemBertForQuestionAnswering"),ygr=o(" (RemBERT model)"),wgr=l(),e8=a("li"),n_e=a("strong"),Agr=o("roberta"),Lgr=o(" \u2014 "),rO=a("a"),Bgr=o("TFRobertaForQuestionAnswering"),xgr=o(" (RoBERTa model)"),kgr=l(),o8=a("li"),s_e=a("strong"),Rgr=o("roformer"),Sgr=o(" \u2014 "),tO=a("a"),Pgr=o("TFRoFormerForQuestionAnswering"),$gr=o(" (RoFormer model)"),Igr=l(),r8=a("li"),l_e=a("strong"),jgr=o("xlm"),Ngr=o(" \u2014 "),aO=a("a"),Dgr=o("TFXLMForQuestionAnsweringSimple"),qgr=o(" (XLM model)"),Ggr=l(),t8=a("li"),i_e=a("strong"),Ogr=o("xlm-roberta"),Xgr=o(" \u2014 "),nO=a("a"),zgr=o("TFXLMRobertaForQuestionAnswering"),Vgr=o(" (XLM-RoBERTa model)"),Wgr=l(),a8=a("li"),d_e=a("strong"),Qgr=o("xlnet"),Hgr=o(" \u2014 "),sO=a("a"),Ugr=o("TFXLNetForQuestionAnsweringSimple"),Jgr=o(" (XLNet model)"),Ygr=l(),c_e=a("p"),Kgr=o("Examples:"),Zgr=l(),f(ew.$$.fragment),I9e=l(),Pc=a("h2"),n8=a("a"),f_e=a("span"),f(ow.$$.fragment),ehr=l(),m_e=a("span"),ohr=o("TFAutoModelForVision2Seq"),j9e=l(),Er=a("div"),f(rw.$$.fragment),rhr=l(),$c=a("p"),thr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),g_e=a("code"),ahr=o("from_pretrained()"),nhr=o("class method or the "),h_e=a("code"),shr=o("from_config()"),lhr=o(`class
method.`),ihr=l(),tw=a("p"),dhr=o("This class cannot be instantiated directly using "),p_e=a("code"),chr=o("__init__()"),fhr=o(" (throws an error)."),mhr=l(),ut=a("div"),f(aw.$$.fragment),ghr=l(),__e=a("p"),hhr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),phr=l(),Ic=a("p"),_hr=o(`Note:
Loading a model from its configuration file does `),u_e=a("strong"),uhr=o("not"),bhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),b_e=a("code"),vhr=o("from_pretrained()"),Thr=o("to load the model weights."),Fhr=l(),v_e=a("p"),Chr=o("Examples:"),Mhr=l(),f(nw.$$.fragment),Ehr=l(),Eo=a("div"),f(sw.$$.fragment),yhr=l(),T_e=a("p"),whr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ahr=l(),vn=a("p"),Lhr=o("The model class to instantiate is selected based on the "),F_e=a("code"),Bhr=o("model_type"),xhr=o(` property of the config object (either
passed as an argument or loaded from `),C_e=a("code"),khr=o("pretrained_model_name_or_path"),Rhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M_e=a("code"),Shr=o("pretrained_model_name_or_path"),Phr=o(":"),$hr=l(),E_e=a("ul"),s8=a("li"),y_e=a("strong"),Ihr=o("vision-encoder-decoder"),jhr=o(" \u2014 "),lO=a("a"),Nhr=o("TFVisionEncoderDecoderModel"),Dhr=o(" (Vision Encoder decoder model)"),qhr=l(),w_e=a("p"),Ghr=o("Examples:"),Ohr=l(),f(lw.$$.fragment),N9e=l(),jc=a("h2"),l8=a("a"),A_e=a("span"),f(iw.$$.fragment),Xhr=l(),L_e=a("span"),zhr=o("TFAutoModelForSpeechSeq2Seq"),D9e=l(),yr=a("div"),f(dw.$$.fragment),Vhr=l(),Nc=a("p"),Whr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),B_e=a("code"),Qhr=o("from_pretrained()"),Hhr=o("class method or the "),x_e=a("code"),Uhr=o("from_config()"),Jhr=o(`class
method.`),Yhr=l(),cw=a("p"),Khr=o("This class cannot be instantiated directly using "),k_e=a("code"),Zhr=o("__init__()"),epr=o(" (throws an error)."),opr=l(),bt=a("div"),f(fw.$$.fragment),rpr=l(),R_e=a("p"),tpr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),apr=l(),Dc=a("p"),npr=o(`Note:
Loading a model from its configuration file does `),S_e=a("strong"),spr=o("not"),lpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),P_e=a("code"),ipr=o("from_pretrained()"),dpr=o("to load the model weights."),cpr=l(),$_e=a("p"),fpr=o("Examples:"),mpr=l(),f(mw.$$.fragment),gpr=l(),yo=a("div"),f(gw.$$.fragment),hpr=l(),I_e=a("p"),ppr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_pr=l(),Tn=a("p"),upr=o("The model class to instantiate is selected based on the "),j_e=a("code"),bpr=o("model_type"),vpr=o(` property of the config object (either
passed as an argument or loaded from `),N_e=a("code"),Tpr=o("pretrained_model_name_or_path"),Fpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=a("code"),Cpr=o("pretrained_model_name_or_path"),Mpr=o(":"),Epr=l(),q_e=a("ul"),i8=a("li"),G_e=a("strong"),ypr=o("speech_to_text"),wpr=o(" \u2014 "),iO=a("a"),Apr=o("TFSpeech2TextForConditionalGeneration"),Lpr=o(" (Speech2Text model)"),Bpr=l(),O_e=a("p"),xpr=o("Examples:"),kpr=l(),f(hw.$$.fragment),q9e=l(),qc=a("h2"),d8=a("a"),X_e=a("span"),f(pw.$$.fragment),Rpr=l(),z_e=a("span"),Spr=o("FlaxAutoModel"),G9e=l(),wr=a("div"),f(_w.$$.fragment),Ppr=l(),Gc=a("p"),$pr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),V_e=a("code"),Ipr=o("from_pretrained()"),jpr=o("class method or the "),W_e=a("code"),Npr=o("from_config()"),Dpr=o(`class
method.`),qpr=l(),uw=a("p"),Gpr=o("This class cannot be instantiated directly using "),Q_e=a("code"),Opr=o("__init__()"),Xpr=o(" (throws an error)."),zpr=l(),vt=a("div"),f(bw.$$.fragment),Vpr=l(),H_e=a("p"),Wpr=o("Instantiates one of the base model classes of the library from a configuration."),Qpr=l(),Oc=a("p"),Hpr=o(`Note:
Loading a model from its configuration file does `),U_e=a("strong"),Upr=o("not"),Jpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),J_e=a("code"),Ypr=o("from_pretrained()"),Kpr=o("to load the model weights."),Zpr=l(),Y_e=a("p"),e_r=o("Examples:"),o_r=l(),f(vw.$$.fragment),r_r=l(),wo=a("div"),f(Tw.$$.fragment),t_r=l(),K_e=a("p"),a_r=o("Instantiate one of the base model classes of the library from a pretrained model."),n_r=l(),Fn=a("p"),s_r=o("The model class to instantiate is selected based on the "),Z_e=a("code"),l_r=o("model_type"),i_r=o(` property of the config object (either
passed as an argument or loaded from `),eue=a("code"),d_r=o("pretrained_model_name_or_path"),c_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=a("code"),f_r=o("pretrained_model_name_or_path"),m_r=o(":"),g_r=l(),V=a("ul"),c8=a("li"),rue=a("strong"),h_r=o("albert"),p_r=o(" \u2014 "),dO=a("a"),__r=o("FlaxAlbertModel"),u_r=o(" (ALBERT model)"),b_r=l(),f8=a("li"),tue=a("strong"),v_r=o("bart"),T_r=o(" \u2014 "),cO=a("a"),F_r=o("FlaxBartModel"),C_r=o(" (BART model)"),M_r=l(),m8=a("li"),aue=a("strong"),E_r=o("beit"),y_r=o(" \u2014 "),fO=a("a"),w_r=o("FlaxBeitModel"),A_r=o(" (BEiT model)"),L_r=l(),g8=a("li"),nue=a("strong"),B_r=o("bert"),x_r=o(" \u2014 "),mO=a("a"),k_r=o("FlaxBertModel"),R_r=o(" (BERT model)"),S_r=l(),h8=a("li"),sue=a("strong"),P_r=o("big_bird"),$_r=o(" \u2014 "),gO=a("a"),I_r=o("FlaxBigBirdModel"),j_r=o(" (BigBird model)"),N_r=l(),p8=a("li"),lue=a("strong"),D_r=o("blenderbot"),q_r=o(" \u2014 "),hO=a("a"),G_r=o("FlaxBlenderbotModel"),O_r=o(" (Blenderbot model)"),X_r=l(),_8=a("li"),iue=a("strong"),z_r=o("blenderbot-small"),V_r=o(" \u2014 "),pO=a("a"),W_r=o("FlaxBlenderbotSmallModel"),Q_r=o(" (BlenderbotSmall model)"),H_r=l(),u8=a("li"),due=a("strong"),U_r=o("clip"),J_r=o(" \u2014 "),_O=a("a"),Y_r=o("FlaxCLIPModel"),K_r=o(" (CLIP model)"),Z_r=l(),b8=a("li"),cue=a("strong"),eur=o("distilbert"),our=o(" \u2014 "),uO=a("a"),rur=o("FlaxDistilBertModel"),tur=o(" (DistilBERT model)"),aur=l(),v8=a("li"),fue=a("strong"),nur=o("electra"),sur=o(" \u2014 "),bO=a("a"),lur=o("FlaxElectraModel"),iur=o(" (ELECTRA model)"),dur=l(),T8=a("li"),mue=a("strong"),cur=o("gpt2"),fur=o(" \u2014 "),vO=a("a"),mur=o("FlaxGPT2Model"),gur=o(" (OpenAI GPT-2 model)"),hur=l(),F8=a("li"),gue=a("strong"),pur=o("gpt_neo"),_ur=o(" \u2014 "),TO=a("a"),uur=o("FlaxGPTNeoModel"),bur=o(" (GPT Neo model)"),vur=l(),C8=a("li"),hue=a("strong"),Tur=o("gptj"),Fur=o(" \u2014 "),FO=a("a"),Cur=o("FlaxGPTJModel"),Mur=o(" (GPT-J model)"),Eur=l(),M8=a("li"),pue=a("strong"),yur=o("marian"),wur=o(" \u2014 "),CO=a("a"),Aur=o("FlaxMarianModel"),Lur=o(" (Marian model)"),Bur=l(),E8=a("li"),_ue=a("strong"),xur=o("mbart"),kur=o(" \u2014 "),MO=a("a"),Rur=o("FlaxMBartModel"),Sur=o(" (mBART model)"),Pur=l(),y8=a("li"),uue=a("strong"),$ur=o("mt5"),Iur=o(" \u2014 "),EO=a("a"),jur=o("FlaxMT5Model"),Nur=o(" (mT5 model)"),Dur=l(),w8=a("li"),bue=a("strong"),qur=o("pegasus"),Gur=o(" \u2014 "),yO=a("a"),Our=o("FlaxPegasusModel"),Xur=o(" (Pegasus model)"),zur=l(),A8=a("li"),vue=a("strong"),Vur=o("roberta"),Wur=o(" \u2014 "),wO=a("a"),Qur=o("FlaxRobertaModel"),Hur=o(" (RoBERTa model)"),Uur=l(),L8=a("li"),Tue=a("strong"),Jur=o("roformer"),Yur=o(" \u2014 "),AO=a("a"),Kur=o("FlaxRoFormerModel"),Zur=o(" (RoFormer model)"),e1r=l(),B8=a("li"),Fue=a("strong"),o1r=o("t5"),r1r=o(" \u2014 "),LO=a("a"),t1r=o("FlaxT5Model"),a1r=o(" (T5 model)"),n1r=l(),x8=a("li"),Cue=a("strong"),s1r=o("vision-text-dual-encoder"),l1r=o(" \u2014 "),BO=a("a"),i1r=o("FlaxVisionTextDualEncoderModel"),d1r=o(" (VisionTextDualEncoder model)"),c1r=l(),k8=a("li"),Mue=a("strong"),f1r=o("vit"),m1r=o(" \u2014 "),xO=a("a"),g1r=o("FlaxViTModel"),h1r=o(" (ViT model)"),p1r=l(),R8=a("li"),Eue=a("strong"),_1r=o("wav2vec2"),u1r=o(" \u2014 "),kO=a("a"),b1r=o("FlaxWav2Vec2Model"),v1r=o(" (Wav2Vec2 model)"),T1r=l(),S8=a("li"),yue=a("strong"),F1r=o("xglm"),C1r=o(" \u2014 "),RO=a("a"),M1r=o("FlaxXGLMModel"),E1r=o(" (XGLM model)"),y1r=l(),wue=a("p"),w1r=o("Examples:"),A1r=l(),f(Fw.$$.fragment),O9e=l(),Xc=a("h2"),P8=a("a"),Aue=a("span"),f(Cw.$$.fragment),L1r=l(),Lue=a("span"),B1r=o("FlaxAutoModelForCausalLM"),X9e=l(),Ar=a("div"),f(Mw.$$.fragment),x1r=l(),zc=a("p"),k1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bue=a("code"),R1r=o("from_pretrained()"),S1r=o("class method or the "),xue=a("code"),P1r=o("from_config()"),$1r=o(`class
method.`),I1r=l(),Ew=a("p"),j1r=o("This class cannot be instantiated directly using "),kue=a("code"),N1r=o("__init__()"),D1r=o(" (throws an error)."),q1r=l(),Tt=a("div"),f(yw.$$.fragment),G1r=l(),Rue=a("p"),O1r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),X1r=l(),Vc=a("p"),z1r=o(`Note:
Loading a model from its configuration file does `),Sue=a("strong"),V1r=o("not"),W1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pue=a("code"),Q1r=o("from_pretrained()"),H1r=o("to load the model weights."),U1r=l(),$ue=a("p"),J1r=o("Examples:"),Y1r=l(),f(ww.$$.fragment),K1r=l(),Ao=a("div"),f(Aw.$$.fragment),Z1r=l(),Iue=a("p"),ebr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),obr=l(),Cn=a("p"),rbr=o("The model class to instantiate is selected based on the "),jue=a("code"),tbr=o("model_type"),abr=o(` property of the config object (either
passed as an argument or loaded from `),Nue=a("code"),nbr=o("pretrained_model_name_or_path"),sbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=a("code"),lbr=o("pretrained_model_name_or_path"),ibr=o(":"),dbr=l(),Mn=a("ul"),$8=a("li"),que=a("strong"),cbr=o("gpt2"),fbr=o(" \u2014 "),SO=a("a"),mbr=o("FlaxGPT2LMHeadModel"),gbr=o(" (OpenAI GPT-2 model)"),hbr=l(),I8=a("li"),Gue=a("strong"),pbr=o("gpt_neo"),_br=o(" \u2014 "),PO=a("a"),ubr=o("FlaxGPTNeoForCausalLM"),bbr=o(" (GPT Neo model)"),vbr=l(),j8=a("li"),Oue=a("strong"),Tbr=o("gptj"),Fbr=o(" \u2014 "),$O=a("a"),Cbr=o("FlaxGPTJForCausalLM"),Mbr=o(" (GPT-J model)"),Ebr=l(),N8=a("li"),Xue=a("strong"),ybr=o("xglm"),wbr=o(" \u2014 "),IO=a("a"),Abr=o("FlaxXGLMForCausalLM"),Lbr=o(" (XGLM model)"),Bbr=l(),zue=a("p"),xbr=o("Examples:"),kbr=l(),f(Lw.$$.fragment),z9e=l(),Wc=a("h2"),D8=a("a"),Vue=a("span"),f(Bw.$$.fragment),Rbr=l(),Wue=a("span"),Sbr=o("FlaxAutoModelForPreTraining"),V9e=l(),Lr=a("div"),f(xw.$$.fragment),Pbr=l(),Qc=a("p"),$br=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Que=a("code"),Ibr=o("from_pretrained()"),jbr=o("class method or the "),Hue=a("code"),Nbr=o("from_config()"),Dbr=o(`class
method.`),qbr=l(),kw=a("p"),Gbr=o("This class cannot be instantiated directly using "),Uue=a("code"),Obr=o("__init__()"),Xbr=o(" (throws an error)."),zbr=l(),Ft=a("div"),f(Rw.$$.fragment),Vbr=l(),Jue=a("p"),Wbr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Qbr=l(),Hc=a("p"),Hbr=o(`Note:
Loading a model from its configuration file does `),Yue=a("strong"),Ubr=o("not"),Jbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kue=a("code"),Ybr=o("from_pretrained()"),Kbr=o("to load the model weights."),Zbr=l(),Zue=a("p"),e5r=o("Examples:"),o5r=l(),f(Sw.$$.fragment),r5r=l(),Lo=a("div"),f(Pw.$$.fragment),t5r=l(),e1e=a("p"),a5r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),n5r=l(),En=a("p"),s5r=o("The model class to instantiate is selected based on the "),o1e=a("code"),l5r=o("model_type"),i5r=o(` property of the config object (either
passed as an argument or loaded from `),r1e=a("code"),d5r=o("pretrained_model_name_or_path"),c5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=a("code"),f5r=o("pretrained_model_name_or_path"),m5r=o(":"),g5r=l(),fe=a("ul"),q8=a("li"),a1e=a("strong"),h5r=o("albert"),p5r=o(" \u2014 "),jO=a("a"),_5r=o("FlaxAlbertForPreTraining"),u5r=o(" (ALBERT model)"),b5r=l(),G8=a("li"),n1e=a("strong"),v5r=o("bart"),T5r=o(" \u2014 "),NO=a("a"),F5r=o("FlaxBartForConditionalGeneration"),C5r=o(" (BART model)"),M5r=l(),O8=a("li"),s1e=a("strong"),E5r=o("bert"),y5r=o(" \u2014 "),DO=a("a"),w5r=o("FlaxBertForPreTraining"),A5r=o(" (BERT model)"),L5r=l(),X8=a("li"),l1e=a("strong"),B5r=o("big_bird"),x5r=o(" \u2014 "),qO=a("a"),k5r=o("FlaxBigBirdForPreTraining"),R5r=o(" (BigBird model)"),S5r=l(),z8=a("li"),i1e=a("strong"),P5r=o("electra"),$5r=o(" \u2014 "),GO=a("a"),I5r=o("FlaxElectraForPreTraining"),j5r=o(" (ELECTRA model)"),N5r=l(),V8=a("li"),d1e=a("strong"),D5r=o("mbart"),q5r=o(" \u2014 "),OO=a("a"),G5r=o("FlaxMBartForConditionalGeneration"),O5r=o(" (mBART model)"),X5r=l(),W8=a("li"),c1e=a("strong"),z5r=o("mt5"),V5r=o(" \u2014 "),XO=a("a"),W5r=o("FlaxMT5ForConditionalGeneration"),Q5r=o(" (mT5 model)"),H5r=l(),Q8=a("li"),f1e=a("strong"),U5r=o("roberta"),J5r=o(" \u2014 "),zO=a("a"),Y5r=o("FlaxRobertaForMaskedLM"),K5r=o(" (RoBERTa model)"),Z5r=l(),H8=a("li"),m1e=a("strong"),e2r=o("roformer"),o2r=o(" \u2014 "),VO=a("a"),r2r=o("FlaxRoFormerForMaskedLM"),t2r=o(" (RoFormer model)"),a2r=l(),U8=a("li"),g1e=a("strong"),n2r=o("t5"),s2r=o(" \u2014 "),WO=a("a"),l2r=o("FlaxT5ForConditionalGeneration"),i2r=o(" (T5 model)"),d2r=l(),J8=a("li"),h1e=a("strong"),c2r=o("wav2vec2"),f2r=o(" \u2014 "),QO=a("a"),m2r=o("FlaxWav2Vec2ForPreTraining"),g2r=o(" (Wav2Vec2 model)"),h2r=l(),p1e=a("p"),p2r=o("Examples:"),_2r=l(),f($w.$$.fragment),W9e=l(),Uc=a("h2"),Y8=a("a"),_1e=a("span"),f(Iw.$$.fragment),u2r=l(),u1e=a("span"),b2r=o("FlaxAutoModelForMaskedLM"),Q9e=l(),Br=a("div"),f(jw.$$.fragment),v2r=l(),Jc=a("p"),T2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),b1e=a("code"),F2r=o("from_pretrained()"),C2r=o("class method or the "),v1e=a("code"),M2r=o("from_config()"),E2r=o(`class
method.`),y2r=l(),Nw=a("p"),w2r=o("This class cannot be instantiated directly using "),T1e=a("code"),A2r=o("__init__()"),L2r=o(" (throws an error)."),B2r=l(),Ct=a("div"),f(Dw.$$.fragment),x2r=l(),F1e=a("p"),k2r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),R2r=l(),Yc=a("p"),S2r=o(`Note:
Loading a model from its configuration file does `),C1e=a("strong"),P2r=o("not"),$2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),M1e=a("code"),I2r=o("from_pretrained()"),j2r=o("to load the model weights."),N2r=l(),E1e=a("p"),D2r=o("Examples:"),q2r=l(),f(qw.$$.fragment),G2r=l(),Bo=a("div"),f(Gw.$$.fragment),O2r=l(),y1e=a("p"),X2r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),z2r=l(),yn=a("p"),V2r=o("The model class to instantiate is selected based on the "),w1e=a("code"),W2r=o("model_type"),Q2r=o(` property of the config object (either
passed as an argument or loaded from `),A1e=a("code"),H2r=o("pretrained_model_name_or_path"),U2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=a("code"),J2r=o("pretrained_model_name_or_path"),Y2r=o(":"),K2r=l(),ve=a("ul"),K8=a("li"),B1e=a("strong"),Z2r=o("albert"),evr=o(" \u2014 "),HO=a("a"),ovr=o("FlaxAlbertForMaskedLM"),rvr=o(" (ALBERT model)"),tvr=l(),Z8=a("li"),x1e=a("strong"),avr=o("bart"),nvr=o(" \u2014 "),UO=a("a"),svr=o("FlaxBartForConditionalGeneration"),lvr=o(" (BART model)"),ivr=l(),eF=a("li"),k1e=a("strong"),dvr=o("bert"),cvr=o(" \u2014 "),JO=a("a"),fvr=o("FlaxBertForMaskedLM"),mvr=o(" (BERT model)"),gvr=l(),oF=a("li"),R1e=a("strong"),hvr=o("big_bird"),pvr=o(" \u2014 "),YO=a("a"),_vr=o("FlaxBigBirdForMaskedLM"),uvr=o(" (BigBird model)"),bvr=l(),rF=a("li"),S1e=a("strong"),vvr=o("distilbert"),Tvr=o(" \u2014 "),KO=a("a"),Fvr=o("FlaxDistilBertForMaskedLM"),Cvr=o(" (DistilBERT model)"),Mvr=l(),tF=a("li"),P1e=a("strong"),Evr=o("electra"),yvr=o(" \u2014 "),ZO=a("a"),wvr=o("FlaxElectraForMaskedLM"),Avr=o(" (ELECTRA model)"),Lvr=l(),aF=a("li"),$1e=a("strong"),Bvr=o("mbart"),xvr=o(" \u2014 "),eX=a("a"),kvr=o("FlaxMBartForConditionalGeneration"),Rvr=o(" (mBART model)"),Svr=l(),nF=a("li"),I1e=a("strong"),Pvr=o("roberta"),$vr=o(" \u2014 "),oX=a("a"),Ivr=o("FlaxRobertaForMaskedLM"),jvr=o(" (RoBERTa model)"),Nvr=l(),sF=a("li"),j1e=a("strong"),Dvr=o("roformer"),qvr=o(" \u2014 "),rX=a("a"),Gvr=o("FlaxRoFormerForMaskedLM"),Ovr=o(" (RoFormer model)"),Xvr=l(),N1e=a("p"),zvr=o("Examples:"),Vvr=l(),f(Ow.$$.fragment),H9e=l(),Kc=a("h2"),lF=a("a"),D1e=a("span"),f(Xw.$$.fragment),Wvr=l(),q1e=a("span"),Qvr=o("FlaxAutoModelForSeq2SeqLM"),U9e=l(),xr=a("div"),f(zw.$$.fragment),Hvr=l(),Zc=a("p"),Uvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),G1e=a("code"),Jvr=o("from_pretrained()"),Yvr=o("class method or the "),O1e=a("code"),Kvr=o("from_config()"),Zvr=o(`class
method.`),e6r=l(),Vw=a("p"),o6r=o("This class cannot be instantiated directly using "),X1e=a("code"),r6r=o("__init__()"),t6r=o(" (throws an error)."),a6r=l(),Mt=a("div"),f(Ww.$$.fragment),n6r=l(),z1e=a("p"),s6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),l6r=l(),ef=a("p"),i6r=o(`Note:
Loading a model from its configuration file does `),V1e=a("strong"),d6r=o("not"),c6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),W1e=a("code"),f6r=o("from_pretrained()"),m6r=o("to load the model weights."),g6r=l(),Q1e=a("p"),h6r=o("Examples:"),p6r=l(),f(Qw.$$.fragment),_6r=l(),xo=a("div"),f(Hw.$$.fragment),u6r=l(),H1e=a("p"),b6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),v6r=l(),wn=a("p"),T6r=o("The model class to instantiate is selected based on the "),U1e=a("code"),F6r=o("model_type"),C6r=o(` property of the config object (either
passed as an argument or loaded from `),J1e=a("code"),M6r=o("pretrained_model_name_or_path"),E6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=a("code"),y6r=o("pretrained_model_name_or_path"),w6r=o(":"),A6r=l(),Te=a("ul"),iF=a("li"),K1e=a("strong"),L6r=o("bart"),B6r=o(" \u2014 "),tX=a("a"),x6r=o("FlaxBartForConditionalGeneration"),k6r=o(" (BART model)"),R6r=l(),dF=a("li"),Z1e=a("strong"),S6r=o("blenderbot"),P6r=o(" \u2014 "),aX=a("a"),$6r=o("FlaxBlenderbotForConditionalGeneration"),I6r=o(" (Blenderbot model)"),j6r=l(),cF=a("li"),ebe=a("strong"),N6r=o("blenderbot-small"),D6r=o(" \u2014 "),nX=a("a"),q6r=o("FlaxBlenderbotSmallForConditionalGeneration"),G6r=o(" (BlenderbotSmall model)"),O6r=l(),fF=a("li"),obe=a("strong"),X6r=o("encoder-decoder"),z6r=o(" \u2014 "),sX=a("a"),V6r=o("FlaxEncoderDecoderModel"),W6r=o(" (Encoder decoder model)"),Q6r=l(),mF=a("li"),rbe=a("strong"),H6r=o("marian"),U6r=o(" \u2014 "),lX=a("a"),J6r=o("FlaxMarianMTModel"),Y6r=o(" (Marian model)"),K6r=l(),gF=a("li"),tbe=a("strong"),Z6r=o("mbart"),eTr=o(" \u2014 "),iX=a("a"),oTr=o("FlaxMBartForConditionalGeneration"),rTr=o(" (mBART model)"),tTr=l(),hF=a("li"),abe=a("strong"),aTr=o("mt5"),nTr=o(" \u2014 "),dX=a("a"),sTr=o("FlaxMT5ForConditionalGeneration"),lTr=o(" (mT5 model)"),iTr=l(),pF=a("li"),nbe=a("strong"),dTr=o("pegasus"),cTr=o(" \u2014 "),cX=a("a"),fTr=o("FlaxPegasusForConditionalGeneration"),mTr=o(" (Pegasus model)"),gTr=l(),_F=a("li"),sbe=a("strong"),hTr=o("t5"),pTr=o(" \u2014 "),fX=a("a"),_Tr=o("FlaxT5ForConditionalGeneration"),uTr=o(" (T5 model)"),bTr=l(),lbe=a("p"),vTr=o("Examples:"),TTr=l(),f(Uw.$$.fragment),J9e=l(),of=a("h2"),uF=a("a"),ibe=a("span"),f(Jw.$$.fragment),FTr=l(),dbe=a("span"),CTr=o("FlaxAutoModelForSequenceClassification"),Y9e=l(),kr=a("div"),f(Yw.$$.fragment),MTr=l(),rf=a("p"),ETr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cbe=a("code"),yTr=o("from_pretrained()"),wTr=o("class method or the "),fbe=a("code"),ATr=o("from_config()"),LTr=o(`class
method.`),BTr=l(),Kw=a("p"),xTr=o("This class cannot be instantiated directly using "),mbe=a("code"),kTr=o("__init__()"),RTr=o(" (throws an error)."),STr=l(),Et=a("div"),f(Zw.$$.fragment),PTr=l(),gbe=a("p"),$Tr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ITr=l(),tf=a("p"),jTr=o(`Note:
Loading a model from its configuration file does `),hbe=a("strong"),NTr=o("not"),DTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pbe=a("code"),qTr=o("from_pretrained()"),GTr=o("to load the model weights."),OTr=l(),_be=a("p"),XTr=o("Examples:"),zTr=l(),f(eA.$$.fragment),VTr=l(),ko=a("div"),f(oA.$$.fragment),WTr=l(),ube=a("p"),QTr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),HTr=l(),An=a("p"),UTr=o("The model class to instantiate is selected based on the "),bbe=a("code"),JTr=o("model_type"),YTr=o(` property of the config object (either
passed as an argument or loaded from `),vbe=a("code"),KTr=o("pretrained_model_name_or_path"),ZTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tbe=a("code"),e7r=o("pretrained_model_name_or_path"),o7r=o(":"),r7r=l(),Fe=a("ul"),bF=a("li"),Fbe=a("strong"),t7r=o("albert"),a7r=o(" \u2014 "),mX=a("a"),n7r=o("FlaxAlbertForSequenceClassification"),s7r=o(" (ALBERT model)"),l7r=l(),vF=a("li"),Cbe=a("strong"),i7r=o("bart"),d7r=o(" \u2014 "),gX=a("a"),c7r=o("FlaxBartForSequenceClassification"),f7r=o(" (BART model)"),m7r=l(),TF=a("li"),Mbe=a("strong"),g7r=o("bert"),h7r=o(" \u2014 "),hX=a("a"),p7r=o("FlaxBertForSequenceClassification"),_7r=o(" (BERT model)"),u7r=l(),FF=a("li"),Ebe=a("strong"),b7r=o("big_bird"),v7r=o(" \u2014 "),pX=a("a"),T7r=o("FlaxBigBirdForSequenceClassification"),F7r=o(" (BigBird model)"),C7r=l(),CF=a("li"),ybe=a("strong"),M7r=o("distilbert"),E7r=o(" \u2014 "),_X=a("a"),y7r=o("FlaxDistilBertForSequenceClassification"),w7r=o(" (DistilBERT model)"),A7r=l(),MF=a("li"),wbe=a("strong"),L7r=o("electra"),B7r=o(" \u2014 "),uX=a("a"),x7r=o("FlaxElectraForSequenceClassification"),k7r=o(" (ELECTRA model)"),R7r=l(),EF=a("li"),Abe=a("strong"),S7r=o("mbart"),P7r=o(" \u2014 "),bX=a("a"),$7r=o("FlaxMBartForSequenceClassification"),I7r=o(" (mBART model)"),j7r=l(),yF=a("li"),Lbe=a("strong"),N7r=o("roberta"),D7r=o(" \u2014 "),vX=a("a"),q7r=o("FlaxRobertaForSequenceClassification"),G7r=o(" (RoBERTa model)"),O7r=l(),wF=a("li"),Bbe=a("strong"),X7r=o("roformer"),z7r=o(" \u2014 "),TX=a("a"),V7r=o("FlaxRoFormerForSequenceClassification"),W7r=o(" (RoFormer model)"),Q7r=l(),xbe=a("p"),H7r=o("Examples:"),U7r=l(),f(rA.$$.fragment),K9e=l(),af=a("h2"),AF=a("a"),kbe=a("span"),f(tA.$$.fragment),J7r=l(),Rbe=a("span"),Y7r=o("FlaxAutoModelForQuestionAnswering"),Z9e=l(),Rr=a("div"),f(aA.$$.fragment),K7r=l(),nf=a("p"),Z7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Sbe=a("code"),e8r=o("from_pretrained()"),o8r=o("class method or the "),Pbe=a("code"),r8r=o("from_config()"),t8r=o(`class
method.`),a8r=l(),nA=a("p"),n8r=o("This class cannot be instantiated directly using "),$be=a("code"),s8r=o("__init__()"),l8r=o(" (throws an error)."),i8r=l(),yt=a("div"),f(sA.$$.fragment),d8r=l(),Ibe=a("p"),c8r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),f8r=l(),sf=a("p"),m8r=o(`Note:
Loading a model from its configuration file does `),jbe=a("strong"),g8r=o("not"),h8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nbe=a("code"),p8r=o("from_pretrained()"),_8r=o("to load the model weights."),u8r=l(),Dbe=a("p"),b8r=o("Examples:"),v8r=l(),f(lA.$$.fragment),T8r=l(),Ro=a("div"),f(iA.$$.fragment),F8r=l(),qbe=a("p"),C8r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),M8r=l(),Ln=a("p"),E8r=o("The model class to instantiate is selected based on the "),Gbe=a("code"),y8r=o("model_type"),w8r=o(` property of the config object (either
passed as an argument or loaded from `),Obe=a("code"),A8r=o("pretrained_model_name_or_path"),L8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xbe=a("code"),B8r=o("pretrained_model_name_or_path"),x8r=o(":"),k8r=l(),Ce=a("ul"),LF=a("li"),zbe=a("strong"),R8r=o("albert"),S8r=o(" \u2014 "),FX=a("a"),P8r=o("FlaxAlbertForQuestionAnswering"),$8r=o(" (ALBERT model)"),I8r=l(),BF=a("li"),Vbe=a("strong"),j8r=o("bart"),N8r=o(" \u2014 "),CX=a("a"),D8r=o("FlaxBartForQuestionAnswering"),q8r=o(" (BART model)"),G8r=l(),xF=a("li"),Wbe=a("strong"),O8r=o("bert"),X8r=o(" \u2014 "),MX=a("a"),z8r=o("FlaxBertForQuestionAnswering"),V8r=o(" (BERT model)"),W8r=l(),kF=a("li"),Qbe=a("strong"),Q8r=o("big_bird"),H8r=o(" \u2014 "),EX=a("a"),U8r=o("FlaxBigBirdForQuestionAnswering"),J8r=o(" (BigBird model)"),Y8r=l(),RF=a("li"),Hbe=a("strong"),K8r=o("distilbert"),Z8r=o(" \u2014 "),yX=a("a"),eFr=o("FlaxDistilBertForQuestionAnswering"),oFr=o(" (DistilBERT model)"),rFr=l(),SF=a("li"),Ube=a("strong"),tFr=o("electra"),aFr=o(" \u2014 "),wX=a("a"),nFr=o("FlaxElectraForQuestionAnswering"),sFr=o(" (ELECTRA model)"),lFr=l(),PF=a("li"),Jbe=a("strong"),iFr=o("mbart"),dFr=o(" \u2014 "),AX=a("a"),cFr=o("FlaxMBartForQuestionAnswering"),fFr=o(" (mBART model)"),mFr=l(),$F=a("li"),Ybe=a("strong"),gFr=o("roberta"),hFr=o(" \u2014 "),LX=a("a"),pFr=o("FlaxRobertaForQuestionAnswering"),_Fr=o(" (RoBERTa model)"),uFr=l(),IF=a("li"),Kbe=a("strong"),bFr=o("roformer"),vFr=o(" \u2014 "),BX=a("a"),TFr=o("FlaxRoFormerForQuestionAnswering"),FFr=o(" (RoFormer model)"),CFr=l(),Zbe=a("p"),MFr=o("Examples:"),EFr=l(),f(dA.$$.fragment),eBe=l(),lf=a("h2"),jF=a("a"),e5e=a("span"),f(cA.$$.fragment),yFr=l(),o5e=a("span"),wFr=o("FlaxAutoModelForTokenClassification"),oBe=l(),Sr=a("div"),f(fA.$$.fragment),AFr=l(),df=a("p"),LFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),r5e=a("code"),BFr=o("from_pretrained()"),xFr=o("class method or the "),t5e=a("code"),kFr=o("from_config()"),RFr=o(`class
method.`),SFr=l(),mA=a("p"),PFr=o("This class cannot be instantiated directly using "),a5e=a("code"),$Fr=o("__init__()"),IFr=o(" (throws an error)."),jFr=l(),wt=a("div"),f(gA.$$.fragment),NFr=l(),n5e=a("p"),DFr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qFr=l(),cf=a("p"),GFr=o(`Note:
Loading a model from its configuration file does `),s5e=a("strong"),OFr=o("not"),XFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),l5e=a("code"),zFr=o("from_pretrained()"),VFr=o("to load the model weights."),WFr=l(),i5e=a("p"),QFr=o("Examples:"),HFr=l(),f(hA.$$.fragment),UFr=l(),So=a("div"),f(pA.$$.fragment),JFr=l(),d5e=a("p"),YFr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),KFr=l(),Bn=a("p"),ZFr=o("The model class to instantiate is selected based on the "),c5e=a("code"),eCr=o("model_type"),oCr=o(` property of the config object (either
passed as an argument or loaded from `),f5e=a("code"),rCr=o("pretrained_model_name_or_path"),tCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m5e=a("code"),aCr=o("pretrained_model_name_or_path"),nCr=o(":"),sCr=l(),so=a("ul"),NF=a("li"),g5e=a("strong"),lCr=o("albert"),iCr=o(" \u2014 "),xX=a("a"),dCr=o("FlaxAlbertForTokenClassification"),cCr=o(" (ALBERT model)"),fCr=l(),DF=a("li"),h5e=a("strong"),mCr=o("bert"),gCr=o(" \u2014 "),kX=a("a"),hCr=o("FlaxBertForTokenClassification"),pCr=o(" (BERT model)"),_Cr=l(),qF=a("li"),p5e=a("strong"),uCr=o("big_bird"),bCr=o(" \u2014 "),RX=a("a"),vCr=o("FlaxBigBirdForTokenClassification"),TCr=o(" (BigBird model)"),FCr=l(),GF=a("li"),_5e=a("strong"),CCr=o("distilbert"),MCr=o(" \u2014 "),SX=a("a"),ECr=o("FlaxDistilBertForTokenClassification"),yCr=o(" (DistilBERT model)"),wCr=l(),OF=a("li"),u5e=a("strong"),ACr=o("electra"),LCr=o(" \u2014 "),PX=a("a"),BCr=o("FlaxElectraForTokenClassification"),xCr=o(" (ELECTRA model)"),kCr=l(),XF=a("li"),b5e=a("strong"),RCr=o("roberta"),SCr=o(" \u2014 "),$X=a("a"),PCr=o("FlaxRobertaForTokenClassification"),$Cr=o(" (RoBERTa model)"),ICr=l(),zF=a("li"),v5e=a("strong"),jCr=o("roformer"),NCr=o(" \u2014 "),IX=a("a"),DCr=o("FlaxRoFormerForTokenClassification"),qCr=o(" (RoFormer model)"),GCr=l(),T5e=a("p"),OCr=o("Examples:"),XCr=l(),f(_A.$$.fragment),rBe=l(),ff=a("h2"),VF=a("a"),F5e=a("span"),f(uA.$$.fragment),zCr=l(),C5e=a("span"),VCr=o("FlaxAutoModelForMultipleChoice"),tBe=l(),Pr=a("div"),f(bA.$$.fragment),WCr=l(),mf=a("p"),QCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),M5e=a("code"),HCr=o("from_pretrained()"),UCr=o("class method or the "),E5e=a("code"),JCr=o("from_config()"),YCr=o(`class
method.`),KCr=l(),vA=a("p"),ZCr=o("This class cannot be instantiated directly using "),y5e=a("code"),e4r=o("__init__()"),o4r=o(" (throws an error)."),r4r=l(),At=a("div"),f(TA.$$.fragment),t4r=l(),w5e=a("p"),a4r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),n4r=l(),gf=a("p"),s4r=o(`Note:
Loading a model from its configuration file does `),A5e=a("strong"),l4r=o("not"),i4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),L5e=a("code"),d4r=o("from_pretrained()"),c4r=o("to load the model weights."),f4r=l(),B5e=a("p"),m4r=o("Examples:"),g4r=l(),f(FA.$$.fragment),h4r=l(),Po=a("div"),f(CA.$$.fragment),p4r=l(),x5e=a("p"),_4r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),u4r=l(),xn=a("p"),b4r=o("The model class to instantiate is selected based on the "),k5e=a("code"),v4r=o("model_type"),T4r=o(` property of the config object (either
passed as an argument or loaded from `),R5e=a("code"),F4r=o("pretrained_model_name_or_path"),C4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S5e=a("code"),M4r=o("pretrained_model_name_or_path"),E4r=o(":"),y4r=l(),lo=a("ul"),WF=a("li"),P5e=a("strong"),w4r=o("albert"),A4r=o(" \u2014 "),jX=a("a"),L4r=o("FlaxAlbertForMultipleChoice"),B4r=o(" (ALBERT model)"),x4r=l(),QF=a("li"),$5e=a("strong"),k4r=o("bert"),R4r=o(" \u2014 "),NX=a("a"),S4r=o("FlaxBertForMultipleChoice"),P4r=o(" (BERT model)"),$4r=l(),HF=a("li"),I5e=a("strong"),I4r=o("big_bird"),j4r=o(" \u2014 "),DX=a("a"),N4r=o("FlaxBigBirdForMultipleChoice"),D4r=o(" (BigBird model)"),q4r=l(),UF=a("li"),j5e=a("strong"),G4r=o("distilbert"),O4r=o(" \u2014 "),qX=a("a"),X4r=o("FlaxDistilBertForMultipleChoice"),z4r=o(" (DistilBERT model)"),V4r=l(),JF=a("li"),N5e=a("strong"),W4r=o("electra"),Q4r=o(" \u2014 "),GX=a("a"),H4r=o("FlaxElectraForMultipleChoice"),U4r=o(" (ELECTRA model)"),J4r=l(),YF=a("li"),D5e=a("strong"),Y4r=o("roberta"),K4r=o(" \u2014 "),OX=a("a"),Z4r=o("FlaxRobertaForMultipleChoice"),eMr=o(" (RoBERTa model)"),oMr=l(),KF=a("li"),q5e=a("strong"),rMr=o("roformer"),tMr=o(" \u2014 "),XX=a("a"),aMr=o("FlaxRoFormerForMultipleChoice"),nMr=o(" (RoFormer model)"),sMr=l(),G5e=a("p"),lMr=o("Examples:"),iMr=l(),f(MA.$$.fragment),aBe=l(),hf=a("h2"),ZF=a("a"),O5e=a("span"),f(EA.$$.fragment),dMr=l(),X5e=a("span"),cMr=o("FlaxAutoModelForNextSentencePrediction"),nBe=l(),$r=a("div"),f(yA.$$.fragment),fMr=l(),pf=a("p"),mMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),z5e=a("code"),gMr=o("from_pretrained()"),hMr=o("class method or the "),V5e=a("code"),pMr=o("from_config()"),_Mr=o(`class
method.`),uMr=l(),wA=a("p"),bMr=o("This class cannot be instantiated directly using "),W5e=a("code"),vMr=o("__init__()"),TMr=o(" (throws an error)."),FMr=l(),Lt=a("div"),f(AA.$$.fragment),CMr=l(),Q5e=a("p"),MMr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),EMr=l(),_f=a("p"),yMr=o(`Note:
Loading a model from its configuration file does `),H5e=a("strong"),wMr=o("not"),AMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),U5e=a("code"),LMr=o("from_pretrained()"),BMr=o("to load the model weights."),xMr=l(),J5e=a("p"),kMr=o("Examples:"),RMr=l(),f(LA.$$.fragment),SMr=l(),$o=a("div"),f(BA.$$.fragment),PMr=l(),Y5e=a("p"),$Mr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),IMr=l(),kn=a("p"),jMr=o("The model class to instantiate is selected based on the "),K5e=a("code"),NMr=o("model_type"),DMr=o(` property of the config object (either
passed as an argument or loaded from `),Z5e=a("code"),qMr=o("pretrained_model_name_or_path"),GMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=a("code"),OMr=o("pretrained_model_name_or_path"),XMr=o(":"),zMr=l(),o2e=a("ul"),eC=a("li"),r2e=a("strong"),VMr=o("bert"),WMr=o(" \u2014 "),zX=a("a"),QMr=o("FlaxBertForNextSentencePrediction"),HMr=o(" (BERT model)"),UMr=l(),t2e=a("p"),JMr=o("Examples:"),YMr=l(),f(xA.$$.fragment),sBe=l(),uf=a("h2"),oC=a("a"),a2e=a("span"),f(kA.$$.fragment),KMr=l(),n2e=a("span"),ZMr=o("FlaxAutoModelForImageClassification"),lBe=l(),Ir=a("div"),f(RA.$$.fragment),eEr=l(),bf=a("p"),oEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),s2e=a("code"),rEr=o("from_pretrained()"),tEr=o("class method or the "),l2e=a("code"),aEr=o("from_config()"),nEr=o(`class
method.`),sEr=l(),SA=a("p"),lEr=o("This class cannot be instantiated directly using "),i2e=a("code"),iEr=o("__init__()"),dEr=o(" (throws an error)."),cEr=l(),Bt=a("div"),f(PA.$$.fragment),fEr=l(),d2e=a("p"),mEr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gEr=l(),vf=a("p"),hEr=o(`Note:
Loading a model from its configuration file does `),c2e=a("strong"),pEr=o("not"),_Er=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),f2e=a("code"),uEr=o("from_pretrained()"),bEr=o("to load the model weights."),vEr=l(),m2e=a("p"),TEr=o("Examples:"),FEr=l(),f($A.$$.fragment),CEr=l(),Io=a("div"),f(IA.$$.fragment),MEr=l(),g2e=a("p"),EEr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),yEr=l(),Rn=a("p"),wEr=o("The model class to instantiate is selected based on the "),h2e=a("code"),AEr=o("model_type"),LEr=o(` property of the config object (either
passed as an argument or loaded from `),p2e=a("code"),BEr=o("pretrained_model_name_or_path"),xEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=a("code"),kEr=o("pretrained_model_name_or_path"),REr=o(":"),SEr=l(),jA=a("ul"),rC=a("li"),u2e=a("strong"),PEr=o("beit"),$Er=o(" \u2014 "),VX=a("a"),IEr=o("FlaxBeitForImageClassification"),jEr=o(" (BEiT model)"),NEr=l(),tC=a("li"),b2e=a("strong"),DEr=o("vit"),qEr=o(" \u2014 "),WX=a("a"),GEr=o("FlaxViTForImageClassification"),OEr=o(" (ViT model)"),XEr=l(),v2e=a("p"),zEr=o("Examples:"),VEr=l(),f(NA.$$.fragment),iBe=l(),Tf=a("h2"),aC=a("a"),T2e=a("span"),f(DA.$$.fragment),WEr=l(),F2e=a("span"),QEr=o("FlaxAutoModelForVision2Seq"),dBe=l(),jr=a("div"),f(qA.$$.fragment),HEr=l(),Ff=a("p"),UEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),C2e=a("code"),JEr=o("from_pretrained()"),YEr=o("class method or the "),M2e=a("code"),KEr=o("from_config()"),ZEr=o(`class
method.`),e3r=l(),GA=a("p"),o3r=o("This class cannot be instantiated directly using "),E2e=a("code"),r3r=o("__init__()"),t3r=o(" (throws an error)."),a3r=l(),xt=a("div"),f(OA.$$.fragment),n3r=l(),y2e=a("p"),s3r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),l3r=l(),Cf=a("p"),i3r=o(`Note:
Loading a model from its configuration file does `),w2e=a("strong"),d3r=o("not"),c3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),A2e=a("code"),f3r=o("from_pretrained()"),m3r=o("to load the model weights."),g3r=l(),L2e=a("p"),h3r=o("Examples:"),p3r=l(),f(XA.$$.fragment),_3r=l(),jo=a("div"),f(zA.$$.fragment),u3r=l(),B2e=a("p"),b3r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),v3r=l(),Sn=a("p"),T3r=o("The model class to instantiate is selected based on the "),x2e=a("code"),F3r=o("model_type"),C3r=o(` property of the config object (either
passed as an argument or loaded from `),k2e=a("code"),M3r=o("pretrained_model_name_or_path"),E3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=a("code"),y3r=o("pretrained_model_name_or_path"),w3r=o(":"),A3r=l(),S2e=a("ul"),nC=a("li"),P2e=a("strong"),L3r=o("vision-encoder-decoder"),B3r=o(" \u2014 "),QX=a("a"),x3r=o("FlaxVisionEncoderDecoderModel"),k3r=o(" (Vision Encoder decoder model)"),R3r=l(),$2e=a("p"),S3r=o("Examples:"),P3r=l(),f(VA.$$.fragment),this.h()},l(d){const u=O_t('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),Ae=i(d),ie=n(d,"H1",{class:!0});var WA=s(ie);me=n(WA,"A",{id:!0,class:!0,href:!0});var I2e=s(me);to=n(I2e,"SPAN",{});var j2e=s(to);m(ce.$$.fragment,j2e),j2e.forEach(t),I2e.forEach(t),ue=i(WA),Do=n(WA,"SPAN",{});var I3r=s(Do);wi=r(I3r,"Auto Classes"),I3r.forEach(t),WA.forEach(t),Ef=i(d),sa=n(d,"P",{});var fBe=s(sa);Ai=r(fBe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Li=n(fBe,"CODE",{});var j3r=s(Li);t4=r(j3r,"from_pretrained()"),j3r.forEach(t),yf=r(fBe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),fBe.forEach(t),ye=i(d),io=n(d,"P",{});var sC=s(io);Bi=r(sC,"Instantiating one of "),Pn=n(sC,"A",{href:!0});var N3r=s(Pn);a4=r(N3r,"AutoConfig"),N3r.forEach(t),$n=r(sC,", "),In=n(sC,"A",{href:!0});var D3r=s(In);n4=r(D3r,"AutoModel"),D3r.forEach(t),xi=r(sC,`, and
`),jn=n(sC,"A",{href:!0});var q3r=s(jn);s4=r(q3r,"AutoTokenizer"),q3r.forEach(t),ki=r(sC," will directly create a class of the relevant architecture. For instance"),sC.forEach(t),wf=i(d),m($a.$$.fragment,d),co=i(d),ge=n(d,"P",{});var mBe=s(ge);O0=r(mBe,"will create a model that is an instance of "),Ri=n(mBe,"A",{href:!0});var G3r=s(Ri);X0=r(G3r,"BertModel"),G3r.forEach(t),z0=r(mBe,"."),mBe.forEach(t),qo=i(d),Ia=n(d,"P",{});var gBe=s(Ia);V0=r(gBe,"There is one class of "),Af=n(gBe,"CODE",{});var O3r=s(Af);W0=r(O3r,"AutoModel"),O3r.forEach(t),Fke=r(gBe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),gBe.forEach(t),fLe=i(d),Si=n(d,"H2",{class:!0});var hBe=s(Si);Lf=n(hBe,"A",{id:!0,class:!0,href:!0});var X3r=s(Lf);qV=n(X3r,"SPAN",{});var z3r=s(qV);m(l4.$$.fragment,z3r),z3r.forEach(t),X3r.forEach(t),Cke=i(hBe),GV=n(hBe,"SPAN",{});var V3r=s(GV);Mke=r(V3r,"Extending the Auto Classes"),V3r.forEach(t),hBe.forEach(t),mLe=i(d),Nn=n(d,"P",{});var HX=s(Nn);Eke=r(HX,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),OV=n(HX,"CODE",{});var W3r=s(OV);yke=r(W3r,"NewModel"),W3r.forEach(t),wke=r(HX,", make sure you have a "),XV=n(HX,"CODE",{});var Q3r=s(XV);Ake=r(Q3r,"NewModelConfig"),Q3r.forEach(t),Lke=r(HX,` then you can add those to the auto
classes like this:`),HX.forEach(t),gLe=i(d),m(i4.$$.fragment,d),hLe=i(d),Q0=n(d,"P",{});var H3r=s(Q0);Bke=r(H3r,"You will then be able to use the auto classes like you would usually do!"),H3r.forEach(t),pLe=i(d),m(Bf.$$.fragment,d),_Le=i(d),Pi=n(d,"H2",{class:!0});var pBe=s(Pi);xf=n(pBe,"A",{id:!0,class:!0,href:!0});var U3r=s(xf);zV=n(U3r,"SPAN",{});var J3r=s(zV);m(d4.$$.fragment,J3r),J3r.forEach(t),U3r.forEach(t),xke=i(pBe),VV=n(pBe,"SPAN",{});var Y3r=s(VV);kke=r(Y3r,"AutoConfig"),Y3r.forEach(t),pBe.forEach(t),uLe=i(d),Go=n(d,"DIV",{class:!0});var Ps=s(Go);m(c4.$$.fragment,Ps),Rke=i(Ps),f4=n(Ps,"P",{});var _Be=s(f4);Ske=r(_Be,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),H0=n(_Be,"A",{href:!0});var K3r=s(H0);Pke=r(K3r,"from_pretrained()"),K3r.forEach(t),$ke=r(_Be," class method."),_Be.forEach(t),Ike=i(Ps),m4=n(Ps,"P",{});var uBe=s(m4);jke=r(uBe,"This class cannot be instantiated directly using "),WV=n(uBe,"CODE",{});var Z3r=s(WV);Nke=r(Z3r,"__init__()"),Z3r.forEach(t),Dke=r(uBe," (throws an error)."),uBe.forEach(t),qke=i(Ps),fo=n(Ps,"DIV",{class:!0});var ia=s(fo);m(g4.$$.fragment,ia),Gke=i(ia),QV=n(ia,"P",{});var eyr=s(QV);Oke=r(eyr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),eyr.forEach(t),Xke=i(ia),$i=n(ia,"P",{});var UX=s($i);zke=r(UX,"The configuration class to instantiate is selected based on the "),HV=n(UX,"CODE",{});var oyr=s(HV);Vke=r(oyr,"model_type"),oyr.forEach(t),Wke=r(UX,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),UV=n(UX,"CODE",{});var ryr=s(UV);Qke=r(ryr,"pretrained_model_name_or_path"),ryr.forEach(t),Hke=r(UX,":"),UX.forEach(t),Uke=i(ia),v=n(ia,"UL",{});var T=s(v);kf=n(T,"LI",{});var N2e=s(kf);JV=n(N2e,"STRONG",{});var tyr=s(JV);Jke=r(tyr,"albert"),tyr.forEach(t),Yke=r(N2e," \u2014 "),U0=n(N2e,"A",{href:!0});var ayr=s(U0);Kke=r(ayr,"AlbertConfig"),ayr.forEach(t),Zke=r(N2e," (ALBERT model)"),N2e.forEach(t),eRe=i(T),Rf=n(T,"LI",{});var D2e=s(Rf);YV=n(D2e,"STRONG",{});var nyr=s(YV);oRe=r(nyr,"bart"),nyr.forEach(t),rRe=r(D2e," \u2014 "),J0=n(D2e,"A",{href:!0});var syr=s(J0);tRe=r(syr,"BartConfig"),syr.forEach(t),aRe=r(D2e," (BART model)"),D2e.forEach(t),nRe=i(T),Sf=n(T,"LI",{});var q2e=s(Sf);KV=n(q2e,"STRONG",{});var lyr=s(KV);sRe=r(lyr,"beit"),lyr.forEach(t),lRe=r(q2e," \u2014 "),Y0=n(q2e,"A",{href:!0});var iyr=s(Y0);iRe=r(iyr,"BeitConfig"),iyr.forEach(t),dRe=r(q2e," (BEiT model)"),q2e.forEach(t),cRe=i(T),Pf=n(T,"LI",{});var G2e=s(Pf);ZV=n(G2e,"STRONG",{});var dyr=s(ZV);fRe=r(dyr,"bert"),dyr.forEach(t),mRe=r(G2e," \u2014 "),K0=n(G2e,"A",{href:!0});var cyr=s(K0);gRe=r(cyr,"BertConfig"),cyr.forEach(t),hRe=r(G2e," (BERT model)"),G2e.forEach(t),pRe=i(T),$f=n(T,"LI",{});var O2e=s($f);eW=n(O2e,"STRONG",{});var fyr=s(eW);_Re=r(fyr,"bert-generation"),fyr.forEach(t),uRe=r(O2e," \u2014 "),Z0=n(O2e,"A",{href:!0});var myr=s(Z0);bRe=r(myr,"BertGenerationConfig"),myr.forEach(t),vRe=r(O2e," (Bert Generation model)"),O2e.forEach(t),TRe=i(T),If=n(T,"LI",{});var X2e=s(If);oW=n(X2e,"STRONG",{});var gyr=s(oW);FRe=r(gyr,"big_bird"),gyr.forEach(t),CRe=r(X2e," \u2014 "),eL=n(X2e,"A",{href:!0});var hyr=s(eL);MRe=r(hyr,"BigBirdConfig"),hyr.forEach(t),ERe=r(X2e," (BigBird model)"),X2e.forEach(t),yRe=i(T),jf=n(T,"LI",{});var z2e=s(jf);rW=n(z2e,"STRONG",{});var pyr=s(rW);wRe=r(pyr,"bigbird_pegasus"),pyr.forEach(t),ARe=r(z2e," \u2014 "),oL=n(z2e,"A",{href:!0});var _yr=s(oL);LRe=r(_yr,"BigBirdPegasusConfig"),_yr.forEach(t),BRe=r(z2e," (BigBirdPegasus model)"),z2e.forEach(t),xRe=i(T),Nf=n(T,"LI",{});var V2e=s(Nf);tW=n(V2e,"STRONG",{});var uyr=s(tW);kRe=r(uyr,"blenderbot"),uyr.forEach(t),RRe=r(V2e," \u2014 "),rL=n(V2e,"A",{href:!0});var byr=s(rL);SRe=r(byr,"BlenderbotConfig"),byr.forEach(t),PRe=r(V2e," (Blenderbot model)"),V2e.forEach(t),$Re=i(T),Df=n(T,"LI",{});var W2e=s(Df);aW=n(W2e,"STRONG",{});var vyr=s(aW);IRe=r(vyr,"blenderbot-small"),vyr.forEach(t),jRe=r(W2e," \u2014 "),tL=n(W2e,"A",{href:!0});var Tyr=s(tL);NRe=r(Tyr,"BlenderbotSmallConfig"),Tyr.forEach(t),DRe=r(W2e," (BlenderbotSmall model)"),W2e.forEach(t),qRe=i(T),qf=n(T,"LI",{});var Q2e=s(qf);nW=n(Q2e,"STRONG",{});var Fyr=s(nW);GRe=r(Fyr,"camembert"),Fyr.forEach(t),ORe=r(Q2e," \u2014 "),aL=n(Q2e,"A",{href:!0});var Cyr=s(aL);XRe=r(Cyr,"CamembertConfig"),Cyr.forEach(t),zRe=r(Q2e," (CamemBERT model)"),Q2e.forEach(t),VRe=i(T),Gf=n(T,"LI",{});var H2e=s(Gf);sW=n(H2e,"STRONG",{});var Myr=s(sW);WRe=r(Myr,"canine"),Myr.forEach(t),QRe=r(H2e," \u2014 "),nL=n(H2e,"A",{href:!0});var Eyr=s(nL);HRe=r(Eyr,"CanineConfig"),Eyr.forEach(t),URe=r(H2e," (Canine model)"),H2e.forEach(t),JRe=i(T),Of=n(T,"LI",{});var U2e=s(Of);lW=n(U2e,"STRONG",{});var yyr=s(lW);YRe=r(yyr,"clip"),yyr.forEach(t),KRe=r(U2e," \u2014 "),sL=n(U2e,"A",{href:!0});var wyr=s(sL);ZRe=r(wyr,"CLIPConfig"),wyr.forEach(t),eSe=r(U2e," (CLIP model)"),U2e.forEach(t),oSe=i(T),Xf=n(T,"LI",{});var J2e=s(Xf);iW=n(J2e,"STRONG",{});var Ayr=s(iW);rSe=r(Ayr,"convbert"),Ayr.forEach(t),tSe=r(J2e," \u2014 "),lL=n(J2e,"A",{href:!0});var Lyr=s(lL);aSe=r(Lyr,"ConvBertConfig"),Lyr.forEach(t),nSe=r(J2e," (ConvBERT model)"),J2e.forEach(t),sSe=i(T),zf=n(T,"LI",{});var Y2e=s(zf);dW=n(Y2e,"STRONG",{});var Byr=s(dW);lSe=r(Byr,"convnext"),Byr.forEach(t),iSe=r(Y2e," \u2014 "),iL=n(Y2e,"A",{href:!0});var xyr=s(iL);dSe=r(xyr,"ConvNextConfig"),xyr.forEach(t),cSe=r(Y2e," (ConvNext model)"),Y2e.forEach(t),fSe=i(T),Vf=n(T,"LI",{});var K2e=s(Vf);cW=n(K2e,"STRONG",{});var kyr=s(cW);mSe=r(kyr,"ctrl"),kyr.forEach(t),gSe=r(K2e," \u2014 "),dL=n(K2e,"A",{href:!0});var Ryr=s(dL);hSe=r(Ryr,"CTRLConfig"),Ryr.forEach(t),pSe=r(K2e," (CTRL model)"),K2e.forEach(t),_Se=i(T),Wf=n(T,"LI",{});var Z2e=s(Wf);fW=n(Z2e,"STRONG",{});var Syr=s(fW);uSe=r(Syr,"deberta"),Syr.forEach(t),bSe=r(Z2e," \u2014 "),cL=n(Z2e,"A",{href:!0});var Pyr=s(cL);vSe=r(Pyr,"DebertaConfig"),Pyr.forEach(t),TSe=r(Z2e," (DeBERTa model)"),Z2e.forEach(t),FSe=i(T),Qf=n(T,"LI",{});var eve=s(Qf);mW=n(eve,"STRONG",{});var $yr=s(mW);CSe=r($yr,"deberta-v2"),$yr.forEach(t),MSe=r(eve," \u2014 "),fL=n(eve,"A",{href:!0});var Iyr=s(fL);ESe=r(Iyr,"DebertaV2Config"),Iyr.forEach(t),ySe=r(eve," (DeBERTa-v2 model)"),eve.forEach(t),wSe=i(T),Hf=n(T,"LI",{});var ove=s(Hf);gW=n(ove,"STRONG",{});var jyr=s(gW);ASe=r(jyr,"deit"),jyr.forEach(t),LSe=r(ove," \u2014 "),mL=n(ove,"A",{href:!0});var Nyr=s(mL);BSe=r(Nyr,"DeiTConfig"),Nyr.forEach(t),xSe=r(ove," (DeiT model)"),ove.forEach(t),kSe=i(T),Uf=n(T,"LI",{});var rve=s(Uf);hW=n(rve,"STRONG",{});var Dyr=s(hW);RSe=r(Dyr,"detr"),Dyr.forEach(t),SSe=r(rve," \u2014 "),gL=n(rve,"A",{href:!0});var qyr=s(gL);PSe=r(qyr,"DetrConfig"),qyr.forEach(t),$Se=r(rve," (DETR model)"),rve.forEach(t),ISe=i(T),Jf=n(T,"LI",{});var tve=s(Jf);pW=n(tve,"STRONG",{});var Gyr=s(pW);jSe=r(Gyr,"distilbert"),Gyr.forEach(t),NSe=r(tve," \u2014 "),hL=n(tve,"A",{href:!0});var Oyr=s(hL);DSe=r(Oyr,"DistilBertConfig"),Oyr.forEach(t),qSe=r(tve," (DistilBERT model)"),tve.forEach(t),GSe=i(T),Yf=n(T,"LI",{});var ave=s(Yf);_W=n(ave,"STRONG",{});var Xyr=s(_W);OSe=r(Xyr,"dpr"),Xyr.forEach(t),XSe=r(ave," \u2014 "),pL=n(ave,"A",{href:!0});var zyr=s(pL);zSe=r(zyr,"DPRConfig"),zyr.forEach(t),VSe=r(ave," (DPR model)"),ave.forEach(t),WSe=i(T),Kf=n(T,"LI",{});var nve=s(Kf);uW=n(nve,"STRONG",{});var Vyr=s(uW);QSe=r(Vyr,"electra"),Vyr.forEach(t),HSe=r(nve," \u2014 "),_L=n(nve,"A",{href:!0});var Wyr=s(_L);USe=r(Wyr,"ElectraConfig"),Wyr.forEach(t),JSe=r(nve," (ELECTRA model)"),nve.forEach(t),YSe=i(T),Zf=n(T,"LI",{});var sve=s(Zf);bW=n(sve,"STRONG",{});var Qyr=s(bW);KSe=r(Qyr,"encoder-decoder"),Qyr.forEach(t),ZSe=r(sve," \u2014 "),uL=n(sve,"A",{href:!0});var Hyr=s(uL);ePe=r(Hyr,"EncoderDecoderConfig"),Hyr.forEach(t),oPe=r(sve," (Encoder decoder model)"),sve.forEach(t),rPe=i(T),em=n(T,"LI",{});var lve=s(em);vW=n(lve,"STRONG",{});var Uyr=s(vW);tPe=r(Uyr,"flaubert"),Uyr.forEach(t),aPe=r(lve," \u2014 "),bL=n(lve,"A",{href:!0});var Jyr=s(bL);nPe=r(Jyr,"FlaubertConfig"),Jyr.forEach(t),sPe=r(lve," (FlauBERT model)"),lve.forEach(t),lPe=i(T),om=n(T,"LI",{});var ive=s(om);TW=n(ive,"STRONG",{});var Yyr=s(TW);iPe=r(Yyr,"fnet"),Yyr.forEach(t),dPe=r(ive," \u2014 "),vL=n(ive,"A",{href:!0});var Kyr=s(vL);cPe=r(Kyr,"FNetConfig"),Kyr.forEach(t),fPe=r(ive," (FNet model)"),ive.forEach(t),mPe=i(T),rm=n(T,"LI",{});var dve=s(rm);FW=n(dve,"STRONG",{});var Zyr=s(FW);gPe=r(Zyr,"fsmt"),Zyr.forEach(t),hPe=r(dve," \u2014 "),TL=n(dve,"A",{href:!0});var ewr=s(TL);pPe=r(ewr,"FSMTConfig"),ewr.forEach(t),_Pe=r(dve," (FairSeq Machine-Translation model)"),dve.forEach(t),uPe=i(T),tm=n(T,"LI",{});var cve=s(tm);CW=n(cve,"STRONG",{});var owr=s(CW);bPe=r(owr,"funnel"),owr.forEach(t),vPe=r(cve," \u2014 "),FL=n(cve,"A",{href:!0});var rwr=s(FL);TPe=r(rwr,"FunnelConfig"),rwr.forEach(t),FPe=r(cve," (Funnel Transformer model)"),cve.forEach(t),CPe=i(T),am=n(T,"LI",{});var fve=s(am);MW=n(fve,"STRONG",{});var twr=s(MW);MPe=r(twr,"gpt2"),twr.forEach(t),EPe=r(fve," \u2014 "),CL=n(fve,"A",{href:!0});var awr=s(CL);yPe=r(awr,"GPT2Config"),awr.forEach(t),wPe=r(fve," (OpenAI GPT-2 model)"),fve.forEach(t),APe=i(T),nm=n(T,"LI",{});var mve=s(nm);EW=n(mve,"STRONG",{});var nwr=s(EW);LPe=r(nwr,"gpt_neo"),nwr.forEach(t),BPe=r(mve," \u2014 "),ML=n(mve,"A",{href:!0});var swr=s(ML);xPe=r(swr,"GPTNeoConfig"),swr.forEach(t),kPe=r(mve," (GPT Neo model)"),mve.forEach(t),RPe=i(T),sm=n(T,"LI",{});var gve=s(sm);yW=n(gve,"STRONG",{});var lwr=s(yW);SPe=r(lwr,"gptj"),lwr.forEach(t),PPe=r(gve," \u2014 "),EL=n(gve,"A",{href:!0});var iwr=s(EL);$Pe=r(iwr,"GPTJConfig"),iwr.forEach(t),IPe=r(gve," (GPT-J model)"),gve.forEach(t),jPe=i(T),lm=n(T,"LI",{});var hve=s(lm);wW=n(hve,"STRONG",{});var dwr=s(wW);NPe=r(dwr,"hubert"),dwr.forEach(t),DPe=r(hve," \u2014 "),yL=n(hve,"A",{href:!0});var cwr=s(yL);qPe=r(cwr,"HubertConfig"),cwr.forEach(t),GPe=r(hve," (Hubert model)"),hve.forEach(t),OPe=i(T),im=n(T,"LI",{});var pve=s(im);AW=n(pve,"STRONG",{});var fwr=s(AW);XPe=r(fwr,"ibert"),fwr.forEach(t),zPe=r(pve," \u2014 "),wL=n(pve,"A",{href:!0});var mwr=s(wL);VPe=r(mwr,"IBertConfig"),mwr.forEach(t),WPe=r(pve," (I-BERT model)"),pve.forEach(t),QPe=i(T),dm=n(T,"LI",{});var _ve=s(dm);LW=n(_ve,"STRONG",{});var gwr=s(LW);HPe=r(gwr,"imagegpt"),gwr.forEach(t),UPe=r(_ve," \u2014 "),AL=n(_ve,"A",{href:!0});var hwr=s(AL);JPe=r(hwr,"ImageGPTConfig"),hwr.forEach(t),YPe=r(_ve," (ImageGPT model)"),_ve.forEach(t),KPe=i(T),cm=n(T,"LI",{});var uve=s(cm);BW=n(uve,"STRONG",{});var pwr=s(BW);ZPe=r(pwr,"layoutlm"),pwr.forEach(t),e$e=r(uve," \u2014 "),LL=n(uve,"A",{href:!0});var _wr=s(LL);o$e=r(_wr,"LayoutLMConfig"),_wr.forEach(t),r$e=r(uve," (LayoutLM model)"),uve.forEach(t),t$e=i(T),fm=n(T,"LI",{});var bve=s(fm);xW=n(bve,"STRONG",{});var uwr=s(xW);a$e=r(uwr,"layoutlmv2"),uwr.forEach(t),n$e=r(bve," \u2014 "),BL=n(bve,"A",{href:!0});var bwr=s(BL);s$e=r(bwr,"LayoutLMv2Config"),bwr.forEach(t),l$e=r(bve," (LayoutLMv2 model)"),bve.forEach(t),i$e=i(T),mm=n(T,"LI",{});var vve=s(mm);kW=n(vve,"STRONG",{});var vwr=s(kW);d$e=r(vwr,"led"),vwr.forEach(t),c$e=r(vve," \u2014 "),xL=n(vve,"A",{href:!0});var Twr=s(xL);f$e=r(Twr,"LEDConfig"),Twr.forEach(t),m$e=r(vve," (LED model)"),vve.forEach(t),g$e=i(T),gm=n(T,"LI",{});var Tve=s(gm);RW=n(Tve,"STRONG",{});var Fwr=s(RW);h$e=r(Fwr,"longformer"),Fwr.forEach(t),p$e=r(Tve," \u2014 "),kL=n(Tve,"A",{href:!0});var Cwr=s(kL);_$e=r(Cwr,"LongformerConfig"),Cwr.forEach(t),u$e=r(Tve," (Longformer model)"),Tve.forEach(t),b$e=i(T),hm=n(T,"LI",{});var Fve=s(hm);SW=n(Fve,"STRONG",{});var Mwr=s(SW);v$e=r(Mwr,"luke"),Mwr.forEach(t),T$e=r(Fve," \u2014 "),RL=n(Fve,"A",{href:!0});var Ewr=s(RL);F$e=r(Ewr,"LukeConfig"),Ewr.forEach(t),C$e=r(Fve," (LUKE model)"),Fve.forEach(t),M$e=i(T),pm=n(T,"LI",{});var Cve=s(pm);PW=n(Cve,"STRONG",{});var ywr=s(PW);E$e=r(ywr,"lxmert"),ywr.forEach(t),y$e=r(Cve," \u2014 "),SL=n(Cve,"A",{href:!0});var wwr=s(SL);w$e=r(wwr,"LxmertConfig"),wwr.forEach(t),A$e=r(Cve," (LXMERT model)"),Cve.forEach(t),L$e=i(T),_m=n(T,"LI",{});var Mve=s(_m);$W=n(Mve,"STRONG",{});var Awr=s($W);B$e=r(Awr,"m2m_100"),Awr.forEach(t),x$e=r(Mve," \u2014 "),PL=n(Mve,"A",{href:!0});var Lwr=s(PL);k$e=r(Lwr,"M2M100Config"),Lwr.forEach(t),R$e=r(Mve," (M2M100 model)"),Mve.forEach(t),S$e=i(T),um=n(T,"LI",{});var Eve=s(um);IW=n(Eve,"STRONG",{});var Bwr=s(IW);P$e=r(Bwr,"marian"),Bwr.forEach(t),$$e=r(Eve," \u2014 "),$L=n(Eve,"A",{href:!0});var xwr=s($L);I$e=r(xwr,"MarianConfig"),xwr.forEach(t),j$e=r(Eve," (Marian model)"),Eve.forEach(t),N$e=i(T),bm=n(T,"LI",{});var yve=s(bm);jW=n(yve,"STRONG",{});var kwr=s(jW);D$e=r(kwr,"mbart"),kwr.forEach(t),q$e=r(yve," \u2014 "),IL=n(yve,"A",{href:!0});var Rwr=s(IL);G$e=r(Rwr,"MBartConfig"),Rwr.forEach(t),O$e=r(yve," (mBART model)"),yve.forEach(t),X$e=i(T),vm=n(T,"LI",{});var wve=s(vm);NW=n(wve,"STRONG",{});var Swr=s(NW);z$e=r(Swr,"megatron-bert"),Swr.forEach(t),V$e=r(wve," \u2014 "),jL=n(wve,"A",{href:!0});var Pwr=s(jL);W$e=r(Pwr,"MegatronBertConfig"),Pwr.forEach(t),Q$e=r(wve," (MegatronBert model)"),wve.forEach(t),H$e=i(T),Tm=n(T,"LI",{});var Ave=s(Tm);DW=n(Ave,"STRONG",{});var $wr=s(DW);U$e=r($wr,"mobilebert"),$wr.forEach(t),J$e=r(Ave," \u2014 "),NL=n(Ave,"A",{href:!0});var Iwr=s(NL);Y$e=r(Iwr,"MobileBertConfig"),Iwr.forEach(t),K$e=r(Ave," (MobileBERT model)"),Ave.forEach(t),Z$e=i(T),Fm=n(T,"LI",{});var Lve=s(Fm);qW=n(Lve,"STRONG",{});var jwr=s(qW);eIe=r(jwr,"mpnet"),jwr.forEach(t),oIe=r(Lve," \u2014 "),DL=n(Lve,"A",{href:!0});var Nwr=s(DL);rIe=r(Nwr,"MPNetConfig"),Nwr.forEach(t),tIe=r(Lve," (MPNet model)"),Lve.forEach(t),aIe=i(T),Cm=n(T,"LI",{});var Bve=s(Cm);GW=n(Bve,"STRONG",{});var Dwr=s(GW);nIe=r(Dwr,"mt5"),Dwr.forEach(t),sIe=r(Bve," \u2014 "),qL=n(Bve,"A",{href:!0});var qwr=s(qL);lIe=r(qwr,"MT5Config"),qwr.forEach(t),iIe=r(Bve," (mT5 model)"),Bve.forEach(t),dIe=i(T),Mm=n(T,"LI",{});var xve=s(Mm);OW=n(xve,"STRONG",{});var Gwr=s(OW);cIe=r(Gwr,"nystromformer"),Gwr.forEach(t),fIe=r(xve," \u2014 "),GL=n(xve,"A",{href:!0});var Owr=s(GL);mIe=r(Owr,"NystromformerConfig"),Owr.forEach(t),gIe=r(xve," (Nystromformer model)"),xve.forEach(t),hIe=i(T),Em=n(T,"LI",{});var kve=s(Em);XW=n(kve,"STRONG",{});var Xwr=s(XW);pIe=r(Xwr,"openai-gpt"),Xwr.forEach(t),_Ie=r(kve," \u2014 "),OL=n(kve,"A",{href:!0});var zwr=s(OL);uIe=r(zwr,"OpenAIGPTConfig"),zwr.forEach(t),bIe=r(kve," (OpenAI GPT model)"),kve.forEach(t),vIe=i(T),ym=n(T,"LI",{});var Rve=s(ym);zW=n(Rve,"STRONG",{});var Vwr=s(zW);TIe=r(Vwr,"pegasus"),Vwr.forEach(t),FIe=r(Rve," \u2014 "),XL=n(Rve,"A",{href:!0});var Wwr=s(XL);CIe=r(Wwr,"PegasusConfig"),Wwr.forEach(t),MIe=r(Rve," (Pegasus model)"),Rve.forEach(t),EIe=i(T),wm=n(T,"LI",{});var Sve=s(wm);VW=n(Sve,"STRONG",{});var Qwr=s(VW);yIe=r(Qwr,"perceiver"),Qwr.forEach(t),wIe=r(Sve," \u2014 "),zL=n(Sve,"A",{href:!0});var Hwr=s(zL);AIe=r(Hwr,"PerceiverConfig"),Hwr.forEach(t),LIe=r(Sve," (Perceiver model)"),Sve.forEach(t),BIe=i(T),Am=n(T,"LI",{});var Pve=s(Am);WW=n(Pve,"STRONG",{});var Uwr=s(WW);xIe=r(Uwr,"plbart"),Uwr.forEach(t),kIe=r(Pve," \u2014 "),VL=n(Pve,"A",{href:!0});var Jwr=s(VL);RIe=r(Jwr,"PLBartConfig"),Jwr.forEach(t),SIe=r(Pve," (PLBart model)"),Pve.forEach(t),PIe=i(T),Lm=n(T,"LI",{});var $ve=s(Lm);QW=n($ve,"STRONG",{});var Ywr=s(QW);$Ie=r(Ywr,"poolformer"),Ywr.forEach(t),IIe=r($ve," \u2014 "),WL=n($ve,"A",{href:!0});var Kwr=s(WL);jIe=r(Kwr,"PoolFormerConfig"),Kwr.forEach(t),NIe=r($ve," (PoolFormer model)"),$ve.forEach(t),DIe=i(T),Bm=n(T,"LI",{});var Ive=s(Bm);HW=n(Ive,"STRONG",{});var Zwr=s(HW);qIe=r(Zwr,"prophetnet"),Zwr.forEach(t),GIe=r(Ive," \u2014 "),QL=n(Ive,"A",{href:!0});var eAr=s(QL);OIe=r(eAr,"ProphetNetConfig"),eAr.forEach(t),XIe=r(Ive," (ProphetNet model)"),Ive.forEach(t),zIe=i(T),xm=n(T,"LI",{});var jve=s(xm);UW=n(jve,"STRONG",{});var oAr=s(UW);VIe=r(oAr,"qdqbert"),oAr.forEach(t),WIe=r(jve," \u2014 "),HL=n(jve,"A",{href:!0});var rAr=s(HL);QIe=r(rAr,"QDQBertConfig"),rAr.forEach(t),HIe=r(jve," (QDQBert model)"),jve.forEach(t),UIe=i(T),km=n(T,"LI",{});var Nve=s(km);JW=n(Nve,"STRONG",{});var tAr=s(JW);JIe=r(tAr,"rag"),tAr.forEach(t),YIe=r(Nve," \u2014 "),UL=n(Nve,"A",{href:!0});var aAr=s(UL);KIe=r(aAr,"RagConfig"),aAr.forEach(t),ZIe=r(Nve," (RAG model)"),Nve.forEach(t),eje=i(T),Rm=n(T,"LI",{});var Dve=s(Rm);YW=n(Dve,"STRONG",{});var nAr=s(YW);oje=r(nAr,"realm"),nAr.forEach(t),rje=r(Dve," \u2014 "),JL=n(Dve,"A",{href:!0});var sAr=s(JL);tje=r(sAr,"RealmConfig"),sAr.forEach(t),aje=r(Dve," (Realm model)"),Dve.forEach(t),nje=i(T),Sm=n(T,"LI",{});var qve=s(Sm);KW=n(qve,"STRONG",{});var lAr=s(KW);sje=r(lAr,"reformer"),lAr.forEach(t),lje=r(qve," \u2014 "),YL=n(qve,"A",{href:!0});var iAr=s(YL);ije=r(iAr,"ReformerConfig"),iAr.forEach(t),dje=r(qve," (Reformer model)"),qve.forEach(t),cje=i(T),Pm=n(T,"LI",{});var Gve=s(Pm);ZW=n(Gve,"STRONG",{});var dAr=s(ZW);fje=r(dAr,"rembert"),dAr.forEach(t),mje=r(Gve," \u2014 "),KL=n(Gve,"A",{href:!0});var cAr=s(KL);gje=r(cAr,"RemBertConfig"),cAr.forEach(t),hje=r(Gve," (RemBERT model)"),Gve.forEach(t),pje=i(T),$m=n(T,"LI",{});var Ove=s($m);eQ=n(Ove,"STRONG",{});var fAr=s(eQ);_je=r(fAr,"retribert"),fAr.forEach(t),uje=r(Ove," \u2014 "),ZL=n(Ove,"A",{href:!0});var mAr=s(ZL);bje=r(mAr,"RetriBertConfig"),mAr.forEach(t),vje=r(Ove," (RetriBERT model)"),Ove.forEach(t),Tje=i(T),Im=n(T,"LI",{});var Xve=s(Im);oQ=n(Xve,"STRONG",{});var gAr=s(oQ);Fje=r(gAr,"roberta"),gAr.forEach(t),Cje=r(Xve," \u2014 "),e9=n(Xve,"A",{href:!0});var hAr=s(e9);Mje=r(hAr,"RobertaConfig"),hAr.forEach(t),Eje=r(Xve," (RoBERTa model)"),Xve.forEach(t),yje=i(T),jm=n(T,"LI",{});var zve=s(jm);rQ=n(zve,"STRONG",{});var pAr=s(rQ);wje=r(pAr,"roformer"),pAr.forEach(t),Aje=r(zve," \u2014 "),o9=n(zve,"A",{href:!0});var _Ar=s(o9);Lje=r(_Ar,"RoFormerConfig"),_Ar.forEach(t),Bje=r(zve," (RoFormer model)"),zve.forEach(t),xje=i(T),Nm=n(T,"LI",{});var Vve=s(Nm);tQ=n(Vve,"STRONG",{});var uAr=s(tQ);kje=r(uAr,"segformer"),uAr.forEach(t),Rje=r(Vve," \u2014 "),r9=n(Vve,"A",{href:!0});var bAr=s(r9);Sje=r(bAr,"SegformerConfig"),bAr.forEach(t),Pje=r(Vve," (SegFormer model)"),Vve.forEach(t),$je=i(T),Dm=n(T,"LI",{});var Wve=s(Dm);aQ=n(Wve,"STRONG",{});var vAr=s(aQ);Ije=r(vAr,"sew"),vAr.forEach(t),jje=r(Wve," \u2014 "),t9=n(Wve,"A",{href:!0});var TAr=s(t9);Nje=r(TAr,"SEWConfig"),TAr.forEach(t),Dje=r(Wve," (SEW model)"),Wve.forEach(t),qje=i(T),qm=n(T,"LI",{});var Qve=s(qm);nQ=n(Qve,"STRONG",{});var FAr=s(nQ);Gje=r(FAr,"sew-d"),FAr.forEach(t),Oje=r(Qve," \u2014 "),a9=n(Qve,"A",{href:!0});var CAr=s(a9);Xje=r(CAr,"SEWDConfig"),CAr.forEach(t),zje=r(Qve," (SEW-D model)"),Qve.forEach(t),Vje=i(T),Gm=n(T,"LI",{});var Hve=s(Gm);sQ=n(Hve,"STRONG",{});var MAr=s(sQ);Wje=r(MAr,"speech-encoder-decoder"),MAr.forEach(t),Qje=r(Hve," \u2014 "),n9=n(Hve,"A",{href:!0});var EAr=s(n9);Hje=r(EAr,"SpeechEncoderDecoderConfig"),EAr.forEach(t),Uje=r(Hve," (Speech Encoder decoder model)"),Hve.forEach(t),Jje=i(T),Om=n(T,"LI",{});var Uve=s(Om);lQ=n(Uve,"STRONG",{});var yAr=s(lQ);Yje=r(yAr,"speech_to_text"),yAr.forEach(t),Kje=r(Uve," \u2014 "),s9=n(Uve,"A",{href:!0});var wAr=s(s9);Zje=r(wAr,"Speech2TextConfig"),wAr.forEach(t),eNe=r(Uve," (Speech2Text model)"),Uve.forEach(t),oNe=i(T),Xm=n(T,"LI",{});var Jve=s(Xm);iQ=n(Jve,"STRONG",{});var AAr=s(iQ);rNe=r(AAr,"speech_to_text_2"),AAr.forEach(t),tNe=r(Jve," \u2014 "),l9=n(Jve,"A",{href:!0});var LAr=s(l9);aNe=r(LAr,"Speech2Text2Config"),LAr.forEach(t),nNe=r(Jve," (Speech2Text2 model)"),Jve.forEach(t),sNe=i(T),zm=n(T,"LI",{});var Yve=s(zm);dQ=n(Yve,"STRONG",{});var BAr=s(dQ);lNe=r(BAr,"splinter"),BAr.forEach(t),iNe=r(Yve," \u2014 "),i9=n(Yve,"A",{href:!0});var xAr=s(i9);dNe=r(xAr,"SplinterConfig"),xAr.forEach(t),cNe=r(Yve," (Splinter model)"),Yve.forEach(t),fNe=i(T),Vm=n(T,"LI",{});var Kve=s(Vm);cQ=n(Kve,"STRONG",{});var kAr=s(cQ);mNe=r(kAr,"squeezebert"),kAr.forEach(t),gNe=r(Kve," \u2014 "),d9=n(Kve,"A",{href:!0});var RAr=s(d9);hNe=r(RAr,"SqueezeBertConfig"),RAr.forEach(t),pNe=r(Kve," (SqueezeBERT model)"),Kve.forEach(t),_Ne=i(T),Wm=n(T,"LI",{});var Zve=s(Wm);fQ=n(Zve,"STRONG",{});var SAr=s(fQ);uNe=r(SAr,"swin"),SAr.forEach(t),bNe=r(Zve," \u2014 "),c9=n(Zve,"A",{href:!0});var PAr=s(c9);vNe=r(PAr,"SwinConfig"),PAr.forEach(t),TNe=r(Zve," (Swin model)"),Zve.forEach(t),FNe=i(T),Qm=n(T,"LI",{});var e6e=s(Qm);mQ=n(e6e,"STRONG",{});var $Ar=s(mQ);CNe=r($Ar,"t5"),$Ar.forEach(t),MNe=r(e6e," \u2014 "),f9=n(e6e,"A",{href:!0});var IAr=s(f9);ENe=r(IAr,"T5Config"),IAr.forEach(t),yNe=r(e6e," (T5 model)"),e6e.forEach(t),wNe=i(T),Hm=n(T,"LI",{});var o6e=s(Hm);gQ=n(o6e,"STRONG",{});var jAr=s(gQ);ANe=r(jAr,"tapas"),jAr.forEach(t),LNe=r(o6e," \u2014 "),m9=n(o6e,"A",{href:!0});var NAr=s(m9);BNe=r(NAr,"TapasConfig"),NAr.forEach(t),xNe=r(o6e," (TAPAS model)"),o6e.forEach(t),kNe=i(T),Um=n(T,"LI",{});var r6e=s(Um);hQ=n(r6e,"STRONG",{});var DAr=s(hQ);RNe=r(DAr,"transfo-xl"),DAr.forEach(t),SNe=r(r6e," \u2014 "),g9=n(r6e,"A",{href:!0});var qAr=s(g9);PNe=r(qAr,"TransfoXLConfig"),qAr.forEach(t),$Ne=r(r6e," (Transformer-XL model)"),r6e.forEach(t),INe=i(T),Jm=n(T,"LI",{});var t6e=s(Jm);pQ=n(t6e,"STRONG",{});var GAr=s(pQ);jNe=r(GAr,"trocr"),GAr.forEach(t),NNe=r(t6e," \u2014 "),h9=n(t6e,"A",{href:!0});var OAr=s(h9);DNe=r(OAr,"TrOCRConfig"),OAr.forEach(t),qNe=r(t6e," (TrOCR model)"),t6e.forEach(t),GNe=i(T),Ym=n(T,"LI",{});var a6e=s(Ym);_Q=n(a6e,"STRONG",{});var XAr=s(_Q);ONe=r(XAr,"unispeech"),XAr.forEach(t),XNe=r(a6e," \u2014 "),p9=n(a6e,"A",{href:!0});var zAr=s(p9);zNe=r(zAr,"UniSpeechConfig"),zAr.forEach(t),VNe=r(a6e," (UniSpeech model)"),a6e.forEach(t),WNe=i(T),Km=n(T,"LI",{});var n6e=s(Km);uQ=n(n6e,"STRONG",{});var VAr=s(uQ);QNe=r(VAr,"unispeech-sat"),VAr.forEach(t),HNe=r(n6e," \u2014 "),_9=n(n6e,"A",{href:!0});var WAr=s(_9);UNe=r(WAr,"UniSpeechSatConfig"),WAr.forEach(t),JNe=r(n6e," (UniSpeechSat model)"),n6e.forEach(t),YNe=i(T),Zm=n(T,"LI",{});var s6e=s(Zm);bQ=n(s6e,"STRONG",{});var QAr=s(bQ);KNe=r(QAr,"vilt"),QAr.forEach(t),ZNe=r(s6e," \u2014 "),u9=n(s6e,"A",{href:!0});var HAr=s(u9);eDe=r(HAr,"ViltConfig"),HAr.forEach(t),oDe=r(s6e," (ViLT model)"),s6e.forEach(t),rDe=i(T),eg=n(T,"LI",{});var l6e=s(eg);vQ=n(l6e,"STRONG",{});var UAr=s(vQ);tDe=r(UAr,"vision-encoder-decoder"),UAr.forEach(t),aDe=r(l6e," \u2014 "),b9=n(l6e,"A",{href:!0});var JAr=s(b9);nDe=r(JAr,"VisionEncoderDecoderConfig"),JAr.forEach(t),sDe=r(l6e," (Vision Encoder decoder model)"),l6e.forEach(t),lDe=i(T),og=n(T,"LI",{});var i6e=s(og);TQ=n(i6e,"STRONG",{});var YAr=s(TQ);iDe=r(YAr,"vision-text-dual-encoder"),YAr.forEach(t),dDe=r(i6e," \u2014 "),v9=n(i6e,"A",{href:!0});var KAr=s(v9);cDe=r(KAr,"VisionTextDualEncoderConfig"),KAr.forEach(t),fDe=r(i6e," (VisionTextDualEncoder model)"),i6e.forEach(t),mDe=i(T),rg=n(T,"LI",{});var d6e=s(rg);FQ=n(d6e,"STRONG",{});var ZAr=s(FQ);gDe=r(ZAr,"visual_bert"),ZAr.forEach(t),hDe=r(d6e," \u2014 "),T9=n(d6e,"A",{href:!0});var e0r=s(T9);pDe=r(e0r,"VisualBertConfig"),e0r.forEach(t),_De=r(d6e," (VisualBert model)"),d6e.forEach(t),uDe=i(T),tg=n(T,"LI",{});var c6e=s(tg);CQ=n(c6e,"STRONG",{});var o0r=s(CQ);bDe=r(o0r,"vit"),o0r.forEach(t),vDe=r(c6e," \u2014 "),F9=n(c6e,"A",{href:!0});var r0r=s(F9);TDe=r(r0r,"ViTConfig"),r0r.forEach(t),FDe=r(c6e," (ViT model)"),c6e.forEach(t),CDe=i(T),ag=n(T,"LI",{});var f6e=s(ag);MQ=n(f6e,"STRONG",{});var t0r=s(MQ);MDe=r(t0r,"vit_mae"),t0r.forEach(t),EDe=r(f6e," \u2014 "),C9=n(f6e,"A",{href:!0});var a0r=s(C9);yDe=r(a0r,"ViTMAEConfig"),a0r.forEach(t),wDe=r(f6e," (ViTMAE model)"),f6e.forEach(t),ADe=i(T),ng=n(T,"LI",{});var m6e=s(ng);EQ=n(m6e,"STRONG",{});var n0r=s(EQ);LDe=r(n0r,"wav2vec2"),n0r.forEach(t),BDe=r(m6e," \u2014 "),M9=n(m6e,"A",{href:!0});var s0r=s(M9);xDe=r(s0r,"Wav2Vec2Config"),s0r.forEach(t),kDe=r(m6e," (Wav2Vec2 model)"),m6e.forEach(t),RDe=i(T),sg=n(T,"LI",{});var g6e=s(sg);yQ=n(g6e,"STRONG",{});var l0r=s(yQ);SDe=r(l0r,"wavlm"),l0r.forEach(t),PDe=r(g6e," \u2014 "),E9=n(g6e,"A",{href:!0});var i0r=s(E9);$De=r(i0r,"WavLMConfig"),i0r.forEach(t),IDe=r(g6e," (WavLM model)"),g6e.forEach(t),jDe=i(T),lg=n(T,"LI",{});var h6e=s(lg);wQ=n(h6e,"STRONG",{});var d0r=s(wQ);NDe=r(d0r,"xglm"),d0r.forEach(t),DDe=r(h6e," \u2014 "),y9=n(h6e,"A",{href:!0});var c0r=s(y9);qDe=r(c0r,"XGLMConfig"),c0r.forEach(t),GDe=r(h6e," (XGLM model)"),h6e.forEach(t),ODe=i(T),ig=n(T,"LI",{});var p6e=s(ig);AQ=n(p6e,"STRONG",{});var f0r=s(AQ);XDe=r(f0r,"xlm"),f0r.forEach(t),zDe=r(p6e," \u2014 "),w9=n(p6e,"A",{href:!0});var m0r=s(w9);VDe=r(m0r,"XLMConfig"),m0r.forEach(t),WDe=r(p6e," (XLM model)"),p6e.forEach(t),QDe=i(T),dg=n(T,"LI",{});var _6e=s(dg);LQ=n(_6e,"STRONG",{});var g0r=s(LQ);HDe=r(g0r,"xlm-prophetnet"),g0r.forEach(t),UDe=r(_6e," \u2014 "),A9=n(_6e,"A",{href:!0});var h0r=s(A9);JDe=r(h0r,"XLMProphetNetConfig"),h0r.forEach(t),YDe=r(_6e," (XLMProphetNet model)"),_6e.forEach(t),KDe=i(T),cg=n(T,"LI",{});var u6e=s(cg);BQ=n(u6e,"STRONG",{});var p0r=s(BQ);ZDe=r(p0r,"xlm-roberta"),p0r.forEach(t),eqe=r(u6e," \u2014 "),L9=n(u6e,"A",{href:!0});var _0r=s(L9);oqe=r(_0r,"XLMRobertaConfig"),_0r.forEach(t),rqe=r(u6e," (XLM-RoBERTa model)"),u6e.forEach(t),tqe=i(T),fg=n(T,"LI",{});var b6e=s(fg);xQ=n(b6e,"STRONG",{});var u0r=s(xQ);aqe=r(u0r,"xlm-roberta-xl"),u0r.forEach(t),nqe=r(b6e," \u2014 "),B9=n(b6e,"A",{href:!0});var b0r=s(B9);sqe=r(b0r,"XLMRobertaXLConfig"),b0r.forEach(t),lqe=r(b6e," (XLM-RoBERTa-XL model)"),b6e.forEach(t),iqe=i(T),mg=n(T,"LI",{});var v6e=s(mg);kQ=n(v6e,"STRONG",{});var v0r=s(kQ);dqe=r(v0r,"xlnet"),v0r.forEach(t),cqe=r(v6e," \u2014 "),x9=n(v6e,"A",{href:!0});var T0r=s(x9);fqe=r(T0r,"XLNetConfig"),T0r.forEach(t),mqe=r(v6e," (XLNet model)"),v6e.forEach(t),gqe=i(T),gg=n(T,"LI",{});var T6e=s(gg);RQ=n(T6e,"STRONG",{});var F0r=s(RQ);hqe=r(F0r,"yoso"),F0r.forEach(t),pqe=r(T6e," \u2014 "),k9=n(T6e,"A",{href:!0});var C0r=s(k9);_qe=r(C0r,"YosoConfig"),C0r.forEach(t),uqe=r(T6e," (YOSO model)"),T6e.forEach(t),T.forEach(t),bqe=i(ia),SQ=n(ia,"P",{});var M0r=s(SQ);vqe=r(M0r,"Examples:"),M0r.forEach(t),Tqe=i(ia),m(h4.$$.fragment,ia),ia.forEach(t),Fqe=i(Ps),hg=n(Ps,"DIV",{class:!0});var bBe=s(hg);m(p4.$$.fragment,bBe),Cqe=i(bBe),PQ=n(bBe,"P",{});var E0r=s(PQ);Mqe=r(E0r,"Register a new configuration for this class."),E0r.forEach(t),bBe.forEach(t),Ps.forEach(t),bLe=i(d),Ii=n(d,"H2",{class:!0});var vBe=s(Ii);pg=n(vBe,"A",{id:!0,class:!0,href:!0});var y0r=s(pg);$Q=n(y0r,"SPAN",{});var w0r=s($Q);m(_4.$$.fragment,w0r),w0r.forEach(t),y0r.forEach(t),Eqe=i(vBe),IQ=n(vBe,"SPAN",{});var A0r=s(IQ);yqe=r(A0r,"AutoTokenizer"),A0r.forEach(t),vBe.forEach(t),vLe=i(d),Oo=n(d,"DIV",{class:!0});var $s=s(Oo);m(u4.$$.fragment,$s),wqe=i($s),b4=n($s,"P",{});var TBe=s(b4);Aqe=r(TBe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),R9=n(TBe,"A",{href:!0});var L0r=s(R9);Lqe=r(L0r,"AutoTokenizer.from_pretrained()"),L0r.forEach(t),Bqe=r(TBe," class method."),TBe.forEach(t),xqe=i($s),v4=n($s,"P",{});var FBe=s(v4);kqe=r(FBe,"This class cannot be instantiated directly using "),jQ=n(FBe,"CODE",{});var B0r=s(jQ);Rqe=r(B0r,"__init__()"),B0r.forEach(t),Sqe=r(FBe," (throws an error)."),FBe.forEach(t),Pqe=i($s),mo=n($s,"DIV",{class:!0});var da=s(mo);m(T4.$$.fragment,da),$qe=i(da),NQ=n(da,"P",{});var x0r=s(NQ);Iqe=r(x0r,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),x0r.forEach(t),jqe=i(da),ja=n(da,"P",{});var lC=s(ja);Nqe=r(lC,"The tokenizer class to instantiate is selected based on the "),DQ=n(lC,"CODE",{});var k0r=s(DQ);Dqe=r(k0r,"model_type"),k0r.forEach(t),qqe=r(lC,` property of the config object (either
passed as an argument or loaded from `),qQ=n(lC,"CODE",{});var R0r=s(qQ);Gqe=r(R0r,"pretrained_model_name_or_path"),R0r.forEach(t),Oqe=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GQ=n(lC,"CODE",{});var S0r=s(GQ);Xqe=r(S0r,"pretrained_model_name_or_path"),S0r.forEach(t),zqe=r(lC,":"),lC.forEach(t),Vqe=i(da),M=n(da,"UL",{});var y=s(M);Dn=n(y,"LI",{});var QA=s(Dn);OQ=n(QA,"STRONG",{});var P0r=s(OQ);Wqe=r(P0r,"albert"),P0r.forEach(t),Qqe=r(QA," \u2014 "),S9=n(QA,"A",{href:!0});var $0r=s(S9);Hqe=r($0r,"AlbertTokenizer"),$0r.forEach(t),Uqe=r(QA," or "),P9=n(QA,"A",{href:!0});var I0r=s(P9);Jqe=r(I0r,"AlbertTokenizerFast"),I0r.forEach(t),Yqe=r(QA," (ALBERT model)"),QA.forEach(t),Kqe=i(y),qn=n(y,"LI",{});var HA=s(qn);XQ=n(HA,"STRONG",{});var j0r=s(XQ);Zqe=r(j0r,"bart"),j0r.forEach(t),eGe=r(HA," \u2014 "),$9=n(HA,"A",{href:!0});var N0r=s($9);oGe=r(N0r,"BartTokenizer"),N0r.forEach(t),rGe=r(HA," or "),I9=n(HA,"A",{href:!0});var D0r=s(I9);tGe=r(D0r,"BartTokenizerFast"),D0r.forEach(t),aGe=r(HA," (BART model)"),HA.forEach(t),nGe=i(y),Gn=n(y,"LI",{});var UA=s(Gn);zQ=n(UA,"STRONG",{});var q0r=s(zQ);sGe=r(q0r,"barthez"),q0r.forEach(t),lGe=r(UA," \u2014 "),j9=n(UA,"A",{href:!0});var G0r=s(j9);iGe=r(G0r,"BarthezTokenizer"),G0r.forEach(t),dGe=r(UA," or "),N9=n(UA,"A",{href:!0});var O0r=s(N9);cGe=r(O0r,"BarthezTokenizerFast"),O0r.forEach(t),fGe=r(UA," (BARThez model)"),UA.forEach(t),mGe=i(y),_g=n(y,"LI",{});var F6e=s(_g);VQ=n(F6e,"STRONG",{});var X0r=s(VQ);gGe=r(X0r,"bartpho"),X0r.forEach(t),hGe=r(F6e," \u2014 "),D9=n(F6e,"A",{href:!0});var z0r=s(D9);pGe=r(z0r,"BartphoTokenizer"),z0r.forEach(t),_Ge=r(F6e," (BARTpho model)"),F6e.forEach(t),uGe=i(y),On=n(y,"LI",{});var JA=s(On);WQ=n(JA,"STRONG",{});var V0r=s(WQ);bGe=r(V0r,"bert"),V0r.forEach(t),vGe=r(JA," \u2014 "),q9=n(JA,"A",{href:!0});var W0r=s(q9);TGe=r(W0r,"BertTokenizer"),W0r.forEach(t),FGe=r(JA," or "),G9=n(JA,"A",{href:!0});var Q0r=s(G9);CGe=r(Q0r,"BertTokenizerFast"),Q0r.forEach(t),MGe=r(JA," (BERT model)"),JA.forEach(t),EGe=i(y),ug=n(y,"LI",{});var C6e=s(ug);QQ=n(C6e,"STRONG",{});var H0r=s(QQ);yGe=r(H0r,"bert-generation"),H0r.forEach(t),wGe=r(C6e," \u2014 "),O9=n(C6e,"A",{href:!0});var U0r=s(O9);AGe=r(U0r,"BertGenerationTokenizer"),U0r.forEach(t),LGe=r(C6e," (Bert Generation model)"),C6e.forEach(t),BGe=i(y),bg=n(y,"LI",{});var M6e=s(bg);HQ=n(M6e,"STRONG",{});var J0r=s(HQ);xGe=r(J0r,"bert-japanese"),J0r.forEach(t),kGe=r(M6e," \u2014 "),X9=n(M6e,"A",{href:!0});var Y0r=s(X9);RGe=r(Y0r,"BertJapaneseTokenizer"),Y0r.forEach(t),SGe=r(M6e," (BertJapanese model)"),M6e.forEach(t),PGe=i(y),vg=n(y,"LI",{});var E6e=s(vg);UQ=n(E6e,"STRONG",{});var K0r=s(UQ);$Ge=r(K0r,"bertweet"),K0r.forEach(t),IGe=r(E6e," \u2014 "),z9=n(E6e,"A",{href:!0});var Z0r=s(z9);jGe=r(Z0r,"BertweetTokenizer"),Z0r.forEach(t),NGe=r(E6e," (Bertweet model)"),E6e.forEach(t),DGe=i(y),Xn=n(y,"LI",{});var YA=s(Xn);JQ=n(YA,"STRONG",{});var eLr=s(JQ);qGe=r(eLr,"big_bird"),eLr.forEach(t),GGe=r(YA," \u2014 "),V9=n(YA,"A",{href:!0});var oLr=s(V9);OGe=r(oLr,"BigBirdTokenizer"),oLr.forEach(t),XGe=r(YA," or "),W9=n(YA,"A",{href:!0});var rLr=s(W9);zGe=r(rLr,"BigBirdTokenizerFast"),rLr.forEach(t),VGe=r(YA," (BigBird model)"),YA.forEach(t),WGe=i(y),zn=n(y,"LI",{});var KA=s(zn);YQ=n(KA,"STRONG",{});var tLr=s(YQ);QGe=r(tLr,"bigbird_pegasus"),tLr.forEach(t),HGe=r(KA," \u2014 "),Q9=n(KA,"A",{href:!0});var aLr=s(Q9);UGe=r(aLr,"PegasusTokenizer"),aLr.forEach(t),JGe=r(KA," or "),H9=n(KA,"A",{href:!0});var nLr=s(H9);YGe=r(nLr,"PegasusTokenizerFast"),nLr.forEach(t),KGe=r(KA," (BigBirdPegasus model)"),KA.forEach(t),ZGe=i(y),Vn=n(y,"LI",{});var ZA=s(Vn);KQ=n(ZA,"STRONG",{});var sLr=s(KQ);eOe=r(sLr,"blenderbot"),sLr.forEach(t),oOe=r(ZA," \u2014 "),U9=n(ZA,"A",{href:!0});var lLr=s(U9);rOe=r(lLr,"BlenderbotTokenizer"),lLr.forEach(t),tOe=r(ZA," or "),J9=n(ZA,"A",{href:!0});var iLr=s(J9);aOe=r(iLr,"BlenderbotTokenizerFast"),iLr.forEach(t),nOe=r(ZA," (Blenderbot model)"),ZA.forEach(t),sOe=i(y),Tg=n(y,"LI",{});var y6e=s(Tg);ZQ=n(y6e,"STRONG",{});var dLr=s(ZQ);lOe=r(dLr,"blenderbot-small"),dLr.forEach(t),iOe=r(y6e," \u2014 "),Y9=n(y6e,"A",{href:!0});var cLr=s(Y9);dOe=r(cLr,"BlenderbotSmallTokenizer"),cLr.forEach(t),cOe=r(y6e," (BlenderbotSmall model)"),y6e.forEach(t),fOe=i(y),Fg=n(y,"LI",{});var w6e=s(Fg);eH=n(w6e,"STRONG",{});var fLr=s(eH);mOe=r(fLr,"byt5"),fLr.forEach(t),gOe=r(w6e," \u2014 "),K9=n(w6e,"A",{href:!0});var mLr=s(K9);hOe=r(mLr,"ByT5Tokenizer"),mLr.forEach(t),pOe=r(w6e," (ByT5 model)"),w6e.forEach(t),_Oe=i(y),Wn=n(y,"LI",{});var e0=s(Wn);oH=n(e0,"STRONG",{});var gLr=s(oH);uOe=r(gLr,"camembert"),gLr.forEach(t),bOe=r(e0," \u2014 "),Z9=n(e0,"A",{href:!0});var hLr=s(Z9);vOe=r(hLr,"CamembertTokenizer"),hLr.forEach(t),TOe=r(e0," or "),eB=n(e0,"A",{href:!0});var pLr=s(eB);FOe=r(pLr,"CamembertTokenizerFast"),pLr.forEach(t),COe=r(e0," (CamemBERT model)"),e0.forEach(t),MOe=i(y),Cg=n(y,"LI",{});var A6e=s(Cg);rH=n(A6e,"STRONG",{});var _Lr=s(rH);EOe=r(_Lr,"canine"),_Lr.forEach(t),yOe=r(A6e," \u2014 "),oB=n(A6e,"A",{href:!0});var uLr=s(oB);wOe=r(uLr,"CanineTokenizer"),uLr.forEach(t),AOe=r(A6e," (Canine model)"),A6e.forEach(t),LOe=i(y),Qn=n(y,"LI",{});var o0=s(Qn);tH=n(o0,"STRONG",{});var bLr=s(tH);BOe=r(bLr,"clip"),bLr.forEach(t),xOe=r(o0," \u2014 "),rB=n(o0,"A",{href:!0});var vLr=s(rB);kOe=r(vLr,"CLIPTokenizer"),vLr.forEach(t),ROe=r(o0," or "),tB=n(o0,"A",{href:!0});var TLr=s(tB);SOe=r(TLr,"CLIPTokenizerFast"),TLr.forEach(t),POe=r(o0," (CLIP model)"),o0.forEach(t),$Oe=i(y),Hn=n(y,"LI",{});var r0=s(Hn);aH=n(r0,"STRONG",{});var FLr=s(aH);IOe=r(FLr,"convbert"),FLr.forEach(t),jOe=r(r0," \u2014 "),aB=n(r0,"A",{href:!0});var CLr=s(aB);NOe=r(CLr,"ConvBertTokenizer"),CLr.forEach(t),DOe=r(r0," or "),nB=n(r0,"A",{href:!0});var MLr=s(nB);qOe=r(MLr,"ConvBertTokenizerFast"),MLr.forEach(t),GOe=r(r0," (ConvBERT model)"),r0.forEach(t),OOe=i(y),Un=n(y,"LI",{});var t0=s(Un);nH=n(t0,"STRONG",{});var ELr=s(nH);XOe=r(ELr,"cpm"),ELr.forEach(t),zOe=r(t0," \u2014 "),sB=n(t0,"A",{href:!0});var yLr=s(sB);VOe=r(yLr,"CpmTokenizer"),yLr.forEach(t),WOe=r(t0," or "),sH=n(t0,"CODE",{});var wLr=s(sH);QOe=r(wLr,"CpmTokenizerFast"),wLr.forEach(t),HOe=r(t0," (CPM model)"),t0.forEach(t),UOe=i(y),Mg=n(y,"LI",{});var L6e=s(Mg);lH=n(L6e,"STRONG",{});var ALr=s(lH);JOe=r(ALr,"ctrl"),ALr.forEach(t),YOe=r(L6e," \u2014 "),lB=n(L6e,"A",{href:!0});var LLr=s(lB);KOe=r(LLr,"CTRLTokenizer"),LLr.forEach(t),ZOe=r(L6e," (CTRL model)"),L6e.forEach(t),eXe=i(y),Jn=n(y,"LI",{});var a0=s(Jn);iH=n(a0,"STRONG",{});var BLr=s(iH);oXe=r(BLr,"deberta"),BLr.forEach(t),rXe=r(a0," \u2014 "),iB=n(a0,"A",{href:!0});var xLr=s(iB);tXe=r(xLr,"DebertaTokenizer"),xLr.forEach(t),aXe=r(a0," or "),dB=n(a0,"A",{href:!0});var kLr=s(dB);nXe=r(kLr,"DebertaTokenizerFast"),kLr.forEach(t),sXe=r(a0," (DeBERTa model)"),a0.forEach(t),lXe=i(y),Eg=n(y,"LI",{});var B6e=s(Eg);dH=n(B6e,"STRONG",{});var RLr=s(dH);iXe=r(RLr,"deberta-v2"),RLr.forEach(t),dXe=r(B6e," \u2014 "),cB=n(B6e,"A",{href:!0});var SLr=s(cB);cXe=r(SLr,"DebertaV2Tokenizer"),SLr.forEach(t),fXe=r(B6e," (DeBERTa-v2 model)"),B6e.forEach(t),mXe=i(y),Yn=n(y,"LI",{});var n0=s(Yn);cH=n(n0,"STRONG",{});var PLr=s(cH);gXe=r(PLr,"distilbert"),PLr.forEach(t),hXe=r(n0," \u2014 "),fB=n(n0,"A",{href:!0});var $Lr=s(fB);pXe=r($Lr,"DistilBertTokenizer"),$Lr.forEach(t),_Xe=r(n0," or "),mB=n(n0,"A",{href:!0});var ILr=s(mB);uXe=r(ILr,"DistilBertTokenizerFast"),ILr.forEach(t),bXe=r(n0," (DistilBERT model)"),n0.forEach(t),vXe=i(y),Kn=n(y,"LI",{});var s0=s(Kn);fH=n(s0,"STRONG",{});var jLr=s(fH);TXe=r(jLr,"dpr"),jLr.forEach(t),FXe=r(s0," \u2014 "),gB=n(s0,"A",{href:!0});var NLr=s(gB);CXe=r(NLr,"DPRQuestionEncoderTokenizer"),NLr.forEach(t),MXe=r(s0," or "),hB=n(s0,"A",{href:!0});var DLr=s(hB);EXe=r(DLr,"DPRQuestionEncoderTokenizerFast"),DLr.forEach(t),yXe=r(s0," (DPR model)"),s0.forEach(t),wXe=i(y),Zn=n(y,"LI",{});var l0=s(Zn);mH=n(l0,"STRONG",{});var qLr=s(mH);AXe=r(qLr,"electra"),qLr.forEach(t),LXe=r(l0," \u2014 "),pB=n(l0,"A",{href:!0});var GLr=s(pB);BXe=r(GLr,"ElectraTokenizer"),GLr.forEach(t),xXe=r(l0," or "),_B=n(l0,"A",{href:!0});var OLr=s(_B);kXe=r(OLr,"ElectraTokenizerFast"),OLr.forEach(t),RXe=r(l0," (ELECTRA model)"),l0.forEach(t),SXe=i(y),yg=n(y,"LI",{});var x6e=s(yg);gH=n(x6e,"STRONG",{});var XLr=s(gH);PXe=r(XLr,"flaubert"),XLr.forEach(t),$Xe=r(x6e," \u2014 "),uB=n(x6e,"A",{href:!0});var zLr=s(uB);IXe=r(zLr,"FlaubertTokenizer"),zLr.forEach(t),jXe=r(x6e," (FlauBERT model)"),x6e.forEach(t),NXe=i(y),es=n(y,"LI",{});var i0=s(es);hH=n(i0,"STRONG",{});var VLr=s(hH);DXe=r(VLr,"fnet"),VLr.forEach(t),qXe=r(i0," \u2014 "),bB=n(i0,"A",{href:!0});var WLr=s(bB);GXe=r(WLr,"FNetTokenizer"),WLr.forEach(t),OXe=r(i0," or "),vB=n(i0,"A",{href:!0});var QLr=s(vB);XXe=r(QLr,"FNetTokenizerFast"),QLr.forEach(t),zXe=r(i0," (FNet model)"),i0.forEach(t),VXe=i(y),wg=n(y,"LI",{});var k6e=s(wg);pH=n(k6e,"STRONG",{});var HLr=s(pH);WXe=r(HLr,"fsmt"),HLr.forEach(t),QXe=r(k6e," \u2014 "),TB=n(k6e,"A",{href:!0});var ULr=s(TB);HXe=r(ULr,"FSMTTokenizer"),ULr.forEach(t),UXe=r(k6e," (FairSeq Machine-Translation model)"),k6e.forEach(t),JXe=i(y),os=n(y,"LI",{});var d0=s(os);_H=n(d0,"STRONG",{});var JLr=s(_H);YXe=r(JLr,"funnel"),JLr.forEach(t),KXe=r(d0," \u2014 "),FB=n(d0,"A",{href:!0});var YLr=s(FB);ZXe=r(YLr,"FunnelTokenizer"),YLr.forEach(t),eze=r(d0," or "),CB=n(d0,"A",{href:!0});var KLr=s(CB);oze=r(KLr,"FunnelTokenizerFast"),KLr.forEach(t),rze=r(d0," (Funnel Transformer model)"),d0.forEach(t),tze=i(y),rs=n(y,"LI",{});var c0=s(rs);uH=n(c0,"STRONG",{});var ZLr=s(uH);aze=r(ZLr,"gpt2"),ZLr.forEach(t),nze=r(c0," \u2014 "),MB=n(c0,"A",{href:!0});var e9r=s(MB);sze=r(e9r,"GPT2Tokenizer"),e9r.forEach(t),lze=r(c0," or "),EB=n(c0,"A",{href:!0});var o9r=s(EB);ize=r(o9r,"GPT2TokenizerFast"),o9r.forEach(t),dze=r(c0," (OpenAI GPT-2 model)"),c0.forEach(t),cze=i(y),ts=n(y,"LI",{});var f0=s(ts);bH=n(f0,"STRONG",{});var r9r=s(bH);fze=r(r9r,"gpt_neo"),r9r.forEach(t),mze=r(f0," \u2014 "),yB=n(f0,"A",{href:!0});var t9r=s(yB);gze=r(t9r,"GPT2Tokenizer"),t9r.forEach(t),hze=r(f0," or "),wB=n(f0,"A",{href:!0});var a9r=s(wB);pze=r(a9r,"GPT2TokenizerFast"),a9r.forEach(t),_ze=r(f0," (GPT Neo model)"),f0.forEach(t),uze=i(y),as=n(y,"LI",{});var m0=s(as);vH=n(m0,"STRONG",{});var n9r=s(vH);bze=r(n9r,"herbert"),n9r.forEach(t),vze=r(m0," \u2014 "),AB=n(m0,"A",{href:!0});var s9r=s(AB);Tze=r(s9r,"HerbertTokenizer"),s9r.forEach(t),Fze=r(m0," or "),LB=n(m0,"A",{href:!0});var l9r=s(LB);Cze=r(l9r,"HerbertTokenizerFast"),l9r.forEach(t),Mze=r(m0," (HerBERT model)"),m0.forEach(t),Eze=i(y),Ag=n(y,"LI",{});var R6e=s(Ag);TH=n(R6e,"STRONG",{});var i9r=s(TH);yze=r(i9r,"hubert"),i9r.forEach(t),wze=r(R6e," \u2014 "),BB=n(R6e,"A",{href:!0});var d9r=s(BB);Aze=r(d9r,"Wav2Vec2CTCTokenizer"),d9r.forEach(t),Lze=r(R6e," (Hubert model)"),R6e.forEach(t),Bze=i(y),ns=n(y,"LI",{});var g0=s(ns);FH=n(g0,"STRONG",{});var c9r=s(FH);xze=r(c9r,"ibert"),c9r.forEach(t),kze=r(g0," \u2014 "),xB=n(g0,"A",{href:!0});var f9r=s(xB);Rze=r(f9r,"RobertaTokenizer"),f9r.forEach(t),Sze=r(g0," or "),kB=n(g0,"A",{href:!0});var m9r=s(kB);Pze=r(m9r,"RobertaTokenizerFast"),m9r.forEach(t),$ze=r(g0," (I-BERT model)"),g0.forEach(t),Ize=i(y),ss=n(y,"LI",{});var h0=s(ss);CH=n(h0,"STRONG",{});var g9r=s(CH);jze=r(g9r,"layoutlm"),g9r.forEach(t),Nze=r(h0," \u2014 "),RB=n(h0,"A",{href:!0});var h9r=s(RB);Dze=r(h9r,"LayoutLMTokenizer"),h9r.forEach(t),qze=r(h0," or "),SB=n(h0,"A",{href:!0});var p9r=s(SB);Gze=r(p9r,"LayoutLMTokenizerFast"),p9r.forEach(t),Oze=r(h0," (LayoutLM model)"),h0.forEach(t),Xze=i(y),ls=n(y,"LI",{});var p0=s(ls);MH=n(p0,"STRONG",{});var _9r=s(MH);zze=r(_9r,"layoutlmv2"),_9r.forEach(t),Vze=r(p0," \u2014 "),PB=n(p0,"A",{href:!0});var u9r=s(PB);Wze=r(u9r,"LayoutLMv2Tokenizer"),u9r.forEach(t),Qze=r(p0," or "),$B=n(p0,"A",{href:!0});var b9r=s($B);Hze=r(b9r,"LayoutLMv2TokenizerFast"),b9r.forEach(t),Uze=r(p0," (LayoutLMv2 model)"),p0.forEach(t),Jze=i(y),is=n(y,"LI",{});var _0=s(is);EH=n(_0,"STRONG",{});var v9r=s(EH);Yze=r(v9r,"layoutxlm"),v9r.forEach(t),Kze=r(_0," \u2014 "),IB=n(_0,"A",{href:!0});var T9r=s(IB);Zze=r(T9r,"LayoutXLMTokenizer"),T9r.forEach(t),eVe=r(_0," or "),jB=n(_0,"A",{href:!0});var F9r=s(jB);oVe=r(F9r,"LayoutXLMTokenizerFast"),F9r.forEach(t),rVe=r(_0," (LayoutXLM model)"),_0.forEach(t),tVe=i(y),ds=n(y,"LI",{});var u0=s(ds);yH=n(u0,"STRONG",{});var C9r=s(yH);aVe=r(C9r,"led"),C9r.forEach(t),nVe=r(u0," \u2014 "),NB=n(u0,"A",{href:!0});var M9r=s(NB);sVe=r(M9r,"LEDTokenizer"),M9r.forEach(t),lVe=r(u0," or "),DB=n(u0,"A",{href:!0});var E9r=s(DB);iVe=r(E9r,"LEDTokenizerFast"),E9r.forEach(t),dVe=r(u0," (LED model)"),u0.forEach(t),cVe=i(y),cs=n(y,"LI",{});var b0=s(cs);wH=n(b0,"STRONG",{});var y9r=s(wH);fVe=r(y9r,"longformer"),y9r.forEach(t),mVe=r(b0," \u2014 "),qB=n(b0,"A",{href:!0});var w9r=s(qB);gVe=r(w9r,"LongformerTokenizer"),w9r.forEach(t),hVe=r(b0," or "),GB=n(b0,"A",{href:!0});var A9r=s(GB);pVe=r(A9r,"LongformerTokenizerFast"),A9r.forEach(t),_Ve=r(b0," (Longformer model)"),b0.forEach(t),uVe=i(y),Lg=n(y,"LI",{});var S6e=s(Lg);AH=n(S6e,"STRONG",{});var L9r=s(AH);bVe=r(L9r,"luke"),L9r.forEach(t),vVe=r(S6e," \u2014 "),OB=n(S6e,"A",{href:!0});var B9r=s(OB);TVe=r(B9r,"LukeTokenizer"),B9r.forEach(t),FVe=r(S6e," (LUKE model)"),S6e.forEach(t),CVe=i(y),fs=n(y,"LI",{});var v0=s(fs);LH=n(v0,"STRONG",{});var x9r=s(LH);MVe=r(x9r,"lxmert"),x9r.forEach(t),EVe=r(v0," \u2014 "),XB=n(v0,"A",{href:!0});var k9r=s(XB);yVe=r(k9r,"LxmertTokenizer"),k9r.forEach(t),wVe=r(v0," or "),zB=n(v0,"A",{href:!0});var R9r=s(zB);AVe=r(R9r,"LxmertTokenizerFast"),R9r.forEach(t),LVe=r(v0," (LXMERT model)"),v0.forEach(t),BVe=i(y),Bg=n(y,"LI",{});var P6e=s(Bg);BH=n(P6e,"STRONG",{});var S9r=s(BH);xVe=r(S9r,"m2m_100"),S9r.forEach(t),kVe=r(P6e," \u2014 "),VB=n(P6e,"A",{href:!0});var P9r=s(VB);RVe=r(P9r,"M2M100Tokenizer"),P9r.forEach(t),SVe=r(P6e," (M2M100 model)"),P6e.forEach(t),PVe=i(y),xg=n(y,"LI",{});var $6e=s(xg);xH=n($6e,"STRONG",{});var $9r=s(xH);$Ve=r($9r,"marian"),$9r.forEach(t),IVe=r($6e," \u2014 "),WB=n($6e,"A",{href:!0});var I9r=s(WB);jVe=r(I9r,"MarianTokenizer"),I9r.forEach(t),NVe=r($6e," (Marian model)"),$6e.forEach(t),DVe=i(y),ms=n(y,"LI",{});var T0=s(ms);kH=n(T0,"STRONG",{});var j9r=s(kH);qVe=r(j9r,"mbart"),j9r.forEach(t),GVe=r(T0," \u2014 "),QB=n(T0,"A",{href:!0});var N9r=s(QB);OVe=r(N9r,"MBartTokenizer"),N9r.forEach(t),XVe=r(T0," or "),HB=n(T0,"A",{href:!0});var D9r=s(HB);zVe=r(D9r,"MBartTokenizerFast"),D9r.forEach(t),VVe=r(T0," (mBART model)"),T0.forEach(t),WVe=i(y),gs=n(y,"LI",{});var F0=s(gs);RH=n(F0,"STRONG",{});var q9r=s(RH);QVe=r(q9r,"mbart50"),q9r.forEach(t),HVe=r(F0," \u2014 "),UB=n(F0,"A",{href:!0});var G9r=s(UB);UVe=r(G9r,"MBart50Tokenizer"),G9r.forEach(t),JVe=r(F0," or "),JB=n(F0,"A",{href:!0});var O9r=s(JB);YVe=r(O9r,"MBart50TokenizerFast"),O9r.forEach(t),KVe=r(F0," (mBART-50 model)"),F0.forEach(t),ZVe=i(y),kg=n(y,"LI",{});var I6e=s(kg);SH=n(I6e,"STRONG",{});var X9r=s(SH);eWe=r(X9r,"mluke"),X9r.forEach(t),oWe=r(I6e," \u2014 "),YB=n(I6e,"A",{href:!0});var z9r=s(YB);rWe=r(z9r,"MLukeTokenizer"),z9r.forEach(t),tWe=r(I6e," (mLUKE model)"),I6e.forEach(t),aWe=i(y),hs=n(y,"LI",{});var C0=s(hs);PH=n(C0,"STRONG",{});var V9r=s(PH);nWe=r(V9r,"mobilebert"),V9r.forEach(t),sWe=r(C0," \u2014 "),KB=n(C0,"A",{href:!0});var W9r=s(KB);lWe=r(W9r,"MobileBertTokenizer"),W9r.forEach(t),iWe=r(C0," or "),ZB=n(C0,"A",{href:!0});var Q9r=s(ZB);dWe=r(Q9r,"MobileBertTokenizerFast"),Q9r.forEach(t),cWe=r(C0," (MobileBERT model)"),C0.forEach(t),fWe=i(y),ps=n(y,"LI",{});var M0=s(ps);$H=n(M0,"STRONG",{});var H9r=s($H);mWe=r(H9r,"mpnet"),H9r.forEach(t),gWe=r(M0," \u2014 "),ex=n(M0,"A",{href:!0});var U9r=s(ex);hWe=r(U9r,"MPNetTokenizer"),U9r.forEach(t),pWe=r(M0," or "),ox=n(M0,"A",{href:!0});var J9r=s(ox);_We=r(J9r,"MPNetTokenizerFast"),J9r.forEach(t),uWe=r(M0," (MPNet model)"),M0.forEach(t),bWe=i(y),_s=n(y,"LI",{});var E0=s(_s);IH=n(E0,"STRONG",{});var Y9r=s(IH);vWe=r(Y9r,"mt5"),Y9r.forEach(t),TWe=r(E0," \u2014 "),rx=n(E0,"A",{href:!0});var K9r=s(rx);FWe=r(K9r,"MT5Tokenizer"),K9r.forEach(t),CWe=r(E0," or "),tx=n(E0,"A",{href:!0});var Z9r=s(tx);MWe=r(Z9r,"MT5TokenizerFast"),Z9r.forEach(t),EWe=r(E0," (mT5 model)"),E0.forEach(t),yWe=i(y),us=n(y,"LI",{});var y0=s(us);jH=n(y0,"STRONG",{});var eBr=s(jH);wWe=r(eBr,"openai-gpt"),eBr.forEach(t),AWe=r(y0," \u2014 "),ax=n(y0,"A",{href:!0});var oBr=s(ax);LWe=r(oBr,"OpenAIGPTTokenizer"),oBr.forEach(t),BWe=r(y0," or "),nx=n(y0,"A",{href:!0});var rBr=s(nx);xWe=r(rBr,"OpenAIGPTTokenizerFast"),rBr.forEach(t),kWe=r(y0," (OpenAI GPT model)"),y0.forEach(t),RWe=i(y),bs=n(y,"LI",{});var w0=s(bs);NH=n(w0,"STRONG",{});var tBr=s(NH);SWe=r(tBr,"pegasus"),tBr.forEach(t),PWe=r(w0," \u2014 "),sx=n(w0,"A",{href:!0});var aBr=s(sx);$We=r(aBr,"PegasusTokenizer"),aBr.forEach(t),IWe=r(w0," or "),lx=n(w0,"A",{href:!0});var nBr=s(lx);jWe=r(nBr,"PegasusTokenizerFast"),nBr.forEach(t),NWe=r(w0," (Pegasus model)"),w0.forEach(t),DWe=i(y),Rg=n(y,"LI",{});var j6e=s(Rg);DH=n(j6e,"STRONG",{});var sBr=s(DH);qWe=r(sBr,"perceiver"),sBr.forEach(t),GWe=r(j6e," \u2014 "),ix=n(j6e,"A",{href:!0});var lBr=s(ix);OWe=r(lBr,"PerceiverTokenizer"),lBr.forEach(t),XWe=r(j6e," (Perceiver model)"),j6e.forEach(t),zWe=i(y),Sg=n(y,"LI",{});var N6e=s(Sg);qH=n(N6e,"STRONG",{});var iBr=s(qH);VWe=r(iBr,"phobert"),iBr.forEach(t),WWe=r(N6e," \u2014 "),dx=n(N6e,"A",{href:!0});var dBr=s(dx);QWe=r(dBr,"PhobertTokenizer"),dBr.forEach(t),HWe=r(N6e," (PhoBERT model)"),N6e.forEach(t),UWe=i(y),Pg=n(y,"LI",{});var D6e=s(Pg);GH=n(D6e,"STRONG",{});var cBr=s(GH);JWe=r(cBr,"plbart"),cBr.forEach(t),YWe=r(D6e," \u2014 "),cx=n(D6e,"A",{href:!0});var fBr=s(cx);KWe=r(fBr,"PLBartTokenizer"),fBr.forEach(t),ZWe=r(D6e," (PLBart model)"),D6e.forEach(t),eQe=i(y),$g=n(y,"LI",{});var q6e=s($g);OH=n(q6e,"STRONG",{});var mBr=s(OH);oQe=r(mBr,"prophetnet"),mBr.forEach(t),rQe=r(q6e," \u2014 "),fx=n(q6e,"A",{href:!0});var gBr=s(fx);tQe=r(gBr,"ProphetNetTokenizer"),gBr.forEach(t),aQe=r(q6e," (ProphetNet model)"),q6e.forEach(t),nQe=i(y),vs=n(y,"LI",{});var A0=s(vs);XH=n(A0,"STRONG",{});var hBr=s(XH);sQe=r(hBr,"qdqbert"),hBr.forEach(t),lQe=r(A0," \u2014 "),mx=n(A0,"A",{href:!0});var pBr=s(mx);iQe=r(pBr,"BertTokenizer"),pBr.forEach(t),dQe=r(A0," or "),gx=n(A0,"A",{href:!0});var _Br=s(gx);cQe=r(_Br,"BertTokenizerFast"),_Br.forEach(t),fQe=r(A0," (QDQBert model)"),A0.forEach(t),mQe=i(y),Ig=n(y,"LI",{});var G6e=s(Ig);zH=n(G6e,"STRONG",{});var uBr=s(zH);gQe=r(uBr,"rag"),uBr.forEach(t),hQe=r(G6e," \u2014 "),hx=n(G6e,"A",{href:!0});var bBr=s(hx);pQe=r(bBr,"RagTokenizer"),bBr.forEach(t),_Qe=r(G6e," (RAG model)"),G6e.forEach(t),uQe=i(y),Ts=n(y,"LI",{});var L0=s(Ts);VH=n(L0,"STRONG",{});var vBr=s(VH);bQe=r(vBr,"reformer"),vBr.forEach(t),vQe=r(L0," \u2014 "),px=n(L0,"A",{href:!0});var TBr=s(px);TQe=r(TBr,"ReformerTokenizer"),TBr.forEach(t),FQe=r(L0," or "),_x=n(L0,"A",{href:!0});var FBr=s(_x);CQe=r(FBr,"ReformerTokenizerFast"),FBr.forEach(t),MQe=r(L0," (Reformer model)"),L0.forEach(t),EQe=i(y),Fs=n(y,"LI",{});var B0=s(Fs);WH=n(B0,"STRONG",{});var CBr=s(WH);yQe=r(CBr,"rembert"),CBr.forEach(t),wQe=r(B0," \u2014 "),ux=n(B0,"A",{href:!0});var MBr=s(ux);AQe=r(MBr,"RemBertTokenizer"),MBr.forEach(t),LQe=r(B0," or "),bx=n(B0,"A",{href:!0});var EBr=s(bx);BQe=r(EBr,"RemBertTokenizerFast"),EBr.forEach(t),xQe=r(B0," (RemBERT model)"),B0.forEach(t),kQe=i(y),Cs=n(y,"LI",{});var x0=s(Cs);QH=n(x0,"STRONG",{});var yBr=s(QH);RQe=r(yBr,"retribert"),yBr.forEach(t),SQe=r(x0," \u2014 "),vx=n(x0,"A",{href:!0});var wBr=s(vx);PQe=r(wBr,"RetriBertTokenizer"),wBr.forEach(t),$Qe=r(x0," or "),Tx=n(x0,"A",{href:!0});var ABr=s(Tx);IQe=r(ABr,"RetriBertTokenizerFast"),ABr.forEach(t),jQe=r(x0," (RetriBERT model)"),x0.forEach(t),NQe=i(y),Ms=n(y,"LI",{});var k0=s(Ms);HH=n(k0,"STRONG",{});var LBr=s(HH);DQe=r(LBr,"roberta"),LBr.forEach(t),qQe=r(k0," \u2014 "),Fx=n(k0,"A",{href:!0});var BBr=s(Fx);GQe=r(BBr,"RobertaTokenizer"),BBr.forEach(t),OQe=r(k0," or "),Cx=n(k0,"A",{href:!0});var xBr=s(Cx);XQe=r(xBr,"RobertaTokenizerFast"),xBr.forEach(t),zQe=r(k0," (RoBERTa model)"),k0.forEach(t),VQe=i(y),Es=n(y,"LI",{});var R0=s(Es);UH=n(R0,"STRONG",{});var kBr=s(UH);WQe=r(kBr,"roformer"),kBr.forEach(t),QQe=r(R0," \u2014 "),Mx=n(R0,"A",{href:!0});var RBr=s(Mx);HQe=r(RBr,"RoFormerTokenizer"),RBr.forEach(t),UQe=r(R0," or "),Ex=n(R0,"A",{href:!0});var SBr=s(Ex);JQe=r(SBr,"RoFormerTokenizerFast"),SBr.forEach(t),YQe=r(R0," (RoFormer model)"),R0.forEach(t),KQe=i(y),jg=n(y,"LI",{});var O6e=s(jg);JH=n(O6e,"STRONG",{});var PBr=s(JH);ZQe=r(PBr,"speech_to_text"),PBr.forEach(t),eHe=r(O6e," \u2014 "),yx=n(O6e,"A",{href:!0});var $Br=s(yx);oHe=r($Br,"Speech2TextTokenizer"),$Br.forEach(t),rHe=r(O6e," (Speech2Text model)"),O6e.forEach(t),tHe=i(y),Ng=n(y,"LI",{});var X6e=s(Ng);YH=n(X6e,"STRONG",{});var IBr=s(YH);aHe=r(IBr,"speech_to_text_2"),IBr.forEach(t),nHe=r(X6e," \u2014 "),wx=n(X6e,"A",{href:!0});var jBr=s(wx);sHe=r(jBr,"Speech2Text2Tokenizer"),jBr.forEach(t),lHe=r(X6e," (Speech2Text2 model)"),X6e.forEach(t),iHe=i(y),ys=n(y,"LI",{});var S0=s(ys);KH=n(S0,"STRONG",{});var NBr=s(KH);dHe=r(NBr,"splinter"),NBr.forEach(t),cHe=r(S0," \u2014 "),Ax=n(S0,"A",{href:!0});var DBr=s(Ax);fHe=r(DBr,"SplinterTokenizer"),DBr.forEach(t),mHe=r(S0," or "),Lx=n(S0,"A",{href:!0});var qBr=s(Lx);gHe=r(qBr,"SplinterTokenizerFast"),qBr.forEach(t),hHe=r(S0," (Splinter model)"),S0.forEach(t),pHe=i(y),ws=n(y,"LI",{});var P0=s(ws);ZH=n(P0,"STRONG",{});var GBr=s(ZH);_He=r(GBr,"squeezebert"),GBr.forEach(t),uHe=r(P0," \u2014 "),Bx=n(P0,"A",{href:!0});var OBr=s(Bx);bHe=r(OBr,"SqueezeBertTokenizer"),OBr.forEach(t),vHe=r(P0," or "),xx=n(P0,"A",{href:!0});var XBr=s(xx);THe=r(XBr,"SqueezeBertTokenizerFast"),XBr.forEach(t),FHe=r(P0," (SqueezeBERT model)"),P0.forEach(t),CHe=i(y),As=n(y,"LI",{});var $0=s(As);eU=n($0,"STRONG",{});var zBr=s(eU);MHe=r(zBr,"t5"),zBr.forEach(t),EHe=r($0," \u2014 "),kx=n($0,"A",{href:!0});var VBr=s(kx);yHe=r(VBr,"T5Tokenizer"),VBr.forEach(t),wHe=r($0," or "),Rx=n($0,"A",{href:!0});var WBr=s(Rx);AHe=r(WBr,"T5TokenizerFast"),WBr.forEach(t),LHe=r($0," (T5 model)"),$0.forEach(t),BHe=i(y),Dg=n(y,"LI",{});var z6e=s(Dg);oU=n(z6e,"STRONG",{});var QBr=s(oU);xHe=r(QBr,"tapas"),QBr.forEach(t),kHe=r(z6e," \u2014 "),Sx=n(z6e,"A",{href:!0});var HBr=s(Sx);RHe=r(HBr,"TapasTokenizer"),HBr.forEach(t),SHe=r(z6e," (TAPAS model)"),z6e.forEach(t),PHe=i(y),qg=n(y,"LI",{});var V6e=s(qg);rU=n(V6e,"STRONG",{});var UBr=s(rU);$He=r(UBr,"transfo-xl"),UBr.forEach(t),IHe=r(V6e," \u2014 "),Px=n(V6e,"A",{href:!0});var JBr=s(Px);jHe=r(JBr,"TransfoXLTokenizer"),JBr.forEach(t),NHe=r(V6e," (Transformer-XL model)"),V6e.forEach(t),DHe=i(y),Gg=n(y,"LI",{});var W6e=s(Gg);tU=n(W6e,"STRONG",{});var YBr=s(tU);qHe=r(YBr,"wav2vec2"),YBr.forEach(t),GHe=r(W6e," \u2014 "),$x=n(W6e,"A",{href:!0});var KBr=s($x);OHe=r(KBr,"Wav2Vec2CTCTokenizer"),KBr.forEach(t),XHe=r(W6e," (Wav2Vec2 model)"),W6e.forEach(t),zHe=i(y),Og=n(y,"LI",{});var Q6e=s(Og);aU=n(Q6e,"STRONG",{});var ZBr=s(aU);VHe=r(ZBr,"wav2vec2_phoneme"),ZBr.forEach(t),WHe=r(Q6e," \u2014 "),Ix=n(Q6e,"A",{href:!0});var exr=s(Ix);QHe=r(exr,"Wav2Vec2PhonemeCTCTokenizer"),exr.forEach(t),HHe=r(Q6e," (Wav2Vec2Phoneme model)"),Q6e.forEach(t),UHe=i(y),Ls=n(y,"LI",{});var I0=s(Ls);nU=n(I0,"STRONG",{});var oxr=s(nU);JHe=r(oxr,"xglm"),oxr.forEach(t),YHe=r(I0," \u2014 "),jx=n(I0,"A",{href:!0});var rxr=s(jx);KHe=r(rxr,"XGLMTokenizer"),rxr.forEach(t),ZHe=r(I0," or "),Nx=n(I0,"A",{href:!0});var txr=s(Nx);eUe=r(txr,"XGLMTokenizerFast"),txr.forEach(t),oUe=r(I0," (XGLM model)"),I0.forEach(t),rUe=i(y),Xg=n(y,"LI",{});var H6e=s(Xg);sU=n(H6e,"STRONG",{});var axr=s(sU);tUe=r(axr,"xlm"),axr.forEach(t),aUe=r(H6e," \u2014 "),Dx=n(H6e,"A",{href:!0});var nxr=s(Dx);nUe=r(nxr,"XLMTokenizer"),nxr.forEach(t),sUe=r(H6e," (XLM model)"),H6e.forEach(t),lUe=i(y),zg=n(y,"LI",{});var U6e=s(zg);lU=n(U6e,"STRONG",{});var sxr=s(lU);iUe=r(sxr,"xlm-prophetnet"),sxr.forEach(t),dUe=r(U6e," \u2014 "),qx=n(U6e,"A",{href:!0});var lxr=s(qx);cUe=r(lxr,"XLMProphetNetTokenizer"),lxr.forEach(t),fUe=r(U6e," (XLMProphetNet model)"),U6e.forEach(t),mUe=i(y),Bs=n(y,"LI",{});var j0=s(Bs);iU=n(j0,"STRONG",{});var ixr=s(iU);gUe=r(ixr,"xlm-roberta"),ixr.forEach(t),hUe=r(j0," \u2014 "),Gx=n(j0,"A",{href:!0});var dxr=s(Gx);pUe=r(dxr,"XLMRobertaTokenizer"),dxr.forEach(t),_Ue=r(j0," or "),Ox=n(j0,"A",{href:!0});var cxr=s(Ox);uUe=r(cxr,"XLMRobertaTokenizerFast"),cxr.forEach(t),bUe=r(j0," (XLM-RoBERTa model)"),j0.forEach(t),vUe=i(y),xs=n(y,"LI",{});var N0=s(xs);dU=n(N0,"STRONG",{});var fxr=s(dU);TUe=r(fxr,"xlnet"),fxr.forEach(t),FUe=r(N0," \u2014 "),Xx=n(N0,"A",{href:!0});var mxr=s(Xx);CUe=r(mxr,"XLNetTokenizer"),mxr.forEach(t),MUe=r(N0," or "),zx=n(N0,"A",{href:!0});var gxr=s(zx);EUe=r(gxr,"XLNetTokenizerFast"),gxr.forEach(t),yUe=r(N0," (XLNet model)"),N0.forEach(t),y.forEach(t),wUe=i(da),cU=n(da,"P",{});var hxr=s(cU);AUe=r(hxr,"Examples:"),hxr.forEach(t),LUe=i(da),m(F4.$$.fragment,da),da.forEach(t),BUe=i($s),Vg=n($s,"DIV",{class:!0});var CBe=s(Vg);m(C4.$$.fragment,CBe),xUe=i(CBe),fU=n(CBe,"P",{});var pxr=s(fU);kUe=r(pxr,"Register a new tokenizer in this mapping."),pxr.forEach(t),CBe.forEach(t),$s.forEach(t),TLe=i(d),ji=n(d,"H2",{class:!0});var MBe=s(ji);Wg=n(MBe,"A",{id:!0,class:!0,href:!0});var _xr=s(Wg);mU=n(_xr,"SPAN",{});var uxr=s(mU);m(M4.$$.fragment,uxr),uxr.forEach(t),_xr.forEach(t),RUe=i(MBe),gU=n(MBe,"SPAN",{});var bxr=s(gU);SUe=r(bxr,"AutoFeatureExtractor"),bxr.forEach(t),MBe.forEach(t),FLe=i(d),Xo=n(d,"DIV",{class:!0});var Is=s(Xo);m(E4.$$.fragment,Is),PUe=i(Is),y4=n(Is,"P",{});var EBe=s(y4);$Ue=r(EBe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Vx=n(EBe,"A",{href:!0});var vxr=s(Vx);IUe=r(vxr,"AutoFeatureExtractor.from_pretrained()"),vxr.forEach(t),jUe=r(EBe," class method."),EBe.forEach(t),NUe=i(Is),w4=n(Is,"P",{});var yBe=s(w4);DUe=r(yBe,"This class cannot be instantiated directly using "),hU=n(yBe,"CODE",{});var Txr=s(hU);qUe=r(Txr,"__init__()"),Txr.forEach(t),GUe=r(yBe," (throws an error)."),yBe.forEach(t),OUe=i(Is),Le=n(Is,"DIV",{class:!0});var kt=s(Le);m(A4.$$.fragment,kt),XUe=i(kt),pU=n(kt,"P",{});var Fxr=s(pU);zUe=r(Fxr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Fxr.forEach(t),VUe=i(kt),Na=n(kt,"P",{});var iC=s(Na);WUe=r(iC,"The feature extractor class to instantiate is selected based on the "),_U=n(iC,"CODE",{});var Cxr=s(_U);QUe=r(Cxr,"model_type"),Cxr.forEach(t),HUe=r(iC,` property of the config object
(either passed as an argument or loaded from `),uU=n(iC,"CODE",{});var Mxr=s(uU);UUe=r(Mxr,"pretrained_model_name_or_path"),Mxr.forEach(t),JUe=r(iC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),bU=n(iC,"CODE",{});var Exr=s(bU);YUe=r(Exr,"pretrained_model_name_or_path"),Exr.forEach(t),KUe=r(iC,":"),iC.forEach(t),ZUe=i(kt),se=n(kt,"UL",{});var de=s(se);Qg=n(de,"LI",{});var J6e=s(Qg);vU=n(J6e,"STRONG",{});var yxr=s(vU);eJe=r(yxr,"beit"),yxr.forEach(t),oJe=r(J6e," \u2014 "),Wx=n(J6e,"A",{href:!0});var wxr=s(Wx);rJe=r(wxr,"BeitFeatureExtractor"),wxr.forEach(t),tJe=r(J6e," (BEiT model)"),J6e.forEach(t),aJe=i(de),Hg=n(de,"LI",{});var Y6e=s(Hg);TU=n(Y6e,"STRONG",{});var Axr=s(TU);nJe=r(Axr,"clip"),Axr.forEach(t),sJe=r(Y6e," \u2014 "),Qx=n(Y6e,"A",{href:!0});var Lxr=s(Qx);lJe=r(Lxr,"CLIPFeatureExtractor"),Lxr.forEach(t),iJe=r(Y6e," (CLIP model)"),Y6e.forEach(t),dJe=i(de),Ug=n(de,"LI",{});var K6e=s(Ug);FU=n(K6e,"STRONG",{});var Bxr=s(FU);cJe=r(Bxr,"convnext"),Bxr.forEach(t),fJe=r(K6e," \u2014 "),Hx=n(K6e,"A",{href:!0});var xxr=s(Hx);mJe=r(xxr,"ConvNextFeatureExtractor"),xxr.forEach(t),gJe=r(K6e," (ConvNext model)"),K6e.forEach(t),hJe=i(de),Jg=n(de,"LI",{});var Z6e=s(Jg);CU=n(Z6e,"STRONG",{});var kxr=s(CU);pJe=r(kxr,"deit"),kxr.forEach(t),_Je=r(Z6e," \u2014 "),Ux=n(Z6e,"A",{href:!0});var Rxr=s(Ux);uJe=r(Rxr,"DeiTFeatureExtractor"),Rxr.forEach(t),bJe=r(Z6e," (DeiT model)"),Z6e.forEach(t),vJe=i(de),Yg=n(de,"LI",{});var eTe=s(Yg);MU=n(eTe,"STRONG",{});var Sxr=s(MU);TJe=r(Sxr,"detr"),Sxr.forEach(t),FJe=r(eTe," \u2014 "),Jx=n(eTe,"A",{href:!0});var Pxr=s(Jx);CJe=r(Pxr,"DetrFeatureExtractor"),Pxr.forEach(t),MJe=r(eTe," (DETR model)"),eTe.forEach(t),EJe=i(de),Kg=n(de,"LI",{});var oTe=s(Kg);EU=n(oTe,"STRONG",{});var $xr=s(EU);yJe=r($xr,"hubert"),$xr.forEach(t),wJe=r(oTe," \u2014 "),Yx=n(oTe,"A",{href:!0});var Ixr=s(Yx);AJe=r(Ixr,"Wav2Vec2FeatureExtractor"),Ixr.forEach(t),LJe=r(oTe," (Hubert model)"),oTe.forEach(t),BJe=i(de),Zg=n(de,"LI",{});var rTe=s(Zg);yU=n(rTe,"STRONG",{});var jxr=s(yU);xJe=r(jxr,"layoutlmv2"),jxr.forEach(t),kJe=r(rTe," \u2014 "),Kx=n(rTe,"A",{href:!0});var Nxr=s(Kx);RJe=r(Nxr,"LayoutLMv2FeatureExtractor"),Nxr.forEach(t),SJe=r(rTe," (LayoutLMv2 model)"),rTe.forEach(t),PJe=i(de),eh=n(de,"LI",{});var tTe=s(eh);wU=n(tTe,"STRONG",{});var Dxr=s(wU);$Je=r(Dxr,"perceiver"),Dxr.forEach(t),IJe=r(tTe," \u2014 "),Zx=n(tTe,"A",{href:!0});var qxr=s(Zx);jJe=r(qxr,"PerceiverFeatureExtractor"),qxr.forEach(t),NJe=r(tTe," (Perceiver model)"),tTe.forEach(t),DJe=i(de),oh=n(de,"LI",{});var aTe=s(oh);AU=n(aTe,"STRONG",{});var Gxr=s(AU);qJe=r(Gxr,"poolformer"),Gxr.forEach(t),GJe=r(aTe," \u2014 "),ek=n(aTe,"A",{href:!0});var Oxr=s(ek);OJe=r(Oxr,"PoolFormerFeatureExtractor"),Oxr.forEach(t),XJe=r(aTe," (PoolFormer model)"),aTe.forEach(t),zJe=i(de),rh=n(de,"LI",{});var nTe=s(rh);LU=n(nTe,"STRONG",{});var Xxr=s(LU);VJe=r(Xxr,"segformer"),Xxr.forEach(t),WJe=r(nTe," \u2014 "),ok=n(nTe,"A",{href:!0});var zxr=s(ok);QJe=r(zxr,"SegformerFeatureExtractor"),zxr.forEach(t),HJe=r(nTe," (SegFormer model)"),nTe.forEach(t),UJe=i(de),th=n(de,"LI",{});var sTe=s(th);BU=n(sTe,"STRONG",{});var Vxr=s(BU);JJe=r(Vxr,"speech_to_text"),Vxr.forEach(t),YJe=r(sTe," \u2014 "),rk=n(sTe,"A",{href:!0});var Wxr=s(rk);KJe=r(Wxr,"Speech2TextFeatureExtractor"),Wxr.forEach(t),ZJe=r(sTe," (Speech2Text model)"),sTe.forEach(t),eYe=i(de),ah=n(de,"LI",{});var lTe=s(ah);xU=n(lTe,"STRONG",{});var Qxr=s(xU);oYe=r(Qxr,"swin"),Qxr.forEach(t),rYe=r(lTe," \u2014 "),tk=n(lTe,"A",{href:!0});var Hxr=s(tk);tYe=r(Hxr,"ViTFeatureExtractor"),Hxr.forEach(t),aYe=r(lTe," (Swin model)"),lTe.forEach(t),nYe=i(de),nh=n(de,"LI",{});var iTe=s(nh);kU=n(iTe,"STRONG",{});var Uxr=s(kU);sYe=r(Uxr,"vit"),Uxr.forEach(t),lYe=r(iTe," \u2014 "),ak=n(iTe,"A",{href:!0});var Jxr=s(ak);iYe=r(Jxr,"ViTFeatureExtractor"),Jxr.forEach(t),dYe=r(iTe," (ViT model)"),iTe.forEach(t),cYe=i(de),sh=n(de,"LI",{});var dTe=s(sh);RU=n(dTe,"STRONG",{});var Yxr=s(RU);fYe=r(Yxr,"vit_mae"),Yxr.forEach(t),mYe=r(dTe," \u2014 "),nk=n(dTe,"A",{href:!0});var Kxr=s(nk);gYe=r(Kxr,"ViTFeatureExtractor"),Kxr.forEach(t),hYe=r(dTe," (ViTMAE model)"),dTe.forEach(t),pYe=i(de),lh=n(de,"LI",{});var cTe=s(lh);SU=n(cTe,"STRONG",{});var Zxr=s(SU);_Ye=r(Zxr,"wav2vec2"),Zxr.forEach(t),uYe=r(cTe," \u2014 "),sk=n(cTe,"A",{href:!0});var ekr=s(sk);bYe=r(ekr,"Wav2Vec2FeatureExtractor"),ekr.forEach(t),vYe=r(cTe," (Wav2Vec2 model)"),cTe.forEach(t),de.forEach(t),TYe=i(kt),m(ih.$$.fragment,kt),FYe=i(kt),PU=n(kt,"P",{});var okr=s(PU);CYe=r(okr,"Examples:"),okr.forEach(t),MYe=i(kt),m(L4.$$.fragment,kt),kt.forEach(t),EYe=i(Is),dh=n(Is,"DIV",{class:!0});var wBe=s(dh);m(B4.$$.fragment,wBe),yYe=i(wBe),$U=n(wBe,"P",{});var rkr=s($U);wYe=r(rkr,"Register a new feature extractor for this class."),rkr.forEach(t),wBe.forEach(t),Is.forEach(t),CLe=i(d),Ni=n(d,"H2",{class:!0});var ABe=s(Ni);ch=n(ABe,"A",{id:!0,class:!0,href:!0});var tkr=s(ch);IU=n(tkr,"SPAN",{});var akr=s(IU);m(x4.$$.fragment,akr),akr.forEach(t),tkr.forEach(t),AYe=i(ABe),jU=n(ABe,"SPAN",{});var nkr=s(jU);LYe=r(nkr,"AutoProcessor"),nkr.forEach(t),ABe.forEach(t),MLe=i(d),zo=n(d,"DIV",{class:!0});var js=s(zo);m(k4.$$.fragment,js),BYe=i(js),R4=n(js,"P",{});var LBe=s(R4);xYe=r(LBe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),lk=n(LBe,"A",{href:!0});var skr=s(lk);kYe=r(skr,"AutoProcessor.from_pretrained()"),skr.forEach(t),RYe=r(LBe," class method."),LBe.forEach(t),SYe=i(js),S4=n(js,"P",{});var BBe=s(S4);PYe=r(BBe,"This class cannot be instantiated directly using "),NU=n(BBe,"CODE",{});var lkr=s(NU);$Ye=r(lkr,"__init__()"),lkr.forEach(t),IYe=r(BBe," (throws an error)."),BBe.forEach(t),jYe=i(js),Be=n(js,"DIV",{class:!0});var Rt=s(Be);m(P4.$$.fragment,Rt),NYe=i(Rt),DU=n(Rt,"P",{});var ikr=s(DU);DYe=r(ikr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ikr.forEach(t),qYe=i(Rt),Di=n(Rt,"P",{});var JX=s(Di);GYe=r(JX,"The processor class to instantiate is selected based on the "),qU=n(JX,"CODE",{});var dkr=s(qU);OYe=r(dkr,"model_type"),dkr.forEach(t),XYe=r(JX,` property of the config object (either
passed as an argument or loaded from `),GU=n(JX,"CODE",{});var ckr=s(GU);zYe=r(ckr,"pretrained_model_name_or_path"),ckr.forEach(t),VYe=r(JX," if possible):"),JX.forEach(t),WYe=i(Rt),we=n(Rt,"UL",{});var No=s(we);fh=n(No,"LI",{});var fTe=s(fh);OU=n(fTe,"STRONG",{});var fkr=s(OU);QYe=r(fkr,"clip"),fkr.forEach(t),HYe=r(fTe," \u2014 "),ik=n(fTe,"A",{href:!0});var mkr=s(ik);UYe=r(mkr,"CLIPProcessor"),mkr.forEach(t),JYe=r(fTe," (CLIP model)"),fTe.forEach(t),YYe=i(No),mh=n(No,"LI",{});var mTe=s(mh);XU=n(mTe,"STRONG",{});var gkr=s(XU);KYe=r(gkr,"layoutlmv2"),gkr.forEach(t),ZYe=r(mTe," \u2014 "),dk=n(mTe,"A",{href:!0});var hkr=s(dk);eKe=r(hkr,"LayoutLMv2Processor"),hkr.forEach(t),oKe=r(mTe," (LayoutLMv2 model)"),mTe.forEach(t),rKe=i(No),gh=n(No,"LI",{});var gTe=s(gh);zU=n(gTe,"STRONG",{});var pkr=s(zU);tKe=r(pkr,"layoutxlm"),pkr.forEach(t),aKe=r(gTe," \u2014 "),ck=n(gTe,"A",{href:!0});var _kr=s(ck);nKe=r(_kr,"LayoutXLMProcessor"),_kr.forEach(t),sKe=r(gTe," (LayoutXLM model)"),gTe.forEach(t),lKe=i(No),hh=n(No,"LI",{});var hTe=s(hh);VU=n(hTe,"STRONG",{});var ukr=s(VU);iKe=r(ukr,"speech_to_text"),ukr.forEach(t),dKe=r(hTe," \u2014 "),fk=n(hTe,"A",{href:!0});var bkr=s(fk);cKe=r(bkr,"Speech2TextProcessor"),bkr.forEach(t),fKe=r(hTe," (Speech2Text model)"),hTe.forEach(t),mKe=i(No),ph=n(No,"LI",{});var pTe=s(ph);WU=n(pTe,"STRONG",{});var vkr=s(WU);gKe=r(vkr,"speech_to_text_2"),vkr.forEach(t),hKe=r(pTe," \u2014 "),mk=n(pTe,"A",{href:!0});var Tkr=s(mk);pKe=r(Tkr,"Speech2Text2Processor"),Tkr.forEach(t),_Ke=r(pTe," (Speech2Text2 model)"),pTe.forEach(t),uKe=i(No),_h=n(No,"LI",{});var _Te=s(_h);QU=n(_Te,"STRONG",{});var Fkr=s(QU);bKe=r(Fkr,"trocr"),Fkr.forEach(t),vKe=r(_Te," \u2014 "),gk=n(_Te,"A",{href:!0});var Ckr=s(gk);TKe=r(Ckr,"TrOCRProcessor"),Ckr.forEach(t),FKe=r(_Te," (TrOCR model)"),_Te.forEach(t),CKe=i(No),uh=n(No,"LI",{});var uTe=s(uh);HU=n(uTe,"STRONG",{});var Mkr=s(HU);MKe=r(Mkr,"vision-text-dual-encoder"),Mkr.forEach(t),EKe=r(uTe," \u2014 "),hk=n(uTe,"A",{href:!0});var Ekr=s(hk);yKe=r(Ekr,"VisionTextDualEncoderProcessor"),Ekr.forEach(t),wKe=r(uTe," (VisionTextDualEncoder model)"),uTe.forEach(t),AKe=i(No),bh=n(No,"LI",{});var bTe=s(bh);UU=n(bTe,"STRONG",{});var ykr=s(UU);LKe=r(ykr,"wav2vec2"),ykr.forEach(t),BKe=r(bTe," \u2014 "),pk=n(bTe,"A",{href:!0});var wkr=s(pk);xKe=r(wkr,"Wav2Vec2Processor"),wkr.forEach(t),kKe=r(bTe," (Wav2Vec2 model)"),bTe.forEach(t),No.forEach(t),RKe=i(Rt),m(vh.$$.fragment,Rt),SKe=i(Rt),JU=n(Rt,"P",{});var Akr=s(JU);PKe=r(Akr,"Examples:"),Akr.forEach(t),$Ke=i(Rt),m($4.$$.fragment,Rt),Rt.forEach(t),IKe=i(js),Th=n(js,"DIV",{class:!0});var xBe=s(Th);m(I4.$$.fragment,xBe),jKe=i(xBe),YU=n(xBe,"P",{});var Lkr=s(YU);NKe=r(Lkr,"Register a new processor for this class."),Lkr.forEach(t),xBe.forEach(t),js.forEach(t),ELe=i(d),qi=n(d,"H2",{class:!0});var kBe=s(qi);Fh=n(kBe,"A",{id:!0,class:!0,href:!0});var Bkr=s(Fh);KU=n(Bkr,"SPAN",{});var xkr=s(KU);m(j4.$$.fragment,xkr),xkr.forEach(t),Bkr.forEach(t),DKe=i(kBe),ZU=n(kBe,"SPAN",{});var kkr=s(ZU);qKe=r(kkr,"AutoModel"),kkr.forEach(t),kBe.forEach(t),yLe=i(d),Vo=n(d,"DIV",{class:!0});var Ns=s(Vo);m(N4.$$.fragment,Ns),GKe=i(Ns),Gi=n(Ns,"P",{});var YX=s(Gi);OKe=r(YX,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eJ=n(YX,"CODE",{});var Rkr=s(eJ);XKe=r(Rkr,"from_pretrained()"),Rkr.forEach(t),zKe=r(YX,"class method or the "),oJ=n(YX,"CODE",{});var Skr=s(oJ);VKe=r(Skr,"from_config()"),Skr.forEach(t),WKe=r(YX,`class
method.`),YX.forEach(t),QKe=i(Ns),D4=n(Ns,"P",{});var RBe=s(D4);HKe=r(RBe,"This class cannot be instantiated directly using "),rJ=n(RBe,"CODE",{});var Pkr=s(rJ);UKe=r(Pkr,"__init__()"),Pkr.forEach(t),JKe=r(RBe," (throws an error)."),RBe.forEach(t),YKe=i(Ns),Nr=n(Ns,"DIV",{class:!0});var Ds=s(Nr);m(q4.$$.fragment,Ds),KKe=i(Ds),tJ=n(Ds,"P",{});var $kr=s(tJ);ZKe=r($kr,"Instantiates one of the base model classes of the library from a configuration."),$kr.forEach(t),eZe=i(Ds),Oi=n(Ds,"P",{});var KX=s(Oi);oZe=r(KX,`Note:
Loading a model from its configuration file does `),aJ=n(KX,"STRONG",{});var Ikr=s(aJ);rZe=r(Ikr,"not"),Ikr.forEach(t),tZe=r(KX,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(KX,"CODE",{});var jkr=s(nJ);aZe=r(jkr,"from_pretrained()"),jkr.forEach(t),nZe=r(KX,"to load the model weights."),KX.forEach(t),sZe=i(Ds),sJ=n(Ds,"P",{});var Nkr=s(sJ);lZe=r(Nkr,"Examples:"),Nkr.forEach(t),iZe=i(Ds),m(G4.$$.fragment,Ds),Ds.forEach(t),dZe=i(Ns),xe=n(Ns,"DIV",{class:!0});var St=s(xe);m(O4.$$.fragment,St),cZe=i(St),lJ=n(St,"P",{});var Dkr=s(lJ);fZe=r(Dkr,"Instantiate one of the base model classes of the library from a pretrained model."),Dkr.forEach(t),mZe=i(St),Da=n(St,"P",{});var dC=s(Da);gZe=r(dC,"The model class to instantiate is selected based on the "),iJ=n(dC,"CODE",{});var qkr=s(iJ);hZe=r(qkr,"model_type"),qkr.forEach(t),pZe=r(dC,` property of the config object (either
passed as an argument or loaded from `),dJ=n(dC,"CODE",{});var Gkr=s(dJ);_Ze=r(Gkr,"pretrained_model_name_or_path"),Gkr.forEach(t),uZe=r(dC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cJ=n(dC,"CODE",{});var Okr=s(cJ);bZe=r(Okr,"pretrained_model_name_or_path"),Okr.forEach(t),vZe=r(dC,":"),dC.forEach(t),TZe=i(St),F=n(St,"UL",{});var C=s(F);Ch=n(C,"LI",{});var vTe=s(Ch);fJ=n(vTe,"STRONG",{});var Xkr=s(fJ);FZe=r(Xkr,"albert"),Xkr.forEach(t),CZe=r(vTe," \u2014 "),_k=n(vTe,"A",{href:!0});var zkr=s(_k);MZe=r(zkr,"AlbertModel"),zkr.forEach(t),EZe=r(vTe," (ALBERT model)"),vTe.forEach(t),yZe=i(C),Mh=n(C,"LI",{});var TTe=s(Mh);mJ=n(TTe,"STRONG",{});var Vkr=s(mJ);wZe=r(Vkr,"bart"),Vkr.forEach(t),AZe=r(TTe," \u2014 "),uk=n(TTe,"A",{href:!0});var Wkr=s(uk);LZe=r(Wkr,"BartModel"),Wkr.forEach(t),BZe=r(TTe," (BART model)"),TTe.forEach(t),xZe=i(C),Eh=n(C,"LI",{});var FTe=s(Eh);gJ=n(FTe,"STRONG",{});var Qkr=s(gJ);kZe=r(Qkr,"beit"),Qkr.forEach(t),RZe=r(FTe," \u2014 "),bk=n(FTe,"A",{href:!0});var Hkr=s(bk);SZe=r(Hkr,"BeitModel"),Hkr.forEach(t),PZe=r(FTe," (BEiT model)"),FTe.forEach(t),$Ze=i(C),yh=n(C,"LI",{});var CTe=s(yh);hJ=n(CTe,"STRONG",{});var Ukr=s(hJ);IZe=r(Ukr,"bert"),Ukr.forEach(t),jZe=r(CTe," \u2014 "),vk=n(CTe,"A",{href:!0});var Jkr=s(vk);NZe=r(Jkr,"BertModel"),Jkr.forEach(t),DZe=r(CTe," (BERT model)"),CTe.forEach(t),qZe=i(C),wh=n(C,"LI",{});var MTe=s(wh);pJ=n(MTe,"STRONG",{});var Ykr=s(pJ);GZe=r(Ykr,"bert-generation"),Ykr.forEach(t),OZe=r(MTe," \u2014 "),Tk=n(MTe,"A",{href:!0});var Kkr=s(Tk);XZe=r(Kkr,"BertGenerationEncoder"),Kkr.forEach(t),zZe=r(MTe," (Bert Generation model)"),MTe.forEach(t),VZe=i(C),Ah=n(C,"LI",{});var ETe=s(Ah);_J=n(ETe,"STRONG",{});var Zkr=s(_J);WZe=r(Zkr,"big_bird"),Zkr.forEach(t),QZe=r(ETe," \u2014 "),Fk=n(ETe,"A",{href:!0});var eRr=s(Fk);HZe=r(eRr,"BigBirdModel"),eRr.forEach(t),UZe=r(ETe," (BigBird model)"),ETe.forEach(t),JZe=i(C),Lh=n(C,"LI",{});var yTe=s(Lh);uJ=n(yTe,"STRONG",{});var oRr=s(uJ);YZe=r(oRr,"bigbird_pegasus"),oRr.forEach(t),KZe=r(yTe," \u2014 "),Ck=n(yTe,"A",{href:!0});var rRr=s(Ck);ZZe=r(rRr,"BigBirdPegasusModel"),rRr.forEach(t),eeo=r(yTe," (BigBirdPegasus model)"),yTe.forEach(t),oeo=i(C),Bh=n(C,"LI",{});var wTe=s(Bh);bJ=n(wTe,"STRONG",{});var tRr=s(bJ);reo=r(tRr,"blenderbot"),tRr.forEach(t),teo=r(wTe," \u2014 "),Mk=n(wTe,"A",{href:!0});var aRr=s(Mk);aeo=r(aRr,"BlenderbotModel"),aRr.forEach(t),neo=r(wTe," (Blenderbot model)"),wTe.forEach(t),seo=i(C),xh=n(C,"LI",{});var ATe=s(xh);vJ=n(ATe,"STRONG",{});var nRr=s(vJ);leo=r(nRr,"blenderbot-small"),nRr.forEach(t),ieo=r(ATe," \u2014 "),Ek=n(ATe,"A",{href:!0});var sRr=s(Ek);deo=r(sRr,"BlenderbotSmallModel"),sRr.forEach(t),ceo=r(ATe," (BlenderbotSmall model)"),ATe.forEach(t),feo=i(C),kh=n(C,"LI",{});var LTe=s(kh);TJ=n(LTe,"STRONG",{});var lRr=s(TJ);meo=r(lRr,"camembert"),lRr.forEach(t),geo=r(LTe," \u2014 "),yk=n(LTe,"A",{href:!0});var iRr=s(yk);heo=r(iRr,"CamembertModel"),iRr.forEach(t),peo=r(LTe," (CamemBERT model)"),LTe.forEach(t),_eo=i(C),Rh=n(C,"LI",{});var BTe=s(Rh);FJ=n(BTe,"STRONG",{});var dRr=s(FJ);ueo=r(dRr,"canine"),dRr.forEach(t),beo=r(BTe," \u2014 "),wk=n(BTe,"A",{href:!0});var cRr=s(wk);veo=r(cRr,"CanineModel"),cRr.forEach(t),Teo=r(BTe," (Canine model)"),BTe.forEach(t),Feo=i(C),Sh=n(C,"LI",{});var xTe=s(Sh);CJ=n(xTe,"STRONG",{});var fRr=s(CJ);Ceo=r(fRr,"clip"),fRr.forEach(t),Meo=r(xTe," \u2014 "),Ak=n(xTe,"A",{href:!0});var mRr=s(Ak);Eeo=r(mRr,"CLIPModel"),mRr.forEach(t),yeo=r(xTe," (CLIP model)"),xTe.forEach(t),weo=i(C),Ph=n(C,"LI",{});var kTe=s(Ph);MJ=n(kTe,"STRONG",{});var gRr=s(MJ);Aeo=r(gRr,"convbert"),gRr.forEach(t),Leo=r(kTe," \u2014 "),Lk=n(kTe,"A",{href:!0});var hRr=s(Lk);Beo=r(hRr,"ConvBertModel"),hRr.forEach(t),xeo=r(kTe," (ConvBERT model)"),kTe.forEach(t),keo=i(C),$h=n(C,"LI",{});var RTe=s($h);EJ=n(RTe,"STRONG",{});var pRr=s(EJ);Reo=r(pRr,"convnext"),pRr.forEach(t),Seo=r(RTe," \u2014 "),Bk=n(RTe,"A",{href:!0});var _Rr=s(Bk);Peo=r(_Rr,"ConvNextModel"),_Rr.forEach(t),$eo=r(RTe," (ConvNext model)"),RTe.forEach(t),Ieo=i(C),Ih=n(C,"LI",{});var STe=s(Ih);yJ=n(STe,"STRONG",{});var uRr=s(yJ);jeo=r(uRr,"ctrl"),uRr.forEach(t),Neo=r(STe," \u2014 "),xk=n(STe,"A",{href:!0});var bRr=s(xk);Deo=r(bRr,"CTRLModel"),bRr.forEach(t),qeo=r(STe," (CTRL model)"),STe.forEach(t),Geo=i(C),jh=n(C,"LI",{});var PTe=s(jh);wJ=n(PTe,"STRONG",{});var vRr=s(wJ);Oeo=r(vRr,"deberta"),vRr.forEach(t),Xeo=r(PTe," \u2014 "),kk=n(PTe,"A",{href:!0});var TRr=s(kk);zeo=r(TRr,"DebertaModel"),TRr.forEach(t),Veo=r(PTe," (DeBERTa model)"),PTe.forEach(t),Weo=i(C),Nh=n(C,"LI",{});var $Te=s(Nh);AJ=n($Te,"STRONG",{});var FRr=s(AJ);Qeo=r(FRr,"deberta-v2"),FRr.forEach(t),Heo=r($Te," \u2014 "),Rk=n($Te,"A",{href:!0});var CRr=s(Rk);Ueo=r(CRr,"DebertaV2Model"),CRr.forEach(t),Jeo=r($Te," (DeBERTa-v2 model)"),$Te.forEach(t),Yeo=i(C),Dh=n(C,"LI",{});var ITe=s(Dh);LJ=n(ITe,"STRONG",{});var MRr=s(LJ);Keo=r(MRr,"deit"),MRr.forEach(t),Zeo=r(ITe," \u2014 "),Sk=n(ITe,"A",{href:!0});var ERr=s(Sk);eoo=r(ERr,"DeiTModel"),ERr.forEach(t),ooo=r(ITe," (DeiT model)"),ITe.forEach(t),roo=i(C),qh=n(C,"LI",{});var jTe=s(qh);BJ=n(jTe,"STRONG",{});var yRr=s(BJ);too=r(yRr,"detr"),yRr.forEach(t),aoo=r(jTe," \u2014 "),Pk=n(jTe,"A",{href:!0});var wRr=s(Pk);noo=r(wRr,"DetrModel"),wRr.forEach(t),soo=r(jTe," (DETR model)"),jTe.forEach(t),loo=i(C),Gh=n(C,"LI",{});var NTe=s(Gh);xJ=n(NTe,"STRONG",{});var ARr=s(xJ);ioo=r(ARr,"distilbert"),ARr.forEach(t),doo=r(NTe," \u2014 "),$k=n(NTe,"A",{href:!0});var LRr=s($k);coo=r(LRr,"DistilBertModel"),LRr.forEach(t),foo=r(NTe," (DistilBERT model)"),NTe.forEach(t),moo=i(C),Oh=n(C,"LI",{});var DTe=s(Oh);kJ=n(DTe,"STRONG",{});var BRr=s(kJ);goo=r(BRr,"dpr"),BRr.forEach(t),hoo=r(DTe," \u2014 "),Ik=n(DTe,"A",{href:!0});var xRr=s(Ik);poo=r(xRr,"DPRQuestionEncoder"),xRr.forEach(t),_oo=r(DTe," (DPR model)"),DTe.forEach(t),uoo=i(C),Xh=n(C,"LI",{});var qTe=s(Xh);RJ=n(qTe,"STRONG",{});var kRr=s(RJ);boo=r(kRr,"electra"),kRr.forEach(t),voo=r(qTe," \u2014 "),jk=n(qTe,"A",{href:!0});var RRr=s(jk);Too=r(RRr,"ElectraModel"),RRr.forEach(t),Foo=r(qTe," (ELECTRA model)"),qTe.forEach(t),Coo=i(C),zh=n(C,"LI",{});var GTe=s(zh);SJ=n(GTe,"STRONG",{});var SRr=s(SJ);Moo=r(SRr,"flaubert"),SRr.forEach(t),Eoo=r(GTe," \u2014 "),Nk=n(GTe,"A",{href:!0});var PRr=s(Nk);yoo=r(PRr,"FlaubertModel"),PRr.forEach(t),woo=r(GTe," (FlauBERT model)"),GTe.forEach(t),Aoo=i(C),Vh=n(C,"LI",{});var OTe=s(Vh);PJ=n(OTe,"STRONG",{});var $Rr=s(PJ);Loo=r($Rr,"fnet"),$Rr.forEach(t),Boo=r(OTe," \u2014 "),Dk=n(OTe,"A",{href:!0});var IRr=s(Dk);xoo=r(IRr,"FNetModel"),IRr.forEach(t),koo=r(OTe," (FNet model)"),OTe.forEach(t),Roo=i(C),Wh=n(C,"LI",{});var XTe=s(Wh);$J=n(XTe,"STRONG",{});var jRr=s($J);Soo=r(jRr,"fsmt"),jRr.forEach(t),Poo=r(XTe," \u2014 "),qk=n(XTe,"A",{href:!0});var NRr=s(qk);$oo=r(NRr,"FSMTModel"),NRr.forEach(t),Ioo=r(XTe," (FairSeq Machine-Translation model)"),XTe.forEach(t),joo=i(C),ks=n(C,"LI",{});var D0=s(ks);IJ=n(D0,"STRONG",{});var DRr=s(IJ);Noo=r(DRr,"funnel"),DRr.forEach(t),Doo=r(D0," \u2014 "),Gk=n(D0,"A",{href:!0});var qRr=s(Gk);qoo=r(qRr,"FunnelModel"),qRr.forEach(t),Goo=r(D0," or "),Ok=n(D0,"A",{href:!0});var GRr=s(Ok);Ooo=r(GRr,"FunnelBaseModel"),GRr.forEach(t),Xoo=r(D0," (Funnel Transformer model)"),D0.forEach(t),zoo=i(C),Qh=n(C,"LI",{});var zTe=s(Qh);jJ=n(zTe,"STRONG",{});var ORr=s(jJ);Voo=r(ORr,"gpt2"),ORr.forEach(t),Woo=r(zTe," \u2014 "),Xk=n(zTe,"A",{href:!0});var XRr=s(Xk);Qoo=r(XRr,"GPT2Model"),XRr.forEach(t),Hoo=r(zTe," (OpenAI GPT-2 model)"),zTe.forEach(t),Uoo=i(C),Hh=n(C,"LI",{});var VTe=s(Hh);NJ=n(VTe,"STRONG",{});var zRr=s(NJ);Joo=r(zRr,"gpt_neo"),zRr.forEach(t),Yoo=r(VTe," \u2014 "),zk=n(VTe,"A",{href:!0});var VRr=s(zk);Koo=r(VRr,"GPTNeoModel"),VRr.forEach(t),Zoo=r(VTe," (GPT Neo model)"),VTe.forEach(t),ero=i(C),Uh=n(C,"LI",{});var WTe=s(Uh);DJ=n(WTe,"STRONG",{});var WRr=s(DJ);oro=r(WRr,"gptj"),WRr.forEach(t),rro=r(WTe," \u2014 "),Vk=n(WTe,"A",{href:!0});var QRr=s(Vk);tro=r(QRr,"GPTJModel"),QRr.forEach(t),aro=r(WTe," (GPT-J model)"),WTe.forEach(t),nro=i(C),Jh=n(C,"LI",{});var QTe=s(Jh);qJ=n(QTe,"STRONG",{});var HRr=s(qJ);sro=r(HRr,"hubert"),HRr.forEach(t),lro=r(QTe," \u2014 "),Wk=n(QTe,"A",{href:!0});var URr=s(Wk);iro=r(URr,"HubertModel"),URr.forEach(t),dro=r(QTe," (Hubert model)"),QTe.forEach(t),cro=i(C),Yh=n(C,"LI",{});var HTe=s(Yh);GJ=n(HTe,"STRONG",{});var JRr=s(GJ);fro=r(JRr,"ibert"),JRr.forEach(t),mro=r(HTe," \u2014 "),Qk=n(HTe,"A",{href:!0});var YRr=s(Qk);gro=r(YRr,"IBertModel"),YRr.forEach(t),hro=r(HTe," (I-BERT model)"),HTe.forEach(t),pro=i(C),Kh=n(C,"LI",{});var UTe=s(Kh);OJ=n(UTe,"STRONG",{});var KRr=s(OJ);_ro=r(KRr,"imagegpt"),KRr.forEach(t),uro=r(UTe," \u2014 "),Hk=n(UTe,"A",{href:!0});var ZRr=s(Hk);bro=r(ZRr,"ImageGPTModel"),ZRr.forEach(t),vro=r(UTe," (ImageGPT model)"),UTe.forEach(t),Tro=i(C),Zh=n(C,"LI",{});var JTe=s(Zh);XJ=n(JTe,"STRONG",{});var eSr=s(XJ);Fro=r(eSr,"layoutlm"),eSr.forEach(t),Cro=r(JTe," \u2014 "),Uk=n(JTe,"A",{href:!0});var oSr=s(Uk);Mro=r(oSr,"LayoutLMModel"),oSr.forEach(t),Ero=r(JTe," (LayoutLM model)"),JTe.forEach(t),yro=i(C),ep=n(C,"LI",{});var YTe=s(ep);zJ=n(YTe,"STRONG",{});var rSr=s(zJ);wro=r(rSr,"layoutlmv2"),rSr.forEach(t),Aro=r(YTe," \u2014 "),Jk=n(YTe,"A",{href:!0});var tSr=s(Jk);Lro=r(tSr,"LayoutLMv2Model"),tSr.forEach(t),Bro=r(YTe," (LayoutLMv2 model)"),YTe.forEach(t),xro=i(C),op=n(C,"LI",{});var KTe=s(op);VJ=n(KTe,"STRONG",{});var aSr=s(VJ);kro=r(aSr,"led"),aSr.forEach(t),Rro=r(KTe," \u2014 "),Yk=n(KTe,"A",{href:!0});var nSr=s(Yk);Sro=r(nSr,"LEDModel"),nSr.forEach(t),Pro=r(KTe," (LED model)"),KTe.forEach(t),$ro=i(C),rp=n(C,"LI",{});var ZTe=s(rp);WJ=n(ZTe,"STRONG",{});var sSr=s(WJ);Iro=r(sSr,"longformer"),sSr.forEach(t),jro=r(ZTe," \u2014 "),Kk=n(ZTe,"A",{href:!0});var lSr=s(Kk);Nro=r(lSr,"LongformerModel"),lSr.forEach(t),Dro=r(ZTe," (Longformer model)"),ZTe.forEach(t),qro=i(C),tp=n(C,"LI",{});var e7e=s(tp);QJ=n(e7e,"STRONG",{});var iSr=s(QJ);Gro=r(iSr,"luke"),iSr.forEach(t),Oro=r(e7e," \u2014 "),Zk=n(e7e,"A",{href:!0});var dSr=s(Zk);Xro=r(dSr,"LukeModel"),dSr.forEach(t),zro=r(e7e," (LUKE model)"),e7e.forEach(t),Vro=i(C),ap=n(C,"LI",{});var o7e=s(ap);HJ=n(o7e,"STRONG",{});var cSr=s(HJ);Wro=r(cSr,"lxmert"),cSr.forEach(t),Qro=r(o7e," \u2014 "),eR=n(o7e,"A",{href:!0});var fSr=s(eR);Hro=r(fSr,"LxmertModel"),fSr.forEach(t),Uro=r(o7e," (LXMERT model)"),o7e.forEach(t),Jro=i(C),np=n(C,"LI",{});var r7e=s(np);UJ=n(r7e,"STRONG",{});var mSr=s(UJ);Yro=r(mSr,"m2m_100"),mSr.forEach(t),Kro=r(r7e," \u2014 "),oR=n(r7e,"A",{href:!0});var gSr=s(oR);Zro=r(gSr,"M2M100Model"),gSr.forEach(t),eto=r(r7e," (M2M100 model)"),r7e.forEach(t),oto=i(C),sp=n(C,"LI",{});var t7e=s(sp);JJ=n(t7e,"STRONG",{});var hSr=s(JJ);rto=r(hSr,"marian"),hSr.forEach(t),tto=r(t7e," \u2014 "),rR=n(t7e,"A",{href:!0});var pSr=s(rR);ato=r(pSr,"MarianModel"),pSr.forEach(t),nto=r(t7e," (Marian model)"),t7e.forEach(t),sto=i(C),lp=n(C,"LI",{});var a7e=s(lp);YJ=n(a7e,"STRONG",{});var _Sr=s(YJ);lto=r(_Sr,"mbart"),_Sr.forEach(t),ito=r(a7e," \u2014 "),tR=n(a7e,"A",{href:!0});var uSr=s(tR);dto=r(uSr,"MBartModel"),uSr.forEach(t),cto=r(a7e," (mBART model)"),a7e.forEach(t),fto=i(C),ip=n(C,"LI",{});var n7e=s(ip);KJ=n(n7e,"STRONG",{});var bSr=s(KJ);mto=r(bSr,"megatron-bert"),bSr.forEach(t),gto=r(n7e," \u2014 "),aR=n(n7e,"A",{href:!0});var vSr=s(aR);hto=r(vSr,"MegatronBertModel"),vSr.forEach(t),pto=r(n7e," (MegatronBert model)"),n7e.forEach(t),_to=i(C),dp=n(C,"LI",{});var s7e=s(dp);ZJ=n(s7e,"STRONG",{});var TSr=s(ZJ);uto=r(TSr,"mobilebert"),TSr.forEach(t),bto=r(s7e," \u2014 "),nR=n(s7e,"A",{href:!0});var FSr=s(nR);vto=r(FSr,"MobileBertModel"),FSr.forEach(t),Tto=r(s7e," (MobileBERT model)"),s7e.forEach(t),Fto=i(C),cp=n(C,"LI",{});var l7e=s(cp);eY=n(l7e,"STRONG",{});var CSr=s(eY);Cto=r(CSr,"mpnet"),CSr.forEach(t),Mto=r(l7e," \u2014 "),sR=n(l7e,"A",{href:!0});var MSr=s(sR);Eto=r(MSr,"MPNetModel"),MSr.forEach(t),yto=r(l7e," (MPNet model)"),l7e.forEach(t),wto=i(C),fp=n(C,"LI",{});var i7e=s(fp);oY=n(i7e,"STRONG",{});var ESr=s(oY);Ato=r(ESr,"mt5"),ESr.forEach(t),Lto=r(i7e," \u2014 "),lR=n(i7e,"A",{href:!0});var ySr=s(lR);Bto=r(ySr,"MT5Model"),ySr.forEach(t),xto=r(i7e," (mT5 model)"),i7e.forEach(t),kto=i(C),mp=n(C,"LI",{});var d7e=s(mp);rY=n(d7e,"STRONG",{});var wSr=s(rY);Rto=r(wSr,"nystromformer"),wSr.forEach(t),Sto=r(d7e," \u2014 "),iR=n(d7e,"A",{href:!0});var ASr=s(iR);Pto=r(ASr,"NystromformerModel"),ASr.forEach(t),$to=r(d7e," (Nystromformer model)"),d7e.forEach(t),Ito=i(C),gp=n(C,"LI",{});var c7e=s(gp);tY=n(c7e,"STRONG",{});var LSr=s(tY);jto=r(LSr,"openai-gpt"),LSr.forEach(t),Nto=r(c7e," \u2014 "),dR=n(c7e,"A",{href:!0});var BSr=s(dR);Dto=r(BSr,"OpenAIGPTModel"),BSr.forEach(t),qto=r(c7e," (OpenAI GPT model)"),c7e.forEach(t),Gto=i(C),hp=n(C,"LI",{});var f7e=s(hp);aY=n(f7e,"STRONG",{});var xSr=s(aY);Oto=r(xSr,"pegasus"),xSr.forEach(t),Xto=r(f7e," \u2014 "),cR=n(f7e,"A",{href:!0});var kSr=s(cR);zto=r(kSr,"PegasusModel"),kSr.forEach(t),Vto=r(f7e," (Pegasus model)"),f7e.forEach(t),Wto=i(C),pp=n(C,"LI",{});var m7e=s(pp);nY=n(m7e,"STRONG",{});var RSr=s(nY);Qto=r(RSr,"perceiver"),RSr.forEach(t),Hto=r(m7e," \u2014 "),fR=n(m7e,"A",{href:!0});var SSr=s(fR);Uto=r(SSr,"PerceiverModel"),SSr.forEach(t),Jto=r(m7e," (Perceiver model)"),m7e.forEach(t),Yto=i(C),_p=n(C,"LI",{});var g7e=s(_p);sY=n(g7e,"STRONG",{});var PSr=s(sY);Kto=r(PSr,"plbart"),PSr.forEach(t),Zto=r(g7e," \u2014 "),mR=n(g7e,"A",{href:!0});var $Sr=s(mR);eao=r($Sr,"PLBartModel"),$Sr.forEach(t),oao=r(g7e," (PLBart model)"),g7e.forEach(t),rao=i(C),up=n(C,"LI",{});var h7e=s(up);lY=n(h7e,"STRONG",{});var ISr=s(lY);tao=r(ISr,"poolformer"),ISr.forEach(t),aao=r(h7e," \u2014 "),gR=n(h7e,"A",{href:!0});var jSr=s(gR);nao=r(jSr,"PoolFormerModel"),jSr.forEach(t),sao=r(h7e," (PoolFormer model)"),h7e.forEach(t),lao=i(C),bp=n(C,"LI",{});var p7e=s(bp);iY=n(p7e,"STRONG",{});var NSr=s(iY);iao=r(NSr,"prophetnet"),NSr.forEach(t),dao=r(p7e," \u2014 "),hR=n(p7e,"A",{href:!0});var DSr=s(hR);cao=r(DSr,"ProphetNetModel"),DSr.forEach(t),fao=r(p7e," (ProphetNet model)"),p7e.forEach(t),mao=i(C),vp=n(C,"LI",{});var _7e=s(vp);dY=n(_7e,"STRONG",{});var qSr=s(dY);gao=r(qSr,"qdqbert"),qSr.forEach(t),hao=r(_7e," \u2014 "),pR=n(_7e,"A",{href:!0});var GSr=s(pR);pao=r(GSr,"QDQBertModel"),GSr.forEach(t),_ao=r(_7e," (QDQBert model)"),_7e.forEach(t),uao=i(C),Tp=n(C,"LI",{});var u7e=s(Tp);cY=n(u7e,"STRONG",{});var OSr=s(cY);bao=r(OSr,"reformer"),OSr.forEach(t),vao=r(u7e," \u2014 "),_R=n(u7e,"A",{href:!0});var XSr=s(_R);Tao=r(XSr,"ReformerModel"),XSr.forEach(t),Fao=r(u7e," (Reformer model)"),u7e.forEach(t),Cao=i(C),Fp=n(C,"LI",{});var b7e=s(Fp);fY=n(b7e,"STRONG",{});var zSr=s(fY);Mao=r(zSr,"rembert"),zSr.forEach(t),Eao=r(b7e," \u2014 "),uR=n(b7e,"A",{href:!0});var VSr=s(uR);yao=r(VSr,"RemBertModel"),VSr.forEach(t),wao=r(b7e," (RemBERT model)"),b7e.forEach(t),Aao=i(C),Cp=n(C,"LI",{});var v7e=s(Cp);mY=n(v7e,"STRONG",{});var WSr=s(mY);Lao=r(WSr,"retribert"),WSr.forEach(t),Bao=r(v7e," \u2014 "),bR=n(v7e,"A",{href:!0});var QSr=s(bR);xao=r(QSr,"RetriBertModel"),QSr.forEach(t),kao=r(v7e," (RetriBERT model)"),v7e.forEach(t),Rao=i(C),Mp=n(C,"LI",{});var T7e=s(Mp);gY=n(T7e,"STRONG",{});var HSr=s(gY);Sao=r(HSr,"roberta"),HSr.forEach(t),Pao=r(T7e," \u2014 "),vR=n(T7e,"A",{href:!0});var USr=s(vR);$ao=r(USr,"RobertaModel"),USr.forEach(t),Iao=r(T7e," (RoBERTa model)"),T7e.forEach(t),jao=i(C),Ep=n(C,"LI",{});var F7e=s(Ep);hY=n(F7e,"STRONG",{});var JSr=s(hY);Nao=r(JSr,"roformer"),JSr.forEach(t),Dao=r(F7e," \u2014 "),TR=n(F7e,"A",{href:!0});var YSr=s(TR);qao=r(YSr,"RoFormerModel"),YSr.forEach(t),Gao=r(F7e," (RoFormer model)"),F7e.forEach(t),Oao=i(C),yp=n(C,"LI",{});var C7e=s(yp);pY=n(C7e,"STRONG",{});var KSr=s(pY);Xao=r(KSr,"segformer"),KSr.forEach(t),zao=r(C7e," \u2014 "),FR=n(C7e,"A",{href:!0});var ZSr=s(FR);Vao=r(ZSr,"SegformerModel"),ZSr.forEach(t),Wao=r(C7e," (SegFormer model)"),C7e.forEach(t),Qao=i(C),wp=n(C,"LI",{});var M7e=s(wp);_Y=n(M7e,"STRONG",{});var ePr=s(_Y);Hao=r(ePr,"sew"),ePr.forEach(t),Uao=r(M7e," \u2014 "),CR=n(M7e,"A",{href:!0});var oPr=s(CR);Jao=r(oPr,"SEWModel"),oPr.forEach(t),Yao=r(M7e," (SEW model)"),M7e.forEach(t),Kao=i(C),Ap=n(C,"LI",{});var E7e=s(Ap);uY=n(E7e,"STRONG",{});var rPr=s(uY);Zao=r(rPr,"sew-d"),rPr.forEach(t),eno=r(E7e," \u2014 "),MR=n(E7e,"A",{href:!0});var tPr=s(MR);ono=r(tPr,"SEWDModel"),tPr.forEach(t),rno=r(E7e," (SEW-D model)"),E7e.forEach(t),tno=i(C),Lp=n(C,"LI",{});var y7e=s(Lp);bY=n(y7e,"STRONG",{});var aPr=s(bY);ano=r(aPr,"speech_to_text"),aPr.forEach(t),nno=r(y7e," \u2014 "),ER=n(y7e,"A",{href:!0});var nPr=s(ER);sno=r(nPr,"Speech2TextModel"),nPr.forEach(t),lno=r(y7e," (Speech2Text model)"),y7e.forEach(t),ino=i(C),Bp=n(C,"LI",{});var w7e=s(Bp);vY=n(w7e,"STRONG",{});var sPr=s(vY);dno=r(sPr,"splinter"),sPr.forEach(t),cno=r(w7e," \u2014 "),yR=n(w7e,"A",{href:!0});var lPr=s(yR);fno=r(lPr,"SplinterModel"),lPr.forEach(t),mno=r(w7e," (Splinter model)"),w7e.forEach(t),gno=i(C),xp=n(C,"LI",{});var A7e=s(xp);TY=n(A7e,"STRONG",{});var iPr=s(TY);hno=r(iPr,"squeezebert"),iPr.forEach(t),pno=r(A7e," \u2014 "),wR=n(A7e,"A",{href:!0});var dPr=s(wR);_no=r(dPr,"SqueezeBertModel"),dPr.forEach(t),uno=r(A7e," (SqueezeBERT model)"),A7e.forEach(t),bno=i(C),kp=n(C,"LI",{});var L7e=s(kp);FY=n(L7e,"STRONG",{});var cPr=s(FY);vno=r(cPr,"swin"),cPr.forEach(t),Tno=r(L7e," \u2014 "),AR=n(L7e,"A",{href:!0});var fPr=s(AR);Fno=r(fPr,"SwinModel"),fPr.forEach(t),Cno=r(L7e," (Swin model)"),L7e.forEach(t),Mno=i(C),Rp=n(C,"LI",{});var B7e=s(Rp);CY=n(B7e,"STRONG",{});var mPr=s(CY);Eno=r(mPr,"t5"),mPr.forEach(t),yno=r(B7e," \u2014 "),LR=n(B7e,"A",{href:!0});var gPr=s(LR);wno=r(gPr,"T5Model"),gPr.forEach(t),Ano=r(B7e," (T5 model)"),B7e.forEach(t),Lno=i(C),Sp=n(C,"LI",{});var x7e=s(Sp);MY=n(x7e,"STRONG",{});var hPr=s(MY);Bno=r(hPr,"tapas"),hPr.forEach(t),xno=r(x7e," \u2014 "),BR=n(x7e,"A",{href:!0});var pPr=s(BR);kno=r(pPr,"TapasModel"),pPr.forEach(t),Rno=r(x7e," (TAPAS model)"),x7e.forEach(t),Sno=i(C),Pp=n(C,"LI",{});var k7e=s(Pp);EY=n(k7e,"STRONG",{});var _Pr=s(EY);Pno=r(_Pr,"transfo-xl"),_Pr.forEach(t),$no=r(k7e," \u2014 "),xR=n(k7e,"A",{href:!0});var uPr=s(xR);Ino=r(uPr,"TransfoXLModel"),uPr.forEach(t),jno=r(k7e," (Transformer-XL model)"),k7e.forEach(t),Nno=i(C),$p=n(C,"LI",{});var R7e=s($p);yY=n(R7e,"STRONG",{});var bPr=s(yY);Dno=r(bPr,"unispeech"),bPr.forEach(t),qno=r(R7e," \u2014 "),kR=n(R7e,"A",{href:!0});var vPr=s(kR);Gno=r(vPr,"UniSpeechModel"),vPr.forEach(t),Ono=r(R7e," (UniSpeech model)"),R7e.forEach(t),Xno=i(C),Ip=n(C,"LI",{});var S7e=s(Ip);wY=n(S7e,"STRONG",{});var TPr=s(wY);zno=r(TPr,"unispeech-sat"),TPr.forEach(t),Vno=r(S7e," \u2014 "),RR=n(S7e,"A",{href:!0});var FPr=s(RR);Wno=r(FPr,"UniSpeechSatModel"),FPr.forEach(t),Qno=r(S7e," (UniSpeechSat model)"),S7e.forEach(t),Hno=i(C),jp=n(C,"LI",{});var P7e=s(jp);AY=n(P7e,"STRONG",{});var CPr=s(AY);Uno=r(CPr,"vilt"),CPr.forEach(t),Jno=r(P7e," \u2014 "),SR=n(P7e,"A",{href:!0});var MPr=s(SR);Yno=r(MPr,"ViltModel"),MPr.forEach(t),Kno=r(P7e," (ViLT model)"),P7e.forEach(t),Zno=i(C),Np=n(C,"LI",{});var $7e=s(Np);LY=n($7e,"STRONG",{});var EPr=s(LY);eso=r(EPr,"vision-text-dual-encoder"),EPr.forEach(t),oso=r($7e," \u2014 "),PR=n($7e,"A",{href:!0});var yPr=s(PR);rso=r(yPr,"VisionTextDualEncoderModel"),yPr.forEach(t),tso=r($7e," (VisionTextDualEncoder model)"),$7e.forEach(t),aso=i(C),Dp=n(C,"LI",{});var I7e=s(Dp);BY=n(I7e,"STRONG",{});var wPr=s(BY);nso=r(wPr,"visual_bert"),wPr.forEach(t),sso=r(I7e," \u2014 "),$R=n(I7e,"A",{href:!0});var APr=s($R);lso=r(APr,"VisualBertModel"),APr.forEach(t),iso=r(I7e," (VisualBert model)"),I7e.forEach(t),dso=i(C),qp=n(C,"LI",{});var j7e=s(qp);xY=n(j7e,"STRONG",{});var LPr=s(xY);cso=r(LPr,"vit"),LPr.forEach(t),fso=r(j7e," \u2014 "),IR=n(j7e,"A",{href:!0});var BPr=s(IR);mso=r(BPr,"ViTModel"),BPr.forEach(t),gso=r(j7e," (ViT model)"),j7e.forEach(t),hso=i(C),Gp=n(C,"LI",{});var N7e=s(Gp);kY=n(N7e,"STRONG",{});var xPr=s(kY);pso=r(xPr,"vit_mae"),xPr.forEach(t),_so=r(N7e," \u2014 "),jR=n(N7e,"A",{href:!0});var kPr=s(jR);uso=r(kPr,"ViTMAEModel"),kPr.forEach(t),bso=r(N7e," (ViTMAE model)"),N7e.forEach(t),vso=i(C),Op=n(C,"LI",{});var D7e=s(Op);RY=n(D7e,"STRONG",{});var RPr=s(RY);Tso=r(RPr,"wav2vec2"),RPr.forEach(t),Fso=r(D7e," \u2014 "),NR=n(D7e,"A",{href:!0});var SPr=s(NR);Cso=r(SPr,"Wav2Vec2Model"),SPr.forEach(t),Mso=r(D7e," (Wav2Vec2 model)"),D7e.forEach(t),Eso=i(C),Xp=n(C,"LI",{});var q7e=s(Xp);SY=n(q7e,"STRONG",{});var PPr=s(SY);yso=r(PPr,"wavlm"),PPr.forEach(t),wso=r(q7e," \u2014 "),DR=n(q7e,"A",{href:!0});var $Pr=s(DR);Aso=r($Pr,"WavLMModel"),$Pr.forEach(t),Lso=r(q7e," (WavLM model)"),q7e.forEach(t),Bso=i(C),zp=n(C,"LI",{});var G7e=s(zp);PY=n(G7e,"STRONG",{});var IPr=s(PY);xso=r(IPr,"xglm"),IPr.forEach(t),kso=r(G7e," \u2014 "),qR=n(G7e,"A",{href:!0});var jPr=s(qR);Rso=r(jPr,"XGLMModel"),jPr.forEach(t),Sso=r(G7e," (XGLM model)"),G7e.forEach(t),Pso=i(C),Vp=n(C,"LI",{});var O7e=s(Vp);$Y=n(O7e,"STRONG",{});var NPr=s($Y);$so=r(NPr,"xlm"),NPr.forEach(t),Iso=r(O7e," \u2014 "),GR=n(O7e,"A",{href:!0});var DPr=s(GR);jso=r(DPr,"XLMModel"),DPr.forEach(t),Nso=r(O7e," (XLM model)"),O7e.forEach(t),Dso=i(C),Wp=n(C,"LI",{});var X7e=s(Wp);IY=n(X7e,"STRONG",{});var qPr=s(IY);qso=r(qPr,"xlm-prophetnet"),qPr.forEach(t),Gso=r(X7e," \u2014 "),OR=n(X7e,"A",{href:!0});var GPr=s(OR);Oso=r(GPr,"XLMProphetNetModel"),GPr.forEach(t),Xso=r(X7e," (XLMProphetNet model)"),X7e.forEach(t),zso=i(C),Qp=n(C,"LI",{});var z7e=s(Qp);jY=n(z7e,"STRONG",{});var OPr=s(jY);Vso=r(OPr,"xlm-roberta"),OPr.forEach(t),Wso=r(z7e," \u2014 "),XR=n(z7e,"A",{href:!0});var XPr=s(XR);Qso=r(XPr,"XLMRobertaModel"),XPr.forEach(t),Hso=r(z7e," (XLM-RoBERTa model)"),z7e.forEach(t),Uso=i(C),Hp=n(C,"LI",{});var V7e=s(Hp);NY=n(V7e,"STRONG",{});var zPr=s(NY);Jso=r(zPr,"xlm-roberta-xl"),zPr.forEach(t),Yso=r(V7e," \u2014 "),zR=n(V7e,"A",{href:!0});var VPr=s(zR);Kso=r(VPr,"XLMRobertaXLModel"),VPr.forEach(t),Zso=r(V7e," (XLM-RoBERTa-XL model)"),V7e.forEach(t),elo=i(C),Up=n(C,"LI",{});var W7e=s(Up);DY=n(W7e,"STRONG",{});var WPr=s(DY);olo=r(WPr,"xlnet"),WPr.forEach(t),rlo=r(W7e," \u2014 "),VR=n(W7e,"A",{href:!0});var QPr=s(VR);tlo=r(QPr,"XLNetModel"),QPr.forEach(t),alo=r(W7e," (XLNet model)"),W7e.forEach(t),nlo=i(C),Jp=n(C,"LI",{});var Q7e=s(Jp);qY=n(Q7e,"STRONG",{});var HPr=s(qY);slo=r(HPr,"yoso"),HPr.forEach(t),llo=r(Q7e," \u2014 "),WR=n(Q7e,"A",{href:!0});var UPr=s(WR);ilo=r(UPr,"YosoModel"),UPr.forEach(t),dlo=r(Q7e," (YOSO model)"),Q7e.forEach(t),C.forEach(t),clo=i(St),Yp=n(St,"P",{});var H7e=s(Yp);flo=r(H7e,"The model is set in evaluation mode by default using "),GY=n(H7e,"CODE",{});var JPr=s(GY);mlo=r(JPr,"model.eval()"),JPr.forEach(t),glo=r(H7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OY=n(H7e,"CODE",{});var YPr=s(OY);hlo=r(YPr,"model.train()"),YPr.forEach(t),H7e.forEach(t),plo=i(St),XY=n(St,"P",{});var KPr=s(XY);_lo=r(KPr,"Examples:"),KPr.forEach(t),ulo=i(St),m(X4.$$.fragment,St),St.forEach(t),Ns.forEach(t),wLe=i(d),Xi=n(d,"H2",{class:!0});var SBe=s(Xi);Kp=n(SBe,"A",{id:!0,class:!0,href:!0});var ZPr=s(Kp);zY=n(ZPr,"SPAN",{});var e$r=s(zY);m(z4.$$.fragment,e$r),e$r.forEach(t),ZPr.forEach(t),blo=i(SBe),VY=n(SBe,"SPAN",{});var o$r=s(VY);vlo=r(o$r,"AutoModelForPreTraining"),o$r.forEach(t),SBe.forEach(t),ALe=i(d),Wo=n(d,"DIV",{class:!0});var qs=s(Wo);m(V4.$$.fragment,qs),Tlo=i(qs),zi=n(qs,"P",{});var ZX=s(zi);Flo=r(ZX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WY=n(ZX,"CODE",{});var r$r=s(WY);Clo=r(r$r,"from_pretrained()"),r$r.forEach(t),Mlo=r(ZX,"class method or the "),QY=n(ZX,"CODE",{});var t$r=s(QY);Elo=r(t$r,"from_config()"),t$r.forEach(t),ylo=r(ZX,`class
method.`),ZX.forEach(t),wlo=i(qs),W4=n(qs,"P",{});var PBe=s(W4);Alo=r(PBe,"This class cannot be instantiated directly using "),HY=n(PBe,"CODE",{});var a$r=s(HY);Llo=r(a$r,"__init__()"),a$r.forEach(t),Blo=r(PBe," (throws an error)."),PBe.forEach(t),xlo=i(qs),Dr=n(qs,"DIV",{class:!0});var Gs=s(Dr);m(Q4.$$.fragment,Gs),klo=i(Gs),UY=n(Gs,"P",{});var n$r=s(UY);Rlo=r(n$r,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),n$r.forEach(t),Slo=i(Gs),Vi=n(Gs,"P",{});var ez=s(Vi);Plo=r(ez,`Note:
Loading a model from its configuration file does `),JY=n(ez,"STRONG",{});var s$r=s(JY);$lo=r(s$r,"not"),s$r.forEach(t),Ilo=r(ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=n(ez,"CODE",{});var l$r=s(YY);jlo=r(l$r,"from_pretrained()"),l$r.forEach(t),Nlo=r(ez,"to load the model weights."),ez.forEach(t),Dlo=i(Gs),KY=n(Gs,"P",{});var i$r=s(KY);qlo=r(i$r,"Examples:"),i$r.forEach(t),Glo=i(Gs),m(H4.$$.fragment,Gs),Gs.forEach(t),Olo=i(qs),ke=n(qs,"DIV",{class:!0});var Pt=s(ke);m(U4.$$.fragment,Pt),Xlo=i(Pt),ZY=n(Pt,"P",{});var d$r=s(ZY);zlo=r(d$r,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),d$r.forEach(t),Vlo=i(Pt),qa=n(Pt,"P",{});var cC=s(qa);Wlo=r(cC,"The model class to instantiate is selected based on the "),eK=n(cC,"CODE",{});var c$r=s(eK);Qlo=r(c$r,"model_type"),c$r.forEach(t),Hlo=r(cC,` property of the config object (either
passed as an argument or loaded from `),oK=n(cC,"CODE",{});var f$r=s(oK);Ulo=r(f$r,"pretrained_model_name_or_path"),f$r.forEach(t),Jlo=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rK=n(cC,"CODE",{});var m$r=s(rK);Ylo=r(m$r,"pretrained_model_name_or_path"),m$r.forEach(t),Klo=r(cC,":"),cC.forEach(t),Zlo=i(Pt),k=n(Pt,"UL",{});var S=s(k);Zp=n(S,"LI",{});var U7e=s(Zp);tK=n(U7e,"STRONG",{});var g$r=s(tK);eio=r(g$r,"albert"),g$r.forEach(t),oio=r(U7e," \u2014 "),QR=n(U7e,"A",{href:!0});var h$r=s(QR);rio=r(h$r,"AlbertForPreTraining"),h$r.forEach(t),tio=r(U7e," (ALBERT model)"),U7e.forEach(t),aio=i(S),e_=n(S,"LI",{});var J7e=s(e_);aK=n(J7e,"STRONG",{});var p$r=s(aK);nio=r(p$r,"bart"),p$r.forEach(t),sio=r(J7e," \u2014 "),HR=n(J7e,"A",{href:!0});var _$r=s(HR);lio=r(_$r,"BartForConditionalGeneration"),_$r.forEach(t),iio=r(J7e," (BART model)"),J7e.forEach(t),dio=i(S),o_=n(S,"LI",{});var Y7e=s(o_);nK=n(Y7e,"STRONG",{});var u$r=s(nK);cio=r(u$r,"bert"),u$r.forEach(t),fio=r(Y7e," \u2014 "),UR=n(Y7e,"A",{href:!0});var b$r=s(UR);mio=r(b$r,"BertForPreTraining"),b$r.forEach(t),gio=r(Y7e," (BERT model)"),Y7e.forEach(t),hio=i(S),r_=n(S,"LI",{});var K7e=s(r_);sK=n(K7e,"STRONG",{});var v$r=s(sK);pio=r(v$r,"big_bird"),v$r.forEach(t),_io=r(K7e," \u2014 "),JR=n(K7e,"A",{href:!0});var T$r=s(JR);uio=r(T$r,"BigBirdForPreTraining"),T$r.forEach(t),bio=r(K7e," (BigBird model)"),K7e.forEach(t),vio=i(S),t_=n(S,"LI",{});var Z7e=s(t_);lK=n(Z7e,"STRONG",{});var F$r=s(lK);Tio=r(F$r,"camembert"),F$r.forEach(t),Fio=r(Z7e," \u2014 "),YR=n(Z7e,"A",{href:!0});var C$r=s(YR);Cio=r(C$r,"CamembertForMaskedLM"),C$r.forEach(t),Mio=r(Z7e," (CamemBERT model)"),Z7e.forEach(t),Eio=i(S),a_=n(S,"LI",{});var e8e=s(a_);iK=n(e8e,"STRONG",{});var M$r=s(iK);yio=r(M$r,"ctrl"),M$r.forEach(t),wio=r(e8e," \u2014 "),KR=n(e8e,"A",{href:!0});var E$r=s(KR);Aio=r(E$r,"CTRLLMHeadModel"),E$r.forEach(t),Lio=r(e8e," (CTRL model)"),e8e.forEach(t),Bio=i(S),n_=n(S,"LI",{});var o8e=s(n_);dK=n(o8e,"STRONG",{});var y$r=s(dK);xio=r(y$r,"deberta"),y$r.forEach(t),kio=r(o8e," \u2014 "),ZR=n(o8e,"A",{href:!0});var w$r=s(ZR);Rio=r(w$r,"DebertaForMaskedLM"),w$r.forEach(t),Sio=r(o8e," (DeBERTa model)"),o8e.forEach(t),Pio=i(S),s_=n(S,"LI",{});var r8e=s(s_);cK=n(r8e,"STRONG",{});var A$r=s(cK);$io=r(A$r,"deberta-v2"),A$r.forEach(t),Iio=r(r8e," \u2014 "),eS=n(r8e,"A",{href:!0});var L$r=s(eS);jio=r(L$r,"DebertaV2ForMaskedLM"),L$r.forEach(t),Nio=r(r8e," (DeBERTa-v2 model)"),r8e.forEach(t),Dio=i(S),l_=n(S,"LI",{});var t8e=s(l_);fK=n(t8e,"STRONG",{});var B$r=s(fK);qio=r(B$r,"distilbert"),B$r.forEach(t),Gio=r(t8e," \u2014 "),oS=n(t8e,"A",{href:!0});var x$r=s(oS);Oio=r(x$r,"DistilBertForMaskedLM"),x$r.forEach(t),Xio=r(t8e," (DistilBERT model)"),t8e.forEach(t),zio=i(S),i_=n(S,"LI",{});var a8e=s(i_);mK=n(a8e,"STRONG",{});var k$r=s(mK);Vio=r(k$r,"electra"),k$r.forEach(t),Wio=r(a8e," \u2014 "),rS=n(a8e,"A",{href:!0});var R$r=s(rS);Qio=r(R$r,"ElectraForPreTraining"),R$r.forEach(t),Hio=r(a8e," (ELECTRA model)"),a8e.forEach(t),Uio=i(S),d_=n(S,"LI",{});var n8e=s(d_);gK=n(n8e,"STRONG",{});var S$r=s(gK);Jio=r(S$r,"flaubert"),S$r.forEach(t),Yio=r(n8e," \u2014 "),tS=n(n8e,"A",{href:!0});var P$r=s(tS);Kio=r(P$r,"FlaubertWithLMHeadModel"),P$r.forEach(t),Zio=r(n8e," (FlauBERT model)"),n8e.forEach(t),edo=i(S),c_=n(S,"LI",{});var s8e=s(c_);hK=n(s8e,"STRONG",{});var $$r=s(hK);odo=r($$r,"fnet"),$$r.forEach(t),rdo=r(s8e," \u2014 "),aS=n(s8e,"A",{href:!0});var I$r=s(aS);tdo=r(I$r,"FNetForPreTraining"),I$r.forEach(t),ado=r(s8e," (FNet model)"),s8e.forEach(t),ndo=i(S),f_=n(S,"LI",{});var l8e=s(f_);pK=n(l8e,"STRONG",{});var j$r=s(pK);sdo=r(j$r,"fsmt"),j$r.forEach(t),ldo=r(l8e," \u2014 "),nS=n(l8e,"A",{href:!0});var N$r=s(nS);ido=r(N$r,"FSMTForConditionalGeneration"),N$r.forEach(t),ddo=r(l8e," (FairSeq Machine-Translation model)"),l8e.forEach(t),cdo=i(S),m_=n(S,"LI",{});var i8e=s(m_);_K=n(i8e,"STRONG",{});var D$r=s(_K);fdo=r(D$r,"funnel"),D$r.forEach(t),mdo=r(i8e," \u2014 "),sS=n(i8e,"A",{href:!0});var q$r=s(sS);gdo=r(q$r,"FunnelForPreTraining"),q$r.forEach(t),hdo=r(i8e," (Funnel Transformer model)"),i8e.forEach(t),pdo=i(S),g_=n(S,"LI",{});var d8e=s(g_);uK=n(d8e,"STRONG",{});var G$r=s(uK);_do=r(G$r,"gpt2"),G$r.forEach(t),udo=r(d8e," \u2014 "),lS=n(d8e,"A",{href:!0});var O$r=s(lS);bdo=r(O$r,"GPT2LMHeadModel"),O$r.forEach(t),vdo=r(d8e," (OpenAI GPT-2 model)"),d8e.forEach(t),Tdo=i(S),h_=n(S,"LI",{});var c8e=s(h_);bK=n(c8e,"STRONG",{});var X$r=s(bK);Fdo=r(X$r,"ibert"),X$r.forEach(t),Cdo=r(c8e," \u2014 "),iS=n(c8e,"A",{href:!0});var z$r=s(iS);Mdo=r(z$r,"IBertForMaskedLM"),z$r.forEach(t),Edo=r(c8e," (I-BERT model)"),c8e.forEach(t),ydo=i(S),p_=n(S,"LI",{});var f8e=s(p_);vK=n(f8e,"STRONG",{});var V$r=s(vK);wdo=r(V$r,"layoutlm"),V$r.forEach(t),Ado=r(f8e," \u2014 "),dS=n(f8e,"A",{href:!0});var W$r=s(dS);Ldo=r(W$r,"LayoutLMForMaskedLM"),W$r.forEach(t),Bdo=r(f8e," (LayoutLM model)"),f8e.forEach(t),xdo=i(S),__=n(S,"LI",{});var m8e=s(__);TK=n(m8e,"STRONG",{});var Q$r=s(TK);kdo=r(Q$r,"longformer"),Q$r.forEach(t),Rdo=r(m8e," \u2014 "),cS=n(m8e,"A",{href:!0});var H$r=s(cS);Sdo=r(H$r,"LongformerForMaskedLM"),H$r.forEach(t),Pdo=r(m8e," (Longformer model)"),m8e.forEach(t),$do=i(S),u_=n(S,"LI",{});var g8e=s(u_);FK=n(g8e,"STRONG",{});var U$r=s(FK);Ido=r(U$r,"lxmert"),U$r.forEach(t),jdo=r(g8e," \u2014 "),fS=n(g8e,"A",{href:!0});var J$r=s(fS);Ndo=r(J$r,"LxmertForPreTraining"),J$r.forEach(t),Ddo=r(g8e," (LXMERT model)"),g8e.forEach(t),qdo=i(S),b_=n(S,"LI",{});var h8e=s(b_);CK=n(h8e,"STRONG",{});var Y$r=s(CK);Gdo=r(Y$r,"megatron-bert"),Y$r.forEach(t),Odo=r(h8e," \u2014 "),mS=n(h8e,"A",{href:!0});var K$r=s(mS);Xdo=r(K$r,"MegatronBertForPreTraining"),K$r.forEach(t),zdo=r(h8e," (MegatronBert model)"),h8e.forEach(t),Vdo=i(S),v_=n(S,"LI",{});var p8e=s(v_);MK=n(p8e,"STRONG",{});var Z$r=s(MK);Wdo=r(Z$r,"mobilebert"),Z$r.forEach(t),Qdo=r(p8e," \u2014 "),gS=n(p8e,"A",{href:!0});var eIr=s(gS);Hdo=r(eIr,"MobileBertForPreTraining"),eIr.forEach(t),Udo=r(p8e," (MobileBERT model)"),p8e.forEach(t),Jdo=i(S),T_=n(S,"LI",{});var _8e=s(T_);EK=n(_8e,"STRONG",{});var oIr=s(EK);Ydo=r(oIr,"mpnet"),oIr.forEach(t),Kdo=r(_8e," \u2014 "),hS=n(_8e,"A",{href:!0});var rIr=s(hS);Zdo=r(rIr,"MPNetForMaskedLM"),rIr.forEach(t),eco=r(_8e," (MPNet model)"),_8e.forEach(t),oco=i(S),F_=n(S,"LI",{});var u8e=s(F_);yK=n(u8e,"STRONG",{});var tIr=s(yK);rco=r(tIr,"openai-gpt"),tIr.forEach(t),tco=r(u8e," \u2014 "),pS=n(u8e,"A",{href:!0});var aIr=s(pS);aco=r(aIr,"OpenAIGPTLMHeadModel"),aIr.forEach(t),nco=r(u8e," (OpenAI GPT model)"),u8e.forEach(t),sco=i(S),C_=n(S,"LI",{});var b8e=s(C_);wK=n(b8e,"STRONG",{});var nIr=s(wK);lco=r(nIr,"retribert"),nIr.forEach(t),ico=r(b8e," \u2014 "),_S=n(b8e,"A",{href:!0});var sIr=s(_S);dco=r(sIr,"RetriBertModel"),sIr.forEach(t),cco=r(b8e," (RetriBERT model)"),b8e.forEach(t),fco=i(S),M_=n(S,"LI",{});var v8e=s(M_);AK=n(v8e,"STRONG",{});var lIr=s(AK);mco=r(lIr,"roberta"),lIr.forEach(t),gco=r(v8e," \u2014 "),uS=n(v8e,"A",{href:!0});var iIr=s(uS);hco=r(iIr,"RobertaForMaskedLM"),iIr.forEach(t),pco=r(v8e," (RoBERTa model)"),v8e.forEach(t),_co=i(S),E_=n(S,"LI",{});var T8e=s(E_);LK=n(T8e,"STRONG",{});var dIr=s(LK);uco=r(dIr,"squeezebert"),dIr.forEach(t),bco=r(T8e," \u2014 "),bS=n(T8e,"A",{href:!0});var cIr=s(bS);vco=r(cIr,"SqueezeBertForMaskedLM"),cIr.forEach(t),Tco=r(T8e," (SqueezeBERT model)"),T8e.forEach(t),Fco=i(S),y_=n(S,"LI",{});var F8e=s(y_);BK=n(F8e,"STRONG",{});var fIr=s(BK);Cco=r(fIr,"t5"),fIr.forEach(t),Mco=r(F8e," \u2014 "),vS=n(F8e,"A",{href:!0});var mIr=s(vS);Eco=r(mIr,"T5ForConditionalGeneration"),mIr.forEach(t),yco=r(F8e," (T5 model)"),F8e.forEach(t),wco=i(S),w_=n(S,"LI",{});var C8e=s(w_);xK=n(C8e,"STRONG",{});var gIr=s(xK);Aco=r(gIr,"tapas"),gIr.forEach(t),Lco=r(C8e," \u2014 "),TS=n(C8e,"A",{href:!0});var hIr=s(TS);Bco=r(hIr,"TapasForMaskedLM"),hIr.forEach(t),xco=r(C8e," (TAPAS model)"),C8e.forEach(t),kco=i(S),A_=n(S,"LI",{});var M8e=s(A_);kK=n(M8e,"STRONG",{});var pIr=s(kK);Rco=r(pIr,"transfo-xl"),pIr.forEach(t),Sco=r(M8e," \u2014 "),FS=n(M8e,"A",{href:!0});var _Ir=s(FS);Pco=r(_Ir,"TransfoXLLMHeadModel"),_Ir.forEach(t),$co=r(M8e," (Transformer-XL model)"),M8e.forEach(t),Ico=i(S),L_=n(S,"LI",{});var E8e=s(L_);RK=n(E8e,"STRONG",{});var uIr=s(RK);jco=r(uIr,"unispeech"),uIr.forEach(t),Nco=r(E8e," \u2014 "),CS=n(E8e,"A",{href:!0});var bIr=s(CS);Dco=r(bIr,"UniSpeechForPreTraining"),bIr.forEach(t),qco=r(E8e," (UniSpeech model)"),E8e.forEach(t),Gco=i(S),B_=n(S,"LI",{});var y8e=s(B_);SK=n(y8e,"STRONG",{});var vIr=s(SK);Oco=r(vIr,"unispeech-sat"),vIr.forEach(t),Xco=r(y8e," \u2014 "),MS=n(y8e,"A",{href:!0});var TIr=s(MS);zco=r(TIr,"UniSpeechSatForPreTraining"),TIr.forEach(t),Vco=r(y8e," (UniSpeechSat model)"),y8e.forEach(t),Wco=i(S),x_=n(S,"LI",{});var w8e=s(x_);PK=n(w8e,"STRONG",{});var FIr=s(PK);Qco=r(FIr,"visual_bert"),FIr.forEach(t),Hco=r(w8e," \u2014 "),ES=n(w8e,"A",{href:!0});var CIr=s(ES);Uco=r(CIr,"VisualBertForPreTraining"),CIr.forEach(t),Jco=r(w8e," (VisualBert model)"),w8e.forEach(t),Yco=i(S),k_=n(S,"LI",{});var A8e=s(k_);$K=n(A8e,"STRONG",{});var MIr=s($K);Kco=r(MIr,"vit_mae"),MIr.forEach(t),Zco=r(A8e," \u2014 "),yS=n(A8e,"A",{href:!0});var EIr=s(yS);efo=r(EIr,"ViTMAEForPreTraining"),EIr.forEach(t),ofo=r(A8e," (ViTMAE model)"),A8e.forEach(t),rfo=i(S),R_=n(S,"LI",{});var L8e=s(R_);IK=n(L8e,"STRONG",{});var yIr=s(IK);tfo=r(yIr,"wav2vec2"),yIr.forEach(t),afo=r(L8e," \u2014 "),wS=n(L8e,"A",{href:!0});var wIr=s(wS);nfo=r(wIr,"Wav2Vec2ForPreTraining"),wIr.forEach(t),sfo=r(L8e," (Wav2Vec2 model)"),L8e.forEach(t),lfo=i(S),S_=n(S,"LI",{});var B8e=s(S_);jK=n(B8e,"STRONG",{});var AIr=s(jK);ifo=r(AIr,"xlm"),AIr.forEach(t),dfo=r(B8e," \u2014 "),AS=n(B8e,"A",{href:!0});var LIr=s(AS);cfo=r(LIr,"XLMWithLMHeadModel"),LIr.forEach(t),ffo=r(B8e," (XLM model)"),B8e.forEach(t),mfo=i(S),P_=n(S,"LI",{});var x8e=s(P_);NK=n(x8e,"STRONG",{});var BIr=s(NK);gfo=r(BIr,"xlm-roberta"),BIr.forEach(t),hfo=r(x8e," \u2014 "),LS=n(x8e,"A",{href:!0});var xIr=s(LS);pfo=r(xIr,"XLMRobertaForMaskedLM"),xIr.forEach(t),_fo=r(x8e," (XLM-RoBERTa model)"),x8e.forEach(t),ufo=i(S),$_=n(S,"LI",{});var k8e=s($_);DK=n(k8e,"STRONG",{});var kIr=s(DK);bfo=r(kIr,"xlm-roberta-xl"),kIr.forEach(t),vfo=r(k8e," \u2014 "),BS=n(k8e,"A",{href:!0});var RIr=s(BS);Tfo=r(RIr,"XLMRobertaXLForMaskedLM"),RIr.forEach(t),Ffo=r(k8e," (XLM-RoBERTa-XL model)"),k8e.forEach(t),Cfo=i(S),I_=n(S,"LI",{});var R8e=s(I_);qK=n(R8e,"STRONG",{});var SIr=s(qK);Mfo=r(SIr,"xlnet"),SIr.forEach(t),Efo=r(R8e," \u2014 "),xS=n(R8e,"A",{href:!0});var PIr=s(xS);yfo=r(PIr,"XLNetLMHeadModel"),PIr.forEach(t),wfo=r(R8e," (XLNet model)"),R8e.forEach(t),S.forEach(t),Afo=i(Pt),j_=n(Pt,"P",{});var S8e=s(j_);Lfo=r(S8e,"The model is set in evaluation mode by default using "),GK=n(S8e,"CODE",{});var $Ir=s(GK);Bfo=r($Ir,"model.eval()"),$Ir.forEach(t),xfo=r(S8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OK=n(S8e,"CODE",{});var IIr=s(OK);kfo=r(IIr,"model.train()"),IIr.forEach(t),S8e.forEach(t),Rfo=i(Pt),XK=n(Pt,"P",{});var jIr=s(XK);Sfo=r(jIr,"Examples:"),jIr.forEach(t),Pfo=i(Pt),m(J4.$$.fragment,Pt),Pt.forEach(t),qs.forEach(t),LLe=i(d),Wi=n(d,"H2",{class:!0});var $Be=s(Wi);N_=n($Be,"A",{id:!0,class:!0,href:!0});var NIr=s(N_);zK=n(NIr,"SPAN",{});var DIr=s(zK);m(Y4.$$.fragment,DIr),DIr.forEach(t),NIr.forEach(t),$fo=i($Be),VK=n($Be,"SPAN",{});var qIr=s(VK);Ifo=r(qIr,"AutoModelForCausalLM"),qIr.forEach(t),$Be.forEach(t),BLe=i(d),Qo=n(d,"DIV",{class:!0});var Os=s(Qo);m(K4.$$.fragment,Os),jfo=i(Os),Qi=n(Os,"P",{});var oz=s(Qi);Nfo=r(oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WK=n(oz,"CODE",{});var GIr=s(WK);Dfo=r(GIr,"from_pretrained()"),GIr.forEach(t),qfo=r(oz,"class method or the "),QK=n(oz,"CODE",{});var OIr=s(QK);Gfo=r(OIr,"from_config()"),OIr.forEach(t),Ofo=r(oz,`class
method.`),oz.forEach(t),Xfo=i(Os),Z4=n(Os,"P",{});var IBe=s(Z4);zfo=r(IBe,"This class cannot be instantiated directly using "),HK=n(IBe,"CODE",{});var XIr=s(HK);Vfo=r(XIr,"__init__()"),XIr.forEach(t),Wfo=r(IBe," (throws an error)."),IBe.forEach(t),Qfo=i(Os),qr=n(Os,"DIV",{class:!0});var Xs=s(qr);m(eM.$$.fragment,Xs),Hfo=i(Xs),UK=n(Xs,"P",{});var zIr=s(UK);Ufo=r(zIr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zIr.forEach(t),Jfo=i(Xs),Hi=n(Xs,"P",{});var rz=s(Hi);Yfo=r(rz,`Note:
Loading a model from its configuration file does `),JK=n(rz,"STRONG",{});var VIr=s(JK);Kfo=r(VIr,"not"),VIr.forEach(t),Zfo=r(rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=n(rz,"CODE",{});var WIr=s(YK);emo=r(WIr,"from_pretrained()"),WIr.forEach(t),omo=r(rz,"to load the model weights."),rz.forEach(t),rmo=i(Xs),KK=n(Xs,"P",{});var QIr=s(KK);tmo=r(QIr,"Examples:"),QIr.forEach(t),amo=i(Xs),m(oM.$$.fragment,Xs),Xs.forEach(t),nmo=i(Os),Re=n(Os,"DIV",{class:!0});var $t=s(Re);m(rM.$$.fragment,$t),smo=i($t),ZK=n($t,"P",{});var HIr=s(ZK);lmo=r(HIr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),HIr.forEach(t),imo=i($t),Ga=n($t,"P",{});var fC=s(Ga);dmo=r(fC,"The model class to instantiate is selected based on the "),eZ=n(fC,"CODE",{});var UIr=s(eZ);cmo=r(UIr,"model_type"),UIr.forEach(t),fmo=r(fC,` property of the config object (either
passed as an argument or loaded from `),oZ=n(fC,"CODE",{});var JIr=s(oZ);mmo=r(JIr,"pretrained_model_name_or_path"),JIr.forEach(t),gmo=r(fC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rZ=n(fC,"CODE",{});var YIr=s(rZ);hmo=r(YIr,"pretrained_model_name_or_path"),YIr.forEach(t),pmo=r(fC,":"),fC.forEach(t),_mo=i($t),$=n($t,"UL",{});var j=s($);D_=n(j,"LI",{});var P8e=s(D_);tZ=n(P8e,"STRONG",{});var KIr=s(tZ);umo=r(KIr,"bart"),KIr.forEach(t),bmo=r(P8e," \u2014 "),kS=n(P8e,"A",{href:!0});var ZIr=s(kS);vmo=r(ZIr,"BartForCausalLM"),ZIr.forEach(t),Tmo=r(P8e," (BART model)"),P8e.forEach(t),Fmo=i(j),q_=n(j,"LI",{});var $8e=s(q_);aZ=n($8e,"STRONG",{});var ejr=s(aZ);Cmo=r(ejr,"bert"),ejr.forEach(t),Mmo=r($8e," \u2014 "),RS=n($8e,"A",{href:!0});var ojr=s(RS);Emo=r(ojr,"BertLMHeadModel"),ojr.forEach(t),ymo=r($8e," (BERT model)"),$8e.forEach(t),wmo=i(j),G_=n(j,"LI",{});var I8e=s(G_);nZ=n(I8e,"STRONG",{});var rjr=s(nZ);Amo=r(rjr,"bert-generation"),rjr.forEach(t),Lmo=r(I8e," \u2014 "),SS=n(I8e,"A",{href:!0});var tjr=s(SS);Bmo=r(tjr,"BertGenerationDecoder"),tjr.forEach(t),xmo=r(I8e," (Bert Generation model)"),I8e.forEach(t),kmo=i(j),O_=n(j,"LI",{});var j8e=s(O_);sZ=n(j8e,"STRONG",{});var ajr=s(sZ);Rmo=r(ajr,"big_bird"),ajr.forEach(t),Smo=r(j8e," \u2014 "),PS=n(j8e,"A",{href:!0});var njr=s(PS);Pmo=r(njr,"BigBirdForCausalLM"),njr.forEach(t),$mo=r(j8e," (BigBird model)"),j8e.forEach(t),Imo=i(j),X_=n(j,"LI",{});var N8e=s(X_);lZ=n(N8e,"STRONG",{});var sjr=s(lZ);jmo=r(sjr,"bigbird_pegasus"),sjr.forEach(t),Nmo=r(N8e," \u2014 "),$S=n(N8e,"A",{href:!0});var ljr=s($S);Dmo=r(ljr,"BigBirdPegasusForCausalLM"),ljr.forEach(t),qmo=r(N8e," (BigBirdPegasus model)"),N8e.forEach(t),Gmo=i(j),z_=n(j,"LI",{});var D8e=s(z_);iZ=n(D8e,"STRONG",{});var ijr=s(iZ);Omo=r(ijr,"blenderbot"),ijr.forEach(t),Xmo=r(D8e," \u2014 "),IS=n(D8e,"A",{href:!0});var djr=s(IS);zmo=r(djr,"BlenderbotForCausalLM"),djr.forEach(t),Vmo=r(D8e," (Blenderbot model)"),D8e.forEach(t),Wmo=i(j),V_=n(j,"LI",{});var q8e=s(V_);dZ=n(q8e,"STRONG",{});var cjr=s(dZ);Qmo=r(cjr,"blenderbot-small"),cjr.forEach(t),Hmo=r(q8e," \u2014 "),jS=n(q8e,"A",{href:!0});var fjr=s(jS);Umo=r(fjr,"BlenderbotSmallForCausalLM"),fjr.forEach(t),Jmo=r(q8e," (BlenderbotSmall model)"),q8e.forEach(t),Ymo=i(j),W_=n(j,"LI",{});var G8e=s(W_);cZ=n(G8e,"STRONG",{});var mjr=s(cZ);Kmo=r(mjr,"camembert"),mjr.forEach(t),Zmo=r(G8e," \u2014 "),NS=n(G8e,"A",{href:!0});var gjr=s(NS);ego=r(gjr,"CamembertForCausalLM"),gjr.forEach(t),ogo=r(G8e," (CamemBERT model)"),G8e.forEach(t),rgo=i(j),Q_=n(j,"LI",{});var O8e=s(Q_);fZ=n(O8e,"STRONG",{});var hjr=s(fZ);tgo=r(hjr,"ctrl"),hjr.forEach(t),ago=r(O8e," \u2014 "),DS=n(O8e,"A",{href:!0});var pjr=s(DS);ngo=r(pjr,"CTRLLMHeadModel"),pjr.forEach(t),sgo=r(O8e," (CTRL model)"),O8e.forEach(t),lgo=i(j),H_=n(j,"LI",{});var X8e=s(H_);mZ=n(X8e,"STRONG",{});var _jr=s(mZ);igo=r(_jr,"electra"),_jr.forEach(t),dgo=r(X8e," \u2014 "),qS=n(X8e,"A",{href:!0});var ujr=s(qS);cgo=r(ujr,"ElectraForCausalLM"),ujr.forEach(t),fgo=r(X8e," (ELECTRA model)"),X8e.forEach(t),mgo=i(j),U_=n(j,"LI",{});var z8e=s(U_);gZ=n(z8e,"STRONG",{});var bjr=s(gZ);ggo=r(bjr,"gpt2"),bjr.forEach(t),hgo=r(z8e," \u2014 "),GS=n(z8e,"A",{href:!0});var vjr=s(GS);pgo=r(vjr,"GPT2LMHeadModel"),vjr.forEach(t),_go=r(z8e," (OpenAI GPT-2 model)"),z8e.forEach(t),ugo=i(j),J_=n(j,"LI",{});var V8e=s(J_);hZ=n(V8e,"STRONG",{});var Tjr=s(hZ);bgo=r(Tjr,"gpt_neo"),Tjr.forEach(t),vgo=r(V8e," \u2014 "),OS=n(V8e,"A",{href:!0});var Fjr=s(OS);Tgo=r(Fjr,"GPTNeoForCausalLM"),Fjr.forEach(t),Fgo=r(V8e," (GPT Neo model)"),V8e.forEach(t),Cgo=i(j),Y_=n(j,"LI",{});var W8e=s(Y_);pZ=n(W8e,"STRONG",{});var Cjr=s(pZ);Mgo=r(Cjr,"gptj"),Cjr.forEach(t),Ego=r(W8e," \u2014 "),XS=n(W8e,"A",{href:!0});var Mjr=s(XS);ygo=r(Mjr,"GPTJForCausalLM"),Mjr.forEach(t),wgo=r(W8e," (GPT-J model)"),W8e.forEach(t),Ago=i(j),K_=n(j,"LI",{});var Q8e=s(K_);_Z=n(Q8e,"STRONG",{});var Ejr=s(_Z);Lgo=r(Ejr,"marian"),Ejr.forEach(t),Bgo=r(Q8e," \u2014 "),zS=n(Q8e,"A",{href:!0});var yjr=s(zS);xgo=r(yjr,"MarianForCausalLM"),yjr.forEach(t),kgo=r(Q8e," (Marian model)"),Q8e.forEach(t),Rgo=i(j),Z_=n(j,"LI",{});var H8e=s(Z_);uZ=n(H8e,"STRONG",{});var wjr=s(uZ);Sgo=r(wjr,"mbart"),wjr.forEach(t),Pgo=r(H8e," \u2014 "),VS=n(H8e,"A",{href:!0});var Ajr=s(VS);$go=r(Ajr,"MBartForCausalLM"),Ajr.forEach(t),Igo=r(H8e," (mBART model)"),H8e.forEach(t),jgo=i(j),eu=n(j,"LI",{});var U8e=s(eu);bZ=n(U8e,"STRONG",{});var Ljr=s(bZ);Ngo=r(Ljr,"megatron-bert"),Ljr.forEach(t),Dgo=r(U8e," \u2014 "),WS=n(U8e,"A",{href:!0});var Bjr=s(WS);qgo=r(Bjr,"MegatronBertForCausalLM"),Bjr.forEach(t),Ggo=r(U8e," (MegatronBert model)"),U8e.forEach(t),Ogo=i(j),ou=n(j,"LI",{});var J8e=s(ou);vZ=n(J8e,"STRONG",{});var xjr=s(vZ);Xgo=r(xjr,"openai-gpt"),xjr.forEach(t),zgo=r(J8e," \u2014 "),QS=n(J8e,"A",{href:!0});var kjr=s(QS);Vgo=r(kjr,"OpenAIGPTLMHeadModel"),kjr.forEach(t),Wgo=r(J8e," (OpenAI GPT model)"),J8e.forEach(t),Qgo=i(j),ru=n(j,"LI",{});var Y8e=s(ru);TZ=n(Y8e,"STRONG",{});var Rjr=s(TZ);Hgo=r(Rjr,"pegasus"),Rjr.forEach(t),Ugo=r(Y8e," \u2014 "),HS=n(Y8e,"A",{href:!0});var Sjr=s(HS);Jgo=r(Sjr,"PegasusForCausalLM"),Sjr.forEach(t),Ygo=r(Y8e," (Pegasus model)"),Y8e.forEach(t),Kgo=i(j),tu=n(j,"LI",{});var K8e=s(tu);FZ=n(K8e,"STRONG",{});var Pjr=s(FZ);Zgo=r(Pjr,"plbart"),Pjr.forEach(t),eho=r(K8e," \u2014 "),US=n(K8e,"A",{href:!0});var $jr=s(US);oho=r($jr,"PLBartForCausalLM"),$jr.forEach(t),rho=r(K8e," (PLBart model)"),K8e.forEach(t),tho=i(j),au=n(j,"LI",{});var Z8e=s(au);CZ=n(Z8e,"STRONG",{});var Ijr=s(CZ);aho=r(Ijr,"prophetnet"),Ijr.forEach(t),nho=r(Z8e," \u2014 "),JS=n(Z8e,"A",{href:!0});var jjr=s(JS);sho=r(jjr,"ProphetNetForCausalLM"),jjr.forEach(t),lho=r(Z8e," (ProphetNet model)"),Z8e.forEach(t),iho=i(j),nu=n(j,"LI",{});var eFe=s(nu);MZ=n(eFe,"STRONG",{});var Njr=s(MZ);dho=r(Njr,"qdqbert"),Njr.forEach(t),cho=r(eFe," \u2014 "),YS=n(eFe,"A",{href:!0});var Djr=s(YS);fho=r(Djr,"QDQBertLMHeadModel"),Djr.forEach(t),mho=r(eFe," (QDQBert model)"),eFe.forEach(t),gho=i(j),su=n(j,"LI",{});var oFe=s(su);EZ=n(oFe,"STRONG",{});var qjr=s(EZ);hho=r(qjr,"reformer"),qjr.forEach(t),pho=r(oFe," \u2014 "),KS=n(oFe,"A",{href:!0});var Gjr=s(KS);_ho=r(Gjr,"ReformerModelWithLMHead"),Gjr.forEach(t),uho=r(oFe," (Reformer model)"),oFe.forEach(t),bho=i(j),lu=n(j,"LI",{});var rFe=s(lu);yZ=n(rFe,"STRONG",{});var Ojr=s(yZ);vho=r(Ojr,"rembert"),Ojr.forEach(t),Tho=r(rFe," \u2014 "),ZS=n(rFe,"A",{href:!0});var Xjr=s(ZS);Fho=r(Xjr,"RemBertForCausalLM"),Xjr.forEach(t),Cho=r(rFe," (RemBERT model)"),rFe.forEach(t),Mho=i(j),iu=n(j,"LI",{});var tFe=s(iu);wZ=n(tFe,"STRONG",{});var zjr=s(wZ);Eho=r(zjr,"roberta"),zjr.forEach(t),yho=r(tFe," \u2014 "),eP=n(tFe,"A",{href:!0});var Vjr=s(eP);who=r(Vjr,"RobertaForCausalLM"),Vjr.forEach(t),Aho=r(tFe," (RoBERTa model)"),tFe.forEach(t),Lho=i(j),du=n(j,"LI",{});var aFe=s(du);AZ=n(aFe,"STRONG",{});var Wjr=s(AZ);Bho=r(Wjr,"roformer"),Wjr.forEach(t),xho=r(aFe," \u2014 "),oP=n(aFe,"A",{href:!0});var Qjr=s(oP);kho=r(Qjr,"RoFormerForCausalLM"),Qjr.forEach(t),Rho=r(aFe," (RoFormer model)"),aFe.forEach(t),Sho=i(j),cu=n(j,"LI",{});var nFe=s(cu);LZ=n(nFe,"STRONG",{});var Hjr=s(LZ);Pho=r(Hjr,"speech_to_text_2"),Hjr.forEach(t),$ho=r(nFe," \u2014 "),rP=n(nFe,"A",{href:!0});var Ujr=s(rP);Iho=r(Ujr,"Speech2Text2ForCausalLM"),Ujr.forEach(t),jho=r(nFe," (Speech2Text2 model)"),nFe.forEach(t),Nho=i(j),fu=n(j,"LI",{});var sFe=s(fu);BZ=n(sFe,"STRONG",{});var Jjr=s(BZ);Dho=r(Jjr,"transfo-xl"),Jjr.forEach(t),qho=r(sFe," \u2014 "),tP=n(sFe,"A",{href:!0});var Yjr=s(tP);Gho=r(Yjr,"TransfoXLLMHeadModel"),Yjr.forEach(t),Oho=r(sFe," (Transformer-XL model)"),sFe.forEach(t),Xho=i(j),mu=n(j,"LI",{});var lFe=s(mu);xZ=n(lFe,"STRONG",{});var Kjr=s(xZ);zho=r(Kjr,"trocr"),Kjr.forEach(t),Vho=r(lFe," \u2014 "),aP=n(lFe,"A",{href:!0});var Zjr=s(aP);Who=r(Zjr,"TrOCRForCausalLM"),Zjr.forEach(t),Qho=r(lFe," (TrOCR model)"),lFe.forEach(t),Hho=i(j),gu=n(j,"LI",{});var iFe=s(gu);kZ=n(iFe,"STRONG",{});var eNr=s(kZ);Uho=r(eNr,"xglm"),eNr.forEach(t),Jho=r(iFe," \u2014 "),nP=n(iFe,"A",{href:!0});var oNr=s(nP);Yho=r(oNr,"XGLMForCausalLM"),oNr.forEach(t),Kho=r(iFe," (XGLM model)"),iFe.forEach(t),Zho=i(j),hu=n(j,"LI",{});var dFe=s(hu);RZ=n(dFe,"STRONG",{});var rNr=s(RZ);epo=r(rNr,"xlm"),rNr.forEach(t),opo=r(dFe," \u2014 "),sP=n(dFe,"A",{href:!0});var tNr=s(sP);rpo=r(tNr,"XLMWithLMHeadModel"),tNr.forEach(t),tpo=r(dFe," (XLM model)"),dFe.forEach(t),apo=i(j),pu=n(j,"LI",{});var cFe=s(pu);SZ=n(cFe,"STRONG",{});var aNr=s(SZ);npo=r(aNr,"xlm-prophetnet"),aNr.forEach(t),spo=r(cFe," \u2014 "),lP=n(cFe,"A",{href:!0});var nNr=s(lP);lpo=r(nNr,"XLMProphetNetForCausalLM"),nNr.forEach(t),ipo=r(cFe," (XLMProphetNet model)"),cFe.forEach(t),dpo=i(j),_u=n(j,"LI",{});var fFe=s(_u);PZ=n(fFe,"STRONG",{});var sNr=s(PZ);cpo=r(sNr,"xlm-roberta"),sNr.forEach(t),fpo=r(fFe," \u2014 "),iP=n(fFe,"A",{href:!0});var lNr=s(iP);mpo=r(lNr,"XLMRobertaForCausalLM"),lNr.forEach(t),gpo=r(fFe," (XLM-RoBERTa model)"),fFe.forEach(t),hpo=i(j),uu=n(j,"LI",{});var mFe=s(uu);$Z=n(mFe,"STRONG",{});var iNr=s($Z);ppo=r(iNr,"xlm-roberta-xl"),iNr.forEach(t),_po=r(mFe," \u2014 "),dP=n(mFe,"A",{href:!0});var dNr=s(dP);upo=r(dNr,"XLMRobertaXLForCausalLM"),dNr.forEach(t),bpo=r(mFe," (XLM-RoBERTa-XL model)"),mFe.forEach(t),vpo=i(j),bu=n(j,"LI",{});var gFe=s(bu);IZ=n(gFe,"STRONG",{});var cNr=s(IZ);Tpo=r(cNr,"xlnet"),cNr.forEach(t),Fpo=r(gFe," \u2014 "),cP=n(gFe,"A",{href:!0});var fNr=s(cP);Cpo=r(fNr,"XLNetLMHeadModel"),fNr.forEach(t),Mpo=r(gFe," (XLNet model)"),gFe.forEach(t),j.forEach(t),Epo=i($t),vu=n($t,"P",{});var hFe=s(vu);ypo=r(hFe,"The model is set in evaluation mode by default using "),jZ=n(hFe,"CODE",{});var mNr=s(jZ);wpo=r(mNr,"model.eval()"),mNr.forEach(t),Apo=r(hFe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),NZ=n(hFe,"CODE",{});var gNr=s(NZ);Lpo=r(gNr,"model.train()"),gNr.forEach(t),hFe.forEach(t),Bpo=i($t),DZ=n($t,"P",{});var hNr=s(DZ);xpo=r(hNr,"Examples:"),hNr.forEach(t),kpo=i($t),m(tM.$$.fragment,$t),$t.forEach(t),Os.forEach(t),xLe=i(d),Ui=n(d,"H2",{class:!0});var jBe=s(Ui);Tu=n(jBe,"A",{id:!0,class:!0,href:!0});var pNr=s(Tu);qZ=n(pNr,"SPAN",{});var _Nr=s(qZ);m(aM.$$.fragment,_Nr),_Nr.forEach(t),pNr.forEach(t),Rpo=i(jBe),GZ=n(jBe,"SPAN",{});var uNr=s(GZ);Spo=r(uNr,"AutoModelForMaskedLM"),uNr.forEach(t),jBe.forEach(t),kLe=i(d),Ho=n(d,"DIV",{class:!0});var zs=s(Ho);m(nM.$$.fragment,zs),Ppo=i(zs),Ji=n(zs,"P",{});var tz=s(Ji);$po=r(tz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OZ=n(tz,"CODE",{});var bNr=s(OZ);Ipo=r(bNr,"from_pretrained()"),bNr.forEach(t),jpo=r(tz,"class method or the "),XZ=n(tz,"CODE",{});var vNr=s(XZ);Npo=r(vNr,"from_config()"),vNr.forEach(t),Dpo=r(tz,`class
method.`),tz.forEach(t),qpo=i(zs),sM=n(zs,"P",{});var NBe=s(sM);Gpo=r(NBe,"This class cannot be instantiated directly using "),zZ=n(NBe,"CODE",{});var TNr=s(zZ);Opo=r(TNr,"__init__()"),TNr.forEach(t),Xpo=r(NBe," (throws an error)."),NBe.forEach(t),zpo=i(zs),Gr=n(zs,"DIV",{class:!0});var Vs=s(Gr);m(lM.$$.fragment,Vs),Vpo=i(Vs),VZ=n(Vs,"P",{});var FNr=s(VZ);Wpo=r(FNr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),FNr.forEach(t),Qpo=i(Vs),Yi=n(Vs,"P",{});var az=s(Yi);Hpo=r(az,`Note:
Loading a model from its configuration file does `),WZ=n(az,"STRONG",{});var CNr=s(WZ);Upo=r(CNr,"not"),CNr.forEach(t),Jpo=r(az,` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=n(az,"CODE",{});var MNr=s(QZ);Ypo=r(MNr,"from_pretrained()"),MNr.forEach(t),Kpo=r(az,"to load the model weights."),az.forEach(t),Zpo=i(Vs),HZ=n(Vs,"P",{});var ENr=s(HZ);e_o=r(ENr,"Examples:"),ENr.forEach(t),o_o=i(Vs),m(iM.$$.fragment,Vs),Vs.forEach(t),r_o=i(zs),Se=n(zs,"DIV",{class:!0});var It=s(Se);m(dM.$$.fragment,It),t_o=i(It),UZ=n(It,"P",{});var yNr=s(UZ);a_o=r(yNr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),yNr.forEach(t),n_o=i(It),Oa=n(It,"P",{});var mC=s(Oa);s_o=r(mC,"The model class to instantiate is selected based on the "),JZ=n(mC,"CODE",{});var wNr=s(JZ);l_o=r(wNr,"model_type"),wNr.forEach(t),i_o=r(mC,` property of the config object (either
passed as an argument or loaded from `),YZ=n(mC,"CODE",{});var ANr=s(YZ);d_o=r(ANr,"pretrained_model_name_or_path"),ANr.forEach(t),c_o=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KZ=n(mC,"CODE",{});var LNr=s(KZ);f_o=r(LNr,"pretrained_model_name_or_path"),LNr.forEach(t),m_o=r(mC,":"),mC.forEach(t),g_o=i(It),I=n(It,"UL",{});var N=s(I);Fu=n(N,"LI",{});var pFe=s(Fu);ZZ=n(pFe,"STRONG",{});var BNr=s(ZZ);h_o=r(BNr,"albert"),BNr.forEach(t),p_o=r(pFe," \u2014 "),fP=n(pFe,"A",{href:!0});var xNr=s(fP);__o=r(xNr,"AlbertForMaskedLM"),xNr.forEach(t),u_o=r(pFe," (ALBERT model)"),pFe.forEach(t),b_o=i(N),Cu=n(N,"LI",{});var _Fe=s(Cu);eee=n(_Fe,"STRONG",{});var kNr=s(eee);v_o=r(kNr,"bart"),kNr.forEach(t),T_o=r(_Fe," \u2014 "),mP=n(_Fe,"A",{href:!0});var RNr=s(mP);F_o=r(RNr,"BartForConditionalGeneration"),RNr.forEach(t),C_o=r(_Fe," (BART model)"),_Fe.forEach(t),M_o=i(N),Mu=n(N,"LI",{});var uFe=s(Mu);oee=n(uFe,"STRONG",{});var SNr=s(oee);E_o=r(SNr,"bert"),SNr.forEach(t),y_o=r(uFe," \u2014 "),gP=n(uFe,"A",{href:!0});var PNr=s(gP);w_o=r(PNr,"BertForMaskedLM"),PNr.forEach(t),A_o=r(uFe," (BERT model)"),uFe.forEach(t),L_o=i(N),Eu=n(N,"LI",{});var bFe=s(Eu);ree=n(bFe,"STRONG",{});var $Nr=s(ree);B_o=r($Nr,"big_bird"),$Nr.forEach(t),x_o=r(bFe," \u2014 "),hP=n(bFe,"A",{href:!0});var INr=s(hP);k_o=r(INr,"BigBirdForMaskedLM"),INr.forEach(t),R_o=r(bFe," (BigBird model)"),bFe.forEach(t),S_o=i(N),yu=n(N,"LI",{});var vFe=s(yu);tee=n(vFe,"STRONG",{});var jNr=s(tee);P_o=r(jNr,"camembert"),jNr.forEach(t),$_o=r(vFe," \u2014 "),pP=n(vFe,"A",{href:!0});var NNr=s(pP);I_o=r(NNr,"CamembertForMaskedLM"),NNr.forEach(t),j_o=r(vFe," (CamemBERT model)"),vFe.forEach(t),N_o=i(N),wu=n(N,"LI",{});var TFe=s(wu);aee=n(TFe,"STRONG",{});var DNr=s(aee);D_o=r(DNr,"convbert"),DNr.forEach(t),q_o=r(TFe," \u2014 "),_P=n(TFe,"A",{href:!0});var qNr=s(_P);G_o=r(qNr,"ConvBertForMaskedLM"),qNr.forEach(t),O_o=r(TFe," (ConvBERT model)"),TFe.forEach(t),X_o=i(N),Au=n(N,"LI",{});var FFe=s(Au);nee=n(FFe,"STRONG",{});var GNr=s(nee);z_o=r(GNr,"deberta"),GNr.forEach(t),V_o=r(FFe," \u2014 "),uP=n(FFe,"A",{href:!0});var ONr=s(uP);W_o=r(ONr,"DebertaForMaskedLM"),ONr.forEach(t),Q_o=r(FFe," (DeBERTa model)"),FFe.forEach(t),H_o=i(N),Lu=n(N,"LI",{});var CFe=s(Lu);see=n(CFe,"STRONG",{});var XNr=s(see);U_o=r(XNr,"deberta-v2"),XNr.forEach(t),J_o=r(CFe," \u2014 "),bP=n(CFe,"A",{href:!0});var zNr=s(bP);Y_o=r(zNr,"DebertaV2ForMaskedLM"),zNr.forEach(t),K_o=r(CFe," (DeBERTa-v2 model)"),CFe.forEach(t),Z_o=i(N),Bu=n(N,"LI",{});var MFe=s(Bu);lee=n(MFe,"STRONG",{});var VNr=s(lee);euo=r(VNr,"distilbert"),VNr.forEach(t),ouo=r(MFe," \u2014 "),vP=n(MFe,"A",{href:!0});var WNr=s(vP);ruo=r(WNr,"DistilBertForMaskedLM"),WNr.forEach(t),tuo=r(MFe," (DistilBERT model)"),MFe.forEach(t),auo=i(N),xu=n(N,"LI",{});var EFe=s(xu);iee=n(EFe,"STRONG",{});var QNr=s(iee);nuo=r(QNr,"electra"),QNr.forEach(t),suo=r(EFe," \u2014 "),TP=n(EFe,"A",{href:!0});var HNr=s(TP);luo=r(HNr,"ElectraForMaskedLM"),HNr.forEach(t),iuo=r(EFe," (ELECTRA model)"),EFe.forEach(t),duo=i(N),ku=n(N,"LI",{});var yFe=s(ku);dee=n(yFe,"STRONG",{});var UNr=s(dee);cuo=r(UNr,"flaubert"),UNr.forEach(t),fuo=r(yFe," \u2014 "),FP=n(yFe,"A",{href:!0});var JNr=s(FP);muo=r(JNr,"FlaubertWithLMHeadModel"),JNr.forEach(t),guo=r(yFe," (FlauBERT model)"),yFe.forEach(t),huo=i(N),Ru=n(N,"LI",{});var wFe=s(Ru);cee=n(wFe,"STRONG",{});var YNr=s(cee);puo=r(YNr,"fnet"),YNr.forEach(t),_uo=r(wFe," \u2014 "),CP=n(wFe,"A",{href:!0});var KNr=s(CP);uuo=r(KNr,"FNetForMaskedLM"),KNr.forEach(t),buo=r(wFe," (FNet model)"),wFe.forEach(t),vuo=i(N),Su=n(N,"LI",{});var AFe=s(Su);fee=n(AFe,"STRONG",{});var ZNr=s(fee);Tuo=r(ZNr,"funnel"),ZNr.forEach(t),Fuo=r(AFe," \u2014 "),MP=n(AFe,"A",{href:!0});var eDr=s(MP);Cuo=r(eDr,"FunnelForMaskedLM"),eDr.forEach(t),Muo=r(AFe," (Funnel Transformer model)"),AFe.forEach(t),Euo=i(N),Pu=n(N,"LI",{});var LFe=s(Pu);mee=n(LFe,"STRONG",{});var oDr=s(mee);yuo=r(oDr,"ibert"),oDr.forEach(t),wuo=r(LFe," \u2014 "),EP=n(LFe,"A",{href:!0});var rDr=s(EP);Auo=r(rDr,"IBertForMaskedLM"),rDr.forEach(t),Luo=r(LFe," (I-BERT model)"),LFe.forEach(t),Buo=i(N),$u=n(N,"LI",{});var BFe=s($u);gee=n(BFe,"STRONG",{});var tDr=s(gee);xuo=r(tDr,"layoutlm"),tDr.forEach(t),kuo=r(BFe," \u2014 "),yP=n(BFe,"A",{href:!0});var aDr=s(yP);Ruo=r(aDr,"LayoutLMForMaskedLM"),aDr.forEach(t),Suo=r(BFe," (LayoutLM model)"),BFe.forEach(t),Puo=i(N),Iu=n(N,"LI",{});var xFe=s(Iu);hee=n(xFe,"STRONG",{});var nDr=s(hee);$uo=r(nDr,"longformer"),nDr.forEach(t),Iuo=r(xFe," \u2014 "),wP=n(xFe,"A",{href:!0});var sDr=s(wP);juo=r(sDr,"LongformerForMaskedLM"),sDr.forEach(t),Nuo=r(xFe," (Longformer model)"),xFe.forEach(t),Duo=i(N),ju=n(N,"LI",{});var kFe=s(ju);pee=n(kFe,"STRONG",{});var lDr=s(pee);quo=r(lDr,"mbart"),lDr.forEach(t),Guo=r(kFe," \u2014 "),AP=n(kFe,"A",{href:!0});var iDr=s(AP);Ouo=r(iDr,"MBartForConditionalGeneration"),iDr.forEach(t),Xuo=r(kFe," (mBART model)"),kFe.forEach(t),zuo=i(N),Nu=n(N,"LI",{});var RFe=s(Nu);_ee=n(RFe,"STRONG",{});var dDr=s(_ee);Vuo=r(dDr,"megatron-bert"),dDr.forEach(t),Wuo=r(RFe," \u2014 "),LP=n(RFe,"A",{href:!0});var cDr=s(LP);Quo=r(cDr,"MegatronBertForMaskedLM"),cDr.forEach(t),Huo=r(RFe," (MegatronBert model)"),RFe.forEach(t),Uuo=i(N),Du=n(N,"LI",{});var SFe=s(Du);uee=n(SFe,"STRONG",{});var fDr=s(uee);Juo=r(fDr,"mobilebert"),fDr.forEach(t),Yuo=r(SFe," \u2014 "),BP=n(SFe,"A",{href:!0});var mDr=s(BP);Kuo=r(mDr,"MobileBertForMaskedLM"),mDr.forEach(t),Zuo=r(SFe," (MobileBERT model)"),SFe.forEach(t),e1o=i(N),qu=n(N,"LI",{});var PFe=s(qu);bee=n(PFe,"STRONG",{});var gDr=s(bee);o1o=r(gDr,"mpnet"),gDr.forEach(t),r1o=r(PFe," \u2014 "),xP=n(PFe,"A",{href:!0});var hDr=s(xP);t1o=r(hDr,"MPNetForMaskedLM"),hDr.forEach(t),a1o=r(PFe," (MPNet model)"),PFe.forEach(t),n1o=i(N),Gu=n(N,"LI",{});var $Fe=s(Gu);vee=n($Fe,"STRONG",{});var pDr=s(vee);s1o=r(pDr,"nystromformer"),pDr.forEach(t),l1o=r($Fe," \u2014 "),kP=n($Fe,"A",{href:!0});var _Dr=s(kP);i1o=r(_Dr,"NystromformerForMaskedLM"),_Dr.forEach(t),d1o=r($Fe," (Nystromformer model)"),$Fe.forEach(t),c1o=i(N),Ou=n(N,"LI",{});var IFe=s(Ou);Tee=n(IFe,"STRONG",{});var uDr=s(Tee);f1o=r(uDr,"perceiver"),uDr.forEach(t),m1o=r(IFe," \u2014 "),RP=n(IFe,"A",{href:!0});var bDr=s(RP);g1o=r(bDr,"PerceiverForMaskedLM"),bDr.forEach(t),h1o=r(IFe," (Perceiver model)"),IFe.forEach(t),p1o=i(N),Xu=n(N,"LI",{});var jFe=s(Xu);Fee=n(jFe,"STRONG",{});var vDr=s(Fee);_1o=r(vDr,"qdqbert"),vDr.forEach(t),u1o=r(jFe," \u2014 "),SP=n(jFe,"A",{href:!0});var TDr=s(SP);b1o=r(TDr,"QDQBertForMaskedLM"),TDr.forEach(t),v1o=r(jFe," (QDQBert model)"),jFe.forEach(t),T1o=i(N),zu=n(N,"LI",{});var NFe=s(zu);Cee=n(NFe,"STRONG",{});var FDr=s(Cee);F1o=r(FDr,"reformer"),FDr.forEach(t),C1o=r(NFe," \u2014 "),PP=n(NFe,"A",{href:!0});var CDr=s(PP);M1o=r(CDr,"ReformerForMaskedLM"),CDr.forEach(t),E1o=r(NFe," (Reformer model)"),NFe.forEach(t),y1o=i(N),Vu=n(N,"LI",{});var DFe=s(Vu);Mee=n(DFe,"STRONG",{});var MDr=s(Mee);w1o=r(MDr,"rembert"),MDr.forEach(t),A1o=r(DFe," \u2014 "),$P=n(DFe,"A",{href:!0});var EDr=s($P);L1o=r(EDr,"RemBertForMaskedLM"),EDr.forEach(t),B1o=r(DFe," (RemBERT model)"),DFe.forEach(t),x1o=i(N),Wu=n(N,"LI",{});var qFe=s(Wu);Eee=n(qFe,"STRONG",{});var yDr=s(Eee);k1o=r(yDr,"roberta"),yDr.forEach(t),R1o=r(qFe," \u2014 "),IP=n(qFe,"A",{href:!0});var wDr=s(IP);S1o=r(wDr,"RobertaForMaskedLM"),wDr.forEach(t),P1o=r(qFe," (RoBERTa model)"),qFe.forEach(t),$1o=i(N),Qu=n(N,"LI",{});var GFe=s(Qu);yee=n(GFe,"STRONG",{});var ADr=s(yee);I1o=r(ADr,"roformer"),ADr.forEach(t),j1o=r(GFe," \u2014 "),jP=n(GFe,"A",{href:!0});var LDr=s(jP);N1o=r(LDr,"RoFormerForMaskedLM"),LDr.forEach(t),D1o=r(GFe," (RoFormer model)"),GFe.forEach(t),q1o=i(N),Hu=n(N,"LI",{});var OFe=s(Hu);wee=n(OFe,"STRONG",{});var BDr=s(wee);G1o=r(BDr,"squeezebert"),BDr.forEach(t),O1o=r(OFe," \u2014 "),NP=n(OFe,"A",{href:!0});var xDr=s(NP);X1o=r(xDr,"SqueezeBertForMaskedLM"),xDr.forEach(t),z1o=r(OFe," (SqueezeBERT model)"),OFe.forEach(t),V1o=i(N),Uu=n(N,"LI",{});var XFe=s(Uu);Aee=n(XFe,"STRONG",{});var kDr=s(Aee);W1o=r(kDr,"tapas"),kDr.forEach(t),Q1o=r(XFe," \u2014 "),DP=n(XFe,"A",{href:!0});var RDr=s(DP);H1o=r(RDr,"TapasForMaskedLM"),RDr.forEach(t),U1o=r(XFe," (TAPAS model)"),XFe.forEach(t),J1o=i(N),Ju=n(N,"LI",{});var zFe=s(Ju);Lee=n(zFe,"STRONG",{});var SDr=s(Lee);Y1o=r(SDr,"wav2vec2"),SDr.forEach(t),K1o=r(zFe," \u2014 "),Bee=n(zFe,"CODE",{});var PDr=s(Bee);Z1o=r(PDr,"Wav2Vec2ForMaskedLM"),PDr.forEach(t),ebo=r(zFe,"(Wav2Vec2 model)"),zFe.forEach(t),obo=i(N),Yu=n(N,"LI",{});var VFe=s(Yu);xee=n(VFe,"STRONG",{});var $Dr=s(xee);rbo=r($Dr,"xlm"),$Dr.forEach(t),tbo=r(VFe," \u2014 "),qP=n(VFe,"A",{href:!0});var IDr=s(qP);abo=r(IDr,"XLMWithLMHeadModel"),IDr.forEach(t),nbo=r(VFe," (XLM model)"),VFe.forEach(t),sbo=i(N),Ku=n(N,"LI",{});var WFe=s(Ku);kee=n(WFe,"STRONG",{});var jDr=s(kee);lbo=r(jDr,"xlm-roberta"),jDr.forEach(t),ibo=r(WFe," \u2014 "),GP=n(WFe,"A",{href:!0});var NDr=s(GP);dbo=r(NDr,"XLMRobertaForMaskedLM"),NDr.forEach(t),cbo=r(WFe," (XLM-RoBERTa model)"),WFe.forEach(t),fbo=i(N),Zu=n(N,"LI",{});var QFe=s(Zu);Ree=n(QFe,"STRONG",{});var DDr=s(Ree);mbo=r(DDr,"xlm-roberta-xl"),DDr.forEach(t),gbo=r(QFe," \u2014 "),OP=n(QFe,"A",{href:!0});var qDr=s(OP);hbo=r(qDr,"XLMRobertaXLForMaskedLM"),qDr.forEach(t),pbo=r(QFe," (XLM-RoBERTa-XL model)"),QFe.forEach(t),_bo=i(N),e1=n(N,"LI",{});var HFe=s(e1);See=n(HFe,"STRONG",{});var GDr=s(See);ubo=r(GDr,"yoso"),GDr.forEach(t),bbo=r(HFe," \u2014 "),XP=n(HFe,"A",{href:!0});var ODr=s(XP);vbo=r(ODr,"YosoForMaskedLM"),ODr.forEach(t),Tbo=r(HFe," (YOSO model)"),HFe.forEach(t),N.forEach(t),Fbo=i(It),o1=n(It,"P",{});var UFe=s(o1);Cbo=r(UFe,"The model is set in evaluation mode by default using "),Pee=n(UFe,"CODE",{});var XDr=s(Pee);Mbo=r(XDr,"model.eval()"),XDr.forEach(t),Ebo=r(UFe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ee=n(UFe,"CODE",{});var zDr=s($ee);ybo=r(zDr,"model.train()"),zDr.forEach(t),UFe.forEach(t),wbo=i(It),Iee=n(It,"P",{});var VDr=s(Iee);Abo=r(VDr,"Examples:"),VDr.forEach(t),Lbo=i(It),m(cM.$$.fragment,It),It.forEach(t),zs.forEach(t),RLe=i(d),Ki=n(d,"H2",{class:!0});var DBe=s(Ki);r1=n(DBe,"A",{id:!0,class:!0,href:!0});var WDr=s(r1);jee=n(WDr,"SPAN",{});var QDr=s(jee);m(fM.$$.fragment,QDr),QDr.forEach(t),WDr.forEach(t),Bbo=i(DBe),Nee=n(DBe,"SPAN",{});var HDr=s(Nee);xbo=r(HDr,"AutoModelForSeq2SeqLM"),HDr.forEach(t),DBe.forEach(t),SLe=i(d),Uo=n(d,"DIV",{class:!0});var Ws=s(Uo);m(mM.$$.fragment,Ws),kbo=i(Ws),Zi=n(Ws,"P",{});var nz=s(Zi);Rbo=r(nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Dee=n(nz,"CODE",{});var UDr=s(Dee);Sbo=r(UDr,"from_pretrained()"),UDr.forEach(t),Pbo=r(nz,"class method or the "),qee=n(nz,"CODE",{});var JDr=s(qee);$bo=r(JDr,"from_config()"),JDr.forEach(t),Ibo=r(nz,`class
method.`),nz.forEach(t),jbo=i(Ws),gM=n(Ws,"P",{});var qBe=s(gM);Nbo=r(qBe,"This class cannot be instantiated directly using "),Gee=n(qBe,"CODE",{});var YDr=s(Gee);Dbo=r(YDr,"__init__()"),YDr.forEach(t),qbo=r(qBe," (throws an error)."),qBe.forEach(t),Gbo=i(Ws),Or=n(Ws,"DIV",{class:!0});var Qs=s(Or);m(hM.$$.fragment,Qs),Obo=i(Qs),Oee=n(Qs,"P",{});var KDr=s(Oee);Xbo=r(KDr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),KDr.forEach(t),zbo=i(Qs),ed=n(Qs,"P",{});var sz=s(ed);Vbo=r(sz,`Note:
Loading a model from its configuration file does `),Xee=n(sz,"STRONG",{});var ZDr=s(Xee);Wbo=r(ZDr,"not"),ZDr.forEach(t),Qbo=r(sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),zee=n(sz,"CODE",{});var eqr=s(zee);Hbo=r(eqr,"from_pretrained()"),eqr.forEach(t),Ubo=r(sz,"to load the model weights."),sz.forEach(t),Jbo=i(Qs),Vee=n(Qs,"P",{});var oqr=s(Vee);Ybo=r(oqr,"Examples:"),oqr.forEach(t),Kbo=i(Qs),m(pM.$$.fragment,Qs),Qs.forEach(t),Zbo=i(Ws),Pe=n(Ws,"DIV",{class:!0});var jt=s(Pe);m(_M.$$.fragment,jt),e5o=i(jt),Wee=n(jt,"P",{});var rqr=s(Wee);o5o=r(rqr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rqr.forEach(t),r5o=i(jt),Xa=n(jt,"P",{});var gC=s(Xa);t5o=r(gC,"The model class to instantiate is selected based on the "),Qee=n(gC,"CODE",{});var tqr=s(Qee);a5o=r(tqr,"model_type"),tqr.forEach(t),n5o=r(gC,` property of the config object (either
passed as an argument or loaded from `),Hee=n(gC,"CODE",{});var aqr=s(Hee);s5o=r(aqr,"pretrained_model_name_or_path"),aqr.forEach(t),l5o=r(gC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uee=n(gC,"CODE",{});var nqr=s(Uee);i5o=r(nqr,"pretrained_model_name_or_path"),nqr.forEach(t),d5o=r(gC,":"),gC.forEach(t),c5o=i(jt),ae=n(jt,"UL",{});var le=s(ae);t1=n(le,"LI",{});var JFe=s(t1);Jee=n(JFe,"STRONG",{});var sqr=s(Jee);f5o=r(sqr,"bart"),sqr.forEach(t),m5o=r(JFe," \u2014 "),zP=n(JFe,"A",{href:!0});var lqr=s(zP);g5o=r(lqr,"BartForConditionalGeneration"),lqr.forEach(t),h5o=r(JFe," (BART model)"),JFe.forEach(t),p5o=i(le),a1=n(le,"LI",{});var YFe=s(a1);Yee=n(YFe,"STRONG",{});var iqr=s(Yee);_5o=r(iqr,"bigbird_pegasus"),iqr.forEach(t),u5o=r(YFe," \u2014 "),VP=n(YFe,"A",{href:!0});var dqr=s(VP);b5o=r(dqr,"BigBirdPegasusForConditionalGeneration"),dqr.forEach(t),v5o=r(YFe," (BigBirdPegasus model)"),YFe.forEach(t),T5o=i(le),n1=n(le,"LI",{});var KFe=s(n1);Kee=n(KFe,"STRONG",{});var cqr=s(Kee);F5o=r(cqr,"blenderbot"),cqr.forEach(t),C5o=r(KFe," \u2014 "),WP=n(KFe,"A",{href:!0});var fqr=s(WP);M5o=r(fqr,"BlenderbotForConditionalGeneration"),fqr.forEach(t),E5o=r(KFe," (Blenderbot model)"),KFe.forEach(t),y5o=i(le),s1=n(le,"LI",{});var ZFe=s(s1);Zee=n(ZFe,"STRONG",{});var mqr=s(Zee);w5o=r(mqr,"blenderbot-small"),mqr.forEach(t),A5o=r(ZFe," \u2014 "),QP=n(ZFe,"A",{href:!0});var gqr=s(QP);L5o=r(gqr,"BlenderbotSmallForConditionalGeneration"),gqr.forEach(t),B5o=r(ZFe," (BlenderbotSmall model)"),ZFe.forEach(t),x5o=i(le),l1=n(le,"LI",{});var eCe=s(l1);eoe=n(eCe,"STRONG",{});var hqr=s(eoe);k5o=r(hqr,"encoder-decoder"),hqr.forEach(t),R5o=r(eCe," \u2014 "),HP=n(eCe,"A",{href:!0});var pqr=s(HP);S5o=r(pqr,"EncoderDecoderModel"),pqr.forEach(t),P5o=r(eCe," (Encoder decoder model)"),eCe.forEach(t),$5o=i(le),i1=n(le,"LI",{});var oCe=s(i1);ooe=n(oCe,"STRONG",{});var _qr=s(ooe);I5o=r(_qr,"fsmt"),_qr.forEach(t),j5o=r(oCe," \u2014 "),UP=n(oCe,"A",{href:!0});var uqr=s(UP);N5o=r(uqr,"FSMTForConditionalGeneration"),uqr.forEach(t),D5o=r(oCe," (FairSeq Machine-Translation model)"),oCe.forEach(t),q5o=i(le),d1=n(le,"LI",{});var rCe=s(d1);roe=n(rCe,"STRONG",{});var bqr=s(roe);G5o=r(bqr,"led"),bqr.forEach(t),O5o=r(rCe," \u2014 "),JP=n(rCe,"A",{href:!0});var vqr=s(JP);X5o=r(vqr,"LEDForConditionalGeneration"),vqr.forEach(t),z5o=r(rCe," (LED model)"),rCe.forEach(t),V5o=i(le),c1=n(le,"LI",{});var tCe=s(c1);toe=n(tCe,"STRONG",{});var Tqr=s(toe);W5o=r(Tqr,"m2m_100"),Tqr.forEach(t),Q5o=r(tCe," \u2014 "),YP=n(tCe,"A",{href:!0});var Fqr=s(YP);H5o=r(Fqr,"M2M100ForConditionalGeneration"),Fqr.forEach(t),U5o=r(tCe," (M2M100 model)"),tCe.forEach(t),J5o=i(le),f1=n(le,"LI",{});var aCe=s(f1);aoe=n(aCe,"STRONG",{});var Cqr=s(aoe);Y5o=r(Cqr,"marian"),Cqr.forEach(t),K5o=r(aCe," \u2014 "),KP=n(aCe,"A",{href:!0});var Mqr=s(KP);Z5o=r(Mqr,"MarianMTModel"),Mqr.forEach(t),e2o=r(aCe," (Marian model)"),aCe.forEach(t),o2o=i(le),m1=n(le,"LI",{});var nCe=s(m1);noe=n(nCe,"STRONG",{});var Eqr=s(noe);r2o=r(Eqr,"mbart"),Eqr.forEach(t),t2o=r(nCe," \u2014 "),ZP=n(nCe,"A",{href:!0});var yqr=s(ZP);a2o=r(yqr,"MBartForConditionalGeneration"),yqr.forEach(t),n2o=r(nCe," (mBART model)"),nCe.forEach(t),s2o=i(le),g1=n(le,"LI",{});var sCe=s(g1);soe=n(sCe,"STRONG",{});var wqr=s(soe);l2o=r(wqr,"mt5"),wqr.forEach(t),i2o=r(sCe," \u2014 "),e$=n(sCe,"A",{href:!0});var Aqr=s(e$);d2o=r(Aqr,"MT5ForConditionalGeneration"),Aqr.forEach(t),c2o=r(sCe," (mT5 model)"),sCe.forEach(t),f2o=i(le),h1=n(le,"LI",{});var lCe=s(h1);loe=n(lCe,"STRONG",{});var Lqr=s(loe);m2o=r(Lqr,"pegasus"),Lqr.forEach(t),g2o=r(lCe," \u2014 "),o$=n(lCe,"A",{href:!0});var Bqr=s(o$);h2o=r(Bqr,"PegasusForConditionalGeneration"),Bqr.forEach(t),p2o=r(lCe," (Pegasus model)"),lCe.forEach(t),_2o=i(le),p1=n(le,"LI",{});var iCe=s(p1);ioe=n(iCe,"STRONG",{});var xqr=s(ioe);u2o=r(xqr,"plbart"),xqr.forEach(t),b2o=r(iCe," \u2014 "),r$=n(iCe,"A",{href:!0});var kqr=s(r$);v2o=r(kqr,"PLBartForConditionalGeneration"),kqr.forEach(t),T2o=r(iCe," (PLBart model)"),iCe.forEach(t),F2o=i(le),_1=n(le,"LI",{});var dCe=s(_1);doe=n(dCe,"STRONG",{});var Rqr=s(doe);C2o=r(Rqr,"prophetnet"),Rqr.forEach(t),M2o=r(dCe," \u2014 "),t$=n(dCe,"A",{href:!0});var Sqr=s(t$);E2o=r(Sqr,"ProphetNetForConditionalGeneration"),Sqr.forEach(t),y2o=r(dCe," (ProphetNet model)"),dCe.forEach(t),w2o=i(le),u1=n(le,"LI",{});var cCe=s(u1);coe=n(cCe,"STRONG",{});var Pqr=s(coe);A2o=r(Pqr,"t5"),Pqr.forEach(t),L2o=r(cCe," \u2014 "),a$=n(cCe,"A",{href:!0});var $qr=s(a$);B2o=r($qr,"T5ForConditionalGeneration"),$qr.forEach(t),x2o=r(cCe," (T5 model)"),cCe.forEach(t),k2o=i(le),b1=n(le,"LI",{});var fCe=s(b1);foe=n(fCe,"STRONG",{});var Iqr=s(foe);R2o=r(Iqr,"xlm-prophetnet"),Iqr.forEach(t),S2o=r(fCe," \u2014 "),n$=n(fCe,"A",{href:!0});var jqr=s(n$);P2o=r(jqr,"XLMProphetNetForConditionalGeneration"),jqr.forEach(t),$2o=r(fCe," (XLMProphetNet model)"),fCe.forEach(t),le.forEach(t),I2o=i(jt),v1=n(jt,"P",{});var mCe=s(v1);j2o=r(mCe,"The model is set in evaluation mode by default using "),moe=n(mCe,"CODE",{});var Nqr=s(moe);N2o=r(Nqr,"model.eval()"),Nqr.forEach(t),D2o=r(mCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),goe=n(mCe,"CODE",{});var Dqr=s(goe);q2o=r(Dqr,"model.train()"),Dqr.forEach(t),mCe.forEach(t),G2o=i(jt),hoe=n(jt,"P",{});var qqr=s(hoe);O2o=r(qqr,"Examples:"),qqr.forEach(t),X2o=i(jt),m(uM.$$.fragment,jt),jt.forEach(t),Ws.forEach(t),PLe=i(d),od=n(d,"H2",{class:!0});var GBe=s(od);T1=n(GBe,"A",{id:!0,class:!0,href:!0});var Gqr=s(T1);poe=n(Gqr,"SPAN",{});var Oqr=s(poe);m(bM.$$.fragment,Oqr),Oqr.forEach(t),Gqr.forEach(t),z2o=i(GBe),_oe=n(GBe,"SPAN",{});var Xqr=s(_oe);V2o=r(Xqr,"AutoModelForSequenceClassification"),Xqr.forEach(t),GBe.forEach(t),$Le=i(d),Jo=n(d,"DIV",{class:!0});var Hs=s(Jo);m(vM.$$.fragment,Hs),W2o=i(Hs),rd=n(Hs,"P",{});var lz=s(rd);Q2o=r(lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uoe=n(lz,"CODE",{});var zqr=s(uoe);H2o=r(zqr,"from_pretrained()"),zqr.forEach(t),U2o=r(lz,"class method or the "),boe=n(lz,"CODE",{});var Vqr=s(boe);J2o=r(Vqr,"from_config()"),Vqr.forEach(t),Y2o=r(lz,`class
method.`),lz.forEach(t),K2o=i(Hs),TM=n(Hs,"P",{});var OBe=s(TM);Z2o=r(OBe,"This class cannot be instantiated directly using "),voe=n(OBe,"CODE",{});var Wqr=s(voe);evo=r(Wqr,"__init__()"),Wqr.forEach(t),ovo=r(OBe," (throws an error)."),OBe.forEach(t),rvo=i(Hs),Xr=n(Hs,"DIV",{class:!0});var Us=s(Xr);m(FM.$$.fragment,Us),tvo=i(Us),Toe=n(Us,"P",{});var Qqr=s(Toe);avo=r(Qqr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Qqr.forEach(t),nvo=i(Us),td=n(Us,"P",{});var iz=s(td);svo=r(iz,`Note:
Loading a model from its configuration file does `),Foe=n(iz,"STRONG",{});var Hqr=s(Foe);lvo=r(Hqr,"not"),Hqr.forEach(t),ivo=r(iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Coe=n(iz,"CODE",{});var Uqr=s(Coe);dvo=r(Uqr,"from_pretrained()"),Uqr.forEach(t),cvo=r(iz,"to load the model weights."),iz.forEach(t),fvo=i(Us),Moe=n(Us,"P",{});var Jqr=s(Moe);mvo=r(Jqr,"Examples:"),Jqr.forEach(t),gvo=i(Us),m(CM.$$.fragment,Us),Us.forEach(t),hvo=i(Hs),$e=n(Hs,"DIV",{class:!0});var Nt=s($e);m(MM.$$.fragment,Nt),pvo=i(Nt),Eoe=n(Nt,"P",{});var Yqr=s(Eoe);_vo=r(Yqr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Yqr.forEach(t),uvo=i(Nt),za=n(Nt,"P",{});var hC=s(za);bvo=r(hC,"The model class to instantiate is selected based on the "),yoe=n(hC,"CODE",{});var Kqr=s(yoe);vvo=r(Kqr,"model_type"),Kqr.forEach(t),Tvo=r(hC,` property of the config object (either
passed as an argument or loaded from `),woe=n(hC,"CODE",{});var Zqr=s(woe);Fvo=r(Zqr,"pretrained_model_name_or_path"),Zqr.forEach(t),Cvo=r(hC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aoe=n(hC,"CODE",{});var eGr=s(Aoe);Mvo=r(eGr,"pretrained_model_name_or_path"),eGr.forEach(t),Evo=r(hC,":"),hC.forEach(t),yvo=i(Nt),A=n(Nt,"UL",{});var L=s(A);F1=n(L,"LI",{});var gCe=s(F1);Loe=n(gCe,"STRONG",{});var oGr=s(Loe);wvo=r(oGr,"albert"),oGr.forEach(t),Avo=r(gCe," \u2014 "),s$=n(gCe,"A",{href:!0});var rGr=s(s$);Lvo=r(rGr,"AlbertForSequenceClassification"),rGr.forEach(t),Bvo=r(gCe," (ALBERT model)"),gCe.forEach(t),xvo=i(L),C1=n(L,"LI",{});var hCe=s(C1);Boe=n(hCe,"STRONG",{});var tGr=s(Boe);kvo=r(tGr,"bart"),tGr.forEach(t),Rvo=r(hCe," \u2014 "),l$=n(hCe,"A",{href:!0});var aGr=s(l$);Svo=r(aGr,"BartForSequenceClassification"),aGr.forEach(t),Pvo=r(hCe," (BART model)"),hCe.forEach(t),$vo=i(L),M1=n(L,"LI",{});var pCe=s(M1);xoe=n(pCe,"STRONG",{});var nGr=s(xoe);Ivo=r(nGr,"bert"),nGr.forEach(t),jvo=r(pCe," \u2014 "),i$=n(pCe,"A",{href:!0});var sGr=s(i$);Nvo=r(sGr,"BertForSequenceClassification"),sGr.forEach(t),Dvo=r(pCe," (BERT model)"),pCe.forEach(t),qvo=i(L),E1=n(L,"LI",{});var _Ce=s(E1);koe=n(_Ce,"STRONG",{});var lGr=s(koe);Gvo=r(lGr,"big_bird"),lGr.forEach(t),Ovo=r(_Ce," \u2014 "),d$=n(_Ce,"A",{href:!0});var iGr=s(d$);Xvo=r(iGr,"BigBirdForSequenceClassification"),iGr.forEach(t),zvo=r(_Ce," (BigBird model)"),_Ce.forEach(t),Vvo=i(L),y1=n(L,"LI",{});var uCe=s(y1);Roe=n(uCe,"STRONG",{});var dGr=s(Roe);Wvo=r(dGr,"bigbird_pegasus"),dGr.forEach(t),Qvo=r(uCe," \u2014 "),c$=n(uCe,"A",{href:!0});var cGr=s(c$);Hvo=r(cGr,"BigBirdPegasusForSequenceClassification"),cGr.forEach(t),Uvo=r(uCe," (BigBirdPegasus model)"),uCe.forEach(t),Jvo=i(L),w1=n(L,"LI",{});var bCe=s(w1);Soe=n(bCe,"STRONG",{});var fGr=s(Soe);Yvo=r(fGr,"camembert"),fGr.forEach(t),Kvo=r(bCe," \u2014 "),f$=n(bCe,"A",{href:!0});var mGr=s(f$);Zvo=r(mGr,"CamembertForSequenceClassification"),mGr.forEach(t),e6o=r(bCe," (CamemBERT model)"),bCe.forEach(t),o6o=i(L),A1=n(L,"LI",{});var vCe=s(A1);Poe=n(vCe,"STRONG",{});var gGr=s(Poe);r6o=r(gGr,"canine"),gGr.forEach(t),t6o=r(vCe," \u2014 "),m$=n(vCe,"A",{href:!0});var hGr=s(m$);a6o=r(hGr,"CanineForSequenceClassification"),hGr.forEach(t),n6o=r(vCe," (Canine model)"),vCe.forEach(t),s6o=i(L),L1=n(L,"LI",{});var TCe=s(L1);$oe=n(TCe,"STRONG",{});var pGr=s($oe);l6o=r(pGr,"convbert"),pGr.forEach(t),i6o=r(TCe," \u2014 "),g$=n(TCe,"A",{href:!0});var _Gr=s(g$);d6o=r(_Gr,"ConvBertForSequenceClassification"),_Gr.forEach(t),c6o=r(TCe," (ConvBERT model)"),TCe.forEach(t),f6o=i(L),B1=n(L,"LI",{});var FCe=s(B1);Ioe=n(FCe,"STRONG",{});var uGr=s(Ioe);m6o=r(uGr,"ctrl"),uGr.forEach(t),g6o=r(FCe," \u2014 "),h$=n(FCe,"A",{href:!0});var bGr=s(h$);h6o=r(bGr,"CTRLForSequenceClassification"),bGr.forEach(t),p6o=r(FCe," (CTRL model)"),FCe.forEach(t),_6o=i(L),x1=n(L,"LI",{});var CCe=s(x1);joe=n(CCe,"STRONG",{});var vGr=s(joe);u6o=r(vGr,"deberta"),vGr.forEach(t),b6o=r(CCe," \u2014 "),p$=n(CCe,"A",{href:!0});var TGr=s(p$);v6o=r(TGr,"DebertaForSequenceClassification"),TGr.forEach(t),T6o=r(CCe," (DeBERTa model)"),CCe.forEach(t),F6o=i(L),k1=n(L,"LI",{});var MCe=s(k1);Noe=n(MCe,"STRONG",{});var FGr=s(Noe);C6o=r(FGr,"deberta-v2"),FGr.forEach(t),M6o=r(MCe," \u2014 "),_$=n(MCe,"A",{href:!0});var CGr=s(_$);E6o=r(CGr,"DebertaV2ForSequenceClassification"),CGr.forEach(t),y6o=r(MCe," (DeBERTa-v2 model)"),MCe.forEach(t),w6o=i(L),R1=n(L,"LI",{});var ECe=s(R1);Doe=n(ECe,"STRONG",{});var MGr=s(Doe);A6o=r(MGr,"distilbert"),MGr.forEach(t),L6o=r(ECe," \u2014 "),u$=n(ECe,"A",{href:!0});var EGr=s(u$);B6o=r(EGr,"DistilBertForSequenceClassification"),EGr.forEach(t),x6o=r(ECe," (DistilBERT model)"),ECe.forEach(t),k6o=i(L),S1=n(L,"LI",{});var yCe=s(S1);qoe=n(yCe,"STRONG",{});var yGr=s(qoe);R6o=r(yGr,"electra"),yGr.forEach(t),S6o=r(yCe," \u2014 "),b$=n(yCe,"A",{href:!0});var wGr=s(b$);P6o=r(wGr,"ElectraForSequenceClassification"),wGr.forEach(t),$6o=r(yCe," (ELECTRA model)"),yCe.forEach(t),I6o=i(L),P1=n(L,"LI",{});var wCe=s(P1);Goe=n(wCe,"STRONG",{});var AGr=s(Goe);j6o=r(AGr,"flaubert"),AGr.forEach(t),N6o=r(wCe," \u2014 "),v$=n(wCe,"A",{href:!0});var LGr=s(v$);D6o=r(LGr,"FlaubertForSequenceClassification"),LGr.forEach(t),q6o=r(wCe," (FlauBERT model)"),wCe.forEach(t),G6o=i(L),$1=n(L,"LI",{});var ACe=s($1);Ooe=n(ACe,"STRONG",{});var BGr=s(Ooe);O6o=r(BGr,"fnet"),BGr.forEach(t),X6o=r(ACe," \u2014 "),T$=n(ACe,"A",{href:!0});var xGr=s(T$);z6o=r(xGr,"FNetForSequenceClassification"),xGr.forEach(t),V6o=r(ACe," (FNet model)"),ACe.forEach(t),W6o=i(L),I1=n(L,"LI",{});var LCe=s(I1);Xoe=n(LCe,"STRONG",{});var kGr=s(Xoe);Q6o=r(kGr,"funnel"),kGr.forEach(t),H6o=r(LCe," \u2014 "),F$=n(LCe,"A",{href:!0});var RGr=s(F$);U6o=r(RGr,"FunnelForSequenceClassification"),RGr.forEach(t),J6o=r(LCe," (Funnel Transformer model)"),LCe.forEach(t),Y6o=i(L),j1=n(L,"LI",{});var BCe=s(j1);zoe=n(BCe,"STRONG",{});var SGr=s(zoe);K6o=r(SGr,"gpt2"),SGr.forEach(t),Z6o=r(BCe," \u2014 "),C$=n(BCe,"A",{href:!0});var PGr=s(C$);eTo=r(PGr,"GPT2ForSequenceClassification"),PGr.forEach(t),oTo=r(BCe," (OpenAI GPT-2 model)"),BCe.forEach(t),rTo=i(L),N1=n(L,"LI",{});var xCe=s(N1);Voe=n(xCe,"STRONG",{});var $Gr=s(Voe);tTo=r($Gr,"gpt_neo"),$Gr.forEach(t),aTo=r(xCe," \u2014 "),M$=n(xCe,"A",{href:!0});var IGr=s(M$);nTo=r(IGr,"GPTNeoForSequenceClassification"),IGr.forEach(t),sTo=r(xCe," (GPT Neo model)"),xCe.forEach(t),lTo=i(L),D1=n(L,"LI",{});var kCe=s(D1);Woe=n(kCe,"STRONG",{});var jGr=s(Woe);iTo=r(jGr,"gptj"),jGr.forEach(t),dTo=r(kCe," \u2014 "),E$=n(kCe,"A",{href:!0});var NGr=s(E$);cTo=r(NGr,"GPTJForSequenceClassification"),NGr.forEach(t),fTo=r(kCe," (GPT-J model)"),kCe.forEach(t),mTo=i(L),q1=n(L,"LI",{});var RCe=s(q1);Qoe=n(RCe,"STRONG",{});var DGr=s(Qoe);gTo=r(DGr,"ibert"),DGr.forEach(t),hTo=r(RCe," \u2014 "),y$=n(RCe,"A",{href:!0});var qGr=s(y$);pTo=r(qGr,"IBertForSequenceClassification"),qGr.forEach(t),_To=r(RCe," (I-BERT model)"),RCe.forEach(t),uTo=i(L),G1=n(L,"LI",{});var SCe=s(G1);Hoe=n(SCe,"STRONG",{});var GGr=s(Hoe);bTo=r(GGr,"layoutlm"),GGr.forEach(t),vTo=r(SCe," \u2014 "),w$=n(SCe,"A",{href:!0});var OGr=s(w$);TTo=r(OGr,"LayoutLMForSequenceClassification"),OGr.forEach(t),FTo=r(SCe," (LayoutLM model)"),SCe.forEach(t),CTo=i(L),O1=n(L,"LI",{});var PCe=s(O1);Uoe=n(PCe,"STRONG",{});var XGr=s(Uoe);MTo=r(XGr,"layoutlmv2"),XGr.forEach(t),ETo=r(PCe," \u2014 "),A$=n(PCe,"A",{href:!0});var zGr=s(A$);yTo=r(zGr,"LayoutLMv2ForSequenceClassification"),zGr.forEach(t),wTo=r(PCe," (LayoutLMv2 model)"),PCe.forEach(t),ATo=i(L),X1=n(L,"LI",{});var $Ce=s(X1);Joe=n($Ce,"STRONG",{});var VGr=s(Joe);LTo=r(VGr,"led"),VGr.forEach(t),BTo=r($Ce," \u2014 "),L$=n($Ce,"A",{href:!0});var WGr=s(L$);xTo=r(WGr,"LEDForSequenceClassification"),WGr.forEach(t),kTo=r($Ce," (LED model)"),$Ce.forEach(t),RTo=i(L),z1=n(L,"LI",{});var ICe=s(z1);Yoe=n(ICe,"STRONG",{});var QGr=s(Yoe);STo=r(QGr,"longformer"),QGr.forEach(t),PTo=r(ICe," \u2014 "),B$=n(ICe,"A",{href:!0});var HGr=s(B$);$To=r(HGr,"LongformerForSequenceClassification"),HGr.forEach(t),ITo=r(ICe," (Longformer model)"),ICe.forEach(t),jTo=i(L),V1=n(L,"LI",{});var jCe=s(V1);Koe=n(jCe,"STRONG",{});var UGr=s(Koe);NTo=r(UGr,"mbart"),UGr.forEach(t),DTo=r(jCe," \u2014 "),x$=n(jCe,"A",{href:!0});var JGr=s(x$);qTo=r(JGr,"MBartForSequenceClassification"),JGr.forEach(t),GTo=r(jCe," (mBART model)"),jCe.forEach(t),OTo=i(L),W1=n(L,"LI",{});var NCe=s(W1);Zoe=n(NCe,"STRONG",{});var YGr=s(Zoe);XTo=r(YGr,"megatron-bert"),YGr.forEach(t),zTo=r(NCe," \u2014 "),k$=n(NCe,"A",{href:!0});var KGr=s(k$);VTo=r(KGr,"MegatronBertForSequenceClassification"),KGr.forEach(t),WTo=r(NCe," (MegatronBert model)"),NCe.forEach(t),QTo=i(L),Q1=n(L,"LI",{});var DCe=s(Q1);ere=n(DCe,"STRONG",{});var ZGr=s(ere);HTo=r(ZGr,"mobilebert"),ZGr.forEach(t),UTo=r(DCe," \u2014 "),R$=n(DCe,"A",{href:!0});var eOr=s(R$);JTo=r(eOr,"MobileBertForSequenceClassification"),eOr.forEach(t),YTo=r(DCe," (MobileBERT model)"),DCe.forEach(t),KTo=i(L),H1=n(L,"LI",{});var qCe=s(H1);ore=n(qCe,"STRONG",{});var oOr=s(ore);ZTo=r(oOr,"mpnet"),oOr.forEach(t),e7o=r(qCe," \u2014 "),S$=n(qCe,"A",{href:!0});var rOr=s(S$);o7o=r(rOr,"MPNetForSequenceClassification"),rOr.forEach(t),r7o=r(qCe," (MPNet model)"),qCe.forEach(t),t7o=i(L),U1=n(L,"LI",{});var GCe=s(U1);rre=n(GCe,"STRONG",{});var tOr=s(rre);a7o=r(tOr,"nystromformer"),tOr.forEach(t),n7o=r(GCe," \u2014 "),P$=n(GCe,"A",{href:!0});var aOr=s(P$);s7o=r(aOr,"NystromformerForSequenceClassification"),aOr.forEach(t),l7o=r(GCe," (Nystromformer model)"),GCe.forEach(t),i7o=i(L),J1=n(L,"LI",{});var OCe=s(J1);tre=n(OCe,"STRONG",{});var nOr=s(tre);d7o=r(nOr,"openai-gpt"),nOr.forEach(t),c7o=r(OCe," \u2014 "),$$=n(OCe,"A",{href:!0});var sOr=s($$);f7o=r(sOr,"OpenAIGPTForSequenceClassification"),sOr.forEach(t),m7o=r(OCe," (OpenAI GPT model)"),OCe.forEach(t),g7o=i(L),Y1=n(L,"LI",{});var XCe=s(Y1);are=n(XCe,"STRONG",{});var lOr=s(are);h7o=r(lOr,"perceiver"),lOr.forEach(t),p7o=r(XCe," \u2014 "),I$=n(XCe,"A",{href:!0});var iOr=s(I$);_7o=r(iOr,"PerceiverForSequenceClassification"),iOr.forEach(t),u7o=r(XCe," (Perceiver model)"),XCe.forEach(t),b7o=i(L),K1=n(L,"LI",{});var zCe=s(K1);nre=n(zCe,"STRONG",{});var dOr=s(nre);v7o=r(dOr,"plbart"),dOr.forEach(t),T7o=r(zCe," \u2014 "),j$=n(zCe,"A",{href:!0});var cOr=s(j$);F7o=r(cOr,"PLBartForSequenceClassification"),cOr.forEach(t),C7o=r(zCe," (PLBart model)"),zCe.forEach(t),M7o=i(L),Z1=n(L,"LI",{});var VCe=s(Z1);sre=n(VCe,"STRONG",{});var fOr=s(sre);E7o=r(fOr,"qdqbert"),fOr.forEach(t),y7o=r(VCe," \u2014 "),N$=n(VCe,"A",{href:!0});var mOr=s(N$);w7o=r(mOr,"QDQBertForSequenceClassification"),mOr.forEach(t),A7o=r(VCe," (QDQBert model)"),VCe.forEach(t),L7o=i(L),eb=n(L,"LI",{});var WCe=s(eb);lre=n(WCe,"STRONG",{});var gOr=s(lre);B7o=r(gOr,"reformer"),gOr.forEach(t),x7o=r(WCe," \u2014 "),D$=n(WCe,"A",{href:!0});var hOr=s(D$);k7o=r(hOr,"ReformerForSequenceClassification"),hOr.forEach(t),R7o=r(WCe," (Reformer model)"),WCe.forEach(t),S7o=i(L),ob=n(L,"LI",{});var QCe=s(ob);ire=n(QCe,"STRONG",{});var pOr=s(ire);P7o=r(pOr,"rembert"),pOr.forEach(t),$7o=r(QCe," \u2014 "),q$=n(QCe,"A",{href:!0});var _Or=s(q$);I7o=r(_Or,"RemBertForSequenceClassification"),_Or.forEach(t),j7o=r(QCe," (RemBERT model)"),QCe.forEach(t),N7o=i(L),rb=n(L,"LI",{});var HCe=s(rb);dre=n(HCe,"STRONG",{});var uOr=s(dre);D7o=r(uOr,"roberta"),uOr.forEach(t),q7o=r(HCe," \u2014 "),G$=n(HCe,"A",{href:!0});var bOr=s(G$);G7o=r(bOr,"RobertaForSequenceClassification"),bOr.forEach(t),O7o=r(HCe," (RoBERTa model)"),HCe.forEach(t),X7o=i(L),tb=n(L,"LI",{});var UCe=s(tb);cre=n(UCe,"STRONG",{});var vOr=s(cre);z7o=r(vOr,"roformer"),vOr.forEach(t),V7o=r(UCe," \u2014 "),O$=n(UCe,"A",{href:!0});var TOr=s(O$);W7o=r(TOr,"RoFormerForSequenceClassification"),TOr.forEach(t),Q7o=r(UCe," (RoFormer model)"),UCe.forEach(t),H7o=i(L),ab=n(L,"LI",{});var JCe=s(ab);fre=n(JCe,"STRONG",{});var FOr=s(fre);U7o=r(FOr,"squeezebert"),FOr.forEach(t),J7o=r(JCe," \u2014 "),X$=n(JCe,"A",{href:!0});var COr=s(X$);Y7o=r(COr,"SqueezeBertForSequenceClassification"),COr.forEach(t),K7o=r(JCe," (SqueezeBERT model)"),JCe.forEach(t),Z7o=i(L),nb=n(L,"LI",{});var YCe=s(nb);mre=n(YCe,"STRONG",{});var MOr=s(mre);e8o=r(MOr,"tapas"),MOr.forEach(t),o8o=r(YCe," \u2014 "),z$=n(YCe,"A",{href:!0});var EOr=s(z$);r8o=r(EOr,"TapasForSequenceClassification"),EOr.forEach(t),t8o=r(YCe," (TAPAS model)"),YCe.forEach(t),a8o=i(L),sb=n(L,"LI",{});var KCe=s(sb);gre=n(KCe,"STRONG",{});var yOr=s(gre);n8o=r(yOr,"transfo-xl"),yOr.forEach(t),s8o=r(KCe," \u2014 "),V$=n(KCe,"A",{href:!0});var wOr=s(V$);l8o=r(wOr,"TransfoXLForSequenceClassification"),wOr.forEach(t),i8o=r(KCe," (Transformer-XL model)"),KCe.forEach(t),d8o=i(L),lb=n(L,"LI",{});var ZCe=s(lb);hre=n(ZCe,"STRONG",{});var AOr=s(hre);c8o=r(AOr,"xlm"),AOr.forEach(t),f8o=r(ZCe," \u2014 "),W$=n(ZCe,"A",{href:!0});var LOr=s(W$);m8o=r(LOr,"XLMForSequenceClassification"),LOr.forEach(t),g8o=r(ZCe," (XLM model)"),ZCe.forEach(t),h8o=i(L),ib=n(L,"LI",{});var e4e=s(ib);pre=n(e4e,"STRONG",{});var BOr=s(pre);p8o=r(BOr,"xlm-roberta"),BOr.forEach(t),_8o=r(e4e," \u2014 "),Q$=n(e4e,"A",{href:!0});var xOr=s(Q$);u8o=r(xOr,"XLMRobertaForSequenceClassification"),xOr.forEach(t),b8o=r(e4e," (XLM-RoBERTa model)"),e4e.forEach(t),v8o=i(L),db=n(L,"LI",{});var o4e=s(db);_re=n(o4e,"STRONG",{});var kOr=s(_re);T8o=r(kOr,"xlm-roberta-xl"),kOr.forEach(t),F8o=r(o4e," \u2014 "),H$=n(o4e,"A",{href:!0});var ROr=s(H$);C8o=r(ROr,"XLMRobertaXLForSequenceClassification"),ROr.forEach(t),M8o=r(o4e," (XLM-RoBERTa-XL model)"),o4e.forEach(t),E8o=i(L),cb=n(L,"LI",{});var r4e=s(cb);ure=n(r4e,"STRONG",{});var SOr=s(ure);y8o=r(SOr,"xlnet"),SOr.forEach(t),w8o=r(r4e," \u2014 "),U$=n(r4e,"A",{href:!0});var POr=s(U$);A8o=r(POr,"XLNetForSequenceClassification"),POr.forEach(t),L8o=r(r4e," (XLNet model)"),r4e.forEach(t),B8o=i(L),fb=n(L,"LI",{});var t4e=s(fb);bre=n(t4e,"STRONG",{});var $Or=s(bre);x8o=r($Or,"yoso"),$Or.forEach(t),k8o=r(t4e," \u2014 "),J$=n(t4e,"A",{href:!0});var IOr=s(J$);R8o=r(IOr,"YosoForSequenceClassification"),IOr.forEach(t),S8o=r(t4e," (YOSO model)"),t4e.forEach(t),L.forEach(t),P8o=i(Nt),mb=n(Nt,"P",{});var a4e=s(mb);$8o=r(a4e,"The model is set in evaluation mode by default using "),vre=n(a4e,"CODE",{});var jOr=s(vre);I8o=r(jOr,"model.eval()"),jOr.forEach(t),j8o=r(a4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tre=n(a4e,"CODE",{});var NOr=s(Tre);N8o=r(NOr,"model.train()"),NOr.forEach(t),a4e.forEach(t),D8o=i(Nt),Fre=n(Nt,"P",{});var DOr=s(Fre);q8o=r(DOr,"Examples:"),DOr.forEach(t),G8o=i(Nt),m(EM.$$.fragment,Nt),Nt.forEach(t),Hs.forEach(t),ILe=i(d),ad=n(d,"H2",{class:!0});var XBe=s(ad);gb=n(XBe,"A",{id:!0,class:!0,href:!0});var qOr=s(gb);Cre=n(qOr,"SPAN",{});var GOr=s(Cre);m(yM.$$.fragment,GOr),GOr.forEach(t),qOr.forEach(t),O8o=i(XBe),Mre=n(XBe,"SPAN",{});var OOr=s(Mre);X8o=r(OOr,"AutoModelForMultipleChoice"),OOr.forEach(t),XBe.forEach(t),jLe=i(d),Yo=n(d,"DIV",{class:!0});var Js=s(Yo);m(wM.$$.fragment,Js),z8o=i(Js),nd=n(Js,"P",{});var dz=s(nd);V8o=r(dz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Ere=n(dz,"CODE",{});var XOr=s(Ere);W8o=r(XOr,"from_pretrained()"),XOr.forEach(t),Q8o=r(dz,"class method or the "),yre=n(dz,"CODE",{});var zOr=s(yre);H8o=r(zOr,"from_config()"),zOr.forEach(t),U8o=r(dz,`class
method.`),dz.forEach(t),J8o=i(Js),AM=n(Js,"P",{});var zBe=s(AM);Y8o=r(zBe,"This class cannot be instantiated directly using "),wre=n(zBe,"CODE",{});var VOr=s(wre);K8o=r(VOr,"__init__()"),VOr.forEach(t),Z8o=r(zBe," (throws an error)."),zBe.forEach(t),eFo=i(Js),zr=n(Js,"DIV",{class:!0});var Ys=s(zr);m(LM.$$.fragment,Ys),oFo=i(Ys),Are=n(Ys,"P",{});var WOr=s(Are);rFo=r(WOr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),WOr.forEach(t),tFo=i(Ys),sd=n(Ys,"P",{});var cz=s(sd);aFo=r(cz,`Note:
Loading a model from its configuration file does `),Lre=n(cz,"STRONG",{});var QOr=s(Lre);nFo=r(QOr,"not"),QOr.forEach(t),sFo=r(cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=n(cz,"CODE",{});var HOr=s(Bre);lFo=r(HOr,"from_pretrained()"),HOr.forEach(t),iFo=r(cz,"to load the model weights."),cz.forEach(t),dFo=i(Ys),xre=n(Ys,"P",{});var UOr=s(xre);cFo=r(UOr,"Examples:"),UOr.forEach(t),fFo=i(Ys),m(BM.$$.fragment,Ys),Ys.forEach(t),mFo=i(Js),Ie=n(Js,"DIV",{class:!0});var Dt=s(Ie);m(xM.$$.fragment,Dt),gFo=i(Dt),kre=n(Dt,"P",{});var JOr=s(kre);hFo=r(JOr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),JOr.forEach(t),pFo=i(Dt),Va=n(Dt,"P",{});var pC=s(Va);_Fo=r(pC,"The model class to instantiate is selected based on the "),Rre=n(pC,"CODE",{});var YOr=s(Rre);uFo=r(YOr,"model_type"),YOr.forEach(t),bFo=r(pC,` property of the config object (either
passed as an argument or loaded from `),Sre=n(pC,"CODE",{});var KOr=s(Sre);vFo=r(KOr,"pretrained_model_name_or_path"),KOr.forEach(t),TFo=r(pC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pre=n(pC,"CODE",{});var ZOr=s(Pre);FFo=r(ZOr,"pretrained_model_name_or_path"),ZOr.forEach(t),CFo=r(pC,":"),pC.forEach(t),MFo=i(Dt),G=n(Dt,"UL",{});var O=s(G);hb=n(O,"LI",{});var n4e=s(hb);$re=n(n4e,"STRONG",{});var eXr=s($re);EFo=r(eXr,"albert"),eXr.forEach(t),yFo=r(n4e," \u2014 "),Y$=n(n4e,"A",{href:!0});var oXr=s(Y$);wFo=r(oXr,"AlbertForMultipleChoice"),oXr.forEach(t),AFo=r(n4e," (ALBERT model)"),n4e.forEach(t),LFo=i(O),pb=n(O,"LI",{});var s4e=s(pb);Ire=n(s4e,"STRONG",{});var rXr=s(Ire);BFo=r(rXr,"bert"),rXr.forEach(t),xFo=r(s4e," \u2014 "),K$=n(s4e,"A",{href:!0});var tXr=s(K$);kFo=r(tXr,"BertForMultipleChoice"),tXr.forEach(t),RFo=r(s4e," (BERT model)"),s4e.forEach(t),SFo=i(O),_b=n(O,"LI",{});var l4e=s(_b);jre=n(l4e,"STRONG",{});var aXr=s(jre);PFo=r(aXr,"big_bird"),aXr.forEach(t),$Fo=r(l4e," \u2014 "),Z$=n(l4e,"A",{href:!0});var nXr=s(Z$);IFo=r(nXr,"BigBirdForMultipleChoice"),nXr.forEach(t),jFo=r(l4e," (BigBird model)"),l4e.forEach(t),NFo=i(O),ub=n(O,"LI",{});var i4e=s(ub);Nre=n(i4e,"STRONG",{});var sXr=s(Nre);DFo=r(sXr,"camembert"),sXr.forEach(t),qFo=r(i4e," \u2014 "),eI=n(i4e,"A",{href:!0});var lXr=s(eI);GFo=r(lXr,"CamembertForMultipleChoice"),lXr.forEach(t),OFo=r(i4e," (CamemBERT model)"),i4e.forEach(t),XFo=i(O),bb=n(O,"LI",{});var d4e=s(bb);Dre=n(d4e,"STRONG",{});var iXr=s(Dre);zFo=r(iXr,"canine"),iXr.forEach(t),VFo=r(d4e," \u2014 "),oI=n(d4e,"A",{href:!0});var dXr=s(oI);WFo=r(dXr,"CanineForMultipleChoice"),dXr.forEach(t),QFo=r(d4e," (Canine model)"),d4e.forEach(t),HFo=i(O),vb=n(O,"LI",{});var c4e=s(vb);qre=n(c4e,"STRONG",{});var cXr=s(qre);UFo=r(cXr,"convbert"),cXr.forEach(t),JFo=r(c4e," \u2014 "),rI=n(c4e,"A",{href:!0});var fXr=s(rI);YFo=r(fXr,"ConvBertForMultipleChoice"),fXr.forEach(t),KFo=r(c4e," (ConvBERT model)"),c4e.forEach(t),ZFo=i(O),Tb=n(O,"LI",{});var f4e=s(Tb);Gre=n(f4e,"STRONG",{});var mXr=s(Gre);eCo=r(mXr,"distilbert"),mXr.forEach(t),oCo=r(f4e," \u2014 "),tI=n(f4e,"A",{href:!0});var gXr=s(tI);rCo=r(gXr,"DistilBertForMultipleChoice"),gXr.forEach(t),tCo=r(f4e," (DistilBERT model)"),f4e.forEach(t),aCo=i(O),Fb=n(O,"LI",{});var m4e=s(Fb);Ore=n(m4e,"STRONG",{});var hXr=s(Ore);nCo=r(hXr,"electra"),hXr.forEach(t),sCo=r(m4e," \u2014 "),aI=n(m4e,"A",{href:!0});var pXr=s(aI);lCo=r(pXr,"ElectraForMultipleChoice"),pXr.forEach(t),iCo=r(m4e," (ELECTRA model)"),m4e.forEach(t),dCo=i(O),Cb=n(O,"LI",{});var g4e=s(Cb);Xre=n(g4e,"STRONG",{});var _Xr=s(Xre);cCo=r(_Xr,"flaubert"),_Xr.forEach(t),fCo=r(g4e," \u2014 "),nI=n(g4e,"A",{href:!0});var uXr=s(nI);mCo=r(uXr,"FlaubertForMultipleChoice"),uXr.forEach(t),gCo=r(g4e," (FlauBERT model)"),g4e.forEach(t),hCo=i(O),Mb=n(O,"LI",{});var h4e=s(Mb);zre=n(h4e,"STRONG",{});var bXr=s(zre);pCo=r(bXr,"fnet"),bXr.forEach(t),_Co=r(h4e," \u2014 "),sI=n(h4e,"A",{href:!0});var vXr=s(sI);uCo=r(vXr,"FNetForMultipleChoice"),vXr.forEach(t),bCo=r(h4e," (FNet model)"),h4e.forEach(t),vCo=i(O),Eb=n(O,"LI",{});var p4e=s(Eb);Vre=n(p4e,"STRONG",{});var TXr=s(Vre);TCo=r(TXr,"funnel"),TXr.forEach(t),FCo=r(p4e," \u2014 "),lI=n(p4e,"A",{href:!0});var FXr=s(lI);CCo=r(FXr,"FunnelForMultipleChoice"),FXr.forEach(t),MCo=r(p4e," (Funnel Transformer model)"),p4e.forEach(t),ECo=i(O),yb=n(O,"LI",{});var _4e=s(yb);Wre=n(_4e,"STRONG",{});var CXr=s(Wre);yCo=r(CXr,"ibert"),CXr.forEach(t),wCo=r(_4e," \u2014 "),iI=n(_4e,"A",{href:!0});var MXr=s(iI);ACo=r(MXr,"IBertForMultipleChoice"),MXr.forEach(t),LCo=r(_4e," (I-BERT model)"),_4e.forEach(t),BCo=i(O),wb=n(O,"LI",{});var u4e=s(wb);Qre=n(u4e,"STRONG",{});var EXr=s(Qre);xCo=r(EXr,"longformer"),EXr.forEach(t),kCo=r(u4e," \u2014 "),dI=n(u4e,"A",{href:!0});var yXr=s(dI);RCo=r(yXr,"LongformerForMultipleChoice"),yXr.forEach(t),SCo=r(u4e," (Longformer model)"),u4e.forEach(t),PCo=i(O),Ab=n(O,"LI",{});var b4e=s(Ab);Hre=n(b4e,"STRONG",{});var wXr=s(Hre);$Co=r(wXr,"megatron-bert"),wXr.forEach(t),ICo=r(b4e," \u2014 "),cI=n(b4e,"A",{href:!0});var AXr=s(cI);jCo=r(AXr,"MegatronBertForMultipleChoice"),AXr.forEach(t),NCo=r(b4e," (MegatronBert model)"),b4e.forEach(t),DCo=i(O),Lb=n(O,"LI",{});var v4e=s(Lb);Ure=n(v4e,"STRONG",{});var LXr=s(Ure);qCo=r(LXr,"mobilebert"),LXr.forEach(t),GCo=r(v4e," \u2014 "),fI=n(v4e,"A",{href:!0});var BXr=s(fI);OCo=r(BXr,"MobileBertForMultipleChoice"),BXr.forEach(t),XCo=r(v4e," (MobileBERT model)"),v4e.forEach(t),zCo=i(O),Bb=n(O,"LI",{});var T4e=s(Bb);Jre=n(T4e,"STRONG",{});var xXr=s(Jre);VCo=r(xXr,"mpnet"),xXr.forEach(t),WCo=r(T4e," \u2014 "),mI=n(T4e,"A",{href:!0});var kXr=s(mI);QCo=r(kXr,"MPNetForMultipleChoice"),kXr.forEach(t),HCo=r(T4e," (MPNet model)"),T4e.forEach(t),UCo=i(O),xb=n(O,"LI",{});var F4e=s(xb);Yre=n(F4e,"STRONG",{});var RXr=s(Yre);JCo=r(RXr,"nystromformer"),RXr.forEach(t),YCo=r(F4e," \u2014 "),gI=n(F4e,"A",{href:!0});var SXr=s(gI);KCo=r(SXr,"NystromformerForMultipleChoice"),SXr.forEach(t),ZCo=r(F4e," (Nystromformer model)"),F4e.forEach(t),e4o=i(O),kb=n(O,"LI",{});var C4e=s(kb);Kre=n(C4e,"STRONG",{});var PXr=s(Kre);o4o=r(PXr,"qdqbert"),PXr.forEach(t),r4o=r(C4e," \u2014 "),hI=n(C4e,"A",{href:!0});var $Xr=s(hI);t4o=r($Xr,"QDQBertForMultipleChoice"),$Xr.forEach(t),a4o=r(C4e," (QDQBert model)"),C4e.forEach(t),n4o=i(O),Rb=n(O,"LI",{});var M4e=s(Rb);Zre=n(M4e,"STRONG",{});var IXr=s(Zre);s4o=r(IXr,"rembert"),IXr.forEach(t),l4o=r(M4e," \u2014 "),pI=n(M4e,"A",{href:!0});var jXr=s(pI);i4o=r(jXr,"RemBertForMultipleChoice"),jXr.forEach(t),d4o=r(M4e," (RemBERT model)"),M4e.forEach(t),c4o=i(O),Sb=n(O,"LI",{});var E4e=s(Sb);ete=n(E4e,"STRONG",{});var NXr=s(ete);f4o=r(NXr,"roberta"),NXr.forEach(t),m4o=r(E4e," \u2014 "),_I=n(E4e,"A",{href:!0});var DXr=s(_I);g4o=r(DXr,"RobertaForMultipleChoice"),DXr.forEach(t),h4o=r(E4e," (RoBERTa model)"),E4e.forEach(t),p4o=i(O),Pb=n(O,"LI",{});var y4e=s(Pb);ote=n(y4e,"STRONG",{});var qXr=s(ote);_4o=r(qXr,"roformer"),qXr.forEach(t),u4o=r(y4e," \u2014 "),uI=n(y4e,"A",{href:!0});var GXr=s(uI);b4o=r(GXr,"RoFormerForMultipleChoice"),GXr.forEach(t),v4o=r(y4e," (RoFormer model)"),y4e.forEach(t),T4o=i(O),$b=n(O,"LI",{});var w4e=s($b);rte=n(w4e,"STRONG",{});var OXr=s(rte);F4o=r(OXr,"squeezebert"),OXr.forEach(t),C4o=r(w4e," \u2014 "),bI=n(w4e,"A",{href:!0});var XXr=s(bI);M4o=r(XXr,"SqueezeBertForMultipleChoice"),XXr.forEach(t),E4o=r(w4e," (SqueezeBERT model)"),w4e.forEach(t),y4o=i(O),Ib=n(O,"LI",{});var A4e=s(Ib);tte=n(A4e,"STRONG",{});var zXr=s(tte);w4o=r(zXr,"xlm"),zXr.forEach(t),A4o=r(A4e," \u2014 "),vI=n(A4e,"A",{href:!0});var VXr=s(vI);L4o=r(VXr,"XLMForMultipleChoice"),VXr.forEach(t),B4o=r(A4e," (XLM model)"),A4e.forEach(t),x4o=i(O),jb=n(O,"LI",{});var L4e=s(jb);ate=n(L4e,"STRONG",{});var WXr=s(ate);k4o=r(WXr,"xlm-roberta"),WXr.forEach(t),R4o=r(L4e," \u2014 "),TI=n(L4e,"A",{href:!0});var QXr=s(TI);S4o=r(QXr,"XLMRobertaForMultipleChoice"),QXr.forEach(t),P4o=r(L4e," (XLM-RoBERTa model)"),L4e.forEach(t),$4o=i(O),Nb=n(O,"LI",{});var B4e=s(Nb);nte=n(B4e,"STRONG",{});var HXr=s(nte);I4o=r(HXr,"xlm-roberta-xl"),HXr.forEach(t),j4o=r(B4e," \u2014 "),FI=n(B4e,"A",{href:!0});var UXr=s(FI);N4o=r(UXr,"XLMRobertaXLForMultipleChoice"),UXr.forEach(t),D4o=r(B4e," (XLM-RoBERTa-XL model)"),B4e.forEach(t),q4o=i(O),Db=n(O,"LI",{});var x4e=s(Db);ste=n(x4e,"STRONG",{});var JXr=s(ste);G4o=r(JXr,"xlnet"),JXr.forEach(t),O4o=r(x4e," \u2014 "),CI=n(x4e,"A",{href:!0});var YXr=s(CI);X4o=r(YXr,"XLNetForMultipleChoice"),YXr.forEach(t),z4o=r(x4e," (XLNet model)"),x4e.forEach(t),V4o=i(O),qb=n(O,"LI",{});var k4e=s(qb);lte=n(k4e,"STRONG",{});var KXr=s(lte);W4o=r(KXr,"yoso"),KXr.forEach(t),Q4o=r(k4e," \u2014 "),MI=n(k4e,"A",{href:!0});var ZXr=s(MI);H4o=r(ZXr,"YosoForMultipleChoice"),ZXr.forEach(t),U4o=r(k4e," (YOSO model)"),k4e.forEach(t),O.forEach(t),J4o=i(Dt),Gb=n(Dt,"P",{});var R4e=s(Gb);Y4o=r(R4e,"The model is set in evaluation mode by default using "),ite=n(R4e,"CODE",{});var ezr=s(ite);K4o=r(ezr,"model.eval()"),ezr.forEach(t),Z4o=r(R4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dte=n(R4e,"CODE",{});var ozr=s(dte);eMo=r(ozr,"model.train()"),ozr.forEach(t),R4e.forEach(t),oMo=i(Dt),cte=n(Dt,"P",{});var rzr=s(cte);rMo=r(rzr,"Examples:"),rzr.forEach(t),tMo=i(Dt),m(kM.$$.fragment,Dt),Dt.forEach(t),Js.forEach(t),NLe=i(d),ld=n(d,"H2",{class:!0});var VBe=s(ld);Ob=n(VBe,"A",{id:!0,class:!0,href:!0});var tzr=s(Ob);fte=n(tzr,"SPAN",{});var azr=s(fte);m(RM.$$.fragment,azr),azr.forEach(t),tzr.forEach(t),aMo=i(VBe),mte=n(VBe,"SPAN",{});var nzr=s(mte);nMo=r(nzr,"AutoModelForNextSentencePrediction"),nzr.forEach(t),VBe.forEach(t),DLe=i(d),Ko=n(d,"DIV",{class:!0});var Ks=s(Ko);m(SM.$$.fragment,Ks),sMo=i(Ks),id=n(Ks,"P",{});var fz=s(id);lMo=r(fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gte=n(fz,"CODE",{});var szr=s(gte);iMo=r(szr,"from_pretrained()"),szr.forEach(t),dMo=r(fz,"class method or the "),hte=n(fz,"CODE",{});var lzr=s(hte);cMo=r(lzr,"from_config()"),lzr.forEach(t),fMo=r(fz,`class
method.`),fz.forEach(t),mMo=i(Ks),PM=n(Ks,"P",{});var WBe=s(PM);gMo=r(WBe,"This class cannot be instantiated directly using "),pte=n(WBe,"CODE",{});var izr=s(pte);hMo=r(izr,"__init__()"),izr.forEach(t),pMo=r(WBe," (throws an error)."),WBe.forEach(t),_Mo=i(Ks),Vr=n(Ks,"DIV",{class:!0});var Zs=s(Vr);m($M.$$.fragment,Zs),uMo=i(Zs),_te=n(Zs,"P",{});var dzr=s(_te);bMo=r(dzr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dzr.forEach(t),vMo=i(Zs),dd=n(Zs,"P",{});var mz=s(dd);TMo=r(mz,`Note:
Loading a model from its configuration file does `),ute=n(mz,"STRONG",{});var czr=s(ute);FMo=r(czr,"not"),czr.forEach(t),CMo=r(mz,` load the model weights. It only affects the
model\u2019s configuration. Use `),bte=n(mz,"CODE",{});var fzr=s(bte);MMo=r(fzr,"from_pretrained()"),fzr.forEach(t),EMo=r(mz,"to load the model weights."),mz.forEach(t),yMo=i(Zs),vte=n(Zs,"P",{});var mzr=s(vte);wMo=r(mzr,"Examples:"),mzr.forEach(t),AMo=i(Zs),m(IM.$$.fragment,Zs),Zs.forEach(t),LMo=i(Ks),je=n(Ks,"DIV",{class:!0});var qt=s(je);m(jM.$$.fragment,qt),BMo=i(qt),Tte=n(qt,"P",{});var gzr=s(Tte);xMo=r(gzr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gzr.forEach(t),kMo=i(qt),Wa=n(qt,"P",{});var _C=s(Wa);RMo=r(_C,"The model class to instantiate is selected based on the "),Fte=n(_C,"CODE",{});var hzr=s(Fte);SMo=r(hzr,"model_type"),hzr.forEach(t),PMo=r(_C,` property of the config object (either
passed as an argument or loaded from `),Cte=n(_C,"CODE",{});var pzr=s(Cte);$Mo=r(pzr,"pretrained_model_name_or_path"),pzr.forEach(t),IMo=r(_C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mte=n(_C,"CODE",{});var _zr=s(Mte);jMo=r(_zr,"pretrained_model_name_or_path"),_zr.forEach(t),NMo=r(_C,":"),_C.forEach(t),DMo=i(qt),na=n(qt,"UL",{});var el=s(na);Xb=n(el,"LI",{});var S4e=s(Xb);Ete=n(S4e,"STRONG",{});var uzr=s(Ete);qMo=r(uzr,"bert"),uzr.forEach(t),GMo=r(S4e," \u2014 "),EI=n(S4e,"A",{href:!0});var bzr=s(EI);OMo=r(bzr,"BertForNextSentencePrediction"),bzr.forEach(t),XMo=r(S4e," (BERT model)"),S4e.forEach(t),zMo=i(el),zb=n(el,"LI",{});var P4e=s(zb);yte=n(P4e,"STRONG",{});var vzr=s(yte);VMo=r(vzr,"fnet"),vzr.forEach(t),WMo=r(P4e," \u2014 "),yI=n(P4e,"A",{href:!0});var Tzr=s(yI);QMo=r(Tzr,"FNetForNextSentencePrediction"),Tzr.forEach(t),HMo=r(P4e," (FNet model)"),P4e.forEach(t),UMo=i(el),Vb=n(el,"LI",{});var $4e=s(Vb);wte=n($4e,"STRONG",{});var Fzr=s(wte);JMo=r(Fzr,"megatron-bert"),Fzr.forEach(t),YMo=r($4e," \u2014 "),wI=n($4e,"A",{href:!0});var Czr=s(wI);KMo=r(Czr,"MegatronBertForNextSentencePrediction"),Czr.forEach(t),ZMo=r($4e," (MegatronBert model)"),$4e.forEach(t),eEo=i(el),Wb=n(el,"LI",{});var I4e=s(Wb);Ate=n(I4e,"STRONG",{});var Mzr=s(Ate);oEo=r(Mzr,"mobilebert"),Mzr.forEach(t),rEo=r(I4e," \u2014 "),AI=n(I4e,"A",{href:!0});var Ezr=s(AI);tEo=r(Ezr,"MobileBertForNextSentencePrediction"),Ezr.forEach(t),aEo=r(I4e," (MobileBERT model)"),I4e.forEach(t),nEo=i(el),Qb=n(el,"LI",{});var j4e=s(Qb);Lte=n(j4e,"STRONG",{});var yzr=s(Lte);sEo=r(yzr,"qdqbert"),yzr.forEach(t),lEo=r(j4e," \u2014 "),LI=n(j4e,"A",{href:!0});var wzr=s(LI);iEo=r(wzr,"QDQBertForNextSentencePrediction"),wzr.forEach(t),dEo=r(j4e," (QDQBert model)"),j4e.forEach(t),el.forEach(t),cEo=i(qt),Hb=n(qt,"P",{});var N4e=s(Hb);fEo=r(N4e,"The model is set in evaluation mode by default using "),Bte=n(N4e,"CODE",{});var Azr=s(Bte);mEo=r(Azr,"model.eval()"),Azr.forEach(t),gEo=r(N4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xte=n(N4e,"CODE",{});var Lzr=s(xte);hEo=r(Lzr,"model.train()"),Lzr.forEach(t),N4e.forEach(t),pEo=i(qt),kte=n(qt,"P",{});var Bzr=s(kte);_Eo=r(Bzr,"Examples:"),Bzr.forEach(t),uEo=i(qt),m(NM.$$.fragment,qt),qt.forEach(t),Ks.forEach(t),qLe=i(d),cd=n(d,"H2",{class:!0});var QBe=s(cd);Ub=n(QBe,"A",{id:!0,class:!0,href:!0});var xzr=s(Ub);Rte=n(xzr,"SPAN",{});var kzr=s(Rte);m(DM.$$.fragment,kzr),kzr.forEach(t),xzr.forEach(t),bEo=i(QBe),Ste=n(QBe,"SPAN",{});var Rzr=s(Ste);vEo=r(Rzr,"AutoModelForTokenClassification"),Rzr.forEach(t),QBe.forEach(t),GLe=i(d),Zo=n(d,"DIV",{class:!0});var ol=s(Zo);m(qM.$$.fragment,ol),TEo=i(ol),fd=n(ol,"P",{});var gz=s(fd);FEo=r(gz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Pte=n(gz,"CODE",{});var Szr=s(Pte);CEo=r(Szr,"from_pretrained()"),Szr.forEach(t),MEo=r(gz,"class method or the "),$te=n(gz,"CODE",{});var Pzr=s($te);EEo=r(Pzr,"from_config()"),Pzr.forEach(t),yEo=r(gz,`class
method.`),gz.forEach(t),wEo=i(ol),GM=n(ol,"P",{});var HBe=s(GM);AEo=r(HBe,"This class cannot be instantiated directly using "),Ite=n(HBe,"CODE",{});var $zr=s(Ite);LEo=r($zr,"__init__()"),$zr.forEach(t),BEo=r(HBe," (throws an error)."),HBe.forEach(t),xEo=i(ol),Wr=n(ol,"DIV",{class:!0});var rl=s(Wr);m(OM.$$.fragment,rl),kEo=i(rl),jte=n(rl,"P",{});var Izr=s(jte);REo=r(Izr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Izr.forEach(t),SEo=i(rl),md=n(rl,"P",{});var hz=s(md);PEo=r(hz,`Note:
Loading a model from its configuration file does `),Nte=n(hz,"STRONG",{});var jzr=s(Nte);$Eo=r(jzr,"not"),jzr.forEach(t),IEo=r(hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dte=n(hz,"CODE",{});var Nzr=s(Dte);jEo=r(Nzr,"from_pretrained()"),Nzr.forEach(t),NEo=r(hz,"to load the model weights."),hz.forEach(t),DEo=i(rl),qte=n(rl,"P",{});var Dzr=s(qte);qEo=r(Dzr,"Examples:"),Dzr.forEach(t),GEo=i(rl),m(XM.$$.fragment,rl),rl.forEach(t),OEo=i(ol),Ne=n(ol,"DIV",{class:!0});var Gt=s(Ne);m(zM.$$.fragment,Gt),XEo=i(Gt),Gte=n(Gt,"P",{});var qzr=s(Gte);zEo=r(qzr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qzr.forEach(t),VEo=i(Gt),Qa=n(Gt,"P",{});var uC=s(Qa);WEo=r(uC,"The model class to instantiate is selected based on the "),Ote=n(uC,"CODE",{});var Gzr=s(Ote);QEo=r(Gzr,"model_type"),Gzr.forEach(t),HEo=r(uC,` property of the config object (either
passed as an argument or loaded from `),Xte=n(uC,"CODE",{});var Ozr=s(Xte);UEo=r(Ozr,"pretrained_model_name_or_path"),Ozr.forEach(t),JEo=r(uC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zte=n(uC,"CODE",{});var Xzr=s(zte);YEo=r(Xzr,"pretrained_model_name_or_path"),Xzr.forEach(t),KEo=r(uC,":"),uC.forEach(t),ZEo=i(Gt),D=n(Gt,"UL",{});var q=s(D);Jb=n(q,"LI",{});var D4e=s(Jb);Vte=n(D4e,"STRONG",{});var zzr=s(Vte);e3o=r(zzr,"albert"),zzr.forEach(t),o3o=r(D4e," \u2014 "),BI=n(D4e,"A",{href:!0});var Vzr=s(BI);r3o=r(Vzr,"AlbertForTokenClassification"),Vzr.forEach(t),t3o=r(D4e," (ALBERT model)"),D4e.forEach(t),a3o=i(q),Yb=n(q,"LI",{});var q4e=s(Yb);Wte=n(q4e,"STRONG",{});var Wzr=s(Wte);n3o=r(Wzr,"bert"),Wzr.forEach(t),s3o=r(q4e," \u2014 "),xI=n(q4e,"A",{href:!0});var Qzr=s(xI);l3o=r(Qzr,"BertForTokenClassification"),Qzr.forEach(t),i3o=r(q4e," (BERT model)"),q4e.forEach(t),d3o=i(q),Kb=n(q,"LI",{});var G4e=s(Kb);Qte=n(G4e,"STRONG",{});var Hzr=s(Qte);c3o=r(Hzr,"big_bird"),Hzr.forEach(t),f3o=r(G4e," \u2014 "),kI=n(G4e,"A",{href:!0});var Uzr=s(kI);m3o=r(Uzr,"BigBirdForTokenClassification"),Uzr.forEach(t),g3o=r(G4e," (BigBird model)"),G4e.forEach(t),h3o=i(q),Zb=n(q,"LI",{});var O4e=s(Zb);Hte=n(O4e,"STRONG",{});var Jzr=s(Hte);p3o=r(Jzr,"camembert"),Jzr.forEach(t),_3o=r(O4e," \u2014 "),RI=n(O4e,"A",{href:!0});var Yzr=s(RI);u3o=r(Yzr,"CamembertForTokenClassification"),Yzr.forEach(t),b3o=r(O4e," (CamemBERT model)"),O4e.forEach(t),v3o=i(q),e5=n(q,"LI",{});var X4e=s(e5);Ute=n(X4e,"STRONG",{});var Kzr=s(Ute);T3o=r(Kzr,"canine"),Kzr.forEach(t),F3o=r(X4e," \u2014 "),SI=n(X4e,"A",{href:!0});var Zzr=s(SI);C3o=r(Zzr,"CanineForTokenClassification"),Zzr.forEach(t),M3o=r(X4e," (Canine model)"),X4e.forEach(t),E3o=i(q),o5=n(q,"LI",{});var z4e=s(o5);Jte=n(z4e,"STRONG",{});var eVr=s(Jte);y3o=r(eVr,"convbert"),eVr.forEach(t),w3o=r(z4e," \u2014 "),PI=n(z4e,"A",{href:!0});var oVr=s(PI);A3o=r(oVr,"ConvBertForTokenClassification"),oVr.forEach(t),L3o=r(z4e," (ConvBERT model)"),z4e.forEach(t),B3o=i(q),r5=n(q,"LI",{});var V4e=s(r5);Yte=n(V4e,"STRONG",{});var rVr=s(Yte);x3o=r(rVr,"deberta"),rVr.forEach(t),k3o=r(V4e," \u2014 "),$I=n(V4e,"A",{href:!0});var tVr=s($I);R3o=r(tVr,"DebertaForTokenClassification"),tVr.forEach(t),S3o=r(V4e," (DeBERTa model)"),V4e.forEach(t),P3o=i(q),t5=n(q,"LI",{});var W4e=s(t5);Kte=n(W4e,"STRONG",{});var aVr=s(Kte);$3o=r(aVr,"deberta-v2"),aVr.forEach(t),I3o=r(W4e," \u2014 "),II=n(W4e,"A",{href:!0});var nVr=s(II);j3o=r(nVr,"DebertaV2ForTokenClassification"),nVr.forEach(t),N3o=r(W4e," (DeBERTa-v2 model)"),W4e.forEach(t),D3o=i(q),a5=n(q,"LI",{});var Q4e=s(a5);Zte=n(Q4e,"STRONG",{});var sVr=s(Zte);q3o=r(sVr,"distilbert"),sVr.forEach(t),G3o=r(Q4e," \u2014 "),jI=n(Q4e,"A",{href:!0});var lVr=s(jI);O3o=r(lVr,"DistilBertForTokenClassification"),lVr.forEach(t),X3o=r(Q4e," (DistilBERT model)"),Q4e.forEach(t),z3o=i(q),n5=n(q,"LI",{});var H4e=s(n5);eae=n(H4e,"STRONG",{});var iVr=s(eae);V3o=r(iVr,"electra"),iVr.forEach(t),W3o=r(H4e," \u2014 "),NI=n(H4e,"A",{href:!0});var dVr=s(NI);Q3o=r(dVr,"ElectraForTokenClassification"),dVr.forEach(t),H3o=r(H4e," (ELECTRA model)"),H4e.forEach(t),U3o=i(q),s5=n(q,"LI",{});var U4e=s(s5);oae=n(U4e,"STRONG",{});var cVr=s(oae);J3o=r(cVr,"flaubert"),cVr.forEach(t),Y3o=r(U4e," \u2014 "),DI=n(U4e,"A",{href:!0});var fVr=s(DI);K3o=r(fVr,"FlaubertForTokenClassification"),fVr.forEach(t),Z3o=r(U4e," (FlauBERT model)"),U4e.forEach(t),eyo=i(q),l5=n(q,"LI",{});var J4e=s(l5);rae=n(J4e,"STRONG",{});var mVr=s(rae);oyo=r(mVr,"fnet"),mVr.forEach(t),ryo=r(J4e," \u2014 "),qI=n(J4e,"A",{href:!0});var gVr=s(qI);tyo=r(gVr,"FNetForTokenClassification"),gVr.forEach(t),ayo=r(J4e," (FNet model)"),J4e.forEach(t),nyo=i(q),i5=n(q,"LI",{});var Y4e=s(i5);tae=n(Y4e,"STRONG",{});var hVr=s(tae);syo=r(hVr,"funnel"),hVr.forEach(t),lyo=r(Y4e," \u2014 "),GI=n(Y4e,"A",{href:!0});var pVr=s(GI);iyo=r(pVr,"FunnelForTokenClassification"),pVr.forEach(t),dyo=r(Y4e," (Funnel Transformer model)"),Y4e.forEach(t),cyo=i(q),d5=n(q,"LI",{});var K4e=s(d5);aae=n(K4e,"STRONG",{});var _Vr=s(aae);fyo=r(_Vr,"gpt2"),_Vr.forEach(t),myo=r(K4e," \u2014 "),OI=n(K4e,"A",{href:!0});var uVr=s(OI);gyo=r(uVr,"GPT2ForTokenClassification"),uVr.forEach(t),hyo=r(K4e," (OpenAI GPT-2 model)"),K4e.forEach(t),pyo=i(q),c5=n(q,"LI",{});var Z4e=s(c5);nae=n(Z4e,"STRONG",{});var bVr=s(nae);_yo=r(bVr,"ibert"),bVr.forEach(t),uyo=r(Z4e," \u2014 "),XI=n(Z4e,"A",{href:!0});var vVr=s(XI);byo=r(vVr,"IBertForTokenClassification"),vVr.forEach(t),vyo=r(Z4e," (I-BERT model)"),Z4e.forEach(t),Tyo=i(q),f5=n(q,"LI",{});var eMe=s(f5);sae=n(eMe,"STRONG",{});var TVr=s(sae);Fyo=r(TVr,"layoutlm"),TVr.forEach(t),Cyo=r(eMe," \u2014 "),zI=n(eMe,"A",{href:!0});var FVr=s(zI);Myo=r(FVr,"LayoutLMForTokenClassification"),FVr.forEach(t),Eyo=r(eMe," (LayoutLM model)"),eMe.forEach(t),yyo=i(q),m5=n(q,"LI",{});var oMe=s(m5);lae=n(oMe,"STRONG",{});var CVr=s(lae);wyo=r(CVr,"layoutlmv2"),CVr.forEach(t),Ayo=r(oMe," \u2014 "),VI=n(oMe,"A",{href:!0});var MVr=s(VI);Lyo=r(MVr,"LayoutLMv2ForTokenClassification"),MVr.forEach(t),Byo=r(oMe," (LayoutLMv2 model)"),oMe.forEach(t),xyo=i(q),g5=n(q,"LI",{});var rMe=s(g5);iae=n(rMe,"STRONG",{});var EVr=s(iae);kyo=r(EVr,"longformer"),EVr.forEach(t),Ryo=r(rMe," \u2014 "),WI=n(rMe,"A",{href:!0});var yVr=s(WI);Syo=r(yVr,"LongformerForTokenClassification"),yVr.forEach(t),Pyo=r(rMe," (Longformer model)"),rMe.forEach(t),$yo=i(q),h5=n(q,"LI",{});var tMe=s(h5);dae=n(tMe,"STRONG",{});var wVr=s(dae);Iyo=r(wVr,"megatron-bert"),wVr.forEach(t),jyo=r(tMe," \u2014 "),QI=n(tMe,"A",{href:!0});var AVr=s(QI);Nyo=r(AVr,"MegatronBertForTokenClassification"),AVr.forEach(t),Dyo=r(tMe," (MegatronBert model)"),tMe.forEach(t),qyo=i(q),p5=n(q,"LI",{});var aMe=s(p5);cae=n(aMe,"STRONG",{});var LVr=s(cae);Gyo=r(LVr,"mobilebert"),LVr.forEach(t),Oyo=r(aMe," \u2014 "),HI=n(aMe,"A",{href:!0});var BVr=s(HI);Xyo=r(BVr,"MobileBertForTokenClassification"),BVr.forEach(t),zyo=r(aMe," (MobileBERT model)"),aMe.forEach(t),Vyo=i(q),_5=n(q,"LI",{});var nMe=s(_5);fae=n(nMe,"STRONG",{});var xVr=s(fae);Wyo=r(xVr,"mpnet"),xVr.forEach(t),Qyo=r(nMe," \u2014 "),UI=n(nMe,"A",{href:!0});var kVr=s(UI);Hyo=r(kVr,"MPNetForTokenClassification"),kVr.forEach(t),Uyo=r(nMe," (MPNet model)"),nMe.forEach(t),Jyo=i(q),u5=n(q,"LI",{});var sMe=s(u5);mae=n(sMe,"STRONG",{});var RVr=s(mae);Yyo=r(RVr,"nystromformer"),RVr.forEach(t),Kyo=r(sMe," \u2014 "),JI=n(sMe,"A",{href:!0});var SVr=s(JI);Zyo=r(SVr,"NystromformerForTokenClassification"),SVr.forEach(t),ewo=r(sMe," (Nystromformer model)"),sMe.forEach(t),owo=i(q),b5=n(q,"LI",{});var lMe=s(b5);gae=n(lMe,"STRONG",{});var PVr=s(gae);rwo=r(PVr,"qdqbert"),PVr.forEach(t),two=r(lMe," \u2014 "),YI=n(lMe,"A",{href:!0});var $Vr=s(YI);awo=r($Vr,"QDQBertForTokenClassification"),$Vr.forEach(t),nwo=r(lMe," (QDQBert model)"),lMe.forEach(t),swo=i(q),v5=n(q,"LI",{});var iMe=s(v5);hae=n(iMe,"STRONG",{});var IVr=s(hae);lwo=r(IVr,"rembert"),IVr.forEach(t),iwo=r(iMe," \u2014 "),KI=n(iMe,"A",{href:!0});var jVr=s(KI);dwo=r(jVr,"RemBertForTokenClassification"),jVr.forEach(t),cwo=r(iMe," (RemBERT model)"),iMe.forEach(t),fwo=i(q),T5=n(q,"LI",{});var dMe=s(T5);pae=n(dMe,"STRONG",{});var NVr=s(pae);mwo=r(NVr,"roberta"),NVr.forEach(t),gwo=r(dMe," \u2014 "),ZI=n(dMe,"A",{href:!0});var DVr=s(ZI);hwo=r(DVr,"RobertaForTokenClassification"),DVr.forEach(t),pwo=r(dMe," (RoBERTa model)"),dMe.forEach(t),_wo=i(q),F5=n(q,"LI",{});var cMe=s(F5);_ae=n(cMe,"STRONG",{});var qVr=s(_ae);uwo=r(qVr,"roformer"),qVr.forEach(t),bwo=r(cMe," \u2014 "),ej=n(cMe,"A",{href:!0});var GVr=s(ej);vwo=r(GVr,"RoFormerForTokenClassification"),GVr.forEach(t),Two=r(cMe," (RoFormer model)"),cMe.forEach(t),Fwo=i(q),C5=n(q,"LI",{});var fMe=s(C5);uae=n(fMe,"STRONG",{});var OVr=s(uae);Cwo=r(OVr,"squeezebert"),OVr.forEach(t),Mwo=r(fMe," \u2014 "),oj=n(fMe,"A",{href:!0});var XVr=s(oj);Ewo=r(XVr,"SqueezeBertForTokenClassification"),XVr.forEach(t),ywo=r(fMe," (SqueezeBERT model)"),fMe.forEach(t),wwo=i(q),M5=n(q,"LI",{});var mMe=s(M5);bae=n(mMe,"STRONG",{});var zVr=s(bae);Awo=r(zVr,"xlm"),zVr.forEach(t),Lwo=r(mMe," \u2014 "),rj=n(mMe,"A",{href:!0});var VVr=s(rj);Bwo=r(VVr,"XLMForTokenClassification"),VVr.forEach(t),xwo=r(mMe," (XLM model)"),mMe.forEach(t),kwo=i(q),E5=n(q,"LI",{});var gMe=s(E5);vae=n(gMe,"STRONG",{});var WVr=s(vae);Rwo=r(WVr,"xlm-roberta"),WVr.forEach(t),Swo=r(gMe," \u2014 "),tj=n(gMe,"A",{href:!0});var QVr=s(tj);Pwo=r(QVr,"XLMRobertaForTokenClassification"),QVr.forEach(t),$wo=r(gMe," (XLM-RoBERTa model)"),gMe.forEach(t),Iwo=i(q),y5=n(q,"LI",{});var hMe=s(y5);Tae=n(hMe,"STRONG",{});var HVr=s(Tae);jwo=r(HVr,"xlm-roberta-xl"),HVr.forEach(t),Nwo=r(hMe," \u2014 "),aj=n(hMe,"A",{href:!0});var UVr=s(aj);Dwo=r(UVr,"XLMRobertaXLForTokenClassification"),UVr.forEach(t),qwo=r(hMe," (XLM-RoBERTa-XL model)"),hMe.forEach(t),Gwo=i(q),w5=n(q,"LI",{});var pMe=s(w5);Fae=n(pMe,"STRONG",{});var JVr=s(Fae);Owo=r(JVr,"xlnet"),JVr.forEach(t),Xwo=r(pMe," \u2014 "),nj=n(pMe,"A",{href:!0});var YVr=s(nj);zwo=r(YVr,"XLNetForTokenClassification"),YVr.forEach(t),Vwo=r(pMe," (XLNet model)"),pMe.forEach(t),Wwo=i(q),A5=n(q,"LI",{});var _Me=s(A5);Cae=n(_Me,"STRONG",{});var KVr=s(Cae);Qwo=r(KVr,"yoso"),KVr.forEach(t),Hwo=r(_Me," \u2014 "),sj=n(_Me,"A",{href:!0});var ZVr=s(sj);Uwo=r(ZVr,"YosoForTokenClassification"),ZVr.forEach(t),Jwo=r(_Me," (YOSO model)"),_Me.forEach(t),q.forEach(t),Ywo=i(Gt),L5=n(Gt,"P",{});var uMe=s(L5);Kwo=r(uMe,"The model is set in evaluation mode by default using "),Mae=n(uMe,"CODE",{});var eWr=s(Mae);Zwo=r(eWr,"model.eval()"),eWr.forEach(t),eAo=r(uMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eae=n(uMe,"CODE",{});var oWr=s(Eae);oAo=r(oWr,"model.train()"),oWr.forEach(t),uMe.forEach(t),rAo=i(Gt),yae=n(Gt,"P",{});var rWr=s(yae);tAo=r(rWr,"Examples:"),rWr.forEach(t),aAo=i(Gt),m(VM.$$.fragment,Gt),Gt.forEach(t),ol.forEach(t),OLe=i(d),gd=n(d,"H2",{class:!0});var UBe=s(gd);B5=n(UBe,"A",{id:!0,class:!0,href:!0});var tWr=s(B5);wae=n(tWr,"SPAN",{});var aWr=s(wae);m(WM.$$.fragment,aWr),aWr.forEach(t),tWr.forEach(t),nAo=i(UBe),Aae=n(UBe,"SPAN",{});var nWr=s(Aae);sAo=r(nWr,"AutoModelForQuestionAnswering"),nWr.forEach(t),UBe.forEach(t),XLe=i(d),er=n(d,"DIV",{class:!0});var tl=s(er);m(QM.$$.fragment,tl),lAo=i(tl),hd=n(tl,"P",{});var pz=s(hd);iAo=r(pz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Lae=n(pz,"CODE",{});var sWr=s(Lae);dAo=r(sWr,"from_pretrained()"),sWr.forEach(t),cAo=r(pz,"class method or the "),Bae=n(pz,"CODE",{});var lWr=s(Bae);fAo=r(lWr,"from_config()"),lWr.forEach(t),mAo=r(pz,`class
method.`),pz.forEach(t),gAo=i(tl),HM=n(tl,"P",{});var JBe=s(HM);hAo=r(JBe,"This class cannot be instantiated directly using "),xae=n(JBe,"CODE",{});var iWr=s(xae);pAo=r(iWr,"__init__()"),iWr.forEach(t),_Ao=r(JBe," (throws an error)."),JBe.forEach(t),uAo=i(tl),Qr=n(tl,"DIV",{class:!0});var al=s(Qr);m(UM.$$.fragment,al),bAo=i(al),kae=n(al,"P",{});var dWr=s(kae);vAo=r(dWr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dWr.forEach(t),TAo=i(al),pd=n(al,"P",{});var _z=s(pd);FAo=r(_z,`Note:
Loading a model from its configuration file does `),Rae=n(_z,"STRONG",{});var cWr=s(Rae);CAo=r(cWr,"not"),cWr.forEach(t),MAo=r(_z,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sae=n(_z,"CODE",{});var fWr=s(Sae);EAo=r(fWr,"from_pretrained()"),fWr.forEach(t),yAo=r(_z,"to load the model weights."),_z.forEach(t),wAo=i(al),Pae=n(al,"P",{});var mWr=s(Pae);AAo=r(mWr,"Examples:"),mWr.forEach(t),LAo=i(al),m(JM.$$.fragment,al),al.forEach(t),BAo=i(tl),De=n(tl,"DIV",{class:!0});var Ot=s(De);m(YM.$$.fragment,Ot),xAo=i(Ot),$ae=n(Ot,"P",{});var gWr=s($ae);kAo=r(gWr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gWr.forEach(t),RAo=i(Ot),Ha=n(Ot,"P",{});var bC=s(Ha);SAo=r(bC,"The model class to instantiate is selected based on the "),Iae=n(bC,"CODE",{});var hWr=s(Iae);PAo=r(hWr,"model_type"),hWr.forEach(t),$Ao=r(bC,` property of the config object (either
passed as an argument or loaded from `),jae=n(bC,"CODE",{});var pWr=s(jae);IAo=r(pWr,"pretrained_model_name_or_path"),pWr.forEach(t),jAo=r(bC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nae=n(bC,"CODE",{});var _Wr=s(Nae);NAo=r(_Wr,"pretrained_model_name_or_path"),_Wr.forEach(t),DAo=r(bC,":"),bC.forEach(t),qAo=i(Ot),R=n(Ot,"UL",{});var P=s(R);x5=n(P,"LI",{});var bMe=s(x5);Dae=n(bMe,"STRONG",{});var uWr=s(Dae);GAo=r(uWr,"albert"),uWr.forEach(t),OAo=r(bMe," \u2014 "),lj=n(bMe,"A",{href:!0});var bWr=s(lj);XAo=r(bWr,"AlbertForQuestionAnswering"),bWr.forEach(t),zAo=r(bMe," (ALBERT model)"),bMe.forEach(t),VAo=i(P),k5=n(P,"LI",{});var vMe=s(k5);qae=n(vMe,"STRONG",{});var vWr=s(qae);WAo=r(vWr,"bart"),vWr.forEach(t),QAo=r(vMe," \u2014 "),ij=n(vMe,"A",{href:!0});var TWr=s(ij);HAo=r(TWr,"BartForQuestionAnswering"),TWr.forEach(t),UAo=r(vMe," (BART model)"),vMe.forEach(t),JAo=i(P),R5=n(P,"LI",{});var TMe=s(R5);Gae=n(TMe,"STRONG",{});var FWr=s(Gae);YAo=r(FWr,"bert"),FWr.forEach(t),KAo=r(TMe," \u2014 "),dj=n(TMe,"A",{href:!0});var CWr=s(dj);ZAo=r(CWr,"BertForQuestionAnswering"),CWr.forEach(t),e0o=r(TMe," (BERT model)"),TMe.forEach(t),o0o=i(P),S5=n(P,"LI",{});var FMe=s(S5);Oae=n(FMe,"STRONG",{});var MWr=s(Oae);r0o=r(MWr,"big_bird"),MWr.forEach(t),t0o=r(FMe," \u2014 "),cj=n(FMe,"A",{href:!0});var EWr=s(cj);a0o=r(EWr,"BigBirdForQuestionAnswering"),EWr.forEach(t),n0o=r(FMe," (BigBird model)"),FMe.forEach(t),s0o=i(P),P5=n(P,"LI",{});var CMe=s(P5);Xae=n(CMe,"STRONG",{});var yWr=s(Xae);l0o=r(yWr,"bigbird_pegasus"),yWr.forEach(t),i0o=r(CMe," \u2014 "),fj=n(CMe,"A",{href:!0});var wWr=s(fj);d0o=r(wWr,"BigBirdPegasusForQuestionAnswering"),wWr.forEach(t),c0o=r(CMe," (BigBirdPegasus model)"),CMe.forEach(t),f0o=i(P),$5=n(P,"LI",{});var MMe=s($5);zae=n(MMe,"STRONG",{});var AWr=s(zae);m0o=r(AWr,"camembert"),AWr.forEach(t),g0o=r(MMe," \u2014 "),mj=n(MMe,"A",{href:!0});var LWr=s(mj);h0o=r(LWr,"CamembertForQuestionAnswering"),LWr.forEach(t),p0o=r(MMe," (CamemBERT model)"),MMe.forEach(t),_0o=i(P),I5=n(P,"LI",{});var EMe=s(I5);Vae=n(EMe,"STRONG",{});var BWr=s(Vae);u0o=r(BWr,"canine"),BWr.forEach(t),b0o=r(EMe," \u2014 "),gj=n(EMe,"A",{href:!0});var xWr=s(gj);v0o=r(xWr,"CanineForQuestionAnswering"),xWr.forEach(t),T0o=r(EMe," (Canine model)"),EMe.forEach(t),F0o=i(P),j5=n(P,"LI",{});var yMe=s(j5);Wae=n(yMe,"STRONG",{});var kWr=s(Wae);C0o=r(kWr,"convbert"),kWr.forEach(t),M0o=r(yMe," \u2014 "),hj=n(yMe,"A",{href:!0});var RWr=s(hj);E0o=r(RWr,"ConvBertForQuestionAnswering"),RWr.forEach(t),y0o=r(yMe," (ConvBERT model)"),yMe.forEach(t),w0o=i(P),N5=n(P,"LI",{});var wMe=s(N5);Qae=n(wMe,"STRONG",{});var SWr=s(Qae);A0o=r(SWr,"deberta"),SWr.forEach(t),L0o=r(wMe," \u2014 "),pj=n(wMe,"A",{href:!0});var PWr=s(pj);B0o=r(PWr,"DebertaForQuestionAnswering"),PWr.forEach(t),x0o=r(wMe," (DeBERTa model)"),wMe.forEach(t),k0o=i(P),D5=n(P,"LI",{});var AMe=s(D5);Hae=n(AMe,"STRONG",{});var $Wr=s(Hae);R0o=r($Wr,"deberta-v2"),$Wr.forEach(t),S0o=r(AMe," \u2014 "),_j=n(AMe,"A",{href:!0});var IWr=s(_j);P0o=r(IWr,"DebertaV2ForQuestionAnswering"),IWr.forEach(t),$0o=r(AMe," (DeBERTa-v2 model)"),AMe.forEach(t),I0o=i(P),q5=n(P,"LI",{});var LMe=s(q5);Uae=n(LMe,"STRONG",{});var jWr=s(Uae);j0o=r(jWr,"distilbert"),jWr.forEach(t),N0o=r(LMe," \u2014 "),uj=n(LMe,"A",{href:!0});var NWr=s(uj);D0o=r(NWr,"DistilBertForQuestionAnswering"),NWr.forEach(t),q0o=r(LMe," (DistilBERT model)"),LMe.forEach(t),G0o=i(P),G5=n(P,"LI",{});var BMe=s(G5);Jae=n(BMe,"STRONG",{});var DWr=s(Jae);O0o=r(DWr,"electra"),DWr.forEach(t),X0o=r(BMe," \u2014 "),bj=n(BMe,"A",{href:!0});var qWr=s(bj);z0o=r(qWr,"ElectraForQuestionAnswering"),qWr.forEach(t),V0o=r(BMe," (ELECTRA model)"),BMe.forEach(t),W0o=i(P),O5=n(P,"LI",{});var xMe=s(O5);Yae=n(xMe,"STRONG",{});var GWr=s(Yae);Q0o=r(GWr,"flaubert"),GWr.forEach(t),H0o=r(xMe," \u2014 "),vj=n(xMe,"A",{href:!0});var OWr=s(vj);U0o=r(OWr,"FlaubertForQuestionAnsweringSimple"),OWr.forEach(t),J0o=r(xMe," (FlauBERT model)"),xMe.forEach(t),Y0o=i(P),X5=n(P,"LI",{});var kMe=s(X5);Kae=n(kMe,"STRONG",{});var XWr=s(Kae);K0o=r(XWr,"fnet"),XWr.forEach(t),Z0o=r(kMe," \u2014 "),Tj=n(kMe,"A",{href:!0});var zWr=s(Tj);eLo=r(zWr,"FNetForQuestionAnswering"),zWr.forEach(t),oLo=r(kMe," (FNet model)"),kMe.forEach(t),rLo=i(P),z5=n(P,"LI",{});var RMe=s(z5);Zae=n(RMe,"STRONG",{});var VWr=s(Zae);tLo=r(VWr,"funnel"),VWr.forEach(t),aLo=r(RMe," \u2014 "),Fj=n(RMe,"A",{href:!0});var WWr=s(Fj);nLo=r(WWr,"FunnelForQuestionAnswering"),WWr.forEach(t),sLo=r(RMe," (Funnel Transformer model)"),RMe.forEach(t),lLo=i(P),V5=n(P,"LI",{});var SMe=s(V5);ene=n(SMe,"STRONG",{});var QWr=s(ene);iLo=r(QWr,"gptj"),QWr.forEach(t),dLo=r(SMe," \u2014 "),Cj=n(SMe,"A",{href:!0});var HWr=s(Cj);cLo=r(HWr,"GPTJForQuestionAnswering"),HWr.forEach(t),fLo=r(SMe," (GPT-J model)"),SMe.forEach(t),mLo=i(P),W5=n(P,"LI",{});var PMe=s(W5);one=n(PMe,"STRONG",{});var UWr=s(one);gLo=r(UWr,"ibert"),UWr.forEach(t),hLo=r(PMe," \u2014 "),Mj=n(PMe,"A",{href:!0});var JWr=s(Mj);pLo=r(JWr,"IBertForQuestionAnswering"),JWr.forEach(t),_Lo=r(PMe," (I-BERT model)"),PMe.forEach(t),uLo=i(P),Q5=n(P,"LI",{});var $Me=s(Q5);rne=n($Me,"STRONG",{});var YWr=s(rne);bLo=r(YWr,"layoutlmv2"),YWr.forEach(t),vLo=r($Me," \u2014 "),Ej=n($Me,"A",{href:!0});var KWr=s(Ej);TLo=r(KWr,"LayoutLMv2ForQuestionAnswering"),KWr.forEach(t),FLo=r($Me," (LayoutLMv2 model)"),$Me.forEach(t),CLo=i(P),H5=n(P,"LI",{});var IMe=s(H5);tne=n(IMe,"STRONG",{});var ZWr=s(tne);MLo=r(ZWr,"led"),ZWr.forEach(t),ELo=r(IMe," \u2014 "),yj=n(IMe,"A",{href:!0});var eQr=s(yj);yLo=r(eQr,"LEDForQuestionAnswering"),eQr.forEach(t),wLo=r(IMe," (LED model)"),IMe.forEach(t),ALo=i(P),U5=n(P,"LI",{});var jMe=s(U5);ane=n(jMe,"STRONG",{});var oQr=s(ane);LLo=r(oQr,"longformer"),oQr.forEach(t),BLo=r(jMe," \u2014 "),wj=n(jMe,"A",{href:!0});var rQr=s(wj);xLo=r(rQr,"LongformerForQuestionAnswering"),rQr.forEach(t),kLo=r(jMe," (Longformer model)"),jMe.forEach(t),RLo=i(P),J5=n(P,"LI",{});var NMe=s(J5);nne=n(NMe,"STRONG",{});var tQr=s(nne);SLo=r(tQr,"lxmert"),tQr.forEach(t),PLo=r(NMe," \u2014 "),Aj=n(NMe,"A",{href:!0});var aQr=s(Aj);$Lo=r(aQr,"LxmertForQuestionAnswering"),aQr.forEach(t),ILo=r(NMe," (LXMERT model)"),NMe.forEach(t),jLo=i(P),Y5=n(P,"LI",{});var DMe=s(Y5);sne=n(DMe,"STRONG",{});var nQr=s(sne);NLo=r(nQr,"mbart"),nQr.forEach(t),DLo=r(DMe," \u2014 "),Lj=n(DMe,"A",{href:!0});var sQr=s(Lj);qLo=r(sQr,"MBartForQuestionAnswering"),sQr.forEach(t),GLo=r(DMe," (mBART model)"),DMe.forEach(t),OLo=i(P),K5=n(P,"LI",{});var qMe=s(K5);lne=n(qMe,"STRONG",{});var lQr=s(lne);XLo=r(lQr,"megatron-bert"),lQr.forEach(t),zLo=r(qMe," \u2014 "),Bj=n(qMe,"A",{href:!0});var iQr=s(Bj);VLo=r(iQr,"MegatronBertForQuestionAnswering"),iQr.forEach(t),WLo=r(qMe," (MegatronBert model)"),qMe.forEach(t),QLo=i(P),Z5=n(P,"LI",{});var GMe=s(Z5);ine=n(GMe,"STRONG",{});var dQr=s(ine);HLo=r(dQr,"mobilebert"),dQr.forEach(t),ULo=r(GMe," \u2014 "),xj=n(GMe,"A",{href:!0});var cQr=s(xj);JLo=r(cQr,"MobileBertForQuestionAnswering"),cQr.forEach(t),YLo=r(GMe," (MobileBERT model)"),GMe.forEach(t),KLo=i(P),e2=n(P,"LI",{});var OMe=s(e2);dne=n(OMe,"STRONG",{});var fQr=s(dne);ZLo=r(fQr,"mpnet"),fQr.forEach(t),e9o=r(OMe," \u2014 "),kj=n(OMe,"A",{href:!0});var mQr=s(kj);o9o=r(mQr,"MPNetForQuestionAnswering"),mQr.forEach(t),r9o=r(OMe," (MPNet model)"),OMe.forEach(t),t9o=i(P),o2=n(P,"LI",{});var XMe=s(o2);cne=n(XMe,"STRONG",{});var gQr=s(cne);a9o=r(gQr,"nystromformer"),gQr.forEach(t),n9o=r(XMe," \u2014 "),Rj=n(XMe,"A",{href:!0});var hQr=s(Rj);s9o=r(hQr,"NystromformerForQuestionAnswering"),hQr.forEach(t),l9o=r(XMe," (Nystromformer model)"),XMe.forEach(t),i9o=i(P),r2=n(P,"LI",{});var zMe=s(r2);fne=n(zMe,"STRONG",{});var pQr=s(fne);d9o=r(pQr,"qdqbert"),pQr.forEach(t),c9o=r(zMe," \u2014 "),Sj=n(zMe,"A",{href:!0});var _Qr=s(Sj);f9o=r(_Qr,"QDQBertForQuestionAnswering"),_Qr.forEach(t),m9o=r(zMe," (QDQBert model)"),zMe.forEach(t),g9o=i(P),t2=n(P,"LI",{});var VMe=s(t2);mne=n(VMe,"STRONG",{});var uQr=s(mne);h9o=r(uQr,"reformer"),uQr.forEach(t),p9o=r(VMe," \u2014 "),Pj=n(VMe,"A",{href:!0});var bQr=s(Pj);_9o=r(bQr,"ReformerForQuestionAnswering"),bQr.forEach(t),u9o=r(VMe," (Reformer model)"),VMe.forEach(t),b9o=i(P),a2=n(P,"LI",{});var WMe=s(a2);gne=n(WMe,"STRONG",{});var vQr=s(gne);v9o=r(vQr,"rembert"),vQr.forEach(t),T9o=r(WMe," \u2014 "),$j=n(WMe,"A",{href:!0});var TQr=s($j);F9o=r(TQr,"RemBertForQuestionAnswering"),TQr.forEach(t),C9o=r(WMe," (RemBERT model)"),WMe.forEach(t),M9o=i(P),n2=n(P,"LI",{});var QMe=s(n2);hne=n(QMe,"STRONG",{});var FQr=s(hne);E9o=r(FQr,"roberta"),FQr.forEach(t),y9o=r(QMe," \u2014 "),Ij=n(QMe,"A",{href:!0});var CQr=s(Ij);w9o=r(CQr,"RobertaForQuestionAnswering"),CQr.forEach(t),A9o=r(QMe," (RoBERTa model)"),QMe.forEach(t),L9o=i(P),s2=n(P,"LI",{});var HMe=s(s2);pne=n(HMe,"STRONG",{});var MQr=s(pne);B9o=r(MQr,"roformer"),MQr.forEach(t),x9o=r(HMe," \u2014 "),jj=n(HMe,"A",{href:!0});var EQr=s(jj);k9o=r(EQr,"RoFormerForQuestionAnswering"),EQr.forEach(t),R9o=r(HMe," (RoFormer model)"),HMe.forEach(t),S9o=i(P),l2=n(P,"LI",{});var UMe=s(l2);_ne=n(UMe,"STRONG",{});var yQr=s(_ne);P9o=r(yQr,"splinter"),yQr.forEach(t),$9o=r(UMe," \u2014 "),Nj=n(UMe,"A",{href:!0});var wQr=s(Nj);I9o=r(wQr,"SplinterForQuestionAnswering"),wQr.forEach(t),j9o=r(UMe," (Splinter model)"),UMe.forEach(t),N9o=i(P),i2=n(P,"LI",{});var JMe=s(i2);une=n(JMe,"STRONG",{});var AQr=s(une);D9o=r(AQr,"squeezebert"),AQr.forEach(t),q9o=r(JMe," \u2014 "),Dj=n(JMe,"A",{href:!0});var LQr=s(Dj);G9o=r(LQr,"SqueezeBertForQuestionAnswering"),LQr.forEach(t),O9o=r(JMe," (SqueezeBERT model)"),JMe.forEach(t),X9o=i(P),d2=n(P,"LI",{});var YMe=s(d2);bne=n(YMe,"STRONG",{});var BQr=s(bne);z9o=r(BQr,"xlm"),BQr.forEach(t),V9o=r(YMe," \u2014 "),qj=n(YMe,"A",{href:!0});var xQr=s(qj);W9o=r(xQr,"XLMForQuestionAnsweringSimple"),xQr.forEach(t),Q9o=r(YMe," (XLM model)"),YMe.forEach(t),H9o=i(P),c2=n(P,"LI",{});var KMe=s(c2);vne=n(KMe,"STRONG",{});var kQr=s(vne);U9o=r(kQr,"xlm-roberta"),kQr.forEach(t),J9o=r(KMe," \u2014 "),Gj=n(KMe,"A",{href:!0});var RQr=s(Gj);Y9o=r(RQr,"XLMRobertaForQuestionAnswering"),RQr.forEach(t),K9o=r(KMe," (XLM-RoBERTa model)"),KMe.forEach(t),Z9o=i(P),f2=n(P,"LI",{});var ZMe=s(f2);Tne=n(ZMe,"STRONG",{});var SQr=s(Tne);eBo=r(SQr,"xlm-roberta-xl"),SQr.forEach(t),oBo=r(ZMe," \u2014 "),Oj=n(ZMe,"A",{href:!0});var PQr=s(Oj);rBo=r(PQr,"XLMRobertaXLForQuestionAnswering"),PQr.forEach(t),tBo=r(ZMe," (XLM-RoBERTa-XL model)"),ZMe.forEach(t),aBo=i(P),m2=n(P,"LI",{});var eEe=s(m2);Fne=n(eEe,"STRONG",{});var $Qr=s(Fne);nBo=r($Qr,"xlnet"),$Qr.forEach(t),sBo=r(eEe," \u2014 "),Xj=n(eEe,"A",{href:!0});var IQr=s(Xj);lBo=r(IQr,"XLNetForQuestionAnsweringSimple"),IQr.forEach(t),iBo=r(eEe," (XLNet model)"),eEe.forEach(t),dBo=i(P),g2=n(P,"LI",{});var oEe=s(g2);Cne=n(oEe,"STRONG",{});var jQr=s(Cne);cBo=r(jQr,"yoso"),jQr.forEach(t),fBo=r(oEe," \u2014 "),zj=n(oEe,"A",{href:!0});var NQr=s(zj);mBo=r(NQr,"YosoForQuestionAnswering"),NQr.forEach(t),gBo=r(oEe," (YOSO model)"),oEe.forEach(t),P.forEach(t),hBo=i(Ot),h2=n(Ot,"P",{});var rEe=s(h2);pBo=r(rEe,"The model is set in evaluation mode by default using "),Mne=n(rEe,"CODE",{});var DQr=s(Mne);_Bo=r(DQr,"model.eval()"),DQr.forEach(t),uBo=r(rEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ene=n(rEe,"CODE",{});var qQr=s(Ene);bBo=r(qQr,"model.train()"),qQr.forEach(t),rEe.forEach(t),vBo=i(Ot),yne=n(Ot,"P",{});var GQr=s(yne);TBo=r(GQr,"Examples:"),GQr.forEach(t),FBo=i(Ot),m(KM.$$.fragment,Ot),Ot.forEach(t),tl.forEach(t),zLe=i(d),_d=n(d,"H2",{class:!0});var YBe=s(_d);p2=n(YBe,"A",{id:!0,class:!0,href:!0});var OQr=s(p2);wne=n(OQr,"SPAN",{});var XQr=s(wne);m(ZM.$$.fragment,XQr),XQr.forEach(t),OQr.forEach(t),CBo=i(YBe),Ane=n(YBe,"SPAN",{});var zQr=s(Ane);MBo=r(zQr,"AutoModelForTableQuestionAnswering"),zQr.forEach(t),YBe.forEach(t),VLe=i(d),or=n(d,"DIV",{class:!0});var nl=s(or);m(eE.$$.fragment,nl),EBo=i(nl),ud=n(nl,"P",{});var uz=s(ud);yBo=r(uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Lne=n(uz,"CODE",{});var VQr=s(Lne);wBo=r(VQr,"from_pretrained()"),VQr.forEach(t),ABo=r(uz,"class method or the "),Bne=n(uz,"CODE",{});var WQr=s(Bne);LBo=r(WQr,"from_config()"),WQr.forEach(t),BBo=r(uz,`class
method.`),uz.forEach(t),xBo=i(nl),oE=n(nl,"P",{});var KBe=s(oE);kBo=r(KBe,"This class cannot be instantiated directly using "),xne=n(KBe,"CODE",{});var QQr=s(xne);RBo=r(QQr,"__init__()"),QQr.forEach(t),SBo=r(KBe," (throws an error)."),KBe.forEach(t),PBo=i(nl),Hr=n(nl,"DIV",{class:!0});var sl=s(Hr);m(rE.$$.fragment,sl),$Bo=i(sl),kne=n(sl,"P",{});var HQr=s(kne);IBo=r(HQr,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),HQr.forEach(t),jBo=i(sl),bd=n(sl,"P",{});var bz=s(bd);NBo=r(bz,`Note:
Loading a model from its configuration file does `),Rne=n(bz,"STRONG",{});var UQr=s(Rne);DBo=r(UQr,"not"),UQr.forEach(t),qBo=r(bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sne=n(bz,"CODE",{});var JQr=s(Sne);GBo=r(JQr,"from_pretrained()"),JQr.forEach(t),OBo=r(bz,"to load the model weights."),bz.forEach(t),XBo=i(sl),Pne=n(sl,"P",{});var YQr=s(Pne);zBo=r(YQr,"Examples:"),YQr.forEach(t),VBo=i(sl),m(tE.$$.fragment,sl),sl.forEach(t),WBo=i(nl),qe=n(nl,"DIV",{class:!0});var Xt=s(qe);m(aE.$$.fragment,Xt),QBo=i(Xt),$ne=n(Xt,"P",{});var KQr=s($ne);HBo=r(KQr,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),KQr.forEach(t),UBo=i(Xt),Ua=n(Xt,"P",{});var vC=s(Ua);JBo=r(vC,"The model class to instantiate is selected based on the "),Ine=n(vC,"CODE",{});var ZQr=s(Ine);YBo=r(ZQr,"model_type"),ZQr.forEach(t),KBo=r(vC,` property of the config object (either
passed as an argument or loaded from `),jne=n(vC,"CODE",{});var eHr=s(jne);ZBo=r(eHr,"pretrained_model_name_or_path"),eHr.forEach(t),exo=r(vC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nne=n(vC,"CODE",{});var oHr=s(Nne);oxo=r(oHr,"pretrained_model_name_or_path"),oHr.forEach(t),rxo=r(vC,":"),vC.forEach(t),txo=i(Xt),Dne=n(Xt,"UL",{});var rHr=s(Dne);_2=n(rHr,"LI",{});var tEe=s(_2);qne=n(tEe,"STRONG",{});var tHr=s(qne);axo=r(tHr,"tapas"),tHr.forEach(t),nxo=r(tEe," \u2014 "),Vj=n(tEe,"A",{href:!0});var aHr=s(Vj);sxo=r(aHr,"TapasForQuestionAnswering"),aHr.forEach(t),lxo=r(tEe," (TAPAS model)"),tEe.forEach(t),rHr.forEach(t),ixo=i(Xt),u2=n(Xt,"P",{});var aEe=s(u2);dxo=r(aEe,"The model is set in evaluation mode by default using "),Gne=n(aEe,"CODE",{});var nHr=s(Gne);cxo=r(nHr,"model.eval()"),nHr.forEach(t),fxo=r(aEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),One=n(aEe,"CODE",{});var sHr=s(One);mxo=r(sHr,"model.train()"),sHr.forEach(t),aEe.forEach(t),gxo=i(Xt),Xne=n(Xt,"P",{});var lHr=s(Xne);hxo=r(lHr,"Examples:"),lHr.forEach(t),pxo=i(Xt),m(nE.$$.fragment,Xt),Xt.forEach(t),nl.forEach(t),WLe=i(d),vd=n(d,"H2",{class:!0});var ZBe=s(vd);b2=n(ZBe,"A",{id:!0,class:!0,href:!0});var iHr=s(b2);zne=n(iHr,"SPAN",{});var dHr=s(zne);m(sE.$$.fragment,dHr),dHr.forEach(t),iHr.forEach(t),_xo=i(ZBe),Vne=n(ZBe,"SPAN",{});var cHr=s(Vne);uxo=r(cHr,"AutoModelForImageClassification"),cHr.forEach(t),ZBe.forEach(t),QLe=i(d),rr=n(d,"DIV",{class:!0});var ll=s(rr);m(lE.$$.fragment,ll),bxo=i(ll),Td=n(ll,"P",{});var vz=s(Td);vxo=r(vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Wne=n(vz,"CODE",{});var fHr=s(Wne);Txo=r(fHr,"from_pretrained()"),fHr.forEach(t),Fxo=r(vz,"class method or the "),Qne=n(vz,"CODE",{});var mHr=s(Qne);Cxo=r(mHr,"from_config()"),mHr.forEach(t),Mxo=r(vz,`class
method.`),vz.forEach(t),Exo=i(ll),iE=n(ll,"P",{});var exe=s(iE);yxo=r(exe,"This class cannot be instantiated directly using "),Hne=n(exe,"CODE",{});var gHr=s(Hne);wxo=r(gHr,"__init__()"),gHr.forEach(t),Axo=r(exe," (throws an error)."),exe.forEach(t),Lxo=i(ll),Ur=n(ll,"DIV",{class:!0});var il=s(Ur);m(dE.$$.fragment,il),Bxo=i(il),Une=n(il,"P",{});var hHr=s(Une);xxo=r(hHr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hHr.forEach(t),kxo=i(il),Fd=n(il,"P",{});var Tz=s(Fd);Rxo=r(Tz,`Note:
Loading a model from its configuration file does `),Jne=n(Tz,"STRONG",{});var pHr=s(Jne);Sxo=r(pHr,"not"),pHr.forEach(t),Pxo=r(Tz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yne=n(Tz,"CODE",{});var _Hr=s(Yne);$xo=r(_Hr,"from_pretrained()"),_Hr.forEach(t),Ixo=r(Tz,"to load the model weights."),Tz.forEach(t),jxo=i(il),Kne=n(il,"P",{});var uHr=s(Kne);Nxo=r(uHr,"Examples:"),uHr.forEach(t),Dxo=i(il),m(cE.$$.fragment,il),il.forEach(t),qxo=i(ll),Ge=n(ll,"DIV",{class:!0});var zt=s(Ge);m(fE.$$.fragment,zt),Gxo=i(zt),Zne=n(zt,"P",{});var bHr=s(Zne);Oxo=r(bHr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bHr.forEach(t),Xxo=i(zt),Ja=n(zt,"P",{});var TC=s(Ja);zxo=r(TC,"The model class to instantiate is selected based on the "),ese=n(TC,"CODE",{});var vHr=s(ese);Vxo=r(vHr,"model_type"),vHr.forEach(t),Wxo=r(TC,` property of the config object (either
passed as an argument or loaded from `),ose=n(TC,"CODE",{});var THr=s(ose);Qxo=r(THr,"pretrained_model_name_or_path"),THr.forEach(t),Hxo=r(TC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rse=n(TC,"CODE",{});var FHr=s(rse);Uxo=r(FHr,"pretrained_model_name_or_path"),FHr.forEach(t),Jxo=r(TC,":"),TC.forEach(t),Yxo=i(zt),be=n(zt,"UL",{});var Ke=s(be);v2=n(Ke,"LI",{});var nEe=s(v2);tse=n(nEe,"STRONG",{});var CHr=s(tse);Kxo=r(CHr,"beit"),CHr.forEach(t),Zxo=r(nEe," \u2014 "),Wj=n(nEe,"A",{href:!0});var MHr=s(Wj);eko=r(MHr,"BeitForImageClassification"),MHr.forEach(t),oko=r(nEe," (BEiT model)"),nEe.forEach(t),rko=i(Ke),T2=n(Ke,"LI",{});var sEe=s(T2);ase=n(sEe,"STRONG",{});var EHr=s(ase);tko=r(EHr,"convnext"),EHr.forEach(t),ako=r(sEe," \u2014 "),Qj=n(sEe,"A",{href:!0});var yHr=s(Qj);nko=r(yHr,"ConvNextForImageClassification"),yHr.forEach(t),sko=r(sEe," (ConvNext model)"),sEe.forEach(t),lko=i(Ke),Rs=n(Ke,"LI",{});var q0=s(Rs);nse=n(q0,"STRONG",{});var wHr=s(nse);iko=r(wHr,"deit"),wHr.forEach(t),dko=r(q0," \u2014 "),Hj=n(q0,"A",{href:!0});var AHr=s(Hj);cko=r(AHr,"DeiTForImageClassification"),AHr.forEach(t),fko=r(q0," or "),Uj=n(q0,"A",{href:!0});var LHr=s(Uj);mko=r(LHr,"DeiTForImageClassificationWithTeacher"),LHr.forEach(t),gko=r(q0," (DeiT model)"),q0.forEach(t),hko=i(Ke),F2=n(Ke,"LI",{});var lEe=s(F2);sse=n(lEe,"STRONG",{});var BHr=s(sse);pko=r(BHr,"imagegpt"),BHr.forEach(t),_ko=r(lEe," \u2014 "),Jj=n(lEe,"A",{href:!0});var xHr=s(Jj);uko=r(xHr,"ImageGPTForImageClassification"),xHr.forEach(t),bko=r(lEe," (ImageGPT model)"),lEe.forEach(t),vko=i(Ke),la=n(Ke,"LI",{});var Mf=s(la);lse=n(Mf,"STRONG",{});var kHr=s(lse);Tko=r(kHr,"perceiver"),kHr.forEach(t),Fko=r(Mf," \u2014 "),Yj=n(Mf,"A",{href:!0});var RHr=s(Yj);Cko=r(RHr,"PerceiverForImageClassificationLearned"),RHr.forEach(t),Mko=r(Mf," or "),Kj=n(Mf,"A",{href:!0});var SHr=s(Kj);Eko=r(SHr,"PerceiverForImageClassificationFourier"),SHr.forEach(t),yko=r(Mf," or "),Zj=n(Mf,"A",{href:!0});var PHr=s(Zj);wko=r(PHr,"PerceiverForImageClassificationConvProcessing"),PHr.forEach(t),Ako=r(Mf," (Perceiver model)"),Mf.forEach(t),Lko=i(Ke),C2=n(Ke,"LI",{});var iEe=s(C2);ise=n(iEe,"STRONG",{});var $Hr=s(ise);Bko=r($Hr,"poolformer"),$Hr.forEach(t),xko=r(iEe," \u2014 "),eN=n(iEe,"A",{href:!0});var IHr=s(eN);kko=r(IHr,"PoolFormerForImageClassification"),IHr.forEach(t),Rko=r(iEe," (PoolFormer model)"),iEe.forEach(t),Sko=i(Ke),M2=n(Ke,"LI",{});var dEe=s(M2);dse=n(dEe,"STRONG",{});var jHr=s(dse);Pko=r(jHr,"segformer"),jHr.forEach(t),$ko=r(dEe," \u2014 "),oN=n(dEe,"A",{href:!0});var NHr=s(oN);Iko=r(NHr,"SegformerForImageClassification"),NHr.forEach(t),jko=r(dEe," (SegFormer model)"),dEe.forEach(t),Nko=i(Ke),E2=n(Ke,"LI",{});var cEe=s(E2);cse=n(cEe,"STRONG",{});var DHr=s(cse);Dko=r(DHr,"swin"),DHr.forEach(t),qko=r(cEe," \u2014 "),rN=n(cEe,"A",{href:!0});var qHr=s(rN);Gko=r(qHr,"SwinForImageClassification"),qHr.forEach(t),Oko=r(cEe," (Swin model)"),cEe.forEach(t),Xko=i(Ke),y2=n(Ke,"LI",{});var fEe=s(y2);fse=n(fEe,"STRONG",{});var GHr=s(fse);zko=r(GHr,"vit"),GHr.forEach(t),Vko=r(fEe," \u2014 "),tN=n(fEe,"A",{href:!0});var OHr=s(tN);Wko=r(OHr,"ViTForImageClassification"),OHr.forEach(t),Qko=r(fEe," (ViT model)"),fEe.forEach(t),Ke.forEach(t),Hko=i(zt),w2=n(zt,"P",{});var mEe=s(w2);Uko=r(mEe,"The model is set in evaluation mode by default using "),mse=n(mEe,"CODE",{});var XHr=s(mse);Jko=r(XHr,"model.eval()"),XHr.forEach(t),Yko=r(mEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gse=n(mEe,"CODE",{});var zHr=s(gse);Kko=r(zHr,"model.train()"),zHr.forEach(t),mEe.forEach(t),Zko=i(zt),hse=n(zt,"P",{});var VHr=s(hse);eRo=r(VHr,"Examples:"),VHr.forEach(t),oRo=i(zt),m(mE.$$.fragment,zt),zt.forEach(t),ll.forEach(t),HLe=i(d),Cd=n(d,"H2",{class:!0});var oxe=s(Cd);A2=n(oxe,"A",{id:!0,class:!0,href:!0});var WHr=s(A2);pse=n(WHr,"SPAN",{});var QHr=s(pse);m(gE.$$.fragment,QHr),QHr.forEach(t),WHr.forEach(t),rRo=i(oxe),_se=n(oxe,"SPAN",{});var HHr=s(_se);tRo=r(HHr,"AutoModelForVision2Seq"),HHr.forEach(t),oxe.forEach(t),ULe=i(d),tr=n(d,"DIV",{class:!0});var dl=s(tr);m(hE.$$.fragment,dl),aRo=i(dl),Md=n(dl,"P",{});var Fz=s(Md);nRo=r(Fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),use=n(Fz,"CODE",{});var UHr=s(use);sRo=r(UHr,"from_pretrained()"),UHr.forEach(t),lRo=r(Fz,"class method or the "),bse=n(Fz,"CODE",{});var JHr=s(bse);iRo=r(JHr,"from_config()"),JHr.forEach(t),dRo=r(Fz,`class
method.`),Fz.forEach(t),cRo=i(dl),pE=n(dl,"P",{});var rxe=s(pE);fRo=r(rxe,"This class cannot be instantiated directly using "),vse=n(rxe,"CODE",{});var YHr=s(vse);mRo=r(YHr,"__init__()"),YHr.forEach(t),gRo=r(rxe," (throws an error)."),rxe.forEach(t),hRo=i(dl),Jr=n(dl,"DIV",{class:!0});var cl=s(Jr);m(_E.$$.fragment,cl),pRo=i(cl),Tse=n(cl,"P",{});var KHr=s(Tse);_Ro=r(KHr,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KHr.forEach(t),uRo=i(cl),Ed=n(cl,"P",{});var Cz=s(Ed);bRo=r(Cz,`Note:
Loading a model from its configuration file does `),Fse=n(Cz,"STRONG",{});var ZHr=s(Fse);vRo=r(ZHr,"not"),ZHr.forEach(t),TRo=r(Cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cse=n(Cz,"CODE",{});var eUr=s(Cse);FRo=r(eUr,"from_pretrained()"),eUr.forEach(t),CRo=r(Cz,"to load the model weights."),Cz.forEach(t),MRo=i(cl),Mse=n(cl,"P",{});var oUr=s(Mse);ERo=r(oUr,"Examples:"),oUr.forEach(t),yRo=i(cl),m(uE.$$.fragment,cl),cl.forEach(t),wRo=i(dl),Oe=n(dl,"DIV",{class:!0});var Vt=s(Oe);m(bE.$$.fragment,Vt),ARo=i(Vt),Ese=n(Vt,"P",{});var rUr=s(Ese);LRo=r(rUr,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rUr.forEach(t),BRo=i(Vt),Ya=n(Vt,"P",{});var FC=s(Ya);xRo=r(FC,"The model class to instantiate is selected based on the "),yse=n(FC,"CODE",{});var tUr=s(yse);kRo=r(tUr,"model_type"),tUr.forEach(t),RRo=r(FC,` property of the config object (either
passed as an argument or loaded from `),wse=n(FC,"CODE",{});var aUr=s(wse);SRo=r(aUr,"pretrained_model_name_or_path"),aUr.forEach(t),PRo=r(FC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ase=n(FC,"CODE",{});var nUr=s(Ase);$Ro=r(nUr,"pretrained_model_name_or_path"),nUr.forEach(t),IRo=r(FC,":"),FC.forEach(t),jRo=i(Vt),Lse=n(Vt,"UL",{});var sUr=s(Lse);L2=n(sUr,"LI",{});var gEe=s(L2);Bse=n(gEe,"STRONG",{});var lUr=s(Bse);NRo=r(lUr,"vision-encoder-decoder"),lUr.forEach(t),DRo=r(gEe," \u2014 "),aN=n(gEe,"A",{href:!0});var iUr=s(aN);qRo=r(iUr,"VisionEncoderDecoderModel"),iUr.forEach(t),GRo=r(gEe," (Vision Encoder decoder model)"),gEe.forEach(t),sUr.forEach(t),ORo=i(Vt),B2=n(Vt,"P",{});var hEe=s(B2);XRo=r(hEe,"The model is set in evaluation mode by default using "),xse=n(hEe,"CODE",{});var dUr=s(xse);zRo=r(dUr,"model.eval()"),dUr.forEach(t),VRo=r(hEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kse=n(hEe,"CODE",{});var cUr=s(kse);WRo=r(cUr,"model.train()"),cUr.forEach(t),hEe.forEach(t),QRo=i(Vt),Rse=n(Vt,"P",{});var fUr=s(Rse);HRo=r(fUr,"Examples:"),fUr.forEach(t),URo=i(Vt),m(vE.$$.fragment,Vt),Vt.forEach(t),dl.forEach(t),JLe=i(d),yd=n(d,"H2",{class:!0});var txe=s(yd);x2=n(txe,"A",{id:!0,class:!0,href:!0});var mUr=s(x2);Sse=n(mUr,"SPAN",{});var gUr=s(Sse);m(TE.$$.fragment,gUr),gUr.forEach(t),mUr.forEach(t),JRo=i(txe),Pse=n(txe,"SPAN",{});var hUr=s(Pse);YRo=r(hUr,"AutoModelForAudioClassification"),hUr.forEach(t),txe.forEach(t),YLe=i(d),ar=n(d,"DIV",{class:!0});var fl=s(ar);m(FE.$$.fragment,fl),KRo=i(fl),wd=n(fl,"P",{});var Mz=s(wd);ZRo=r(Mz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),$se=n(Mz,"CODE",{});var pUr=s($se);eSo=r(pUr,"from_pretrained()"),pUr.forEach(t),oSo=r(Mz,"class method or the "),Ise=n(Mz,"CODE",{});var _Ur=s(Ise);rSo=r(_Ur,"from_config()"),_Ur.forEach(t),tSo=r(Mz,`class
method.`),Mz.forEach(t),aSo=i(fl),CE=n(fl,"P",{});var axe=s(CE);nSo=r(axe,"This class cannot be instantiated directly using "),jse=n(axe,"CODE",{});var uUr=s(jse);sSo=r(uUr,"__init__()"),uUr.forEach(t),lSo=r(axe," (throws an error)."),axe.forEach(t),iSo=i(fl),Yr=n(fl,"DIV",{class:!0});var ml=s(Yr);m(ME.$$.fragment,ml),dSo=i(ml),Nse=n(ml,"P",{});var bUr=s(Nse);cSo=r(bUr,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),bUr.forEach(t),fSo=i(ml),Ad=n(ml,"P",{});var Ez=s(Ad);mSo=r(Ez,`Note:
Loading a model from its configuration file does `),Dse=n(Ez,"STRONG",{});var vUr=s(Dse);gSo=r(vUr,"not"),vUr.forEach(t),hSo=r(Ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),qse=n(Ez,"CODE",{});var TUr=s(qse);pSo=r(TUr,"from_pretrained()"),TUr.forEach(t),_So=r(Ez,"to load the model weights."),Ez.forEach(t),uSo=i(ml),Gse=n(ml,"P",{});var FUr=s(Gse);bSo=r(FUr,"Examples:"),FUr.forEach(t),vSo=i(ml),m(EE.$$.fragment,ml),ml.forEach(t),TSo=i(fl),Xe=n(fl,"DIV",{class:!0});var Wt=s(Xe);m(yE.$$.fragment,Wt),FSo=i(Wt),Ose=n(Wt,"P",{});var CUr=s(Ose);CSo=r(CUr,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),CUr.forEach(t),MSo=i(Wt),Ka=n(Wt,"P",{});var CC=s(Ka);ESo=r(CC,"The model class to instantiate is selected based on the "),Xse=n(CC,"CODE",{});var MUr=s(Xse);ySo=r(MUr,"model_type"),MUr.forEach(t),wSo=r(CC,` property of the config object (either
passed as an argument or loaded from `),zse=n(CC,"CODE",{});var EUr=s(zse);ASo=r(EUr,"pretrained_model_name_or_path"),EUr.forEach(t),LSo=r(CC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vse=n(CC,"CODE",{});var yUr=s(Vse);BSo=r(yUr,"pretrained_model_name_or_path"),yUr.forEach(t),xSo=r(CC,":"),CC.forEach(t),kSo=i(Wt),ao=n(Wt,"UL",{});var Qt=s(ao);k2=n(Qt,"LI",{});var pEe=s(k2);Wse=n(pEe,"STRONG",{});var wUr=s(Wse);RSo=r(wUr,"hubert"),wUr.forEach(t),SSo=r(pEe," \u2014 "),nN=n(pEe,"A",{href:!0});var AUr=s(nN);PSo=r(AUr,"HubertForSequenceClassification"),AUr.forEach(t),$So=r(pEe," (Hubert model)"),pEe.forEach(t),ISo=i(Qt),R2=n(Qt,"LI",{});var _Ee=s(R2);Qse=n(_Ee,"STRONG",{});var LUr=s(Qse);jSo=r(LUr,"sew"),LUr.forEach(t),NSo=r(_Ee," \u2014 "),sN=n(_Ee,"A",{href:!0});var BUr=s(sN);DSo=r(BUr,"SEWForSequenceClassification"),BUr.forEach(t),qSo=r(_Ee," (SEW model)"),_Ee.forEach(t),GSo=i(Qt),S2=n(Qt,"LI",{});var uEe=s(S2);Hse=n(uEe,"STRONG",{});var xUr=s(Hse);OSo=r(xUr,"sew-d"),xUr.forEach(t),XSo=r(uEe," \u2014 "),lN=n(uEe,"A",{href:!0});var kUr=s(lN);zSo=r(kUr,"SEWDForSequenceClassification"),kUr.forEach(t),VSo=r(uEe," (SEW-D model)"),uEe.forEach(t),WSo=i(Qt),P2=n(Qt,"LI",{});var bEe=s(P2);Use=n(bEe,"STRONG",{});var RUr=s(Use);QSo=r(RUr,"unispeech"),RUr.forEach(t),HSo=r(bEe," \u2014 "),iN=n(bEe,"A",{href:!0});var SUr=s(iN);USo=r(SUr,"UniSpeechForSequenceClassification"),SUr.forEach(t),JSo=r(bEe," (UniSpeech model)"),bEe.forEach(t),YSo=i(Qt),$2=n(Qt,"LI",{});var vEe=s($2);Jse=n(vEe,"STRONG",{});var PUr=s(Jse);KSo=r(PUr,"unispeech-sat"),PUr.forEach(t),ZSo=r(vEe," \u2014 "),dN=n(vEe,"A",{href:!0});var $Ur=s(dN);ePo=r($Ur,"UniSpeechSatForSequenceClassification"),$Ur.forEach(t),oPo=r(vEe," (UniSpeechSat model)"),vEe.forEach(t),rPo=i(Qt),I2=n(Qt,"LI",{});var TEe=s(I2);Yse=n(TEe,"STRONG",{});var IUr=s(Yse);tPo=r(IUr,"wav2vec2"),IUr.forEach(t),aPo=r(TEe," \u2014 "),cN=n(TEe,"A",{href:!0});var jUr=s(cN);nPo=r(jUr,"Wav2Vec2ForSequenceClassification"),jUr.forEach(t),sPo=r(TEe," (Wav2Vec2 model)"),TEe.forEach(t),lPo=i(Qt),j2=n(Qt,"LI",{});var FEe=s(j2);Kse=n(FEe,"STRONG",{});var NUr=s(Kse);iPo=r(NUr,"wavlm"),NUr.forEach(t),dPo=r(FEe," \u2014 "),fN=n(FEe,"A",{href:!0});var DUr=s(fN);cPo=r(DUr,"WavLMForSequenceClassification"),DUr.forEach(t),fPo=r(FEe," (WavLM model)"),FEe.forEach(t),Qt.forEach(t),mPo=i(Wt),N2=n(Wt,"P",{});var CEe=s(N2);gPo=r(CEe,"The model is set in evaluation mode by default using "),Zse=n(CEe,"CODE",{});var qUr=s(Zse);hPo=r(qUr,"model.eval()"),qUr.forEach(t),pPo=r(CEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ele=n(CEe,"CODE",{});var GUr=s(ele);_Po=r(GUr,"model.train()"),GUr.forEach(t),CEe.forEach(t),uPo=i(Wt),ole=n(Wt,"P",{});var OUr=s(ole);bPo=r(OUr,"Examples:"),OUr.forEach(t),vPo=i(Wt),m(wE.$$.fragment,Wt),Wt.forEach(t),fl.forEach(t),KLe=i(d),Ld=n(d,"H2",{class:!0});var nxe=s(Ld);D2=n(nxe,"A",{id:!0,class:!0,href:!0});var XUr=s(D2);rle=n(XUr,"SPAN",{});var zUr=s(rle);m(AE.$$.fragment,zUr),zUr.forEach(t),XUr.forEach(t),TPo=i(nxe),tle=n(nxe,"SPAN",{});var VUr=s(tle);FPo=r(VUr,"AutoModelForAudioFrameClassification"),VUr.forEach(t),nxe.forEach(t),ZLe=i(d),nr=n(d,"DIV",{class:!0});var gl=s(nr);m(LE.$$.fragment,gl),CPo=i(gl),Bd=n(gl,"P",{});var yz=s(Bd);MPo=r(yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ale=n(yz,"CODE",{});var WUr=s(ale);EPo=r(WUr,"from_pretrained()"),WUr.forEach(t),yPo=r(yz,"class method or the "),nle=n(yz,"CODE",{});var QUr=s(nle);wPo=r(QUr,"from_config()"),QUr.forEach(t),APo=r(yz,`class
method.`),yz.forEach(t),LPo=i(gl),BE=n(gl,"P",{});var sxe=s(BE);BPo=r(sxe,"This class cannot be instantiated directly using "),sle=n(sxe,"CODE",{});var HUr=s(sle);xPo=r(HUr,"__init__()"),HUr.forEach(t),kPo=r(sxe," (throws an error)."),sxe.forEach(t),RPo=i(gl),Kr=n(gl,"DIV",{class:!0});var hl=s(Kr);m(xE.$$.fragment,hl),SPo=i(hl),lle=n(hl,"P",{});var UUr=s(lle);PPo=r(UUr,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),UUr.forEach(t),$Po=i(hl),xd=n(hl,"P",{});var wz=s(xd);IPo=r(wz,`Note:
Loading a model from its configuration file does `),ile=n(wz,"STRONG",{});var JUr=s(ile);jPo=r(JUr,"not"),JUr.forEach(t),NPo=r(wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),dle=n(wz,"CODE",{});var YUr=s(dle);DPo=r(YUr,"from_pretrained()"),YUr.forEach(t),qPo=r(wz,"to load the model weights."),wz.forEach(t),GPo=i(hl),cle=n(hl,"P",{});var KUr=s(cle);OPo=r(KUr,"Examples:"),KUr.forEach(t),XPo=i(hl),m(kE.$$.fragment,hl),hl.forEach(t),zPo=i(gl),ze=n(gl,"DIV",{class:!0});var Ht=s(ze);m(RE.$$.fragment,Ht),VPo=i(Ht),fle=n(Ht,"P",{});var ZUr=s(fle);WPo=r(ZUr,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),ZUr.forEach(t),QPo=i(Ht),Za=n(Ht,"P",{});var MC=s(Za);HPo=r(MC,"The model class to instantiate is selected based on the "),mle=n(MC,"CODE",{});var eJr=s(mle);UPo=r(eJr,"model_type"),eJr.forEach(t),JPo=r(MC,` property of the config object (either
passed as an argument or loaded from `),gle=n(MC,"CODE",{});var oJr=s(gle);YPo=r(oJr,"pretrained_model_name_or_path"),oJr.forEach(t),KPo=r(MC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hle=n(MC,"CODE",{});var rJr=s(hle);ZPo=r(rJr,"pretrained_model_name_or_path"),rJr.forEach(t),e$o=r(MC,":"),MC.forEach(t),o$o=i(Ht),kd=n(Ht,"UL",{});var Az=s(kd);q2=n(Az,"LI",{});var MEe=s(q2);ple=n(MEe,"STRONG",{});var tJr=s(ple);r$o=r(tJr,"unispeech-sat"),tJr.forEach(t),t$o=r(MEe," \u2014 "),mN=n(MEe,"A",{href:!0});var aJr=s(mN);a$o=r(aJr,"UniSpeechSatForAudioFrameClassification"),aJr.forEach(t),n$o=r(MEe," (UniSpeechSat model)"),MEe.forEach(t),s$o=i(Az),G2=n(Az,"LI",{});var EEe=s(G2);_le=n(EEe,"STRONG",{});var nJr=s(_le);l$o=r(nJr,"wav2vec2"),nJr.forEach(t),i$o=r(EEe," \u2014 "),gN=n(EEe,"A",{href:!0});var sJr=s(gN);d$o=r(sJr,"Wav2Vec2ForAudioFrameClassification"),sJr.forEach(t),c$o=r(EEe," (Wav2Vec2 model)"),EEe.forEach(t),f$o=i(Az),O2=n(Az,"LI",{});var yEe=s(O2);ule=n(yEe,"STRONG",{});var lJr=s(ule);m$o=r(lJr,"wavlm"),lJr.forEach(t),g$o=r(yEe," \u2014 "),hN=n(yEe,"A",{href:!0});var iJr=s(hN);h$o=r(iJr,"WavLMForAudioFrameClassification"),iJr.forEach(t),p$o=r(yEe," (WavLM model)"),yEe.forEach(t),Az.forEach(t),_$o=i(Ht),X2=n(Ht,"P",{});var wEe=s(X2);u$o=r(wEe,"The model is set in evaluation mode by default using "),ble=n(wEe,"CODE",{});var dJr=s(ble);b$o=r(dJr,"model.eval()"),dJr.forEach(t),v$o=r(wEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vle=n(wEe,"CODE",{});var cJr=s(vle);T$o=r(cJr,"model.train()"),cJr.forEach(t),wEe.forEach(t),F$o=i(Ht),Tle=n(Ht,"P",{});var fJr=s(Tle);C$o=r(fJr,"Examples:"),fJr.forEach(t),M$o=i(Ht),m(SE.$$.fragment,Ht),Ht.forEach(t),gl.forEach(t),e9e=i(d),Rd=n(d,"H2",{class:!0});var lxe=s(Rd);z2=n(lxe,"A",{id:!0,class:!0,href:!0});var mJr=s(z2);Fle=n(mJr,"SPAN",{});var gJr=s(Fle);m(PE.$$.fragment,gJr),gJr.forEach(t),mJr.forEach(t),E$o=i(lxe),Cle=n(lxe,"SPAN",{});var hJr=s(Cle);y$o=r(hJr,"AutoModelForCTC"),hJr.forEach(t),lxe.forEach(t),o9e=i(d),sr=n(d,"DIV",{class:!0});var pl=s(sr);m($E.$$.fragment,pl),w$o=i(pl),Sd=n(pl,"P",{});var Lz=s(Sd);A$o=r(Lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Mle=n(Lz,"CODE",{});var pJr=s(Mle);L$o=r(pJr,"from_pretrained()"),pJr.forEach(t),B$o=r(Lz,"class method or the "),Ele=n(Lz,"CODE",{});var _Jr=s(Ele);x$o=r(_Jr,"from_config()"),_Jr.forEach(t),k$o=r(Lz,`class
method.`),Lz.forEach(t),R$o=i(pl),IE=n(pl,"P",{});var ixe=s(IE);S$o=r(ixe,"This class cannot be instantiated directly using "),yle=n(ixe,"CODE",{});var uJr=s(yle);P$o=r(uJr,"__init__()"),uJr.forEach(t),$$o=r(ixe," (throws an error)."),ixe.forEach(t),I$o=i(pl),Zr=n(pl,"DIV",{class:!0});var _l=s(Zr);m(jE.$$.fragment,_l),j$o=i(_l),wle=n(_l,"P",{});var bJr=s(wle);N$o=r(bJr,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),bJr.forEach(t),D$o=i(_l),Pd=n(_l,"P",{});var Bz=s(Pd);q$o=r(Bz,`Note:
Loading a model from its configuration file does `),Ale=n(Bz,"STRONG",{});var vJr=s(Ale);G$o=r(vJr,"not"),vJr.forEach(t),O$o=r(Bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lle=n(Bz,"CODE",{});var TJr=s(Lle);X$o=r(TJr,"from_pretrained()"),TJr.forEach(t),z$o=r(Bz,"to load the model weights."),Bz.forEach(t),V$o=i(_l),Ble=n(_l,"P",{});var FJr=s(Ble);W$o=r(FJr,"Examples:"),FJr.forEach(t),Q$o=i(_l),m(NE.$$.fragment,_l),_l.forEach(t),H$o=i(pl),Ve=n(pl,"DIV",{class:!0});var Ut=s(Ve);m(DE.$$.fragment,Ut),U$o=i(Ut),xle=n(Ut,"P",{});var CJr=s(xle);J$o=r(CJr,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),CJr.forEach(t),Y$o=i(Ut),en=n(Ut,"P",{});var EC=s(en);K$o=r(EC,"The model class to instantiate is selected based on the "),kle=n(EC,"CODE",{});var MJr=s(kle);Z$o=r(MJr,"model_type"),MJr.forEach(t),eIo=r(EC,` property of the config object (either
passed as an argument or loaded from `),Rle=n(EC,"CODE",{});var EJr=s(Rle);oIo=r(EJr,"pretrained_model_name_or_path"),EJr.forEach(t),rIo=r(EC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sle=n(EC,"CODE",{});var yJr=s(Sle);tIo=r(yJr,"pretrained_model_name_or_path"),yJr.forEach(t),aIo=r(EC,":"),EC.forEach(t),nIo=i(Ut),no=n(Ut,"UL",{});var Jt=s(no);V2=n(Jt,"LI",{});var AEe=s(V2);Ple=n(AEe,"STRONG",{});var wJr=s(Ple);sIo=r(wJr,"hubert"),wJr.forEach(t),lIo=r(AEe," \u2014 "),pN=n(AEe,"A",{href:!0});var AJr=s(pN);iIo=r(AJr,"HubertForCTC"),AJr.forEach(t),dIo=r(AEe," (Hubert model)"),AEe.forEach(t),cIo=i(Jt),W2=n(Jt,"LI",{});var LEe=s(W2);$le=n(LEe,"STRONG",{});var LJr=s($le);fIo=r(LJr,"sew"),LJr.forEach(t),mIo=r(LEe," \u2014 "),_N=n(LEe,"A",{href:!0});var BJr=s(_N);gIo=r(BJr,"SEWForCTC"),BJr.forEach(t),hIo=r(LEe," (SEW model)"),LEe.forEach(t),pIo=i(Jt),Q2=n(Jt,"LI",{});var BEe=s(Q2);Ile=n(BEe,"STRONG",{});var xJr=s(Ile);_Io=r(xJr,"sew-d"),xJr.forEach(t),uIo=r(BEe," \u2014 "),uN=n(BEe,"A",{href:!0});var kJr=s(uN);bIo=r(kJr,"SEWDForCTC"),kJr.forEach(t),vIo=r(BEe," (SEW-D model)"),BEe.forEach(t),TIo=i(Jt),H2=n(Jt,"LI",{});var xEe=s(H2);jle=n(xEe,"STRONG",{});var RJr=s(jle);FIo=r(RJr,"unispeech"),RJr.forEach(t),CIo=r(xEe," \u2014 "),bN=n(xEe,"A",{href:!0});var SJr=s(bN);MIo=r(SJr,"UniSpeechForCTC"),SJr.forEach(t),EIo=r(xEe," (UniSpeech model)"),xEe.forEach(t),yIo=i(Jt),U2=n(Jt,"LI",{});var kEe=s(U2);Nle=n(kEe,"STRONG",{});var PJr=s(Nle);wIo=r(PJr,"unispeech-sat"),PJr.forEach(t),AIo=r(kEe," \u2014 "),vN=n(kEe,"A",{href:!0});var $Jr=s(vN);LIo=r($Jr,"UniSpeechSatForCTC"),$Jr.forEach(t),BIo=r(kEe," (UniSpeechSat model)"),kEe.forEach(t),xIo=i(Jt),J2=n(Jt,"LI",{});var REe=s(J2);Dle=n(REe,"STRONG",{});var IJr=s(Dle);kIo=r(IJr,"wav2vec2"),IJr.forEach(t),RIo=r(REe," \u2014 "),TN=n(REe,"A",{href:!0});var jJr=s(TN);SIo=r(jJr,"Wav2Vec2ForCTC"),jJr.forEach(t),PIo=r(REe," (Wav2Vec2 model)"),REe.forEach(t),$Io=i(Jt),Y2=n(Jt,"LI",{});var SEe=s(Y2);qle=n(SEe,"STRONG",{});var NJr=s(qle);IIo=r(NJr,"wavlm"),NJr.forEach(t),jIo=r(SEe," \u2014 "),FN=n(SEe,"A",{href:!0});var DJr=s(FN);NIo=r(DJr,"WavLMForCTC"),DJr.forEach(t),DIo=r(SEe," (WavLM model)"),SEe.forEach(t),Jt.forEach(t),qIo=i(Ut),K2=n(Ut,"P",{});var PEe=s(K2);GIo=r(PEe,"The model is set in evaluation mode by default using "),Gle=n(PEe,"CODE",{});var qJr=s(Gle);OIo=r(qJr,"model.eval()"),qJr.forEach(t),XIo=r(PEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ole=n(PEe,"CODE",{});var GJr=s(Ole);zIo=r(GJr,"model.train()"),GJr.forEach(t),PEe.forEach(t),VIo=i(Ut),Xle=n(Ut,"P",{});var OJr=s(Xle);WIo=r(OJr,"Examples:"),OJr.forEach(t),QIo=i(Ut),m(qE.$$.fragment,Ut),Ut.forEach(t),pl.forEach(t),r9e=i(d),$d=n(d,"H2",{class:!0});var dxe=s($d);Z2=n(dxe,"A",{id:!0,class:!0,href:!0});var XJr=s(Z2);zle=n(XJr,"SPAN",{});var zJr=s(zle);m(GE.$$.fragment,zJr),zJr.forEach(t),XJr.forEach(t),HIo=i(dxe),Vle=n(dxe,"SPAN",{});var VJr=s(Vle);UIo=r(VJr,"AutoModelForSpeechSeq2Seq"),VJr.forEach(t),dxe.forEach(t),t9e=i(d),lr=n(d,"DIV",{class:!0});var ul=s(lr);m(OE.$$.fragment,ul),JIo=i(ul),Id=n(ul,"P",{});var xz=s(Id);YIo=r(xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Wle=n(xz,"CODE",{});var WJr=s(Wle);KIo=r(WJr,"from_pretrained()"),WJr.forEach(t),ZIo=r(xz,"class method or the "),Qle=n(xz,"CODE",{});var QJr=s(Qle);ejo=r(QJr,"from_config()"),QJr.forEach(t),ojo=r(xz,`class
method.`),xz.forEach(t),rjo=i(ul),XE=n(ul,"P",{});var cxe=s(XE);tjo=r(cxe,"This class cannot be instantiated directly using "),Hle=n(cxe,"CODE",{});var HJr=s(Hle);ajo=r(HJr,"__init__()"),HJr.forEach(t),njo=r(cxe," (throws an error)."),cxe.forEach(t),sjo=i(ul),et=n(ul,"DIV",{class:!0});var bl=s(et);m(zE.$$.fragment,bl),ljo=i(bl),Ule=n(bl,"P",{});var UJr=s(Ule);ijo=r(UJr,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),UJr.forEach(t),djo=i(bl),jd=n(bl,"P",{});var kz=s(jd);cjo=r(kz,`Note:
Loading a model from its configuration file does `),Jle=n(kz,"STRONG",{});var JJr=s(Jle);fjo=r(JJr,"not"),JJr.forEach(t),mjo=r(kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yle=n(kz,"CODE",{});var YJr=s(Yle);gjo=r(YJr,"from_pretrained()"),YJr.forEach(t),hjo=r(kz,"to load the model weights."),kz.forEach(t),pjo=i(bl),Kle=n(bl,"P",{});var KJr=s(Kle);_jo=r(KJr,"Examples:"),KJr.forEach(t),ujo=i(bl),m(VE.$$.fragment,bl),bl.forEach(t),bjo=i(ul),We=n(ul,"DIV",{class:!0});var Yt=s(We);m(WE.$$.fragment,Yt),vjo=i(Yt),Zle=n(Yt,"P",{});var ZJr=s(Zle);Tjo=r(ZJr,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ZJr.forEach(t),Fjo=i(Yt),on=n(Yt,"P",{});var yC=s(on);Cjo=r(yC,"The model class to instantiate is selected based on the "),eie=n(yC,"CODE",{});var eYr=s(eie);Mjo=r(eYr,"model_type"),eYr.forEach(t),Ejo=r(yC,` property of the config object (either
passed as an argument or loaded from `),oie=n(yC,"CODE",{});var oYr=s(oie);yjo=r(oYr,"pretrained_model_name_or_path"),oYr.forEach(t),wjo=r(yC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rie=n(yC,"CODE",{});var rYr=s(rie);Ajo=r(rYr,"pretrained_model_name_or_path"),rYr.forEach(t),Ljo=r(yC,":"),yC.forEach(t),Bjo=i(Yt),QE=n(Yt,"UL",{});var fxe=s(QE);ev=n(fxe,"LI",{});var $Ee=s(ev);tie=n($Ee,"STRONG",{});var tYr=s(tie);xjo=r(tYr,"speech-encoder-decoder"),tYr.forEach(t),kjo=r($Ee," \u2014 "),CN=n($Ee,"A",{href:!0});var aYr=s(CN);Rjo=r(aYr,"SpeechEncoderDecoderModel"),aYr.forEach(t),Sjo=r($Ee," (Speech Encoder decoder model)"),$Ee.forEach(t),Pjo=i(fxe),ov=n(fxe,"LI",{});var IEe=s(ov);aie=n(IEe,"STRONG",{});var nYr=s(aie);$jo=r(nYr,"speech_to_text"),nYr.forEach(t),Ijo=r(IEe," \u2014 "),MN=n(IEe,"A",{href:!0});var sYr=s(MN);jjo=r(sYr,"Speech2TextForConditionalGeneration"),sYr.forEach(t),Njo=r(IEe," (Speech2Text model)"),IEe.forEach(t),fxe.forEach(t),Djo=i(Yt),rv=n(Yt,"P",{});var jEe=s(rv);qjo=r(jEe,"The model is set in evaluation mode by default using "),nie=n(jEe,"CODE",{});var lYr=s(nie);Gjo=r(lYr,"model.eval()"),lYr.forEach(t),Ojo=r(jEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sie=n(jEe,"CODE",{});var iYr=s(sie);Xjo=r(iYr,"model.train()"),iYr.forEach(t),jEe.forEach(t),zjo=i(Yt),lie=n(Yt,"P",{});var dYr=s(lie);Vjo=r(dYr,"Examples:"),dYr.forEach(t),Wjo=i(Yt),m(HE.$$.fragment,Yt),Yt.forEach(t),ul.forEach(t),a9e=i(d),Nd=n(d,"H2",{class:!0});var mxe=s(Nd);tv=n(mxe,"A",{id:!0,class:!0,href:!0});var cYr=s(tv);iie=n(cYr,"SPAN",{});var fYr=s(iie);m(UE.$$.fragment,fYr),fYr.forEach(t),cYr.forEach(t),Qjo=i(mxe),die=n(mxe,"SPAN",{});var mYr=s(die);Hjo=r(mYr,"AutoModelForAudioXVector"),mYr.forEach(t),mxe.forEach(t),n9e=i(d),ir=n(d,"DIV",{class:!0});var vl=s(ir);m(JE.$$.fragment,vl),Ujo=i(vl),Dd=n(vl,"P",{});var Rz=s(Dd);Jjo=r(Rz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),cie=n(Rz,"CODE",{});var gYr=s(cie);Yjo=r(gYr,"from_pretrained()"),gYr.forEach(t),Kjo=r(Rz,"class method or the "),fie=n(Rz,"CODE",{});var hYr=s(fie);Zjo=r(hYr,"from_config()"),hYr.forEach(t),eNo=r(Rz,`class
method.`),Rz.forEach(t),oNo=i(vl),YE=n(vl,"P",{});var gxe=s(YE);rNo=r(gxe,"This class cannot be instantiated directly using "),mie=n(gxe,"CODE",{});var pYr=s(mie);tNo=r(pYr,"__init__()"),pYr.forEach(t),aNo=r(gxe," (throws an error)."),gxe.forEach(t),nNo=i(vl),ot=n(vl,"DIV",{class:!0});var Tl=s(ot);m(KE.$$.fragment,Tl),sNo=i(Tl),gie=n(Tl,"P",{});var _Yr=s(gie);lNo=r(_Yr,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),_Yr.forEach(t),iNo=i(Tl),qd=n(Tl,"P",{});var Sz=s(qd);dNo=r(Sz,`Note:
Loading a model from its configuration file does `),hie=n(Sz,"STRONG",{});var uYr=s(hie);cNo=r(uYr,"not"),uYr.forEach(t),fNo=r(Sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),pie=n(Sz,"CODE",{});var bYr=s(pie);mNo=r(bYr,"from_pretrained()"),bYr.forEach(t),gNo=r(Sz,"to load the model weights."),Sz.forEach(t),hNo=i(Tl),_ie=n(Tl,"P",{});var vYr=s(_ie);pNo=r(vYr,"Examples:"),vYr.forEach(t),_No=i(Tl),m(ZE.$$.fragment,Tl),Tl.forEach(t),uNo=i(vl),Qe=n(vl,"DIV",{class:!0});var Kt=s(Qe);m(e3.$$.fragment,Kt),bNo=i(Kt),uie=n(Kt,"P",{});var TYr=s(uie);vNo=r(TYr,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),TYr.forEach(t),TNo=i(Kt),rn=n(Kt,"P",{});var wC=s(rn);FNo=r(wC,"The model class to instantiate is selected based on the "),bie=n(wC,"CODE",{});var FYr=s(bie);CNo=r(FYr,"model_type"),FYr.forEach(t),MNo=r(wC,` property of the config object (either
passed as an argument or loaded from `),vie=n(wC,"CODE",{});var CYr=s(vie);ENo=r(CYr,"pretrained_model_name_or_path"),CYr.forEach(t),yNo=r(wC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tie=n(wC,"CODE",{});var MYr=s(Tie);wNo=r(MYr,"pretrained_model_name_or_path"),MYr.forEach(t),ANo=r(wC,":"),wC.forEach(t),LNo=i(Kt),Gd=n(Kt,"UL",{});var Pz=s(Gd);av=n(Pz,"LI",{});var NEe=s(av);Fie=n(NEe,"STRONG",{});var EYr=s(Fie);BNo=r(EYr,"unispeech-sat"),EYr.forEach(t),xNo=r(NEe," \u2014 "),EN=n(NEe,"A",{href:!0});var yYr=s(EN);kNo=r(yYr,"UniSpeechSatForXVector"),yYr.forEach(t),RNo=r(NEe," (UniSpeechSat model)"),NEe.forEach(t),SNo=i(Pz),nv=n(Pz,"LI",{});var DEe=s(nv);Cie=n(DEe,"STRONG",{});var wYr=s(Cie);PNo=r(wYr,"wav2vec2"),wYr.forEach(t),$No=r(DEe," \u2014 "),yN=n(DEe,"A",{href:!0});var AYr=s(yN);INo=r(AYr,"Wav2Vec2ForXVector"),AYr.forEach(t),jNo=r(DEe," (Wav2Vec2 model)"),DEe.forEach(t),NNo=i(Pz),sv=n(Pz,"LI",{});var qEe=s(sv);Mie=n(qEe,"STRONG",{});var LYr=s(Mie);DNo=r(LYr,"wavlm"),LYr.forEach(t),qNo=r(qEe," \u2014 "),wN=n(qEe,"A",{href:!0});var BYr=s(wN);GNo=r(BYr,"WavLMForXVector"),BYr.forEach(t),ONo=r(qEe," (WavLM model)"),qEe.forEach(t),Pz.forEach(t),XNo=i(Kt),lv=n(Kt,"P",{});var GEe=s(lv);zNo=r(GEe,"The model is set in evaluation mode by default using "),Eie=n(GEe,"CODE",{});var xYr=s(Eie);VNo=r(xYr,"model.eval()"),xYr.forEach(t),WNo=r(GEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yie=n(GEe,"CODE",{});var kYr=s(yie);QNo=r(kYr,"model.train()"),kYr.forEach(t),GEe.forEach(t),HNo=i(Kt),wie=n(Kt,"P",{});var RYr=s(wie);UNo=r(RYr,"Examples:"),RYr.forEach(t),JNo=i(Kt),m(o3.$$.fragment,Kt),Kt.forEach(t),vl.forEach(t),s9e=i(d),Od=n(d,"H2",{class:!0});var hxe=s(Od);iv=n(hxe,"A",{id:!0,class:!0,href:!0});var SYr=s(iv);Aie=n(SYr,"SPAN",{});var PYr=s(Aie);m(r3.$$.fragment,PYr),PYr.forEach(t),SYr.forEach(t),YNo=i(hxe),Lie=n(hxe,"SPAN",{});var $Yr=s(Lie);KNo=r($Yr,"AutoModelForMaskedImageModeling"),$Yr.forEach(t),hxe.forEach(t),l9e=i(d),dr=n(d,"DIV",{class:!0});var Fl=s(dr);m(t3.$$.fragment,Fl),ZNo=i(Fl),Xd=n(Fl,"P",{});var $z=s(Xd);eDo=r($z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Bie=n($z,"CODE",{});var IYr=s(Bie);oDo=r(IYr,"from_pretrained()"),IYr.forEach(t),rDo=r($z,"class method or the "),xie=n($z,"CODE",{});var jYr=s(xie);tDo=r(jYr,"from_config()"),jYr.forEach(t),aDo=r($z,`class
method.`),$z.forEach(t),nDo=i(Fl),a3=n(Fl,"P",{});var pxe=s(a3);sDo=r(pxe,"This class cannot be instantiated directly using "),kie=n(pxe,"CODE",{});var NYr=s(kie);lDo=r(NYr,"__init__()"),NYr.forEach(t),iDo=r(pxe," (throws an error)."),pxe.forEach(t),dDo=i(Fl),rt=n(Fl,"DIV",{class:!0});var Cl=s(rt);m(n3.$$.fragment,Cl),cDo=i(Cl),Rie=n(Cl,"P",{});var DYr=s(Rie);fDo=r(DYr,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),DYr.forEach(t),mDo=i(Cl),zd=n(Cl,"P",{});var Iz=s(zd);gDo=r(Iz,`Note:
Loading a model from its configuration file does `),Sie=n(Iz,"STRONG",{});var qYr=s(Sie);hDo=r(qYr,"not"),qYr.forEach(t),pDo=r(Iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pie=n(Iz,"CODE",{});var GYr=s(Pie);_Do=r(GYr,"from_pretrained()"),GYr.forEach(t),uDo=r(Iz,"to load the model weights."),Iz.forEach(t),bDo=i(Cl),$ie=n(Cl,"P",{});var OYr=s($ie);vDo=r(OYr,"Examples:"),OYr.forEach(t),TDo=i(Cl),m(s3.$$.fragment,Cl),Cl.forEach(t),FDo=i(Fl),He=n(Fl,"DIV",{class:!0});var Zt=s(He);m(l3.$$.fragment,Zt),CDo=i(Zt),Iie=n(Zt,"P",{});var XYr=s(Iie);MDo=r(XYr,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),XYr.forEach(t),EDo=i(Zt),tn=n(Zt,"P",{});var AC=s(tn);yDo=r(AC,"The model class to instantiate is selected based on the "),jie=n(AC,"CODE",{});var zYr=s(jie);wDo=r(zYr,"model_type"),zYr.forEach(t),ADo=r(AC,` property of the config object (either
passed as an argument or loaded from `),Nie=n(AC,"CODE",{});var VYr=s(Nie);LDo=r(VYr,"pretrained_model_name_or_path"),VYr.forEach(t),BDo=r(AC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=n(AC,"CODE",{});var WYr=s(Die);xDo=r(WYr,"pretrained_model_name_or_path"),WYr.forEach(t),kDo=r(AC,":"),AC.forEach(t),RDo=i(Zt),Vd=n(Zt,"UL",{});var jz=s(Vd);dv=n(jz,"LI",{});var OEe=s(dv);qie=n(OEe,"STRONG",{});var QYr=s(qie);SDo=r(QYr,"deit"),QYr.forEach(t),PDo=r(OEe," \u2014 "),AN=n(OEe,"A",{href:!0});var HYr=s(AN);$Do=r(HYr,"DeiTForMaskedImageModeling"),HYr.forEach(t),IDo=r(OEe," (DeiT model)"),OEe.forEach(t),jDo=i(jz),cv=n(jz,"LI",{});var XEe=s(cv);Gie=n(XEe,"STRONG",{});var UYr=s(Gie);NDo=r(UYr,"swin"),UYr.forEach(t),DDo=r(XEe," \u2014 "),LN=n(XEe,"A",{href:!0});var JYr=s(LN);qDo=r(JYr,"SwinForMaskedImageModeling"),JYr.forEach(t),GDo=r(XEe," (Swin model)"),XEe.forEach(t),ODo=i(jz),fv=n(jz,"LI",{});var zEe=s(fv);Oie=n(zEe,"STRONG",{});var YYr=s(Oie);XDo=r(YYr,"vit"),YYr.forEach(t),zDo=r(zEe," \u2014 "),BN=n(zEe,"A",{href:!0});var KYr=s(BN);VDo=r(KYr,"ViTForMaskedImageModeling"),KYr.forEach(t),WDo=r(zEe," (ViT model)"),zEe.forEach(t),jz.forEach(t),QDo=i(Zt),mv=n(Zt,"P",{});var VEe=s(mv);HDo=r(VEe,"The model is set in evaluation mode by default using "),Xie=n(VEe,"CODE",{});var ZYr=s(Xie);UDo=r(ZYr,"model.eval()"),ZYr.forEach(t),JDo=r(VEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zie=n(VEe,"CODE",{});var eKr=s(zie);YDo=r(eKr,"model.train()"),eKr.forEach(t),VEe.forEach(t),KDo=i(Zt),Vie=n(Zt,"P",{});var oKr=s(Vie);ZDo=r(oKr,"Examples:"),oKr.forEach(t),eqo=i(Zt),m(i3.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),i9e=i(d),Wd=n(d,"H2",{class:!0});var _xe=s(Wd);gv=n(_xe,"A",{id:!0,class:!0,href:!0});var rKr=s(gv);Wie=n(rKr,"SPAN",{});var tKr=s(Wie);m(d3.$$.fragment,tKr),tKr.forEach(t),rKr.forEach(t),oqo=i(_xe),Qie=n(_xe,"SPAN",{});var aKr=s(Qie);rqo=r(aKr,"AutoModelForObjectDetection"),aKr.forEach(t),_xe.forEach(t),d9e=i(d),cr=n(d,"DIV",{class:!0});var Ml=s(cr);m(c3.$$.fragment,Ml),tqo=i(Ml),Qd=n(Ml,"P",{});var Nz=s(Qd);aqo=r(Nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Hie=n(Nz,"CODE",{});var nKr=s(Hie);nqo=r(nKr,"from_pretrained()"),nKr.forEach(t),sqo=r(Nz,"class method or the "),Uie=n(Nz,"CODE",{});var sKr=s(Uie);lqo=r(sKr,"from_config()"),sKr.forEach(t),iqo=r(Nz,`class
method.`),Nz.forEach(t),dqo=i(Ml),f3=n(Ml,"P",{});var uxe=s(f3);cqo=r(uxe,"This class cannot be instantiated directly using "),Jie=n(uxe,"CODE",{});var lKr=s(Jie);fqo=r(lKr,"__init__()"),lKr.forEach(t),mqo=r(uxe," (throws an error)."),uxe.forEach(t),gqo=i(Ml),tt=n(Ml,"DIV",{class:!0});var El=s(tt);m(m3.$$.fragment,El),hqo=i(El),Yie=n(El,"P",{});var iKr=s(Yie);pqo=r(iKr,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),iKr.forEach(t),_qo=i(El),Hd=n(El,"P",{});var Dz=s(Hd);uqo=r(Dz,`Note:
Loading a model from its configuration file does `),Kie=n(Dz,"STRONG",{});var dKr=s(Kie);bqo=r(dKr,"not"),dKr.forEach(t),vqo=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zie=n(Dz,"CODE",{});var cKr=s(Zie);Tqo=r(cKr,"from_pretrained()"),cKr.forEach(t),Fqo=r(Dz,"to load the model weights."),Dz.forEach(t),Cqo=i(El),ede=n(El,"P",{});var fKr=s(ede);Mqo=r(fKr,"Examples:"),fKr.forEach(t),Eqo=i(El),m(g3.$$.fragment,El),El.forEach(t),yqo=i(Ml),Ue=n(Ml,"DIV",{class:!0});var ea=s(Ue);m(h3.$$.fragment,ea),wqo=i(ea),ode=n(ea,"P",{});var mKr=s(ode);Aqo=r(mKr,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),mKr.forEach(t),Lqo=i(ea),an=n(ea,"P",{});var LC=s(an);Bqo=r(LC,"The model class to instantiate is selected based on the "),rde=n(LC,"CODE",{});var gKr=s(rde);xqo=r(gKr,"model_type"),gKr.forEach(t),kqo=r(LC,` property of the config object (either
passed as an argument or loaded from `),tde=n(LC,"CODE",{});var hKr=s(tde);Rqo=r(hKr,"pretrained_model_name_or_path"),hKr.forEach(t),Sqo=r(LC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=n(LC,"CODE",{});var pKr=s(ade);Pqo=r(pKr,"pretrained_model_name_or_path"),pKr.forEach(t),$qo=r(LC,":"),LC.forEach(t),Iqo=i(ea),nde=n(ea,"UL",{});var _Kr=s(nde);hv=n(_Kr,"LI",{});var WEe=s(hv);sde=n(WEe,"STRONG",{});var uKr=s(sde);jqo=r(uKr,"detr"),uKr.forEach(t),Nqo=r(WEe," \u2014 "),xN=n(WEe,"A",{href:!0});var bKr=s(xN);Dqo=r(bKr,"DetrForObjectDetection"),bKr.forEach(t),qqo=r(WEe," (DETR model)"),WEe.forEach(t),_Kr.forEach(t),Gqo=i(ea),pv=n(ea,"P",{});var QEe=s(pv);Oqo=r(QEe,"The model is set in evaluation mode by default using "),lde=n(QEe,"CODE",{});var vKr=s(lde);Xqo=r(vKr,"model.eval()"),vKr.forEach(t),zqo=r(QEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ide=n(QEe,"CODE",{});var TKr=s(ide);Vqo=r(TKr,"model.train()"),TKr.forEach(t),QEe.forEach(t),Wqo=i(ea),dde=n(ea,"P",{});var FKr=s(dde);Qqo=r(FKr,"Examples:"),FKr.forEach(t),Hqo=i(ea),m(p3.$$.fragment,ea),ea.forEach(t),Ml.forEach(t),c9e=i(d),Ud=n(d,"H2",{class:!0});var bxe=s(Ud);_v=n(bxe,"A",{id:!0,class:!0,href:!0});var CKr=s(_v);cde=n(CKr,"SPAN",{});var MKr=s(cde);m(_3.$$.fragment,MKr),MKr.forEach(t),CKr.forEach(t),Uqo=i(bxe),fde=n(bxe,"SPAN",{});var EKr=s(fde);Jqo=r(EKr,"AutoModelForImageSegmentation"),EKr.forEach(t),bxe.forEach(t),f9e=i(d),fr=n(d,"DIV",{class:!0});var yl=s(fr);m(u3.$$.fragment,yl),Yqo=i(yl),Jd=n(yl,"P",{});var qz=s(Jd);Kqo=r(qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),mde=n(qz,"CODE",{});var yKr=s(mde);Zqo=r(yKr,"from_pretrained()"),yKr.forEach(t),eGo=r(qz,"class method or the "),gde=n(qz,"CODE",{});var wKr=s(gde);oGo=r(wKr,"from_config()"),wKr.forEach(t),rGo=r(qz,`class
method.`),qz.forEach(t),tGo=i(yl),b3=n(yl,"P",{});var vxe=s(b3);aGo=r(vxe,"This class cannot be instantiated directly using "),hde=n(vxe,"CODE",{});var AKr=s(hde);nGo=r(AKr,"__init__()"),AKr.forEach(t),sGo=r(vxe," (throws an error)."),vxe.forEach(t),lGo=i(yl),at=n(yl,"DIV",{class:!0});var wl=s(at);m(v3.$$.fragment,wl),iGo=i(wl),pde=n(wl,"P",{});var LKr=s(pde);dGo=r(LKr,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),LKr.forEach(t),cGo=i(wl),Yd=n(wl,"P",{});var Gz=s(Yd);fGo=r(Gz,`Note:
Loading a model from its configuration file does `),_de=n(Gz,"STRONG",{});var BKr=s(_de);mGo=r(BKr,"not"),BKr.forEach(t),gGo=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ude=n(Gz,"CODE",{});var xKr=s(ude);hGo=r(xKr,"from_pretrained()"),xKr.forEach(t),pGo=r(Gz,"to load the model weights."),Gz.forEach(t),_Go=i(wl),bde=n(wl,"P",{});var kKr=s(bde);uGo=r(kKr,"Examples:"),kKr.forEach(t),bGo=i(wl),m(T3.$$.fragment,wl),wl.forEach(t),vGo=i(yl),Je=n(yl,"DIV",{class:!0});var oa=s(Je);m(F3.$$.fragment,oa),TGo=i(oa),vde=n(oa,"P",{});var RKr=s(vde);FGo=r(RKr,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),RKr.forEach(t),CGo=i(oa),nn=n(oa,"P",{});var BC=s(nn);MGo=r(BC,"The model class to instantiate is selected based on the "),Tde=n(BC,"CODE",{});var SKr=s(Tde);EGo=r(SKr,"model_type"),SKr.forEach(t),yGo=r(BC,` property of the config object (either
passed as an argument or loaded from `),Fde=n(BC,"CODE",{});var PKr=s(Fde);wGo=r(PKr,"pretrained_model_name_or_path"),PKr.forEach(t),AGo=r(BC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cde=n(BC,"CODE",{});var $Kr=s(Cde);LGo=r($Kr,"pretrained_model_name_or_path"),$Kr.forEach(t),BGo=r(BC,":"),BC.forEach(t),xGo=i(oa),Mde=n(oa,"UL",{});var IKr=s(Mde);uv=n(IKr,"LI",{});var HEe=s(uv);Ede=n(HEe,"STRONG",{});var jKr=s(Ede);kGo=r(jKr,"detr"),jKr.forEach(t),RGo=r(HEe," \u2014 "),kN=n(HEe,"A",{href:!0});var NKr=s(kN);SGo=r(NKr,"DetrForSegmentation"),NKr.forEach(t),PGo=r(HEe," (DETR model)"),HEe.forEach(t),IKr.forEach(t),$Go=i(oa),bv=n(oa,"P",{});var UEe=s(bv);IGo=r(UEe,"The model is set in evaluation mode by default using "),yde=n(UEe,"CODE",{});var DKr=s(yde);jGo=r(DKr,"model.eval()"),DKr.forEach(t),NGo=r(UEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wde=n(UEe,"CODE",{});var qKr=s(wde);DGo=r(qKr,"model.train()"),qKr.forEach(t),UEe.forEach(t),qGo=i(oa),Ade=n(oa,"P",{});var GKr=s(Ade);GGo=r(GKr,"Examples:"),GKr.forEach(t),OGo=i(oa),m(C3.$$.fragment,oa),oa.forEach(t),yl.forEach(t),m9e=i(d),Kd=n(d,"H2",{class:!0});var Txe=s(Kd);vv=n(Txe,"A",{id:!0,class:!0,href:!0});var OKr=s(vv);Lde=n(OKr,"SPAN",{});var XKr=s(Lde);m(M3.$$.fragment,XKr),XKr.forEach(t),OKr.forEach(t),XGo=i(Txe),Bde=n(Txe,"SPAN",{});var zKr=s(Bde);zGo=r(zKr,"AutoModelForSemanticSegmentation"),zKr.forEach(t),Txe.forEach(t),g9e=i(d),mr=n(d,"DIV",{class:!0});var Al=s(mr);m(E3.$$.fragment,Al),VGo=i(Al),Zd=n(Al,"P",{});var Oz=s(Zd);WGo=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),xde=n(Oz,"CODE",{});var VKr=s(xde);QGo=r(VKr,"from_pretrained()"),VKr.forEach(t),HGo=r(Oz,"class method or the "),kde=n(Oz,"CODE",{});var WKr=s(kde);UGo=r(WKr,"from_config()"),WKr.forEach(t),JGo=r(Oz,`class
method.`),Oz.forEach(t),YGo=i(Al),y3=n(Al,"P",{});var Fxe=s(y3);KGo=r(Fxe,"This class cannot be instantiated directly using "),Rde=n(Fxe,"CODE",{});var QKr=s(Rde);ZGo=r(QKr,"__init__()"),QKr.forEach(t),eOo=r(Fxe," (throws an error)."),Fxe.forEach(t),oOo=i(Al),nt=n(Al,"DIV",{class:!0});var Ll=s(nt);m(w3.$$.fragment,Ll),rOo=i(Ll),Sde=n(Ll,"P",{});var HKr=s(Sde);tOo=r(HKr,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),HKr.forEach(t),aOo=i(Ll),ec=n(Ll,"P",{});var Xz=s(ec);nOo=r(Xz,`Note:
Loading a model from its configuration file does `),Pde=n(Xz,"STRONG",{});var UKr=s(Pde);sOo=r(UKr,"not"),UKr.forEach(t),lOo=r(Xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),$de=n(Xz,"CODE",{});var JKr=s($de);iOo=r(JKr,"from_pretrained()"),JKr.forEach(t),dOo=r(Xz,"to load the model weights."),Xz.forEach(t),cOo=i(Ll),Ide=n(Ll,"P",{});var YKr=s(Ide);fOo=r(YKr,"Examples:"),YKr.forEach(t),mOo=i(Ll),m(A3.$$.fragment,Ll),Ll.forEach(t),gOo=i(Al),Ye=n(Al,"DIV",{class:!0});var ra=s(Ye);m(L3.$$.fragment,ra),hOo=i(ra),jde=n(ra,"P",{});var KKr=s(jde);pOo=r(KKr,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),KKr.forEach(t),_Oo=i(ra),sn=n(ra,"P",{});var xC=s(sn);uOo=r(xC,"The model class to instantiate is selected based on the "),Nde=n(xC,"CODE",{});var ZKr=s(Nde);bOo=r(ZKr,"model_type"),ZKr.forEach(t),vOo=r(xC,` property of the config object (either
passed as an argument or loaded from `),Dde=n(xC,"CODE",{});var eZr=s(Dde);TOo=r(eZr,"pretrained_model_name_or_path"),eZr.forEach(t),FOo=r(xC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qde=n(xC,"CODE",{});var oZr=s(qde);COo=r(oZr,"pretrained_model_name_or_path"),oZr.forEach(t),MOo=r(xC,":"),xC.forEach(t),EOo=i(ra),B3=n(ra,"UL",{});var Cxe=s(B3);Tv=n(Cxe,"LI",{});var JEe=s(Tv);Gde=n(JEe,"STRONG",{});var rZr=s(Gde);yOo=r(rZr,"beit"),rZr.forEach(t),wOo=r(JEe," \u2014 "),RN=n(JEe,"A",{href:!0});var tZr=s(RN);AOo=r(tZr,"BeitForSemanticSegmentation"),tZr.forEach(t),LOo=r(JEe," (BEiT model)"),JEe.forEach(t),BOo=i(Cxe),Fv=n(Cxe,"LI",{});var YEe=s(Fv);Ode=n(YEe,"STRONG",{});var aZr=s(Ode);xOo=r(aZr,"segformer"),aZr.forEach(t),kOo=r(YEe," \u2014 "),SN=n(YEe,"A",{href:!0});var nZr=s(SN);ROo=r(nZr,"SegformerForSemanticSegmentation"),nZr.forEach(t),SOo=r(YEe," (SegFormer model)"),YEe.forEach(t),Cxe.forEach(t),POo=i(ra),Cv=n(ra,"P",{});var KEe=s(Cv);$Oo=r(KEe,"The model is set in evaluation mode by default using "),Xde=n(KEe,"CODE",{});var sZr=s(Xde);IOo=r(sZr,"model.eval()"),sZr.forEach(t),jOo=r(KEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zde=n(KEe,"CODE",{});var lZr=s(zde);NOo=r(lZr,"model.train()"),lZr.forEach(t),KEe.forEach(t),DOo=i(ra),Vde=n(ra,"P",{});var iZr=s(Vde);qOo=r(iZr,"Examples:"),iZr.forEach(t),GOo=i(ra),m(x3.$$.fragment,ra),ra.forEach(t),Al.forEach(t),h9e=i(d),oc=n(d,"H2",{class:!0});var Mxe=s(oc);Mv=n(Mxe,"A",{id:!0,class:!0,href:!0});var dZr=s(Mv);Wde=n(dZr,"SPAN",{});var cZr=s(Wde);m(k3.$$.fragment,cZr),cZr.forEach(t),dZr.forEach(t),OOo=i(Mxe),Qde=n(Mxe,"SPAN",{});var fZr=s(Qde);XOo=r(fZr,"TFAutoModel"),fZr.forEach(t),Mxe.forEach(t),p9e=i(d),gr=n(d,"DIV",{class:!0});var Bl=s(gr);m(R3.$$.fragment,Bl),zOo=i(Bl),rc=n(Bl,"P",{});var zz=s(rc);VOo=r(zz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Hde=n(zz,"CODE",{});var mZr=s(Hde);WOo=r(mZr,"from_pretrained()"),mZr.forEach(t),QOo=r(zz,"class method or the "),Ude=n(zz,"CODE",{});var gZr=s(Ude);HOo=r(gZr,"from_config()"),gZr.forEach(t),UOo=r(zz,`class
method.`),zz.forEach(t),JOo=i(Bl),S3=n(Bl,"P",{});var Exe=s(S3);YOo=r(Exe,"This class cannot be instantiated directly using "),Jde=n(Exe,"CODE",{});var hZr=s(Jde);KOo=r(hZr,"__init__()"),hZr.forEach(t),ZOo=r(Exe," (throws an error)."),Exe.forEach(t),eXo=i(Bl),st=n(Bl,"DIV",{class:!0});var xl=s(st);m(P3.$$.fragment,xl),oXo=i(xl),Yde=n(xl,"P",{});var pZr=s(Yde);rXo=r(pZr,"Instantiates one of the base model classes of the library from a configuration."),pZr.forEach(t),tXo=i(xl),tc=n(xl,"P",{});var Vz=s(tc);aXo=r(Vz,`Note:
Loading a model from its configuration file does `),Kde=n(Vz,"STRONG",{});var _Zr=s(Kde);nXo=r(_Zr,"not"),_Zr.forEach(t),sXo=r(Vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zde=n(Vz,"CODE",{});var uZr=s(Zde);lXo=r(uZr,"from_pretrained()"),uZr.forEach(t),iXo=r(Vz,"to load the model weights."),Vz.forEach(t),dXo=i(xl),ece=n(xl,"P",{});var bZr=s(ece);cXo=r(bZr,"Examples:"),bZr.forEach(t),fXo=i(xl),m($3.$$.fragment,xl),xl.forEach(t),mXo=i(Bl),go=n(Bl,"DIV",{class:!0});var ca=s(go);m(I3.$$.fragment,ca),gXo=i(ca),oce=n(ca,"P",{});var vZr=s(oce);hXo=r(vZr,"Instantiate one of the base model classes of the library from a pretrained model."),vZr.forEach(t),pXo=i(ca),ln=n(ca,"P",{});var kC=s(ln);_Xo=r(kC,"The model class to instantiate is selected based on the "),rce=n(kC,"CODE",{});var TZr=s(rce);uXo=r(TZr,"model_type"),TZr.forEach(t),bXo=r(kC,` property of the config object (either
passed as an argument or loaded from `),tce=n(kC,"CODE",{});var FZr=s(tce);vXo=r(FZr,"pretrained_model_name_or_path"),FZr.forEach(t),TXo=r(kC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ace=n(kC,"CODE",{});var CZr=s(ace);FXo=r(CZr,"pretrained_model_name_or_path"),CZr.forEach(t),CXo=r(kC,":"),kC.forEach(t),MXo=i(ca),B=n(ca,"UL",{});var x=s(B);Ev=n(x,"LI",{});var ZEe=s(Ev);nce=n(ZEe,"STRONG",{});var MZr=s(nce);EXo=r(MZr,"albert"),MZr.forEach(t),yXo=r(ZEe," \u2014 "),PN=n(ZEe,"A",{href:!0});var EZr=s(PN);wXo=r(EZr,"TFAlbertModel"),EZr.forEach(t),AXo=r(ZEe," (ALBERT model)"),ZEe.forEach(t),LXo=i(x),yv=n(x,"LI",{});var e3e=s(yv);sce=n(e3e,"STRONG",{});var yZr=s(sce);BXo=r(yZr,"bart"),yZr.forEach(t),xXo=r(e3e," \u2014 "),$N=n(e3e,"A",{href:!0});var wZr=s($N);kXo=r(wZr,"TFBartModel"),wZr.forEach(t),RXo=r(e3e," (BART model)"),e3e.forEach(t),SXo=i(x),wv=n(x,"LI",{});var o3e=s(wv);lce=n(o3e,"STRONG",{});var AZr=s(lce);PXo=r(AZr,"bert"),AZr.forEach(t),$Xo=r(o3e," \u2014 "),IN=n(o3e,"A",{href:!0});var LZr=s(IN);IXo=r(LZr,"TFBertModel"),LZr.forEach(t),jXo=r(o3e," (BERT model)"),o3e.forEach(t),NXo=i(x),Av=n(x,"LI",{});var r3e=s(Av);ice=n(r3e,"STRONG",{});var BZr=s(ice);DXo=r(BZr,"blenderbot"),BZr.forEach(t),qXo=r(r3e," \u2014 "),jN=n(r3e,"A",{href:!0});var xZr=s(jN);GXo=r(xZr,"TFBlenderbotModel"),xZr.forEach(t),OXo=r(r3e," (Blenderbot model)"),r3e.forEach(t),XXo=i(x),Lv=n(x,"LI",{});var t3e=s(Lv);dce=n(t3e,"STRONG",{});var kZr=s(dce);zXo=r(kZr,"blenderbot-small"),kZr.forEach(t),VXo=r(t3e," \u2014 "),NN=n(t3e,"A",{href:!0});var RZr=s(NN);WXo=r(RZr,"TFBlenderbotSmallModel"),RZr.forEach(t),QXo=r(t3e," (BlenderbotSmall model)"),t3e.forEach(t),HXo=i(x),Bv=n(x,"LI",{});var a3e=s(Bv);cce=n(a3e,"STRONG",{});var SZr=s(cce);UXo=r(SZr,"camembert"),SZr.forEach(t),JXo=r(a3e," \u2014 "),DN=n(a3e,"A",{href:!0});var PZr=s(DN);YXo=r(PZr,"TFCamembertModel"),PZr.forEach(t),KXo=r(a3e," (CamemBERT model)"),a3e.forEach(t),ZXo=i(x),xv=n(x,"LI",{});var n3e=s(xv);fce=n(n3e,"STRONG",{});var $Zr=s(fce);ezo=r($Zr,"clip"),$Zr.forEach(t),ozo=r(n3e," \u2014 "),qN=n(n3e,"A",{href:!0});var IZr=s(qN);rzo=r(IZr,"TFCLIPModel"),IZr.forEach(t),tzo=r(n3e," (CLIP model)"),n3e.forEach(t),azo=i(x),kv=n(x,"LI",{});var s3e=s(kv);mce=n(s3e,"STRONG",{});var jZr=s(mce);nzo=r(jZr,"convbert"),jZr.forEach(t),szo=r(s3e," \u2014 "),GN=n(s3e,"A",{href:!0});var NZr=s(GN);lzo=r(NZr,"TFConvBertModel"),NZr.forEach(t),izo=r(s3e," (ConvBERT model)"),s3e.forEach(t),dzo=i(x),Rv=n(x,"LI",{});var l3e=s(Rv);gce=n(l3e,"STRONG",{});var DZr=s(gce);czo=r(DZr,"convnext"),DZr.forEach(t),fzo=r(l3e," \u2014 "),ON=n(l3e,"A",{href:!0});var qZr=s(ON);mzo=r(qZr,"TFConvNextModel"),qZr.forEach(t),gzo=r(l3e," (ConvNext model)"),l3e.forEach(t),hzo=i(x),Sv=n(x,"LI",{});var i3e=s(Sv);hce=n(i3e,"STRONG",{});var GZr=s(hce);pzo=r(GZr,"ctrl"),GZr.forEach(t),_zo=r(i3e," \u2014 "),XN=n(i3e,"A",{href:!0});var OZr=s(XN);uzo=r(OZr,"TFCTRLModel"),OZr.forEach(t),bzo=r(i3e," (CTRL model)"),i3e.forEach(t),vzo=i(x),Pv=n(x,"LI",{});var d3e=s(Pv);pce=n(d3e,"STRONG",{});var XZr=s(pce);Tzo=r(XZr,"deberta"),XZr.forEach(t),Fzo=r(d3e," \u2014 "),zN=n(d3e,"A",{href:!0});var zZr=s(zN);Czo=r(zZr,"TFDebertaModel"),zZr.forEach(t),Mzo=r(d3e," (DeBERTa model)"),d3e.forEach(t),Ezo=i(x),$v=n(x,"LI",{});var c3e=s($v);_ce=n(c3e,"STRONG",{});var VZr=s(_ce);yzo=r(VZr,"deberta-v2"),VZr.forEach(t),wzo=r(c3e," \u2014 "),VN=n(c3e,"A",{href:!0});var WZr=s(VN);Azo=r(WZr,"TFDebertaV2Model"),WZr.forEach(t),Lzo=r(c3e," (DeBERTa-v2 model)"),c3e.forEach(t),Bzo=i(x),Iv=n(x,"LI",{});var f3e=s(Iv);uce=n(f3e,"STRONG",{});var QZr=s(uce);xzo=r(QZr,"distilbert"),QZr.forEach(t),kzo=r(f3e," \u2014 "),WN=n(f3e,"A",{href:!0});var HZr=s(WN);Rzo=r(HZr,"TFDistilBertModel"),HZr.forEach(t),Szo=r(f3e," (DistilBERT model)"),f3e.forEach(t),Pzo=i(x),jv=n(x,"LI",{});var m3e=s(jv);bce=n(m3e,"STRONG",{});var UZr=s(bce);$zo=r(UZr,"dpr"),UZr.forEach(t),Izo=r(m3e," \u2014 "),QN=n(m3e,"A",{href:!0});var JZr=s(QN);jzo=r(JZr,"TFDPRQuestionEncoder"),JZr.forEach(t),Nzo=r(m3e," (DPR model)"),m3e.forEach(t),Dzo=i(x),Nv=n(x,"LI",{});var g3e=s(Nv);vce=n(g3e,"STRONG",{});var YZr=s(vce);qzo=r(YZr,"electra"),YZr.forEach(t),Gzo=r(g3e," \u2014 "),HN=n(g3e,"A",{href:!0});var KZr=s(HN);Ozo=r(KZr,"TFElectraModel"),KZr.forEach(t),Xzo=r(g3e," (ELECTRA model)"),g3e.forEach(t),zzo=i(x),Dv=n(x,"LI",{});var h3e=s(Dv);Tce=n(h3e,"STRONG",{});var ZZr=s(Tce);Vzo=r(ZZr,"flaubert"),ZZr.forEach(t),Wzo=r(h3e," \u2014 "),UN=n(h3e,"A",{href:!0});var eet=s(UN);Qzo=r(eet,"TFFlaubertModel"),eet.forEach(t),Hzo=r(h3e," (FlauBERT model)"),h3e.forEach(t),Uzo=i(x),Ss=n(x,"LI",{});var G0=s(Ss);Fce=n(G0,"STRONG",{});var oet=s(Fce);Jzo=r(oet,"funnel"),oet.forEach(t),Yzo=r(G0," \u2014 "),JN=n(G0,"A",{href:!0});var ret=s(JN);Kzo=r(ret,"TFFunnelModel"),ret.forEach(t),Zzo=r(G0," or "),YN=n(G0,"A",{href:!0});var tet=s(YN);eVo=r(tet,"TFFunnelBaseModel"),tet.forEach(t),oVo=r(G0," (Funnel Transformer model)"),G0.forEach(t),rVo=i(x),qv=n(x,"LI",{});var p3e=s(qv);Cce=n(p3e,"STRONG",{});var aet=s(Cce);tVo=r(aet,"gpt2"),aet.forEach(t),aVo=r(p3e," \u2014 "),KN=n(p3e,"A",{href:!0});var net=s(KN);nVo=r(net,"TFGPT2Model"),net.forEach(t),sVo=r(p3e," (OpenAI GPT-2 model)"),p3e.forEach(t),lVo=i(x),Gv=n(x,"LI",{});var _3e=s(Gv);Mce=n(_3e,"STRONG",{});var set=s(Mce);iVo=r(set,"hubert"),set.forEach(t),dVo=r(_3e," \u2014 "),ZN=n(_3e,"A",{href:!0});var iet=s(ZN);cVo=r(iet,"TFHubertModel"),iet.forEach(t),fVo=r(_3e," (Hubert model)"),_3e.forEach(t),mVo=i(x),Ov=n(x,"LI",{});var u3e=s(Ov);Ece=n(u3e,"STRONG",{});var det=s(Ece);gVo=r(det,"layoutlm"),det.forEach(t),hVo=r(u3e," \u2014 "),eD=n(u3e,"A",{href:!0});var cet=s(eD);pVo=r(cet,"TFLayoutLMModel"),cet.forEach(t),_Vo=r(u3e," (LayoutLM model)"),u3e.forEach(t),uVo=i(x),Xv=n(x,"LI",{});var b3e=s(Xv);yce=n(b3e,"STRONG",{});var fet=s(yce);bVo=r(fet,"led"),fet.forEach(t),vVo=r(b3e," \u2014 "),oD=n(b3e,"A",{href:!0});var met=s(oD);TVo=r(met,"TFLEDModel"),met.forEach(t),FVo=r(b3e," (LED model)"),b3e.forEach(t),CVo=i(x),zv=n(x,"LI",{});var v3e=s(zv);wce=n(v3e,"STRONG",{});var get=s(wce);MVo=r(get,"longformer"),get.forEach(t),EVo=r(v3e," \u2014 "),rD=n(v3e,"A",{href:!0});var het=s(rD);yVo=r(het,"TFLongformerModel"),het.forEach(t),wVo=r(v3e," (Longformer model)"),v3e.forEach(t),AVo=i(x),Vv=n(x,"LI",{});var T3e=s(Vv);Ace=n(T3e,"STRONG",{});var pet=s(Ace);LVo=r(pet,"lxmert"),pet.forEach(t),BVo=r(T3e," \u2014 "),tD=n(T3e,"A",{href:!0});var _et=s(tD);xVo=r(_et,"TFLxmertModel"),_et.forEach(t),kVo=r(T3e," (LXMERT model)"),T3e.forEach(t),RVo=i(x),Wv=n(x,"LI",{});var F3e=s(Wv);Lce=n(F3e,"STRONG",{});var uet=s(Lce);SVo=r(uet,"marian"),uet.forEach(t),PVo=r(F3e," \u2014 "),aD=n(F3e,"A",{href:!0});var bet=s(aD);$Vo=r(bet,"TFMarianModel"),bet.forEach(t),IVo=r(F3e," (Marian model)"),F3e.forEach(t),jVo=i(x),Qv=n(x,"LI",{});var C3e=s(Qv);Bce=n(C3e,"STRONG",{});var vet=s(Bce);NVo=r(vet,"mbart"),vet.forEach(t),DVo=r(C3e," \u2014 "),nD=n(C3e,"A",{href:!0});var Tet=s(nD);qVo=r(Tet,"TFMBartModel"),Tet.forEach(t),GVo=r(C3e," (mBART model)"),C3e.forEach(t),OVo=i(x),Hv=n(x,"LI",{});var M3e=s(Hv);xce=n(M3e,"STRONG",{});var Fet=s(xce);XVo=r(Fet,"mobilebert"),Fet.forEach(t),zVo=r(M3e," \u2014 "),sD=n(M3e,"A",{href:!0});var Cet=s(sD);VVo=r(Cet,"TFMobileBertModel"),Cet.forEach(t),WVo=r(M3e," (MobileBERT model)"),M3e.forEach(t),QVo=i(x),Uv=n(x,"LI",{});var E3e=s(Uv);kce=n(E3e,"STRONG",{});var Met=s(kce);HVo=r(Met,"mpnet"),Met.forEach(t),UVo=r(E3e," \u2014 "),lD=n(E3e,"A",{href:!0});var Eet=s(lD);JVo=r(Eet,"TFMPNetModel"),Eet.forEach(t),YVo=r(E3e," (MPNet model)"),E3e.forEach(t),KVo=i(x),Jv=n(x,"LI",{});var y3e=s(Jv);Rce=n(y3e,"STRONG",{});var yet=s(Rce);ZVo=r(yet,"mt5"),yet.forEach(t),eWo=r(y3e," \u2014 "),iD=n(y3e,"A",{href:!0});var wet=s(iD);oWo=r(wet,"TFMT5Model"),wet.forEach(t),rWo=r(y3e," (mT5 model)"),y3e.forEach(t),tWo=i(x),Yv=n(x,"LI",{});var w3e=s(Yv);Sce=n(w3e,"STRONG",{});var Aet=s(Sce);aWo=r(Aet,"openai-gpt"),Aet.forEach(t),nWo=r(w3e," \u2014 "),dD=n(w3e,"A",{href:!0});var Let=s(dD);sWo=r(Let,"TFOpenAIGPTModel"),Let.forEach(t),lWo=r(w3e," (OpenAI GPT model)"),w3e.forEach(t),iWo=i(x),Kv=n(x,"LI",{});var A3e=s(Kv);Pce=n(A3e,"STRONG",{});var Bet=s(Pce);dWo=r(Bet,"pegasus"),Bet.forEach(t),cWo=r(A3e," \u2014 "),cD=n(A3e,"A",{href:!0});var xet=s(cD);fWo=r(xet,"TFPegasusModel"),xet.forEach(t),mWo=r(A3e," (Pegasus model)"),A3e.forEach(t),gWo=i(x),Zv=n(x,"LI",{});var L3e=s(Zv);$ce=n(L3e,"STRONG",{});var ket=s($ce);hWo=r(ket,"rembert"),ket.forEach(t),pWo=r(L3e," \u2014 "),fD=n(L3e,"A",{href:!0});var Ret=s(fD);_Wo=r(Ret,"TFRemBertModel"),Ret.forEach(t),uWo=r(L3e," (RemBERT model)"),L3e.forEach(t),bWo=i(x),e6=n(x,"LI",{});var B3e=s(e6);Ice=n(B3e,"STRONG",{});var Set=s(Ice);vWo=r(Set,"roberta"),Set.forEach(t),TWo=r(B3e," \u2014 "),mD=n(B3e,"A",{href:!0});var Pet=s(mD);FWo=r(Pet,"TFRobertaModel"),Pet.forEach(t),CWo=r(B3e," (RoBERTa model)"),B3e.forEach(t),MWo=i(x),o6=n(x,"LI",{});var x3e=s(o6);jce=n(x3e,"STRONG",{});var $et=s(jce);EWo=r($et,"roformer"),$et.forEach(t),yWo=r(x3e," \u2014 "),gD=n(x3e,"A",{href:!0});var Iet=s(gD);wWo=r(Iet,"TFRoFormerModel"),Iet.forEach(t),AWo=r(x3e," (RoFormer model)"),x3e.forEach(t),LWo=i(x),r6=n(x,"LI",{});var k3e=s(r6);Nce=n(k3e,"STRONG",{});var jet=s(Nce);BWo=r(jet,"speech_to_text"),jet.forEach(t),xWo=r(k3e," \u2014 "),hD=n(k3e,"A",{href:!0});var Net=s(hD);kWo=r(Net,"TFSpeech2TextModel"),Net.forEach(t),RWo=r(k3e," (Speech2Text model)"),k3e.forEach(t),SWo=i(x),t6=n(x,"LI",{});var R3e=s(t6);Dce=n(R3e,"STRONG",{});var Det=s(Dce);PWo=r(Det,"t5"),Det.forEach(t),$Wo=r(R3e," \u2014 "),pD=n(R3e,"A",{href:!0});var qet=s(pD);IWo=r(qet,"TFT5Model"),qet.forEach(t),jWo=r(R3e," (T5 model)"),R3e.forEach(t),NWo=i(x),a6=n(x,"LI",{});var S3e=s(a6);qce=n(S3e,"STRONG",{});var Get=s(qce);DWo=r(Get,"tapas"),Get.forEach(t),qWo=r(S3e," \u2014 "),_D=n(S3e,"A",{href:!0});var Oet=s(_D);GWo=r(Oet,"TFTapasModel"),Oet.forEach(t),OWo=r(S3e," (TAPAS model)"),S3e.forEach(t),XWo=i(x),n6=n(x,"LI",{});var P3e=s(n6);Gce=n(P3e,"STRONG",{});var Xet=s(Gce);zWo=r(Xet,"transfo-xl"),Xet.forEach(t),VWo=r(P3e," \u2014 "),uD=n(P3e,"A",{href:!0});var zet=s(uD);WWo=r(zet,"TFTransfoXLModel"),zet.forEach(t),QWo=r(P3e," (Transformer-XL model)"),P3e.forEach(t),HWo=i(x),s6=n(x,"LI",{});var $3e=s(s6);Oce=n($3e,"STRONG",{});var Vet=s(Oce);UWo=r(Vet,"vit"),Vet.forEach(t),JWo=r($3e," \u2014 "),bD=n($3e,"A",{href:!0});var Wet=s(bD);YWo=r(Wet,"TFViTModel"),Wet.forEach(t),KWo=r($3e," (ViT model)"),$3e.forEach(t),ZWo=i(x),l6=n(x,"LI",{});var I3e=s(l6);Xce=n(I3e,"STRONG",{});var Qet=s(Xce);eQo=r(Qet,"wav2vec2"),Qet.forEach(t),oQo=r(I3e," \u2014 "),vD=n(I3e,"A",{href:!0});var Het=s(vD);rQo=r(Het,"TFWav2Vec2Model"),Het.forEach(t),tQo=r(I3e," (Wav2Vec2 model)"),I3e.forEach(t),aQo=i(x),i6=n(x,"LI",{});var j3e=s(i6);zce=n(j3e,"STRONG",{});var Uet=s(zce);nQo=r(Uet,"xlm"),Uet.forEach(t),sQo=r(j3e," \u2014 "),TD=n(j3e,"A",{href:!0});var Jet=s(TD);lQo=r(Jet,"TFXLMModel"),Jet.forEach(t),iQo=r(j3e," (XLM model)"),j3e.forEach(t),dQo=i(x),d6=n(x,"LI",{});var N3e=s(d6);Vce=n(N3e,"STRONG",{});var Yet=s(Vce);cQo=r(Yet,"xlm-roberta"),Yet.forEach(t),fQo=r(N3e," \u2014 "),FD=n(N3e,"A",{href:!0});var Ket=s(FD);mQo=r(Ket,"TFXLMRobertaModel"),Ket.forEach(t),gQo=r(N3e," (XLM-RoBERTa model)"),N3e.forEach(t),hQo=i(x),c6=n(x,"LI",{});var D3e=s(c6);Wce=n(D3e,"STRONG",{});var Zet=s(Wce);pQo=r(Zet,"xlnet"),Zet.forEach(t),_Qo=r(D3e," \u2014 "),CD=n(D3e,"A",{href:!0});var eot=s(CD);uQo=r(eot,"TFXLNetModel"),eot.forEach(t),bQo=r(D3e," (XLNet model)"),D3e.forEach(t),x.forEach(t),vQo=i(ca),Qce=n(ca,"P",{});var oot=s(Qce);TQo=r(oot,"Examples:"),oot.forEach(t),FQo=i(ca),m(j3.$$.fragment,ca),ca.forEach(t),Bl.forEach(t),_9e=i(d),ac=n(d,"H2",{class:!0});var yxe=s(ac);f6=n(yxe,"A",{id:!0,class:!0,href:!0});var rot=s(f6);Hce=n(rot,"SPAN",{});var tot=s(Hce);m(N3.$$.fragment,tot),tot.forEach(t),rot.forEach(t),CQo=i(yxe),Uce=n(yxe,"SPAN",{});var aot=s(Uce);MQo=r(aot,"TFAutoModelForPreTraining"),aot.forEach(t),yxe.forEach(t),u9e=i(d),hr=n(d,"DIV",{class:!0});var kl=s(hr);m(D3.$$.fragment,kl),EQo=i(kl),nc=n(kl,"P",{});var Wz=s(nc);yQo=r(Wz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jce=n(Wz,"CODE",{});var not=s(Jce);wQo=r(not,"from_pretrained()"),not.forEach(t),AQo=r(Wz,"class method or the "),Yce=n(Wz,"CODE",{});var sot=s(Yce);LQo=r(sot,"from_config()"),sot.forEach(t),BQo=r(Wz,`class
method.`),Wz.forEach(t),xQo=i(kl),q3=n(kl,"P",{});var wxe=s(q3);kQo=r(wxe,"This class cannot be instantiated directly using "),Kce=n(wxe,"CODE",{});var lot=s(Kce);RQo=r(lot,"__init__()"),lot.forEach(t),SQo=r(wxe," (throws an error)."),wxe.forEach(t),PQo=i(kl),lt=n(kl,"DIV",{class:!0});var Rl=s(lt);m(G3.$$.fragment,Rl),$Qo=i(Rl),Zce=n(Rl,"P",{});var iot=s(Zce);IQo=r(iot,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),iot.forEach(t),jQo=i(Rl),sc=n(Rl,"P",{});var Qz=s(sc);NQo=r(Qz,`Note:
Loading a model from its configuration file does `),efe=n(Qz,"STRONG",{});var dot=s(efe);DQo=r(dot,"not"),dot.forEach(t),qQo=r(Qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ofe=n(Qz,"CODE",{});var cot=s(ofe);GQo=r(cot,"from_pretrained()"),cot.forEach(t),OQo=r(Qz,"to load the model weights."),Qz.forEach(t),XQo=i(Rl),rfe=n(Rl,"P",{});var fot=s(rfe);zQo=r(fot,"Examples:"),fot.forEach(t),VQo=i(Rl),m(O3.$$.fragment,Rl),Rl.forEach(t),WQo=i(kl),ho=n(kl,"DIV",{class:!0});var fa=s(ho);m(X3.$$.fragment,fa),QQo=i(fa),tfe=n(fa,"P",{});var mot=s(tfe);HQo=r(mot,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mot.forEach(t),UQo=i(fa),dn=n(fa,"P",{});var RC=s(dn);JQo=r(RC,"The model class to instantiate is selected based on the "),afe=n(RC,"CODE",{});var got=s(afe);YQo=r(got,"model_type"),got.forEach(t),KQo=r(RC,` property of the config object (either
passed as an argument or loaded from `),nfe=n(RC,"CODE",{});var hot=s(nfe);ZQo=r(hot,"pretrained_model_name_or_path"),hot.forEach(t),eHo=r(RC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sfe=n(RC,"CODE",{});var pot=s(sfe);oHo=r(pot,"pretrained_model_name_or_path"),pot.forEach(t),rHo=r(RC,":"),RC.forEach(t),tHo=i(fa),H=n(fa,"UL",{});var U=s(H);m6=n(U,"LI",{});var q3e=s(m6);lfe=n(q3e,"STRONG",{});var _ot=s(lfe);aHo=r(_ot,"albert"),_ot.forEach(t),nHo=r(q3e," \u2014 "),MD=n(q3e,"A",{href:!0});var uot=s(MD);sHo=r(uot,"TFAlbertForPreTraining"),uot.forEach(t),lHo=r(q3e," (ALBERT model)"),q3e.forEach(t),iHo=i(U),g6=n(U,"LI",{});var G3e=s(g6);ife=n(G3e,"STRONG",{});var bot=s(ife);dHo=r(bot,"bart"),bot.forEach(t),cHo=r(G3e," \u2014 "),ED=n(G3e,"A",{href:!0});var vot=s(ED);fHo=r(vot,"TFBartForConditionalGeneration"),vot.forEach(t),mHo=r(G3e," (BART model)"),G3e.forEach(t),gHo=i(U),h6=n(U,"LI",{});var O3e=s(h6);dfe=n(O3e,"STRONG",{});var Tot=s(dfe);hHo=r(Tot,"bert"),Tot.forEach(t),pHo=r(O3e," \u2014 "),yD=n(O3e,"A",{href:!0});var Fot=s(yD);_Ho=r(Fot,"TFBertForPreTraining"),Fot.forEach(t),uHo=r(O3e," (BERT model)"),O3e.forEach(t),bHo=i(U),p6=n(U,"LI",{});var X3e=s(p6);cfe=n(X3e,"STRONG",{});var Cot=s(cfe);vHo=r(Cot,"camembert"),Cot.forEach(t),THo=r(X3e," \u2014 "),wD=n(X3e,"A",{href:!0});var Mot=s(wD);FHo=r(Mot,"TFCamembertForMaskedLM"),Mot.forEach(t),CHo=r(X3e," (CamemBERT model)"),X3e.forEach(t),MHo=i(U),_6=n(U,"LI",{});var z3e=s(_6);ffe=n(z3e,"STRONG",{});var Eot=s(ffe);EHo=r(Eot,"ctrl"),Eot.forEach(t),yHo=r(z3e," \u2014 "),AD=n(z3e,"A",{href:!0});var yot=s(AD);wHo=r(yot,"TFCTRLLMHeadModel"),yot.forEach(t),AHo=r(z3e," (CTRL model)"),z3e.forEach(t),LHo=i(U),u6=n(U,"LI",{});var V3e=s(u6);mfe=n(V3e,"STRONG",{});var wot=s(mfe);BHo=r(wot,"distilbert"),wot.forEach(t),xHo=r(V3e," \u2014 "),LD=n(V3e,"A",{href:!0});var Aot=s(LD);kHo=r(Aot,"TFDistilBertForMaskedLM"),Aot.forEach(t),RHo=r(V3e," (DistilBERT model)"),V3e.forEach(t),SHo=i(U),b6=n(U,"LI",{});var W3e=s(b6);gfe=n(W3e,"STRONG",{});var Lot=s(gfe);PHo=r(Lot,"electra"),Lot.forEach(t),$Ho=r(W3e," \u2014 "),BD=n(W3e,"A",{href:!0});var Bot=s(BD);IHo=r(Bot,"TFElectraForPreTraining"),Bot.forEach(t),jHo=r(W3e," (ELECTRA model)"),W3e.forEach(t),NHo=i(U),v6=n(U,"LI",{});var Q3e=s(v6);hfe=n(Q3e,"STRONG",{});var xot=s(hfe);DHo=r(xot,"flaubert"),xot.forEach(t),qHo=r(Q3e," \u2014 "),xD=n(Q3e,"A",{href:!0});var kot=s(xD);GHo=r(kot,"TFFlaubertWithLMHeadModel"),kot.forEach(t),OHo=r(Q3e," (FlauBERT model)"),Q3e.forEach(t),XHo=i(U),T6=n(U,"LI",{});var H3e=s(T6);pfe=n(H3e,"STRONG",{});var Rot=s(pfe);zHo=r(Rot,"funnel"),Rot.forEach(t),VHo=r(H3e," \u2014 "),kD=n(H3e,"A",{href:!0});var Sot=s(kD);WHo=r(Sot,"TFFunnelForPreTraining"),Sot.forEach(t),QHo=r(H3e," (Funnel Transformer model)"),H3e.forEach(t),HHo=i(U),F6=n(U,"LI",{});var U3e=s(F6);_fe=n(U3e,"STRONG",{});var Pot=s(_fe);UHo=r(Pot,"gpt2"),Pot.forEach(t),JHo=r(U3e," \u2014 "),RD=n(U3e,"A",{href:!0});var $ot=s(RD);YHo=r($ot,"TFGPT2LMHeadModel"),$ot.forEach(t),KHo=r(U3e," (OpenAI GPT-2 model)"),U3e.forEach(t),ZHo=i(U),C6=n(U,"LI",{});var J3e=s(C6);ufe=n(J3e,"STRONG",{});var Iot=s(ufe);eUo=r(Iot,"layoutlm"),Iot.forEach(t),oUo=r(J3e," \u2014 "),SD=n(J3e,"A",{href:!0});var jot=s(SD);rUo=r(jot,"TFLayoutLMForMaskedLM"),jot.forEach(t),tUo=r(J3e," (LayoutLM model)"),J3e.forEach(t),aUo=i(U),M6=n(U,"LI",{});var Y3e=s(M6);bfe=n(Y3e,"STRONG",{});var Not=s(bfe);nUo=r(Not,"lxmert"),Not.forEach(t),sUo=r(Y3e," \u2014 "),PD=n(Y3e,"A",{href:!0});var Dot=s(PD);lUo=r(Dot,"TFLxmertForPreTraining"),Dot.forEach(t),iUo=r(Y3e," (LXMERT model)"),Y3e.forEach(t),dUo=i(U),E6=n(U,"LI",{});var K3e=s(E6);vfe=n(K3e,"STRONG",{});var qot=s(vfe);cUo=r(qot,"mobilebert"),qot.forEach(t),fUo=r(K3e," \u2014 "),$D=n(K3e,"A",{href:!0});var Got=s($D);mUo=r(Got,"TFMobileBertForPreTraining"),Got.forEach(t),gUo=r(K3e," (MobileBERT model)"),K3e.forEach(t),hUo=i(U),y6=n(U,"LI",{});var Z3e=s(y6);Tfe=n(Z3e,"STRONG",{});var Oot=s(Tfe);pUo=r(Oot,"mpnet"),Oot.forEach(t),_Uo=r(Z3e," \u2014 "),ID=n(Z3e,"A",{href:!0});var Xot=s(ID);uUo=r(Xot,"TFMPNetForMaskedLM"),Xot.forEach(t),bUo=r(Z3e," (MPNet model)"),Z3e.forEach(t),vUo=i(U),w6=n(U,"LI",{});var eye=s(w6);Ffe=n(eye,"STRONG",{});var zot=s(Ffe);TUo=r(zot,"openai-gpt"),zot.forEach(t),FUo=r(eye," \u2014 "),jD=n(eye,"A",{href:!0});var Vot=s(jD);CUo=r(Vot,"TFOpenAIGPTLMHeadModel"),Vot.forEach(t),MUo=r(eye," (OpenAI GPT model)"),eye.forEach(t),EUo=i(U),A6=n(U,"LI",{});var oye=s(A6);Cfe=n(oye,"STRONG",{});var Wot=s(Cfe);yUo=r(Wot,"roberta"),Wot.forEach(t),wUo=r(oye," \u2014 "),ND=n(oye,"A",{href:!0});var Qot=s(ND);AUo=r(Qot,"TFRobertaForMaskedLM"),Qot.forEach(t),LUo=r(oye," (RoBERTa model)"),oye.forEach(t),BUo=i(U),L6=n(U,"LI",{});var rye=s(L6);Mfe=n(rye,"STRONG",{});var Hot=s(Mfe);xUo=r(Hot,"t5"),Hot.forEach(t),kUo=r(rye," \u2014 "),DD=n(rye,"A",{href:!0});var Uot=s(DD);RUo=r(Uot,"TFT5ForConditionalGeneration"),Uot.forEach(t),SUo=r(rye," (T5 model)"),rye.forEach(t),PUo=i(U),B6=n(U,"LI",{});var tye=s(B6);Efe=n(tye,"STRONG",{});var Jot=s(Efe);$Uo=r(Jot,"tapas"),Jot.forEach(t),IUo=r(tye," \u2014 "),qD=n(tye,"A",{href:!0});var Yot=s(qD);jUo=r(Yot,"TFTapasForMaskedLM"),Yot.forEach(t),NUo=r(tye," (TAPAS model)"),tye.forEach(t),DUo=i(U),x6=n(U,"LI",{});var aye=s(x6);yfe=n(aye,"STRONG",{});var Kot=s(yfe);qUo=r(Kot,"transfo-xl"),Kot.forEach(t),GUo=r(aye," \u2014 "),GD=n(aye,"A",{href:!0});var Zot=s(GD);OUo=r(Zot,"TFTransfoXLLMHeadModel"),Zot.forEach(t),XUo=r(aye," (Transformer-XL model)"),aye.forEach(t),zUo=i(U),k6=n(U,"LI",{});var nye=s(k6);wfe=n(nye,"STRONG",{});var ert=s(wfe);VUo=r(ert,"xlm"),ert.forEach(t),WUo=r(nye," \u2014 "),OD=n(nye,"A",{href:!0});var ort=s(OD);QUo=r(ort,"TFXLMWithLMHeadModel"),ort.forEach(t),HUo=r(nye," (XLM model)"),nye.forEach(t),UUo=i(U),R6=n(U,"LI",{});var sye=s(R6);Afe=n(sye,"STRONG",{});var rrt=s(Afe);JUo=r(rrt,"xlm-roberta"),rrt.forEach(t),YUo=r(sye," \u2014 "),XD=n(sye,"A",{href:!0});var trt=s(XD);KUo=r(trt,"TFXLMRobertaForMaskedLM"),trt.forEach(t),ZUo=r(sye," (XLM-RoBERTa model)"),sye.forEach(t),eJo=i(U),S6=n(U,"LI",{});var lye=s(S6);Lfe=n(lye,"STRONG",{});var art=s(Lfe);oJo=r(art,"xlnet"),art.forEach(t),rJo=r(lye," \u2014 "),zD=n(lye,"A",{href:!0});var nrt=s(zD);tJo=r(nrt,"TFXLNetLMHeadModel"),nrt.forEach(t),aJo=r(lye," (XLNet model)"),lye.forEach(t),U.forEach(t),nJo=i(fa),Bfe=n(fa,"P",{});var srt=s(Bfe);sJo=r(srt,"Examples:"),srt.forEach(t),lJo=i(fa),m(z3.$$.fragment,fa),fa.forEach(t),kl.forEach(t),b9e=i(d),lc=n(d,"H2",{class:!0});var Axe=s(lc);P6=n(Axe,"A",{id:!0,class:!0,href:!0});var lrt=s(P6);xfe=n(lrt,"SPAN",{});var irt=s(xfe);m(V3.$$.fragment,irt),irt.forEach(t),lrt.forEach(t),iJo=i(Axe),kfe=n(Axe,"SPAN",{});var drt=s(kfe);dJo=r(drt,"TFAutoModelForCausalLM"),drt.forEach(t),Axe.forEach(t),v9e=i(d),pr=n(d,"DIV",{class:!0});var Sl=s(pr);m(W3.$$.fragment,Sl),cJo=i(Sl),ic=n(Sl,"P",{});var Hz=s(ic);fJo=r(Hz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Rfe=n(Hz,"CODE",{});var crt=s(Rfe);mJo=r(crt,"from_pretrained()"),crt.forEach(t),gJo=r(Hz,"class method or the "),Sfe=n(Hz,"CODE",{});var frt=s(Sfe);hJo=r(frt,"from_config()"),frt.forEach(t),pJo=r(Hz,`class
method.`),Hz.forEach(t),_Jo=i(Sl),Q3=n(Sl,"P",{});var Lxe=s(Q3);uJo=r(Lxe,"This class cannot be instantiated directly using "),Pfe=n(Lxe,"CODE",{});var mrt=s(Pfe);bJo=r(mrt,"__init__()"),mrt.forEach(t),vJo=r(Lxe," (throws an error)."),Lxe.forEach(t),TJo=i(Sl),it=n(Sl,"DIV",{class:!0});var Pl=s(it);m(H3.$$.fragment,Pl),FJo=i(Pl),$fe=n(Pl,"P",{});var grt=s($fe);CJo=r(grt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),grt.forEach(t),MJo=i(Pl),dc=n(Pl,"P",{});var Uz=s(dc);EJo=r(Uz,`Note:
Loading a model from its configuration file does `),Ife=n(Uz,"STRONG",{});var hrt=s(Ife);yJo=r(hrt,"not"),hrt.forEach(t),wJo=r(Uz,` load the model weights. It only affects the
model\u2019s configuration. Use `),jfe=n(Uz,"CODE",{});var prt=s(jfe);AJo=r(prt,"from_pretrained()"),prt.forEach(t),LJo=r(Uz,"to load the model weights."),Uz.forEach(t),BJo=i(Pl),Nfe=n(Pl,"P",{});var _rt=s(Nfe);xJo=r(_rt,"Examples:"),_rt.forEach(t),kJo=i(Pl),m(U3.$$.fragment,Pl),Pl.forEach(t),RJo=i(Sl),po=n(Sl,"DIV",{class:!0});var ma=s(po);m(J3.$$.fragment,ma),SJo=i(ma),Dfe=n(ma,"P",{});var urt=s(Dfe);PJo=r(urt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),urt.forEach(t),$Jo=i(ma),cn=n(ma,"P",{});var SC=s(cn);IJo=r(SC,"The model class to instantiate is selected based on the "),qfe=n(SC,"CODE",{});var brt=s(qfe);jJo=r(brt,"model_type"),brt.forEach(t),NJo=r(SC,` property of the config object (either
passed as an argument or loaded from `),Gfe=n(SC,"CODE",{});var vrt=s(Gfe);DJo=r(vrt,"pretrained_model_name_or_path"),vrt.forEach(t),qJo=r(SC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ofe=n(SC,"CODE",{});var Trt=s(Ofe);GJo=r(Trt,"pretrained_model_name_or_path"),Trt.forEach(t),OJo=r(SC,":"),SC.forEach(t),XJo=i(ma),he=n(ma,"UL",{});var Me=s(he);$6=n(Me,"LI",{});var iye=s($6);Xfe=n(iye,"STRONG",{});var Frt=s(Xfe);zJo=r(Frt,"bert"),Frt.forEach(t),VJo=r(iye," \u2014 "),VD=n(iye,"A",{href:!0});var Crt=s(VD);WJo=r(Crt,"TFBertLMHeadModel"),Crt.forEach(t),QJo=r(iye," (BERT model)"),iye.forEach(t),HJo=i(Me),I6=n(Me,"LI",{});var dye=s(I6);zfe=n(dye,"STRONG",{});var Mrt=s(zfe);UJo=r(Mrt,"ctrl"),Mrt.forEach(t),JJo=r(dye," \u2014 "),WD=n(dye,"A",{href:!0});var Ert=s(WD);YJo=r(Ert,"TFCTRLLMHeadModel"),Ert.forEach(t),KJo=r(dye," (CTRL model)"),dye.forEach(t),ZJo=i(Me),j6=n(Me,"LI",{});var cye=s(j6);Vfe=n(cye,"STRONG",{});var yrt=s(Vfe);eYo=r(yrt,"gpt2"),yrt.forEach(t),oYo=r(cye," \u2014 "),QD=n(cye,"A",{href:!0});var wrt=s(QD);rYo=r(wrt,"TFGPT2LMHeadModel"),wrt.forEach(t),tYo=r(cye," (OpenAI GPT-2 model)"),cye.forEach(t),aYo=i(Me),N6=n(Me,"LI",{});var fye=s(N6);Wfe=n(fye,"STRONG",{});var Art=s(Wfe);nYo=r(Art,"openai-gpt"),Art.forEach(t),sYo=r(fye," \u2014 "),HD=n(fye,"A",{href:!0});var Lrt=s(HD);lYo=r(Lrt,"TFOpenAIGPTLMHeadModel"),Lrt.forEach(t),iYo=r(fye," (OpenAI GPT model)"),fye.forEach(t),dYo=i(Me),D6=n(Me,"LI",{});var mye=s(D6);Qfe=n(mye,"STRONG",{});var Brt=s(Qfe);cYo=r(Brt,"rembert"),Brt.forEach(t),fYo=r(mye," \u2014 "),UD=n(mye,"A",{href:!0});var xrt=s(UD);mYo=r(xrt,"TFRemBertForCausalLM"),xrt.forEach(t),gYo=r(mye," (RemBERT model)"),mye.forEach(t),hYo=i(Me),q6=n(Me,"LI",{});var gye=s(q6);Hfe=n(gye,"STRONG",{});var krt=s(Hfe);pYo=r(krt,"roberta"),krt.forEach(t),_Yo=r(gye," \u2014 "),JD=n(gye,"A",{href:!0});var Rrt=s(JD);uYo=r(Rrt,"TFRobertaForCausalLM"),Rrt.forEach(t),bYo=r(gye," (RoBERTa model)"),gye.forEach(t),vYo=i(Me),G6=n(Me,"LI",{});var hye=s(G6);Ufe=n(hye,"STRONG",{});var Srt=s(Ufe);TYo=r(Srt,"roformer"),Srt.forEach(t),FYo=r(hye," \u2014 "),YD=n(hye,"A",{href:!0});var Prt=s(YD);CYo=r(Prt,"TFRoFormerForCausalLM"),Prt.forEach(t),MYo=r(hye," (RoFormer model)"),hye.forEach(t),EYo=i(Me),O6=n(Me,"LI",{});var pye=s(O6);Jfe=n(pye,"STRONG",{});var $rt=s(Jfe);yYo=r($rt,"transfo-xl"),$rt.forEach(t),wYo=r(pye," \u2014 "),KD=n(pye,"A",{href:!0});var Irt=s(KD);AYo=r(Irt,"TFTransfoXLLMHeadModel"),Irt.forEach(t),LYo=r(pye," (Transformer-XL model)"),pye.forEach(t),BYo=i(Me),X6=n(Me,"LI",{});var _ye=s(X6);Yfe=n(_ye,"STRONG",{});var jrt=s(Yfe);xYo=r(jrt,"xlm"),jrt.forEach(t),kYo=r(_ye," \u2014 "),ZD=n(_ye,"A",{href:!0});var Nrt=s(ZD);RYo=r(Nrt,"TFXLMWithLMHeadModel"),Nrt.forEach(t),SYo=r(_ye," (XLM model)"),_ye.forEach(t),PYo=i(Me),z6=n(Me,"LI",{});var uye=s(z6);Kfe=n(uye,"STRONG",{});var Drt=s(Kfe);$Yo=r(Drt,"xlnet"),Drt.forEach(t),IYo=r(uye," \u2014 "),eq=n(uye,"A",{href:!0});var qrt=s(eq);jYo=r(qrt,"TFXLNetLMHeadModel"),qrt.forEach(t),NYo=r(uye," (XLNet model)"),uye.forEach(t),Me.forEach(t),DYo=i(ma),Zfe=n(ma,"P",{});var Grt=s(Zfe);qYo=r(Grt,"Examples:"),Grt.forEach(t),GYo=i(ma),m(Y3.$$.fragment,ma),ma.forEach(t),Sl.forEach(t),T9e=i(d),cc=n(d,"H2",{class:!0});var Bxe=s(cc);V6=n(Bxe,"A",{id:!0,class:!0,href:!0});var Ort=s(V6);eme=n(Ort,"SPAN",{});var Xrt=s(eme);m(K3.$$.fragment,Xrt),Xrt.forEach(t),Ort.forEach(t),OYo=i(Bxe),ome=n(Bxe,"SPAN",{});var zrt=s(ome);XYo=r(zrt,"TFAutoModelForImageClassification"),zrt.forEach(t),Bxe.forEach(t),F9e=i(d),_r=n(d,"DIV",{class:!0});var $l=s(_r);m(Z3.$$.fragment,$l),zYo=i($l),fc=n($l,"P",{});var Jz=s(fc);VYo=r(Jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rme=n(Jz,"CODE",{});var Vrt=s(rme);WYo=r(Vrt,"from_pretrained()"),Vrt.forEach(t),QYo=r(Jz,"class method or the "),tme=n(Jz,"CODE",{});var Wrt=s(tme);HYo=r(Wrt,"from_config()"),Wrt.forEach(t),UYo=r(Jz,`class
method.`),Jz.forEach(t),JYo=i($l),ey=n($l,"P",{});var xxe=s(ey);YYo=r(xxe,"This class cannot be instantiated directly using "),ame=n(xxe,"CODE",{});var Qrt=s(ame);KYo=r(Qrt,"__init__()"),Qrt.forEach(t),ZYo=r(xxe," (throws an error)."),xxe.forEach(t),eKo=i($l),dt=n($l,"DIV",{class:!0});var Il=s(dt);m(oy.$$.fragment,Il),oKo=i(Il),nme=n(Il,"P",{});var Hrt=s(nme);rKo=r(Hrt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Hrt.forEach(t),tKo=i(Il),mc=n(Il,"P",{});var Yz=s(mc);aKo=r(Yz,`Note:
Loading a model from its configuration file does `),sme=n(Yz,"STRONG",{});var Urt=s(sme);nKo=r(Urt,"not"),Urt.forEach(t),sKo=r(Yz,` load the model weights. It only affects the
model\u2019s configuration. Use `),lme=n(Yz,"CODE",{});var Jrt=s(lme);lKo=r(Jrt,"from_pretrained()"),Jrt.forEach(t),iKo=r(Yz,"to load the model weights."),Yz.forEach(t),dKo=i(Il),ime=n(Il,"P",{});var Yrt=s(ime);cKo=r(Yrt,"Examples:"),Yrt.forEach(t),fKo=i(Il),m(ry.$$.fragment,Il),Il.forEach(t),mKo=i($l),_o=n($l,"DIV",{class:!0});var ga=s(_o);m(ty.$$.fragment,ga),gKo=i(ga),dme=n(ga,"P",{});var Krt=s(dme);hKo=r(Krt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Krt.forEach(t),pKo=i(ga),fn=n(ga,"P",{});var PC=s(fn);_Ko=r(PC,"The model class to instantiate is selected based on the "),cme=n(PC,"CODE",{});var Zrt=s(cme);uKo=r(Zrt,"model_type"),Zrt.forEach(t),bKo=r(PC,` property of the config object (either
passed as an argument or loaded from `),fme=n(PC,"CODE",{});var ett=s(fme);vKo=r(ett,"pretrained_model_name_or_path"),ett.forEach(t),TKo=r(PC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mme=n(PC,"CODE",{});var ott=s(mme);FKo=r(ott,"pretrained_model_name_or_path"),ott.forEach(t),CKo=r(PC,":"),PC.forEach(t),MKo=i(ga),ay=n(ga,"UL",{});var kxe=s(ay);W6=n(kxe,"LI",{});var bye=s(W6);gme=n(bye,"STRONG",{});var rtt=s(gme);EKo=r(rtt,"convnext"),rtt.forEach(t),yKo=r(bye," \u2014 "),oq=n(bye,"A",{href:!0});var ttt=s(oq);wKo=r(ttt,"TFConvNextForImageClassification"),ttt.forEach(t),AKo=r(bye," (ConvNext model)"),bye.forEach(t),LKo=i(kxe),Q6=n(kxe,"LI",{});var vye=s(Q6);hme=n(vye,"STRONG",{});var att=s(hme);BKo=r(att,"vit"),att.forEach(t),xKo=r(vye," \u2014 "),rq=n(vye,"A",{href:!0});var ntt=s(rq);kKo=r(ntt,"TFViTForImageClassification"),ntt.forEach(t),RKo=r(vye," (ViT model)"),vye.forEach(t),kxe.forEach(t),SKo=i(ga),pme=n(ga,"P",{});var stt=s(pme);PKo=r(stt,"Examples:"),stt.forEach(t),$Ko=i(ga),m(ny.$$.fragment,ga),ga.forEach(t),$l.forEach(t),C9e=i(d),gc=n(d,"H2",{class:!0});var Rxe=s(gc);H6=n(Rxe,"A",{id:!0,class:!0,href:!0});var ltt=s(H6);_me=n(ltt,"SPAN",{});var itt=s(_me);m(sy.$$.fragment,itt),itt.forEach(t),ltt.forEach(t),IKo=i(Rxe),ume=n(Rxe,"SPAN",{});var dtt=s(ume);jKo=r(dtt,"TFAutoModelForMaskedLM"),dtt.forEach(t),Rxe.forEach(t),M9e=i(d),ur=n(d,"DIV",{class:!0});var jl=s(ur);m(ly.$$.fragment,jl),NKo=i(jl),hc=n(jl,"P",{});var Kz=s(hc);DKo=r(Kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bme=n(Kz,"CODE",{});var ctt=s(bme);qKo=r(ctt,"from_pretrained()"),ctt.forEach(t),GKo=r(Kz,"class method or the "),vme=n(Kz,"CODE",{});var ftt=s(vme);OKo=r(ftt,"from_config()"),ftt.forEach(t),XKo=r(Kz,`class
method.`),Kz.forEach(t),zKo=i(jl),iy=n(jl,"P",{});var Sxe=s(iy);VKo=r(Sxe,"This class cannot be instantiated directly using "),Tme=n(Sxe,"CODE",{});var mtt=s(Tme);WKo=r(mtt,"__init__()"),mtt.forEach(t),QKo=r(Sxe," (throws an error)."),Sxe.forEach(t),HKo=i(jl),ct=n(jl,"DIV",{class:!0});var Nl=s(ct);m(dy.$$.fragment,Nl),UKo=i(Nl),Fme=n(Nl,"P",{});var gtt=s(Fme);JKo=r(gtt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gtt.forEach(t),YKo=i(Nl),pc=n(Nl,"P",{});var Zz=s(pc);KKo=r(Zz,`Note:
Loading a model from its configuration file does `),Cme=n(Zz,"STRONG",{});var htt=s(Cme);ZKo=r(htt,"not"),htt.forEach(t),eZo=r(Zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mme=n(Zz,"CODE",{});var ptt=s(Mme);oZo=r(ptt,"from_pretrained()"),ptt.forEach(t),rZo=r(Zz,"to load the model weights."),Zz.forEach(t),tZo=i(Nl),Eme=n(Nl,"P",{});var _tt=s(Eme);aZo=r(_tt,"Examples:"),_tt.forEach(t),nZo=i(Nl),m(cy.$$.fragment,Nl),Nl.forEach(t),sZo=i(jl),uo=n(jl,"DIV",{class:!0});var ha=s(uo);m(fy.$$.fragment,ha),lZo=i(ha),yme=n(ha,"P",{});var utt=s(yme);iZo=r(utt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),utt.forEach(t),dZo=i(ha),mn=n(ha,"P",{});var $C=s(mn);cZo=r($C,"The model class to instantiate is selected based on the "),wme=n($C,"CODE",{});var btt=s(wme);fZo=r(btt,"model_type"),btt.forEach(t),mZo=r($C,` property of the config object (either
passed as an argument or loaded from `),Ame=n($C,"CODE",{});var vtt=s(Ame);gZo=r(vtt,"pretrained_model_name_or_path"),vtt.forEach(t),hZo=r($C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lme=n($C,"CODE",{});var Ttt=s(Lme);pZo=r(Ttt,"pretrained_model_name_or_path"),Ttt.forEach(t),_Zo=r($C,":"),$C.forEach(t),uZo=i(ha),Y=n(ha,"UL",{});var ee=s(Y);U6=n(ee,"LI",{});var Tye=s(U6);Bme=n(Tye,"STRONG",{});var Ftt=s(Bme);bZo=r(Ftt,"albert"),Ftt.forEach(t),vZo=r(Tye," \u2014 "),tq=n(Tye,"A",{href:!0});var Ctt=s(tq);TZo=r(Ctt,"TFAlbertForMaskedLM"),Ctt.forEach(t),FZo=r(Tye," (ALBERT model)"),Tye.forEach(t),CZo=i(ee),J6=n(ee,"LI",{});var Fye=s(J6);xme=n(Fye,"STRONG",{});var Mtt=s(xme);MZo=r(Mtt,"bert"),Mtt.forEach(t),EZo=r(Fye," \u2014 "),aq=n(Fye,"A",{href:!0});var Ett=s(aq);yZo=r(Ett,"TFBertForMaskedLM"),Ett.forEach(t),wZo=r(Fye," (BERT model)"),Fye.forEach(t),AZo=i(ee),Y6=n(ee,"LI",{});var Cye=s(Y6);kme=n(Cye,"STRONG",{});var ytt=s(kme);LZo=r(ytt,"camembert"),ytt.forEach(t),BZo=r(Cye," \u2014 "),nq=n(Cye,"A",{href:!0});var wtt=s(nq);xZo=r(wtt,"TFCamembertForMaskedLM"),wtt.forEach(t),kZo=r(Cye," (CamemBERT model)"),Cye.forEach(t),RZo=i(ee),K6=n(ee,"LI",{});var Mye=s(K6);Rme=n(Mye,"STRONG",{});var Att=s(Rme);SZo=r(Att,"convbert"),Att.forEach(t),PZo=r(Mye," \u2014 "),sq=n(Mye,"A",{href:!0});var Ltt=s(sq);$Zo=r(Ltt,"TFConvBertForMaskedLM"),Ltt.forEach(t),IZo=r(Mye," (ConvBERT model)"),Mye.forEach(t),jZo=i(ee),Z6=n(ee,"LI",{});var Eye=s(Z6);Sme=n(Eye,"STRONG",{});var Btt=s(Sme);NZo=r(Btt,"deberta"),Btt.forEach(t),DZo=r(Eye," \u2014 "),lq=n(Eye,"A",{href:!0});var xtt=s(lq);qZo=r(xtt,"TFDebertaForMaskedLM"),xtt.forEach(t),GZo=r(Eye," (DeBERTa model)"),Eye.forEach(t),OZo=i(ee),eT=n(ee,"LI",{});var yye=s(eT);Pme=n(yye,"STRONG",{});var ktt=s(Pme);XZo=r(ktt,"deberta-v2"),ktt.forEach(t),zZo=r(yye," \u2014 "),iq=n(yye,"A",{href:!0});var Rtt=s(iq);VZo=r(Rtt,"TFDebertaV2ForMaskedLM"),Rtt.forEach(t),WZo=r(yye," (DeBERTa-v2 model)"),yye.forEach(t),QZo=i(ee),oT=n(ee,"LI",{});var wye=s(oT);$me=n(wye,"STRONG",{});var Stt=s($me);HZo=r(Stt,"distilbert"),Stt.forEach(t),UZo=r(wye," \u2014 "),dq=n(wye,"A",{href:!0});var Ptt=s(dq);JZo=r(Ptt,"TFDistilBertForMaskedLM"),Ptt.forEach(t),YZo=r(wye," (DistilBERT model)"),wye.forEach(t),KZo=i(ee),rT=n(ee,"LI",{});var Aye=s(rT);Ime=n(Aye,"STRONG",{});var $tt=s(Ime);ZZo=r($tt,"electra"),$tt.forEach(t),eer=r(Aye," \u2014 "),cq=n(Aye,"A",{href:!0});var Itt=s(cq);oer=r(Itt,"TFElectraForMaskedLM"),Itt.forEach(t),rer=r(Aye," (ELECTRA model)"),Aye.forEach(t),ter=i(ee),tT=n(ee,"LI",{});var Lye=s(tT);jme=n(Lye,"STRONG",{});var jtt=s(jme);aer=r(jtt,"flaubert"),jtt.forEach(t),ner=r(Lye," \u2014 "),fq=n(Lye,"A",{href:!0});var Ntt=s(fq);ser=r(Ntt,"TFFlaubertWithLMHeadModel"),Ntt.forEach(t),ler=r(Lye," (FlauBERT model)"),Lye.forEach(t),ier=i(ee),aT=n(ee,"LI",{});var Bye=s(aT);Nme=n(Bye,"STRONG",{});var Dtt=s(Nme);der=r(Dtt,"funnel"),Dtt.forEach(t),cer=r(Bye," \u2014 "),mq=n(Bye,"A",{href:!0});var qtt=s(mq);fer=r(qtt,"TFFunnelForMaskedLM"),qtt.forEach(t),mer=r(Bye," (Funnel Transformer model)"),Bye.forEach(t),ger=i(ee),nT=n(ee,"LI",{});var xye=s(nT);Dme=n(xye,"STRONG",{});var Gtt=s(Dme);her=r(Gtt,"layoutlm"),Gtt.forEach(t),per=r(xye," \u2014 "),gq=n(xye,"A",{href:!0});var Ott=s(gq);_er=r(Ott,"TFLayoutLMForMaskedLM"),Ott.forEach(t),uer=r(xye," (LayoutLM model)"),xye.forEach(t),ber=i(ee),sT=n(ee,"LI",{});var kye=s(sT);qme=n(kye,"STRONG",{});var Xtt=s(qme);ver=r(Xtt,"longformer"),Xtt.forEach(t),Ter=r(kye," \u2014 "),hq=n(kye,"A",{href:!0});var ztt=s(hq);Fer=r(ztt,"TFLongformerForMaskedLM"),ztt.forEach(t),Cer=r(kye," (Longformer model)"),kye.forEach(t),Mer=i(ee),lT=n(ee,"LI",{});var Rye=s(lT);Gme=n(Rye,"STRONG",{});var Vtt=s(Gme);Eer=r(Vtt,"mobilebert"),Vtt.forEach(t),yer=r(Rye," \u2014 "),pq=n(Rye,"A",{href:!0});var Wtt=s(pq);wer=r(Wtt,"TFMobileBertForMaskedLM"),Wtt.forEach(t),Aer=r(Rye," (MobileBERT model)"),Rye.forEach(t),Ler=i(ee),iT=n(ee,"LI",{});var Sye=s(iT);Ome=n(Sye,"STRONG",{});var Qtt=s(Ome);Ber=r(Qtt,"mpnet"),Qtt.forEach(t),xer=r(Sye," \u2014 "),_q=n(Sye,"A",{href:!0});var Htt=s(_q);ker=r(Htt,"TFMPNetForMaskedLM"),Htt.forEach(t),Rer=r(Sye," (MPNet model)"),Sye.forEach(t),Ser=i(ee),dT=n(ee,"LI",{});var Pye=s(dT);Xme=n(Pye,"STRONG",{});var Utt=s(Xme);Per=r(Utt,"rembert"),Utt.forEach(t),$er=r(Pye," \u2014 "),uq=n(Pye,"A",{href:!0});var Jtt=s(uq);Ier=r(Jtt,"TFRemBertForMaskedLM"),Jtt.forEach(t),jer=r(Pye," (RemBERT model)"),Pye.forEach(t),Ner=i(ee),cT=n(ee,"LI",{});var $ye=s(cT);zme=n($ye,"STRONG",{});var Ytt=s(zme);Der=r(Ytt,"roberta"),Ytt.forEach(t),qer=r($ye," \u2014 "),bq=n($ye,"A",{href:!0});var Ktt=s(bq);Ger=r(Ktt,"TFRobertaForMaskedLM"),Ktt.forEach(t),Oer=r($ye," (RoBERTa model)"),$ye.forEach(t),Xer=i(ee),fT=n(ee,"LI",{});var Iye=s(fT);Vme=n(Iye,"STRONG",{});var Ztt=s(Vme);zer=r(Ztt,"roformer"),Ztt.forEach(t),Ver=r(Iye," \u2014 "),vq=n(Iye,"A",{href:!0});var eat=s(vq);Wer=r(eat,"TFRoFormerForMaskedLM"),eat.forEach(t),Qer=r(Iye," (RoFormer model)"),Iye.forEach(t),Her=i(ee),mT=n(ee,"LI",{});var jye=s(mT);Wme=n(jye,"STRONG",{});var oat=s(Wme);Uer=r(oat,"tapas"),oat.forEach(t),Jer=r(jye," \u2014 "),Tq=n(jye,"A",{href:!0});var rat=s(Tq);Yer=r(rat,"TFTapasForMaskedLM"),rat.forEach(t),Ker=r(jye," (TAPAS model)"),jye.forEach(t),Zer=i(ee),gT=n(ee,"LI",{});var Nye=s(gT);Qme=n(Nye,"STRONG",{});var tat=s(Qme);eor=r(tat,"xlm"),tat.forEach(t),oor=r(Nye," \u2014 "),Fq=n(Nye,"A",{href:!0});var aat=s(Fq);ror=r(aat,"TFXLMWithLMHeadModel"),aat.forEach(t),tor=r(Nye," (XLM model)"),Nye.forEach(t),aor=i(ee),hT=n(ee,"LI",{});var Dye=s(hT);Hme=n(Dye,"STRONG",{});var nat=s(Hme);nor=r(nat,"xlm-roberta"),nat.forEach(t),sor=r(Dye," \u2014 "),Cq=n(Dye,"A",{href:!0});var sat=s(Cq);lor=r(sat,"TFXLMRobertaForMaskedLM"),sat.forEach(t),ior=r(Dye," (XLM-RoBERTa model)"),Dye.forEach(t),ee.forEach(t),dor=i(ha),Ume=n(ha,"P",{});var lat=s(Ume);cor=r(lat,"Examples:"),lat.forEach(t),mor=i(ha),m(my.$$.fragment,ha),ha.forEach(t),jl.forEach(t),E9e=i(d),_c=n(d,"H2",{class:!0});var Pxe=s(_c);pT=n(Pxe,"A",{id:!0,class:!0,href:!0});var iat=s(pT);Jme=n(iat,"SPAN",{});var dat=s(Jme);m(gy.$$.fragment,dat),dat.forEach(t),iat.forEach(t),gor=i(Pxe),Yme=n(Pxe,"SPAN",{});var cat=s(Yme);hor=r(cat,"TFAutoModelForSeq2SeqLM"),cat.forEach(t),Pxe.forEach(t),y9e=i(d),br=n(d,"DIV",{class:!0});var Dl=s(br);m(hy.$$.fragment,Dl),por=i(Dl),uc=n(Dl,"P",{});var eV=s(uc);_or=r(eV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Kme=n(eV,"CODE",{});var fat=s(Kme);uor=r(fat,"from_pretrained()"),fat.forEach(t),bor=r(eV,"class method or the "),Zme=n(eV,"CODE",{});var mat=s(Zme);vor=r(mat,"from_config()"),mat.forEach(t),Tor=r(eV,`class
method.`),eV.forEach(t),For=i(Dl),py=n(Dl,"P",{});var $xe=s(py);Cor=r($xe,"This class cannot be instantiated directly using "),ege=n($xe,"CODE",{});var gat=s(ege);Mor=r(gat,"__init__()"),gat.forEach(t),Eor=r($xe," (throws an error)."),$xe.forEach(t),yor=i(Dl),ft=n(Dl,"DIV",{class:!0});var ql=s(ft);m(_y.$$.fragment,ql),wor=i(ql),oge=n(ql,"P",{});var hat=s(oge);Aor=r(hat,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hat.forEach(t),Lor=i(ql),bc=n(ql,"P",{});var oV=s(bc);Bor=r(oV,`Note:
Loading a model from its configuration file does `),rge=n(oV,"STRONG",{});var pat=s(rge);xor=r(pat,"not"),pat.forEach(t),kor=r(oV,` load the model weights. It only affects the
model\u2019s configuration. Use `),tge=n(oV,"CODE",{});var _at=s(tge);Ror=r(_at,"from_pretrained()"),_at.forEach(t),Sor=r(oV,"to load the model weights."),oV.forEach(t),Por=i(ql),age=n(ql,"P",{});var uat=s(age);$or=r(uat,"Examples:"),uat.forEach(t),Ior=i(ql),m(uy.$$.fragment,ql),ql.forEach(t),jor=i(Dl),bo=n(Dl,"DIV",{class:!0});var pa=s(bo);m(by.$$.fragment,pa),Nor=i(pa),nge=n(pa,"P",{});var bat=s(nge);Dor=r(bat,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bat.forEach(t),qor=i(pa),gn=n(pa,"P",{});var IC=s(gn);Gor=r(IC,"The model class to instantiate is selected based on the "),sge=n(IC,"CODE",{});var vat=s(sge);Oor=r(vat,"model_type"),vat.forEach(t),Xor=r(IC,` property of the config object (either
passed as an argument or loaded from `),lge=n(IC,"CODE",{});var Tat=s(lge);zor=r(Tat,"pretrained_model_name_or_path"),Tat.forEach(t),Vor=r(IC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=n(IC,"CODE",{});var Fat=s(ige);Wor=r(Fat,"pretrained_model_name_or_path"),Fat.forEach(t),Qor=r(IC,":"),IC.forEach(t),Hor=i(pa),pe=n(pa,"UL",{});var Ee=s(pe);_T=n(Ee,"LI",{});var qye=s(_T);dge=n(qye,"STRONG",{});var Cat=s(dge);Uor=r(Cat,"bart"),Cat.forEach(t),Jor=r(qye," \u2014 "),Mq=n(qye,"A",{href:!0});var Mat=s(Mq);Yor=r(Mat,"TFBartForConditionalGeneration"),Mat.forEach(t),Kor=r(qye," (BART model)"),qye.forEach(t),Zor=i(Ee),uT=n(Ee,"LI",{});var Gye=s(uT);cge=n(Gye,"STRONG",{});var Eat=s(cge);err=r(Eat,"blenderbot"),Eat.forEach(t),orr=r(Gye," \u2014 "),Eq=n(Gye,"A",{href:!0});var yat=s(Eq);rrr=r(yat,"TFBlenderbotForConditionalGeneration"),yat.forEach(t),trr=r(Gye," (Blenderbot model)"),Gye.forEach(t),arr=i(Ee),bT=n(Ee,"LI",{});var Oye=s(bT);fge=n(Oye,"STRONG",{});var wat=s(fge);nrr=r(wat,"blenderbot-small"),wat.forEach(t),srr=r(Oye," \u2014 "),yq=n(Oye,"A",{href:!0});var Aat=s(yq);lrr=r(Aat,"TFBlenderbotSmallForConditionalGeneration"),Aat.forEach(t),irr=r(Oye," (BlenderbotSmall model)"),Oye.forEach(t),drr=i(Ee),vT=n(Ee,"LI",{});var Xye=s(vT);mge=n(Xye,"STRONG",{});var Lat=s(mge);crr=r(Lat,"encoder-decoder"),Lat.forEach(t),frr=r(Xye," \u2014 "),wq=n(Xye,"A",{href:!0});var Bat=s(wq);mrr=r(Bat,"TFEncoderDecoderModel"),Bat.forEach(t),grr=r(Xye," (Encoder decoder model)"),Xye.forEach(t),hrr=i(Ee),TT=n(Ee,"LI",{});var zye=s(TT);gge=n(zye,"STRONG",{});var xat=s(gge);prr=r(xat,"led"),xat.forEach(t),_rr=r(zye," \u2014 "),Aq=n(zye,"A",{href:!0});var kat=s(Aq);urr=r(kat,"TFLEDForConditionalGeneration"),kat.forEach(t),brr=r(zye," (LED model)"),zye.forEach(t),vrr=i(Ee),FT=n(Ee,"LI",{});var Vye=s(FT);hge=n(Vye,"STRONG",{});var Rat=s(hge);Trr=r(Rat,"marian"),Rat.forEach(t),Frr=r(Vye," \u2014 "),Lq=n(Vye,"A",{href:!0});var Sat=s(Lq);Crr=r(Sat,"TFMarianMTModel"),Sat.forEach(t),Mrr=r(Vye," (Marian model)"),Vye.forEach(t),Err=i(Ee),CT=n(Ee,"LI",{});var Wye=s(CT);pge=n(Wye,"STRONG",{});var Pat=s(pge);yrr=r(Pat,"mbart"),Pat.forEach(t),wrr=r(Wye," \u2014 "),Bq=n(Wye,"A",{href:!0});var $at=s(Bq);Arr=r($at,"TFMBartForConditionalGeneration"),$at.forEach(t),Lrr=r(Wye," (mBART model)"),Wye.forEach(t),Brr=i(Ee),MT=n(Ee,"LI",{});var Qye=s(MT);_ge=n(Qye,"STRONG",{});var Iat=s(_ge);xrr=r(Iat,"mt5"),Iat.forEach(t),krr=r(Qye," \u2014 "),xq=n(Qye,"A",{href:!0});var jat=s(xq);Rrr=r(jat,"TFMT5ForConditionalGeneration"),jat.forEach(t),Srr=r(Qye," (mT5 model)"),Qye.forEach(t),Prr=i(Ee),ET=n(Ee,"LI",{});var Hye=s(ET);uge=n(Hye,"STRONG",{});var Nat=s(uge);$rr=r(Nat,"pegasus"),Nat.forEach(t),Irr=r(Hye," \u2014 "),kq=n(Hye,"A",{href:!0});var Dat=s(kq);jrr=r(Dat,"TFPegasusForConditionalGeneration"),Dat.forEach(t),Nrr=r(Hye," (Pegasus model)"),Hye.forEach(t),Drr=i(Ee),yT=n(Ee,"LI",{});var Uye=s(yT);bge=n(Uye,"STRONG",{});var qat=s(bge);qrr=r(qat,"t5"),qat.forEach(t),Grr=r(Uye," \u2014 "),Rq=n(Uye,"A",{href:!0});var Gat=s(Rq);Orr=r(Gat,"TFT5ForConditionalGeneration"),Gat.forEach(t),Xrr=r(Uye," (T5 model)"),Uye.forEach(t),Ee.forEach(t),zrr=i(pa),vge=n(pa,"P",{});var Oat=s(vge);Vrr=r(Oat,"Examples:"),Oat.forEach(t),Wrr=i(pa),m(vy.$$.fragment,pa),pa.forEach(t),Dl.forEach(t),w9e=i(d),vc=n(d,"H2",{class:!0});var Ixe=s(vc);wT=n(Ixe,"A",{id:!0,class:!0,href:!0});var Xat=s(wT);Tge=n(Xat,"SPAN",{});var zat=s(Tge);m(Ty.$$.fragment,zat),zat.forEach(t),Xat.forEach(t),Qrr=i(Ixe),Fge=n(Ixe,"SPAN",{});var Vat=s(Fge);Hrr=r(Vat,"TFAutoModelForSequenceClassification"),Vat.forEach(t),Ixe.forEach(t),A9e=i(d),vr=n(d,"DIV",{class:!0});var Gl=s(vr);m(Fy.$$.fragment,Gl),Urr=i(Gl),Tc=n(Gl,"P",{});var rV=s(Tc);Jrr=r(rV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Cge=n(rV,"CODE",{});var Wat=s(Cge);Yrr=r(Wat,"from_pretrained()"),Wat.forEach(t),Krr=r(rV,"class method or the "),Mge=n(rV,"CODE",{});var Qat=s(Mge);Zrr=r(Qat,"from_config()"),Qat.forEach(t),etr=r(rV,`class
method.`),rV.forEach(t),otr=i(Gl),Cy=n(Gl,"P",{});var jxe=s(Cy);rtr=r(jxe,"This class cannot be instantiated directly using "),Ege=n(jxe,"CODE",{});var Hat=s(Ege);ttr=r(Hat,"__init__()"),Hat.forEach(t),atr=r(jxe," (throws an error)."),jxe.forEach(t),ntr=i(Gl),mt=n(Gl,"DIV",{class:!0});var Ol=s(mt);m(My.$$.fragment,Ol),str=i(Ol),yge=n(Ol,"P",{});var Uat=s(yge);ltr=r(Uat,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Uat.forEach(t),itr=i(Ol),Fc=n(Ol,"P",{});var tV=s(Fc);dtr=r(tV,`Note:
Loading a model from its configuration file does `),wge=n(tV,"STRONG",{});var Jat=s(wge);ctr=r(Jat,"not"),Jat.forEach(t),ftr=r(tV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Age=n(tV,"CODE",{});var Yat=s(Age);mtr=r(Yat,"from_pretrained()"),Yat.forEach(t),gtr=r(tV,"to load the model weights."),tV.forEach(t),htr=i(Ol),Lge=n(Ol,"P",{});var Kat=s(Lge);ptr=r(Kat,"Examples:"),Kat.forEach(t),_tr=i(Ol),m(Ey.$$.fragment,Ol),Ol.forEach(t),utr=i(Gl),vo=n(Gl,"DIV",{class:!0});var _a=s(vo);m(yy.$$.fragment,_a),btr=i(_a),Bge=n(_a,"P",{});var Zat=s(Bge);vtr=r(Zat,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Zat.forEach(t),Ttr=i(_a),hn=n(_a,"P",{});var jC=s(hn);Ftr=r(jC,"The model class to instantiate is selected based on the "),xge=n(jC,"CODE",{});var ent=s(xge);Ctr=r(ent,"model_type"),ent.forEach(t),Mtr=r(jC,` property of the config object (either
passed as an argument or loaded from `),kge=n(jC,"CODE",{});var ont=s(kge);Etr=r(ont,"pretrained_model_name_or_path"),ont.forEach(t),ytr=r(jC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=n(jC,"CODE",{});var rnt=s(Rge);wtr=r(rnt,"pretrained_model_name_or_path"),rnt.forEach(t),Atr=r(jC,":"),jC.forEach(t),Ltr=i(_a),X=n(_a,"UL",{});var W=s(X);AT=n(W,"LI",{});var Jye=s(AT);Sge=n(Jye,"STRONG",{});var tnt=s(Sge);Btr=r(tnt,"albert"),tnt.forEach(t),xtr=r(Jye," \u2014 "),Sq=n(Jye,"A",{href:!0});var ant=s(Sq);ktr=r(ant,"TFAlbertForSequenceClassification"),ant.forEach(t),Rtr=r(Jye," (ALBERT model)"),Jye.forEach(t),Str=i(W),LT=n(W,"LI",{});var Yye=s(LT);Pge=n(Yye,"STRONG",{});var nnt=s(Pge);Ptr=r(nnt,"bert"),nnt.forEach(t),$tr=r(Yye," \u2014 "),Pq=n(Yye,"A",{href:!0});var snt=s(Pq);Itr=r(snt,"TFBertForSequenceClassification"),snt.forEach(t),jtr=r(Yye," (BERT model)"),Yye.forEach(t),Ntr=i(W),BT=n(W,"LI",{});var Kye=s(BT);$ge=n(Kye,"STRONG",{});var lnt=s($ge);Dtr=r(lnt,"camembert"),lnt.forEach(t),qtr=r(Kye," \u2014 "),$q=n(Kye,"A",{href:!0});var int=s($q);Gtr=r(int,"TFCamembertForSequenceClassification"),int.forEach(t),Otr=r(Kye," (CamemBERT model)"),Kye.forEach(t),Xtr=i(W),xT=n(W,"LI",{});var Zye=s(xT);Ige=n(Zye,"STRONG",{});var dnt=s(Ige);ztr=r(dnt,"convbert"),dnt.forEach(t),Vtr=r(Zye," \u2014 "),Iq=n(Zye,"A",{href:!0});var cnt=s(Iq);Wtr=r(cnt,"TFConvBertForSequenceClassification"),cnt.forEach(t),Qtr=r(Zye," (ConvBERT model)"),Zye.forEach(t),Htr=i(W),kT=n(W,"LI",{});var ewe=s(kT);jge=n(ewe,"STRONG",{});var fnt=s(jge);Utr=r(fnt,"ctrl"),fnt.forEach(t),Jtr=r(ewe," \u2014 "),jq=n(ewe,"A",{href:!0});var mnt=s(jq);Ytr=r(mnt,"TFCTRLForSequenceClassification"),mnt.forEach(t),Ktr=r(ewe," (CTRL model)"),ewe.forEach(t),Ztr=i(W),RT=n(W,"LI",{});var owe=s(RT);Nge=n(owe,"STRONG",{});var gnt=s(Nge);ear=r(gnt,"deberta"),gnt.forEach(t),oar=r(owe," \u2014 "),Nq=n(owe,"A",{href:!0});var hnt=s(Nq);rar=r(hnt,"TFDebertaForSequenceClassification"),hnt.forEach(t),tar=r(owe," (DeBERTa model)"),owe.forEach(t),aar=i(W),ST=n(W,"LI",{});var rwe=s(ST);Dge=n(rwe,"STRONG",{});var pnt=s(Dge);nar=r(pnt,"deberta-v2"),pnt.forEach(t),sar=r(rwe," \u2014 "),Dq=n(rwe,"A",{href:!0});var _nt=s(Dq);lar=r(_nt,"TFDebertaV2ForSequenceClassification"),_nt.forEach(t),iar=r(rwe," (DeBERTa-v2 model)"),rwe.forEach(t),dar=i(W),PT=n(W,"LI",{});var twe=s(PT);qge=n(twe,"STRONG",{});var unt=s(qge);car=r(unt,"distilbert"),unt.forEach(t),far=r(twe," \u2014 "),qq=n(twe,"A",{href:!0});var bnt=s(qq);mar=r(bnt,"TFDistilBertForSequenceClassification"),bnt.forEach(t),gar=r(twe," (DistilBERT model)"),twe.forEach(t),har=i(W),$T=n(W,"LI",{});var awe=s($T);Gge=n(awe,"STRONG",{});var vnt=s(Gge);par=r(vnt,"electra"),vnt.forEach(t),_ar=r(awe," \u2014 "),Gq=n(awe,"A",{href:!0});var Tnt=s(Gq);uar=r(Tnt,"TFElectraForSequenceClassification"),Tnt.forEach(t),bar=r(awe," (ELECTRA model)"),awe.forEach(t),Tar=i(W),IT=n(W,"LI",{});var nwe=s(IT);Oge=n(nwe,"STRONG",{});var Fnt=s(Oge);Far=r(Fnt,"flaubert"),Fnt.forEach(t),Car=r(nwe," \u2014 "),Oq=n(nwe,"A",{href:!0});var Cnt=s(Oq);Mar=r(Cnt,"TFFlaubertForSequenceClassification"),Cnt.forEach(t),Ear=r(nwe," (FlauBERT model)"),nwe.forEach(t),yar=i(W),jT=n(W,"LI",{});var swe=s(jT);Xge=n(swe,"STRONG",{});var Mnt=s(Xge);war=r(Mnt,"funnel"),Mnt.forEach(t),Aar=r(swe," \u2014 "),Xq=n(swe,"A",{href:!0});var Ent=s(Xq);Lar=r(Ent,"TFFunnelForSequenceClassification"),Ent.forEach(t),Bar=r(swe," (Funnel Transformer model)"),swe.forEach(t),xar=i(W),NT=n(W,"LI",{});var lwe=s(NT);zge=n(lwe,"STRONG",{});var ynt=s(zge);kar=r(ynt,"gpt2"),ynt.forEach(t),Rar=r(lwe," \u2014 "),zq=n(lwe,"A",{href:!0});var wnt=s(zq);Sar=r(wnt,"TFGPT2ForSequenceClassification"),wnt.forEach(t),Par=r(lwe," (OpenAI GPT-2 model)"),lwe.forEach(t),$ar=i(W),DT=n(W,"LI",{});var iwe=s(DT);Vge=n(iwe,"STRONG",{});var Ant=s(Vge);Iar=r(Ant,"layoutlm"),Ant.forEach(t),jar=r(iwe," \u2014 "),Vq=n(iwe,"A",{href:!0});var Lnt=s(Vq);Nar=r(Lnt,"TFLayoutLMForSequenceClassification"),Lnt.forEach(t),Dar=r(iwe," (LayoutLM model)"),iwe.forEach(t),qar=i(W),qT=n(W,"LI",{});var dwe=s(qT);Wge=n(dwe,"STRONG",{});var Bnt=s(Wge);Gar=r(Bnt,"longformer"),Bnt.forEach(t),Oar=r(dwe," \u2014 "),Wq=n(dwe,"A",{href:!0});var xnt=s(Wq);Xar=r(xnt,"TFLongformerForSequenceClassification"),xnt.forEach(t),zar=r(dwe," (Longformer model)"),dwe.forEach(t),Var=i(W),GT=n(W,"LI",{});var cwe=s(GT);Qge=n(cwe,"STRONG",{});var knt=s(Qge);War=r(knt,"mobilebert"),knt.forEach(t),Qar=r(cwe," \u2014 "),Qq=n(cwe,"A",{href:!0});var Rnt=s(Qq);Har=r(Rnt,"TFMobileBertForSequenceClassification"),Rnt.forEach(t),Uar=r(cwe," (MobileBERT model)"),cwe.forEach(t),Jar=i(W),OT=n(W,"LI",{});var fwe=s(OT);Hge=n(fwe,"STRONG",{});var Snt=s(Hge);Yar=r(Snt,"mpnet"),Snt.forEach(t),Kar=r(fwe," \u2014 "),Hq=n(fwe,"A",{href:!0});var Pnt=s(Hq);Zar=r(Pnt,"TFMPNetForSequenceClassification"),Pnt.forEach(t),enr=r(fwe," (MPNet model)"),fwe.forEach(t),onr=i(W),XT=n(W,"LI",{});var mwe=s(XT);Uge=n(mwe,"STRONG",{});var $nt=s(Uge);rnr=r($nt,"openai-gpt"),$nt.forEach(t),tnr=r(mwe," \u2014 "),Uq=n(mwe,"A",{href:!0});var Int=s(Uq);anr=r(Int,"TFOpenAIGPTForSequenceClassification"),Int.forEach(t),nnr=r(mwe," (OpenAI GPT model)"),mwe.forEach(t),snr=i(W),zT=n(W,"LI",{});var gwe=s(zT);Jge=n(gwe,"STRONG",{});var jnt=s(Jge);lnr=r(jnt,"rembert"),jnt.forEach(t),inr=r(gwe," \u2014 "),Jq=n(gwe,"A",{href:!0});var Nnt=s(Jq);dnr=r(Nnt,"TFRemBertForSequenceClassification"),Nnt.forEach(t),cnr=r(gwe," (RemBERT model)"),gwe.forEach(t),fnr=i(W),VT=n(W,"LI",{});var hwe=s(VT);Yge=n(hwe,"STRONG",{});var Dnt=s(Yge);mnr=r(Dnt,"roberta"),Dnt.forEach(t),gnr=r(hwe," \u2014 "),Yq=n(hwe,"A",{href:!0});var qnt=s(Yq);hnr=r(qnt,"TFRobertaForSequenceClassification"),qnt.forEach(t),pnr=r(hwe," (RoBERTa model)"),hwe.forEach(t),_nr=i(W),WT=n(W,"LI",{});var pwe=s(WT);Kge=n(pwe,"STRONG",{});var Gnt=s(Kge);unr=r(Gnt,"roformer"),Gnt.forEach(t),bnr=r(pwe," \u2014 "),Kq=n(pwe,"A",{href:!0});var Ont=s(Kq);vnr=r(Ont,"TFRoFormerForSequenceClassification"),Ont.forEach(t),Tnr=r(pwe," (RoFormer model)"),pwe.forEach(t),Fnr=i(W),QT=n(W,"LI",{});var _we=s(QT);Zge=n(_we,"STRONG",{});var Xnt=s(Zge);Cnr=r(Xnt,"tapas"),Xnt.forEach(t),Mnr=r(_we," \u2014 "),Zq=n(_we,"A",{href:!0});var znt=s(Zq);Enr=r(znt,"TFTapasForSequenceClassification"),znt.forEach(t),ynr=r(_we," (TAPAS model)"),_we.forEach(t),wnr=i(W),HT=n(W,"LI",{});var uwe=s(HT);ehe=n(uwe,"STRONG",{});var Vnt=s(ehe);Anr=r(Vnt,"transfo-xl"),Vnt.forEach(t),Lnr=r(uwe," \u2014 "),eG=n(uwe,"A",{href:!0});var Wnt=s(eG);Bnr=r(Wnt,"TFTransfoXLForSequenceClassification"),Wnt.forEach(t),xnr=r(uwe," (Transformer-XL model)"),uwe.forEach(t),knr=i(W),UT=n(W,"LI",{});var bwe=s(UT);ohe=n(bwe,"STRONG",{});var Qnt=s(ohe);Rnr=r(Qnt,"xlm"),Qnt.forEach(t),Snr=r(bwe," \u2014 "),oG=n(bwe,"A",{href:!0});var Hnt=s(oG);Pnr=r(Hnt,"TFXLMForSequenceClassification"),Hnt.forEach(t),$nr=r(bwe," (XLM model)"),bwe.forEach(t),Inr=i(W),JT=n(W,"LI",{});var vwe=s(JT);rhe=n(vwe,"STRONG",{});var Unt=s(rhe);jnr=r(Unt,"xlm-roberta"),Unt.forEach(t),Nnr=r(vwe," \u2014 "),rG=n(vwe,"A",{href:!0});var Jnt=s(rG);Dnr=r(Jnt,"TFXLMRobertaForSequenceClassification"),Jnt.forEach(t),qnr=r(vwe," (XLM-RoBERTa model)"),vwe.forEach(t),Gnr=i(W),YT=n(W,"LI",{});var Twe=s(YT);the=n(Twe,"STRONG",{});var Ynt=s(the);Onr=r(Ynt,"xlnet"),Ynt.forEach(t),Xnr=r(Twe," \u2014 "),tG=n(Twe,"A",{href:!0});var Knt=s(tG);znr=r(Knt,"TFXLNetForSequenceClassification"),Knt.forEach(t),Vnr=r(Twe," (XLNet model)"),Twe.forEach(t),W.forEach(t),Wnr=i(_a),ahe=n(_a,"P",{});var Znt=s(ahe);Qnr=r(Znt,"Examples:"),Znt.forEach(t),Hnr=i(_a),m(wy.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),L9e=i(d),Cc=n(d,"H2",{class:!0});var Nxe=s(Cc);KT=n(Nxe,"A",{id:!0,class:!0,href:!0});var est=s(KT);nhe=n(est,"SPAN",{});var ost=s(nhe);m(Ay.$$.fragment,ost),ost.forEach(t),est.forEach(t),Unr=i(Nxe),she=n(Nxe,"SPAN",{});var rst=s(she);Jnr=r(rst,"TFAutoModelForMultipleChoice"),rst.forEach(t),Nxe.forEach(t),B9e=i(d),Tr=n(d,"DIV",{class:!0});var Xl=s(Tr);m(Ly.$$.fragment,Xl),Ynr=i(Xl),Mc=n(Xl,"P",{});var aV=s(Mc);Knr=r(aV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lhe=n(aV,"CODE",{});var tst=s(lhe);Znr=r(tst,"from_pretrained()"),tst.forEach(t),esr=r(aV,"class method or the "),ihe=n(aV,"CODE",{});var ast=s(ihe);osr=r(ast,"from_config()"),ast.forEach(t),rsr=r(aV,`class
method.`),aV.forEach(t),tsr=i(Xl),By=n(Xl,"P",{});var Dxe=s(By);asr=r(Dxe,"This class cannot be instantiated directly using "),dhe=n(Dxe,"CODE",{});var nst=s(dhe);nsr=r(nst,"__init__()"),nst.forEach(t),ssr=r(Dxe," (throws an error)."),Dxe.forEach(t),lsr=i(Xl),gt=n(Xl,"DIV",{class:!0});var zl=s(gt);m(xy.$$.fragment,zl),isr=i(zl),che=n(zl,"P",{});var sst=s(che);dsr=r(sst,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sst.forEach(t),csr=i(zl),Ec=n(zl,"P",{});var nV=s(Ec);fsr=r(nV,`Note:
Loading a model from its configuration file does `),fhe=n(nV,"STRONG",{});var lst=s(fhe);msr=r(lst,"not"),lst.forEach(t),gsr=r(nV,` load the model weights. It only affects the
model\u2019s configuration. Use `),mhe=n(nV,"CODE",{});var ist=s(mhe);hsr=r(ist,"from_pretrained()"),ist.forEach(t),psr=r(nV,"to load the model weights."),nV.forEach(t),_sr=i(zl),ghe=n(zl,"P",{});var dst=s(ghe);usr=r(dst,"Examples:"),dst.forEach(t),bsr=i(zl),m(ky.$$.fragment,zl),zl.forEach(t),vsr=i(Xl),To=n(Xl,"DIV",{class:!0});var ua=s(To);m(Ry.$$.fragment,ua),Tsr=i(ua),hhe=n(ua,"P",{});var cst=s(hhe);Fsr=r(cst,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),cst.forEach(t),Csr=i(ua),pn=n(ua,"P",{});var NC=s(pn);Msr=r(NC,"The model class to instantiate is selected based on the "),phe=n(NC,"CODE",{});var fst=s(phe);Esr=r(fst,"model_type"),fst.forEach(t),ysr=r(NC,` property of the config object (either
passed as an argument or loaded from `),_he=n(NC,"CODE",{});var mst=s(_he);wsr=r(mst,"pretrained_model_name_or_path"),mst.forEach(t),Asr=r(NC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=n(NC,"CODE",{});var gst=s(uhe);Lsr=r(gst,"pretrained_model_name_or_path"),gst.forEach(t),Bsr=r(NC,":"),NC.forEach(t),xsr=i(ua),te=n(ua,"UL",{});var ne=s(te);ZT=n(ne,"LI",{});var Fwe=s(ZT);bhe=n(Fwe,"STRONG",{});var hst=s(bhe);ksr=r(hst,"albert"),hst.forEach(t),Rsr=r(Fwe," \u2014 "),aG=n(Fwe,"A",{href:!0});var pst=s(aG);Ssr=r(pst,"TFAlbertForMultipleChoice"),pst.forEach(t),Psr=r(Fwe," (ALBERT model)"),Fwe.forEach(t),$sr=i(ne),e7=n(ne,"LI",{});var Cwe=s(e7);vhe=n(Cwe,"STRONG",{});var _st=s(vhe);Isr=r(_st,"bert"),_st.forEach(t),jsr=r(Cwe," \u2014 "),nG=n(Cwe,"A",{href:!0});var ust=s(nG);Nsr=r(ust,"TFBertForMultipleChoice"),ust.forEach(t),Dsr=r(Cwe," (BERT model)"),Cwe.forEach(t),qsr=i(ne),o7=n(ne,"LI",{});var Mwe=s(o7);The=n(Mwe,"STRONG",{});var bst=s(The);Gsr=r(bst,"camembert"),bst.forEach(t),Osr=r(Mwe," \u2014 "),sG=n(Mwe,"A",{href:!0});var vst=s(sG);Xsr=r(vst,"TFCamembertForMultipleChoice"),vst.forEach(t),zsr=r(Mwe," (CamemBERT model)"),Mwe.forEach(t),Vsr=i(ne),r7=n(ne,"LI",{});var Ewe=s(r7);Fhe=n(Ewe,"STRONG",{});var Tst=s(Fhe);Wsr=r(Tst,"convbert"),Tst.forEach(t),Qsr=r(Ewe," \u2014 "),lG=n(Ewe,"A",{href:!0});var Fst=s(lG);Hsr=r(Fst,"TFConvBertForMultipleChoice"),Fst.forEach(t),Usr=r(Ewe," (ConvBERT model)"),Ewe.forEach(t),Jsr=i(ne),t7=n(ne,"LI",{});var ywe=s(t7);Che=n(ywe,"STRONG",{});var Cst=s(Che);Ysr=r(Cst,"distilbert"),Cst.forEach(t),Ksr=r(ywe," \u2014 "),iG=n(ywe,"A",{href:!0});var Mst=s(iG);Zsr=r(Mst,"TFDistilBertForMultipleChoice"),Mst.forEach(t),elr=r(ywe," (DistilBERT model)"),ywe.forEach(t),olr=i(ne),a7=n(ne,"LI",{});var wwe=s(a7);Mhe=n(wwe,"STRONG",{});var Est=s(Mhe);rlr=r(Est,"electra"),Est.forEach(t),tlr=r(wwe," \u2014 "),dG=n(wwe,"A",{href:!0});var yst=s(dG);alr=r(yst,"TFElectraForMultipleChoice"),yst.forEach(t),nlr=r(wwe," (ELECTRA model)"),wwe.forEach(t),slr=i(ne),n7=n(ne,"LI",{});var Awe=s(n7);Ehe=n(Awe,"STRONG",{});var wst=s(Ehe);llr=r(wst,"flaubert"),wst.forEach(t),ilr=r(Awe," \u2014 "),cG=n(Awe,"A",{href:!0});var Ast=s(cG);dlr=r(Ast,"TFFlaubertForMultipleChoice"),Ast.forEach(t),clr=r(Awe," (FlauBERT model)"),Awe.forEach(t),flr=i(ne),s7=n(ne,"LI",{});var Lwe=s(s7);yhe=n(Lwe,"STRONG",{});var Lst=s(yhe);mlr=r(Lst,"funnel"),Lst.forEach(t),glr=r(Lwe," \u2014 "),fG=n(Lwe,"A",{href:!0});var Bst=s(fG);hlr=r(Bst,"TFFunnelForMultipleChoice"),Bst.forEach(t),plr=r(Lwe," (Funnel Transformer model)"),Lwe.forEach(t),_lr=i(ne),l7=n(ne,"LI",{});var Bwe=s(l7);whe=n(Bwe,"STRONG",{});var xst=s(whe);ulr=r(xst,"longformer"),xst.forEach(t),blr=r(Bwe," \u2014 "),mG=n(Bwe,"A",{href:!0});var kst=s(mG);vlr=r(kst,"TFLongformerForMultipleChoice"),kst.forEach(t),Tlr=r(Bwe," (Longformer model)"),Bwe.forEach(t),Flr=i(ne),i7=n(ne,"LI",{});var xwe=s(i7);Ahe=n(xwe,"STRONG",{});var Rst=s(Ahe);Clr=r(Rst,"mobilebert"),Rst.forEach(t),Mlr=r(xwe," \u2014 "),gG=n(xwe,"A",{href:!0});var Sst=s(gG);Elr=r(Sst,"TFMobileBertForMultipleChoice"),Sst.forEach(t),ylr=r(xwe," (MobileBERT model)"),xwe.forEach(t),wlr=i(ne),d7=n(ne,"LI",{});var kwe=s(d7);Lhe=n(kwe,"STRONG",{});var Pst=s(Lhe);Alr=r(Pst,"mpnet"),Pst.forEach(t),Llr=r(kwe," \u2014 "),hG=n(kwe,"A",{href:!0});var $st=s(hG);Blr=r($st,"TFMPNetForMultipleChoice"),$st.forEach(t),xlr=r(kwe," (MPNet model)"),kwe.forEach(t),klr=i(ne),c7=n(ne,"LI",{});var Rwe=s(c7);Bhe=n(Rwe,"STRONG",{});var Ist=s(Bhe);Rlr=r(Ist,"rembert"),Ist.forEach(t),Slr=r(Rwe," \u2014 "),pG=n(Rwe,"A",{href:!0});var jst=s(pG);Plr=r(jst,"TFRemBertForMultipleChoice"),jst.forEach(t),$lr=r(Rwe," (RemBERT model)"),Rwe.forEach(t),Ilr=i(ne),f7=n(ne,"LI",{});var Swe=s(f7);xhe=n(Swe,"STRONG",{});var Nst=s(xhe);jlr=r(Nst,"roberta"),Nst.forEach(t),Nlr=r(Swe," \u2014 "),_G=n(Swe,"A",{href:!0});var Dst=s(_G);Dlr=r(Dst,"TFRobertaForMultipleChoice"),Dst.forEach(t),qlr=r(Swe," (RoBERTa model)"),Swe.forEach(t),Glr=i(ne),m7=n(ne,"LI",{});var Pwe=s(m7);khe=n(Pwe,"STRONG",{});var qst=s(khe);Olr=r(qst,"roformer"),qst.forEach(t),Xlr=r(Pwe," \u2014 "),uG=n(Pwe,"A",{href:!0});var Gst=s(uG);zlr=r(Gst,"TFRoFormerForMultipleChoice"),Gst.forEach(t),Vlr=r(Pwe," (RoFormer model)"),Pwe.forEach(t),Wlr=i(ne),g7=n(ne,"LI",{});var $we=s(g7);Rhe=n($we,"STRONG",{});var Ost=s(Rhe);Qlr=r(Ost,"xlm"),Ost.forEach(t),Hlr=r($we," \u2014 "),bG=n($we,"A",{href:!0});var Xst=s(bG);Ulr=r(Xst,"TFXLMForMultipleChoice"),Xst.forEach(t),Jlr=r($we," (XLM model)"),$we.forEach(t),Ylr=i(ne),h7=n(ne,"LI",{});var Iwe=s(h7);She=n(Iwe,"STRONG",{});var zst=s(She);Klr=r(zst,"xlm-roberta"),zst.forEach(t),Zlr=r(Iwe," \u2014 "),vG=n(Iwe,"A",{href:!0});var Vst=s(vG);eir=r(Vst,"TFXLMRobertaForMultipleChoice"),Vst.forEach(t),oir=r(Iwe," (XLM-RoBERTa model)"),Iwe.forEach(t),rir=i(ne),p7=n(ne,"LI",{});var jwe=s(p7);Phe=n(jwe,"STRONG",{});var Wst=s(Phe);tir=r(Wst,"xlnet"),Wst.forEach(t),air=r(jwe," \u2014 "),TG=n(jwe,"A",{href:!0});var Qst=s(TG);nir=r(Qst,"TFXLNetForMultipleChoice"),Qst.forEach(t),sir=r(jwe," (XLNet model)"),jwe.forEach(t),ne.forEach(t),lir=i(ua),$he=n(ua,"P",{});var Hst=s($he);iir=r(Hst,"Examples:"),Hst.forEach(t),dir=i(ua),m(Sy.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),x9e=i(d),yc=n(d,"H2",{class:!0});var qxe=s(yc);_7=n(qxe,"A",{id:!0,class:!0,href:!0});var Ust=s(_7);Ihe=n(Ust,"SPAN",{});var Jst=s(Ihe);m(Py.$$.fragment,Jst),Jst.forEach(t),Ust.forEach(t),cir=i(qxe),jhe=n(qxe,"SPAN",{});var Yst=s(jhe);fir=r(Yst,"TFAutoModelForTableQuestionAnswering"),Yst.forEach(t),qxe.forEach(t),k9e=i(d),Fr=n(d,"DIV",{class:!0});var Vl=s(Fr);m($y.$$.fragment,Vl),mir=i(Vl),wc=n(Vl,"P",{});var sV=s(wc);gir=r(sV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Nhe=n(sV,"CODE",{});var Kst=s(Nhe);hir=r(Kst,"from_pretrained()"),Kst.forEach(t),pir=r(sV,"class method or the "),Dhe=n(sV,"CODE",{});var Zst=s(Dhe);_ir=r(Zst,"from_config()"),Zst.forEach(t),uir=r(sV,`class
method.`),sV.forEach(t),bir=i(Vl),Iy=n(Vl,"P",{});var Gxe=s(Iy);vir=r(Gxe,"This class cannot be instantiated directly using "),qhe=n(Gxe,"CODE",{});var elt=s(qhe);Tir=r(elt,"__init__()"),elt.forEach(t),Fir=r(Gxe," (throws an error)."),Gxe.forEach(t),Cir=i(Vl),ht=n(Vl,"DIV",{class:!0});var Wl=s(ht);m(jy.$$.fragment,Wl),Mir=i(Wl),Ghe=n(Wl,"P",{});var olt=s(Ghe);Eir=r(olt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),olt.forEach(t),yir=i(Wl),Ac=n(Wl,"P",{});var lV=s(Ac);wir=r(lV,`Note:
Loading a model from its configuration file does `),Ohe=n(lV,"STRONG",{});var rlt=s(Ohe);Air=r(rlt,"not"),rlt.forEach(t),Lir=r(lV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xhe=n(lV,"CODE",{});var tlt=s(Xhe);Bir=r(tlt,"from_pretrained()"),tlt.forEach(t),xir=r(lV,"to load the model weights."),lV.forEach(t),kir=i(Wl),zhe=n(Wl,"P",{});var alt=s(zhe);Rir=r(alt,"Examples:"),alt.forEach(t),Sir=i(Wl),m(Ny.$$.fragment,Wl),Wl.forEach(t),Pir=i(Vl),Fo=n(Vl,"DIV",{class:!0});var ba=s(Fo);m(Dy.$$.fragment,ba),$ir=i(ba),Vhe=n(ba,"P",{});var nlt=s(Vhe);Iir=r(nlt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),nlt.forEach(t),jir=i(ba),_n=n(ba,"P",{});var DC=s(_n);Nir=r(DC,"The model class to instantiate is selected based on the "),Whe=n(DC,"CODE",{});var slt=s(Whe);Dir=r(slt,"model_type"),slt.forEach(t),qir=r(DC,` property of the config object (either
passed as an argument or loaded from `),Qhe=n(DC,"CODE",{});var llt=s(Qhe);Gir=r(llt,"pretrained_model_name_or_path"),llt.forEach(t),Oir=r(DC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=n(DC,"CODE",{});var ilt=s(Hhe);Xir=r(ilt,"pretrained_model_name_or_path"),ilt.forEach(t),zir=r(DC,":"),DC.forEach(t),Vir=i(ba),Uhe=n(ba,"UL",{});var dlt=s(Uhe);u7=n(dlt,"LI",{});var Nwe=s(u7);Jhe=n(Nwe,"STRONG",{});var clt=s(Jhe);Wir=r(clt,"tapas"),clt.forEach(t),Qir=r(Nwe," \u2014 "),FG=n(Nwe,"A",{href:!0});var flt=s(FG);Hir=r(flt,"TFTapasForQuestionAnswering"),flt.forEach(t),Uir=r(Nwe," (TAPAS model)"),Nwe.forEach(t),dlt.forEach(t),Jir=i(ba),Yhe=n(ba,"P",{});var mlt=s(Yhe);Yir=r(mlt,"Examples:"),mlt.forEach(t),Kir=i(ba),m(qy.$$.fragment,ba),ba.forEach(t),Vl.forEach(t),R9e=i(d),Lc=n(d,"H2",{class:!0});var Oxe=s(Lc);b7=n(Oxe,"A",{id:!0,class:!0,href:!0});var glt=s(b7);Khe=n(glt,"SPAN",{});var hlt=s(Khe);m(Gy.$$.fragment,hlt),hlt.forEach(t),glt.forEach(t),Zir=i(Oxe),Zhe=n(Oxe,"SPAN",{});var plt=s(Zhe);edr=r(plt,"TFAutoModelForTokenClassification"),plt.forEach(t),Oxe.forEach(t),S9e=i(d),Cr=n(d,"DIV",{class:!0});var Ql=s(Cr);m(Oy.$$.fragment,Ql),odr=i(Ql),Bc=n(Ql,"P",{});var iV=s(Bc);rdr=r(iV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),epe=n(iV,"CODE",{});var _lt=s(epe);tdr=r(_lt,"from_pretrained()"),_lt.forEach(t),adr=r(iV,"class method or the "),ope=n(iV,"CODE",{});var ult=s(ope);ndr=r(ult,"from_config()"),ult.forEach(t),sdr=r(iV,`class
method.`),iV.forEach(t),ldr=i(Ql),Xy=n(Ql,"P",{});var Xxe=s(Xy);idr=r(Xxe,"This class cannot be instantiated directly using "),rpe=n(Xxe,"CODE",{});var blt=s(rpe);ddr=r(blt,"__init__()"),blt.forEach(t),cdr=r(Xxe," (throws an error)."),Xxe.forEach(t),fdr=i(Ql),pt=n(Ql,"DIV",{class:!0});var Hl=s(pt);m(zy.$$.fragment,Hl),mdr=i(Hl),tpe=n(Hl,"P",{});var vlt=s(tpe);gdr=r(vlt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),vlt.forEach(t),hdr=i(Hl),xc=n(Hl,"P",{});var dV=s(xc);pdr=r(dV,`Note:
Loading a model from its configuration file does `),ape=n(dV,"STRONG",{});var Tlt=s(ape);_dr=r(Tlt,"not"),Tlt.forEach(t),udr=r(dV,` load the model weights. It only affects the
model\u2019s configuration. Use `),npe=n(dV,"CODE",{});var Flt=s(npe);bdr=r(Flt,"from_pretrained()"),Flt.forEach(t),vdr=r(dV,"to load the model weights."),dV.forEach(t),Tdr=i(Hl),spe=n(Hl,"P",{});var Clt=s(spe);Fdr=r(Clt,"Examples:"),Clt.forEach(t),Cdr=i(Hl),m(Vy.$$.fragment,Hl),Hl.forEach(t),Mdr=i(Ql),Co=n(Ql,"DIV",{class:!0});var va=s(Co);m(Wy.$$.fragment,va),Edr=i(va),lpe=n(va,"P",{});var Mlt=s(lpe);ydr=r(Mlt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Mlt.forEach(t),wdr=i(va),un=n(va,"P",{});var qC=s(un);Adr=r(qC,"The model class to instantiate is selected based on the "),ipe=n(qC,"CODE",{});var Elt=s(ipe);Ldr=r(Elt,"model_type"),Elt.forEach(t),Bdr=r(qC,` property of the config object (either
passed as an argument or loaded from `),dpe=n(qC,"CODE",{});var ylt=s(dpe);xdr=r(ylt,"pretrained_model_name_or_path"),ylt.forEach(t),kdr=r(qC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=n(qC,"CODE",{});var wlt=s(cpe);Rdr=r(wlt,"pretrained_model_name_or_path"),wlt.forEach(t),Sdr=r(qC,":"),qC.forEach(t),Pdr=i(va),K=n(va,"UL",{});var oe=s(K);v7=n(oe,"LI",{});var Dwe=s(v7);fpe=n(Dwe,"STRONG",{});var Alt=s(fpe);$dr=r(Alt,"albert"),Alt.forEach(t),Idr=r(Dwe," \u2014 "),CG=n(Dwe,"A",{href:!0});var Llt=s(CG);jdr=r(Llt,"TFAlbertForTokenClassification"),Llt.forEach(t),Ndr=r(Dwe," (ALBERT model)"),Dwe.forEach(t),Ddr=i(oe),T7=n(oe,"LI",{});var qwe=s(T7);mpe=n(qwe,"STRONG",{});var Blt=s(mpe);qdr=r(Blt,"bert"),Blt.forEach(t),Gdr=r(qwe," \u2014 "),MG=n(qwe,"A",{href:!0});var xlt=s(MG);Odr=r(xlt,"TFBertForTokenClassification"),xlt.forEach(t),Xdr=r(qwe," (BERT model)"),qwe.forEach(t),zdr=i(oe),F7=n(oe,"LI",{});var Gwe=s(F7);gpe=n(Gwe,"STRONG",{});var klt=s(gpe);Vdr=r(klt,"camembert"),klt.forEach(t),Wdr=r(Gwe," \u2014 "),EG=n(Gwe,"A",{href:!0});var Rlt=s(EG);Qdr=r(Rlt,"TFCamembertForTokenClassification"),Rlt.forEach(t),Hdr=r(Gwe," (CamemBERT model)"),Gwe.forEach(t),Udr=i(oe),C7=n(oe,"LI",{});var Owe=s(C7);hpe=n(Owe,"STRONG",{});var Slt=s(hpe);Jdr=r(Slt,"convbert"),Slt.forEach(t),Ydr=r(Owe," \u2014 "),yG=n(Owe,"A",{href:!0});var Plt=s(yG);Kdr=r(Plt,"TFConvBertForTokenClassification"),Plt.forEach(t),Zdr=r(Owe," (ConvBERT model)"),Owe.forEach(t),ecr=i(oe),M7=n(oe,"LI",{});var Xwe=s(M7);ppe=n(Xwe,"STRONG",{});var $lt=s(ppe);ocr=r($lt,"deberta"),$lt.forEach(t),rcr=r(Xwe," \u2014 "),wG=n(Xwe,"A",{href:!0});var Ilt=s(wG);tcr=r(Ilt,"TFDebertaForTokenClassification"),Ilt.forEach(t),acr=r(Xwe," (DeBERTa model)"),Xwe.forEach(t),ncr=i(oe),E7=n(oe,"LI",{});var zwe=s(E7);_pe=n(zwe,"STRONG",{});var jlt=s(_pe);scr=r(jlt,"deberta-v2"),jlt.forEach(t),lcr=r(zwe," \u2014 "),AG=n(zwe,"A",{href:!0});var Nlt=s(AG);icr=r(Nlt,"TFDebertaV2ForTokenClassification"),Nlt.forEach(t),dcr=r(zwe," (DeBERTa-v2 model)"),zwe.forEach(t),ccr=i(oe),y7=n(oe,"LI",{});var Vwe=s(y7);upe=n(Vwe,"STRONG",{});var Dlt=s(upe);fcr=r(Dlt,"distilbert"),Dlt.forEach(t),mcr=r(Vwe," \u2014 "),LG=n(Vwe,"A",{href:!0});var qlt=s(LG);gcr=r(qlt,"TFDistilBertForTokenClassification"),qlt.forEach(t),hcr=r(Vwe," (DistilBERT model)"),Vwe.forEach(t),pcr=i(oe),w7=n(oe,"LI",{});var Wwe=s(w7);bpe=n(Wwe,"STRONG",{});var Glt=s(bpe);_cr=r(Glt,"electra"),Glt.forEach(t),ucr=r(Wwe," \u2014 "),BG=n(Wwe,"A",{href:!0});var Olt=s(BG);bcr=r(Olt,"TFElectraForTokenClassification"),Olt.forEach(t),vcr=r(Wwe," (ELECTRA model)"),Wwe.forEach(t),Tcr=i(oe),A7=n(oe,"LI",{});var Qwe=s(A7);vpe=n(Qwe,"STRONG",{});var Xlt=s(vpe);Fcr=r(Xlt,"flaubert"),Xlt.forEach(t),Ccr=r(Qwe," \u2014 "),xG=n(Qwe,"A",{href:!0});var zlt=s(xG);Mcr=r(zlt,"TFFlaubertForTokenClassification"),zlt.forEach(t),Ecr=r(Qwe," (FlauBERT model)"),Qwe.forEach(t),ycr=i(oe),L7=n(oe,"LI",{});var Hwe=s(L7);Tpe=n(Hwe,"STRONG",{});var Vlt=s(Tpe);wcr=r(Vlt,"funnel"),Vlt.forEach(t),Acr=r(Hwe," \u2014 "),kG=n(Hwe,"A",{href:!0});var Wlt=s(kG);Lcr=r(Wlt,"TFFunnelForTokenClassification"),Wlt.forEach(t),Bcr=r(Hwe," (Funnel Transformer model)"),Hwe.forEach(t),xcr=i(oe),B7=n(oe,"LI",{});var Uwe=s(B7);Fpe=n(Uwe,"STRONG",{});var Qlt=s(Fpe);kcr=r(Qlt,"layoutlm"),Qlt.forEach(t),Rcr=r(Uwe," \u2014 "),RG=n(Uwe,"A",{href:!0});var Hlt=s(RG);Scr=r(Hlt,"TFLayoutLMForTokenClassification"),Hlt.forEach(t),Pcr=r(Uwe," (LayoutLM model)"),Uwe.forEach(t),$cr=i(oe),x7=n(oe,"LI",{});var Jwe=s(x7);Cpe=n(Jwe,"STRONG",{});var Ult=s(Cpe);Icr=r(Ult,"longformer"),Ult.forEach(t),jcr=r(Jwe," \u2014 "),SG=n(Jwe,"A",{href:!0});var Jlt=s(SG);Ncr=r(Jlt,"TFLongformerForTokenClassification"),Jlt.forEach(t),Dcr=r(Jwe," (Longformer model)"),Jwe.forEach(t),qcr=i(oe),k7=n(oe,"LI",{});var Ywe=s(k7);Mpe=n(Ywe,"STRONG",{});var Ylt=s(Mpe);Gcr=r(Ylt,"mobilebert"),Ylt.forEach(t),Ocr=r(Ywe," \u2014 "),PG=n(Ywe,"A",{href:!0});var Klt=s(PG);Xcr=r(Klt,"TFMobileBertForTokenClassification"),Klt.forEach(t),zcr=r(Ywe," (MobileBERT model)"),Ywe.forEach(t),Vcr=i(oe),R7=n(oe,"LI",{});var Kwe=s(R7);Epe=n(Kwe,"STRONG",{});var Zlt=s(Epe);Wcr=r(Zlt,"mpnet"),Zlt.forEach(t),Qcr=r(Kwe," \u2014 "),$G=n(Kwe,"A",{href:!0});var eit=s($G);Hcr=r(eit,"TFMPNetForTokenClassification"),eit.forEach(t),Ucr=r(Kwe," (MPNet model)"),Kwe.forEach(t),Jcr=i(oe),S7=n(oe,"LI",{});var Zwe=s(S7);ype=n(Zwe,"STRONG",{});var oit=s(ype);Ycr=r(oit,"rembert"),oit.forEach(t),Kcr=r(Zwe," \u2014 "),IG=n(Zwe,"A",{href:!0});var rit=s(IG);Zcr=r(rit,"TFRemBertForTokenClassification"),rit.forEach(t),efr=r(Zwe," (RemBERT model)"),Zwe.forEach(t),ofr=i(oe),P7=n(oe,"LI",{});var eAe=s(P7);wpe=n(eAe,"STRONG",{});var tit=s(wpe);rfr=r(tit,"roberta"),tit.forEach(t),tfr=r(eAe," \u2014 "),jG=n(eAe,"A",{href:!0});var ait=s(jG);afr=r(ait,"TFRobertaForTokenClassification"),ait.forEach(t),nfr=r(eAe," (RoBERTa model)"),eAe.forEach(t),sfr=i(oe),$7=n(oe,"LI",{});var oAe=s($7);Ape=n(oAe,"STRONG",{});var nit=s(Ape);lfr=r(nit,"roformer"),nit.forEach(t),ifr=r(oAe," \u2014 "),NG=n(oAe,"A",{href:!0});var sit=s(NG);dfr=r(sit,"TFRoFormerForTokenClassification"),sit.forEach(t),cfr=r(oAe," (RoFormer model)"),oAe.forEach(t),ffr=i(oe),I7=n(oe,"LI",{});var rAe=s(I7);Lpe=n(rAe,"STRONG",{});var lit=s(Lpe);mfr=r(lit,"xlm"),lit.forEach(t),gfr=r(rAe," \u2014 "),DG=n(rAe,"A",{href:!0});var iit=s(DG);hfr=r(iit,"TFXLMForTokenClassification"),iit.forEach(t),pfr=r(rAe," (XLM model)"),rAe.forEach(t),_fr=i(oe),j7=n(oe,"LI",{});var tAe=s(j7);Bpe=n(tAe,"STRONG",{});var dit=s(Bpe);ufr=r(dit,"xlm-roberta"),dit.forEach(t),bfr=r(tAe," \u2014 "),qG=n(tAe,"A",{href:!0});var cit=s(qG);vfr=r(cit,"TFXLMRobertaForTokenClassification"),cit.forEach(t),Tfr=r(tAe," (XLM-RoBERTa model)"),tAe.forEach(t),Ffr=i(oe),N7=n(oe,"LI",{});var aAe=s(N7);xpe=n(aAe,"STRONG",{});var fit=s(xpe);Cfr=r(fit,"xlnet"),fit.forEach(t),Mfr=r(aAe," \u2014 "),GG=n(aAe,"A",{href:!0});var mit=s(GG);Efr=r(mit,"TFXLNetForTokenClassification"),mit.forEach(t),yfr=r(aAe," (XLNet model)"),aAe.forEach(t),oe.forEach(t),wfr=i(va),kpe=n(va,"P",{});var git=s(kpe);Afr=r(git,"Examples:"),git.forEach(t),Lfr=i(va),m(Qy.$$.fragment,va),va.forEach(t),Ql.forEach(t),P9e=i(d),kc=n(d,"H2",{class:!0});var zxe=s(kc);D7=n(zxe,"A",{id:!0,class:!0,href:!0});var hit=s(D7);Rpe=n(hit,"SPAN",{});var pit=s(Rpe);m(Hy.$$.fragment,pit),pit.forEach(t),hit.forEach(t),Bfr=i(zxe),Spe=n(zxe,"SPAN",{});var _it=s(Spe);xfr=r(_it,"TFAutoModelForQuestionAnswering"),_it.forEach(t),zxe.forEach(t),$9e=i(d),Mr=n(d,"DIV",{class:!0});var Ul=s(Mr);m(Uy.$$.fragment,Ul),kfr=i(Ul),Rc=n(Ul,"P",{});var cV=s(Rc);Rfr=r(cV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ppe=n(cV,"CODE",{});var uit=s(Ppe);Sfr=r(uit,"from_pretrained()"),uit.forEach(t),Pfr=r(cV,"class method or the "),$pe=n(cV,"CODE",{});var bit=s($pe);$fr=r(bit,"from_config()"),bit.forEach(t),Ifr=r(cV,`class
method.`),cV.forEach(t),jfr=i(Ul),Jy=n(Ul,"P",{});var Vxe=s(Jy);Nfr=r(Vxe,"This class cannot be instantiated directly using "),Ipe=n(Vxe,"CODE",{});var vit=s(Ipe);Dfr=r(vit,"__init__()"),vit.forEach(t),qfr=r(Vxe," (throws an error)."),Vxe.forEach(t),Gfr=i(Ul),_t=n(Ul,"DIV",{class:!0});var Jl=s(_t);m(Yy.$$.fragment,Jl),Ofr=i(Jl),jpe=n(Jl,"P",{});var Tit=s(jpe);Xfr=r(Tit,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Tit.forEach(t),zfr=i(Jl),Sc=n(Jl,"P",{});var fV=s(Sc);Vfr=r(fV,`Note:
Loading a model from its configuration file does `),Npe=n(fV,"STRONG",{});var Fit=s(Npe);Wfr=r(Fit,"not"),Fit.forEach(t),Qfr=r(fV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dpe=n(fV,"CODE",{});var Cit=s(Dpe);Hfr=r(Cit,"from_pretrained()"),Cit.forEach(t),Ufr=r(fV,"to load the model weights."),fV.forEach(t),Jfr=i(Jl),qpe=n(Jl,"P",{});var Mit=s(qpe);Yfr=r(Mit,"Examples:"),Mit.forEach(t),Kfr=i(Jl),m(Ky.$$.fragment,Jl),Jl.forEach(t),Zfr=i(Ul),Mo=n(Ul,"DIV",{class:!0});var Ta=s(Mo);m(Zy.$$.fragment,Ta),emr=i(Ta),Gpe=n(Ta,"P",{});var Eit=s(Gpe);omr=r(Eit,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Eit.forEach(t),rmr=i(Ta),bn=n(Ta,"P",{});var GC=s(bn);tmr=r(GC,"The model class to instantiate is selected based on the "),Ope=n(GC,"CODE",{});var yit=s(Ope);amr=r(yit,"model_type"),yit.forEach(t),nmr=r(GC,` property of the config object (either
passed as an argument or loaded from `),Xpe=n(GC,"CODE",{});var wit=s(Xpe);smr=r(wit,"pretrained_model_name_or_path"),wit.forEach(t),lmr=r(GC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=n(GC,"CODE",{});var Ait=s(zpe);imr=r(Ait,"pretrained_model_name_or_path"),Ait.forEach(t),dmr=r(GC,":"),GC.forEach(t),cmr=i(Ta),Z=n(Ta,"UL",{});var re=s(Z);q7=n(re,"LI",{});var nAe=s(q7);Vpe=n(nAe,"STRONG",{});var Lit=s(Vpe);fmr=r(Lit,"albert"),Lit.forEach(t),mmr=r(nAe," \u2014 "),OG=n(nAe,"A",{href:!0});var Bit=s(OG);gmr=r(Bit,"TFAlbertForQuestionAnswering"),Bit.forEach(t),hmr=r(nAe," (ALBERT model)"),nAe.forEach(t),pmr=i(re),G7=n(re,"LI",{});var sAe=s(G7);Wpe=n(sAe,"STRONG",{});var xit=s(Wpe);_mr=r(xit,"bert"),xit.forEach(t),umr=r(sAe," \u2014 "),XG=n(sAe,"A",{href:!0});var kit=s(XG);bmr=r(kit,"TFBertForQuestionAnswering"),kit.forEach(t),vmr=r(sAe," (BERT model)"),sAe.forEach(t),Tmr=i(re),O7=n(re,"LI",{});var lAe=s(O7);Qpe=n(lAe,"STRONG",{});var Rit=s(Qpe);Fmr=r(Rit,"camembert"),Rit.forEach(t),Cmr=r(lAe," \u2014 "),zG=n(lAe,"A",{href:!0});var Sit=s(zG);Mmr=r(Sit,"TFCamembertForQuestionAnswering"),Sit.forEach(t),Emr=r(lAe," (CamemBERT model)"),lAe.forEach(t),ymr=i(re),X7=n(re,"LI",{});var iAe=s(X7);Hpe=n(iAe,"STRONG",{});var Pit=s(Hpe);wmr=r(Pit,"convbert"),Pit.forEach(t),Amr=r(iAe," \u2014 "),VG=n(iAe,"A",{href:!0});var $it=s(VG);Lmr=r($it,"TFConvBertForQuestionAnswering"),$it.forEach(t),Bmr=r(iAe," (ConvBERT model)"),iAe.forEach(t),xmr=i(re),z7=n(re,"LI",{});var dAe=s(z7);Upe=n(dAe,"STRONG",{});var Iit=s(Upe);kmr=r(Iit,"deberta"),Iit.forEach(t),Rmr=r(dAe," \u2014 "),WG=n(dAe,"A",{href:!0});var jit=s(WG);Smr=r(jit,"TFDebertaForQuestionAnswering"),jit.forEach(t),Pmr=r(dAe," (DeBERTa model)"),dAe.forEach(t),$mr=i(re),V7=n(re,"LI",{});var cAe=s(V7);Jpe=n(cAe,"STRONG",{});var Nit=s(Jpe);Imr=r(Nit,"deberta-v2"),Nit.forEach(t),jmr=r(cAe," \u2014 "),QG=n(cAe,"A",{href:!0});var Dit=s(QG);Nmr=r(Dit,"TFDebertaV2ForQuestionAnswering"),Dit.forEach(t),Dmr=r(cAe," (DeBERTa-v2 model)"),cAe.forEach(t),qmr=i(re),W7=n(re,"LI",{});var fAe=s(W7);Ype=n(fAe,"STRONG",{});var qit=s(Ype);Gmr=r(qit,"distilbert"),qit.forEach(t),Omr=r(fAe," \u2014 "),HG=n(fAe,"A",{href:!0});var Git=s(HG);Xmr=r(Git,"TFDistilBertForQuestionAnswering"),Git.forEach(t),zmr=r(fAe," (DistilBERT model)"),fAe.forEach(t),Vmr=i(re),Q7=n(re,"LI",{});var mAe=s(Q7);Kpe=n(mAe,"STRONG",{});var Oit=s(Kpe);Wmr=r(Oit,"electra"),Oit.forEach(t),Qmr=r(mAe," \u2014 "),UG=n(mAe,"A",{href:!0});var Xit=s(UG);Hmr=r(Xit,"TFElectraForQuestionAnswering"),Xit.forEach(t),Umr=r(mAe," (ELECTRA model)"),mAe.forEach(t),Jmr=i(re),H7=n(re,"LI",{});var gAe=s(H7);Zpe=n(gAe,"STRONG",{});var zit=s(Zpe);Ymr=r(zit,"flaubert"),zit.forEach(t),Kmr=r(gAe," \u2014 "),JG=n(gAe,"A",{href:!0});var Vit=s(JG);Zmr=r(Vit,"TFFlaubertForQuestionAnsweringSimple"),Vit.forEach(t),egr=r(gAe," (FlauBERT model)"),gAe.forEach(t),ogr=i(re),U7=n(re,"LI",{});var hAe=s(U7);e_e=n(hAe,"STRONG",{});var Wit=s(e_e);rgr=r(Wit,"funnel"),Wit.forEach(t),tgr=r(hAe," \u2014 "),YG=n(hAe,"A",{href:!0});var Qit=s(YG);agr=r(Qit,"TFFunnelForQuestionAnswering"),Qit.forEach(t),ngr=r(hAe," (Funnel Transformer model)"),hAe.forEach(t),sgr=i(re),J7=n(re,"LI",{});var pAe=s(J7);o_e=n(pAe,"STRONG",{});var Hit=s(o_e);lgr=r(Hit,"longformer"),Hit.forEach(t),igr=r(pAe," \u2014 "),KG=n(pAe,"A",{href:!0});var Uit=s(KG);dgr=r(Uit,"TFLongformerForQuestionAnswering"),Uit.forEach(t),cgr=r(pAe," (Longformer model)"),pAe.forEach(t),fgr=i(re),Y7=n(re,"LI",{});var _Ae=s(Y7);r_e=n(_Ae,"STRONG",{});var Jit=s(r_e);mgr=r(Jit,"mobilebert"),Jit.forEach(t),ggr=r(_Ae," \u2014 "),ZG=n(_Ae,"A",{href:!0});var Yit=s(ZG);hgr=r(Yit,"TFMobileBertForQuestionAnswering"),Yit.forEach(t),pgr=r(_Ae," (MobileBERT model)"),_Ae.forEach(t),_gr=i(re),K7=n(re,"LI",{});var uAe=s(K7);t_e=n(uAe,"STRONG",{});var Kit=s(t_e);ugr=r(Kit,"mpnet"),Kit.forEach(t),bgr=r(uAe," \u2014 "),eO=n(uAe,"A",{href:!0});var Zit=s(eO);vgr=r(Zit,"TFMPNetForQuestionAnswering"),Zit.forEach(t),Tgr=r(uAe," (MPNet model)"),uAe.forEach(t),Fgr=i(re),Z7=n(re,"LI",{});var bAe=s(Z7);a_e=n(bAe,"STRONG",{});var edt=s(a_e);Cgr=r(edt,"rembert"),edt.forEach(t),Mgr=r(bAe," \u2014 "),oO=n(bAe,"A",{href:!0});var odt=s(oO);Egr=r(odt,"TFRemBertForQuestionAnswering"),odt.forEach(t),ygr=r(bAe," (RemBERT model)"),bAe.forEach(t),wgr=i(re),e8=n(re,"LI",{});var vAe=s(e8);n_e=n(vAe,"STRONG",{});var rdt=s(n_e);Agr=r(rdt,"roberta"),rdt.forEach(t),Lgr=r(vAe," \u2014 "),rO=n(vAe,"A",{href:!0});var tdt=s(rO);Bgr=r(tdt,"TFRobertaForQuestionAnswering"),tdt.forEach(t),xgr=r(vAe," (RoBERTa model)"),vAe.forEach(t),kgr=i(re),o8=n(re,"LI",{});var TAe=s(o8);s_e=n(TAe,"STRONG",{});var adt=s(s_e);Rgr=r(adt,"roformer"),adt.forEach(t),Sgr=r(TAe," \u2014 "),tO=n(TAe,"A",{href:!0});var ndt=s(tO);Pgr=r(ndt,"TFRoFormerForQuestionAnswering"),ndt.forEach(t),$gr=r(TAe," (RoFormer model)"),TAe.forEach(t),Igr=i(re),r8=n(re,"LI",{});var FAe=s(r8);l_e=n(FAe,"STRONG",{});var sdt=s(l_e);jgr=r(sdt,"xlm"),sdt.forEach(t),Ngr=r(FAe," \u2014 "),aO=n(FAe,"A",{href:!0});var ldt=s(aO);Dgr=r(ldt,"TFXLMForQuestionAnsweringSimple"),ldt.forEach(t),qgr=r(FAe," (XLM model)"),FAe.forEach(t),Ggr=i(re),t8=n(re,"LI",{});var CAe=s(t8);i_e=n(CAe,"STRONG",{});var idt=s(i_e);Ogr=r(idt,"xlm-roberta"),idt.forEach(t),Xgr=r(CAe," \u2014 "),nO=n(CAe,"A",{href:!0});var ddt=s(nO);zgr=r(ddt,"TFXLMRobertaForQuestionAnswering"),ddt.forEach(t),Vgr=r(CAe," (XLM-RoBERTa model)"),CAe.forEach(t),Wgr=i(re),a8=n(re,"LI",{});var MAe=s(a8);d_e=n(MAe,"STRONG",{});var cdt=s(d_e);Qgr=r(cdt,"xlnet"),cdt.forEach(t),Hgr=r(MAe," \u2014 "),sO=n(MAe,"A",{href:!0});var fdt=s(sO);Ugr=r(fdt,"TFXLNetForQuestionAnsweringSimple"),fdt.forEach(t),Jgr=r(MAe," (XLNet model)"),MAe.forEach(t),re.forEach(t),Ygr=i(Ta),c_e=n(Ta,"P",{});var mdt=s(c_e);Kgr=r(mdt,"Examples:"),mdt.forEach(t),Zgr=i(Ta),m(ew.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),I9e=i(d),Pc=n(d,"H2",{class:!0});var Wxe=s(Pc);n8=n(Wxe,"A",{id:!0,class:!0,href:!0});var gdt=s(n8);f_e=n(gdt,"SPAN",{});var hdt=s(f_e);m(ow.$$.fragment,hdt),hdt.forEach(t),gdt.forEach(t),ehr=i(Wxe),m_e=n(Wxe,"SPAN",{});var pdt=s(m_e);ohr=r(pdt,"TFAutoModelForVision2Seq"),pdt.forEach(t),Wxe.forEach(t),j9e=i(d),Er=n(d,"DIV",{class:!0});var Yl=s(Er);m(rw.$$.fragment,Yl),rhr=i(Yl),$c=n(Yl,"P",{});var mV=s($c);thr=r(mV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),g_e=n(mV,"CODE",{});var _dt=s(g_e);ahr=r(_dt,"from_pretrained()"),_dt.forEach(t),nhr=r(mV,"class method or the "),h_e=n(mV,"CODE",{});var udt=s(h_e);shr=r(udt,"from_config()"),udt.forEach(t),lhr=r(mV,`class
method.`),mV.forEach(t),ihr=i(Yl),tw=n(Yl,"P",{});var Qxe=s(tw);dhr=r(Qxe,"This class cannot be instantiated directly using "),p_e=n(Qxe,"CODE",{});var bdt=s(p_e);chr=r(bdt,"__init__()"),bdt.forEach(t),fhr=r(Qxe," (throws an error)."),Qxe.forEach(t),mhr=i(Yl),ut=n(Yl,"DIV",{class:!0});var Kl=s(ut);m(aw.$$.fragment,Kl),ghr=i(Kl),__e=n(Kl,"P",{});var vdt=s(__e);hhr=r(vdt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vdt.forEach(t),phr=i(Kl),Ic=n(Kl,"P",{});var gV=s(Ic);_hr=r(gV,`Note:
Loading a model from its configuration file does `),u_e=n(gV,"STRONG",{});var Tdt=s(u_e);uhr=r(Tdt,"not"),Tdt.forEach(t),bhr=r(gV,` load the model weights. It only affects the
model\u2019s configuration. Use `),b_e=n(gV,"CODE",{});var Fdt=s(b_e);vhr=r(Fdt,"from_pretrained()"),Fdt.forEach(t),Thr=r(gV,"to load the model weights."),gV.forEach(t),Fhr=i(Kl),v_e=n(Kl,"P",{});var Cdt=s(v_e);Chr=r(Cdt,"Examples:"),Cdt.forEach(t),Mhr=i(Kl),m(nw.$$.fragment,Kl),Kl.forEach(t),Ehr=i(Yl),Eo=n(Yl,"DIV",{class:!0});var Fa=s(Eo);m(sw.$$.fragment,Fa),yhr=i(Fa),T_e=n(Fa,"P",{});var Mdt=s(T_e);whr=r(Mdt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Mdt.forEach(t),Ahr=i(Fa),vn=n(Fa,"P",{});var OC=s(vn);Lhr=r(OC,"The model class to instantiate is selected based on the "),F_e=n(OC,"CODE",{});var Edt=s(F_e);Bhr=r(Edt,"model_type"),Edt.forEach(t),xhr=r(OC,` property of the config object (either
passed as an argument or loaded from `),C_e=n(OC,"CODE",{});var ydt=s(C_e);khr=r(ydt,"pretrained_model_name_or_path"),ydt.forEach(t),Rhr=r(OC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M_e=n(OC,"CODE",{});var wdt=s(M_e);Shr=r(wdt,"pretrained_model_name_or_path"),wdt.forEach(t),Phr=r(OC,":"),OC.forEach(t),$hr=i(Fa),E_e=n(Fa,"UL",{});var Adt=s(E_e);s8=n(Adt,"LI",{});var EAe=s(s8);y_e=n(EAe,"STRONG",{});var Ldt=s(y_e);Ihr=r(Ldt,"vision-encoder-decoder"),Ldt.forEach(t),jhr=r(EAe," \u2014 "),lO=n(EAe,"A",{href:!0});var Bdt=s(lO);Nhr=r(Bdt,"TFVisionEncoderDecoderModel"),Bdt.forEach(t),Dhr=r(EAe," (Vision Encoder decoder model)"),EAe.forEach(t),Adt.forEach(t),qhr=i(Fa),w_e=n(Fa,"P",{});var xdt=s(w_e);Ghr=r(xdt,"Examples:"),xdt.forEach(t),Ohr=i(Fa),m(lw.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),N9e=i(d),jc=n(d,"H2",{class:!0});var Hxe=s(jc);l8=n(Hxe,"A",{id:!0,class:!0,href:!0});var kdt=s(l8);A_e=n(kdt,"SPAN",{});var Rdt=s(A_e);m(iw.$$.fragment,Rdt),Rdt.forEach(t),kdt.forEach(t),Xhr=i(Hxe),L_e=n(Hxe,"SPAN",{});var Sdt=s(L_e);zhr=r(Sdt,"TFAutoModelForSpeechSeq2Seq"),Sdt.forEach(t),Hxe.forEach(t),D9e=i(d),yr=n(d,"DIV",{class:!0});var Zl=s(yr);m(dw.$$.fragment,Zl),Vhr=i(Zl),Nc=n(Zl,"P",{});var hV=s(Nc);Whr=r(hV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),B_e=n(hV,"CODE",{});var Pdt=s(B_e);Qhr=r(Pdt,"from_pretrained()"),Pdt.forEach(t),Hhr=r(hV,"class method or the "),x_e=n(hV,"CODE",{});var $dt=s(x_e);Uhr=r($dt,"from_config()"),$dt.forEach(t),Jhr=r(hV,`class
method.`),hV.forEach(t),Yhr=i(Zl),cw=n(Zl,"P",{});var Uxe=s(cw);Khr=r(Uxe,"This class cannot be instantiated directly using "),k_e=n(Uxe,"CODE",{});var Idt=s(k_e);Zhr=r(Idt,"__init__()"),Idt.forEach(t),epr=r(Uxe," (throws an error)."),Uxe.forEach(t),opr=i(Zl),bt=n(Zl,"DIV",{class:!0});var ei=s(bt);m(fw.$$.fragment,ei),rpr=i(ei),R_e=n(ei,"P",{});var jdt=s(R_e);tpr=r(jdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jdt.forEach(t),apr=i(ei),Dc=n(ei,"P",{});var pV=s(Dc);npr=r(pV,`Note:
Loading a model from its configuration file does `),S_e=n(pV,"STRONG",{});var Ndt=s(S_e);spr=r(Ndt,"not"),Ndt.forEach(t),lpr=r(pV,` load the model weights. It only affects the
model\u2019s configuration. Use `),P_e=n(pV,"CODE",{});var Ddt=s(P_e);ipr=r(Ddt,"from_pretrained()"),Ddt.forEach(t),dpr=r(pV,"to load the model weights."),pV.forEach(t),cpr=i(ei),$_e=n(ei,"P",{});var qdt=s($_e);fpr=r(qdt,"Examples:"),qdt.forEach(t),mpr=i(ei),m(mw.$$.fragment,ei),ei.forEach(t),gpr=i(Zl),yo=n(Zl,"DIV",{class:!0});var Ca=s(yo);m(gw.$$.fragment,Ca),hpr=i(Ca),I_e=n(Ca,"P",{});var Gdt=s(I_e);ppr=r(Gdt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Gdt.forEach(t),_pr=i(Ca),Tn=n(Ca,"P",{});var XC=s(Tn);upr=r(XC,"The model class to instantiate is selected based on the "),j_e=n(XC,"CODE",{});var Odt=s(j_e);bpr=r(Odt,"model_type"),Odt.forEach(t),vpr=r(XC,` property of the config object (either
passed as an argument or loaded from `),N_e=n(XC,"CODE",{});var Xdt=s(N_e);Tpr=r(Xdt,"pretrained_model_name_or_path"),Xdt.forEach(t),Fpr=r(XC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=n(XC,"CODE",{});var zdt=s(D_e);Cpr=r(zdt,"pretrained_model_name_or_path"),zdt.forEach(t),Mpr=r(XC,":"),XC.forEach(t),Epr=i(Ca),q_e=n(Ca,"UL",{});var Vdt=s(q_e);i8=n(Vdt,"LI",{});var yAe=s(i8);G_e=n(yAe,"STRONG",{});var Wdt=s(G_e);ypr=r(Wdt,"speech_to_text"),Wdt.forEach(t),wpr=r(yAe," \u2014 "),iO=n(yAe,"A",{href:!0});var Qdt=s(iO);Apr=r(Qdt,"TFSpeech2TextForConditionalGeneration"),Qdt.forEach(t),Lpr=r(yAe," (Speech2Text model)"),yAe.forEach(t),Vdt.forEach(t),Bpr=i(Ca),O_e=n(Ca,"P",{});var Hdt=s(O_e);xpr=r(Hdt,"Examples:"),Hdt.forEach(t),kpr=i(Ca),m(hw.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),q9e=i(d),qc=n(d,"H2",{class:!0});var Jxe=s(qc);d8=n(Jxe,"A",{id:!0,class:!0,href:!0});var Udt=s(d8);X_e=n(Udt,"SPAN",{});var Jdt=s(X_e);m(pw.$$.fragment,Jdt),Jdt.forEach(t),Udt.forEach(t),Rpr=i(Jxe),z_e=n(Jxe,"SPAN",{});var Ydt=s(z_e);Spr=r(Ydt,"FlaxAutoModel"),Ydt.forEach(t),Jxe.forEach(t),G9e=i(d),wr=n(d,"DIV",{class:!0});var oi=s(wr);m(_w.$$.fragment,oi),Ppr=i(oi),Gc=n(oi,"P",{});var _V=s(Gc);$pr=r(_V,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),V_e=n(_V,"CODE",{});var Kdt=s(V_e);Ipr=r(Kdt,"from_pretrained()"),Kdt.forEach(t),jpr=r(_V,"class method or the "),W_e=n(_V,"CODE",{});var Zdt=s(W_e);Npr=r(Zdt,"from_config()"),Zdt.forEach(t),Dpr=r(_V,`class
method.`),_V.forEach(t),qpr=i(oi),uw=n(oi,"P",{});var Yxe=s(uw);Gpr=r(Yxe,"This class cannot be instantiated directly using "),Q_e=n(Yxe,"CODE",{});var ect=s(Q_e);Opr=r(ect,"__init__()"),ect.forEach(t),Xpr=r(Yxe," (throws an error)."),Yxe.forEach(t),zpr=i(oi),vt=n(oi,"DIV",{class:!0});var ri=s(vt);m(bw.$$.fragment,ri),Vpr=i(ri),H_e=n(ri,"P",{});var oct=s(H_e);Wpr=r(oct,"Instantiates one of the base model classes of the library from a configuration."),oct.forEach(t),Qpr=i(ri),Oc=n(ri,"P",{});var uV=s(Oc);Hpr=r(uV,`Note:
Loading a model from its configuration file does `),U_e=n(uV,"STRONG",{});var rct=s(U_e);Upr=r(rct,"not"),rct.forEach(t),Jpr=r(uV,` load the model weights. It only affects the
model\u2019s configuration. Use `),J_e=n(uV,"CODE",{});var tct=s(J_e);Ypr=r(tct,"from_pretrained()"),tct.forEach(t),Kpr=r(uV,"to load the model weights."),uV.forEach(t),Zpr=i(ri),Y_e=n(ri,"P",{});var act=s(Y_e);e_r=r(act,"Examples:"),act.forEach(t),o_r=i(ri),m(vw.$$.fragment,ri),ri.forEach(t),r_r=i(oi),wo=n(oi,"DIV",{class:!0});var Ma=s(wo);m(Tw.$$.fragment,Ma),t_r=i(Ma),K_e=n(Ma,"P",{});var nct=s(K_e);a_r=r(nct,"Instantiate one of the base model classes of the library from a pretrained model."),nct.forEach(t),n_r=i(Ma),Fn=n(Ma,"P",{});var zC=s(Fn);s_r=r(zC,"The model class to instantiate is selected based on the "),Z_e=n(zC,"CODE",{});var sct=s(Z_e);l_r=r(sct,"model_type"),sct.forEach(t),i_r=r(zC,` property of the config object (either
passed as an argument or loaded from `),eue=n(zC,"CODE",{});var lct=s(eue);d_r=r(lct,"pretrained_model_name_or_path"),lct.forEach(t),c_r=r(zC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=n(zC,"CODE",{});var ict=s(oue);f_r=r(ict,"pretrained_model_name_or_path"),ict.forEach(t),m_r=r(zC,":"),zC.forEach(t),g_r=i(Ma),V=n(Ma,"UL",{});var Q=s(V);c8=n(Q,"LI",{});var wAe=s(c8);rue=n(wAe,"STRONG",{});var dct=s(rue);h_r=r(dct,"albert"),dct.forEach(t),p_r=r(wAe," \u2014 "),dO=n(wAe,"A",{href:!0});var cct=s(dO);__r=r(cct,"FlaxAlbertModel"),cct.forEach(t),u_r=r(wAe," (ALBERT model)"),wAe.forEach(t),b_r=i(Q),f8=n(Q,"LI",{});var AAe=s(f8);tue=n(AAe,"STRONG",{});var fct=s(tue);v_r=r(fct,"bart"),fct.forEach(t),T_r=r(AAe," \u2014 "),cO=n(AAe,"A",{href:!0});var mct=s(cO);F_r=r(mct,"FlaxBartModel"),mct.forEach(t),C_r=r(AAe," (BART model)"),AAe.forEach(t),M_r=i(Q),m8=n(Q,"LI",{});var LAe=s(m8);aue=n(LAe,"STRONG",{});var gct=s(aue);E_r=r(gct,"beit"),gct.forEach(t),y_r=r(LAe," \u2014 "),fO=n(LAe,"A",{href:!0});var hct=s(fO);w_r=r(hct,"FlaxBeitModel"),hct.forEach(t),A_r=r(LAe," (BEiT model)"),LAe.forEach(t),L_r=i(Q),g8=n(Q,"LI",{});var BAe=s(g8);nue=n(BAe,"STRONG",{});var pct=s(nue);B_r=r(pct,"bert"),pct.forEach(t),x_r=r(BAe," \u2014 "),mO=n(BAe,"A",{href:!0});var _ct=s(mO);k_r=r(_ct,"FlaxBertModel"),_ct.forEach(t),R_r=r(BAe," (BERT model)"),BAe.forEach(t),S_r=i(Q),h8=n(Q,"LI",{});var xAe=s(h8);sue=n(xAe,"STRONG",{});var uct=s(sue);P_r=r(uct,"big_bird"),uct.forEach(t),$_r=r(xAe," \u2014 "),gO=n(xAe,"A",{href:!0});var bct=s(gO);I_r=r(bct,"FlaxBigBirdModel"),bct.forEach(t),j_r=r(xAe," (BigBird model)"),xAe.forEach(t),N_r=i(Q),p8=n(Q,"LI",{});var kAe=s(p8);lue=n(kAe,"STRONG",{});var vct=s(lue);D_r=r(vct,"blenderbot"),vct.forEach(t),q_r=r(kAe," \u2014 "),hO=n(kAe,"A",{href:!0});var Tct=s(hO);G_r=r(Tct,"FlaxBlenderbotModel"),Tct.forEach(t),O_r=r(kAe," (Blenderbot model)"),kAe.forEach(t),X_r=i(Q),_8=n(Q,"LI",{});var RAe=s(_8);iue=n(RAe,"STRONG",{});var Fct=s(iue);z_r=r(Fct,"blenderbot-small"),Fct.forEach(t),V_r=r(RAe," \u2014 "),pO=n(RAe,"A",{href:!0});var Cct=s(pO);W_r=r(Cct,"FlaxBlenderbotSmallModel"),Cct.forEach(t),Q_r=r(RAe," (BlenderbotSmall model)"),RAe.forEach(t),H_r=i(Q),u8=n(Q,"LI",{});var SAe=s(u8);due=n(SAe,"STRONG",{});var Mct=s(due);U_r=r(Mct,"clip"),Mct.forEach(t),J_r=r(SAe," \u2014 "),_O=n(SAe,"A",{href:!0});var Ect=s(_O);Y_r=r(Ect,"FlaxCLIPModel"),Ect.forEach(t),K_r=r(SAe," (CLIP model)"),SAe.forEach(t),Z_r=i(Q),b8=n(Q,"LI",{});var PAe=s(b8);cue=n(PAe,"STRONG",{});var yct=s(cue);eur=r(yct,"distilbert"),yct.forEach(t),our=r(PAe," \u2014 "),uO=n(PAe,"A",{href:!0});var wct=s(uO);rur=r(wct,"FlaxDistilBertModel"),wct.forEach(t),tur=r(PAe," (DistilBERT model)"),PAe.forEach(t),aur=i(Q),v8=n(Q,"LI",{});var $Ae=s(v8);fue=n($Ae,"STRONG",{});var Act=s(fue);nur=r(Act,"electra"),Act.forEach(t),sur=r($Ae," \u2014 "),bO=n($Ae,"A",{href:!0});var Lct=s(bO);lur=r(Lct,"FlaxElectraModel"),Lct.forEach(t),iur=r($Ae," (ELECTRA model)"),$Ae.forEach(t),dur=i(Q),T8=n(Q,"LI",{});var IAe=s(T8);mue=n(IAe,"STRONG",{});var Bct=s(mue);cur=r(Bct,"gpt2"),Bct.forEach(t),fur=r(IAe," \u2014 "),vO=n(IAe,"A",{href:!0});var xct=s(vO);mur=r(xct,"FlaxGPT2Model"),xct.forEach(t),gur=r(IAe," (OpenAI GPT-2 model)"),IAe.forEach(t),hur=i(Q),F8=n(Q,"LI",{});var jAe=s(F8);gue=n(jAe,"STRONG",{});var kct=s(gue);pur=r(kct,"gpt_neo"),kct.forEach(t),_ur=r(jAe," \u2014 "),TO=n(jAe,"A",{href:!0});var Rct=s(TO);uur=r(Rct,"FlaxGPTNeoModel"),Rct.forEach(t),bur=r(jAe," (GPT Neo model)"),jAe.forEach(t),vur=i(Q),C8=n(Q,"LI",{});var NAe=s(C8);hue=n(NAe,"STRONG",{});var Sct=s(hue);Tur=r(Sct,"gptj"),Sct.forEach(t),Fur=r(NAe," \u2014 "),FO=n(NAe,"A",{href:!0});var Pct=s(FO);Cur=r(Pct,"FlaxGPTJModel"),Pct.forEach(t),Mur=r(NAe," (GPT-J model)"),NAe.forEach(t),Eur=i(Q),M8=n(Q,"LI",{});var DAe=s(M8);pue=n(DAe,"STRONG",{});var $ct=s(pue);yur=r($ct,"marian"),$ct.forEach(t),wur=r(DAe," \u2014 "),CO=n(DAe,"A",{href:!0});var Ict=s(CO);Aur=r(Ict,"FlaxMarianModel"),Ict.forEach(t),Lur=r(DAe," (Marian model)"),DAe.forEach(t),Bur=i(Q),E8=n(Q,"LI",{});var qAe=s(E8);_ue=n(qAe,"STRONG",{});var jct=s(_ue);xur=r(jct,"mbart"),jct.forEach(t),kur=r(qAe," \u2014 "),MO=n(qAe,"A",{href:!0});var Nct=s(MO);Rur=r(Nct,"FlaxMBartModel"),Nct.forEach(t),Sur=r(qAe," (mBART model)"),qAe.forEach(t),Pur=i(Q),y8=n(Q,"LI",{});var GAe=s(y8);uue=n(GAe,"STRONG",{});var Dct=s(uue);$ur=r(Dct,"mt5"),Dct.forEach(t),Iur=r(GAe," \u2014 "),EO=n(GAe,"A",{href:!0});var qct=s(EO);jur=r(qct,"FlaxMT5Model"),qct.forEach(t),Nur=r(GAe," (mT5 model)"),GAe.forEach(t),Dur=i(Q),w8=n(Q,"LI",{});var OAe=s(w8);bue=n(OAe,"STRONG",{});var Gct=s(bue);qur=r(Gct,"pegasus"),Gct.forEach(t),Gur=r(OAe," \u2014 "),yO=n(OAe,"A",{href:!0});var Oct=s(yO);Our=r(Oct,"FlaxPegasusModel"),Oct.forEach(t),Xur=r(OAe," (Pegasus model)"),OAe.forEach(t),zur=i(Q),A8=n(Q,"LI",{});var XAe=s(A8);vue=n(XAe,"STRONG",{});var Xct=s(vue);Vur=r(Xct,"roberta"),Xct.forEach(t),Wur=r(XAe," \u2014 "),wO=n(XAe,"A",{href:!0});var zct=s(wO);Qur=r(zct,"FlaxRobertaModel"),zct.forEach(t),Hur=r(XAe," (RoBERTa model)"),XAe.forEach(t),Uur=i(Q),L8=n(Q,"LI",{});var zAe=s(L8);Tue=n(zAe,"STRONG",{});var Vct=s(Tue);Jur=r(Vct,"roformer"),Vct.forEach(t),Yur=r(zAe," \u2014 "),AO=n(zAe,"A",{href:!0});var Wct=s(AO);Kur=r(Wct,"FlaxRoFormerModel"),Wct.forEach(t),Zur=r(zAe," (RoFormer model)"),zAe.forEach(t),e1r=i(Q),B8=n(Q,"LI",{});var VAe=s(B8);Fue=n(VAe,"STRONG",{});var Qct=s(Fue);o1r=r(Qct,"t5"),Qct.forEach(t),r1r=r(VAe," \u2014 "),LO=n(VAe,"A",{href:!0});var Hct=s(LO);t1r=r(Hct,"FlaxT5Model"),Hct.forEach(t),a1r=r(VAe," (T5 model)"),VAe.forEach(t),n1r=i(Q),x8=n(Q,"LI",{});var WAe=s(x8);Cue=n(WAe,"STRONG",{});var Uct=s(Cue);s1r=r(Uct,"vision-text-dual-encoder"),Uct.forEach(t),l1r=r(WAe," \u2014 "),BO=n(WAe,"A",{href:!0});var Jct=s(BO);i1r=r(Jct,"FlaxVisionTextDualEncoderModel"),Jct.forEach(t),d1r=r(WAe," (VisionTextDualEncoder model)"),WAe.forEach(t),c1r=i(Q),k8=n(Q,"LI",{});var QAe=s(k8);Mue=n(QAe,"STRONG",{});var Yct=s(Mue);f1r=r(Yct,"vit"),Yct.forEach(t),m1r=r(QAe," \u2014 "),xO=n(QAe,"A",{href:!0});var Kct=s(xO);g1r=r(Kct,"FlaxViTModel"),Kct.forEach(t),h1r=r(QAe," (ViT model)"),QAe.forEach(t),p1r=i(Q),R8=n(Q,"LI",{});var HAe=s(R8);Eue=n(HAe,"STRONG",{});var Zct=s(Eue);_1r=r(Zct,"wav2vec2"),Zct.forEach(t),u1r=r(HAe," \u2014 "),kO=n(HAe,"A",{href:!0});var eft=s(kO);b1r=r(eft,"FlaxWav2Vec2Model"),eft.forEach(t),v1r=r(HAe," (Wav2Vec2 model)"),HAe.forEach(t),T1r=i(Q),S8=n(Q,"LI",{});var UAe=s(S8);yue=n(UAe,"STRONG",{});var oft=s(yue);F1r=r(oft,"xglm"),oft.forEach(t),C1r=r(UAe," \u2014 "),RO=n(UAe,"A",{href:!0});var rft=s(RO);M1r=r(rft,"FlaxXGLMModel"),rft.forEach(t),E1r=r(UAe," (XGLM model)"),UAe.forEach(t),Q.forEach(t),y1r=i(Ma),wue=n(Ma,"P",{});var tft=s(wue);w1r=r(tft,"Examples:"),tft.forEach(t),A1r=i(Ma),m(Fw.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),O9e=i(d),Xc=n(d,"H2",{class:!0});var Kxe=s(Xc);P8=n(Kxe,"A",{id:!0,class:!0,href:!0});var aft=s(P8);Aue=n(aft,"SPAN",{});var nft=s(Aue);m(Cw.$$.fragment,nft),nft.forEach(t),aft.forEach(t),L1r=i(Kxe),Lue=n(Kxe,"SPAN",{});var sft=s(Lue);B1r=r(sft,"FlaxAutoModelForCausalLM"),sft.forEach(t),Kxe.forEach(t),X9e=i(d),Ar=n(d,"DIV",{class:!0});var ti=s(Ar);m(Mw.$$.fragment,ti),x1r=i(ti),zc=n(ti,"P",{});var bV=s(zc);k1r=r(bV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bue=n(bV,"CODE",{});var lft=s(Bue);R1r=r(lft,"from_pretrained()"),lft.forEach(t),S1r=r(bV,"class method or the "),xue=n(bV,"CODE",{});var ift=s(xue);P1r=r(ift,"from_config()"),ift.forEach(t),$1r=r(bV,`class
method.`),bV.forEach(t),I1r=i(ti),Ew=n(ti,"P",{});var Zxe=s(Ew);j1r=r(Zxe,"This class cannot be instantiated directly using "),kue=n(Zxe,"CODE",{});var dft=s(kue);N1r=r(dft,"__init__()"),dft.forEach(t),D1r=r(Zxe," (throws an error)."),Zxe.forEach(t),q1r=i(ti),Tt=n(ti,"DIV",{class:!0});var ai=s(Tt);m(yw.$$.fragment,ai),G1r=i(ai),Rue=n(ai,"P",{});var cft=s(Rue);O1r=r(cft,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cft.forEach(t),X1r=i(ai),Vc=n(ai,"P",{});var vV=s(Vc);z1r=r(vV,`Note:
Loading a model from its configuration file does `),Sue=n(vV,"STRONG",{});var fft=s(Sue);V1r=r(fft,"not"),fft.forEach(t),W1r=r(vV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pue=n(vV,"CODE",{});var mft=s(Pue);Q1r=r(mft,"from_pretrained()"),mft.forEach(t),H1r=r(vV,"to load the model weights."),vV.forEach(t),U1r=i(ai),$ue=n(ai,"P",{});var gft=s($ue);J1r=r(gft,"Examples:"),gft.forEach(t),Y1r=i(ai),m(ww.$$.fragment,ai),ai.forEach(t),K1r=i(ti),Ao=n(ti,"DIV",{class:!0});var Ea=s(Ao);m(Aw.$$.fragment,Ea),Z1r=i(Ea),Iue=n(Ea,"P",{});var hft=s(Iue);ebr=r(hft,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hft.forEach(t),obr=i(Ea),Cn=n(Ea,"P",{});var VC=s(Cn);rbr=r(VC,"The model class to instantiate is selected based on the "),jue=n(VC,"CODE",{});var pft=s(jue);tbr=r(pft,"model_type"),pft.forEach(t),abr=r(VC,` property of the config object (either
passed as an argument or loaded from `),Nue=n(VC,"CODE",{});var _ft=s(Nue);nbr=r(_ft,"pretrained_model_name_or_path"),_ft.forEach(t),sbr=r(VC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=n(VC,"CODE",{});var uft=s(Due);lbr=r(uft,"pretrained_model_name_or_path"),uft.forEach(t),ibr=r(VC,":"),VC.forEach(t),dbr=i(Ea),Mn=n(Ea,"UL",{});var WC=s(Mn);$8=n(WC,"LI",{});var JAe=s($8);que=n(JAe,"STRONG",{});var bft=s(que);cbr=r(bft,"gpt2"),bft.forEach(t),fbr=r(JAe," \u2014 "),SO=n(JAe,"A",{href:!0});var vft=s(SO);mbr=r(vft,"FlaxGPT2LMHeadModel"),vft.forEach(t),gbr=r(JAe," (OpenAI GPT-2 model)"),JAe.forEach(t),hbr=i(WC),I8=n(WC,"LI",{});var YAe=s(I8);Gue=n(YAe,"STRONG",{});var Tft=s(Gue);pbr=r(Tft,"gpt_neo"),Tft.forEach(t),_br=r(YAe," \u2014 "),PO=n(YAe,"A",{href:!0});var Fft=s(PO);ubr=r(Fft,"FlaxGPTNeoForCausalLM"),Fft.forEach(t),bbr=r(YAe," (GPT Neo model)"),YAe.forEach(t),vbr=i(WC),j8=n(WC,"LI",{});var KAe=s(j8);Oue=n(KAe,"STRONG",{});var Cft=s(Oue);Tbr=r(Cft,"gptj"),Cft.forEach(t),Fbr=r(KAe," \u2014 "),$O=n(KAe,"A",{href:!0});var Mft=s($O);Cbr=r(Mft,"FlaxGPTJForCausalLM"),Mft.forEach(t),Mbr=r(KAe," (GPT-J model)"),KAe.forEach(t),Ebr=i(WC),N8=n(WC,"LI",{});var ZAe=s(N8);Xue=n(ZAe,"STRONG",{});var Eft=s(Xue);ybr=r(Eft,"xglm"),Eft.forEach(t),wbr=r(ZAe," \u2014 "),IO=n(ZAe,"A",{href:!0});var yft=s(IO);Abr=r(yft,"FlaxXGLMForCausalLM"),yft.forEach(t),Lbr=r(ZAe," (XGLM model)"),ZAe.forEach(t),WC.forEach(t),Bbr=i(Ea),zue=n(Ea,"P",{});var wft=s(zue);xbr=r(wft,"Examples:"),wft.forEach(t),kbr=i(Ea),m(Lw.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),z9e=i(d),Wc=n(d,"H2",{class:!0});var eke=s(Wc);D8=n(eke,"A",{id:!0,class:!0,href:!0});var Aft=s(D8);Vue=n(Aft,"SPAN",{});var Lft=s(Vue);m(Bw.$$.fragment,Lft),Lft.forEach(t),Aft.forEach(t),Rbr=i(eke),Wue=n(eke,"SPAN",{});var Bft=s(Wue);Sbr=r(Bft,"FlaxAutoModelForPreTraining"),Bft.forEach(t),eke.forEach(t),V9e=i(d),Lr=n(d,"DIV",{class:!0});var ni=s(Lr);m(xw.$$.fragment,ni),Pbr=i(ni),Qc=n(ni,"P",{});var TV=s(Qc);$br=r(TV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Que=n(TV,"CODE",{});var xft=s(Que);Ibr=r(xft,"from_pretrained()"),xft.forEach(t),jbr=r(TV,"class method or the "),Hue=n(TV,"CODE",{});var kft=s(Hue);Nbr=r(kft,"from_config()"),kft.forEach(t),Dbr=r(TV,`class
method.`),TV.forEach(t),qbr=i(ni),kw=n(ni,"P",{});var oke=s(kw);Gbr=r(oke,"This class cannot be instantiated directly using "),Uue=n(oke,"CODE",{});var Rft=s(Uue);Obr=r(Rft,"__init__()"),Rft.forEach(t),Xbr=r(oke," (throws an error)."),oke.forEach(t),zbr=i(ni),Ft=n(ni,"DIV",{class:!0});var si=s(Ft);m(Rw.$$.fragment,si),Vbr=i(si),Jue=n(si,"P",{});var Sft=s(Jue);Wbr=r(Sft,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Sft.forEach(t),Qbr=i(si),Hc=n(si,"P",{});var FV=s(Hc);Hbr=r(FV,`Note:
Loading a model from its configuration file does `),Yue=n(FV,"STRONG",{});var Pft=s(Yue);Ubr=r(Pft,"not"),Pft.forEach(t),Jbr=r(FV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kue=n(FV,"CODE",{});var $ft=s(Kue);Ybr=r($ft,"from_pretrained()"),$ft.forEach(t),Kbr=r(FV,"to load the model weights."),FV.forEach(t),Zbr=i(si),Zue=n(si,"P",{});var Ift=s(Zue);e5r=r(Ift,"Examples:"),Ift.forEach(t),o5r=i(si),m(Sw.$$.fragment,si),si.forEach(t),r5r=i(ni),Lo=n(ni,"DIV",{class:!0});var ya=s(Lo);m(Pw.$$.fragment,ya),t5r=i(ya),e1e=n(ya,"P",{});var jft=s(e1e);a5r=r(jft,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jft.forEach(t),n5r=i(ya),En=n(ya,"P",{});var QC=s(En);s5r=r(QC,"The model class to instantiate is selected based on the "),o1e=n(QC,"CODE",{});var Nft=s(o1e);l5r=r(Nft,"model_type"),Nft.forEach(t),i5r=r(QC,` property of the config object (either
passed as an argument or loaded from `),r1e=n(QC,"CODE",{});var Dft=s(r1e);d5r=r(Dft,"pretrained_model_name_or_path"),Dft.forEach(t),c5r=r(QC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=n(QC,"CODE",{});var qft=s(t1e);f5r=r(qft,"pretrained_model_name_or_path"),qft.forEach(t),m5r=r(QC,":"),QC.forEach(t),g5r=i(ya),fe=n(ya,"UL",{});var _e=s(fe);q8=n(_e,"LI",{});var e0e=s(q8);a1e=n(e0e,"STRONG",{});var Gft=s(a1e);h5r=r(Gft,"albert"),Gft.forEach(t),p5r=r(e0e," \u2014 "),jO=n(e0e,"A",{href:!0});var Oft=s(jO);_5r=r(Oft,"FlaxAlbertForPreTraining"),Oft.forEach(t),u5r=r(e0e," (ALBERT model)"),e0e.forEach(t),b5r=i(_e),G8=n(_e,"LI",{});var o0e=s(G8);n1e=n(o0e,"STRONG",{});var Xft=s(n1e);v5r=r(Xft,"bart"),Xft.forEach(t),T5r=r(o0e," \u2014 "),NO=n(o0e,"A",{href:!0});var zft=s(NO);F5r=r(zft,"FlaxBartForConditionalGeneration"),zft.forEach(t),C5r=r(o0e," (BART model)"),o0e.forEach(t),M5r=i(_e),O8=n(_e,"LI",{});var r0e=s(O8);s1e=n(r0e,"STRONG",{});var Vft=s(s1e);E5r=r(Vft,"bert"),Vft.forEach(t),y5r=r(r0e," \u2014 "),DO=n(r0e,"A",{href:!0});var Wft=s(DO);w5r=r(Wft,"FlaxBertForPreTraining"),Wft.forEach(t),A5r=r(r0e," (BERT model)"),r0e.forEach(t),L5r=i(_e),X8=n(_e,"LI",{});var t0e=s(X8);l1e=n(t0e,"STRONG",{});var Qft=s(l1e);B5r=r(Qft,"big_bird"),Qft.forEach(t),x5r=r(t0e," \u2014 "),qO=n(t0e,"A",{href:!0});var Hft=s(qO);k5r=r(Hft,"FlaxBigBirdForPreTraining"),Hft.forEach(t),R5r=r(t0e," (BigBird model)"),t0e.forEach(t),S5r=i(_e),z8=n(_e,"LI",{});var a0e=s(z8);i1e=n(a0e,"STRONG",{});var Uft=s(i1e);P5r=r(Uft,"electra"),Uft.forEach(t),$5r=r(a0e," \u2014 "),GO=n(a0e,"A",{href:!0});var Jft=s(GO);I5r=r(Jft,"FlaxElectraForPreTraining"),Jft.forEach(t),j5r=r(a0e," (ELECTRA model)"),a0e.forEach(t),N5r=i(_e),V8=n(_e,"LI",{});var n0e=s(V8);d1e=n(n0e,"STRONG",{});var Yft=s(d1e);D5r=r(Yft,"mbart"),Yft.forEach(t),q5r=r(n0e," \u2014 "),OO=n(n0e,"A",{href:!0});var Kft=s(OO);G5r=r(Kft,"FlaxMBartForConditionalGeneration"),Kft.forEach(t),O5r=r(n0e," (mBART model)"),n0e.forEach(t),X5r=i(_e),W8=n(_e,"LI",{});var s0e=s(W8);c1e=n(s0e,"STRONG",{});var Zft=s(c1e);z5r=r(Zft,"mt5"),Zft.forEach(t),V5r=r(s0e," \u2014 "),XO=n(s0e,"A",{href:!0});var emt=s(XO);W5r=r(emt,"FlaxMT5ForConditionalGeneration"),emt.forEach(t),Q5r=r(s0e," (mT5 model)"),s0e.forEach(t),H5r=i(_e),Q8=n(_e,"LI",{});var l0e=s(Q8);f1e=n(l0e,"STRONG",{});var omt=s(f1e);U5r=r(omt,"roberta"),omt.forEach(t),J5r=r(l0e," \u2014 "),zO=n(l0e,"A",{href:!0});var rmt=s(zO);Y5r=r(rmt,"FlaxRobertaForMaskedLM"),rmt.forEach(t),K5r=r(l0e," (RoBERTa model)"),l0e.forEach(t),Z5r=i(_e),H8=n(_e,"LI",{});var i0e=s(H8);m1e=n(i0e,"STRONG",{});var tmt=s(m1e);e2r=r(tmt,"roformer"),tmt.forEach(t),o2r=r(i0e," \u2014 "),VO=n(i0e,"A",{href:!0});var amt=s(VO);r2r=r(amt,"FlaxRoFormerForMaskedLM"),amt.forEach(t),t2r=r(i0e," (RoFormer model)"),i0e.forEach(t),a2r=i(_e),U8=n(_e,"LI",{});var d0e=s(U8);g1e=n(d0e,"STRONG",{});var nmt=s(g1e);n2r=r(nmt,"t5"),nmt.forEach(t),s2r=r(d0e," \u2014 "),WO=n(d0e,"A",{href:!0});var smt=s(WO);l2r=r(smt,"FlaxT5ForConditionalGeneration"),smt.forEach(t),i2r=r(d0e," (T5 model)"),d0e.forEach(t),d2r=i(_e),J8=n(_e,"LI",{});var c0e=s(J8);h1e=n(c0e,"STRONG",{});var lmt=s(h1e);c2r=r(lmt,"wav2vec2"),lmt.forEach(t),f2r=r(c0e," \u2014 "),QO=n(c0e,"A",{href:!0});var imt=s(QO);m2r=r(imt,"FlaxWav2Vec2ForPreTraining"),imt.forEach(t),g2r=r(c0e," (Wav2Vec2 model)"),c0e.forEach(t),_e.forEach(t),h2r=i(ya),p1e=n(ya,"P",{});var dmt=s(p1e);p2r=r(dmt,"Examples:"),dmt.forEach(t),_2r=i(ya),m($w.$$.fragment,ya),ya.forEach(t),ni.forEach(t),W9e=i(d),Uc=n(d,"H2",{class:!0});var rke=s(Uc);Y8=n(rke,"A",{id:!0,class:!0,href:!0});var cmt=s(Y8);_1e=n(cmt,"SPAN",{});var fmt=s(_1e);m(Iw.$$.fragment,fmt),fmt.forEach(t),cmt.forEach(t),u2r=i(rke),u1e=n(rke,"SPAN",{});var mmt=s(u1e);b2r=r(mmt,"FlaxAutoModelForMaskedLM"),mmt.forEach(t),rke.forEach(t),Q9e=i(d),Br=n(d,"DIV",{class:!0});var li=s(Br);m(jw.$$.fragment,li),v2r=i(li),Jc=n(li,"P",{});var CV=s(Jc);T2r=r(CV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),b1e=n(CV,"CODE",{});var gmt=s(b1e);F2r=r(gmt,"from_pretrained()"),gmt.forEach(t),C2r=r(CV,"class method or the "),v1e=n(CV,"CODE",{});var hmt=s(v1e);M2r=r(hmt,"from_config()"),hmt.forEach(t),E2r=r(CV,`class
method.`),CV.forEach(t),y2r=i(li),Nw=n(li,"P",{});var tke=s(Nw);w2r=r(tke,"This class cannot be instantiated directly using "),T1e=n(tke,"CODE",{});var pmt=s(T1e);A2r=r(pmt,"__init__()"),pmt.forEach(t),L2r=r(tke," (throws an error)."),tke.forEach(t),B2r=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);m(Dw.$$.fragment,ii),x2r=i(ii),F1e=n(ii,"P",{});var _mt=s(F1e);k2r=r(_mt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_mt.forEach(t),R2r=i(ii),Yc=n(ii,"P",{});var MV=s(Yc);S2r=r(MV,`Note:
Loading a model from its configuration file does `),C1e=n(MV,"STRONG",{});var umt=s(C1e);P2r=r(umt,"not"),umt.forEach(t),$2r=r(MV,` load the model weights. It only affects the
model\u2019s configuration. Use `),M1e=n(MV,"CODE",{});var bmt=s(M1e);I2r=r(bmt,"from_pretrained()"),bmt.forEach(t),j2r=r(MV,"to load the model weights."),MV.forEach(t),N2r=i(ii),E1e=n(ii,"P",{});var vmt=s(E1e);D2r=r(vmt,"Examples:"),vmt.forEach(t),q2r=i(ii),m(qw.$$.fragment,ii),ii.forEach(t),G2r=i(li),Bo=n(li,"DIV",{class:!0});var wa=s(Bo);m(Gw.$$.fragment,wa),O2r=i(wa),y1e=n(wa,"P",{});var Tmt=s(y1e);X2r=r(Tmt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Tmt.forEach(t),z2r=i(wa),yn=n(wa,"P",{});var HC=s(yn);V2r=r(HC,"The model class to instantiate is selected based on the "),w1e=n(HC,"CODE",{});var Fmt=s(w1e);W2r=r(Fmt,"model_type"),Fmt.forEach(t),Q2r=r(HC,` property of the config object (either
passed as an argument or loaded from `),A1e=n(HC,"CODE",{});var Cmt=s(A1e);H2r=r(Cmt,"pretrained_model_name_or_path"),Cmt.forEach(t),U2r=r(HC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=n(HC,"CODE",{});var Mmt=s(L1e);J2r=r(Mmt,"pretrained_model_name_or_path"),Mmt.forEach(t),Y2r=r(HC,":"),HC.forEach(t),K2r=i(wa),ve=n(wa,"UL",{});var Ze=s(ve);K8=n(Ze,"LI",{});var f0e=s(K8);B1e=n(f0e,"STRONG",{});var Emt=s(B1e);Z2r=r(Emt,"albert"),Emt.forEach(t),evr=r(f0e," \u2014 "),HO=n(f0e,"A",{href:!0});var ymt=s(HO);ovr=r(ymt,"FlaxAlbertForMaskedLM"),ymt.forEach(t),rvr=r(f0e," (ALBERT model)"),f0e.forEach(t),tvr=i(Ze),Z8=n(Ze,"LI",{});var m0e=s(Z8);x1e=n(m0e,"STRONG",{});var wmt=s(x1e);avr=r(wmt,"bart"),wmt.forEach(t),nvr=r(m0e," \u2014 "),UO=n(m0e,"A",{href:!0});var Amt=s(UO);svr=r(Amt,"FlaxBartForConditionalGeneration"),Amt.forEach(t),lvr=r(m0e," (BART model)"),m0e.forEach(t),ivr=i(Ze),eF=n(Ze,"LI",{});var g0e=s(eF);k1e=n(g0e,"STRONG",{});var Lmt=s(k1e);dvr=r(Lmt,"bert"),Lmt.forEach(t),cvr=r(g0e," \u2014 "),JO=n(g0e,"A",{href:!0});var Bmt=s(JO);fvr=r(Bmt,"FlaxBertForMaskedLM"),Bmt.forEach(t),mvr=r(g0e," (BERT model)"),g0e.forEach(t),gvr=i(Ze),oF=n(Ze,"LI",{});var h0e=s(oF);R1e=n(h0e,"STRONG",{});var xmt=s(R1e);hvr=r(xmt,"big_bird"),xmt.forEach(t),pvr=r(h0e," \u2014 "),YO=n(h0e,"A",{href:!0});var kmt=s(YO);_vr=r(kmt,"FlaxBigBirdForMaskedLM"),kmt.forEach(t),uvr=r(h0e," (BigBird model)"),h0e.forEach(t),bvr=i(Ze),rF=n(Ze,"LI",{});var p0e=s(rF);S1e=n(p0e,"STRONG",{});var Rmt=s(S1e);vvr=r(Rmt,"distilbert"),Rmt.forEach(t),Tvr=r(p0e," \u2014 "),KO=n(p0e,"A",{href:!0});var Smt=s(KO);Fvr=r(Smt,"FlaxDistilBertForMaskedLM"),Smt.forEach(t),Cvr=r(p0e," (DistilBERT model)"),p0e.forEach(t),Mvr=i(Ze),tF=n(Ze,"LI",{});var _0e=s(tF);P1e=n(_0e,"STRONG",{});var Pmt=s(P1e);Evr=r(Pmt,"electra"),Pmt.forEach(t),yvr=r(_0e," \u2014 "),ZO=n(_0e,"A",{href:!0});var $mt=s(ZO);wvr=r($mt,"FlaxElectraForMaskedLM"),$mt.forEach(t),Avr=r(_0e," (ELECTRA model)"),_0e.forEach(t),Lvr=i(Ze),aF=n(Ze,"LI",{});var u0e=s(aF);$1e=n(u0e,"STRONG",{});var Imt=s($1e);Bvr=r(Imt,"mbart"),Imt.forEach(t),xvr=r(u0e," \u2014 "),eX=n(u0e,"A",{href:!0});var jmt=s(eX);kvr=r(jmt,"FlaxMBartForConditionalGeneration"),jmt.forEach(t),Rvr=r(u0e," (mBART model)"),u0e.forEach(t),Svr=i(Ze),nF=n(Ze,"LI",{});var b0e=s(nF);I1e=n(b0e,"STRONG",{});var Nmt=s(I1e);Pvr=r(Nmt,"roberta"),Nmt.forEach(t),$vr=r(b0e," \u2014 "),oX=n(b0e,"A",{href:!0});var Dmt=s(oX);Ivr=r(Dmt,"FlaxRobertaForMaskedLM"),Dmt.forEach(t),jvr=r(b0e," (RoBERTa model)"),b0e.forEach(t),Nvr=i(Ze),sF=n(Ze,"LI",{});var v0e=s(sF);j1e=n(v0e,"STRONG",{});var qmt=s(j1e);Dvr=r(qmt,"roformer"),qmt.forEach(t),qvr=r(v0e," \u2014 "),rX=n(v0e,"A",{href:!0});var Gmt=s(rX);Gvr=r(Gmt,"FlaxRoFormerForMaskedLM"),Gmt.forEach(t),Ovr=r(v0e," (RoFormer model)"),v0e.forEach(t),Ze.forEach(t),Xvr=i(wa),N1e=n(wa,"P",{});var Omt=s(N1e);zvr=r(Omt,"Examples:"),Omt.forEach(t),Vvr=i(wa),m(Ow.$$.fragment,wa),wa.forEach(t),li.forEach(t),H9e=i(d),Kc=n(d,"H2",{class:!0});var ake=s(Kc);lF=n(ake,"A",{id:!0,class:!0,href:!0});var Xmt=s(lF);D1e=n(Xmt,"SPAN",{});var zmt=s(D1e);m(Xw.$$.fragment,zmt),zmt.forEach(t),Xmt.forEach(t),Wvr=i(ake),q1e=n(ake,"SPAN",{});var Vmt=s(q1e);Qvr=r(Vmt,"FlaxAutoModelForSeq2SeqLM"),Vmt.forEach(t),ake.forEach(t),U9e=i(d),xr=n(d,"DIV",{class:!0});var di=s(xr);m(zw.$$.fragment,di),Hvr=i(di),Zc=n(di,"P",{});var EV=s(Zc);Uvr=r(EV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),G1e=n(EV,"CODE",{});var Wmt=s(G1e);Jvr=r(Wmt,"from_pretrained()"),Wmt.forEach(t),Yvr=r(EV,"class method or the "),O1e=n(EV,"CODE",{});var Qmt=s(O1e);Kvr=r(Qmt,"from_config()"),Qmt.forEach(t),Zvr=r(EV,`class
method.`),EV.forEach(t),e6r=i(di),Vw=n(di,"P",{});var nke=s(Vw);o6r=r(nke,"This class cannot be instantiated directly using "),X1e=n(nke,"CODE",{});var Hmt=s(X1e);r6r=r(Hmt,"__init__()"),Hmt.forEach(t),t6r=r(nke," (throws an error)."),nke.forEach(t),a6r=i(di),Mt=n(di,"DIV",{class:!0});var ci=s(Mt);m(Ww.$$.fragment,ci),n6r=i(ci),z1e=n(ci,"P",{});var Umt=s(z1e);s6r=r(Umt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Umt.forEach(t),l6r=i(ci),ef=n(ci,"P",{});var yV=s(ef);i6r=r(yV,`Note:
Loading a model from its configuration file does `),V1e=n(yV,"STRONG",{});var Jmt=s(V1e);d6r=r(Jmt,"not"),Jmt.forEach(t),c6r=r(yV,` load the model weights. It only affects the
model\u2019s configuration. Use `),W1e=n(yV,"CODE",{});var Ymt=s(W1e);f6r=r(Ymt,"from_pretrained()"),Ymt.forEach(t),m6r=r(yV,"to load the model weights."),yV.forEach(t),g6r=i(ci),Q1e=n(ci,"P",{});var Kmt=s(Q1e);h6r=r(Kmt,"Examples:"),Kmt.forEach(t),p6r=i(ci),m(Qw.$$.fragment,ci),ci.forEach(t),_6r=i(di),xo=n(di,"DIV",{class:!0});var Aa=s(xo);m(Hw.$$.fragment,Aa),u6r=i(Aa),H1e=n(Aa,"P",{});var Zmt=s(H1e);b6r=r(Zmt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zmt.forEach(t),v6r=i(Aa),wn=n(Aa,"P",{});var UC=s(wn);T6r=r(UC,"The model class to instantiate is selected based on the "),U1e=n(UC,"CODE",{});var egt=s(U1e);F6r=r(egt,"model_type"),egt.forEach(t),C6r=r(UC,` property of the config object (either
passed as an argument or loaded from `),J1e=n(UC,"CODE",{});var ogt=s(J1e);M6r=r(ogt,"pretrained_model_name_or_path"),ogt.forEach(t),E6r=r(UC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=n(UC,"CODE",{});var rgt=s(Y1e);y6r=r(rgt,"pretrained_model_name_or_path"),rgt.forEach(t),w6r=r(UC,":"),UC.forEach(t),A6r=i(Aa),Te=n(Aa,"UL",{});var eo=s(Te);iF=n(eo,"LI",{});var T0e=s(iF);K1e=n(T0e,"STRONG",{});var tgt=s(K1e);L6r=r(tgt,"bart"),tgt.forEach(t),B6r=r(T0e," \u2014 "),tX=n(T0e,"A",{href:!0});var agt=s(tX);x6r=r(agt,"FlaxBartForConditionalGeneration"),agt.forEach(t),k6r=r(T0e," (BART model)"),T0e.forEach(t),R6r=i(eo),dF=n(eo,"LI",{});var F0e=s(dF);Z1e=n(F0e,"STRONG",{});var ngt=s(Z1e);S6r=r(ngt,"blenderbot"),ngt.forEach(t),P6r=r(F0e," \u2014 "),aX=n(F0e,"A",{href:!0});var sgt=s(aX);$6r=r(sgt,"FlaxBlenderbotForConditionalGeneration"),sgt.forEach(t),I6r=r(F0e," (Blenderbot model)"),F0e.forEach(t),j6r=i(eo),cF=n(eo,"LI",{});var C0e=s(cF);ebe=n(C0e,"STRONG",{});var lgt=s(ebe);N6r=r(lgt,"blenderbot-small"),lgt.forEach(t),D6r=r(C0e," \u2014 "),nX=n(C0e,"A",{href:!0});var igt=s(nX);q6r=r(igt,"FlaxBlenderbotSmallForConditionalGeneration"),igt.forEach(t),G6r=r(C0e," (BlenderbotSmall model)"),C0e.forEach(t),O6r=i(eo),fF=n(eo,"LI",{});var M0e=s(fF);obe=n(M0e,"STRONG",{});var dgt=s(obe);X6r=r(dgt,"encoder-decoder"),dgt.forEach(t),z6r=r(M0e," \u2014 "),sX=n(M0e,"A",{href:!0});var cgt=s(sX);V6r=r(cgt,"FlaxEncoderDecoderModel"),cgt.forEach(t),W6r=r(M0e," (Encoder decoder model)"),M0e.forEach(t),Q6r=i(eo),mF=n(eo,"LI",{});var E0e=s(mF);rbe=n(E0e,"STRONG",{});var fgt=s(rbe);H6r=r(fgt,"marian"),fgt.forEach(t),U6r=r(E0e," \u2014 "),lX=n(E0e,"A",{href:!0});var mgt=s(lX);J6r=r(mgt,"FlaxMarianMTModel"),mgt.forEach(t),Y6r=r(E0e," (Marian model)"),E0e.forEach(t),K6r=i(eo),gF=n(eo,"LI",{});var y0e=s(gF);tbe=n(y0e,"STRONG",{});var ggt=s(tbe);Z6r=r(ggt,"mbart"),ggt.forEach(t),eTr=r(y0e," \u2014 "),iX=n(y0e,"A",{href:!0});var hgt=s(iX);oTr=r(hgt,"FlaxMBartForConditionalGeneration"),hgt.forEach(t),rTr=r(y0e," (mBART model)"),y0e.forEach(t),tTr=i(eo),hF=n(eo,"LI",{});var w0e=s(hF);abe=n(w0e,"STRONG",{});var pgt=s(abe);aTr=r(pgt,"mt5"),pgt.forEach(t),nTr=r(w0e," \u2014 "),dX=n(w0e,"A",{href:!0});var _gt=s(dX);sTr=r(_gt,"FlaxMT5ForConditionalGeneration"),_gt.forEach(t),lTr=r(w0e," (mT5 model)"),w0e.forEach(t),iTr=i(eo),pF=n(eo,"LI",{});var A0e=s(pF);nbe=n(A0e,"STRONG",{});var ugt=s(nbe);dTr=r(ugt,"pegasus"),ugt.forEach(t),cTr=r(A0e," \u2014 "),cX=n(A0e,"A",{href:!0});var bgt=s(cX);fTr=r(bgt,"FlaxPegasusForConditionalGeneration"),bgt.forEach(t),mTr=r(A0e," (Pegasus model)"),A0e.forEach(t),gTr=i(eo),_F=n(eo,"LI",{});var L0e=s(_F);sbe=n(L0e,"STRONG",{});var vgt=s(sbe);hTr=r(vgt,"t5"),vgt.forEach(t),pTr=r(L0e," \u2014 "),fX=n(L0e,"A",{href:!0});var Tgt=s(fX);_Tr=r(Tgt,"FlaxT5ForConditionalGeneration"),Tgt.forEach(t),uTr=r(L0e," (T5 model)"),L0e.forEach(t),eo.forEach(t),bTr=i(Aa),lbe=n(Aa,"P",{});var Fgt=s(lbe);vTr=r(Fgt,"Examples:"),Fgt.forEach(t),TTr=i(Aa),m(Uw.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),J9e=i(d),of=n(d,"H2",{class:!0});var ske=s(of);uF=n(ske,"A",{id:!0,class:!0,href:!0});var Cgt=s(uF);ibe=n(Cgt,"SPAN",{});var Mgt=s(ibe);m(Jw.$$.fragment,Mgt),Mgt.forEach(t),Cgt.forEach(t),FTr=i(ske),dbe=n(ske,"SPAN",{});var Egt=s(dbe);CTr=r(Egt,"FlaxAutoModelForSequenceClassification"),Egt.forEach(t),ske.forEach(t),Y9e=i(d),kr=n(d,"DIV",{class:!0});var fi=s(kr);m(Yw.$$.fragment,fi),MTr=i(fi),rf=n(fi,"P",{});var wV=s(rf);ETr=r(wV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cbe=n(wV,"CODE",{});var ygt=s(cbe);yTr=r(ygt,"from_pretrained()"),ygt.forEach(t),wTr=r(wV,"class method or the "),fbe=n(wV,"CODE",{});var wgt=s(fbe);ATr=r(wgt,"from_config()"),wgt.forEach(t),LTr=r(wV,`class
method.`),wV.forEach(t),BTr=i(fi),Kw=n(fi,"P",{});var lke=s(Kw);xTr=r(lke,"This class cannot be instantiated directly using "),mbe=n(lke,"CODE",{});var Agt=s(mbe);kTr=r(Agt,"__init__()"),Agt.forEach(t),RTr=r(lke," (throws an error)."),lke.forEach(t),STr=i(fi),Et=n(fi,"DIV",{class:!0});var mi=s(Et);m(Zw.$$.fragment,mi),PTr=i(mi),gbe=n(mi,"P",{});var Lgt=s(gbe);$Tr=r(Lgt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Lgt.forEach(t),ITr=i(mi),tf=n(mi,"P",{});var AV=s(tf);jTr=r(AV,`Note:
Loading a model from its configuration file does `),hbe=n(AV,"STRONG",{});var Bgt=s(hbe);NTr=r(Bgt,"not"),Bgt.forEach(t),DTr=r(AV,` load the model weights. It only affects the
model\u2019s configuration. Use `),pbe=n(AV,"CODE",{});var xgt=s(pbe);qTr=r(xgt,"from_pretrained()"),xgt.forEach(t),GTr=r(AV,"to load the model weights."),AV.forEach(t),OTr=i(mi),_be=n(mi,"P",{});var kgt=s(_be);XTr=r(kgt,"Examples:"),kgt.forEach(t),zTr=i(mi),m(eA.$$.fragment,mi),mi.forEach(t),VTr=i(fi),ko=n(fi,"DIV",{class:!0});var La=s(ko);m(oA.$$.fragment,La),WTr=i(La),ube=n(La,"P",{});var Rgt=s(ube);QTr=r(Rgt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Rgt.forEach(t),HTr=i(La),An=n(La,"P",{});var JC=s(An);UTr=r(JC,"The model class to instantiate is selected based on the "),bbe=n(JC,"CODE",{});var Sgt=s(bbe);JTr=r(Sgt,"model_type"),Sgt.forEach(t),YTr=r(JC,` property of the config object (either
passed as an argument or loaded from `),vbe=n(JC,"CODE",{});var Pgt=s(vbe);KTr=r(Pgt,"pretrained_model_name_or_path"),Pgt.forEach(t),ZTr=r(JC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tbe=n(JC,"CODE",{});var $gt=s(Tbe);e7r=r($gt,"pretrained_model_name_or_path"),$gt.forEach(t),o7r=r(JC,":"),JC.forEach(t),r7r=i(La),Fe=n(La,"UL",{});var oo=s(Fe);bF=n(oo,"LI",{});var B0e=s(bF);Fbe=n(B0e,"STRONG",{});var Igt=s(Fbe);t7r=r(Igt,"albert"),Igt.forEach(t),a7r=r(B0e," \u2014 "),mX=n(B0e,"A",{href:!0});var jgt=s(mX);n7r=r(jgt,"FlaxAlbertForSequenceClassification"),jgt.forEach(t),s7r=r(B0e," (ALBERT model)"),B0e.forEach(t),l7r=i(oo),vF=n(oo,"LI",{});var x0e=s(vF);Cbe=n(x0e,"STRONG",{});var Ngt=s(Cbe);i7r=r(Ngt,"bart"),Ngt.forEach(t),d7r=r(x0e," \u2014 "),gX=n(x0e,"A",{href:!0});var Dgt=s(gX);c7r=r(Dgt,"FlaxBartForSequenceClassification"),Dgt.forEach(t),f7r=r(x0e," (BART model)"),x0e.forEach(t),m7r=i(oo),TF=n(oo,"LI",{});var k0e=s(TF);Mbe=n(k0e,"STRONG",{});var qgt=s(Mbe);g7r=r(qgt,"bert"),qgt.forEach(t),h7r=r(k0e," \u2014 "),hX=n(k0e,"A",{href:!0});var Ggt=s(hX);p7r=r(Ggt,"FlaxBertForSequenceClassification"),Ggt.forEach(t),_7r=r(k0e," (BERT model)"),k0e.forEach(t),u7r=i(oo),FF=n(oo,"LI",{});var R0e=s(FF);Ebe=n(R0e,"STRONG",{});var Ogt=s(Ebe);b7r=r(Ogt,"big_bird"),Ogt.forEach(t),v7r=r(R0e," \u2014 "),pX=n(R0e,"A",{href:!0});var Xgt=s(pX);T7r=r(Xgt,"FlaxBigBirdForSequenceClassification"),Xgt.forEach(t),F7r=r(R0e," (BigBird model)"),R0e.forEach(t),C7r=i(oo),CF=n(oo,"LI",{});var S0e=s(CF);ybe=n(S0e,"STRONG",{});var zgt=s(ybe);M7r=r(zgt,"distilbert"),zgt.forEach(t),E7r=r(S0e," \u2014 "),_X=n(S0e,"A",{href:!0});var Vgt=s(_X);y7r=r(Vgt,"FlaxDistilBertForSequenceClassification"),Vgt.forEach(t),w7r=r(S0e," (DistilBERT model)"),S0e.forEach(t),A7r=i(oo),MF=n(oo,"LI",{});var P0e=s(MF);wbe=n(P0e,"STRONG",{});var Wgt=s(wbe);L7r=r(Wgt,"electra"),Wgt.forEach(t),B7r=r(P0e," \u2014 "),uX=n(P0e,"A",{href:!0});var Qgt=s(uX);x7r=r(Qgt,"FlaxElectraForSequenceClassification"),Qgt.forEach(t),k7r=r(P0e," (ELECTRA model)"),P0e.forEach(t),R7r=i(oo),EF=n(oo,"LI",{});var $0e=s(EF);Abe=n($0e,"STRONG",{});var Hgt=s(Abe);S7r=r(Hgt,"mbart"),Hgt.forEach(t),P7r=r($0e," \u2014 "),bX=n($0e,"A",{href:!0});var Ugt=s(bX);$7r=r(Ugt,"FlaxMBartForSequenceClassification"),Ugt.forEach(t),I7r=r($0e," (mBART model)"),$0e.forEach(t),j7r=i(oo),yF=n(oo,"LI",{});var I0e=s(yF);Lbe=n(I0e,"STRONG",{});var Jgt=s(Lbe);N7r=r(Jgt,"roberta"),Jgt.forEach(t),D7r=r(I0e," \u2014 "),vX=n(I0e,"A",{href:!0});var Ygt=s(vX);q7r=r(Ygt,"FlaxRobertaForSequenceClassification"),Ygt.forEach(t),G7r=r(I0e," (RoBERTa model)"),I0e.forEach(t),O7r=i(oo),wF=n(oo,"LI",{});var j0e=s(wF);Bbe=n(j0e,"STRONG",{});var Kgt=s(Bbe);X7r=r(Kgt,"roformer"),Kgt.forEach(t),z7r=r(j0e," \u2014 "),TX=n(j0e,"A",{href:!0});var Zgt=s(TX);V7r=r(Zgt,"FlaxRoFormerForSequenceClassification"),Zgt.forEach(t),W7r=r(j0e," (RoFormer model)"),j0e.forEach(t),oo.forEach(t),Q7r=i(La),xbe=n(La,"P",{});var eht=s(xbe);H7r=r(eht,"Examples:"),eht.forEach(t),U7r=i(La),m(rA.$$.fragment,La),La.forEach(t),fi.forEach(t),K9e=i(d),af=n(d,"H2",{class:!0});var ike=s(af);AF=n(ike,"A",{id:!0,class:!0,href:!0});var oht=s(AF);kbe=n(oht,"SPAN",{});var rht=s(kbe);m(tA.$$.fragment,rht),rht.forEach(t),oht.forEach(t),J7r=i(ike),Rbe=n(ike,"SPAN",{});var tht=s(Rbe);Y7r=r(tht,"FlaxAutoModelForQuestionAnswering"),tht.forEach(t),ike.forEach(t),Z9e=i(d),Rr=n(d,"DIV",{class:!0});var gi=s(Rr);m(aA.$$.fragment,gi),K7r=i(gi),nf=n(gi,"P",{});var LV=s(nf);Z7r=r(LV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Sbe=n(LV,"CODE",{});var aht=s(Sbe);e8r=r(aht,"from_pretrained()"),aht.forEach(t),o8r=r(LV,"class method or the "),Pbe=n(LV,"CODE",{});var nht=s(Pbe);r8r=r(nht,"from_config()"),nht.forEach(t),t8r=r(LV,`class
method.`),LV.forEach(t),a8r=i(gi),nA=n(gi,"P",{});var dke=s(nA);n8r=r(dke,"This class cannot be instantiated directly using "),$be=n(dke,"CODE",{});var sht=s($be);s8r=r(sht,"__init__()"),sht.forEach(t),l8r=r(dke," (throws an error)."),dke.forEach(t),i8r=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);m(sA.$$.fragment,hi),d8r=i(hi),Ibe=n(hi,"P",{});var lht=s(Ibe);c8r=r(lht,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lht.forEach(t),f8r=i(hi),sf=n(hi,"P",{});var BV=s(sf);m8r=r(BV,`Note:
Loading a model from its configuration file does `),jbe=n(BV,"STRONG",{});var iht=s(jbe);g8r=r(iht,"not"),iht.forEach(t),h8r=r(BV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nbe=n(BV,"CODE",{});var dht=s(Nbe);p8r=r(dht,"from_pretrained()"),dht.forEach(t),_8r=r(BV,"to load the model weights."),BV.forEach(t),u8r=i(hi),Dbe=n(hi,"P",{});var cht=s(Dbe);b8r=r(cht,"Examples:"),cht.forEach(t),v8r=i(hi),m(lA.$$.fragment,hi),hi.forEach(t),T8r=i(gi),Ro=n(gi,"DIV",{class:!0});var Ba=s(Ro);m(iA.$$.fragment,Ba),F8r=i(Ba),qbe=n(Ba,"P",{});var fht=s(qbe);C8r=r(fht,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fht.forEach(t),M8r=i(Ba),Ln=n(Ba,"P",{});var YC=s(Ln);E8r=r(YC,"The model class to instantiate is selected based on the "),Gbe=n(YC,"CODE",{});var mht=s(Gbe);y8r=r(mht,"model_type"),mht.forEach(t),w8r=r(YC,` property of the config object (either
passed as an argument or loaded from `),Obe=n(YC,"CODE",{});var ght=s(Obe);A8r=r(ght,"pretrained_model_name_or_path"),ght.forEach(t),L8r=r(YC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xbe=n(YC,"CODE",{});var hht=s(Xbe);B8r=r(hht,"pretrained_model_name_or_path"),hht.forEach(t),x8r=r(YC,":"),YC.forEach(t),k8r=i(Ba),Ce=n(Ba,"UL",{});var ro=s(Ce);LF=n(ro,"LI",{});var N0e=s(LF);zbe=n(N0e,"STRONG",{});var pht=s(zbe);R8r=r(pht,"albert"),pht.forEach(t),S8r=r(N0e," \u2014 "),FX=n(N0e,"A",{href:!0});var _ht=s(FX);P8r=r(_ht,"FlaxAlbertForQuestionAnswering"),_ht.forEach(t),$8r=r(N0e," (ALBERT model)"),N0e.forEach(t),I8r=i(ro),BF=n(ro,"LI",{});var D0e=s(BF);Vbe=n(D0e,"STRONG",{});var uht=s(Vbe);j8r=r(uht,"bart"),uht.forEach(t),N8r=r(D0e," \u2014 "),CX=n(D0e,"A",{href:!0});var bht=s(CX);D8r=r(bht,"FlaxBartForQuestionAnswering"),bht.forEach(t),q8r=r(D0e," (BART model)"),D0e.forEach(t),G8r=i(ro),xF=n(ro,"LI",{});var q0e=s(xF);Wbe=n(q0e,"STRONG",{});var vht=s(Wbe);O8r=r(vht,"bert"),vht.forEach(t),X8r=r(q0e," \u2014 "),MX=n(q0e,"A",{href:!0});var Tht=s(MX);z8r=r(Tht,"FlaxBertForQuestionAnswering"),Tht.forEach(t),V8r=r(q0e," (BERT model)"),q0e.forEach(t),W8r=i(ro),kF=n(ro,"LI",{});var G0e=s(kF);Qbe=n(G0e,"STRONG",{});var Fht=s(Qbe);Q8r=r(Fht,"big_bird"),Fht.forEach(t),H8r=r(G0e," \u2014 "),EX=n(G0e,"A",{href:!0});var Cht=s(EX);U8r=r(Cht,"FlaxBigBirdForQuestionAnswering"),Cht.forEach(t),J8r=r(G0e," (BigBird model)"),G0e.forEach(t),Y8r=i(ro),RF=n(ro,"LI",{});var O0e=s(RF);Hbe=n(O0e,"STRONG",{});var Mht=s(Hbe);K8r=r(Mht,"distilbert"),Mht.forEach(t),Z8r=r(O0e," \u2014 "),yX=n(O0e,"A",{href:!0});var Eht=s(yX);eFr=r(Eht,"FlaxDistilBertForQuestionAnswering"),Eht.forEach(t),oFr=r(O0e," (DistilBERT model)"),O0e.forEach(t),rFr=i(ro),SF=n(ro,"LI",{});var X0e=s(SF);Ube=n(X0e,"STRONG",{});var yht=s(Ube);tFr=r(yht,"electra"),yht.forEach(t),aFr=r(X0e," \u2014 "),wX=n(X0e,"A",{href:!0});var wht=s(wX);nFr=r(wht,"FlaxElectraForQuestionAnswering"),wht.forEach(t),sFr=r(X0e," (ELECTRA model)"),X0e.forEach(t),lFr=i(ro),PF=n(ro,"LI",{});var z0e=s(PF);Jbe=n(z0e,"STRONG",{});var Aht=s(Jbe);iFr=r(Aht,"mbart"),Aht.forEach(t),dFr=r(z0e," \u2014 "),AX=n(z0e,"A",{href:!0});var Lht=s(AX);cFr=r(Lht,"FlaxMBartForQuestionAnswering"),Lht.forEach(t),fFr=r(z0e," (mBART model)"),z0e.forEach(t),mFr=i(ro),$F=n(ro,"LI",{});var V0e=s($F);Ybe=n(V0e,"STRONG",{});var Bht=s(Ybe);gFr=r(Bht,"roberta"),Bht.forEach(t),hFr=r(V0e," \u2014 "),LX=n(V0e,"A",{href:!0});var xht=s(LX);pFr=r(xht,"FlaxRobertaForQuestionAnswering"),xht.forEach(t),_Fr=r(V0e," (RoBERTa model)"),V0e.forEach(t),uFr=i(ro),IF=n(ro,"LI",{});var W0e=s(IF);Kbe=n(W0e,"STRONG",{});var kht=s(Kbe);bFr=r(kht,"roformer"),kht.forEach(t),vFr=r(W0e," \u2014 "),BX=n(W0e,"A",{href:!0});var Rht=s(BX);TFr=r(Rht,"FlaxRoFormerForQuestionAnswering"),Rht.forEach(t),FFr=r(W0e," (RoFormer model)"),W0e.forEach(t),ro.forEach(t),CFr=i(Ba),Zbe=n(Ba,"P",{});var Sht=s(Zbe);MFr=r(Sht,"Examples:"),Sht.forEach(t),EFr=i(Ba),m(dA.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),eBe=i(d),lf=n(d,"H2",{class:!0});var cke=s(lf);jF=n(cke,"A",{id:!0,class:!0,href:!0});var Pht=s(jF);e5e=n(Pht,"SPAN",{});var $ht=s(e5e);m(cA.$$.fragment,$ht),$ht.forEach(t),Pht.forEach(t),yFr=i(cke),o5e=n(cke,"SPAN",{});var Iht=s(o5e);wFr=r(Iht,"FlaxAutoModelForTokenClassification"),Iht.forEach(t),cke.forEach(t),oBe=i(d),Sr=n(d,"DIV",{class:!0});var pi=s(Sr);m(fA.$$.fragment,pi),AFr=i(pi),df=n(pi,"P",{});var xV=s(df);LFr=r(xV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),r5e=n(xV,"CODE",{});var jht=s(r5e);BFr=r(jht,"from_pretrained()"),jht.forEach(t),xFr=r(xV,"class method or the "),t5e=n(xV,"CODE",{});var Nht=s(t5e);kFr=r(Nht,"from_config()"),Nht.forEach(t),RFr=r(xV,`class
method.`),xV.forEach(t),SFr=i(pi),mA=n(pi,"P",{});var fke=s(mA);PFr=r(fke,"This class cannot be instantiated directly using "),a5e=n(fke,"CODE",{});var Dht=s(a5e);$Fr=r(Dht,"__init__()"),Dht.forEach(t),IFr=r(fke," (throws an error)."),fke.forEach(t),jFr=i(pi),wt=n(pi,"DIV",{class:!0});var _i=s(wt);m(gA.$$.fragment,_i),NFr=i(_i),n5e=n(_i,"P",{});var qht=s(n5e);DFr=r(qht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qht.forEach(t),qFr=i(_i),cf=n(_i,"P",{});var kV=s(cf);GFr=r(kV,`Note:
Loading a model from its configuration file does `),s5e=n(kV,"STRONG",{});var Ght=s(s5e);OFr=r(Ght,"not"),Ght.forEach(t),XFr=r(kV,` load the model weights. It only affects the
model\u2019s configuration. Use `),l5e=n(kV,"CODE",{});var Oht=s(l5e);zFr=r(Oht,"from_pretrained()"),Oht.forEach(t),VFr=r(kV,"to load the model weights."),kV.forEach(t),WFr=i(_i),i5e=n(_i,"P",{});var Xht=s(i5e);QFr=r(Xht,"Examples:"),Xht.forEach(t),HFr=i(_i),m(hA.$$.fragment,_i),_i.forEach(t),UFr=i(pi),So=n(pi,"DIV",{class:!0});var xa=s(So);m(pA.$$.fragment,xa),JFr=i(xa),d5e=n(xa,"P",{});var zht=s(d5e);YFr=r(zht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zht.forEach(t),KFr=i(xa),Bn=n(xa,"P",{});var KC=s(Bn);ZFr=r(KC,"The model class to instantiate is selected based on the "),c5e=n(KC,"CODE",{});var Vht=s(c5e);eCr=r(Vht,"model_type"),Vht.forEach(t),oCr=r(KC,` property of the config object (either
passed as an argument or loaded from `),f5e=n(KC,"CODE",{});var Wht=s(f5e);rCr=r(Wht,"pretrained_model_name_or_path"),Wht.forEach(t),tCr=r(KC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m5e=n(KC,"CODE",{});var Qht=s(m5e);aCr=r(Qht,"pretrained_model_name_or_path"),Qht.forEach(t),nCr=r(KC,":"),KC.forEach(t),sCr=i(xa),so=n(xa,"UL",{});var ta=s(so);NF=n(ta,"LI",{});var Q0e=s(NF);g5e=n(Q0e,"STRONG",{});var Hht=s(g5e);lCr=r(Hht,"albert"),Hht.forEach(t),iCr=r(Q0e," \u2014 "),xX=n(Q0e,"A",{href:!0});var Uht=s(xX);dCr=r(Uht,"FlaxAlbertForTokenClassification"),Uht.forEach(t),cCr=r(Q0e," (ALBERT model)"),Q0e.forEach(t),fCr=i(ta),DF=n(ta,"LI",{});var H0e=s(DF);h5e=n(H0e,"STRONG",{});var Jht=s(h5e);mCr=r(Jht,"bert"),Jht.forEach(t),gCr=r(H0e," \u2014 "),kX=n(H0e,"A",{href:!0});var Yht=s(kX);hCr=r(Yht,"FlaxBertForTokenClassification"),Yht.forEach(t),pCr=r(H0e," (BERT model)"),H0e.forEach(t),_Cr=i(ta),qF=n(ta,"LI",{});var U0e=s(qF);p5e=n(U0e,"STRONG",{});var Kht=s(p5e);uCr=r(Kht,"big_bird"),Kht.forEach(t),bCr=r(U0e," \u2014 "),RX=n(U0e,"A",{href:!0});var Zht=s(RX);vCr=r(Zht,"FlaxBigBirdForTokenClassification"),Zht.forEach(t),TCr=r(U0e," (BigBird model)"),U0e.forEach(t),FCr=i(ta),GF=n(ta,"LI",{});var J0e=s(GF);_5e=n(J0e,"STRONG",{});var ept=s(_5e);CCr=r(ept,"distilbert"),ept.forEach(t),MCr=r(J0e," \u2014 "),SX=n(J0e,"A",{href:!0});var opt=s(SX);ECr=r(opt,"FlaxDistilBertForTokenClassification"),opt.forEach(t),yCr=r(J0e," (DistilBERT model)"),J0e.forEach(t),wCr=i(ta),OF=n(ta,"LI",{});var Y0e=s(OF);u5e=n(Y0e,"STRONG",{});var rpt=s(u5e);ACr=r(rpt,"electra"),rpt.forEach(t),LCr=r(Y0e," \u2014 "),PX=n(Y0e,"A",{href:!0});var tpt=s(PX);BCr=r(tpt,"FlaxElectraForTokenClassification"),tpt.forEach(t),xCr=r(Y0e," (ELECTRA model)"),Y0e.forEach(t),kCr=i(ta),XF=n(ta,"LI",{});var K0e=s(XF);b5e=n(K0e,"STRONG",{});var apt=s(b5e);RCr=r(apt,"roberta"),apt.forEach(t),SCr=r(K0e," \u2014 "),$X=n(K0e,"A",{href:!0});var npt=s($X);PCr=r(npt,"FlaxRobertaForTokenClassification"),npt.forEach(t),$Cr=r(K0e," (RoBERTa model)"),K0e.forEach(t),ICr=i(ta),zF=n(ta,"LI",{});var Z0e=s(zF);v5e=n(Z0e,"STRONG",{});var spt=s(v5e);jCr=r(spt,"roformer"),spt.forEach(t),NCr=r(Z0e," \u2014 "),IX=n(Z0e,"A",{href:!0});var lpt=s(IX);DCr=r(lpt,"FlaxRoFormerForTokenClassification"),lpt.forEach(t),qCr=r(Z0e," (RoFormer model)"),Z0e.forEach(t),ta.forEach(t),GCr=i(xa),T5e=n(xa,"P",{});var ipt=s(T5e);OCr=r(ipt,"Examples:"),ipt.forEach(t),XCr=i(xa),m(_A.$$.fragment,xa),xa.forEach(t),pi.forEach(t),rBe=i(d),ff=n(d,"H2",{class:!0});var mke=s(ff);VF=n(mke,"A",{id:!0,class:!0,href:!0});var dpt=s(VF);F5e=n(dpt,"SPAN",{});var cpt=s(F5e);m(uA.$$.fragment,cpt),cpt.forEach(t),dpt.forEach(t),zCr=i(mke),C5e=n(mke,"SPAN",{});var fpt=s(C5e);VCr=r(fpt,"FlaxAutoModelForMultipleChoice"),fpt.forEach(t),mke.forEach(t),tBe=i(d),Pr=n(d,"DIV",{class:!0});var ui=s(Pr);m(bA.$$.fragment,ui),WCr=i(ui),mf=n(ui,"P",{});var RV=s(mf);QCr=r(RV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),M5e=n(RV,"CODE",{});var mpt=s(M5e);HCr=r(mpt,"from_pretrained()"),mpt.forEach(t),UCr=r(RV,"class method or the "),E5e=n(RV,"CODE",{});var gpt=s(E5e);JCr=r(gpt,"from_config()"),gpt.forEach(t),YCr=r(RV,`class
method.`),RV.forEach(t),KCr=i(ui),vA=n(ui,"P",{});var gke=s(vA);ZCr=r(gke,"This class cannot be instantiated directly using "),y5e=n(gke,"CODE",{});var hpt=s(y5e);e4r=r(hpt,"__init__()"),hpt.forEach(t),o4r=r(gke," (throws an error)."),gke.forEach(t),r4r=i(ui),At=n(ui,"DIV",{class:!0});var bi=s(At);m(TA.$$.fragment,bi),t4r=i(bi),w5e=n(bi,"P",{});var ppt=s(w5e);a4r=r(ppt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ppt.forEach(t),n4r=i(bi),gf=n(bi,"P",{});var SV=s(gf);s4r=r(SV,`Note:
Loading a model from its configuration file does `),A5e=n(SV,"STRONG",{});var _pt=s(A5e);l4r=r(_pt,"not"),_pt.forEach(t),i4r=r(SV,` load the model weights. It only affects the
model\u2019s configuration. Use `),L5e=n(SV,"CODE",{});var upt=s(L5e);d4r=r(upt,"from_pretrained()"),upt.forEach(t),c4r=r(SV,"to load the model weights."),SV.forEach(t),f4r=i(bi),B5e=n(bi,"P",{});var bpt=s(B5e);m4r=r(bpt,"Examples:"),bpt.forEach(t),g4r=i(bi),m(FA.$$.fragment,bi),bi.forEach(t),h4r=i(ui),Po=n(ui,"DIV",{class:!0});var ka=s(Po);m(CA.$$.fragment,ka),p4r=i(ka),x5e=n(ka,"P",{});var vpt=s(x5e);_4r=r(vpt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vpt.forEach(t),u4r=i(ka),xn=n(ka,"P",{});var ZC=s(xn);b4r=r(ZC,"The model class to instantiate is selected based on the "),k5e=n(ZC,"CODE",{});var Tpt=s(k5e);v4r=r(Tpt,"model_type"),Tpt.forEach(t),T4r=r(ZC,` property of the config object (either
passed as an argument or loaded from `),R5e=n(ZC,"CODE",{});var Fpt=s(R5e);F4r=r(Fpt,"pretrained_model_name_or_path"),Fpt.forEach(t),C4r=r(ZC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S5e=n(ZC,"CODE",{});var Cpt=s(S5e);M4r=r(Cpt,"pretrained_model_name_or_path"),Cpt.forEach(t),E4r=r(ZC,":"),ZC.forEach(t),y4r=i(ka),lo=n(ka,"UL",{});var aa=s(lo);WF=n(aa,"LI",{});var eLe=s(WF);P5e=n(eLe,"STRONG",{});var Mpt=s(P5e);w4r=r(Mpt,"albert"),Mpt.forEach(t),A4r=r(eLe," \u2014 "),jX=n(eLe,"A",{href:!0});var Ept=s(jX);L4r=r(Ept,"FlaxAlbertForMultipleChoice"),Ept.forEach(t),B4r=r(eLe," (ALBERT model)"),eLe.forEach(t),x4r=i(aa),QF=n(aa,"LI",{});var oLe=s(QF);$5e=n(oLe,"STRONG",{});var ypt=s($5e);k4r=r(ypt,"bert"),ypt.forEach(t),R4r=r(oLe," \u2014 "),NX=n(oLe,"A",{href:!0});var wpt=s(NX);S4r=r(wpt,"FlaxBertForMultipleChoice"),wpt.forEach(t),P4r=r(oLe," (BERT model)"),oLe.forEach(t),$4r=i(aa),HF=n(aa,"LI",{});var rLe=s(HF);I5e=n(rLe,"STRONG",{});var Apt=s(I5e);I4r=r(Apt,"big_bird"),Apt.forEach(t),j4r=r(rLe," \u2014 "),DX=n(rLe,"A",{href:!0});var Lpt=s(DX);N4r=r(Lpt,"FlaxBigBirdForMultipleChoice"),Lpt.forEach(t),D4r=r(rLe," (BigBird model)"),rLe.forEach(t),q4r=i(aa),UF=n(aa,"LI",{});var tLe=s(UF);j5e=n(tLe,"STRONG",{});var Bpt=s(j5e);G4r=r(Bpt,"distilbert"),Bpt.forEach(t),O4r=r(tLe," \u2014 "),qX=n(tLe,"A",{href:!0});var xpt=s(qX);X4r=r(xpt,"FlaxDistilBertForMultipleChoice"),xpt.forEach(t),z4r=r(tLe," (DistilBERT model)"),tLe.forEach(t),V4r=i(aa),JF=n(aa,"LI",{});var aLe=s(JF);N5e=n(aLe,"STRONG",{});var kpt=s(N5e);W4r=r(kpt,"electra"),kpt.forEach(t),Q4r=r(aLe," \u2014 "),GX=n(aLe,"A",{href:!0});var Rpt=s(GX);H4r=r(Rpt,"FlaxElectraForMultipleChoice"),Rpt.forEach(t),U4r=r(aLe," (ELECTRA model)"),aLe.forEach(t),J4r=i(aa),YF=n(aa,"LI",{});var nLe=s(YF);D5e=n(nLe,"STRONG",{});var Spt=s(D5e);Y4r=r(Spt,"roberta"),Spt.forEach(t),K4r=r(nLe," \u2014 "),OX=n(nLe,"A",{href:!0});var Ppt=s(OX);Z4r=r(Ppt,"FlaxRobertaForMultipleChoice"),Ppt.forEach(t),eMr=r(nLe," (RoBERTa model)"),nLe.forEach(t),oMr=i(aa),KF=n(aa,"LI",{});var sLe=s(KF);q5e=n(sLe,"STRONG",{});var $pt=s(q5e);rMr=r($pt,"roformer"),$pt.forEach(t),tMr=r(sLe," \u2014 "),XX=n(sLe,"A",{href:!0});var Ipt=s(XX);aMr=r(Ipt,"FlaxRoFormerForMultipleChoice"),Ipt.forEach(t),nMr=r(sLe," (RoFormer model)"),sLe.forEach(t),aa.forEach(t),sMr=i(ka),G5e=n(ka,"P",{});var jpt=s(G5e);lMr=r(jpt,"Examples:"),jpt.forEach(t),iMr=i(ka),m(MA.$$.fragment,ka),ka.forEach(t),ui.forEach(t),aBe=i(d),hf=n(d,"H2",{class:!0});var hke=s(hf);ZF=n(hke,"A",{id:!0,class:!0,href:!0});var Npt=s(ZF);O5e=n(Npt,"SPAN",{});var Dpt=s(O5e);m(EA.$$.fragment,Dpt),Dpt.forEach(t),Npt.forEach(t),dMr=i(hke),X5e=n(hke,"SPAN",{});var qpt=s(X5e);cMr=r(qpt,"FlaxAutoModelForNextSentencePrediction"),qpt.forEach(t),hke.forEach(t),nBe=i(d),$r=n(d,"DIV",{class:!0});var vi=s($r);m(yA.$$.fragment,vi),fMr=i(vi),pf=n(vi,"P",{});var PV=s(pf);mMr=r(PV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),z5e=n(PV,"CODE",{});var Gpt=s(z5e);gMr=r(Gpt,"from_pretrained()"),Gpt.forEach(t),hMr=r(PV,"class method or the "),V5e=n(PV,"CODE",{});var Opt=s(V5e);pMr=r(Opt,"from_config()"),Opt.forEach(t),_Mr=r(PV,`class
method.`),PV.forEach(t),uMr=i(vi),wA=n(vi,"P",{});var pke=s(wA);bMr=r(pke,"This class cannot be instantiated directly using "),W5e=n(pke,"CODE",{});var Xpt=s(W5e);vMr=r(Xpt,"__init__()"),Xpt.forEach(t),TMr=r(pke," (throws an error)."),pke.forEach(t),FMr=i(vi),Lt=n(vi,"DIV",{class:!0});var Ti=s(Lt);m(AA.$$.fragment,Ti),CMr=i(Ti),Q5e=n(Ti,"P",{});var zpt=s(Q5e);MMr=r(zpt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zpt.forEach(t),EMr=i(Ti),_f=n(Ti,"P",{});var $V=s(_f);yMr=r($V,`Note:
Loading a model from its configuration file does `),H5e=n($V,"STRONG",{});var Vpt=s(H5e);wMr=r(Vpt,"not"),Vpt.forEach(t),AMr=r($V,` load the model weights. It only affects the
model\u2019s configuration. Use `),U5e=n($V,"CODE",{});var Wpt=s(U5e);LMr=r(Wpt,"from_pretrained()"),Wpt.forEach(t),BMr=r($V,"to load the model weights."),$V.forEach(t),xMr=i(Ti),J5e=n(Ti,"P",{});var Qpt=s(J5e);kMr=r(Qpt,"Examples:"),Qpt.forEach(t),RMr=i(Ti),m(LA.$$.fragment,Ti),Ti.forEach(t),SMr=i(vi),$o=n(vi,"DIV",{class:!0});var Ra=s($o);m(BA.$$.fragment,Ra),PMr=i(Ra),Y5e=n(Ra,"P",{});var Hpt=s(Y5e);$Mr=r(Hpt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Hpt.forEach(t),IMr=i(Ra),kn=n(Ra,"P",{});var e4=s(kn);jMr=r(e4,"The model class to instantiate is selected based on the "),K5e=n(e4,"CODE",{});var Upt=s(K5e);NMr=r(Upt,"model_type"),Upt.forEach(t),DMr=r(e4,` property of the config object (either
passed as an argument or loaded from `),Z5e=n(e4,"CODE",{});var Jpt=s(Z5e);qMr=r(Jpt,"pretrained_model_name_or_path"),Jpt.forEach(t),GMr=r(e4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=n(e4,"CODE",{});var Ypt=s(e2e);OMr=r(Ypt,"pretrained_model_name_or_path"),Ypt.forEach(t),XMr=r(e4,":"),e4.forEach(t),zMr=i(Ra),o2e=n(Ra,"UL",{});var Kpt=s(o2e);eC=n(Kpt,"LI",{});var lLe=s(eC);r2e=n(lLe,"STRONG",{});var Zpt=s(r2e);VMr=r(Zpt,"bert"),Zpt.forEach(t),WMr=r(lLe," \u2014 "),zX=n(lLe,"A",{href:!0});var e_t=s(zX);QMr=r(e_t,"FlaxBertForNextSentencePrediction"),e_t.forEach(t),HMr=r(lLe," (BERT model)"),lLe.forEach(t),Kpt.forEach(t),UMr=i(Ra),t2e=n(Ra,"P",{});var o_t=s(t2e);JMr=r(o_t,"Examples:"),o_t.forEach(t),YMr=i(Ra),m(xA.$$.fragment,Ra),Ra.forEach(t),vi.forEach(t),sBe=i(d),uf=n(d,"H2",{class:!0});var _ke=s(uf);oC=n(_ke,"A",{id:!0,class:!0,href:!0});var r_t=s(oC);a2e=n(r_t,"SPAN",{});var t_t=s(a2e);m(kA.$$.fragment,t_t),t_t.forEach(t),r_t.forEach(t),KMr=i(_ke),n2e=n(_ke,"SPAN",{});var a_t=s(n2e);ZMr=r(a_t,"FlaxAutoModelForImageClassification"),a_t.forEach(t),_ke.forEach(t),lBe=i(d),Ir=n(d,"DIV",{class:!0});var Fi=s(Ir);m(RA.$$.fragment,Fi),eEr=i(Fi),bf=n(Fi,"P",{});var IV=s(bf);oEr=r(IV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),s2e=n(IV,"CODE",{});var n_t=s(s2e);rEr=r(n_t,"from_pretrained()"),n_t.forEach(t),tEr=r(IV,"class method or the "),l2e=n(IV,"CODE",{});var s_t=s(l2e);aEr=r(s_t,"from_config()"),s_t.forEach(t),nEr=r(IV,`class
method.`),IV.forEach(t),sEr=i(Fi),SA=n(Fi,"P",{});var uke=s(SA);lEr=r(uke,"This class cannot be instantiated directly using "),i2e=n(uke,"CODE",{});var l_t=s(i2e);iEr=r(l_t,"__init__()"),l_t.forEach(t),dEr=r(uke," (throws an error)."),uke.forEach(t),cEr=i(Fi),Bt=n(Fi,"DIV",{class:!0});var Ci=s(Bt);m(PA.$$.fragment,Ci),fEr=i(Ci),d2e=n(Ci,"P",{});var i_t=s(d2e);mEr=r(i_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),i_t.forEach(t),gEr=i(Ci),vf=n(Ci,"P",{});var jV=s(vf);hEr=r(jV,`Note:
Loading a model from its configuration file does `),c2e=n(jV,"STRONG",{});var d_t=s(c2e);pEr=r(d_t,"not"),d_t.forEach(t),_Er=r(jV,` load the model weights. It only affects the
model\u2019s configuration. Use `),f2e=n(jV,"CODE",{});var c_t=s(f2e);uEr=r(c_t,"from_pretrained()"),c_t.forEach(t),bEr=r(jV,"to load the model weights."),jV.forEach(t),vEr=i(Ci),m2e=n(Ci,"P",{});var f_t=s(m2e);TEr=r(f_t,"Examples:"),f_t.forEach(t),FEr=i(Ci),m($A.$$.fragment,Ci),Ci.forEach(t),CEr=i(Fi),Io=n(Fi,"DIV",{class:!0});var Sa=s(Io);m(IA.$$.fragment,Sa),MEr=i(Sa),g2e=n(Sa,"P",{});var m_t=s(g2e);EEr=r(m_t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),m_t.forEach(t),yEr=i(Sa),Rn=n(Sa,"P",{});var o4=s(Rn);wEr=r(o4,"The model class to instantiate is selected based on the "),h2e=n(o4,"CODE",{});var g_t=s(h2e);AEr=r(g_t,"model_type"),g_t.forEach(t),LEr=r(o4,` property of the config object (either
passed as an argument or loaded from `),p2e=n(o4,"CODE",{});var h_t=s(p2e);BEr=r(h_t,"pretrained_model_name_or_path"),h_t.forEach(t),xEr=r(o4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=n(o4,"CODE",{});var p_t=s(_2e);kEr=r(p_t,"pretrained_model_name_or_path"),p_t.forEach(t),REr=r(o4,":"),o4.forEach(t),SEr=i(Sa),jA=n(Sa,"UL",{});var bke=s(jA);rC=n(bke,"LI",{});var iLe=s(rC);u2e=n(iLe,"STRONG",{});var __t=s(u2e);PEr=r(__t,"beit"),__t.forEach(t),$Er=r(iLe," \u2014 "),VX=n(iLe,"A",{href:!0});var u_t=s(VX);IEr=r(u_t,"FlaxBeitForImageClassification"),u_t.forEach(t),jEr=r(iLe," (BEiT model)"),iLe.forEach(t),NEr=i(bke),tC=n(bke,"LI",{});var dLe=s(tC);b2e=n(dLe,"STRONG",{});var b_t=s(b2e);DEr=r(b_t,"vit"),b_t.forEach(t),qEr=r(dLe," \u2014 "),WX=n(dLe,"A",{href:!0});var v_t=s(WX);GEr=r(v_t,"FlaxViTForImageClassification"),v_t.forEach(t),OEr=r(dLe," (ViT model)"),dLe.forEach(t),bke.forEach(t),XEr=i(Sa),v2e=n(Sa,"P",{});var T_t=s(v2e);zEr=r(T_t,"Examples:"),T_t.forEach(t),VEr=i(Sa),m(NA.$$.fragment,Sa),Sa.forEach(t),Fi.forEach(t),iBe=i(d),Tf=n(d,"H2",{class:!0});var vke=s(Tf);aC=n(vke,"A",{id:!0,class:!0,href:!0});var F_t=s(aC);T2e=n(F_t,"SPAN",{});var C_t=s(T2e);m(DA.$$.fragment,C_t),C_t.forEach(t),F_t.forEach(t),WEr=i(vke),F2e=n(vke,"SPAN",{});var M_t=s(F2e);QEr=r(M_t,"FlaxAutoModelForVision2Seq"),M_t.forEach(t),vke.forEach(t),dBe=i(d),jr=n(d,"DIV",{class:!0});var Mi=s(jr);m(qA.$$.fragment,Mi),HEr=i(Mi),Ff=n(Mi,"P",{});var NV=s(Ff);UEr=r(NV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),C2e=n(NV,"CODE",{});var E_t=s(C2e);JEr=r(E_t,"from_pretrained()"),E_t.forEach(t),YEr=r(NV,"class method or the "),M2e=n(NV,"CODE",{});var y_t=s(M2e);KEr=r(y_t,"from_config()"),y_t.forEach(t),ZEr=r(NV,`class
method.`),NV.forEach(t),e3r=i(Mi),GA=n(Mi,"P",{});var Tke=s(GA);o3r=r(Tke,"This class cannot be instantiated directly using "),E2e=n(Tke,"CODE",{});var w_t=s(E2e);r3r=r(w_t,"__init__()"),w_t.forEach(t),t3r=r(Tke," (throws an error)."),Tke.forEach(t),a3r=i(Mi),xt=n(Mi,"DIV",{class:!0});var Ei=s(xt);m(OA.$$.fragment,Ei),n3r=i(Ei),y2e=n(Ei,"P",{});var A_t=s(y2e);s3r=r(A_t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),A_t.forEach(t),l3r=i(Ei),Cf=n(Ei,"P",{});var DV=s(Cf);i3r=r(DV,`Note:
Loading a model from its configuration file does `),w2e=n(DV,"STRONG",{});var L_t=s(w2e);d3r=r(L_t,"not"),L_t.forEach(t),c3r=r(DV,` load the model weights. It only affects the
model\u2019s configuration. Use `),A2e=n(DV,"CODE",{});var B_t=s(A2e);f3r=r(B_t,"from_pretrained()"),B_t.forEach(t),m3r=r(DV,"to load the model weights."),DV.forEach(t),g3r=i(Ei),L2e=n(Ei,"P",{});var x_t=s(L2e);h3r=r(x_t,"Examples:"),x_t.forEach(t),p3r=i(Ei),m(XA.$$.fragment,Ei),Ei.forEach(t),_3r=i(Mi),jo=n(Mi,"DIV",{class:!0});var Pa=s(jo);m(zA.$$.fragment,Pa),u3r=i(Pa),B2e=n(Pa,"P",{});var k_t=s(B2e);b3r=r(k_t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),k_t.forEach(t),v3r=i(Pa),Sn=n(Pa,"P",{});var r4=s(Sn);T3r=r(r4,"The model class to instantiate is selected based on the "),x2e=n(r4,"CODE",{});var R_t=s(x2e);F3r=r(R_t,"model_type"),R_t.forEach(t),C3r=r(r4,` property of the config object (either
passed as an argument or loaded from `),k2e=n(r4,"CODE",{});var S_t=s(k2e);M3r=r(S_t,"pretrained_model_name_or_path"),S_t.forEach(t),E3r=r(r4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=n(r4,"CODE",{});var P_t=s(R2e);y3r=r(P_t,"pretrained_model_name_or_path"),P_t.forEach(t),w3r=r(r4,":"),r4.forEach(t),A3r=i(Pa),S2e=n(Pa,"UL",{});var $_t=s(S2e);nC=n($_t,"LI",{});var cLe=s(nC);P2e=n(cLe,"STRONG",{});var I_t=s(P2e);L3r=r(I_t,"vision-encoder-decoder"),I_t.forEach(t),B3r=r(cLe," \u2014 "),QX=n(cLe,"A",{href:!0});var j_t=s(QX);x3r=r(j_t,"FlaxVisionEncoderDecoderModel"),j_t.forEach(t),k3r=r(cLe," (Vision Encoder decoder model)"),cLe.forEach(t),$_t.forEach(t),R3r=i(Pa),$2e=n(Pa,"P",{});var N_t=s($2e);S3r=r(N_t,"Examples:"),N_t.forEach(t),P3r=i(Pa),m(VA.$$.fragment,Pa),Pa.forEach(t),Mi.forEach(t),this.h()},h(){c(J,"name","hf:doc:metadata"),c(J,"content",JSON.stringify(Q_t)),c(me,"id","auto-classes"),c(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(me,"href","#auto-classes"),c(ie,"class","relative group"),c(Pn,"href","/docs/transformers/pr_15786/en/model_doc/auto#transformers.AutoConfig"),c(In,"href","/docs/transformers/pr_15786/en/model_doc/auto#transformers.AutoModel"),c(jn,"href","/docs/transformers/pr_15786/en/model_doc/auto#transformers.AutoTokenizer"),c(Ri,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertModel"),c(Lf,"id","extending-the-auto-classes"),c(Lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lf,"href","#extending-the-auto-classes"),c(Si,"class","relative group"),c(xf,"id","transformers.AutoConfig"),c(xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xf,"href","#transformers.AutoConfig"),c(Pi,"class","relative group"),c(H0,"href","/docs/transformers/pr_15786/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(U0,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertConfig"),c(J0,"href","/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartConfig"),c(Y0,"href","/docs/transformers/pr_15786/en/model_doc/beit#transformers.BeitConfig"),c(K0,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertConfig"),c(Z0,"href","/docs/transformers/pr_15786/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(eL,"href","/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdConfig"),c(oL,"href","/docs/transformers/pr_15786/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(rL,"href","/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(tL,"href","/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(aL,"href","/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertConfig"),c(nL,"href","/docs/transformers/pr_15786/en/model_doc/canine#transformers.CanineConfig"),c(sL,"href","/docs/transformers/pr_15786/en/model_doc/clip#transformers.CLIPConfig"),c(lL,"href","/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertConfig"),c(iL,"href","/docs/transformers/pr_15786/en/model_doc/convnext#transformers.ConvNextConfig"),c(dL,"href","/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.CTRLConfig"),c(cL,"href","/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaConfig"),c(fL,"href","/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(mL,"href","/docs/transformers/pr_15786/en/model_doc/deit#transformers.DeiTConfig"),c(gL,"href","/docs/transformers/pr_15786/en/model_doc/detr#transformers.DetrConfig"),c(hL,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertConfig"),c(pL,"href","/docs/transformers/pr_15786/en/model_doc/dpr#transformers.DPRConfig"),c(_L,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraConfig"),c(uL,"href","/docs/transformers/pr_15786/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(bL,"href","/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertConfig"),c(vL,"href","/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetConfig"),c(TL,"href","/docs/transformers/pr_15786/en/model_doc/fsmt#transformers.FSMTConfig"),c(FL,"href","/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelConfig"),c(CL,"href","/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2Config"),c(ML,"href","/docs/transformers/pr_15786/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(EL,"href","/docs/transformers/pr_15786/en/model_doc/gptj#transformers.GPTJConfig"),c(yL,"href","/docs/transformers/pr_15786/en/model_doc/hubert#transformers.HubertConfig"),c(wL,"href","/docs/transformers/pr_15786/en/model_doc/ibert#transformers.IBertConfig"),c(AL,"href","/docs/transformers/pr_15786/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(LL,"href","/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(BL,"href","/docs/transformers/pr_15786/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(xL,"href","/docs/transformers/pr_15786/en/model_doc/led#transformers.LEDConfig"),c(kL,"href","/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerConfig"),c(RL,"href","/docs/transformers/pr_15786/en/model_doc/luke#transformers.LukeConfig"),c(SL,"href","/docs/transformers/pr_15786/en/model_doc/lxmert#transformers.LxmertConfig"),c(PL,"href","/docs/transformers/pr_15786/en/model_doc/m2m_100#transformers.M2M100Config"),c($L,"href","/docs/transformers/pr_15786/en/model_doc/marian#transformers.MarianConfig"),c(IL,"href","/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartConfig"),c(jL,"href","/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(NL,"href","/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(DL,"href","/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetConfig"),c(qL,"href","/docs/transformers/pr_15786/en/model_doc/mt5#transformers.MT5Config"),c(GL,"href","/docs/transformers/pr_15786/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(OL,"href","/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(XL,"href","/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.PegasusConfig"),c(zL,"href","/docs/transformers/pr_15786/en/model_doc/perceiver#transformers.PerceiverConfig"),c(VL,"href","/docs/transformers/pr_15786/en/model_doc/plbart#transformers.PLBartConfig"),c(WL,"href","/docs/transformers/pr_15786/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(QL,"href","/docs/transformers/pr_15786/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(HL,"href","/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(UL,"href","/docs/transformers/pr_15786/en/model_doc/rag#transformers.RagConfig"),c(JL,"href","/docs/transformers/pr_15786/en/model_doc/realm#transformers.RealmConfig"),c(YL,"href","/docs/transformers/pr_15786/en/model_doc/reformer#transformers.ReformerConfig"),c(KL,"href","/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertConfig"),c(ZL,"href","/docs/transformers/pr_15786/en/model_doc/retribert#transformers.RetriBertConfig"),c(e9,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaConfig"),c(o9,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerConfig"),c(r9,"href","/docs/transformers/pr_15786/en/model_doc/segformer#transformers.SegformerConfig"),c(t9,"href","/docs/transformers/pr_15786/en/model_doc/sew#transformers.SEWConfig"),c(a9,"href","/docs/transformers/pr_15786/en/model_doc/sew-d#transformers.SEWDConfig"),c(n9,"href","/docs/transformers/pr_15786/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(s9,"href","/docs/transformers/pr_15786/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(l9,"href","/docs/transformers/pr_15786/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(i9,"href","/docs/transformers/pr_15786/en/model_doc/splinter#transformers.SplinterConfig"),c(d9,"href","/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(c9,"href","/docs/transformers/pr_15786/en/model_doc/swin#transformers.SwinConfig"),c(f9,"href","/docs/transformers/pr_15786/en/model_doc/t5#transformers.T5Config"),c(m9,"href","/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TapasConfig"),c(g9,"href","/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(h9,"href","/docs/transformers/pr_15786/en/model_doc/trocr#transformers.TrOCRConfig"),c(p9,"href","/docs/transformers/pr_15786/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(_9,"href","/docs/transformers/pr_15786/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(u9,"href","/docs/transformers/pr_15786/en/model_doc/vilt#transformers.ViltConfig"),c(b9,"href","/docs/transformers/pr_15786/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(v9,"href","/docs/transformers/pr_15786/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(T9,"href","/docs/transformers/pr_15786/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(F9,"href","/docs/transformers/pr_15786/en/model_doc/vit#transformers.ViTConfig"),c(C9,"href","/docs/transformers/pr_15786/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(M9,"href","/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(E9,"href","/docs/transformers/pr_15786/en/model_doc/wavlm#transformers.WavLMConfig"),c(y9,"href","/docs/transformers/pr_15786/en/model_doc/xglm#transformers.XGLMConfig"),c(w9,"href","/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMConfig"),c(A9,"href","/docs/transformers/pr_15786/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(L9,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(B9,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(x9,"href","/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetConfig"),c(k9,"href","/docs/transformers/pr_15786/en/model_doc/yoso#transformers.YosoConfig"),c(fo,"class","docstring"),c(hg,"class","docstring"),c(Go,"class","docstring"),c(pg,"id","transformers.AutoTokenizer"),c(pg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pg,"href","#transformers.AutoTokenizer"),c(Ii,"class","relative group"),c(R9,"href","/docs/transformers/pr_15786/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(S9,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertTokenizer"),c(P9,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertTokenizerFast"),c($9,"href","/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartTokenizer"),c(I9,"href","/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartTokenizerFast"),c(j9,"href","/docs/transformers/pr_15786/en/model_doc/barthez#transformers.BarthezTokenizer"),c(N9,"href","/docs/transformers/pr_15786/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(D9,"href","/docs/transformers/pr_15786/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(q9,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertTokenizer"),c(G9,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertTokenizerFast"),c(O9,"href","/docs/transformers/pr_15786/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(X9,"href","/docs/transformers/pr_15786/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(z9,"href","/docs/transformers/pr_15786/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(V9,"href","/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(W9,"href","/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Q9,"href","/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(H9,"href","/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(U9,"href","/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(J9,"href","/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(Y9,"href","/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(K9,"href","/docs/transformers/pr_15786/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(Z9,"href","/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertTokenizer"),c(eB,"href","/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(oB,"href","/docs/transformers/pr_15786/en/model_doc/canine#transformers.CanineTokenizer"),c(rB,"href","/docs/transformers/pr_15786/en/model_doc/clip#transformers.CLIPTokenizer"),c(tB,"href","/docs/transformers/pr_15786/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(aB,"href","/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(nB,"href","/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(sB,"href","/docs/transformers/pr_15786/en/model_doc/cpm#transformers.CpmTokenizer"),c(lB,"href","/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(iB,"href","/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaTokenizer"),c(dB,"href","/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(cB,"href","/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(fB,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(mB,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(gB,"href","/docs/transformers/pr_15786/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(hB,"href","/docs/transformers/pr_15786/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(pB,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraTokenizer"),c(_B,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(uB,"href","/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(bB,"href","/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetTokenizer"),c(vB,"href","/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(TB,"href","/docs/transformers/pr_15786/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(FB,"href","/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelTokenizer"),c(CB,"href","/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(MB,"href","/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(EB,"href","/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(yB,"href","/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wB,"href","/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AB,"href","/docs/transformers/pr_15786/en/model_doc/herbert#transformers.HerbertTokenizer"),c(LB,"href","/docs/transformers/pr_15786/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(BB,"href","/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xB,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kB,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(RB,"href","/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(SB,"href","/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(PB,"href","/docs/transformers/pr_15786/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c($B,"href","/docs/transformers/pr_15786/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(IB,"href","/docs/transformers/pr_15786/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(jB,"href","/docs/transformers/pr_15786/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(NB,"href","/docs/transformers/pr_15786/en/model_doc/led#transformers.LEDTokenizer"),c(DB,"href","/docs/transformers/pr_15786/en/model_doc/led#transformers.LEDTokenizerFast"),c(qB,"href","/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerTokenizer"),c(GB,"href","/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(OB,"href","/docs/transformers/pr_15786/en/model_doc/luke#transformers.LukeTokenizer"),c(XB,"href","/docs/transformers/pr_15786/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(zB,"href","/docs/transformers/pr_15786/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(VB,"href","/docs/transformers/pr_15786/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(WB,"href","/docs/transformers/pr_15786/en/model_doc/marian#transformers.MarianTokenizer"),c(QB,"href","/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartTokenizer"),c(HB,"href","/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(UB,"href","/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(JB,"href","/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(YB,"href","/docs/transformers/pr_15786/en/model_doc/mluke#transformers.MLukeTokenizer"),c(KB,"href","/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(ZB,"href","/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(ex,"href","/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(ox,"href","/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(rx,"href","/docs/transformers/pr_15786/en/model_doc/mt5#transformers.T5Tokenizer"),c(tx,"href","/docs/transformers/pr_15786/en/model_doc/mt5#transformers.T5TokenizerFast"),c(ax,"href","/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(nx,"href","/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(sx,"href","/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(lx,"href","/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ix,"href","/docs/transformers/pr_15786/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(dx,"href","/docs/transformers/pr_15786/en/model_doc/phobert#transformers.PhobertTokenizer"),c(cx,"href","/docs/transformers/pr_15786/en/model_doc/plbart#transformers.PLBartTokenizer"),c(fx,"href","/docs/transformers/pr_15786/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(mx,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertTokenizer"),c(gx,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertTokenizerFast"),c(hx,"href","/docs/transformers/pr_15786/en/model_doc/rag#transformers.RagTokenizer"),c(px,"href","/docs/transformers/pr_15786/en/model_doc/reformer#transformers.ReformerTokenizer"),c(_x,"href","/docs/transformers/pr_15786/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(ux,"href","/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertTokenizer"),c(bx,"href","/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(vx,"href","/docs/transformers/pr_15786/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Tx,"href","/docs/transformers/pr_15786/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Fx,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Cx,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Mx,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(Ex,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(yx,"href","/docs/transformers/pr_15786/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(wx,"href","/docs/transformers/pr_15786/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Ax,"href","/docs/transformers/pr_15786/en/model_doc/splinter#transformers.SplinterTokenizer"),c(Lx,"href","/docs/transformers/pr_15786/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(Bx,"href","/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(xx,"href","/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(kx,"href","/docs/transformers/pr_15786/en/model_doc/mt5#transformers.T5Tokenizer"),c(Rx,"href","/docs/transformers/pr_15786/en/model_doc/mt5#transformers.T5TokenizerFast"),c(Sx,"href","/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TapasTokenizer"),c(Px,"href","/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c($x,"href","/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Ix,"href","/docs/transformers/pr_15786/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(jx,"href","/docs/transformers/pr_15786/en/model_doc/xglm#transformers.XGLMTokenizer"),c(Nx,"href","/docs/transformers/pr_15786/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(Dx,"href","/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMTokenizer"),c(qx,"href","/docs/transformers/pr_15786/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(Gx,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(Ox,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Xx,"href","/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(zx,"href","/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(mo,"class","docstring"),c(Vg,"class","docstring"),c(Oo,"class","docstring"),c(Wg,"id","transformers.AutoFeatureExtractor"),c(Wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wg,"href","#transformers.AutoFeatureExtractor"),c(ji,"class","relative group"),c(Vx,"href","/docs/transformers/pr_15786/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Wx,"href","/docs/transformers/pr_15786/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Qx,"href","/docs/transformers/pr_15786/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Hx,"href","/docs/transformers/pr_15786/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Ux,"href","/docs/transformers/pr_15786/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Jx,"href","/docs/transformers/pr_15786/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(Yx,"href","/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Kx,"href","/docs/transformers/pr_15786/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(Zx,"href","/docs/transformers/pr_15786/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(ek,"href","/docs/transformers/pr_15786/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(ok,"href","/docs/transformers/pr_15786/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(rk,"href","/docs/transformers/pr_15786/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(tk,"href","/docs/transformers/pr_15786/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(ak,"href","/docs/transformers/pr_15786/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(nk,"href","/docs/transformers/pr_15786/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sk,"href","/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Le,"class","docstring"),c(dh,"class","docstring"),c(Xo,"class","docstring"),c(ch,"id","transformers.AutoProcessor"),c(ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ch,"href","#transformers.AutoProcessor"),c(Ni,"class","relative group"),c(lk,"href","/docs/transformers/pr_15786/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(ik,"href","/docs/transformers/pr_15786/en/model_doc/clip#transformers.CLIPProcessor"),c(dk,"href","/docs/transformers/pr_15786/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(ck,"href","/docs/transformers/pr_15786/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(fk,"href","/docs/transformers/pr_15786/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(mk,"href","/docs/transformers/pr_15786/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(gk,"href","/docs/transformers/pr_15786/en/model_doc/trocr#transformers.TrOCRProcessor"),c(hk,"href","/docs/transformers/pr_15786/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(pk,"href","/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Be,"class","docstring"),c(Th,"class","docstring"),c(zo,"class","docstring"),c(Fh,"id","transformers.AutoModel"),c(Fh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fh,"href","#transformers.AutoModel"),c(qi,"class","relative group"),c(Nr,"class","docstring"),c(_k,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertModel"),c(uk,"href","/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartModel"),c(bk,"href","/docs/transformers/pr_15786/en/model_doc/beit#transformers.BeitModel"),c(vk,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertModel"),c(Tk,"href","/docs/transformers/pr_15786/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(Fk,"href","/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdModel"),c(Ck,"href","/docs/transformers/pr_15786/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(Mk,"href","/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(Ek,"href","/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(yk,"href","/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertModel"),c(wk,"href","/docs/transformers/pr_15786/en/model_doc/canine#transformers.CanineModel"),c(Ak,"href","/docs/transformers/pr_15786/en/model_doc/clip#transformers.CLIPModel"),c(Lk,"href","/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertModel"),c(Bk,"href","/docs/transformers/pr_15786/en/model_doc/convnext#transformers.ConvNextModel"),c(xk,"href","/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.CTRLModel"),c(kk,"href","/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaModel"),c(Rk,"href","/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Sk,"href","/docs/transformers/pr_15786/en/model_doc/deit#transformers.DeiTModel"),c(Pk,"href","/docs/transformers/pr_15786/en/model_doc/detr#transformers.DetrModel"),c($k,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertModel"),c(Ik,"href","/docs/transformers/pr_15786/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(jk,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraModel"),c(Nk,"href","/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertModel"),c(Dk,"href","/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetModel"),c(qk,"href","/docs/transformers/pr_15786/en/model_doc/fsmt#transformers.FSMTModel"),c(Gk,"href","/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelModel"),c(Ok,"href","/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Xk,"href","/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2Model"),c(zk,"href","/docs/transformers/pr_15786/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Vk,"href","/docs/transformers/pr_15786/en/model_doc/gptj#transformers.GPTJModel"),c(Wk,"href","/docs/transformers/pr_15786/en/model_doc/hubert#transformers.HubertModel"),c(Qk,"href","/docs/transformers/pr_15786/en/model_doc/ibert#transformers.IBertModel"),c(Hk,"href","/docs/transformers/pr_15786/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Uk,"href","/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Jk,"href","/docs/transformers/pr_15786/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Yk,"href","/docs/transformers/pr_15786/en/model_doc/led#transformers.LEDModel"),c(Kk,"href","/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerModel"),c(Zk,"href","/docs/transformers/pr_15786/en/model_doc/luke#transformers.LukeModel"),c(eR,"href","/docs/transformers/pr_15786/en/model_doc/lxmert#transformers.LxmertModel"),c(oR,"href","/docs/transformers/pr_15786/en/model_doc/m2m_100#transformers.M2M100Model"),c(rR,"href","/docs/transformers/pr_15786/en/model_doc/marian#transformers.MarianModel"),c(tR,"href","/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartModel"),c(aR,"href","/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(nR,"href","/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertModel"),c(sR,"href","/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetModel"),c(lR,"href","/docs/transformers/pr_15786/en/model_doc/mt5#transformers.MT5Model"),c(iR,"href","/docs/transformers/pr_15786/en/model_doc/nystromformer#transformers.NystromformerModel"),c(dR,"href","/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(cR,"href","/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.PegasusModel"),c(fR,"href","/docs/transformers/pr_15786/en/model_doc/perceiver#transformers.PerceiverModel"),c(mR,"href","/docs/transformers/pr_15786/en/model_doc/plbart#transformers.PLBartModel"),c(gR,"href","/docs/transformers/pr_15786/en/model_doc/poolformer#transformers.PoolFormerModel"),c(hR,"href","/docs/transformers/pr_15786/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(pR,"href","/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertModel"),c(_R,"href","/docs/transformers/pr_15786/en/model_doc/reformer#transformers.ReformerModel"),c(uR,"href","/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertModel"),c(bR,"href","/docs/transformers/pr_15786/en/model_doc/retribert#transformers.RetriBertModel"),c(vR,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaModel"),c(TR,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerModel"),c(FR,"href","/docs/transformers/pr_15786/en/model_doc/segformer#transformers.SegformerModel"),c(CR,"href","/docs/transformers/pr_15786/en/model_doc/sew#transformers.SEWModel"),c(MR,"href","/docs/transformers/pr_15786/en/model_doc/sew-d#transformers.SEWDModel"),c(ER,"href","/docs/transformers/pr_15786/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(yR,"href","/docs/transformers/pr_15786/en/model_doc/splinter#transformers.SplinterModel"),c(wR,"href","/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(AR,"href","/docs/transformers/pr_15786/en/model_doc/swin#transformers.SwinModel"),c(LR,"href","/docs/transformers/pr_15786/en/model_doc/t5#transformers.T5Model"),c(BR,"href","/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TapasModel"),c(xR,"href","/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(kR,"href","/docs/transformers/pr_15786/en/model_doc/unispeech#transformers.UniSpeechModel"),c(RR,"href","/docs/transformers/pr_15786/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(SR,"href","/docs/transformers/pr_15786/en/model_doc/vilt#transformers.ViltModel"),c(PR,"href","/docs/transformers/pr_15786/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c($R,"href","/docs/transformers/pr_15786/en/model_doc/visual_bert#transformers.VisualBertModel"),c(IR,"href","/docs/transformers/pr_15786/en/model_doc/vit#transformers.ViTModel"),c(jR,"href","/docs/transformers/pr_15786/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(NR,"href","/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(DR,"href","/docs/transformers/pr_15786/en/model_doc/wavlm#transformers.WavLMModel"),c(qR,"href","/docs/transformers/pr_15786/en/model_doc/xglm#transformers.XGLMModel"),c(GR,"href","/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMModel"),c(OR,"href","/docs/transformers/pr_15786/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(XR,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(zR,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(VR,"href","/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetModel"),c(WR,"href","/docs/transformers/pr_15786/en/model_doc/yoso#transformers.YosoModel"),c(xe,"class","docstring"),c(Vo,"class","docstring"),c(Kp,"id","transformers.AutoModelForPreTraining"),c(Kp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kp,"href","#transformers.AutoModelForPreTraining"),c(Xi,"class","relative group"),c(Dr,"class","docstring"),c(QR,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertForPreTraining"),c(HR,"href","/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(UR,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertForPreTraining"),c(JR,"href","/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(YR,"href","/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(KR,"href","/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ZR,"href","/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(eS,"href","/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(oS,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(rS,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraForPreTraining"),c(tS,"href","/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(aS,"href","/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetForPreTraining"),c(nS,"href","/docs/transformers/pr_15786/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(sS,"href","/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(lS,"href","/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(iS,"href","/docs/transformers/pr_15786/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(dS,"href","/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(cS,"href","/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(fS,"href","/docs/transformers/pr_15786/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(mS,"href","/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(gS,"href","/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(hS,"href","/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(pS,"href","/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(_S,"href","/docs/transformers/pr_15786/en/model_doc/retribert#transformers.RetriBertModel"),c(uS,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(bS,"href","/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(vS,"href","/docs/transformers/pr_15786/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(TS,"href","/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(FS,"href","/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(CS,"href","/docs/transformers/pr_15786/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(MS,"href","/docs/transformers/pr_15786/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(ES,"href","/docs/transformers/pr_15786/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(yS,"href","/docs/transformers/pr_15786/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(wS,"href","/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(AS,"href","/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(LS,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(BS,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(xS,"href","/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(ke,"class","docstring"),c(Wo,"class","docstring"),c(N_,"id","transformers.AutoModelForCausalLM"),c(N_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N_,"href","#transformers.AutoModelForCausalLM"),c(Wi,"class","relative group"),c(qr,"class","docstring"),c(kS,"href","/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartForCausalLM"),c(RS,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertLMHeadModel"),c(SS,"href","/docs/transformers/pr_15786/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(PS,"href","/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c($S,"href","/docs/transformers/pr_15786/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(IS,"href","/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(jS,"href","/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(NS,"href","/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(DS,"href","/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(qS,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraForCausalLM"),c(GS,"href","/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(OS,"href","/docs/transformers/pr_15786/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(XS,"href","/docs/transformers/pr_15786/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(zS,"href","/docs/transformers/pr_15786/en/model_doc/marian#transformers.MarianForCausalLM"),c(VS,"href","/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartForCausalLM"),c(WS,"href","/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(QS,"href","/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(HS,"href","/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(US,"href","/docs/transformers/pr_15786/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(JS,"href","/docs/transformers/pr_15786/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(YS,"href","/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(KS,"href","/docs/transformers/pr_15786/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(ZS,"href","/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(eP,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(oP,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(rP,"href","/docs/transformers/pr_15786/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(tP,"href","/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(aP,"href","/docs/transformers/pr_15786/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(nP,"href","/docs/transformers/pr_15786/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(sP,"href","/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(lP,"href","/docs/transformers/pr_15786/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(iP,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(dP,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(cP,"href","/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Re,"class","docstring"),c(Qo,"class","docstring"),c(Tu,"id","transformers.AutoModelForMaskedLM"),c(Tu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tu,"href","#transformers.AutoModelForMaskedLM"),c(Ui,"class","relative group"),c(Gr,"class","docstring"),c(fP,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(mP,"href","/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gP,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertForMaskedLM"),c(hP,"href","/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(pP,"href","/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(_P,"href","/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(uP,"href","/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(bP,"href","/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(vP,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(TP,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(FP,"href","/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(CP,"href","/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(MP,"href","/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(EP,"href","/docs/transformers/pr_15786/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(yP,"href","/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(wP,"href","/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(AP,"href","/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(LP,"href","/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(BP,"href","/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(xP,"href","/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(kP,"href","/docs/transformers/pr_15786/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(RP,"href","/docs/transformers/pr_15786/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(SP,"href","/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(PP,"href","/docs/transformers/pr_15786/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c($P,"href","/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(IP,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(jP,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(NP,"href","/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(DP,"href","/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(qP,"href","/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(GP,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(OP,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(XP,"href","/docs/transformers/pr_15786/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Se,"class","docstring"),c(Ho,"class","docstring"),c(r1,"id","transformers.AutoModelForSeq2SeqLM"),c(r1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ki,"class","relative group"),c(Or,"class","docstring"),c(zP,"href","/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(VP,"href","/docs/transformers/pr_15786/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(WP,"href","/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(QP,"href","/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(HP,"href","/docs/transformers/pr_15786/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(UP,"href","/docs/transformers/pr_15786/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(JP,"href","/docs/transformers/pr_15786/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(YP,"href","/docs/transformers/pr_15786/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(KP,"href","/docs/transformers/pr_15786/en/model_doc/marian#transformers.MarianMTModel"),c(ZP,"href","/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(e$,"href","/docs/transformers/pr_15786/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(o$,"href","/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(r$,"href","/docs/transformers/pr_15786/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(t$,"href","/docs/transformers/pr_15786/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(a$,"href","/docs/transformers/pr_15786/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(n$,"href","/docs/transformers/pr_15786/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Pe,"class","docstring"),c(Uo,"class","docstring"),c(T1,"id","transformers.AutoModelForSequenceClassification"),c(T1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T1,"href","#transformers.AutoModelForSequenceClassification"),c(od,"class","relative group"),c(Xr,"class","docstring"),c(s$,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(l$,"href","/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartForSequenceClassification"),c(i$,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertForSequenceClassification"),c(d$,"href","/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(c$,"href","/docs/transformers/pr_15786/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(f$,"href","/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(m$,"href","/docs/transformers/pr_15786/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(g$,"href","/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(h$,"href","/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(p$,"href","/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(_$,"href","/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(u$,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(b$,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(v$,"href","/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(T$,"href","/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(F$,"href","/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(C$,"href","/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(M$,"href","/docs/transformers/pr_15786/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(E$,"href","/docs/transformers/pr_15786/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(y$,"href","/docs/transformers/pr_15786/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(w$,"href","/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(A$,"href","/docs/transformers/pr_15786/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(L$,"href","/docs/transformers/pr_15786/en/model_doc/led#transformers.LEDForSequenceClassification"),c(B$,"href","/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(x$,"href","/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(k$,"href","/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(R$,"href","/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(S$,"href","/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(P$,"href","/docs/transformers/pr_15786/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c($$,"href","/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(I$,"href","/docs/transformers/pr_15786/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(j$,"href","/docs/transformers/pr_15786/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(N$,"href","/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(D$,"href","/docs/transformers/pr_15786/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(q$,"href","/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(G$,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(O$,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(X$,"href","/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(z$,"href","/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(V$,"href","/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(W$,"href","/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(Q$,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(H$,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(U$,"href","/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(J$,"href","/docs/transformers/pr_15786/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c($e,"class","docstring"),c(Jo,"class","docstring"),c(gb,"id","transformers.AutoModelForMultipleChoice"),c(gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gb,"href","#transformers.AutoModelForMultipleChoice"),c(ad,"class","relative group"),c(zr,"class","docstring"),c(Y$,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(K$,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertForMultipleChoice"),c(Z$,"href","/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(eI,"href","/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(oI,"href","/docs/transformers/pr_15786/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(rI,"href","/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(tI,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(aI,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(nI,"href","/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(sI,"href","/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(lI,"href","/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(iI,"href","/docs/transformers/pr_15786/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(dI,"href","/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(cI,"href","/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(fI,"href","/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(mI,"href","/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(gI,"href","/docs/transformers/pr_15786/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(hI,"href","/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(pI,"href","/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(_I,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(uI,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(bI,"href","/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(vI,"href","/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(TI,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(FI,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(CI,"href","/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(MI,"href","/docs/transformers/pr_15786/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ie,"class","docstring"),c(Yo,"class","docstring"),c(Ob,"id","transformers.AutoModelForNextSentencePrediction"),c(Ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ob,"href","#transformers.AutoModelForNextSentencePrediction"),c(ld,"class","relative group"),c(Vr,"class","docstring"),c(EI,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(yI,"href","/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(wI,"href","/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(AI,"href","/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(LI,"href","/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(je,"class","docstring"),c(Ko,"class","docstring"),c(Ub,"id","transformers.AutoModelForTokenClassification"),c(Ub,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ub,"href","#transformers.AutoModelForTokenClassification"),c(cd,"class","relative group"),c(Wr,"class","docstring"),c(BI,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(xI,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertForTokenClassification"),c(kI,"href","/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(RI,"href","/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(SI,"href","/docs/transformers/pr_15786/en/model_doc/canine#transformers.CanineForTokenClassification"),c(PI,"href","/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c($I,"href","/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(II,"href","/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(jI,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(NI,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(DI,"href","/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(qI,"href","/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(GI,"href","/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(OI,"href","/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(XI,"href","/docs/transformers/pr_15786/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(zI,"href","/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(VI,"href","/docs/transformers/pr_15786/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(WI,"href","/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(QI,"href","/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(HI,"href","/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(UI,"href","/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(JI,"href","/docs/transformers/pr_15786/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(YI,"href","/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(KI,"href","/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(ZI,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(ej,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(oj,"href","/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(rj,"href","/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(tj,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(aj,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(nj,"href","/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(sj,"href","/docs/transformers/pr_15786/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(Ne,"class","docstring"),c(Zo,"class","docstring"),c(B5,"id","transformers.AutoModelForQuestionAnswering"),c(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B5,"href","#transformers.AutoModelForQuestionAnswering"),c(gd,"class","relative group"),c(Qr,"class","docstring"),c(lj,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(ij,"href","/docs/transformers/pr_15786/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(dj,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(cj,"href","/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(fj,"href","/docs/transformers/pr_15786/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(mj,"href","/docs/transformers/pr_15786/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(gj,"href","/docs/transformers/pr_15786/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(hj,"href","/docs/transformers/pr_15786/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(pj,"href","/docs/transformers/pr_15786/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(_j,"href","/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(uj,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(bj,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(vj,"href","/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(Tj,"href","/docs/transformers/pr_15786/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(Fj,"href","/docs/transformers/pr_15786/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(Cj,"href","/docs/transformers/pr_15786/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(Mj,"href","/docs/transformers/pr_15786/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(Ej,"href","/docs/transformers/pr_15786/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(yj,"href","/docs/transformers/pr_15786/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(wj,"href","/docs/transformers/pr_15786/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(Aj,"href","/docs/transformers/pr_15786/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(Lj,"href","/docs/transformers/pr_15786/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(Bj,"href","/docs/transformers/pr_15786/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(xj,"href","/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(kj,"href","/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(Rj,"href","/docs/transformers/pr_15786/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(Sj,"href","/docs/transformers/pr_15786/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(Pj,"href","/docs/transformers/pr_15786/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c($j,"href","/docs/transformers/pr_15786/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(Ij,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(jj,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(Nj,"href","/docs/transformers/pr_15786/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(Dj,"href","/docs/transformers/pr_15786/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(qj,"href","/docs/transformers/pr_15786/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(Gj,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(Oj,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(Xj,"href","/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(zj,"href","/docs/transformers/pr_15786/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(De,"class","docstring"),c(er,"class","docstring"),c(p2,"id","transformers.AutoModelForTableQuestionAnswering"),c(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p2,"href","#transformers.AutoModelForTableQuestionAnswering"),c(_d,"class","relative group"),c(Hr,"class","docstring"),c(Vj,"href","/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(qe,"class","docstring"),c(or,"class","docstring"),c(b2,"id","transformers.AutoModelForImageClassification"),c(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b2,"href","#transformers.AutoModelForImageClassification"),c(vd,"class","relative group"),c(Ur,"class","docstring"),c(Wj,"href","/docs/transformers/pr_15786/en/model_doc/beit#transformers.BeitForImageClassification"),c(Qj,"href","/docs/transformers/pr_15786/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(Hj,"href","/docs/transformers/pr_15786/en/model_doc/deit#transformers.DeiTForImageClassification"),c(Uj,"href","/docs/transformers/pr_15786/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(Jj,"href","/docs/transformers/pr_15786/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(Yj,"href","/docs/transformers/pr_15786/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(Kj,"href","/docs/transformers/pr_15786/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(Zj,"href","/docs/transformers/pr_15786/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(eN,"href","/docs/transformers/pr_15786/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(oN,"href","/docs/transformers/pr_15786/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(rN,"href","/docs/transformers/pr_15786/en/model_doc/swin#transformers.SwinForImageClassification"),c(tN,"href","/docs/transformers/pr_15786/en/model_doc/vit#transformers.ViTForImageClassification"),c(Ge,"class","docstring"),c(rr,"class","docstring"),c(A2,"id","transformers.AutoModelForVision2Seq"),c(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A2,"href","#transformers.AutoModelForVision2Seq"),c(Cd,"class","relative group"),c(Jr,"class","docstring"),c(aN,"href","/docs/transformers/pr_15786/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(Oe,"class","docstring"),c(tr,"class","docstring"),c(x2,"id","transformers.AutoModelForAudioClassification"),c(x2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x2,"href","#transformers.AutoModelForAudioClassification"),c(yd,"class","relative group"),c(Yr,"class","docstring"),c(nN,"href","/docs/transformers/pr_15786/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(sN,"href","/docs/transformers/pr_15786/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(lN,"href","/docs/transformers/pr_15786/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(iN,"href","/docs/transformers/pr_15786/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(dN,"href","/docs/transformers/pr_15786/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(cN,"href","/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(fN,"href","/docs/transformers/pr_15786/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(Xe,"class","docstring"),c(ar,"class","docstring"),c(D2,"id","transformers.AutoModelForAudioFrameClassification"),c(D2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D2,"href","#transformers.AutoModelForAudioFrameClassification"),c(Ld,"class","relative group"),c(Kr,"class","docstring"),c(mN,"href","/docs/transformers/pr_15786/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(gN,"href","/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(hN,"href","/docs/transformers/pr_15786/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(ze,"class","docstring"),c(nr,"class","docstring"),c(z2,"id","transformers.AutoModelForCTC"),c(z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z2,"href","#transformers.AutoModelForCTC"),c(Rd,"class","relative group"),c(Zr,"class","docstring"),c(pN,"href","/docs/transformers/pr_15786/en/model_doc/hubert#transformers.HubertForCTC"),c(_N,"href","/docs/transformers/pr_15786/en/model_doc/sew#transformers.SEWForCTC"),c(uN,"href","/docs/transformers/pr_15786/en/model_doc/sew-d#transformers.SEWDForCTC"),c(bN,"href","/docs/transformers/pr_15786/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(vN,"href","/docs/transformers/pr_15786/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(TN,"href","/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(FN,"href","/docs/transformers/pr_15786/en/model_doc/wavlm#transformers.WavLMForCTC"),c(Ve,"class","docstring"),c(sr,"class","docstring"),c(Z2,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z2,"href","#transformers.AutoModelForSpeechSeq2Seq"),c($d,"class","relative group"),c(et,"class","docstring"),c(CN,"href","/docs/transformers/pr_15786/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(MN,"href","/docs/transformers/pr_15786/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(We,"class","docstring"),c(lr,"class","docstring"),c(tv,"id","transformers.AutoModelForAudioXVector"),c(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tv,"href","#transformers.AutoModelForAudioXVector"),c(Nd,"class","relative group"),c(ot,"class","docstring"),c(EN,"href","/docs/transformers/pr_15786/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(yN,"href","/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(wN,"href","/docs/transformers/pr_15786/en/model_doc/wavlm#transformers.WavLMForXVector"),c(Qe,"class","docstring"),c(ir,"class","docstring"),c(iv,"id","transformers.AutoModelForMaskedImageModeling"),c(iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iv,"href","#transformers.AutoModelForMaskedImageModeling"),c(Od,"class","relative group"),c(rt,"class","docstring"),c(AN,"href","/docs/transformers/pr_15786/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(LN,"href","/docs/transformers/pr_15786/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(BN,"href","/docs/transformers/pr_15786/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(He,"class","docstring"),c(dr,"class","docstring"),c(gv,"id","transformers.AutoModelForObjectDetection"),c(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gv,"href","#transformers.AutoModelForObjectDetection"),c(Wd,"class","relative group"),c(tt,"class","docstring"),c(xN,"href","/docs/transformers/pr_15786/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Ue,"class","docstring"),c(cr,"class","docstring"),c(_v,"id","transformers.AutoModelForImageSegmentation"),c(_v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_v,"href","#transformers.AutoModelForImageSegmentation"),c(Ud,"class","relative group"),c(at,"class","docstring"),c(kN,"href","/docs/transformers/pr_15786/en/model_doc/detr#transformers.DetrForSegmentation"),c(Je,"class","docstring"),c(fr,"class","docstring"),c(vv,"id","transformers.AutoModelForSemanticSegmentation"),c(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vv,"href","#transformers.AutoModelForSemanticSegmentation"),c(Kd,"class","relative group"),c(nt,"class","docstring"),c(RN,"href","/docs/transformers/pr_15786/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(SN,"href","/docs/transformers/pr_15786/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Ye,"class","docstring"),c(mr,"class","docstring"),c(Mv,"id","transformers.TFAutoModel"),c(Mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mv,"href","#transformers.TFAutoModel"),c(oc,"class","relative group"),c(st,"class","docstring"),c(PN,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.TFAlbertModel"),c($N,"href","/docs/transformers/pr_15786/en/model_doc/bart#transformers.TFBartModel"),c(IN,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.TFBertModel"),c(jN,"href","/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(NN,"href","/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(DN,"href","/docs/transformers/pr_15786/en/model_doc/camembert#transformers.TFCamembertModel"),c(qN,"href","/docs/transformers/pr_15786/en/model_doc/clip#transformers.TFCLIPModel"),c(GN,"href","/docs/transformers/pr_15786/en/model_doc/convbert#transformers.TFConvBertModel"),c(ON,"href","/docs/transformers/pr_15786/en/model_doc/convnext#transformers.TFConvNextModel"),c(XN,"href","/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.TFCTRLModel"),c(zN,"href","/docs/transformers/pr_15786/en/model_doc/deberta#transformers.TFDebertaModel"),c(VN,"href","/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(WN,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(QN,"href","/docs/transformers/pr_15786/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(HN,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.TFElectraModel"),c(UN,"href","/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(JN,"href","/docs/transformers/pr_15786/en/model_doc/funnel#transformers.TFFunnelModel"),c(YN,"href","/docs/transformers/pr_15786/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(KN,"href","/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.TFGPT2Model"),c(ZN,"href","/docs/transformers/pr_15786/en/model_doc/hubert#transformers.TFHubertModel"),c(eD,"href","/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(oD,"href","/docs/transformers/pr_15786/en/model_doc/led#transformers.TFLEDModel"),c(rD,"href","/docs/transformers/pr_15786/en/model_doc/longformer#transformers.TFLongformerModel"),c(tD,"href","/docs/transformers/pr_15786/en/model_doc/lxmert#transformers.TFLxmertModel"),c(aD,"href","/docs/transformers/pr_15786/en/model_doc/marian#transformers.TFMarianModel"),c(nD,"href","/docs/transformers/pr_15786/en/model_doc/mbart#transformers.TFMBartModel"),c(sD,"href","/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(lD,"href","/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.TFMPNetModel"),c(iD,"href","/docs/transformers/pr_15786/en/model_doc/mt5#transformers.TFMT5Model"),c(dD,"href","/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(cD,"href","/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.TFPegasusModel"),c(fD,"href","/docs/transformers/pr_15786/en/model_doc/rembert#transformers.TFRemBertModel"),c(mD,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.TFRobertaModel"),c(gD,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.TFRoFormerModel"),c(hD,"href","/docs/transformers/pr_15786/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(pD,"href","/docs/transformers/pr_15786/en/model_doc/t5#transformers.TFT5Model"),c(_D,"href","/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TFTapasModel"),c(uD,"href","/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(bD,"href","/docs/transformers/pr_15786/en/model_doc/vit#transformers.TFViTModel"),c(vD,"href","/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(TD,"href","/docs/transformers/pr_15786/en/model_doc/xlm#transformers.TFXLMModel"),c(FD,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(CD,"href","/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.TFXLNetModel"),c(go,"class","docstring"),c(gr,"class","docstring"),c(f6,"id","transformers.TFAutoModelForPreTraining"),c(f6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f6,"href","#transformers.TFAutoModelForPreTraining"),c(ac,"class","relative group"),c(lt,"class","docstring"),c(MD,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(ED,"href","/docs/transformers/pr_15786/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(yD,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.TFBertForPreTraining"),c(wD,"href","/docs/transformers/pr_15786/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(AD,"href","/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(LD,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(BD,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(xD,"href","/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(kD,"href","/docs/transformers/pr_15786/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(RD,"href","/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(SD,"href","/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(PD,"href","/docs/transformers/pr_15786/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c($D,"href","/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(ID,"href","/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(jD,"href","/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(ND,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(DD,"href","/docs/transformers/pr_15786/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(qD,"href","/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(GD,"href","/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(OD,"href","/docs/transformers/pr_15786/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(XD,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(zD,"href","/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(ho,"class","docstring"),c(hr,"class","docstring"),c(P6,"id","transformers.TFAutoModelForCausalLM"),c(P6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P6,"href","#transformers.TFAutoModelForCausalLM"),c(lc,"class","relative group"),c(it,"class","docstring"),c(VD,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(WD,"href","/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(QD,"href","/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(HD,"href","/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(UD,"href","/docs/transformers/pr_15786/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(JD,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(YD,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(KD,"href","/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(ZD,"href","/docs/transformers/pr_15786/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(eq,"href","/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(po,"class","docstring"),c(pr,"class","docstring"),c(V6,"id","transformers.TFAutoModelForImageClassification"),c(V6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V6,"href","#transformers.TFAutoModelForImageClassification"),c(cc,"class","relative group"),c(dt,"class","docstring"),c(oq,"href","/docs/transformers/pr_15786/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(rq,"href","/docs/transformers/pr_15786/en/model_doc/vit#transformers.TFViTForImageClassification"),c(_o,"class","docstring"),c(_r,"class","docstring"),c(H6,"id","transformers.TFAutoModelForMaskedLM"),c(H6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H6,"href","#transformers.TFAutoModelForMaskedLM"),c(gc,"class","relative group"),c(ct,"class","docstring"),c(tq,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(aq,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(nq,"href","/docs/transformers/pr_15786/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(sq,"href","/docs/transformers/pr_15786/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(lq,"href","/docs/transformers/pr_15786/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(iq,"href","/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(dq,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(cq,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(fq,"href","/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(mq,"href","/docs/transformers/pr_15786/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(gq,"href","/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(hq,"href","/docs/transformers/pr_15786/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(pq,"href","/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(_q,"href","/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(uq,"href","/docs/transformers/pr_15786/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(bq,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(vq,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(Tq,"href","/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Fq,"href","/docs/transformers/pr_15786/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Cq,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(uo,"class","docstring"),c(ur,"class","docstring"),c(pT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(_c,"class","relative group"),c(ft,"class","docstring"),c(Mq,"href","/docs/transformers/pr_15786/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Eq,"href","/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(yq,"href","/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(wq,"href","/docs/transformers/pr_15786/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(Aq,"href","/docs/transformers/pr_15786/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(Lq,"href","/docs/transformers/pr_15786/en/model_doc/marian#transformers.TFMarianMTModel"),c(Bq,"href","/docs/transformers/pr_15786/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(xq,"href","/docs/transformers/pr_15786/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(kq,"href","/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(Rq,"href","/docs/transformers/pr_15786/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(bo,"class","docstring"),c(br,"class","docstring"),c(wT,"id","transformers.TFAutoModelForSequenceClassification"),c(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wT,"href","#transformers.TFAutoModelForSequenceClassification"),c(vc,"class","relative group"),c(mt,"class","docstring"),c(Sq,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(Pq,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c($q,"href","/docs/transformers/pr_15786/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(Iq,"href","/docs/transformers/pr_15786/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(jq,"href","/docs/transformers/pr_15786/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(Nq,"href","/docs/transformers/pr_15786/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(Dq,"href","/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(qq,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(Gq,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(Oq,"href","/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(Xq,"href","/docs/transformers/pr_15786/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(zq,"href","/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(Vq,"href","/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(Wq,"href","/docs/transformers/pr_15786/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(Qq,"href","/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(Hq,"href","/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Uq,"href","/docs/transformers/pr_15786/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Jq,"href","/docs/transformers/pr_15786/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(Yq,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Kq,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Zq,"href","/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(eG,"href","/docs/transformers/pr_15786/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(oG,"href","/docs/transformers/pr_15786/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(rG,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(tG,"href","/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(vo,"class","docstring"),c(vr,"class","docstring"),c(KT,"id","transformers.TFAutoModelForMultipleChoice"),c(KT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KT,"href","#transformers.TFAutoModelForMultipleChoice"),c(Cc,"class","relative group"),c(gt,"class","docstring"),c(aG,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(nG,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(sG,"href","/docs/transformers/pr_15786/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(lG,"href","/docs/transformers/pr_15786/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(iG,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(dG,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(cG,"href","/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(fG,"href","/docs/transformers/pr_15786/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(mG,"href","/docs/transformers/pr_15786/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(gG,"href","/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(hG,"href","/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(pG,"href","/docs/transformers/pr_15786/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(_G,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(uG,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(bG,"href","/docs/transformers/pr_15786/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(vG,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(TG,"href","/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(To,"class","docstring"),c(Tr,"class","docstring"),c(_7,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(_7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_7,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(yc,"class","relative group"),c(ht,"class","docstring"),c(FG,"href","/docs/transformers/pr_15786/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Fo,"class","docstring"),c(Fr,"class","docstring"),c(b7,"id","transformers.TFAutoModelForTokenClassification"),c(b7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b7,"href","#transformers.TFAutoModelForTokenClassification"),c(Lc,"class","relative group"),c(pt,"class","docstring"),c(CG,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(MG,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(EG,"href","/docs/transformers/pr_15786/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(yG,"href","/docs/transformers/pr_15786/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(wG,"href","/docs/transformers/pr_15786/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(AG,"href","/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(LG,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(BG,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(xG,"href","/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(kG,"href","/docs/transformers/pr_15786/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(RG,"href","/docs/transformers/pr_15786/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(SG,"href","/docs/transformers/pr_15786/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(PG,"href","/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c($G,"href","/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(IG,"href","/docs/transformers/pr_15786/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(jG,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(NG,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(DG,"href","/docs/transformers/pr_15786/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(qG,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(GG,"href","/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Co,"class","docstring"),c(Cr,"class","docstring"),c(D7,"id","transformers.TFAutoModelForQuestionAnswering"),c(D7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D7,"href","#transformers.TFAutoModelForQuestionAnswering"),c(kc,"class","relative group"),c(_t,"class","docstring"),c(OG,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(XG,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(zG,"href","/docs/transformers/pr_15786/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(VG,"href","/docs/transformers/pr_15786/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(WG,"href","/docs/transformers/pr_15786/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(QG,"href","/docs/transformers/pr_15786/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(HG,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(UG,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(JG,"href","/docs/transformers/pr_15786/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(YG,"href","/docs/transformers/pr_15786/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(KG,"href","/docs/transformers/pr_15786/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(ZG,"href","/docs/transformers/pr_15786/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(eO,"href","/docs/transformers/pr_15786/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(oO,"href","/docs/transformers/pr_15786/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(rO,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(tO,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(aO,"href","/docs/transformers/pr_15786/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(nO,"href","/docs/transformers/pr_15786/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_15786/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Mo,"class","docstring"),c(Mr,"class","docstring"),c(n8,"id","transformers.TFAutoModelForVision2Seq"),c(n8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n8,"href","#transformers.TFAutoModelForVision2Seq"),c(Pc,"class","relative group"),c(ut,"class","docstring"),c(lO,"href","/docs/transformers/pr_15786/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Eo,"class","docstring"),c(Er,"class","docstring"),c(l8,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(l8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l8,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(jc,"class","relative group"),c(bt,"class","docstring"),c(iO,"href","/docs/transformers/pr_15786/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(yo,"class","docstring"),c(yr,"class","docstring"),c(d8,"id","transformers.FlaxAutoModel"),c(d8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d8,"href","#transformers.FlaxAutoModel"),c(qc,"class","relative group"),c(vt,"class","docstring"),c(dO,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.FlaxAlbertModel"),c(cO,"href","/docs/transformers/pr_15786/en/model_doc/bart#transformers.FlaxBartModel"),c(fO,"href","/docs/transformers/pr_15786/en/model_doc/beit#transformers.FlaxBeitModel"),c(mO,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.FlaxBertModel"),c(gO,"href","/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(hO,"href","/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(pO,"href","/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(_O,"href","/docs/transformers/pr_15786/en/model_doc/clip#transformers.FlaxCLIPModel"),c(uO,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(bO,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.FlaxElectraModel"),c(vO,"href","/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(TO,"href","/docs/transformers/pr_15786/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(FO,"href","/docs/transformers/pr_15786/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(CO,"href","/docs/transformers/pr_15786/en/model_doc/marian#transformers.FlaxMarianModel"),c(MO,"href","/docs/transformers/pr_15786/en/model_doc/mbart#transformers.FlaxMBartModel"),c(EO,"href","/docs/transformers/pr_15786/en/model_doc/mt5#transformers.FlaxMT5Model"),c(yO,"href","/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(wO,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(AO,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(LO,"href","/docs/transformers/pr_15786/en/model_doc/t5#transformers.FlaxT5Model"),c(BO,"href","/docs/transformers/pr_15786/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(xO,"href","/docs/transformers/pr_15786/en/model_doc/vit#transformers.FlaxViTModel"),c(kO,"href","/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(RO,"href","/docs/transformers/pr_15786/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(wo,"class","docstring"),c(wr,"class","docstring"),c(P8,"id","transformers.FlaxAutoModelForCausalLM"),c(P8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P8,"href","#transformers.FlaxAutoModelForCausalLM"),c(Xc,"class","relative group"),c(Tt,"class","docstring"),c(SO,"href","/docs/transformers/pr_15786/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(PO,"href","/docs/transformers/pr_15786/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c($O,"href","/docs/transformers/pr_15786/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(IO,"href","/docs/transformers/pr_15786/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Ao,"class","docstring"),c(Ar,"class","docstring"),c(D8,"id","transformers.FlaxAutoModelForPreTraining"),c(D8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D8,"href","#transformers.FlaxAutoModelForPreTraining"),c(Wc,"class","relative group"),c(Ft,"class","docstring"),c(jO,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(NO,"href","/docs/transformers/pr_15786/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(DO,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(qO,"href","/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(GO,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(OO,"href","/docs/transformers/pr_15786/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(XO,"href","/docs/transformers/pr_15786/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(zO,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(VO,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(WO,"href","/docs/transformers/pr_15786/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(QO,"href","/docs/transformers/pr_15786/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Lo,"class","docstring"),c(Lr,"class","docstring"),c(Y8,"id","transformers.FlaxAutoModelForMaskedLM"),c(Y8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y8,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Uc,"class","relative group"),c(Ct,"class","docstring"),c(HO,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(UO,"href","/docs/transformers/pr_15786/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(JO,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(YO,"href","/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(KO,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(ZO,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(eX,"href","/docs/transformers/pr_15786/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(oX,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(rX,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Bo,"class","docstring"),c(Br,"class","docstring"),c(lF,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lF,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Kc,"class","relative group"),c(Mt,"class","docstring"),c(tX,"href","/docs/transformers/pr_15786/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(aX,"href","/docs/transformers/pr_15786/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(nX,"href","/docs/transformers/pr_15786/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(sX,"href","/docs/transformers/pr_15786/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(lX,"href","/docs/transformers/pr_15786/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(iX,"href","/docs/transformers/pr_15786/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(dX,"href","/docs/transformers/pr_15786/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(cX,"href","/docs/transformers/pr_15786/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(fX,"href","/docs/transformers/pr_15786/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(xo,"class","docstring"),c(xr,"class","docstring"),c(uF,"id","transformers.FlaxAutoModelForSequenceClassification"),c(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uF,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(of,"class","relative group"),c(Et,"class","docstring"),c(mX,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(gX,"href","/docs/transformers/pr_15786/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(hX,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(pX,"href","/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(_X,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(uX,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(bX,"href","/docs/transformers/pr_15786/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(vX,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(TX,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(ko,"class","docstring"),c(kr,"class","docstring"),c(AF,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(AF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AF,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(af,"class","relative group"),c(yt,"class","docstring"),c(FX,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_15786/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(yX,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_15786/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(LX,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(BX,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Ro,"class","docstring"),c(Rr,"class","docstring"),c(jF,"id","transformers.FlaxAutoModelForTokenClassification"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.FlaxAutoModelForTokenClassification"),c(lf,"class","relative group"),c(wt,"class","docstring"),c(xX,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(kX,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(RX,"href","/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(SX,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(PX,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c($X,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(IX,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(So,"class","docstring"),c(Sr,"class","docstring"),c(VF,"id","transformers.FlaxAutoModelForMultipleChoice"),c(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VF,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ff,"class","relative group"),c(At,"class","docstring"),c(jX,"href","/docs/transformers/pr_15786/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(NX,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(DX,"href","/docs/transformers/pr_15786/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(qX,"href","/docs/transformers/pr_15786/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(GX,"href","/docs/transformers/pr_15786/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(OX,"href","/docs/transformers/pr_15786/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(XX,"href","/docs/transformers/pr_15786/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Po,"class","docstring"),c(Pr,"class","docstring"),c(ZF,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(hf,"class","relative group"),c(Lt,"class","docstring"),c(zX,"href","/docs/transformers/pr_15786/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c($o,"class","docstring"),c($r,"class","docstring"),c(oC,"id","transformers.FlaxAutoModelForImageClassification"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.FlaxAutoModelForImageClassification"),c(uf,"class","relative group"),c(Bt,"class","docstring"),c(VX,"href","/docs/transformers/pr_15786/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(WX,"href","/docs/transformers/pr_15786/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Io,"class","docstring"),c(Ir,"class","docstring"),c(aC,"id","transformers.FlaxAutoModelForVision2Seq"),c(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Tf,"class","relative group"),c(xt,"class","docstring"),c(QX,"href","/docs/transformers/pr_15786/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(jo,"class","docstring"),c(jr,"class","docstring")},m(d,u){e(document.head,J),b(d,Ae,u),b(d,ie,u),e(ie,me),e(me,to),g(ce,to,null),e(ie,ue),e(ie,Do),e(Do,wi),b(d,Ef,u),b(d,sa,u),e(sa,Ai),e(sa,Li),e(Li,t4),e(sa,yf),b(d,ye,u),b(d,io,u),e(io,Bi),e(io,Pn),e(Pn,a4),e(io,$n),e(io,In),e(In,n4),e(io,xi),e(io,jn),e(jn,s4),e(io,ki),b(d,wf,u),g($a,d,u),b(d,co,u),b(d,ge,u),e(ge,O0),e(ge,Ri),e(Ri,X0),e(ge,z0),b(d,qo,u),b(d,Ia,u),e(Ia,V0),e(Ia,Af),e(Af,W0),e(Ia,Fke),b(d,fLe,u),b(d,Si,u),e(Si,Lf),e(Lf,qV),g(l4,qV,null),e(Si,Cke),e(Si,GV),e(GV,Mke),b(d,mLe,u),b(d,Nn,u),e(Nn,Eke),e(Nn,OV),e(OV,yke),e(Nn,wke),e(Nn,XV),e(XV,Ake),e(Nn,Lke),b(d,gLe,u),g(i4,d,u),b(d,hLe,u),b(d,Q0,u),e(Q0,Bke),b(d,pLe,u),g(Bf,d,u),b(d,_Le,u),b(d,Pi,u),e(Pi,xf),e(xf,zV),g(d4,zV,null),e(Pi,xke),e(Pi,VV),e(VV,kke),b(d,uLe,u),b(d,Go,u),g(c4,Go,null),e(Go,Rke),e(Go,f4),e(f4,Ske),e(f4,H0),e(H0,Pke),e(f4,$ke),e(Go,Ike),e(Go,m4),e(m4,jke),e(m4,WV),e(WV,Nke),e(m4,Dke),e(Go,qke),e(Go,fo),g(g4,fo,null),e(fo,Gke),e(fo,QV),e(QV,Oke),e(fo,Xke),e(fo,$i),e($i,zke),e($i,HV),e(HV,Vke),e($i,Wke),e($i,UV),e(UV,Qke),e($i,Hke),e(fo,Uke),e(fo,v),e(v,kf),e(kf,JV),e(JV,Jke),e(kf,Yke),e(kf,U0),e(U0,Kke),e(kf,Zke),e(v,eRe),e(v,Rf),e(Rf,YV),e(YV,oRe),e(Rf,rRe),e(Rf,J0),e(J0,tRe),e(Rf,aRe),e(v,nRe),e(v,Sf),e(Sf,KV),e(KV,sRe),e(Sf,lRe),e(Sf,Y0),e(Y0,iRe),e(Sf,dRe),e(v,cRe),e(v,Pf),e(Pf,ZV),e(ZV,fRe),e(Pf,mRe),e(Pf,K0),e(K0,gRe),e(Pf,hRe),e(v,pRe),e(v,$f),e($f,eW),e(eW,_Re),e($f,uRe),e($f,Z0),e(Z0,bRe),e($f,vRe),e(v,TRe),e(v,If),e(If,oW),e(oW,FRe),e(If,CRe),e(If,eL),e(eL,MRe),e(If,ERe),e(v,yRe),e(v,jf),e(jf,rW),e(rW,wRe),e(jf,ARe),e(jf,oL),e(oL,LRe),e(jf,BRe),e(v,xRe),e(v,Nf),e(Nf,tW),e(tW,kRe),e(Nf,RRe),e(Nf,rL),e(rL,SRe),e(Nf,PRe),e(v,$Re),e(v,Df),e(Df,aW),e(aW,IRe),e(Df,jRe),e(Df,tL),e(tL,NRe),e(Df,DRe),e(v,qRe),e(v,qf),e(qf,nW),e(nW,GRe),e(qf,ORe),e(qf,aL),e(aL,XRe),e(qf,zRe),e(v,VRe),e(v,Gf),e(Gf,sW),e(sW,WRe),e(Gf,QRe),e(Gf,nL),e(nL,HRe),e(Gf,URe),e(v,JRe),e(v,Of),e(Of,lW),e(lW,YRe),e(Of,KRe),e(Of,sL),e(sL,ZRe),e(Of,eSe),e(v,oSe),e(v,Xf),e(Xf,iW),e(iW,rSe),e(Xf,tSe),e(Xf,lL),e(lL,aSe),e(Xf,nSe),e(v,sSe),e(v,zf),e(zf,dW),e(dW,lSe),e(zf,iSe),e(zf,iL),e(iL,dSe),e(zf,cSe),e(v,fSe),e(v,Vf),e(Vf,cW),e(cW,mSe),e(Vf,gSe),e(Vf,dL),e(dL,hSe),e(Vf,pSe),e(v,_Se),e(v,Wf),e(Wf,fW),e(fW,uSe),e(Wf,bSe),e(Wf,cL),e(cL,vSe),e(Wf,TSe),e(v,FSe),e(v,Qf),e(Qf,mW),e(mW,CSe),e(Qf,MSe),e(Qf,fL),e(fL,ESe),e(Qf,ySe),e(v,wSe),e(v,Hf),e(Hf,gW),e(gW,ASe),e(Hf,LSe),e(Hf,mL),e(mL,BSe),e(Hf,xSe),e(v,kSe),e(v,Uf),e(Uf,hW),e(hW,RSe),e(Uf,SSe),e(Uf,gL),e(gL,PSe),e(Uf,$Se),e(v,ISe),e(v,Jf),e(Jf,pW),e(pW,jSe),e(Jf,NSe),e(Jf,hL),e(hL,DSe),e(Jf,qSe),e(v,GSe),e(v,Yf),e(Yf,_W),e(_W,OSe),e(Yf,XSe),e(Yf,pL),e(pL,zSe),e(Yf,VSe),e(v,WSe),e(v,Kf),e(Kf,uW),e(uW,QSe),e(Kf,HSe),e(Kf,_L),e(_L,USe),e(Kf,JSe),e(v,YSe),e(v,Zf),e(Zf,bW),e(bW,KSe),e(Zf,ZSe),e(Zf,uL),e(uL,ePe),e(Zf,oPe),e(v,rPe),e(v,em),e(em,vW),e(vW,tPe),e(em,aPe),e(em,bL),e(bL,nPe),e(em,sPe),e(v,lPe),e(v,om),e(om,TW),e(TW,iPe),e(om,dPe),e(om,vL),e(vL,cPe),e(om,fPe),e(v,mPe),e(v,rm),e(rm,FW),e(FW,gPe),e(rm,hPe),e(rm,TL),e(TL,pPe),e(rm,_Pe),e(v,uPe),e(v,tm),e(tm,CW),e(CW,bPe),e(tm,vPe),e(tm,FL),e(FL,TPe),e(tm,FPe),e(v,CPe),e(v,am),e(am,MW),e(MW,MPe),e(am,EPe),e(am,CL),e(CL,yPe),e(am,wPe),e(v,APe),e(v,nm),e(nm,EW),e(EW,LPe),e(nm,BPe),e(nm,ML),e(ML,xPe),e(nm,kPe),e(v,RPe),e(v,sm),e(sm,yW),e(yW,SPe),e(sm,PPe),e(sm,EL),e(EL,$Pe),e(sm,IPe),e(v,jPe),e(v,lm),e(lm,wW),e(wW,NPe),e(lm,DPe),e(lm,yL),e(yL,qPe),e(lm,GPe),e(v,OPe),e(v,im),e(im,AW),e(AW,XPe),e(im,zPe),e(im,wL),e(wL,VPe),e(im,WPe),e(v,QPe),e(v,dm),e(dm,LW),e(LW,HPe),e(dm,UPe),e(dm,AL),e(AL,JPe),e(dm,YPe),e(v,KPe),e(v,cm),e(cm,BW),e(BW,ZPe),e(cm,e$e),e(cm,LL),e(LL,o$e),e(cm,r$e),e(v,t$e),e(v,fm),e(fm,xW),e(xW,a$e),e(fm,n$e),e(fm,BL),e(BL,s$e),e(fm,l$e),e(v,i$e),e(v,mm),e(mm,kW),e(kW,d$e),e(mm,c$e),e(mm,xL),e(xL,f$e),e(mm,m$e),e(v,g$e),e(v,gm),e(gm,RW),e(RW,h$e),e(gm,p$e),e(gm,kL),e(kL,_$e),e(gm,u$e),e(v,b$e),e(v,hm),e(hm,SW),e(SW,v$e),e(hm,T$e),e(hm,RL),e(RL,F$e),e(hm,C$e),e(v,M$e),e(v,pm),e(pm,PW),e(PW,E$e),e(pm,y$e),e(pm,SL),e(SL,w$e),e(pm,A$e),e(v,L$e),e(v,_m),e(_m,$W),e($W,B$e),e(_m,x$e),e(_m,PL),e(PL,k$e),e(_m,R$e),e(v,S$e),e(v,um),e(um,IW),e(IW,P$e),e(um,$$e),e(um,$L),e($L,I$e),e(um,j$e),e(v,N$e),e(v,bm),e(bm,jW),e(jW,D$e),e(bm,q$e),e(bm,IL),e(IL,G$e),e(bm,O$e),e(v,X$e),e(v,vm),e(vm,NW),e(NW,z$e),e(vm,V$e),e(vm,jL),e(jL,W$e),e(vm,Q$e),e(v,H$e),e(v,Tm),e(Tm,DW),e(DW,U$e),e(Tm,J$e),e(Tm,NL),e(NL,Y$e),e(Tm,K$e),e(v,Z$e),e(v,Fm),e(Fm,qW),e(qW,eIe),e(Fm,oIe),e(Fm,DL),e(DL,rIe),e(Fm,tIe),e(v,aIe),e(v,Cm),e(Cm,GW),e(GW,nIe),e(Cm,sIe),e(Cm,qL),e(qL,lIe),e(Cm,iIe),e(v,dIe),e(v,Mm),e(Mm,OW),e(OW,cIe),e(Mm,fIe),e(Mm,GL),e(GL,mIe),e(Mm,gIe),e(v,hIe),e(v,Em),e(Em,XW),e(XW,pIe),e(Em,_Ie),e(Em,OL),e(OL,uIe),e(Em,bIe),e(v,vIe),e(v,ym),e(ym,zW),e(zW,TIe),e(ym,FIe),e(ym,XL),e(XL,CIe),e(ym,MIe),e(v,EIe),e(v,wm),e(wm,VW),e(VW,yIe),e(wm,wIe),e(wm,zL),e(zL,AIe),e(wm,LIe),e(v,BIe),e(v,Am),e(Am,WW),e(WW,xIe),e(Am,kIe),e(Am,VL),e(VL,RIe),e(Am,SIe),e(v,PIe),e(v,Lm),e(Lm,QW),e(QW,$Ie),e(Lm,IIe),e(Lm,WL),e(WL,jIe),e(Lm,NIe),e(v,DIe),e(v,Bm),e(Bm,HW),e(HW,qIe),e(Bm,GIe),e(Bm,QL),e(QL,OIe),e(Bm,XIe),e(v,zIe),e(v,xm),e(xm,UW),e(UW,VIe),e(xm,WIe),e(xm,HL),e(HL,QIe),e(xm,HIe),e(v,UIe),e(v,km),e(km,JW),e(JW,JIe),e(km,YIe),e(km,UL),e(UL,KIe),e(km,ZIe),e(v,eje),e(v,Rm),e(Rm,YW),e(YW,oje),e(Rm,rje),e(Rm,JL),e(JL,tje),e(Rm,aje),e(v,nje),e(v,Sm),e(Sm,KW),e(KW,sje),e(Sm,lje),e(Sm,YL),e(YL,ije),e(Sm,dje),e(v,cje),e(v,Pm),e(Pm,ZW),e(ZW,fje),e(Pm,mje),e(Pm,KL),e(KL,gje),e(Pm,hje),e(v,pje),e(v,$m),e($m,eQ),e(eQ,_je),e($m,uje),e($m,ZL),e(ZL,bje),e($m,vje),e(v,Tje),e(v,Im),e(Im,oQ),e(oQ,Fje),e(Im,Cje),e(Im,e9),e(e9,Mje),e(Im,Eje),e(v,yje),e(v,jm),e(jm,rQ),e(rQ,wje),e(jm,Aje),e(jm,o9),e(o9,Lje),e(jm,Bje),e(v,xje),e(v,Nm),e(Nm,tQ),e(tQ,kje),e(Nm,Rje),e(Nm,r9),e(r9,Sje),e(Nm,Pje),e(v,$je),e(v,Dm),e(Dm,aQ),e(aQ,Ije),e(Dm,jje),e(Dm,t9),e(t9,Nje),e(Dm,Dje),e(v,qje),e(v,qm),e(qm,nQ),e(nQ,Gje),e(qm,Oje),e(qm,a9),e(a9,Xje),e(qm,zje),e(v,Vje),e(v,Gm),e(Gm,sQ),e(sQ,Wje),e(Gm,Qje),e(Gm,n9),e(n9,Hje),e(Gm,Uje),e(v,Jje),e(v,Om),e(Om,lQ),e(lQ,Yje),e(Om,Kje),e(Om,s9),e(s9,Zje),e(Om,eNe),e(v,oNe),e(v,Xm),e(Xm,iQ),e(iQ,rNe),e(Xm,tNe),e(Xm,l9),e(l9,aNe),e(Xm,nNe),e(v,sNe),e(v,zm),e(zm,dQ),e(dQ,lNe),e(zm,iNe),e(zm,i9),e(i9,dNe),e(zm,cNe),e(v,fNe),e(v,Vm),e(Vm,cQ),e(cQ,mNe),e(Vm,gNe),e(Vm,d9),e(d9,hNe),e(Vm,pNe),e(v,_Ne),e(v,Wm),e(Wm,fQ),e(fQ,uNe),e(Wm,bNe),e(Wm,c9),e(c9,vNe),e(Wm,TNe),e(v,FNe),e(v,Qm),e(Qm,mQ),e(mQ,CNe),e(Qm,MNe),e(Qm,f9),e(f9,ENe),e(Qm,yNe),e(v,wNe),e(v,Hm),e(Hm,gQ),e(gQ,ANe),e(Hm,LNe),e(Hm,m9),e(m9,BNe),e(Hm,xNe),e(v,kNe),e(v,Um),e(Um,hQ),e(hQ,RNe),e(Um,SNe),e(Um,g9),e(g9,PNe),e(Um,$Ne),e(v,INe),e(v,Jm),e(Jm,pQ),e(pQ,jNe),e(Jm,NNe),e(Jm,h9),e(h9,DNe),e(Jm,qNe),e(v,GNe),e(v,Ym),e(Ym,_Q),e(_Q,ONe),e(Ym,XNe),e(Ym,p9),e(p9,zNe),e(Ym,VNe),e(v,WNe),e(v,Km),e(Km,uQ),e(uQ,QNe),e(Km,HNe),e(Km,_9),e(_9,UNe),e(Km,JNe),e(v,YNe),e(v,Zm),e(Zm,bQ),e(bQ,KNe),e(Zm,ZNe),e(Zm,u9),e(u9,eDe),e(Zm,oDe),e(v,rDe),e(v,eg),e(eg,vQ),e(vQ,tDe),e(eg,aDe),e(eg,b9),e(b9,nDe),e(eg,sDe),e(v,lDe),e(v,og),e(og,TQ),e(TQ,iDe),e(og,dDe),e(og,v9),e(v9,cDe),e(og,fDe),e(v,mDe),e(v,rg),e(rg,FQ),e(FQ,gDe),e(rg,hDe),e(rg,T9),e(T9,pDe),e(rg,_De),e(v,uDe),e(v,tg),e(tg,CQ),e(CQ,bDe),e(tg,vDe),e(tg,F9),e(F9,TDe),e(tg,FDe),e(v,CDe),e(v,ag),e(ag,MQ),e(MQ,MDe),e(ag,EDe),e(ag,C9),e(C9,yDe),e(ag,wDe),e(v,ADe),e(v,ng),e(ng,EQ),e(EQ,LDe),e(ng,BDe),e(ng,M9),e(M9,xDe),e(ng,kDe),e(v,RDe),e(v,sg),e(sg,yQ),e(yQ,SDe),e(sg,PDe),e(sg,E9),e(E9,$De),e(sg,IDe),e(v,jDe),e(v,lg),e(lg,wQ),e(wQ,NDe),e(lg,DDe),e(lg,y9),e(y9,qDe),e(lg,GDe),e(v,ODe),e(v,ig),e(ig,AQ),e(AQ,XDe),e(ig,zDe),e(ig,w9),e(w9,VDe),e(ig,WDe),e(v,QDe),e(v,dg),e(dg,LQ),e(LQ,HDe),e(dg,UDe),e(dg,A9),e(A9,JDe),e(dg,YDe),e(v,KDe),e(v,cg),e(cg,BQ),e(BQ,ZDe),e(cg,eqe),e(cg,L9),e(L9,oqe),e(cg,rqe),e(v,tqe),e(v,fg),e(fg,xQ),e(xQ,aqe),e(fg,nqe),e(fg,B9),e(B9,sqe),e(fg,lqe),e(v,iqe),e(v,mg),e(mg,kQ),e(kQ,dqe),e(mg,cqe),e(mg,x9),e(x9,fqe),e(mg,mqe),e(v,gqe),e(v,gg),e(gg,RQ),e(RQ,hqe),e(gg,pqe),e(gg,k9),e(k9,_qe),e(gg,uqe),e(fo,bqe),e(fo,SQ),e(SQ,vqe),e(fo,Tqe),g(h4,fo,null),e(Go,Fqe),e(Go,hg),g(p4,hg,null),e(hg,Cqe),e(hg,PQ),e(PQ,Mqe),b(d,bLe,u),b(d,Ii,u),e(Ii,pg),e(pg,$Q),g(_4,$Q,null),e(Ii,Eqe),e(Ii,IQ),e(IQ,yqe),b(d,vLe,u),b(d,Oo,u),g(u4,Oo,null),e(Oo,wqe),e(Oo,b4),e(b4,Aqe),e(b4,R9),e(R9,Lqe),e(b4,Bqe),e(Oo,xqe),e(Oo,v4),e(v4,kqe),e(v4,jQ),e(jQ,Rqe),e(v4,Sqe),e(Oo,Pqe),e(Oo,mo),g(T4,mo,null),e(mo,$qe),e(mo,NQ),e(NQ,Iqe),e(mo,jqe),e(mo,ja),e(ja,Nqe),e(ja,DQ),e(DQ,Dqe),e(ja,qqe),e(ja,qQ),e(qQ,Gqe),e(ja,Oqe),e(ja,GQ),e(GQ,Xqe),e(ja,zqe),e(mo,Vqe),e(mo,M),e(M,Dn),e(Dn,OQ),e(OQ,Wqe),e(Dn,Qqe),e(Dn,S9),e(S9,Hqe),e(Dn,Uqe),e(Dn,P9),e(P9,Jqe),e(Dn,Yqe),e(M,Kqe),e(M,qn),e(qn,XQ),e(XQ,Zqe),e(qn,eGe),e(qn,$9),e($9,oGe),e(qn,rGe),e(qn,I9),e(I9,tGe),e(qn,aGe),e(M,nGe),e(M,Gn),e(Gn,zQ),e(zQ,sGe),e(Gn,lGe),e(Gn,j9),e(j9,iGe),e(Gn,dGe),e(Gn,N9),e(N9,cGe),e(Gn,fGe),e(M,mGe),e(M,_g),e(_g,VQ),e(VQ,gGe),e(_g,hGe),e(_g,D9),e(D9,pGe),e(_g,_Ge),e(M,uGe),e(M,On),e(On,WQ),e(WQ,bGe),e(On,vGe),e(On,q9),e(q9,TGe),e(On,FGe),e(On,G9),e(G9,CGe),e(On,MGe),e(M,EGe),e(M,ug),e(ug,QQ),e(QQ,yGe),e(ug,wGe),e(ug,O9),e(O9,AGe),e(ug,LGe),e(M,BGe),e(M,bg),e(bg,HQ),e(HQ,xGe),e(bg,kGe),e(bg,X9),e(X9,RGe),e(bg,SGe),e(M,PGe),e(M,vg),e(vg,UQ),e(UQ,$Ge),e(vg,IGe),e(vg,z9),e(z9,jGe),e(vg,NGe),e(M,DGe),e(M,Xn),e(Xn,JQ),e(JQ,qGe),e(Xn,GGe),e(Xn,V9),e(V9,OGe),e(Xn,XGe),e(Xn,W9),e(W9,zGe),e(Xn,VGe),e(M,WGe),e(M,zn),e(zn,YQ),e(YQ,QGe),e(zn,HGe),e(zn,Q9),e(Q9,UGe),e(zn,JGe),e(zn,H9),e(H9,YGe),e(zn,KGe),e(M,ZGe),e(M,Vn),e(Vn,KQ),e(KQ,eOe),e(Vn,oOe),e(Vn,U9),e(U9,rOe),e(Vn,tOe),e(Vn,J9),e(J9,aOe),e(Vn,nOe),e(M,sOe),e(M,Tg),e(Tg,ZQ),e(ZQ,lOe),e(Tg,iOe),e(Tg,Y9),e(Y9,dOe),e(Tg,cOe),e(M,fOe),e(M,Fg),e(Fg,eH),e(eH,mOe),e(Fg,gOe),e(Fg,K9),e(K9,hOe),e(Fg,pOe),e(M,_Oe),e(M,Wn),e(Wn,oH),e(oH,uOe),e(Wn,bOe),e(Wn,Z9),e(Z9,vOe),e(Wn,TOe),e(Wn,eB),e(eB,FOe),e(Wn,COe),e(M,MOe),e(M,Cg),e(Cg,rH),e(rH,EOe),e(Cg,yOe),e(Cg,oB),e(oB,wOe),e(Cg,AOe),e(M,LOe),e(M,Qn),e(Qn,tH),e(tH,BOe),e(Qn,xOe),e(Qn,rB),e(rB,kOe),e(Qn,ROe),e(Qn,tB),e(tB,SOe),e(Qn,POe),e(M,$Oe),e(M,Hn),e(Hn,aH),e(aH,IOe),e(Hn,jOe),e(Hn,aB),e(aB,NOe),e(Hn,DOe),e(Hn,nB),e(nB,qOe),e(Hn,GOe),e(M,OOe),e(M,Un),e(Un,nH),e(nH,XOe),e(Un,zOe),e(Un,sB),e(sB,VOe),e(Un,WOe),e(Un,sH),e(sH,QOe),e(Un,HOe),e(M,UOe),e(M,Mg),e(Mg,lH),e(lH,JOe),e(Mg,YOe),e(Mg,lB),e(lB,KOe),e(Mg,ZOe),e(M,eXe),e(M,Jn),e(Jn,iH),e(iH,oXe),e(Jn,rXe),e(Jn,iB),e(iB,tXe),e(Jn,aXe),e(Jn,dB),e(dB,nXe),e(Jn,sXe),e(M,lXe),e(M,Eg),e(Eg,dH),e(dH,iXe),e(Eg,dXe),e(Eg,cB),e(cB,cXe),e(Eg,fXe),e(M,mXe),e(M,Yn),e(Yn,cH),e(cH,gXe),e(Yn,hXe),e(Yn,fB),e(fB,pXe),e(Yn,_Xe),e(Yn,mB),e(mB,uXe),e(Yn,bXe),e(M,vXe),e(M,Kn),e(Kn,fH),e(fH,TXe),e(Kn,FXe),e(Kn,gB),e(gB,CXe),e(Kn,MXe),e(Kn,hB),e(hB,EXe),e(Kn,yXe),e(M,wXe),e(M,Zn),e(Zn,mH),e(mH,AXe),e(Zn,LXe),e(Zn,pB),e(pB,BXe),e(Zn,xXe),e(Zn,_B),e(_B,kXe),e(Zn,RXe),e(M,SXe),e(M,yg),e(yg,gH),e(gH,PXe),e(yg,$Xe),e(yg,uB),e(uB,IXe),e(yg,jXe),e(M,NXe),e(M,es),e(es,hH),e(hH,DXe),e(es,qXe),e(es,bB),e(bB,GXe),e(es,OXe),e(es,vB),e(vB,XXe),e(es,zXe),e(M,VXe),e(M,wg),e(wg,pH),e(pH,WXe),e(wg,QXe),e(wg,TB),e(TB,HXe),e(wg,UXe),e(M,JXe),e(M,os),e(os,_H),e(_H,YXe),e(os,KXe),e(os,FB),e(FB,ZXe),e(os,eze),e(os,CB),e(CB,oze),e(os,rze),e(M,tze),e(M,rs),e(rs,uH),e(uH,aze),e(rs,nze),e(rs,MB),e(MB,sze),e(rs,lze),e(rs,EB),e(EB,ize),e(rs,dze),e(M,cze),e(M,ts),e(ts,bH),e(bH,fze),e(ts,mze),e(ts,yB),e(yB,gze),e(ts,hze),e(ts,wB),e(wB,pze),e(ts,_ze),e(M,uze),e(M,as),e(as,vH),e(vH,bze),e(as,vze),e(as,AB),e(AB,Tze),e(as,Fze),e(as,LB),e(LB,Cze),e(as,Mze),e(M,Eze),e(M,Ag),e(Ag,TH),e(TH,yze),e(Ag,wze),e(Ag,BB),e(BB,Aze),e(Ag,Lze),e(M,Bze),e(M,ns),e(ns,FH),e(FH,xze),e(ns,kze),e(ns,xB),e(xB,Rze),e(ns,Sze),e(ns,kB),e(kB,Pze),e(ns,$ze),e(M,Ize),e(M,ss),e(ss,CH),e(CH,jze),e(ss,Nze),e(ss,RB),e(RB,Dze),e(ss,qze),e(ss,SB),e(SB,Gze),e(ss,Oze),e(M,Xze),e(M,ls),e(ls,MH),e(MH,zze),e(ls,Vze),e(ls,PB),e(PB,Wze),e(ls,Qze),e(ls,$B),e($B,Hze),e(ls,Uze),e(M,Jze),e(M,is),e(is,EH),e(EH,Yze),e(is,Kze),e(is,IB),e(IB,Zze),e(is,eVe),e(is,jB),e(jB,oVe),e(is,rVe),e(M,tVe),e(M,ds),e(ds,yH),e(yH,aVe),e(ds,nVe),e(ds,NB),e(NB,sVe),e(ds,lVe),e(ds,DB),e(DB,iVe),e(ds,dVe),e(M,cVe),e(M,cs),e(cs,wH),e(wH,fVe),e(cs,mVe),e(cs,qB),e(qB,gVe),e(cs,hVe),e(cs,GB),e(GB,pVe),e(cs,_Ve),e(M,uVe),e(M,Lg),e(Lg,AH),e(AH,bVe),e(Lg,vVe),e(Lg,OB),e(OB,TVe),e(Lg,FVe),e(M,CVe),e(M,fs),e(fs,LH),e(LH,MVe),e(fs,EVe),e(fs,XB),e(XB,yVe),e(fs,wVe),e(fs,zB),e(zB,AVe),e(fs,LVe),e(M,BVe),e(M,Bg),e(Bg,BH),e(BH,xVe),e(Bg,kVe),e(Bg,VB),e(VB,RVe),e(Bg,SVe),e(M,PVe),e(M,xg),e(xg,xH),e(xH,$Ve),e(xg,IVe),e(xg,WB),e(WB,jVe),e(xg,NVe),e(M,DVe),e(M,ms),e(ms,kH),e(kH,qVe),e(ms,GVe),e(ms,QB),e(QB,OVe),e(ms,XVe),e(ms,HB),e(HB,zVe),e(ms,VVe),e(M,WVe),e(M,gs),e(gs,RH),e(RH,QVe),e(gs,HVe),e(gs,UB),e(UB,UVe),e(gs,JVe),e(gs,JB),e(JB,YVe),e(gs,KVe),e(M,ZVe),e(M,kg),e(kg,SH),e(SH,eWe),e(kg,oWe),e(kg,YB),e(YB,rWe),e(kg,tWe),e(M,aWe),e(M,hs),e(hs,PH),e(PH,nWe),e(hs,sWe),e(hs,KB),e(KB,lWe),e(hs,iWe),e(hs,ZB),e(ZB,dWe),e(hs,cWe),e(M,fWe),e(M,ps),e(ps,$H),e($H,mWe),e(ps,gWe),e(ps,ex),e(ex,hWe),e(ps,pWe),e(ps,ox),e(ox,_We),e(ps,uWe),e(M,bWe),e(M,_s),e(_s,IH),e(IH,vWe),e(_s,TWe),e(_s,rx),e(rx,FWe),e(_s,CWe),e(_s,tx),e(tx,MWe),e(_s,EWe),e(M,yWe),e(M,us),e(us,jH),e(jH,wWe),e(us,AWe),e(us,ax),e(ax,LWe),e(us,BWe),e(us,nx),e(nx,xWe),e(us,kWe),e(M,RWe),e(M,bs),e(bs,NH),e(NH,SWe),e(bs,PWe),e(bs,sx),e(sx,$We),e(bs,IWe),e(bs,lx),e(lx,jWe),e(bs,NWe),e(M,DWe),e(M,Rg),e(Rg,DH),e(DH,qWe),e(Rg,GWe),e(Rg,ix),e(ix,OWe),e(Rg,XWe),e(M,zWe),e(M,Sg),e(Sg,qH),e(qH,VWe),e(Sg,WWe),e(Sg,dx),e(dx,QWe),e(Sg,HWe),e(M,UWe),e(M,Pg),e(Pg,GH),e(GH,JWe),e(Pg,YWe),e(Pg,cx),e(cx,KWe),e(Pg,ZWe),e(M,eQe),e(M,$g),e($g,OH),e(OH,oQe),e($g,rQe),e($g,fx),e(fx,tQe),e($g,aQe),e(M,nQe),e(M,vs),e(vs,XH),e(XH,sQe),e(vs,lQe),e(vs,mx),e(mx,iQe),e(vs,dQe),e(vs,gx),e(gx,cQe),e(vs,fQe),e(M,mQe),e(M,Ig),e(Ig,zH),e(zH,gQe),e(Ig,hQe),e(Ig,hx),e(hx,pQe),e(Ig,_Qe),e(M,uQe),e(M,Ts),e(Ts,VH),e(VH,bQe),e(Ts,vQe),e(Ts,px),e(px,TQe),e(Ts,FQe),e(Ts,_x),e(_x,CQe),e(Ts,MQe),e(M,EQe),e(M,Fs),e(Fs,WH),e(WH,yQe),e(Fs,wQe),e(Fs,ux),e(ux,AQe),e(Fs,LQe),e(Fs,bx),e(bx,BQe),e(Fs,xQe),e(M,kQe),e(M,Cs),e(Cs,QH),e(QH,RQe),e(Cs,SQe),e(Cs,vx),e(vx,PQe),e(Cs,$Qe),e(Cs,Tx),e(Tx,IQe),e(Cs,jQe),e(M,NQe),e(M,Ms),e(Ms,HH),e(HH,DQe),e(Ms,qQe),e(Ms,Fx),e(Fx,GQe),e(Ms,OQe),e(Ms,Cx),e(Cx,XQe),e(Ms,zQe),e(M,VQe),e(M,Es),e(Es,UH),e(UH,WQe),e(Es,QQe),e(Es,Mx),e(Mx,HQe),e(Es,UQe),e(Es,Ex),e(Ex,JQe),e(Es,YQe),e(M,KQe),e(M,jg),e(jg,JH),e(JH,ZQe),e(jg,eHe),e(jg,yx),e(yx,oHe),e(jg,rHe),e(M,tHe),e(M,Ng),e(Ng,YH),e(YH,aHe),e(Ng,nHe),e(Ng,wx),e(wx,sHe),e(Ng,lHe),e(M,iHe),e(M,ys),e(ys,KH),e(KH,dHe),e(ys,cHe),e(ys,Ax),e(Ax,fHe),e(ys,mHe),e(ys,Lx),e(Lx,gHe),e(ys,hHe),e(M,pHe),e(M,ws),e(ws,ZH),e(ZH,_He),e(ws,uHe),e(ws,Bx),e(Bx,bHe),e(ws,vHe),e(ws,xx),e(xx,THe),e(ws,FHe),e(M,CHe),e(M,As),e(As,eU),e(eU,MHe),e(As,EHe),e(As,kx),e(kx,yHe),e(As,wHe),e(As,Rx),e(Rx,AHe),e(As,LHe),e(M,BHe),e(M,Dg),e(Dg,oU),e(oU,xHe),e(Dg,kHe),e(Dg,Sx),e(Sx,RHe),e(Dg,SHe),e(M,PHe),e(M,qg),e(qg,rU),e(rU,$He),e(qg,IHe),e(qg,Px),e(Px,jHe),e(qg,NHe),e(M,DHe),e(M,Gg),e(Gg,tU),e(tU,qHe),e(Gg,GHe),e(Gg,$x),e($x,OHe),e(Gg,XHe),e(M,zHe),e(M,Og),e(Og,aU),e(aU,VHe),e(Og,WHe),e(Og,Ix),e(Ix,QHe),e(Og,HHe),e(M,UHe),e(M,Ls),e(Ls,nU),e(nU,JHe),e(Ls,YHe),e(Ls,jx),e(jx,KHe),e(Ls,ZHe),e(Ls,Nx),e(Nx,eUe),e(Ls,oUe),e(M,rUe),e(M,Xg),e(Xg,sU),e(sU,tUe),e(Xg,aUe),e(Xg,Dx),e(Dx,nUe),e(Xg,sUe),e(M,lUe),e(M,zg),e(zg,lU),e(lU,iUe),e(zg,dUe),e(zg,qx),e(qx,cUe),e(zg,fUe),e(M,mUe),e(M,Bs),e(Bs,iU),e(iU,gUe),e(Bs,hUe),e(Bs,Gx),e(Gx,pUe),e(Bs,_Ue),e(Bs,Ox),e(Ox,uUe),e(Bs,bUe),e(M,vUe),e(M,xs),e(xs,dU),e(dU,TUe),e(xs,FUe),e(xs,Xx),e(Xx,CUe),e(xs,MUe),e(xs,zx),e(zx,EUe),e(xs,yUe),e(mo,wUe),e(mo,cU),e(cU,AUe),e(mo,LUe),g(F4,mo,null),e(Oo,BUe),e(Oo,Vg),g(C4,Vg,null),e(Vg,xUe),e(Vg,fU),e(fU,kUe),b(d,TLe,u),b(d,ji,u),e(ji,Wg),e(Wg,mU),g(M4,mU,null),e(ji,RUe),e(ji,gU),e(gU,SUe),b(d,FLe,u),b(d,Xo,u),g(E4,Xo,null),e(Xo,PUe),e(Xo,y4),e(y4,$Ue),e(y4,Vx),e(Vx,IUe),e(y4,jUe),e(Xo,NUe),e(Xo,w4),e(w4,DUe),e(w4,hU),e(hU,qUe),e(w4,GUe),e(Xo,OUe),e(Xo,Le),g(A4,Le,null),e(Le,XUe),e(Le,pU),e(pU,zUe),e(Le,VUe),e(Le,Na),e(Na,WUe),e(Na,_U),e(_U,QUe),e(Na,HUe),e(Na,uU),e(uU,UUe),e(Na,JUe),e(Na,bU),e(bU,YUe),e(Na,KUe),e(Le,ZUe),e(Le,se),e(se,Qg),e(Qg,vU),e(vU,eJe),e(Qg,oJe),e(Qg,Wx),e(Wx,rJe),e(Qg,tJe),e(se,aJe),e(se,Hg),e(Hg,TU),e(TU,nJe),e(Hg,sJe),e(Hg,Qx),e(Qx,lJe),e(Hg,iJe),e(se,dJe),e(se,Ug),e(Ug,FU),e(FU,cJe),e(Ug,fJe),e(Ug,Hx),e(Hx,mJe),e(Ug,gJe),e(se,hJe),e(se,Jg),e(Jg,CU),e(CU,pJe),e(Jg,_Je),e(Jg,Ux),e(Ux,uJe),e(Jg,bJe),e(se,vJe),e(se,Yg),e(Yg,MU),e(MU,TJe),e(Yg,FJe),e(Yg,Jx),e(Jx,CJe),e(Yg,MJe),e(se,EJe),e(se,Kg),e(Kg,EU),e(EU,yJe),e(Kg,wJe),e(Kg,Yx),e(Yx,AJe),e(Kg,LJe),e(se,BJe),e(se,Zg),e(Zg,yU),e(yU,xJe),e(Zg,kJe),e(Zg,Kx),e(Kx,RJe),e(Zg,SJe),e(se,PJe),e(se,eh),e(eh,wU),e(wU,$Je),e(eh,IJe),e(eh,Zx),e(Zx,jJe),e(eh,NJe),e(se,DJe),e(se,oh),e(oh,AU),e(AU,qJe),e(oh,GJe),e(oh,ek),e(ek,OJe),e(oh,XJe),e(se,zJe),e(se,rh),e(rh,LU),e(LU,VJe),e(rh,WJe),e(rh,ok),e(ok,QJe),e(rh,HJe),e(se,UJe),e(se,th),e(th,BU),e(BU,JJe),e(th,YJe),e(th,rk),e(rk,KJe),e(th,ZJe),e(se,eYe),e(se,ah),e(ah,xU),e(xU,oYe),e(ah,rYe),e(ah,tk),e(tk,tYe),e(ah,aYe),e(se,nYe),e(se,nh),e(nh,kU),e(kU,sYe),e(nh,lYe),e(nh,ak),e(ak,iYe),e(nh,dYe),e(se,cYe),e(se,sh),e(sh,RU),e(RU,fYe),e(sh,mYe),e(sh,nk),e(nk,gYe),e(sh,hYe),e(se,pYe),e(se,lh),e(lh,SU),e(SU,_Ye),e(lh,uYe),e(lh,sk),e(sk,bYe),e(lh,vYe),e(Le,TYe),g(ih,Le,null),e(Le,FYe),e(Le,PU),e(PU,CYe),e(Le,MYe),g(L4,Le,null),e(Xo,EYe),e(Xo,dh),g(B4,dh,null),e(dh,yYe),e(dh,$U),e($U,wYe),b(d,CLe,u),b(d,Ni,u),e(Ni,ch),e(ch,IU),g(x4,IU,null),e(Ni,AYe),e(Ni,jU),e(jU,LYe),b(d,MLe,u),b(d,zo,u),g(k4,zo,null),e(zo,BYe),e(zo,R4),e(R4,xYe),e(R4,lk),e(lk,kYe),e(R4,RYe),e(zo,SYe),e(zo,S4),e(S4,PYe),e(S4,NU),e(NU,$Ye),e(S4,IYe),e(zo,jYe),e(zo,Be),g(P4,Be,null),e(Be,NYe),e(Be,DU),e(DU,DYe),e(Be,qYe),e(Be,Di),e(Di,GYe),e(Di,qU),e(qU,OYe),e(Di,XYe),e(Di,GU),e(GU,zYe),e(Di,VYe),e(Be,WYe),e(Be,we),e(we,fh),e(fh,OU),e(OU,QYe),e(fh,HYe),e(fh,ik),e(ik,UYe),e(fh,JYe),e(we,YYe),e(we,mh),e(mh,XU),e(XU,KYe),e(mh,ZYe),e(mh,dk),e(dk,eKe),e(mh,oKe),e(we,rKe),e(we,gh),e(gh,zU),e(zU,tKe),e(gh,aKe),e(gh,ck),e(ck,nKe),e(gh,sKe),e(we,lKe),e(we,hh),e(hh,VU),e(VU,iKe),e(hh,dKe),e(hh,fk),e(fk,cKe),e(hh,fKe),e(we,mKe),e(we,ph),e(ph,WU),e(WU,gKe),e(ph,hKe),e(ph,mk),e(mk,pKe),e(ph,_Ke),e(we,uKe),e(we,_h),e(_h,QU),e(QU,bKe),e(_h,vKe),e(_h,gk),e(gk,TKe),e(_h,FKe),e(we,CKe),e(we,uh),e(uh,HU),e(HU,MKe),e(uh,EKe),e(uh,hk),e(hk,yKe),e(uh,wKe),e(we,AKe),e(we,bh),e(bh,UU),e(UU,LKe),e(bh,BKe),e(bh,pk),e(pk,xKe),e(bh,kKe),e(Be,RKe),g(vh,Be,null),e(Be,SKe),e(Be,JU),e(JU,PKe),e(Be,$Ke),g($4,Be,null),e(zo,IKe),e(zo,Th),g(I4,Th,null),e(Th,jKe),e(Th,YU),e(YU,NKe),b(d,ELe,u),b(d,qi,u),e(qi,Fh),e(Fh,KU),g(j4,KU,null),e(qi,DKe),e(qi,ZU),e(ZU,qKe),b(d,yLe,u),b(d,Vo,u),g(N4,Vo,null),e(Vo,GKe),e(Vo,Gi),e(Gi,OKe),e(Gi,eJ),e(eJ,XKe),e(Gi,zKe),e(Gi,oJ),e(oJ,VKe),e(Gi,WKe),e(Vo,QKe),e(Vo,D4),e(D4,HKe),e(D4,rJ),e(rJ,UKe),e(D4,JKe),e(Vo,YKe),e(Vo,Nr),g(q4,Nr,null),e(Nr,KKe),e(Nr,tJ),e(tJ,ZKe),e(Nr,eZe),e(Nr,Oi),e(Oi,oZe),e(Oi,aJ),e(aJ,rZe),e(Oi,tZe),e(Oi,nJ),e(nJ,aZe),e(Oi,nZe),e(Nr,sZe),e(Nr,sJ),e(sJ,lZe),e(Nr,iZe),g(G4,Nr,null),e(Vo,dZe),e(Vo,xe),g(O4,xe,null),e(xe,cZe),e(xe,lJ),e(lJ,fZe),e(xe,mZe),e(xe,Da),e(Da,gZe),e(Da,iJ),e(iJ,hZe),e(Da,pZe),e(Da,dJ),e(dJ,_Ze),e(Da,uZe),e(Da,cJ),e(cJ,bZe),e(Da,vZe),e(xe,TZe),e(xe,F),e(F,Ch),e(Ch,fJ),e(fJ,FZe),e(Ch,CZe),e(Ch,_k),e(_k,MZe),e(Ch,EZe),e(F,yZe),e(F,Mh),e(Mh,mJ),e(mJ,wZe),e(Mh,AZe),e(Mh,uk),e(uk,LZe),e(Mh,BZe),e(F,xZe),e(F,Eh),e(Eh,gJ),e(gJ,kZe),e(Eh,RZe),e(Eh,bk),e(bk,SZe),e(Eh,PZe),e(F,$Ze),e(F,yh),e(yh,hJ),e(hJ,IZe),e(yh,jZe),e(yh,vk),e(vk,NZe),e(yh,DZe),e(F,qZe),e(F,wh),e(wh,pJ),e(pJ,GZe),e(wh,OZe),e(wh,Tk),e(Tk,XZe),e(wh,zZe),e(F,VZe),e(F,Ah),e(Ah,_J),e(_J,WZe),e(Ah,QZe),e(Ah,Fk),e(Fk,HZe),e(Ah,UZe),e(F,JZe),e(F,Lh),e(Lh,uJ),e(uJ,YZe),e(Lh,KZe),e(Lh,Ck),e(Ck,ZZe),e(Lh,eeo),e(F,oeo),e(F,Bh),e(Bh,bJ),e(bJ,reo),e(Bh,teo),e(Bh,Mk),e(Mk,aeo),e(Bh,neo),e(F,seo),e(F,xh),e(xh,vJ),e(vJ,leo),e(xh,ieo),e(xh,Ek),e(Ek,deo),e(xh,ceo),e(F,feo),e(F,kh),e(kh,TJ),e(TJ,meo),e(kh,geo),e(kh,yk),e(yk,heo),e(kh,peo),e(F,_eo),e(F,Rh),e(Rh,FJ),e(FJ,ueo),e(Rh,beo),e(Rh,wk),e(wk,veo),e(Rh,Teo),e(F,Feo),e(F,Sh),e(Sh,CJ),e(CJ,Ceo),e(Sh,Meo),e(Sh,Ak),e(Ak,Eeo),e(Sh,yeo),e(F,weo),e(F,Ph),e(Ph,MJ),e(MJ,Aeo),e(Ph,Leo),e(Ph,Lk),e(Lk,Beo),e(Ph,xeo),e(F,keo),e(F,$h),e($h,EJ),e(EJ,Reo),e($h,Seo),e($h,Bk),e(Bk,Peo),e($h,$eo),e(F,Ieo),e(F,Ih),e(Ih,yJ),e(yJ,jeo),e(Ih,Neo),e(Ih,xk),e(xk,Deo),e(Ih,qeo),e(F,Geo),e(F,jh),e(jh,wJ),e(wJ,Oeo),e(jh,Xeo),e(jh,kk),e(kk,zeo),e(jh,Veo),e(F,Weo),e(F,Nh),e(Nh,AJ),e(AJ,Qeo),e(Nh,Heo),e(Nh,Rk),e(Rk,Ueo),e(Nh,Jeo),e(F,Yeo),e(F,Dh),e(Dh,LJ),e(LJ,Keo),e(Dh,Zeo),e(Dh,Sk),e(Sk,eoo),e(Dh,ooo),e(F,roo),e(F,qh),e(qh,BJ),e(BJ,too),e(qh,aoo),e(qh,Pk),e(Pk,noo),e(qh,soo),e(F,loo),e(F,Gh),e(Gh,xJ),e(xJ,ioo),e(Gh,doo),e(Gh,$k),e($k,coo),e(Gh,foo),e(F,moo),e(F,Oh),e(Oh,kJ),e(kJ,goo),e(Oh,hoo),e(Oh,Ik),e(Ik,poo),e(Oh,_oo),e(F,uoo),e(F,Xh),e(Xh,RJ),e(RJ,boo),e(Xh,voo),e(Xh,jk),e(jk,Too),e(Xh,Foo),e(F,Coo),e(F,zh),e(zh,SJ),e(SJ,Moo),e(zh,Eoo),e(zh,Nk),e(Nk,yoo),e(zh,woo),e(F,Aoo),e(F,Vh),e(Vh,PJ),e(PJ,Loo),e(Vh,Boo),e(Vh,Dk),e(Dk,xoo),e(Vh,koo),e(F,Roo),e(F,Wh),e(Wh,$J),e($J,Soo),e(Wh,Poo),e(Wh,qk),e(qk,$oo),e(Wh,Ioo),e(F,joo),e(F,ks),e(ks,IJ),e(IJ,Noo),e(ks,Doo),e(ks,Gk),e(Gk,qoo),e(ks,Goo),e(ks,Ok),e(Ok,Ooo),e(ks,Xoo),e(F,zoo),e(F,Qh),e(Qh,jJ),e(jJ,Voo),e(Qh,Woo),e(Qh,Xk),e(Xk,Qoo),e(Qh,Hoo),e(F,Uoo),e(F,Hh),e(Hh,NJ),e(NJ,Joo),e(Hh,Yoo),e(Hh,zk),e(zk,Koo),e(Hh,Zoo),e(F,ero),e(F,Uh),e(Uh,DJ),e(DJ,oro),e(Uh,rro),e(Uh,Vk),e(Vk,tro),e(Uh,aro),e(F,nro),e(F,Jh),e(Jh,qJ),e(qJ,sro),e(Jh,lro),e(Jh,Wk),e(Wk,iro),e(Jh,dro),e(F,cro),e(F,Yh),e(Yh,GJ),e(GJ,fro),e(Yh,mro),e(Yh,Qk),e(Qk,gro),e(Yh,hro),e(F,pro),e(F,Kh),e(Kh,OJ),e(OJ,_ro),e(Kh,uro),e(Kh,Hk),e(Hk,bro),e(Kh,vro),e(F,Tro),e(F,Zh),e(Zh,XJ),e(XJ,Fro),e(Zh,Cro),e(Zh,Uk),e(Uk,Mro),e(Zh,Ero),e(F,yro),e(F,ep),e(ep,zJ),e(zJ,wro),e(ep,Aro),e(ep,Jk),e(Jk,Lro),e(ep,Bro),e(F,xro),e(F,op),e(op,VJ),e(VJ,kro),e(op,Rro),e(op,Yk),e(Yk,Sro),e(op,Pro),e(F,$ro),e(F,rp),e(rp,WJ),e(WJ,Iro),e(rp,jro),e(rp,Kk),e(Kk,Nro),e(rp,Dro),e(F,qro),e(F,tp),e(tp,QJ),e(QJ,Gro),e(tp,Oro),e(tp,Zk),e(Zk,Xro),e(tp,zro),e(F,Vro),e(F,ap),e(ap,HJ),e(HJ,Wro),e(ap,Qro),e(ap,eR),e(eR,Hro),e(ap,Uro),e(F,Jro),e(F,np),e(np,UJ),e(UJ,Yro),e(np,Kro),e(np,oR),e(oR,Zro),e(np,eto),e(F,oto),e(F,sp),e(sp,JJ),e(JJ,rto),e(sp,tto),e(sp,rR),e(rR,ato),e(sp,nto),e(F,sto),e(F,lp),e(lp,YJ),e(YJ,lto),e(lp,ito),e(lp,tR),e(tR,dto),e(lp,cto),e(F,fto),e(F,ip),e(ip,KJ),e(KJ,mto),e(ip,gto),e(ip,aR),e(aR,hto),e(ip,pto),e(F,_to),e(F,dp),e(dp,ZJ),e(ZJ,uto),e(dp,bto),e(dp,nR),e(nR,vto),e(dp,Tto),e(F,Fto),e(F,cp),e(cp,eY),e(eY,Cto),e(cp,Mto),e(cp,sR),e(sR,Eto),e(cp,yto),e(F,wto),e(F,fp),e(fp,oY),e(oY,Ato),e(fp,Lto),e(fp,lR),e(lR,Bto),e(fp,xto),e(F,kto),e(F,mp),e(mp,rY),e(rY,Rto),e(mp,Sto),e(mp,iR),e(iR,Pto),e(mp,$to),e(F,Ito),e(F,gp),e(gp,tY),e(tY,jto),e(gp,Nto),e(gp,dR),e(dR,Dto),e(gp,qto),e(F,Gto),e(F,hp),e(hp,aY),e(aY,Oto),e(hp,Xto),e(hp,cR),e(cR,zto),e(hp,Vto),e(F,Wto),e(F,pp),e(pp,nY),e(nY,Qto),e(pp,Hto),e(pp,fR),e(fR,Uto),e(pp,Jto),e(F,Yto),e(F,_p),e(_p,sY),e(sY,Kto),e(_p,Zto),e(_p,mR),e(mR,eao),e(_p,oao),e(F,rao),e(F,up),e(up,lY),e(lY,tao),e(up,aao),e(up,gR),e(gR,nao),e(up,sao),e(F,lao),e(F,bp),e(bp,iY),e(iY,iao),e(bp,dao),e(bp,hR),e(hR,cao),e(bp,fao),e(F,mao),e(F,vp),e(vp,dY),e(dY,gao),e(vp,hao),e(vp,pR),e(pR,pao),e(vp,_ao),e(F,uao),e(F,Tp),e(Tp,cY),e(cY,bao),e(Tp,vao),e(Tp,_R),e(_R,Tao),e(Tp,Fao),e(F,Cao),e(F,Fp),e(Fp,fY),e(fY,Mao),e(Fp,Eao),e(Fp,uR),e(uR,yao),e(Fp,wao),e(F,Aao),e(F,Cp),e(Cp,mY),e(mY,Lao),e(Cp,Bao),e(Cp,bR),e(bR,xao),e(Cp,kao),e(F,Rao),e(F,Mp),e(Mp,gY),e(gY,Sao),e(Mp,Pao),e(Mp,vR),e(vR,$ao),e(Mp,Iao),e(F,jao),e(F,Ep),e(Ep,hY),e(hY,Nao),e(Ep,Dao),e(Ep,TR),e(TR,qao),e(Ep,Gao),e(F,Oao),e(F,yp),e(yp,pY),e(pY,Xao),e(yp,zao),e(yp,FR),e(FR,Vao),e(yp,Wao),e(F,Qao),e(F,wp),e(wp,_Y),e(_Y,Hao),e(wp,Uao),e(wp,CR),e(CR,Jao),e(wp,Yao),e(F,Kao),e(F,Ap),e(Ap,uY),e(uY,Zao),e(Ap,eno),e(Ap,MR),e(MR,ono),e(Ap,rno),e(F,tno),e(F,Lp),e(Lp,bY),e(bY,ano),e(Lp,nno),e(Lp,ER),e(ER,sno),e(Lp,lno),e(F,ino),e(F,Bp),e(Bp,vY),e(vY,dno),e(Bp,cno),e(Bp,yR),e(yR,fno),e(Bp,mno),e(F,gno),e(F,xp),e(xp,TY),e(TY,hno),e(xp,pno),e(xp,wR),e(wR,_no),e(xp,uno),e(F,bno),e(F,kp),e(kp,FY),e(FY,vno),e(kp,Tno),e(kp,AR),e(AR,Fno),e(kp,Cno),e(F,Mno),e(F,Rp),e(Rp,CY),e(CY,Eno),e(Rp,yno),e(Rp,LR),e(LR,wno),e(Rp,Ano),e(F,Lno),e(F,Sp),e(Sp,MY),e(MY,Bno),e(Sp,xno),e(Sp,BR),e(BR,kno),e(Sp,Rno),e(F,Sno),e(F,Pp),e(Pp,EY),e(EY,Pno),e(Pp,$no),e(Pp,xR),e(xR,Ino),e(Pp,jno),e(F,Nno),e(F,$p),e($p,yY),e(yY,Dno),e($p,qno),e($p,kR),e(kR,Gno),e($p,Ono),e(F,Xno),e(F,Ip),e(Ip,wY),e(wY,zno),e(Ip,Vno),e(Ip,RR),e(RR,Wno),e(Ip,Qno),e(F,Hno),e(F,jp),e(jp,AY),e(AY,Uno),e(jp,Jno),e(jp,SR),e(SR,Yno),e(jp,Kno),e(F,Zno),e(F,Np),e(Np,LY),e(LY,eso),e(Np,oso),e(Np,PR),e(PR,rso),e(Np,tso),e(F,aso),e(F,Dp),e(Dp,BY),e(BY,nso),e(Dp,sso),e(Dp,$R),e($R,lso),e(Dp,iso),e(F,dso),e(F,qp),e(qp,xY),e(xY,cso),e(qp,fso),e(qp,IR),e(IR,mso),e(qp,gso),e(F,hso),e(F,Gp),e(Gp,kY),e(kY,pso),e(Gp,_so),e(Gp,jR),e(jR,uso),e(Gp,bso),e(F,vso),e(F,Op),e(Op,RY),e(RY,Tso),e(Op,Fso),e(Op,NR),e(NR,Cso),e(Op,Mso),e(F,Eso),e(F,Xp),e(Xp,SY),e(SY,yso),e(Xp,wso),e(Xp,DR),e(DR,Aso),e(Xp,Lso),e(F,Bso),e(F,zp),e(zp,PY),e(PY,xso),e(zp,kso),e(zp,qR),e(qR,Rso),e(zp,Sso),e(F,Pso),e(F,Vp),e(Vp,$Y),e($Y,$so),e(Vp,Iso),e(Vp,GR),e(GR,jso),e(Vp,Nso),e(F,Dso),e(F,Wp),e(Wp,IY),e(IY,qso),e(Wp,Gso),e(Wp,OR),e(OR,Oso),e(Wp,Xso),e(F,zso),e(F,Qp),e(Qp,jY),e(jY,Vso),e(Qp,Wso),e(Qp,XR),e(XR,Qso),e(Qp,Hso),e(F,Uso),e(F,Hp),e(Hp,NY),e(NY,Jso),e(Hp,Yso),e(Hp,zR),e(zR,Kso),e(Hp,Zso),e(F,elo),e(F,Up),e(Up,DY),e(DY,olo),e(Up,rlo),e(Up,VR),e(VR,tlo),e(Up,alo),e(F,nlo),e(F,Jp),e(Jp,qY),e(qY,slo),e(Jp,llo),e(Jp,WR),e(WR,ilo),e(Jp,dlo),e(xe,clo),e(xe,Yp),e(Yp,flo),e(Yp,GY),e(GY,mlo),e(Yp,glo),e(Yp,OY),e(OY,hlo),e(xe,plo),e(xe,XY),e(XY,_lo),e(xe,ulo),g(X4,xe,null),b(d,wLe,u),b(d,Xi,u),e(Xi,Kp),e(Kp,zY),g(z4,zY,null),e(Xi,blo),e(Xi,VY),e(VY,vlo),b(d,ALe,u),b(d,Wo,u),g(V4,Wo,null),e(Wo,Tlo),e(Wo,zi),e(zi,Flo),e(zi,WY),e(WY,Clo),e(zi,Mlo),e(zi,QY),e(QY,Elo),e(zi,ylo),e(Wo,wlo),e(Wo,W4),e(W4,Alo),e(W4,HY),e(HY,Llo),e(W4,Blo),e(Wo,xlo),e(Wo,Dr),g(Q4,Dr,null),e(Dr,klo),e(Dr,UY),e(UY,Rlo),e(Dr,Slo),e(Dr,Vi),e(Vi,Plo),e(Vi,JY),e(JY,$lo),e(Vi,Ilo),e(Vi,YY),e(YY,jlo),e(Vi,Nlo),e(Dr,Dlo),e(Dr,KY),e(KY,qlo),e(Dr,Glo),g(H4,Dr,null),e(Wo,Olo),e(Wo,ke),g(U4,ke,null),e(ke,Xlo),e(ke,ZY),e(ZY,zlo),e(ke,Vlo),e(ke,qa),e(qa,Wlo),e(qa,eK),e(eK,Qlo),e(qa,Hlo),e(qa,oK),e(oK,Ulo),e(qa,Jlo),e(qa,rK),e(rK,Ylo),e(qa,Klo),e(ke,Zlo),e(ke,k),e(k,Zp),e(Zp,tK),e(tK,eio),e(Zp,oio),e(Zp,QR),e(QR,rio),e(Zp,tio),e(k,aio),e(k,e_),e(e_,aK),e(aK,nio),e(e_,sio),e(e_,HR),e(HR,lio),e(e_,iio),e(k,dio),e(k,o_),e(o_,nK),e(nK,cio),e(o_,fio),e(o_,UR),e(UR,mio),e(o_,gio),e(k,hio),e(k,r_),e(r_,sK),e(sK,pio),e(r_,_io),e(r_,JR),e(JR,uio),e(r_,bio),e(k,vio),e(k,t_),e(t_,lK),e(lK,Tio),e(t_,Fio),e(t_,YR),e(YR,Cio),e(t_,Mio),e(k,Eio),e(k,a_),e(a_,iK),e(iK,yio),e(a_,wio),e(a_,KR),e(KR,Aio),e(a_,Lio),e(k,Bio),e(k,n_),e(n_,dK),e(dK,xio),e(n_,kio),e(n_,ZR),e(ZR,Rio),e(n_,Sio),e(k,Pio),e(k,s_),e(s_,cK),e(cK,$io),e(s_,Iio),e(s_,eS),e(eS,jio),e(s_,Nio),e(k,Dio),e(k,l_),e(l_,fK),e(fK,qio),e(l_,Gio),e(l_,oS),e(oS,Oio),e(l_,Xio),e(k,zio),e(k,i_),e(i_,mK),e(mK,Vio),e(i_,Wio),e(i_,rS),e(rS,Qio),e(i_,Hio),e(k,Uio),e(k,d_),e(d_,gK),e(gK,Jio),e(d_,Yio),e(d_,tS),e(tS,Kio),e(d_,Zio),e(k,edo),e(k,c_),e(c_,hK),e(hK,odo),e(c_,rdo),e(c_,aS),e(aS,tdo),e(c_,ado),e(k,ndo),e(k,f_),e(f_,pK),e(pK,sdo),e(f_,ldo),e(f_,nS),e(nS,ido),e(f_,ddo),e(k,cdo),e(k,m_),e(m_,_K),e(_K,fdo),e(m_,mdo),e(m_,sS),e(sS,gdo),e(m_,hdo),e(k,pdo),e(k,g_),e(g_,uK),e(uK,_do),e(g_,udo),e(g_,lS),e(lS,bdo),e(g_,vdo),e(k,Tdo),e(k,h_),e(h_,bK),e(bK,Fdo),e(h_,Cdo),e(h_,iS),e(iS,Mdo),e(h_,Edo),e(k,ydo),e(k,p_),e(p_,vK),e(vK,wdo),e(p_,Ado),e(p_,dS),e(dS,Ldo),e(p_,Bdo),e(k,xdo),e(k,__),e(__,TK),e(TK,kdo),e(__,Rdo),e(__,cS),e(cS,Sdo),e(__,Pdo),e(k,$do),e(k,u_),e(u_,FK),e(FK,Ido),e(u_,jdo),e(u_,fS),e(fS,Ndo),e(u_,Ddo),e(k,qdo),e(k,b_),e(b_,CK),e(CK,Gdo),e(b_,Odo),e(b_,mS),e(mS,Xdo),e(b_,zdo),e(k,Vdo),e(k,v_),e(v_,MK),e(MK,Wdo),e(v_,Qdo),e(v_,gS),e(gS,Hdo),e(v_,Udo),e(k,Jdo),e(k,T_),e(T_,EK),e(EK,Ydo),e(T_,Kdo),e(T_,hS),e(hS,Zdo),e(T_,eco),e(k,oco),e(k,F_),e(F_,yK),e(yK,rco),e(F_,tco),e(F_,pS),e(pS,aco),e(F_,nco),e(k,sco),e(k,C_),e(C_,wK),e(wK,lco),e(C_,ico),e(C_,_S),e(_S,dco),e(C_,cco),e(k,fco),e(k,M_),e(M_,AK),e(AK,mco),e(M_,gco),e(M_,uS),e(uS,hco),e(M_,pco),e(k,_co),e(k,E_),e(E_,LK),e(LK,uco),e(E_,bco),e(E_,bS),e(bS,vco),e(E_,Tco),e(k,Fco),e(k,y_),e(y_,BK),e(BK,Cco),e(y_,Mco),e(y_,vS),e(vS,Eco),e(y_,yco),e(k,wco),e(k,w_),e(w_,xK),e(xK,Aco),e(w_,Lco),e(w_,TS),e(TS,Bco),e(w_,xco),e(k,kco),e(k,A_),e(A_,kK),e(kK,Rco),e(A_,Sco),e(A_,FS),e(FS,Pco),e(A_,$co),e(k,Ico),e(k,L_),e(L_,RK),e(RK,jco),e(L_,Nco),e(L_,CS),e(CS,Dco),e(L_,qco),e(k,Gco),e(k,B_),e(B_,SK),e(SK,Oco),e(B_,Xco),e(B_,MS),e(MS,zco),e(B_,Vco),e(k,Wco),e(k,x_),e(x_,PK),e(PK,Qco),e(x_,Hco),e(x_,ES),e(ES,Uco),e(x_,Jco),e(k,Yco),e(k,k_),e(k_,$K),e($K,Kco),e(k_,Zco),e(k_,yS),e(yS,efo),e(k_,ofo),e(k,rfo),e(k,R_),e(R_,IK),e(IK,tfo),e(R_,afo),e(R_,wS),e(wS,nfo),e(R_,sfo),e(k,lfo),e(k,S_),e(S_,jK),e(jK,ifo),e(S_,dfo),e(S_,AS),e(AS,cfo),e(S_,ffo),e(k,mfo),e(k,P_),e(P_,NK),e(NK,gfo),e(P_,hfo),e(P_,LS),e(LS,pfo),e(P_,_fo),e(k,ufo),e(k,$_),e($_,DK),e(DK,bfo),e($_,vfo),e($_,BS),e(BS,Tfo),e($_,Ffo),e(k,Cfo),e(k,I_),e(I_,qK),e(qK,Mfo),e(I_,Efo),e(I_,xS),e(xS,yfo),e(I_,wfo),e(ke,Afo),e(ke,j_),e(j_,Lfo),e(j_,GK),e(GK,Bfo),e(j_,xfo),e(j_,OK),e(OK,kfo),e(ke,Rfo),e(ke,XK),e(XK,Sfo),e(ke,Pfo),g(J4,ke,null),b(d,LLe,u),b(d,Wi,u),e(Wi,N_),e(N_,zK),g(Y4,zK,null),e(Wi,$fo),e(Wi,VK),e(VK,Ifo),b(d,BLe,u),b(d,Qo,u),g(K4,Qo,null),e(Qo,jfo),e(Qo,Qi),e(Qi,Nfo),e(Qi,WK),e(WK,Dfo),e(Qi,qfo),e(Qi,QK),e(QK,Gfo),e(Qi,Ofo),e(Qo,Xfo),e(Qo,Z4),e(Z4,zfo),e(Z4,HK),e(HK,Vfo),e(Z4,Wfo),e(Qo,Qfo),e(Qo,qr),g(eM,qr,null),e(qr,Hfo),e(qr,UK),e(UK,Ufo),e(qr,Jfo),e(qr,Hi),e(Hi,Yfo),e(Hi,JK),e(JK,Kfo),e(Hi,Zfo),e(Hi,YK),e(YK,emo),e(Hi,omo),e(qr,rmo),e(qr,KK),e(KK,tmo),e(qr,amo),g(oM,qr,null),e(Qo,nmo),e(Qo,Re),g(rM,Re,null),e(Re,smo),e(Re,ZK),e(ZK,lmo),e(Re,imo),e(Re,Ga),e(Ga,dmo),e(Ga,eZ),e(eZ,cmo),e(Ga,fmo),e(Ga,oZ),e(oZ,mmo),e(Ga,gmo),e(Ga,rZ),e(rZ,hmo),e(Ga,pmo),e(Re,_mo),e(Re,$),e($,D_),e(D_,tZ),e(tZ,umo),e(D_,bmo),e(D_,kS),e(kS,vmo),e(D_,Tmo),e($,Fmo),e($,q_),e(q_,aZ),e(aZ,Cmo),e(q_,Mmo),e(q_,RS),e(RS,Emo),e(q_,ymo),e($,wmo),e($,G_),e(G_,nZ),e(nZ,Amo),e(G_,Lmo),e(G_,SS),e(SS,Bmo),e(G_,xmo),e($,kmo),e($,O_),e(O_,sZ),e(sZ,Rmo),e(O_,Smo),e(O_,PS),e(PS,Pmo),e(O_,$mo),e($,Imo),e($,X_),e(X_,lZ),e(lZ,jmo),e(X_,Nmo),e(X_,$S),e($S,Dmo),e(X_,qmo),e($,Gmo),e($,z_),e(z_,iZ),e(iZ,Omo),e(z_,Xmo),e(z_,IS),e(IS,zmo),e(z_,Vmo),e($,Wmo),e($,V_),e(V_,dZ),e(dZ,Qmo),e(V_,Hmo),e(V_,jS),e(jS,Umo),e(V_,Jmo),e($,Ymo),e($,W_),e(W_,cZ),e(cZ,Kmo),e(W_,Zmo),e(W_,NS),e(NS,ego),e(W_,ogo),e($,rgo),e($,Q_),e(Q_,fZ),e(fZ,tgo),e(Q_,ago),e(Q_,DS),e(DS,ngo),e(Q_,sgo),e($,lgo),e($,H_),e(H_,mZ),e(mZ,igo),e(H_,dgo),e(H_,qS),e(qS,cgo),e(H_,fgo),e($,mgo),e($,U_),e(U_,gZ),e(gZ,ggo),e(U_,hgo),e(U_,GS),e(GS,pgo),e(U_,_go),e($,ugo),e($,J_),e(J_,hZ),e(hZ,bgo),e(J_,vgo),e(J_,OS),e(OS,Tgo),e(J_,Fgo),e($,Cgo),e($,Y_),e(Y_,pZ),e(pZ,Mgo),e(Y_,Ego),e(Y_,XS),e(XS,ygo),e(Y_,wgo),e($,Ago),e($,K_),e(K_,_Z),e(_Z,Lgo),e(K_,Bgo),e(K_,zS),e(zS,xgo),e(K_,kgo),e($,Rgo),e($,Z_),e(Z_,uZ),e(uZ,Sgo),e(Z_,Pgo),e(Z_,VS),e(VS,$go),e(Z_,Igo),e($,jgo),e($,eu),e(eu,bZ),e(bZ,Ngo),e(eu,Dgo),e(eu,WS),e(WS,qgo),e(eu,Ggo),e($,Ogo),e($,ou),e(ou,vZ),e(vZ,Xgo),e(ou,zgo),e(ou,QS),e(QS,Vgo),e(ou,Wgo),e($,Qgo),e($,ru),e(ru,TZ),e(TZ,Hgo),e(ru,Ugo),e(ru,HS),e(HS,Jgo),e(ru,Ygo),e($,Kgo),e($,tu),e(tu,FZ),e(FZ,Zgo),e(tu,eho),e(tu,US),e(US,oho),e(tu,rho),e($,tho),e($,au),e(au,CZ),e(CZ,aho),e(au,nho),e(au,JS),e(JS,sho),e(au,lho),e($,iho),e($,nu),e(nu,MZ),e(MZ,dho),e(nu,cho),e(nu,YS),e(YS,fho),e(nu,mho),e($,gho),e($,su),e(su,EZ),e(EZ,hho),e(su,pho),e(su,KS),e(KS,_ho),e(su,uho),e($,bho),e($,lu),e(lu,yZ),e(yZ,vho),e(lu,Tho),e(lu,ZS),e(ZS,Fho),e(lu,Cho),e($,Mho),e($,iu),e(iu,wZ),e(wZ,Eho),e(iu,yho),e(iu,eP),e(eP,who),e(iu,Aho),e($,Lho),e($,du),e(du,AZ),e(AZ,Bho),e(du,xho),e(du,oP),e(oP,kho),e(du,Rho),e($,Sho),e($,cu),e(cu,LZ),e(LZ,Pho),e(cu,$ho),e(cu,rP),e(rP,Iho),e(cu,jho),e($,Nho),e($,fu),e(fu,BZ),e(BZ,Dho),e(fu,qho),e(fu,tP),e(tP,Gho),e(fu,Oho),e($,Xho),e($,mu),e(mu,xZ),e(xZ,zho),e(mu,Vho),e(mu,aP),e(aP,Who),e(mu,Qho),e($,Hho),e($,gu),e(gu,kZ),e(kZ,Uho),e(gu,Jho),e(gu,nP),e(nP,Yho),e(gu,Kho),e($,Zho),e($,hu),e(hu,RZ),e(RZ,epo),e(hu,opo),e(hu,sP),e(sP,rpo),e(hu,tpo),e($,apo),e($,pu),e(pu,SZ),e(SZ,npo),e(pu,spo),e(pu,lP),e(lP,lpo),e(pu,ipo),e($,dpo),e($,_u),e(_u,PZ),e(PZ,cpo),e(_u,fpo),e(_u,iP),e(iP,mpo),e(_u,gpo),e($,hpo),e($,uu),e(uu,$Z),e($Z,ppo),e(uu,_po),e(uu,dP),e(dP,upo),e(uu,bpo),e($,vpo),e($,bu),e(bu,IZ),e(IZ,Tpo),e(bu,Fpo),e(bu,cP),e(cP,Cpo),e(bu,Mpo),e(Re,Epo),e(Re,vu),e(vu,ypo),e(vu,jZ),e(jZ,wpo),e(vu,Apo),e(vu,NZ),e(NZ,Lpo),e(Re,Bpo),e(Re,DZ),e(DZ,xpo),e(Re,kpo),g(tM,Re,null),b(d,xLe,u),b(d,Ui,u),e(Ui,Tu),e(Tu,qZ),g(aM,qZ,null),e(Ui,Rpo),e(Ui,GZ),e(GZ,Spo),b(d,kLe,u),b(d,Ho,u),g(nM,Ho,null),e(Ho,Ppo),e(Ho,Ji),e(Ji,$po),e(Ji,OZ),e(OZ,Ipo),e(Ji,jpo),e(Ji,XZ),e(XZ,Npo),e(Ji,Dpo),e(Ho,qpo),e(Ho,sM),e(sM,Gpo),e(sM,zZ),e(zZ,Opo),e(sM,Xpo),e(Ho,zpo),e(Ho,Gr),g(lM,Gr,null),e(Gr,Vpo),e(Gr,VZ),e(VZ,Wpo),e(Gr,Qpo),e(Gr,Yi),e(Yi,Hpo),e(Yi,WZ),e(WZ,Upo),e(Yi,Jpo),e(Yi,QZ),e(QZ,Ypo),e(Yi,Kpo),e(Gr,Zpo),e(Gr,HZ),e(HZ,e_o),e(Gr,o_o),g(iM,Gr,null),e(Ho,r_o),e(Ho,Se),g(dM,Se,null),e(Se,t_o),e(Se,UZ),e(UZ,a_o),e(Se,n_o),e(Se,Oa),e(Oa,s_o),e(Oa,JZ),e(JZ,l_o),e(Oa,i_o),e(Oa,YZ),e(YZ,d_o),e(Oa,c_o),e(Oa,KZ),e(KZ,f_o),e(Oa,m_o),e(Se,g_o),e(Se,I),e(I,Fu),e(Fu,ZZ),e(ZZ,h_o),e(Fu,p_o),e(Fu,fP),e(fP,__o),e(Fu,u_o),e(I,b_o),e(I,Cu),e(Cu,eee),e(eee,v_o),e(Cu,T_o),e(Cu,mP),e(mP,F_o),e(Cu,C_o),e(I,M_o),e(I,Mu),e(Mu,oee),e(oee,E_o),e(Mu,y_o),e(Mu,gP),e(gP,w_o),e(Mu,A_o),e(I,L_o),e(I,Eu),e(Eu,ree),e(ree,B_o),e(Eu,x_o),e(Eu,hP),e(hP,k_o),e(Eu,R_o),e(I,S_o),e(I,yu),e(yu,tee),e(tee,P_o),e(yu,$_o),e(yu,pP),e(pP,I_o),e(yu,j_o),e(I,N_o),e(I,wu),e(wu,aee),e(aee,D_o),e(wu,q_o),e(wu,_P),e(_P,G_o),e(wu,O_o),e(I,X_o),e(I,Au),e(Au,nee),e(nee,z_o),e(Au,V_o),e(Au,uP),e(uP,W_o),e(Au,Q_o),e(I,H_o),e(I,Lu),e(Lu,see),e(see,U_o),e(Lu,J_o),e(Lu,bP),e(bP,Y_o),e(Lu,K_o),e(I,Z_o),e(I,Bu),e(Bu,lee),e(lee,euo),e(Bu,ouo),e(Bu,vP),e(vP,ruo),e(Bu,tuo),e(I,auo),e(I,xu),e(xu,iee),e(iee,nuo),e(xu,suo),e(xu,TP),e(TP,luo),e(xu,iuo),e(I,duo),e(I,ku),e(ku,dee),e(dee,cuo),e(ku,fuo),e(ku,FP),e(FP,muo),e(ku,guo),e(I,huo),e(I,Ru),e(Ru,cee),e(cee,puo),e(Ru,_uo),e(Ru,CP),e(CP,uuo),e(Ru,buo),e(I,vuo),e(I,Su),e(Su,fee),e(fee,Tuo),e(Su,Fuo),e(Su,MP),e(MP,Cuo),e(Su,Muo),e(I,Euo),e(I,Pu),e(Pu,mee),e(mee,yuo),e(Pu,wuo),e(Pu,EP),e(EP,Auo),e(Pu,Luo),e(I,Buo),e(I,$u),e($u,gee),e(gee,xuo),e($u,kuo),e($u,yP),e(yP,Ruo),e($u,Suo),e(I,Puo),e(I,Iu),e(Iu,hee),e(hee,$uo),e(Iu,Iuo),e(Iu,wP),e(wP,juo),e(Iu,Nuo),e(I,Duo),e(I,ju),e(ju,pee),e(pee,quo),e(ju,Guo),e(ju,AP),e(AP,Ouo),e(ju,Xuo),e(I,zuo),e(I,Nu),e(Nu,_ee),e(_ee,Vuo),e(Nu,Wuo),e(Nu,LP),e(LP,Quo),e(Nu,Huo),e(I,Uuo),e(I,Du),e(Du,uee),e(uee,Juo),e(Du,Yuo),e(Du,BP),e(BP,Kuo),e(Du,Zuo),e(I,e1o),e(I,qu),e(qu,bee),e(bee,o1o),e(qu,r1o),e(qu,xP),e(xP,t1o),e(qu,a1o),e(I,n1o),e(I,Gu),e(Gu,vee),e(vee,s1o),e(Gu,l1o),e(Gu,kP),e(kP,i1o),e(Gu,d1o),e(I,c1o),e(I,Ou),e(Ou,Tee),e(Tee,f1o),e(Ou,m1o),e(Ou,RP),e(RP,g1o),e(Ou,h1o),e(I,p1o),e(I,Xu),e(Xu,Fee),e(Fee,_1o),e(Xu,u1o),e(Xu,SP),e(SP,b1o),e(Xu,v1o),e(I,T1o),e(I,zu),e(zu,Cee),e(Cee,F1o),e(zu,C1o),e(zu,PP),e(PP,M1o),e(zu,E1o),e(I,y1o),e(I,Vu),e(Vu,Mee),e(Mee,w1o),e(Vu,A1o),e(Vu,$P),e($P,L1o),e(Vu,B1o),e(I,x1o),e(I,Wu),e(Wu,Eee),e(Eee,k1o),e(Wu,R1o),e(Wu,IP),e(IP,S1o),e(Wu,P1o),e(I,$1o),e(I,Qu),e(Qu,yee),e(yee,I1o),e(Qu,j1o),e(Qu,jP),e(jP,N1o),e(Qu,D1o),e(I,q1o),e(I,Hu),e(Hu,wee),e(wee,G1o),e(Hu,O1o),e(Hu,NP),e(NP,X1o),e(Hu,z1o),e(I,V1o),e(I,Uu),e(Uu,Aee),e(Aee,W1o),e(Uu,Q1o),e(Uu,DP),e(DP,H1o),e(Uu,U1o),e(I,J1o),e(I,Ju),e(Ju,Lee),e(Lee,Y1o),e(Ju,K1o),e(Ju,Bee),e(Bee,Z1o),e(Ju,ebo),e(I,obo),e(I,Yu),e(Yu,xee),e(xee,rbo),e(Yu,tbo),e(Yu,qP),e(qP,abo),e(Yu,nbo),e(I,sbo),e(I,Ku),e(Ku,kee),e(kee,lbo),e(Ku,ibo),e(Ku,GP),e(GP,dbo),e(Ku,cbo),e(I,fbo),e(I,Zu),e(Zu,Ree),e(Ree,mbo),e(Zu,gbo),e(Zu,OP),e(OP,hbo),e(Zu,pbo),e(I,_bo),e(I,e1),e(e1,See),e(See,ubo),e(e1,bbo),e(e1,XP),e(XP,vbo),e(e1,Tbo),e(Se,Fbo),e(Se,o1),e(o1,Cbo),e(o1,Pee),e(Pee,Mbo),e(o1,Ebo),e(o1,$ee),e($ee,ybo),e(Se,wbo),e(Se,Iee),e(Iee,Abo),e(Se,Lbo),g(cM,Se,null),b(d,RLe,u),b(d,Ki,u),e(Ki,r1),e(r1,jee),g(fM,jee,null),e(Ki,Bbo),e(Ki,Nee),e(Nee,xbo),b(d,SLe,u),b(d,Uo,u),g(mM,Uo,null),e(Uo,kbo),e(Uo,Zi),e(Zi,Rbo),e(Zi,Dee),e(Dee,Sbo),e(Zi,Pbo),e(Zi,qee),e(qee,$bo),e(Zi,Ibo),e(Uo,jbo),e(Uo,gM),e(gM,Nbo),e(gM,Gee),e(Gee,Dbo),e(gM,qbo),e(Uo,Gbo),e(Uo,Or),g(hM,Or,null),e(Or,Obo),e(Or,Oee),e(Oee,Xbo),e(Or,zbo),e(Or,ed),e(ed,Vbo),e(ed,Xee),e(Xee,Wbo),e(ed,Qbo),e(ed,zee),e(zee,Hbo),e(ed,Ubo),e(Or,Jbo),e(Or,Vee),e(Vee,Ybo),e(Or,Kbo),g(pM,Or,null),e(Uo,Zbo),e(Uo,Pe),g(_M,Pe,null),e(Pe,e5o),e(Pe,Wee),e(Wee,o5o),e(Pe,r5o),e(Pe,Xa),e(Xa,t5o),e(Xa,Qee),e(Qee,a5o),e(Xa,n5o),e(Xa,Hee),e(Hee,s5o),e(Xa,l5o),e(Xa,Uee),e(Uee,i5o),e(Xa,d5o),e(Pe,c5o),e(Pe,ae),e(ae,t1),e(t1,Jee),e(Jee,f5o),e(t1,m5o),e(t1,zP),e(zP,g5o),e(t1,h5o),e(ae,p5o),e(ae,a1),e(a1,Yee),e(Yee,_5o),e(a1,u5o),e(a1,VP),e(VP,b5o),e(a1,v5o),e(ae,T5o),e(ae,n1),e(n1,Kee),e(Kee,F5o),e(n1,C5o),e(n1,WP),e(WP,M5o),e(n1,E5o),e(ae,y5o),e(ae,s1),e(s1,Zee),e(Zee,w5o),e(s1,A5o),e(s1,QP),e(QP,L5o),e(s1,B5o),e(ae,x5o),e(ae,l1),e(l1,eoe),e(eoe,k5o),e(l1,R5o),e(l1,HP),e(HP,S5o),e(l1,P5o),e(ae,$5o),e(ae,i1),e(i1,ooe),e(ooe,I5o),e(i1,j5o),e(i1,UP),e(UP,N5o),e(i1,D5o),e(ae,q5o),e(ae,d1),e(d1,roe),e(roe,G5o),e(d1,O5o),e(d1,JP),e(JP,X5o),e(d1,z5o),e(ae,V5o),e(ae,c1),e(c1,toe),e(toe,W5o),e(c1,Q5o),e(c1,YP),e(YP,H5o),e(c1,U5o),e(ae,J5o),e(ae,f1),e(f1,aoe),e(aoe,Y5o),e(f1,K5o),e(f1,KP),e(KP,Z5o),e(f1,e2o),e(ae,o2o),e(ae,m1),e(m1,noe),e(noe,r2o),e(m1,t2o),e(m1,ZP),e(ZP,a2o),e(m1,n2o),e(ae,s2o),e(ae,g1),e(g1,soe),e(soe,l2o),e(g1,i2o),e(g1,e$),e(e$,d2o),e(g1,c2o),e(ae,f2o),e(ae,h1),e(h1,loe),e(loe,m2o),e(h1,g2o),e(h1,o$),e(o$,h2o),e(h1,p2o),e(ae,_2o),e(ae,p1),e(p1,ioe),e(ioe,u2o),e(p1,b2o),e(p1,r$),e(r$,v2o),e(p1,T2o),e(ae,F2o),e(ae,_1),e(_1,doe),e(doe,C2o),e(_1,M2o),e(_1,t$),e(t$,E2o),e(_1,y2o),e(ae,w2o),e(ae,u1),e(u1,coe),e(coe,A2o),e(u1,L2o),e(u1,a$),e(a$,B2o),e(u1,x2o),e(ae,k2o),e(ae,b1),e(b1,foe),e(foe,R2o),e(b1,S2o),e(b1,n$),e(n$,P2o),e(b1,$2o),e(Pe,I2o),e(Pe,v1),e(v1,j2o),e(v1,moe),e(moe,N2o),e(v1,D2o),e(v1,goe),e(goe,q2o),e(Pe,G2o),e(Pe,hoe),e(hoe,O2o),e(Pe,X2o),g(uM,Pe,null),b(d,PLe,u),b(d,od,u),e(od,T1),e(T1,poe),g(bM,poe,null),e(od,z2o),e(od,_oe),e(_oe,V2o),b(d,$Le,u),b(d,Jo,u),g(vM,Jo,null),e(Jo,W2o),e(Jo,rd),e(rd,Q2o),e(rd,uoe),e(uoe,H2o),e(rd,U2o),e(rd,boe),e(boe,J2o),e(rd,Y2o),e(Jo,K2o),e(Jo,TM),e(TM,Z2o),e(TM,voe),e(voe,evo),e(TM,ovo),e(Jo,rvo),e(Jo,Xr),g(FM,Xr,null),e(Xr,tvo),e(Xr,Toe),e(Toe,avo),e(Xr,nvo),e(Xr,td),e(td,svo),e(td,Foe),e(Foe,lvo),e(td,ivo),e(td,Coe),e(Coe,dvo),e(td,cvo),e(Xr,fvo),e(Xr,Moe),e(Moe,mvo),e(Xr,gvo),g(CM,Xr,null),e(Jo,hvo),e(Jo,$e),g(MM,$e,null),e($e,pvo),e($e,Eoe),e(Eoe,_vo),e($e,uvo),e($e,za),e(za,bvo),e(za,yoe),e(yoe,vvo),e(za,Tvo),e(za,woe),e(woe,Fvo),e(za,Cvo),e(za,Aoe),e(Aoe,Mvo),e(za,Evo),e($e,yvo),e($e,A),e(A,F1),e(F1,Loe),e(Loe,wvo),e(F1,Avo),e(F1,s$),e(s$,Lvo),e(F1,Bvo),e(A,xvo),e(A,C1),e(C1,Boe),e(Boe,kvo),e(C1,Rvo),e(C1,l$),e(l$,Svo),e(C1,Pvo),e(A,$vo),e(A,M1),e(M1,xoe),e(xoe,Ivo),e(M1,jvo),e(M1,i$),e(i$,Nvo),e(M1,Dvo),e(A,qvo),e(A,E1),e(E1,koe),e(koe,Gvo),e(E1,Ovo),e(E1,d$),e(d$,Xvo),e(E1,zvo),e(A,Vvo),e(A,y1),e(y1,Roe),e(Roe,Wvo),e(y1,Qvo),e(y1,c$),e(c$,Hvo),e(y1,Uvo),e(A,Jvo),e(A,w1),e(w1,Soe),e(Soe,Yvo),e(w1,Kvo),e(w1,f$),e(f$,Zvo),e(w1,e6o),e(A,o6o),e(A,A1),e(A1,Poe),e(Poe,r6o),e(A1,t6o),e(A1,m$),e(m$,a6o),e(A1,n6o),e(A,s6o),e(A,L1),e(L1,$oe),e($oe,l6o),e(L1,i6o),e(L1,g$),e(g$,d6o),e(L1,c6o),e(A,f6o),e(A,B1),e(B1,Ioe),e(Ioe,m6o),e(B1,g6o),e(B1,h$),e(h$,h6o),e(B1,p6o),e(A,_6o),e(A,x1),e(x1,joe),e(joe,u6o),e(x1,b6o),e(x1,p$),e(p$,v6o),e(x1,T6o),e(A,F6o),e(A,k1),e(k1,Noe),e(Noe,C6o),e(k1,M6o),e(k1,_$),e(_$,E6o),e(k1,y6o),e(A,w6o),e(A,R1),e(R1,Doe),e(Doe,A6o),e(R1,L6o),e(R1,u$),e(u$,B6o),e(R1,x6o),e(A,k6o),e(A,S1),e(S1,qoe),e(qoe,R6o),e(S1,S6o),e(S1,b$),e(b$,P6o),e(S1,$6o),e(A,I6o),e(A,P1),e(P1,Goe),e(Goe,j6o),e(P1,N6o),e(P1,v$),e(v$,D6o),e(P1,q6o),e(A,G6o),e(A,$1),e($1,Ooe),e(Ooe,O6o),e($1,X6o),e($1,T$),e(T$,z6o),e($1,V6o),e(A,W6o),e(A,I1),e(I1,Xoe),e(Xoe,Q6o),e(I1,H6o),e(I1,F$),e(F$,U6o),e(I1,J6o),e(A,Y6o),e(A,j1),e(j1,zoe),e(zoe,K6o),e(j1,Z6o),e(j1,C$),e(C$,eTo),e(j1,oTo),e(A,rTo),e(A,N1),e(N1,Voe),e(Voe,tTo),e(N1,aTo),e(N1,M$),e(M$,nTo),e(N1,sTo),e(A,lTo),e(A,D1),e(D1,Woe),e(Woe,iTo),e(D1,dTo),e(D1,E$),e(E$,cTo),e(D1,fTo),e(A,mTo),e(A,q1),e(q1,Qoe),e(Qoe,gTo),e(q1,hTo),e(q1,y$),e(y$,pTo),e(q1,_To),e(A,uTo),e(A,G1),e(G1,Hoe),e(Hoe,bTo),e(G1,vTo),e(G1,w$),e(w$,TTo),e(G1,FTo),e(A,CTo),e(A,O1),e(O1,Uoe),e(Uoe,MTo),e(O1,ETo),e(O1,A$),e(A$,yTo),e(O1,wTo),e(A,ATo),e(A,X1),e(X1,Joe),e(Joe,LTo),e(X1,BTo),e(X1,L$),e(L$,xTo),e(X1,kTo),e(A,RTo),e(A,z1),e(z1,Yoe),e(Yoe,STo),e(z1,PTo),e(z1,B$),e(B$,$To),e(z1,ITo),e(A,jTo),e(A,V1),e(V1,Koe),e(Koe,NTo),e(V1,DTo),e(V1,x$),e(x$,qTo),e(V1,GTo),e(A,OTo),e(A,W1),e(W1,Zoe),e(Zoe,XTo),e(W1,zTo),e(W1,k$),e(k$,VTo),e(W1,WTo),e(A,QTo),e(A,Q1),e(Q1,ere),e(ere,HTo),e(Q1,UTo),e(Q1,R$),e(R$,JTo),e(Q1,YTo),e(A,KTo),e(A,H1),e(H1,ore),e(ore,ZTo),e(H1,e7o),e(H1,S$),e(S$,o7o),e(H1,r7o),e(A,t7o),e(A,U1),e(U1,rre),e(rre,a7o),e(U1,n7o),e(U1,P$),e(P$,s7o),e(U1,l7o),e(A,i7o),e(A,J1),e(J1,tre),e(tre,d7o),e(J1,c7o),e(J1,$$),e($$,f7o),e(J1,m7o),e(A,g7o),e(A,Y1),e(Y1,are),e(are,h7o),e(Y1,p7o),e(Y1,I$),e(I$,_7o),e(Y1,u7o),e(A,b7o),e(A,K1),e(K1,nre),e(nre,v7o),e(K1,T7o),e(K1,j$),e(j$,F7o),e(K1,C7o),e(A,M7o),e(A,Z1),e(Z1,sre),e(sre,E7o),e(Z1,y7o),e(Z1,N$),e(N$,w7o),e(Z1,A7o),e(A,L7o),e(A,eb),e(eb,lre),e(lre,B7o),e(eb,x7o),e(eb,D$),e(D$,k7o),e(eb,R7o),e(A,S7o),e(A,ob),e(ob,ire),e(ire,P7o),e(ob,$7o),e(ob,q$),e(q$,I7o),e(ob,j7o),e(A,N7o),e(A,rb),e(rb,dre),e(dre,D7o),e(rb,q7o),e(rb,G$),e(G$,G7o),e(rb,O7o),e(A,X7o),e(A,tb),e(tb,cre),e(cre,z7o),e(tb,V7o),e(tb,O$),e(O$,W7o),e(tb,Q7o),e(A,H7o),e(A,ab),e(ab,fre),e(fre,U7o),e(ab,J7o),e(ab,X$),e(X$,Y7o),e(ab,K7o),e(A,Z7o),e(A,nb),e(nb,mre),e(mre,e8o),e(nb,o8o),e(nb,z$),e(z$,r8o),e(nb,t8o),e(A,a8o),e(A,sb),e(sb,gre),e(gre,n8o),e(sb,s8o),e(sb,V$),e(V$,l8o),e(sb,i8o),e(A,d8o),e(A,lb),e(lb,hre),e(hre,c8o),e(lb,f8o),e(lb,W$),e(W$,m8o),e(lb,g8o),e(A,h8o),e(A,ib),e(ib,pre),e(pre,p8o),e(ib,_8o),e(ib,Q$),e(Q$,u8o),e(ib,b8o),e(A,v8o),e(A,db),e(db,_re),e(_re,T8o),e(db,F8o),e(db,H$),e(H$,C8o),e(db,M8o),e(A,E8o),e(A,cb),e(cb,ure),e(ure,y8o),e(cb,w8o),e(cb,U$),e(U$,A8o),e(cb,L8o),e(A,B8o),e(A,fb),e(fb,bre),e(bre,x8o),e(fb,k8o),e(fb,J$),e(J$,R8o),e(fb,S8o),e($e,P8o),e($e,mb),e(mb,$8o),e(mb,vre),e(vre,I8o),e(mb,j8o),e(mb,Tre),e(Tre,N8o),e($e,D8o),e($e,Fre),e(Fre,q8o),e($e,G8o),g(EM,$e,null),b(d,ILe,u),b(d,ad,u),e(ad,gb),e(gb,Cre),g(yM,Cre,null),e(ad,O8o),e(ad,Mre),e(Mre,X8o),b(d,jLe,u),b(d,Yo,u),g(wM,Yo,null),e(Yo,z8o),e(Yo,nd),e(nd,V8o),e(nd,Ere),e(Ere,W8o),e(nd,Q8o),e(nd,yre),e(yre,H8o),e(nd,U8o),e(Yo,J8o),e(Yo,AM),e(AM,Y8o),e(AM,wre),e(wre,K8o),e(AM,Z8o),e(Yo,eFo),e(Yo,zr),g(LM,zr,null),e(zr,oFo),e(zr,Are),e(Are,rFo),e(zr,tFo),e(zr,sd),e(sd,aFo),e(sd,Lre),e(Lre,nFo),e(sd,sFo),e(sd,Bre),e(Bre,lFo),e(sd,iFo),e(zr,dFo),e(zr,xre),e(xre,cFo),e(zr,fFo),g(BM,zr,null),e(Yo,mFo),e(Yo,Ie),g(xM,Ie,null),e(Ie,gFo),e(Ie,kre),e(kre,hFo),e(Ie,pFo),e(Ie,Va),e(Va,_Fo),e(Va,Rre),e(Rre,uFo),e(Va,bFo),e(Va,Sre),e(Sre,vFo),e(Va,TFo),e(Va,Pre),e(Pre,FFo),e(Va,CFo),e(Ie,MFo),e(Ie,G),e(G,hb),e(hb,$re),e($re,EFo),e(hb,yFo),e(hb,Y$),e(Y$,wFo),e(hb,AFo),e(G,LFo),e(G,pb),e(pb,Ire),e(Ire,BFo),e(pb,xFo),e(pb,K$),e(K$,kFo),e(pb,RFo),e(G,SFo),e(G,_b),e(_b,jre),e(jre,PFo),e(_b,$Fo),e(_b,Z$),e(Z$,IFo),e(_b,jFo),e(G,NFo),e(G,ub),e(ub,Nre),e(Nre,DFo),e(ub,qFo),e(ub,eI),e(eI,GFo),e(ub,OFo),e(G,XFo),e(G,bb),e(bb,Dre),e(Dre,zFo),e(bb,VFo),e(bb,oI),e(oI,WFo),e(bb,QFo),e(G,HFo),e(G,vb),e(vb,qre),e(qre,UFo),e(vb,JFo),e(vb,rI),e(rI,YFo),e(vb,KFo),e(G,ZFo),e(G,Tb),e(Tb,Gre),e(Gre,eCo),e(Tb,oCo),e(Tb,tI),e(tI,rCo),e(Tb,tCo),e(G,aCo),e(G,Fb),e(Fb,Ore),e(Ore,nCo),e(Fb,sCo),e(Fb,aI),e(aI,lCo),e(Fb,iCo),e(G,dCo),e(G,Cb),e(Cb,Xre),e(Xre,cCo),e(Cb,fCo),e(Cb,nI),e(nI,mCo),e(Cb,gCo),e(G,hCo),e(G,Mb),e(Mb,zre),e(zre,pCo),e(Mb,_Co),e(Mb,sI),e(sI,uCo),e(Mb,bCo),e(G,vCo),e(G,Eb),e(Eb,Vre),e(Vre,TCo),e(Eb,FCo),e(Eb,lI),e(lI,CCo),e(Eb,MCo),e(G,ECo),e(G,yb),e(yb,Wre),e(Wre,yCo),e(yb,wCo),e(yb,iI),e(iI,ACo),e(yb,LCo),e(G,BCo),e(G,wb),e(wb,Qre),e(Qre,xCo),e(wb,kCo),e(wb,dI),e(dI,RCo),e(wb,SCo),e(G,PCo),e(G,Ab),e(Ab,Hre),e(Hre,$Co),e(Ab,ICo),e(Ab,cI),e(cI,jCo),e(Ab,NCo),e(G,DCo),e(G,Lb),e(Lb,Ure),e(Ure,qCo),e(Lb,GCo),e(Lb,fI),e(fI,OCo),e(Lb,XCo),e(G,zCo),e(G,Bb),e(Bb,Jre),e(Jre,VCo),e(Bb,WCo),e(Bb,mI),e(mI,QCo),e(Bb,HCo),e(G,UCo),e(G,xb),e(xb,Yre),e(Yre,JCo),e(xb,YCo),e(xb,gI),e(gI,KCo),e(xb,ZCo),e(G,e4o),e(G,kb),e(kb,Kre),e(Kre,o4o),e(kb,r4o),e(kb,hI),e(hI,t4o),e(kb,a4o),e(G,n4o),e(G,Rb),e(Rb,Zre),e(Zre,s4o),e(Rb,l4o),e(Rb,pI),e(pI,i4o),e(Rb,d4o),e(G,c4o),e(G,Sb),e(Sb,ete),e(ete,f4o),e(Sb,m4o),e(Sb,_I),e(_I,g4o),e(Sb,h4o),e(G,p4o),e(G,Pb),e(Pb,ote),e(ote,_4o),e(Pb,u4o),e(Pb,uI),e(uI,b4o),e(Pb,v4o),e(G,T4o),e(G,$b),e($b,rte),e(rte,F4o),e($b,C4o),e($b,bI),e(bI,M4o),e($b,E4o),e(G,y4o),e(G,Ib),e(Ib,tte),e(tte,w4o),e(Ib,A4o),e(Ib,vI),e(vI,L4o),e(Ib,B4o),e(G,x4o),e(G,jb),e(jb,ate),e(ate,k4o),e(jb,R4o),e(jb,TI),e(TI,S4o),e(jb,P4o),e(G,$4o),e(G,Nb),e(Nb,nte),e(nte,I4o),e(Nb,j4o),e(Nb,FI),e(FI,N4o),e(Nb,D4o),e(G,q4o),e(G,Db),e(Db,ste),e(ste,G4o),e(Db,O4o),e(Db,CI),e(CI,X4o),e(Db,z4o),e(G,V4o),e(G,qb),e(qb,lte),e(lte,W4o),e(qb,Q4o),e(qb,MI),e(MI,H4o),e(qb,U4o),e(Ie,J4o),e(Ie,Gb),e(Gb,Y4o),e(Gb,ite),e(ite,K4o),e(Gb,Z4o),e(Gb,dte),e(dte,eMo),e(Ie,oMo),e(Ie,cte),e(cte,rMo),e(Ie,tMo),g(kM,Ie,null),b(d,NLe,u),b(d,ld,u),e(ld,Ob),e(Ob,fte),g(RM,fte,null),e(ld,aMo),e(ld,mte),e(mte,nMo),b(d,DLe,u),b(d,Ko,u),g(SM,Ko,null),e(Ko,sMo),e(Ko,id),e(id,lMo),e(id,gte),e(gte,iMo),e(id,dMo),e(id,hte),e(hte,cMo),e(id,fMo),e(Ko,mMo),e(Ko,PM),e(PM,gMo),e(PM,pte),e(pte,hMo),e(PM,pMo),e(Ko,_Mo),e(Ko,Vr),g($M,Vr,null),e(Vr,uMo),e(Vr,_te),e(_te,bMo),e(Vr,vMo),e(Vr,dd),e(dd,TMo),e(dd,ute),e(ute,FMo),e(dd,CMo),e(dd,bte),e(bte,MMo),e(dd,EMo),e(Vr,yMo),e(Vr,vte),e(vte,wMo),e(Vr,AMo),g(IM,Vr,null),e(Ko,LMo),e(Ko,je),g(jM,je,null),e(je,BMo),e(je,Tte),e(Tte,xMo),e(je,kMo),e(je,Wa),e(Wa,RMo),e(Wa,Fte),e(Fte,SMo),e(Wa,PMo),e(Wa,Cte),e(Cte,$Mo),e(Wa,IMo),e(Wa,Mte),e(Mte,jMo),e(Wa,NMo),e(je,DMo),e(je,na),e(na,Xb),e(Xb,Ete),e(Ete,qMo),e(Xb,GMo),e(Xb,EI),e(EI,OMo),e(Xb,XMo),e(na,zMo),e(na,zb),e(zb,yte),e(yte,VMo),e(zb,WMo),e(zb,yI),e(yI,QMo),e(zb,HMo),e(na,UMo),e(na,Vb),e(Vb,wte),e(wte,JMo),e(Vb,YMo),e(Vb,wI),e(wI,KMo),e(Vb,ZMo),e(na,eEo),e(na,Wb),e(Wb,Ate),e(Ate,oEo),e(Wb,rEo),e(Wb,AI),e(AI,tEo),e(Wb,aEo),e(na,nEo),e(na,Qb),e(Qb,Lte),e(Lte,sEo),e(Qb,lEo),e(Qb,LI),e(LI,iEo),e(Qb,dEo),e(je,cEo),e(je,Hb),e(Hb,fEo),e(Hb,Bte),e(Bte,mEo),e(Hb,gEo),e(Hb,xte),e(xte,hEo),e(je,pEo),e(je,kte),e(kte,_Eo),e(je,uEo),g(NM,je,null),b(d,qLe,u),b(d,cd,u),e(cd,Ub),e(Ub,Rte),g(DM,Rte,null),e(cd,bEo),e(cd,Ste),e(Ste,vEo),b(d,GLe,u),b(d,Zo,u),g(qM,Zo,null),e(Zo,TEo),e(Zo,fd),e(fd,FEo),e(fd,Pte),e(Pte,CEo),e(fd,MEo),e(fd,$te),e($te,EEo),e(fd,yEo),e(Zo,wEo),e(Zo,GM),e(GM,AEo),e(GM,Ite),e(Ite,LEo),e(GM,BEo),e(Zo,xEo),e(Zo,Wr),g(OM,Wr,null),e(Wr,kEo),e(Wr,jte),e(jte,REo),e(Wr,SEo),e(Wr,md),e(md,PEo),e(md,Nte),e(Nte,$Eo),e(md,IEo),e(md,Dte),e(Dte,jEo),e(md,NEo),e(Wr,DEo),e(Wr,qte),e(qte,qEo),e(Wr,GEo),g(XM,Wr,null),e(Zo,OEo),e(Zo,Ne),g(zM,Ne,null),e(Ne,XEo),e(Ne,Gte),e(Gte,zEo),e(Ne,VEo),e(Ne,Qa),e(Qa,WEo),e(Qa,Ote),e(Ote,QEo),e(Qa,HEo),e(Qa,Xte),e(Xte,UEo),e(Qa,JEo),e(Qa,zte),e(zte,YEo),e(Qa,KEo),e(Ne,ZEo),e(Ne,D),e(D,Jb),e(Jb,Vte),e(Vte,e3o),e(Jb,o3o),e(Jb,BI),e(BI,r3o),e(Jb,t3o),e(D,a3o),e(D,Yb),e(Yb,Wte),e(Wte,n3o),e(Yb,s3o),e(Yb,xI),e(xI,l3o),e(Yb,i3o),e(D,d3o),e(D,Kb),e(Kb,Qte),e(Qte,c3o),e(Kb,f3o),e(Kb,kI),e(kI,m3o),e(Kb,g3o),e(D,h3o),e(D,Zb),e(Zb,Hte),e(Hte,p3o),e(Zb,_3o),e(Zb,RI),e(RI,u3o),e(Zb,b3o),e(D,v3o),e(D,e5),e(e5,Ute),e(Ute,T3o),e(e5,F3o),e(e5,SI),e(SI,C3o),e(e5,M3o),e(D,E3o),e(D,o5),e(o5,Jte),e(Jte,y3o),e(o5,w3o),e(o5,PI),e(PI,A3o),e(o5,L3o),e(D,B3o),e(D,r5),e(r5,Yte),e(Yte,x3o),e(r5,k3o),e(r5,$I),e($I,R3o),e(r5,S3o),e(D,P3o),e(D,t5),e(t5,Kte),e(Kte,$3o),e(t5,I3o),e(t5,II),e(II,j3o),e(t5,N3o),e(D,D3o),e(D,a5),e(a5,Zte),e(Zte,q3o),e(a5,G3o),e(a5,jI),e(jI,O3o),e(a5,X3o),e(D,z3o),e(D,n5),e(n5,eae),e(eae,V3o),e(n5,W3o),e(n5,NI),e(NI,Q3o),e(n5,H3o),e(D,U3o),e(D,s5),e(s5,oae),e(oae,J3o),e(s5,Y3o),e(s5,DI),e(DI,K3o),e(s5,Z3o),e(D,eyo),e(D,l5),e(l5,rae),e(rae,oyo),e(l5,ryo),e(l5,qI),e(qI,tyo),e(l5,ayo),e(D,nyo),e(D,i5),e(i5,tae),e(tae,syo),e(i5,lyo),e(i5,GI),e(GI,iyo),e(i5,dyo),e(D,cyo),e(D,d5),e(d5,aae),e(aae,fyo),e(d5,myo),e(d5,OI),e(OI,gyo),e(d5,hyo),e(D,pyo),e(D,c5),e(c5,nae),e(nae,_yo),e(c5,uyo),e(c5,XI),e(XI,byo),e(c5,vyo),e(D,Tyo),e(D,f5),e(f5,sae),e(sae,Fyo),e(f5,Cyo),e(f5,zI),e(zI,Myo),e(f5,Eyo),e(D,yyo),e(D,m5),e(m5,lae),e(lae,wyo),e(m5,Ayo),e(m5,VI),e(VI,Lyo),e(m5,Byo),e(D,xyo),e(D,g5),e(g5,iae),e(iae,kyo),e(g5,Ryo),e(g5,WI),e(WI,Syo),e(g5,Pyo),e(D,$yo),e(D,h5),e(h5,dae),e(dae,Iyo),e(h5,jyo),e(h5,QI),e(QI,Nyo),e(h5,Dyo),e(D,qyo),e(D,p5),e(p5,cae),e(cae,Gyo),e(p5,Oyo),e(p5,HI),e(HI,Xyo),e(p5,zyo),e(D,Vyo),e(D,_5),e(_5,fae),e(fae,Wyo),e(_5,Qyo),e(_5,UI),e(UI,Hyo),e(_5,Uyo),e(D,Jyo),e(D,u5),e(u5,mae),e(mae,Yyo),e(u5,Kyo),e(u5,JI),e(JI,Zyo),e(u5,ewo),e(D,owo),e(D,b5),e(b5,gae),e(gae,rwo),e(b5,two),e(b5,YI),e(YI,awo),e(b5,nwo),e(D,swo),e(D,v5),e(v5,hae),e(hae,lwo),e(v5,iwo),e(v5,KI),e(KI,dwo),e(v5,cwo),e(D,fwo),e(D,T5),e(T5,pae),e(pae,mwo),e(T5,gwo),e(T5,ZI),e(ZI,hwo),e(T5,pwo),e(D,_wo),e(D,F5),e(F5,_ae),e(_ae,uwo),e(F5,bwo),e(F5,ej),e(ej,vwo),e(F5,Two),e(D,Fwo),e(D,C5),e(C5,uae),e(uae,Cwo),e(C5,Mwo),e(C5,oj),e(oj,Ewo),e(C5,ywo),e(D,wwo),e(D,M5),e(M5,bae),e(bae,Awo),e(M5,Lwo),e(M5,rj),e(rj,Bwo),e(M5,xwo),e(D,kwo),e(D,E5),e(E5,vae),e(vae,Rwo),e(E5,Swo),e(E5,tj),e(tj,Pwo),e(E5,$wo),e(D,Iwo),e(D,y5),e(y5,Tae),e(Tae,jwo),e(y5,Nwo),e(y5,aj),e(aj,Dwo),e(y5,qwo),e(D,Gwo),e(D,w5),e(w5,Fae),e(Fae,Owo),e(w5,Xwo),e(w5,nj),e(nj,zwo),e(w5,Vwo),e(D,Wwo),e(D,A5),e(A5,Cae),e(Cae,Qwo),e(A5,Hwo),e(A5,sj),e(sj,Uwo),e(A5,Jwo),e(Ne,Ywo),e(Ne,L5),e(L5,Kwo),e(L5,Mae),e(Mae,Zwo),e(L5,eAo),e(L5,Eae),e(Eae,oAo),e(Ne,rAo),e(Ne,yae),e(yae,tAo),e(Ne,aAo),g(VM,Ne,null),b(d,OLe,u),b(d,gd,u),e(gd,B5),e(B5,wae),g(WM,wae,null),e(gd,nAo),e(gd,Aae),e(Aae,sAo),b(d,XLe,u),b(d,er,u),g(QM,er,null),e(er,lAo),e(er,hd),e(hd,iAo),e(hd,Lae),e(Lae,dAo),e(hd,cAo),e(hd,Bae),e(Bae,fAo),e(hd,mAo),e(er,gAo),e(er,HM),e(HM,hAo),e(HM,xae),e(xae,pAo),e(HM,_Ao),e(er,uAo),e(er,Qr),g(UM,Qr,null),e(Qr,bAo),e(Qr,kae),e(kae,vAo),e(Qr,TAo),e(Qr,pd),e(pd,FAo),e(pd,Rae),e(Rae,CAo),e(pd,MAo),e(pd,Sae),e(Sae,EAo),e(pd,yAo),e(Qr,wAo),e(Qr,Pae),e(Pae,AAo),e(Qr,LAo),g(JM,Qr,null),e(er,BAo),e(er,De),g(YM,De,null),e(De,xAo),e(De,$ae),e($ae,kAo),e(De,RAo),e(De,Ha),e(Ha,SAo),e(Ha,Iae),e(Iae,PAo),e(Ha,$Ao),e(Ha,jae),e(jae,IAo),e(Ha,jAo),e(Ha,Nae),e(Nae,NAo),e(Ha,DAo),e(De,qAo),e(De,R),e(R,x5),e(x5,Dae),e(Dae,GAo),e(x5,OAo),e(x5,lj),e(lj,XAo),e(x5,zAo),e(R,VAo),e(R,k5),e(k5,qae),e(qae,WAo),e(k5,QAo),e(k5,ij),e(ij,HAo),e(k5,UAo),e(R,JAo),e(R,R5),e(R5,Gae),e(Gae,YAo),e(R5,KAo),e(R5,dj),e(dj,ZAo),e(R5,e0o),e(R,o0o),e(R,S5),e(S5,Oae),e(Oae,r0o),e(S5,t0o),e(S5,cj),e(cj,a0o),e(S5,n0o),e(R,s0o),e(R,P5),e(P5,Xae),e(Xae,l0o),e(P5,i0o),e(P5,fj),e(fj,d0o),e(P5,c0o),e(R,f0o),e(R,$5),e($5,zae),e(zae,m0o),e($5,g0o),e($5,mj),e(mj,h0o),e($5,p0o),e(R,_0o),e(R,I5),e(I5,Vae),e(Vae,u0o),e(I5,b0o),e(I5,gj),e(gj,v0o),e(I5,T0o),e(R,F0o),e(R,j5),e(j5,Wae),e(Wae,C0o),e(j5,M0o),e(j5,hj),e(hj,E0o),e(j5,y0o),e(R,w0o),e(R,N5),e(N5,Qae),e(Qae,A0o),e(N5,L0o),e(N5,pj),e(pj,B0o),e(N5,x0o),e(R,k0o),e(R,D5),e(D5,Hae),e(Hae,R0o),e(D5,S0o),e(D5,_j),e(_j,P0o),e(D5,$0o),e(R,I0o),e(R,q5),e(q5,Uae),e(Uae,j0o),e(q5,N0o),e(q5,uj),e(uj,D0o),e(q5,q0o),e(R,G0o),e(R,G5),e(G5,Jae),e(Jae,O0o),e(G5,X0o),e(G5,bj),e(bj,z0o),e(G5,V0o),e(R,W0o),e(R,O5),e(O5,Yae),e(Yae,Q0o),e(O5,H0o),e(O5,vj),e(vj,U0o),e(O5,J0o),e(R,Y0o),e(R,X5),e(X5,Kae),e(Kae,K0o),e(X5,Z0o),e(X5,Tj),e(Tj,eLo),e(X5,oLo),e(R,rLo),e(R,z5),e(z5,Zae),e(Zae,tLo),e(z5,aLo),e(z5,Fj),e(Fj,nLo),e(z5,sLo),e(R,lLo),e(R,V5),e(V5,ene),e(ene,iLo),e(V5,dLo),e(V5,Cj),e(Cj,cLo),e(V5,fLo),e(R,mLo),e(R,W5),e(W5,one),e(one,gLo),e(W5,hLo),e(W5,Mj),e(Mj,pLo),e(W5,_Lo),e(R,uLo),e(R,Q5),e(Q5,rne),e(rne,bLo),e(Q5,vLo),e(Q5,Ej),e(Ej,TLo),e(Q5,FLo),e(R,CLo),e(R,H5),e(H5,tne),e(tne,MLo),e(H5,ELo),e(H5,yj),e(yj,yLo),e(H5,wLo),e(R,ALo),e(R,U5),e(U5,ane),e(ane,LLo),e(U5,BLo),e(U5,wj),e(wj,xLo),e(U5,kLo),e(R,RLo),e(R,J5),e(J5,nne),e(nne,SLo),e(J5,PLo),e(J5,Aj),e(Aj,$Lo),e(J5,ILo),e(R,jLo),e(R,Y5),e(Y5,sne),e(sne,NLo),e(Y5,DLo),e(Y5,Lj),e(Lj,qLo),e(Y5,GLo),e(R,OLo),e(R,K5),e(K5,lne),e(lne,XLo),e(K5,zLo),e(K5,Bj),e(Bj,VLo),e(K5,WLo),e(R,QLo),e(R,Z5),e(Z5,ine),e(ine,HLo),e(Z5,ULo),e(Z5,xj),e(xj,JLo),e(Z5,YLo),e(R,KLo),e(R,e2),e(e2,dne),e(dne,ZLo),e(e2,e9o),e(e2,kj),e(kj,o9o),e(e2,r9o),e(R,t9o),e(R,o2),e(o2,cne),e(cne,a9o),e(o2,n9o),e(o2,Rj),e(Rj,s9o),e(o2,l9o),e(R,i9o),e(R,r2),e(r2,fne),e(fne,d9o),e(r2,c9o),e(r2,Sj),e(Sj,f9o),e(r2,m9o),e(R,g9o),e(R,t2),e(t2,mne),e(mne,h9o),e(t2,p9o),e(t2,Pj),e(Pj,_9o),e(t2,u9o),e(R,b9o),e(R,a2),e(a2,gne),e(gne,v9o),e(a2,T9o),e(a2,$j),e($j,F9o),e(a2,C9o),e(R,M9o),e(R,n2),e(n2,hne),e(hne,E9o),e(n2,y9o),e(n2,Ij),e(Ij,w9o),e(n2,A9o),e(R,L9o),e(R,s2),e(s2,pne),e(pne,B9o),e(s2,x9o),e(s2,jj),e(jj,k9o),e(s2,R9o),e(R,S9o),e(R,l2),e(l2,_ne),e(_ne,P9o),e(l2,$9o),e(l2,Nj),e(Nj,I9o),e(l2,j9o),e(R,N9o),e(R,i2),e(i2,une),e(une,D9o),e(i2,q9o),e(i2,Dj),e(Dj,G9o),e(i2,O9o),e(R,X9o),e(R,d2),e(d2,bne),e(bne,z9o),e(d2,V9o),e(d2,qj),e(qj,W9o),e(d2,Q9o),e(R,H9o),e(R,c2),e(c2,vne),e(vne,U9o),e(c2,J9o),e(c2,Gj),e(Gj,Y9o),e(c2,K9o),e(R,Z9o),e(R,f2),e(f2,Tne),e(Tne,eBo),e(f2,oBo),e(f2,Oj),e(Oj,rBo),e(f2,tBo),e(R,aBo),e(R,m2),e(m2,Fne),e(Fne,nBo),e(m2,sBo),e(m2,Xj),e(Xj,lBo),e(m2,iBo),e(R,dBo),e(R,g2),e(g2,Cne),e(Cne,cBo),e(g2,fBo),e(g2,zj),e(zj,mBo),e(g2,gBo),e(De,hBo),e(De,h2),e(h2,pBo),e(h2,Mne),e(Mne,_Bo),e(h2,uBo),e(h2,Ene),e(Ene,bBo),e(De,vBo),e(De,yne),e(yne,TBo),e(De,FBo),g(KM,De,null),b(d,zLe,u),b(d,_d,u),e(_d,p2),e(p2,wne),g(ZM,wne,null),e(_d,CBo),e(_d,Ane),e(Ane,MBo),b(d,VLe,u),b(d,or,u),g(eE,or,null),e(or,EBo),e(or,ud),e(ud,yBo),e(ud,Lne),e(Lne,wBo),e(ud,ABo),e(ud,Bne),e(Bne,LBo),e(ud,BBo),e(or,xBo),e(or,oE),e(oE,kBo),e(oE,xne),e(xne,RBo),e(oE,SBo),e(or,PBo),e(or,Hr),g(rE,Hr,null),e(Hr,$Bo),e(Hr,kne),e(kne,IBo),e(Hr,jBo),e(Hr,bd),e(bd,NBo),e(bd,Rne),e(Rne,DBo),e(bd,qBo),e(bd,Sne),e(Sne,GBo),e(bd,OBo),e(Hr,XBo),e(Hr,Pne),e(Pne,zBo),e(Hr,VBo),g(tE,Hr,null),e(or,WBo),e(or,qe),g(aE,qe,null),e(qe,QBo),e(qe,$ne),e($ne,HBo),e(qe,UBo),e(qe,Ua),e(Ua,JBo),e(Ua,Ine),e(Ine,YBo),e(Ua,KBo),e(Ua,jne),e(jne,ZBo),e(Ua,exo),e(Ua,Nne),e(Nne,oxo),e(Ua,rxo),e(qe,txo),e(qe,Dne),e(Dne,_2),e(_2,qne),e(qne,axo),e(_2,nxo),e(_2,Vj),e(Vj,sxo),e(_2,lxo),e(qe,ixo),e(qe,u2),e(u2,dxo),e(u2,Gne),e(Gne,cxo),e(u2,fxo),e(u2,One),e(One,mxo),e(qe,gxo),e(qe,Xne),e(Xne,hxo),e(qe,pxo),g(nE,qe,null),b(d,WLe,u),b(d,vd,u),e(vd,b2),e(b2,zne),g(sE,zne,null),e(vd,_xo),e(vd,Vne),e(Vne,uxo),b(d,QLe,u),b(d,rr,u),g(lE,rr,null),e(rr,bxo),e(rr,Td),e(Td,vxo),e(Td,Wne),e(Wne,Txo),e(Td,Fxo),e(Td,Qne),e(Qne,Cxo),e(Td,Mxo),e(rr,Exo),e(rr,iE),e(iE,yxo),e(iE,Hne),e(Hne,wxo),e(iE,Axo),e(rr,Lxo),e(rr,Ur),g(dE,Ur,null),e(Ur,Bxo),e(Ur,Une),e(Une,xxo),e(Ur,kxo),e(Ur,Fd),e(Fd,Rxo),e(Fd,Jne),e(Jne,Sxo),e(Fd,Pxo),e(Fd,Yne),e(Yne,$xo),e(Fd,Ixo),e(Ur,jxo),e(Ur,Kne),e(Kne,Nxo),e(Ur,Dxo),g(cE,Ur,null),e(rr,qxo),e(rr,Ge),g(fE,Ge,null),e(Ge,Gxo),e(Ge,Zne),e(Zne,Oxo),e(Ge,Xxo),e(Ge,Ja),e(Ja,zxo),e(Ja,ese),e(ese,Vxo),e(Ja,Wxo),e(Ja,ose),e(ose,Qxo),e(Ja,Hxo),e(Ja,rse),e(rse,Uxo),e(Ja,Jxo),e(Ge,Yxo),e(Ge,be),e(be,v2),e(v2,tse),e(tse,Kxo),e(v2,Zxo),e(v2,Wj),e(Wj,eko),e(v2,oko),e(be,rko),e(be,T2),e(T2,ase),e(ase,tko),e(T2,ako),e(T2,Qj),e(Qj,nko),e(T2,sko),e(be,lko),e(be,Rs),e(Rs,nse),e(nse,iko),e(Rs,dko),e(Rs,Hj),e(Hj,cko),e(Rs,fko),e(Rs,Uj),e(Uj,mko),e(Rs,gko),e(be,hko),e(be,F2),e(F2,sse),e(sse,pko),e(F2,_ko),e(F2,Jj),e(Jj,uko),e(F2,bko),e(be,vko),e(be,la),e(la,lse),e(lse,Tko),e(la,Fko),e(la,Yj),e(Yj,Cko),e(la,Mko),e(la,Kj),e(Kj,Eko),e(la,yko),e(la,Zj),e(Zj,wko),e(la,Ako),e(be,Lko),e(be,C2),e(C2,ise),e(ise,Bko),e(C2,xko),e(C2,eN),e(eN,kko),e(C2,Rko),e(be,Sko),e(be,M2),e(M2,dse),e(dse,Pko),e(M2,$ko),e(M2,oN),e(oN,Iko),e(M2,jko),e(be,Nko),e(be,E2),e(E2,cse),e(cse,Dko),e(E2,qko),e(E2,rN),e(rN,Gko),e(E2,Oko),e(be,Xko),e(be,y2),e(y2,fse),e(fse,zko),e(y2,Vko),e(y2,tN),e(tN,Wko),e(y2,Qko),e(Ge,Hko),e(Ge,w2),e(w2,Uko),e(w2,mse),e(mse,Jko),e(w2,Yko),e(w2,gse),e(gse,Kko),e(Ge,Zko),e(Ge,hse),e(hse,eRo),e(Ge,oRo),g(mE,Ge,null),b(d,HLe,u),b(d,Cd,u),e(Cd,A2),e(A2,pse),g(gE,pse,null),e(Cd,rRo),e(Cd,_se),e(_se,tRo),b(d,ULe,u),b(d,tr,u),g(hE,tr,null),e(tr,aRo),e(tr,Md),e(Md,nRo),e(Md,use),e(use,sRo),e(Md,lRo),e(Md,bse),e(bse,iRo),e(Md,dRo),e(tr,cRo),e(tr,pE),e(pE,fRo),e(pE,vse),e(vse,mRo),e(pE,gRo),e(tr,hRo),e(tr,Jr),g(_E,Jr,null),e(Jr,pRo),e(Jr,Tse),e(Tse,_Ro),e(Jr,uRo),e(Jr,Ed),e(Ed,bRo),e(Ed,Fse),e(Fse,vRo),e(Ed,TRo),e(Ed,Cse),e(Cse,FRo),e(Ed,CRo),e(Jr,MRo),e(Jr,Mse),e(Mse,ERo),e(Jr,yRo),g(uE,Jr,null),e(tr,wRo),e(tr,Oe),g(bE,Oe,null),e(Oe,ARo),e(Oe,Ese),e(Ese,LRo),e(Oe,BRo),e(Oe,Ya),e(Ya,xRo),e(Ya,yse),e(yse,kRo),e(Ya,RRo),e(Ya,wse),e(wse,SRo),e(Ya,PRo),e(Ya,Ase),e(Ase,$Ro),e(Ya,IRo),e(Oe,jRo),e(Oe,Lse),e(Lse,L2),e(L2,Bse),e(Bse,NRo),e(L2,DRo),e(L2,aN),e(aN,qRo),e(L2,GRo),e(Oe,ORo),e(Oe,B2),e(B2,XRo),e(B2,xse),e(xse,zRo),e(B2,VRo),e(B2,kse),e(kse,WRo),e(Oe,QRo),e(Oe,Rse),e(Rse,HRo),e(Oe,URo),g(vE,Oe,null),b(d,JLe,u),b(d,yd,u),e(yd,x2),e(x2,Sse),g(TE,Sse,null),e(yd,JRo),e(yd,Pse),e(Pse,YRo),b(d,YLe,u),b(d,ar,u),g(FE,ar,null),e(ar,KRo),e(ar,wd),e(wd,ZRo),e(wd,$se),e($se,eSo),e(wd,oSo),e(wd,Ise),e(Ise,rSo),e(wd,tSo),e(ar,aSo),e(ar,CE),e(CE,nSo),e(CE,jse),e(jse,sSo),e(CE,lSo),e(ar,iSo),e(ar,Yr),g(ME,Yr,null),e(Yr,dSo),e(Yr,Nse),e(Nse,cSo),e(Yr,fSo),e(Yr,Ad),e(Ad,mSo),e(Ad,Dse),e(Dse,gSo),e(Ad,hSo),e(Ad,qse),e(qse,pSo),e(Ad,_So),e(Yr,uSo),e(Yr,Gse),e(Gse,bSo),e(Yr,vSo),g(EE,Yr,null),e(ar,TSo),e(ar,Xe),g(yE,Xe,null),e(Xe,FSo),e(Xe,Ose),e(Ose,CSo),e(Xe,MSo),e(Xe,Ka),e(Ka,ESo),e(Ka,Xse),e(Xse,ySo),e(Ka,wSo),e(Ka,zse),e(zse,ASo),e(Ka,LSo),e(Ka,Vse),e(Vse,BSo),e(Ka,xSo),e(Xe,kSo),e(Xe,ao),e(ao,k2),e(k2,Wse),e(Wse,RSo),e(k2,SSo),e(k2,nN),e(nN,PSo),e(k2,$So),e(ao,ISo),e(ao,R2),e(R2,Qse),e(Qse,jSo),e(R2,NSo),e(R2,sN),e(sN,DSo),e(R2,qSo),e(ao,GSo),e(ao,S2),e(S2,Hse),e(Hse,OSo),e(S2,XSo),e(S2,lN),e(lN,zSo),e(S2,VSo),e(ao,WSo),e(ao,P2),e(P2,Use),e(Use,QSo),e(P2,HSo),e(P2,iN),e(iN,USo),e(P2,JSo),e(ao,YSo),e(ao,$2),e($2,Jse),e(Jse,KSo),e($2,ZSo),e($2,dN),e(dN,ePo),e($2,oPo),e(ao,rPo),e(ao,I2),e(I2,Yse),e(Yse,tPo),e(I2,aPo),e(I2,cN),e(cN,nPo),e(I2,sPo),e(ao,lPo),e(ao,j2),e(j2,Kse),e(Kse,iPo),e(j2,dPo),e(j2,fN),e(fN,cPo),e(j2,fPo),e(Xe,mPo),e(Xe,N2),e(N2,gPo),e(N2,Zse),e(Zse,hPo),e(N2,pPo),e(N2,ele),e(ele,_Po),e(Xe,uPo),e(Xe,ole),e(ole,bPo),e(Xe,vPo),g(wE,Xe,null),b(d,KLe,u),b(d,Ld,u),e(Ld,D2),e(D2,rle),g(AE,rle,null),e(Ld,TPo),e(Ld,tle),e(tle,FPo),b(d,ZLe,u),b(d,nr,u),g(LE,nr,null),e(nr,CPo),e(nr,Bd),e(Bd,MPo),e(Bd,ale),e(ale,EPo),e(Bd,yPo),e(Bd,nle),e(nle,wPo),e(Bd,APo),e(nr,LPo),e(nr,BE),e(BE,BPo),e(BE,sle),e(sle,xPo),e(BE,kPo),e(nr,RPo),e(nr,Kr),g(xE,Kr,null),e(Kr,SPo),e(Kr,lle),e(lle,PPo),e(Kr,$Po),e(Kr,xd),e(xd,IPo),e(xd,ile),e(ile,jPo),e(xd,NPo),e(xd,dle),e(dle,DPo),e(xd,qPo),e(Kr,GPo),e(Kr,cle),e(cle,OPo),e(Kr,XPo),g(kE,Kr,null),e(nr,zPo),e(nr,ze),g(RE,ze,null),e(ze,VPo),e(ze,fle),e(fle,WPo),e(ze,QPo),e(ze,Za),e(Za,HPo),e(Za,mle),e(mle,UPo),e(Za,JPo),e(Za,gle),e(gle,YPo),e(Za,KPo),e(Za,hle),e(hle,ZPo),e(Za,e$o),e(ze,o$o),e(ze,kd),e(kd,q2),e(q2,ple),e(ple,r$o),e(q2,t$o),e(q2,mN),e(mN,a$o),e(q2,n$o),e(kd,s$o),e(kd,G2),e(G2,_le),e(_le,l$o),e(G2,i$o),e(G2,gN),e(gN,d$o),e(G2,c$o),e(kd,f$o),e(kd,O2),e(O2,ule),e(ule,m$o),e(O2,g$o),e(O2,hN),e(hN,h$o),e(O2,p$o),e(ze,_$o),e(ze,X2),e(X2,u$o),e(X2,ble),e(ble,b$o),e(X2,v$o),e(X2,vle),e(vle,T$o),e(ze,F$o),e(ze,Tle),e(Tle,C$o),e(ze,M$o),g(SE,ze,null),b(d,e9e,u),b(d,Rd,u),e(Rd,z2),e(z2,Fle),g(PE,Fle,null),e(Rd,E$o),e(Rd,Cle),e(Cle,y$o),b(d,o9e,u),b(d,sr,u),g($E,sr,null),e(sr,w$o),e(sr,Sd),e(Sd,A$o),e(Sd,Mle),e(Mle,L$o),e(Sd,B$o),e(Sd,Ele),e(Ele,x$o),e(Sd,k$o),e(sr,R$o),e(sr,IE),e(IE,S$o),e(IE,yle),e(yle,P$o),e(IE,$$o),e(sr,I$o),e(sr,Zr),g(jE,Zr,null),e(Zr,j$o),e(Zr,wle),e(wle,N$o),e(Zr,D$o),e(Zr,Pd),e(Pd,q$o),e(Pd,Ale),e(Ale,G$o),e(Pd,O$o),e(Pd,Lle),e(Lle,X$o),e(Pd,z$o),e(Zr,V$o),e(Zr,Ble),e(Ble,W$o),e(Zr,Q$o),g(NE,Zr,null),e(sr,H$o),e(sr,Ve),g(DE,Ve,null),e(Ve,U$o),e(Ve,xle),e(xle,J$o),e(Ve,Y$o),e(Ve,en),e(en,K$o),e(en,kle),e(kle,Z$o),e(en,eIo),e(en,Rle),e(Rle,oIo),e(en,rIo),e(en,Sle),e(Sle,tIo),e(en,aIo),e(Ve,nIo),e(Ve,no),e(no,V2),e(V2,Ple),e(Ple,sIo),e(V2,lIo),e(V2,pN),e(pN,iIo),e(V2,dIo),e(no,cIo),e(no,W2),e(W2,$le),e($le,fIo),e(W2,mIo),e(W2,_N),e(_N,gIo),e(W2,hIo),e(no,pIo),e(no,Q2),e(Q2,Ile),e(Ile,_Io),e(Q2,uIo),e(Q2,uN),e(uN,bIo),e(Q2,vIo),e(no,TIo),e(no,H2),e(H2,jle),e(jle,FIo),e(H2,CIo),e(H2,bN),e(bN,MIo),e(H2,EIo),e(no,yIo),e(no,U2),e(U2,Nle),e(Nle,wIo),e(U2,AIo),e(U2,vN),e(vN,LIo),e(U2,BIo),e(no,xIo),e(no,J2),e(J2,Dle),e(Dle,kIo),e(J2,RIo),e(J2,TN),e(TN,SIo),e(J2,PIo),e(no,$Io),e(no,Y2),e(Y2,qle),e(qle,IIo),e(Y2,jIo),e(Y2,FN),e(FN,NIo),e(Y2,DIo),e(Ve,qIo),e(Ve,K2),e(K2,GIo),e(K2,Gle),e(Gle,OIo),e(K2,XIo),e(K2,Ole),e(Ole,zIo),e(Ve,VIo),e(Ve,Xle),e(Xle,WIo),e(Ve,QIo),g(qE,Ve,null),b(d,r9e,u),b(d,$d,u),e($d,Z2),e(Z2,zle),g(GE,zle,null),e($d,HIo),e($d,Vle),e(Vle,UIo),b(d,t9e,u),b(d,lr,u),g(OE,lr,null),e(lr,JIo),e(lr,Id),e(Id,YIo),e(Id,Wle),e(Wle,KIo),e(Id,ZIo),e(Id,Qle),e(Qle,ejo),e(Id,ojo),e(lr,rjo),e(lr,XE),e(XE,tjo),e(XE,Hle),e(Hle,ajo),e(XE,njo),e(lr,sjo),e(lr,et),g(zE,et,null),e(et,ljo),e(et,Ule),e(Ule,ijo),e(et,djo),e(et,jd),e(jd,cjo),e(jd,Jle),e(Jle,fjo),e(jd,mjo),e(jd,Yle),e(Yle,gjo),e(jd,hjo),e(et,pjo),e(et,Kle),e(Kle,_jo),e(et,ujo),g(VE,et,null),e(lr,bjo),e(lr,We),g(WE,We,null),e(We,vjo),e(We,Zle),e(Zle,Tjo),e(We,Fjo),e(We,on),e(on,Cjo),e(on,eie),e(eie,Mjo),e(on,Ejo),e(on,oie),e(oie,yjo),e(on,wjo),e(on,rie),e(rie,Ajo),e(on,Ljo),e(We,Bjo),e(We,QE),e(QE,ev),e(ev,tie),e(tie,xjo),e(ev,kjo),e(ev,CN),e(CN,Rjo),e(ev,Sjo),e(QE,Pjo),e(QE,ov),e(ov,aie),e(aie,$jo),e(ov,Ijo),e(ov,MN),e(MN,jjo),e(ov,Njo),e(We,Djo),e(We,rv),e(rv,qjo),e(rv,nie),e(nie,Gjo),e(rv,Ojo),e(rv,sie),e(sie,Xjo),e(We,zjo),e(We,lie),e(lie,Vjo),e(We,Wjo),g(HE,We,null),b(d,a9e,u),b(d,Nd,u),e(Nd,tv),e(tv,iie),g(UE,iie,null),e(Nd,Qjo),e(Nd,die),e(die,Hjo),b(d,n9e,u),b(d,ir,u),g(JE,ir,null),e(ir,Ujo),e(ir,Dd),e(Dd,Jjo),e(Dd,cie),e(cie,Yjo),e(Dd,Kjo),e(Dd,fie),e(fie,Zjo),e(Dd,eNo),e(ir,oNo),e(ir,YE),e(YE,rNo),e(YE,mie),e(mie,tNo),e(YE,aNo),e(ir,nNo),e(ir,ot),g(KE,ot,null),e(ot,sNo),e(ot,gie),e(gie,lNo),e(ot,iNo),e(ot,qd),e(qd,dNo),e(qd,hie),e(hie,cNo),e(qd,fNo),e(qd,pie),e(pie,mNo),e(qd,gNo),e(ot,hNo),e(ot,_ie),e(_ie,pNo),e(ot,_No),g(ZE,ot,null),e(ir,uNo),e(ir,Qe),g(e3,Qe,null),e(Qe,bNo),e(Qe,uie),e(uie,vNo),e(Qe,TNo),e(Qe,rn),e(rn,FNo),e(rn,bie),e(bie,CNo),e(rn,MNo),e(rn,vie),e(vie,ENo),e(rn,yNo),e(rn,Tie),e(Tie,wNo),e(rn,ANo),e(Qe,LNo),e(Qe,Gd),e(Gd,av),e(av,Fie),e(Fie,BNo),e(av,xNo),e(av,EN),e(EN,kNo),e(av,RNo),e(Gd,SNo),e(Gd,nv),e(nv,Cie),e(Cie,PNo),e(nv,$No),e(nv,yN),e(yN,INo),e(nv,jNo),e(Gd,NNo),e(Gd,sv),e(sv,Mie),e(Mie,DNo),e(sv,qNo),e(sv,wN),e(wN,GNo),e(sv,ONo),e(Qe,XNo),e(Qe,lv),e(lv,zNo),e(lv,Eie),e(Eie,VNo),e(lv,WNo),e(lv,yie),e(yie,QNo),e(Qe,HNo),e(Qe,wie),e(wie,UNo),e(Qe,JNo),g(o3,Qe,null),b(d,s9e,u),b(d,Od,u),e(Od,iv),e(iv,Aie),g(r3,Aie,null),e(Od,YNo),e(Od,Lie),e(Lie,KNo),b(d,l9e,u),b(d,dr,u),g(t3,dr,null),e(dr,ZNo),e(dr,Xd),e(Xd,eDo),e(Xd,Bie),e(Bie,oDo),e(Xd,rDo),e(Xd,xie),e(xie,tDo),e(Xd,aDo),e(dr,nDo),e(dr,a3),e(a3,sDo),e(a3,kie),e(kie,lDo),e(a3,iDo),e(dr,dDo),e(dr,rt),g(n3,rt,null),e(rt,cDo),e(rt,Rie),e(Rie,fDo),e(rt,mDo),e(rt,zd),e(zd,gDo),e(zd,Sie),e(Sie,hDo),e(zd,pDo),e(zd,Pie),e(Pie,_Do),e(zd,uDo),e(rt,bDo),e(rt,$ie),e($ie,vDo),e(rt,TDo),g(s3,rt,null),e(dr,FDo),e(dr,He),g(l3,He,null),e(He,CDo),e(He,Iie),e(Iie,MDo),e(He,EDo),e(He,tn),e(tn,yDo),e(tn,jie),e(jie,wDo),e(tn,ADo),e(tn,Nie),e(Nie,LDo),e(tn,BDo),e(tn,Die),e(Die,xDo),e(tn,kDo),e(He,RDo),e(He,Vd),e(Vd,dv),e(dv,qie),e(qie,SDo),e(dv,PDo),e(dv,AN),e(AN,$Do),e(dv,IDo),e(Vd,jDo),e(Vd,cv),e(cv,Gie),e(Gie,NDo),e(cv,DDo),e(cv,LN),e(LN,qDo),e(cv,GDo),e(Vd,ODo),e(Vd,fv),e(fv,Oie),e(Oie,XDo),e(fv,zDo),e(fv,BN),e(BN,VDo),e(fv,WDo),e(He,QDo),e(He,mv),e(mv,HDo),e(mv,Xie),e(Xie,UDo),e(mv,JDo),e(mv,zie),e(zie,YDo),e(He,KDo),e(He,Vie),e(Vie,ZDo),e(He,eqo),g(i3,He,null),b(d,i9e,u),b(d,Wd,u),e(Wd,gv),e(gv,Wie),g(d3,Wie,null),e(Wd,oqo),e(Wd,Qie),e(Qie,rqo),b(d,d9e,u),b(d,cr,u),g(c3,cr,null),e(cr,tqo),e(cr,Qd),e(Qd,aqo),e(Qd,Hie),e(Hie,nqo),e(Qd,sqo),e(Qd,Uie),e(Uie,lqo),e(Qd,iqo),e(cr,dqo),e(cr,f3),e(f3,cqo),e(f3,Jie),e(Jie,fqo),e(f3,mqo),e(cr,gqo),e(cr,tt),g(m3,tt,null),e(tt,hqo),e(tt,Yie),e(Yie,pqo),e(tt,_qo),e(tt,Hd),e(Hd,uqo),e(Hd,Kie),e(Kie,bqo),e(Hd,vqo),e(Hd,Zie),e(Zie,Tqo),e(Hd,Fqo),e(tt,Cqo),e(tt,ede),e(ede,Mqo),e(tt,Eqo),g(g3,tt,null),e(cr,yqo),e(cr,Ue),g(h3,Ue,null),e(Ue,wqo),e(Ue,ode),e(ode,Aqo),e(Ue,Lqo),e(Ue,an),e(an,Bqo),e(an,rde),e(rde,xqo),e(an,kqo),e(an,tde),e(tde,Rqo),e(an,Sqo),e(an,ade),e(ade,Pqo),e(an,$qo),e(Ue,Iqo),e(Ue,nde),e(nde,hv),e(hv,sde),e(sde,jqo),e(hv,Nqo),e(hv,xN),e(xN,Dqo),e(hv,qqo),e(Ue,Gqo),e(Ue,pv),e(pv,Oqo),e(pv,lde),e(lde,Xqo),e(pv,zqo),e(pv,ide),e(ide,Vqo),e(Ue,Wqo),e(Ue,dde),e(dde,Qqo),e(Ue,Hqo),g(p3,Ue,null),b(d,c9e,u),b(d,Ud,u),e(Ud,_v),e(_v,cde),g(_3,cde,null),e(Ud,Uqo),e(Ud,fde),e(fde,Jqo),b(d,f9e,u),b(d,fr,u),g(u3,fr,null),e(fr,Yqo),e(fr,Jd),e(Jd,Kqo),e(Jd,mde),e(mde,Zqo),e(Jd,eGo),e(Jd,gde),e(gde,oGo),e(Jd,rGo),e(fr,tGo),e(fr,b3),e(b3,aGo),e(b3,hde),e(hde,nGo),e(b3,sGo),e(fr,lGo),e(fr,at),g(v3,at,null),e(at,iGo),e(at,pde),e(pde,dGo),e(at,cGo),e(at,Yd),e(Yd,fGo),e(Yd,_de),e(_de,mGo),e(Yd,gGo),e(Yd,ude),e(ude,hGo),e(Yd,pGo),e(at,_Go),e(at,bde),e(bde,uGo),e(at,bGo),g(T3,at,null),e(fr,vGo),e(fr,Je),g(F3,Je,null),e(Je,TGo),e(Je,vde),e(vde,FGo),e(Je,CGo),e(Je,nn),e(nn,MGo),e(nn,Tde),e(Tde,EGo),e(nn,yGo),e(nn,Fde),e(Fde,wGo),e(nn,AGo),e(nn,Cde),e(Cde,LGo),e(nn,BGo),e(Je,xGo),e(Je,Mde),e(Mde,uv),e(uv,Ede),e(Ede,kGo),e(uv,RGo),e(uv,kN),e(kN,SGo),e(uv,PGo),e(Je,$Go),e(Je,bv),e(bv,IGo),e(bv,yde),e(yde,jGo),e(bv,NGo),e(bv,wde),e(wde,DGo),e(Je,qGo),e(Je,Ade),e(Ade,GGo),e(Je,OGo),g(C3,Je,null),b(d,m9e,u),b(d,Kd,u),e(Kd,vv),e(vv,Lde),g(M3,Lde,null),e(Kd,XGo),e(Kd,Bde),e(Bde,zGo),b(d,g9e,u),b(d,mr,u),g(E3,mr,null),e(mr,VGo),e(mr,Zd),e(Zd,WGo),e(Zd,xde),e(xde,QGo),e(Zd,HGo),e(Zd,kde),e(kde,UGo),e(Zd,JGo),e(mr,YGo),e(mr,y3),e(y3,KGo),e(y3,Rde),e(Rde,ZGo),e(y3,eOo),e(mr,oOo),e(mr,nt),g(w3,nt,null),e(nt,rOo),e(nt,Sde),e(Sde,tOo),e(nt,aOo),e(nt,ec),e(ec,nOo),e(ec,Pde),e(Pde,sOo),e(ec,lOo),e(ec,$de),e($de,iOo),e(ec,dOo),e(nt,cOo),e(nt,Ide),e(Ide,fOo),e(nt,mOo),g(A3,nt,null),e(mr,gOo),e(mr,Ye),g(L3,Ye,null),e(Ye,hOo),e(Ye,jde),e(jde,pOo),e(Ye,_Oo),e(Ye,sn),e(sn,uOo),e(sn,Nde),e(Nde,bOo),e(sn,vOo),e(sn,Dde),e(Dde,TOo),e(sn,FOo),e(sn,qde),e(qde,COo),e(sn,MOo),e(Ye,EOo),e(Ye,B3),e(B3,Tv),e(Tv,Gde),e(Gde,yOo),e(Tv,wOo),e(Tv,RN),e(RN,AOo),e(Tv,LOo),e(B3,BOo),e(B3,Fv),e(Fv,Ode),e(Ode,xOo),e(Fv,kOo),e(Fv,SN),e(SN,ROo),e(Fv,SOo),e(Ye,POo),e(Ye,Cv),e(Cv,$Oo),e(Cv,Xde),e(Xde,IOo),e(Cv,jOo),e(Cv,zde),e(zde,NOo),e(Ye,DOo),e(Ye,Vde),e(Vde,qOo),e(Ye,GOo),g(x3,Ye,null),b(d,h9e,u),b(d,oc,u),e(oc,Mv),e(Mv,Wde),g(k3,Wde,null),e(oc,OOo),e(oc,Qde),e(Qde,XOo),b(d,p9e,u),b(d,gr,u),g(R3,gr,null),e(gr,zOo),e(gr,rc),e(rc,VOo),e(rc,Hde),e(Hde,WOo),e(rc,QOo),e(rc,Ude),e(Ude,HOo),e(rc,UOo),e(gr,JOo),e(gr,S3),e(S3,YOo),e(S3,Jde),e(Jde,KOo),e(S3,ZOo),e(gr,eXo),e(gr,st),g(P3,st,null),e(st,oXo),e(st,Yde),e(Yde,rXo),e(st,tXo),e(st,tc),e(tc,aXo),e(tc,Kde),e(Kde,nXo),e(tc,sXo),e(tc,Zde),e(Zde,lXo),e(tc,iXo),e(st,dXo),e(st,ece),e(ece,cXo),e(st,fXo),g($3,st,null),e(gr,mXo),e(gr,go),g(I3,go,null),e(go,gXo),e(go,oce),e(oce,hXo),e(go,pXo),e(go,ln),e(ln,_Xo),e(ln,rce),e(rce,uXo),e(ln,bXo),e(ln,tce),e(tce,vXo),e(ln,TXo),e(ln,ace),e(ace,FXo),e(ln,CXo),e(go,MXo),e(go,B),e(B,Ev),e(Ev,nce),e(nce,EXo),e(Ev,yXo),e(Ev,PN),e(PN,wXo),e(Ev,AXo),e(B,LXo),e(B,yv),e(yv,sce),e(sce,BXo),e(yv,xXo),e(yv,$N),e($N,kXo),e(yv,RXo),e(B,SXo),e(B,wv),e(wv,lce),e(lce,PXo),e(wv,$Xo),e(wv,IN),e(IN,IXo),e(wv,jXo),e(B,NXo),e(B,Av),e(Av,ice),e(ice,DXo),e(Av,qXo),e(Av,jN),e(jN,GXo),e(Av,OXo),e(B,XXo),e(B,Lv),e(Lv,dce),e(dce,zXo),e(Lv,VXo),e(Lv,NN),e(NN,WXo),e(Lv,QXo),e(B,HXo),e(B,Bv),e(Bv,cce),e(cce,UXo),e(Bv,JXo),e(Bv,DN),e(DN,YXo),e(Bv,KXo),e(B,ZXo),e(B,xv),e(xv,fce),e(fce,ezo),e(xv,ozo),e(xv,qN),e(qN,rzo),e(xv,tzo),e(B,azo),e(B,kv),e(kv,mce),e(mce,nzo),e(kv,szo),e(kv,GN),e(GN,lzo),e(kv,izo),e(B,dzo),e(B,Rv),e(Rv,gce),e(gce,czo),e(Rv,fzo),e(Rv,ON),e(ON,mzo),e(Rv,gzo),e(B,hzo),e(B,Sv),e(Sv,hce),e(hce,pzo),e(Sv,_zo),e(Sv,XN),e(XN,uzo),e(Sv,bzo),e(B,vzo),e(B,Pv),e(Pv,pce),e(pce,Tzo),e(Pv,Fzo),e(Pv,zN),e(zN,Czo),e(Pv,Mzo),e(B,Ezo),e(B,$v),e($v,_ce),e(_ce,yzo),e($v,wzo),e($v,VN),e(VN,Azo),e($v,Lzo),e(B,Bzo),e(B,Iv),e(Iv,uce),e(uce,xzo),e(Iv,kzo),e(Iv,WN),e(WN,Rzo),e(Iv,Szo),e(B,Pzo),e(B,jv),e(jv,bce),e(bce,$zo),e(jv,Izo),e(jv,QN),e(QN,jzo),e(jv,Nzo),e(B,Dzo),e(B,Nv),e(Nv,vce),e(vce,qzo),e(Nv,Gzo),e(Nv,HN),e(HN,Ozo),e(Nv,Xzo),e(B,zzo),e(B,Dv),e(Dv,Tce),e(Tce,Vzo),e(Dv,Wzo),e(Dv,UN),e(UN,Qzo),e(Dv,Hzo),e(B,Uzo),e(B,Ss),e(Ss,Fce),e(Fce,Jzo),e(Ss,Yzo),e(Ss,JN),e(JN,Kzo),e(Ss,Zzo),e(Ss,YN),e(YN,eVo),e(Ss,oVo),e(B,rVo),e(B,qv),e(qv,Cce),e(Cce,tVo),e(qv,aVo),e(qv,KN),e(KN,nVo),e(qv,sVo),e(B,lVo),e(B,Gv),e(Gv,Mce),e(Mce,iVo),e(Gv,dVo),e(Gv,ZN),e(ZN,cVo),e(Gv,fVo),e(B,mVo),e(B,Ov),e(Ov,Ece),e(Ece,gVo),e(Ov,hVo),e(Ov,eD),e(eD,pVo),e(Ov,_Vo),e(B,uVo),e(B,Xv),e(Xv,yce),e(yce,bVo),e(Xv,vVo),e(Xv,oD),e(oD,TVo),e(Xv,FVo),e(B,CVo),e(B,zv),e(zv,wce),e(wce,MVo),e(zv,EVo),e(zv,rD),e(rD,yVo),e(zv,wVo),e(B,AVo),e(B,Vv),e(Vv,Ace),e(Ace,LVo),e(Vv,BVo),e(Vv,tD),e(tD,xVo),e(Vv,kVo),e(B,RVo),e(B,Wv),e(Wv,Lce),e(Lce,SVo),e(Wv,PVo),e(Wv,aD),e(aD,$Vo),e(Wv,IVo),e(B,jVo),e(B,Qv),e(Qv,Bce),e(Bce,NVo),e(Qv,DVo),e(Qv,nD),e(nD,qVo),e(Qv,GVo),e(B,OVo),e(B,Hv),e(Hv,xce),e(xce,XVo),e(Hv,zVo),e(Hv,sD),e(sD,VVo),e(Hv,WVo),e(B,QVo),e(B,Uv),e(Uv,kce),e(kce,HVo),e(Uv,UVo),e(Uv,lD),e(lD,JVo),e(Uv,YVo),e(B,KVo),e(B,Jv),e(Jv,Rce),e(Rce,ZVo),e(Jv,eWo),e(Jv,iD),e(iD,oWo),e(Jv,rWo),e(B,tWo),e(B,Yv),e(Yv,Sce),e(Sce,aWo),e(Yv,nWo),e(Yv,dD),e(dD,sWo),e(Yv,lWo),e(B,iWo),e(B,Kv),e(Kv,Pce),e(Pce,dWo),e(Kv,cWo),e(Kv,cD),e(cD,fWo),e(Kv,mWo),e(B,gWo),e(B,Zv),e(Zv,$ce),e($ce,hWo),e(Zv,pWo),e(Zv,fD),e(fD,_Wo),e(Zv,uWo),e(B,bWo),e(B,e6),e(e6,Ice),e(Ice,vWo),e(e6,TWo),e(e6,mD),e(mD,FWo),e(e6,CWo),e(B,MWo),e(B,o6),e(o6,jce),e(jce,EWo),e(o6,yWo),e(o6,gD),e(gD,wWo),e(o6,AWo),e(B,LWo),e(B,r6),e(r6,Nce),e(Nce,BWo),e(r6,xWo),e(r6,hD),e(hD,kWo),e(r6,RWo),e(B,SWo),e(B,t6),e(t6,Dce),e(Dce,PWo),e(t6,$Wo),e(t6,pD),e(pD,IWo),e(t6,jWo),e(B,NWo),e(B,a6),e(a6,qce),e(qce,DWo),e(a6,qWo),e(a6,_D),e(_D,GWo),e(a6,OWo),e(B,XWo),e(B,n6),e(n6,Gce),e(Gce,zWo),e(n6,VWo),e(n6,uD),e(uD,WWo),e(n6,QWo),e(B,HWo),e(B,s6),e(s6,Oce),e(Oce,UWo),e(s6,JWo),e(s6,bD),e(bD,YWo),e(s6,KWo),e(B,ZWo),e(B,l6),e(l6,Xce),e(Xce,eQo),e(l6,oQo),e(l6,vD),e(vD,rQo),e(l6,tQo),e(B,aQo),e(B,i6),e(i6,zce),e(zce,nQo),e(i6,sQo),e(i6,TD),e(TD,lQo),e(i6,iQo),e(B,dQo),e(B,d6),e(d6,Vce),e(Vce,cQo),e(d6,fQo),e(d6,FD),e(FD,mQo),e(d6,gQo),e(B,hQo),e(B,c6),e(c6,Wce),e(Wce,pQo),e(c6,_Qo),e(c6,CD),e(CD,uQo),e(c6,bQo),e(go,vQo),e(go,Qce),e(Qce,TQo),e(go,FQo),g(j3,go,null),b(d,_9e,u),b(d,ac,u),e(ac,f6),e(f6,Hce),g(N3,Hce,null),e(ac,CQo),e(ac,Uce),e(Uce,MQo),b(d,u9e,u),b(d,hr,u),g(D3,hr,null),e(hr,EQo),e(hr,nc),e(nc,yQo),e(nc,Jce),e(Jce,wQo),e(nc,AQo),e(nc,Yce),e(Yce,LQo),e(nc,BQo),e(hr,xQo),e(hr,q3),e(q3,kQo),e(q3,Kce),e(Kce,RQo),e(q3,SQo),e(hr,PQo),e(hr,lt),g(G3,lt,null),e(lt,$Qo),e(lt,Zce),e(Zce,IQo),e(lt,jQo),e(lt,sc),e(sc,NQo),e(sc,efe),e(efe,DQo),e(sc,qQo),e(sc,ofe),e(ofe,GQo),e(sc,OQo),e(lt,XQo),e(lt,rfe),e(rfe,zQo),e(lt,VQo),g(O3,lt,null),e(hr,WQo),e(hr,ho),g(X3,ho,null),e(ho,QQo),e(ho,tfe),e(tfe,HQo),e(ho,UQo),e(ho,dn),e(dn,JQo),e(dn,afe),e(afe,YQo),e(dn,KQo),e(dn,nfe),e(nfe,ZQo),e(dn,eHo),e(dn,sfe),e(sfe,oHo),e(dn,rHo),e(ho,tHo),e(ho,H),e(H,m6),e(m6,lfe),e(lfe,aHo),e(m6,nHo),e(m6,MD),e(MD,sHo),e(m6,lHo),e(H,iHo),e(H,g6),e(g6,ife),e(ife,dHo),e(g6,cHo),e(g6,ED),e(ED,fHo),e(g6,mHo),e(H,gHo),e(H,h6),e(h6,dfe),e(dfe,hHo),e(h6,pHo),e(h6,yD),e(yD,_Ho),e(h6,uHo),e(H,bHo),e(H,p6),e(p6,cfe),e(cfe,vHo),e(p6,THo),e(p6,wD),e(wD,FHo),e(p6,CHo),e(H,MHo),e(H,_6),e(_6,ffe),e(ffe,EHo),e(_6,yHo),e(_6,AD),e(AD,wHo),e(_6,AHo),e(H,LHo),e(H,u6),e(u6,mfe),e(mfe,BHo),e(u6,xHo),e(u6,LD),e(LD,kHo),e(u6,RHo),e(H,SHo),e(H,b6),e(b6,gfe),e(gfe,PHo),e(b6,$Ho),e(b6,BD),e(BD,IHo),e(b6,jHo),e(H,NHo),e(H,v6),e(v6,hfe),e(hfe,DHo),e(v6,qHo),e(v6,xD),e(xD,GHo),e(v6,OHo),e(H,XHo),e(H,T6),e(T6,pfe),e(pfe,zHo),e(T6,VHo),e(T6,kD),e(kD,WHo),e(T6,QHo),e(H,HHo),e(H,F6),e(F6,_fe),e(_fe,UHo),e(F6,JHo),e(F6,RD),e(RD,YHo),e(F6,KHo),e(H,ZHo),e(H,C6),e(C6,ufe),e(ufe,eUo),e(C6,oUo),e(C6,SD),e(SD,rUo),e(C6,tUo),e(H,aUo),e(H,M6),e(M6,bfe),e(bfe,nUo),e(M6,sUo),e(M6,PD),e(PD,lUo),e(M6,iUo),e(H,dUo),e(H,E6),e(E6,vfe),e(vfe,cUo),e(E6,fUo),e(E6,$D),e($D,mUo),e(E6,gUo),e(H,hUo),e(H,y6),e(y6,Tfe),e(Tfe,pUo),e(y6,_Uo),e(y6,ID),e(ID,uUo),e(y6,bUo),e(H,vUo),e(H,w6),e(w6,Ffe),e(Ffe,TUo),e(w6,FUo),e(w6,jD),e(jD,CUo),e(w6,MUo),e(H,EUo),e(H,A6),e(A6,Cfe),e(Cfe,yUo),e(A6,wUo),e(A6,ND),e(ND,AUo),e(A6,LUo),e(H,BUo),e(H,L6),e(L6,Mfe),e(Mfe,xUo),e(L6,kUo),e(L6,DD),e(DD,RUo),e(L6,SUo),e(H,PUo),e(H,B6),e(B6,Efe),e(Efe,$Uo),e(B6,IUo),e(B6,qD),e(qD,jUo),e(B6,NUo),e(H,DUo),e(H,x6),e(x6,yfe),e(yfe,qUo),e(x6,GUo),e(x6,GD),e(GD,OUo),e(x6,XUo),e(H,zUo),e(H,k6),e(k6,wfe),e(wfe,VUo),e(k6,WUo),e(k6,OD),e(OD,QUo),e(k6,HUo),e(H,UUo),e(H,R6),e(R6,Afe),e(Afe,JUo),e(R6,YUo),e(R6,XD),e(XD,KUo),e(R6,ZUo),e(H,eJo),e(H,S6),e(S6,Lfe),e(Lfe,oJo),e(S6,rJo),e(S6,zD),e(zD,tJo),e(S6,aJo),e(ho,nJo),e(ho,Bfe),e(Bfe,sJo),e(ho,lJo),g(z3,ho,null),b(d,b9e,u),b(d,lc,u),e(lc,P6),e(P6,xfe),g(V3,xfe,null),e(lc,iJo),e(lc,kfe),e(kfe,dJo),b(d,v9e,u),b(d,pr,u),g(W3,pr,null),e(pr,cJo),e(pr,ic),e(ic,fJo),e(ic,Rfe),e(Rfe,mJo),e(ic,gJo),e(ic,Sfe),e(Sfe,hJo),e(ic,pJo),e(pr,_Jo),e(pr,Q3),e(Q3,uJo),e(Q3,Pfe),e(Pfe,bJo),e(Q3,vJo),e(pr,TJo),e(pr,it),g(H3,it,null),e(it,FJo),e(it,$fe),e($fe,CJo),e(it,MJo),e(it,dc),e(dc,EJo),e(dc,Ife),e(Ife,yJo),e(dc,wJo),e(dc,jfe),e(jfe,AJo),e(dc,LJo),e(it,BJo),e(it,Nfe),e(Nfe,xJo),e(it,kJo),g(U3,it,null),e(pr,RJo),e(pr,po),g(J3,po,null),e(po,SJo),e(po,Dfe),e(Dfe,PJo),e(po,$Jo),e(po,cn),e(cn,IJo),e(cn,qfe),e(qfe,jJo),e(cn,NJo),e(cn,Gfe),e(Gfe,DJo),e(cn,qJo),e(cn,Ofe),e(Ofe,GJo),e(cn,OJo),e(po,XJo),e(po,he),e(he,$6),e($6,Xfe),e(Xfe,zJo),e($6,VJo),e($6,VD),e(VD,WJo),e($6,QJo),e(he,HJo),e(he,I6),e(I6,zfe),e(zfe,UJo),e(I6,JJo),e(I6,WD),e(WD,YJo),e(I6,KJo),e(he,ZJo),e(he,j6),e(j6,Vfe),e(Vfe,eYo),e(j6,oYo),e(j6,QD),e(QD,rYo),e(j6,tYo),e(he,aYo),e(he,N6),e(N6,Wfe),e(Wfe,nYo),e(N6,sYo),e(N6,HD),e(HD,lYo),e(N6,iYo),e(he,dYo),e(he,D6),e(D6,Qfe),e(Qfe,cYo),e(D6,fYo),e(D6,UD),e(UD,mYo),e(D6,gYo),e(he,hYo),e(he,q6),e(q6,Hfe),e(Hfe,pYo),e(q6,_Yo),e(q6,JD),e(JD,uYo),e(q6,bYo),e(he,vYo),e(he,G6),e(G6,Ufe),e(Ufe,TYo),e(G6,FYo),e(G6,YD),e(YD,CYo),e(G6,MYo),e(he,EYo),e(he,O6),e(O6,Jfe),e(Jfe,yYo),e(O6,wYo),e(O6,KD),e(KD,AYo),e(O6,LYo),e(he,BYo),e(he,X6),e(X6,Yfe),e(Yfe,xYo),e(X6,kYo),e(X6,ZD),e(ZD,RYo),e(X6,SYo),e(he,PYo),e(he,z6),e(z6,Kfe),e(Kfe,$Yo),e(z6,IYo),e(z6,eq),e(eq,jYo),e(z6,NYo),e(po,DYo),e(po,Zfe),e(Zfe,qYo),e(po,GYo),g(Y3,po,null),b(d,T9e,u),b(d,cc,u),e(cc,V6),e(V6,eme),g(K3,eme,null),e(cc,OYo),e(cc,ome),e(ome,XYo),b(d,F9e,u),b(d,_r,u),g(Z3,_r,null),e(_r,zYo),e(_r,fc),e(fc,VYo),e(fc,rme),e(rme,WYo),e(fc,QYo),e(fc,tme),e(tme,HYo),e(fc,UYo),e(_r,JYo),e(_r,ey),e(ey,YYo),e(ey,ame),e(ame,KYo),e(ey,ZYo),e(_r,eKo),e(_r,dt),g(oy,dt,null),e(dt,oKo),e(dt,nme),e(nme,rKo),e(dt,tKo),e(dt,mc),e(mc,aKo),e(mc,sme),e(sme,nKo),e(mc,sKo),e(mc,lme),e(lme,lKo),e(mc,iKo),e(dt,dKo),e(dt,ime),e(ime,cKo),e(dt,fKo),g(ry,dt,null),e(_r,mKo),e(_r,_o),g(ty,_o,null),e(_o,gKo),e(_o,dme),e(dme,hKo),e(_o,pKo),e(_o,fn),e(fn,_Ko),e(fn,cme),e(cme,uKo),e(fn,bKo),e(fn,fme),e(fme,vKo),e(fn,TKo),e(fn,mme),e(mme,FKo),e(fn,CKo),e(_o,MKo),e(_o,ay),e(ay,W6),e(W6,gme),e(gme,EKo),e(W6,yKo),e(W6,oq),e(oq,wKo),e(W6,AKo),e(ay,LKo),e(ay,Q6),e(Q6,hme),e(hme,BKo),e(Q6,xKo),e(Q6,rq),e(rq,kKo),e(Q6,RKo),e(_o,SKo),e(_o,pme),e(pme,PKo),e(_o,$Ko),g(ny,_o,null),b(d,C9e,u),b(d,gc,u),e(gc,H6),e(H6,_me),g(sy,_me,null),e(gc,IKo),e(gc,ume),e(ume,jKo),b(d,M9e,u),b(d,ur,u),g(ly,ur,null),e(ur,NKo),e(ur,hc),e(hc,DKo),e(hc,bme),e(bme,qKo),e(hc,GKo),e(hc,vme),e(vme,OKo),e(hc,XKo),e(ur,zKo),e(ur,iy),e(iy,VKo),e(iy,Tme),e(Tme,WKo),e(iy,QKo),e(ur,HKo),e(ur,ct),g(dy,ct,null),e(ct,UKo),e(ct,Fme),e(Fme,JKo),e(ct,YKo),e(ct,pc),e(pc,KKo),e(pc,Cme),e(Cme,ZKo),e(pc,eZo),e(pc,Mme),e(Mme,oZo),e(pc,rZo),e(ct,tZo),e(ct,Eme),e(Eme,aZo),e(ct,nZo),g(cy,ct,null),e(ur,sZo),e(ur,uo),g(fy,uo,null),e(uo,lZo),e(uo,yme),e(yme,iZo),e(uo,dZo),e(uo,mn),e(mn,cZo),e(mn,wme),e(wme,fZo),e(mn,mZo),e(mn,Ame),e(Ame,gZo),e(mn,hZo),e(mn,Lme),e(Lme,pZo),e(mn,_Zo),e(uo,uZo),e(uo,Y),e(Y,U6),e(U6,Bme),e(Bme,bZo),e(U6,vZo),e(U6,tq),e(tq,TZo),e(U6,FZo),e(Y,CZo),e(Y,J6),e(J6,xme),e(xme,MZo),e(J6,EZo),e(J6,aq),e(aq,yZo),e(J6,wZo),e(Y,AZo),e(Y,Y6),e(Y6,kme),e(kme,LZo),e(Y6,BZo),e(Y6,nq),e(nq,xZo),e(Y6,kZo),e(Y,RZo),e(Y,K6),e(K6,Rme),e(Rme,SZo),e(K6,PZo),e(K6,sq),e(sq,$Zo),e(K6,IZo),e(Y,jZo),e(Y,Z6),e(Z6,Sme),e(Sme,NZo),e(Z6,DZo),e(Z6,lq),e(lq,qZo),e(Z6,GZo),e(Y,OZo),e(Y,eT),e(eT,Pme),e(Pme,XZo),e(eT,zZo),e(eT,iq),e(iq,VZo),e(eT,WZo),e(Y,QZo),e(Y,oT),e(oT,$me),e($me,HZo),e(oT,UZo),e(oT,dq),e(dq,JZo),e(oT,YZo),e(Y,KZo),e(Y,rT),e(rT,Ime),e(Ime,ZZo),e(rT,eer),e(rT,cq),e(cq,oer),e(rT,rer),e(Y,ter),e(Y,tT),e(tT,jme),e(jme,aer),e(tT,ner),e(tT,fq),e(fq,ser),e(tT,ler),e(Y,ier),e(Y,aT),e(aT,Nme),e(Nme,der),e(aT,cer),e(aT,mq),e(mq,fer),e(aT,mer),e(Y,ger),e(Y,nT),e(nT,Dme),e(Dme,her),e(nT,per),e(nT,gq),e(gq,_er),e(nT,uer),e(Y,ber),e(Y,sT),e(sT,qme),e(qme,ver),e(sT,Ter),e(sT,hq),e(hq,Fer),e(sT,Cer),e(Y,Mer),e(Y,lT),e(lT,Gme),e(Gme,Eer),e(lT,yer),e(lT,pq),e(pq,wer),e(lT,Aer),e(Y,Ler),e(Y,iT),e(iT,Ome),e(Ome,Ber),e(iT,xer),e(iT,_q),e(_q,ker),e(iT,Rer),e(Y,Ser),e(Y,dT),e(dT,Xme),e(Xme,Per),e(dT,$er),e(dT,uq),e(uq,Ier),e(dT,jer),e(Y,Ner),e(Y,cT),e(cT,zme),e(zme,Der),e(cT,qer),e(cT,bq),e(bq,Ger),e(cT,Oer),e(Y,Xer),e(Y,fT),e(fT,Vme),e(Vme,zer),e(fT,Ver),e(fT,vq),e(vq,Wer),e(fT,Qer),e(Y,Her),e(Y,mT),e(mT,Wme),e(Wme,Uer),e(mT,Jer),e(mT,Tq),e(Tq,Yer),e(mT,Ker),e(Y,Zer),e(Y,gT),e(gT,Qme),e(Qme,eor),e(gT,oor),e(gT,Fq),e(Fq,ror),e(gT,tor),e(Y,aor),e(Y,hT),e(hT,Hme),e(Hme,nor),e(hT,sor),e(hT,Cq),e(Cq,lor),e(hT,ior),e(uo,dor),e(uo,Ume),e(Ume,cor),e(uo,mor),g(my,uo,null),b(d,E9e,u),b(d,_c,u),e(_c,pT),e(pT,Jme),g(gy,Jme,null),e(_c,gor),e(_c,Yme),e(Yme,hor),b(d,y9e,u),b(d,br,u),g(hy,br,null),e(br,por),e(br,uc),e(uc,_or),e(uc,Kme),e(Kme,uor),e(uc,bor),e(uc,Zme),e(Zme,vor),e(uc,Tor),e(br,For),e(br,py),e(py,Cor),e(py,ege),e(ege,Mor),e(py,Eor),e(br,yor),e(br,ft),g(_y,ft,null),e(ft,wor),e(ft,oge),e(oge,Aor),e(ft,Lor),e(ft,bc),e(bc,Bor),e(bc,rge),e(rge,xor),e(bc,kor),e(bc,tge),e(tge,Ror),e(bc,Sor),e(ft,Por),e(ft,age),e(age,$or),e(ft,Ior),g(uy,ft,null),e(br,jor),e(br,bo),g(by,bo,null),e(bo,Nor),e(bo,nge),e(nge,Dor),e(bo,qor),e(bo,gn),e(gn,Gor),e(gn,sge),e(sge,Oor),e(gn,Xor),e(gn,lge),e(lge,zor),e(gn,Vor),e(gn,ige),e(ige,Wor),e(gn,Qor),e(bo,Hor),e(bo,pe),e(pe,_T),e(_T,dge),e(dge,Uor),e(_T,Jor),e(_T,Mq),e(Mq,Yor),e(_T,Kor),e(pe,Zor),e(pe,uT),e(uT,cge),e(cge,err),e(uT,orr),e(uT,Eq),e(Eq,rrr),e(uT,trr),e(pe,arr),e(pe,bT),e(bT,fge),e(fge,nrr),e(bT,srr),e(bT,yq),e(yq,lrr),e(bT,irr),e(pe,drr),e(pe,vT),e(vT,mge),e(mge,crr),e(vT,frr),e(vT,wq),e(wq,mrr),e(vT,grr),e(pe,hrr),e(pe,TT),e(TT,gge),e(gge,prr),e(TT,_rr),e(TT,Aq),e(Aq,urr),e(TT,brr),e(pe,vrr),e(pe,FT),e(FT,hge),e(hge,Trr),e(FT,Frr),e(FT,Lq),e(Lq,Crr),e(FT,Mrr),e(pe,Err),e(pe,CT),e(CT,pge),e(pge,yrr),e(CT,wrr),e(CT,Bq),e(Bq,Arr),e(CT,Lrr),e(pe,Brr),e(pe,MT),e(MT,_ge),e(_ge,xrr),e(MT,krr),e(MT,xq),e(xq,Rrr),e(MT,Srr),e(pe,Prr),e(pe,ET),e(ET,uge),e(uge,$rr),e(ET,Irr),e(ET,kq),e(kq,jrr),e(ET,Nrr),e(pe,Drr),e(pe,yT),e(yT,bge),e(bge,qrr),e(yT,Grr),e(yT,Rq),e(Rq,Orr),e(yT,Xrr),e(bo,zrr),e(bo,vge),e(vge,Vrr),e(bo,Wrr),g(vy,bo,null),b(d,w9e,u),b(d,vc,u),e(vc,wT),e(wT,Tge),g(Ty,Tge,null),e(vc,Qrr),e(vc,Fge),e(Fge,Hrr),b(d,A9e,u),b(d,vr,u),g(Fy,vr,null),e(vr,Urr),e(vr,Tc),e(Tc,Jrr),e(Tc,Cge),e(Cge,Yrr),e(Tc,Krr),e(Tc,Mge),e(Mge,Zrr),e(Tc,etr),e(vr,otr),e(vr,Cy),e(Cy,rtr),e(Cy,Ege),e(Ege,ttr),e(Cy,atr),e(vr,ntr),e(vr,mt),g(My,mt,null),e(mt,str),e(mt,yge),e(yge,ltr),e(mt,itr),e(mt,Fc),e(Fc,dtr),e(Fc,wge),e(wge,ctr),e(Fc,ftr),e(Fc,Age),e(Age,mtr),e(Fc,gtr),e(mt,htr),e(mt,Lge),e(Lge,ptr),e(mt,_tr),g(Ey,mt,null),e(vr,utr),e(vr,vo),g(yy,vo,null),e(vo,btr),e(vo,Bge),e(Bge,vtr),e(vo,Ttr),e(vo,hn),e(hn,Ftr),e(hn,xge),e(xge,Ctr),e(hn,Mtr),e(hn,kge),e(kge,Etr),e(hn,ytr),e(hn,Rge),e(Rge,wtr),e(hn,Atr),e(vo,Ltr),e(vo,X),e(X,AT),e(AT,Sge),e(Sge,Btr),e(AT,xtr),e(AT,Sq),e(Sq,ktr),e(AT,Rtr),e(X,Str),e(X,LT),e(LT,Pge),e(Pge,Ptr),e(LT,$tr),e(LT,Pq),e(Pq,Itr),e(LT,jtr),e(X,Ntr),e(X,BT),e(BT,$ge),e($ge,Dtr),e(BT,qtr),e(BT,$q),e($q,Gtr),e(BT,Otr),e(X,Xtr),e(X,xT),e(xT,Ige),e(Ige,ztr),e(xT,Vtr),e(xT,Iq),e(Iq,Wtr),e(xT,Qtr),e(X,Htr),e(X,kT),e(kT,jge),e(jge,Utr),e(kT,Jtr),e(kT,jq),e(jq,Ytr),e(kT,Ktr),e(X,Ztr),e(X,RT),e(RT,Nge),e(Nge,ear),e(RT,oar),e(RT,Nq),e(Nq,rar),e(RT,tar),e(X,aar),e(X,ST),e(ST,Dge),e(Dge,nar),e(ST,sar),e(ST,Dq),e(Dq,lar),e(ST,iar),e(X,dar),e(X,PT),e(PT,qge),e(qge,car),e(PT,far),e(PT,qq),e(qq,mar),e(PT,gar),e(X,har),e(X,$T),e($T,Gge),e(Gge,par),e($T,_ar),e($T,Gq),e(Gq,uar),e($T,bar),e(X,Tar),e(X,IT),e(IT,Oge),e(Oge,Far),e(IT,Car),e(IT,Oq),e(Oq,Mar),e(IT,Ear),e(X,yar),e(X,jT),e(jT,Xge),e(Xge,war),e(jT,Aar),e(jT,Xq),e(Xq,Lar),e(jT,Bar),e(X,xar),e(X,NT),e(NT,zge),e(zge,kar),e(NT,Rar),e(NT,zq),e(zq,Sar),e(NT,Par),e(X,$ar),e(X,DT),e(DT,Vge),e(Vge,Iar),e(DT,jar),e(DT,Vq),e(Vq,Nar),e(DT,Dar),e(X,qar),e(X,qT),e(qT,Wge),e(Wge,Gar),e(qT,Oar),e(qT,Wq),e(Wq,Xar),e(qT,zar),e(X,Var),e(X,GT),e(GT,Qge),e(Qge,War),e(GT,Qar),e(GT,Qq),e(Qq,Har),e(GT,Uar),e(X,Jar),e(X,OT),e(OT,Hge),e(Hge,Yar),e(OT,Kar),e(OT,Hq),e(Hq,Zar),e(OT,enr),e(X,onr),e(X,XT),e(XT,Uge),e(Uge,rnr),e(XT,tnr),e(XT,Uq),e(Uq,anr),e(XT,nnr),e(X,snr),e(X,zT),e(zT,Jge),e(Jge,lnr),e(zT,inr),e(zT,Jq),e(Jq,dnr),e(zT,cnr),e(X,fnr),e(X,VT),e(VT,Yge),e(Yge,mnr),e(VT,gnr),e(VT,Yq),e(Yq,hnr),e(VT,pnr),e(X,_nr),e(X,WT),e(WT,Kge),e(Kge,unr),e(WT,bnr),e(WT,Kq),e(Kq,vnr),e(WT,Tnr),e(X,Fnr),e(X,QT),e(QT,Zge),e(Zge,Cnr),e(QT,Mnr),e(QT,Zq),e(Zq,Enr),e(QT,ynr),e(X,wnr),e(X,HT),e(HT,ehe),e(ehe,Anr),e(HT,Lnr),e(HT,eG),e(eG,Bnr),e(HT,xnr),e(X,knr),e(X,UT),e(UT,ohe),e(ohe,Rnr),e(UT,Snr),e(UT,oG),e(oG,Pnr),e(UT,$nr),e(X,Inr),e(X,JT),e(JT,rhe),e(rhe,jnr),e(JT,Nnr),e(JT,rG),e(rG,Dnr),e(JT,qnr),e(X,Gnr),e(X,YT),e(YT,the),e(the,Onr),e(YT,Xnr),e(YT,tG),e(tG,znr),e(YT,Vnr),e(vo,Wnr),e(vo,ahe),e(ahe,Qnr),e(vo,Hnr),g(wy,vo,null),b(d,L9e,u),b(d,Cc,u),e(Cc,KT),e(KT,nhe),g(Ay,nhe,null),e(Cc,Unr),e(Cc,she),e(she,Jnr),b(d,B9e,u),b(d,Tr,u),g(Ly,Tr,null),e(Tr,Ynr),e(Tr,Mc),e(Mc,Knr),e(Mc,lhe),e(lhe,Znr),e(Mc,esr),e(Mc,ihe),e(ihe,osr),e(Mc,rsr),e(Tr,tsr),e(Tr,By),e(By,asr),e(By,dhe),e(dhe,nsr),e(By,ssr),e(Tr,lsr),e(Tr,gt),g(xy,gt,null),e(gt,isr),e(gt,che),e(che,dsr),e(gt,csr),e(gt,Ec),e(Ec,fsr),e(Ec,fhe),e(fhe,msr),e(Ec,gsr),e(Ec,mhe),e(mhe,hsr),e(Ec,psr),e(gt,_sr),e(gt,ghe),e(ghe,usr),e(gt,bsr),g(ky,gt,null),e(Tr,vsr),e(Tr,To),g(Ry,To,null),e(To,Tsr),e(To,hhe),e(hhe,Fsr),e(To,Csr),e(To,pn),e(pn,Msr),e(pn,phe),e(phe,Esr),e(pn,ysr),e(pn,_he),e(_he,wsr),e(pn,Asr),e(pn,uhe),e(uhe,Lsr),e(pn,Bsr),e(To,xsr),e(To,te),e(te,ZT),e(ZT,bhe),e(bhe,ksr),e(ZT,Rsr),e(ZT,aG),e(aG,Ssr),e(ZT,Psr),e(te,$sr),e(te,e7),e(e7,vhe),e(vhe,Isr),e(e7,jsr),e(e7,nG),e(nG,Nsr),e(e7,Dsr),e(te,qsr),e(te,o7),e(o7,The),e(The,Gsr),e(o7,Osr),e(o7,sG),e(sG,Xsr),e(o7,zsr),e(te,Vsr),e(te,r7),e(r7,Fhe),e(Fhe,Wsr),e(r7,Qsr),e(r7,lG),e(lG,Hsr),e(r7,Usr),e(te,Jsr),e(te,t7),e(t7,Che),e(Che,Ysr),e(t7,Ksr),e(t7,iG),e(iG,Zsr),e(t7,elr),e(te,olr),e(te,a7),e(a7,Mhe),e(Mhe,rlr),e(a7,tlr),e(a7,dG),e(dG,alr),e(a7,nlr),e(te,slr),e(te,n7),e(n7,Ehe),e(Ehe,llr),e(n7,ilr),e(n7,cG),e(cG,dlr),e(n7,clr),e(te,flr),e(te,s7),e(s7,yhe),e(yhe,mlr),e(s7,glr),e(s7,fG),e(fG,hlr),e(s7,plr),e(te,_lr),e(te,l7),e(l7,whe),e(whe,ulr),e(l7,blr),e(l7,mG),e(mG,vlr),e(l7,Tlr),e(te,Flr),e(te,i7),e(i7,Ahe),e(Ahe,Clr),e(i7,Mlr),e(i7,gG),e(gG,Elr),e(i7,ylr),e(te,wlr),e(te,d7),e(d7,Lhe),e(Lhe,Alr),e(d7,Llr),e(d7,hG),e(hG,Blr),e(d7,xlr),e(te,klr),e(te,c7),e(c7,Bhe),e(Bhe,Rlr),e(c7,Slr),e(c7,pG),e(pG,Plr),e(c7,$lr),e(te,Ilr),e(te,f7),e(f7,xhe),e(xhe,jlr),e(f7,Nlr),e(f7,_G),e(_G,Dlr),e(f7,qlr),e(te,Glr),e(te,m7),e(m7,khe),e(khe,Olr),e(m7,Xlr),e(m7,uG),e(uG,zlr),e(m7,Vlr),e(te,Wlr),e(te,g7),e(g7,Rhe),e(Rhe,Qlr),e(g7,Hlr),e(g7,bG),e(bG,Ulr),e(g7,Jlr),e(te,Ylr),e(te,h7),e(h7,She),e(She,Klr),e(h7,Zlr),e(h7,vG),e(vG,eir),e(h7,oir),e(te,rir),e(te,p7),e(p7,Phe),e(Phe,tir),e(p7,air),e(p7,TG),e(TG,nir),e(p7,sir),e(To,lir),e(To,$he),e($he,iir),e(To,dir),g(Sy,To,null),b(d,x9e,u),b(d,yc,u),e(yc,_7),e(_7,Ihe),g(Py,Ihe,null),e(yc,cir),e(yc,jhe),e(jhe,fir),b(d,k9e,u),b(d,Fr,u),g($y,Fr,null),e(Fr,mir),e(Fr,wc),e(wc,gir),e(wc,Nhe),e(Nhe,hir),e(wc,pir),e(wc,Dhe),e(Dhe,_ir),e(wc,uir),e(Fr,bir),e(Fr,Iy),e(Iy,vir),e(Iy,qhe),e(qhe,Tir),e(Iy,Fir),e(Fr,Cir),e(Fr,ht),g(jy,ht,null),e(ht,Mir),e(ht,Ghe),e(Ghe,Eir),e(ht,yir),e(ht,Ac),e(Ac,wir),e(Ac,Ohe),e(Ohe,Air),e(Ac,Lir),e(Ac,Xhe),e(Xhe,Bir),e(Ac,xir),e(ht,kir),e(ht,zhe),e(zhe,Rir),e(ht,Sir),g(Ny,ht,null),e(Fr,Pir),e(Fr,Fo),g(Dy,Fo,null),e(Fo,$ir),e(Fo,Vhe),e(Vhe,Iir),e(Fo,jir),e(Fo,_n),e(_n,Nir),e(_n,Whe),e(Whe,Dir),e(_n,qir),e(_n,Qhe),e(Qhe,Gir),e(_n,Oir),e(_n,Hhe),e(Hhe,Xir),e(_n,zir),e(Fo,Vir),e(Fo,Uhe),e(Uhe,u7),e(u7,Jhe),e(Jhe,Wir),e(u7,Qir),e(u7,FG),e(FG,Hir),e(u7,Uir),e(Fo,Jir),e(Fo,Yhe),e(Yhe,Yir),e(Fo,Kir),g(qy,Fo,null),b(d,R9e,u),b(d,Lc,u),e(Lc,b7),e(b7,Khe),g(Gy,Khe,null),e(Lc,Zir),e(Lc,Zhe),e(Zhe,edr),b(d,S9e,u),b(d,Cr,u),g(Oy,Cr,null),e(Cr,odr),e(Cr,Bc),e(Bc,rdr),e(Bc,epe),e(epe,tdr),e(Bc,adr),e(Bc,ope),e(ope,ndr),e(Bc,sdr),e(Cr,ldr),e(Cr,Xy),e(Xy,idr),e(Xy,rpe),e(rpe,ddr),e(Xy,cdr),e(Cr,fdr),e(Cr,pt),g(zy,pt,null),e(pt,mdr),e(pt,tpe),e(tpe,gdr),e(pt,hdr),e(pt,xc),e(xc,pdr),e(xc,ape),e(ape,_dr),e(xc,udr),e(xc,npe),e(npe,bdr),e(xc,vdr),e(pt,Tdr),e(pt,spe),e(spe,Fdr),e(pt,Cdr),g(Vy,pt,null),e(Cr,Mdr),e(Cr,Co),g(Wy,Co,null),e(Co,Edr),e(Co,lpe),e(lpe,ydr),e(Co,wdr),e(Co,un),e(un,Adr),e(un,ipe),e(ipe,Ldr),e(un,Bdr),e(un,dpe),e(dpe,xdr),e(un,kdr),e(un,cpe),e(cpe,Rdr),e(un,Sdr),e(Co,Pdr),e(Co,K),e(K,v7),e(v7,fpe),e(fpe,$dr),e(v7,Idr),e(v7,CG),e(CG,jdr),e(v7,Ndr),e(K,Ddr),e(K,T7),e(T7,mpe),e(mpe,qdr),e(T7,Gdr),e(T7,MG),e(MG,Odr),e(T7,Xdr),e(K,zdr),e(K,F7),e(F7,gpe),e(gpe,Vdr),e(F7,Wdr),e(F7,EG),e(EG,Qdr),e(F7,Hdr),e(K,Udr),e(K,C7),e(C7,hpe),e(hpe,Jdr),e(C7,Ydr),e(C7,yG),e(yG,Kdr),e(C7,Zdr),e(K,ecr),e(K,M7),e(M7,ppe),e(ppe,ocr),e(M7,rcr),e(M7,wG),e(wG,tcr),e(M7,acr),e(K,ncr),e(K,E7),e(E7,_pe),e(_pe,scr),e(E7,lcr),e(E7,AG),e(AG,icr),e(E7,dcr),e(K,ccr),e(K,y7),e(y7,upe),e(upe,fcr),e(y7,mcr),e(y7,LG),e(LG,gcr),e(y7,hcr),e(K,pcr),e(K,w7),e(w7,bpe),e(bpe,_cr),e(w7,ucr),e(w7,BG),e(BG,bcr),e(w7,vcr),e(K,Tcr),e(K,A7),e(A7,vpe),e(vpe,Fcr),e(A7,Ccr),e(A7,xG),e(xG,Mcr),e(A7,Ecr),e(K,ycr),e(K,L7),e(L7,Tpe),e(Tpe,wcr),e(L7,Acr),e(L7,kG),e(kG,Lcr),e(L7,Bcr),e(K,xcr),e(K,B7),e(B7,Fpe),e(Fpe,kcr),e(B7,Rcr),e(B7,RG),e(RG,Scr),e(B7,Pcr),e(K,$cr),e(K,x7),e(x7,Cpe),e(Cpe,Icr),e(x7,jcr),e(x7,SG),e(SG,Ncr),e(x7,Dcr),e(K,qcr),e(K,k7),e(k7,Mpe),e(Mpe,Gcr),e(k7,Ocr),e(k7,PG),e(PG,Xcr),e(k7,zcr),e(K,Vcr),e(K,R7),e(R7,Epe),e(Epe,Wcr),e(R7,Qcr),e(R7,$G),e($G,Hcr),e(R7,Ucr),e(K,Jcr),e(K,S7),e(S7,ype),e(ype,Ycr),e(S7,Kcr),e(S7,IG),e(IG,Zcr),e(S7,efr),e(K,ofr),e(K,P7),e(P7,wpe),e(wpe,rfr),e(P7,tfr),e(P7,jG),e(jG,afr),e(P7,nfr),e(K,sfr),e(K,$7),e($7,Ape),e(Ape,lfr),e($7,ifr),e($7,NG),e(NG,dfr),e($7,cfr),e(K,ffr),e(K,I7),e(I7,Lpe),e(Lpe,mfr),e(I7,gfr),e(I7,DG),e(DG,hfr),e(I7,pfr),e(K,_fr),e(K,j7),e(j7,Bpe),e(Bpe,ufr),e(j7,bfr),e(j7,qG),e(qG,vfr),e(j7,Tfr),e(K,Ffr),e(K,N7),e(N7,xpe),e(xpe,Cfr),e(N7,Mfr),e(N7,GG),e(GG,Efr),e(N7,yfr),e(Co,wfr),e(Co,kpe),e(kpe,Afr),e(Co,Lfr),g(Qy,Co,null),b(d,P9e,u),b(d,kc,u),e(kc,D7),e(D7,Rpe),g(Hy,Rpe,null),e(kc,Bfr),e(kc,Spe),e(Spe,xfr),b(d,$9e,u),b(d,Mr,u),g(Uy,Mr,null),e(Mr,kfr),e(Mr,Rc),e(Rc,Rfr),e(Rc,Ppe),e(Ppe,Sfr),e(Rc,Pfr),e(Rc,$pe),e($pe,$fr),e(Rc,Ifr),e(Mr,jfr),e(Mr,Jy),e(Jy,Nfr),e(Jy,Ipe),e(Ipe,Dfr),e(Jy,qfr),e(Mr,Gfr),e(Mr,_t),g(Yy,_t,null),e(_t,Ofr),e(_t,jpe),e(jpe,Xfr),e(_t,zfr),e(_t,Sc),e(Sc,Vfr),e(Sc,Npe),e(Npe,Wfr),e(Sc,Qfr),e(Sc,Dpe),e(Dpe,Hfr),e(Sc,Ufr),e(_t,Jfr),e(_t,qpe),e(qpe,Yfr),e(_t,Kfr),g(Ky,_t,null),e(Mr,Zfr),e(Mr,Mo),g(Zy,Mo,null),e(Mo,emr),e(Mo,Gpe),e(Gpe,omr),e(Mo,rmr),e(Mo,bn),e(bn,tmr),e(bn,Ope),e(Ope,amr),e(bn,nmr),e(bn,Xpe),e(Xpe,smr),e(bn,lmr),e(bn,zpe),e(zpe,imr),e(bn,dmr),e(Mo,cmr),e(Mo,Z),e(Z,q7),e(q7,Vpe),e(Vpe,fmr),e(q7,mmr),e(q7,OG),e(OG,gmr),e(q7,hmr),e(Z,pmr),e(Z,G7),e(G7,Wpe),e(Wpe,_mr),e(G7,umr),e(G7,XG),e(XG,bmr),e(G7,vmr),e(Z,Tmr),e(Z,O7),e(O7,Qpe),e(Qpe,Fmr),e(O7,Cmr),e(O7,zG),e(zG,Mmr),e(O7,Emr),e(Z,ymr),e(Z,X7),e(X7,Hpe),e(Hpe,wmr),e(X7,Amr),e(X7,VG),e(VG,Lmr),e(X7,Bmr),e(Z,xmr),e(Z,z7),e(z7,Upe),e(Upe,kmr),e(z7,Rmr),e(z7,WG),e(WG,Smr),e(z7,Pmr),e(Z,$mr),e(Z,V7),e(V7,Jpe),e(Jpe,Imr),e(V7,jmr),e(V7,QG),e(QG,Nmr),e(V7,Dmr),e(Z,qmr),e(Z,W7),e(W7,Ype),e(Ype,Gmr),e(W7,Omr),e(W7,HG),e(HG,Xmr),e(W7,zmr),e(Z,Vmr),e(Z,Q7),e(Q7,Kpe),e(Kpe,Wmr),e(Q7,Qmr),e(Q7,UG),e(UG,Hmr),e(Q7,Umr),e(Z,Jmr),e(Z,H7),e(H7,Zpe),e(Zpe,Ymr),e(H7,Kmr),e(H7,JG),e(JG,Zmr),e(H7,egr),e(Z,ogr),e(Z,U7),e(U7,e_e),e(e_e,rgr),e(U7,tgr),e(U7,YG),e(YG,agr),e(U7,ngr),e(Z,sgr),e(Z,J7),e(J7,o_e),e(o_e,lgr),e(J7,igr),e(J7,KG),e(KG,dgr),e(J7,cgr),e(Z,fgr),e(Z,Y7),e(Y7,r_e),e(r_e,mgr),e(Y7,ggr),e(Y7,ZG),e(ZG,hgr),e(Y7,pgr),e(Z,_gr),e(Z,K7),e(K7,t_e),e(t_e,ugr),e(K7,bgr),e(K7,eO),e(eO,vgr),e(K7,Tgr),e(Z,Fgr),e(Z,Z7),e(Z7,a_e),e(a_e,Cgr),e(Z7,Mgr),e(Z7,oO),e(oO,Egr),e(Z7,ygr),e(Z,wgr),e(Z,e8),e(e8,n_e),e(n_e,Agr),e(e8,Lgr),e(e8,rO),e(rO,Bgr),e(e8,xgr),e(Z,kgr),e(Z,o8),e(o8,s_e),e(s_e,Rgr),e(o8,Sgr),e(o8,tO),e(tO,Pgr),e(o8,$gr),e(Z,Igr),e(Z,r8),e(r8,l_e),e(l_e,jgr),e(r8,Ngr),e(r8,aO),e(aO,Dgr),e(r8,qgr),e(Z,Ggr),e(Z,t8),e(t8,i_e),e(i_e,Ogr),e(t8,Xgr),e(t8,nO),e(nO,zgr),e(t8,Vgr),e(Z,Wgr),e(Z,a8),e(a8,d_e),e(d_e,Qgr),e(a8,Hgr),e(a8,sO),e(sO,Ugr),e(a8,Jgr),e(Mo,Ygr),e(Mo,c_e),e(c_e,Kgr),e(Mo,Zgr),g(ew,Mo,null),b(d,I9e,u),b(d,Pc,u),e(Pc,n8),e(n8,f_e),g(ow,f_e,null),e(Pc,ehr),e(Pc,m_e),e(m_e,ohr),b(d,j9e,u),b(d,Er,u),g(rw,Er,null),e(Er,rhr),e(Er,$c),e($c,thr),e($c,g_e),e(g_e,ahr),e($c,nhr),e($c,h_e),e(h_e,shr),e($c,lhr),e(Er,ihr),e(Er,tw),e(tw,dhr),e(tw,p_e),e(p_e,chr),e(tw,fhr),e(Er,mhr),e(Er,ut),g(aw,ut,null),e(ut,ghr),e(ut,__e),e(__e,hhr),e(ut,phr),e(ut,Ic),e(Ic,_hr),e(Ic,u_e),e(u_e,uhr),e(Ic,bhr),e(Ic,b_e),e(b_e,vhr),e(Ic,Thr),e(ut,Fhr),e(ut,v_e),e(v_e,Chr),e(ut,Mhr),g(nw,ut,null),e(Er,Ehr),e(Er,Eo),g(sw,Eo,null),e(Eo,yhr),e(Eo,T_e),e(T_e,whr),e(Eo,Ahr),e(Eo,vn),e(vn,Lhr),e(vn,F_e),e(F_e,Bhr),e(vn,xhr),e(vn,C_e),e(C_e,khr),e(vn,Rhr),e(vn,M_e),e(M_e,Shr),e(vn,Phr),e(Eo,$hr),e(Eo,E_e),e(E_e,s8),e(s8,y_e),e(y_e,Ihr),e(s8,jhr),e(s8,lO),e(lO,Nhr),e(s8,Dhr),e(Eo,qhr),e(Eo,w_e),e(w_e,Ghr),e(Eo,Ohr),g(lw,Eo,null),b(d,N9e,u),b(d,jc,u),e(jc,l8),e(l8,A_e),g(iw,A_e,null),e(jc,Xhr),e(jc,L_e),e(L_e,zhr),b(d,D9e,u),b(d,yr,u),g(dw,yr,null),e(yr,Vhr),e(yr,Nc),e(Nc,Whr),e(Nc,B_e),e(B_e,Qhr),e(Nc,Hhr),e(Nc,x_e),e(x_e,Uhr),e(Nc,Jhr),e(yr,Yhr),e(yr,cw),e(cw,Khr),e(cw,k_e),e(k_e,Zhr),e(cw,epr),e(yr,opr),e(yr,bt),g(fw,bt,null),e(bt,rpr),e(bt,R_e),e(R_e,tpr),e(bt,apr),e(bt,Dc),e(Dc,npr),e(Dc,S_e),e(S_e,spr),e(Dc,lpr),e(Dc,P_e),e(P_e,ipr),e(Dc,dpr),e(bt,cpr),e(bt,$_e),e($_e,fpr),e(bt,mpr),g(mw,bt,null),e(yr,gpr),e(yr,yo),g(gw,yo,null),e(yo,hpr),e(yo,I_e),e(I_e,ppr),e(yo,_pr),e(yo,Tn),e(Tn,upr),e(Tn,j_e),e(j_e,bpr),e(Tn,vpr),e(Tn,N_e),e(N_e,Tpr),e(Tn,Fpr),e(Tn,D_e),e(D_e,Cpr),e(Tn,Mpr),e(yo,Epr),e(yo,q_e),e(q_e,i8),e(i8,G_e),e(G_e,ypr),e(i8,wpr),e(i8,iO),e(iO,Apr),e(i8,Lpr),e(yo,Bpr),e(yo,O_e),e(O_e,xpr),e(yo,kpr),g(hw,yo,null),b(d,q9e,u),b(d,qc,u),e(qc,d8),e(d8,X_e),g(pw,X_e,null),e(qc,Rpr),e(qc,z_e),e(z_e,Spr),b(d,G9e,u),b(d,wr,u),g(_w,wr,null),e(wr,Ppr),e(wr,Gc),e(Gc,$pr),e(Gc,V_e),e(V_e,Ipr),e(Gc,jpr),e(Gc,W_e),e(W_e,Npr),e(Gc,Dpr),e(wr,qpr),e(wr,uw),e(uw,Gpr),e(uw,Q_e),e(Q_e,Opr),e(uw,Xpr),e(wr,zpr),e(wr,vt),g(bw,vt,null),e(vt,Vpr),e(vt,H_e),e(H_e,Wpr),e(vt,Qpr),e(vt,Oc),e(Oc,Hpr),e(Oc,U_e),e(U_e,Upr),e(Oc,Jpr),e(Oc,J_e),e(J_e,Ypr),e(Oc,Kpr),e(vt,Zpr),e(vt,Y_e),e(Y_e,e_r),e(vt,o_r),g(vw,vt,null),e(wr,r_r),e(wr,wo),g(Tw,wo,null),e(wo,t_r),e(wo,K_e),e(K_e,a_r),e(wo,n_r),e(wo,Fn),e(Fn,s_r),e(Fn,Z_e),e(Z_e,l_r),e(Fn,i_r),e(Fn,eue),e(eue,d_r),e(Fn,c_r),e(Fn,oue),e(oue,f_r),e(Fn,m_r),e(wo,g_r),e(wo,V),e(V,c8),e(c8,rue),e(rue,h_r),e(c8,p_r),e(c8,dO),e(dO,__r),e(c8,u_r),e(V,b_r),e(V,f8),e(f8,tue),e(tue,v_r),e(f8,T_r),e(f8,cO),e(cO,F_r),e(f8,C_r),e(V,M_r),e(V,m8),e(m8,aue),e(aue,E_r),e(m8,y_r),e(m8,fO),e(fO,w_r),e(m8,A_r),e(V,L_r),e(V,g8),e(g8,nue),e(nue,B_r),e(g8,x_r),e(g8,mO),e(mO,k_r),e(g8,R_r),e(V,S_r),e(V,h8),e(h8,sue),e(sue,P_r),e(h8,$_r),e(h8,gO),e(gO,I_r),e(h8,j_r),e(V,N_r),e(V,p8),e(p8,lue),e(lue,D_r),e(p8,q_r),e(p8,hO),e(hO,G_r),e(p8,O_r),e(V,X_r),e(V,_8),e(_8,iue),e(iue,z_r),e(_8,V_r),e(_8,pO),e(pO,W_r),e(_8,Q_r),e(V,H_r),e(V,u8),e(u8,due),e(due,U_r),e(u8,J_r),e(u8,_O),e(_O,Y_r),e(u8,K_r),e(V,Z_r),e(V,b8),e(b8,cue),e(cue,eur),e(b8,our),e(b8,uO),e(uO,rur),e(b8,tur),e(V,aur),e(V,v8),e(v8,fue),e(fue,nur),e(v8,sur),e(v8,bO),e(bO,lur),e(v8,iur),e(V,dur),e(V,T8),e(T8,mue),e(mue,cur),e(T8,fur),e(T8,vO),e(vO,mur),e(T8,gur),e(V,hur),e(V,F8),e(F8,gue),e(gue,pur),e(F8,_ur),e(F8,TO),e(TO,uur),e(F8,bur),e(V,vur),e(V,C8),e(C8,hue),e(hue,Tur),e(C8,Fur),e(C8,FO),e(FO,Cur),e(C8,Mur),e(V,Eur),e(V,M8),e(M8,pue),e(pue,yur),e(M8,wur),e(M8,CO),e(CO,Aur),e(M8,Lur),e(V,Bur),e(V,E8),e(E8,_ue),e(_ue,xur),e(E8,kur),e(E8,MO),e(MO,Rur),e(E8,Sur),e(V,Pur),e(V,y8),e(y8,uue),e(uue,$ur),e(y8,Iur),e(y8,EO),e(EO,jur),e(y8,Nur),e(V,Dur),e(V,w8),e(w8,bue),e(bue,qur),e(w8,Gur),e(w8,yO),e(yO,Our),e(w8,Xur),e(V,zur),e(V,A8),e(A8,vue),e(vue,Vur),e(A8,Wur),e(A8,wO),e(wO,Qur),e(A8,Hur),e(V,Uur),e(V,L8),e(L8,Tue),e(Tue,Jur),e(L8,Yur),e(L8,AO),e(AO,Kur),e(L8,Zur),e(V,e1r),e(V,B8),e(B8,Fue),e(Fue,o1r),e(B8,r1r),e(B8,LO),e(LO,t1r),e(B8,a1r),e(V,n1r),e(V,x8),e(x8,Cue),e(Cue,s1r),e(x8,l1r),e(x8,BO),e(BO,i1r),e(x8,d1r),e(V,c1r),e(V,k8),e(k8,Mue),e(Mue,f1r),e(k8,m1r),e(k8,xO),e(xO,g1r),e(k8,h1r),e(V,p1r),e(V,R8),e(R8,Eue),e(Eue,_1r),e(R8,u1r),e(R8,kO),e(kO,b1r),e(R8,v1r),e(V,T1r),e(V,S8),e(S8,yue),e(yue,F1r),e(S8,C1r),e(S8,RO),e(RO,M1r),e(S8,E1r),e(wo,y1r),e(wo,wue),e(wue,w1r),e(wo,A1r),g(Fw,wo,null),b(d,O9e,u),b(d,Xc,u),e(Xc,P8),e(P8,Aue),g(Cw,Aue,null),e(Xc,L1r),e(Xc,Lue),e(Lue,B1r),b(d,X9e,u),b(d,Ar,u),g(Mw,Ar,null),e(Ar,x1r),e(Ar,zc),e(zc,k1r),e(zc,Bue),e(Bue,R1r),e(zc,S1r),e(zc,xue),e(xue,P1r),e(zc,$1r),e(Ar,I1r),e(Ar,Ew),e(Ew,j1r),e(Ew,kue),e(kue,N1r),e(Ew,D1r),e(Ar,q1r),e(Ar,Tt),g(yw,Tt,null),e(Tt,G1r),e(Tt,Rue),e(Rue,O1r),e(Tt,X1r),e(Tt,Vc),e(Vc,z1r),e(Vc,Sue),e(Sue,V1r),e(Vc,W1r),e(Vc,Pue),e(Pue,Q1r),e(Vc,H1r),e(Tt,U1r),e(Tt,$ue),e($ue,J1r),e(Tt,Y1r),g(ww,Tt,null),e(Ar,K1r),e(Ar,Ao),g(Aw,Ao,null),e(Ao,Z1r),e(Ao,Iue),e(Iue,ebr),e(Ao,obr),e(Ao,Cn),e(Cn,rbr),e(Cn,jue),e(jue,tbr),e(Cn,abr),e(Cn,Nue),e(Nue,nbr),e(Cn,sbr),e(Cn,Due),e(Due,lbr),e(Cn,ibr),e(Ao,dbr),e(Ao,Mn),e(Mn,$8),e($8,que),e(que,cbr),e($8,fbr),e($8,SO),e(SO,mbr),e($8,gbr),e(Mn,hbr),e(Mn,I8),e(I8,Gue),e(Gue,pbr),e(I8,_br),e(I8,PO),e(PO,ubr),e(I8,bbr),e(Mn,vbr),e(Mn,j8),e(j8,Oue),e(Oue,Tbr),e(j8,Fbr),e(j8,$O),e($O,Cbr),e(j8,Mbr),e(Mn,Ebr),e(Mn,N8),e(N8,Xue),e(Xue,ybr),e(N8,wbr),e(N8,IO),e(IO,Abr),e(N8,Lbr),e(Ao,Bbr),e(Ao,zue),e(zue,xbr),e(Ao,kbr),g(Lw,Ao,null),b(d,z9e,u),b(d,Wc,u),e(Wc,D8),e(D8,Vue),g(Bw,Vue,null),e(Wc,Rbr),e(Wc,Wue),e(Wue,Sbr),b(d,V9e,u),b(d,Lr,u),g(xw,Lr,null),e(Lr,Pbr),e(Lr,Qc),e(Qc,$br),e(Qc,Que),e(Que,Ibr),e(Qc,jbr),e(Qc,Hue),e(Hue,Nbr),e(Qc,Dbr),e(Lr,qbr),e(Lr,kw),e(kw,Gbr),e(kw,Uue),e(Uue,Obr),e(kw,Xbr),e(Lr,zbr),e(Lr,Ft),g(Rw,Ft,null),e(Ft,Vbr),e(Ft,Jue),e(Jue,Wbr),e(Ft,Qbr),e(Ft,Hc),e(Hc,Hbr),e(Hc,Yue),e(Yue,Ubr),e(Hc,Jbr),e(Hc,Kue),e(Kue,Ybr),e(Hc,Kbr),e(Ft,Zbr),e(Ft,Zue),e(Zue,e5r),e(Ft,o5r),g(Sw,Ft,null),e(Lr,r5r),e(Lr,Lo),g(Pw,Lo,null),e(Lo,t5r),e(Lo,e1e),e(e1e,a5r),e(Lo,n5r),e(Lo,En),e(En,s5r),e(En,o1e),e(o1e,l5r),e(En,i5r),e(En,r1e),e(r1e,d5r),e(En,c5r),e(En,t1e),e(t1e,f5r),e(En,m5r),e(Lo,g5r),e(Lo,fe),e(fe,q8),e(q8,a1e),e(a1e,h5r),e(q8,p5r),e(q8,jO),e(jO,_5r),e(q8,u5r),e(fe,b5r),e(fe,G8),e(G8,n1e),e(n1e,v5r),e(G8,T5r),e(G8,NO),e(NO,F5r),e(G8,C5r),e(fe,M5r),e(fe,O8),e(O8,s1e),e(s1e,E5r),e(O8,y5r),e(O8,DO),e(DO,w5r),e(O8,A5r),e(fe,L5r),e(fe,X8),e(X8,l1e),e(l1e,B5r),e(X8,x5r),e(X8,qO),e(qO,k5r),e(X8,R5r),e(fe,S5r),e(fe,z8),e(z8,i1e),e(i1e,P5r),e(z8,$5r),e(z8,GO),e(GO,I5r),e(z8,j5r),e(fe,N5r),e(fe,V8),e(V8,d1e),e(d1e,D5r),e(V8,q5r),e(V8,OO),e(OO,G5r),e(V8,O5r),e(fe,X5r),e(fe,W8),e(W8,c1e),e(c1e,z5r),e(W8,V5r),e(W8,XO),e(XO,W5r),e(W8,Q5r),e(fe,H5r),e(fe,Q8),e(Q8,f1e),e(f1e,U5r),e(Q8,J5r),e(Q8,zO),e(zO,Y5r),e(Q8,K5r),e(fe,Z5r),e(fe,H8),e(H8,m1e),e(m1e,e2r),e(H8,o2r),e(H8,VO),e(VO,r2r),e(H8,t2r),e(fe,a2r),e(fe,U8),e(U8,g1e),e(g1e,n2r),e(U8,s2r),e(U8,WO),e(WO,l2r),e(U8,i2r),e(fe,d2r),e(fe,J8),e(J8,h1e),e(h1e,c2r),e(J8,f2r),e(J8,QO),e(QO,m2r),e(J8,g2r),e(Lo,h2r),e(Lo,p1e),e(p1e,p2r),e(Lo,_2r),g($w,Lo,null),b(d,W9e,u),b(d,Uc,u),e(Uc,Y8),e(Y8,_1e),g(Iw,_1e,null),e(Uc,u2r),e(Uc,u1e),e(u1e,b2r),b(d,Q9e,u),b(d,Br,u),g(jw,Br,null),e(Br,v2r),e(Br,Jc),e(Jc,T2r),e(Jc,b1e),e(b1e,F2r),e(Jc,C2r),e(Jc,v1e),e(v1e,M2r),e(Jc,E2r),e(Br,y2r),e(Br,Nw),e(Nw,w2r),e(Nw,T1e),e(T1e,A2r),e(Nw,L2r),e(Br,B2r),e(Br,Ct),g(Dw,Ct,null),e(Ct,x2r),e(Ct,F1e),e(F1e,k2r),e(Ct,R2r),e(Ct,Yc),e(Yc,S2r),e(Yc,C1e),e(C1e,P2r),e(Yc,$2r),e(Yc,M1e),e(M1e,I2r),e(Yc,j2r),e(Ct,N2r),e(Ct,E1e),e(E1e,D2r),e(Ct,q2r),g(qw,Ct,null),e(Br,G2r),e(Br,Bo),g(Gw,Bo,null),e(Bo,O2r),e(Bo,y1e),e(y1e,X2r),e(Bo,z2r),e(Bo,yn),e(yn,V2r),e(yn,w1e),e(w1e,W2r),e(yn,Q2r),e(yn,A1e),e(A1e,H2r),e(yn,U2r),e(yn,L1e),e(L1e,J2r),e(yn,Y2r),e(Bo,K2r),e(Bo,ve),e(ve,K8),e(K8,B1e),e(B1e,Z2r),e(K8,evr),e(K8,HO),e(HO,ovr),e(K8,rvr),e(ve,tvr),e(ve,Z8),e(Z8,x1e),e(x1e,avr),e(Z8,nvr),e(Z8,UO),e(UO,svr),e(Z8,lvr),e(ve,ivr),e(ve,eF),e(eF,k1e),e(k1e,dvr),e(eF,cvr),e(eF,JO),e(JO,fvr),e(eF,mvr),e(ve,gvr),e(ve,oF),e(oF,R1e),e(R1e,hvr),e(oF,pvr),e(oF,YO),e(YO,_vr),e(oF,uvr),e(ve,bvr),e(ve,rF),e(rF,S1e),e(S1e,vvr),e(rF,Tvr),e(rF,KO),e(KO,Fvr),e(rF,Cvr),e(ve,Mvr),e(ve,tF),e(tF,P1e),e(P1e,Evr),e(tF,yvr),e(tF,ZO),e(ZO,wvr),e(tF,Avr),e(ve,Lvr),e(ve,aF),e(aF,$1e),e($1e,Bvr),e(aF,xvr),e(aF,eX),e(eX,kvr),e(aF,Rvr),e(ve,Svr),e(ve,nF),e(nF,I1e),e(I1e,Pvr),e(nF,$vr),e(nF,oX),e(oX,Ivr),e(nF,jvr),e(ve,Nvr),e(ve,sF),e(sF,j1e),e(j1e,Dvr),e(sF,qvr),e(sF,rX),e(rX,Gvr),e(sF,Ovr),e(Bo,Xvr),e(Bo,N1e),e(N1e,zvr),e(Bo,Vvr),g(Ow,Bo,null),b(d,H9e,u),b(d,Kc,u),e(Kc,lF),e(lF,D1e),g(Xw,D1e,null),e(Kc,Wvr),e(Kc,q1e),e(q1e,Qvr),b(d,U9e,u),b(d,xr,u),g(zw,xr,null),e(xr,Hvr),e(xr,Zc),e(Zc,Uvr),e(Zc,G1e),e(G1e,Jvr),e(Zc,Yvr),e(Zc,O1e),e(O1e,Kvr),e(Zc,Zvr),e(xr,e6r),e(xr,Vw),e(Vw,o6r),e(Vw,X1e),e(X1e,r6r),e(Vw,t6r),e(xr,a6r),e(xr,Mt),g(Ww,Mt,null),e(Mt,n6r),e(Mt,z1e),e(z1e,s6r),e(Mt,l6r),e(Mt,ef),e(ef,i6r),e(ef,V1e),e(V1e,d6r),e(ef,c6r),e(ef,W1e),e(W1e,f6r),e(ef,m6r),e(Mt,g6r),e(Mt,Q1e),e(Q1e,h6r),e(Mt,p6r),g(Qw,Mt,null),e(xr,_6r),e(xr,xo),g(Hw,xo,null),e(xo,u6r),e(xo,H1e),e(H1e,b6r),e(xo,v6r),e(xo,wn),e(wn,T6r),e(wn,U1e),e(U1e,F6r),e(wn,C6r),e(wn,J1e),e(J1e,M6r),e(wn,E6r),e(wn,Y1e),e(Y1e,y6r),e(wn,w6r),e(xo,A6r),e(xo,Te),e(Te,iF),e(iF,K1e),e(K1e,L6r),e(iF,B6r),e(iF,tX),e(tX,x6r),e(iF,k6r),e(Te,R6r),e(Te,dF),e(dF,Z1e),e(Z1e,S6r),e(dF,P6r),e(dF,aX),e(aX,$6r),e(dF,I6r),e(Te,j6r),e(Te,cF),e(cF,ebe),e(ebe,N6r),e(cF,D6r),e(cF,nX),e(nX,q6r),e(cF,G6r),e(Te,O6r),e(Te,fF),e(fF,obe),e(obe,X6r),e(fF,z6r),e(fF,sX),e(sX,V6r),e(fF,W6r),e(Te,Q6r),e(Te,mF),e(mF,rbe),e(rbe,H6r),e(mF,U6r),e(mF,lX),e(lX,J6r),e(mF,Y6r),e(Te,K6r),e(Te,gF),e(gF,tbe),e(tbe,Z6r),e(gF,eTr),e(gF,iX),e(iX,oTr),e(gF,rTr),e(Te,tTr),e(Te,hF),e(hF,abe),e(abe,aTr),e(hF,nTr),e(hF,dX),e(dX,sTr),e(hF,lTr),e(Te,iTr),e(Te,pF),e(pF,nbe),e(nbe,dTr),e(pF,cTr),e(pF,cX),e(cX,fTr),e(pF,mTr),e(Te,gTr),e(Te,_F),e(_F,sbe),e(sbe,hTr),e(_F,pTr),e(_F,fX),e(fX,_Tr),e(_F,uTr),e(xo,bTr),e(xo,lbe),e(lbe,vTr),e(xo,TTr),g(Uw,xo,null),b(d,J9e,u),b(d,of,u),e(of,uF),e(uF,ibe),g(Jw,ibe,null),e(of,FTr),e(of,dbe),e(dbe,CTr),b(d,Y9e,u),b(d,kr,u),g(Yw,kr,null),e(kr,MTr),e(kr,rf),e(rf,ETr),e(rf,cbe),e(cbe,yTr),e(rf,wTr),e(rf,fbe),e(fbe,ATr),e(rf,LTr),e(kr,BTr),e(kr,Kw),e(Kw,xTr),e(Kw,mbe),e(mbe,kTr),e(Kw,RTr),e(kr,STr),e(kr,Et),g(Zw,Et,null),e(Et,PTr),e(Et,gbe),e(gbe,$Tr),e(Et,ITr),e(Et,tf),e(tf,jTr),e(tf,hbe),e(hbe,NTr),e(tf,DTr),e(tf,pbe),e(pbe,qTr),e(tf,GTr),e(Et,OTr),e(Et,_be),e(_be,XTr),e(Et,zTr),g(eA,Et,null),e(kr,VTr),e(kr,ko),g(oA,ko,null),e(ko,WTr),e(ko,ube),e(ube,QTr),e(ko,HTr),e(ko,An),e(An,UTr),e(An,bbe),e(bbe,JTr),e(An,YTr),e(An,vbe),e(vbe,KTr),e(An,ZTr),e(An,Tbe),e(Tbe,e7r),e(An,o7r),e(ko,r7r),e(ko,Fe),e(Fe,bF),e(bF,Fbe),e(Fbe,t7r),e(bF,a7r),e(bF,mX),e(mX,n7r),e(bF,s7r),e(Fe,l7r),e(Fe,vF),e(vF,Cbe),e(Cbe,i7r),e(vF,d7r),e(vF,gX),e(gX,c7r),e(vF,f7r),e(Fe,m7r),e(Fe,TF),e(TF,Mbe),e(Mbe,g7r),e(TF,h7r),e(TF,hX),e(hX,p7r),e(TF,_7r),e(Fe,u7r),e(Fe,FF),e(FF,Ebe),e(Ebe,b7r),e(FF,v7r),e(FF,pX),e(pX,T7r),e(FF,F7r),e(Fe,C7r),e(Fe,CF),e(CF,ybe),e(ybe,M7r),e(CF,E7r),e(CF,_X),e(_X,y7r),e(CF,w7r),e(Fe,A7r),e(Fe,MF),e(MF,wbe),e(wbe,L7r),e(MF,B7r),e(MF,uX),e(uX,x7r),e(MF,k7r),e(Fe,R7r),e(Fe,EF),e(EF,Abe),e(Abe,S7r),e(EF,P7r),e(EF,bX),e(bX,$7r),e(EF,I7r),e(Fe,j7r),e(Fe,yF),e(yF,Lbe),e(Lbe,N7r),e(yF,D7r),e(yF,vX),e(vX,q7r),e(yF,G7r),e(Fe,O7r),e(Fe,wF),e(wF,Bbe),e(Bbe,X7r),e(wF,z7r),e(wF,TX),e(TX,V7r),e(wF,W7r),e(ko,Q7r),e(ko,xbe),e(xbe,H7r),e(ko,U7r),g(rA,ko,null),b(d,K9e,u),b(d,af,u),e(af,AF),e(AF,kbe),g(tA,kbe,null),e(af,J7r),e(af,Rbe),e(Rbe,Y7r),b(d,Z9e,u),b(d,Rr,u),g(aA,Rr,null),e(Rr,K7r),e(Rr,nf),e(nf,Z7r),e(nf,Sbe),e(Sbe,e8r),e(nf,o8r),e(nf,Pbe),e(Pbe,r8r),e(nf,t8r),e(Rr,a8r),e(Rr,nA),e(nA,n8r),e(nA,$be),e($be,s8r),e(nA,l8r),e(Rr,i8r),e(Rr,yt),g(sA,yt,null),e(yt,d8r),e(yt,Ibe),e(Ibe,c8r),e(yt,f8r),e(yt,sf),e(sf,m8r),e(sf,jbe),e(jbe,g8r),e(sf,h8r),e(sf,Nbe),e(Nbe,p8r),e(sf,_8r),e(yt,u8r),e(yt,Dbe),e(Dbe,b8r),e(yt,v8r),g(lA,yt,null),e(Rr,T8r),e(Rr,Ro),g(iA,Ro,null),e(Ro,F8r),e(Ro,qbe),e(qbe,C8r),e(Ro,M8r),e(Ro,Ln),e(Ln,E8r),e(Ln,Gbe),e(Gbe,y8r),e(Ln,w8r),e(Ln,Obe),e(Obe,A8r),e(Ln,L8r),e(Ln,Xbe),e(Xbe,B8r),e(Ln,x8r),e(Ro,k8r),e(Ro,Ce),e(Ce,LF),e(LF,zbe),e(zbe,R8r),e(LF,S8r),e(LF,FX),e(FX,P8r),e(LF,$8r),e(Ce,I8r),e(Ce,BF),e(BF,Vbe),e(Vbe,j8r),e(BF,N8r),e(BF,CX),e(CX,D8r),e(BF,q8r),e(Ce,G8r),e(Ce,xF),e(xF,Wbe),e(Wbe,O8r),e(xF,X8r),e(xF,MX),e(MX,z8r),e(xF,V8r),e(Ce,W8r),e(Ce,kF),e(kF,Qbe),e(Qbe,Q8r),e(kF,H8r),e(kF,EX),e(EX,U8r),e(kF,J8r),e(Ce,Y8r),e(Ce,RF),e(RF,Hbe),e(Hbe,K8r),e(RF,Z8r),e(RF,yX),e(yX,eFr),e(RF,oFr),e(Ce,rFr),e(Ce,SF),e(SF,Ube),e(Ube,tFr),e(SF,aFr),e(SF,wX),e(wX,nFr),e(SF,sFr),e(Ce,lFr),e(Ce,PF),e(PF,Jbe),e(Jbe,iFr),e(PF,dFr),e(PF,AX),e(AX,cFr),e(PF,fFr),e(Ce,mFr),e(Ce,$F),e($F,Ybe),e(Ybe,gFr),e($F,hFr),e($F,LX),e(LX,pFr),e($F,_Fr),e(Ce,uFr),e(Ce,IF),e(IF,Kbe),e(Kbe,bFr),e(IF,vFr),e(IF,BX),e(BX,TFr),e(IF,FFr),e(Ro,CFr),e(Ro,Zbe),e(Zbe,MFr),e(Ro,EFr),g(dA,Ro,null),b(d,eBe,u),b(d,lf,u),e(lf,jF),e(jF,e5e),g(cA,e5e,null),e(lf,yFr),e(lf,o5e),e(o5e,wFr),b(d,oBe,u),b(d,Sr,u),g(fA,Sr,null),e(Sr,AFr),e(Sr,df),e(df,LFr),e(df,r5e),e(r5e,BFr),e(df,xFr),e(df,t5e),e(t5e,kFr),e(df,RFr),e(Sr,SFr),e(Sr,mA),e(mA,PFr),e(mA,a5e),e(a5e,$Fr),e(mA,IFr),e(Sr,jFr),e(Sr,wt),g(gA,wt,null),e(wt,NFr),e(wt,n5e),e(n5e,DFr),e(wt,qFr),e(wt,cf),e(cf,GFr),e(cf,s5e),e(s5e,OFr),e(cf,XFr),e(cf,l5e),e(l5e,zFr),e(cf,VFr),e(wt,WFr),e(wt,i5e),e(i5e,QFr),e(wt,HFr),g(hA,wt,null),e(Sr,UFr),e(Sr,So),g(pA,So,null),e(So,JFr),e(So,d5e),e(d5e,YFr),e(So,KFr),e(So,Bn),e(Bn,ZFr),e(Bn,c5e),e(c5e,eCr),e(Bn,oCr),e(Bn,f5e),e(f5e,rCr),e(Bn,tCr),e(Bn,m5e),e(m5e,aCr),e(Bn,nCr),e(So,sCr),e(So,so),e(so,NF),e(NF,g5e),e(g5e,lCr),e(NF,iCr),e(NF,xX),e(xX,dCr),e(NF,cCr),e(so,fCr),e(so,DF),e(DF,h5e),e(h5e,mCr),e(DF,gCr),e(DF,kX),e(kX,hCr),e(DF,pCr),e(so,_Cr),e(so,qF),e(qF,p5e),e(p5e,uCr),e(qF,bCr),e(qF,RX),e(RX,vCr),e(qF,TCr),e(so,FCr),e(so,GF),e(GF,_5e),e(_5e,CCr),e(GF,MCr),e(GF,SX),e(SX,ECr),e(GF,yCr),e(so,wCr),e(so,OF),e(OF,u5e),e(u5e,ACr),e(OF,LCr),e(OF,PX),e(PX,BCr),e(OF,xCr),e(so,kCr),e(so,XF),e(XF,b5e),e(b5e,RCr),e(XF,SCr),e(XF,$X),e($X,PCr),e(XF,$Cr),e(so,ICr),e(so,zF),e(zF,v5e),e(v5e,jCr),e(zF,NCr),e(zF,IX),e(IX,DCr),e(zF,qCr),e(So,GCr),e(So,T5e),e(T5e,OCr),e(So,XCr),g(_A,So,null),b(d,rBe,u),b(d,ff,u),e(ff,VF),e(VF,F5e),g(uA,F5e,null),e(ff,zCr),e(ff,C5e),e(C5e,VCr),b(d,tBe,u),b(d,Pr,u),g(bA,Pr,null),e(Pr,WCr),e(Pr,mf),e(mf,QCr),e(mf,M5e),e(M5e,HCr),e(mf,UCr),e(mf,E5e),e(E5e,JCr),e(mf,YCr),e(Pr,KCr),e(Pr,vA),e(vA,ZCr),e(vA,y5e),e(y5e,e4r),e(vA,o4r),e(Pr,r4r),e(Pr,At),g(TA,At,null),e(At,t4r),e(At,w5e),e(w5e,a4r),e(At,n4r),e(At,gf),e(gf,s4r),e(gf,A5e),e(A5e,l4r),e(gf,i4r),e(gf,L5e),e(L5e,d4r),e(gf,c4r),e(At,f4r),e(At,B5e),e(B5e,m4r),e(At,g4r),g(FA,At,null),e(Pr,h4r),e(Pr,Po),g(CA,Po,null),e(Po,p4r),e(Po,x5e),e(x5e,_4r),e(Po,u4r),e(Po,xn),e(xn,b4r),e(xn,k5e),e(k5e,v4r),e(xn,T4r),e(xn,R5e),e(R5e,F4r),e(xn,C4r),e(xn,S5e),e(S5e,M4r),e(xn,E4r),e(Po,y4r),e(Po,lo),e(lo,WF),e(WF,P5e),e(P5e,w4r),e(WF,A4r),e(WF,jX),e(jX,L4r),e(WF,B4r),e(lo,x4r),e(lo,QF),e(QF,$5e),e($5e,k4r),e(QF,R4r),e(QF,NX),e(NX,S4r),e(QF,P4r),e(lo,$4r),e(lo,HF),e(HF,I5e),e(I5e,I4r),e(HF,j4r),e(HF,DX),e(DX,N4r),e(HF,D4r),e(lo,q4r),e(lo,UF),e(UF,j5e),e(j5e,G4r),e(UF,O4r),e(UF,qX),e(qX,X4r),e(UF,z4r),e(lo,V4r),e(lo,JF),e(JF,N5e),e(N5e,W4r),e(JF,Q4r),e(JF,GX),e(GX,H4r),e(JF,U4r),e(lo,J4r),e(lo,YF),e(YF,D5e),e(D5e,Y4r),e(YF,K4r),e(YF,OX),e(OX,Z4r),e(YF,eMr),e(lo,oMr),e(lo,KF),e(KF,q5e),e(q5e,rMr),e(KF,tMr),e(KF,XX),e(XX,aMr),e(KF,nMr),e(Po,sMr),e(Po,G5e),e(G5e,lMr),e(Po,iMr),g(MA,Po,null),b(d,aBe,u),b(d,hf,u),e(hf,ZF),e(ZF,O5e),g(EA,O5e,null),e(hf,dMr),e(hf,X5e),e(X5e,cMr),b(d,nBe,u),b(d,$r,u),g(yA,$r,null),e($r,fMr),e($r,pf),e(pf,mMr),e(pf,z5e),e(z5e,gMr),e(pf,hMr),e(pf,V5e),e(V5e,pMr),e(pf,_Mr),e($r,uMr),e($r,wA),e(wA,bMr),e(wA,W5e),e(W5e,vMr),e(wA,TMr),e($r,FMr),e($r,Lt),g(AA,Lt,null),e(Lt,CMr),e(Lt,Q5e),e(Q5e,MMr),e(Lt,EMr),e(Lt,_f),e(_f,yMr),e(_f,H5e),e(H5e,wMr),e(_f,AMr),e(_f,U5e),e(U5e,LMr),e(_f,BMr),e(Lt,xMr),e(Lt,J5e),e(J5e,kMr),e(Lt,RMr),g(LA,Lt,null),e($r,SMr),e($r,$o),g(BA,$o,null),e($o,PMr),e($o,Y5e),e(Y5e,$Mr),e($o,IMr),e($o,kn),e(kn,jMr),e(kn,K5e),e(K5e,NMr),e(kn,DMr),e(kn,Z5e),e(Z5e,qMr),e(kn,GMr),e(kn,e2e),e(e2e,OMr),e(kn,XMr),e($o,zMr),e($o,o2e),e(o2e,eC),e(eC,r2e),e(r2e,VMr),e(eC,WMr),e(eC,zX),e(zX,QMr),e(eC,HMr),e($o,UMr),e($o,t2e),e(t2e,JMr),e($o,YMr),g(xA,$o,null),b(d,sBe,u),b(d,uf,u),e(uf,oC),e(oC,a2e),g(kA,a2e,null),e(uf,KMr),e(uf,n2e),e(n2e,ZMr),b(d,lBe,u),b(d,Ir,u),g(RA,Ir,null),e(Ir,eEr),e(Ir,bf),e(bf,oEr),e(bf,s2e),e(s2e,rEr),e(bf,tEr),e(bf,l2e),e(l2e,aEr),e(bf,nEr),e(Ir,sEr),e(Ir,SA),e(SA,lEr),e(SA,i2e),e(i2e,iEr),e(SA,dEr),e(Ir,cEr),e(Ir,Bt),g(PA,Bt,null),e(Bt,fEr),e(Bt,d2e),e(d2e,mEr),e(Bt,gEr),e(Bt,vf),e(vf,hEr),e(vf,c2e),e(c2e,pEr),e(vf,_Er),e(vf,f2e),e(f2e,uEr),e(vf,bEr),e(Bt,vEr),e(Bt,m2e),e(m2e,TEr),e(Bt,FEr),g($A,Bt,null),e(Ir,CEr),e(Ir,Io),g(IA,Io,null),e(Io,MEr),e(Io,g2e),e(g2e,EEr),e(Io,yEr),e(Io,Rn),e(Rn,wEr),e(Rn,h2e),e(h2e,AEr),e(Rn,LEr),e(Rn,p2e),e(p2e,BEr),e(Rn,xEr),e(Rn,_2e),e(_2e,kEr),e(Rn,REr),e(Io,SEr),e(Io,jA),e(jA,rC),e(rC,u2e),e(u2e,PEr),e(rC,$Er),e(rC,VX),e(VX,IEr),e(rC,jEr),e(jA,NEr),e(jA,tC),e(tC,b2e),e(b2e,DEr),e(tC,qEr),e(tC,WX),e(WX,GEr),e(tC,OEr),e(Io,XEr),e(Io,v2e),e(v2e,zEr),e(Io,VEr),g(NA,Io,null),b(d,iBe,u),b(d,Tf,u),e(Tf,aC),e(aC,T2e),g(DA,T2e,null),e(Tf,WEr),e(Tf,F2e),e(F2e,QEr),b(d,dBe,u),b(d,jr,u),g(qA,jr,null),e(jr,HEr),e(jr,Ff),e(Ff,UEr),e(Ff,C2e),e(C2e,JEr),e(Ff,YEr),e(Ff,M2e),e(M2e,KEr),e(Ff,ZEr),e(jr,e3r),e(jr,GA),e(GA,o3r),e(GA,E2e),e(E2e,r3r),e(GA,t3r),e(jr,a3r),e(jr,xt),g(OA,xt,null),e(xt,n3r),e(xt,y2e),e(y2e,s3r),e(xt,l3r),e(xt,Cf),e(Cf,i3r),e(Cf,w2e),e(w2e,d3r),e(Cf,c3r),e(Cf,A2e),e(A2e,f3r),e(Cf,m3r),e(xt,g3r),e(xt,L2e),e(L2e,h3r),e(xt,p3r),g(XA,xt,null),e(jr,_3r),e(jr,jo),g(zA,jo,null),e(jo,u3r),e(jo,B2e),e(B2e,b3r),e(jo,v3r),e(jo,Sn),e(Sn,T3r),e(Sn,x2e),e(x2e,F3r),e(Sn,C3r),e(Sn,k2e),e(k2e,M3r),e(Sn,E3r),e(Sn,R2e),e(R2e,y3r),e(Sn,w3r),e(jo,A3r),e(jo,S2e),e(S2e,nC),e(nC,P2e),e(P2e,L3r),e(nC,B3r),e(nC,QX),e(QX,x3r),e(nC,k3r),e(jo,R3r),e(jo,$2e),e($2e,S3r),e(jo,P3r),g(VA,jo,null),cBe=!0},p(d,[u]){const WA={};u&2&&(WA.$$scope={dirty:u,ctx:d}),Bf.$set(WA);const I2e={};u&2&&(I2e.$$scope={dirty:u,ctx:d}),ih.$set(I2e);const j2e={};u&2&&(j2e.$$scope={dirty:u,ctx:d}),vh.$set(j2e)},i(d){cBe||(h(ce.$$.fragment,d),h($a.$$.fragment,d),h(l4.$$.fragment,d),h(i4.$$.fragment,d),h(Bf.$$.fragment,d),h(d4.$$.fragment,d),h(c4.$$.fragment,d),h(g4.$$.fragment,d),h(h4.$$.fragment,d),h(p4.$$.fragment,d),h(_4.$$.fragment,d),h(u4.$$.fragment,d),h(T4.$$.fragment,d),h(F4.$$.fragment,d),h(C4.$$.fragment,d),h(M4.$$.fragment,d),h(E4.$$.fragment,d),h(A4.$$.fragment,d),h(ih.$$.fragment,d),h(L4.$$.fragment,d),h(B4.$$.fragment,d),h(x4.$$.fragment,d),h(k4.$$.fragment,d),h(P4.$$.fragment,d),h(vh.$$.fragment,d),h($4.$$.fragment,d),h(I4.$$.fragment,d),h(j4.$$.fragment,d),h(N4.$$.fragment,d),h(q4.$$.fragment,d),h(G4.$$.fragment,d),h(O4.$$.fragment,d),h(X4.$$.fragment,d),h(z4.$$.fragment,d),h(V4.$$.fragment,d),h(Q4.$$.fragment,d),h(H4.$$.fragment,d),h(U4.$$.fragment,d),h(J4.$$.fragment,d),h(Y4.$$.fragment,d),h(K4.$$.fragment,d),h(eM.$$.fragment,d),h(oM.$$.fragment,d),h(rM.$$.fragment,d),h(tM.$$.fragment,d),h(aM.$$.fragment,d),h(nM.$$.fragment,d),h(lM.$$.fragment,d),h(iM.$$.fragment,d),h(dM.$$.fragment,d),h(cM.$$.fragment,d),h(fM.$$.fragment,d),h(mM.$$.fragment,d),h(hM.$$.fragment,d),h(pM.$$.fragment,d),h(_M.$$.fragment,d),h(uM.$$.fragment,d),h(bM.$$.fragment,d),h(vM.$$.fragment,d),h(FM.$$.fragment,d),h(CM.$$.fragment,d),h(MM.$$.fragment,d),h(EM.$$.fragment,d),h(yM.$$.fragment,d),h(wM.$$.fragment,d),h(LM.$$.fragment,d),h(BM.$$.fragment,d),h(xM.$$.fragment,d),h(kM.$$.fragment,d),h(RM.$$.fragment,d),h(SM.$$.fragment,d),h($M.$$.fragment,d),h(IM.$$.fragment,d),h(jM.$$.fragment,d),h(NM.$$.fragment,d),h(DM.$$.fragment,d),h(qM.$$.fragment,d),h(OM.$$.fragment,d),h(XM.$$.fragment,d),h(zM.$$.fragment,d),h(VM.$$.fragment,d),h(WM.$$.fragment,d),h(QM.$$.fragment,d),h(UM.$$.fragment,d),h(JM.$$.fragment,d),h(YM.$$.fragment,d),h(KM.$$.fragment,d),h(ZM.$$.fragment,d),h(eE.$$.fragment,d),h(rE.$$.fragment,d),h(tE.$$.fragment,d),h(aE.$$.fragment,d),h(nE.$$.fragment,d),h(sE.$$.fragment,d),h(lE.$$.fragment,d),h(dE.$$.fragment,d),h(cE.$$.fragment,d),h(fE.$$.fragment,d),h(mE.$$.fragment,d),h(gE.$$.fragment,d),h(hE.$$.fragment,d),h(_E.$$.fragment,d),h(uE.$$.fragment,d),h(bE.$$.fragment,d),h(vE.$$.fragment,d),h(TE.$$.fragment,d),h(FE.$$.fragment,d),h(ME.$$.fragment,d),h(EE.$$.fragment,d),h(yE.$$.fragment,d),h(wE.$$.fragment,d),h(AE.$$.fragment,d),h(LE.$$.fragment,d),h(xE.$$.fragment,d),h(kE.$$.fragment,d),h(RE.$$.fragment,d),h(SE.$$.fragment,d),h(PE.$$.fragment,d),h($E.$$.fragment,d),h(jE.$$.fragment,d),h(NE.$$.fragment,d),h(DE.$$.fragment,d),h(qE.$$.fragment,d),h(GE.$$.fragment,d),h(OE.$$.fragment,d),h(zE.$$.fragment,d),h(VE.$$.fragment,d),h(WE.$$.fragment,d),h(HE.$$.fragment,d),h(UE.$$.fragment,d),h(JE.$$.fragment,d),h(KE.$$.fragment,d),h(ZE.$$.fragment,d),h(e3.$$.fragment,d),h(o3.$$.fragment,d),h(r3.$$.fragment,d),h(t3.$$.fragment,d),h(n3.$$.fragment,d),h(s3.$$.fragment,d),h(l3.$$.fragment,d),h(i3.$$.fragment,d),h(d3.$$.fragment,d),h(c3.$$.fragment,d),h(m3.$$.fragment,d),h(g3.$$.fragment,d),h(h3.$$.fragment,d),h(p3.$$.fragment,d),h(_3.$$.fragment,d),h(u3.$$.fragment,d),h(v3.$$.fragment,d),h(T3.$$.fragment,d),h(F3.$$.fragment,d),h(C3.$$.fragment,d),h(M3.$$.fragment,d),h(E3.$$.fragment,d),h(w3.$$.fragment,d),h(A3.$$.fragment,d),h(L3.$$.fragment,d),h(x3.$$.fragment,d),h(k3.$$.fragment,d),h(R3.$$.fragment,d),h(P3.$$.fragment,d),h($3.$$.fragment,d),h(I3.$$.fragment,d),h(j3.$$.fragment,d),h(N3.$$.fragment,d),h(D3.$$.fragment,d),h(G3.$$.fragment,d),h(O3.$$.fragment,d),h(X3.$$.fragment,d),h(z3.$$.fragment,d),h(V3.$$.fragment,d),h(W3.$$.fragment,d),h(H3.$$.fragment,d),h(U3.$$.fragment,d),h(J3.$$.fragment,d),h(Y3.$$.fragment,d),h(K3.$$.fragment,d),h(Z3.$$.fragment,d),h(oy.$$.fragment,d),h(ry.$$.fragment,d),h(ty.$$.fragment,d),h(ny.$$.fragment,d),h(sy.$$.fragment,d),h(ly.$$.fragment,d),h(dy.$$.fragment,d),h(cy.$$.fragment,d),h(fy.$$.fragment,d),h(my.$$.fragment,d),h(gy.$$.fragment,d),h(hy.$$.fragment,d),h(_y.$$.fragment,d),h(uy.$$.fragment,d),h(by.$$.fragment,d),h(vy.$$.fragment,d),h(Ty.$$.fragment,d),h(Fy.$$.fragment,d),h(My.$$.fragment,d),h(Ey.$$.fragment,d),h(yy.$$.fragment,d),h(wy.$$.fragment,d),h(Ay.$$.fragment,d),h(Ly.$$.fragment,d),h(xy.$$.fragment,d),h(ky.$$.fragment,d),h(Ry.$$.fragment,d),h(Sy.$$.fragment,d),h(Py.$$.fragment,d),h($y.$$.fragment,d),h(jy.$$.fragment,d),h(Ny.$$.fragment,d),h(Dy.$$.fragment,d),h(qy.$$.fragment,d),h(Gy.$$.fragment,d),h(Oy.$$.fragment,d),h(zy.$$.fragment,d),h(Vy.$$.fragment,d),h(Wy.$$.fragment,d),h(Qy.$$.fragment,d),h(Hy.$$.fragment,d),h(Uy.$$.fragment,d),h(Yy.$$.fragment,d),h(Ky.$$.fragment,d),h(Zy.$$.fragment,d),h(ew.$$.fragment,d),h(ow.$$.fragment,d),h(rw.$$.fragment,d),h(aw.$$.fragment,d),h(nw.$$.fragment,d),h(sw.$$.fragment,d),h(lw.$$.fragment,d),h(iw.$$.fragment,d),h(dw.$$.fragment,d),h(fw.$$.fragment,d),h(mw.$$.fragment,d),h(gw.$$.fragment,d),h(hw.$$.fragment,d),h(pw.$$.fragment,d),h(_w.$$.fragment,d),h(bw.$$.fragment,d),h(vw.$$.fragment,d),h(Tw.$$.fragment,d),h(Fw.$$.fragment,d),h(Cw.$$.fragment,d),h(Mw.$$.fragment,d),h(yw.$$.fragment,d),h(ww.$$.fragment,d),h(Aw.$$.fragment,d),h(Lw.$$.fragment,d),h(Bw.$$.fragment,d),h(xw.$$.fragment,d),h(Rw.$$.fragment,d),h(Sw.$$.fragment,d),h(Pw.$$.fragment,d),h($w.$$.fragment,d),h(Iw.$$.fragment,d),h(jw.$$.fragment,d),h(Dw.$$.fragment,d),h(qw.$$.fragment,d),h(Gw.$$.fragment,d),h(Ow.$$.fragment,d),h(Xw.$$.fragment,d),h(zw.$$.fragment,d),h(Ww.$$.fragment,d),h(Qw.$$.fragment,d),h(Hw.$$.fragment,d),h(Uw.$$.fragment,d),h(Jw.$$.fragment,d),h(Yw.$$.fragment,d),h(Zw.$$.fragment,d),h(eA.$$.fragment,d),h(oA.$$.fragment,d),h(rA.$$.fragment,d),h(tA.$$.fragment,d),h(aA.$$.fragment,d),h(sA.$$.fragment,d),h(lA.$$.fragment,d),h(iA.$$.fragment,d),h(dA.$$.fragment,d),h(cA.$$.fragment,d),h(fA.$$.fragment,d),h(gA.$$.fragment,d),h(hA.$$.fragment,d),h(pA.$$.fragment,d),h(_A.$$.fragment,d),h(uA.$$.fragment,d),h(bA.$$.fragment,d),h(TA.$$.fragment,d),h(FA.$$.fragment,d),h(CA.$$.fragment,d),h(MA.$$.fragment,d),h(EA.$$.fragment,d),h(yA.$$.fragment,d),h(AA.$$.fragment,d),h(LA.$$.fragment,d),h(BA.$$.fragment,d),h(xA.$$.fragment,d),h(kA.$$.fragment,d),h(RA.$$.fragment,d),h(PA.$$.fragment,d),h($A.$$.fragment,d),h(IA.$$.fragment,d),h(NA.$$.fragment,d),h(DA.$$.fragment,d),h(qA.$$.fragment,d),h(OA.$$.fragment,d),h(XA.$$.fragment,d),h(zA.$$.fragment,d),h(VA.$$.fragment,d),cBe=!0)},o(d){p(ce.$$.fragment,d),p($a.$$.fragment,d),p(l4.$$.fragment,d),p(i4.$$.fragment,d),p(Bf.$$.fragment,d),p(d4.$$.fragment,d),p(c4.$$.fragment,d),p(g4.$$.fragment,d),p(h4.$$.fragment,d),p(p4.$$.fragment,d),p(_4.$$.fragment,d),p(u4.$$.fragment,d),p(T4.$$.fragment,d),p(F4.$$.fragment,d),p(C4.$$.fragment,d),p(M4.$$.fragment,d),p(E4.$$.fragment,d),p(A4.$$.fragment,d),p(ih.$$.fragment,d),p(L4.$$.fragment,d),p(B4.$$.fragment,d),p(x4.$$.fragment,d),p(k4.$$.fragment,d),p(P4.$$.fragment,d),p(vh.$$.fragment,d),p($4.$$.fragment,d),p(I4.$$.fragment,d),p(j4.$$.fragment,d),p(N4.$$.fragment,d),p(q4.$$.fragment,d),p(G4.$$.fragment,d),p(O4.$$.fragment,d),p(X4.$$.fragment,d),p(z4.$$.fragment,d),p(V4.$$.fragment,d),p(Q4.$$.fragment,d),p(H4.$$.fragment,d),p(U4.$$.fragment,d),p(J4.$$.fragment,d),p(Y4.$$.fragment,d),p(K4.$$.fragment,d),p(eM.$$.fragment,d),p(oM.$$.fragment,d),p(rM.$$.fragment,d),p(tM.$$.fragment,d),p(aM.$$.fragment,d),p(nM.$$.fragment,d),p(lM.$$.fragment,d),p(iM.$$.fragment,d),p(dM.$$.fragment,d),p(cM.$$.fragment,d),p(fM.$$.fragment,d),p(mM.$$.fragment,d),p(hM.$$.fragment,d),p(pM.$$.fragment,d),p(_M.$$.fragment,d),p(uM.$$.fragment,d),p(bM.$$.fragment,d),p(vM.$$.fragment,d),p(FM.$$.fragment,d),p(CM.$$.fragment,d),p(MM.$$.fragment,d),p(EM.$$.fragment,d),p(yM.$$.fragment,d),p(wM.$$.fragment,d),p(LM.$$.fragment,d),p(BM.$$.fragment,d),p(xM.$$.fragment,d),p(kM.$$.fragment,d),p(RM.$$.fragment,d),p(SM.$$.fragment,d),p($M.$$.fragment,d),p(IM.$$.fragment,d),p(jM.$$.fragment,d),p(NM.$$.fragment,d),p(DM.$$.fragment,d),p(qM.$$.fragment,d),p(OM.$$.fragment,d),p(XM.$$.fragment,d),p(zM.$$.fragment,d),p(VM.$$.fragment,d),p(WM.$$.fragment,d),p(QM.$$.fragment,d),p(UM.$$.fragment,d),p(JM.$$.fragment,d),p(YM.$$.fragment,d),p(KM.$$.fragment,d),p(ZM.$$.fragment,d),p(eE.$$.fragment,d),p(rE.$$.fragment,d),p(tE.$$.fragment,d),p(aE.$$.fragment,d),p(nE.$$.fragment,d),p(sE.$$.fragment,d),p(lE.$$.fragment,d),p(dE.$$.fragment,d),p(cE.$$.fragment,d),p(fE.$$.fragment,d),p(mE.$$.fragment,d),p(gE.$$.fragment,d),p(hE.$$.fragment,d),p(_E.$$.fragment,d),p(uE.$$.fragment,d),p(bE.$$.fragment,d),p(vE.$$.fragment,d),p(TE.$$.fragment,d),p(FE.$$.fragment,d),p(ME.$$.fragment,d),p(EE.$$.fragment,d),p(yE.$$.fragment,d),p(wE.$$.fragment,d),p(AE.$$.fragment,d),p(LE.$$.fragment,d),p(xE.$$.fragment,d),p(kE.$$.fragment,d),p(RE.$$.fragment,d),p(SE.$$.fragment,d),p(PE.$$.fragment,d),p($E.$$.fragment,d),p(jE.$$.fragment,d),p(NE.$$.fragment,d),p(DE.$$.fragment,d),p(qE.$$.fragment,d),p(GE.$$.fragment,d),p(OE.$$.fragment,d),p(zE.$$.fragment,d),p(VE.$$.fragment,d),p(WE.$$.fragment,d),p(HE.$$.fragment,d),p(UE.$$.fragment,d),p(JE.$$.fragment,d),p(KE.$$.fragment,d),p(ZE.$$.fragment,d),p(e3.$$.fragment,d),p(o3.$$.fragment,d),p(r3.$$.fragment,d),p(t3.$$.fragment,d),p(n3.$$.fragment,d),p(s3.$$.fragment,d),p(l3.$$.fragment,d),p(i3.$$.fragment,d),p(d3.$$.fragment,d),p(c3.$$.fragment,d),p(m3.$$.fragment,d),p(g3.$$.fragment,d),p(h3.$$.fragment,d),p(p3.$$.fragment,d),p(_3.$$.fragment,d),p(u3.$$.fragment,d),p(v3.$$.fragment,d),p(T3.$$.fragment,d),p(F3.$$.fragment,d),p(C3.$$.fragment,d),p(M3.$$.fragment,d),p(E3.$$.fragment,d),p(w3.$$.fragment,d),p(A3.$$.fragment,d),p(L3.$$.fragment,d),p(x3.$$.fragment,d),p(k3.$$.fragment,d),p(R3.$$.fragment,d),p(P3.$$.fragment,d),p($3.$$.fragment,d),p(I3.$$.fragment,d),p(j3.$$.fragment,d),p(N3.$$.fragment,d),p(D3.$$.fragment,d),p(G3.$$.fragment,d),p(O3.$$.fragment,d),p(X3.$$.fragment,d),p(z3.$$.fragment,d),p(V3.$$.fragment,d),p(W3.$$.fragment,d),p(H3.$$.fragment,d),p(U3.$$.fragment,d),p(J3.$$.fragment,d),p(Y3.$$.fragment,d),p(K3.$$.fragment,d),p(Z3.$$.fragment,d),p(oy.$$.fragment,d),p(ry.$$.fragment,d),p(ty.$$.fragment,d),p(ny.$$.fragment,d),p(sy.$$.fragment,d),p(ly.$$.fragment,d),p(dy.$$.fragment,d),p(cy.$$.fragment,d),p(fy.$$.fragment,d),p(my.$$.fragment,d),p(gy.$$.fragment,d),p(hy.$$.fragment,d),p(_y.$$.fragment,d),p(uy.$$.fragment,d),p(by.$$.fragment,d),p(vy.$$.fragment,d),p(Ty.$$.fragment,d),p(Fy.$$.fragment,d),p(My.$$.fragment,d),p(Ey.$$.fragment,d),p(yy.$$.fragment,d),p(wy.$$.fragment,d),p(Ay.$$.fragment,d),p(Ly.$$.fragment,d),p(xy.$$.fragment,d),p(ky.$$.fragment,d),p(Ry.$$.fragment,d),p(Sy.$$.fragment,d),p(Py.$$.fragment,d),p($y.$$.fragment,d),p(jy.$$.fragment,d),p(Ny.$$.fragment,d),p(Dy.$$.fragment,d),p(qy.$$.fragment,d),p(Gy.$$.fragment,d),p(Oy.$$.fragment,d),p(zy.$$.fragment,d),p(Vy.$$.fragment,d),p(Wy.$$.fragment,d),p(Qy.$$.fragment,d),p(Hy.$$.fragment,d),p(Uy.$$.fragment,d),p(Yy.$$.fragment,d),p(Ky.$$.fragment,d),p(Zy.$$.fragment,d),p(ew.$$.fragment,d),p(ow.$$.fragment,d),p(rw.$$.fragment,d),p(aw.$$.fragment,d),p(nw.$$.fragment,d),p(sw.$$.fragment,d),p(lw.$$.fragment,d),p(iw.$$.fragment,d),p(dw.$$.fragment,d),p(fw.$$.fragment,d),p(mw.$$.fragment,d),p(gw.$$.fragment,d),p(hw.$$.fragment,d),p(pw.$$.fragment,d),p(_w.$$.fragment,d),p(bw.$$.fragment,d),p(vw.$$.fragment,d),p(Tw.$$.fragment,d),p(Fw.$$.fragment,d),p(Cw.$$.fragment,d),p(Mw.$$.fragment,d),p(yw.$$.fragment,d),p(ww.$$.fragment,d),p(Aw.$$.fragment,d),p(Lw.$$.fragment,d),p(Bw.$$.fragment,d),p(xw.$$.fragment,d),p(Rw.$$.fragment,d),p(Sw.$$.fragment,d),p(Pw.$$.fragment,d),p($w.$$.fragment,d),p(Iw.$$.fragment,d),p(jw.$$.fragment,d),p(Dw.$$.fragment,d),p(qw.$$.fragment,d),p(Gw.$$.fragment,d),p(Ow.$$.fragment,d),p(Xw.$$.fragment,d),p(zw.$$.fragment,d),p(Ww.$$.fragment,d),p(Qw.$$.fragment,d),p(Hw.$$.fragment,d),p(Uw.$$.fragment,d),p(Jw.$$.fragment,d),p(Yw.$$.fragment,d),p(Zw.$$.fragment,d),p(eA.$$.fragment,d),p(oA.$$.fragment,d),p(rA.$$.fragment,d),p(tA.$$.fragment,d),p(aA.$$.fragment,d),p(sA.$$.fragment,d),p(lA.$$.fragment,d),p(iA.$$.fragment,d),p(dA.$$.fragment,d),p(cA.$$.fragment,d),p(fA.$$.fragment,d),p(gA.$$.fragment,d),p(hA.$$.fragment,d),p(pA.$$.fragment,d),p(_A.$$.fragment,d),p(uA.$$.fragment,d),p(bA.$$.fragment,d),p(TA.$$.fragment,d),p(FA.$$.fragment,d),p(CA.$$.fragment,d),p(MA.$$.fragment,d),p(EA.$$.fragment,d),p(yA.$$.fragment,d),p(AA.$$.fragment,d),p(LA.$$.fragment,d),p(BA.$$.fragment,d),p(xA.$$.fragment,d),p(kA.$$.fragment,d),p(RA.$$.fragment,d),p(PA.$$.fragment,d),p($A.$$.fragment,d),p(IA.$$.fragment,d),p(NA.$$.fragment,d),p(DA.$$.fragment,d),p(qA.$$.fragment,d),p(OA.$$.fragment,d),p(XA.$$.fragment,d),p(zA.$$.fragment,d),p(VA.$$.fragment,d),cBe=!1},d(d){t(J),d&&t(Ae),d&&t(ie),_(ce),d&&t(Ef),d&&t(sa),d&&t(ye),d&&t(io),d&&t(wf),_($a,d),d&&t(co),d&&t(ge),d&&t(qo),d&&t(Ia),d&&t(fLe),d&&t(Si),_(l4),d&&t(mLe),d&&t(Nn),d&&t(gLe),_(i4,d),d&&t(hLe),d&&t(Q0),d&&t(pLe),_(Bf,d),d&&t(_Le),d&&t(Pi),_(d4),d&&t(uLe),d&&t(Go),_(c4),_(g4),_(h4),_(p4),d&&t(bLe),d&&t(Ii),_(_4),d&&t(vLe),d&&t(Oo),_(u4),_(T4),_(F4),_(C4),d&&t(TLe),d&&t(ji),_(M4),d&&t(FLe),d&&t(Xo),_(E4),_(A4),_(ih),_(L4),_(B4),d&&t(CLe),d&&t(Ni),_(x4),d&&t(MLe),d&&t(zo),_(k4),_(P4),_(vh),_($4),_(I4),d&&t(ELe),d&&t(qi),_(j4),d&&t(yLe),d&&t(Vo),_(N4),_(q4),_(G4),_(O4),_(X4),d&&t(wLe),d&&t(Xi),_(z4),d&&t(ALe),d&&t(Wo),_(V4),_(Q4),_(H4),_(U4),_(J4),d&&t(LLe),d&&t(Wi),_(Y4),d&&t(BLe),d&&t(Qo),_(K4),_(eM),_(oM),_(rM),_(tM),d&&t(xLe),d&&t(Ui),_(aM),d&&t(kLe),d&&t(Ho),_(nM),_(lM),_(iM),_(dM),_(cM),d&&t(RLe),d&&t(Ki),_(fM),d&&t(SLe),d&&t(Uo),_(mM),_(hM),_(pM),_(_M),_(uM),d&&t(PLe),d&&t(od),_(bM),d&&t($Le),d&&t(Jo),_(vM),_(FM),_(CM),_(MM),_(EM),d&&t(ILe),d&&t(ad),_(yM),d&&t(jLe),d&&t(Yo),_(wM),_(LM),_(BM),_(xM),_(kM),d&&t(NLe),d&&t(ld),_(RM),d&&t(DLe),d&&t(Ko),_(SM),_($M),_(IM),_(jM),_(NM),d&&t(qLe),d&&t(cd),_(DM),d&&t(GLe),d&&t(Zo),_(qM),_(OM),_(XM),_(zM),_(VM),d&&t(OLe),d&&t(gd),_(WM),d&&t(XLe),d&&t(er),_(QM),_(UM),_(JM),_(YM),_(KM),d&&t(zLe),d&&t(_d),_(ZM),d&&t(VLe),d&&t(or),_(eE),_(rE),_(tE),_(aE),_(nE),d&&t(WLe),d&&t(vd),_(sE),d&&t(QLe),d&&t(rr),_(lE),_(dE),_(cE),_(fE),_(mE),d&&t(HLe),d&&t(Cd),_(gE),d&&t(ULe),d&&t(tr),_(hE),_(_E),_(uE),_(bE),_(vE),d&&t(JLe),d&&t(yd),_(TE),d&&t(YLe),d&&t(ar),_(FE),_(ME),_(EE),_(yE),_(wE),d&&t(KLe),d&&t(Ld),_(AE),d&&t(ZLe),d&&t(nr),_(LE),_(xE),_(kE),_(RE),_(SE),d&&t(e9e),d&&t(Rd),_(PE),d&&t(o9e),d&&t(sr),_($E),_(jE),_(NE),_(DE),_(qE),d&&t(r9e),d&&t($d),_(GE),d&&t(t9e),d&&t(lr),_(OE),_(zE),_(VE),_(WE),_(HE),d&&t(a9e),d&&t(Nd),_(UE),d&&t(n9e),d&&t(ir),_(JE),_(KE),_(ZE),_(e3),_(o3),d&&t(s9e),d&&t(Od),_(r3),d&&t(l9e),d&&t(dr),_(t3),_(n3),_(s3),_(l3),_(i3),d&&t(i9e),d&&t(Wd),_(d3),d&&t(d9e),d&&t(cr),_(c3),_(m3),_(g3),_(h3),_(p3),d&&t(c9e),d&&t(Ud),_(_3),d&&t(f9e),d&&t(fr),_(u3),_(v3),_(T3),_(F3),_(C3),d&&t(m9e),d&&t(Kd),_(M3),d&&t(g9e),d&&t(mr),_(E3),_(w3),_(A3),_(L3),_(x3),d&&t(h9e),d&&t(oc),_(k3),d&&t(p9e),d&&t(gr),_(R3),_(P3),_($3),_(I3),_(j3),d&&t(_9e),d&&t(ac),_(N3),d&&t(u9e),d&&t(hr),_(D3),_(G3),_(O3),_(X3),_(z3),d&&t(b9e),d&&t(lc),_(V3),d&&t(v9e),d&&t(pr),_(W3),_(H3),_(U3),_(J3),_(Y3),d&&t(T9e),d&&t(cc),_(K3),d&&t(F9e),d&&t(_r),_(Z3),_(oy),_(ry),_(ty),_(ny),d&&t(C9e),d&&t(gc),_(sy),d&&t(M9e),d&&t(ur),_(ly),_(dy),_(cy),_(fy),_(my),d&&t(E9e),d&&t(_c),_(gy),d&&t(y9e),d&&t(br),_(hy),_(_y),_(uy),_(by),_(vy),d&&t(w9e),d&&t(vc),_(Ty),d&&t(A9e),d&&t(vr),_(Fy),_(My),_(Ey),_(yy),_(wy),d&&t(L9e),d&&t(Cc),_(Ay),d&&t(B9e),d&&t(Tr),_(Ly),_(xy),_(ky),_(Ry),_(Sy),d&&t(x9e),d&&t(yc),_(Py),d&&t(k9e),d&&t(Fr),_($y),_(jy),_(Ny),_(Dy),_(qy),d&&t(R9e),d&&t(Lc),_(Gy),d&&t(S9e),d&&t(Cr),_(Oy),_(zy),_(Vy),_(Wy),_(Qy),d&&t(P9e),d&&t(kc),_(Hy),d&&t($9e),d&&t(Mr),_(Uy),_(Yy),_(Ky),_(Zy),_(ew),d&&t(I9e),d&&t(Pc),_(ow),d&&t(j9e),d&&t(Er),_(rw),_(aw),_(nw),_(sw),_(lw),d&&t(N9e),d&&t(jc),_(iw),d&&t(D9e),d&&t(yr),_(dw),_(fw),_(mw),_(gw),_(hw),d&&t(q9e),d&&t(qc),_(pw),d&&t(G9e),d&&t(wr),_(_w),_(bw),_(vw),_(Tw),_(Fw),d&&t(O9e),d&&t(Xc),_(Cw),d&&t(X9e),d&&t(Ar),_(Mw),_(yw),_(ww),_(Aw),_(Lw),d&&t(z9e),d&&t(Wc),_(Bw),d&&t(V9e),d&&t(Lr),_(xw),_(Rw),_(Sw),_(Pw),_($w),d&&t(W9e),d&&t(Uc),_(Iw),d&&t(Q9e),d&&t(Br),_(jw),_(Dw),_(qw),_(Gw),_(Ow),d&&t(H9e),d&&t(Kc),_(Xw),d&&t(U9e),d&&t(xr),_(zw),_(Ww),_(Qw),_(Hw),_(Uw),d&&t(J9e),d&&t(of),_(Jw),d&&t(Y9e),d&&t(kr),_(Yw),_(Zw),_(eA),_(oA),_(rA),d&&t(K9e),d&&t(af),_(tA),d&&t(Z9e),d&&t(Rr),_(aA),_(sA),_(lA),_(iA),_(dA),d&&t(eBe),d&&t(lf),_(cA),d&&t(oBe),d&&t(Sr),_(fA),_(gA),_(hA),_(pA),_(_A),d&&t(rBe),d&&t(ff),_(uA),d&&t(tBe),d&&t(Pr),_(bA),_(TA),_(FA),_(CA),_(MA),d&&t(aBe),d&&t(hf),_(EA),d&&t(nBe),d&&t($r),_(yA),_(AA),_(LA),_(BA),_(xA),d&&t(sBe),d&&t(uf),_(kA),d&&t(lBe),d&&t(Ir),_(RA),_(PA),_($A),_(IA),_(NA),d&&t(iBe),d&&t(Tf),_(DA),d&&t(dBe),d&&t(jr),_(qA),_(OA),_(XA),_(zA),_(VA)}}}const Q_t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function H_t(yi,J,Ae){let{fw:ie}=J;return yi.$$set=me=>{"fw"in me&&Ae(0,ie=me.fw)},[ie]}class out extends D_t{constructor(J){super();q_t(this,J,H_t,W_t,G_t,{fw:0})}}export{out as default,Q_t as metadata};
